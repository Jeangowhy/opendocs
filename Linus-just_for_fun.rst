.. figure:: https://m.media-amazon.com/images/I/91loXJheUJL._SY522_.jpg

   Linus 自传 [Just for FUN]

--------------------------------------------------------
Just for Fun --- Linus Torvalds 自传 
========================================================

*  ``前言：生活的意义 (性、战争、Linux) ...............................`` [P01]_
*  ``第一章 一个书呆子的诞生 ........................................`` [P02]_
*  ``1、大鼻子的孩子 ............................................`` [P03]_
*  ``2、外公的计算机 ............................................`` [P04]_
*  ``3、芬兰的严冬 .............................................`` [P05]_
*  ``4、我的家族 ..............................................`` [P06]_
*  ``5、中学时代 ..............................................`` [P07]_
*  ``6、长大成人 ..............................................`` [P08]_
*  ``7、爱洗桑拿的国家 ...........................................`` [P09]_
*  ``第二章 一种操作系统的诞生 .......................................`` [P10]_
*  ``1 昨天的电脑..............................................`` [P11]_
*  ``2、上大学 ...............................................`` [P12]_
*  ``3、从 UNIX 开始 ........................................`` [P13]_
*  ``4、第一台386和终端仿真........................................`` [P14]_
*  ``第三章 编程的美妙 ...........................................`` [P15]_
*  ``1、 开始编程 .............................................`` [P16]_
*  ``2、长腿的终端仿真器 ..........................................`` [P17]_
*  ``3、寻求网上帮助 ............................................`` [P18]_
*  ``4、Linux .............................................`` [P19]_
*  ``5、开放源代码 .............................................`` [P20]_
*  ``6、Linux 有了用户 ........................................`` [P21]_
*  ``7、Linux 能换来金钱吗？ .....................................`` [P22]_
*  ``8、MINIX 对 Linux  ....................................`` [P23]_
*  ``9、最后的冲刺 .............................................`` [P24]_
*  ``10、塔芙 ...............................................`` [P25]_
*  ``第4章 舞会上的国王 ..........................................`` [P26]_
*  ``1、1.0 版本闪亮登场 ........................................`` [P27]_
*  ``2、版权之争 ..............................................`` [P28]_
*  ``3、去硅谷  ..............................................`` [P29]_
*  ``4、在 Transmeta 领地上的生活  ...............................`` [P30]_
*  ``5、欢迎来到硅谷  ...........................................`` [P31]_
*  ``6、一夜功成名就  ...........................................`` [P32]_
*  ``7、财富的到来  ............................................`` [P33]_
*  ``9、媒体的攻击 .............................................`` [P34]_
*  ``10、舞会上的国王 ...........................................`` [P35]_
*  ``11、还会再干  ............................................`` [P36]_
*  ``第五章 知识产权 ............................................`` [P37]_
*  ``1、各种观点 ..............................................`` [P38]_
*  ``2、结束控制  .............................................`` [P39]_
*  ``3、未来的娱乐之旅  ..........................................`` [P40]_
*  ``5、名声与财富  ............................................`` [P41]_
*  ``6、生活的意义  ............................................`` [P42]_

Copyright [美]李纳斯·托沃兹, 大卫·戴蒙 

如果大家有20元钱，还是去支持一下出版此书的出版社吧！各地新华书店有售！没有？？那将就的看这个吧！:( 

英文版本目录：

*  ``Introduction: Post-its from a Revolution                  `` [PE01]_
*  ``Preface: The Meaning of Life I (Sex, War, Linux)          `` [PE02]_
*  ``Birth of a NERD                                           `` [PE03]_
*  ``I                                                         `` [PE04]_
*  ``II                                                        `` [PE05]_
*  ``III                                                       `` [PE06]_
*  ``IV                                                        `` [PE07]_
*  ``V                                                         `` [PE08]_
*  ``VI                                                        `` [PE09]_
*  ``VII                                                       `` [PE10]_
*  ``Birth of an OPERATING SYSTEM[1]                           `` [PE11]_
*  ``I                                                         `` [PE12]_
*  ``II                                                        `` [PE13]_
*  ``III                                                       `` [PE14]_
*  ``IV                                                        `` [PE15]_
*  ``VI                                                        `` [PE16]_
*  ``V: The Beauty of Programming                              `` [PE17]_
*  ``VII                                                       `` [PE18]_
*  ``VIII                                                      `` [PE19]_
*  ``IX                                                        `` [PE20]_
*  ``X: Minix vs. Linux                                        `` [PE21]_
*  ``XI                                                        `` [PE22]_
*  ``XII                                                       `` [PE23]_
*  ``King of the BALL                                          `` [PE24]_
*  ``I                                                         `` [PE25]_
*  ``II                                                        `` [PE26]_
*  ``III                                                       `` [PE27]_
*  ``IV                                                        `` [PE28]_
*  ``V                                                         `` [PE29]_
*  ``VI                                                        `` [PE30]_
*  ``VII                                                       `` [PE31]_
*  ``VIII                                                      `` [PE32]_
*  ``IX: Is the Linux Revolution Over?                         `` [PE33]_
*  ``By Scott Berinato, PC Week                                `` [PE34]_
*  ``X                                                         `` [PE35]_
*  ``XI                                                        `` [PE36]_
*  ``XII                                                       `` [PE37]_
*  ``Intellectual Property                                     `` [PE38]_
*  ``An End to Control                                         `` [PE39]_
*  ``THE AMUSEMENT RIDE AHEAD                                  `` [PE40]_
*  ``WHY OPEN SOURCE MAKES SENSE                               `` [PE41]_
*  ``FAME AND FORTUNE                                          `` [PE42]_
*  ``THE MEANING OF LIFE II                                    `` [PE43]_
*  ``Back Cover                                                `` [PE44]_


.. _P01:

--------------------------------------------------------
前言：生活的意义 (性、战争、Linux) 
========================================================


   背景：这本书开始写于一辆黑色的福特牌汽车上。 

   这辆车沿着州际五号公路朝南开去，行驶在加利福尼亚中部山谷的某个地方。李纳斯·托沃兹、他的妻子塔芙·托沃兹、他们的两个小女儿帕特里夏和丹妮亚拉，在一个外人的陪同下，旅行351英里去洛杉矶参观那里的动物园和一家宜家家居商店的分店。 

   大卫：我现在正在思索一个最基本的问题，而且非常重要。你在这部书里想表达什么？李纳斯：我想解释生命的意义。 

   塔芙：李纳斯，你没有忘记给车子加油吧？李纳斯：我对生命的意义有种理论。我们可以在第一章里对人们解释生命的意义何在。这样可以吸引住他们。一旦他们被吸引住，并且付钱买了书，剩下的章节里我们就可以胡扯了。 

   大卫：哦，是的。这倒像个计划。有人对我说，人类自从诞生起就一直有两个悬而未决的问题。第一个是：“生命的意义何在？”第二个是：“在一天结束时，我攒下的所有零花钱能干些什么？”李纳斯：我有对第一个问题的回答。 

   大卫：答案是什么？李纳斯：这个答案基本上简单而漂亮。它不会给你的生活以任何意义，但可以告诉你将发生什么。有三件事具有生命的意义。它们是你生活当中所有事情的动机，包括你所做的任何事情和一个生命体该做的所有事情。第一是生存，第二是社会秩序，第三是娱乐。生活中所有的事情都是按这个顺序发展的。娱乐之后便一无所的。因此从某种意义上说，这意味着生活的意义就是要达到第三个阶段。你一旦达到了第三个阶段，就算成功了。但首先要越过前两个阶段。 

   大卫：你需要详细解释一下。 

   帕特里夏：爸爸，我们能不能停车买个巧克力冰淇淋？我现在想吃冰淇淋。 

   塔芙：小宝贝，不行。你得等一等，等我们停下来去上厕所时你才可以吃冰淇淋。 

   李纳斯：我给你举几个例子来说明这一观点。最明显的是性，它开始只是一种延续生命的手段，后来变成了一种社会性的行为，比如你要结婚才能得到性。再后来，它成了一种娱乐。 

   帕特里夏：这么说我得上厕所了？大卫：性为什么是娱乐？李纳斯：好吧，我是在对牛弹琴。我举一个别的例子。 

   大卫：不必，还是说说性。 

   李纳斯：它是在另一个层次上的…… 

   大卫(自言自语)：哦，参与就是娱乐，而不是在一旁观看。好，我明白了。 

   李纳斯：…… 

   假如你从生物学的角度观察性行为，就是在另一个层次上。性一开始是怎么来的？是生存。最初它不是娱乐，后来两者融合在一起了。好，我们先把性放下。 

   大卫：别，我想这可以写整整一个章节。 

   李纳斯：我们还是来谈谈战争吧。很明显，它最初起源于生存，因为在你和水源之间有一个高个子家伙挡道。再后来，你必须和那个家伙为争夺一个妻子而搏斗。之后，就成了一种社会秩序。中世纪之前很长一段时间里战争就是这个样子。 

   大卫：战争是建立社会秩序的手段。 

   李纳斯：没错。但它也是把人自己塑造成社会秩序中一部分的手段，而对于社会秩序本身谁也不关心。人人关心的是在那个秩序中自己的位置。无论你是一只按实力划分成等级的鸡还是一个人，都是如此。 

   大卫：如今战争已成为娱乐？李纳斯：对。 

   大卫：也许那些在电视上观看战争节目的人，会觉得战争非常有意思。 

   李纳斯：电脑游戏。战争游戏。有线电视新闻网。战争的原因也常常很有意思。对战争的看法也是娱乐。对性的需求其原因也常常是娱乐。当然，生存的功能没有泯灭，尤其是当你是一个天主教徒的时候，对不对？但即使你是一个天主教徒，有时你想到性的时候也包含享乐的需要。所以这并非只是纯粹的娱乐。在所有的事物中，一部分动机可能是生存，另一部分可能是社会秩序，剩下的就是娱乐。好，我说说技术。技术最初也是生存。生存的意思并非只是生存而已，而是为了生存得更好。为了从井里打水人类才发明了风车…… 

   大卫：火的发明也是这样。 

   李纳斯：对。这仍是为了生存，还没有达到社会秩序和娱乐的阶段。 

   大卫：技术是怎样进入社会秩序阶段的？李纳斯：其实工业化的目的主要是生存需要，或者为了生存得更好。比如生产汽车，它便意味着制造出更快更漂亮的汽车。然后技术便达到了社会层面的阶段。这时我们有了电话。在某种程度上，也有了电视。早期许多电视节目主要是为了给大众洗脑。电台也是如此，许多国家常常投资电台，为的就是社会秩序的原因。 

   大卫：建立和维持社会秩序…… 

   李纳斯：没错，然后又超越了那个阶段。今天，电视显然主要是为了娱乐。如今你才可以到处看到手机，手机现在大体上还处于社会的层面，但也正在朝娱乐的阶段发展。 

   大卫：那么技术的未来将会怎样？我们已经超越了生存阶段，现在正处于社会阶段，是这样吗？李纳斯：对。过去所有技术都是为了使生活更容易一些。是为了快点达到一个地点，货品更便宜一些，住进更好的房子等等。那么信息技术与过去的技术有何区别呢？人人都建立起联系后又会怎样呢，还有什么可做的？当然人们之间的联系可以建立得很好，但从根本上说与过去没什么区别。因此技术将把我们引向何处？依我看，下一个巨大的步伐就是迈向娱乐。 

   大卫：你的意思是，一切的一切最终都将演变成娱乐…… 

   李纳斯：这就是为什么 Linux 在某种程度上如此成功的原因。想一下那三个动机。第一个是生存，拥有计算机的人把这个视为理所当然。坦白地说，假如你有一台电脑，就意味着你已经不会再为基本的生计问题发愁了。第二个是社会秩序，建立社会秩序的动机显然是为了使各种各样的人能够各安其位。 

   大卫：你在Comdex电脑业会议上说的话非常不错，当时你说 Linux 的开发是一个全球性团队的体育项目。这一点基本上是由你创立的，伙计。 

   李纳斯： Linux 表明了人们为什么喜欢团队体育项目，尤其是想成为团队中的一员。 

   大卫：是的，每天坐在电脑前，你大概希望觉得你是一个大团体中的一分子，任何事情中的一分子。 

   李纳斯：这就是社会层面，和其他团队体育项目一样。想象一下一支足球队里面的人，特别是高中的足球队。 Linux 的社会层面是非常非常重要的。但 Linux 也是娱乐，这种娱乐是金钱很难买到的。当你处在生存阶段时，金钱是一个非常强大的动机，因为用金钱换取生存是件容易的事情。换取生存之类的东西是很容易的，但突然之间你进入了娱乐阶段，金钱就…… 

   大卫：金钱就没用了？李纳斯：不是，并不是没用，因为显然你可以用钱买电影影碟、速度更快的汽车、更豪华的假期。还有许多东西你也可以买，从而改善你的处境。 

   塔芙：李纳斯，我们该给丹妮亚拉换尿布了。帕特里夏也得去上厕所。我想喝一杯卡普契诺咖啡。我们在这儿能找到一家星巴克(Starbucks)咖啡馆吗？我们现在在哪儿？大卫(抬起头)：根据空中的味道，我想我们已经快到国王城了。 

   李纳斯：我们所说的都非常宏观，但我们指的不光是人，而且是生活。和熵的定律相似。根据“生活的熵定律”，一切事物都将从生存走向娱乐，但这并不意味着在某个局部地区没有倒退的现象，而且毫无疑问许多地方都有这种情况。有时事物往往会分裂开来。 

   大卫：但作为一个体系，一切事物都朝着一个方向发展…… 

   李纳斯：一切事物都朝着一个方向发展，但并不是同步的。所以从根本上说，性已经达到了娱乐阶段，战争已经快接近娱乐阶段了，技术也已经达到了这一阶段。新生的事物开始是为了生存，比如太空旅行，它在某个阶段是为了生存，然后成为一种社会秩序，最后达到娱乐的目的。可以用膜拜的角度看一下文明。我是说，文明也是以同样的格局出现的。文明最早是为了生存，比如大家聚在一起就会生存得更好，于是建立起了社会结构。最后，文明的存在是为了纯粹的娱乐，当然也并非完全纯粹，而且这种娱乐也并非有什么不好。古希腊人是以强大的社会秩序而著称的，他们也有不少娱乐。人人都知道那个时代产生了不少一流的哲学家。 

   大卫：那么这些和生活的意义有什么联系呢？李纳斯：并非有何联系……只是说……存在着这类问题。 

   大卫：这其间的小小联系你还得想一想。 

   帕特里夏：妈妈，瞧那些牛。 

   李纳斯：所以，要是你知道生活的走向是这样的，那么毫无疑问，你的生活目标就中促成这一走向。而且这种走向并非是一个单一的行程。你做的一切都是许多走向中的一部分。你也可以问自己：“我做些什么才能使社会变得更好？”你知道你是这个社会的一部分。你知道社会正在朝这个方向发展，你也能帮助它朝这个方向走。 

   塔芙(扬起鼻子)：什么味？真难闻。 

   李纳斯：所以归根结底，我们都是为了开心。我们也可以坐在这里，完全放松，享受着汽车旅行。 

   大卫：仅仅为了开心？ 

.. _P02:

--------------------------------------------------------
第一章 一个书呆子的诞生 
========================================================


.. _P03:

--------------------------------------------------------
1、大鼻子的孩子 
--------------------------------------------------------


   我是一个长相丑陋的孩子。 

   我能说什么呢？要是好莱坞有一天想拍一部关于 Linux 的电影的话，我希望他们一定得找一个像汤姆·克鲁斯那样的人担当主角，但在现实中，我的相貌可没有那么好。 

   千万别误解我的话，我还没丑到《巴黎圣母院》里那个驼子的地步。 

   但可以想象一个我的大包牙，凡是见过我小时候照片的人，都会觉得我的相貌酷似河狸。再想象一下我不修边幅的衣着，以及一个托沃兹家族祖祖辈辈遗传下来的大鼻子，这样，在你脑海中我的模样就形成了。 

   有时别人对我说，我的鼻子长得简直“富丽堂皇”。人们还说——至少我的家人是这么对我说的——一个男人的鼻子的大小可以说明“其他”东西。但是对一个十来岁的孩子来说，这些话大概也没什么意义。在他看来，鼻子只不过是起着遮盖牙齿的作用。照片上我们家三代男人的脸部轮廓让人痛苦地联想到，留在别人记忆里的唯有鼻子而没有什么其他的男人气质。至少在当时是如此。 

   为了让你对我模样的想象更完整一些，现在再来补充一些细节。棕色头发(在美国这里，人们把它称做金黄色，但在斯堪的纳维亚就叫做“棕色”)、蓝眼睛、稍有点近视，于是戴副无伤大雅的眼镜。另外眼镜至少可以让人不大注意我的鼻子，于是我就带上了，任何时候都不摘下来。 

   哦，我已经提到了我在穿着方面的缺乏品味。通常，我都是选深蓝色的衣服，这就意味着我只穿蓝色牛仔裤，再配一件蓝色翻领毛衣——也可能是青绿色之类。幸好我们家人不喜欢照相，这样让我出丑的证据就没有留下多少。 

   照片还是有几张。有一张里的我当时只有十三岁左右，和比我小十六个月的妹妹萨拉一起照的。照片里的她看上去还蛮不错，而我却瘦得出奇，是个脸色苍白、扭曲着身子让人拍照的小男孩。拍照人大概是我妈妈。她是芬兰新闻社的翻译，这张宝贝照片也许是她在出门上班前匆匆忙忙拍下来的。 

   我在12月28日这个一年末尾的时候出生，这便意味着我是全球里年龄最小的孩子，同时也是个头最矮的一个。如果是在高年级，比多数同学都小半年似乎已不再是什么问题，但在刚上学的那几年这点差别却至关重要。 

   你有什么想法？你是不是想说，令人惊奇的是，所有这些缺点对我都没有什么太大的影响？长得像海狸、小矮个、戴副眼镜、乱糟糟的头发(其实后来我的关发也总是蓬乱不堪)，不修边幅的衣着，这些都没什么影响。因为，我有迷人的个性。 

   但我告诉你，事实并不是这个样子。 

   还是让我们实话实说吧，我是一个古怪的书呆子，一个为人取笑的对象。从很早的时候起就是如此。我倒没有干什么用胶带把眼镜粘在一起的事，但也差不多了。因为我有着其他合乎大家想象中的书呆子的所有特点：比如数学极好，物理也非常棒社交能力却差得一塌糊涂等等。那时，做一个书呆子还没有被人认为是一件好事。 

   每一个人大概在上学时都遇到过像我这样的人：在数学方面很突出，但不是因为学习刻苦，而是天生就是那个样子。我在我们班就是这样一个人。 

   在你急着替我难受之前，我再给你补充一些细节吧。我可能的确很怪，而且是个小矮个，但我混得不错。我在体育方面虽说不上能达到运动员的水平，但也不是不可救药的家伙。学校课间休息时总是玩一种游戏，这种游戏比赛技巧和速度，比赛分两个队进行，两队轮流用球扔向对方，被扔中者出局，直到有一方全部出局认输为止。我虽说从来也不是顶尖好手，但在两队挑选队员时我总是属于最早被挑中的那一拨。 

   所以在包括家庭、邻里在内的社会这一层面，我可能比较古怪，但单以学校而论混得还行。我没花什么力气就成了在学校里属于有点档次的那类学生，尽管从来也不属于出类拔萃的那种，可能主要是因为我不那么玩命。其实我即使在社会层面也有别人可以接受的地方。好象谁也不会太关注我的鼻子，现在回想起来，可能因为他们都有太多自己要操心的事情。 

   回过头来看，当时的大多数孩子似乎在穿衣服方面也不太讲究，而当我们长大后，又突然要由别的什么人来决定我们穿什么衣服了。就我自己而言，这些人主要是某些高技术公司的销售人员，我就穿他们在会议上免费发送的T恤和夹克。最近，我几乎一直都穿Vendorware公司的这类货色。而且我还有一个老婆，由她决定我的衣橱里应该放些什么样的衣服，还替我挑选凉鞋才袜子。于是我更用不着为此事操心了。 

.. _P04:

--------------------------------------------------------
2、外公的计算机 
--------------------------------------------------------


   如果说我孩提时代一些最幸福的记忆是玩我外公的一台老式电子计算器，对此大概谁也不会感到惊奇。 

   我外公列奥·瓦尔德马·托尔奎斯特 (Leo Waldemar Tornqvist) 是赫尔辛基大学的一位统计学教授。我记得我曾开心地在他那台计算器上计算过大量随机数字的正弦值。并不是因为我对答案感兴趣(毕竟，对这样的问题没有多少人感兴趣)，我开心是因为这发生在很早以前，那时的计算器可不像现在的那样能够很快的一下就给出答案，它们还得有个计算过程。一边计算一边闪烁个不停，好像在对你说：“瞧，我还活着，这次计算我只用10秒钟就能完成，同时我还能对你眨眼睛，告诉你我已经完成了多少工作。”这一点非常有意思。比现在的计算器令人兴奋多了，因为现在的玩意儿在计算简单问题时全然不费力气。而当早期的计算器计算时，你知道它们正在辛苦地工作。并且，这一点可以一目了然地看出来。 

   我已经记不清我第一次见到真正的计算机 (computer) 是什么时候了，但肯定是在十一岁左右。那大概是在1981年，当时我外公抱回来一台崭新的 Commodore VIC-20 计算机。由于我曾在那台老计算器上玩过好长一段时间，所以见到新的计算机时肯定特别兴奋，并且迫不及待地想试一试。然而我已经记不起当时真切的情形了。 

   说实在的，我甚至连我是怎么开始玩起计算机的都记不清了。刚开始还比较有节制，后来简直就被它迷住了。 

   VIC-20 是最早的家用计算机之一。它不需要自己组装。你只须把它和电视连接上，打开，它便开始工作了，电视屏幕的上方会显示出大写字母“已准备好”的字样，然后是一个一闪一闪的光标，在等着你开始操作。 

   最大的问题是，当时在个人计算机上你没什么可做的事情。尤其是在早期，开发商业程序的条件在当时并不具备，你能做的唯一的事情就是在它上面用BASIC语言编程序。我外公当时就是这么干的。 

   我外公把这个新家伙仅仅看作是个玩具而已，同时也是一台升级的计算器。它不仅在求正弦值等方面比老式的电子计算器快得多，而且你还可以让它自动地反复执行同一条指令。这样，我外公可以用它在家里完成一些过去只能在大学的大型机上完成的事情。 

   他也希望让我分离他的快乐，并试图让我对数学感兴趣。 

   于是我就坐在他的膝盖上，替他输入他事先仔细地写在一张纸上的程序，因为我外公很不习惯直接在键盘上敲打。我不知道有多少不到十岁的孩子会坐在他们祖父的房间里，学习怎样简化数学公式，然后把他们正确地敲进计算机里去，但是我记得我自己是这样干的。我已忘记了这些算式是干什么用的，而且我想我在计算时也没有找到简单的办法，但是我还是在那里给他帮忙。也许我是在帮倒忙，也许有我比没我更费时间，但只有天知道是不是如此。最终我把键盘玩得很顺，而这是我外公一直都做不到的。我一般是在放学后玩电脑，或是我妈妈送我到外公家过假日时。 

   而后我又开始阅读电脑操作手册，并尝试将里面的示范程序 (example program) 输入进去，手册里有一些简单游戏的示范程序，你可以尝试着自己编进去。如果你没有出错，屏幕上就会出现一个人横穿走过的图像，画面比较差。而且你还可以稍作修改，让人形图像穿过屏幕时，出现各种不同的背景颜色。只要你做，你就可以做到。 

   这种感觉棒极了。 

   然后，我开始自己写程序。 

   但是，我编写的第一个程序与其他人编写的第一个程序没什么不同。 

   .. code-block:: basic 

      10 PRINT “HELLO” 

   它将严格按照你所期待的那样去做。屏幕上显示出一行又一行的“HELLO”，并且无休无止，除非你因为厌烦而中止它。 

   然而这仅仅是在计算机上的第一步，也是许多人的最后一步。在这些人眼里，这样的程序非常愚蠢，因为你为什么要把“HELLO”显示上一百万次呢？但这个程序也是许多早期家用计算机的用户操作手册里面必然会有的第一个示范程序。 

   但让人惊奇的是，你可以改变程序的内容。我妹妹萨拉让我对这个程序作了修改，从而产生了这个程序的第二个版本，屏幕上显示的不再是“HELLO”的字样，而是无休无止的“SARA IS THE BEST”(萨拉是最棒的) 这行字。其实在平时，我并非是一个拥有如此爱心的哥哥。很显然这种显示方式(满屏滚动的一行行字)给她留下了深刻的印象。 

   然而此事我却记不真切了。因为每当我写完一个程序后就会把它忘记，然后再去编写下一个。 

.. _P05:

--------------------------------------------------------
3、芬兰的严冬 
--------------------------------------------------------


   让我给你们描述一下芬兰吧。在十月的某段时间，天空一直笼罩着令人难受的雨雪天气前的那种灰黑色，你每天起床时面临的都是这种预料中的黑暗天空。然后，寒冷的雨水将夏日的一切痕迹都冲洗得干干净净。降雪似乎可以创造奇迹，它给大地万物罩上一层非常明亮的外衣，洗刷掉漫天阴霾，给人们带来振奋和乐观。然而问题是，这乐观情绪短暂得只能维持几天，因为接下来的是透骨的寒冷，即使是严寒过去之后，积雪在几个月之内都不会融化。 

   到了一月份，要是你想出去的话，你将只能在一种影影绰绰的昏沉中徜徉。这是一个雾气、穿着厚重的衣服和总在冰球场上滑倒的季节——他们把你往日抄近路去车站的小学操场泼上水变成了冰球场。在赫尔辛基的街道上，你必须时不时躲开走路蹒跚的老太太——她们在九月份的时候大概还是某人慈祥的祖母，但在一月份某个星期二上午的十一点钟，她们便由于在早餐时喝多了伏特加酒而在人行道上歪歪扭扭地踉跄着。可谁又能责怪她们呢？再过几个小时天色又将黑下来，人们便无事可做了。然而我却有一个可以让我度过寒冬的室内运动：编写程序。 

   这样的时候我外公多半在我身边，他也不在乎他不在时我呆在他的房间里。我向他讨钱买来了第一本电脑书。但所的文字都是英文，我还必须翻译书中的语言，而要理解用一个你不太熟悉的语言所表达的技术术语并非易事。我也用我的零花钱购买电脑杂志，其中有一本写着关于莫尔斯电码 (Morse Code) 的程序。而这个特殊程序的特别之处在于，它并非用BASIC语言写成，而是由一组数字写成，这些数字可以用手工方式将其转变为计算机可以读懂的许多0和1。 

   这样，我便发现了电子计算机并非真的讲BASIC语言，它所赖以操作的是一种更加简单的语言。赫尔辛基的孩子们都和他们的父母在树林子里玩曲棍球和滑雪，而我却在琢磨一台电脑在怎样工作。当时有一些程序，能把人们可读和数码转换成电脑看得懂的0和1，但我并不晓得有这样的程序，于是我就开始用数字形式编写程序，然后再用手工进行转换。这就是用机器语言编程序，这样做时，我便开始做起了我过去以为是完全不可能的事情。多已经能够驱使电脑做事情，对一切细节我都能够加以控制。我开始思索，如何能在更小的空间里让事情做得更快一些。由于在我和电脑之间没有抽象的屏障，我很快地就能接受目标，这便是和一台机器变得亲密的感受。 

   就这样，十二岁、十三岁、十四岁过去了。其他孩子在外面踢足球的时候，我却觉得外公的电脑更加有意思。他的机器本身就是一个由统治的世界。我们班里大概有三个人拥有电脑，但只有一个人总以一成不变的原因使用它。我每个礼拜开一次会，这是在我的日历上唯一的社交活动，偶尔和电脑一同熬夜时除外。 

   我并不在乎，因为特好玩。 

   后来我父母离婚了，爸爸搬到赫尔辛基的另一个地方。他觉得他的孩子应该拥有更多的兴趣，于是他替我报名打他最喜欢的篮球。这实在是个灾难，我是全队中个子最矮的队中。打了一个多赛季之后，我便用所有最难听的语言告诉父亲说自己不打了。我对父亲说，篮球是他的体育项目，不是我的。我的同父异母兄弟列奥更有体育才华。后来他和芬兰86%的人口一样，最终成了一名信义会教友。我爸爸是个顽强的不可知论者，但他那时才开始怀疑他是一个失败的父亲。等到萨拉也加入了天主教教会时，他便彻底意识到了自己是个失败者。 

   外公性格不太开朗。他有点谢顶，体重过人，性格内向，不太好接受，完全是个心不在焉的教授。你可以想象一个数学家，在想事时两眼直勾勾地盯着前方，一句话也不说。你根本想象不出他在想什么。是复杂理论分析？抑或家里的某个人？我也一样以发呆著称。我一旦坐在电脑跟前，只要有人干扰我，我就会变得非常生气和烦躁不安。这一点我后面还会详加叙述。 

   我对外公最生动的记忆并不是他的电脑，而是他那座红色的小村舍。在赫尔辛基，人们普遍都拥有一座小小的夏季别墅，可能是一间长宽各三十英尺的房子。这样的小房子建在一小块土地上，面积可能是150*150平方英尺，人们到那里去拾掇他们的花园。这些人往往在城市拥有一栋公寓，在郊外则还有这样一个小地方种些土豆、几棵苹果树或一些玫瑰。到那里去的往往都是年长的人，因为年轻人的工作都很忙。这些人种点什么，相互之间还要比试，让人觉得很滑稽。外公正是在这个地方给我种了一棵苹果树的幼苗。它现在或许还在那里，除非它长得过于茂盛，以至于一个嫉妒人很强的邻居在短暂的夏季黑夜偷偷溜进我外祖父的地盘，把它砍掉了。 

   我外祖父在把电脑介绍给我的四年后，得了脑血栓并且半身不遂。每个人对此都感到很吃惊。他在医院里躺了一年。虽然他是我最亲的人，但在当时对我的影响并不太大，或许是我还太年轻而不那么敏感的缘故。他的样子和从前已经判若两人，我并不想去看他。只是大约每隔两个星期看他一次。倒是妈妈去得很频繁。妹妹很早的时候就担当起了家庭社会工作者的角色，所以去得更频繁。 

   外公死后，他的电脑就成了我的生活伴侣。关于这一点没有什么更多可说的。 

.. _P06:

--------------------------------------------------------
4、我的家族 
--------------------------------------------------------


   我们再回头看看历史。 

   第一个将脚印踏在芬兰雪地上的最重要的瑞典人是亨利主教，他被天主教会于1155年派往芬兰。那些传教士占据着芬兰所有的城堡以抵抗俄国人，并最终战胜了我们东国的帝国，赢得了这场争夺芬兰控制权的斗争。在后来的几个世纪里，为了促进芬兰殖民地人口的增长，瑞典政府给予在芬兰的瑞典人以土地和减税等激励。瑞典人的统治一直延续到1714年，接着是芬兰被俄国人接管七年的短暂插曲。之后瑞典人再次将它夺了回来，直到1809年俄国和拿破仑对芬兰发起进攻，芬兰又落入俄国的统治中，一直到1917年十月革命爆发为止。早期瑞典移民的后裔如今在芬兰达到35万人，他们都讲瑞典语，占总人口的7%。 

   这其中也包括我的怪癖的家庭。 

   我外祖父的父亲住在瓦萨城附近的一个叫杰波的小镇上，是个相当贫困的农场言，但他的六个儿子中有五个获得了博士学位。这很难说明在芬兰通过努力以改善自己境遇的可能性。不错，冬天的黑暗以及走进屋里后就把鞋子脱掉的做法的确让你心烦。然而在那里你可以免费受到大学教育。这一点和美国的情况大相径庭，美国的许多孩子在成长过程中都有一种毫无前途的感觉。事实上，上面提到的六个儿子之一后来当上了芬兰中央银行的行长。还有一个就是我外祖父列奥，也就是带我接触到计算机的那一位。 

   再来说说我的祖父。是他创造出了 Torvalds 这个姓。这姓来自他原来的名字 Ole Torvald Elis 中间那个词，在瑞典语里的意思是“托尔的领地”(托尔是北欧神话中的雷神——译注)。这是因为我祖父生下来就没有父亲，他的姓Elis是我曾祖母最终嫁的那个人的姓。我祖父非常不喜欢那个人，所以在1937年他21岁生日的时候给自己改了姓。他去掉了自己的姓，又在原来的中名Torvald后面加了一个“S”作为新的姓，据他说这样发音会显得更为丰满。但他实在应该重新改个姓，因为他加上的那个“S”把原来的意思全破坏了，并让讲瑞典语和芬兰语的人都感到百思不解，他们根本就不知道该怎么把它念出来。而且，他们都认为这个字应该拼成“Thorwalds”，而不是现在这个样子。全世界现在总共有十八个姓 Torvalds 的人，他们之间都有血缘关系。我们都得忍受我祖父带来的这种混乱。 

   这大概就是我在网上总使用“李纳斯”的原因。Torvalds 太容易引起混乱。 

   我这个祖父并不在大学教书，他是个记者和诗人。他第一份工作是在离赫尔辛基以西大约一百公里的一座小镇上当一家报纸的主编，因为在上班时常喝酒而被免职。他和我奶奶的婚姻也因此破裂了。后来他搬到了位于芬兰西南部的城市土尔库，又结了婚，成为当地一家报纸的主编，出版了几本诗集，但酗酒的问题始终没有解决。我们常常在圣诞节和复活节时去土尔库看他，同时也经常去看望我奶奶。我祖父在五年前去世。 

   我可从来没有读过民的任何诗集。这只是件我爸爸遇见生人时的谈资罢了。 

   我们家的记者一抓一大把。据说在1917年芬兰摆脱了俄国统治而独立之后所发生的内战中，我曾祖父的一个兄弟就是一名站在白党一边而曾被红军抓获的记者。我父亲叫尼尔斯(大家都管他叫尼基，是电视和广播记者。自从六十年代的大学时代起，他就在共产党内非常活跃。他的政治倾向来自于他得知了许多发生在芬兰的针对共产党的同情者和支持者的无耻暴行。1967年，他认识了我妈妈安娜，当时他们俩都是具有反抗精神的大学生。据我爸爸说，他当时是一个讲瑞典语的学生俱乐部主席。有一次该俱乐部出外郊游，我爸爸在追求我妈妈的过程中有个情敌，当他们准备坐汽车返回赫尔辛基时，我爸爸让他的情敌负责往汽车上装行李。于是他便利用这一机会占据了我妈妈旁边的座位，劝说她单独跟他约会。 

   我是在大学校园的游行示威中诞生的。我们家的爱巢修筑在我祖父公寓的一个房间里。我的第一个摇篮是一个洗衣用的筐子。幸好那个时期没有给我留下什么记忆。 

   大约在我三个月的时候，我爸爸报名去服兵役，因而没有被当作坚定的反政府分子被投入监狱。在军队中他成为优秀的士兵，而且是个神枪手，因此常常受到奖励，享受周末回家探亲的特权。据我们家人说，我妹妹萨拉就是在他一次探家时受的孕。我妈妈除了照料她两个金发的孩子之外，还在芬兰新闻社当译员。即使到了今天，她还是在各种新闻媒体中寻找消息，然后把它们翻译成瑞典语。她也从事制图的工作。 

   然而我却奇迹般地逃出了这个以记者为主的小小王国。相反，我妹妹萨拉除了有自己的新闻翻译社，也在新闻社供职。而我同你异母兄弟列奥·托沃兹则是个摄影师，而且想当导演。因为我的家人大抵都是记者出身，所以我有资格和记者们开玩笑，说我知道他们是一帮无赖。我知道我这样说自己也显得很差劲，但多年来，我们家曾经来过不少做客的记者，都是些为了能挖掘出消息什么事都做得出来或是靠凭空想象编新闻的家伙，而且不少记者似乎还总是离不开杯中物，并且常常喝得酩酊大醉。 

   每当这个时候，我就躲进自己的卧室里。说不定我妈妈的神经比较坚强，能对付他们。我们家坐落在赫尔辛基市中心的一个叫罗德伯根的小区，公寓在位于罗伯兹盖坦街上黄色的不起眼的大楼中。我们家在五层，有两间卧室。萨拉和那个讨厌的、大她十六个月的哥哥(也就是我)同住一间卧室。附近有一个小公园，其名字是根据当地一个酿酒厂老板的名字起的。我总觉得这样很奇怪，但一想到有的篮球场馆也是根据一个生产办公设备的人的名字而命名的，也就不足为怪了。(有一次我们在公园里看到一只猫，于是我们家人从此便称那座公园为“猫园”)。公园里有一个不大的空房，许多鸽子常常飞到那里。公园建在一座小丘上，所以到了冬天是个滑雪的去处。另一个可以玩耍的地方是我们楼后面的水泥院子，此外楼顶上也可以玩。每当我们玩捉迷藏时，顺着梯子爬五层登到楼顶上特别有意思。 

   但再有意思也不如玩计算机过瘾。只要屋里摆着电脑，晚上不睡觉都没关系。每个男孩子晚上都睡得很晚，以便躲在被窝里“阅读”《花花公子》。但我却不是这样，而是佯装睡着，等我妈妈走了以后便跳将起来，一屁股坐在电脑跟前。那个时候可还没有网上聊天这回事呢。 

   “李纳斯，该吃饭了!”有时妈妈这么叫我时我不愿意出去，于是妈妈就对她的一些记者朋友们说，我是个非常好养的孩子，以至她只要把我放在一个黑咕隆咚的储藏柜里，再配上一台电脑，偶尔朝里扔一些意大利面条，我就会感到格外高兴了。她的话不无道理。谁也不会担心这个孩子出外时遭到绑架(你听说过这样的事吗？)。个人计算机在变得像今天这样复杂之前，尤其是在像我这样呆头呆脑的青少年还可以打开电脑的盖子自己动手修理的时候，其实对孩子们很有好处。今天的电脑所面临的问题和汽车一样：它们变得越来越复杂，于是人们很难将他们拆开再自己组装在一起，所以也就很难弄清那里面究竟是回事。过去人们可以简单地换掉汽车上的桐油过滤器，但你最后一次修车肯定要比那个活儿复杂得多吧？今天的孩子们不再自己拆卸组装电脑，而是将所有的时间都用于玩游戏上，于是智力得不到发展。我并不是说游戏有什么不好，我最早编写的一些程序就是游戏。 

   我编的程序中有一个是你必须在一个海底洞穴里控制一艘小小的潜水艇。这是一个十分标准的游戏概念。整个世界都倾斜着移动，作为玩游戏的人，你就是潜水艇本身，所以你必须不能让自己碰到墙壁和可怕的大鱼身上。其实真正移动的仅仅是这个游戏空间，鱼是这个游戏空间的一部分，是和它一起移动的。你玩的时间越长，它们移动得就越快，同时洞穴还变得越来越小。你不可能在这个游戏中获胜。游戏的宗旨也并非是为了获胜，这种游戏玩上一个来星期，然后再转移到另一个游戏，非常有意思。这主要是为了编程，才创造出新的游戏。 

   我还有其他的玩具，如模型飞机、轮船、汽车和铁路。有一段时期，我爸爸常买回一些非常昂贵的德国模型火车。他解释说，他小时候从来没有玩过模型火车，所以模型火车可以成为父子的共同爱好。虽然很好玩，但是和电脑的挑战相比却相差甚远。有时我被剥夺玩电脑的权利并非是因为我在电脑上花费了太多的时间，而是因为别的事而受到惩罚，比如与萨拉打架。在整个小学和高中时期，我们展开了激烈的竞争，特别是在学习上。 

   所有这些竞争都取得了良好的效果。要不是我经常取笑她，她就不会为了胜过我而在期末写了六篇文章，可当时在芬兰，要想从中学毕业写五篇作文就算达到标准了。另一方面，我的英文还十分蹩脚，这一点应该感谢萨拉。她总是拿我的英文取笑，有很长时间我一直讲一口典型的芬兰式英语。所以后来我的英语才有所改进。我妈妈也经常揶揄我，但主要是因为我对女学生不感兴趣，而这些女生都希望得到“数学天才”的辅导。 

   有时我们和爸爸还有他的女朋友住在一起，有时萨拉和爸爸住在一起，而我和妈妈住在一起。还有的时候我们都和妈妈住在一起。顺便说一句，瑞典语中找不到一个与“机能障碍家庭”相对应的词汇。由于我父母的离婚，我们手头很拮据。当时我记得最清楚的是，我妈妈不得不经常典押她唯一的投资——无度电话公司的股票。在芬兰，只要你拥有一部电话就能拥有一张该公司的股票。我妈妈的股票大约值五百美元，每当我们手头特别缺钱花时，她就只好拿着股票到当铺去。我记得曾和妈妈去典押过一次，心里感到非常窘迫(如今我是这家公司的董事会成员。事实上，赫尔辛基电话公司是我任董事会成员的唯一一家公司)。类似的心理感受也发生在我要为购买第一块手表而向外公讨钱的时候，当时我自己已攒下了大部分的钱，但剩下的钱妈妈却拿不出来，于是让我向外公讨要，这让我感到非常难堪。 

   有一段时间，我妈妈上夜班，萨拉和我便只好自己想办法吃晚饭。我们应该到街角的一家小铺子里用赊账的办法买仪器，但我们买的却是糖果，而且晚上可以玩电脑玩到很晚，这让我感到痛快极了。要是别的男孩家里没有家长看着，早就堂而皇之地“阅读”《花花公子》了。 

   外祖父死后，我外婆的身体似乎也每况愈下，她患了一种她自己称之为“晕眩症”的病，在医院里一住就是十年。在她进了医院后两年，我们便搬到了她的公寓。那是一幢坐落在彼德盖坦街上结实的俄国时期的老建筑物，与赫尔辛基滨水区的一个漂亮公园相距不远。我们住在一层，公寓里有三间卧室，一间小厨房。萨拉住最大的一间卧室。而我这个消瘦的少年住的是最小的主卧室，反正我只要有一个黑咕隆咚的地方就行了，时不时能得到意大利面条就会感到心满意足。我在窗户上挂上了厚厚的黑色窗帘，不让阳光射进来。电脑就摆在靠窗户的一张小桌子上，离我的床大约只有两英尺远。 

   1999 年春天，当《圣何塞信使新闻报》的星期日增刊让我采访李纳斯·托沃兹时，我对他只有一些模糊的了解。在这年春天的早些时候，随着一系列的公司和网景公司一样采用了公开源代码的概念或者干脆采用了 Linux 操作系统本身，李纳斯 (Linus) 一时间成了一个众人皆知的名字。尽管我对于这方面的发展并不十分了解，但在九十年代初期，我在一本涉及到 UNIX 操作系统和公开源代码问题的杂志担任编辑，所以我脑子里还残留着一些相当的记忆：包括李纳斯是个芬兰的大学生，他在自己的宿舍里编写了一个影响极大的 UNIX 系统，并且免费在互联网上散发，等等。这些信息并非十分准确。给我打电话的编辑说，在最近于圣何塞举办的 Linux 展览上，李纳斯已经成为众星捧月的核心人物，所以他敦促我一定要完成这项任务：“我现在手头有一个闻名全球的超级明星，就在这里，噢，不，在圣克拉拉。”接着他便把一些报纸简报传真给了我。 

   李纳斯已经在两年前来到了硅谷，正在为当时还显得特别神秘的 Transmeta 公司工作，那家公司多年来一直致力于开发一种据说成功后将轰动整个电脑工业的微处理器。但是，不知何故，Transmeta 公司却允许李纳斯继续他那项耗时甚多的工作，他仍旧是 Linux 的最高领袖，对这个操作系统的任何修改拥有最终的决定权(事实上，他的追随者已经在着手进行法律方面的工作，以期在法律上让他成为 Linux 商标的所有者)。此外，他还有时间在全球四处旅游，为方兴未艾的公开源代码运动大做宣传。 

   然而，李纳斯却变成了一个神秘的传奇式英雄。当人人都崇拜的对手比尔·盖茨住在他豪华的华盛顿州西雅图郊区的湖滨行宫里时，李纳斯和他的妻子以及他们蹒跚学步的女儿们却挤在圣克拉拉一栋两层楼的公寓套房里。他似乎对一大群才气不很高的编程人员如今能享受到大笔大笔的巨大财富并不怎么在意。他的出现使那些身在硅谷并匍匐在优先认股权之下的小人物们心里犯嘀咕：这样一个不同凡响的人怎么可能对致富毫无兴趣呢？李纳斯没有经纪人，也没有录音电话，而且很少回复电子邮件。我花了好几个礼拜的时间才通过电话和他取得了联系，但一旦联系上，李纳斯便同意在他尽早方便的情况下接受一次采访。时间大约在一个月后，也就是 1999 年 5 月。我出于职业上的习惯，总希望我的被采访者能处于一种放松的状态，我认为用芬兰桑拿浴为背景是采写这篇人物传记的最好方式。于是我们租了辆福特公司的野马牌敞篷轿车，由摄影师开着，一路到圣克鲁斯市去，那里有人为我们推荐了旧金山湾区最好的一家桑拿浴馆，坐落在一个新人类和裸身主义者风格的度假村里。 

   Transmeta 公司位于圣克拉拉一个匿名的写字楼群内，当李纳斯从公司出来时，手里拿着一罐拉开盖的可乐，穿着软件程序员的典型服装：牛仔裤，T恤，一成不变的凉鞋和袜子。当我问他穿凉鞋着袜子是不是标准的程序员工装时，他理由充分地解释说，甚至在他从未见到任何别的程序员之前他就喜欢把袜子和凉鞋配在一起了。他说：“这肯定是关于程序员的自然法则。”我们坐进汽车的后座，我一边鼓捣着我的录音机，一边脱口问出了第一个问题：“你家里人都是搞技术的吗？”“不是，他们基本上是新闻记者，”他答道，接着又说：“所以我知道你们都是一些坏蛋。”他知道因为这句话我肯定不会放过他。 

   “噢，难道你是从一堆坏蛋是钻出来的吗？”我问。 

   这个世界级的程序编制员抑头大笑，不料将嘴里的一口可乐全喷在了摄影兼司机的后脖子上，李纳斯的脸不好意思地红起来。这便是那个令人难以忘记的下午的开始。 

   后来的事儿更加离奇。芬兰人对洗桑拿浴可以说到了痴迷的程序，但那次却是李纳斯将近三年之内第一次光顾桑拿。这位皮肤苍白、全身赤裸的新星戴着一副雾蒙蒙的眼镜，坐在最高一层的木板上，他的金发乱蓬蓬地覆盖在他的脸上，浑身的汗水像小河似的滴淌下来，一直流到他开始发福的肚子上。我这样说完全是出于好意。他的周围是一圈皮肤晒得黝黑、自我着迷的圣克鲁斯人，用他们单调乏味的新人类式的口吻夸夸其谈着；李纳斯似乎特别热衷谈论桑拿浴的种种特点。他脸上洋溢着一抹宁静满足的笑容。 

   我认为，总体来讲，住在硅谷的人比其他人都更加幸福。首先，经济革命完全在他们的控制之中。更重要的是，无论是硅谷里的新贵们还是老家伙们，都富裕得满腹流油。但谁也看不到他们脸上充满笑容，至少在他们的经纪人办公室之外他们总是绷着脸。 

   绝大多数受欢迎的技术人员——甚至许多不那么受欢迎的技术人员——都有一种强烈的愿望，想让你知道他们是多么的优秀。而且，他们都担负着一个了不得的使命，该使命比为世界和平而奋斗还要重要。李纳斯却不然。他没有自我膨胀的感觉，与他一接触就会觉得你和他之间没有什么隔阂，这使他在硅谷那帮夸夸其谈的精英中显得格外的可爱。李纳斯看起来似乎超越了一切，他超越了新人类，超越了高科技亿万富翁。他不像是一只被全球的镁光灯抓住了的驯鹿，而更像一个快乐的外星人，到这个世界来告诉我们人类自私的生活方式有多么疯狂。 

   我还有种感觉，他是个深居简出的人。 

   李纳斯曾提到过，洗桑拿的一个重要部分是在蒸完后几个人坐在一起，边喝啤酒，边神侃天下大事。为此，我们事先准备了一些富士达啤酒(FosterBeer)。我们拿出啤酒，钻进了“安静”热水池子里。我们打开富士达啤酒罐，一边喝着一边让摄影师为他拍照。出乎意料的是，我发现李纳斯对美国商业史和世界政治都非常熟悉。按照他的观点，假如美国人能像欧洲政治家那样在社会领域(企业和非政府组织——译注)和公共领域之间采取调和政策，对美国的发展会更有好处。他一边摘下眼镜，将其浸在热水里清洗，一边解释说人其实根本不需要戴眼镜，在少年时戴起来的原因是以为这样可以让他的鼻子看上去小一些。这时，一个穿着衣服的女经理走到热水池旁，毫不客气地勒令我们把啤酒交给她。虽然周围环境非常开化自由，然而啤酒却被认为是违禁品。 

   我们唯一的选择就是冲淋浴，穿上衣服，然后找一个咖啡厅继续我们的谈话。 

   你在硅谷遇到的大部分人周身上下都有一种信徒身的狂热。他们对自己的生意、“杀手应用”(killer application) 和各自的待业过于迷恋，除此之外什么都不放在眼里。在他们的谈话中，除了自我吹嘘的话题之外便没有别的了。然而当我们和李纳斯沐浴着阳光坐在一家自酿啤酒店里品尝着酒精度极高的浓啤酒时，我们却无话不说。喋喋不休的李纳斯就像是只被放出笼子的金丝雀，承认他对古典摇滚和恐怖小说作家迪恩·库恩兹 (Dean Koontz) 非常迷恋，他还承认自己有个弱点，特别喜欢荒唐的情景喜剧。然后便道出了许多他的家庭琐事。 

   他不希望自己跻身于富人和有权势的人中间。我问他，如果见到比尔·盖茨想说些什么，他却说连与后者见一百的欲望都没有。“在我们俩之间没有什么关系可言，”他说，“他所做的事是世界上最优秀的，但我却丝毫不感兴趣。我所做的事在世界上也可能是最优秀的，他也不感兴趣。我对他经商提不出任何建议，他对我的技术也提不出任何看法。”我们翻越山岭返回圣克拉拉时，有一辆黑色的切诺基吉普从后面上来，车子突然在我们旁边慢了下来，车上的人喊了一声“嘿，李纳斯!”接着就掏出一台傻瓜相机，为他心目中的英雄拍照。李纳斯则坐在野马版敞篷车的后座上，迎着风露出微笑。 

   一个星期后我又去了他家，当时他正在给孩子洗澡。他把他一岁的金发女儿从水池子里捞出来，想找个地方放下，与此同时，他又把他两岁的金发女儿从水池中捞出来。他把他的小女儿递给我，后者立即大叫起来。他妻子一直呆在另一个房间里，这时也跑出来帮忙。她个子不高，但很随和，脚腕刺了一颗植物的纹身。不久，我们便给孩子们读起了瑞典语和英语的催眠书。后来我们便站在车库旁边，周围放着一些未打包的行李，这对夫妇说起了在硅谷若想买一栋“拥有一个后院的真正的房子”的想法是如何不切实际。他们这样说时并未流露出辛酸的口吻。 

   令人惊讶的是，他们似乎并未悟出他们生活中的讽刺意味。 

   接下来，我们一边喝着吉尼斯黑啤酒一边在电视里观看捷伊·雷诺 (Jay Leno)的谈话节目。在这种气氛下，开始写书便是顺理成章的事了。 

.. _P07:

--------------------------------------------------------
5、中学时代 
--------------------------------------------------------


   这四年，我基本上是坐在电脑面前度过的。 

   当然还有上学：诺斯高中——它是赫尔辛基五所讲瑞典语的中学之一，坐落在市中心，离我家很近。数学和物理很有意思，所以也很好学。凡是需要死记硬背的课，我的热情都不高。所以上历史课时，一旦你得记住黑斯廷斯战役的日期时，它就显得格外的枯燥；然而每当讨论影响一个国家的经济因素时，它就变得有意思起来。地理课也是如此。我是说，孟加拉有多少人口有谁在意？但仔细想来，也许许多人认为那一点非常重要。但最重要的是，只要我学的东西很有意思，可以暂时让我忘记电脑，就会变得很轻松，比如季风，或者引起季风的原因等。 

   体育课则完全是另一码事了。我要是说，在整个斯堪的纳维亚半岛，我不是最有体育天分的人，大概是理所当然的事。信不信由你，当时我还瘦得出奇，参加体操课还说得过去，但一旦上足球或冰球课，那便意味着逃课的时间到了。 

   这些课把我的分数拉了下来。芬兰的分数等级是从四分到十分。所以我的数学、物理、生物等课大都是十分或九分，而体育课却是七分，有一次还得了个六分。我的手工课也得过一个六分，那门课我也比较弱。其他学生都做出了精美的放餐巾的架子或凳子，作为手工课的纪念品。而我这么多年下来，唯一的收获就是在我的大拇指里留下了几根木刺儿。说到此我必须提一下，我岳父制作了一个精美的秋千，装在我们家的后院里，我的两个女儿在秋千上度过了许多欢乐美好的时光。 

   我们的高中和大多数美国城市中的学校差不多，并不是为那些特别聪明和雄心勃勃的孩子们设立的。芬兰并不希望把孩子们分成等级，或把优秀生和差等生隔离开来。然而每个学校都有一个特有的专业，虽然它不是必修课，但你在其他学校却学不到。就我所有的中学来说，其特殊的专业是拉丁文。在我看来，拉丁文很有意思，比芬兰语和英语有趣得多。只可惜这个语言已经死亡。我特别想和几个好朋友聚在一起，用拉丁文开玩笑，或者用它讨论操作系统的设计战略。 

   在学校附近的咖啡馆里消磨时光也特别过瘾。那里是一些学生喜欢去的地方，尤其是那些不愿意躲在学校的楼后面抽烟的人。体育课逃课可以到那里去，或者在两节课之间有一个小时的休息时也可以泡在里面。 

   自从发明了计算机之后，咖啡馆便是“呆子”们常去的场所。咖啡馆是学生们可以用赊账的办法买东西的唯一地方。也就是说，你可以在那里买东西，他们把你买的吃的和饮料列出一个单子，等你手头有了钱再把账还上。由于芬兰人对技术特别热衷，如今那里的赊账大概早已用数据库来记录了。 

   我要的东西永远是一样的：一杯可乐和一个炸面包圈。 

   当时我那么年轻就已经是一个健康食品迷了。 

   总的来讲，我在学校里比萨拉的功课要好。萨拉更爱社交，看上去很随和，对别人特别友好。我还得说一句，这本书就是别人雇她翻译成瑞典语的。但最后她在学习上超过了我，因为她考的科目比我多。我的兴趣比她窄。别人都知道我只是个偏爱数学的家伙。 

   其实，我能把女生带回家的唯一原因就是她们希望得到我的辅导。即使这样她来的也不多，而且每次都不是我的主意。我爸爸总觉得那些女生感兴趣的并非仅仅是补习数学(在他看来，她们都认同他伟人般的鼻子，好像这等于认同他是个伟人)。假如她们在寻找一个数学尖子，她们肯定没有一个固定的男友。我的意思是，我从未弄明白他们说的“深度爱抚”(heavy petting，指的是性接触的一种方式，李纳斯在这里把“pet”理解成“宠物”的意思，并把“heavy”理解为“沉重”了——译注)是什么意思。我曾经花了不少时间照顾邻居家一只十五磅重的猫，就是不明白这有什么了不起的。

   不错，我绝对是一个呆傻之徒，这一点毫无疑问。那个时候呆傻尚有性感的含义；不过我猜并不是真正的性感。你们所看到的是一个既呆傻又腼腆的学生，他是不是有点多余？于是我便坐在电脑旁，感到无限的快乐。 

   中学毕业时，我头上戴着一顶白色毛茸茸的挂着黑穗的帽子。毕业典礼上，他们把文凭发给我，然后我就回家。所有的亲戚都在那里等着你，到处都是香槟、花卉和蛋糕。此外，全年级还要在当地的一家餐厅里举行庆贺聚会。这些我们都做了，而且我猜我很开心，不过具体的细节全忘了。然而你要是问我那台 68008 芯片的电脑的规格，我却记得非常清楚。 

.. _P08:

--------------------------------------------------------
6、长大成人 
--------------------------------------------------------


   我上大学第一年的成绩斐然，需要拿到的学分我都拿到了。然而我仅仅在第一年收获颇丰，也许是新的环境让我感到特别兴奋，或是因为突然拥有了深入学习某些学科的机会，再不然就是读书使我感到很舒服，这总比隔三差五地进行社交活动、把酒吐在朋友们身上好得多。第一年我表现得非常好，实在无可挑剔。然而你放心，这种表现从此再没有发生过。我的学术生涯来了个一百八十度的大转弯。 

   那时还没有选择专业，最后计算机成了我的主修课，物理和数学是副修。我的问题之一是，在整个赫尔辛基大学，除我之外，希望主修电脑的讲瑞典语的学生只有一个，他名叫拉尔斯·韦尔泽尼斯。我们俩参加了一个为讲瑞典语的理科学生举办的组织，在那里觉得非常开心。这个俱乐部的盛况都是由学“硬科学”的学生们组成的，比如物理和化学。顺便提一句，成员都是男生。 

   我们俱乐部的房间和另一个组织共同使用，那个组织是为讲瑞典语的主修“软科学”的学生建立的，比如生物和心理学。因此，我们有机会和女生们交往，尽管我们当中的许多人在这方面显得笨手笨脚。不，我们所有的人都如此。我们的俱乐部和美国的大学生联谊会大体相仿，但你不必和其他学生住在一起，也不必和对科学不感兴趣的人打交道。我们每星期三晚上都有固定的聚会，在那里我了解到了啤酒中比尔森香型(Pilsner)和麦芽香(Ale)之间的区别。偶尔，我们还举行喝伏特加酒比赛。然而这些都是在我大学时代的后期发生的事情。我在大学里有得是时间，我总共在大学里泡了八年，毕业时仅仅得了一个硕士学位(不包括去年六月赫尔辛基大学授予我的荣誉博士学位)。 

   大学的第一年，我只模糊地记得乘坐有轨电车穿梭于教室和宿舍之间，我宿舍里的书和电脑设备越堆越多。我常常躺在床上读道格拉斯·亚当斯写的科幻小说，然后就把书丢在地板上，再抄起一本物理课本，接着又从床上滚下来，坐在电脑前为一个新游戏编写程序。厨房就在卧室的外面，我常去那里弄点咖啡和松脆玉米饼。 

   也许妹妹就在附近某个地方，或者和朋友出去了，也说不定这些也就和父亲住在一起。妈妈或许也在那里，要么她就在工作，或者说不定她和她的记者朋友们也出去了。有时一个朋友过来找我，我们就挤在小厨房里，一杯一杯地喝茶，在电视里看比维斯和布特海德 (Bevis and Butthead) 用英文唱MTV，然后我们就琢磨着到哪儿去打台球，可又觉得外面太冷了。 

   真是万幸，自那以后，体育课在我的生活中完全消失了。 

   然而“体育课”在第二年又回来了，而且是整整一年。芬兰军队要求所有的男生一律入伍。不少男生在中学毕业后就去服兵役，这样做比在大学上完一年后再去服兵役显得合理得多。 

   在芬兰你有两种选择：要么在部队服八个月的兵役，要么从事一年的社会服务工作。你要是有很强烈的宗教原因或其他说得过去的理由，这两样你还都可以避开。对我来说却没有任何脱身之计。对于社会，我觉得那并非是一个合适的选择。 

   这并不意味着我反对帮助别人。个中原因可能是我害怕社会工作会比在军队服役更加枯燥无味。我真不敢相信我说话如此坦率。你若和已经从事过社会服务的人聊聊，就会发现如果你事先没有排队选择好一个进行服务的较好地点，他们就会给你随便找一个枯燥乏味的地方。如果那样，我从良心上也不可能反对。虽然逃避爱国职责我不会太有所谓，但是事实上我还是有良心的。在万不得已时，使用枪支杀人恐怕也不会遭到我太强烈的反对。 

   要是你选择服兵役，也会有两种选择：你可以当一个普通大兵，服满要求的八个月；或者去一所军官培训学校，当十一个月的军官。我觉得当一名军官可能会稍微有点意思，虽然你的服兵役时间要多出十二万九千六百分钟。当军官或许也能多学到一点东西。 

   于是乎你们那位当时体重是一百二十磅的英雄就成了芬兰陆军预备役中的一名少尉。干的事是火力控制。那还不是火箭科学，发给你的也不是大炮，而是坐标。你在地图上找出自己的位置，然后用三角学求出你想要射击的方位。你做出坐标计算，然后把结果用无线电或你们自己铺设的电话线传递出去，告诉要朝哪里射击。 

   我记得在参加陆军我非常紧张，因为我不知道里面的。有的人有哥哥或其他人跟他们讲过陆军的情况，所以他们心里多少有点底。但却没有人告诉我将会遇到什么样的事情。诚然，人人都知道军队里面可不是好玩的地方，凡是服过兵役的人都这么说。然而部队里到底怎么回事我一点概念也没有，所以感到特别紧张。 

   在军队里最艰难的是在拉普兰森林中行军，身上必须背着似乎有几吨重的缆绳。我真觉得那些缆绳有几吨重。进入军官学校之前，他们命令你跑步，腰上缠着一大圈缆绳，背上还得背着两捆，一跑就是十英里。有时你就光站在那里，等待着事情发生。 

   或者是滑很长时间的雪，到达一个地方后再支起帐篷。那时我意识到，倘若上帝希望我们生来就是滑雪的，他应该让我们长出长长的玻璃纤维脚蹼，而不是两只脚。对了，之并不意味着我相信上帝。 

   你必须得把帐篷支起来，点起篝火，才能吃饭。你又冷又饰物，疲惫不堪，因为你已经有两天没有睡觉了。我知道有些人花很多钱参加这种超出极限的室外冒险，把这种做法称之为“锻炼性格的经历”。真要这样，他们参加芬兰军队就行了。 

   实际上，我们并不经常去室外跑马拉松，但有时的确那样做。我计算了一下，在十一个月当中，有一百天是在树林中度过的。芬兰拥有丰富的森林资源：这个国家的百分之七十是被森林覆盖的。我觉得这些森林我都跑遍了。 

   我当军官的差事是在一个五人小组中当火炮控制队长。这意味着你得懂业务，而且要让你的业务显得比实际上更复杂。但我不是一个好领导，我觉得这种差事毫无意思，对于发布命令我也不擅长。接受命令倒是蛮容易的，窍门是你根本不必往心里去。然而我觉得做好这件事情并非是我生命中的使命。 

   至少那时不是。 

   我说没说过拉普兰能冷到什么程度？现在想起来，当时在那里时，我真的讨厌那个地方。然而事情就是这样，当一切都结束后，它很快就变成一段非常美好的回忆了。 

   在我未来的生活中，那段经历还成了我和几乎所有芬兰男人聊天的谈资。实际上，有些人说，强制性服兵役制度的主要原因就是让芬兰男人们在喝啤酒时有话可聊，而且他们能活多久就能聊多久。生个人都忍受了许多痛苦，那是共同的。他们都恨军队，但事后聊起来时却又都格外开心。 

.. _P09:

--------------------------------------------------------
7、爱洗桑拿的国家 
--------------------------------------------------------


   既然聊到我们的国家，就让我再告诉你一些芬兰的情况。 

   我们拥有的驯鹿是最多的，恐怕世界上任何地方的都多不过我们。喝酒的人和跳探戈舞的人也不在少数。只要你在芬兰呆上一个冬天，就会明白喝酒的原因。对探戈舞的着迷我却找不出原因，但幸好舞迷们大都集中在小镇里，你永远也见不到他们。 

   最近的一项调查表明，芬兰的男人是全欧洲最有阳刚之气的。这肯定与他们吃驯鹿肉和将大把的时间花在洗桑拿上有关。这个国家的桑拿浴室经汽车还要多。谁也不知道这种类似宗教的习俗起于何时，但至少某些地方的传统是，在建房子之前先要造好桑拿浴室。许多公寓的一层和顶层都有一个桑拿浴室，每一个家庭都有洗桑拿浴的时间——比如星期四晚上七点到八点(星期四和星期五一般是洗桑拿的日子)。这样一来，你就不必在这个时间去串门了。有一次，我看到一本用英文写的赴芬兰旅游指南，书上不厌其烦地警告读者，说芬兰人从来不在洗桑拿的时候做爱，而且要是真有这样的事情发生，芬兰人自己都会非常惊讶的。我读到这段时忍俊不禁，因为桑拿浴在芬兰人的家里是一个很普通的地方，书里那样说不啻警告读者不可在厨房的地板上做爱。我不认为桑拿有什么特殊之处。在有些偏远的地方，新生儿就是在桑拿浴室里出生的——因为只有桑拿浴室里才有热水——按照某些地方的传统，有些人也死在桑拿浴室里。顺便说一句，这种事情我们家可没有。 

   芬兰人还有许多其他的特性，与世界其他地方的人们不同。 

   比如他们有沉默的传统。人人都沉默寡言。他们常常站在一起，但一句话也不说。这种做法在我们家也不流行，所以我善意地把我的家人称做“非常规类型”。 

   芬兰人凡事还毫无怨怼。我们之所以能够熬过俄国的统治、熬过一系列的血腥的战争和压抑的天气，完全是因为可以在沉默中忍受痛苦并有着坚定的决心。 

   然而在今天，这种沉默似乎有些怪异。德国作家布莱希特二战时曾在赫尔辛基住过一段时间，他在描绘火车站一家咖啡馆里的顾客时曾说，那些人“会讲两种语言却沉默不语。”他的话后来广为流传，所以后来他一得到机会就逃出了芬兰。 

   直到今天，假如你走进任何一座讲芬兰语的城市，尤其是那些小城市的酒吧，肯定会看到若干面无表情的人坐在那里，两眼茫然地望着前方。芬兰人尊敬对方的隐私，这一点非常重要，所以没有人会走到其他人面前与之搭讪。芬兰人还有一个令人不解之处，他们实际上非常友好，可很少有人能发现他们这个特点。 

   我还知道，在芬兰女同性恋的酒吧里，气氛却异常欢快。 

   既然芬兰人不喜欢面对面地交谈，整个国家就成了移动电话最理想的市场。我们对这种新玩意如醉如痴，任何国家都望尘莫及。按照平均人口计算，哪一个国家拥有最多的驯鹿我不清楚，细想起来可能是挪威，但是世界上每一个男人、女人和孩子拥有最多手机的国家是哪一个却是不言自明的。人们甚至还说芬兰人一生下来就应该把手机移植到他们的身体上。 

   使用手机有多种用途。芬兰人往往相互之间发送很长的信息，或者用手机做为传输手段在中学考试中作弊(把一个问题发给朋友，然后等待着对方长篇大论的答案)。我们还使用手机上的计算功能，而大多数美国人根本不知道手机上还有这种功能。不言而喻，下一步就是给坐在同一个咖啡厅里的另一张桌子旁的孤独的人打个电话，然后用手机进行交谈。尽管诺基亚取得了辉煌的成功，但他们生产的手机也使芬兰产生了自发明桑拿浴以来最剧烈的变化。 

   手机在芬兰受到如此热情的接纳其实也无须惊讶。这个国家在采纳新技术方面一贯迅速和信心十足。芬兰和世界其他地方不一样，这里的人喜欢通过电子银行支持各种费用和开展业务，而这种所谓的发出微弱之声的“手机银行”在美国却鲜为人知。与其他国家相比，芬兰平均上网的人数最多。有人把这种对技术的精通归咎于强大的增长率体系——芬兰人的文化水准在世界上排名第一，大学也不收学费，所以学生们经常在大学里逗留六到七年。比如我就呆了八年。一个人将生活中如此多的时间泡在大学里，不可能什么都学不到。也有人说芬兰人对技术的喜欢源于对俄国的战争赔款，为了赔款而发展了航运业，因此改善了基础设施。还有人将此照片于芬兰是个同性恋的国家的事实(曾经一度确是如此，令人不能容忍)。 

   不管出于什么理由，芬兰是一系列技术革新的发源地。比如有声电影的发明就在芬兰。哦，对了，还有 Linux 操作系统。 

   我和李纳斯坐在餐桌旁。我们刚从旅途中返回。塔芙正把买的东西放进冰箱里，我给帕特里夏和丹妮亚拉买了一本书，她们俩正在为那本书争执不休。我将一个制成标本的企鹅和一大瓶花生酱推到一边，打开录音机，让李纳斯讲讲他的童年。 

   “其实，我对我的童年差不多都忘了。”他用单调的口吻说。 

   “那怎么可能？不就才几年前的事？” 

   “问塔芙吧。我对名字、别人的面孔和我做过的事情都记不住。我们家的电话号码我都得问塔芙。我能记住事物的规则以及它们组织起来的方式，但对事情的细节却永远记不住，所以对我童年的细节忘得精光。我小的时候都发生了什么事，我是怎样想的，都记不住了。”“比如说，你有朋友吗？” 

   “不多。我不善社交。与过去相比，我现在在与人交往方面进步多了。” 

   “你的童年是什么样的？我是说，你是否记得某个星期日早晨醒来后，中妹妹和父母去了什么地方？” 

   “那个时候我父母已经离婚了。” 

   “他们离婚时你多大？” 

   “不知道。也许是六岁，也许是四岁。记不住了。” 

   “圣诞节呢？你记得圣诞节吗？” 

   “哦，我依稀记得起来衣服，然后前往我爷爷在土尔库的家。复活节也是那样。除此之外我什么都忘了。” 

   “还记得你的第一台电脑吗？” 

   “那是我外公给我买的一台有名的VIC-20。是装在一个大盒子里送来的。” 

   “盒子有多大？是像装着一双靴子的盒子一样大吗？” 

   “差不多。” 

   “你外公呢？对他还有记忆吗？” 

   “他大概是我最亲的亲人，我不知道……好吧，他很重，但不胖。头发都秃了。他比较内向，像个心不在焉的教授，不过他就是教授。我常常坐在他的腿上，用键盘为他输入程序。” 

   “还记得他身上的味道吗？” 

   “不记得了。这是什么问题？” 

   “每个人的祖父身上都有一种味道。比如廉价科隆、波旁威士忌酒或雪茄味。他身上什么味道？” 

   “我不知道。我当时对电脑太痴迷，没留意。” 

.. _P10:

--------------------------------------------------------
第二章 一种操作系统的诞生 
========================================================


.. _P11:

--------------------------------------------------------
1 昨天的电脑
--------------------------------------------------------

   有些人记忆时间的方法是通过他们曾经驾驶过什么样的车子，干过什么样的工作，或在什么地方住过，以及追求过什么样的情人。而我的生涯却是由电脑来划分的。 

   我成长期间只有过三台电脑。上面提到过的 VIC-20，是我外祖父留给我的遗产。它是“家用”电脑中的一种，是当今 PC 机的前身。般长 64 电脑后来成了 VIC-20 的老大哥，接踵而至的是 Amiga，这种机器在欧洲特别受欢迎。这些电脑从来未像 PC 机甚至苹果II那样流行过，我在玩 VIC 的时候，已经很流行了。 

   在那个年代，PC机普及之前，家用电脑的多数程序使用的都是汇编语言。它们都有自身的操作系统，等同于PC机里的DOS。由于机器不同，操作系统很可能是一种简单的格式，或是增强的格式。那时没有什么技术标准，许多公司都想控制市场。最有名的公司之一就是 Amiga。我现在句子的开头都要用上“在那个年代……”，真是不可思议。 

   等我对VIC-20玩得已经很精通后，我便开始攒钱想买一台下一代的电脑。这在我生活中是一件大事。前面我已经提到过，我对我的家人在某个特定的时间住在什么地方，以及其他许多事情都记不清了，但我购买第二台电脑的过程却很难忘记。 

   我攒了一些圣诞节和生日的压岁钱（我生于12月28日，那两个节日基本上凑在了一起）。有一年夏天我还参加了赫尔辛基公司清洁队，挣了一些钱。赫尔辛基的许多花园没有美化，保养得不太好，更像是一些娱乐场所和绿地，长着高高的树林。我们所做的就是锯掉长高的灌木丛并把死掉的残枝拾走--这种活儿还挺有意思。我一贯喜欢室外运动。曾经一度，我还当过邮差，但送的不是报纸而是垃圾邮件。细想起来，我在夏天基本不怎么打工。但在那些日子里还是干了一些活。总体来讲，我的钱基本都是学校发给的奖学金。 

   在芬兰，给学校捐款是很普遍的事情，连公立小学也有人赞助。所以从小学四年级开始学生就能得钱，发放的方式完全由建立基金的人决定。我记得有一种捐款是奖给班里最受人爱戴的学生的。当时我们六年级，全班还真的举手投票表决，看谁能得到那笔钱。顺便说一下，我当时未被选中。奖金仅有两百芬兰马克，当时只值四十美元，但对一个最受欢迎的六年级学生来说似乎已不是个小数目了。 

   通常情况下，在某一个学科或体育项目中有突出表现的学生都能得到奖学金。许多奖项都是由具体的学校发放或由州政府赞助的。有些奖学金随着时间的推移数目越来越少。我记得有一种奖项最后只值一毛钱。发生这种情况时，学校也会出些钱补进去，但是尽管如此数目仍然不多。这样做的目的仅仅是在每年当中把发放奖学金的传统继续下去。芬兰对学术传统非常认真，这当然不失为一件好事。 

   于是我作为优秀的数学学生，每年都能得到奖学金。上高中后，奖金的数目越来越大，最多的时候可以达到五百美元左右。因此我买第二台电脑的钱基本上是这么来的，我每月的生活费肯定付不起电脑钱。此外我还从我爸爸那里借了一些钱。 

   当时是1986或1987年。我十六或十七岁。那个时候我已不再打蓝球。决定买何种电脑之前，我花了大量时间进行了一番调查。当时的PC质量还不太好，我便决定不买PC机。 

   我选择的是Sinclair QL，你们当中的许多人大概太年轻，对这种机子没有记忆。 

   下面是 QL 的简单历史：当时，Sinclair 是市场上 32 比特的机器之一，主要用于家庭。那家公司的创始人克里夫·辛克莱尔(CliveSinclair) 在英国等同于史蒂夫·沃斯尼亚克 (Steve Wosniak)。他制作出这些电脑的配套元件，然后以 Timex 的品牌在美国销售。没错，一家制造钟表的公司进口 Sinclair 的元件，然后再打着 Times 品牌在这里卖出。早期销售的也是配套元件，他后来开始销售组装好的机器。 

   Sinclair 的操作系统叫做 Q-DOS。这种操作系统是专门为那种电脑写的。按照当时的情况，它的 BASIC 语言非常先进，而且有着不错的图形显示。那种操作系统最令我兴奋的一个特点是它能进行多重任务处理。你可以同时操作多个程序。然而其BASIC部分却不是多重任务处理，所以同一时间之内你不能操作超过一个以上的BASIC程序。但如果你用汇编语言编写自己的程序，就能让操作系统列出时间表，把时间分隔开来，这样你就可以在同一时间操作多个程序。 

   这种电脑有一个 8 兆赫的 68008 芯片，它是摩托罗拉 68000 芯片的第二代，是个更加便宜的版本。在内部，第一代 68000 芯片是 32 比特，但是这个 CPU 却以 16 比特与的设备进行连接，例如存储器和硬件附加装置。由于它只能在一个时间内从存储器上载16比特，因此16比特的操作常常比 32 比特的操作要快。这种结构非常受欢迎，今天在许多嵌入装置和轿车里仍然有人使用。虽然芯片已经不同，但却是基于相同的结构生产的。 

   我的电脑中的 68000 芯片在与 CPU 之外的设备连接时使用的是8比特，而不是16比特。但虽然它与外部设备互动的是8比特，其内部却是32比特的。这就使它在编程方面显得非常不错。 

   它的内存是 128 千字节，不是兆字节，这在当时对家用电脑来说已经非常大了，而被它所取代的 VIC-20 仅仅有 3.5 千字节的内存。因为它是一台 32 比特的机器，所以能毫无困难地读取所有的内存，这在当时是前所未闻的。我之所以要买这种电脑便是出于这个原因。它的技术非常有意思，我喜欢它的 CPU。 

   我的一位朋友认识一家商店的老板，于是我希望能在他那里打折买这种电脑。但等货的时间太长，于是我便前往赫尔辛基一家最大的书店，因为那里有一个电脑柜台。我的电脑就是在那里购买的。 

   那台电脑花费了我差不多两千美元。当时的情况是，低档电脑的价格总是在两千美元上下。只是在最近两年这种情况才有所变化，现在你只需花五百美元就能买一台 PC 机。这种情况和造汽车一样，没有人愿意生产低于一万美元的汽车。在某一段时间，低于一万美元就不值得制造。不错，公司完全可以造出销售价格为七千美元的汽车，但汽车制造商们认为，凡是能出得起七千美元的人，如果能买到附加的标准设备，比如空调，花上一万美元他们也高兴。假如你把今年出产的低档轿车同十五年前的同类轿车相比较，就会发现，它们的价格大体一致。 

   其实，将通货膨胀的因素去除，它们的价格或许稍微便宜一点，然而质量却好得多。 

   过去的电脑就是这样。当电脑还不是人人都买的商品时，你就只能忍受两千美元的昂贵价格。假如一台成本很低的电脑价格非常昂贵，公司就无法大量地进行销售。但生产商制造电脑的成本并非很低，所以公司若是卖得很便宜就不合算。人们总是希望多花二百美元买台更好的机器。 

   最近两年，制造电脑的成本已经大幅度降价。甚至低档的电脑质量也非常好。公司已经失去了许多愿意多付二百美元买一台稍好一点机器的客户，它们就只好依赖价格进行推销了。 

   我得承认，QL 的卖点之一就是它的样子非常酷。 

   整个机身是无光泽的黑色，带着一个黑色键盘。整个样子有棱有角，而不是那种圆圆的漂亮的机型。它的造型有点走极端。键盘有一英尺厚，因为它与电脑联为一个整体。当时许多家用电脑就是那样设计的。在键盘的右端，即应该是小键盘的地方，有两个具有革新意义的 Sinclair 微型驱动器，它用的是只能在 Sinclair 上使用的无限循环磁带。它们的作用就等于软驱。因为它是一个长长的圆圈，你可以进行旋转，直到点到你需要的东西为止。实践证明这个创意并不是理想，因为它不像软驱那样可靠。 

   于是我花两千美元买了一台 SinclairQL。我用它所做的就是不断地编写程序。我总是在寻找有意思的事情做。我有一个 Forth 语言解释程序和编译程序，纯粹是为了用着玩。Forth 是一种很怪的语言，现在已经没有人使用。它是一种挺好玩而且在市场上有利可图的语言，因为可以做许多事情而在八十年代被广泛运用，但从来没有特别普及过。它对不懂技术的人来说非常难于掌握。其实这种语言也没有什么太大用处。 

   我开始自己编写工具性程序。我最初为这台机器买的东西之一是一个携带 EEPROM (电子可读及可编程序只读存储)卡的扩展底座。这是利用特殊模件自己编写的内存，关机后它仍存在。这样一来，需要时我就能随时获得那些工具，没必要将它们写入内存，于是就能占用珍贵的内存进行编程了。 

   使我对系统感兴趣的是，我买了一个软盘控制器，因为已不必再使用微型驱动器了。但软盘驱动器上的驱动程序不好使，于是我自己又写了一个。在编写过程中，我在操作系统里发现了一些病毒。我之所以能发现病毒，是因为我编写的一些东西无法操作。 

   我的编码总是很完美的。所以我知道肯定是别的地方出了差错。 

   于是我把整个操作系统都卸掉了。 

   你可以列出一推关于操作系统的书籍，这些书能帮上忙。你还需要一个反汇编程序，这种工具能把机器语言变成汇编语言。这一点非常重要，因为你要是只有机器语言的版本，执行指令时就非常困难。你会发现一个指令跳到一个数字的地址，读起来非常困难。一个好的反汇编程序可以为数字起名字，也可以让你起名字。你还可以使用它帮助你寻找特殊的相关指令。我自己有一个反汇编程序，可以用它创立相当不错的目录。一旦出现差错，我就可以进入反汇编程序，让它从特殊的地点找出目录，而且我还能看到操作系统将要执行的任何任务。 

   有时我使用反汇编程序并非是因为出了故障，而是想弄明白它到底能做些什么。 

   QL令我讨厌的一个地方是，它只有一个只读操作系统，对于一切都无法改变。它在某些地方的确有HOOKS(是一种消息处理机制，它使程序员可以使用子过程来监视系统消息，并在消息达到目标过程前得到处理--译注)。HOOKS就是你能切入你自己的编码接管某些功能的地方。但HOOKS只出现在某些特定的地方。要是能完全替换你的操作系统就会好得多。在只读存储器中运行一个操作系统是一种非常糟糕的想法。 

   虽然我说过，芬兰是一个非常乐于接受新技术的国家，但 Sinclair QL 在这个欧洲第七大国却没有站住脚跟。由于 QL 在芬兰的市场非常之小，每当你想为反传统的尖端机器购买升级设备时，只能通过邮寄的方式从英国购买。你必须翻阅许多产品目录，直到找到一家销售你所需要的设备的厂家为止。然后你还得准备好保付支票，再等上几个星期的送货时间。那个时候还没有网上购物和在网上使用信用卡。在我很希望把我的内存从 128 千字节扩展到 640 千字节时，我只能通过邮购的方式获得。我买了一个新的汇编程序，将汇编语言转换成机器码(数字1和0)，又买了一个编辑器，后者主要是为编程使用的文字处理程序。 

   新的汇编程序和编辑器都不错，但是它们是在微型驱动器上，无法放入EEPROM。于是我自己编写了汇编程序和编辑器，应用于我所有的编程之中。编辑器和汇编程序都是用汇编语言写的，按照今天的标准看上去非常愚笨。这种语言又复杂又费时，我想用汇编语言解决一个问题要比用C语言解决一个问题多出一百倍的时间，而当时C语言已经存在了。 

   我给我的机器带着的基本处理程序增加了好几个指令，所以只要我想编辑任何东西，机器就会自动操作我的编辑器，它立刻就会显现出来。 

   我的编辑器比机器本身带的编辑器速度要快。我可以在显示器上以极快的速度书写文字，我为此而感到骄傲。通常用这样的机器，在显示器上写满字需要很长的时间，你可以看到屏幕在慢慢地滚动。但是用我的编辑器在书写时速度非常之快，屏幕滚动能给人造成一种模糊的感觉，这让我很得意。这一点对我非常重要。它使我的机器显得性能惊人，而且我知道为了让我的操作更迅速，自己已做了大量的工作。 

   那时，在我所认识的人当中，像我那样沉迷于计算机的人微乎其微。学校里有一个电脑俱乐部，但我几乎不怎么去。那个俱乐部主要是为那些想了解电脑的孩子们创立的。我们的高中只有二进五十名学生，但我想他们在十岁以后就再没有一个人玩电脑了。 

   通常我用我的 SinclairQL 电脑做的事情是复制游戏。我曾用 VIC-20 电脑为我喜欢的游戏作过翻版。有时我还让游戏升级。但多数情况下它们都得不到改进。机器更高级了，但概念并无改进。我最喜欢的游戏大概是“小行星”，但我怎么也不能很好地将其复制下来。原因是那个时期所有游戏机中心的“小行星”游戏都是用真正的矢量图形显示进行的。那些游戏的图形不是靠小粒(即像素)显示的，而实际与阴极射线管的原理相同：电子是从阴极射线管的后面通过电子枪发射出来，然后用磁铁进行转向，这样便可以高清晰度地显示图像，但如想复制过来就不那么容易了。你当然可以复制，但假如你的电脑没有特殊的图形显示能力，复制出来的东西便与原本的“小行星”相去甚远。 

   我记得曾经采用汇编语言对“穿靴人”做过翻版。第一个步骤是，你必须记住穿靴人里的人物是什么样子。然后你把它们画在一张16*16平方厘米的坐标纸上，再涂上颜色。你若有艺术细胞，就可以画得很逼真。然而若像我似的完全不懂艺术，画出来的人物就会像是穿靴人的生了病的小表弟。 

   所以这个复制做得并不理想。然而我却为此感到自豪。做出来的那个游戏是可以玩的，于是我把它寄给了一家发表电脑编码的杂志。我曾经把其他的程序寄给一些杂志，所以我以为我这次被他们接纳应是理所当然的事。事实却恰恰相反。 

   其中的一个问题是，无论你在什么地方出现一个极为微小的错误，它就会运转不灵。 

   我自己也写过一些游戏。然而创作需要某种心态。由于游戏需要大量的表演，就需要你对电脑的硬件十分精通。这我做得到。但我却不具备玩游戏的感觉。一个出色的游戏通常并不是它的速度有多快，也不是它的图形显示得多么漂亮。它必须能让你感到玩得起来--能吸引人。游戏和电影颇为相似。特殊效果是一回事，然而你还是需要情节。我所有的游戏从来都没有情节。游戏还需要有发展，有想法。发展常常就是让游戏速度越来越快。穿靴人就是这种模式。进展时也产生变化，或是让你能够更紧密地跟踪里面的怪物。 

   我对“穿靴人”感兴趣的另一个原因是，它能够解决图形显示闪烁不定的问题。这在老式的电脑游戏中是一个比较普遍的问题，因为没有特殊的硬件，你的人物就会闪烁不定。你采用的办法就是去掉老拷贝，重写一个新拷贝。假如你的时间恰巧处理得不好，人们就能看到没有拷贝时的状况，于是就更会出现闪烁的情况。解决这一难题有许多种方式。你可以先画一个新人物，然后再把以前的人物去掉来避免这一问题。但你必须小心谨慎，不要把老人物被新人物覆盖住的那部分也给去掉。这样你就能获得一个良好的效果，不会再看到烦人的闪烁现象。 

   这一解决方案的问题是创作时相对昂贵，而且特别费时间。 

   游戏为何总是处于技术领先的地位，而且编制人员为什么总是先制作游戏程序，其中是有原因的。一方面是关在房间里玩电脑的聪明的程序编制人员都是十五岁左右的孩子(我十五年前就这么认为，至今对此仍深信不疑)。游戏之所以总处于领先地位还有另一个原因：它总能推动硬件的发展。 

   你若是看一下今天的电脑，就会发现它们速度快得可以做任何事情。但考验硬件极限的往往是动作感过强的游戏，如现在很流行的一些三维游戏。从根本上说，通过电脑上的游戏，你可以看出硬件是不是过关。进行文字处理时，速度慢上一二秒钟也不会在意，但玩游戏时，出现十分之一秒的误差也非常明显，游戏过去都比较简单，时至今日，编程只是任何游戏的一小部分，此外还有音乐和情节。假如你把制作游戏比做拍电影，编程者在一定程度上就等同于摄影师。 

   就这样，我使用了 Sinclair QL 电脑三年：从高中到赫尔辛基大学，再到芬兰部队服役。这个电脑不错，但我们肯定会分手。在最后的一两年里，我发现了它和短处。68008 是个不错的 CPU，但我在书上了解到了下一代的 68020，得知了诸如内存管理和分页等种种功能，在使用低档电脑进行工作时，这种新的电脑可以完成非常重要的任务。 

   Sinclair QL 令我讨厌的地方是，它的操作系统虽说能进行多重任务处理，但在任何时候都会出现死机，因为它没有保存措施。只要一个任务出现差错，就能让整个机子死机。Sinclair QL 是克里夫·辛克莱尔爵士最后一次设计和制造的电脑，原因之一是这种电脑在商业上并不成功。它的技术非常有意思，但公司却存在着生产问题和质量保证问题，而且最终宣传上也很失败。此外，市场竞争也开始变得越来越激烈。 

   到了八十年代末期，你便开始想象，或许有那么一天，大街上的每一个人都可能拥有一台电脑，哪怕只是进行简单的文字处理。而且种种迹象表明，发展方向是 PC 机。不错，IBM 最早制造的PC机尽管有许许多多的技术问题，但却开始摆满了商店的货架，销售得极为成功。PC 机的另一个吸引人的地方是：外围设备非常标准，而且很容易就能搞到。 

   所有关于这种较新的 CPU 的文章我都阅读，它可以完成我想完成的任何任务。显而易见，看上去非常有意思的 68020 发展前景不佳。我完全可以为 QL 买一个升级的 CPU。在那个年代，这便意味着重新组装一台机器。尽管如此，操作系统还是没有内内存管理，所以我不得不自己编写。于是我想：这将是很费力的一步，而且获得一个CPU过于昂贵。 

   此外，令我越发感到头疼的是：为电脑购买设备的问题依旧存在。Sinclair QL电脑的产品目录似乎根本就没有过，所以你不可能简单地抄起电话，像定购西尔斯百货商店的邮购商品那样定购内存设备。再说，通过邮局从英国订货的做法已经过时了。当时还没有用收缩封套包装的软件盘，这我倒不在乎，因为我都能自己编写。 

   这个头疼的问题却给我带来了一个好处。在我琢磨着把我的机器处理掉时，也决定把我的附加设备卖掉。我指的是我买的硬盘驱动器，因为要扩展内存，我一分钟也不能忍受了。当时没有人在大街上到处找这种东西，所以我只能在电脑杂志上登广告，然后就祈祷等待着。就这样，我认识了我的好朋友乔科·维亚鲁马奇（Jouko Vierumaki）。在整个芬兰，他大概是第二个拥有 SinclairQL 电脑的人。他对我的广告做出了回应，骑着自行车来到我家，买走了我的一些外围设备。后来，他也让我学着打斯诺克台球。 

.. _P12:

--------------------------------------------------------
2、上大学 
--------------------------------------------------------


   我在上大学的第一年，住在彼得盖坦街，我的宿舍在一层，靠窗户的一张桌子上就摆着Sinclair QL电脑。但我没有编写多少程序，原因之一是我必须集中精力读书，原因之二是我也找不到什么项目去做。没有项目可做就会缺乏热情。你总是在寻找能够让你鼓起劲去做的事情。 

   当时似乎是参军的好时光，而且我也知道那是早晚的事。我当时十九岁，正因为自己的电脑毛病太多而心情沮丧。而且，当时也没有任何有意思的电脑项目，于是我就搭上了一辆开往拉普兰的火车。 

   前面我已经说过，关于军队在体力方面会对我们做出什么样的要求我是一无所知的。所以在那里手执武器上了一个月的“体育课”之后，我便觉得在我有生之年完全有资格从此一动不动，享受平静的生活了。惟一可做的事情就是把编码打入键盘，或者手里端着一瓶比尔森啤酒（说真的，在我复员整整十年后，才第一次参加一次剧烈的活动。当时大卫硬拉着我去冲浪。旧金山半月湾的强大海浪差点没把我淹死，我的腿一连酸了好几天）。 

   部队服役结束于 1990 年 5 月 7 日。塔芙会告诉你，我连我们的结婚纪念日都记不住，但我却不大可能忘记我离开部队的日子。 

   刚一离开部队就想弄只猫。 

   复员的几个星期前，我一个朋友的猫下了一窝崽，于是我把他剩下的唯一一只小猫买了下来。那是只白色的公猫，长得很漂亮。它生下来的头几个礼拜就在室外跑来跑去，所以在我妈妈公寓的室内和室外养活起来都很容易。我给它起了个名字，叫兰迪。它现在已经十岁了，和它的主人一样完全适应了加利福尼亚的生活方式。 

   那年整个夏天我没有干什么正事。我大学二年级的课程直到秋天才开始。我的电脑状态也很不佳。于是我就穿着一件破旧的睡衣，逗兰迪玩，偶尔和朋友们联欢会，让他们笑话我的保龄球和台球的拙劣技术。当然，我对我的下一部电脑也做了一些设想。 

   我面临的是一个电脑迷的困境。 

   我同其他随着 68008 芯片一起长大的电脑迷一样，特别讨厌PC机。但在1986年386芯片出台后，PC突然看上去有了魅力，凡是 68020 能做的事情它们都能做。到了 1990 年，大规模的生产使这种机器的价格急剧下跌。我对钱很在乎，因为我手拮据。于是我就希望拥有一台这样的电脑。正因为PC非常红火，升级材料和装置很容易就能弄到。在硬件方面，我特别希望有一台标准的机器。 

   我决定来个大跳跃，超越界限，而且弄一个新的CPU这事的确让人兴奋。于是我便开始把我的 Sinclair QL 的零件一点点地卖掉。 

   每个人都会一本改变其一生的书籍，比如《圣经》、《资本论》、《星期二和莫瑞在一起》、《我想知道我在幼儿园里学到的一切》等等（我真诚地希望，在你读过了本书序言和我的关于生命意义的理论之后，这本书也能对你产生影响）。把我推向生命高峰的是安德鲁·S·塔南鲍姆（Andrew S. Tanenbaum）写的《操作系统：设计和执行》。 

   我已经选好我的秋季课程，其中最让我期待的是C程序语言和UNIX操作系统。在等待着上课期间，我还买了一本上面提到的教科书，希望能先读一下。在这本书中，住在阿姆斯特丹的大学教授安德鲁·塔南鲍姆讨论了 MINIX，那是他为 UNIX 撰写的教学辅助软件。MINIX 也是 UNIX 的小型翻版。一旦读完了介绍，了解到UNIX背后的理念以及那个强大、利索、漂亮的操作系统所能做到的事情后，我便决定弄一台机器来操作 UNIX。我将操作 MINIX，那是我所能找到的惟一版本。 

   通过阅读和对UNIX的了解愈来愈深，我的热情高涨起来。 

   说实施，我的热情从来没有低落过（我希望你在做某件事时也能说出同样的话）。 

.. _P13:

--------------------------------------------------------
3、从 UNIX 开始
--------------------------------------------------------


   赫尔辛基大学第一次拥有UNIX是在1990年秋季开学的时候。 

   那个强大的操作系统是美国电话电报公司的贝尔实验室于六十年代发明的，然而它的开发却是在别的地方。前一年，也就是我上大学的第一年，我们有一台操作VMS的VAX。这个操作系统糟糕透顶，你决不会说出：“嘿，我在农时也想装一个VAM”这样的话，它只能让你说：“你怎么会使用这个破玩意？”它用起来极不方便，没有多少工具，也不适合轻松容易地进入因特网，而因特网是在UNIX上面操作的。你甚至都无法轻易地估算出文件到底有多大。坦白地说，VAM可能很适合某些操作，比如数据库。但这种操作系统无法让你为之感到兴奋。 

   赫尔辛基大学当时意识到应该淘汰诸如VMS类的软件。学术界已经对UNIX产生了越来越大的兴趣，于是我所在的大学购买了一台操作Ultrix的微型VAX，Ultrix是DEC公司生产的一种UNIX版本。 

   我特别渴望操作UNIX，将我从安德鲁·塔南鲍姆书上所学到的东西进行试验。要是我有一台386，它肯定会对我能进行的一切探索感到兴奋不已。但是，我无法凑齐一万八千芬兰马克买一台386。我知道一旦秋季学期开始后，我就能使用我的Sinclair QL进入大学新的UNIX电脑，直到我自己凑齐了钱买一台PC机，再在上面操作UNIX。 

   因此，那年夏天我做了两件事。第一件是什么都没做。第二件事是读完了七百一十九页的《操作系统：设计和执行》。那本红色的简装本教科书差不多等于睡在了我的床上。 

   赫尔辛基大学为微型VAX电脑购买了十六个客户执照。这意味着“C语言和UNIX”课程的选修学生人数被控制在了三十二名--我想学校的想法是十六个学生白天使用机器，另外十六个学生晚上使用。教师和我们一样，对UNIX也不太熟悉。他对此公开承认，因此也没构成什么问题。 

   但他每次都比学生先读一个章节。有时学生也会提前跳读三个章节，因而上课成了一种游戏，学生们问的问题都是在三个章节之后才能学到的，目的是为了难住教师，看他是否已经读了那么多。 

   我们在UNIX的大世界中都是婴儿，一边学习一边完善这门课程。然而关于这门课最明显的是，在UNIX背后有一个非常独特的理念。你在这门课的第一个小时就抓住了这一点，剩下来就是解释细节了。 

   UNIX的独到之处在于它所追求的基本理想。它是一个干净利索、非常漂亮的操作系统。UNIX具有程序的观点，凡是做任何事情都是一个过程。这里有一个简单的例子。shell command是为进入操作系统而键入的一种指令，在UNIX中，它并不像在DOS中似的被装在操作系统里。它只是一个任务，同其他的任务相同。这个任务是从你的键盘中读出的，然后再写回到显示器。任何能做的事情的东西在UNIX里面都是一个程序，此外还有文件。 

   吸引我的就是这个简单的设计，它也吸引着大多数对UNIX感兴趣的人（至少对我们电脑迷们颇有吸引力）。你在UNIX上完成的大部分任务都是通过六个基本操作完成的，它们被称作“系统呼叫”（system call），因为它们是你对操作系统的呼叫，你便让它为你完成任务。通过这六个基本的系统呼叫，任何事情你都可以完成。 

   此外还有“创建子进程”（fork）的概念，它是UNIX的基本操作之一。当一个程序创建子进程时，它便把自身完全复制出来。这样你就有了两个相同的拷贝。复制拷贝多数情况下再去执行另一个程序--用一个新项目替换自己。这便是第二个基本操作。其他四个基本系统呼叫--打开、关闭、读和写--都是为了访问文件的。这六个系统呼叫便组成了UNIX的简单操作。 

   当然，从细节方面讲，还有数不清的其他系统呼叫。然而一旦你明白了这六个基本系统呼叫，你就了UNIX。UNIX的好处之一是，你并不需要拥有复杂的连接去创立复杂的事物。你可以通过简单事情的互动来建立任何程度的复杂任务。你只需在简单的程序之间创造出交流渠道，在UNIX中叫做“管道”（pipes），就能解决复杂的问题。 

   一个差劲的系统在做任何你想做的事情时都需要有特殊的连接。UNIX则恰相反。它提供给你执行任务的材料，这些材料足以让你完成任何事情。这就是所谓的干净利索的设计。 

   语言其实也是如此。英语有二十六个字母，你可以用这些字母创造出任何单字。另一种语言是汉语。在汉语中，你所想到的任何一件事都由一个字来代替。你一开始用的就是复杂的形态，然后在有限的方式中将复杂的形态组合起来。VMS的大体上也是这种思路，Windows的方法也是如此。 

   而UNIX的理念是越小越漂亮。一小堆简单基本的建筑材料，结合起来就能创造出无限的复杂表述。 

   物理的规则亦是如此。你努力找出基本的规则，而这些规则都是相对简单的。从那些简单的规则中，通过相互作用产生令人不可思议的复杂性。 

   那种简单的设计并非是自然产生的。UNIX是美国电报电话公司贝尔实验室的丹尼斯·里奇（Dennis Richie）和肯·汤普森（KenThompson）花了很大力气设计完成的。你也不能认为简单就是容易。简单需要特别的设计和很高的品味。 

   让我们再回到人类语言的例子上。像图画似的中国象形文字是最先产生的，然后再追求“简化”。而建筑材料似的做法则需要更多的抽象思维。同样，你不能将UNIX的简洁同上不了档次混淆起来--事情正好相反。 

   但这并不是说，创造UNIX的最初原因有多么复杂。它和计算机的许多其他事情一样，都是以游戏开始的。最初有人想在等离子显示器上玩电脑游戏，那就是UNIX发展起来的原因。正因为当时人们觉得这个操作系统不是一个严肃的项目，美国电话电报公司才认为它并非是商业上的冒险尝试。事实上，美国电话电报公司的垄断受到制约，对其限制之一是不能推销电子计算机。所以创造UNIX的人有很大的，尤其在为大学服务方面没遇到什么阻碍。 

   于是乎，UNIX在学术界就演变成了一个大项目。到1984年美国电报电话公司分家后，它已被允许进入电脑业，那时大学里的计算机专家们--尤其是加州大学伯克利分校的专家们--已经在比尔·乔（Bill Joy）和马歇尔·克拉克·迈克库塞克（Marshall KirkMcKusid）的指导下，把开发和改进UNIX的工作进行了许多年了。 

   但到了1996年初，UNIX已经成为所有超级计算机和服务器的头号操作系统。它的市场非常大。但当时的问题之一是，已经出现了数不清的操作系统的竞争版本。有一些是从控制得比较严密的美国电报电话公司代码库里创造出来的（即所谓的“V系统”），另一些人则是从加州大学伯克利分校的代码库衍生而来（即BSD--伯克利软件分布），还有的则是这两者的结合体。 

   其中一个BSD的衍生版本特别值得一提。那是386BSD项目，是比尔·乔利兹（BillJolitz）在代码库的基础上做成的，分布在因特网上。后来它又进一步分裂，成为人人都可以获得的BSD--Net BSD，Free BSD和Open BSD，在使用UNIX的群体中引起广泛的注意。 

   于是美国电报电话公司突然觉醒了，将加州大学伯克利分校告上了法庭。最初的代码是电报电话公司的，但绝大多数后期工作都是在伯克利完成的。加州大学的校务委员们声称他们有权传播和销售他们的UNIX版本，而且还可收取象征性的费用。而且他们还向人证明，他们已为此做了大量工作，基本上把电报电话公司的软件进行了重写。官司的结果是，Novell公司从电话电报公司买断了UNIX，一部分体系不得不从电报电话公司中分离出去。 

   同时，那场无休止的官司却让一个儿童赢得了一些时间，使自己成熟和发展起来。具体地说， Linux 获得了时间去占领市场。我自己走在了我的前面。 
   坦白地讲，在使用UNIX的人当中，有许多是几乎发疯的人。他们不是集邮疯子，不是把邻居的狗毒死的疯子，而是一些生活方式很另类的人。 

   别忘了，UNIX最初的主要发展是在六十年代和七十年代，我当时正在祖父公寓里的一个洗衣筐子里睡觉。当时正是美国嬉皮士的时代，而那些人也都懂技术。有关UNIX应共享的理念和当时的社会环境有关，而并不应简单地归功于其开放源代码的系统本身。那是一个了各种理想的时代。革命、解放、自由爱情（自由爱情我可没赶上，即使赶上也不知该怎么做）……于是UNIX的相对开放性对这类人就特别有吸引力，尽管在当时它还缺乏商业上的价值。 

   我第一次了解到UNIX可开发性的一面大概是1991年前后，当时拉尔斯·沃兹尼亚斯（LarsWizenius）拉着我去赫尔辛基理工大学参加一个集会。人人都知道，这所大学根本不在赫尔辛基，而是在城市边界线以外的艾斯普。学校的人想和豪华的赫尔辛基联系起来，哪怕只是在名义上。当时的演讲者是理查德·斯多曼（Richard Stallman）。 

   此人是自由软件的鼓吹者。 

   1983年，他开始研究UNIX的一个替代物，将其称作GNU系统，其含义是“GUN不是UNIX”（GUN是“GUN is NotUNIX”的字首缩略语--译注）。这些只有在电脑界内部开的玩笑，常人是很难听懂的。电脑迷之间流传的文学游戏实在是数都数不清。 

   更重要的是，RMS（理查德·斯多曼希望别人这样称呼他）还撰写了《自由软件宣言》和自由软件产权证书，即GPL。他首先提出的关于开放源代码的概念完全是有意的，而并非出于偶然，和UNIX最初的开放发展理念是相吻合的。 

   我得承认，我对社会政治方面的问题了解得不多，而这些问题过去和现在对RMS都非常重要。我对他所创立的开放软件基金会的宗旨也知之甚少。事实是，我对1991年人们谈论的话题也没有多少记忆，这说明当时它对我的生活并没有产生多大的影响。我当时所关心的是技术，而不是政治--我们家里的政治已经够多的了。但拉尔斯是个思想理论家，于是我便跟在他身后去听听。 

   我在生活中第一次见到了典型的留着长发、蓄着长胡子的黑客形象，其代表就是理查德。这样的人在赫尔辛基为数不多。 

   我当时可能没有看到眼前的光芒，但我猜他说的一些话也多少给了我一些锾。毕竟，我后来为 Linux 使用的就是GPL。就这样，我再一次走在了自己的前面。 

.. _P14:

--------------------------------------------------------
4、第一台386和终端仿真
--------------------------------------------------------


   1991年1月2日。 

   在我的日历上，圣诞节和我的二十一岁生日是两个最重要的能让我得到金钱的日子，而这一天是这两个日子之后商店开门的第一天。 

   我手里攥着在圣诞节和生日得到的钱，做出了一个重大的财政决定：准备买一台价格一万八千芬兰马克的计算机。这差不多等于三千五百美元。我没有这么多钱，所以打算首付三分之一，剩下的用赊账方式来付。其实那种电脑的价格是一万五千芬兰马克，其余的三千马克税款可在三年之内付清。 

   我去的是一家小店，也就是那种夫妻店，只是我去的这家只有丈夫，没有妻子。我对生产厂商不太在乎，所以决定买一台杂牌的，装在一个白色大箱子里的电脑。老板把一张价格表递给你，上面有你想要的CPU、价格以及硬盘的大小。我想要大功率的。我希望内存是4兆，而不是2兆。我希望我的CPU是33兆赫的，当然，要是16兆赫也能凑合。不，我要买就买最好的。 

   我把自己希望的规格告诉他们，他们就给你组装好。如今在因特网和快递的年代，这听起来似乎很怪。三天以后你去提货，但那三天就像过了一个礼拜。1月5日，我让爸爸开车帮我把新电脑运回了家。 

   这台电脑不仅是杂牌，而且其貌不扬。它的颜色灰蒙蒙的。我买这台电脑并不是因为它看上去很酷。它的样子极不好看，有一个14英寸的显示器，是我所看到的价格最便宜也最笨重的机器。我用“笨重”这个词，意思是说很少有人拥有这么大功率的电脑。我不想将其描绘成样子难看、但功能齐全的电脑--就像是一辆沃尔沃轿车。但事实是，我希望这台电脑靠得住，而且最终我需要升级时，它也能轻易地做到这一点。 

   这台电脑有一个DOS操作系统。我想使用UNIX的变体MINIX，所以我订了货，然而这个操作系统需要等一个多月的时间才能到达芬兰。当然，你也可以在一家电脑商店买一本关于MINIX的书，但人们对这种操作系统的需求非常之少，所以你必须事先向书店订购。操作系统的价格是一百六十九美元，再加上税，还有别的什么费用。当时我觉得这简直太不可思议了。坦白地说，我今天仍旧这样认为。当时那一个月让我觉得就像度过了六年。在我等待买我的PC机时，也没有经受过那样大的烦躁不安。 

   当时正值隆冬。你若从寝室里出来，就可能会遇到被老太太们撞倒在雪地上的危险。这些老太太们实在应该呆在家里为她们的家人煮煮白菜汤，或一边织毛衣一边在电视上看冰球，而不是应该出来趔趔趄趄地瞎溜达。 

   那个月里，我基本上是在用新电脑玩“普鲁士王子”游戏。不玩时就看书，以便弄明白我买的电脑的功能。 

   MINIX软件终于在一个星期五的下午到了，当天晚上我便将其装了上去。你得用十六张软盘才能把这个软件装入计算机。然后整个周末就都花在了熟悉这个新系统上。我学会了这个操作系统的好的一面，但更重要的是，也了解到了我不喜欢的一面。我从大学的电脑上把我熟悉的程序下载下来，来弥补它的不足之处。总之，我用了将近一个月左右的时间，才使这个系统完全变成了我自己需要的系统。 

   住在阿姆斯特丹的、撰写MINIX的安德鲁·塔南鲍姆想把这个操作系统作为教学工具，于是在一些不利的方面它都被故意损坏了。MINIX也得到了一些改进，最出名的一个改进是一个叫布鲁斯·伊文斯（BruceEvans）的澳大利亚人进行的，他使用的是MINIX386。他的改进使MINIX在386上运行起来更方便。在我购买这台电脑之前，我就一直在网上跟踪MINIX的消息，所以从一开始我就想使用它的升级版。但是，你不得不买MINIX的正版，然后再做大量的工作，引入伊文斯的改进--这是工作的主要任务之一。 

   MINIX有一些性能令我很不满意，其中最大的失望是终端仿真（terminalemulation）。仿真很重要，因为我只能依赖这个程序，才能让我家里的电脑模仿大学的电脑。每当我拨电话接通大学的电脑，使用强大的UNIX工作或仅仅是上网时，都使用终端仿真程序。 

   于是我开始做一个项目，制作自己的终端仿真程序。我不想在MINIX底下做这个项目，而是想在硬件水平上完成它。这个终端仿真项目也是一个很好的机会，可以让我了解386硬件的工作性能。我前面已经说过，这时正值赫尔辛基的冬天。我的电脑又笨又大。这个项目最重要的部分就是悟出这台机器都能做些什么，并从中获得乐趣。 

   我不得不从BIOS开始，BIOS是计算机启动的早期ROM编码。它可读软盘和硬盘。所以这次我在软盘上操作。它读出软盘的一个扇区并跳到那里。这是我的第一台PC，我不得不学着如何进行这种操作。386是以“常规模式”启动的。但为了充分利用全部的CPU和进入32比特模式，你只得进入“保护模式”。在此之前，你得进行大量的复杂的测试。 

   为了制作仿真程序，你需要了解CPU是怎样工作的。其实，我用汇编语言收发室的部分原因就是为了了解CPU。其他你还需要了解的事情包括：怎样写入显示器，怎样读键盘输入，怎样读写调制解调器--但愿我的这些文字不会把非电脑迷们吓跑。 

   我想出两条独立的线程。一条线程从调制解调器读出，然后在显示器上显示。另一条线程从键盘上读出，然后写入调制解调器，这样就会在两条线程上运行着两条管道。这叫做任务转换，386有支持这一程度的硬件。 

   我写的最早的试验程序是使用一个线程将字母A写到显示器上。另一个线程写B。我知道，这听起来没有什么奇怪的。我把此编入程序，让其在一秒钟之内出现若干次。在定时器的帮助下，我使这个程序这样运转：显示器上先出现一连串的字母A，然后突然之间，转变成一连串的字母B。从实际的角度看，这是一个完全没有任何用处的练习。但却是一个很好的方式，显示出我的任务转换是可行的。做到这一点大约花了我一个月左右的时间，因为我必须一边做一边学习。 

   于是，最终我便能改变由一连串A和一连串B组成的两个线程，从而使数据一个读自调制解调器，再写入显示器，另一个读自键盘，再写入调制解调器。我有了自己的终端仿真程序。 

   每当我想读新闻，我就运行自己的程序。我把自己的软盘插进，重新启动机器，就能从大学的计算机里读新闻了。倘若我想改进终端仿真组合程序，我就启动MINIX，用它进行编程。 

   对此我感到非常骄傲。 

   对于我的了不起的个人成就，萨拉是了解的。我显示给她看，她盯着显示器看了大约五秒钟，看着上面是一串A和一串B，说了声“很好”，便没什么感觉地走开了。我意识到我的成绩看上去并不辉煌。它虽然看上去平平，背后却包含了大量的工作，犹如你指给人看你铺设了一条长长的柏油马路，但想向别人解释这条马路的意义是完全不可能的。另一个目睹我成绩的人大概是拉尔斯--另一个讲瑞典的学生，他和我同一年主修的计算机专业。 

   当时是三月，也可能是四月，就算彼得盖坦街上的白雪已经化成了雪泥我也不知道。不过我也并不关心。大部分时间我都穿着睡衣，趴在我相貌平平的计算机前。窗户上的窗帘遮得严严密密，把我和阳光--更不用说外部世界--隔离开来。我每月都要为新电脑付款，预计在三年之内付清。当时我不知道的是，我的款项在第二年的就不用再付了。那时我已经写出了 Linux ，它将被许多人见到，而不仅仅只是萨拉和拉尔斯。 

   当时，现在跟我一起在Transmeta公司工作的彼德·安文（Peter Anvin），为了帮我偿付我的电脑钱，开始在因特网上为我募捐。 

   钱就这样来了。别人都知道 Linux 并没有让我获利，于是人们便觉得，让我们大家凑点钱，替李纳斯把电脑钱还清。 

   这实在太好了。 

   我实在是没有钱。我一向认为不应该向别人要钱或乞求钱，这一点非常重要，但事实上我却得到了钱，所以……让我激动得无话可说。 

   Linux操作系统就是这样开始的。 

   我的实验程序变成了终端仿真组合程序。 

   《熏鲱》杂志将我派往芬兰，去采写报道奥卢的文章。奥卢是一个新崛起的高科技中心，虽然它的位置十分可怕：离北极圈开车只有几个小时的距离，里面却有一百四十一家新成立的公司。这是一次极好的机会，我可以在赫尔辛基见到李纳斯的父母和他的妹妹萨拉。 

   李纳斯父亲尼尔斯的绰号叫尼基，他在赫尔辛基火车站广场对面一家饭店的大堂里见到我，饭店的名字叫瓦库那。他身材瘦长，戴着厚厚的眼镜，留着列宁式的胡子。他刚刚结束了芬兰新闻社派他在莫斯科长达十年的工作，目前正在写一本关于俄国的书，并正在考虑是否去华盛顿任职。他觉得那个地方没有什么意思。几个月前，他荣获了著名的全国新闻奖，他的前妻安娜后来说那个奖项“使他变得温和了许多”。 

   黄昏时分，他开着他的沃尔沃S70轿车，拉着我去看被白雪覆盖的、李纳斯成长的地方。他指给我看一幢结实的建筑物，说那是父子俩都曾就读过的小学。然后我们又驱车路过了李纳斯生下来后度过的最初三个月的他祖父母的公寓，接着又来到了那栋俯瞰花园的楼房，他们全家在那里过了七年。其中的一年尼基曾前往莫斯科，成为一名共产主义者。当时李纳斯五岁。而后他又指给我看那座黄色的建筑物，尼基与安娜离婚后，李纳斯和他妹妹就住在那里。李纳斯年轻时的电子商店已经不存在，在街头原来的地方现在是一座成人录影带小铺。最后我们驱车路过了最重要的一幢物，即五层楼高的李纳斯外祖父母居住的公寓，也就是 Linux 系统的诞生地。安娜至今仍住在那里。它看上去就像是十二月底曼哈顿的东区。 

   尼基很滑稽，又聪明，善于自嘲，而且许多动作和他儿子一样，比如在说话时喜欢用一只手握住自己的下巴。他们俩笑起来也很相似。然而这位社会主义的忠实信徒和他儿子不同的是，他终生热爱体育。他在篮球队打球，天天跑五英里，每天早晨在结冰的河里冬泳。虽然他已经五十五岁，但走起路来却精神抖擞，看上去只有他三分之二的年龄。他和李纳斯的另一个区别是：尼基似乎过着一种非常复杂的浪漫生活。 

   我们在赫尔辛基市中心的一家拥挤的餐厅里吃晚饭，尼基谈起了李纳斯作为一个激进的共产党人的儿子成长起来所面临的困难。他说他自己常常出外演讲，一度还做过一个小官。他说李纳斯由于父亲的激进政治观点，常常受到同学们的挪揄，有些父母甚至不让他们的孩子和他一起玩。正因为如此，尼基解释说，李纳斯的童年生活虽然被左倾的政治思想所包围，他却努力使自己从这种氛围中脱离开来。尼基说：“他不让我谈论我的观点，我一开口讲他就会离开房间。要么他说话时就总跟我对着干。我知道，由于他有这样一个父亲，在学校里总是受到嘲弄。他对我的态度是：‘别让我陷入这种尴尬的境地。’”尼基把带到他家，他说我们可以在他的厨房里喝两杯啤酒。他的家坐落在中央商业区的北部，那里一排排的楼房是二十年代为工人阶层建造的。我们爬上楼梯到了他的公寓，在门口把鞋子脱掉。他的房间让人回想起六十年代末期反对工业文明的景象：灯罩是用手织的篮子做的，墙上挂着第三世界的图片，屋子的角落里还垂吊着各种植物。我们在厨房的餐桌前落座。尼基一边斟啤酒一边谈起了他当父亲的感受：“一个当父母的人不应该从他养育了自己孩子的角度去想问题。”他说。这时他用手机给和他同居的一个女人打电话。他说李纳斯现在刚刚开始阅读他多少年来一直敦促他读的历史书籍，但李纳斯大概还从来没有读过他自己爷爷写的诗歌。 

   我问尼基他是否对电脑程序表示过任何兴趣，或让李纳斯教给他一些最基本的电脑常识。他回答说从来没有。他说父子完全是不同的个体，而深入探究李纳斯的激情就等于“侵犯他的灵魂”。看起来，他作为一个名人的父亲似乎不觉得有什么让人不舒服的地方。他获得全国新闻奖后，有一家报纸发表了一篇关于他的小传，其中引用他的原话说，在李纳斯还很小的时候，每当他去外面的操场接李纳斯时，别的孩子就会指着他说：“瞧，那是李纳斯的爸爸。”李纳斯的妹妹萨拉·托沃兹是乘火车从她的家赶过来的，她的家在一座小城市里，位于赫尔辛基以西，那里街道的牌子首先是瑞典语，其次才是芬兰语。在那里，她买得起带澡盆和桑拿浴的公寓，而且那里的人们在大街上讲的是瑞典语，而不是芬兰语，这让她感到很高兴。正如她本人解释的那样，她是少数民族中的少数民族：在少年时期，她就皈依了天主教，将自己划归到不到百分之十的芬兰公民之中。她不信教的父亲为此曾在几个礼拜的时间里气愤地不认这个女儿。 

   今天她来到赫尔辛基，是实施一项政府资助的项目，给年轻人教授《教理问答》。她为人爽快乐观，虽然已经二十九岁，却像一个诚恳热心的高中生似的有着真诚的精神。她皮肤白晰，圆圆的脸，和她的哥哥有点相似。但显而易见，和她哥哥相比，她更爱与人接触。她总是不停地按手机上的号码，给她的朋友发出信息，约他们当天晚上见面，然后又不停地查看他们的回答。她所做的翻译生意非常成功。 

   当时是中午，萨拉带着我去见她的母亲，并一起吃午饭。在路上，她时不时停下来指给我看童年呆过的地方，比如猫园和小学。“我父母是地地道道的共产主义者，我们就是在这种环境下长大的，认为苏联是最好的。我们还去过莫斯科，”她解释说，“我记得最清楚的是那里的一家特大的玩具店，赫尔辛基所有的玩具店都不如那家大。”她父母在她六岁时离了婚。“我刻他们对我说，爸爸 永远搬出去住了。我当时觉得这很好。这样一来就不会再吵架了。其实他是去莫斯科长驻，于是我们慢慢习惯了他不在身边。”她说。萨拉十岁时，决定搬到她父亲那里去住，不再和她妈妈和哥哥一起住。她父亲当时搬到了邻近的城市艾斯普。“这并非因为我不想和妈妈一起住。我是不想和李纳斯住在一起。这样一来，除了周末，我们俩就不用吵架了。我们俩总是吵个没完没了。随着我们渐渐地长大，我们俩吵的也少了。”我们来到她妈妈位于一层的公寓。安娜·托沃兹见到我们后非常高兴。她的绰号叫米基。她拒绝让我遵循芬兰人的习惯，把鞋子脱掉。“别傻了。我这地方本来就脏得一塌糊涂。不脱鞋子也无所谓。”她个子不高，黑头发，反应敏感，非常机智。我们刚刚到达，电话铃就响了。一个地产商想让我去年看一个空着的公寓，这样我就可以将它描绘给米基在美国的儿子，并把房子的所有材料亲自交给他，因为李纳斯有可能要买下这个房子，作为在赫尔辛基的临时住所。于是我们进入了那幢庞大的公寓楼。那个房地产商长得怪怪的，有点像《美国美人》影片中的一个人物。他让我们在观看房子之前，先在鞋子上套一个蓝色布鞋套。过了一会儿，房地产商自鸣得意地说：“你们瞧这栋房子，要是你们有不希望被太阳损坏的古董的话，这里是最理想不过的了。”米基狡黠地朝我瞟了一眼，然后不无嘲讽地说：“哦，你说话真风趣，干吗不直说这个房子没有阳光？”我们又回到了她不大的厨房。米基坐在一个长方形的餐桌旁，餐桌上铺着一张五颜六色的桌面，米基将咖啡倒入一个非常大的杯子里。她的公寓和她前夫的一样，到处都是书籍和民间艺术品。挂着的窗帘是黑白相间的。这个公寓本来有三个卧室和一个厨房。她的孩子们搬出去后，米基便搬进了过去由萨拉占着的最大的卧室。她后来把李纳斯的卧室和她从前卧室的墙壁都拆了，创造出一个巨大的带厨房的客厅。她指指一个空着的地方说：“他过去的电脑就放在那里。我想我应该在那里挂上一个牌子什么的。你觉得呢？”她一根接一根地抽着烟，讲起话来滔滔不绝，而且英语说得很漂亮，说话时几乎没有什么停顿。“李纳斯可不是你在大街上遇到的那种笨孩子”，她说。在她卧室的墙上挂着一面巨大的苏联国旗。那是乔科在一次国际跳台滑雪比赛中买的，作为礼物送给了李纳斯。李纳斯把它放在一个抽屉里，一放就是好几年，但米基把它挂在了她的床头上。 

   米基拿出了一个相册，里面有一些全家的照片。有一张是李纳斯两三岁时，赤身裸体地站在海滩上。还有一张也是他，也是那个年龄，在月光下瞎跑着，地点是赫尔辛基附近的一所著名的城堡。另一张是他少年时代，看上去又瘦又笨。还有一张是米基，参加她父亲的六十岁大寿。她指着她的姐姐和哥哥说：“她是个心理学家，在纽约。他是个核物理学家。而我，是我们家的败家子。对不对？可我是第一个抱孙子的。”她说完又点起一根烟。 

   我们去一家叫张伯伦的餐厅吃中饭。萨拉又查看她的手机，米基要了几种不同的咖啡。米基回忆说，她和尼基曾争论过是否要强迫李纳斯放弃橡皮奶头。他们争论的方式很有意思：相互写纸条，然后把纸条放在茶几上。她们还谈起了李纳斯的记忆力非常之差，常常记不住别人的相貌。萨拉说：“要是你和他一起看电影，主人公本来穿一件红色衬衫，但后来换了件黄色的，他就会问：‘这人是谁？’”他们全家还骑自行车去瑞典野营度假，晚上就睡在摆渡船上。第一天萨拉的自行车就被人偷走了，于是不得不花钱又买了一辆新的。他们的帐篷就搭在一个悬崖上。母女俩去游泳和钓鱼，李纳斯就一个人呆在帐篷里读了一整天的书。后来来了一场暴风雨，一直睡在帐篷里的李纳斯对突如其来的气候变化竟全然不知，但正是因为他在帐篷里，才没使帐篷被风吹到波罗的海里去。 

   米基回忆起李纳斯整天躲在他的房间里玩电脑的岁月时，不禁大笑起来。“尼基常对我说：‘把他踢出去，让他去找个工作。’但李纳斯对我不是什么负担。他的要求不多，他所要求的一切就是他的电脑。那是他的事情，他的王国，他有权那样做。我对他所作的事情一无所知。”如今她和其他人一样，对她儿子的活动非常熟悉。各种媒体不断地寻找米基和她的家人搜集材料。有一些问题他们都转给了李纳斯，但他告诉他妈妈、爸爸和妹妹运用他们自己的判断力回答那些问题。可每当他们写好回答后，一般又都寄给李纳斯，在交给记者之前都希望得到他的同意。 

   几个月前，我曾给米基发过电子邮件，请求她写点关于李纳斯童年生活的东西，米基的回信非常长，而且写得非常用心。她文章题目是“从一个电脑迷中培养出李纳斯”。在文章中，她描述了对她蹒跚学步儿子的早期观察，说在他身上看到了她父亲和她哥哥身上所具有的对科学执着的迹象。 

   “当一个问题出现并始终困扰一个人时，你就会看到他的眼睛变得发直，他再也听不到你在说什么，也不回答你简单的问题，而是完全陷入眼前的问题之中，在解决方案的过程中废寝忘食，而且从不放弃。当然，他在日常生活中会被琐事打断，但事后还会继续单枪匹马地思索，这时你便知道他是什么样的人了。”她还写了李纳斯和萨拉这两个兄妹之间的争执和不可调和的不一致（比如，萨拉：“我不喜欢蘑菇、猪肝之类的味道。”李纳斯：“你必须喜欢。”）他俩偶尔也会流露出尊重对方的态度。“李纳斯在很小的时候，有一次对我袒露出对他妹妹的佩服。他那时大概是五岁或七岁，突然严肃地对我说：‘你瞧，我脑子里从来没有新的思想，我想的事都是别人先想出来的，我再把它们重新组织起来。但萨拉想的事都是别人从没有想过的。’”“这些回忆让我觉得，我至今仍认为他没有什么‘特殊的’才华，肯定没有在‘计算机’方面的才华--假如他没有这方面的才华，断然会把精力放在其他方面。在某一天或某个年代，他就会集中于应付另一个不同的挑战。我想他会的（我的意思是说，我希望他不要永远陷在 Linux 软件上）。因为我认为他的动力并非是‘计算机’，也决不是名声和财富，而是诚实的好奇心和征服所面临的困难的愿望，以及用最好的办法去克服困难。因为事情就是如此，他决不会后退。 

   “我想我已经回答了李纳斯是一个什么的孩子的问题--不错，他是非常好养的。他惟一需要的就是一个挑战，剩下来的事情就由他自己去解决了。就像我和萨拉过去常说的，只要给他一间斗室，里面放上一台电脑，再给他一些面条吃，他就会觉得无比幸福。 

   “除了……自他打小起我就一直揪着心：照他这样怎么可能找到一个像样的女孩？我只得再次求助于父母们屡试不爽的办法--祈祷。你们瞧，还真灵验了！他是在大学教书时遇到塔芙的，她让他在几天之内忘记了他的猫和他的电脑，这毋庸讳言是上天的胜利，正如其一贯获胜那样。 

   “我唯一的希望是名声不要让他分心太多。他的出名并没有改变他，但他变得温和多了，人们接近他时他也愿意和别人说话了。拒绝别人也让他感到比较为难了。但我想让他改变的与其说是所有媒体的喧嚣，还不如说主要是由于他成为了一个丈夫和一名父亲。”显而易见，母亲和女儿都对媒体的喧嚣了如指掌。Transmeta公司郑重宣布他们的决定的第二天，我们在吃中午饭时，米基就问萨拉：“今天的报纸上有什么消息吗？”当天晚上，在她去上班的路上，她让出租汽车司机在我住在旅馆门口停下，她送来了一只松木儿童椅子，让我亲自交给帕特里夏。同时还有一张一处公寓的楼层平面图。 

   下面我谈谈第一次见识李纳斯那出色发明的情景。 

   记得那是1992年上半年的一天。我骑着自行车，随便溜达到了李纳斯乱七八糟的家里。和往常一样，我一边看着音乐电视节目，一边询问李纳斯有关他那操作系统的发展状况。要是平常，他会咕哝一些毫无意义的东西。这次，他却径直领着我穿过脏乱的厨房，来到他那一团糟的房间里的电脑旁。 

   李纳斯将用户名和密码输入了电脑，接着出现的是command prompt命令提显符。他展示了命令处理程序（commandinterpreter）的一些基本功能-- 

   但是没什么特别的。稍许，他回过头，脸上带着李纳斯式的微笑，问道：“看起来像DOS，是吗？”我点点头。我一点也不吃惊，因为那看起来真的像DOS--没什么新意，真的。我真该知道，如果不是有什么特别的话，李纳斯绝不会那么笑。 

   他转向电脑，又敲了几个功能键--出现了另一个登录屏，一个崭新的登录屏和崭新的命令提显符。李纳斯给我看了四个不同的提显符，告诉我这四个命令提显符可由四名不同的用户使用。 

   就在那时，我知道李纳斯创造了一种奇妙的东西。毫无疑问。 

   乔科。沃鲁马吉“对我而言，那意味着电话一直占线，没有人能给我们打电话……后来，明信片开始从四面八方寄来。我想就是在那时，我意识到现实世界的人们确实在使用他所创造的东西。” 
                                                   萨拉。托沃兹 

.. _P15:

--------------------------------------------------------
第三章 编程的美妙 
========================================================


.. _P16:

--------------------------------------------------------
1、 开始编程 
--------------------------------------------------------


   我真不知道该如何阐释自己对编程的狂热，但我可以试试。 

   对于任何编程的人来说，编程是世界上最有趣的事。它比下棋之类的游戏更有乐趣得多，因为它可以由你自己来制订游戏规则。而你制定什么样的规则，也就会导出与此规则相符合的结果。 

   然而，对于编程外行的人来说，它却似乎是世上最枯燥的事。 

   编程给人带来的最初兴奋的原因有部分是显而易见的，那就是：通过编程你可以支配一台计算机，你叫计算机做什么，它就做什么，永远准确无误，而且毫无怨言。 

   这本身就很有意思。 

   但是计算机在一开始让你入迷的盲从性，显然不得它成为招人喜爱的伙伴。事实上，这种特性很快就让人厌烦了。真正使编程令人欲罢不能的是：你能让电脑做你想做的事，但是你还必须想出怎样做到的办法。 

   我个人认为，计算机科学和物理科学有很多相似之处。两门学科都是在一个相当基础的层面上探讨一个体系是怎样运行的。当然，区别在于，在物理学中，你探究的是一个已经存在的客观世界的构成。而在计算机科学中，你却是在创造一个前所未有的体系。 

   在电脑世界中，你就是创世者，你对所发生的一切拥有最终的控制。如果你功力深厚，你可以是上帝――在一个较小的层面上。 

   我这么说恐怕要得罪地球上近一半的人口了。但是的确如此。你开始创造自己的世界，而唯一限制你的就是机器的性能，以及――在今天尤其如此――你自己的能力了。 

   想象一下建在树上的小屋的情形。 

   你可以建筑一个这样的房子，有一个活板门，既稳固又实用。但是每个人都可以看出一个仅仅以坚固实用为目的的树上小屋和一个巧妙地利用树本身特点的美妙小屋之间的差异。这是一个将艺术和工程融为一体的活计。编程与造树上小屋有相似之外，这是它之所以被看成是一项既有魅力同时又有实际贡献的活动的原因之一。在编程中，实用的考虑往往被置于有意思、美观伶俐或有震撼力的考虑之后。 

   编程是对创造的训练。 

   探究计算机工作原理的过程，是吸引我走进编程世界的最初原因。在这其中获得的最大的乐趣在于，我认识到了计算机科学与数学的类似：你必须从该体系自身的规则出发，推演出整个世界，在物理科学中，你被客观规律所束缚。但是在数学和编程中，只要能合乎逻辑地推演，就可以成立。思考数学问题，不会受到客观世界的逻辑的限制，数学只是逻辑自洽的符号体系。正如任何一名数学家都明白的，人完全可以建构出一套数学等式，以证明三加三等于二。事实上，你想有什么样的体系就可以什么样的体系。但是，随着复杂程度的提高，你必须多加小心，不要弄出什么与你创造的体系不一致的东西。 

   好的体系容不得任何错误。编程也与数学一样是这么回事儿。 

   人们对电脑如此着迷的原因之一，就是能从中获得自己创造一个新世界的体验，并贪图到它到底能够成为什么样子。在数学中，人们往往按照客观事物的可能性进行思想实验。比如，说到几何时，大部分人想的是与我们的经验相符合的欧几里得几何学。但是电脑却可以帮助人们形象化不同的几何，并不仅仅是欧几里得几何学。在电脑的帮助下，人们可以形象化这些虚构的世界，看到那些世界到底是什么样子。还记得Mandelbrot set吗――基于Benoit Mandelbrot等式的fractalimages。要不是电脑，纯粹的数学世界绝不能这样形象地展示出来。Mandelbrot就是人为地制定了一些本不存在的与现实没有一点关系的世界规则，却创造出了的图案。通过编程和电脑，你能够构筑一个新世界，有时其设计会是非常美妙的。 

   但是在大部分时间中你却不能欣赏自己创造的美妙世界。你只不过是在编写执行某一任务的程序。这时你就不是在创造一个新世界，而是在电脑世界中解决一个具体的问题。问题通过将思考结果应用到问题中而得到解决。而能够坐下来，盯着电脑屏幕，将一个问题彻头彻尾地贯穿思考，就需要某种特定的人。 

   比如，需要像我这种书呆子气十足的人。 

   操作系统是计算机的所有功能的基础。而创造一个操作系统则是最终的挑战。 

   创造操作系统，就是去创造一个所有应用程序赖以运行的基础环境――从根本上来说，就是在制定规则：什么可以接受，什么可以做，什么不可以做。事实上，所有的程序都是在制定规则，只不过操作系统是在制定最根本的规则。 

   创造操作系统就像在为你创造的这片土地制订宪法，而其他在电脑上运行的程序则是为宪法所允许的普通法律。 

   有时，这些法律根本讲不能，但这正是你要面对的问题。你需要找到解决办法，并能够意识到自己以正确的方法找到了正确的答案。 

   还记得那些在课上总能答对问题的同学吗？他们的答案比别人来得快，他们能这样是因为他们没有刻意去追求。他们不在乎他们应该怎样来答题。他们只不过找到了合理的考虑问题的方法。人们一听到正确答案，一切听起来就都是那么回事了。 

   在电脑上也是这样。你可以鲁莽、生硬地行事，愚蠢地死死纠住问题不放，直到问题不再成为问题。也可以通过找到正确的方法，使问题突然消失。你可以从不同的角度看问题。直到灵光突现地认识到：问题之所以成为问题只在于你的方法错了。 

   也许能够证明这一点的最佳例子不是来源于计算机科学，而是数学。故事发生在十七世纪，日后将成为伟大的数学家的高斯还在上中学。一天，老师厌烦了授课，就让学生们计算从1到100的数字的和。他原以为学生们要花一整天来计算这道题。没想到初展才华的数学家仅花了五分钟就得出了正确答案：5050。他解答这个问题的方法不是真的把所有这些数字一一加起来，这样做既麻烦又愚蠢。他发现1加100等于101,2加99也等于101，然后3加98还是101，直到50加51等于101。不要几秒种，他就注意到一共是50对101，所以答案是5050。 

   也许这故事是虚构的，但它想说明的道理却很清楚：一个伟大的数学家不会采用平庸而繁琐的方法，因为他能看到隐藏在问题背后的真正内涵，并应用这一理解去找到更为简便的方法。 

   在计算机科学中也绝对如此。 

   没错，你能写一个程序来求出总数。这对于今天的电脑来说不过小事一桩。但是一个伟大的编程者能凭借其聪明的头脑就知道答案是什么。 

   他知道怎样写出漂亮的程序，知道怎样采用一种全新的但最终会被证明是正确的方法。 

   不过还是很难说清楚，闭门冥思苦想地要找到解决某个问题的漂亮答案，为什么竟然有如此巨大的魅力？但是，你要是曾经有过找到更好方法的经历，你就会明白，这简直是无与伦比的感觉。 

.. _P17:

--------------------------------------------------------
2、长腿的终端仿真器 
--------------------------------------------------------


   我的终端仿真器（terminalemulator）长了腿。我经常用它登录到学校的电脑上，查阅电子邮件和参加MINIX讨论组。但是问题是，我还想下载和上传东西。也就是说，我必须能向磁盘里保存东西。为此，我的终端仿真器必须装个磁盘驱动。还需要一个文件系统驱动，这样才能查看磁盘里的东西，将我下载的内容保存成文件。 

   这是我在发明 Linux 的过程中差点半途而废的一步。我当时觉得这太麻烦，也不值得。但是除此之外我也没什么可做的。那年春天我在上课，课程很简单，无需费太多的心思。当时我唯一的课外活动是每周三晚上参加同学聚会。我那时是一个社会“死物”（与“社会动物”相对――译者），于是那聚会就成为我除了编程和学习之外唯一一个可以干点别的事情的场合。要不是那聚会，我可以说是彻底与世隔绝了。 

   同学聚会是我接触社会生活的仅有的地方，我几乎是每次不落地参加。该聚会对我是如此重要，以至于我有时会因为想着将要参加它而失眠，因为一直担着心不要因为缺乏社交风度、或由于自己丑陋的大鼻子、或明显缺少个女伴而出丑。这自然都是些典型的低级趣味。我之所以说这些，是因为要表明，当时我真的没有什么别的有意义的事情可做。而搞出驱动程序的工作却很有意思。所以我对自己说，我要干下去。 

   于是，我写了一个磁盘驱动程序。因为我想把文件保存在我的MINIX文件系统中，也因为MINIX文件系统本身整理得很好，于是我让自己的文件系统可以和MINIX文件系统兼容。这样，我就可以在MINIX系统下阅读我建立的文件并将它们存入同一张磁盘，以便MINIX系统也可以通过我的终端仿真器阅读到我建立的文件。 

   这花费了我大量的精力：编程――睡觉――编程――睡觉――编程――吃饭（饼干）――编程――睡觉――编程――洗澡（冲冲了事）――编程。随着工作的进展，这个项目很明显正在成长为一个操作系统。所以我转变了看法，不再把它看成一个终端仿真器，而是一个操作系统。这个转变出现在我马拉松似的编程过程中的哪个时间段，是在白天还是晚上，我已经想不起来了。也许在这一刻之前我还穿着破旧的睡袍奋力敲击着键盘，在为终端仿真器更多的功能；而转瞬之前我拥有的功能是如此之多，以至于整个体系已经变成了一个。 

   我把它称之为我的“gun-emac终端仿真程序”（gnu-emac of ternimal emulationprograms）。gnu-emac终端仿真程序开始是一个编辑程序，但创造它的人又为它增加了一系列功能。设计者本想让它成为一个可以用程序控制的编辑程序，但是其程序可控性的特点很快使一切都黯然失色，它成为了一个从地狱中冒出来的编辑程序。它除了厨房水池子外几乎无所不包，这就是为什么这个编辑程序指令的图标有时竟是一个厨房水池。这个编辑程序的一大特点就是，其设计过程比任何其他编辑器都更复杂。 

   我的终端仿真器也是如此。它在不断地扩张。 

.. _P18:

--------------------------------------------------------
3、寻求网上帮助 
--------------------------------------------------------


   来自：torvalds@klaava.Helsinki.Fi（李纳斯·托沃兹） 
   讨论组：comp.os.minix 
   主题：Gcc-1.40和一个有关POSIX的问题 
   信息名称：1991 Jul 3, 100050.9886@klaava.Helsinki.Fi 
   日期：1991年7月3日，格林威治时间10：00：50 
   各位网友好！由于我现在正在MINIX系统下做一个项目，对POSIX标准很感兴趣。有谁能向我提供一个（最好）是机器可读形式的最新的POSIX规则？能有FTP地址就更好了。 

   好吧，这就是一个芬兰小子希望检验一下自己的计算机技能限度的最早的公开证据。 

   POSIX标准是一个可以适用于数以百计的UNIX系统呼叫中的任意一个的一套冗长规则，计算机要执行任务（从读、写、开机和关机开始）就需要这个标准。POSIX则是指一个UNIX的标准体系，或一个由来自不同公司的代表所组成的一个组织，希望按照一个共同的标准进行运作。 

   对于程序员开发的在该操作系统下的新应用软件或开发应用软件的新版本而言，标准是极其重要的。从POSIX这样的系统呼叫（system call），尤其是重要的呼叫（call）中，我可以获得一个操作系统应该具有哪些功能的一个单子；然后我就可以通过自己的方式在自己的系统中实现每一个功能。通过编写出这些标准，我的系统软件的源代码将可以被别人使用，以开发新的应用软件。 

   当时我并不知道我本可以直接从POSIX公司买到这些规则的软盘，但这无所谓。哪怕我能买得起，什么东西运到芬兰，往往会需要很长的时间。我不愿等上那么久，因此我四处搜求一个能从FTP地址上直接下载的版本。 

   没有人给我提供能找到POSI标准的来源。于是我开始了计划B。 

   我从学校找到运行sun器(sunserver)的sun微系统版的UNIX手册。该手册中有一个完全可以凑合使用的系统呼叫的基本版本。从用户手册中能看出系统呼叫的主要功能，以及为完成这些功能所需要完成的步骤。但是，从中看不出具体的方法，而只是标明了最终的结果。于是我便着手从安德鲁·塔南鲍姆的书中和别的材料中收集一些系统呼叫。最终有人给我寄来了那几卷厚厚的POSIX标准。 

   不过我发的那个邮件并没有石沉大海。任何一个有相应知识的人(只有具备相应知识的人才会上MINIX的网站)都能看出我的计划是要开发一个操作系统，否则，我会需要POSIX规则呢？我的邮件引起了赫尔辛基工学院(我若不是对研究理论这么感兴趣，可能会在这儿求学)一个助教阿里·莱姆克(Ari Lemke)的好奇。阿里善意地给我回信说，他愿意为我在他们学校的FTP地址上建一个子目录，这样到时我可以把自己的操作系统发布上去，让感兴趣的人们下载。 

.. _P19:

--------------------------------------------------------
4、Linux
--------------------------------------------------------


   阿里·莱姆克（Ari Lemke）一定是一个相当乐观的人。在我能拿出什么可以发布的东西之前，他就为我建立了一个子目录：ftp.funel.fi。我有了密码，一切都准备就绪，就等着我去登录然后上传内容了。但是我要再花上四个月才能找到一点我愿与世人分离的东西，或者至少与阿里或几个与我保持邮件往来的热衷于操作系统的狂热分子分离的东西。 

   我最初的目录是想开发出一个最终可以取代MINIX的操作系统。 

   这个系统不必比MINIX能干，但必须能胜任我最喜欢用MINIX做的事，以及其他我想做的事。比如，MINIX的终端仿真不仅太不方便，而且也不能进行任务控制――即把暂不用的程序放入背景中，同时内存管理也太简化。顺便说一下，它还是以苹果的操作系统(Mac OS)而不是以DOS为支持的。 

   开发操作系统就是搞明白系统呼叫应该做什么，然后以你自己的方式编出能使系统呼叫得以执行的程序。总有来说，共有几百个系统呼叫。 

   有些是多功能的，其余的则很单一。有些更基本的系统呼叫确实是十分复杂的，并需要有大量的基础作为支持。比如，为完成“写”和“读”这两种系统呼叫，你就必须建立一个磁盘驱动程序，以便能够在磁盘里读或写东西。又比如“打开文件”的系统呼叫，你就必须创建一整套文件系统层，以便分析文件名和在磁盘上查找文件。要编写“找开文件”的系统呼叫，更需要几个月的工作。但这个程序一旦编写出来，用于别的功能的程序都可以借鉴。 

   早期的创建工作就是这样。我不但从Sun服务器的操作系统手册中查找标准，也从其他书中查到可用的标准，挑出一个一个的系统呼叫，然后为它们再编出可行的软件。 

   这工作很容易让人感到灰心丧气。 

   原因是：表面上一切如故，你看不到任何进展。你可以做几个试验性的程序，检验自己刚刚加上的东西是否可行。但这并不真的有什么用。 

   在有的阶段你不得不放弃刚才的想法，那一长串的系统呼叫都白干了。一个真正的程序在运行之前，必须已经接近完成。你必须首先运行的程序是外壳(shell)程序，而在有这个外壳程序之前，要运行什么很难的。而且，这个外壳程序包括了很多你所需的系统呼叫。它运行起来之后，你才会从中找到一长串你尚需完成的功能。 

   在UNIX中，外壳程序是一切程序之母。它的作用是引发以后的一系列二进制语言程序(二进制程序是以计算机可识别的1和0为符号编写的程序。以机器语言编程，就是将二进制的源代码组合起来)，这个外壳程序使你首先能登录(当然在真正的UNIX系统中，你运行的第一个程序传统上被称为init，而init的确需要很多基础的支持才能运行。它是一种对正在运行着的程序的控制工具。当没有任何程序运行时，init就没有用了)。 

   因此，我做的第一件事不是创建init，而是建一个外壳程序。我执行了约二十五个系统呼叫，正如我所说，这也是我要运行的第一个真正的程序。这个外壳程序不是我自己编的。我下载了一个叫Borne Shell的外壳程序。它是UNIX的初始外壳程序之一，可以从互联网上免费下载，名字来源于一个难听的双关语。编写该外壳程序的家伙名叫波恩(英文中的“忍受”或“出生”之意――译注)，所以这个程序就叫做“Borne AgainShell”(“再次忍受或再次降生外壳程序”――译注)，或一般被称为BASH(bash的英文意为“重击”――译注)。 

   当你试着从磁盘运行或导入一个真实的程序时，一般都会有“臭虫”(bug，IT业中称软件里的瑕疵为“臭虫”――译注)出现在磁盘驱动程序或导引程序中，因为程序往往会不理解它读到的东西，于是它就会在屏幕上显示出相关的信息。这很重要，你可以从中知道哪儿出了毛病。 

   于是，我就到了这样一个阶段：我试图导引外壳程序，屏幕上则显示出外壳程序中每一个我尚未能执行的系统呼叫。我导入并运行外壳程序，屏幕上则出现类似“系统呼叫517没有执行”这样的信息。我日日夜夜盯着屏幕上显示出来的系统呼叫，试着发现我在哪一条上面出了错。这比拿到一个系统呼叫的单子，然后一一使他们可以被执行要有意思多了。人们需要看到事情的进展。 

   到了八月底或九月初的时候，我的外壳程序终于可以工作了。过了这一关，后面的任务就轻松多了。 

   这可是一件大事。 

   我的外壳程序可以运行后，我马上开始着手其他几个程序，比如拷贝程序和列表程序，这些都比外壳程序简单得多。你所需的一发，外壳程序早就具备好了，所以一旦外壳程序完成，就好像是从0飞跃到100一样，因为一切都已就绪。这时，我已经拥有了一切必要的条件，感觉就像上帝创世纪那样，执掌一切地说：“让那里有光”，那里就真的有了光。在此之前，的确是一无所有。 

   是的，我深感满意。 

   这种满意很重要，因为那个夏天我除了伏在电脑面前，其他什么都没做。这么说一点也不夸张。芬兰四月到八月的日子是一年中最美好的时光。人们到布满小岛的海上航船，去海滩上晒日光浴，到夏日小木屋中消闲。但是我却在没日没夜地工作，不知哪一天是周末，哪一天是工作日。学生的黑色窗帘遮蔽了几乎昼夜灿烂的阳光，也遮蔽了整修世界。有些天――或夜晚？――我会从床上爬起来后直接坐到离床仅几英尺远的电脑旁。 

   爸爸显然在不断催促妈妈让我在暑假找份工作，但妈妈却不在乎：我并没有打搅她。萨拉会因为我有时上网使电话战线而有点恼火。她也许会写些毫不客气的话。毫不夸张地说，我和电脑之外的世界几乎没有任何联系。 

   当然，也许每周有一次，一个朋友会敲敲我的窗户，而我如果没在捣腾什么重要的编码时，会请他进来。我们会喝杯茶，也许还会挤在窄小的厨房里看一小时的MTV。现在回想起来，对了，有时乔科会来敲我的窗户，我们会出去喝点啤酒或玩司诺克台球。但是，诚实地说，那时我的生活也就这么简单了。 

   而我一点儿都不感觉自己是那种面色苍白、可怜兮兮的失败者。 

   外壳程序成功了。这意味着，我事实上已经建立起了可行的操作系统的基础，而我自己则乐趣无穷。 

   外壳程序成功之后，我开始检验其中的内装程序。接着我又编了足够的新程序，可以真正干点什么了。我用了MINIX中所有有用的东西。当我把外壳程序移到一个我为新的操作系统所建的特别区域中时，我开始把这个操作系统称为“ Linux ”。 

   坦率地说，我一开始并不想把它以 Linux 的名称发布出去，因为那显得我太自我中心了。那么，我为最终发布起的名字是什么呢？Freax(Freaks的变形，该词为“异想天开”之意――译注。) 事实上，在一些早期完成的文件中，即那些说明如何汇编源代码的文件中，有将近半年的时间我一直使用Freax这个名称来指代这个操作系统。但这其实是无所谓的，因为当时还没有任何人知道它，所以它其实并不需要什么名字。 

.. _P20:

--------------------------------------------------------
5、开放源代码 
--------------------------------------------------------

      ::

      来自：李纳斯托沃兹 torvalds@klaava.Helsinki.Fi (李纳斯·托沃兹) 
      新闻组：comp.os.MINIX 
      题目：你在MINIX中最想看到什么？ 
      总结：关于我的新操作系统的小型民意调查。 
      信息编号：1991年8月25，9541@klaava.Helsinki.Fi 

      嗨，所有使用MINIX的人们，大家好!我在编一个(免费的)用于386(486) ATclones的操作系统(只是一个爱好，不会成为一个像Gnu那样大型的专业软件)。我从四月起就在酝酿，现在已准备就绪。我想听一听人们对MINIX有哪些欣赏或不满之处，因为我的操作系统和它有些相象(尤其是文件系统的物理排列方式)。 

      我目前已经装上了 bash (1.08) 和 gcc(1.40)，看来一切进展顺利，估计几个月内我就会得出一些实用的东西。我想知道大多数人在这方面有什么要求。任何建议都欢迎，但我可不保证一定会采纳。 

      李纳斯 (torvalds@klaava.Helsinki.Fi)附：对了，它不受任何MINIX源代码的影响，并有一个多线程的FS。记住。它不能安装(比如使用386任务转换文件等等)，也许永远不会支持除了AT硬盘之外的东西。情况就是这样。 

   使用 MINIX 人群中最坚定的操作系统的狂热者看到了火花。我没有收到多少有关MINIX特点的建议，但却有许多别的问题。 

   多告诉我们一点!它需要 MMU 吗？回答：是的。 

   在多大程度上使用 C 语言？在装截中会有什么困难？不会有人相信你的不可“半截性”，比如说我就想把它装截到我的Amiga软件上。 

   回答：它大部分使用C语言，但大部分人不会把我写的程序称作C语言。它使用了我能想到并找到的386的特征，我也想通过它充分了解386。 

   我的一些 C 文件几乎和 C 语言一样是组合起来的。 

   如上所述，它也使用 MMU，用于分页和分类(还不能存进软盘里)。正是分类使它成为一个真正的 386 的依赖者(每项任务都有一个 64mb 的编码和数据分类文件。 

   甚至有几个人提出愿意做试用版的试验者。 

   最后，把它发布出去并不需要太大的决心。我一直习惯与人交流程序，所以要做的唯一真正决定就是，我敢于向人们展示这一系统软件的最佳时机是何时，才不会使自己感到不自在，或更确切地说，什么时候发布才使我将来不至于为此感到羞愧。 

   我最终想实现的是有一个编译器和一个能在 Linux 内部编程的真正的系统环境，而不必再用MINIX。但是当gnu程序可以运行时，我骄傲极了，愿意让整个世界都看到它。同时，我也想听到人们的反响。 

   外壳程序能运行时，我已为操作系统初步编了几个程序。其实还不能做什么，但你能看出和UNIX很相似。事实上，它运行起来像一个有点残疾的UNIX。 

   所以我决定将其发布出去。但我不会公开地告诉任何人，而是通过私人邮件告诉几个人――也许总共只有五到十个人吧――告诉他们我已将其上传到 FTP 地址上。其中包括阿里·莱姆克，布鲁斯·伊文斯，以及其他几个人。我还上传了 Linux 的源代码和几个用于初始运行的小程序。我告诉人们要运行这个系统应该怎样做。人们还是MINIX386版本――还必须有 GCC 编译器，事实上是我自己版本的 GCC。所以我把这些也传了上去。 

   我们有了一个给发布的内容编号的协议。它其实只有心理意义。如果我认为自己的东西已经完善，我愿意将其定为 1.0 版本，而在此之前，我给出的编号就表示出距离 1.0 版本还有多远的距离。所以，我将上传发布的那个版本的操作系统定为 0.01 版，让大家知道它离最后完善还有很大的距离。 

   对了，我想起了上传那天的日期：1991年9月17日。 

   我想只有一两个人看了我的作品。因为他们必须先费事地安装一个特殊的编译器，准备一个空间以便导入并汇编我的指令，然后却只能运行一个外壳程序。 

   基本上，运行外壳程序就是这个版本所能做的一切。它也可以把源文件打印出来，大概有一万行――如果字体小一点的话，大概不到一百页纸(而现在大概要有一千万行了)。 

   我发布这一操作系统的主要原因之一，是要证明我此前并非在说大话，而是我确实有所作为。在互联网上，说话没有太多责任。不管你做什么，不管是操作系统还是性，太多的人在这个计算机的虚假空间里弄虚作假。所以在告诉了那么多人你在发明一个操作系统之后，能够这样说真好： “瞧，我真的做出了点什么。我没有在骗你们。这就是我所做的……”  

.. _P21:

--------------------------------------------------------
6、Linux 有了用户 
--------------------------------------------------------


   哦，阿里·莱姆克，是他为我把这个系统上载到FTP地址上铺平了道路。 

   他极不喜欢 Freax 这个名字。倒喜欢我当时正在使用的另一个名字 —— Linux ，并把我的邮件路径命名为pub OS/ Linux 。我承认我并没有太坚持。 

   但这一切都是他搞的。所以我既可以不惭愧地说自己不是那么以个人为中心，也不得不承认自己并非完全没有自我意识。并且我认为，这是个不错的名字。 

   如上所述，我的操作系统并非很有用。比如，如果储存太多的东西，或仅仅是因为不小心，系统就会马上崩溃。而哪怕你并非不小心，如果让它运行时间稍长一点，也会崩溃。但是在那个阶段，它并不是给人运行的，而是让人看的。对了，是让人仰慕的。 

   所以它只是为给少数几个热衷于开发新的操作系统的人分离的。他们都是非常迷恋技术的人，甚至是技术迷当中的特殊兴趣小组。 

   他们的反应无一例外是积极的，但是这是一种“它要是能这样或那样就更好了”的肯定态度。或说：“看起来倒是挺酷，但是在我的电脑上根本就转不起来。” 我记得一个人在邮件中写道，他真的很喜欢我的操作系统，并用了至少一大段文字来描绘它的好处。接着他说我的系统吃掉了他的硬盘，而我的磁盘驱动程序则是“又娇气又脆弱”之类的。他丢失了他先前所有的文件，但他还是对我的操作系统持积极支持的态度。读这样的邮件很令人感动。事实上是一个软件“臭虫”毁了他的文件系统。 

   我的就是这种反应。我修补了几个程序上的瑕疵，包括那个当内存用完时就会死机的漏洞，而且还取得了一个，经 GCC 编译器装载到操作系统上，这样我就可以编写小的程序了。这也意味着使用者在运行这个操作系统之前不必先导入我的GCC编译器了。 

   你是否渴望回到那样的时代，当男人像男子汉并且能自己编写驱动程序？  

   ―― Linux 0.02版本的上载宣言 

   十月初我发布了 0.02 版，包括了几个对瑕疵做的补丁程序和一些增加的新程序。十一月我又发布了 0.03 版。 

   我本来可能会在1991年底之前就洗手不干了。我已经做了很多自认为有意思的事。并非一切都绝对圆满，但在软件世界中，一旦你已解决了最根本的问题，兴趣就容易很快地消失。我也是那样。解决软件中存在的小问题并不是什么吸引人的工作。但接下来发生了两件让我继续下去的事，第一：由于失误，我破坏了我的MINIX分区；第二，人们不停地传给我反馈的意见。 

   那时，我在导入 Linux 时仍要把MINIX作为主要的开发环境。我在 Linux 系统下做的大部分事只是这我写的终端仿真器从学校的电脑上读邮件和新闻。 

   学校的电脑总是很难登录，所以我编了个可以自动拨号的程序。但是在十二月时，我本想自动拨 devtty1 —— 这是系列电话线，但却错误地拨成了 devhda1，既硬盘分区，结果是我无意中覆盖了保存的 MINIX 中最重要东西的空间。是的，这也就意味着我不能再进入MINIX的环境了。 

   那就是我要做出抉择的一刻。 

   我可以重新装入 MINIX 系统，或者也可以将错就错，自认 Linux 已是足够的好，以至不再需要 MINIX 了。我将通过在 Linux 下编程来编译 Linux ，而只要我觉得需要MINIX中好的功能，我就把这些MINIX的优点编到 Linux 中。无疑，这是观念上重要的一步，因为你要摆脱原有的系统环境，使新的系统真的能够自我包容。这一步十分重大，因此我将十一月底发布的版本命名为0.10版。 

   几个星期之后，就升级到了 0.11 版。 

   正是从那时起，开始有人使用这个系统并可以用它来做一些事了。 

   到那时为止，我已经修补了一系列的漏洞。但没有人向我提出新的建议。我记得为了满足更多存储的需要，我曾出过门，并将机器的内存从 4 兆升级到 8 兆。我还出去买了个浮点协同处理器(floating point co-processor)，因为人们开始问我 Linux 是否能支持他们的浮点协同处理器。这个附加硬件使我的电脑能执行浮点运算(floating point math)。 

   我记得是在十二月，德国的一个计算机只有 2 兆内存却试图汇编 Kernel 的家伙，他也不能运行 GCC，因为那时的 GCC 需要1兆以上的内存。于是，他问我 Linux 是否能用一个无需太多内存的较小的编译器来进行汇编。尽管我并不需要这个特别的功能，但我仍决定要为这个家伙实现这种功能。接着就出现了那个称为page-to-disk的东西，这就意味着尽管他只有2兆的内存，他也可以通过使用这个存储盘使他的电脑看起来宽敞一些。 

   那是在1991年圣诞节前后。我记得曾在12月23日那一天加班加点，努力使page-to-disk运行。到了12月24日，它已经可以在某种程度上运行了，但是每隔一会儿就死机。最后到12月25日，也就是圣诞节那天，它终于成功了。这可以说是我为满足别人而不是为自己的需要而增加的第一项功能。 

   而我也为此感到很骄傲。 

   Linux 的用户天天都在增加，我也不断接到来自我曾向往的国度的电子邮件，包括澳大利亚和美国。关于此事，我在祖母家的圣诞聚会上对家人只字未提。不要问我为什么，我只是觉得没有必要和我的父母、姐妹或任何亲戚讨论这件事。他们不懂计算机。至少，我认为他们不懂计算机。 

   就他们而言，我每天干的事就是把电话线连到调制解调器上。当时的赫尔辛基，电话费在夜间可以打很多折，所以我在家的大部分工作都在深夜进行。但偶尔也会一整天地连在电话线上。我本想另接一条电话线，但是我母亲的公寓所在的大楼十分古老，没有额外的电话线，也不打算增加新的。那时我妹妹萨拉除了在电话上聊天之外也是无所事事，至少在我看起来是这样。所以我们会偶尔为抢电话线打架。真的会打起来。她和朋友打电话时，我会强行用“猫”拨号，她就会听到“嘀――嘀――”的声音。这自然会打断她，而她也就知道我确实、确实要上网收电子邮件了。 

   我可没说过自己是世界上最好的哥哥。 

   Page-to-disk 是一个相当庞大的程序，因为它是 MINIX 没有涉及到的东西。该程序出现在0.12版中，于1992年1月的第一个星期发布。人们马上开始不仅仅把 Linux 和 MINIX 相比较，而且开始和 Coherent 相比。后者是由 TK 开发的小型 UNIXclone。从一开始，增加 page-to-disk 就使 Linux 在竞争中脱颖而出。 

   那是 Linux 起飞的开始。 

   突然间，人们纷纷从 MINIX 转向 Linux 。那时 Linux 尚不能胜任 MINIX 的所有工作，但是它还是可以做人们真正需要的大部分重要的工作。而它拥有一项人们特别喜欢的功能：有了 page-to-disk，你可以运行超过你内存的巨大程序。这意味着，当超出内存之后，你可以将一块旧的内存存到磁盘上，要记存到了哪儿，仍然使用那块内存来解决你的问题。这在1992年的第一个星期是一件不寻常的事。 

   正是那个月， Linux 的用户从我知道名字并与其有邮件往来的五到十个人，增加到了成百上千我不知是谁的人。我并不认识每一个 Linux 的用户，这多有意思。 


.. _P22:

--------------------------------------------------------
7、Linux 能换来金钱吗？ 
--------------------------------------------------------


   那时，互联网上正有一个恶作剧在盛行。 

   据说有一个叫克雷格的可怜男孩得了癌症，正在死亡线上挣扎，而在网民中则流传着一个连锁邮件，让人们向这个男孩邮寄明信片以表示对他的支持。实际上这是某人的一个恶作剧，可能根本就没有克雷格这么个人，更别提什么癌症了。但是这一呼吁竟招来了上百万张明信片。 

   所以我半开玩笑寺要求使用 Linux 的人给我寄明信片，而不用给钱。这像是一个人们会感叹“哦，上帝，又是一个要明信片的家伙!”的玩笑。 

   在那时的个人电脑世界中，有一个有关软件共享的牢固传统。你下载了一个程序，就应该给作者寄回十块钱左右的回报。所以我收到了很多邮件问我是否要人们给我寄三十块钱。就是在这种情况下，我觉得必须说点什么了。 

   现在回想起来，我觉得那些钱一定会很有用的。我已欠了大约五千美元的学生货款，同时每个月要为我的电脑支付约五十美元。我另外的主要消费是比萨饼和啤酒。但是由于开发 Linux ，我那时没有时间外出，最多每周出去一次。我不花钱约女孩子，把钱都花在了为我的电脑增加硬件上。也许要是换一个人，就会向大家要钱了，哪怕是为了减轻他那日夜辛苦劳动的单身母亲的负担呢？唉，我那时却没有想到这一点。 

   去告我吧! 那时，我更想知道都有哪儿的人在使用 Linux 。与收到钱相比，我更喜欢收到明信片。事实上，明信片确实在滚滚而来，从新西兰、从日本、从荷兰和美国。萨拉曾偶尔象征性地去取取信，突然意识到那总和他争吵的哥哥竟有来自那么遥远的朋友。那是她第一次认识到，在我总是占用电话线的时间里，我可能是在做一件会很有用的事情。那些明信片加起来足有几千封，但它们现在早已不知去向了，一定是在我某次搬家时丢掉了。我的朋友艾温坦说，我是他所见过的最不怀旧的人。 

   实际上，我不要钱还有很多原因。在最初发布 Linux 的时候，我觉得自己是在沿着几个世纪以来的科学家们和其他学术界人士的脚印在前进，而他们的成就往往建立在别人所打下的基础上――用牛顿的话来说，我是站在巨人的肩膀上。这样做，我不仅仅是在与别人分离我的成果，别人也将会觉得我的工作是有用的。我还想听到反响(当然，是想听到赞扬)。朝那些可能会帮助我改进工作的反馈信息要钱是没有 。 

   我想，如果我不是长在芬兰，我的态度会不完全不同。在芬兰，只是一个人稍微显露出一丝贪心的迹象，人们就会视之为可疑而不会羡嫉(自从诺基亚电话公司开始赚整个世界的钱并充实了很多芬兰人的钱包之后，这一点已经有了一些变化)。并且，对了，如果我不是在顽固的学究祖父和共产主义立场的父亲影响下成长起来的话，无疑我会对这件不要钱的事持不同态度。 

   无论如何，我不想把 Linux 卖掉，我也不想失去对它的控制权。也就是说，我不想别人把它买掉。早在九月上传每一个版本时，我就在有关复制的文件中表明了这个版权声明。根据十九世纪的波恩公约，除非你将其出卖，你拥有自己所创造的一切东西的版权。作为版权所有者，我开始定下了以下关于 Linux 的规则：  

   1.  人们可以免费使用该操作系统，但不得将它作为商品。 
   2.  对其所作的改动和改进， 必须以源代码的形式将其公开 (而不是二进制，这是不公开的。)  
   3.  如果不同意以上规定，则无权对它进行复制或从事任何行为。 

   你不妨自己设想一下。你为这个程序倾注了六个月的心血，你希望它是有用的，并且自己也能从中有所收获，但你肯定不想让它白白被人占去便宜。我想让大家都能够看到它和使用它，同时也可以随意对其进行改动和改进。但是，我也希望能确保我自己可以及时了解他们做过哪些改动。我希望自己有权使用源程序，这样，假如别人做了什么改进，我也可以利用它。我认为，要使 Linux 发展成最完美的技术就必须保持它的纯洁性。如果有铜臭渗透进来，事情就要变黑暗了。所以，如果不让钱的问题掺和进来，就不会有贪欲的参与。 

   尽管我没兴趣拿 Linux 去赚钱，但别的人却不这么认为，他们在给别人一份已经下载到软盘上的拷贝时都要索取回报。到了二月份，参加UNIX用户会议的人，几乎人人手上都有一张装有 Linux 系统的软盘。这些人也问我，他们能不能把 Linux 作为商品出售，比如说，只要五块钱，为的是收回软盘和时间上的成本。这听起来还有点道理，但问题在于，这样做就会侵犯了我的版权。 

   显然，我已经到了反思“ Linux 是非卖品”这一立场的时候了。 

   那时， Linux 已经在网上引发了很多讨论，这使得我很自信，再没有人能够窃取我的劳动成果了――而这曾经是我最大的担忧。至少，假如真有谁这样做了，他也难逃众人的谴责。如果有人想篡夺 Linux 并将其变为一个商业项目，必将会在网上掀起黑客的反对潮，会有无数黑客似的人物大声斥责道：“嘿，那是 Linux ，住手。”当然，措辞可不会如此文雅。 

   事情的发展已经势不可挡：世界各地的黑客们每天都在共同分享彼此提出的修改建议。 

   我们正在集体创造一个最好的操作系统，这种发展轨道已经不可改变。正因为如此――因为 Linux 已广为人知，我才觉得把它作为商品也是可以接受的。 

   但是，在使我自己看起来像个慈善先生之前，还有另一个关键的因素使我做出了这一决定。事实是，为了使 Linux 有用，我曾依赖过很多在网上免费下载的工具――我把自己放到了巨人的肩膀上。这些免费软件中最重要的是GCC编译器，它是理查德·斯多曼的杰作，并且已经在公共执照协会(GPL)上注册了版权。在GPL条款之下，钱不是问题，只要有人愿意买，你可以卖一百万美元。但是，你必须提供软件来源。而得到或买到你的来源的人，将拥有和你一样多的对于该程序的。这实在是很高明的一招。我认可GPL的原则，但是和那些认为所有的软件创新都应该在GPL下向全世界公开的顽固的GPL信仰者不同，我认为发明者本人有决定如何处置自己的发明的权利。 

   于是，我抛弃了自己旧有的版权声明，采纳了GPL的内容，一个斯多曼也曾经和他的律师一道签署过的文件(因为有律师的参与，该文件被搞得洋洋洒洒有好几页)。 

   新的版权声明被放进了0.12版本中。但是，我记得在发布当晚我从睡梦中醒来，想到商业利益将可能有点古怪，因为当时所涉及的商业利益真是不多。但不知怎的，我觉得自己应该小心。我的担心之一是――现在仍然是――有人将丝毫不尊重我的版权地将 Linux 掳去。我担心，在现实中，如果有个美国人侵犯了我的版权，我无法对其提起诉讼。现在这仍是我的担心。状告某人侵权很容易，而我的担心是，有的人会即使被起诉也继续从事这种违法行为，除非加诸某种强制执行的法律行动他们才会停止。同时我也不断地担心，在像中国这样的地方，企业并不承认GPL的效力，从而也不会尊重我的版权。 

   事实上，这些地方的法律体系对侵犯版权的制止在当时并不得力(中国已经签署了一系列的国际公约，李纳斯在这里谈的是 1991 年的情况 —— 译注)，而且，为防止违法行为的投入在这些地方被认为是不划算的。大软件公司和唱片公司曾作过努力，但是成效不大。 

   不过，事实减轻了我的担忧。有的人确实会暂时侵犯我的版权，但是他们往往也是那些尊重版权、反馈改进意见、使系统功能得以提高的人。他们将是系统升级过程中的一分子。相反，那些不尊重版权的人们则不会利用这些升级，他们的顾客也会离他们而去――我希望。 

   总的来说，我从两个方面看版权。 

   比如一个每月挣五十美元的人，他可能会为一个软件花费二百五十美元吗？如果花一点钱买非法拷贝软件，而把五个月的工资用于吃饱肚子，我一点不觉得他不道德。这种侵权是道义上可以接受的。去追捕这种“侵权者”是不道德的，更不要说简直就是愚蠢的。就 Linux 而言，谁在乎如果只将其用于个人目的时，一个人是否真正遵循了GPL呢？那些想藉此赚大钱的人们，才是真正不道德的，不管他们是在美国还是非洲，也不管程度如何。 

   贪欲从来就不是善的。 

.. _P23:

--------------------------------------------------------
8、MINIX 对 Linux  
--------------------------------------------------------


   引人注目并非全是好事。 

   我从不擅长处理对抗，但也被迫站出来为 Linux 和我的尊严辩护，因为安德鲁·塔南鲍姆不断攻击我的 Linux 取代了他的MINIX操作系统。我们都是网虫，所以论战是通过电子信件进行的。 

   他只穿着件T恤就浑身冒火，能怪谁呢？ 在还没有 Linux 讨论组之前，我一般都是在MINIX讨论组上宣布有关 Linux 的信息和寻找对这个操作系统感兴趣的人。对此，安德鲁怎么会高兴呢？ 所以，开始的时候，他对我入侵他的讨论组有些不快。很显然，他也很不高兴自己的操作系统正在被一个来自芬兰雪原的新发明夺去光彩，而且看来有众多的软件设计者正在加入进去。同时，他对应该如何创建操作系统持与我对立的观点。那时，安德鲁属于主张以微内核的方法建立操作系统的计算机科学家阵营。他把MINIX做成适用于微内核和Amoeba(一种他当时正在创建的也适用于微内核的系统)的形式。 

   适用于微内核的系统在八十年代晚期和九十年代早期十分盛行，而 Linux 的成功威胁到了这一运动。所以他不断地在网上帖一些难听的带攻击性的帖子。 

   微内核的理论依据是，操作系统是非常复杂的，所以要通过模式化来减少复杂性。微内核方法的原则，即核心的核心，是昼减少功能。它的主要功能是传播。电脑所提供的一系列不同的服务都是通过微内核的传播渠道实现的。因此，应尽量分割问题的空间，使其不再复杂。 

   我认为这种做法很愚蠢。 

   是的，每一个单独的部分是简单的，但是相互作用的多种功能如果放在一起就要复杂得多，而 Linux 就是后者的情况。想一想自己的大脑。每一个单独的部分都很简单，但是各部分的相互作用构成了一个复杂的系统。这是一个整体比个别更大的问题。拿一个问题来说，如果你简单地将问题一分为二，说半个问题要容易一半，那么你就忽略了一个事实，即：你必须要考虑到两个半个之间的联系所带来的复杂性。微内核的理论是，如果把核分为五十份，那么每一份都只有五十分之一的复杂性。但是每个人都忽视了一个事实，即各部分之间的联系事实上比源系统更加复杂，而且那些个别部分也不是那么简单。 

   这是我对微内核最重要的反驳：你想实现的简单化是错误的简单化。 

   开始时， Linux 是一个较小的软件，而且简单得多，没有必要进行模式化。所以用 Linux 可以比 MINIX 更直截了当地做很多事。我最初发现 MINIX 的缺陷是，如果你同时运行五个软件，五个软件都要读不同的文件，那么五项任务要一个一个地先后进行。换句话说，你要向系统发出五次请求：“我可以读文件X吗？”文件系统主管读取的后台驻留程序先接受一个请求，对其进行回应，然后再接受一个，再进行回应…… Linux系统只有一个核，在这个系统之下，五个不同的过程都对核进行系统呼叫。核必须要十分小心，不会将其混淆，但是它会很自然地让各个过程各行其是。因此 Linux 更加快捷高效。 

   MINIX 的另一个毛病是：尽管你有了源代码，但是许可证并不允许你做很多事情。拿布鲁斯·伊文斯来说，他对 MINIX 做了重大改进，使其更易在386上使用，但是他却无法将其所做的改进纳入原系统之中，因为 MINIX 限制人们对其进行修改。从实用的角度来说，这不啻是一个灾难。使用者哪怕为了得到一个可使用的系统都要经过多个步骤，这真是太不实用了。 

   就这样，我与安德鲁·塔南鲍姆结束了交战，那是在1992年年初。想象一下，在一个暴风雪过后的早晨，你看见这样一条信息：  

   ::

      来自：安德鲁塔南鲍姆ast@cs.vu.ni(安德鲁·塔南鲍姆)  
      新闻组：comp.os.MINIX  
      题目： Linux 过时了。 
      日期：1992年1月29日，格林威治时间12：12：50  
      我在美国待了几个星期，所以没来得及对 Linux 做多少评论(不是说如果我在，我就会说什么)。但是， Linux 确实值得一评。我现在就有话要说。正如你们所知，MINIX只是我的爱好，每当晚上我写烦了书，如果当时没有什么战争、革命、CNN 直播的参议院听政会，我就会摆弄 MINIX。 

      我的真正职业是大学教授和操作系统领域中的研究人员。 

      由于我的职业，我想我知道在今后的十年左右时间里操作系统会向何处发展。有两个方面引人注意：  

      1) 微内核对 Monolithic system 大多数操作系统是独立一体的，也就是说，整个操作系统是一个单独的 a.out 文件，一个“核形式”运行。这种二进制中有管理过程、存储管理、文件系统及其他。这类操作系统目前有 UNIX,MS-DOS,VMS,MVS,OS/360,MULTIC 以及其他很多。 

      另一种则是基于微内核的系统，在这种系统中大部分 OS 都作为单独过程进行，还有许多通过沟通在核外运行。核的任务是管理信息仁慈，控制中断的情况，低层次的过程管理，还可能有 I/O。这种形式的操作系统有 RC400,Amoeba,Chorus,Mach, 以及尚未发行的 WindowsNT。 

      在我详尽论述两者的利弊之前，可以说那些设计了这两个操作系统的人们之间的急诊已基本结束。微内核胜出。Monolithic system唯一的优点在于运行上，而现在有足够的证据证明，微内核系统也能和 Monolithic system 一样快。 

      MINIX 是一个基于微内核的系统。文件系统和存储管理相分离，在核外运行。I/O 驱动也是分离的(在核中，只是因为英特尔中央处理器中的大脑是死的这一原因，才很难寻求其他的做法)。 

      Linux 是 Monolithic 风格的系统。这一做法是回到七十年代的一大退步，就像对一个令人激动的C程序以BASIC语言重新编写。对我来说，在 1991 年还写一个 Monolithic system 的系统是一个不折不扣的坏主意。 

      2) 不分界域性 (Portability) 很久很久以前有一种 4004 CPU，它成熟后变成了 8008，接着它接受了整形手术，就成了8080。由 8080 诞生了 8086，接下来是 8088，再后来是 80286、80386、80486，一直到了第 n 代。同时还出现了 RISC 芯片，有些能以 100MIPS 运行。200MIPS 的速度以及更高能在近几年中出现。这些都不会马上消失，而是会很快从 80*86 发展开去。它们会通过在软件中解析 80386 来运行旧式的 MS-DOS 程序。我认为任何一个架构设计 OS 都是极大的错误，因为它会很快消失。 

      MINIX的设计就是不分界域性，并已从英特尔 ported 到 680*0(Atari,Amiga，苹果)，SPAC，以及 NS32016。 Linux 紧紧地与 80*86 联系在一起，方向错了。 

      别误解我，我并非不喜欢 Linux ，主要是 Linux 会使所有那些想在BSD UNIX上运转MINIX的人弃我而去。坦诚地说，对那些想获得一个“现代的”免费OS的人们，我想建议他们找一个基于微内核的、portable的操作系统，如GNU之类。 

      安德鲁·塔南鲍姆(ast@cs.vu.nl) 附：顺便说一下，Amoeba有一个UNIX仿真器(在用户的空间中运行)，但是还远未完成。若有人有志在此方面努力的话，请告诉我。运行Amoeba需要几个386，其中一个要有16M，所有的都必须具备WD以太网卡。 

      于是，我知道有必要维护自己的荣誉了，所以就有了下面的反击：  

      来自：李纳斯本尼迪克特托沃兹torvalds@klaava.Helsinki.Fi(李纳斯·本尼迪克特·托沃兹)  
      题目：回复“ Linux 是过时的”  
      日期：1992年1月29日，格林威治时间23：14：26  
      组织：赫尔辛基大学  

   看到这种言论，我想我得有所回应了。先向那些已经听够了对 Linux 系统进行的议论的MINIX用户们说声抱歉。我很想能“对诱饵视而不见”，但是……该是我好好地自我辩护的时候了。 

   安德鲁塔南鲍姆写道12595@star,cs,vu,niast@cs.vu.nl(安德鲁·塔南鲍姆)写道： 
   我在美国待了几个星期，所以没来得及对 Linux 做多少评论(不是说如果我在，我就会说什么)。但是， Linux 确实值得一评。我现在就有话要说。 

   正如你们所知，MINIX只是我的爱好，每当晚上我写烦了书，如果当时没有什么战争、革命、直播的参议院听政会，我就会摆弄MINIX。我的真正职业是大学教授和操作系统领域中的研究人员。 

   你用这个作为MINIX局限性的借口？对不起，但是你输了。我的借口比你的还多，而 Linux 在很多领域还是胜MINIX一筹。更别说MINIX的大部分似乎是由布鲁斯·伊文斯编写的了。 

   反驳一：你说你把MINIX当作爱好来玩――那么，请问是谁在拿MINIX挣钱呢？又是谁在免费发送 Linux 呢？再来谈谈爱好。让MINIX能免费获得，我对MINIX的最大抱怨就会消失。 Linux 在很大程度上对我是一个爱好(但是一个很严肃的爱好，最棒的一种爱好)。我没有从我的爱好中赚一分钱，它也不是我在大学要修的课程之一。我是纯粹用我自己的时间，在自己的机器上做出来的。 

   反驳二：你是教授和研究人员。这真是一个MINIX出现核心缺陷的好借口。我只能希望Amoeba不会像MINIX那样垮掉。 

   1.微内核对Monolithic system 没错， Linux 是Monolithic的，我同意微内核是好一点儿。如果不是你的话题有争议性，我可能会同意你的大中分意见。从理论角度(及审美角度)而言， Linux 输了。如果GNU的kernel在去年春天就已完善的话，我可能就不会开始这个工程。而事实是，GNU还没有完善，也远非如此。如果现在就已实现的这一点而论， Linux 才大获全胜。 

   MINIX是一个基于微内核的系统。 Linux 是Monolithic的系统。 

   如果这是判断一个kernel好坏的唯一标准，你的观点就对了。但你没提到的是，MINIX在微内核方面的表现并不出色，而且对核内多元任务的操作仍存在着问题。如果我做的是一个在多线文件系统上有问题的OS的话，我就不会这么快来责备别人。而事实上，我竭尽所能来使人们忘记软件设计者在此问题上的惨败。 

   (是的，我知道MINIX拥有众多黑客支持者，但他们只是黑客。而布鲁斯·伊文斯告诉我有很多可以竞争的机会。)  

   2.不分界域性 “不会界域性是给那些写不出新程序的人们准备的。” ――我，现在刚说的，口出狂言 事实上， Linux 比MINIX更具有分界域性。 

   “你说什么？”我听见你说。是真的――但却不是在你所说的意义上。我使 Linux 尽量符合标准(我当时手边并没有POSIX标准)。把程序移植到 Linux 上比到MINIX上要容易得多。 

   我同意，不分界域性是个好东西，但是只有在它确实有意义的地方才是个令人向往的特性。没有必要专门使一个操作系统太具有不分界域性：能粘到可移植的API上就行了。操作系统的实质就是利用硬件的特点，并将其隐藏在一层高级的呼叫后面。而 Linux 就是如此，它比任何kernel都更多地利用了386的特性。当然这便利真正意义上的kernel变得不可移植，但是这也使设计大为简化，是一个可以接受的权宜之计，因为这首先保证了 Linux 的诞生。 

   我也同意， Linux 又太不具有不分界域性了。去年一月我拥有了自己的386，而 Linux 系统的创建在一定程度上成为了一个让我认识386的项目。如果要成为一个真正的项目，必须能够在不分界域性方面做一些事情。但是，我最初的设计思想就是没有考虑到不分界域性，如果我这样说并不是太过分地为自己辩护。去年四月我开始这个项目时，认为不会有什么人会真的使用它。我很高兴我的这个想法错了。随着我对源代码的发布，每个人都可以免费来装截 Linux ，哪怕还不是很方便。 

   李纳斯 附：很抱歉我有时言辞过激。如果你没有其他的操作系统可供选择的话，MINIX已经挺好的了。如果你有五到十个386机器闲着没用，那么Amoeba也会不错，只是我确定无疑是没有的。我一般不会勃然大怒，但是在涉及到 Linux 的问题时，我是有点容易感情用事。 

   在这件事上还有一些口舌，那是我唯一一次发火。但是我要说明的问题是：的确有反对的声音出现，哪怕在早先的日子里(或者我还证明了这一点：当你参加网上论坛时，一定要小心从事，打字错误和语法错误会永远纠缠着你)。 

   我和李纳斯把家人和朋友留在露营地，开始沿着一条清流的小溪做一次午后散步。我们的露营地是在东西亚拉(Eastern Sierra)一个叫格鲁夫尔温泉(Grover Hot Springs)的地方。此时是七月四日国庆日的周末，这里的风光秀美得好像是把《国家地理杂志》上的照片原封不动搬下来似的。 

   “现在是柯达一刻，”李纳斯一边背诵着广告词，一边停下来欣赏着突兀的峭壁背景下铺满野花的草地。随后，我们在溪边坐下。我让他描述一下他的生活，尤其是自从 Linux 越出了其发源地――即由他认识的那些参加新闻讨论组的狂热爱好者组成的小圈子――而广泛地传播开来之后，他的生活有何变化。 

   “这种感觉一定很棒，”我说道，“那些年你一直跳不出户，除了你的电脑之外只和这个世界保持着仅有的一点点联系。突然间，这个星上的每一个角落都有人认识到你正在进行的伟大工作，你成了这个对你寄予厚望的发展中的 Linux 世界的中心……” 

   “我从不认为这对我来说是什么大事情，”他回答道，“我真的不认为是这样。对我来说， Linux 确实是那种我随时都在思考的东西，但这主要是因为总有问题需要我去解决。我确实为它投入了很多，但主要是因为它是一个智力的挑战，而不是因为任何感情的因素。 

   “我喜欢有这么多的人给我从事这个事业的动力，我曾认为自己已接受于完成它了，但我一直没有真正做到这一点。人们始终给我更多继续的理由，以及更多困扰的棘手难是，这使得继续完善 Linux 变得更为有趣。否则，我可能早就干其他事情去了。但我没有，因为这是我喜欢的工作。做这件事充满乐趣。我怀疑，我对自己的大鼻子或其他这方面的事情的提成，显然比在 Linux 上花费的精力还要多。”  

   几个星期后，在斯坦福购物中心，李纳斯为怎样挑选一双慢跑鞋而犯愁。“你一般每星期跑多少里地？”售货员问李纳斯。李纳斯不由得笑了起来：在过去十年里他还从未跑上过一里地。锻炼不是过去的首选功课。但在他感到疲惫的时候，李纳斯承认他愿意走出过度的自我监禁式生活。 

   “塔芙一定求过你，要你帮我去掉大肚子。”他开着开玩笑，一边拍着自己的肚子。 

   “告诉她，她的要求你本周内绝不可能达到。”我回答道。 

   接下来的一个半小时，我们开始在斯坦福校园里兜圈，以便找到一个可以合法停车的地方。然后，在伸展了一下胳膊腿之后，我们开始跑了起来。我们越过干涸的湖里狭窄的泥土小道来到林中，向着我们的目标――山顶巨大的卫星接收天线――前进。当然，我们根本没有跑到那儿。我一边迈着不寻常的轻快步伐奔跑，一边很惊讶李纳斯能够仅仅以一里的距离落在我后面而不被甩开。接着他终于不行了，几分钟后，我们在边的草上上舒展地躺了下来。 

   “你的家里人对因 Linux 而发生的一切事情的反应是怎样的？”我问道，“他们对此一定感到非常的激动。” 

   “我不认为有谁真的对此很在意，”他回答道，“我不是说没有人真的关心这件事。但我一直花费我最多的时间在编程序上，这一次也与以前没什么不同，他们不至于为此而有什么更多的关切。”  

   “那么，你一定曾对你的亲属们说过些什么。比如当你和你爸爸一同出动时，你是否曾对他说：‘嘿，你可能不会相信我一天到晚在计算机上鼓捣的那个玩艺儿现在怎么样了，现在已经有好几百人在用它了……” 

   “没有，”他回答道，“我只是觉得没有必要与家人和朋友分享这些，我从来也没有想过要把它推荐给更多的人。 

   我想起了在我写 Linux 程序时，拉素曾经决定要买Xenix，UNIX的SCO系统版(微软开发的用于PC机的UNIX版本)。我记得他曾经试着劝说我‘不要在这上面犯错误了。’他的意思是叫我不要再继续写下去了。但我不在意他的话，最终，在这个问题上他也有所转变。但对我来说， Linux 仍然不是什么大事情。在我看来，人们使用它固然是好事情，能够从中获得反馈意见也很棒，同时这些却并不是那么重要。我不想传播什么福音。我为人们使用我的代码而感到骄傲，但我从来也没有过要与所有人共同分享它的念头。我从来没有认为这是世界上最重要的事情。我也不认为有几百人用我的软件有任何的重要性可言，以至要告诉我爸爸。不是的，它对我来说更多的是一种乐趣。直到今天我也还是这么认为。”  

   “那么，你甚至都没有想过告诉你的父母、家人和朋友这些事吗？你自己真的不为这些事情而激动吗？”我问道，没有掩饰我的怀疑。 

   他沉吟了几秒钟，然后回答道：“我不记得我当时是否感到过激动。” 李纳斯买了一部新车，一部按他的定义很有“乐趣”的宝马Z3双座敞篷车，车身是金属蓝，完善的男孩子的汽车颜色。他选中这款颜色是因为没有他所中意的亮黄色。这黄色的宝马，他解释道，“看起来就像尿。” 

   几年来，他去位于圣克拉拉的Transmeta公司总部上班时，总是将他的庞蒂亚克车尽可能停在离大门口近的地方。但现在，他却将心爱的宝马车停在他办公室外的窗前，按他的廉洁这样可以停在阴影中避免暴晒。于是，现在李纳斯在电脑前工作时就可以不时地欣赏一下他的新车了。 

   大约在一年多以前，我们曾经首次在一起外出旅行――开着我特意租来的白色野马敞篷车翻山去圣克塔克鲁兹。在我们这次旅行期间，李纳斯曾停下来观察我们所参观的桑拿浴场和酿酒厂外停着的运动型轿车。现在，我们是在他自己的运动轿车里翻山越岭。当他在十七号公路上驶过弯路时，他脸上浮起微笑。 

   “你应该得到这些。”我说。 

   我从车内的储物箱里拿出一摞CD。 

   “听什么？平克·弗洛伊德？”我问道，“或者詹妮斯·乔普林？”  

   “这是我小时候听的音乐。我小时候从来没有在音乐上花过钱，但我在我家的房间里捡到过它，我猜是我妈妈听过的，尽管我记得她是艾尔维斯·卡斯蒂罗(Elvis Costello)的歌迷。” 这是一个周五的下午，一个欢快而美好的加利福尼亚周五的下午，各种令人愉悦的感觉围绕着我们：蓝色的天空映入眼帘，火辣辣的阳光照在身上，鼻子里是山中桉树的芳香和清新空气的甜甜味道，耳中传来的是平克·弗洛伊德的歌声。在外人的眼里，我们看起来一定很像那种后青春期的陈腐过客，涂着防晒霜，放着经典的摇滚曲调。不过，并没有多少车超过了李纳斯的新宝马Z3。 

   我们把车停在圣塔克鲁兹以北一点儿的一号高速公路旁。路旁早停了些普通的车子，我们来到几乎没有什么人的空旷海滩上，舒舒服服地躺了下来。 

   几分钟后， 我从背包里掏出录音机。再一次的，我请他讲一讲 Linux 早期的事情。 

   李纳斯用手指在沙滩上画了个四方形，表示是他的卧室，然后又指出了他的床和计算机的位置。“我起床的第一件事就是检查有新的电子邮件，”他说道，一边用手指比划着，“有些时候我一整天都呆在屋子里。我看邮件不仅仅是为了看有谁在和我联系，而更多的是为了看是否附带为我准备了些特殊的问题，比如是否出现了新的状况和问题，或者是一些我们已有解决方案的老问题又遇上了新情况。” 李纳斯告诉我，那个时候他的社会生活是“可怜”的。接着他认为这样说听起来有点过分，所以他修正道，“可能比可怜稍微好一点。”  

   “我并没有成为一个完全的隐士，”他说道，“但是即使在 Linux 出现之后，我一如既往地不善交际。我的大多数朋友都很善于与人相处，但我不行。你可以想象一下，如果从来没有给女人打过电话，那约会的情况会是怎样的呢？所以在那段时间里，我只有几个常到我那里敲窗子、想和我喝杯茶的朋友。我不认为有人会到处传说我正在做一项伟大的事业、我将改变世界之类的话。我不认为有人曾经这么想过。” 

   李纳斯唯一有规律的社交活动是每周的学生聚会，在这儿他可以和其他主修科学的学生混在一起，这个聚会由一些对技术的热爱胜过一切的人组成。 

   “什么是我担心的？正是一般的社交活动，也许提成不是一个准确的词汇，但这确实给我带来了很多情绪上的影响。在那个时候，只要一想到姑娘， Linux 系统就变得不再重要了。在某种程度上，今天也还是这样，我仍然可以不把 Linux 当回事。 

   “在大学的头些年，社会交际对我来说变得非常重要。这倒不是因为担心别人会嘲笑我驼背什么的，这种渴望社会活动的感觉来自于对朋友和别的什么东西的向往。我喜欢去学生聚会的原因之一就是，这是一种无须过分社会化的社交活动。在这样的晚上我融入了社会，而在其他时间我与计算机在一起。在学生聚会里玩远比 Linux 更为感性，我从未为 Linux 感到心烦意乱，也从未因为 Linux 而睡不着觉。 

   “过去和现在，能够使我心烦意乱的，从根本上讲并不是技术，而是与之相关的社会因素。我为安德鲁·塔南鲍姆的帖子如此心烦的原因，主要不是因为他所提出的技术观点。 

   “使 Linux 越来越完善和有活力的原因之一是，我不断地收到回馈的信息。这意味着 Linux 被人所注意，同时这也是一个正在形成的社会团体，而我是这个社会团体的领袖。这是一个明确的信号。这一毫无疑问是重要的，甚至比告诉爸爸妈妈我曾做了些什么更重要。我越来越关注那些使用 Linux 的人，至于我创造了一个社会圈子并获得了他们的尊重之类，却始终不是我关心的重点，甚至现在也仍然不是。不过，这确实是一个最重要的事实，也是我对塔南鲍姆的指责如此反应过度的原因。” 太阳已经没入了太平洋，到了该离开海滩的时候了。李纳斯坚持要我驾驶他的车返回――以体验一下这车究竟有多棒。我们要经过一段又长路又多的九号路返回硅谷。 

   李纳斯告诉我，他与MINIX创造者之间的争执，因为变得越来越富于攻击性而不再适于在公众面前进行，最后不得不通过私人电子邮件进行。 

   接下来是几个月的平静。一天，塔南鲍姆给李纳斯来了一个电子邮件，指出在《Byte》杂志的背面有一条五行字的广告在推销商业性的 Linux 版本。 

   “在我最后一次收到的来自安德鲁的电子邮件中，他问我是否真的在授意别人出售我的系统。我回信告诉他是的。然后我就再也没有收到过来自他的讯息了。” 大约一年后，当李纳斯到荷兰去作他的首次公开演讲时，有机会来自塔南鲍姆任教的大学，并希望获得那本改变了他一生的书籍――《操作系统：设计与执行》――的作者在该书上的亲笔签名。李纳斯在门口等了许久，但塔南鲍姆并没有出现，因为那时他恰好外出了。就这样，他们至今仍没有见过面。 

   在我首次公开演讲的头天晚上，我颤抖着躺在床上。房间里很冷，温度也就刚好在零度以上一点。荷兰的房间不像芬兰那样冬天有暖气，而我这间漏网的大屋子甚至还有一扇大玻璃窗，就好像荷兰永远只有夏天似的。但是，在1993年11月4日的这个夜晚，寒冷不是使我睡不着的唯一原因。我睡不着，因为我是如此的紧张。 

   在公开场合讲话一直是我的短项。中学时，他们让我说明一些我们曾吃力地研究过的东西，比如老鼠或其他什么的，而我总是讲不好。我站在那里，说不出话来，然后开始傻笑。说真的，我并不喜欢这样。当我很不情愿地被老师叫到黑板前，当着全班同学解答习题时，甚至比这还要难受。 

   在阿姆斯特丹附近的埃德市(Eide)，我接受了在这里举行的荷兰UNIX用户第十五届年会的邀请，将在会上做主题发言。我很想通过这次机会证明一下自己在公开场合的说话能力。在此之前一年，我也曾收到过来自西班牙的类似邀请，但我拒绝了。其实在那个时候，我是非常希望出国旅行的，但我想前往一游的愿望被害怕公开演讲的心理抵消了(我现在仍然喜欢旅行，不过在今天，这已经不像当年那样新鲜了。在那之前，我几乎从未离开过芬兰。那以前我唯一到过的地方就是瑞典，我们在那儿露营过几次，或许还可以算上到莫斯科去看我爸爸那次，那时我才六岁)。 

   拒绝到西班牙庄旅游一番的机会让我有些懊恼。所以我告诉自己，如果还有第二次这样的机会，我绝不放过。我躺在床上，另外一些思绪渐渐取代了我的回想：我能克服恐惧站在人前吗？我还会像过去一样嗫嚅吗？或者比这更糟，我会在将近四百名来宾面前舔着嘴唇傻笑吗？ 要真是那样，我就真是一个不折不扣的傻瓜。 

   我对自己说些惯常的废话以劝慰自己。来宾都希望我成功，如果不喜欢我的话他们根本就不会来，并且我也很熟悉演讲的主题：在 Linux 的核心产品中采用那些不同的技术决定的理由，以及开放源代码的理由。然而，尽管如此，我还是不能让自己确信演讲会取得成功。我的脑子里像是有一台停不下来的火车引擎一样轧轧作响。 

   演讲到底怎样？噢，来宾们看到我明显地带着惊慌站在他们面前，把通过Power Point――感谢上帝安排微软发明了这种软件――放映幻灯作为敷衍场面的救生工具，并在回答他们的问题时羞涩迟疑，但他们富有同情心地接受了我的表现。 

   事实上，我的答疑是演讲中最棒的一部分。在我演讲完之后，马歇尔·克尔克·迈克库斯克(Marshall Kirk McKusik)――他现在在太阳微系统公司工作――走到我跟前，说他认为演讲很有趣。对这个表示我是如此感谢，我觉得我都想跪下来吻他的脚以示谢意了。在计算机领域里很少有让我尊敬的人，克尔克却是其中之一。正是因为在我第一次演讲后，他对我是如此的友善。 

   我的第一次演讲就像是在进行休克疗法。接下来我还要遭遇许多类似的状况，但这些经历开始让我变得更自信了。 

   大卫一直在问我，伴随着 Linux 的不断成长壮大，我的大学生活尤其是精神状况有怎样的变化。但我不记得有任何教授和我谈到甚至是提到过它，我也不记得有谁指着我的背景对他的朋友说：“瞧，这就是那个李纳斯。”没有这样的事情。大学里我周围的人都知道 Linux 这回事，但大多数与其有密切关系的黑客都不是芬兰人。 

.. _P24:

--------------------------------------------------------
9、最后的冲刺 
--------------------------------------------------------


   1992年秋天我成了一名用瑞典语讲授计算机基础课的助教(这事的起因是，系里需要人用瑞典语上基础课，但在这之前的几年里，本系只有两名能讲瑞典语的主修生，拉尔斯和我，他们没有更多的选择，所以找上了我)。真实，我甚至对上讲台和演算习题都感到担心，但这种情况持续得并不长，靠把注意力集中在讲课内容上并尽力不去自寻烦恼，我战胜了自己的担心。就这样，三年后我晋升为研究班的助教，从此，我的工作不再是在讲台上讲课 主要是在实验室里继续 Linux 的发展完善研究。这可能也预示着一种趋势：有人愿意付酬让我从事 Linux 的研究。这也是我和Transmeta之间关系的基础。 

   大卫：“那么， Linux 是在什么时候开始成为一件大事情的？” 我：“它到现在为止也还不是。 

   ” 也许我说得太绝对了？好的，我可以作一点修正，在有许多人毋庸置疑地依赖着 Linux (作为他们计算机的操作系统)而不是把它当作玩具式的操作系统的情况下，它确实变得更像那么一回事了。当他们开始不再只是把它作为修修补补的玩意之后，我就认识到，如果出了什么问题的话，我就要对此负责任。或者说，我至少在精神上感到了某种责任感(至今还是如此)。在1992年， Linux 从一个更像是游戏的玩意变成了一些人生活中不可或缺的一部分，成为他们的生计和生意。 

   变化发生在1992年春天。过了大约一年半后，当第一个X视窗系统在 Linux 条件下运行时，我开始着手进行终端仿真。它意味着这个操作系统将有能力支持一个图形用户的界面，而用户也可以在多视窗条件下工作。这个工作应该归功于麻省理工学院的X视窗项目(X Windowing Project)。 

   这个工作的完成将带来一个很大的改变。我还记得在此之前的大约一年半，我还和拉尔斯开玩笑，说总有一天我们会完成一个在 Linux 下运行的X系统。但我绝没想到这一天这么快地来到。一个名叫奥瑞斯特·扎布罗斯基(Orest Zborowski)的黑客能够把X视窗装载到 Linux 上去。 

   对于我们有了图形用户界面的事实，我有一个短暂的适应过程。在最初的一年里我甚至都没有把它作为通常的运行环境，但是现在我简直不能没有它了，在我工作时总是同时开着许多窗口。 

   奥瑞斯特的贡献不仅使我们有了窗口，同时它还打开了通向未来的大门。Domain Socket可以用于能够支持X视窗系统运行的本地网络，但我们可以指望这些同样的套接字(Socket)能让 Linux 有能力跳出本地网络，而可以异地连接计算机。没有网络化的功能， Linux 只能对那些从不上网或只是在家拨号上网的人还有点用。 

   靠着极大的乐观主义精神，我们开始在这些新颖的套接字上开发 Linux 的网络工作功能，哪怕这些套接字本来完全不是为网络工作而设计的。 

   我相信这很容易做到。我们有一个关于版本发表的编号进度表，原计划是在1992年5月发表0.13版，由于有了恰当的图形用户界面，我感到我们对一个完整的、可靠的并且支持网络工作的操作系统这一既定目标有了95%的把握，所以我把将要发表的新版重新命名为0.95版。 

   嘿，我是不是很天真？请不要提到这个让我难堪的话题。 

   网络功能的开发让人很厌烦，我们花了差不多整整两年的时间去完成它，以形成一个可以发表的东西。当要加入网络功能时，突然之间所有的新问题都冒了出来，全都与安全问题有关。你不知道谁在旁边，也不知道他想要干些什么，你不得不足够小心地防备恶意的垃圾邮件对你的系统的攻击；同时，也再也不能完全控制有人想和你的系统连接的企图了。此外，许多人使用着不同的网络设备，依靠TCP/IP网络通讯协议这样的网络工作标准，很难让所有的超时(time-outs)正确。这些问题看起来好像要一直久拖不决下去。 

   到1993年末，我们大致上有了一个网络工作能力的解决方案，尽管部分人还很难让它正常地工作。我们还不能在没有8-bit boundaries的情况下解决网络问题。 

   我过分乐观地将新版本定名为0.95版，而不甚乐观的实际情况却将这种乐观变成了一种束缚。又花了我们将近两年的时间，1.0版才得以问世。 

   在此期间，我们仍然需要不停地发布各种有关瑕疵修和添加功能的新版本。但在0.95和1.0之间，却没有那么多的数字可以作为序号，这让我们着实有些疯狂。等到0.99也用过之后，我们只好在它后面加上数字以简要表示附加的序列，接着又开始依靠字母来表示，比如0.99版第15A次后面紧接着0.99版第15B次，0.99第15Z次是最后一个以此方式命名的版本，因为，原本应该命名为0.99版第16A次的版本正是我们已经完成了的Linux 1.0版。 

   1994年5月，新版本终于在赫尔辛基大学计算机科学系的礼堂里闪亮登场。现在回过头去看，完成这一版本的过程完全可以说混乱不堪的。 

   但是，没有任何东西可以阻挡 Linux 的普及。我们有了自己的讨论组，取名为comp.os. linux ，这是一个从我和安德鲁·塔南鲍姆激烈战斗的劫后灰烬中诞生出来的小团体，一个极具吸引力的游牧部落。当时，还或多或少地主导着互联网的Internet Cabal，每月都会针对每个讨论组吸引了多少读者发布一个非官方的统计报告，尽管这不是一个可以完全依赖的统计报告，但却是你可以找到的有关你的站点――在这里是指有多少人对 Linux 感兴趣――的普及程度的最好的参考信息。Alt.sex(一个著名的性问题网站，以另类性爱为其诉求――译注)站点那时是最受欢迎的(不过我对它并不热衷，我确实上过它一两次，不过是为了看看它吸引人的究竟是些什么玩意罢了。我更像是你那种类型的清心寡欲者。我宁愿和我的浮点处理器呆在一起，也不愿参与到alt.sex上那些热门话题中去――什么最新的做爱姿势啦，以及什么关于深度爱抚者们的报告之类)。 

   通过Cabal的月度统计，我可以很方便地追踪我们两个讨论组(comp.os. linux .)在网上的声望。而事实上我也确实做了这样的跟踪(虽然我可能是一些人心目中民于向强势挑战的英雄，但我却从来也不像那些糊弄人的新闻所表达的那样，是一个只知道科技的无私和利他主义的孩子)。到1992年秋天，我们的讨论组成员估计已经超过万人，这里面有些人只是加入到讨论组来自自到底发生了些什么，而并不是 Linux 的使用者。每个月的统计结果出来的时候，首先提供的是一个普及率排名前四十名的讨论组的简要报告，如果你的讨论组没有挤进前四十名的话，你可以从另一个地方取得在这四十名之外的其他讨论组的完整报告，而我当时就不得不经常这样做。 

   我们的讨论组的排名仍在缓慢爬升。终于有一天，它挤进了前四十名。 

   这真是太棒了!我是如此地感到高兴，我记得我还为此写了一篇文章，在其中我基本列举出了包括MINIX的各种不同的操作系统，并说：“嗨，你们瞧，我们比(微软)视窗还要普及。”其实，真正的原因是当时的视窗系统还不能应用于互联网上。 

   1993年，我们的讨论组闯入排名前五位。那天晚上，我带着巨大的自我满足感躺到床上，为这样一个事实而兴奋无比：comp.os. linux 和alt.sex不相上下，这意味着， Linux 应得和性一样普及了。 

   在我的小世界里当然不会有这样的竞赛。 

   我真的没有什么生活。在那个时候――正如我在前面已经提到过的，彼德·安文组织了一次在线捐活动，共筹得了三千元帮助我买计算机。在1993年圣诞节，我的计算机升级为486DX266――它在此后还要陪伴我好些年。在那个时候我的生活不过如此：吃、睡、到学校、编程、读电子邮件。我的朋友们越来越走向社会，我对此已习以为常。 

   十分坦白地说，我的大多数朋友也是失败者。 

   在埃德的那次演讲几乎使我确信我能应付任何事情，既然连站在一群俨然陌生的人面前并成为他们注意的中心这样难堪的事我都可以应付，我的信心在其他方面也渐渐建立了起来。我被迫就 Linux 的修补和升级问题迅速做出了决定，而每一次这样的决定，都让我感到作为一个成长中的团体的领袖，我是称职的。在所有的决定中，纯粹的技术决定并不成其为问题，困难的是用老练的技巧向一个人指出你更乐于采用另一个人的建议而不是他的。有时候，我只是这样简单地对他说：“这东西用起来很不错，我们就用它吧。” 我从不认为接受不同于自己的想法是找到最佳解决方案的办法，而认为这可以防止在提出不同的竞争的程序员之间形成对立。尽管当时我可能不是这样想的，但这样做也有助于获得别人的信任。信任不是没有用的，在人们相信你时，他们更容易领会你的建议。 

   当然，你首先要建立别人之所以信任你的基础。对我而言，我猜想主要不是因为我发明了 Linux 的核心部分，而是因为我最终做出了将它放到互联网上、并且对所有希望使用或改进它的人公开源代码的决定。 

   多从未想过自己在计算机之外的现实生活因为 Linux 而有所改变，我也从未想过要做一位领导者。这一切的发生完全是一种偶然。 

   在一些关键性的发展阶段中，一个五人核心开发小组开始担当大多数的开发任务，他们由此觉得自己好像是一个筛子，有责任维持这个领域的工作。 

   我很早就明白，最好的领导者不是让手下做他要求他们做的事情，而是让手下做他们自己想要做的事。同时，最好的领导者也明白，当手下犯错时，要让他们自己有能力纠正而不要总是自己出面纠正。最佳的领导者是能够让手下自作主张的人。 

   让我换一个表述。 

   Linux所取得的许多成功，其实可以归结为我的缺点所致：  

   1、 我很懒散。 

   2、 我喜欢授权给其他人。 

   黑客们，不，程序员们，把在 Linux 和其他开放源代码的项目上工和放在比睡觉、锻炼身体、小圈子聚会，以主，有时是性生活更优先的地位。因为他们喜欢编程，更因为他们乐于成为一个全球协作努力的活动的一部分―― Linux 是世界上最大的协作项目，这一努力将给所有喜欢它的人带来最好最美的技术。这种努力是如此率真，又是如此有趣。 

   好了，我现在听起来就像是在不知羞耻地自吹自擂。开放源代码的黑客(程序员)们，不是特蕾莎修女在高技术领域的翻版，他们也在每个项目的“贡献者名单”和“历史记录”等文件中将他们的名字和贡献联系在了一起。最为多产的贡献者，将获得那些希望获得代码和雇佣顶尖程序员的产的注意。此外，黑客们的很大一部分动力，也来自于靠实实在在的贡献获得同行的认可和尊重的企图，这是一个重要的激励因素。 

   每个人都想影响自己的同行、提高自己的声誉、改善自己的社会地位。 

   开放源代码的发展项目给黑客们提供了这样的机会。 

   不用说，我在1993年也如同在1992年、1991年一样将大部分时间花在了电脑前，这看来应该有所改变了。 

.. _P25:

--------------------------------------------------------
10、塔芙 
--------------------------------------------------------


   跟随着我爷爷的学院教学生涯，我也成了赫尔辛基大学的一名助教，被分配在这年秋季学期里开始用瑞典语教授《计算机科学入门》课程。 

   就这样，我遇上了塔芙。她对我一生的影响甚至比《操作系统：设计与执行》一书对我的影响还要大。不过，我不会用这种影响的细节来让你烦恼的。 

   当时，塔芙是我的班上十五个学生中的一个。她已经有了一个学龄前教育学的学位(不像在美国，芬兰要求学龄前儿童的教师要有大学学历)，她还想学习计算机，却不能取得像班上其他同学那样的进步。当然，最后她还是赶上去了。 

   我们交往的过程是如此简单。那是在1993年秋天，互联网还没有流行开来。因此，有一天，我在这个班布置的家庭作业就是给我发一个电子邮件(这要放在今天简直要笑死人)，我对学生说：“今天的家庭作业：发给我一个电子邮件。” 其他人的邮件不是一些供记录的短语，就是一些没什么意思的笔记。 

   只有塔芙，她邀请我和她出去约会。 

   我娶了第一个通过电子方式走近我的女人。 

   塔芙是一个曾六次获得过芬兰空手道冠军的幼儿园教师。她的家庭很独特，尽管我认为还不如我们家那么离奇。她有许多朋友。从我们在一起的第一刻起，她就像是最适合我的女人。经过了几个月的约会，我和我的猫兰迪就搬到她的公寓房间去了。 

   在搬进去后的最初两周，我甚至都没有动过一下我的计算机。 

   不算上我服兵役的时间，这两周是我自从我十岁那一年坐在外祖父膝盖上摆弄计算机以来，离开计算机最长的一段时间了。不必详细描述，但这确实是除去服兵役之外我离开计算机最长的时间的记录了。不知为何，我并不为离开计算机而难受(再次声明，具体情节对你来说并不感兴趣)。对于这一切，我曾经看见她有几次嘀咕过什么“母性的胜利”，而我爸爸和妹妹可能只是感到困惑罢了。 

   不久，塔芙去找了只猫来和兰迪做伴。 

   晚上我们都有很好的安排，或是就我们俩人在一起，或是找几个朋友一块儿玩。早上五点我们就起床了，她去上班，而我也好早点儿到学校去，在没人打扰的情况下读一读与 Linux 有关的电子邮件。 

.. _P26:

--------------------------------------------------------
第4章 舞会上的国王 
========================================================


.. _P27:

--------------------------------------------------------
1、1.0 版本闪亮登场 
--------------------------------------------------------


   1.0 版的诞生也意味着 Linux 有了新的需要：公关关系和广告宣传。而我，只是像推出此前的那些版本一样略微的有些兴奋。我倒愿意在讨论组上写些东西，比如：“1.0版问世，试试如何”之类的话（这就够了，不需要多余的话了）。 

   但许多人认为，1.0版的发行是件大事――这都是些开始出售以 Linux 作为操作系统的成长中的商业软件公司，他们希望1.0版对发行有所帮助。 

   在他们看来，1.0这个数字的心理意义要远比其本身的技术含量更为重要。我对此倒没有什么异议，因为事实就是如此。以0.96版的序号销售操作系统确实比较糟。 

   我盼着这一切早点儿过去。对于我来说，这也具有某种标志性的意义，它意味着我可以不用再在小修小补上耗时间，可以重新回到对系统的开发上来了。与此同时，这些商业软件公司和整个 Linux 圈子都盼着把它大张旗鼓地推向公众。 

   我们需要一个公共关系方面的策略。但我不会去作这个努力，因为我对发布新闻或陈述声明之类的活计不感兴趣。而有些人自认为对此很在行，所以他们就接过了这个任务。这倒是很像 Linux 的开发方式，并且事实上这样也完成得不错。 

   拉素（Lasu）是将这一事件付诸实施的主要推动力量之一。他和其他一些人认为，赫尔辛基大学是最适合的发布地点，在我的住处发布，不仅地方小，而且会开一个在商业场所发布 Linux 新版的不好的先例。所以拉素自告奋勇地开始与学校联系，好在我们学校很小，他可以直接与计算机科学系的头儿们商量这件事。 

   学校非常乐意为我们提供场地。为什么不呢？学校并不常有值得电视报道的事情啊。 

   我不得不同意做一个讲话。这次讲话一点也没有像我初次讲演那样困扰我。但今天想来，有些事情实际上反而更可怕，比如我爸爸会坐在台下之类。但真正让我有点犯难的是芬兰电视台的转播，这可是我头一次有机会看看自己在电视里是什么模样。 

   发布当天，我爸爸妈妈来了，塔芙也来了，而且这还是我爸爸第一次见到塔芙，所以这就不仅仅是什么1.0版的发布现场了，倒颇有些家庭聚会的意思。可当时我正在做演讲前的最后准备，比如看看幻灯是否装好了之类，结果他们遇见时我根本就不在场。我想他们大概是在进场是碰到的，但这只是我的猜测罢了。 

   正如此后几年人人都在谈论的一样，我在演讲中几乎没有讲新版本的技术细节，而主要着力于阐述开放源代码的意义。 

   发布会的效果很好，至少它改变了我们系对 Linux 的看法。在此之前， Linux 是计算机科学系对外炫耀的某种东西――看，我们的教师有多棒――并在某种程度上对其加以鼓励。但在这次发布之后，更多的人开始把它当作正经事来看了。毕竟它已经上了各个新闻机构的版面或屏幕了。 

   在事隔这么多年之后，有人猜测赫尔辛基大学曾试图获得 Linux 的所有权，但这是完全不对的。我们系的确给了我很多的支持，但这发生在很早期的时候，至于“让我们支持这个软件吧，因为它将会闻名全球”的念头，我敢说从来也没有人有过。当然，他们很乐意成为这次发布的重要部分，因为这提供了难得的广告宣传和公关活动的机会。我知道现在已有更多的讲瑞典语的芬兰学生来我们系上课。而在这以前，我们系一直被赫尔辛基理工大学压在下面。 

   对成功者的嫉妒是芬兰文化的特点之一。 

   随着 Linux 在全球范围内越来越知名，我开始担心学校里的人是否会因嫉妒而来为难我。但事实恰恰相反，他们非常支持我。从一开始他们就在个人计算机上放弃了X终端而改装上了 Linux 操作系统。 

   这次发布也使 Linux 成为芬兰人注意的中心，并开始在其他国家获得公众。关于 Linux 的报道显著增多，份量也重多了。这是因为有一些记者虽然对 Linux 一知半解，却从中感到很振奋。事实上，从商业的立场上看，1.0版的发行并未给任何大商业软件公司构成什么威胁，它只不过是获得了先前由MINIX和Coherent占据的市场，但它却得到了比它们更多的圈外注意。这可不是我在一开始所能料想到的。 

   不经意间，开始有记者――大多是商业杂志的记者通过查找门牌号而找上门来。塔芙可不乐意在周末的清晨被带着礼物上门要求做一次专访的记者所吵醒，而这记者甚至可能来自日本，也不知从哪里得知我对手表有着爱好。塔芙对这种事情很不高兴。但这类造访持续了好几年，直到我们搬入了一个谢绝记者的居住小区为止。但即使这样，我有时也会忘记事先告诉塔芙我约了记者到家里来，也说不定我潜意识里就想忘掉它。结果当塔芙眼里的不速之客在门外出现时，她还不得不出面招待。 

   接着，又突然出现了一些 Linux 发烧友网站。一个服务器放在法国的网站登出了许多让我尴尬的照片，例如我当年在大学学生聚会上的表现：上身赤裸、喝着啤酒，并且看上去很粗鲁。 

   并不只是记者或 Linux 的发烧友们对我有兴趣。突然之间，商业巨头们也想就他们的技术和我谈谈了。 

   UNIX之所以长期以来被看作有着巨大潜力的操作系统，主要是因为它强大并且可以支持多项任务的能力。因此，有不少对UNIX感兴趣的公司开始关注 Linux 的情况了。其中之一就是网络软件公司Novell，他们已经开始以 Linux 为基础开发一个名为“黄鼠狼计划”（skunkworks project）的项目，其前身也是由该公司开发的叫做“视镜”（Looking Glass）的UNIX桌面系统。这个项目看起来不错，但遇到了一点障碍，因为他们缺乏普通的桌面环境那样的记时标准。 

   1994年8月，该公司邀请我造访其设在美国犹他州奥勒姆市的部门，和他们谈谈其桌面系统。既然Novell给我提供了到美国的机会，我就提出条件说，如果他们能够提供我参观另外一个美国城市的机会，我就愿意接受邀请，因为，即使是我这样对世界所知不多的芬兰人也可以推测奥勒姆市――甚至还有盐湖城――是相当独特和有别于美国其他城市的地方。他们同意了，并且建议我参观华盛顿，但我并不想去那里，我想那不过又是一个和赫尔辛基差不多的首都罢了。然后他们又建议我去纽约，但我自己更想去加利福尼亚。 

   在Novell的总部，我很难搞清楚他们对这个项目究竟有多重视。后来，他们的行为终于显示出他们在开初并不是非常重视：他们终止了这个项目，而与之相关的九个人则转入了叫做Caldera的新项目。不过，这次造访使我对美国有了第一印象，这是一个值得我为之居留的地方。Novell对 Linux 的关注表明，美国看来仍是技术进步的核心地区。 

   美国之行对我还是有所触动的。 

   第一件让我有所感触的事情是，这里的一切相比旧大陆来说都是那么新鲜。我所参观的摩门教堂已有一百五十年的历史，但却经过清洗，显出亮丽的白色。要是在欧洲，所有的教堂都是老旧不堪的，并蒙上了一层岁月的斑痕。看着这洁白亮丽的教堂，我脑海里产生的唯一联想竟然是迪斯尼乐园。因为它看起来太像是童话故事中的城堡，而不太像是一个教堂了。 

   在奥勒姆，我在旅馆里洗完桑拿后结账时还犯了点小差错。说到那桑拿，其实是一种简易的桑拿，里面的壁板是用塑料而不是木头做的，并且一点儿也不烫，只比外面热一点。在那一刻，想到在美国竟然没有地道的桑拿，不由得有点想家。 

   但我也开始逐渐熟悉周围的环境了。正如一个到芬兰的旅游者很快就会明白不能随便和酒吧里的陌生人搭讪一样，我也开始明白――开始在犹他，然后在其他地方――在美国你不可能与人理性地讨论堕胎或枪支管制等问题。因为你至少有一半可能会遇上对这些问题带有非常情绪化看法的人，并且很容易陷入到有关某事究竟应不应当的无休止的争执当中去。在欧洲，这些问题根本就不是问题。我认为，在美国，人们之所以如此强烈地捍卫自己的立场，恰恰是因为他们随时都会听到持反对立场的声音。这有些相互激励的意思。其实若以人均比例而论，芬兰的枪支拥有率可能会更高，但这些枪大多是用来打猎而不是用来防卫的，所以这根本就不成问题。 

   我在美国的最初那些天里学到的另一件事就是：根汗啤酒（root beer）让人作呕。 

   离开犹他，我飞往旧金山。我一下子就深深地喜欢上了这个城市。我顶着阳光不停地在这个城市里游逛，结果晒伤了自己，不得不在旅馆里躲了一整天。 

   我记得自己徒步走过了金门大桥。在桥的这头开始跨越大桥时，望着对岸的Marin海岬，恨不得立刻就到对岸去徜徉在那美丽的群山之间。但等我真走到Marin这边时，我简直就要走不动了。那时的我绝对想不到在事隔差不多整整六年以后的今天，我会坐在这海风吹拂的海岬峰顶，一边将太平洋、旧金山湾、金门大桥、笼罩在雾中的旧金山城区尽收眼底，一边对着大卫的录音机讲述这一切。 

   一年后我重访了美国。这次有塔芙和我一道。这次是到新奥尔良的数字用户集团（Digital’s User Group）参加DEGUS会议并作演讲。会议只有四十人参加，所以并没有什么犯难的。这次会议的最大收获是认识了别名“疯狗”(Mad Dog)的约翰·霍尔，他是Digital UNIX负责技术服务的市场人员，并且是老式UNIX的使用者。会议指定他来陪同我参加这次会议。这位以长过肚脐的胡子和可笑的幽默感（不要提他容易打鼾的事）闻名的人士，创立并领导着 Linux 国际（Linux International）这个专门支持 Linux 系统及其用户的组织。他还是我女儿帕特里夏的教父。 

   新奥尔良会议的另一项遗产是：“疯狗”让Digital UNIX公司借给我一台Alpha芯片的计算机。这次 Linux 将尝试与不止一种的PC机接入。在此之前，已经有人将 Linux 接入其他硬件系统，比如使用68K芯片的阿特里(Atari)，使用Motorola 68000的Amiga等。但在这些案例中， Linux 并没有在同一时间同时运行于两个平台之上。为了使Scaling work的版本能够工作，我将所有不能工作的部分全部抛弃并代之以新写的部分。但Alpha是首次与 Linux 接入。而且要让那同一套源程序同时在PC体系的Alpha系统上运行。于是我加了一个抽象层（abstraction layer）以便同一套代码可以不同的方式被汇编运行在不同的系统上。代码只有一套，但可以适用于不同的系统。 

   到我们在1995年3月发布 Linux 1.2版时，已经增加到约二十五万行代码了，新杂志《 Linux 杂志》的发行量也有了一万份，并且 Linux 已经能够适用于Intel、Digital和Sun SPARC等不同的处理器了。这真是巨大的进步。 

.. _P28:

--------------------------------------------------------
2、版权之争 
--------------------------------------------------------


   在1995年出现了一批各种各样的 Linux 的版本，并且商业性的 Linux 软件公司吸引了更多的追随者。这一年，学校将我由助教升为助理研究员，这意味着我的薪水和不用上课的时间都多了起来。这一年，我仍然以极其缓慢的速度继续着我的硕士学业，其内容包括将 Linux 接入各种不同的体系等。这一年塔芙还教会了我打壁球，我们每周都进行一次公平的竞争。 

   就在我沉浸在幸福之中的时候，麻烦来了。一个波士顿的投机分子将 Linux 登记为注册商标了。不仅如此，他还向《 Linux 杂志》和其他一些 Linux 商业软件公司发出了电子邮件，信中要求这些机构将他们收入的百分之五作为提成支付给他。 

   当我听到这个消息时，感到一阵刺痛。这个家伙的名字听上去有点耳熟，果不其然，当我检查自己的电子邮件文档时，发现他在一年半以前曾主动给我发过一个邮件。在信中，他首先问我是否信仰上帝，接着就说他有一个对于我来说非常巨大的商业机会。那个时候，暴富的企图和计划还没有侵蚀互联网的纯洁，所以我毫不理会这个家伙的邮件。但由于它出现的时机颇不寻常，我就把这个邮件保存了下来。 

   但不管怎样，我们现在或多或少处于某种危机中。我们都是些黑客，所以此前谁也没想到过要去注册。 

   这个家伙也不是个职业的商标抢注者，并且很显然这也是他第一次干这种勾当。商标注册又按行业等分为许多类，而他只在计算机这一类别下注册了商标。商标注册必须提交申请，所以他交给商标管理当局一张内容是其命名为 Linux 的程序磁盘。 

   他的这些举动有些傻。 

   Linux社区的所有人都明白我们要将注册商标夺回来。但问题是，我们并没有相应的组织来进行这场争夺，我们甚至没有足够的钱来请一名律师。没有一个公司乐意为此投下一万五千美元。在当时，这是一笔不小的数目。要是在今天，这些公司的私货生意在一个月内就可以赚这么多钱。所以，最后是由《 Linux 杂志》和其他一些公司一道，给进行这场争夺的 Linux 国际提供打官司所需的资金。 Linux 国际是在1994年由一位名叫帕特里克·德克鲁兹的居住在美国的澳大利亚人创立的。其目的和宗旨是在全球范围内推广普及 Linux 。发生商标争执的这一年正好是由“疯狗”任 Linux 国际的执行理事，所有的人都信赖他，并且始终如此。 

   那时我人还在芬兰，最关心的是能否在壁球上击败塔芙，或是在司诺克台球上击败阿沃托，而不是这件事。我只想着这梦魇般的讨厌事赶快过去。在这件事上，我更倾向于干脆彻底抛弃 Linux 这个商标，并宣布由于它过去的非商业用途现在不能作为商业名称。我们有足够的文件证明我们确实先于他使用 Linux 这一名称。但麻烦的是，律师向我们解释说，试图让 Linux 变为公共所有权以取消注册商标的想法是白费力气，真正能让 Linux 成为公共所有权的途径是让它成为一个通称，而不是某个具体事物的名称。但是，显然那时的 Linux 不是通称而是确有所指。即使在今天，商标管理当局可能也不会认为 Linux 是通称。律师警告我们，继续朝我希望的那条路走下去，我们会输掉这场官司。并且，即使我们赢了这一次，也可能会有别的家伙再来这么一下子的。 

   所以他建议的解决办法是：将注册商标的所有权转移到某个人名下。我主张让 Linux 国际这一组织作为商标所有人，但有许多人反对。因为他们担心 Linux 国际有可能被商业利益所征服，同时，人们也担心领导层易人后的政策连续性，谁能担保“疯狗”的后继者还能像他那样值得信赖呢？ 既然 Linux 国际成立不久信用尚有待证明，于是所有人都属意于我。律师也暗示，将所有权转移给我将有助于在庭辩中占上风，因为我是 Linux 这个词的最初使用者，而这一点也是我们的战略重点所在。 

   最终，我们与那个家伙达成了庭外和解协议，这看起来是最为省事省钱的办法了。像大多数其他的庭外和解协议一样，本案的细节也是不能被公开讨论的。不过，即使可以讨论，我对细节一无所知。我对此一点兴趣都没有。 

   当我重新阅读那个家伙给我的信时，我发现上面并没有确切地谈到商标特许的事。或许当时他来信只是想和我攀谈攀谈，当然也可能是想要我付钱赎回商标，也可能他真是想让我获得信仰并成为教友，甚至他也可能是想把那商标赠送给我。谁知道呢？ 经此一事，我认识到不是所有的人都讲道德。但更让人生气的是，我无缘无故地背上了商标所有人的担子。 

   作为这一通忙乱的结果，我成了 Linux 注册商标的所有人。这意味着，像VA Linux这样的公司在填写上市申报文件时，必须在他们的文本中指出该公司并不拥有其公司名称的一半的所有权（在本例中，该公司必须通过法律程序征得我的许可以便使用 Linux 这个词）。起初我对此还得有些好笑，但现在我已经对这类事习以为常了。 

   商标风波只不过是 Linux 成长的烦恼之一，且不失为一次消遣。但不久之后，其后果就显现出来了：设在美国俄勒冈州波特兰市的英特尔研究部门里的一个名叫奥瑞的工程师告诉我说，英特尔正在为其新开发的体系做准备，其中会用到 Linux 。他问我是否愿意到他们那里做一次为期六个月的研究工作。 

   塔芙和我对有可能生活在美国有点茫然，她知道我是多么欣悦于几次美国之行，当然根汗啤酒不在此列。我们认为去美国的机遇――不是指风土人情――要更好一些（我完全相信在激励员工积极性方面，美国的制度要比欧洲模式更现实，也更有效。在芬兰，老板会给贡献突出的员工稍高一些的报酬，以免他吵闹着要加薪。而在美国，则会给他们远远高于其他人的报酬――这非常有作用）。 

   这次研究看来是一次关于美国工作和学习的极好尝试，并且地点又是在濒临太平洋和多雨的美国西北部，所以我们都觉得似乎不应该放弃这次机会。但我也不无矛盾，我觉得我很难不完成硕士学业就离开学校。或许我骨子里还有外公留下的影响，总觉得辍学是一件很不应该的事。不过这件事很快也就过去了，我也免除了内心的冲突。英特尔研究部门的经理人员发觉我很难从美国移民与规划局获得为期六个月的工作许可证，所以最终并没有发出正式邀请。 

   就这样，我继续呆在赫尔辛基。到1996年，我正接近于完成自己的硕士学业，我的论文已经写好，只需一点学分就可以拿到学位了。不无讽刺的是，这恐怕是耗费了我整个硕士生涯大部分时间的 Linux 开发研究所获得的仅有的学术肯定了。 

   1996年也是我有所醒悟的一年。在平均主义盛行的芬兰，你每工作三年就将得到一次法定的升迁。但我第一次拿到升迁后的工资条时，不由得一阵晕眩，根本没想到我在学校里已经工作了如此之久，竟然有资历获得升迁了。 

   但我是否要把毕生的事业固定在这里呢？还记得我前面是怎样描述我外公的吗：单调、超重、从来也不会因为喜欢什么而微笑。我要这样吗？我开始有规律地观察镜中的自己。我的发线正在一点点向上面爬升，脸上也开始密布着细纹。我已经二十六岁了，平生第一次觉得自己老了。而这已经是我在大学里度过的第七个年头。我想抓紧这一点，以便很快地毕业。 

   我女儿卡蕾认为，能让人给你买一只企鹅可真是件不得了的事。在晴朗的夜空底下，我们围坐在篝火旁，李纳斯讲述着一个在英国布里斯托尔市的 Linux 用户组织是怎样买了一只企鹅送给他。让卡蕾想不到的是，那些人并没有真的给他买一只企鹅，李纳斯解释说，是那个组织曾向某个动物保护组织捐款赞助，然后以李纳斯的名义认养了一只企鹅。 

   托沃兹一家咂摸着李纳斯的故事背后的含义。不知是谁，在烤蜀葵的当口抬起头来，问了一个笨问题：你们是怎么想起用企鹅来做 Linux 风靡全球的形象标识的？ “这是我的主意。”塔芙说道，“因为人们总是在问，‘难道你们不该做个标识吗？’所以李纳斯才在这方面动起了脑筋。 Linux 的各公司都有他们各自的标识，其中有一家用的是一个粉色三角，但我知道这个标识早已被同性恋者们相当广泛地用上了。我就把这个消息告诉了他。 

   他说，他要找出一个优雅的、有亲和力的东西来做标识。” 

   “我就想到了企鹅。李纳斯在澳大利亚的时候曾被一只动物园里的漂亮企鹅咬了一口。他喜欢逗弄小动物，总是爱把手探出去。那些企鹅大概有一英尺高，他刚好能把手探到笼子那儿摸着它们。他晃动着手指，扮成鱼的样子。企鹅被招了过来，咬了他一口：咳，这口感可不像是鱼。他虽然挨了企鹅的咬，可还是喜欢它们。我觉得他这辈子跟企鹅是没完了，只要一有机会，他就非去看企鹅不可。所以，当他在为找个标识而大伤脑筋的时候，我就提醒他，‘你这么喜欢企鹅，为什么不用企鹅来做标识呢？’他说，‘哦，让我想想。’” 李纳斯此时正坐在篝火的另一边摇着头。 

   “不是的，这可不是她的主意，”他说道，“不是那么回事。” 看来这个小问题还是有争议的。我想，我恐怕还从没见过一对像李纳斯和塔芙这样平等相待的两口子。我曾见过李纳斯做家务，见过他在塔芙早晨还赖在床上的时候给她弄上杯咖啡，即便是长途行车中应付两个小宝宝的闹上闹下的无理要求，这两口子也总是一副从容不迫的样子：这可真是一桩幸福婚姻。 

   我们的问题到了关键地方了。 

   李纳斯给出了另外一个故事版本：尽管塔芙在早些时候确实语焉不详地提到过企鹅什么的，但真正认真考虑把企鹅作为 Linux 的正式吉祥物，还是在李纳斯与两个高级助手的一次谈话当中。 

   塔芙有点儿不服气。“开头他也不认为这是个好主意，因为这是我的主意。我跟他说过之后，他还是接着想他的。后来在波士顿，我们和亨利·霍尔又谈起了吉祥物的问题。我对他们说，‘用一只企鹅怎么样？你们觉得呢？’他们都觉得不错。我想，这才促使李纳斯认同了这个想法。” 

   “亨利·霍尔说，他认识一个画家，可以找他来给我们画一只企鹅。但这时就再没有下文了。后来我知道的，就是李纳斯开始在网上征集企鹅的图片。” 李纳斯选中的是莱瑞·艾文的图片。这个莱瑞·艾文是德克萨斯A&M大学科学与计算机学里的一位画家。 

   这企鹅可不是随便哪一只都行。李纳斯想让它有副爽透了的样子，就像刚刚喝下去一扎鲜啤酒，然后又体验了一次无与伦比的性高潮。除此之外，这只企鹅还一定要很特别才行。于是，其他的企鹅都是黑嘴巴黑脚蹼，但 Linux 的企鹅却是黄嘴巴黄脚蹼，这使它看上去好像是鸭子与企鹅的杂交品种。也许它是唐老鸭在南极之旅中与一只当地企鹅一夜倾情的结晶。 

.. _P29:

--------------------------------------------------------
3、去硅谷  
--------------------------------------------------------

   我要去Transmeta公司工作的消息与我们夫妻两个想要孩子的计划在 Linux 社区里引起了大家同样的关注。 

   当塔芙怀孕的消息在春季泄露出来之后， Linux 用户讨论组里的热心人就试图探听：我会在维护 Linux 与维持家庭之间怎样找到平衡。几个月以后，当大家知道我终于要离开赫尔辛基大学，去加盟位于美国硅谷的Transmeta公司的时候，一场世界范围的讨论就由此发生了：我会不会在离开了学术机构、转入了商业公司之后，还保持着当年源代码开放的理念？要知道，我要加盟的这家公司里有着保罗·艾伦的部分投资，而这位保罗·艾伦可是微软公司的创办人之一。所以，抗议的声音一直不断。有些声称，这一定是一个精心策划的企图控制 Linux 的国际阴谋。 

   我并不是说这些 Linux 支持者的担忧都是杞人忧天。但事实上，无论是1996年12月帕特里夏的出生（十六个月以后我们又有了丹妮亚拉），还是1997年2月我开始在Transmeta工作，都没有导致 Linux 的衰落。我一直觉得，如果有什么事情对 Linux 产生了负面影响，我是会采取必要措施的。 

   但我还是战胜了自己。 

   1996年春天，就像一个新季节的开始，我修完了硕士学位的必修课程。大概就是在这个时候，我收到了彼德·安文的来信。彼德·安文是一位 Linux 社区的成员，就像其他经常登录 Linux 讨论组的人一样，他也知道我很快就要毕业了。他曾在Transmeta工作过大约一年。他告诉这家公司的老板说，他认为一个芬兰的家伙，这家伙也许会对公司有点儿用处。当他到瑞典看望他母亲的时候也顺道和我接触了一下。他盛赞了Transmeta公司，但因为话只是私下讲的，他便很为难地无法告诉我太多内容。无论如何，我在那时能够见到彼德确是一件幸事。 

   在他回到加利福尼亚之后，发了一封电子邮件给我，问我什么时候能来。这与我一年前与英特尔联系时的感觉大不相同，当时一位工程师想聘我做他的研究助手，但由于手续难办，我便一直也没有成行。 

   我想，仅仅是到加利福尼亚的一趟旅行已经是件很让人兴奋的事了。 

   这是我一生中的第一次工作面试。我还不知道Transmeta是做什么的，对我来说是一个完全陌生的地方。 

   比起找到工作本身，我更关注这次美国之行背后的含义，所以我并没有对即将到来的面试想过太多。看上去更重要的是，要了解这些家伙想做些什么。这的确是一次相当古怪的面试。 

   度过了最初的几天之后，我从Transmeta的总部返回饭店。在仍没有倒过时差的状态下，我觉得所有的事情都是那么有趣，而且认为Transmeta公司的家伙们都是疯子。这家公司不像是个搞计算机的地方。他们没有硬件设备，所有的东西都是由模拟器来完成的。我无法想象他们究竟能做些什么。几天之后，我开始怀疑我是不是在浪费时间。我在想：也许最后什么都不会有――无论是Transmeta的技术革新还是我的这份工作。 

   我半梦半醒地在床上赖着，一晚上都没怎么睡着。一开始，我满脑子里都是些有关Transmeta的计划之类，然后便突然幻想自己的庭院里有了一棵棕榈树，过了一会儿又不断思考我在模拟器上见到的一切。这是难忘的一夜，虽然断断续续的，但却毫无焦虑。 

   到了早晨，我变得有些兴奋起来。 

   到了第二天结束的时候，我已变得非常兴奋。 

   在接受Transmeta的邀请之前，我曾与许多人讨论过这个问题。当我在考虑就业问题的消息传出去的时候，我便收到了大量的聘用邀请。在芬兰，邀我加盟的是Tele公司， Linux 在他们那里已经得到了一些应用。波士顿的Digital公司也发出了邀请（我无意冒犯，但波士顿的冬天比起赫尔辛基来也并不好过）。我与红帽子公司（Red Hat）的一些人也谈过此事，他们也诚邀我加盟，并且许诺了要比Transmeta给我的待遇还要好――他们也不知道我与Transmeta商量的待遇到底有多高，因为我根本就没和Transmeta谈过这个问题（当我终于去了Transmeta的时候，年薪是美元六位数字）。红帽子还对我许诺了远比Transmeta为高的股票期权，但我不愿在任何一家 Linux 公司工作――即便是这家公司恰好坐落于风景宜人的北卡罗来纳州中部（指红帽子公司所在地）。 

   最后，我在收到了五份聘用邀请后就不再各处应聘了。到这时为止，Transmeta对我的吸引力最大。 

   我得承认，这好像有点儿古怪。 

   我接着要做的一件事就是通知学校我要离开了。这对我来说是重要的一步，意味着我已经没有回头路可走了。我们会再有一个孩子，会踏进另一个国家，会离开在赫尔辛基的安安全全的学府生活――但首先我得完成我的论文。现在回过头来想想，一下子做出这么多变动倒也不坏。但在当时却是近乎疯狂的举动。 

   对此我没有发出正式的通告（我为什么要做呢？）。但消息还是在互联网上不胫而走。大家便继续讨论起我到底有没有能力在恶俗的商业氛围中固守 Linux 的纯真天地，以及我具不具备给婴儿换尿布的本事。在那时，大家始终保持着这样一种共识： Linux 只能在某个学生的手中才会出现，而不会是哪个安居乐业的成年人所能做的。所以我想，他们的担心也并非没有道理。 

   我在一个周末完成了论文，在送塔芙进产房的几分钟前才把它交了上去。四十小时后，塔芙产下了帕特里夏。这是1996年的12月5日。 

   做一个父亲看来是这个世界上最自然不过的事情了。 

   后面的几个星期里我们都在忙着帕特里夏的事，当然也在记挂着那漫长的办理赴美签证的手续。我们以为，如果正式结婚民族委员会地对办理签证有所帮助，所以在一月份我的塔芙去政府部门输了正式的结婚手续。还有三个人参加了这一仪式：塔芙的双亲和我的妈妈（我爸爸在莫斯科）。这是个奇怪的时刻。我们开始收拾行囊准备起程，但还不清楚手续是否真能办得下来。为了与朋友们告别，我们还举办了一次晚会。二十人挤进了我们那狭小的、已经收拾一空的单间公寓，在良好的芬兰晚会的传统中，每个人都烂醉如泥。 

   我们的签证终于下来了。于是，在1997年2月17日早晨，我们乘上了一架班机飞往旧金山。我记得当时赫尔辛基的气温是摄氏零下十八度。我还记得塔芙的家人在机场与我们大声告别――他们站得很近。我不刻我的家人是否也来了，他们一定是来了，不过也许没来。 

   好了，我们终于抵达美国了，带着我们的孩子和两只猫。彼德·安文来接我们，我们租了辆车，直奔圣克拉拉而去，那里我们有一处早在几个月前就选好了的公寓。一切都像超现实的感觉，特别是这里与芬兰相差华氏七十度的气温。 

   行李在两个月后才到齐。在美国的第一夜我们是睡在一张随身带来的充气床垫上的。第二天我们去买了一张床。在我们的家具齐备之前，帕特里夏一直都睡在她的摇床里。这事很让塔芙烦恼，大卫说这是生命的轮回，他让我想想我刚出生的那三个月，那时我是睡在洗衣筐里的。 

   我们不怎么做饭（现在也不做），也不知道应该到哪儿去吃。我们大部分的饮食问题都是在当地的食品店或是快餐店里解决的。我对塔芙说，一定得找个新地方去吃了。 

   随着对Transmeta公司工作的日渐熟悉，我不再有足够的时候去继续 Linux 的开发了。新工作占据了我大量的时间，而我的业余时间也都消磨在塔芙与帕特里夏的身上。真是忙得不可开交。我们也没什么钱。我的薪水还算高，但都在这两个月里用在买家具上了。买车也不容易，因为我们还得重新建立起货款消费的信用资历。我们甚至还得想方设法地证明我们是付得起电话费的。 

   我的电脑正在货轮上极其缓慢地向我接近着。这是我有生以来第一次在互联网上稍声匿迹。我的突然缺席引起了网络世界里许多人的关注。 

   他们在猜测：哦，这小子已经为哪家商业公司工作上了…… 他们直言不讳地问道：这是不是意味着 Linux 作为一种自由软件已经濒临死亡了？ 我解释道：根据我与Transmeta的协议，我是可以继续从事 Linux 的开发的。而且，我不想就这么对 Linux 撒手不管了。 

.. _P30:

--------------------------------------------------------
4、在 Transmeta 领地上的生活  
--------------------------------------------------------

   要向大家解释，到美国加盟一家商业公司并不会对我造成什么改变的难点是：Transmeta公司差不多可算是世界上最机密的公司之一了。在那里，关于你对外能说些什么，公司只有一项规定，而这项规定就是：“什么都不能说。” 难怪大家有时会奇怪：我是不是加入什么邪教组织了？我在干什么甚至对我妈妈都不能透露的事情。 

   其实，我在Transmeta的所作所为也并没有什么神秘的。我首先做的就是修补Transmeta公司里 Linux 系统的一些小毛病。这家公司使用了许多装备多处理器的 Linux 电脑。我从未亲自参与Linux SMP的工作项目，很多事情都没有向最先预想的方向发展。 

   但我实际的工作确实是作为Transmeta公司里“垒球”队中的一分子。 

   哦，我指的是“编程”队伍。我们是不怎么打垒球的。硅谷的人不会同意我们的加入，除非我们能告诉他们我们在做什么。 

   我不知道人们对Transmeta熟悉到什么程度。当我在键盘上敲打这些字的时候，我们正处在一个凡事都要保密的时期（拜托了，老天爷，买我们的股票吧），然后我们便不再那么低调了。让我们共同祝愿，当这本书出版以后，每个人都能熟悉Transmeta的大名并且买下（一提“买下”这个词，我总是下意识地想起股票）一个或更多的Transmeta出产的CPU。现在你该知道Transmeta是做什么的了吧？ 但Transmeta所做的还远远不止这些。老实说，就算有人使劲敲打我的脑袋，我也分不出晶体管和二极管的差别来。Transmeta所做的仅仅是硬件而已，但这硬件却要依赖精巧的软件使一个很简单的CPU看上去要比它原本的样子强得多――事实上，就像是标准的英特尔兼容的x86。为了使这一硬件更加小巧、更加简洁，它身上的晶体管就不能太多。相应地，它的耗电也要少些。每个人都会明白，这在现代世界里具有多么重要的意义。正是为了研制这一CPU所依赖的精巧软件，Transmeta才装备了一支大型的编程队伍；也正是因为这个原因，他们才邀请了我的加盟。 

   这些对我来讲都是再合适不过的：一家非 Linux 公司，在技术层面上很能让人提起兴趣（我不知道还有哪家公司曾经严肃地尝试过Transmeta所做的这一切）。 

   Transmeta与 Linux 无关――这一点对我也是很重要的。不要误解我的意：我喜欢在Transmeta公司里从事改良 Linux 的工作，我也曾在其中一些关于 Linux 的内部方案中出谋划策（说实施，如今大概很难找到一家不安排这类方案的认真运作的技术公司了）。但对Transmeta来说， Linux 仅是第二位的。 

   什么才是我真正想要的东西？我可以继续把 Linux 做下去，但我不觉得我必须牺牲 Linux 来做出技术上的妥协以迎合公司的目标。我会把 Linux 视为一项个人爱好。这样一来，我只需要考虑技术就够了，那就没有什么能阻挠我的决定了。 

   这样，我就在日间为Transmeta工作。我编写与维护的是我们现在还在使用的“x86解释程序”。这一程序是Transmeta软件的基础，它阅读指令并且执行它们。后来我也做了些其他事情，但这些才是真正使我进入神奇的硬件模拟世界的途径。 

   晚上，我睡着了。 

   我与Transmeta之间有这样一个协定：他们暧昧地许诺，可以让我在工作时间也能继续的 Linux 。相信我，我很好地利用了这一点。 

   有很多人都认为加班加点的工作才算真正的工作。我可不这么想。无论是Transmeta的工作还是 Linux 的工作，都不是靠牺牲宝贵的睡眠时间换来的。事实上，如果你想听真话，那我就要说，我更喜欢睡觉。有些人可能会认为我懒，对这样的人我可真想把枕头朝他们掷过去。我对自己的行为有着近乎完美的借口：如果你把更多的时间花在睡觉上，那的确会损失一些工作时间，但如果你的睡眠很充足，在不睡觉的情况下，你的头脑就比别人都要清醒。 

.. _P31:

--------------------------------------------------------
5、欢迎来到硅谷  
--------------------------------------------------------

   “我踏进这个星系后要做的第一件事，就是去拜会那些耀眼的星辰。” 我从史蒂夫·乔（苹果电脑的创始人）的秘书那里收到了这封电子邮件。他解释了迫切想见我的原因以及问我能否为他抽出一两个小时的时间。我也不知道这到底是怎么回事，然后就答应了。 

   会见的地点是在苹果电脑的总部，乔和他的高级技术人员一同来了。这正是苹果公司研制OS X的时候。OS X是基于UNIX的操作系统，2000年9月上市。我们的会谈毫不拘谨。乔在一开始便说，在操作系统的领域，只有两个玩家――微软与苹果。他以为，我能为 Linux 所做的最好的事情就是与苹果公司联合，让那些陷入到开放源代码中的人都来为Mac OS X鼓劲。 

   我没有立刻反驳，因为我还想听听有关这一新的操作系统的事情。 

   它的基础是Mach系统。到了九十年代中期，Mach被期待会成功操作系统的最终版本，很多人对此大感兴趣。事实上，IBM与苹果公司曾合作推出的命途多？的Taligent操作系统就是以Mach作为基础的。 

   乔还指出，Mach系统的核心也有其开放源代码之处。他不知道我个人对Mach系统并没有太多的好感。坦白地说，我觉得那只是一堆废物。那里面有你在设计的时候所能犯下的所有错误，却又试图靠这套本身就不可靠的系统去修补自身的一小部分内部错误。对微内核的反对意见早已有之，所以，很多人才切实地去作研究以使微内核真能运转良好。这些研究便铸成了最终的Mach系统。所以，Mach系统才会变得像现在这样异常复杂。而且，它依旧运转得不那么顺畅。 

   当Mach还只是一项大学内的科研项目的时候，随史蒂夫同来的那位苹果公司的主要技术人员就已热衷于它了。讨论一下他与史蒂夫对此事的看法是件有趣的事情。同时，我们在基本的技术问题上出现了相当大的分歧。我真的不认为搞开放源代码的那帮人或是搞 Linux 的什么人应该涉足于此。当然，我已明白了他们为什么要让更多的开放源代码的程序开发者来共同构造这一系统，他们已经见到了在开发 Linux 时那四海一家式的创造性动力。但我不认为他们真的看明白了。我想，史蒂夫也许还没有到， Linux 的潜在用户要远较苹果系统为多――尽管他们拥有的是两个不同的用户群。我们见面已经过去三年了，我不认为史蒂夫今天还会有当时那样的渴望。 

   然后，我解释了我为什么不喜欢Mach系统。容易理解的原因是：它运行起来不是那么顺畅。他们两人以前当然也听到过类似的意见。很显然，我对 Linux 非常坚定，而他们两人对Mach也是一样。看着他们如何讨论一些技术问题确实是件很有趣的事。我所能看到的一个直接的问题，牵涉了他们在新的操作系统中准备怎样来支持旧的系统。他们想让新系统具有很好的兼容性，这样就能做好旧系统所能做到的一切。但旧系统的一个重要缺陷是，它没有内存保护功能，现有的新方案也无法解决这个一直棘手的问题。只有全新的Mach系统才可以做到内存保护。这些对我都没有任何意义。 

   我们在基本看法上就存在分歧。 

   史蒂夫就是史蒂夫，就算在新闻界都背叛了他的时候也是如此。他对自己的目标怀有浓厚的兴趣，即便对新系统的市场环节他也津津乐道。 

   我对其技术层面还抱有一些兴趣，对他的总体目标与他的言辞却觉得不对口味。他的主要观点是，如果我想占领桌面操作系统的市场，我就一定要与苹果公司携手合作。 

   我的回答是：“为什么我要关心这些？为什么我要对苹果公司的故事表现出兴趣？我不觉得苹果公司所做的事情有什么吸引我的地方。我一生的目标也不是占领什么面操作系统的市场（的确，虽然我马上就要做到这点了，但这从来就不是我的生活目标）。” 他没有再多说什么。他想当然地认为我会对他的揭底发生兴趣。他大概无法想像这世界上的人竟然如此的不同，以至竟会有人对增加Mach系统的市场份额毫无兴趣。 

   我想，见到我竟对苹果巨大的潜在市场以及对分割微软现有的巨大市场份额毫不关心，他一定是非常吃惊了。但是，我也不能因为他无法进一步了解我有多讨厌Mach系统而责怪他。 

   尽管对他说过的话我几乎完全不同意，我却也有点儿喜欢上他了。 

   后来，我又遇上了比尔·乔伊（Bill Joy），这是我第一次见他。 

   说实话，我刚见到他的时候还不知道他是谁。Sun公司邀请了我和十二位其他致力于开放源代码的同人参加了一个非公开的会议。会议准备在圣荷塞的一家饭店里举行。我去了那里，得知比·乔伊也在。他是BSD UNIX幕后的重要人物，后来加入了Sun公司，成为他们的首席计算机科学家。在这之前我从没见过他。他一见我便走了过来，自我介绍说自己是比尔·乔伊，而我一时还没反应过来。我去那儿不是为了见他的，而是为了要看看Sun公司对开放源代码的想法，以及他们想怎样加入到这一活动中来。几分钟后，比尔开始向我们解释这一切，并且还展示了他们的操作系统的演示版。 

   然后，他们开始解释这一系统要如何进行注册。这听上去很吓人，也很愚蠢。基本上，他们的意思是这样的：如果有人想使用他们的操作系统――哪怕是用半商业的方式――该系统就是再是真正意义上的开放源代码了。我想他们的想法实在白痴，他们的这次自我吹嘘式的邀请弄得我很不高兴。他们的“开放源代码”意味着你只可以读到该系统的源代码，但当你想要对其做出自己的修改或使之成为自己某个系统的一部分时，你就一定要向Sun公司申请注册才行。那就是说，如果红帽子公司的什么人想要制作最新版本的Linux Jini的红帽子版本的光盘，就先要向Sun公司做出Jini的许可申请。 

   我问了几个问题，想看看我理解的是否正确。 

   当证实自己的理解无误之后我便起身了。 

   我很厌烦，我弄清了他们的全部意图，然后说道：“忘了它吧，我可没兴趣。”接着便离开了那里。 

   我的理解是，他们邀请我到场仅仅是想把他们的意图通知我一下，如果我竟然还感兴趣，他们就会把我的话在新闻媒体上做些断章取义的引用。他们的想法可没起作用，但也许他们能从中学到点什么。 

   后来有人告诉我，他们继续把那个会开完了，然后还举行了宴会，除我之外的所有人都逗留到了最后。 

   我第二次遇到比尔·乔伊就不像第一次那么尴尬了。大概在一年半之后，他邀请我去吃日本寿司。 

   他的秘书打电话给我来确定见面的时间。比尔的住处和工作地点都在科罗拉多州，每个月要腾出一周时间在硅谷。我们去了富士寿司店，这是全硅谷最好的一家寿司店，味道与旧金山的寿司迥然不同。 

   我们在富士寿司店里其乐融融，因为比尔在试图找齐做寿司的地道原料。在美国的日式饭馆里，有一味寿司原料是从来见不到的，餐馆里一般都用另一种菜来代替它。因为这味菜只在日本本土的溪水里才会生长，而且还很难繁殖。比尔向店员竭力解释这真正原料与代用品的不同，但美国的店员却搞不懂比尔的意思，比尔只好让她去请里面的大厨。这可真让我忍俊不禁。 

   这次吃饭纯粹是为了社交。比尔的意思是，如果我愿意为Sun工作，我只要跟他说一声就行。但这不是主要的。他回忆起曾做过BSD UNIX五年人员的经历，以及他是如何开始欣赏Sun公司围绕他所做的一切商业行为。他谈到能得到一家像Sun公司这样的企业提供的商业性支持是一件多么重要的事。我对他提到的UNIX的早期历史大感兴趣，所以，即便是没吃到最正宗的寿司我也不觉得有什么遗憾了。我在想，比尔恐怕是我所遇到的硅谷精英中最和善也最有趣的一位了。 

   在《连线》（Wired）杂志上有一篇比尔的文章，题为《未来不需要我们》。那篇文章是关于技术的，言辞既可怕又消极。我也有些被文章感染了。的确，未来是不需要我们，但他对此也不必那么消极呀。 

   我倒不想反他的文章给撕了。但是我相信，在人类的整个生涯中所能发生的最悲惨的事情，其实就是我们仅仅生存下去却完全没有进步与发展。比尔看上去已经感觉到了基因技术会泯灭我们的人性。但是每个人对非人性的认识是不同的。随着我们继续进化下去，依照今天的标准，一万年后的我们也就不能还叫人类了。 

   我们会成为人类的另外一种形态。 

   在比尔的文章里，他似乎对此心存恐怕。我倒觉得阻碍进化的进程是违背自然规律的，当然这样的事也不会发生。如果是找两只狗来配对让它们产下“特定的”后代，我们自然要求助于遗传学。在人类里这样的事情正在不可避免地发生。依我的观点，通过遗传学的优生方法来使人类发生一些良性的改变是件可取的事。但我不知道社会会向哪个方向发展。你不能停止科技的进程，也不能消除人类对宇宙以及自身奥秘的求知欲。比尔之类的人对此担心得太早了些，我以为这些都是自然的进程。 

   我不同意比尔·乔伊关于我们应当如何应对未来的言论，也同样地不同意他对开放源代码的打算。在技术问题上我同史蒂夫也无法达成一致。 

   这听上去好像我在硅谷的这开头几年一直都在反对别人的意见来着，但事实却并非如此。我在译码方面做了大量的工作，也常带帕特里夏去宠物公司。总的来讲，这些都拓宽了我的视野――比如我还学到了寿司的正宗配方什么的。 

.. _P32:

--------------------------------------------------------
6、一夜功成名就  
--------------------------------------------------------

   你进没进过专事宣传的讨论组？它们的全部存在意义就是不遗余力地宣传什么东西，也就意味着还要贬损其他的什么相关物。所以，你在那里经常看到的通常只是些“我的系统比你的系统更好”之类的废话。我们可以把它们看作是某种形式的在线手淫。 

   我之所以提到这类讨论组，是因为除了荒废的内容之外，它们倒也提供了一些新事物出现的线索。所以，当 Linux 被商业公司看中的时候，最先做出反应的不是新闻媒体，而是这些满嘴垃圾的讨论组。 

   这得让我从头说起。在1998年春天，确切地说是1998年4月16日，一个金发女婴丹妮亚降生了。她是托沃兹家族里的第一位美国公民（三年过去了，也不知花了多少时间与美国移民局交涉，到今天她仍然是这个家庭里唯一的美国公民）。她和帕特里夏相差十六个月，我和我妹妹萨拉正好也是相差十六个月。但我敢说，这两个小家伙在她们的成长过程中可不会像当年的我和萨拉那样火药味十足。 

   在丹妮亚拉刚出生的那些天里，开放源代码社区――当时叫做自由软件社区――的成员受到了前所未有的巨大推动。那是网景公司（Netscape）在一项叫做Mozilla的项目中宣称要公开其浏览器的源代码。一方面，这一消息使讨论组里的几乎所有人都大为激动，因为它为开放源代码的行为描绘了一个美好的前景。但它也让包括我在内的一些人非常烦恼。那时，网景公司正陷入一场与微软之间的巨大的麻烦之中，所以它的这一举动看上去不像是深思熟虑倒像是铤而走险（具有讽刺意味的是，该浏览器在起步时确是源代码开放的，那时它还是伊利诺斯州大学的一个研究项目）。 

   讨论组里的人们渐渐显示出自己的担心：网景公司也许会把这件好事搞砸，最后让源代码开放蒙上恶名。现在，已经有了两个大名鼎鼎的源代码开放项目――网景与 Linux 。所以，如果知名度比 Linux 更高的网景失败了， Linux 的名誉也会受到牵累。 

   从更广义的意义上说，网景的确失败了。他们无法在一个长时段里让源代码开放的开发者们对这一项目保持经久不衰的兴趣。 

   这一项目除了过于庞大之久，在某种意义上它的失败还可以说是命中注定的――它无法让它的浏览器做到通用程序设计语言的地步，因为不是所有的编码都是他们自己的――比如，Java的部分就是Sun公司的。不是讨论组里的所有人都赞同网景公司的这种做法。总体来讲，这样做也自有其好处，但如果你是理查德·斯多曼那样的人，你就不会喜欢这样的“好处”。 

   但无论如何，网景公司能做到这一步还是让我觉得很精彩。我不认为这是某个个人的成就，但艾力克·雷蒙德却是这样想的。我记得艾力克·雷蒙德对此兴高采烈，因为他在网景公司采取这项决策的一年前发表了一篇题为《大教堂与杂货店》的论文，文中相当精辟地阐释了源代码开放的哲学理念与发展历史，他认为正是这篇论文促使网景公司做出了这样一个重要的决定。艾力克·雷蒙德一直都在积极传播着开放源代码的理念。他曾在若干场合劝说网景公司开放他们的浏览器，而这种场合我倒只去过一次。事实上，艾力克早已带着他的源代码开放理念走访了不少家公司。而我呢？我只关心技术，而不是福音的传播。 

   Mozilla发布之后的不到二十四小时之内，一个澳大利亚的自称为Mozilla秘密党的组织便创建了一套自己的密码系统。在那以前，非美国本土的人无法对Mozilla采用自己的加密技术，突然间，一些澳大利亚人做到了这点，美国之外的人便也能使用Mozilla了。在那个实行出口管制的时段，Mozilla项目是不能采用澳大利亚编码的。 

   我们对网景的做法都有些担心。那些年里，人们都是一副如履薄冰的样子。谁都不想说任何对网景不利的话，因为那会导致新闻界对源代码开放的消极报道，也会把一些原打算涉足这一领域的公司吓退。 

   但紧随网景之后，Sun公司也加入了进来。他们宣称要成为全球 Linux 的最大的硬件销售商。这对支持 Linux 系统的服务器是会有好处的。这家公司认为， Linux 已经越来越值得认真对待了。于是，讨论组里到处洋溢着自我恭维的声音。随着Sun公司的介入，对 Linux 的讨论已经从原来的仅限于网上发展到充斥各大传统媒体。外行人也突然对此产生了兴趣。尤其是那些不懂技术的外行人。 

   随后，IBM也加入了进来。 

   IBM一直给人以陈腐守旧的印象，所以当它在六月份突然公布它将销售与支持阿帕奇（Apache）――最流行的 Linux 商业版本――的时候，每个人都着实地吃了一惊。你可以在AIX与IBM的UNIX上运行阿帕奇，购买IBM电脑的人也通常都是这么做的，正是因为这点它才引起了IBM的注意。 

   大家应该注意到，IBM生产的服务器最终都是使用阿帕奇来做操作系统的，所以他们才会认为，如果在服务器里预装了阿帕奇应该会使电脑卖得更好。当然，也许他们是根据大多数顾客的反馈意见来做出这项决定的――这些顾客都说，他们愿意购买IBM的电脑，然后再在IBM的机器上运行阿帕奇。 

   在一台电脑上安装 Linux 是件并不费力的事。但对大多数公司来讲，最大的问题之一是：如果什么地方出错了，我们到底应该怪谁？很显然，像红帽子之类的使用 Linux 系统的公司会向顾客提供技术支持，但有IBM在那儿会让顾客的心里更塌实一些。当IBM刚刚开始涉足源代码开放领域时，很多人认为那不过是空口说白话。但事实却不是那样，IBM动了真格的。它斥资八百万美元组建了一支阿帕奇梯队，大力支持 Linux 在其服务器中的应用，可以说是不遗余力了。在这些工程完备之后，下一步又进展到小型PC服务器领域，然后是普通的PC和笔记本电脑。IBM还斥资二百万美元在亚洲建成一家 Linux 发展中心。 

   IBM为它的 Linux 项目做了大量的工作。 

   我想，他们之所以如此喜爱 Linux 的原因之一，恐怕是他们可以对 Linux 为所欲为而不必顾虑要向谁花钱注册申请什么的。IBM曾与微软共同开发OS/2操作系统，但微软后来却放手了，因为它对OS/2的市场份额失去了兴趣，NT才是它的重头。但对于IBM投入到OS/2当中的上亿元资金，OS/2后来也给出相应的回报。现在，IBM又被对Java的注册搞得痛苦不堪。我想，他们大概高兴的是这类问题在 Linux 身上是不会遇到的吧？ 毫无疑问，IBM在这点上做得还是不错的。讨论组里也为此沸沸扬扬、群情激动――这种激动既非上回针对网景公司的那般偏执，也非 Linux 狂热者中反商业主义躁动的周期性回潮。 

   在同一个月里，著名的数据库软件公司Informix宣布对 Linux 开放其数据库接入端口，这就意味着如果你使用 Linux 来操作你的电脑，你就可以运行Informix的数据库。这其实也没什么了不起的，Informix正陷入一场财务危机，但它仍然是数据库公司中的三大巨头之一。 Linux 的人群对此表示了恰如共分的欢喜之情，在网上发布了不少祝贺文章。 

   几个星期之后，著名的Oracle公司也锦上添花似地随之而来了。 

   说Oracle主宰了数据库市场丝毫也不为过。在正式的消息发布之前已经有些谣传（主要是在讨论组上），说该公司也有一些对 Linux 的内部接口。从技术角度来讲，这对 Linux 并不是什么了不得的一步。但是，如果你常在这些日子的讨论组里转悠的话，就会觉得我们真是到了登峰造极的时候了。Oracle的正式宣布也许毫无技术上的轰动效应可言，但的确给人们心理上带来极大的震撼。 

   像IBM的公开宣布一样，Oracle的巨大步伐不仅被 Linux 的业界同人所关注，也引起了那些经营决定人的瞩目。他们再也不能说因为自己的公司一直仰仗的是数据库系统故而无法使用 Linux 了。 

   虽然这些消息越来越令人欣慰，却也没有改变我固有的生活。 

   我仍然时常与两个可爱的小宝贝一起游戏。与家人一起的时间之久，我通常都是在做对 Linux 的维护，在家里和在公司时都是这样。为了对所有的 Linux 版本做到不偏不倚，我在公司里用的是红帽子的版本，在家的时候便改用欧洲的Suse版本。我总觉得自己的体育锻炼大为不足，所以决定每天骑自行车上下班，这一个来回足有十二英里。结果在某个星期一，我上班的时候刮起了大风，我好不容易才逆风骑到了公司。十个小时以后我该下班了，风势却还不见小，更可恶的是风向变了，我如果回家还是逆风。没办法，我只好打电话给塔芙让她开车来接我。不用说，从那以后我再也没骑车上过班了。 

   我罗列这些无伤大雅的生活细节只是想说明一点： Linux 的发展并没有改变我的日常生活。各家公司里那些已长期熟识 Linux 的技术人员却开始不断地执行老板们的光顾了。因为这些老板们也已被种种渠道传来的关于 Linux 的消息搞得心痒了。他们会问手下的技术人员，这个 Linux 真的那么重要吗？但当他们一旦获知 Linux 可能给他们带来的巨大好处时，他们马上会做出决定，让他们的服务器改为使用 Linux 操作系统。 

   尽管此类情况中的绝大多数都发生在美国，但在世界各地的IT机构里也一直都在上演。大家选用 Linux 并非仅仅因为它的廉价――因为软件本身虽然身价不高，但服务与维护还算得上是一笔开销的。真正影响那些公司决定层的是这样一个技术上的事实： Linux 比它的那些包括WindowsNT和各种不同版本的UNIX的竞争对手们都要强大。而更重要的是，人们不愿意严丝合缝地依照微软或其他什么人所制定出的规则行事。你可以随心所欲地使用 Linux ，这一点是别的操作系统完全做不到的。那些富于独创性的人使用 Linux 的理由是：他们可以自由进入 Linux 的源代码，而其他的商业软件却从没有提供过这种方便。 

   从这个角度讲，这一点从我在我的卧室里发布了 Linux 0.01版以来还没有改变过。 Linux 就是比世界上的其他系统更灵活。你可以是自己的老板。 

   而且，至少从网络服务器的解雇讲，它不包含那些“肿块”（bloat）或其他不成功的设计。 

   Linux系统的另一个优点是：尽管作为网络服务器的操作系统 Linux 已经越来越知名了，但它从来不是一个为赚钱而生的产物。这一点对于理解 Linux 的成功非常重要。 

   主流电子计算机是一个能赚钱的东西，UNIX一般来讲能产生一系列可以赚钱的方向：服务于国防部的超级电子计算机，或应用于银行系统。 

   人们通过向主流机器或其他大型系统销售操作系统赚了大钱，因为收费奇高。接着微软进场了，只卖九十美元一套的操作系统。它不向银行或其他大型系统之类的市场进军。但是突然间，到处都是微软的产品了，就像市场被蝗虫入侵了似的。你知道，那样的入侵是很难抵抗的。 

   我并不是说蝗虫是坏蛋。我喜欢所有的动物和昆虫。 

   到处都是并且占领赚钱的机会简直太好了，微软就是这么干的。想想看，一种流动的生物流进每一处它能找到的地方是什么情景。如果它推动一个地方，并不是什么大不了的事，它充斥着全世界，流进喜欢让它进去的地方。 

   同样的事情正在 Linux 事上发生。它正流进每一处喜欢它的地方。 

   但 Linux 没有赚钱的方向。 Linux 小而灵活，总会找到它应该占领的地方。你可以在超级市场里、在重要的地方如美国政府的费米实验室或国家航天局里发现 Linux 。不过在那些地方它只是一种服务器空间的流出物，或一种桌面空间里的流出物，那里就是我开始创造 Linux 的地方。同时，你也能在植入式的装置里面找到 Linux ，比如防抱死刹车系统或手表里。 

   请注意 Linux 的流动。 

   Linux给大众带来了巨大的好处。年轻一代中最聪明、最卓越的那些人都在使用 Linux 的产品，因为正是 Linux 才激起了这一代人的狂热。而在早一辈人当中，激起人们狂热的与其说是微软和DOS倒不如说是PC。如果你要操作PC，就一定要用到DOS系统，在当时这是没什么选择的。所以，这种情况对微软操作系统的传播非常有利。 

   如果你环顾一下你周围最聪颖的那些孩子们，你会发现他们中的绝大多数都在参与对 Linux 的开发。有一个很明显的现象是，无论是开放源代码的理念还是 Linux 操作系统都在各大学里赢得了最广泛的支持，其原因之一是：青年学子们大多都抱有对主流与权威的逆反心理（正是这样一种心理曾经极大地影响了我父亲的生活）。 

   在这场操作系统之争中，一方是庞大而邪恶的微软公司与刻毒、贪婪却他妈富得流油的比尔·盖茨，另一方则是以无私的爱心致力于自由软件的谦逊的民间英雄李纳斯·托沃兹。这些学生们毕业后到各大公司谋职，同时，也把在大学期间就已培养出来的对 Linux 的喜爱带了过去。 

   于是，有一些加盟微软的朋友告诉我，他们曾见到我的头像被钉在了微软公司里的飞镖靶心上。 

   我对此唯一的评论是：我的大鼻子实在太好瞄准了。 

   但我毕竟超越了自己。在IBM1998年春季的公告之后，每一个重要的硬件销售商都紧随其后发布了类似的公告。八月，《财富》杂志“发现”了我们这个小小的世界，在封面上铺上了我的照片，并配以如下的文字：“和平、爱、软件”。 

   随着一个又一个公司相继做出对 Linux 的承诺，你已经不必再到讨论组里去查找关于 Linux 的零散消息了。 

   Linux征服了整个世界，这正如一些不可思议的奥林匹克金牌获得者往往来自某个无名的第三世界国家一样。 

   那时我只是一个宣传人员。在一次新闻采访中，艾力克·雷蒙德解释说，我吸引人的地方在于，我“显然并不比我数众多的黑客更为古怪”。 

   好吧，那只是某一个黑客的观点，并非所有的人都这么想。理查德·斯多曼致力于将 Linux 更名为gnm/ Linux ；同样的，我也凭借gnu gcc的编译器以及其他免费软件工具和应用软件使 Linux 展翅腾飞。斯多曼和其他人则对 Linux 在商业领域里找到地盘而日益恼火。 

   在目前 Linux 成千上万的参与者当中，媒体大肆渲染着理想主义者和实用主义者的二元分法。按照这一分法，斯多曼和那些担心 Linux 的理想与资本主义目标背道而驰的人士被称之为理想主义者。而我则成为实用主义者的领袖。但是，我将这一划分视作新闻界的胡说八道――一种什么都严丝合缝地嵌入一个非黑即白世界的过于简单化的做法（同样，当人们把 Linux 现象视为 Linux 与微软之战，我也同样感到不满。事实上，这是迥然相异的另一码事。传播技术与知识、扩充财富并同时让自己感到开心愉快这种简单自然的方式，远非商业世界所能了解）。 

   对我来说，这根本算不了什么。假如没有商业利润， Linux 又怎能流入新的市场？又怎能为发明创造提供新的机遇？对那些需要一种替代糟糕技术的其他选择（而且是免费的技术）的人们来说，要怎么样才能让他们得到它？为使公开源代码能够控制局面，什么才是比依赖公司资助更为现实的方式？还有，那些不太有的工作，比如系统维护和技术支持这种烦人的事情，比起在公司里完成这些工作，有没有更好的办法？ 开放源代码就是要让每一个人都参与进来。为什么企业――它们为技术进步提供如此大的动力――应该被排斥在外，假如它们遵守游戏规则呢？ 即使我们想要中断商业主义的影响力，我们又该如何着手去做？我不想建议我们躲躲藏藏、销声匿迹、不去和那些商业人士讲话。 

   要求开放源代码的群体总是有反商业化的情绪，但直到当 Linux 在与高技术关系不大的家庭里也成为一个日常用词的时候，才称得上有商业化的危险。新闻组对某些疯狂声音里清晰可闻的偏执狂般的咆哮非常恼火。在我与之打资产的 Linux 的开发者中，没有一个人对此感到担忧。但另一些开发者却对诸如“红帽子”（Red Hat）或其他一些公司如何偏离开放源代码观念、对诸如某些人如何正在推动其理想主义的一面感到愤怒。 

   在某种程度上，某些开放源代码的倡导者从他们的理想主义立场发生偏转可能是正确的。但当某些人将其看作一个正在推动原有价值的主张的时候，我却认为它恰恰带给我们更多的机会。比如，担心没法养活自己的孩子这些事情的技术人员现在就有了选择的余地。你可以仍然一如既往地保持理想主义，或者你也可以选择成为某个新的商业族类。让一些新成员加入进来，以及你让自己多了一个新的选择，并不会让你失去任何东西。在此之前，你除了保持纯洁之外显然没有任何其他的选择。 

   顺便提一句，我从未感到自己身处理想主义阵营。的确，我总是将开放源代码视作一种使世界更趋美好的途径。但仅有这一点还远远不够，除此之外我还将它视作带来快乐的途径。这可就不怎么称得上是理想主义了。 

   我总是认为理想主义人士挺有趣，只是有点沉闷，甚至有些吓人。 

   为了坚持一个非常强有力的意见，你不得不排除除此之外的其他意见。那就意味着，你不得不变得不近情理。这就是其中的一个问题。这好比是美国政治和欧洲政治的区别。在这个游戏的美国版本中，敌人的界线由你来划定，而这种技能取决于一个人的辨别能力。欧洲政治家则倾向于通过证明其能够鼓励协作来赢得胜利。 

   因此我坚持调和主义的态度。 

   我第一次对商品化感到紧张是在很早以前，那时 Linux 还籍籍无名。如果在那个时候就已经有人选中了 Linux 搞商品化，那我就没戏唱了，现在也不会是这处情况了。在对1998年的活动情况所进行的新闻组讨论中有一种忧虑，就是怕一旦让人搞商业化开发，开发商可能什么回报也不给。在某种程度上，我必须依赖新的合作伙伴，正如 Linux 发展商依赖我那样。并且他们也证明了自己是值得依赖的。他们没有踌躇后退。到现在为止，这都是非常值得肯定的。 

   作为 Linux 商标的持有人和 Linux 系统的核心支持者，我体会到一种与日俱增的责任感。我深感与日俱增的责任来自于这样一个事实：成千上万的人如今正依赖着 Linux ，并且，巨大的压力使得尽可能令人依赖的工作变得确定无疑。对我来说重要的是，协助公司来理解开放源代码究竟意味着什么。就我自己来讲，在贪婪的公司与无私的黑客之间，从来都没有真正发生过战争。 

   不，我在英特尔请我帮他们处理奔腾芯片的FO OF锁死问题后和他们会面，并不等于就是放弃了自己的理想（“是奔腾处理器的FO OF臭虫吗？”我就知道你准会这么问。没错，这就是我们这些怪怪的工程师编造出的怪怪的名字。“FO OF”是一行会导致奔腾芯片锁死的非法指令行中头两个字节的十六进制表达式，所以我们这么叫它）。不，一方面公开源代码的奇妙之处，同时又从一家封闭到连它在干些什么都不肯让大家知道的公司那里拿薪水，这并不是虚伪。事实是，我当时很尊重Transmeta这种低功率芯片，现在依然尊重如故，而且认为它是当时最有趣的技术项目，可能在广播电视方面得到应用。另外，我第一次可以和其他人协力同心，让英特尔至少部分地公布它的源代码。 

   作为一个要从技术立场和伦理立场两方面都获得信任的人，我感到很难在开放源代码群体内部坚持自己的立场。对我来说，在与 Linux 展开合作的公司当中，不偏不袒才是最重要的。的确，我没有通过接受红帽子公司以诚挚的谢忱为理由提供给我的优先认股权而出卖自己。而伦敦的一位企业家仅仅为了让我在他那家羽翼未丰的 Linux 公司里当一个董事会成员就要付给我一千万美金，但我还是拒绝了。这是否说明一些问题？他没办法理解我竟然会推掉这样一笔轻而易举就能到手的巨款。这仿佛是在问我：“你长这么大对一千万美金这个概念到底知道多少？” 我从来没想到我会面对这样的事情。 

   我们新近受欢迎的程度，不仅使我，事实上，也使整个虚拟社区为盛名所累。的确，正如开放源代码在1998年吸引了全世界的目光，最大的争议之一就在于其名字本身。在此之前，已有了诸如GPL所许可的“自由软件”，我们会提到软件共享现象，以及通常所谈论的“自由软件运动”。这一用法源于“自由软件基金会”（Free Software Foundation），该基金会由理查德·斯多曼于1985年为促进自由软件工程而创立，比如GUN和由他发起的自由UNIX（Free UNIX）。 

   没准，像艾立克·雷蒙德这样的新教徒会发现新闻记者们全搞错了。“free”一词真的意味着免收任何费用吗？“free”真的意味着没有任何限制吗？“free”真的意味着自由自在吗？经过几周私人信函的往来，我们最终达成了一致意见：比起“free”来，我们更愿意使用“open”（开放）一词。从此，自由软件运动变成了开放软件运动。对于那些乐意将此一场运动的人来讲，我猜这的确是一场运动。自由软件基金会仍然被称之为自由软件基金会，而理查德·斯多曼也仍旧是幕后在心理上进行策划的人。 

   身为这一行动的实际领导者之一，我正受到越来越多的关注。在Transmeta，我的电话几乎整天响个不停，所有的电话都不外乎两件事，要么是记者要采访我，要么是某个会议的组织者要我发言。为了向全世界推广开放源代码和 Linux ，我必须对两者同样以热情相待。如果你能让一个数学天才活跃于人民党党员的社交圈子里，你就创造了一个民间英雄。我忘记了艾立克·雷蒙德对我的评价：我看上去并不比许多黑客更特别。但我希望自己是不同于比尔·盖茨的人。 

   比尔·盖茨住在湖边的一座高科技大厦里，我却住在喧嚷的圣克拉拉的一座合住公寓的三间农舍里，在我女儿的玩具间穿行。我只有一辆破旧的庞蒂亚克牌汽车，并且自己接听电话。新闻记者们似乎很喜欢看到这些，是的，有谁会不喜欢我呢？ Linux渐渐开始被对微软的一大威胁。 

   其实，当微软面临反托拉斯法案的困扰时，它也应该有一个真正的对手了――因为微软几乎插手所有软件的开发的研制，不可一世得像是赢得了第三次世界大战。这时候，有人泄漏了“万圣节文件”，一份来自微软内部的备忘录。文件显示，微软已十分关注 Linux 。不久，史蒂夫·巴尔默就在接受采访时回答：“是的，我很担心。”其实，也许微软能继续从宣传Windows NT与 Linux 间的竞争上赚取利润，但 Linux 与微软之间的竞争却更趋激烈。 

   不用我站到临时演讲台上大讲微软的坏话，事实就会说明一切，而事实恰好做出了对 Linux 有利的说明。记者们喜欢这一切：言词温和的大卫（可能像只狐狸）与卑劣的垄断巨人歌利亚之间的对抗。因为我能够保持完全的公允，所以我乐于向记者谈论这一事件。我喜欢把记者称作混蛋，但我发现我与他们的多数访谈都十分有趣。记者们对我的故事也特别感兴趣――所有的人都想知道谁将是失败者。 

   在从“摧毁微软阴谋的阿米变形虫”事件里得到满足之后（注：为确保表达准确，这个句子曾受到微软公司某个产品的拼写检查），记者们想进一步了解开放源代码的概念。现在，对信息的解释已十分容易，因为人们已能看到正在运行中的实例。进而引起他们好奇的是 Linux 的管理方式，他们很难想象，经常连一些不过三十人规模的公司都乱得像马厩，Linux 这一人类历史上最大的合作项目，怎样才能被管理得高效而有序。 

   有人杜撰了一个“仁慈的独裁者”的名词，来形容我对整个事情的把握。当我第一次听到这个词时，想到了一个留着髭须的伊斯兰教国家的将军在给他饥饿的军队分发香蕉。但我不知道我是否喜欢“仁慈的独裁者”的描述。我掌握着 Linux 的核心技术，这是 Linux 的根本，所以每个与 Linux 有关的人都予我以最高的信任。我用在卧室里编码的方式，管理着我数以十万计的开发者参与的工程。我更愿意让人们自愿自觉地承担工作，而不是预先委派任务给他们。当我全身心地投入到这项事业中之后，我发现这并不是一个有趣的工作，它像是一种用户级的编码，而我们却在努力开发这种低级系统。关于低级系统的每件事情，都能通过众多的支持者最终反映到我这里来。 

   我有时赞成、有时反对他们的作法，但大多数时候我都无为而治。当两个人对同一件事有 看法时，我对两个人的意见都接受，看哪一个可行。有时两者都加以采用，融合为一种新的方法。如果两个人之间存在着尖锐分歧，各行其道，互不相让时，我便不接受任何一方的意见。 

   如果某个开发者失却了兴趣，想退出开发，我会像所罗门王所做的那样悉听尊便。 

   仁慈的独裁者？不，我只是懒惰。我尽量不做出决定，用无为而治的方法进行管理。那会使你得到最好的结果。这些话已经成为了报纸的大字标题。 

   具有讽刺意味的是，我对 Linux 的管理风格在新闻界赢得了好评，而我在Transmeta那段短暂的管理工作却彻底遭到了挫败。我设法管理一批开发者，但我失败了。像所有冒然闯入繁琐得像废物堆的办公室事务的人一样，我毫无头绪。面对繁复的每周例行会议、工作回顾和行动规划，我一筹莫展。三个月后，事实证明我对 Linux 的管理风格除了能获得记者们的赞赏以外，并没有给Transmeta带来任何好处。 

   同时，新闻界还大力宣扬另一个话题：分裂。凡是曾经历过UNIX那段不愉快历史的人，都知道曾发生在UNIX代理商之间的无休止的争吵。到1998年，所有的问题都已提上日程：历史会不会在 Linux 的身上重演？我的回答一直都是：尽管在 Linux 的代理商之间肯定会存在争执，但决不会出现差点搞垮UNIX的那种分裂。UNIX的问题在于，为促使代理商实现外观的统一而浪费了数年的时间，而这只是因为他们无缘获得相同的资源基础。实现外观的统一不仅浪费了UNIX数年的宝贵时间，而且导致了残酷的内部纷争。不过，我可以告诉新闻界， Linux 的代理者并不需要定期到知情者那里光顾。 Linux 组织内部的分裂因素要比UNIX组织少得多――因为即使态度不友好的代理者也能得到同样的资源基础，也能互相利用彼此的成果：源代码开放，任何人都可以提出和利用。 

   记者越提出这类问题，我越愿意会见他们（与我年轻时在赫尔辛基遇到的那些记者不同，九十年代的美国记者大多十分理智），我非常高兴有机会与他们交谈。 

   但发言则完全是另一码事。我不是人们所说的天生的演员，要知道：我只是一个涉世未深的人。我甚至写不好发言稿。所以，在一切准备好之前，我会一直等待，直到天黑。 

   不过，似乎还没有发生过什么意外。通常是，我正在走向演讲台，还没有开口，人们就站起来不停地鼓掌。我很想让我的演讲富有吸引力，但我总发现自己局促不安，所有的话听起来都不自然，包括那句标准的“谢谢，请坐。”我似乎有点神经质。 

   而且，并不只是记者或会议组织者才会提问。一天夜晚，我正在和塔芙坐在家里给女儿们读书，电话响了。 

   我接起电话：“我是托沃兹。” 对方说：“呵，你就是那个设计了 Linux 的家伙？” 

   “是的。” 两秒钟的沉默后，电话“咔嗒”挂断。 

   另一个晚上，一个人在拉斯维加斯给我打来电话，极力要求我为一些Linux T恤衫生意签约。 

   最简单的解决办法就是申请一个不在电话号码簿上登记的电话号码。在我刚搬到加利福尼亚时，我没有费这番功夫，因为一个不登记的号码要比一个登记的号码贵得多。当我知道花费不是很多时，现在我使用了一个不登记的电话号码。在取消登记的电话号码之前，有一次，大卫忘了我家的电话号码，他打电话向电话局查询，值班员查到了我的电话，然后惊奇地说：“他居然是登记的号码？连同他的百万财产吗？” 不，我没有百万财产。我有百万 Linux 用户，但我从来没有从 Linux 挣来百万财产。那确实很有趣。 

.. _P33:

--------------------------------------------------------
7、财富的到来  
--------------------------------------------------------

   每天醒来的时候，我经常觉得自己是最幸运的家伙。我不记得1999年8月11日星期三是否是一个有意义的日子，但它应当是。对 Linux 来说，它是第三个最重要的日子。那一天，苏斯公司的执行总裁德克·霍恩德尔从德国赶来，到圣何塞会议中心商业展示会，晚上就住在我家为客人准备的床上。我认识他多年，他是老“X自由86”组织的成员，积极支持 Linux ，他还是丹妮亚拉的教父。我起床后，为塔芙和丹妮亚拉准备了热牛奶咖啡，又像通常一样，仔细阅读《圣何塞信使报》除了体育专栏和分类广告以外的所有内容，然后我们挤上丰田车向圣何塞城区驶去。 

   我记得我与许多人握了手。 

   这一天是红帽子公司上市的日子。公司几年前就给了我一些股票期权，但直到最近才送来一些纸面文件。我并没有兴趣读那些文件，它们一直扔在我电脑边的纸堆里。我的确很希望红帽子能走势良好，股票期权并不是让人特别兴奋的事情――因为我还没有意识到它意味着什么。 

   令我兴奋的是另一个原因：从许多方面来说，首次上市的成功代表着大家对 Linux 的认同。所以那天早上我有点紧张，不过恐怕不只是我如此。市场已低迷了几个星期，人们都想知道红帽子的首次上市能否取得成功，或者没准它会撤回上市申请。 

   结果它终于上市了。在大会门口我们得到了消息：红帽子的股票开盘价是十五美元，或者是十八美元，我已记不清了，最重要的是那天的交易在三十五美元的价位上收盘――虽然没有创什么记录，但运行良好。 

   我记得我与塔芙和德克驾车回家，悬着的心放了下来。 

   接着，我想到了钱。我开始兴奋起来。 

   直到我们被拥挤的车流堵塞在 101 公路往北的半路上，我才清醒地意识到，我在一天之内从身无分文一下子变成了拥有五十万左右美元。我的心跳开始加剧，既得意又有几分不敢相信。 

   我对股票运作一窍不通，我需要知道下一步该怎么办。于是我给莱瑞·奥古斯丁打了一个电话。我告诉他，他是我所认识的唯一通晓股票事务的人，我当时是这么说的：“你是否喜欢做我的股票经纪人？或者你能推荐一个你信任的什么人，因为我不想在网络上进行交易。” 红帽子给我的是期权，而不是直接的大宗股票。我不知道怎样去动作他们，我知道通常会有一个资金搁滞期，但我不知道是否对我也是一样，我也从没有想过纳税。莱瑞精于此道，并且交往广泛，我在莱曼兄弟交易所见到了他。但他对我并不热心，因为我不是一个大客户，但他答应帮我考虑下一步怎么办。另外，在上市的第二天，我收到了一封来自红帽子人力资源部或是他们的律师的电子邮件，信中提醒我在公开上市以前公司的股票就拆分了。我对这些一无所知。于是，我找出那些装着股票期权文件的马尼拉纸信封，阅读我以前不愿费力去看的文件，文句很浅显（法律术语）：我拥有双倍的期权。 

   我的五十万美元现在变成了一百万。 

   说实话，我已顾不得长期以来在新闻界形成的形象了，也顾不得自己实际像个无私的取悦于人的杂耍演员一样生活于穷困之中的事实了。我亢奋不已。 

   我接下来阅读了所有关于红帽子公司股票的报纸报道，是的，我有一百八十天的资金搁滞期。 

   没有亲身经历过，你就无法想像一百八十天对于一个第一次成为名义上的百万富翁的人来说，到底有多长。 

   现在，我有了一项新的活动：跟踪红帽子公司股票的价格。在接下来的六个月里，红帽子公司的股票价格一直在上涨，它一会儿稳步攀高，一会儿直线上升，总之是不停地上涨。到达某一点时，它再次拆分股份。情况最好时，我的股票价值达到了五百万美元。 

   红帽子就像华尔街，起价很低，但不断上涨。它与其他许多领域发生了恋爱关系，甚至与互联网也产生了某种远距离的关系。红帽子公司脱颖而出。我们成为1999年末那几个寒冷月份里的大众话题，电台和报纸的投资评论家都从这种让人发狂的有望打败微软的操作系统上得到了让自己满足的机会，而我的电话也一直响着。这一切与十二月九日的VA Linux公司上市交织在一起，形成了一个令人眩晕的高潮。 

   那是一次超出任何人意料的上市行动。 

   莱瑞.奥古斯丁和我赶往金山的波士顿第一信用中心，参加首次上市路演。我穿着平时所穿的衣服：一件免费赠送的T恤衫和一双凉鞋。我们还带着妻子和孩子――带着蹒跚学步的孩子在衣冠楚楚的投资银行家中乱跑，的确是一件糟糕的事情。 

   一切都在突然之间发生了。屏幕上晃动的手势表明，VA Linux在第一天的交易中，卖价在每股三百美元左右。这是以前闻所未闻的。即使没有看到手势，我们也知道这创造了一项记录，因为从银行投资家被CNN和财经新闻网的所震惊的表情也可以看得出来。说到莱瑞，他表现得像平常一样冷静，我敢肯定在整个过程中他连眼皮都没眨一下。当然，我什么都不知道，因为我在忙着追赶我的到处乱跑的女儿。 

   现在，即使马达加斯加雨林中的居民都可能知道，莱瑞因此而暴富。当他赶来旧金山时，他的公司里没有多少净资产，而当他返回硅谷的时候，他的身价已高达六十他美元。而且，如报纸不停报道的，他才只有二十几岁。 

   对我来说，我得到了VA Linux的大宗股票期权。如红帽子一样，我在六个月内不能卖出股份。但与之不同的是，红帽子一直稳定地上涨，而VA Linux却价格日跌。虽然VA Linux上市第一天创出高价的记录，但在此后的六个月内，它的价格一直下跌，最低点跌到了每股二十五美元。 

   一方面，它是市场调整的牺牲品――四月份的市场调整损害了大多数技术股的价格。另一方面，也由于我的股票在VA Linux所受的限制――因为VA Linux尚处于资金搁滞期，所以我无法对波动激烈的市场加以利用。从心理学观点讲，跟踪公司的趋势要比根据红帽子的运行情况做出决策更加困难。在那些天里，当我躺在床上，常常因担心净资产的日益减少而突然醒来。 

   但我依然认为自己是最幸运的家伙。 

   一月的一个晚上，李纳斯驾车来到我在苏萨利托的办公室。在对我所使用的苹果电脑和非 Linux 的操作系统开了几句玩笑之后，他坐下来，读我所写的冗长的前言草稿的第一页。那是我从他的视角以第一人称撰写的。我就坐在旁边，唯一的响声是李纳斯读到无论他怎么不在意，自己也已成为全世界关注的明星，芬兰为有像他这样的人而骄傲，就像为音乐家西贝柳斯和驯鹿尼基而感到的骄傲。大约过了十分钟，他读完了前言，他唯一的评价是：“哥们，你写的句子真够长的。”后来我们花了两个小时把句子削短，把一些专业术语改成常用词语，同时也尝试着一起写作。事实证明在合作方面，我们是消磨时光的高手，最后我们放弃了那篇前言。 

   接着，李纳斯尝试着提高我的纯平显示器的分辨率，但没有成功。那是去年产的“艺术之国”显示器，我把它当作身份的象征。“你怎么能从这上面看东西呢？”他问我。最终，他成功地把显示器的分辨率提到与机器的标准相匹配，然后，他拿出一页纸画了一副草图，向我解释显示器的工作原理。不知过了多久，我说：“嘿，让我们来点寿司。” 

   “关于钱的事情使我发疯。我一直等待资金搁滞期的结束，我心里总在想：好像有很多钱，却还是没有钱。” 我要了清酒，他因为要开车，所以只喝果汁。 

   “到现在，我们的经常账户上从来没有超过五千美元，除了可以存着却无法花的股票和证券，那就是我们所能消费的所有的钱了，所以，现在我只是名义上很有钱，而……” 

   “大约有多少钱？一两百万？” 

   “两千万吧？如果不再下跌。那是VA Linux公开上市以来发行股票的价值，但在资金搁滞期的六个月间，我没有机会拿到钱。不，现在来说只有五个月了。” 

   “我看不出有任何问题，你真的必须五个月后才能买一所大房子吗？并不是我没有同情心，而是……” 

   “嗨，一开始，我们像是有很多的钱，可以买任何我们中意的房子。我们需要一所有五个卧室的房子，房子周围要有大片的空地，能使我们听到动物的叫嚷声。我在平常工作时，每天都打弹子球，所以我希望有一个足够大的房间，能安放弹子球台。我们还想有一个独立的单元，供塔芙的父母来看望我们，或在我妹妹的朋友从芬兰来时能住上几个月，顺便也帮我们看看孩子。很有意思，当我们从芬兰移民到美国时，我们有了帕特里夏，当我们从公寓搬入套房时，我们有了丹妮亚拉，而且……” 

   “所以你们很想再生一个孩子。” 

   “嘿，我们顺其自然。” 

   “在我们刚认识的时候，我听到你宣称：‘我们正要再生一个孩子！’你这个能干的家伙。” 

   “好吧，所以我们需要更多的房间，我们曾去看过几处空房，但这些待售的房子价格高得实在离谱。我是说，我有两千万美元，而且那是靠非凡的成就得来的。我能够买得起任何房子。但我们看过的一座房子临着一片树林，没有空地，而且相当荒芜，却索价一百二十万美元，而最好的房子要五百万美元。至于那两千万美元，你必须拿出一半纳税，于是你只能剩下一千万美元。而像这样一所房子，每年的房产税就是六万美元，所以你还是预留出这笔钱。而我不知道，在我一生中，除了这次以外，我是不是还能这样地大笔挣钱。我不愿做不自量力的事情，以致我们付不起在那所房子里的费用，我也不愿负担着贷款抵押。” 

   “我并不同情你。毕竟，如果Transmeta上市后运行良好，你就可能一切顺利。” 

   “是的，但我只是一个资历不深的管理者，我还没有那么多的股票，也没有那么高的薪水。” 

   “李纳斯，如果你愿意，你能见到这所城的任何一位风险投资商，然后得到任何你想得到的……” 

   “我想你是对的。” 8、糟糕的展示会 下面是我所遵循的信条，第一条是“推已及人”，如果你能恪守这一原则，你会在任何环境下都知道该怎么做。第二条是“以己为荣”，第三条是“行而乐之”。 

   当然，要做到“以己为荣”和“行而乐之”并不是那么容易。 

   在VA Linux首次上市前的一个月，在拉斯维加斯计算机分销商展览会的“1999电脑分销商展览展示会”上，我的主题讲演就没有了得成功。几乎所有的人都知道，那是人们所见过的最大也是最糟的展示会。在接近一周的时间里，内华达的拉斯维加斯这座原本昏昏欲睡的城市，就成了一块磁铁，吸引了几乎所有能够买卖的高科技产品和大批希望购买或出售产品的人。那情况也是前无古人的，你在任意一辆出租车内摇下窗户，随便向路边挺胸走过的妓女提问：“主题演讲几点开始？”她都能告诉你答案。 

   Linux的“仁慈的独裁者”被商业展示会的组织者邀请做一次计算机分销商展览会主题讲演。这是一宗有意义的事情，是计算机待业认同 Linux 的方式，也是他们评估 Linux 的方式。 

   星期天，即展示会的前一天晚上，比尔·盖茨作了一次主题演讲。他吸引了大批听人，在威尼斯饭店那个足有七个常规宜家家居仓库大的舞厅里，挤满了站着听讲的人。那些希望听到盖茨谈及反托拉斯案件（当时审判还在进行）或者仅仅是为了回家告诉孙子他曾看到世界上最大富翁本人的人们，在演讲开始前几小时就顺着饭店的底层排起了蜿蜒的长队。盖茨用律师的玩笑开始他的演讲，接下来是精心设计的微软网络技术演示和高清晰视频片断，引起了听众的阵阵笑声。其间曾有人插话说盖茨的服饰是摹仿奥斯汀·鲍尔斯。 

   我不在场，我正陪着塔芙买浴衣。 

   第二天晚上，在同一处地方，我发表了主题演讲。 

   我宁愿去购物，可是……并不是我没有做好准备。平常我一般在演讲的前一天写好发言稿，但那次我却被搞了个措手不及。演讲被安排在星期一晚上，我早就写好了发言稿并开电脑制作幻灯片，到了星期六，一切看上去都准备就绪了。我甚至把发言稿拷在了三张软盘上以防万一。我讨厌演讲，但我更讨厌失败的演讲。我甚至把我的发言稿放在了互联网上，以备万一我所有的软盘都出了问题。 

   在街上由于参加计算机分销商展览的人太多，引起了一场交通。我们到达威尼斯饭店时，离预定的演讲时间只有半个小时。我和塔芙、我们的女儿以及一些参加展销会的亲属在进入饭店后台区域时遇到了问题，因为一名组织者忘记把安全证放在哪儿了。于是，一切开始出轨。 

   最后我们还是进去了。面对四十个人演讲，我就会紧张。我希望只留下我生命中最伟大的听众一人在场。接着事情发生了。 

   我发现两天前我辛辛苦苦收拾好的计算机不见了，而且到处都找不到，真是愚蠢极了。有人提醒我，人们在演讲前四个小时就楼梯口排起了长队，而且等候区已经人满为患。而我们却像只无头的母鸡，在后台到处乱窜，寻找丢失的计算机。 

   那是一台装有办公室之星―― Linux 办公软件系列之一的普通台式电脑，那是两天前我刚装上去的。我以为只要放进软盘就一切顺利进行，所有的事情都准备得十分充分，甚至线缆都整理得一丝不乱。但是现在电脑却不见了。很显然，电脑是被贴错了标签，然后被运走了。幸运的是，我还带了我的便携式电脑，也存有我演讲用的幻灯片材料，而且它也有办公室之星系统。 

   因为是便携式电脑，所以没有装载足够用的字体，那意味着我最后一线希望正在消失。当我意识到这些时，我想：谁会在乎这些？我会顺利过关的。接着我们手忙脚乱地连接各种线缆。确切地说，在机器安装好之前，组织者已开始放听众入场。我站在那儿，竭力把机器准备就绪，一股人流冲进了听众席，占满了每个座位，也占满了每块可以站人的地方。 

   很幸运，在我开口以前，他们给予了长时间的鼓掌。 

   我用比尔·盖茨用来开场的关于律师的笑话的只言片语作为开场白，开始了我的演讲。我只用了一句话暗示Transmeta正在开发新的秘密产品。 

   新闻界曾纷纷猜测，我会利用计算机分销商展览会讲演的机会推出Transmeta的芯片。但我们当时并没有准备好。我演讲的主要内容只是重复电脑开放源代码的好处我也没有采用像往常一样的演讲方式――不停地讲笑话。另一方面，与塔芙和帕特里夏在一起的丹妮亚拉大哭起来，仿佛整个拉斯维加斯所有的娱乐场所和街边俱乐部都能听得见。 

   这实在不是一次可以长久容身于著名演讲之间的讲话。 

   后来，曾有人尽力想让我轻松起来，告诉我前一天晚上在同一个讲台上比尔·盖茨也明显地很紧张。但是，他在讲台上的演示毕竟很顺利，不过他的麻烦是：美国司法部正在掐紧他的脖子。而我觉得我已高枕无忧了。 

   这似乎是《新闻101》中的一个策略：从等候的队伍中，找出为了能听到李纳斯的报告而等候最久的人进行采访。是的，要想得知这些把李纳斯视作穿着销售者外衣的上帝的狂热崇拜者心中的感受，还有什么比这更好的方法呢？ 下午五点钟，我乘电梯进入了电脑迷们企盼的圣地。在温长蜿蜒的队伍的最前头，是一名沃尔沃勒大学计算机科学系的学生，他很愿意与我交谈。为了见到李纳斯，他已等候了两个半小时，而且他还要再等两个半小时才能进入报告厅。他的同学站在他后面的队伍里，大约比他晚到了半个小时，他们与一名教授从华盛顿州驾车赶来，在当地一所高的健身房里睡了一夜。这些学生都已开始了自己的网页设计工作。他们很随意地把自己成长的世界分为两类人――黑客和穿商业套装的人，并不停地向我指出正在不断加长的队伍中的穿商业套装者，口气通常是这样：“嗨，看那些穿商业套装的家伙。”他们戏谑的对象也对他们礼尚往来：“嗨，看那些狐狸。”但相同的是，他们都大声喧闹着，拍着高举的双手，互相戏谑，戏谑的言词大多与计算机主板和内存容量相关。 

   接着他们谈起了李纳斯。李纳斯的名字被冠以大写：“LINUS不会为任何非开放源代码的公司工作。他决不会。”他们盲目地听信一些娱乐站点的报道，也访问一些充斥着关于Transmeta流言的站点，消息的传播有点像好莱坞女演员爱情生活的惊人细节。而且，并不是只有早早赶到这儿的热心者才有这种狂热和推测。 

   我进了男厕所，走向小便池旁，打断了一场正在进行的谈话。 

   “这个演讲将和比尔·盖茨的演讲一样无聊。” 

   “你还期望什么呢？”另一人回答，“李纳斯是个黑客 不是一名穿商业套装得。我觉得，应该宽容他一点。” 我们终于进入了听众席。我们没有够挤到前面，只是在中后部。我的伙伴――沃尔沃勒大学的学生因为看到他所崇拜的英雄而兴奋异常，同时他也为没有能占到第一排的座位而愤怒――他认为他应该拥有那个位置。接着他开始指出听众中的穿商业套装者。虽然我们离前面有七十五码远，但我们可以看到在灯泡暗淡的讲台上，李纳斯坐在一台计算机旁，有几个官员围在他的周围，他正在快速地输入什么。那儿将会发生呢？是否还是某种软件的片演示？ 最后，李纳斯和其他人都走向前台。大会向听众介绍了“疯狗”约翰·霍尔。我的沃尔沃勒大学的同伴异常兴奋，“看他的大胡子。”他指着 Linux 国际执行总裁凸起的脖子说。“疯狗”说他很高兴向听众介绍一个人，他把这个人几乎视作自己的儿子。李纳斯再次走上前来，与约翰·霍尔热烈拥抱。 

   即使从后面的席位上，我也能看出李纳斯有些紧张。 

   他说：“我想从一个关于的玩笑开始，可已经有人用过了这个情节。”这是关于令微软苦恼不堪的反托拉斯法案的一件事情，前一天晚上比尔·盖茨也用它作为演讲的开头。“有谁听到过更好的笑话讲一个好吗？” 接下来，他用一句话暗示了Transmeta正在开发的新产品。随后便是幻灯演示的讲解和开放源代码日渐重要的申述。既无出奇之处，也无新鲜货色。 

   他的演讲是在一种疲倦但还令人愉快的单调声音中进行的。中间，他的一个女儿哭了起来。他不得不停下来说：“那是我的孩子。”你抬头看会场的屏幕，能看到他额头的汗珠在讲台灯泡的照射下闪闪发光。 

   听众们开始排队提出问题。他谢绝回答自己最喜欢哪一种 Linux 的文字处理软件。当有人问他家里有多少只撑得鼓鼓囊囊的企鹅时，他说：“的确有不少。”当有人问他住在加利福尼亚感觉怎么样时，他高度赞美了加州的气候：“现在是十一月，我还穿着短裤，如果是在赫尔辛基，我早就没命了。”一位崇拜者走向提问的麦克风宣布：“李纳斯，你是我的英雄。”他对此作了回答，如同数以百万次地听到和回答同样的赞誉，他说：“谢谢。” 提问结束后，数百名听众拥向讲台区，李纳斯开始退场，他尽可能地握一下他所能握到的手。 

.. _P34:

--------------------------------------------------------
9、媒体的攻击 
--------------------------------------------------------


   Linux 革命结束了吗？ 

   撰稿：斯科特·伯瑞纳托，《PC周刊》

   “谢谢您的垂询，革命已经结束。您如果想得到关于 Linux 的更多信息，请按……” 这表明李纳斯·托沃兹有了一名助手，意味着整个 Linux 也流俗了，所以还是忘掉这场革命，重新回到Windows操作系统去完成工作吧。 

   以前，记者把电话打到以斗篷和短剑为标志的 Transmeta 公司找 Linux 操作系统的发明者时，接通分机，你总会听到另一端李纳斯自己的回答：“这是托沃兹。”他很耐心地回答你的提问，告诉你他没有时间。有时，即使你提问的是毫无意义的初级程序员思索的问题，他也予以答复。那时总是他自己接听电话。 

   今天，当你打到 Transmeta 公司，接通他的分机以后，却会有一个悦耳的女子声音欢迎你的来电：“谢谢您给李纳斯·托沃兹来电。这个电话不接收信息，如果想与他联系，请把传真发往……” 什么？一切都改变了。对你来说他已是可望不可及了。他已很富有，他已是位名人，如果想和他会见一次，就像会见其他计算机界的大腕名人一样困难。女子继续喋喋不休地重复传真号码。如果你想要拨打原先的0#号找一位接线员……“我们的接线员不负责为他仁慈信息，也不知道他的日程表。”她的声音还算动听，不过最糟的一句是：“但他们很高兴把您的传真号码告诉他。”啊啊，比尔·盖茨还很高兴分裂微软以取悦戴维·鲍埃斯（David Boies）呢。 

   Linux革命并没有结束，但与任何革命一样，零星的喧嚷正在被众多的支持者所取代。远方的新生波浪正在取代眼下无用的顽石，富有的地主也跟从在贫穷的纳税者后面参加起义（顺便提一句，后来，富有地主极力主张向边远地区居民征收威士忌税，其实威士忌税与以前向他们征收的茶叶税没有多大区别）。 

   实际上，这正是李纳斯开始变得毫无意义的时候。所以，只提供一个新闻电话号码或者令人不快地把提问范围加以限定就是不可避免的了。 

   本月早些时候，在圣何塞举行的 Linux 世界博览会的问答会上，参加问答会的托沃兹难以当场回答众多提问者的问题，所以不得不喋喋不休地重复着相似的答案，应答相似的问题。开放源代码能用于商业领域吗？你会不会像比尔·盖茨管理微软那样管理 Linux ？你怎样评价微软？什么是开放源代码？什么是 Linux ？为什么以企鹅为标志？ 因此，托沃兹像体育明星那样把话题限制在一个固定的范围内，如特姆·罗宾在布尔·德拉姆所说的：“我只是来到这儿并尽百分之一百一十的努力去帮助球队……” 问题不仅太多，而且记者们在与技术无关方面的提问有时候也令人难以预料。在一次新闻发布会上，《顶尖人材》的记者问他怎样把握小型和中型商业市场。托沃兹象征性地回答：“就个人来说，我一个都不把握。”回答过两个问题后，一位热心者――一名自以为对开放源代码的混乱状况有独到见解的记者问托沃兹，他怎样评价公司就农作物基因申请专利这一问题。托沃兹做了象征性的回答：“对于申请专利，我同时怀有两种心情――好的和坏的，但坏的成分更多。” 程序员们认为：如果有人向你提问农作物基因的问题，那么你可能该请一名助手了。 

   所以，李纳斯不再自己回答电话也许是一件好事。但是，我们失去了感受他的直率和自谦的机会。所以，我们希望如果我们的传真的确放到了他的办公桌上，他确实会给我们一个答复，而这答复将会保持他的托沃兹风格。 

   但假如负责公共关系的人士们已经开始负责这项工作了，我们恐怕就没有机会再次感受李纳斯的个人魅力了。 

   好的，我想我应该向伯瑞纳托先生解释，但不是道歉。 

   任何一个读过这个专栏的人都明白，作为计算机呆子的领头人所产生的压力，已经使我从一个电脑迷变成了一个混蛋。他错了，实际上我一直是一个混蛋。 

   要从头说起。我从来憎恨语音信箱，它是技术利用方面的负面例证。事实上，它是现存技术中最糟糕的技术，我强烈地憎恨它。在Transmeta公司是地，最初我们使用一种分立语音邮件系统，每个雇员都可以收存二十分钟打进来的语言信息，时间用完之后，打电话者会被告知邮箱已满，请与接线员联系。我的语音信箱总是满着的。 

   我想这正是记者们造成的麻烦。在我的语音信箱满了之后，他们就与接线员吵闹。经历过数百次以后，接线员失去了耐心，她们也知道我对这些来访者不感兴趣，但她们不愿让打电话的人觉得是她们要赶走来电者。 

   于是，我只好不听录音信息就直接把它们删去，以使前台的人不再受打扰。大多数时候，我根本不听任何信息。不过，打电话的人通常把电话号码说出来以供记录，所以我不得不听十五遍去把他们所说的话弄清楚。如果没有足够的理由，我不给他们回电话。人们留下号码后常会被一种温暖、易于动感情的情绪控制，直到明白我不会给他们回话为止。 

   那就是他们找到接线员的时候。由于接线员不知如何回答，所以我告诉他们，要来电者给我发传真。传真与语音邮件一样令人厌烦，但只要你愿意，你还是能够弄清楚传真上的电话号码。 

   而我却从不想去弄清楚。 

   起初，接线员礼貌地告诉来电者请他们给我发传真。最后，人们认识到我实际上并没有读那些传真。一周后他们又打电话来，抱怨说他已把传真发给了我。接线员又被弓弦进来，可他们的工作并不是处理我的电话。 

   尽管伯瑞纳托先生对我在 Linux 发迹之前的良好形象进行了慷慨的描述，但我实际上一直就是一个刻薄的家伙。这已不是什么新鲜事情。 

   传真问题并没有持续很长时间。最后，他们设立了一个没有语音信箱的专门的电话信息接待处。Transmeta已聘用了公关人员，他们自愿为我处理这一事项。听说他们受过职业训练，专门处理这一类事情。他们告诉我，好使我不想与记者们交谈，我也应该尽量给记者们回电话，如果我回话，记者会有一种温暖而快乐的感觉。我对此的反应是：我才不在乎他们的什么温暖或快乐的感觉。 

   当我在办公桌前时，碰巧有人打来电话，我确实会亲自接听。但那并不能被解释为平易近人，那当然也不是一次政治宣言。对开放源代码的立场并不能使我比别人更为平易近人，也不能 比别人更为道德，也不能说明我更易于接受别人的意见。这从来不是事情的关键。事情的关键在于，即使我是来自地狱的最黑暗的魔鬼，即使我邪恶异常，人们也可以在使用 Linux 时忽视我的存在而自行处理自己的工作。这与我个人的开放与否无关，这只与他们拥有忽略我的权力有关。那才是最重要的。 

   Linux 没有官方版本，有我的版本也有任何人的版本。事情是大多数人都相信我的版本，并把它看作事实上的官方版本，因为我为之工作了九年。我是发起人，人们都认为我的工作十分出色。但我们可以说，即使我刮成光头冲他们大喊“向我鞠躬，否则，我打死你们”，他们也不会搭理我的。 

   人们相信我，而他们相信我的唯一原因就是我曾经值得信任。 

   那不意味着我愿意去听语音邮件，或者愿意我在办公室里时人们正好打电话进来。 

   我并不认为人们应该把我看成是一个所谓的好人，给任何给我打电话或发电子邮件的人回话。想来这事的确奇怪，到底是哪些廉洁把我描给成了一个不爱钱财的谦恭的和尚或圣人。几年来，我一直想驱散这个神话，我不想成为新闻界所希望的那种人。 

   事实是，我从来憎恨那个谦恭的和尚形象，因为那个形象实在太不酷了。那是个沉闷的形象，而且，那不是事实。 


   钻出我的卧室，站到世界的聚光灯下，我立刻感觉到我必须学会某些别人在进幼儿园时就已学会的生存技巧。例如，我从没有预料到人们会如此认真和荒诞地对待我和我的一举一动。有两次的情形，可以说明这同一个主题。 

   在大学时，我在电脑上建了一个总目录，所有目录的名字都与它有联系，目录的名字是为了作为个人的提示，所以我把机器中的总目录命名为“李纳斯·上帝·托沃兹”。我是我办公室里那台机器的上帝，这有什么问题吗？ 人们使用一台 Linux 或UNIX的电脑，他们会敲键盘看看谁登录过那台电脑。因为有了防火墙，所以这种操作今天已不经常。但在几年前，如果人们想知道另一个人是否登录或看过他的信件，就必须敲开电脑看看。这也是看看别人放在计算机上的个人信息(它有点像网页的前身)通常所用的方法。我的“项目计划”总是包含着最新的核心版本，所以人们要想知道当时版本的方法，就去打开的电脑看看。有些人甚至把这一过程设置成自动完成，他们每次访问我一个小时，以便跟上版本的更新。不管怎样，当人们访问我时，都会看到那个总目录被称作“李纳斯·上帝·托沃兹”。起初还没有什么，但不久我开始收到电子邮件，人们告诉我那么做是亵渎上帝。所以，最后我不得不更改了它。这些人对待自己过于认真，而他们的 法通常使人发疯。 

   当然，另一次是发生在北卡罗来纳州的事件。哎，那真是糟透了。最近出版的一本关于红帽子公司的书，把那一事件看作带有潜在灾难的国际性事件。这决不是危言耸听。 

   红帽子举行了一次 Linux 用户集会，邀请我参加，会议就在北卡罗来纳州的德汉姆市举行。听众席挤满了听讲的人。当我站起走向讲台的时候，人们都起立并向我欢呼，第一句进入我心中的话就从我嘴边溜了出来： “我是你们的上帝。” 那是一个玩笑。因为那样可以喊得更响。 

   那并不是说：“我就是你们的上帝，你们要牢牢记住。”那只是表示“好的，好的，好的，我知道我是你们的上帝，虽然我感激你们这种对我的赞赏，但现在请坐下来听我演讲，听过了再表达你们的态度。” 我相信我再也不愿重新经历这一切。 

   这几个字的开场白使在场的所有人都愣住了。几小时后，我的这句话成为新闻讨论组里专栏的标题。我承认，这句开场白不雅，但这不是故意的不雅。事实上，我只是走向一个讲台，而人们站起来并向我欢呼，我很窘迫，而那正是我对付困窘的方式。 

   人们对待我太认真了。他们对许多事情都看得过直。在为 Linux 奔走的几年里，我认识到了一件更糟的事情：有些人并不满足于过分认真地对待自己，如果他们自己的成见没有被别人实践，他们便会更不高兴。 

   这成为我生活中最大的烦恼。 

   你曾经思索过狗为什么那么喜爱人类吗？不是因为它们的主人每六个星期就带它们到整形师那里去一趟，也不是因为它们的主人偶尔会在人行道上捡起它们的粪便。狗喜欢人类是因为人类喜欢命令它们怎样去做，那是它们活着的一个（这一点非常重要，因为它们大部分都被阉割，所以它们已从繁衍下一代犬科动物的工作中被解脱出来。另外，它们对项圈下的交配也没有多少欲望）。作为一个人，你是狗群体的领导者，你告诉狗该怎样做。狗的情感服从于你的命令，而且它们喜欢那样。 

   不幸的是，人类的性情也是如此。人们希望有人告诉他们该如何行动。这种倾向植根在我们的基因核里。任何社会性的动物都本性如此。 

   所以，那些具有个人意识，敢于对别人说“不，我不遵循”的人就变成了领导者。要变为一名领导者并不很难（肯定如此。我不就变成其中一员了吗？）。那些没有这种信念的人，在某种程度上，更喜欢领导者替他们做出决策并告诉他们该怎么做。 

   当然，人们遵循他们所选出的领导者的吩咐去做是正确的。我争论的并不是这一点，我所要说的是，不论领导者还是跟从者，都想把他们自己的想法强加于对方，正是这一点令人难以接受。这不仅令人沮丧而且可怕。令人沮丧的是人们会盲目服从任何事物，其中包括服务我；而令人可怕的是，人们希望把他们的盲从心理强加于他人，当然也包括强加于领导者。 

   当坐在计算机旁，对一些微妙的技术问题深入思考时，你就会忘记那些棱角分明、随时会碰到门上的机器人。当看着孩子最后终于入睡时，你就不禁生出丝丝柔情。另一个手边的更贴切例子发生开放源代码组织中：狂热者相信每种发明都应在公共通用专利（GPL）下注册（用黑客的话说，就是“GPL’d”）。理查德·斯多曼希望把一切都归入开放源代码。对他来说，这是一项政治斗争。他希望利用GPL作为促进资源开放的方式，他认为舍此之外，别无它途。而我开放 Linux 资源则不是出于那么高尚的目的，我希望得到回报。这是事情运行的法则，在计算机研究的早期，大多数工作是由大学或国防军事组织承担的，最后都开放了。如果有人需要它，你会把你的成果与另一所大学共享。理查德在被赶了他所喜爱的研究后，成为自觉开放源代码的第一人。 

   的确，把某人的技术公开，把它改进成像 Linux 那样具有统一术语的可用资源，由此会产生一系列的技术革新，其好处是不可胜数的。只要你看到了这些好处，你自然会反思那些质量很差的封闭软件项目。公共通用专利注册和开放源代码模式为最好的技术产生创造了条件。不仅如此，它还防止了技术封锁。而且，它还保证了任何对研究和技术感兴趣的爱好者都不会被排斥于开发研究之外。 

   这不是一件小事情。斯多曼，这位提供公共通用专利注册而值得尊敬的人，曾为自由软件的出现而欢呼雀跃。因为他参加了马萨诸塞技术研究所的一系列有趣的开放研究工作。但当这些项目转变为私人公司的项目时，他便被排挤了出来。研究工作中最有意义的是表处理语言（LIS）机的开发，表处理语言开始是作为人工智能的一部分被加以开发的。像许多事情一样，有人看到事情进展得如此顺利，认为应该把它纳入商业轨道并从此获取利润。这种事情在大学里随时都会发生。但理查德不支持将其商业化，所以当1981年LISP变为斯姆伯利克公司的一个项目时，他突然被开除了。更令人难以忍受的是，斯姆伯利克公司还解雇了许多在人工智能实验室工作的他的支持者们。 

   相同的事情在他身上发生了好几次。我理解他的想法，与其说他的动机是反商业化，倒不如说是反垄断。对他来说，开放源代码关系着无论谁对项目进行商业化他都能够继续工作。 

   GPL 为每个人都提供了机会，成绩卓著，这是人类的一个巨大的进步。 

   可是，所有设计创新都应纳入GPL吗？ 这他妈的完全不可能。这事就像堕胎合法化问题移进科技领域一样棘手。应由开发者个人自行决定是在GPL里注册还是利用其他更便于保护版本的方法。令我几乎发疯的是，理查德认为非黑即白，别无 ，由此产生了不必要的政治划分。他从来不理解别人的观点，如果他在宗教方面也是如此，他将是一名狂热的教徒。 

   实际上，最令人恼火的事情是几名摩门教徒敲开我家的后门，他们告诉我应该相信有人敲后门（或用电子邮件轰炸我的信箱），是我应为我的软件注册这件事。这当然不是一个政治话题，人们应该做出自己的决定。建议别人在GPL注册或不注册是一件事，就此进行急诊则又是另一件事。当人们抱怨我在为一家商业公司工作，而这家公司从来不做任何与GPL注册相关的业务时，我能说的是：少他妈的多管闲事！ 理查德最让我生气的地方，并不是他主张 Linux 应该称为“GEU Linux”，因为 Linux 的核心的确利用了GEU软件程序的许多材料；也不是他诬蔑我过分张扬，声称当他与人分离代码时我还是一个在洗衣篮里睡觉的孩子。让我觉得他讨厌的原因是，他不断地抱怨别人不在GPL下注册 Linux 系统。 

   有众多的原因使我对理查德充满赞赏，但只能从远处。我想，我倾向于尊敬像理查德这样有强烈道德感的人。 

   可是，他们为什么不能独善其身呢？我最不喜欢别人教训我应该或不应该做什么，我讨厌别人对我的个人决定指手划脚（也许我的妻子除外）。 

   在 Linux 的发展过程中，艾立克·雷蒙德等专家指出，操作系统的成功与否以及开放源代码发展的性，或多或少都与我的实施方式和在争执中保持公允的能力有关。虽然艾立克可能是开放源代码现象的最好发言人（但我非常非常不赞成他那种偏激情绪），但我还是相信他有点偏离了阐述的主旨。并不是我要避免偏袒，而是我憎恨任何把自己的道德观念强加于他人的人。在此，你可以把道德观念替换为“信仰”或“价值方式”等。 

   把道德观念强加于人是不对的，其下一步，把道德观念制度化也无疑是错误的。我只是对自己的选择抱有极强的信心，这表明我认为当面临道德问题时，我会做出自己的决断。 

   我希望自己做出决定，我反对繁冗的社会规则。我坚持每个人如果在自己的天地里，只要不妨碍他人，就可以做自己想做的任何事情。我发现了几可怕的规则，尤其是其中强加于学校和孩子们身上的规则。想一想关于强加给教育改革的规则，以及以后发展的错误方向，你就会感到它的可怕。 

   这就是实际上没有必要却无处不在的所谓的社会良知。 

   同时，我个人还认为比我和我的道德判断更重要的，不是人类，而是进化。从这一方面说，我希望我个人的选择能履行其社会责任。那也许是本来即有人，我想它是人类进化过程中形成的一个固定部分，促使人们考虑社会事务。否则，我们早已过分偏执。 

   此外，只有一件事值得一说，就是那些过于唠叨的人。人们没有理由空话连篇，也没有自以为是。 

   嗨，我听起来与他们一样唠叨。 

   但是，当人们开始过分认真地对待你时，就为你设下了一个温柔的陷阱。 

.. _P35:

--------------------------------------------------------
10、舞会上的国王 
--------------------------------------------------------

   在3月17日（圣帕特里克日）、10月13日（哥伦布发现美洲日）等日子里，美国忙乱异常，但几乎没有人注意12月6日这一天，那是每个芬兰人都知道的日子――芬兰独立日。 

   大多数芬兰人像庆祝其他事情一样庆祝独立日，舞会频繁地举行。好使以芬兰标准衡量，在独立日夜晚之前的舞会也算得上是过于频繁了。 

   所以几乎整个国家的公休假日里，人们都坐在电视前恢复体力。也有别的选择，即醉醺醺地在雪地里中跋涉。 

   能够把每个人都吸引到电视前的只有一件事：总统舞会。芬兰上层社会传统风俗不多，所以总统舞会十分重要，是唯一真正意义上的社会性大事。舞会实况向全国电视转播，好让人呆在家里以免醉醺醺地驾车上路。同时也向世人证明芬兰有能力推出自己的奥斯卡颁奖晚会片。当然，可以用一个更好的比方：这是芬兰上层社会的超级杯盛事。 

   所以，整整一天，从北部的约兹杰克到南部的汉科，芬兰人都在看参加舞会的受邀者与总统握手，通常男人穿着燕尾服，女人则穿着令人难以忍受的晚礼服（斯堪的那维亚所特有）。 

   1999年独立日，我受到了邀请。 

   如果你是驻芬兰的大使或者是芬兰议会议员，你将自动受到邀请。除此之外，每年还根据情况邀请一二百人，他们可能是奥林匹克冠军，也可能是帮助总统处理事务富有成效的人。如果你是冰球队长，而当年冰球队又恰好得了世界冠军，你将会受到邀请。今天，如果你发明的操作系统受到世界瞩目，你也会受到邀请了。你还可以配偶或朋友一起参加，如果既没有配偶也没有朋友，你也可以带上你的姐妹。 

   很幸运，我和塔芙都能参加。八月，我们就向美国移民局申请前往芬兰后不需要重新签证就能返回美国的许可，到十一月我们才收到返美证。两个星期后，我们收到了参加总统舞会的请柬。 

   试想一下那将是怎样一种景象，两千多个芬兰人――而且都是最重要的芬兰人，拥护在总统那座被称为总统城堡的官邸里。那是一名富商修建的豪宅，芬兰没有几处。那确实只是一个大的家园。但确切地说，并不是一个单一家庭的家，而是一个包括一个单一家庭和许多维护者――厨师、女仆等等的大家。但地方并不很大。 

   到达之后，有人为你脱去外套，你就挤在人群里了。你不知往哪里去。酒瓶不断增多，很显然，其中有伏特加。如果没有，那就不是芬兰的风格。你与许多人都交谈片刻，你与记者的交谈持续到结束，因为他们是那儿最有趣的人（也许是酒使他们变得比议员更有趣）。 

   因为我认识的人不多，所以我认为舞会不会很有趣。我是唯一来自开放源代码群体的成员，我希望我们的群体也像军队――以后谈论件事也可以有所夸耀。但我最终发现舞会实际上非常有趣。 

   那天塔芙穿了一件非常美丽的长袍，吸引了媒体的注意。我们好像是参加奥斯卡典礼，而不是芬兰总统的舞会。因为她看上去如此美丽，也因为冰球队当年没有夺冠，新闻界把我们俩称作舞会上的国王和王后。 

   随便吧。 

   “大卫，你是作为一位朋友而不是一名记者进入这所房子的，我们不允许任何记者进入这所房子。” 我从来没有见过塔芙像今天这样热情，那是她和李纳斯拿到钥匙的第一天，她在新房子的门口迎接我。这是一所巨大的房子：中厅（现在安放着李纳斯的弹子球桌）与幼儿室几乎处于不同的街区，幼儿室是帕特里夏和丹妮亚拉睡觉的地方，大得几乎容得下一个幼儿园。进入前门是一处通向客厅的宽阔的通道，如果没有那些风格独特的意大利瓷砖，这里将来可以作为女孩们练习滑板的地方。李纳斯的办公室在第一层，有一扇装着镜子的滑动玻璃门。这所房子里有五个浴室（也许现在他们发现了更多个）。房子坐落在远离硅谷中心的地带。 

   尼基·托沃兹正好来探望儿子。俩人去了一趟以前的公寓，刚刚回来，他们乘坐的是租来的宝马Z-3汽车。这辆车将是李纳斯要购买的新车的参照。下午尼克还要驾车去斯坦福大滨图书馆，但首先，他还得学会使用安置在尚未美化的后院的温泉浴盆。他声称这所房子是所有名叫托沃兹的人曾住过的最大的房子，接着他拿出一张纸列出了十八个名叫托沃兹的人。当然，他不知道第十九个正在被孕育出来。 

   李纳斯在空阔的房子里也十分兴奋。尼克把周围的景色都用摄像机拍了下来。我要求李纳斯抱着塔芙跨过门槛，以便我能把这一珍贵情景拍摄下来。其间有一些非芬兰风格的非常热烈的当众爱情表演。“你想过我们的房子有这么大吗？”塔芙问我。 

   塔芙需要在开市时到达艾莫雷维尔的宜家家居商店，购买新房子所需的物品。所以我建议李纳斯带着孩子们到斯廷森海滩去。一到那儿，我就怂恿李纳斯试一试环礁湖中的皮筏玩耍。等他爬上码头的时候，裤子已经湿漉漉的了。 

   我想让李纳斯告诉我，他对书中的一章名为《成功会毁了他吗》有什么感想，于是我把小女孩儿们抱离了海滩，以使他能不受打扰地读完那篇文章。帕特里夏和丹尼亚拉四处寻找海星，甚至踮着脚尖走到了海水里，玩了大约半个小时，直到我听到中的一个说“KISINKOMMER。”意思是：“我要撒尿了。” 我们回到房子里，发现李纳斯只穿着内裤坐在电脑旁，他的旁边有一袋椒盐饼干，袋子已经打开。大约过了十五秒钟他才意识到我们回来了。他的第一句话是：“哥们，你的苹果电脑遭透了。” 接着他说：“噢，我把我的裤子放在你的烘干机里了。” 他已把那章的标题改为《名声与财富》。他认为《成功会毁了他吗》听起来有点过于自以为是。他需要更多的时间改写这章。为了使他能完成这一工作，我带头孩子们到海滩看海豹去了。 

.. _P36:

--------------------------------------------------------
11、还会再干  
--------------------------------------------------------

   如果你没有意识到与风车作战有多么艰难，你就会觉得那是很容易的事情。 

   五年前，当人们问起我是否认为 Linux 将会取代桌面系统，并对微软造成致命的一击时，他们那时对于自己的意见总是有些缺乏自信。我总是抚州他们我认为会的。但他们却有些怀疑我的观点。事实上，他们可能比我更清楚这一事实。 

   其实我并没能够真正理解 Linux 能够对微软构成致命一击这一过程的所有细节。不仅不清楚他们如何解决在开发一种稳健轻便的操作系统过程中所遇到的技术问题，而且也不清楚当一种操作系统导致商业以及技术成功时意味着什么。假如我能够事先了解要做到如 Linux 目前这般成功需要做多少基础工作的话，那我肯定会感到相当沮丧的。这意味着你不仅仅要优秀。当然你必须优秀，但是一切事情最后的结果都必须是正确的。 

   任何理智的人在凝望着需要整修的崎岖山路时，都会陷于沮丧之中。 

   想想支持PC机的技术问题吧，它们是变化最快的硬件。你不得不支持那些遇到程序问题的人们，有些程序并不能一次次地重复以到达预期的效果。这些你以前可能未曾考虑过，但是你却关心 Linux ，因此你会关心这些程序的运行效果。 

   即使是考虑到如何渗透到商业市场，你也不得不考虑客户支持的各种层次。对于 Linux ，从其初期开始，你就不得不在公司内部来实行技术支持。但若是考虑到大规模的支持，则你必须拥有大量的技术人员和基础设施。对于产品销售出去的第一个三十天来说，光有一个900或者800服务号码是远远不够的。从某种程度上说，技术支持已经不再是个问题了，因为你可以在许多地方购买到技术支持，如从 Linux care、红帽子、IBM、Silicon Graphics、康柏、戴尔等。然而很明显，你的确需要做好一项工作来满足用户的要求。长久以来，我并没有意识到这一点。数年来，这已经变成一个主要的挑战了。 

   与具有坚实的技术背景的生意人或具有商业背景的记者不同，过去我只是一个狭隘地将集中在软件上的开发人员，天真地以为自己知道需要做什么。其实，单是技术问题就能阻碍我成功地从事这项工作。如果我事先知道需要花费多少精力从事这项工作，而且十年以后我还在为这项工作努力，并且这将是十年中我的一份全职工作的话，则我决不会开始这项工作的。 

   废话！好了，我不想再说那么多废话了。 

   不过事情依然发生着。那些并不喜欢开放源代码的人，以及那些为程序错误而苦恼的人，会给我不断发电子邮件，不断地倾诉他们所遇到的挫折。与那些我所收到的认同及赞扬的电子邮件数量相比起来，这也不算什么。但它仍然在发生着。 

   是的，如果我事先知道这是一项多么艰巨的工作，事情会变得多么艰难的话，我很可能不会从事这项工作。 

   如果我有足够的知识可以事先知道这些困难的话，我很可能不会将 Linux 推进到远离其初始发行的地步。 

   如果我事先知道有多少细节我必须做正确，人们对于一种操作系统寄予多少厚望的话，我就能够预见到我根本无法面对事情的恐怖一面了。 

   好了，我也无法预测其好的一面。 

   比方说，我会得到多少支持，在这个问题上有多少人在共同努力等等。因此，我现在改变主意了。我想，如果我能够确切地知道事物好的一面的话，我很可能还会从事这项工作的。 

   是的，我还会再做一次。 

.. _P37:

--------------------------------------------------------
第五章 知识产权 
========================================================


.. _P38:

--------------------------------------------------------
1、各种观点 
--------------------------------------------------------


   目前，关于知识产权的讨论是如此之热烈，以至于我不可能不与支持或是反对某一观点的论调相遇而能够安然地独自思考。 

   有些人认为，专利和劳动保险形式的知识产权法规是自由世界的祸害，信息提供者(IP)法规并不仅仅是训导，实际上简直就是罪恶，应该尽快地加以铲除。另一些人认为整个世界经济实际上是由知识产权所驱动的。这些人想通过他们的努力来加强IP法规的法律地位。 

   结果是，关于这一问题的争论有时变得非常鲜明。 

   当然，争论的大多数问题落脚于互联网问题，还有一些问题则着眼于圣何塞的夜生活这一热点问题。在与知识产权法规相关的一些具体问题上，将会有极为热烈的争论。随着人们对于从第一修正案到是否要建立IP法案的一切问题的争论渐趋热烈，未来的某个时候有可能会使开放源代码的行为不再出现。 

   我发现自己在这个问题上已经快要陷于精神分裂了。 

   其实这并不意味着，就这个问题而言我已经没有了自己的主张：我个人非常强调知识产权的重要性，但是我自己的观点最终却成为争论双方的两个对立面了。我可以告诉你，这是非常让人困惑的。这意味着我只好同时与双方论了。我以为，这是因为知识产权本身就具有双重性，它是一个矛盾的统一体。 

   对于许多人，包括对我自己而言，知识产权是有关人类的创造活动的规则 ，是关于那些使我们成为人类――而不是动物(当然，这本身是一件好事)的活动的规则。正是在这个意义上，“知识产权”这一名称本身就是一种侮辱。它并不是如有形财产那样可以出售，它是创造性活动本身，这是人类所能够做到的最伟大的事情。它是艺术，它是蒙娜丽莎。但它也是一整夜编程工作的结果，它是你作为一个程序员感到极为自豪的最终成果。它是如此珍贵的东西以至于将它出售是不可能的事情。它是作为创造者的你不可剥夺的一部分，使你之所以成为你的一部分。 

   那种创造――不管它是以绘画、音乐、雕塑、菱或是程序的方式出现，都应当受到尊重：创造者和他所创造的事物之间有着你所无法切断的密切联系。这就像母亲与孩子之间的联系，或者如同中国菜与味精之间的联系。但是与此同时，它却又是世界上每一个人都应当分享的事物，因为它是属于人类共同的。 

   好吧，让我们换一个角度：如果以每年大约七万亿美元的交易额来看的话，则知识产权是一桩数额巨大的生产。人类的创造活动获得了一个价格标签，而且它居然是异常昂贵的。创造是稀有的，于是它不仅仅是昂贵的，也是相当奢侈的。这一点导致了截然不同的争论和观点完全不同的人群。那些将人类的创造结果称之为是“财产”的人，不用说，便是律师了。 

   再来看看这一章的标题。持有“财产”观点的人们获胜了(英文“知识产权”[Intellectual Property]一词中的“property”也是“财产”的意思)。不管怎么说，它们的名字确实有些“尴尬”。 

   那么问题的症结在何处呢？ 知识产权的最为著名的例子是“版权所有”这一提法。 

   版权所有在法律上很容易获得。你并不需要登记你的版权：你自动就会成为你所从事的任何创造性工作的版权所有者。与其他大多数知识产权法规相比，这一点是版权的一个重要区别，这事实上使个人可以方便地获得其版权。你可以获得一个版权，仅仅是通过著作、绘画或者是创造一个与众不同的事物即可。如果你愿意，你可以加上一个标志，诸如“(c)版权所有，2000，by某某某。”但是坦白地说，你并不需要这样做。不管你说不说，你都拥有版权。以这种方式说出来，只是使得人们如果需要使用人的创造成果的话，能够更方便地联系到你。 

   当然，仅仅拥有版权本身并不是非常有价值的。然而事实是，你拥有你所创造的东西就意味着你可以控制它的使用。例如，你有权将这一艺术成果出售给其他人，而且在这个问题上，除了美国国税局以外，任何人都不会说什么。但是，它其实并不仅仅是钱的问题，而是其他人在同样的问题上陷于困惑时帮他们解决了问题，省却了时间与精力。 

   例如，你可以以版权所有者的身份来使用你的权利，试着去做一些更为有意义的事情，而不仅仅是将其出售，你可以将它授权给别人使用，这比出售它更好。与出售你的艺术成果不同，你能够出售许可证给别人以让他有权对其做某做事情，而你仍然保有版权。简单地说，你可以拥有你的蛋糕，也可以吃了它。这也是微软世界是何以被创造出来的原因：无限地出售许可证以便可以让大家使用某种东西，而事实上自己又毫无损失。难怪人们会喜欢他们自己的这种财产。 

   是否有人已经注意到这其中的问题了呢？如果你到目前为止并没有看出任何异常，我可以将其中的微妙之处卖给你。 

   知识产权的基本问题在于它自身：你作为知识产权的所有者可以永远地出售它，而称自己却什么也没有推动。你无需冒任何风险。 

   事实上，你有权决定你的许可证的书写方式，你可以用这样一种方法来收发室，基本意思是：即使版权有问题，你也无需为止而负任何责任。听起来有些荒谬是不是？想必你已经感到惊讶了。 

   其缺陷是：顾客得不到保护，事情变得更为糟糕。产权所有者不但可以毫无损失地出售其产权，而且他还有权利起诉那些出售与其产权相似的产权的人们。很显然，产权所有者对于从其产品中衍生的产品拥有权利。 

   很显然，事情没那么简单。你如何来界定领悟与复制？如果不同的人们产生出相似的主意的话，那又该作如何处理？谁将能得到那份厚礼以至于可以一而再再而三地出售？而且还可以告诉别人抵制其他人的类似创造？不仅仅是消费者的权益没有得到保护，其他具有创造性的人们也没有在“知识产权”的名义下得到保护。 

   在这一点上使讨论变得有些龌龊的是，许多要求加强知识产权立法的讨论是基于这样一种观点，即：给创造者和艺术家以更多的“保护”。 

   而人们似乎不曾、或者说是从未意识到，这样一种强有力的权利导致一些人剥夺了另一些人的权利。 

   也许我们并不会感到惊讶，那些要求实行更为严格的知识产权法的支持者们正是那些从中得益最多的机构。它们可不是艺术家和创造者本身，而是信息提供者的票据交易所：公司是靠其他人的创造性而生存的。哦，对了，还有律师们。最终的结果呢？版权法修正案就像是臭名昭著的数字化千年版权法案(Digital Millennium Copyright Act或DMCA)一样， 后者甚至剥夺了消费者使用有版权物品的最后一丝权益。 

   现在，如果你得出我认为版权实际上是有害的结论，那么你错了。恰恰相反，我热爱版权。我只是认为没必要将版权所有者的权利无限扩大。不要扩大到将消费者的权利都被剥夺殆尽。我这么说并不仅仅是作为一个消费者而言，而且我也作为一个拥有 创造者，不管是以这本书的作者还是以 Linux 系统的创造者的面目出现。 

   我作为一个版权所有者，有我自己的权利。但是权利是与相位的，或者像他们以一种相近的说法所说的那样，位高则任重。要负责地使用这些权利，而不是将他们视为对付那些没有这种权利的人们的武器。正如一位伟大的美国哲学家曾经说到的那样：“不要问版权能够给你带来什么，而要问问你能够为你的版权做些什么。” 最后，版权是一种相当适度的、循规蹈矩的知识产权形式。即使出现了如“数字化千年版权法案”那样的事情，“适度使用”这一提法也依然存在。拥有一项版权并不是给予版权所有者的成果以全部的权利。 

   而对于专利、商标和商业秘密，情形则不同：它们是信息提供者的杀手锏。 

   对于软件专利的讨论――尤其是在技术圈子内――变得如此激烈，以至于它被视为是在文雅的公司内不应该被讨论的主题之一。当然此类话题还有枪支管制、流产权利、医用大麻以及百事可乐是不是比可口可乐味道更好等等。其原因在于，专利在许多方面对于新创造的东西给予了类似于版权保护的控制，然而却很少能够有像版权保护一样的弥补措施。 

   对于专利，一个最为尴尬的争论在于它与版权不同。你并不是仅仅创造了某种新的事物就可以获得专利。不是这样的，在你获得专利之前，你必须在专利局的办公室里经历痛苦而漫长的填表过程。顺便说一下，在专利局办公室等待有点像是在车辆管理局排队。但你必须意识到你将面临十二个专利律师，而且这个队有可能要排上两年之久。简言之，这并不像是在星期五晚上仅仅是自娱自乐的某种事情那么简单有趣。 

   然而雪上加霜的是，专利局办公室并不必然拥有资源可以用来核查你的新发明专利是否真的那么完美无缺。问题并不在于他们没有爱因斯坦来为他们工作，而在于对于新事物的恰当审查本身是有困难的。这就意味着在许多情形下，一些明显虚假的专利也会被接受。也许可以把专利局想象成邮局，在那里面，来来去去的什么人都有。 

   因此，结果会怎样呢？很显然，只有极少的个人获得了专利。另一方面，公司却获得了大量的专利。这些专利是他们用来对付其他公司的有力武器，可以威胁别人因专利侵权而要面临起诉。现今的专利系统基本上可以说是信息提供者这间的冷战，而不是他们之前的核战争。目前这种情况也不见得比过去的冷战好。那些挤在防弹掩体中的人们正是个人创造者，他们不得不对付一个几近疯狂的系统。他们缺乏足够的资源，无法拥有大量律师来对付繁琐的专利申请过程。 

   现在，如果你想避免专利申请过程中的麻烦，你可以采用更为厉害的手段：商业秘密。商业秘密的优点在于，你不必担心什么商业秘密办公室或者类似的机构：你只需要将其封存起来，然后就不必顾虑那么多了。你仍然可以将它告诉别人，但你不必在告诉他们的同时说这是商业秘密。 

   过去人们一直是这样做的，实际上这也就是法规之所以被引入的原因所在。为了鼓励个人和公司公开其秘密，专利法允许在一定期限内保护市场――如果你公开你所拥有的秘密的话。一个针锋相对的基本形式是：你告诉大家你是如何做成某事的，那么我们就允许你拥有一定年限的特殊权利。 

   在专利产生之前，人们会充满猜忌地保守他们自己的技术优势，一直到将它们带入坟墓。很显然，那是不利于技术进步的，因为有前途的技术从来没有向其他人公开过。对于专利特权的承诺使得专利成为将秘密告诉大家的一种强有力的刺激，因为你再也不用担心你的竞争对手会发现你在做什么了――在这 上，如果你不这样做的话，你就会失去对你的成果的保护。 

   然而，那是过去，现在情形不同了。如今，即使是商业秘密也有了法律保护，尽管它们的理由世人无法理解。任何人都能够意识到，一旦秘密被公开的话，那就不再成其为秘密了。在知识产权法规中，却存在着一个奇异的、扭曲的例外情形，那就是，即使每个人都知道了这些秘密是什么，而它们却依然可以继续是秘密。如果你恰巧为某一不恰当的雇主服务的话，那么你头脑中的知识甚至可以让你吃官司。 

   一些知识产权法规显然让人感到恐怖。 

   很大程度上，在这场知识产权战争中寻求和平的解决之道正是公开源代码所努力的目标。尽管许多人对于公开源代码原真正目的有他们自己的看法，但在许多方面你可以将它看作是一种高技术缓和方案，是对于在这场知识产权战斗中将产权作为武器这一做法的一种否定。 

   因此，正如一句古老的咒语所说的那样：要做爱，不要战争。只不过我们所言是在一个更为抽象的层次上而已(考虑到我所知道的一些可笑的人们，这也许太抽象了)。 

   但是，正如任何主要的哲学断裂带一样，故事总是有其另一面。这就是我明显的精神分裂的根源所在。 

   我曾经尝试着解释为什么许多人觉得知识产权、尤其是强化知识产权法规显然是有害的。在赞成公开源代码的人群中(坦白地说，包括许多在些群体以外的人)，对于其中的许多人来说，没有比看到彻底销毁所有原子弹和彻底废除知识产权冷战更为高兴的事情了。 

   同一事物的另一面在于，的确，知识产权可能是不公平的，的确，知识产权法规在很大程度上将其目标定位于大公司而不是消费者权利，甚至也不是个人著作者或创新者。然而其主体是积极有利的。知识产权集中于强有力的权利之上，与之相对应的事实是这一强有力的武器在市场上是如此的有效。核武器是冷战时代的终极力量，同样的原因使得知识产权在技术战争时代里大受欢迎。 

   技术也就因此而被出售了。 

   它不实生了一个强有力的正反馈循环。由于知识产权是如此好的一个财源，于是乎大量的人力就投入到创造更多的知识产权的过程中去了。 

   恰恰这一事实是至关重要的。战争戏剧般地成为了工程创新和大飞跃的根源所在(计算机本身最初开发的目的在很大程度上就是用于纯军事目的)，同样的道理，知识产权的虚拟战争也有利于发动竞争引擎，给技术发展带来前所未有的资源。这是一件好事。 

   当然，我，作为一个势利的知识分子，相信仅仅是源源不断地提供资源并不能够必然地导致真正的创新。看一看如今的音乐行业就会明白这一点。每年有大量的美元投入到寻找下一个热门歌手之上――然而没有人会真正认为辣妹演唱组(由于他们对于艺术的贡献而获得了许多巨额报酬)能够与沃尔夫冈·莫扎特(他死于贫困)的音乐相提并论。因此，对某一想法投入大量的钱财，并不必然产生杰出的天才。 

   然而知识分子式的势利――“你并不能购买到天才”这一哲学观点――在长期的商业模式中却并不真正有效。创新的源泉并不是太复杂以至于无法预测，也并不是太困难以至于无法得出可靠的结论。于是，长期的计划就不应当将精力集中于纯天才的前途发展上。现今的技术发展(很悲哀，音乐也是如此)并不依赖于爱因斯坦和莫扎特，而是依赖于大量的默默工作的工程师们(对于音乐来说，要依赖于有良好天赋的女性)。他们也许并不引人注目，但却正是他们偶尔会发出灿烂的火花。额外增加的资源并不必然成就伟大艺术，但却造就了缓慢而平稳的进步。最终，这才是最佳的。 

   “默默的工程师”这一提法也许没有“怪异的天才”这一提法那么具有浪漫的吸引力。想想有多少“疯狂的科学家”之类的电影被制造出来，与此相对照的是，又有多少“默默工作的工程师”之类的电影呢？然而，当话题转到商业上时，你所需要的是时不时出现的天才的火花，但你更需要的是在很长的一段时期内持续不断的小的改进与提高。 

   而这就是知识产权力量的光芒所在：通过使它变得有利可图，它已经成为了现代技术公司的圣杯，维持着这一庞大机器的运转。因此，由于对信息提供者加以了保护，理平稳的进步过程在不受阻碍地继续着。知识产权也许不再像我们所期待的那样有利，但它是可靠的。 

   因此我看到了问题的两面性。尽管我不得不承认，我宁愿看到更为有趣、更鼓舞人心的技术世界。在这个世界时在，经济因素并不总是那些获胜的因素。我有一个梦想――有一天，信息提供者法规是由道义来制定，而不是由那些获得了最大份额蛋糕的人来制定。 

   相信我，我懂得经济问题。与此同时，我禁不住地希望，经济问题不要对现代知识产权法规产生如此大的负面。强化知识产权所有权的金钱刺激，以及用法律文本来表达“公平使用”与“道义”的困难，导致了有关信息提供者的两种急诊之间越来越大的分歧。就像是两位邻居之间的争吵一样，没有任何一方愿意承认恰当的解决方案有可能会存在于两个极端之间的某个地方。 

   显然，金钱刺激在这方面表现得很好。问题在于，何种知识产权法规能够推进发展？无疑地，贪婪地攫取钱财的兴趣恰恰能够促进这一点。 

   这一问题由于以下事实的出现而变得更加突出：现代技术(尤其是互联网技术)正在削弱许多传统的知识产权保护形式，而且这种速度是我们所无法预料的。在许多方面没有人能够做出预测。我的意思是，人们能够想象居住在中西部的祖母们将会把绣花针技术应用于互联网么？复制艺术作品的能力――和技术本身――在很大规模上已经变得如此广泛并且易于获得，以至于拥有既定信息提供者的机构们东奔西跑，竭尽所能以支持他们的兴趣。他们全力以赴地禁止类似的复制，并引入新措施来禁止能够用于盗版的技术的应用。 

   上述情形有什么问题呢？问题在于，虽然大量的新措施使非法使用他人的知识产权变得更加困难，但同时也使得合法使用他人的知识产权变得更加困难。在 Linux 世界里正在发生着的经典案例便是所谓的DeCSS诉讼。 

   在DeCSS案例中，那些从事DVD影片解码技术研究的人们被娱乐行业起诉，理由是前者使得人们可以在互联网络中获得代码。在此案中，该项目的终极目标完全是合法的这一点其实都已无关紧要。事实是，该项目研究可能会潜在地用于非法目的。这一点便利即使是传播何处可以找到解码指令这类信息的行为在美国都是不合法的(DeCSS这一名称来源于解开DVD内容不规则性系统这一项目，托它的福，你才可以在计算机上观看影片)。 

   这是一个极好的例子。知识产权法规并不用来促进创新，而是用于控制市场并控制消费者所能够做和所不能够的事情。这也是一个知识产权法规走得过了头的例子。 

   那么还有没有其他的选择余地呢？想象一下能够实际上将其他人的权利考虑进去的知识产权法规。想象一下IP法规鼓励开放和共享。当然你依然可以有你自己的秘密，不管它们是技术上的还是宗教上的，但你不应该用法律的形式来保护这类秘密。 

   当然，我明白。我是多么的不切实际。 

.. _P39:

--------------------------------------------------------
2、结束控制  
--------------------------------------------------------

   既要生存，也要繁荣，这样的出路在于尽你所能去生产出最佳的产品。如果你无法靠此而生存和繁荣，那么你就不该这么做。如果你无法制造出好车，那你就应该像石头滚落山坡似的衰落。如二十世纪七十年代美国汽车工业的写照。成功在于质量，在于给大众提供他们想要的产品。 

   成功不是试着去控制人们。 

   麻烦之处在于，人们经常会被纯粹的贪婪所驱使，而这一点从长期来看最终会导致失败。贪婪导致了决定被偏执和控制欲所统治。那些错误的、短视的决策，导致了最终的灾难。一个简单例子就是以美国公司的失败为代价的欧洲无线技术的初期成功。当美国公司还在试图利用他们的所有权独自控制市场时，欧洲公司已经围绕着一个单一标准，即GMS而联合在一起了，并且选择了竞争。竞争的结果促使公司提供最好的产品和最佳的服务。美国公司被抛在了后面，他们为自己的竞争标准而困扰着。在一个有着共同标准的市场里，欧洲公司都拥有了自己的一席之地。这也就是为什么布拉格的孩子们要比美国的孩子们早几年就已开始用手机来交换文本信息了。 

   如果你想通过控制某一资源来赚钱的话，那么你终将发现自己会被市场淘汰。 

   这是一种专制的形式，历史上曾经有过大量的例子，它们的影响是负面的。比如说1800年在美国西部你控制了当地农民的水源。你对于用水很吝啬，因而要价很高。于是某一天，其他人设计出从其他地方引入水源的方法，而这种方法在你的高价水政策下不可避免地会变成是有利可图的事业，这时你的市场就会崩溃。技术在进步，可以被利用来将远方的水输送过来，或者促使环境发生改变。不管是哪种方式，你的垄断局面将会被打破，而你将会一无所有。这样的事情随时都在发生着。然而可笑的是，人们却依然没有看到。 

   让我们回到二十世纪音乐行业的衰退期，它所控制的资源是娱乐。公司拥有某个艺术家作品听所有权，艺术家创造出了一些独特的成功作品。公司可能在它所生产的每张CD上放上一到两首这类独特的作品。以这种方式，它就可以售出许多不同的CD唱片，而不是每个人都想要的一张包含了所有成功乐曲的CD。这时，有人就发明了MP3技术。于是突然间，音乐可以从互联网上下载。MP3正是给了消费者以选择的权利，因而是有利于消费者的。 

   如果一张典型的CD唱片需要十美元，而它里面只包含了一位消费者想要的两首作品，则对于这位消费者来说，更为理智的方法是单独地购买这两首歌曲，随同其他的一些他想要的曲目，以一美元每首的MP3的方式来购买。顾客不再陷于专制情形中了。这种专制的情形，被贪婪驱使着的音乐公司所制定出的规则统治 工发，它只想让出其中一小部分曲目，但它却选择了认输。这也就很好地解释了为什么音乐公司非常害怕MP3以及它的姊妹技术Napster和Gnutella。水的价格变得如此之高，以至于对于有人来说，设计出一种可能从其他地方引入水源的方法变得有利可图。 

   也正是这个待业，在二十世纪六十年代自己绊倒了自己。当磁带复制技术进入市场时，它试图阻止消费者将他们的音乐作品复制到磁带上。 

   它觉得磁带是人们不亲人版权法的完美媒介，因而就如何保护其版权引发了争论。这是一个很糟糕的借口。音乐公司将道义大旗举得高高的，并诉诸于版权，其实它只不过是试图维持其对小环境特权的而已。事实上，磁带从未对音乐行业带来任何损害。不错，人们为了自己使用的方便确实复制了音乐，但那也仅仅意味着人们实际上购买了更多的密纹唱片，他们才有可能将之用于复制。喏，数十年后，CD出现了，CD的制造方式使你将曲目复制到自己的磁带上。偏执狂又来了。接着，数学磁带出现了。他们又推出了一种不同的CD采样率――48千赫对比44.1千赫――目的在于防止使用者将他们的CD曲目复制到数字磁带上。不断地对消费者加压正是因为你想控制他们。在数学磁带的情形中，这一市场从未受到打击。这就有点像是试图愚弄大自然的力量。 

   于是不可避免地给我们带来了DVD技术。这一次，行业给我们带来的是比VHS录像带更好的音像质量，更小的体积，更方便的利用方式。但他们进行了加密以防被复制。更为雪上加霜的是，他们还加上了地区代码。你在旧金山购买的DVD无法在欧洲的机器上播放。这就给行业注入了不正当的因素：嗨，伙计们，我们可以在欧洲以更高的价格出售我们的影碟!因此让我们确保欧洲人无法在美国购买影碟。 

   娱乐业是否早就应该预见到这一显而易见的结局了呢？也就是说，水的价格是如此之高以至于总有人会设计出一种新的方法引入其他地方的水？ 是的，正当音乐行业贪婪地试图通过技术来控制人们的时候，DVD加密已经为了所破解了。它们甚至不是被那些想复制DVD的人们所破解的，而是被另一些人所破解的。这些人只不过是想在 Linux 操作系统环境下观看影碟而已。也正是这些人，他们实际上想购买DVD，却又行不通，若非是解密码的话，影碟在他们的设备上根本无法使用。行业保护其领域的动机没想到却发生了意外：它只不过是防止了市场的扩大，却创造了解DVD区位锁的动机。于是又一次，短期战略后来被发现是一个错误的决策。 

   娱乐业只不过是其中的一个例子而已。数年来，软件行业也发生着同样的事情。这也就是为什么微软的捆绑软件战略最终注定要失败。另一方面，开放源代码产品，决无可能以一种专制的方式来使用，因为它们是自由的。如果有人试图以 Linux 为载体来捆绑销售它，那么，其他人就可以对它进行反捆绑，从而以人们真正想要的方式来出售它。 

   试图以技术来控制人是决不可能成功的。它最终总要对公司造成损害，而且也会阻碍人们对于该项技术的接受。最近的一个例子是Java，它现在已经远没有其初期那么富有吸引力了。原本想要控制Java，但Sun公司却基本上已经失去了它。Java现在依然运行得很好，然而却显然没有充分发挥其潜力。 

   Sun并不仅仅试图通过Java本身来赚钱，公司将编程语言视为是使计算机对用户来说更为独特并使我们年轻貌美微软控制的一种手段，并且顺便也出售更多的Sun硬件。然而他们并不是真正想靠Java来赚钱，与此同时他们确实意识到他们不得不维持自己对它的控制。但问题是他们太急于与微软分庭抗礼。他们为恐惧、嫌恶和憎恨所驱使，而这是二十世纪九十年代处理商业问题的一种方式(想想“感恩而死”乐队的歌词：“不是没有时间来憎恨”)。由于他们是如此憎恨和害怕微软，以至于他们做出了错误的许可证决策。他们使得每一个人，甚至包括他们的合作伙伴，都难于使用他们的产品。这也就是为什么像惠普和IBM这类公司最终都决定开发自己的Java工具。他们只是简单地说：“干掉Sun公司。” Sun试图通过两种不同的标准化实体来使Java标准化。由于控制问题，每一次他们都是勉强度过难关。一方面，Sun想使语言标准化，但另一方面他们并不想放松对它的控制。于是标准化部门说道：“嗨，这并不仅仅与你自己有关。”结果，Sun只好将此事搁浅。这是公司试图以对于那些实际使用这项技术的人们来说毫无意义的方式来控制技术的一个典型例子。对于公司来说，这种努力总是要失败的。它也会使技术本身失败――或者使它不再被人们所接受。 

   与此相对照的是掌上计算机公司所采取的“如果你喜欢什么就让它自由”这一战略。“掌上人”开放了他们的开发环境，也开发了他们的平台，这不仅仅是针对卖主，也针对那些想为平台编写程序的个人。他们公开了他们的应用编程接口(API)代码，并且可以很容易地免费获得他们的开发工具。这样作的结果是创建了以掌上为核心的小型产业。它造就了掌上现象，而不仅仅是在新市场里角力的一家公司。因此现在你可以看到有许多公司在出售基于派乐(Palm Pilot，一种掌上电脑)平台的游戏，以及更多先进的日历程序，而不仅仅是派乐公司自己提供的程序。现在消费者可以选择他们想要的软件，这样每个人都从中受益，尤其是派乐公司，它由于开放了自己而获得了更大的市场份额。 

   Handspring公司利用其设备护目镜(Visor)也在做同样的事情。它是派乐的竞争者。它使用派乐操作系统。公司将开放性又往前推进了一步，允许放开诸如GPS接收器和移动电话附件等硬件程序的源代码。像掌上一样，翻跟头公司也正在创造一个支持新平台的公司群体。 

   Sun本身应该允许每个人都可以开发他们自己的Java语言――不加任何限制――也完全可以保证他们自身做得更好。那正是公司不被贪欲或者对竞争的恐惧所蒙蔽的标志。那也是一个公司相信自己实力的标志。 

.. _P40:

--------------------------------------------------------
3、未来的娱乐之旅  
--------------------------------------------------------

   有什么人比商业预言家更加令人讨厌呢？ 那些自以为是的人，假装知道疯狂的技术娱乐之旅会将我们带向何处？我猜测他们是很尽心尽责的。他们在小组讨论会中占有一席之地，并为那些特征模糊的技术会议定下基调。而这类会议就像是在你的花圃上突然出现的令人不快的、无法食用的蘑菇一般。那些希望了解技术趋势的人们，花费了数以千计的美元来听他们在技术会议上的发言。这些会议倒是帮助了大量的旅馆工作人员、厨师以及酒吧间男招待们的就业，因而我认为他们并不是一无是处。 

   而今大卫跟我说我也应该写写有关“商业的未来”之类的章节。我有点被这种想法所玷污的感觉。但是，嗨，他也并没有让我沉溺其中，因为我的主要任务不在于此。而且，如果他的观点认为读者可能会觉得商业未来比之于生活的意义更为有趣的话，那么，我情愿就此打住而按他的意思来写。 

   但是，我将公开表明我的观点，就我所能忆及的事情而言，我并不是一个好的预言家，对于许多事情都是如此。我曾经预言我一开始为了自己使用方便而编写的小操作系统会在某一天遍布全球么？没有。出乎我的意料，真的出现了这种情形。 

   我唯一想要说明的是，如果我被 Linux 变得如此之庞大这一事实震惊的话，那么所有其他人也必然会对此更加目瞪口呆。因此，也许我比大多数人预测得更好一点。谁知道呢？也许通过这一章我将会成为我们时代的预言家。 

   也许不可能。不管怎么说，事情是发展着的。 

   当然我们可以回顾过去的经验，带着忧伤详尽地追溯过去，比方说，看看一个似乎不可匹敌的公司，如美国电话电报公司(AT&T)是如何步入衰落的――它仅仅告诉我们，如果我们的观察期足够长的话，那么，野草终将有一天会泛滥并侵占雷蒙德地区的整洁的绿色建筑群。正如今日走红的年轻小明星脸上终有一天会长满皱纹、乳房会松弛下垂，今日的商业英雄也会被一种新的更富有激励机制的模式所替代。而英雄的公司，即使它竭尽全力地彻底改造自己，也终将会成为松弛的负担过重的AT&T模式。 

   我们称之为进化。这当然不是火箭科学。没有哪种营生可以永远生存，事情总是这样的。 

   然而，到底是什么在驱动着这一进化进程呢？是否存在着技术的根本性进化，以至于像有些人所认为的那样，有一天会出现电脑取代人类、将人类远远地抛在后面的情形呢？或者这仅仅是某种贩不可避免的前进过程，一种“勇往直前，排除万难”的东西导致了技术的进步呢？ 我认为不是。 

   技术是我们所藉以利用的东西，不管是商业还是技术，都不可能改变人类的基本需求与向往。与其他事情一样，进货是缓慢的，但却不可避免地会导致技术越来越进步，从简单生存到基于交流的社会，直至最终进入娱乐社会(似曾相识的提醒：是的，此前在这些页中你已经见识过这个理论了，假如你坚持看完本书末尾的话，你将会再一次遇到这一理论)。 

   人类注定是社会动物，技术也注定要进步。 

   因此毋须再去想有关十年之内技术能够做些什么之类的种种预言。从根本上说，这些是无关痛痒的事情。三十年前我们就能将人送到月球上，但从那以后我们却再也没有送人去过月球了。我个人以为，这只不过是因为月球被证实了是一个很单调的地方，基本上没有夜生活，这有点像圣何塞。于是人们并不想再回到月球 上去了。与此同时，我们所聚集的大量技术都对其不起任何作用。月球依然是空空如也。当你谈及技术的未来时，真正有意义的是人们起要什么？一旦能够描绘出这一点，剩下的事情就是如何大规模地生产它，并使它足够便宜，以便人们能够在不牺牲另外也想要的东西的同时获得它。除此而外，没有任何事情真正有意义。 

   这里再说一些小插曲。真正的卖点当然是洞察力而不是现实。豪华游轮所出售的是对于自由的感知，对于盐海的感受，对于佳肴的观感和爱舟的浪漫。如果你感觉自己像小鸟般自由的话，有谁会在意船舱是否狭窄呢？ 而这些又意味着什么呢？它解释了，比方说，为什么人们会对索尼公司生产的游戏站二代(Play Station2)如此痴迷，它是今年冲击商品货架的最大的单一技术(在我正在写这些文字 的时候，它刚刚引入美国，其时是2000年10月底)。这就是娱乐性社会的体现。 

   这也清楚地指出了个人电脑为何产生了一个观察问题。显然PC行业对于游戏控制台是有所顾虑的，主要原因在于，控制台被视作是无威胁的和有趣的东西，而PC却被视为是复杂和昂贵的。有时候这种顾虑甚至是一种敌意。 

   这也使我自己意识到，如果我们仍然在从现在起的十五年内大谈特谈操作系统，则难免会在某些地方犯严重的错误。也许这听起来有些怪怪的，毕竟它出自于一个以编写自己的操作系统而出名的人之口。然而事实是，从统计上说，没有人想要操作系统。 

   事实上，甚至没有人想要计算机。 

   每个人想要的这样一个神奇的玩具，它可以用来浏览网页，撰写学期论文、玩游戏、平衡账目等等诸如此类的所有事情。 

   这就是为什么许多的分析家喜欢类似PS2这类调和的想法。它取代了计算机的许多零碎工作，没有那种显然很复杂又让人恐慌和着急的特性。 

   这在技术上是无意义的，虽然我们始终都在将越来越多的计算机搬进屋里，但我们恰恰没有意识到它们可能分多么复杂而又令人恐慌。 

   因此我敢保证会成为第二个微软，如果他们能够将方方面面都组织得很好的话。但我现在并不是在声称这是一个类似诺查丹玛斯式的预言家的思维混乱的预言(是的，我知道：那可能并不是一个真实的世界，但它应该是一个真实的世界)。尽管其他一些人也会同意这一点，但我是在努力地表明这一切是何以发生的。 

   我并不是在这里预言PC的消亡，就像此前许多人不成功地预言一样。PC的力量依然存在：PC是计算机行业里的瑞士军刀。它们公然显示的复杂性足以吓跑那些并不喜欢技术的人们。这种复杂性恰恰是由于它们并不是为某一事物而量体裁衣的。然而，只有科技的灵活性才能使PC成为富有吸引力的事物。 

   于是，便有一个将它们统一起来，在黑暗中将它们联接起来的东西：通讯网络。通讯网络无处不在。你是不是无法忍受在一小时之内无法以至少每小时两次的频率来收发电子邮件？没问题，电脑可以做到，我的电邮迷朋友。你可以在海滨度过某一天，尽管你心里可能会产生些许的内疚感，但不管怎么说你还是可以同网络上发生的事情保持联系。记住：旅游将所有的技术奇观都变成看上去微不足道的东西，也不具有威胁性，则其尺寸大小并不重要。 

   那么，在这些事情上， Linux 和公开源代码一般说来又如何参与呢？ 你甚至不会觉察到它的存在。 

   它将存在于那些索尼机器的内部。你永远不会看到它，你也永远不会知道它，但它确实是在那里，促成了机器的运转。它将存在于某部移动电话之中，当你远离你的本地无线网络区域时，它将适时成为你的其余电子小器具的个人通讯网络中心。 

   你看，这只不过是时间的问题。当然也是钱的问题。 

   4、为何开放源代码 IBM是一个有压榨消费者历史的公司。它是通过迷惑公众并确保没有其他人插足来赚钱的。事实上，那正是大多数计算机公司的经营之道，其中一些公司由下而上依然在这样做。接着，当IBM开发了个人电脑时，它无意识地公开了其技术，任何人都可以藉此复制。 

   单单这一个行为，比任何其他事情都更加能够激发PC的革命，后者又进一步激发了信息革命、网络革命与新经济――不管他们将这一发生在全世界范围内的大规模变化称之为什么。 

   这是对于从公开源代码哲学中能够获得无限利益的最好说明。尽管PC并不是通过使用公开源代码模型发展而来的，但它却是这样一个例子，即某种个人或者公司公开的技术可以加以克隆、提升和出售。在其最纯粹的形式上，公开源代码方案允许任何人参与到他们的开发商和商业操作上来。 

   无疑， Linux 是最为成功的例子。 

   在我那脏乱的赫尔辛基卧室里发源的东西，现在已经成为世界历史上最大的合作项目。它始于那些认为计算机湖代码应该自由地共享的软件开发者们所共同认可的一种观点，将一般公众许可――即反版权――作为运动的强有力的工具。它现在已经进化成为最佳技术的持续发展的一种方法。而且它还在进一步发展，获得了广泛的市场认同。把 Linux 作为网络器操作系统的做法，正在滚雪球般地在大众中扩散。 

   在这种观念的鼓舞下所发生的一切，证明了它自身作为一项技术正运作于市场中。 

   现在，公开源代码已经发展到超出了技术和商业领域。在哈佛大学法学院，拉瑞.莱锡格教授(现在斯坦福大学)和查尔斯.尼森教授已经将公开源代码模型引入了法学界。他们启用了公开法律项目，这一项目是依靠志愿律师和法学院学生，将他们的观点和研究结论放在项目网站上以帮助完善论据和大纲，以对美国版权法案形成挑战。他们的指导思想是：当最大量的法学思维聚集在一个项目上时，将会形成最强有力的论据，通过粘贴和再粘贴，文章会形成信息的海洋。该站点很好地概括了对传统方式的折衷：“我们在保密方面所推动的，我们预期在来源的浓度和论据的广度方面会重新夺得(将其意思在另一个领域中表达出来的话，那将是：如果有百万双眼睛来共同参与的话，则所有软件的缺陷都将消失)。 

   数年来学术研究是如何进行的，这一一直让人困惑，在众多领域里几乎没有几项是有意义的。想一想，通过在网上集思广益的方式可以在多大程度上加速疾病治疗方案的形成。或者，就某一任务而言，如果拥有最好的智囊团的话，则国际外交也能够加强。随着世界变得越来越小，随着生活和商业的节奏加快，以及随着技术和信息变得可能，人们意识到那种技术封闭方式和吝啬的方式正变得越来越过时。 

   公开源代码的理论基础就是：简单化。在操作系统这一情形里，源代码――即那些构成系统的程序指令――是自由的，任何人都可以改进它、改变它和利用它。但这些改进、改变和利用后的源代码也必须是可以自由获得的。项目不属于任何个人，而是属于每一个人。通过将其开放，会产生迅速和边疆的改进。比之于封闭起来开发，其结果会出得更快、更成功。 

   那正是我们开发 Linux 时所经历的。想像一下：你旁边是一个庞大的开发队伍，而不是一个以秘密小组形式组成的开发团队。潜在地拥有数百万更加聪明的头脑来参与同一项目，并且有同行评论过程的支持，啊，这力量简直是无以匹敌的。 

   人们第一次听说公开源代码的方式，听起来有些滑稽。这也就是为什么经过了这么多年以后它的优点才被人们所了解。开放源代码的“思想观念”并不是传播这一模式的动力，而是因为人们开始注意到一个显然的事实，那就是公开源代码是开发和提高最佳质量技术的最好方法。 

   现在这种方式也在逐渐赢得市场，而市场的成功才使公开源代码获得了最为广泛的接受。围绕着无数的增值服务已经创建了许多公司。当钱财滚滚而来时，人们开始相信公开源代码的魅力了。 

   其中一个有关公开源代码的最令人不解的迷，就是为什么会有这么多优秀的程序员（最近一次的统计表明大约有七十五万程序员在从事 Linux 的开发与改进）在毫无报酬的情况下会如此投入地工作？用一个词来概括这种动机的话，可以说是“目标”。在一个生存或多或少已经有保障的社会里，钱财并不是最大的激励因素。众所周知，当人们是由爱好和热情所驱使着的时候，往往能够将工作做得最好。对于剧作家、雕塑家和企业家是如此，对于软件工程师也是如此。公开源代码模式给人们提供了依靠兴趣与热情而生活的机会。享有乐趣以及与世界上最好的程序员一起工作，而不是与那些恰巧为他们的公司所雇佣的少数几个程序员一起工作，是一种无与伦比的享受。公开源代码开发者努力工作着以赢得他们同行的尊敬，那当然是一种高度有效的激励。 

   看起来比尔.盖茨并不理解这一点。可能他现在被他自己在 1976 年所提出的一个令人不愉快的带修辞色彩的问题所困惑：“你所需要做的一件事，就是防止别人写好用的软件。谁能够毫无报酬地做一项专业工作呢？”他在公开源代码程序员们写的一封信中再次提出了这一观点。 

   事实上，理解公开源代码现象的一种方式是：想像一下几个世纪以前，科学是如何被信仰所感知的（如今的情形如果不是这样的话，那就是被某些人所感知）。科学最初是被视为某种危险的、具有颠覆性质的以及是不允许从事的事情――基本上就是现在的软件公司有时候看待公开源代码的方式。正如科学的诞生并不是想要破坏宗教制度一样，公开源代码也并不被视为是要粉碎现有的软件体系。这只是想要开发出最好的技术，并看看这种技术可以达到何种程度。 

   科学本身并挣钱。创造所有财富的正是科学的辅助作用。对于公开源代码也是如此。它允许挑战现有商业的辅助行业的产生，这一点非常相似于科学的波浪前进对于教堂的挑战。你会发现一些小公司，例如 VA Linux，利用了公开源代码而突然能够与传统公司相竞争了。用伊萨克.牛顿爵士的话来说，那就是站在了巨人的肩膀上。 

   是的，随着公开源代码在世界经济中获得了动力，随着其开发者们获得了认可，他们也越来越被银行接受。公司们开始寻找信用清单，以便决定谁做出了最多的贡献。然后他们通知他们的人力资源部付出钱财与股票。 

   在前面一段中我曾经声明，钱财并不是最大的激发因素，是的，我现在并没有改变我的观点。但我必须指出，人微言轻对辛勤工作的报酬，钱财并不是一件坏事。当说到给我的宝马汽车的油箱加油时，有了钱财自然是更加容易。 

   正如科学自身一样，公开源代码的辅助作用是无穷无尽的。它正在创新出一直到最近都被人认为是不可能的事情，并且打开了许多未曾预料的新市场。有了 Linux 以及其他一些公开源代码项目，公司们就可以做出它们自己的版本，按它们自己的意愿来加以改变，这些若是以其他方式杰进行的话则是不可能的。意识到以下一点是很令人振奋的，通过 Linux 所做的一切事情在一开始就不是孤独无助的。 

   Linux现在在中国正在迅速成长。传统上，亚洲的软件开发主要是翻译美国或欧洲的软件。有一次在计算机分销商展览会上，一个小伙子走向我，想向我展示用在 Linux 上的加油泵软件，那一刻我很为他感到自豪。这是一个运行于 Linux 环境下的典型的加油泵软件，他想做个网页浏览器以便加油的顾客可以在等待油箱加满汽油的这三分钟时间里可以上网浏览CNN.com。他们也是站在巨人肩膀上。 

   人们正在利用诸如 Linux 之类的技术，尽管有时仅仅是为了做一个更好的加油泵，这一点是令人振奋的。那种创新最有可能发生 一个公司范围内，因为如果你是一个将 Linux 带入市场的公司的话，你将很显然地会步入这里，当然现在已经是服务器市场或者是高端桌面系统市场。因此它是嵌入设备式的 Linux 。它是运行于 Linux 的电话程控交换。这也就是何以会有数以十亿美元计的财富是来自于公开源代码。 

   这情形就像是让宇宙自己照顾自己一样。不控制技术，你也就不会限制其使用。你使人们可以获得它以及人们可以做出自己的决策――利用它作为他们自己产品和服务的启动桨。尽管在更大范围上说，大多数这类决策并没有多大意义，但它们实际上却运行得很好。我并不是在试图扩散 Linux ，而是希望人们能够获得 Linux 并让它自己扩散自己。而且这一原则并不仅仅适用于 Linux 。它还适用于一切开放的项目。 

   人们对于言论自由的需求并不会持有异议。它是人们可以用自己的生命来捍卫的自由。自由总是某种你必须用你自己的生命来捍卫的东西，但它并不是一开始就很容易能够做出的选择。对于公开源代码也是如此。你不得不做出决定，你要公开源代码。最开始这是一个很难采取的姿态，但是实际上最终创造了更强的稳定性。 

   想想政治。 

   如果将那些反对公开源代码的逻辑应用于政治中，则我们将总是会采取一党统治。显然，一党统治远远比我们现在的多党制更为简单，而后者是世界大多数国家所实行的公开政治体系。在一党制的情况下，你根本不用担心与其他人保持一致的问题，因为人们必须保持一致。如此推理我们可以得出结论，政府太重要了，以至于没有必要把精力浪费在妥协和开放上。不知道为什么将这一原理应用于政治与政府时，人们看出了其中谬误，然而应用于时却看不到。具有讽刺意味的是，在商业中开放会使人感到不安。 

   公司为了阻止公开技术而提出的廉洁是令人信服的。“生意可不是那样做成的”，管理者会如是说。公开技术感到害怕。人们惧怕变化，部分地是因为他们并不知道最终的结果会如何。通过维持现状，公司可以就其何去何从做出更好的判断，而有时候那比获取巨大成功还重要。 

   正是这些公司，他们需要的是可以预料的成功，而不是不可预料的真正的、真正的、真正的成功。 

   对于一个公司而言，将现存的产品变成公开源代码产品并不很容易，其中存在着大量棘手的问题。首先，经历了数月或数年的过程，它才开发了该产品，公司已经积累了大量的内部知识。这类内部知识产权是公司的支柱。组织并不愿意放弃其赖以生存的知识产权，但也正是这一内部知识的存在，给外来者们设立了障碍。这种障碍打击了他们参与进来的积极性。 

   然而我已经看到了不少公司从封闭转变到开放。其中的一个故事便是Wapit公司。它是一家为各种交互式设备设立服务并提供基础设备支持的芬兰公司。这一项目涉及公司的墙壁电话式网络服务器。对于他们而言，开放他们的软件的源代码的决策是具有最完美的意义的决策。他们想建立自己的服务业务，但他们首先必须建立自己的基础设施，那就需要编写大量的软件。这必然是很不妙的。因此他们不是把让别人获得他们的知识产权视为一种决策，而是以这种方式来看待这一问题：编写软件花费了大量的工程师的时间，但它却并不是从公司固有的资源中创立的某种有价值的东西。 

   有些事是按照Wapit公司的意愿来进行的。首先，它并不是一个很大的工程。其次，公开源代码的决定是在公司建立早期阶段就已经做出了的。管理部门推理认为，它拥有内部资源来开发产品，但它希望更进一步开发出比原有内部资源更多的东西。这也决定了公开源代码是将工作分析程序更进一步作为其他人从事工作的标准的一种更强大的方式。 

   在这场博弈的早期阶段，公司曾向我征求意见。我告诉他们需要克服在内部作出决策的冲动。我建议如果他们开会来商量决策的话，那些会议不应对外封闭。将决策过程维持在公司内部，他们将会冒把公司与外部世界孤立起来的危险。那些公司外部的人们将难以穿越公司的网络。那是一个公司环境的建立和维持公开源代码项目的主要问题。对于公开源代码，光嘴上说说很容易的。它可能会在无意识中堕落为一个两层社会：“我们”与“他们”。大量的决策是以一种简单的方式来进行的――坐在餐厅桌上讨论选择余地或设计一次市场调查，而不是将讨论对外部开放。外部的那些有着很好的意见的人们从根本上被这一事实所否定了，即决策已经在公司的餐厅里决定了。 

   这也是当时困扰着网景公司的其中一个问题。那是在紧接着1998年春天，公司一个非常具有先兆性的开放其下一代网络浏览器源代码（被称为Mozilla）的几个月时间。公司真正实现其开放源代码的承诺是花了很长时间的。这变成了网景内部人的阵营，这些人并不接受外来的小补丁程序。公司里每个人都彼此认识。而且，即使他们不是实际围坐在咖啡厅里进行决策的话，那也会是在一个让内部人感觉彼此靠得很近的虚拟的咖啡厅里。结果，不但外界没有把网景的某商业项目开放代码视为第一次伟大的经历，反面产生了负面的新闻报道。当有关其内部决策的消极的话传出去时，网景公司再也无法熟视无睹了，于是他们将源代码向外部人员开放了。现在，这一项目看来更具有活力。 

   Sun系统公司也在以它自己的方式，试图将公开源代码一事提上议事日程。 

   当人们第一次听说开放某一现存的商业项目的可能性时，他们趋向于提出同样的问题。其中一个问题是：公司内部人员将如何看待从事一项外部人员的生产工作的可能性，而这一由外部人员所从事的生产工作比他们自己的工作做得还好，而且外部世界也能看到这一点。我以为他们应该对此感觉良好，因为他们即使不用做大多数工作也依然能够获得报酬。就这一点而言，公开源代码――或公开任何这类事情――对他们来说是无可原谅的，它显示出了谁能将工作完成，谁能做得更好。你无法向管理者隐瞒你的无能。 

   公开源代码是利用外部资源的最佳方式，然而你依然需要有人在公司内部工作，以便追踪公司的需求。这个人甚至可以不是项目的领导者。 

   事实上，如果外部的某个人来无偿地代替这一职责的话，对于公司而言可能是有好处的。如果外部的某个人做得更好，那自然是好事。但问题在于，外部人员也可能将项目引导入一个并不满足公司要求的方向。因此公司自己来负责需求。项目的开放使公司有可能缩减自己的资源，但那并不意味着它没有本地资源可以利用。项目可能扩展到比它自己单一一个公司时更大的程序。外部资源使得公司成为一个更加便宜、更加完善和更加平衡的系统。当然还存在着另外一方面问题：这一系统不再仅仅将公司需求考虑进去，它实际上还考虑了顾客的需求。 

   可能在整个过程中最令人感到烦恼的是放弃了自己的控制，不得不接受一个事实，即外部可能实际上做得更好。 

   另一个困难是在公司内部找到一个强有力的技术领导。必须是这样一个人，即每个人都在两个层面上相信他――技术层面与政治层面。这个人必须是这样一个人，即他能够认识到这一事实，项目从一开始就有可能会失败。这一领导不是试图隐瞒这类问题，恰恰相反，他必须能够说服每一个人，最好的办法就是返回去开始，这意味着极大的麻烦。这并不是人们想听到的信息。然而，它来自于一个受人尊敬的人之口，它将是人们愿意接受的信息。 

   考虑到办公室政治的特点和公司典型的运作方式，他必须是一个具有相当强的人格魅力的人。 

   技术领导人应该是喜欢以电子邮件的方式工作并且没有偏袒之心的一个人。我并不想使用“联络”这个字眼，因为那意味着存在两个不同的阵营――内部阵营和外部阵营。那并不是应有的方式。这一技术领导人从开放源代码的公司获得。他知道，任何其他人也都知道，他并不是按照公司相应的职位来获得报酬，他是因为做项目而获得报酬。将这一领导与公司太密切地联系在一起是很危险的。人们可能相信他或她的技术能力，但未必相信其非技术方面的判断。 

   公司内部是否有人可以充当外交官？ 这就像是说“给我找一个诚实的人”。 

   这就是为什么在过去数年间，我竭力试图避免与生产 Linux 产品公司有瓜葛。我信任我自己（嗯，我确实信任我自己）。但那还不够，我还得向所有其他人清楚地表明，我实际上是值得依赖的。这一点变得越来越关键了，因为现在钱财正在成为现实。周围有如此多的钱财滚滚而来，人们开始质疑你的动机了。对于我而言，我一直被认为是中立者这一点对我是有利的。你可能无法想象对我来说维持这一中性立场有多么重要。它使我坐立不安。 

   好了，你是对的，我应该停止鼓吹。 

   公开源代码并不是对于每个人、每个项目或者每个公司都适用的。但是，人们对于 Linux 的成功观察得越多，他们就越能够意识到，这并不是一个喜欢空想而又无知的高中生的激昂演说。 

   开放一切事物，就会产生各种可能性。 

   五年前，一位记者曾经就公开源代码的问题对我提问。自那以后，我就一直在谈论公开源代码。过去你不得不解释，并要解释清楚其重要意义是什么。坦白地说，这就像是一次无穷无尽的艰苦跋涉。像是在泥潭中跋涉。 

   现在人们理解了。 

.. _P41:

--------------------------------------------------------
5、名声与财富  
--------------------------------------------------------

   “名声对你有何负担？”这是一些人会问起我的。我告诉你们，所谓的“负担”根本就不是真正的负担。出名是很有趣的，对此，那些不以为然的出名人士则是尽量感觉良好，使没有出名的普通人士觉得他们确实状况良好。人们认为你对于自己的名声会很谦恭，会抱怨着它如何毁坏了你的个人生活。 

   正视它吧，每个人都梦想出名，梦想富裕。 

   我知道我就是这样的。当我是一个青少年时我就希望自己会成为一位著名的科学家。比如阿尔伯特·爱因斯坦，或许更出色一些。谁不是这样想的呢？如果做不了科学家的话，那么就去做一名赛车手，或者一名摇滚歌星。要不就去做特雷莎嬷嬷，或是美国总统。 

   实际上，达到自己既定的目标绝不是艰难无比的。是的，我可能成不了阿尔伯特·爱因斯坦，但是我觉得很舒坦。因为自己实际上已经取得了显著的成绩，已经做了一些有意义的事情。为此而受到大家的认可，反而使整个事情变得更好。因此下次你听到某人抱怨自己的名声和财富时，你不用理他们。他们之所以会这样是因为这正是你所设想的。 

   因此所有这一切都很好？当然不是。 

   成为知名人士当然也有不好的一面。我走在大街上并没有人会认为我（至少并不是很频繁地被人认出），然而我所收到的大量的电子邮件里会偶尔掺杂着几封令人难以回答又不能不回答的邮件，比如某人要你给你所从未见过的他的父亲写悼词的话，你又能说些什么呢？对于那封电子邮件我从未回复，对此我现在依然觉得有些内疚。对于某些人来说，那是一件很重要的事情，对我而言这一切最终却成了麻烦事情。 

   或者，如果有人要求你给某个会议定个基调，而你并没有时间或者你并不愿意这么做的话，你又该如何告诉人家呢？你如何使人意识到你很久以前就已经通过电话留言收听信息了，同时又不能表现出一副粗心的样子？终究你会是什么样子呢？我最终并不能对每个问题都给予同样的考虑。 

   当然，最终仅仅说个“不”字变得非常容易。或者忽略那些请求：我喜欢电子邮件的众多理由之一是，它如此方便又如此容易被忽略――我每天都收到数百封电子邮件，再多一封又何妨？迄今为止，媒介其实不过是这样一种东西，如果将其从人们周围去掉的话，你就很少有足够多的人使你因对他的忽视而感到内疚。这样的事情确也发生（参见上文），不过并不是很频繁罢了。而且甚至当你并没有忽略他，而只在电子邮件上说了个“不”字时，那也比你在电话里对某人说“不”字容易多了。 

   这个问题从根本上说，是人们对知名人士最终所拥有的期望过高。事实显然是不可能真正达到所有期望的。这部分地也是使得写这本书成为一种非常令人头疼的经历――试着写一本比较个人化的书，而同时又不希望让那些指望从书中读到一些新东西的人们感到失望。 

   有些人的期望完全是愚蠢的。我经常会有这样一种感觉，一些人期望我成为当代的僧侣孤独地过着一种节俭的生活。所有这些仅仅因为我认为使 Linux 成为开放式的体系可以在互联网上自由获得是一个好主意，也因为我对于软件的使用没有采取传统的商业方式。我不得不说，我是自觉那样做的。而且对于以下事实也是相当坦然的：我实际上是喜欢花钱的，我最终升级了我那辆老庞帝亚克汽车以便获得更有趣的东西。 

   那辆庞帝亚克汽车没有任何问题，它是一辆好车，它也可能是全美国最为普通的汽车，一些记者们觉得这一点是很有趣的，我居然会有一辆如此使人难堪的普通汽车。天哪，它甚至不是一辆日本汽车！ 如果我承认我花了数个小时为我的下一辆汽车――一辆很不实用的宝马Z3的恰当颜色而苦思冥想时，人们会失去所有对我的尊重吗？记住，我这么做“仅仅是为了乐趣”。那辆汽车如果不是为了乐趣的话，的确是完全无用的。 

   但这就是我的喜欢的方式。 

   这于是在“名声的负担”之后提出了第二个问题：“成功是否会毁掉李纳斯？或者 Linux ？”我是不是会变成一个以自我为中心的被别人宠坏了的坏小子？我写的有关自己的书仅仅是因为我喜欢看到自己的名字变成铅字，因为它的版税可以用来支付我新买的无用的汽车？ 答案当然是肯定的。 

   毕竟，如果一个人的生活哲学就是为了寻找乐趣，为了做一些有趣的事情，增加财富和提高名声，那你还能期待他怎么样呢？立刻成为一个慈善家？我想这是不可能的。将钱财捐入慈善事业这样的念头真的从未出现在我的头脑中，直到在写这本书的过程中，大卫实际上问起过我这个问题。我很茫然地看着他。“刮油脂”是当时我头脑中想到的第一件事。很显然，我并不是天生就有很强的财政责任能力的。 

   成功是否改变了我对事物的看法？确实如此。 

   关于李纳斯本人的情形也同样是对的。事情改变了，再声称事情没变化并不能够改变事实。 Linux 已经不再是五年前的那场运动了，李纳斯也不是那时候的李纳斯了。使得我对于开发 Linux 有如此强烈兴趣的部分原因正是由于这一事实，即 Linux 已经不是从前的 Linux 了，新问题总在不断地出现。它们并不仅仅是技术问题，也有关于在成功面前 Linux 的全部意义是如此改变的问题。若非如此，生活将会变得很无聊。 

   因此我不是使用“毁掉”这个字眼，我便喜欢说成是商业成功已经使 Linux 和我本人变得“不同”了。我无法定夺是否该用“成长”二字――我以为有了两个孩子会或多或少使事情有些不同――但也仅仅是不同而已。在许多方面变得更好了，然而也更加不纯了。 Linux 过去仅仅是为技术人员所使用的，对于思维怪异者可谓是安全的天堂。一个纯粹的堡垒，在那里技术很重要，而在别处却不然。 

   现如今的情形却不再是如此了。 Linux 依然有奋斗目标很强的技术背景，它拥有数以百万计的用户。每个人都清楚地意识到这么一个事实，即你不得不更加小心地对待你所做的事情。时间的兼容性突然也成了一个因素――二十年后的某一天，也许会出现某个人，说：够了就是够了！于是开始开发他自己的操作系统，命名为“Fredix”或其他什么，而不再有任何历史包袱。那也正是应该如此的事情。 

   然而使我感到无比自豪的是，即使当“Fredix”出现了，事情也不可能再和以前一样。不说别的， Linux 所做的事情是让人们意识到了一种新的做事方法，意识到了公开源代码实际上是使得人们能够在别人的基础上从事自己的开发。公开源代码已经存在了很长的时间，但 Linux 所做的一切是将这一思想深入到公众的意识中去。因此，当“Fredix”出现时，它没必要再从零开始起步。 

   因此，世界已经变得更好一点了。 

   几乎是在我们开始撰写这本书的一年后，李纳斯和我在一个星期五的晚上去了赛车场和球场，这个地方我们曾经在数月前相互比赛过。这一次，李纳斯在两项运动上都使我一败涂地：他车开得快，击球也远比我漂亮。后来，在一家土耳其餐馆吃饭时，我将自己糟糕的表现归因于一个非常令人沮丧的工作日。他看着我，说： “你还得再坚持三个月。” 

   “为什么？” 

   “那不正是你获得第一批优先认股权需要的时间么？” 我之所以提及这一段，是因为我们在上一次赛车球比赛的前一天晚上，李纳斯承认由于他的记忆力很差，他不得不经常让塔芙提醒他一些电话号码。突然之间，他现在能够记住某人的授权安排了，能够轻易地说出当我第一次告诉他这事的时候他在什么地方。一年以前，他似乎是喜欢作为一个心不在焉的教授这一角色的，对于任何没有字符理论或者他最初的计算机内存等重要的事情的细节不再细究。现在，他却令人难以置信地开始注意这些细节了。 

   退回到一月份，一天我们坐在我那破旧而温热的浴盆里，我开玩笑地提起，Marin镇的历史委员会一再要求我将这个浴盆捐给他们的博物馆。 

   八月份，他偶然说，“嗨，你打算什么时候捐献你的热水浴盆？”他并不需要借助于电子设备来提醒他某位客人的来访日期，他已经深入了解了朋友和共事者的个人细节，并且是以一种似乎不同于一年前的方式来进行的。事实上，他甚至知道我的朋友和共事者们的进展情况。而且，他为一个在写书问题上对我一张口就说“事实上，我不记得多少有关童年的事情了”的家伙来说，他似乎突然用魔法招回了记忆：“我是否曾经告诉过你，当我母亲要我去向我祖母再要一百芬兰马克以便可以购买我的第一块手表时，我有多么难堪吗？” 很清楚的是，这一年在李纳斯生命中是一个重要的年份。他已经改变了方式。去年十一月间，我们带着李纳斯全家驱车前往洛杉矶，就是在旅途上为本书的“生命的意义”章节作一个开场白那次，部分的原因是接受了芬兰驻洛杉矶总领事馆的邀请，去那里参观并住一晚上。启程前，李纳斯在圣克拉拉一家超市的餐酒柜台前经过时，他的目光有些迟滞。“帮我挑一瓶餐酒作为礼物吧，”他说，“我对于餐酒可是一窍不能。”十个月以后，在酒窖湾一家旅馆的小酒吧里，他知道我们应该挑选两瓶相似的苏维昂红酒中的哪一瓶，然后一边看着室内的武打电影一边品酒。我看见他甚至在喝酒前还转动着酒杯观察酒质。 

   接着来说说锻炼的问题。我第一次去李纳斯家里做客时，他似乎对于自己的身体和形体状况采取了一种怪异的骑士般的态度，一种“我的身体仅仅是在将我的辉煌思想四处散布”的一种哲学态度。李纳斯甚至以自己从未进行过锻炼而感到自豪。塔芙则显然不是这么认为的。她的空手道奖品摆了满满一书柜，她的增氧健身法录像带经常在电视里播放。看来这也是他们之间的争论焦点之一。“也许五年以后某个医生会告诉我必须减肥或者其他什么的。”那时候李纳斯是这么说的。 

   我喜欢锻炼，认为它应该是我们外出的一个重要组成部分。我想介绍他去冲浪，但这也只有在开始了摇摆木板的训练之后才有意义。五月初的一天下午，我们驱车前往半月湾，租了紧身潜水衣和冲浪板，李纳斯一想到要在寒冷的太平洋海水中跋涉就赶紧将自己裹得严严实实的，甚至在紧身衣的里面还穿了不少衣服。但是数分钟以后，令人惊讶的事情发生了：他高兴地在波浪中冲击。“真的是很棒。”他兴奋地说，就像一个五岁的孩子一样，猛地拍了我五巴掌。当然，也许十五分钟以后他会小腿抽筋的――因为他太久没有运动了，他自己也意识到了这一点――于是他就不得不停止了。他抽筋的时候，只好坐在海滩白色的浪花之上，显然无法站立起来。浪花一次又一次地冲刷着他。当时我想到的第一件事是：“他妈的，如果由于我这家伙出什么事的话，将会有上百万的电脑呆子们来找我的麻烦。” 他期望我们在本书的准备阶段可以做的一切事情：打网球，游泳比赛，在大美洲公园里进行各种恐怖的娱乐，打高尔夫球。甚至已经到了这种地步，在他看来，我给他安排的任何活动都比他坐下来对着我的磁带录音机说话要有趣得多。泥巴浴、在塔玛佩斯山中步行、打撞球，无论什么都行。“我可以经常打打网球。”他说，当时他在我家附近的球场上和我刚打完网球，正大汗淋漓。那次他不仅借了球拍还借了鞋。 

   后来，他买了双新鞋放在汽车的后备箱里，以备哪天打球时随时有鞋穿。 

.. _P42:

--------------------------------------------------------
6、生活的意义  
--------------------------------------------------------

   你是否曾经在一个温暖的夏夜里仰面朝天，掺望星空，认真地思考你为什么会在这里？你自己又身在何处？你打算在你的生命旅途中做些什么？ 是的，其实我自己也未曾如此思索过。 

   然而我却最终有了一套关于生命、宇宙和一切事物的理论。 

   或者至少其子集可以称之为“生命”理论。在本书的序言里，我已经向介绍过了这一理论。因为至此已经离题有一段时间了，所以我想还是由我自己来再做些解释吧。 

   我的理论并非是起始于某个明朗夜空中的星夜，沉浸于对浩瀚星空的感叹，它产生于我为一次演讲所做的准备，当你因为某种事情而闻名时，人们就假定你是可以依赖的，假定你能够对于数百万年以来一直困惑着人类的并不相关的知识产生深刻的洞察力。他们想要你在一群完全陌生的人面前共享你的这些洞察力。 

   不，这并没有太多的意义。我进入了 Linux 世界是因为我是一个划类，而不是因为我善于公共场合的表现，更不用说进行严肃的哲学讨论了。 

   但是生命中有几件事会如此有意义，因此我并没有什么可抱怨的。 

   返回到我们刚才的话题。 

   这一次，我收到邀请去加州大学伯克莱参加一个叫做“快触网”（Webrush）活动。正常情况下对此我甚至是不会予以考虑的，然而这次的邀请是通过芬兰驻美国领事馆送过来的。作为一个爱国青年（或者至少对因为讨厌冰雪而移居国外这事会感到一丝内疚），于是我便愚蠢地说道，“好吧，我会参加的”。 

   显然没有任何人期望我会谈论生命的意义这一话题，首先我自己是最不愿意的人。然而这个活动是关于网络化社会的，我去那里是作为网络人，还有芬兰的代表。由于诺基亚公司的缘故（任何一个芬兰人都会告诉你诺基亚是世界上最大、最好和最漂亮的公司），芬兰正以一种规模巨大的方式进入信息社会，“网络化的社会”正是它的状况。我们已经讨论了在芬兰移动电话甚至比人还多，目前的研究是找到合适的办法在人出生时就将手机用外科手术移植进去。 

   因此我就坐在家里，琢磨着关于通讯我该说些什么。哦，我忘了提及当时在座的其他人大多数是谈论技术的哲学家们。毕竟，这是在伯克莱。在伯克莱，他们非常看重两件事情：伯克莱的政治学和伯克莱的哲学。 

   因此真是糟糕。如果他们要哲学家们来谈论技术的话，那为什么不让一个像我这样的技术专家来谈论哲学？没有人有理由责怪我没有参加他们的狂欢。他们也许会认为我极其愚蠢（嗨，他们可能真的会这样做），但我是胆小鬼吗？ 这个另类并非如此。 

   因而我就在那里疯狂地思考，想找到一个合适的话题准备第二天好有个交待（我从未逃避演讲，除非实在是来不及了，因此每次活动的前一个深夜你通常会发现我正在为演说 一事而忧虑）。我在那里苦苦思索，试着思考“信息社会”及有关它的一切，有关诺基亚和所有其他通讯公司最终将会演变成什么样子。 

   我所能够做的最好的事情就是解释生命的意义。 

   实际上这并不仅仅是关于“意义”。更多地可以说是生命的法则，从此以后可以被称之为“李纳斯法则”。它相当于物理学上的热力学第二定律，但它不是用来解释宇宙的退化次序，而是有关生命的进化。 

   我在这里并非想要谈论达尔文所说的进化。那是不同的事情――我更感兴趣的是社会是如何进化的，我们是如何从工业社会进入到信息社会的：下一上又是什么，为什么会这样？我希望自己的这套理论通俗易懂，可以有足够的意义，以便能够在一次座谈的时间内说服听众。每个人都有自己的安排，那天我自己的安排是摆脱有两位著名哲学家在场的一个座谈讨论。 

   那么，社会为什么要进化？其驱动因素是什么？技术的发展驱动着社会前进这一观点大家能够达到共识吗？是否真的是蒸汽机的发明使欧洲开始进入工业社会，并最终通过诺基亚和移动电话将我们带入了信息社会？看起来那就是哲学家的看法，他们的兴趣主要集中于技术是如何改变社会的。 

   而我，作为一名技术专家，知道技术是不能够驱动任何事物的。是社会在改变着技术而不是相反。技术仅仅是限定了我们所能够做的事物的边界，以及能够以多大的成本来做。 

   技术，就像它所创造的设备一样，至少迄今为止是天生愚蠢的。它之所以令人感兴趣的是仰仗着你所能够用它来实现的东西，它背后的驱动力实际上是人类的需求和兴趣。 

   如今我们沟通和交流得到更多不是因为我们有了这样做的手段，而是因为人们从来就喜欢喋喋不休，他们想要交流，如果不存在通讯的手段，则人类就把它们创造出来。于是，便有了诺基亚。 

   因此，我的论点是，为了理解社会将向何处进化，你就必须去理解是什么东西真正驱动着人们。是金钱？是性？是什么在根本上使人们正从事着他们的工作？ 有一个很显然的激励因素，这个因素可能没有人会持有异议，那就是：生存。生存于是确定了生命的含义，毕竟――人是要生存的。这并不仅仅是盲目地跟从热力学第二定律，而是要在一个看起来对于构成生命基础的复杂与秩序充满了敌意的宇宙中生存。因此生存可谓是一号激励因素。 

   为了给其他的激励因素排序，我不得不考虑它们将如何与那简单的生存意愿相比较。问题不能是“你是否会为了钱财去杀人？”而是“你是否会为了钱财去死？”答案显然是不会。因此我们可以很有把握地将“金钱”从根本的激励因素列表中排除。 

   然而显然有些事情人们是愿意为之付出生命的。有许多关于人们――甚至是关于动物――的英雄故事，这些人们或者动物事实上愿意为了更大的事业而献出自己的生命。因此，仅仅生存这一因素并不能够解释推动我们社会发展的激励要素。 

   我在伯克莱的那次座谈会上提出的其他因素都是简单明白的，因此并不是非常有说服力。但至少有人对此表示赞同（哦，出于对芬兰领事馆的尊敬，他们还是很有礼貌的）。事实上，能让人们为之付出自己生命的东西并不多，但人的社会关系显然是其中之一。 

   足以让人们奉献生命的社会激励实例数不胜数，从文学中的罗密欧与朱丽叶（他们之所以死亡，并非由于他们想要诸如性这般愚蠢的事情，而是因为如果失去他们的特殊社会关系，他们宁愿死亡），到愿意为了自己的国家和家庭而付出生命的爱国战士。因此，我记下“社会关系”作为第二号激励因素。 

   第三个也是最后一个激励因素是“快乐”。这听起来有些陈腐，不过它毫无疑问地是一股非常强劲的力量。人们每天需要快乐，做仅仅是出于乐趣才做的各种事情。 

   快乐并不必然是陈腐的。它可以是下棋，或者是试图想出世界实际是如何运转的。它可以是对于新世界的好奇和探索。能够使一个人坐在末端捆有数千万磅计的烈性爆炸物质的火箭上的动机，仅仅是为了能从太空中看到地球。 

   对了，就是这三件事：生存、你在社会中的位置、还有快乐。 

   这三件事就是我们正在做着的事情。任何其他的事物，都是社会学家可能会称之为“突发行为”的东西，它们源于那些规则更为简单的行为模式。 

   然而事情不仅仅是“这就是激励人生活的事物”。如果情形是这样的话，那它们也就不会成为关于生命的理论了。令人感兴趣的，这三种激励因素有着内在的次序，而这一次序表明了生命的所在。事情并不仅仅是，我们人类被这三种事物所驱使――对于人类以外的其他生命行为也是如此。 

   这一次序是：生存；社会交往；寻找乐趣。 

   它也是进化的次序。这就是我们选择了“Just for Fun”作为本书名称的原因。 

   因为我们曾经所做的一切事情，似乎最终都是为了我们自己的乐趣。 

   你不相信我？ 看看我们是如何将动物划分为“低等”和“高等”的。它们都生存着。然而在进化的阶梯中你的位置越高，你就越有可能创建一种社会模式――虽然蚂蚁在非常低的进化阶梯中，也有非常严格的社会模式――并最终进化到享乐这一最高阶段。把玩猎物并不是蚂蚁经常会做的事情。但猫却经常这样。 

   是的，就拿性这样基本的（也是愉快的）事情来说吧。我并没有声称它本身是根本的激励因素之一，然而它却是在全部生命进化过程中相当根本的人类行为的一个极好例子。毫无疑问，性最初是始于纯粹生存目的的。毕竟，即使是植物也具有生存意义上的“性”，在数十亿年前的某个阶段，性可能是一件纯粹的事情，对于那些单细胞动物来说，这些单细胞在某一天会演化为异类和其他人类。 

   同样毫无疑问的是，性在很久以前就已经从一种纯粹生存现象进化到了一种相当社会化的现象了，不仅仅是在人类中间你会发现结婚仪式和许多为此目的准备的社会基础文化建构。事实上，人们每天都要消耗大量的能量，用于与物种再生产这一简单事情相关的社会求爱仪式上。 

   快乐？那也是，我保证是这样的。不仅仅是在人类中间如此，而且这很可能并非偶然，即这个星球上进化最高的物种，看来也同样是在充分利用性来寻找快乐这一方面最发达。 

   从生存到社会行为到快乐这一进化无处不在。 

   以战争为例：当获得水源的唯一途径是杀死那些想要水源而妨碍你的人们，这在很大程度上又回到了生存特性上了。很久以来就在社会中存在一种用来维持社会秩序的工具。美国有线新闻网（CNN）的到来，就标志着娱乐时代的到来。不管你喜欢还是不喜欢，这看来都是无法避免的进化。 

   文明化本身遵循同样的但更大的模式。起初，它是通过众多力量的合作来确保生存的一种方式。那对于人类来说并非有什么独特之处。大多数动物甚至植物的生活也创造了社团，目的是为了通过相互帮助来生存得更好。而令人真正感兴趣的是，社会本身如何从以生存为本进化到极端的社会化：所有的人类文明最终都在建造更大更好的公路和通讯频道，以便为了更好地社会化。 

   而最终，文明将变成以娱乐作为生活目标。看看罗马帝国――它所闻名的不仅仅是道路的建设和在欧洲建立的强大的社会秩序，使它闻名的是后来它在娱乐方面的辉煌发展。 

   再来看看今日的美国。有人会怀疑电影和电脑游戏行业不是在将美国引入娱乐社会么？不久以前这些东西还只是一个小市场，现在它们已经是世界上最富国家中的最大行业之一了。 

   而使得作为一个技术专家的我感到饶有兴趣的是，这一模式如何在我们创造的技术里重复着。现代技术的早期阶段我们称之为“工业时代”，然而它真正应该叫的是“技术生存时代”。技术，直到不久以前，几乎无一例外地都是为了生存得更好――能够织更好的布料和将商品运送得更快。这就是所有技术开发的初始动机。 

   我们将当前这一时期称为“信息时代”。这是一个巨大的转变。这是一个关于技术用来交流和传播信息――一种非常社会化的行为――而不仅仅是为了生存得更好的时代。网络化，事实上我们的许多技术都在开始朝这个方向努力，是我们这个时代的巨大路标：它意味着，在工业化国家里的人们已经开始将生存视为理所当然的一件事情，进而突然之间，技术的第二个阶段变成了一个巨大而激动人心的阶段。利用技术不仅仅是为了生存得更好，它已经成为了社会生活中不可或缺的一部分。 

   当然，终极目标还不太。 

   经历了信息社会之后，就应该是娱乐社会了。在这个社会里，一天二十四小时的网络与无线通讯被称为是理所当然的，也就不再引人注意了。那是一个思科（Cisco）成为往事，迪斯尼（Disney）拥有世界的时代。一个也许在未来并不遥远的时代。 

   所有这些都意味着什么呢？也许并不意味着太多的东西。毕竟，这只是我的理论，假如它实际上并没有将你引入你应该做的事情上的话。它至多表明：“是的，你可以为事业而奋斗，然而最终，生活的终极目标是快乐。” 这一点确实在某种程度上解释了，为什么人们愿意和渴望在网络上从事 Linux 类型的项目。对于我，以及对于其他许多人而言， Linux 是一种能够同时给人满足两种激励的方式：把生存视 为既定的前提， Linux 实际上既能给人带来通过智力挑战实际的乐趣，又能实现人们共同参与创造它时感受到的社会激励。我们也许并没有多少机会面对面，然而电子邮件却远不止是一种干巴巴的信息交流方式――还有友谊的纽带和能够在电子邮件中形成的其他社会纽带。 

   这也有可能意味着，当我们与宇宙中的另一智能生命形式相遇时，他们的第一句话不太会是“带我去见你们的领导”。
   
   他们更可能说的是：“哥们，晚会正热闹着呢！”
   
   当然，也许我是错的。



Just for Fun
============
::

                                 Just for Fun

                     The Story of an Accidental Revolutionary

                                      by

                            Linus Benedict Torvalds

                                    2001

                        All Your Books Are Belong To Us !


                           http://c3jemx2ube5v5zpg.onion





                                 Just for Fun


                     The Story of an Accidental Revolutionary

                     Copyright © 2001 Linus Benedict Torvalds

                           Co-Author: David Diamonds

                     First Published 2001 by HarperBusiness

                     ISBN 0066620732 (ISBN13: 9780066620732)

   Once upon a time Linus Torvalds was a skinny unknown, just another nerdy Helsinki 
   techie who had been fooling around with computers since childhood. Then he wrote a 
   groundbreaking operating system and distributed it via the Internet—for free.

   Today Torvalds is an international folk hero. And his creation LINUX is used by 
   over 12 million people as well as by companies such as IBM.


   Now, in a narrative that zips along with the speed of e-mail, Torvalds gives a 
   history of his renegade software while candidly revealing the quirky mind of a genius. 
   The result is an engrossing portrayal of a man with a revolutionary vision, who
   challenges our values and may change our world.


Contents
========

*  ``Introduction: Post-its from a Revolution                  `` [PE01]_
*  ``Preface: The Meaning of Life I (Sex, War, Linux)          `` [PE02]_
*  ``Birth of a NERD                                           `` [PE03]_
*  ``I                                                         `` [PE04]_
*  ``II                                                        `` [PE05]_
*  ``III                                                       `` [PE06]_
*  ``IV                                                        `` [PE07]_
*  ``V                                                         `` [PE08]_
*  ``VI                                                        `` [PE09]_
*  ``VII                                                       `` [PE10]_
*  ``Birth of an OPERATING SYSTEM[1]                           `` [PE11]_
*  ``I                                                         `` [PE12]_
*  ``II                                                        `` [PE13]_
*  ``III                                                       `` [PE14]_
*  ``IV                                                        `` [PE15]_
*  ``VI                                                        `` [PE16]_
*  ``V: The Beauty of Programming                              `` [PE17]_
*  ``VII                                                       `` [PE18]_
*  ``VIII                                                      `` [PE19]_
*  ``IX                                                        `` [PE20]_
*  ``X: Minix vs. Linux                                        `` [PE21]_
*  ``XI                                                        `` [PE22]_
*  ``XII                                                       `` [PE23]_
*  ``King of the BALL                                          `` [PE24]_
*  ``I                                                         `` [PE25]_
*  ``II                                                        `` [PE26]_
*  ``III                                                       `` [PE27]_
*  ``IV                                                        `` [PE28]_
*  ``V                                                         `` [PE29]_
*  ``VI                                                        `` [PE30]_
*  ``VII                                                       `` [PE31]_
*  ``VIII                                                      `` [PE32]_
*  ``IX: Is the Linux Revolution Over?                         `` [PE33]_
*  ``By Scott Berinato, PC Week                                `` [PE34]_
*  ``X                                                         `` [PE35]_
*  ``XI                                                        `` [PE36]_
*  ``XII                                                       `` [PE37]_
*  ``Intellectual Property                                     `` [PE38]_
*  ``An End to Control                                         `` [PE39]_
*  ``THE AMUSEMENT RIDE AHEAD                                  `` [PE40]_
*  ``WHY OPEN SOURCE MAKES SENSE                               `` [PE41]_
*  ``FAME AND FORTUNE                                          `` [PE42]_
*  ``THE MEANING OF LIFE II                                    `` [PE43]_
*  ``Back Cover                                                `` [PE44]_


   To Tove and Patricia, Daniela, and Celeste. I always wanted to be surrounded by 
   young women, and you made it so.

   To Tia and Kaley. Boy do I feel blessed.


   This wouldn’t qualify as acknowledgments without the dropping of some important 
   names, so here goes:

      We acknowledge our editor, Adrian Zackheim, who caved in to our every demand; 
      Erin Richnow, the HarperCollins assistant editor who was more on top of this 
      project than we were; our agents, Bill Gladstone of Waterside Productions and Kris Dahl
      of ICM, who couldn’t have been speedier in the forwarding of our checks to us; 
      Sara Torvalds, who has the best backup memory on the Fennoscandia peninsula-and 
      operates in three languages-and William and Ruth Diamond, who read the
      original manuscript and kept repeating, “No, really, it’s good.”

      My heart was in my throat when he was growing up: How on Earth was he going 
      to meet any nice girls that way?

      -Anna Torvalds

.. _PE01:

Introduction: Post-its from a Revolution
========================================

   During the euphoria of the final years of the twentieth century, a revolution was happening among
   all the other revolutions. Seemingly overnight, the Linux operating system caught the world’s
   attention. It had exploded from the small bedroom of its creator, Linus Torvalds, to attract a
   cultish following of near-militant geeks. Suddenly it was infiltrating the corporate powerhouses
   controlling the planet. From a party of one it now counted millions of users on every continent,
   including Antarctica, and even outer space, if you count NASA outposts. Not only was it the most
   common operating system running server computers dishing out all the content on the World Wide
   Web, but its very development model—an intricate web of its own, encompassing hundreds of
   thousands of volunteer computer programmers—had grown to become the largest collaborative
   project in the history of the world. The open source philosophy behind it all was simple:
   Information, in this case the source code or basic instructions behind the operating system, should
   be free and freely shared for anyone interested in improving upon it. But those improvements
   should also be freely shared. The same concept had supported centuries of scientific discovery.

   Now it was finding a home in the corporate sphere, and it was possible to imagine its potential as
   a framework for creating the best of anything: a legal strategy, an opera.

   Some folks caught a glimpse of the future and didn’t like what they saw. Linus’s round,
   bespectacled countenance became a favored dart-board target within Microsoft Corporation,
   which was now faced with its first honest-to-goodness competitive threat. But, more often, people
   wanted to learn more about the kid who—if he did not start it all—at least jump-started it and
   was, in effect, its leader. The trouble was, the more successful Linux and open source became, the
   less he wanted to talk about it. The accidental revolutionary started Linux because playing on a
   computer was fun (and also because the alternatives weren’t that attractive). So when someone
   tried to convince him to speak at a major event by telling him that his millions of followers just
   wanted to at least see him, in the flesh, Linus good-naturedly offered to participate in a dunk-tank
   instead. That would be more fun, he explained. And a way of raising money.

   They declined. It wasn’t their idea of how to run a revolution.

   Revolutionaries aren’t born. Revolutions can’t be planned. Revolutions can’t be managed.

   Revolutions happen….

   ––David Diamond

   ::
      
      X-Authentication-Warning: penguin. transmeta.com:
      torvalds owned process doing-bs
      Date: Mon, 18 Oct 1999 14:12:27-0700 (PDT)
      From: Linus Torvalds torvalds@transmeta.com
      To: David Diamond <ddiamond@well.com>
      Subject: Ho hum..

      MIME-Version: 1.0
      I hope this is still your email address. I noticed that I didn’t have any
      contact information for you anywhere, probably because I’ve trashed your
      business card along with all the others, and because you’ve actually contacted
      me by phone much more than by email.

      I’ve thought a lot over the weekend, and if you’re interested, I think I’m
      getting more and more interested. Let’s cut a deal: If you think we can make a
      fun book, and more importantly if you think we can have fun making it, let’s go
      for it. You’d drag me (with family) camping and (without family) skydiving.

      Things that I wouldn’t ever do otherwise, just because I think I’m too busy.

      Give me an excuse to do the things I haven’t done during the last three years
      even though all the opportunities are there… So maybe I wouldn’t read a book
      about me when it’s done, but at least I’d have fun with it.

      Linus
      … And sometimes, revolutionaries just get stuck with it.

      Linus Torvalds

Acknowledgments
---------------

   The authors wish to acknowledge the following establishments for their role in creating this
   book––or at least making it fun (None of these places have paid us any money. Which is a damn
   shame.)

   FM 107.7 the Bone. Classic Rock That Rocks; Zelda’s Restaurant, Capitola; Kiva Retreat
   House, Santa Cruz; Hagashi West Restaurant, Palo Alto; Malibu Grand Prix, Redwood Shores;
   Bodega Bay Lodge, Bodega Bay; Saturn Café, Santa Cruz; Café Marmalade, Ross; Half Moon Bay
   Boardshop, Half Moon Bay; Santa Cruz Billiards, Santa Cruz; Café Reyes, Point Reyes Station;
   Califo Sushi and Grill, San Jose; Santa Clara Golf and Tennis Club, Santa Clara; Ideal Bar and
   Grill, Santa Cruz; Silver Peso Bar (“Where Janis Played”), Larkspur; Rosie McCann’s Irish Pub
   and Restaurant, Santa Cruz; Mayfl Inn, San Rafael; Grover Hot Springs State Park, Markleeville;
   Left Bank Restaurant, Larkspur; Potrero Brewing Company, San Francisco; The Rice Table, San
   Rafa Ross Valley Swim and Tennis Club, Kentfield; Fallen Leaf Lake Marina, Fallen Leaf Lake;
   Peer’s Coff and Tea, Greenbrae; Hawthorne Lane Restaurant, San Francisco; Indian Springs
   Resort, Calistoga; Samurai Sushi, Sausalito; Blowfi Sushi, San Francisco; Paramount’s Great
   America, Santa Clara; Robata Grill Sushi, Mill Valley; Buckeye Roadhouse, Mill Valley; Barnes
   and Noble, San Jose; Sushi Ran, Sausalito; 23 Ross Common, Ross; KFOG-104.5 FM; Rutherfo
   Grill, Rutherfo In-N-Out Burger, Santa Rosa; Seto Sushi, Sunnyvale.


.. _PE02:

Preface: The Meaning of Life I (Sex, War, Linux)
================================================

   SETTING: This book has its origins in a late-model black Ford Expedition in the southbound
   lanes of Interstate 5, somewhere in California Central Valley. Linus and Tove Torvalds and their
   young daughters, Patricia and Daniela, are accompanied by an interloper as they travel 351 miles
   to Los Angeles, where they will visit the zoo and an IKEA outlet.

   DAVID: Now I’ve got a fundamental question to think about, and it’s sort of important. What do
   you want to get across in this book?

   LINUS: Well, I want to explain the meaning of life.

   TOVE: Linus, did you remember to fill the gas tank?

   L: I have a theory about the meaning of life. We can, in the first chapter, explain to people what
   the meaning of life is. We get them hooked that way. Once they’re hooked and pay for the book,
   we can just fill up the rest with random crap.

   D: Oh yes. That sounds like a plan. Someone told me that since the dawn of man there have been
   two lingering questions. One:
   “What is the meaning of life?”

   and Two:
   “What can I do with all this pocket change that accumulates at the end of the day?”

   L: I have the answer to the first one.

   D: What’s the answer to the first one?

   L: Basically it is short and sweet. It won’t give your life any meaning, but it tells you what’s going
   to happen. There are three things that have meaning for life. They are the motivational factors for
   everything in your life––for anything that you do or any living thing does: The first is survival, the
   second is social order, and the third is entertainment. Everything in life progresses in that order.

   And there is nothing after entertainment. So, in a sense, the implication is that the meaning of life
   is to reach that third stage. And once you’ve reached the third stage, you’re done. But you have to
   go through the other stages first.

   D: You’re going to have to explain this a little more.

   PATRICIA: Papa, can we stop for chocolate ice cream? I would like to have some chocolate ice
   cream now!

   T: No, sweetie. You have to wait. When we stop to go potty you can have ice cream.

   L: I’ll give you a few examples so you can kind of get the idea. And the obvious one is sex. It
   started out as survival, but it became a social thing. That’s why you get married. And then it
   becomes entertainment.

   P: Then I have to go potty.

   D: How is it entertaining?

   L: Okay, I’m talking to the wrong person. How about this one?

   D: No, go back to sex.

   L: It’s also on another level…
   D: (to self): Oh, entertaining to participate in as opposed to watch. Okay, I get it.

   L: … On another level, if you look at the illusion of sex in a biological sense––How did sex come
   about in the first place? It was survival. It wasn’t entertaining initially. It was just getting
   together. Okay, let’s drop the sex part.

   D: No, no. I think this is a whole chapter.

   L: Let’s pick war instead. It’s obvious it started as survival, because there’s a big guy between you
   and the water hole. Next, you need to fight the guy for a wife. And then war becomes a social-
   order thing. That’s how it was long before the Middle Ages.

   D: War as a means of establishing social order.

   L: Right. And also a means of establishing yourself as part of the social order. Nobody cares about
   social order, per se. Everybody cares about his own place in that order. It’s the same thing whether
   you’re a hen in a pecking order or you’re a human.

   D: And now war is for entertainment?

   L: That’s right.

   D: Maybe for people watching it on TV. For them it might be entertaining.

   L: Computer games. War games. CNN. Well, the reason for war can often be entertaining. But
   also the perception of war is entertaining. And the reason for sex is often entertaining. Sure, the
   survival part is still there, especially if you’re Catholic, right? But even if you’re Catholic,
   sometimes you probably think about the entertainment part, too. So it doesn’t have to be plain
   entertainment. In everything, a piece of the motivation might be survival, a piece might be social
   order, and the rest might be entertainment. Okay, look at technology. Technology came about as
   survival. And survival is not about just surviving, it’s about surviving better. You get a windmill
   that draws water from the well…
   D: Or fire.

   L: Right. It’s still survival, but it hasn’t progressed to social order and entertainment.

   D: Now how has technology progressed to social order?

   L: Well, actually most of industrialization has been really just survival, or surviving better. In
   cars, that meant making faster cars and nicer cars. But then you get to technology in a social
   sense. That brings us the telephone. And TV, to some degree. A lot of the early TV stuff was
   basically for indoctrination. Radio, too. That’s why countries often started investing in radio, for
   the social-order side of it.

   D: Establishing and maintaining social order…
   L: Right, but then it just goes past that. Today, TV is obviously used mostly for entertainment.

   And right now you see all these wireless mobile phones. It’s basically social. But it’s moving into
   entertainment, too.

   D: So what’s the future of technology? We’ve gone beyond the survival stage and now we’re in
   the social stage, right?

   L: Right. All technology used to do was make life easier. It was all about getting places faster,
   buying things cheaper, having better houses, whatever. So what’s so different about information
   technology? What comes after the fact that everybody is connected? What more is there to do?

   Sure, you can connect better, but that’s not fundamentally different. So where is technology taking
   us? In my opinion, the next big step is entertainment.

   D: Everything eventually evolves into entertainment…
   L: But this also explains why Linux is so successful, to some degree. Think of the three
   motivational factors. First is survival, which people with computers take for granted. Quite
   frankly, if you have a computer, you’ve already bought your food and stuff like that. The second is
   for social order, and the social side is certainly motivational for geeks sitting inside their own
   cubicles.

   D: You said something really smart at Comdex, something about Linux development being a
   global team sport. So, you basically made that happen, dude.

   L: Linux is a great example of why people love team sports, and especially being part of a team.

   D: Yeah, sitting in front of a computer all day, you’d probably want to feel like you were part of
   something. Anything.

   L: It’s social, like any other team sport. Imagine people on a football team, especially in high
   school. The social part of Linux is really, really important. But Linux is also entertainment, the
   kind of entertainment that is very hard to buy with money. Money is a very powerful motivational
   factor when you’re at the level of survival, because it’s easy to buy survival. It’s very easy to
   barter for those kinds of things. But suddenly when you’re at the level of entertainment, money…
   D: Money is useless?

   L: No, it’s not useless, because obviously you can buy movies, fast cars, vacations. There are a lot
   of things you can buy that can help make your situation better.

   T: Linus, we need to change Daniela. And Patricia has to go potty. I need a cappuccino. Do you
   think we can find a Starbucks here? Where are we?

   D: (looks up): Based on the odor, I think we’re near King City.

   L: Now all this is on a bigger scale. It’s not just about people, it’s about life. It’s like the Law of
   Entropy. In this Entropy Law of Life, everything moves from survival to entertainment, but that
   doesn’t mean that on a local scale it can’t go backward, and obviously it essentially does. Things
   just disintegrate sometimes.

   D: But as a system, everything is moving in the same direction…
   L: Everything is moving in the same direction, but not at the same time. So basically sex has
   reached entertainment, war is close to it, technology is pretty much there. The new things are
   things that are just survival. Like, hopeful space travel will at some point be an issue of survival,
   then it will be social, then entertainment. Look at civilization as a cult. I mean, that also follows
   the same pattern. Civilization starts as survival. You get together to survive better and you build
   up your social structure. Then eventually civilization exists purely for entertainment. Okay, well,
   not purely. And it doesn’t have to be bad entertainment. The ancient Greeks are known for having
   had a very strong social order, and they also had a lot of entertainment. They’re known for having
   had the best philosophers of their time.

   D: Okay, so how does this tie in to the meaning of life?

   L: It doesn’t really. It just says that… that’s kind of the problem here.

   D: This is the little link you’re going to have to think about.

   P: Mama, look at the cows.

   L: So, if you know that life is all about this progression, then obviously your purpose in life is to
   make this progression. And the progression is not one single progression. Everything you do is
   part of many progressions. It can also be, “What can I do to make society better?” You know that
   you’re a part of society. You know that society is moving in this direction. You can help society
   move in this direction.

   T: (holding nose): It smells horrible here.

   L: So what this builds up to is that in the end we’re all here to have fun. We might as well sit
   down and relax, and enjoy the ride.

   D: Just for fun?


.. _PE03:

Birth of a NERD
===============

.. _PE04:

I
-

   I was an ugly child.


   What can I say? I hope some day Hollywood makes a film about Linux, and they’ll be sure to
   cast somebody who looks like Tom Cruise in the lead role—but in the non-Hollywood version,
   things don’t work out that way.

   Don’t get me wrong. It’s not as if I looked like the Hunchback of Notre Dame. Envision instead
   large front teeth, so that anybody seeing a picture of me in my younger years gets a slightly
   beaverish impression. Imagine also a complete lack of taste in clothes, coupled with the
   traditional oversized Torvalds nose, and the picture starts to complete in your mind.

   The nose, I’m sometimes told, is “stately.” And people—well, at least in our family—say that
   the size of a man’s nose is indicative of other things, too. But tell that to a boy in his teens, and he
   won’t much care. To him, the nose only serves to overshadow the teeth. The picture of the profiles
   of three generations of Torvalds men is just a painful reminder that yes, there is more nose than
   man there. Or so it seems at the time.

   Now, to add to the picture, start filling in the details. Brown hair (what here in the United
   States is called blond, but in Scandinavia is just “brown”), blue eyes, and a slight shortsightedness
   that makes wearing glasses a good idea. And, as wearing them possibly takes attention away from
   the nose, wear them I do. All the time.

   Oh, and I already mentioned the atrocious taste in clothes. Blue is the color of choice, so that
   usually means blue jeans with a blue turtleneck. Or maybe turquoise. Whatever. Happily, our
   family wasn’t very much into photography. That way there’s less incriminating evidence.

   There are a few photographs. In one of them I’m around thirteen years old, posing with my
   sister Sara, who is sixteen months younger. She looks fine. But I’m a gangly vision, a skinny pale
   kid contorting for the photographer, who was probably my mother. She most likely snapped the
   little gem on her way out the door to her job as an editor at the Finnish News Agency.

   Being born at the very end of the year, on the 28th of December, meant that I was pretty much
   the youngest in my class at school. And that in turn meant the smallest. Later on, being half a year
   younger than most of your classmates doesn’t matter. But it certainly does during the first few
   years of school.

   And do you know what? Surprisingly, none of it really matters all that much. Being a beaverish
   runt with glasses, bad hair days most of the time (and really bad hair days the rest of the time),
   and bad clothes doesn’t really matter. Because I had a charming personality.

   Not.

   No, let’s face it, I was a nerd. A geek. From fairly early on. I didn’t duct-tape my glasses
   together, but I might as well have, because I had all the other traits. Good at math, good at
   physics, and with no social graces whatsoever. And this was before being a nerd was considered a
   good thing.

   Everybody has probably known someone in school like me. The boy who is known as being
   best at math—not because he studies hard, but just because he is. I was that person in my class.

   But let me fill in the picture some more, before you start feeling too sorry for me. A nerd I may
   have been, and a runt, but I did okay. I wasn’t exactly athletic, but I wasn’t a hopeless klutz either.

   The game of choice during breaks at school was “brännboll”—a game of skill and speed in which
   two teams try to decimate each other by throwing a ball around. And while I wasn’t ever the top
   player, I was usually picked fairly early on.

   So in the social rankings I might have been a nerd, but, on the whole, school was good. I got
   good grades without having to work at it—never truly great grades, exactly because I didn’t work
   at it. And an accepted place in the social order. Nobody else really seemed to care too much about
   my nose; this was almost certainly, in retrospect, because they cared about their own problems a
   whole lot more.

   Looking back, I realize that most other children seem to have had pretty bad taste in clothes,
   too. We grow up and suddenly somebody else makes that particular decision. In my case, it’s the
   marketing staffs for high-tech companies, the people who select the T-shirts and jackets that will
   be given away free at conferences. These days, I dress pretty much exclusively in vendorware, so I
   never have to pick out clothes. And I have a wife to make the decisions that complete my
   wardrobe, to pick out things like sandals and socks. So I never have to worry about it again.

   And I’ve grown into my nose. At least for now, I’m more man than nose.


.. _PE05:

II
--

   It probably won’t surprise anyone that some of my earliest and happiest memories involve playing
   with my grandfather’s old electronic calculator.

   This was my mother’s father, Leo Waldemar Törnqvist, who was a professor of statistics at
   Helsinki University. I remember having tons of fun calculating the sine of various random
   numbers. Not because I actually cared all that much for the answer (after all, not many people do),
   but because this was a long time ago, and calculators didn’t just give you the answer. They
   calculated it. And they blinked a lot while doing so, mainly in order to give you some feedback
   that “Yes, I’m still alive, and it takes me ten seconds to do this calculation, and in the meantime
   I’ll blink for you to show how much work I do.”

   That was fascinating. Much more exciting than a modern calculator that won’t even break into
   a sweat when doing something as simple as calculating a plain sine of a number. With those early
   devices you knew that what they did was hard. They made it very clear indeed.

   I don’t actually remember the first time I saw a computer, but I must have been around eleven
   at the time. It was probably in 1981, when my grandfather bought a new Commodore VIC-20.

   Since I had spent so much time playing with his magic calculator, I must have been thrilled—
   panting with excitement to start playing with the new computer—but I can’t really seem to
   remember that. In fact, I don’t even remember when I got really into computers at all. It started
   slowly, and it grew on me.

   The VIC-20 was one of the first ready-made computers meant for the home. It required no
   assembly. You just plugged it into the TV and turned it on, and there it sat, with a big all-caps
   “READY” at the top of the screen and a big blinking cursor just waiting for you to do something.

   The big problem was that there really wasn’t that much to do on the thing. Especially early on,
   when the infrastructure for commercial programs hadn’t yet started to materialize. The only thing
   you could really do was to program it in BASIC. Which was exactly what my grandfather started
   doing.

   Now, my grandfather saw this new toy mainly as a toy, but also as a glorified calculator. Not
   only could it compute the sine of a number a lot faster than the old electronic calculator, but you
   could tell it to do this over and over automatically. He also could now do at home many of the
   things he had done with the big computers at the university.

   And he wanted me to share in the experience. He also was trying to get me interested in math.

   So I would sit on his lap and he would have me type in his programs, which he had carefully
   written out on paper because he wasn’t comfortable with computers. I don’t know how many other
   preteen boys sat in their grandfather’s room, being taught how to simplify arithmetic expressions
   and type them correctly into a computer, but I remember doing that. I don’t remember what the
   calculations were all about, and I don’t think I had a single clue about what I really did when I did
   it, but I was there, helping him. It probably took us much longer than it would have taken him
   alone, but who knows? I grew comfortable with the keyboard, something my grandfather never
   did. I would do this after school, or whenever my mother dropped me off at my grandparents’
   apartment.

   And I started reading the manuals for the computer, typing in the example programs. There
   were examples of simple games that you could program yourself. If you did it right you wound up
   with a guy that walked across the screen, in bad graphics, and then you could change it and make
   the guy walk across the screen in different colors. You could just do that.

   It’s the greatest feeling.

   I started writing my own. The first program I wrote was the first program everybody else starts
   out with:
   ::

      10 PRINT “HELLO”

      20 GOTO 10

   This does exactly what you expect it to do. It prints out HELLO on the screen. Forever. Or at least
   until you kill it out of boredom.

   But it’s the first step. Some people stop there. To them, it’s a stupid exercise because why
   would you want to print out HELLO a million times? But it was invariably the first example in the
   manuals that came with those early home computers.

   And the magic thing is that you can change it. My sister tells me that I made a radical second
   version of this program that didn’t just write out HELLO, but instead wrote SARA IS THE BEST
   on the screen, over and over again. Ordinarily I wasn’t such a loving older brother. Apparently the
   gesture made a big impression on her.

   I don’t remember doing it. As soon as I wrote a program I would forget about it and move on to
   the next one.


.. _PE06:

III
---

   Let me tell you about Finland. Sometime in October the skies turn an unpleasant shade of gray,
   and it always looks as if it will either rain or snow. You wake up every day to this gloominess of
   anticipation. The rain will be chilly and it will rinse away any evidence of summer. When the
   snow comes, it has that magical quality of making everything bright and painting the place with a
   veneer of optimism. The trouble is, the optimism lasts about three days but the snow remains for
   month after bone-numbingly cold month.

   By January you sort of wander around in a shadowy daze, if you choose to go outside. It’s a
   season of moist, bulky clothes and slipping on the ice hockey rink they created by hosing down the
   grammar school field you traverse as a short-cut to the bus. On Helsinki streets it means dodging
   the occasional tottering matron who was probably somebody’s gracious grandmother back in
   September but by 11 A.M. on a Tuesday in January is weaving on the sidewalks from her vodka
   breakfast. Who can blame her? It will be dark again in a few hours, and there isn’t a lot to do. But
   there was an indoor sport that got me through the winter: programming.

   Morfar (the Swedish word for “Mother’s Father”) would be there much of the time, but not all
   the time. He doesn’t mind if you sit in his room when he’s away. You beg up the money for your
   first computer book. Everything is in English and it is necessary to decode the language. It’s
   difficult to understand technical literature in a language you don’t really know that well. You use
   your allowance to buy computer magazines. One of them contains a program for Morse code. The
   odd thing about this particular program is that it’s not written in the BASIC language. Instead, it’s
   written as a list of numbers that could be translated by hand to machine language—the zeros and
   ones that the computer reads.

   That’s how you discover that the computer doesn’t really speak BASIC. Instead it operates
   according to a much more simple language. Helsinki kids are playing hockey and skiing with their
   parents in the woods. You’re learning how a computer actually works. Unaware that programs
   exist to translate human-readable numbers into the zeros and ones that a computer understands,
   you just start writing programs in number form and do the conversions by hand. This is
   programming in machine language, and by doing it you start to do things you wouldn’t have
   thought possible before. You are able to push what the computer can do. You control every single
   small detail. You start to think about how you can do things slightly faster in a smaller space.

   Since there’s no abstraction layer between you and the computer, you get fairly close. This is what
   it’s like to be intimate with a machine.

   You’re twelve, thirteen, fourteen, whatever. Other kids are out playing soccer. Your
   grandfather’s computer is more interesting. His machine is its own world, where logic rules. There
   are maybe three people in class with computers and only one of them uses it for the same reasons.

   You hold weekly meetings. It’s the only social activity on the calendar, except for the occasional
   computer sleepover.

   And you don’t mind. This is fun.

   This is after the divorce. Dad lives in another part of Helsinki. He thinks his kid should have
   more than one interest, so he signs you up for basketball, his favorite sport. This is a disaster.

   You’re the runt of the team. After a season and a half, you use all sorts of nasty language to tell
   him you’re quitting, that basketball is his sport, not yours. Your new half-brother, Leo, will be
   more athletic. Then, too, he will eventually become Lutheran, like 90 percent of the Finnish
   population. That’s when Dad, the staunch agnostic, realized he might be a failure as a parent—
   something he suspected years earlier, when Sara joined the Catholic church.

   The grandfather with the computer isn’t really a jolly sort. He’s balding, slightly overweight.

   He literally is something of an absent-minded professor and kind of hard to approach. He’s just
   not an extrovert. Picture a mathematician who would stare out into space and not say anything
   while he was thinking about something. You could never tell what he was thinking about.

   Complexity analysis? Mrs. Sammalkorpi down the hall? I’m the same way—famous for zoning
   out. When I’m sitting in front of the computer, I get really upset and irritable if somebody
   disturbs me. Tove could elaborate on this point.

   My most vivid memories of Morfar take place not at his computer but at his little red cottage.

   In Helsinki it used to be common for people to keep a small summer place consisting of maybe a
   single thirty-foot by thirty-foot room. The little houses are on a tiny plot of land, maybe 150
   square feet, and people go there to tinker in their gardens. They typically have an apartment in the
   city and then this little place to grow potatoes or tend a few apple trees or cultivate roses. It’s
   usually older people because younger ones are busy working. These people get ridiculously
   competitive about whatever it is they are growing. That’s where Morfar planted my apple tree, a
   small sapling. Maybe it’s still there, unless it became so abundant that an envious neighbor snuck
   onto his property during the brief summer darkness and chopped it down.

   Four years after introducing me to computers, Morfar develops a blood clot in his brain and
   becomes paralyzed on one side. It’s a shock to everyone. He’s in the hospital for about a year and
   he’s the closest family you have, but it doesn’t affect you that much. Maybe it’s defensive or
   maybe it’s just because you’re so insensitive when you’re young. He is absolutely not the same
   person anymore and you don’t like going to see him. You go maybe every two weeks. Your
   mother goes more often. So does your sister, who early on assumed the role of the family social
   worker.

   After he dies, the machine comes to live with you. There isn’t any real discussion about it.


.. _PE07:

IV
--

   Let’s step back for a moment.

   Finland might be the hippest country on Earth right now, but centuries ago, it was little more
   than a stopover for Vikings as they “traded” with Constantinople. Later, when the neighboring
   Swedes wanted to pacify the Finns, they sent in English-born Bishop Henry, who arrived in the
   year 1155 on a mission for the Catholic church. Those proselytizing Swedes manned the Finnish
   fortresses to ward off the Russians, and eventually won against the empire to our East in the
   struggle for control. To spur population of the Finnish colony in the following centuries, Swedes
   were offered land and tax incentives. Swedes ran the show until 1714, when Russia took over for a
   seven-year interlude. Then Sweden won back its colony until 1809, when Russia and Napoleon
   attacked Finland; it remained under Russian control until the Communist Revolution in 1917.

   Meanwhile, the descendants of the early Swedish immigrants are the 350,000 Swedish speakers in
   Finland today, a group that represents about five percent of the population.

   Including my wacky family.

   My maternal great-grandfather was a relatively poor farmer from Jappo, a small town near the
   city of Vasa. He had six sons, at least two of whom earned Ph.D.’s. That says a lot about the
   prospects for advancement in Finland. Yes, you get sick of the winter darkness and taking off your
   shoes upon entering a house. But you can get a university education for free. It’s a far cry from
   what happens in the United States, where so many kids grow up with a sense of hopelessness. One
   of those six sons was my grandfather, Leo Waldemar Törnqvist, the fellow who introduced me to
   computing.

   Then there was my paternal grandfather. He was the fellow who concocted the name Torvalds,
   fashioning it out of his middle name. He was named Ole Torvald Elis Saxberg. My grandfather
   had been born fatherless (Saxberg was his mother’s maiden name) and was given the last name
   Karanko by the gentleman my great-grandmother eventually married. Farfar (“Father’s father”)
   didn’t like the guy, enough so he changed his name. He dropped the last name and added an “s” to
   Torvald on the theory that this made it sound more substantial. Torvald on its own means “Thor’s
   domain.” He should have started from scratch, because what the adding of an “s” does is destroy
   the meaning of the root name, and confuse both Swedish-and Finnish-speaking people, who don’t
   know how the heck to pronounce it. And they think it should be spelled Thorwalds. There are
   twenty-one Torvalds in the world, and we’re all related. We all endure the confusion.

   Maybe that’s why I’m always just “Linus” on the Net. “Torvalds” is just too confusing.

   This grandfather didn’t teach at a university. He was a journalist and poet. His first job was as
   editor-in-chief of a small-town newspaper about 100 kilometers west of Helsinki. He got sacked
   for drinking on the job with a little too much regularity. His marriage to my grandmother broke
   down. He moved to the city of Turku in Southwestern Finland, where he remarried and finally
   became editor-in-chief of the newspaper and published several books of poetry, although he
   always struggled with a drinking problem. We would visit him there for Christmas and Easter, and
   to see my grandmother, too. Farmor Märta lives in Helsinki, where she is known for making killer
   pancakes.

   Farfar died five years ago.

   Okay: I’ve never read any of his books. It’s a fact that my father points out to total strangers.

   Journalists are everywhere in my family. Legend has it that one of my great-grandfathers, Ernst
   von Wendt, was a journalist and novelist who was on the White side and arrested by the Reds
   during the Finnish Civil War that followed our independence from Russia in 1917. (Okay. I never
   read his books, either, and am told I’m not missing much.) My father, Nils (known to everyone as
   Nicke), is a television and radio journalist who was active in the Communist Party since he was a
   college student in the 1960s. He developed his political leanings when he learned about some of
   the atrocities committed against communist sympathizers in Finland. Decades later he admits that
   his enthusiasm for communism may have been born out of naivete. He met my mother Anna
   (known as Mikke) when they were both rebellious university students in the 1960s. His story is
   that they were on an outing for a club of Swedish-speaking students, of which he was president.

   He had a rival for my mother’s attention, and as they were preparing for the return bus trip to
   Helsinki, he instructed the rival to oversee the loading of the bus. He used the occasion to grab the
   seat next to my mother and convince her to go out with him. (And people call me the family
   genius!)
   I was born more or less between campus protests, probably with something like Joni Mitchell
   playing in the background. Our family love nest was a room in my grandparents’ apartment. A
   laundry basket served as my first crib. Thankfully, that period isn’t easy to remember. Sometime
   around my three-month birthday, Papa signed up for his required eleven-month Army service
   rather than go to jail as the conscientious objector he probably was. He became such a good
   soldier and such an excellent marksman that he was rewarded with frequent weekend leave
   privileges. The family tale is that my sister Sara was conceived during one of those conjugal
   visits. When my mother wasn’t juggling two blondhaired rugrats, she worked as an editor on the
   foreign desk at the Finnish News Agency. Today she works as a graphics editor.

   It’s all part of the journalism mini-dynasty that I miraculously escaped. Sara has her own
   business translating reports for the news, and she also works at the Finnish News Agency. My
   half-brother, Leo Torvalds, is a video-type person who wants to direct films. Because my family
   members are basically all journalists, I feel qualified to joke with reporters about knowing what
   scum they are. I’m aware that I come off as a complete jerk when I say that, but over the years our
   home in Finland hosted its share of reporters who stopped at nothing to get their story, or who
   made up their stories from scratch, or who always seemed to have had just a little too much to
   drink. Okay: a lot too much to drink.

   That’s when it would be time to hide out in the bedroom. Or maybe Mom is having an
   emotional rough spot. We live in a two-bedroom apartment on the second floor of an
   unremarkable pale yellow building on Stora Robertsgatan, in Rödbergen, a small area near the
   center of Helsinki. Sara and her obnoxious sixteen-month-older brother share a bedroom. There’s
   a small park nearby, named after the Sinebrychoff family, which owns a local brewery. That has
   always struck me as being odd, but is it any different from naming a basketball stadium after an
   office products vendor? (Because a cat had once been seen there, Sinebrychoffsparken was
   henceforth known in my family as the “Catpark.”) There’s a vacant little house there in which
   pigeons would gather. The park is built on a hill, and in the winter it’s a place to sled. Another
   play area is the cement courtyard behind our building, or on the building itself. Whenever we play
   hide-and-seek, it’s fun to climb the ladder five stories up to the roof.

   But no fun could compare to computer fun. With the computer at home, it was possible to stay
   up all night with it. Every boy stays up “reading” Playboy under the bedcovers. But instead of
   reading Playboy I would fake sleeping, wait for Mom to go away, jump up and sit in front of the
   computer. This was before the era of chatrooms.

   “Linus, it’s food time!” Some of the time you don’t even come out. Then your mother starts
   telling her journalist friends that you are such a low-maintenance child that all she has to do to
   keep you happy is store you in a dark closet with a computer and occasionally throw in some dry
   pasta. She’s not far off the mark. Nobody was worried about this kid getting kidnapped. (Hmmm.

   Would anybody have noticed?) Computers were actually better for kids when they were less
   sophisticated, when dweebie youngsters like me could tinker under the hood. These days,
   computers suffer from the same problem as cars: As they became more complex, they became
   more difficult for people to take apart and put back together, and, as a result, learn what they are
   all about. When was the last time you did anything on your car more involved than changing the
   oil filter?

   Instead of tinkering under the metaphoric hoods of their computers, kids these days are playing
   too many games, and losing their minds. Not that there’s anything wrong with games. They were
   some of my earliest programs.

   There was one in which you were controlling a small submarine in a grotto. It’s a very standard
   game concept. The world moves sideways, pans, and as a player you’re the submarine and you
   have to avoid hitting the walls and monster fish. The only thing that actually moves is the world.

   The fish move with the world. It all starts moving faster and faster the longer you play.

   Meanwhile, the grotto gets smaller and smaller. You cannot win this game, but that was never the
   point. It’s fun to play for a week or so and go on to the next game. The whole point is just writing
   the code to make it all happen.

   There are other toys, like model planes and ships and cars and railroads. At one point, Dad buys
   expensive German model trains. The reasoning is that he never had a model train set as a kid, and
   that it would be a good father-son hobby. It’s fun, but it doesn’t come close to the challenge of
   computers. The only time your computer privileges are taken away is not for spending too much
   time on the machine but as punishment for something else, like fighting with Sara. Throughout
   grammar school and high school the two of you are extremely competitive, particularly when it
   comes to academics.

   All the competition yields some good results. Without my constant taunting, Sara never would
   have been motivated to upstage me by writing six final essays, instead of the five required to
   graduate from high school in Finland. On the other hand, Sara is to be thanked for the fact that my
   English is not atrocious. She always made fun of my English, which for years was typical Finnish-
   English. That’s why it improved. For that matter, my mother teased me, too—but mostly about the
   fact that I was showing little interest in the female schoolmates who wanted to be tutored by the
   “Math Genius.”

   At times we lived with my dad and his girlfriend, at other times Sara lived with my dad and I
   lived with my mom. At times both of us lived with my mom. By the way, the Swedish language
   has no equivalent to the term “dysfunctional family.” As a result of the divorce, we didn’t have a
   lot of money. One of my most distinct memories is of the times when my Mom would have to
   pawn her only investment—the single share of stock in the Helsinki telephone company, that you
   owned as part of having a telephone. It was probably worth about $500, and every so often, when
   things got particularly tight, she would have to take the certificate to a pawn shop. I remember
   going with her once and feeling embarrassed about it. (Now I’m on the board of directors of the
   same company. In fact, the Helsinki Telephone Company is the only company where I’m a board
   member.) Embarrassed was also how I felt when, after I had saved most of the money for my first
   watch, Mom wanted me to ask my grandfather for the money to pay for the rest.

   There was a period when my mother was working nights, so Sara and I had to fend for
   ourselves in getting dinner. We were supposed to go to the corner store and buy food on our
   charge account. Instead, we would buy candy and it would be wonderful to stay up late on the
   computer. Under such circumstances, other boys would have been “reading” Playboy above the
   covers.

   Shortly after my grandfather had his stroke, Mormor didn’t feel like taking care of herself. She
   was bedridden in a nursing home for ten years with what she called “wooziness.” When she had
   been in the hospital for a couple of years, we moved into her apartment. It was on the first floor of
   a solid old Russian-era building on Petersgatan, near the gracious park that lines Helsinki’s
   waterfront. There was a small kitchen and three bedrooms. Sara got the big bedroom. The gangly
   teenager, who was happy with a dark closet and periodic dry pasta, moved into the smallest one. I
   hung thick black drapes on the windows so no sunlight would seep in. The computer found a home
   on a tiny desk against the window, maybe two feet from my bed.

   I was vaguely aware of Linus Torvalds when an editor of the San Jose Mercury News Sunday
   magazine asked me to write a profile of him in the spring of 1999. Linux had become something of
   a buzzword the previous spring, when a succession of companies starting with Netscape had
   adopted either the notion of open source code or the operating system itself. Not that I had been
   up on the developments. In the early 1990s I had edited a magazine that dealt with Unix and Open
   Source issues, so there was a dusty reference sentence floating in my brain. In that reference,
   Linus was a Finnish college student who wrote a powerful version of Unix in his dorm room and
   distributed it freely over the Internet. It was not quite an accurate reference. The editor phoned
   because Linus had just been the star attraction—and mobbed—at a recent Linux show in San Jose,
   which prompted the editor to lure me into the assignment with the words, “We’ve got a global
   superstar right here in, uh, Santa Clara.” He faxed over some newspaper reports.

   Linus had moved to Silicon Valley two years earlier and was working for the then-secretive
   Transmeta Corporation, which had for years been developing a microprocessor that promised to
   upend the computer industry. He somehow had a job that allowed him to maintain his time-
   consuming position as the ultimate leader of Linux and final authority on any changes made to the
   operating system. (His followers had, in fact, initiated the legal maneuvering that gave him legal
   ownership of the Linux trademark.) And he had time to trot the globe as poster boy for the
   burgeoning open source movement.

   But he had become something of a mysterious folk hero. While Bill Gates, everybody’s favorite
   nemesis, was living in splendor in his Xanadu, Linus resided with his wife and toddler daughters
   in a cramped Santa Clara duplex. He apparently was unconcerned about the fabulous wealth that
   was being rained upon the flocks of less-talented programmers. And his very presence raised an
   unutterable conundrum among the stock-option-driven minions in Silicon Valley: How could
   anyone so brilliant possibly be so uninterested in getting rich?

   Linus has no handlers, doesn’t listen to voice mail, and rarely responds to email. It took weeks
   for me to get him on the phone, but once I did he easily agreed to an interview at his earliest
   convenience, which was about a month later: May 1999. Having developed a professional passion
   for putting interview subjects into compromising positions, I decided that a Finnish sauna might
   be the perfect backdrop for the profile. In a rented Mustang convertible, with a photographer at
   the wheel, we headed over to Santa Cruz and what was recommended as the Bay Area’s best
   sauna, which was on the grounds of a New Age/nudist retreat.

   He was armed with an opened can of Coke as he emerged from the innards of Transmeta’s
   offices in an anonymous Santa Clara office park. He wore the programmer’s uniform of jeans,
   conference T-shirt, and the inevitable socks-and-sandals combo that he claimed to have favored
   even before ever meeting another programmer. “It must be some programmer’s law of nature,” he
   reasoned when I asked about the footware choice.

   The first question to Linus, as we sat in the backseat, was a throwaway. “Are your folks in
   technology?” I asked while fiddling with my tape recorder.

   “No, they’re all basically journalists,” he replied, adding: “So I know what scum you are.”

   He didn’t think he could get away with that.

   “Oh. You come from scum?” I responded.

   The world’s best programmer laughed so hard that he coughed out a spray of Coke onto the
   back of the photographer-driver’s neck. He turned red. This would be the start of a memorable
   afternoon.

   It only got more bizarre. Finns are fanatical about their saunas and this was to be his first visit
   to one in nearly three years. The pale, naked superstar with steamed-up glasses sat on the highest
   perch, with his wet tan hair matted down on his face and a river of sweat flowing down what I
   would later, purely out of good will, describe as his “incipient paunch.” He was surrounded by
   tanned, self-obsessed Santa Cruzans and their monotonous New Age rantings, and he seemed
   above it all, eagerly pointing out the authentic features of the sauna. He had this beatific grin on
   his face.

   It’s my conviction that, for the most part, people in Silicon Valley are happier than everybody
   else. For one thing, they’re at the control panel of the economic revolution. More importantly,
   they’re all getting insufferably rich, both New Valley and Old Valley. But one never sees people
   smile there, at least not outside the confines of their brokers’ offices.

   Most acclaimed technologists—even most of the unacclaimed ones—have this immediate desire
   to let you know how brilliant they are. And that they are critical players in a mission that is far
   more important than, say, the struggle for world peace. That wasn’t the case with Linus. In fact,
   his lack of ego seemed downright disarming, and made him uniquely likable amid Silicon Valley’s
   bombastic elite. Linus appeared to be above it all. Above the New Agers. Above the high-tech
   billionaires.

   He seemed less like a reindeer caught in the global headlights than a delightful alien beamed
   down to show us the madness of our selfish ways.

   And I got the feeling that he didn’t get out much.

   Linus had earlier mentioned that an important part of the sauna ritual involved sitting around
   afterward, drinking beer and discussing world affairs. In preparation, we had stashed cans of
   Fosters in some bushes. We retrieved the beers and settled into the “quiet hot tub, where we
   opened the Fosters while the photographer took his pictures. I found Linus to be unexpectedly
   knowledgeable about American business history, and world politics. In his view, the United States
   would be better served if both corporations and political parties adopted the conciliatory
   approach of European politicians. He dipped his glasses into the hot tub in order to clean them,
   mentioning that he really didn’t need glasses but started wearing them as an adolescent under the
   logic that they made his nose look smaller. That’s when a clothed female manager appeared at the
   hot tub and humorlessly ordered us to hand over our beers, which were considered contraband in
   the otherwise free-spirited surroundings.

   Our only option was to shower, dress, and find a café for finishing the conversation. Most folks
   one meets in Silicon Valley have a cult-like zeal about them. They focus so intently on their
   business or killer application or The Industry that nothing else seems to exist. Nothing interrupts
   the continuous loop of self-congratulation that passes for conversation. But there we were, sitting
   in the sun at a microbrewery, sampling the Godawful barleywine, with Linus chattering away like
   an uncaged canary—confessing his addiction to Classic Rock and Dean Koontz, revealing his
   weakness for the dumbest sitcoms, sharing off-the-record family secrets.

   And he didn’t have any great desire to circulate among the rich and powerful. I asked him what
   he would like to say to Bill Gates, but he wasn’t the least bit interested in even meeting the guy.

   “There wouldn’t be much of a connection point,” he reasoned. “I’m completely uninterested in the
   thing that he’s the best in the world at. And he’s not interested in the thing that maybe I’m the best
   in the world at. I couldn’t give him advice in business and he couldn’t give me advice in
   technology.”

   On the ride back over the mountain to Santa Clara, a black Jeep Cherokee pulled up alongside
   our car and its passenger yelled “Hey Linus!” and pulled out a throwaway camera to capture his
   apparent hero, who was sitting in the Mustang convertible’s backseat, grinning in the breeze.

   I showed up at his house a week later at bathtime. He fished his one-year-old blond daughter
   out of the tub and needed someplace to deposit her while he fished out his two-year-old blond
   daughter. He handed the younger daughter to me and she promptly let out a yell. His wife Tove,
   who had been in another room the entire time, emerged to help. She is on the short side, pleasant,
   and bears a thistle tattoo on her ankle. Soon we were all reading Swedish and English bedtime
   books to the kids. Then we stood around in the garage, amid unpacked belongings, where the
   Torvalds discussed the impossibility of affording “a real house with a real back yard” in Silicon
   Valley. There was no bitterness about it.

   And, magnificently, they didn’t appear to see the irony.

   Soon we were watching Jay Leno, with cans of Guinness. That’s when I realized it made sense
   to do a book.


.. _PE08:

V
-

   And I basically sat in front of a computer for four years.

   Okay, there was school: Norssen High, the most central of Helsinki’s five Swedish-language
   high schools, and the one nearest my home. Math and physics were interesting, and therefore easy.

   But whenever a subject involved rote memorization, my enthusiasm for that subject was
   diminished. So history was boring when it meant worrying about the date of the Battle of
   Hastings, but got interesting when you discussed the economic factors affecting a country. The
   same thing went for geography. I mean, who really cares how many people are in Bangladesh?

   Well, it might matter to a lot of folks, come to think of it. But the point is, it was far easier for me
   not to daydream about my computer when we were learning about something more engaging than
   statistics, like the monsoons, for example, or the reasons for the monsoons.

   Phys ed was another matter entirely. I’m probably not breaking any news by revealing that I
   wasn’t the most athletic guy on the Fennoscandia peninsula. I was skinny then, too, believe it or
   not. Gymnastics was actually okay to participate in. But when we would have soccer or ice
   hockey, it would be time for me to skip class.

   This showed up in my grades. In Finland you get graded on a scale of four to ten. So I would
   earn tens and some nines for math, physics, biology, and everything else—but sevens for phys ed.

   Once there was a six. I earned a six in woodworking, too. That wasn’t my strong sport, either.

   Other guys have well-crafted napkin holders or stools as souvenirs of woodworking class. All I
   have are a few splinters still lodged in my thumb after all these years. This is where it should be
   mentioned that my father-in-law was the one who built the fine swing set in our backyard on
   which my daughters spend so many happy hours.

   My high school wasn’t one of those institutions for exceptionally smart or ambitious kids,
   which are common in most U.S. cities. Such schools are pretty much against how Finland works.

   Finnish schools don’t separate out the good students—or the losers, for that matter. However, each
   school did have its specialty, a subject that was not required but that you couldn’t get at any other
   school. In the case of Norssen High School, it was Latin. And Latin was fun. More fun than
   learning Finnish and English.

   Too bad it’s a dead language. I’d love to get together with a few buddies and tell jokes in Latin
   or maybe discuss operating-system design strategies.

   It was also fun to spend time in the coffee shop near school. It was a hangout for certain people,
   basically those who weren’t hiding behind the school smoking cigarettes. You would go there
   instead of phys ed, or you would go there if you had an hour break between classes, which
   sometimes happened.

   The place had been a haven for geeks since the days of slide rules. Also, it was the only café
   that let students buy things on account. That meant you would place your order and they would
   keep a written list of everything you ate or drank, and then when you somehow got the money
   together you would pay for it. Knowing the Finnish mania for technology, it’s probably all
   recorded in a database these days.

   My order was always the same: a Coke and a doughnut.

   So young and already such a health food nut.

   Generally speaking, I was better in school than my sister, Sara, who was more sociable, easier
   to look at, nicer to people—and, I should add, has been hired to translate this book into Swedish.

   But she beat me in the end because she took exams in more subjects. My interests were narrower.

   I was known as the Math Guy.

   In fact, the only time I brought girls home was when they wanted to be tutored. It didn’t happen
   all that many times, and it was never my idea, but my father harbors fantasies that they were
   interested in more than math tutoring. (In his mind, somehow they had bought into his Stately
   Nose = Stately Man equation.) If they were looking for any math-guy action, they certainly didn’t
   have a willing partner. I mean, I could never even figure out what they were referring to by “heavy
   petting.” I had spent time taking care of a neighbor’s fifteen-pound cat and couldn’t figure out
   what the big deal was.

   Yes, I was definitely a geek. No question about it. This is before geekdom became sexy. Well, I
   guess it’s not really sexy but hipper. What you had was someone who was both a geek and shy—or
   is that redundant?

   So I would be sitting in front of a computer and be perfectly happy.

   For high school graduation in Finland, you wear a fluffy white hat with a black band. There’s a
   ceremony in which they hand out diplomas, and when you come home all your relatives are there
   with lots of champagne, flowers, and cake. And there’s also a party for the entire class at a local
   restaurant. We did all that, and I guess I had fun, but I don’t remember anything special about it.

   But ask me about the specs on my 68008-chip machine and I can rattle them off with total recall.


.. _PE09:

VI
--

   My first year at university was actually quite productive. I managed to earn the number of credits
   —which are called “study weeks” in the Finnish system—that one is supposed to earn. It was the
   only year that happened. Maybe it was the excitement of the new environment, or the opportunity
   to delve deeply into the topics, or because it was more comfortable for me to study than to become
   a social animal and puke on my friends with ritualistic regularity. I don’t know what to blame for
   my adequate performance in that first year. But rest assured, it didn’t happen again. My academic
   career took a sharp nosedive.

   At that point a major hadn’t been determined. Eventually computers became my major, with
   physics and math as minors. One of the problems was that in the entire University of Helsinki
   there was only one other Swedish-speaking student who wanted to major in computers, Lars
   Wirzenius. The two of us joined Spektrum, the social organization for Swedish-speaking science
   students, which actually turned out to be a lot of fun. The club was comprised of students in the
   hard sciences, such as physics and chemistry. Translation: It’s all guys.

   But we did share our clubroom with the counterpart organization for Swedish-speaking
   students in the soft sciences, such as biology and psychology. That way, we were able to interact
   with females, as awkward as it might have been for some of us. Okay, all of us.

   Spektrum had many of the trappings of an American-style fraternity, but you didn’t have to
   live with the other guys or ever deal with anyone who wasn’t interested in science. We had regular
   Wednesday night meetings where I learned the difference between a pilsner and an ale. On rare
   occasions there were vodka-ingesting contests. But much of that didn’t happen until later in my
   university career. And there was ample time for it to happen: I studied at the university for eight
   years, emerging with nothing more than a mere master’s degree. (I’m not counting the honorary
   doctorate the university issued to me in June 2000.)
   But that first year was a blur of streetcar commutes between lecture classes and my bedroom,
   which was gathering piles of books and computer equipment. I’d lie in bed reading a Douglas
   Adams sci-fi thriller, then toss it on the floor and pick up a physics text, then roll out of bed and
   sit at the computer writing a program for a new game. The kitchen is right outside the bedroom
   and I’d stumble in for some coffee or corn crunchies.

   Maybe your sister is somewhere around, or maybe she is out with friends. Or maybe she is
   living with your father these days. Maybe your mother is there or maybe she is working or maybe
   she is out with her journalist friends. Or a friend is over and you are wedged into the kitchen,
   drinking cup after cup of tea and watching Bevis and Butthead in English on MTV and thinking
   about going somewhere to play snooker but it is just too cold outside.

   And happily, there is no phys ed in this lifetime.

   That will happen next year. All year. When the Finnish Army calls every male. Many guys do
   their army duty immediately following high school. For me, instead, it seemed to make more
   sense to wait until after completing a year at the university.

   In Finland you have a choice: You either do the army for eight months or social services for a
   year. If you show strong religious reasons or some other significant excuse, you could get around
   both. For me, there wasn’t such an out. And the option of social services didn’t feel right.

   It wasn’t because I had anything against helping humanity. It probably had more to do with a
   fear that social services duty ran the risk of actually being more boring than army duty. I can’t
   believe I’m being so candid. But talk to someone who has gone the social services route and you
   find that if you haven’t already lined up a good place to perform them, you will be randomly
   assigned to an uninteresting place. And I couldn’t conscientiously object. As much as I wouldn’t
   have objected to shirking my patriotic duty, the fact is I actually do have a conscience: When push
   comes to shove, I don’t have strong convictions against guns or killing people.

   So if you opt for the army there are two new choices to make. You could go for the required
   eight months as a regular Joe, or go to officer training school and do eleven months as an officer.

   It occurred to me that it might be slightly more interesting to be an officer, despite the additional
   129,600 minutes. It would also be a way of getting something more out of it.

   That’s how your (then) 120-pound hero became a second lieutenant in the reserves of the
   Finnish Army. My job was fire controller. It’s not exactly rocket science. You are given the
   coordinates for the big guns. You read the map of where you are and then you triangulate on where
   you want to shoot. You do the coordinates calculations and then you radio them in or
   communicate using telephone wire that you helped lay out. You’re telling the guns where to shoot.

   I remember being very nervous before going into the army, not knowing what to expect. Some
   people had older brothers or someone to talk to about the army, so they knew what to anticipate.

   There was nobody to tell me what would be happening. Well, everybody knows in general that the
   army isn’t going to be fun. It’s something perpetuated by everybody being there. But I didn’t have
   a clear idea of what it would be like, and that made me nervous. It’s sort of how I feel about
   having people read this book.

   The most difficult times in the army involve walking around the Lapland woods with what
   seem like tons of cable. Frankly, I think it is tons of cable. Before officers school, you would be
   ordered to run around with a huge roll of cable on your stomach and two on your back, and you
   have to run for, like, ten freaking miles. Other times you’re just standing around waiting for things
   to happen.

   Or you ski for too long to the place where you put up the tent. That’s when I realized that if
   God had meant us to ski, He/She/It would have equipped us with elongated fiberglass pads instead
   of feet. Wait a second, I don’t necessarily believe in God.

   Then you have to get the tent set up and the fire going before you can eat. You’re cold and
   hungry and tired because you haven’t slept in two days. I understand that people actually pay good
   money to participate in such extreme outdoor adventures as “character-building experiences.”

   They should just join the Finnish Army.

   Actually, the outdoor marathons didn’t happen often, but they happened. I calculated that
   during eleven months with the army, I spent more than 100 days in the woods. Finland has
   abundant woods: 70 percent of the country is covered with forest. I felt as if I visited it all.

   My job as an officer was to be the fire control leader for a group of five. That just means you’re
   supposed to know how things work, and make them seem more complicated than they really are.

   But it just wasn’t that interesting and I wasn’t a very good leader. I certainly wasn’t good at giving
   orders. I took them well—the trick is not to take it personally—but I didn’t feel that it was my
   mission in life to do the best job.

   Not then.

   Did I mention how cold it gets in Lapland?

   Come to think of it, I really hated it while I was there. But it was one of those things: After it
   was over it immediately became a wonderful experience.

   It also gave me something to discuss with virtually any Finnish male for the rest of my life. In
   fact, some people suggest that the major reason for the required army duty is to give Finnish men
   something to talk about over beer for as long as they live. They all have something miserable in
   common. They hated the Army, but they’re happy to talk about it afterward.


.. _PE10:

VII
---

   While we’re on the subject, let me tell you some more about Finland. We probably have more
   reindeer than any place on Earth. We also have a healthy share of both alcoholics and fans of
   tango dancing. Spend a winter in Finland and you understand the roots of all the drinking. There’s
   no excuse for the tangoistas, but, thankfully, they are all pretty much concentrated in small towns,
   where you never have to encounter them.

   A recent survey determined that Finnish males are the most virile in Europe. It must be all the
   reindeer meat, or the hours spent in saunas. This is a nation that literally is home to more saunas
   than cars. Nobody actually knows how this religion started, but the tradition, at least in some
   places, is to build the sauna first, then the house. Many apartment buildings contain a sauna on the
   first-floor level or the top floor, and every family gets its own private hour—like Thursdays, 7 to
   8 P.M. (Thursdays and Fridays tend to be sauna days.) That way, you don’t have to endure the
   horror of seeing your neighbors naked. I was once thumbing through an English-language
   guidebook to Finland that went to great lengths to warn the reader that Finns never have sex in
   saunas, and how they would be horrified to learn that such a violation has taken place or was even
   a mere fantasy in the tourist’s mind. I couldn’t stop laughing when I read that, because the sauna
   is such a neutral place in the Finnish home that the book might just as appropriately have warned
   against having sex on the kitchen floor. I don’t think it’s any big deal. In remote locales babies are
   born in saunas—the only places with hot water—and that’s where you go to die, according to
   some traditions. These rules don’t apply to my family, by the way, which has a laid-back approach
   to the whole thing.

   There are other traits that distinguish Finns from other members of the human species. For
   example, there’s this silence tradition. Nobody talks much. They just sort of stand around not
   saying anything. This is another rule that doesn’t apply to my family, which I will generously
   describe as “offbeat.”

   Finns are stoic to a fault. Silent suffering and fierce determination might be what helped us
   survive in the face of domination by Russia, a succession of bloody wars, and weather that sucks.

   But these days, it just seems odd. The German writer Bertolt Brecht lived briefly in Finland during
   World War II and made the famous observation about patrons of a railway station café there
   “remaining silent in two languages.” He left for the United States via Vladivostock the first
   chance he could.

   Even today, if you step into a bar in any Finnish city—particularly the smaller ones—you’re
   likely to find stone-faced men sitting by themselves, staring off into the air. People respect each
   other’s privacy in Finland—that’s another big thing—so nobody would think of going up to a
   stranger and striking up a conversation. There’s a conundrum. Finns actually are quite friendly.

   But few people are ever able to find that out.

   I understand the atmosphere is much more convivial in Finland’s lesbian bars.

   Since Finns are loathe to converse face to face, we represent the ideal market for mobile
   phones. We have taken to the new devices with an enthusiasm unmatched by any other nation. It’s
   not clear which country actually does claim the most reindeer per capita—the title might go to
   Norway, come to think of it—but there’s no question which nation on Earth has more cell phones
   for every man, woman, and child. There’s talk in Finland of having them grafted to the body upon
   birth.

   And they are used for more purposes than anywhere else.

   Finns routinely send each other text messages, or rely on mobile phones as a mechanism for
   cheating on high school tests (send a friend the question and wait for his text-message reply). We
   use the calculator function that few Americans even realize exists on a mobile phone. The obvious
   next step is for folks to start dialing up the number of the lonely person at the next café table and
   strike up a cell conversation. The phenomenal success of Nokia notwithstanding, mobile phones
   have changed Finland like nothing since the introduction—long forgotten—of the sauna itself.

   It’s actually no surprise that mobile phones would find such a warm reception in Finland. The
   country has a history of being quick and confident in the adoption of technology. For example,
   unlike practically everywhere else on Earth, Finland is a place where folks routinely pay bills and
   conduct all their banking electronically—none of this wimpy pseudo-electronic banking that takes
   place in the United States. There are more Internet nodes per capita in Finland than any other
   country. Some credit this technosavvy to the strong educational system—Finland has the world’s
   highest literacy rate, and university tuition is free, which is why the typical student sticks around
   for six or seven years. Or, in my case, eight years. You can’t help learning something by hanging
   around a university for such a large chunk of your life. Others say the technological edge got its
   start with the infrastructure improvements made in the shipping industry as part of war
   reparations paid to Russia. And others say it has something to do with a population that is (at
   times, unbearably) homogeneous.

   Linus and I are sitting at the diningroom table. We have just returned from a car-racing/batting-
   cage place. Tove is putting away groceries, Patricia and Daniela are in a tussle over a book I
   brought for one of them. I brush aside a stuffed penguin and a huge jar of peanut butter, turn on
   the tape recorder, and ask Linus to talk about his childhood.

   “Actually, I don’t remember much of my childhood,” he says, in a monotone.

   “How can that be? It was only a few years ago!”

   “Ask Tove. I’m lousy at remembering names or faces or what I did, I have to ask her what our
   phone numbers are. I remember rules and how things are organized, but I can never remember
   details of things, and I don’t remember the details of my childhood. I don’t remember how things
   happened or what I was thinking when I was small.”

   “Well, did you have friends, for example?”

   “A few. I never was very social. I’m way, way more social now than I was back then.”

   “Well, what was it like? I mean, do you remember waking up on a Sunday morning and going
   somewhere with your sister and your parents?”

   “My parents were split up by then.”

   “How old were you when they split up?”

   “I don’t know. Maybe six. Maybe ten. I don’t remember.”

   “What about Christmas? Do you remember Christmas?”

   “Oh, I have some vague memories of getting dressed up and going to my paternal grandfather’s
   house in Turku. Same thing for Easter. Other than that I don’t remember much.”

   “What about your first computer?”

   “That was the famed VIC-20 my maternal grandfather bought.

   It came in a box.”

   “How big was the box? The size that would hold a pair of snow boots?”

   “About that size.”

   “And what about your grandfather? Do you remember much about him?”

   “He was probably my closest relative but I don’t… Okay. He was overweight, but not fat. He
   was balding. He was withdrawn, sort of like an absent-minded professor, which he was. I used to
   sit on his lap and type in his programs.”

   “Can you remember what he smelled like?”

   “No. What kind of a question is that?”

   “Everybody’s grandfather smells like something. Cheap cologne. Bourbon. Cigars. What did he
   smell like?”

   “I don’t know. I was too preoccupied with the computer to notice.”


.. _PE11:

Birth of an OPERATING SYSTEM[1]
===============================

.. _PE12:

I
-

   Some people remember time according to the cars they drove or the jobs they held or the places
   they lived or the sweethearts they dated. My years are marked by computers.

   I had only three computers while I was growing up. There was the aforementioned Commodore
   VIC-20, which I inherited from my grandfather. It was one of the first “home” computers, the
   predecessors to the present-day PCs. The Commodore 64 became sort of the big brother to the
   VIC-20, followed by the Amiga, which had a particularly strong following in Europe. Those
   computers never became truly popular, like the PC or even the Apple II, which was already
   common about the time I played around with the VIC.

   In those days before the proliferation of PCs, most of the programming on home computers
   was done in assembly language. (I can’t believe I’ve taken to starting sentences with “In those
   days…”) Computers had their own home-brew operating system, the equivalent of what DOS was
   on a PC. Depending on the computer, it was either a rudimentary format or a slightly more
   enhanced one. Like DOS, the OS had a program loader and a basic language environment. Back
   then there were no standards and a number of companies wanted to control the market.

   Commodore was one of the better known of these.

   When I had gotten about as much as I could out of the VIC-20, I started saving up for a next-
   generation model. This was a big deal in my life. As I mentioned, I’ve lost track of who in my
   family was living where at what particular time, and a lot of other things, but the path to my
   second computer was something that’s hard to forget.

   I had some Christmas-and-birthday money stashed away (because I was born on December
   28th, the two occasions are sort of melded together). I also earned some money one summer
   working on the clean-up crew in Helsinki’s parks. Many of the parks in Helsinki aren’t landscaped
   and well-maintained, but are more like recreational or green areas that are overgrown forests.

   What we had to do was saw off overgrown bushes or pick up dead branches—it was even
   interesting. I’ve always liked the outdoors. I also had a newspaper route, too, at one point—except
   that it wasn’t newspapers, it was junk mail. Actually, I wasn’t really into summer jobs, come to
   think of it. But I did them in those days. On the whole, I probably got more money from school
   stipends.

   In Finland, it’s relatively common for people to give endowments to schools, even the public
   elementary schools. So, starting in fourth grade, money gets distributed to students based on
   whatever the person setting up the fund had in mind. I remember one of the endowments in my
   school went to the best-liked kid in class. This was in sixth grade and we actually voted within the
   class on who should get the money. It wasn’t me who won, I might add. The bounty amounted to
   only about 200 Finnmarks, which was maybe forty dollars, at the time, but it seemed like a lot of
   money to give a sixth grader just for being popular.

   Quite often the money went to the best person in a particular subject or sport. And a lot of the
   awards were school-specific or funded through the government. In some cases, the funds dwindled
   over time. I remember one that amounted to about a penny in value. When that was the situation,
   the school would chip in to make it somewhat more useful, but it still was a fairly small sum of
   money; more than anything else, this was a way of maintaining the tradition of giving out money
   every year. Finland takes its academic traditions seriously, which is a good thing.

   So I would receive these stipends every year for being the Math Guy. By high school the
   awards got bigger. The biggest ones were on the order of $500. So that’s where most of the money
   for my second computer came from; my weekly allowance wouldn’t have paid for a computer. I
   also borrowed some money from my dad.

   It was 1986 or 1987. I was sixteen or seventeen. My basketball years were behind me. I spent
   an inordinate amount of time researching the field before deciding which computer to buy. PCs
   weren’t very good back then, so when I fantasized about my new machine I knew it wasn’t going
   to be a PC.

   I opted for a Sinclair QL, which many of you are probably too young to remember. Here’s the
   history. The Sinclair was one of the first 32-bit machines on the market for home use. Sir Clive
   Sinclair, the founder of the company, was the Steve Wosniak of Britain. He made these computer
   kits that were sold as Timex computers in the United States. That’s right, the same company that
   made Timex watches imported the Sinclair computer stuff and sold it here under the Timex name.

   The early ones were sold as kits before he started selling ready-made computers.

   The Sinclair had this operating system called Q-DOS. I knew it by heart back then. It was
   written especially for that particular computer. It had quite an advanced Basic for the time, and
   fairly good graphics. One of the things that excited me the most about the operating system was
   that it was multitasking: You could run multiple programs at once. However, the Basic part wasn’t
   multitasking, so you couldn’t run more than one Basic program at once. But if you wrote your own
   programs in assembly language, you could let the operating system schedule them and time slice
   it so you could run many of them at the same time.

   The computer contained the 8-megahertz 68008 chip, which was the second and cheaper
   version of Motorola’s 68000 chip. Internally, the first generation of 68000 chips were 32-bit, but
   externally had a 16-bit interface to anything outside the CPU (central processing unit)—such as
   memory or hardware add-ons. Because it could only load 16 bits at a time from memory, 16-bit
   operations were often quicker than the 32-bit operations. The architecture was hugely popular and
   it still exists today in a lot of embedded devices or cars. It’s not the same chip, but it’s based on
   the same architecture.

   The 68008 chip, the version in my computer, used 8 bits, not 16 bits, for its interface with the
   world outside the CPU. But even though it interacted with the outside world at 8 bits at a time,
   internally it was 32 bits. That made it more pleasant to program in many ways.

   It had 128 kilobytes of memory—not megabytes—which was huge at the time for a home
   machine. The VIC-20 it replaced had only 31/2 kilobytes of memory. And because it was a 32-bit
   machine it could access all the memory with no problem at all, which was unheard of back then.

   That was the main reason I wanted to buy the computer. The technology was interesting and I
   loved the CPU.

   I was hoping to get the computer at a discount by buying it at a store where a friend knew the
   owners. But it would have taken so long for the computer to arrive that I just shlogged down to
   Akademiska Bokhandeln, the largest bookstore in Helsinki, which had a computer section. I just
   bought it from them over the counter.

   The computer cost nearly $2,000. There used to be this rule that entry-level computers were
   always $2,000. It’s only in the last couple of years that this has changed. Now you can buy a new
   PC for $500. It’s like cars. Nobody makes cars for under $10,000. At some point, it’s not worth it
   anymore. Sure, companies can build a car that can be sold for $7,000, but the automakers reason
   that people who could afford $7,000 for a car are happier buying one for $10,000 that has extra
   stuff, like air conditioning, as standard equipment. If you compare entry-level cars this year with
   entry-level cars from fifteen years ago, they cost about the same. In fact, adjusted for inflation
   they might cost slightly less. But they’re a lot better.

   That’s how it used to be with computers. When computers were not something that everybody
   bought, there was a pain threshold of around $2,000. If the lowest-cost computer is much more
   expensive, a company isn’t going to be able to sell many of them. But they were expensive enough
   to manufacture that it didn’t make sense for a company to make them much cheaper. People
   would always pay the extra $200 or so to get a better machine.

   In the last two years they have become a lot less expensive to make. And even the low-end
   machines have gotten pretty good. Companies have lost many of the people who would pay the
   extra $200 for a slightly better machine. Since companies couldn’t sell on features alone, they’ve
   had to sell on price.

   I admit it: Back in 1987, one of the selling points of the QL was that it looked cool.

   It was entirely matte black, with a black keyboard. It was fairly angular. This was not a
   rounded, pretty-boy machine. It tried to be kind of extreme. The keyboard was about an inch thick
   because it was part of the same unit as the computer. That’s the way most of the home computers
   were designed. On the right-hand side of the keyboard, where you would have a keypad, you had
   two slots for the revolutionary Sinclair microdrive, which was this endless loop of tape that was
   used only on a Sinclair machine. It acted and was organized like a disk drive. Because it was one
   long loop, you could just spin it until you hit what you wanted. It turned out to be a bad idea
   because it was not as reliable as a disk drive.

   So I spent close to $2,000 for the Sinclair QL. Most of what I did with it was one programming
   project after another. I was always searching for something interesting to do. I had a Forth
   language interpreter and compiler, just to play around with. Forth was a strange language that
   nobody uses anymore. It was kind of a fun, niche-market language that was fairly widely used in
   the 1980s for different things, but it never became very popular, being difficult to follow for non-
   techie people. Actually it was kind of useless.

   I wrote programming tools for myself. One of the first things I bought for the machine was an
   expansion bay with an EEPROM card (Electrically Erasable and Programmable Read Only
   Memory). It’s memory you write yourself with special modules, and it stays around when you turn
   the power off. That way, I could have the tools easily available to me whenever I wanted, without
   having to load them into RAM (random access memory) and use precious RAM for programs.

   What got me interested in operating systems: I bought a floppy controller so I wouldn’t have to
   use the microdrives, but the driver that came with the floppy controller was bad so I ended up
   writing my own. In the process of writing that I found some bugs in the operating system—or at
   least a discrepancy between what the documentation said the operating system would do and what
   it actually did. I found it because something I had written didn’t work.

   My code is always, um, perfect. So I knew it had to be something else, and I went in and
   disassembled the operating system.

   You could buy books that contain partial listings of the operating system. That helps. You also
   need a disassembler, a tool that takes the machine language and turns it into assembly language.

   That’s important because when you only have a machine language version, it’s difficult to follow
   the instructions. You find that an instruction will jump to a numerical address, which makes it
   very hard to read. A good disassembler will make up names for the numbers and also allow you to
   specify names. It also can be used to help you identify particular instruction sequences. I had my
   own disassembler that I could use to create reasonably nice listings. When something didn’t work,
   I could go in and tell it to find the listing from a particular spot, and I could see everything that
   the operating system was going to do. Sometimes I used the disassembler not because something
   was buggy but because I was trying to understand what it was supposed to do.

   One of the things I hated about the QL was that it had a read-only operating system. You
   couldn’t change things. It did have hooks—places where you can insert your own code to take
   over certain functions—but only at particular places. It’s so much nicer to be able to replace your
   operating system completely. Doing an operating system in ROM (read-only memory) is a bad
   idea.

   Despite what I’ve said about Finland being such a technology butt-kicker, the Sinclair QL
   wasn’t making big inroads in Europe’s seventh-largest nation. Because the market was so small,
   whenever you wanted to buy upgrades for the iconoclastic, leading-edge machine, you had to do it
   from England, via postal order. It involved scouring catalogues until you found someone who sold
   whatever it was you wanted. Then you had to get together certified checks and wait weeks for
   delivery (this being before the days of Amazon.com and credit cards). That’s what I had to do
   when I wanted to expand my RAM from 128 kilobytes to 640 kilobytes. That was the drill when I
   bought a new assembler, to translate assembly language into machine code (the ones and zeros),
   and an editor, which is basically a word-processing program for programming.

   Both the new assembler and editor worked fine, but they were on the microdrives and couldn’t
   be put on the EEPROM. So I wrote my own editor and assembler and used them for all my
   programming. Both were written in assembly language, which is incredibly stupid by today’s
   standards. It’s complicated and time-consuming—I’d guess it takes a hundred times longer to
   solve a problem in assembly language than in the C language, for example, which was available at
   the time.

   I added a few commands to the basic interpreter that came with the machine so that when I
   wanted to edit something I basically just ran my editor automatically and it was instantly there.

   My editor was faster than the one that came with the machine. I was particularly proud of how fast
   I could write characters to the screen. Normally, with a machine like that, it would take so long to
   fill the screen with characters that you could see text scroll. And I was pleased with the fact that
   with my editor, you wrote text so fast that when you scrolled quickly down you created a blur.

   That was important to me. The improvement made the machine feel much snappier, and I knew
   that I had done a lot of work to make it operate so fast.

   At this time, there weren’t very many people I knew who were as involved in computers as I
   was. There was a computer club at school, but I didn’t spend much time there. It was basically for
   kids who wanted to know about computers. There were only about 250 students in my entire high
   school, and I don’t think anybody else had been using one since the age of ten.

   One of the big things I liked doing on my Sinclair QL was to make clones of games. I wrote
   clones of the games from the VIC-20 that I had enjoyed and sometimes I added enhancements.

   But mostly they were not better: a better machine, not a better concept.

   My favorite game was probably Asteroids, but I could never make a good clone of it. The
   reason was that, at the time, all the arcade Asteroids games were done with real vector graphics.

   Instead of having graphics based on small dots—pixels—they had graphics that were actually
   done the way a cathode-ray tube (CRT) works, which is to have electrons shot out from an
   electron cannon from behind the CRT and deflected with magnets. They got much higher-
   resolution graphics that way, but you couldn’t reproduce this very easily. You could make a clone,
   but it wouldn’t look like the original Asteroids game if you wrote it on a computer that didn’t
   have the special graphics capability.

   I remember making a Pac Man clone in assembly language. The first step is to kind of
   remember what the Pac Man characters are supposed, to look like. Then you try to draw them on a
   sixteen-by-sixteen grid of paper, with color. And if you are artistic, you can do a good job. But if
   you are Mr. Non-Artistic, like I am, it ended up looking like Pac Man’s sick cousin.

   Okay, so it wasn’t a very good clone. But I was really proud of it. The game was actually
   playable, and I sent it in to one of the magazines that published computer code. I had sold other
   programs to magazines and thought this would be a natural.

   Not.

   One of the problems was that the program had been written in assembly language. That meant
   that if you made the slightest, slightest mistake copying it from the magazine, it wouldn’t work.

   I wrote some of my own games, too. But it takes a certain mindset to create games. Because
   games require a lot of performance, you have to get really low down into the hardware of the
   computer. I could do that, but I didn’t have the game play mentality. What makes a great game is
   not usually how fast it is or how good the graphics are. There has to be something that makes you
   play it—something that keeps you with it. It’s just like movies. Special effects are one thing, but
   you also need a plot. And my games never had a plot. A game has to have a progression, an idea.

   Often, the progression is just that the game gets faster. That’s what Pac Man does. Sometimes the
   maze changes or the monsters get better at following you.

   One of the things that interested me about Pac Man was tackling the problem of making
   graphics that don’t flicker. It’s a fairly common problem in older computer games, because
   without special hardware your characters just flicker. The way you move your characters around is
   to take away the old copy and write a new copy. If you happen to have bad timing, people can
   actually see when there’s no copy, so it flickers. You can get around this in multiple ways. You
   can actually draw the new guy first and then remove the old guy, but you must be careful not to
   remove that part of the old guy that was occluded by the new guy. Instead of seeing an irritating
   flicker, you get a good effect—you sometimes see the shadow of the old character on the screen.

   The brain interprets that in a good way. It doesn’t flicker, but it creates a motion blur. The trouble
   with this solution is that it is fairly expensive and time-consuming to create.

   There’s a reason that games are always on the cutting edge, and why they often are the first
   types of programs that programmers create. Partly it has to do with the fact that some of the
   smartest programmers out there are fifteen-year-old kids playing around in their rooms. (It’s what
   I thought sixteen years ago, and I still suspect it’s true.) But there’s another reason games are so
   pioneering: Games tend to push hardware.

   If you look at computers today, they’re usually fast enough for anything. But the place you test
   the limits of the hardware are with action games, like some of the 3-D ones that are now popular.

   Fundamentally, games are one of the few things on computers where you can tell if things aren’t
   happening in real time. In word processing, you don’t mind a delay of a second here or a second
   there. But in a game, it starts to be noticeable at a sub-tenth of a second. Games used to be fairly
   simple. These days, programming is actually a fairly small part of any game. There’s music,
   there’s the plot. If you compare it to making a movie, the programming component is just the
   camera work.

   So I had the Sinclair QL for three years. It took me from high school to the University of
   Helsinki to the Finnish Army. It was fine, but we were definitely ready to part ways. In the last
   year or so I had discovered its shortcomings. The 68008 was a good enough CPU, but I was
   reading about the next generation 68020, and learning about such virtues as memory management
   and paging. These new computers could do things that are really important when you are working
   on low-level stuff.

   What irritated me about the Sinclair QL was that while the operating system was capable of
   multitasking, you could still crash at any time because there was no memory protection. One task
   that decided to do something bad could just crash the machine.

   The Sinclair QL was Sir Clive Sinclair’s last foray into designing and making computers. One
   of the reasons: It wasn’t commercially successful. It had interesting technology, but the company
   had production problems and quality assurance problems and the inevitable bad press. Moreover,
   the market was beginning to become more competitive.

   The late 1980s were the years when you could start to imagine that, yes, maybe someday your
   average trolley rider would own a computer, if only to perform word processing. And all signs
   pointed to the PC. Yes, the original IBM PCs had started flooding the shelves and becoming
   successful despite numerous technical shortcomings. Those ubiquitous beige creatures had the
   IBM stamp of approval, after all, and that meant a lot. Another attraction: The peripherals were
   standard and easy to obtain.

   I was reading about all these newer CPUs that could do what I wanted. It became clear that the
   68020, which looked interesting, wasn’t going anywhere. I could have considered buying a CPU
   upgrade for the QL. In those days that meant basically rebuilding the machine. And the operating
   system didn’t know about memory management, anyway, so I would have had to write my own
   version. So it was like: Hhhmmm. Doing that will be a big step. And it will be expensive to get a
   new CPU.

   And then there was still the increasing headache of buying things for the computer. It wasn’t as
   if there was a Sears catalogue for the Sinclair QL and you just picked up the phone and ordered
   more memory. The postal-order-from-England routine was getting old. (I didn’t mind that there
   was no shrink-wrapped software because I was able to write all that myself.)
   There was a positive side effect to this pain-in-the-neck. When I was thinking about getting rid
   of the machine, I decided to sell my peripherals—the real hard drive I had purchased because I
   couldn’t take the microdrive one second longer, and my expansion RAM. But there weren’t people
   lined up in the streets searching for such stuff, so you had to advertise in a computer magazine and
   pray. And that’s how I met my good friend Jouko Vierumaki, who turned out to be probably the
   only other person in all of Finland who owned a Sinclair QL. He answered my ad and took the
   train from Lahti and bought some of my peripherals. Then he introduced me to snooker.


.. _PE13:

II
--

   My first year at university, the Sinclair QL sat on a desk against my first-floor bedroom window
   on Petersgatan, but I didn’t do much in the way of programming. Partly it was a matter of wanting
   to concentrate on my studies. But also, I simply found myself lacking a project to do on my
   computer. Lack a project and you lack enthusiasm. You’re trying to come up with something that
   might motivate you.

   It seemed like the perfect time to join the army, which I knew I would have to do anyway. I was
   nineteen years old and irritated with my computer’s shortcomings and unattached to any
   interesting computer project. I boarded a train for Lapland.

   I’ve already indicated how clueless I was about, among other things, the physical demands of
   army service. So after the eleven months of phys ed-with-firearms, I felt perfectly justified in
   spending the remaining decades of my life in blissful inactivity, with the only exercise coming
   from tapping code into a keyboard or gripping my fingers around a glass of pilsner. (In fact, the
   first nearsport activity after leaving the army didn’t take place until almost ten years to the day
   following my discharge, when David coerced me into going boogie-boarding with him in the killer
   waves at Half Moon Bay. I practically drowned, and my legs were sore for days.)
   Army service ended on the 7th of May, 1990. Although Tove would tell you I have trouble
   remembering our anniversary, I can’t possibly forget the date I was discharged.

   The first thing I wanted to do was get a cat.

   I had a friend whose cat had produced a litter a few weeks earlier, so I bought the sole
   remaining kitten, which was white, male, beautiful—and, because he had spent his first few weeks
   in the outdoors, easily able to live both inside and outside my mother’s apartment. I named him
   Randi, short for Mithrandir, the white wizard in Lord of the Rings. He is now eleven years old and,
   like his owner, has become totally adjusted to the California lifestyle.

   No, I don’t think I did anything productive that entire summer. Classes for my second year at
   the university wouldn’t start until fall. My computer was not quite up to snuff. So I sort of hung
   around in my ratty bathrobe or played with Randi or, occasionally, got together with friends so
   they could chuckle about my attempts at bowling or snooker. Okay, I did do a little fantasizing
   about my next computer.

   I faced a geek’s dilemma. Like any good computer purist raised on a 68008 chip, I despised
   PCs. But when the 386 chip came out in 1986, PCs started to look, well, attractive. They were able
   to do everything the 68020 did, and by 1990, mass-market production and the introduction of
   inexpensive clones would make them a great deal cheaper. I was very money-conscious because I
   didn’t have any. So it was, like, this is the machine I want to get. And because PCs were
   flourishing, upgrades and add-ons would be easy to obtain. Especially when it came to hardware, I
   wanted to have something that was standard.

   I decided to jump over and cross the divide. And it would be fun getting a new CPU. That’s
   when I started selling off pieces of my Sinclair QL.

   Now everybody has a book that has changed his or her life. The Holy Bible. Das Kapital.

   Tuesdays With Maury. Everything I Needed to Know I Learned in Kindergarten. Whatever. (I
   sincerely hope that, having read the preface and my theory on The Meaning of Life, you will
   decide that this book does the trick for you.) The book that launched me to new heights was
   Operating Systems: Design and Implementation, by Andrew S. Tanenbaum.

   I had already signed up for my fall courses, and the one that was most looking forward to was
   in the C programming language and the Unix operating system. In anticipation of the course, I
   bought the aforementioned textbook during the summer in the hope of getting a head start. In the
   book, Andrew Tanenbaum, a university professor in Amsterdam, discusses Minix, which is a
   teaching aid he wrote for Unix. Minix is also a small Unix clone. Soon after reading the
   introduction, and learning the philosophy behind Unix and what the powerful, clean, beautiful
   operating system would be capable of doing, I decided to get a machine to run Unix on. I would
   run Minix, which was the only version I could find that was fairly useful.

   As I read and started to understand Unix, I got a big enthusiastic jolt. Frankly, it’s never
   subsided. (I hope you can say the same about something.)

.. _PE14:

III
---

   The academic year that began in the fall of 1990 was to be the first time that the University of
   Helsinki would have Unix, the powerful operating system that had been bred in AT&T’s Bell Labs
   in the late 1960s but had grown up elsewhere. In my first year of studies, we had a VAX running
   VMS. It was a horrible operating system, certainly not an environment that made you say, “Gee,
   I’d like to have this at home, too.” Instead it made you say, “Hmmm. How do you do that?” It was
   hard to use. It didn’t have many tools. It wasn’t suited to easily accessing the Internet, which was
   running on Unix. You couldn’t even easily figure out how large a file was. Admittedly, VMS was
   very well suited for certain operations, like databases. But it’s not the kind of operating system
   that you get excited about.

   The university had realized it was time to move away from all that. Much of the academic
   world was then growing enamored of Unix, so the university acquired a MicroVAX running
   Ultrix, which was Digital Equipment Corporation’s version of Unix. It was a way of testing the
   waters of Unix.

   I was eager to work with Unix by experimenting with what I was learning in Andrew
   Tanenbaum’s book, excited about all the things I could explore if I had a 386 PC. There was no
   way I could get together the 18,000 FIM to buy one. I knew that once the fall semester began, I
   would be able to use my Sinclair QL to access the university’s new Unix computer until I could
   afford to buy a PC on which I could run Unix on my own.

   So there were two things I did that summer. Nothing. And read the 719 pages of Operating
   Systems: Design and Implementation. The red soft-cover textbook sort of lived on my bed.

   The University of Helsinki sprang for a sixteen-user license for the MicroVAX. That meant
   admittance to the “C and Unix” course was limited to thirty-two students—I guess the thinking
   was that sixteen people would be using it by day, sixteen by night. Like the rest of us, the teacher
   was new to Unix. He admitted this up front, so it wasn’t really a problem. But he would read the
   text only one chapter ahead of the students, whereas the students were sometimes skipping ahead
   by three chapters. So it became something of a game in which people tried to trip up the teacher
   by asking questions that related to things we would be learning three chapters later, just to see if
   he had read that far.

   We were all babes in the Unix woods, with a course that was being made up as we went along.

   But what was obvious from this course was that there was a unique philosophy behind Unix. You
   grasped this in the first hour of the course. The rest was explaining the details.

   What is special about Unix is the set of fundamental ideals that it strives for. It is a clean and
   beautiful operating system. It avoids special cases. Unix has the notion of processes—a process is
   anything that does anything. Here’s a simple example. In Unix the shell command, which is what
   you type to gain entry into the operating system, is not built into the operating system, as with
   DOS. It’s just a task. Like any other task. It just happens that this task reads from your keyboard
   and writes back to your monitor. Everything that does something in Unix is a process. You also
   have files.

   This simple design is what intrigued me, and most people, about Unix (well, at least us geeks).

   Pretty much everything you do in Unix is done with only six basic operations (called “system
   calls,” because they are the calls you make to the operating system to do things for you). And you
   can build up pretty much everything from those six basic system calls.

   There’s the notion of “fork,” which is one of the fundamental Unix operations. When a process
   does a fork, it creates a complete copy of itself. That way, you have two copies that are the same.

   The child copy most often ends up executing another process—replacing itself with a new
   program. And that’s the second basic operation. Then you have four other basic system calls:
   open, close, read, and write—all designed to access files. Those six system calls make up the
   simple operations that comprise Unix.

   Sure, there are tons of other system calls to fill in all the details. But once you understand the
   six basic ones, you understand Unix. Because one of the beauties of Unix is realizing that you
   don’t need to have complex interfaces to build up something complex. You can build up any
   amount of complexity from the interactions of simple things. What you do is create channels of
   communication (called “pipes” in Unix-speak) between simple processes to create complex
   problem-solving.

   An ugly system is one in which there are special interfaces for everything you want to do. Unix
   is the opposite. It gives you the building blocks that are sufficient for doing everything. That’s
   what having a clean design is all about.

   It’s the same thing with languages. The English language has twenty-six letters and you can
   build up everything from those letters. Or you have the Chinese language, in which you have one
   letter for every single thing you can think of. In Chinese, you start off with complexity, and you
   can combine complexity in limited ways. That’s more of the VMS approach, to have complex
   things that have interesting meanings but can’t be used in any other way. It’s also the Windows
   approach.

   Unix, on the other hand, comes with a small-is-beautiful philosophy. It has a small set of
   simple basic building blocks that can be combined into something that allows for infinite
   complexity of expression.

   This, by the way, is also how physics works. You try and find the fundamental rules that are
   supposed to be fairly simple. The complexity comes from the many incredible interactions you get
   from those simple rules, not from any inherent complexity of the rules themselves.

   The simplicity of Unix did not just happen on its own. Unix, with its notion of simple building
   blocks, was painstakingly designed and written by Dennis Richie and Ken Thompson at AT&T’s
   Bell Labs, And you should absolutely not dismiss simplicity for something easy. It takes design
   and good taste to be simple.

   To go back to the example of human languages: Pictorial writing like Chinese characters and
   hieroglyphics tend to happen first, and be “simpler,” whereas the building block approach requires
   far more abstract thinking. In the same way, you should not confuse the simplicity of Unix with a
   lack of sophistication—quite the reverse.

   Which is not to say that the original reasons for Unix were all that sophisticated. Like so many
   other things in computers, it was all about games. It took somebody who wanted to play computer
   games on a PDP-11. Because that was what UNIX started out being developed for—Dennis and
   Ken’s personal project for playing Space Wars. And because the operating system wasn’t
   considered a serious project, AT&T didn’t think of it as a commercial venture. In fact, AT&T was
   a regulated monopoly, and one of the things they couldn’t do was to sell computers anyway. So
   the people who created Unix made it available quite freely along with source licenses, especially
   to universities. It wasn’t a big deal.

   This all led to Unix becoming a big project in academic circles. By the time of the 1984
   breakup, when AT&T was finally allowed to get into the computer business, computer scientists at
   universities—particularly the University of California-Berkeley—had been working on and
   improving Unix for years under the direction of people like Bill Joy and Marshall Kirk McKusik.

   People hadn’t always necessarily put a lot of effort into documenting what they did.

   But by the early 1990s, Unix had become the number-one operating system for all
   supercomputers and servers. It was huge business. One of the problems was that there were, by
   now, a host of competing versions of the operating system. Some were derived from the more
   controlled confines of the AT&T code base (the so-called “System V” flavors), while others were
   derived from the University of California-Berkeley code-base BSD (Berkeley Software
   Distribution). Yet others were a mixture of the two.

   One BSD derivation in particular is worth mentioning. It was the 386BSD project done by Bill
   Jolitz based on the BSD code-base, distributed over the Internet. It was later to fragment and
   become the freely available BSD flavors—NetBSD, FreeBSD, and OpenBSD—and it was getting
   a lot of attention in the Unix community.

   That’s why AT&T woke up and sued the University of California-Berkeley. The original code
   had been AT&T’s but most of the subsequent work had been done at Berkeley. The University of
   California regents contended that they had the right to distribute, or sell for a nominal fee, their
   version of Unix. And they demonstrated that they had done so much work that they essentially
   rewrote what AT&T had made available. The suit ended up being settled after Novell, Inc., bought
   Unix from AT&T. Essentially, parts of the system had to be excised from what AT&T had made
   available.

   Meanwhile, all the legal haggling had been instrumental in giving a new kid on the block some
   time to mature and spread itself. Basically, it gave Linux time to take over the market. But I’m
   getting ahead of myself.

   Since I’m digressing anyway, I’d like to explain something. Unix has this reputation for being
   a magnet for the eccentric fringe of computing. It’s a reputation not worth arguing against. It’s
   true.

   Frankly, there are a lot of fairly crazy people in Unix. Not postal-rage crazy. Not poison-the-
   neighbor’s-dog crazy. Just very alternative-lifestyle people.

   Remember, much of the initial Unix activity took place in the late 1960s and early 1970s, while
   I was sleeping in a laundry basket in my grandparents’ apartment. These were flower power
   people—but technical flower power people. A lot of the Unix-must-be-free philosophy has more
   to do with the circumstances of the time rather than with the operating system. It was a time of
   rampant idealism. Revolution. Freedom from authority. Free love (which I missed out on, and
   probably wouldn’t have known what to do with, anyway). And the relative openness of Unix, even
   if it was mainly due to the lack of commercial interests of the time, made it attractive to this kind
   of person.

   The first time I was introduced to this side of Unix was probably in 1991 or so when Lars
   Wirzenius dragged me along to an event at the Polytechnic University of Helsinki (which, as
   everybody knows, is not actually in Helsinki but right across the border in Espoo). They just want
   to be associated with the glamorous Helsinki even if only by name). The speaker was Richard
   Stallman.

   Richard Stallman is the God of Free Software. He started to work on an alternative to Unix in
   1984, calling it the GNU system. GNU stands for “GNU is Not Unix,” being one of many
   recursive acronyms where one of the letters stands for the acronym itself—a kind of computer
   science in-joke that nobody else ever gets. Geeks—we’re just tons of fun to be around.

   More importantly, RMS, as he prefers to be called, also wrote the Free Software Manifesto, and
   the Free Software copyright license—the GPL (General Public License). Basically, he pioneered
   the notion of free source-code availability as something intentional, not just an accident, the way
   it happened with original Unix open development.

   I have to admit that I wasn’t much aware of the sociopolitical issues that were—and are—so
   dear to RMS. I was not really all that aware of the Free Software Foundation, which he founded,
   and all that it stood for. Judging from the fact that I don’t remember much about the talk back in
   1991, it probably didn’t make a huge impact on my life at that point. I was interested in the
   technology, not the politics—I had had enough politics at home. But Lars was an ideologist, and I
   tagged along and listened.

   In Richard I saw, for the first time in my life, the stereotypical longhaired, bearded hacker type.

   We don’t much have them in Helsinki.

   I may not have seen the light, but I guess something from his speech must have sunk in. After
   all, I later ended up using the GPL for Linux. There I go, getting ahead of myself again.


.. _PE15:

IV
--

   January 2, 1991. It was the first day the stores were open after Christmas and my twenty-first
   birthday, the two biggest cash-generating days on my calendar.

   With my Christmas-and-birthday money in hand, I made this huge economic decision to buy a
   computer that would cost 18,000 FIM, which was about $3,500. I didn’t have that kind of money,
   so the idea was to put down one third of the cost and buy the computer on credit. Actually, the
   computer cost 15,000 FM. The rest came from the financing charges that would be paid over three
   years.

   It was at one of these small corner shops, sort of a mom-and-pop computer store, only in this
   case it was just pop. I didn’t care about the manufacturer, so I settled on a no-name, white-box
   computer. The guy showed you a price list and a smorgasbord of what CPU was available, how
   much memory, what disk size. I wanted power. I wanted to have 4 megabytes of RAM instead of 2
   megabytes. I wanted 33 megahertz. Sure, I could have settled for 16 megahertz, but no, I wanted
   top of the line.

   You told them what you wanted and they would put it together for you. It sounds quaint in this
   era of the Internet and UPS shipments. You came back three days later to pick it up, but those
   three days felt like a week. On January 5th I got my dad to help me drive the thing home.

   Not only was it no-name, it was also nondescript. It was a basic gray block. I didn’t buy this
   computer because it looked cool.

   It was a very boring-looking machine with a fourteen-inch screen, the cheapest, most
   reasonably studly box I could find. Incidentally, by “studly” I mean a powerful computer that a
   few people owned. I don’t intend to make it sound so unappealing-yet-functional, sort of like a
   Volvo station wagon. But the fact is: I wanted something dependable and with easy access to the
   upgrades I would inevitably require.

   The computer came with a cut-down version of DOS. I wanted to run Minix, the Unix variant,
   so I ordered it and the operating system took more than a month to make its way to Finland. Oh,
   you could buy the book on Minix from a computer store, but, since there was so little demand for
   the operating system itself, you had to order it from the bookstore. The cost was $169 plus taxes,
   plus conversion factor, plus whatever. I thought it was outrageous at the time. Frankly, I still do.

   The wasted month felt like about six years. I was even more frustrated by that than I had been
   during the months I was waiting to buy my PC.

   And this was dead-winter. Every time you left your bedroom for the outside world you risked
   getting knocked onto the snow by old ladies who should have been home making cabbage soup for
   their families or watching hockey on television while knitting sweaters, not staggering along
   Mannerheimintie. I basically spent that month playing Prince of Persia on my new computer.

   When I wasn’t doing that, I would read books that helped me understand the computer I had
   bought.

   Minix finally arrived on a Friday afternoon, and I installed it that night. It required feeding
   sixteen floppy disks into the computer. The entire weekend was devoted to getting accustomed to
   the new system. I learned what I liked about the operating system—and, more importantly, what I
   didn’t like. I tried to compensate for its shortcomings by downloading programs that I had gotten
   used to from the university computer. In all, it took me a month or more to make this my own
   system.

   Andrew Tanenbaum, the professor in Amsterdam who wrote Minix, wanted to keep the
   operating system as a teaching aid. So it had been crippled on purpose, in bad ways. There were
   patches to Minix—improvements, that is—including a well-known patch made by a hacker in
   Australia named Bruce Evans, who was the God of Minix 386. His improvement made Minix
   much more usable on a 386. Before even getting the computer I had been following the Minix
   newsgroups online, so I knew from the very beginning that I wanted to run his enhanced version.

   But because of the licensing situation, you had to buy the real version of Minix and then do a lot
   of work to bootstrap Evans’s patches. It was a fairly major thing to do.

   There were a number of features that disappointed me with Minix. The biggest letdown was
   terminal emulation, which was important because it was the program I used to connect to the
   university computer. I relied upon terminal emulation whenever I wanted to dial up the
   university’s computer to either work on the powerful Unix computer or just go online.

   So I began a project to create my own terminal emulation program. I didn’t want to do the
   project under Minix, but instead to do it at the bare hardware level. This terminal emulation
   project would also be a great opportunity to learn how the 386 hardware worked. As I mentioned,
   it was winter in Helsinki. I had a studly computer. The most important part of the project was to
   just figure out what this machine did and have fun with it.

   Because I programmed to the bare metal I had to start off from the BIOS, which is the early
   ROM code that the computer boots into. The BIOS reads either the floppy or the hard disk, and in
   this case, I had my program on a floppy. The BIOS reads the first sector of the floppy and starts
   executing it. This was my first PC and I had to learn how all this was done. This all happens in
   what’s called “real mode.” But in order to take advantage of the whole CPU and get into 32-bit
   mode, you have to go into “protected mode.” There’s a lot of complicated setup you have to do to
   make this happen.

   So to create a terminal emulation program this way, you need to know how the CPU works. In
   fact, part of the reason I wrote in assembly language was just to learn about the CPU. The other
   things you need to know are how to write to the screen, how to read keyboard input, how to read
   and write to the modem. (I hope I’m not losing any of the non-geeks who have steadfastly refused
   to leap ahead to page 120.)
   I wanted to have two independent threads. One thread would read from the modem and then
   display on the screen. The other thread would read from the keyboard and write out to the modem.

   And there would be two pipes going both ways. This is called task-switching, and a 386 had
   hardware to support this process. I thought it was a cool idea.

   My earliest test program was written to use one thread to write the letter A to the screen. The
   other thread wrote the letter B. (I know, it sounds unimpressive.) And I programmed this to
   happen a number of times a second. With the timer interrupt, I wrote it so that the screen would
   fill with AAAAAAAAAA. Then, all of a sudden, it would switch to BBBBBBBBB. It’s a
   completely useless exercise from any practical standpoint, but it was a good way of showing that
   my task-switching worked. It took maybe a month to do this because I had to learn everything as I
   was going along.

   So ultimately I was able to change the two threads, the AAAAAAAA and BBBBBBB, so that
   one read from the modem and wrote to the screen, and the other read from the keyboard and wrote
   to the modem. I had my own terminal emulation program.

   When I wanted to read news, I would put in my floppy and reboot the machine, and I would
   read news from the university computer using my program. If I wanted to make changes to
   improve the terminal emulation package, I would boot into Minix and use it for programming.

   And I was very proud of it.

   My sister Sara knew about my great personal accomplishment. I showed it to her and she
   looked at the screens of AAAAAA’s and BBBBBBBB’s for about five seconds; then she said
   “Good” and went away, unimpressed. I realized it didn’t look like much. It’s completely
   impossible to explain to somebody else that, while something may not look like much, a lot is
   going on in the background. It’s about as impressive as showing somebody a stretch of road
   you’ve just filled in with tar. Probably the only other person who saw it was Lars, the other
   Swedish-speaking computer science major who started the same year I did.

   It was March, maybe April, and if the snow was turning to slush on Petersgatan. I didn’t know
   —or much care. I was spending most of my time in a bathrobe, huddled over my unattractive new
   computer, with thick black window shades shielding me from the sunlight, not to mention the
   outside world. I was eeking out the monthly payments for my PC, which was scheduled to be paid
   off in three years. What I didn’t know was that I would only be sending in payments for another
   year. By then, I would have written Linux, which would be seen by many more people than just
   Sara and Lars. By that time, Peter Anvin, who works with me now at Transmeta, would have
   started a collection on the Internet to get my computer paid off.

   Everybody knew I wasn’t making any money on Linux. People just started saying, Let’s start a
   collection to pay off Linus’s computer.

   It was wonderful.

   I had absolutely no money. I always felt it was important to not have asked for money or
   begged for money, but the fact that it was simply given to me was… I’m getting choked up.

   That’s how Linux got started. With my test programs turning into a terminal emulation
   package.

   Red Herring magazine sends me to Finland to report on Oulu, the emerging high-tech center
   that is home to 141 startups despite its forbidding location a few hours’ drive from the Arctic
   Circle. It’s a good opportunity to hook up with Linus’s parents and his sister, Sara, in Helsinki.

   His father, Nils (who goes by the name Nicke), meets me in the lobby of the Sokos Hotel
   Vaakuna, across the plaza from the Helsinki railway station. He is trim, wears thick glasses, bears
   Lenin’s beard. He has recently ended his four-year assignment in Moscow for the Finnish
   Broadcasting Company and is now writing a book about Russia and deciding whether or not to
   take a post in Washington, a place he doesn’t find interesting. Months earlier he had won a
   prestigious national journalism award, a commendation that his ex-wife Anna later would say
   “mellowed him considerably.”

   In the early evening he drives me in his Volvo V40 on a tour of Linus’s snow-crusted
   neighborhoods, pointing out the solid building in which both father and son attended elementary
   school, driving past the grandparents’ apartment where Linus lived in his first three months, and
   then the park-view building in which the family lived for the following seven years. Nicke had
   spent one of those years in Moscow studying to be a communist, when Linus was five years old.

   Next he points out the pale yellow apartment building in which Linus and his sister moved
   following the divorce—a street-level adult video store has replaced the electronics supply store of
   Linus’s youth—and finally we drive past the most substantial of the structures, the five-story
   apartment block in which his maternal grandparents resided, the birthplace of Linux. Linus’s
   mother, Anna, still lives there. This could be Manhattan’s Upper East Side in late December.

   Nicke is funny, smart, self-deprecating, and shares a host of gestures with his son, like the way
   he cradles his chin in his hand when he talks. They also share a grin. Unlike his son he is a
   lifelong athlete—a socialist jock—who plays on a basketball team, runs five miles a day, and has
   taken to swimming distances in an icy lake early each morning. At fifty-five, he walks with the
   athletic confidence of someone maybe two thirds his age. Another trait he does not share with
   Linus: Nicke seems to have had a complicated romantic life.

   We have dinner in a bustling restaurant in central Helsinki where Nicke talks about the
   difficulty Linus had growing up as the son of an overactive communist who was a frequent public
   speaker and at one point held a minor public office. He explains that Linus was often teased about
   his father’s radical politics, and that some parents even refused to let him play with their children.

   For that reason, explains Nicke, his son made a constant effort to distance himself from the left-
   wing rhetoric that was the backdrop of his childhood. “He wouldn’t let me discuss it. He would
   leave the room,” Nicke says. “Or else he always made a point of having an opposing view. I know
   Linus was teased in school for having the wrong father. The message to me was, ‘Don’t put me in
   this awkward situation.’”

   Nicke drives me to his home, where he says we will drink beer in his kitchen. It is north of the
   central business district, in a collection of buildings that were originally built in the 1920s to
   house workers. We ascend the steps to his apartment and remove our shoes in the entry. The place
   recalls the late 1960s counterculture, with woven-basket lampshades, third-world wall hangings,
   houseplants. We sit at the kitchen table, where Nicke pours beer and we talk about fathering. “A
   parent shouldn’t think that it is he who makes his children what they are,” he says, reaching for
   his mobile phone to dial up the woman with whom he lives. He indicates that Linus is just starting
   to read the historical books he has been bugging him to read for years, and that Linus probably
   has never bothered to read his own grandfather’s poetry.

   I ask Nicke if he has ever expressed an interest in programming, ever asked Linus to show him
   the fundamentals. He tells me he never has. Fathers and sons are unique individuals, he reasons,
   explaining that the act of delving into Linus’s passion would be akin to “invading his soul.” He
   seems comfortable in the role of father to a famous person. In a recent newspaper profile
   following his winning of the national journalism award, he was quoted as saying that, even in the
   days when he picked Linus up from the playground, other kids would point and say, “Look, there’s
   Linus’s father!”

   Sara Torvalds has traveled by train from her home in a small city west of Helsinki, where the
   street signs are in Swedish first and Finnish second, and where she can afford an apartment with a
   claw-foot tub and sauna, and where, to her delight, Swedish—not Finnish—is heard on the streets.

   As she explains, she is in a minority within a minority: as a young adult she converted to
   Catholicism, an act that relegated her to the 10 percent of Finnish citizens who are non-Lutherans
   and caused her agnostic father to disown her for a matter of weeks.

   Today she has traveled to Helsinki to teach catechism to youngsters under a government-
   sponsored program. She is pleasant and upbeat, and at twenty-nine she exudes the uncynical spirit
   of an earnest and busy high schooler. Her fair skin and round face give her a vague resemblance
   to her older brother, but it is obvious that she is naturally more sociable than he is. She regularly
   taps the keys of her mobile phone to send text messages to friends she will be meeting later in the
   day; then, just as frequently, she checks for replies. She has a successful translation business.

   It is noon and Sara is taking me to meet her mother for lunch, with stops at various childhood
   locales: the cat park, the elementary school. “My parents were card-carrying communists, so
   that’s how we were brought up—to think the Soviet Union was a good thing. We visited Moscow,”

   she explains. “What I remember most was the huge toy store they had, bigger than anything in
   Helsinki.” Her parents divorced when she was six. “I remember when we were told that Dad
   would be moving out for good. I thought, That’s good. Now the fighting will stop. Actually, he had
   been going to Moscow for long periods, so we were used to him going away,” she says. By the time
   she was ten, Sara opted to move in with her father who had relocated to the neighboring city of
   Espoo, rather than live with her mother and Linus. “It wasn’t that I didn’t want to live with Mom.

   It was just that I didn’t want to live with Linus. That way we would only fight on weekends. We
   fought all the time. Little by little, we fought less as we grew older.”

   We arrive at her mother’s first-floor apartment and Anna Torvalds is thrilled to see us. Mikke
   is her nickname. She refuses to let me indulge in be Finnish custom of removing one’s shoes:
   “Don’t be silly. This place is already dusty. You couldn’t possibly make it worse.” She is short,
   dark-haired, and extremely quick-witted. Within seconds of our arrival, the telephone rings. A real
   estate agent wants to show me the vacant apartment adjacent to Mikke’s, so that I could describe
   it to her son in the United-States and hand-deliver literature about it, in the event that he might
   want to purchase the place as a sort of Helsinki pied-a-terre. We enter the brawling apartment,
   where the agent, who bears an eerie resemblance to be Annette Bening character in the film
   American Beauty, instructs us to slip little blue cloth booties over our shoes before we take the
   tour. Soon the agent, in an annoyingly cheerful tone, says something like, “Now this room here.

   It’s a perfect room for antiques that you wouldn’t want to have damaged by the sun.” Mikke
   shoots me a conspiratorial glance and replies, in a mocking voice: “Oh, what a delightful way of
   telling us this room doesn’t get any light.”

   Back in her own kitchen, Mikke sits at a rectangular table earing a colorful tablecloth and
   pours coffee into an oversized mug. Her apartment, like that of her ex-husband, brims with books
   and folk art. There are black and white Marimekko curtains. The apartment originally contained
   three bedrooms and a kitchen. When her children moved out, Mikke moved into the large bedroom
   that had been occupied by Sara. She then dismantled the walls around Linus’s room, and those
   round her original bedroom, to create a huge livingroom/kitchen. She points to a vacant spot and
   says, “That’s where his computer was. I guess should put up some sort of plaque. What do you
   think?” She chain smokes. She is an easy conversationalist, with such a solid command of English
   that there are no pauses when she delivers a phrase like, “He’s not some random shmuck you meet
   on the street.” On the wall in her bedroom is a huge Soviet flag. It was a gift to Linus from Jouko
   Vierumaki, who had bought it during an international ski-jump competition. Linus had kept it in a
   drawer for years, but Mikke hung it above her bed.

   Mikke pulls out an album containing the family’s few photographs. There’s Linus at the age of
   two or three, naked on the beach. There’s Linus, at the same age, shooting a moon outside a
   famous castle near Helsinki. There’s Linus as an early adolescent, looking thin and awkward.

   There’s Mikke at a sixtieth birthday party for her statistics-professor father. She points out her
   older sister and brother. “She’s a New York psychiatrist. He’s a nuclear physicist. And me, I’m the
   black sheep. Right? But I had the first grandchild,” she declares, then lights a Gauloises.

   We eat lunch at a restaurant named for Wilt Chamberlain. Sara consults her mobile phone
   while Mikke orders multiple espressos. Mikke recalls the way she and Nicke argued over whether
   Linus should or should not be forced to give up his pacifier: they wrote notes to each other and
   left them on the counter. There is talk about Linus’s poor memory and his inability to remember
   faces. “If you’re watching a movie with him and the hero changes his shirt from red to yellow,
   Linus will ask, ‘Who is this guy?’” says Sara. There is talk about a family biking/camping
   vacation to Sweden. Sleeping on the overnight ferry. Having Sara’s bicycle stolen the first day.

   Spending the budget on a new bicycle. Erecting the tent on a cliff. Leaving Linus inside to read all
   day while mother and daughter swam and fished. And then, after a powerful windstorm blew in,
   realizing that the only thing preventing the tent from being whisked into the Baltic Sea was Linus,
   who had been sleeping inside, oblivious to the extreme change in weather.

   Mikke laughs as she relives the years in which Linus hid in his room, slaving away on a
   computer. “Nicke kept saying to me, ‘Kick him out, make him get a job,’ but Linus wasn’t
   bothering me. He didn’t require much. And whatever it was he was doing with his computer, that
   was his business, his thing, and he had a right to do it. I had no idea what it was all about.”

   Now she is as current as anyone on her son’s activities. Mikke and the other family members
   are on the receiving end of a continual barrage of media queries. Those requests are forwarded to
   Linus, who typically responds by telling his mother, father, or sister to use their own judgment
   when answering. But after they write a response, they generally forward it to Linus for his
   approval before sending it on to the reporter.

   Months earlier, when I emailed Mikke requesting her recollections of Linus’s childhood, her
   response was lengthy and well-crafted. She titled her essay, “On Raising Linus from a Very Small
   Nerd.” In it, she recounted her early observations that her toddler son showed the same signs of
   scientific determination she saw in her father and older brother: “When you see a person whose
   eyes glaze over when a problem presents itself or continues to bug him or her, who then does not
   hear you talking, who fails to answer any simple question, who becomes totally engrossed in the
   activity at hand, who is ready to forego food and sleep in the process of working out a solution,
   and who does not give up. Ever. He—or she, of course—may be interrupted, and in the course of
   daily life often is, but blithely carries on later, single-mindedly. Then you know.” She wrote about
   the sibling rivalry between Linus and Sara, and about the irreconcilable differences. (Sara: “I
   don’t LIKE the taste of mushrooms/liver/whatever.” Linus: “YES YOU DO!”) And the grudging
   respect. “Linus once expressed his awe of his sister very succinctly at an early age. He might have
   been five or seven or whatever, when he very seriously told me: ‘You see. I don’t think any new
   thoughts. I think thoughts that other people have thought, and I rearrange them. But Sara, she
   thinks thoughts that never were before.’”

   These reminiscences may reveal that I still don’t think Linus has any ‘special’ talent and certainly not for computers—if it
   weren’t that, it would be something else. In another day and age he would focus on some different challenge, and I think he
   will. (What I mean is, I hope he won’t be stuck in Linux maintenance forever). For he is, I think, motivated not by
   ‘computers,’ and certainly not by fame or riches, but by honest curiosity and a wish to conquer difficulties as they arise, and
   to do it *the right way* because that’s the way it IS and he won’t give up.

   I suppose I have already answered the question of what Linus was like as a son—easy to raise, yes. All he needed was a
   challenge and he did the rest. When he did start concentrating on computers as a youngster, it was even easier. As Sara and
   I used to say, just give Linus a spare closet with a good computer in it and feed him some dry pasta and he will be perfectly
   happy.

   Except… and this is where my heart was in my throat when he was growing up: How on Earth was he going to meet any
   nice girls that way? I could only once more resort to the tried and true parenting measure of keeping my fingers crossed.

   And lo and behold: It worked! He met Tove while teaching at the university, and when she made him forget both his cat and
   his computer for several days, it was immediately obvious that Nature had triumphed, as is her wont.

   I only hope the Ghouls of Fame won’t distract him too much. (Fame seems not to have changed him, but he has mellowed,
   and now tends to talk to people when they approach him. He even seems to have difficulty saying no. But I suspect it has
   more to do with his having become a husband and father than with all the media hullabaloo).

   And it’s obvious that both mother and daughter stay abreast of that hullabaloo. It is late January
   2000, the day following Transmeta’s big public announcement of what it has been up to, and early
   in our lunch, Mikke asks Sara, “Was there anything in the paper today about you-know-who and
   you-know-what?”

   That night, on her way to work, Mikke asks her taxi to wait outside my hotel while she drops off
   a pine child’s chair she’d like me to hand-deliver to Patricia. That, and a floor plan of the
   available apartment for Linus.

   About my first memory of Linus doing something remarkable.

   I think it was early 1992. I was visiting Linus at his completely messy home once again-by bike and with no agenda. While
   watching MTV, as usual, I asked about Linus’s operating-system development. Normally he answered something
   meaningless. This time, he led me to his computer (from Torvalds’ messy kitchen to his totally chaotic room).

   Linus gave the computer his username and password and got to a command prompt. He showed some basic functionality
   of the command interpreter-nothing special, though. After a while, he turned to me with a Linus grin on his face and asked:
   “It looks like DOS, doesn’t it?”

   I was impressed and nodded. I wasn’t stunned, because it looked like DOS too much-with nothing new, really. I should
   have known Linus never grins that way without a good reason. Linus turned back to his computer and pressed some function
   key combination-another login screen appeared. A new login and a new command prompt. Linus showed me four. individual
   command prompts and explained that later they could be accessed by four separate users.

   That was the moment I knew Linus had created something wonderful. I have no problem with that-I still dominate the
   snooker table.

   – Jouko “Avuton” Vierumaki
   For me, it meant mainly that the phone lines were constantly busy and nobody could call us… At some point, postcards
   began arriving from different corners of the globe. I suppose that’s when I realized people in the real world were actually
   using what he had created.

   – Sara Torvalds

.. _PE16:

V: The Beauty of Programming
----------------------------

   I don’t know how to really explain my fascination with programming, but I’ll try. To somebody
   who does it, it’s the most interesting thing in the world. It’s a game much more involved than
   chess, a game where you can make up your own rules and where the end result is whatever you can
   make of it.

   And yet, to the outside, it looks like the most boring thing on Earth.

   Part of the initial excitement in programming is easy to explain: just the fact that when you tell
   the computer to do something, it will do it. Unerringly. Forever. Without a complaint.

   And that’s interesting in itself.

   But blind obedience on its own, while initially fascinating, obviously does not make for a very
   likable companion. In fact, that part gets pretty boring fairly quickly. What makes programming
   so engaging is that, while you can make the computer do what you want, you have to figure out
   how.

   I’m personally convinced that computer science has a lot in common with physics. Both are
   about how the world works at a rather fundamental level. The difference, of course, is that while
   in physics you’re supposed to figure out how the world is made up, in computer science you
   create the world. Within the confines of the computer, you’re the creator. You get to ultimately
   control everything that happens. If you’re good enough, you can be God. On a small scale.

   And I’ve probably offended roughly half the population on Earth by saying so.

   But it’s true. You get to create your own world, and the only thing that limits what you can do
   are the capabilities of the machine—and, more and more often these days, your own abilities.

   Think of a treehouse. You can build a treehouse that is functional and has a trapdoor and is stable.

   But everybody knows the difference between a treehouse that is simply solidly built and one that
   is beautiful, that takes creative advantage of the tree. It’s a matter of combining art and
   engineering. This is one of the reasons programming can be so captivating and rewarding. The
   functionality often is second to being interesting, being pretty, or being shocking.

   It is an exercise in creativity.

   The thing that drew me into programming in the first place was the process of just figuring out
   how the computer worked. One of the biggest joys was learning that computers are like
   mathematics: You get to make up your own world with its own rules. In physics, you’re
   constrained by existing rules. But in math, as in programming, anything goes as long as it’s self-
   consistent. Mathematics doesn’t have to be constrained by any external logic, but it must be
   logical in and of itself. As any mathematician knows, you literally can have a set of mathematical
   equations in which three plus three equals two. You can do anything you want to do, in fact, but as
   you add complexity, you have to be careful not to create something that is inconsistent within the
   world you’ve created. For that world to be beautiful, it can’t contain any flaws. That’s how
   programming works.

   One of the reasons people have become so enamored with computers is that they enable you to
   experience the new worlds you can create, and to learn what’s possible. In mathematics you can
   engage in mental gymnastics about what might be. For example, when most people think of
   geometry, they think of Euclidean geometry. But the computer has helped people visualize
   different geometries, ones that are not at all Euclidean. With computers, you can take these made-
   up worlds and actually see what they look like. Remember the Mandelbrot set—the fractal images
   based on Benoit Mandelbrot’s equations? These were visual representations of a purely
   mathematical world that could never have been visualized before computers. Mandelbrot just
   made up these arbitrary rules about this world that doesn’t exist, and that has no relevance to
   reality, but it turned out they created fascinating patterns. With computers and programming you
   can build new worlds and sometimes the patterns are truly beautiful.

   Most of the time you’re not doing that. You’re simply writing a program to do a certain task. In
   that case, you’re not creating a new world but you are solving a problem within the world of the
   computer. The problem gets solved by thinking about it. And only a certain kind of person is able
   to sit and stare at a screen and just think things through. Only a dweeby, geeky person like me.

   The operating system is the basis for everything else that will happen in the machine. And
   creating one is the ultimate challenge. When you create an operating system, you’re creating the
   world in which all the programs running the computer live—basically, you’re making up the rules
   of what’s acceptable and can be done and what can’t be done. Every program does that, but the
   operating system is the most basic. It’s like creating the constitution of the land that you’re
   creating, and all the other programs running on the computer are just common laws.

   Sometimes the laws don’t make sense. But sense is what you strive for. You want to be able to
   look at the solution and realize that you came to the right answer in the right way.

   Remember the person in school who always got the right answer? That person did it much more
   quickly than everybody else, and did it because he or she didn’t try to. That person didn’t learn
   how the problem was supposed to be done but, instead, just thought about the problem the right
   way. And once you heard the answer, it made perfect sense.

   The same is true in computers. You can do something the brute force way, the stupid, grind-
   the-problem-down-until-it’s-not-a-problem-anymore way, or you can find the right approach and
   suddenly the problem just goes away. You look at the problem another way, and you have this
   epiphany: It was only a problem because you were looking at it the wrong way.

   Probably the greatest example of this is not from computing but from mathematics. The story
   goes that the great German mathematician Carl Friedrich Gauss was in school and his teacher was
   bored, so to keep the students preoccupied he instructed them to add up all the numbers between 1
   and 100. The teacher expected the young people to take all day doing that. But the budding
   mathematician came back five minutes later with the correct answer: 5,050. The solution is not to
   actually add up all the numbers, because that would be frustrating and stupid. What he discovered
   was that by adding 1 and 100 you get 101. Then by adding 2 and 99 you get 101. Then 3 and 98 is
   101. So 50 and 51 is 101. In a matter of seconds he noticed that it’s 50 pairs of 101, so the answer
   is 5,050.

   Maybe the story is apocryphal, but the point is clear: A great mathematician doesn’t solve a
   problem the long and boring way because he sees what the real pattern is behind the question, and
   applies that pattern to find the answer in a much better way. The same is definitely true in
   computer science, too. Sure, you can just write a program that calculates the sum. On today’s
   computers that would be a snap. But a great programmer would know what the answer is simply
   by being clever. He would know to write a beautiful program that attacks the problem in a new
   way that, in the end, is the right way.

   It’s still hard to explain what can be so fascinating about beating your head against the wall for
   three days, not knowing how to solve something the better way, the beautiful way. But once you
   find that way, it’s the greatest feeling in the world.


.. _PE17:

VI
--

   My terminal emulator grew legs. I was using it regularly to log onto the university computer and
   read email or participate in the discussions of the Minix newsgroup. The trouble is, I wanted to
   download things and upload things. That meant I needed to be able to save things to disk. In order
   to do that, my terminal emulator would require a disk driver. It also needed to get a file system
   driver, so that it would be able to look at the organization of the disk and save the stuff I was
   downloading as files.

   That was the point where I almost gave up, thinking it would be too much work and not worth
   it. But there wasn’t much else to do. I was going to classes that spring, and they weren’t especially
   challenging. My sole outside activity was the weekly meeting (party) of Spektrum each
   Wednesday night. Social non-animal that I was, that became my only occasion to do anything
   other than program or study. Without those meetings (parties), I would have been a total recluse
   that spring, instead of a near-total recluse. Spektrum provided a built-in framework for a social
   life of some sort, and I don’t think I over missed one of their events. They were important to me—
   so important, in fact, that I sometimes lost sleep anticipating those meetings, hoping not to feel
   self-conscious about my lack of social graces or my nose or my obvious absence of a girlfriend.

   This is standard geek stuff.

   What I’m trying to say is that I didn’t have a heck of a lot of other interesting things going on.

   And the disk driver/file system driver project would be interesting. So I said, I’ll do this. I wrote a
   disk driver. And because I wanted to save files to my Minix file system—and because the Minix
   file system was well-documented anyway—I made my file system compatible with the Minix file
   system. That way, I could read files I created under Minix and write them to the same disk so that
   Minix would be able to read the files I created from my terminal emulation thing.

   This took a lot of work—a program-sleep-program-sleep-program-eat (pretzels)-program-
   sleep-program-shower (briefly)-program schedule. By the time I did this it was clear the project
   was on its way to becoming an operating system. So I shifted my thinking of it as a terminal
   emulator to thinking of it as an operating system. I think the transition occurred in the hypnosis of
   one of those marathon programming sessions. Day or night? I can’t recall. One moment I’m in my
   threadbare robe hacking away on a terminal emulator with extra functions. The next moment I
   realize it’s accumulating so many functions that it has metamorphosed into a new operating
   system in the works.

   I called it my “gnu-emacs of terminal emulation programs.” Gnu-emacs started out as an
   editor, but the people who created it built in a host of functions. They intended it to be an editor
   that can be programmed, but then the programmability part took over and it became the editor
   from hell. It contains everything but the kitchen sink, which is why sometimes the icon for the
   editor is actually a kitchen sink. It’s known for being a huge piece of programming effort that has
   more functions than any editor needs. The same thing was happening with my terminal emulator.

   It was growing to be much more.
   ::

      From: torvalds@klaava.Helsinki.Fi (Linus Benedict Torvalds)
      To: Newsgroup: comp.os.minix
      Subject: Gcc-1.40 and a posix question
      Message-ID: <1991Jul3,100050.9886@klaava.Helsinki.Fi>
      Date: 3 Jul 91 10:00:50 GMT
      Hello Netlanders,
      Due to a project I’m working on (in minix), I’m interested in the posix standard
      definition. Could somebody please point me to a (preferably) machine-readable
      format of the latest posix rules? Ftp-sites would be nice.

      Okay, this is the earliest public evidence that a geek in Finland was willing to test the bounds of
      his computing skill. The POSIX standards are the lengthy rules for each of the hundreds of system
      calls in Unix—what you need in order to get the computer to perform its operations, starting with
      Read, Write, Open, Close. POSIX is a Unix-standards body, an organization comprised of
      representatives from companies that want to agree on common guidelines. Standards are
      important in order for programmers to be able to write applications to the operating system and
      have them run on more than one version. The system calls—particularly the important ones—
      would give me a list of the various functions needed for an operating system. I would then write
      the code to make each of those functions happen in my own way. By writing to the POSIX
      standards, my code would be usable by others.

      I didn’t know at the time that I could have bought those rules in hard-copy form directly from
      POSIX, but it wouldn’t have mattered anyway. Even if I could have afforded the cost, it always
      took a long time to get things shipped to Finland. Hence my appeal for a version that I could
      download for free from an ftp site.

      Nobody responded with a source for the POSIX standards, so I went to Plan B. I tracked down
      manuals for the Sun Microsystems version of Unix at the university, which was operating a Sun
      server. The manuals contained a basic version of the system calls that was good enough to help me
      get by. It was possible to look at the manual pages to see what the system call was supposed to do,
      and then set about the task of implementing it from there. The manual pages didn’t say how to do
      it, they just said what the end results were. I also gleaned some of the system calls from Andrew
      Tanenbaum’s book and a few others. Eventually somebody sent me the thick volumes containing
      the POSIX standards.

      But my email message did not go unnoticed. Any knowledgeable person (and only
      knowledgeable people would be reading the Minix site) could tell that my project would have to
      be an operating system. Why else would I want the POSIX rules? The message aroused the
      curiosity of Ari Lemke, a teaching assistant at Helsinki University of Technology (where I would
      have studied had I not been so interested in studying theory). Ari sent me a nice reply, offering to
      make a subdirectory on the university’s ftp site available for when I would be ready to post my
      operating system for anyone who might be interested in downloading it.


.. _PE18:

VII
---

   Ari Lemke must have been quite an optimist. He created the subdirectory (ftp.funet.fi) long before
   I had something I wanted to release. I had the password, and everything was set up for me to just
   log in and upload stuff to it. But it took about four months for me to feel I had anything I was
   willing to share with the world, or at least with Ari and the few other operating system freaks with
   whom I had been exchanging email.

   My original goal was to create an operating system that I could eventually use as a replacement
   for Minix. It didn’t have to do more than Minix, but it had to do the things in Minix that I cared
   about, and some other things I cared about, too. For example, not only was the Minix terminal
   emulation bad, but there was no way of performing the job-control function—putting a program in
   the background while you’re not using it. And memory management was done very simplistically,
   as it still is in the Mac OS, incidentally.

   The way you create an operating system is to find out what the system calls are supposed to do,
   and then write your own program to implement those system calls in your own way. Generally
   speaking, there are a couple of hundred system calls. Some of them can represent multiple
   functions. Others are quite simple. Some of the more fundamental system calls are really
   complicated and depend on a great deal of infrastructure being there. Take the system calls of
   “Write” and “Read.” You need to create a disk driver in order to write something to disk or read
   something from disk. Take “Open.” You have to create the entire file system layer that parses the
   names and figures out where on the disk everything is. It took months just to write the “Open”

   system call. But once it was in place, the same code could be used for other functions.

   That’s how the early development was done. I was reading the standards from either the Sun
   OS manual or various books, just picking off system calls one by one and trying to make
   something that worked. It was really frustrating.

   The reason: Because nothing is happening, you can’t really see any progress. You can make
   small test programs that test whatever it is you just added. But that doesn’t really accomplish
   anything. After awhile you get to the point where, instead of just reading through a list of system
   calls, you give up on that approach. It’s getting complete enough that you want to run a real
   program. The first program you have to run is a shell because, without a shell, it’s pretty hard to
   run anything else. And besides, the shell itself contains many of the system calls you will need.

   Get it running and you will be able to print out a running list of the system calls you haven’t
   implemented.

   In Unix, the shell is kind of the mother of all programs. It’s there to start up other binaries. (A
   binary is a program in the 1’s and 0’s that a machine reads. Whenever you write a program in a
   computer language, you then compile the source code and it becomes a binary.) The shell allows
   you to log on in the first place. Okay, traditionally in a real Unix system the first program you run
   is called init, but init really needs a lot of infrastructure in order to work. It’s kind of a controller
   for what goes on. But when you don’t really have anything that works, there isn’t any point to
   having init.

   So instead of starting init, the first thing my kernel did was to start the shell. I had
   implemented about twenty-five system calls and, as I mentioned, this was the first real program I
   was trying to run. The shell wasn’t something I had written myself. I had downloaded onto a disk
   a clone of the Bourne Shell, which was one of the original Unix shells. It was available over the
   Internet as free software, and its name was derived from a bad pun. The guy who wrote the
   original was named Bourne, so was the clone Bourne-Again Shell—commonly referred to as bash.

   When you try and load a real program from disk, invariably there’s a bug in the disk driver or
   in the loader because it doesn’t understand what it’s reading in. So it prints out a running
   commentary on what it’s doing. It’s important because that’s how you can find out what is going
   wrong.

   I got to the point where my program was loading the shell and generating a printout of every
   system call that the shell contained that I hadn’t yet implemented. I booted, ran the shell, and it
   would spit back something like: “system call 512 is not done.” Day and night I was looking at
   printouts of system calls, trying to determine which ones I was doing wrong. But this was much
   more fun than taking a list of calls and just implementing them. You got to see progress being
   made.

   It was late August or early September when I finally got the shell working. From that point,
   things got a lot easier.

   This was a big deal.

   When I got the shell working, I was pretty much immediately able to compile a few other
   programs. The shell was more complicated than the cp (copy) program, for example, or the 1’s
   (for getting a directory listing) program. Everything you needed had to be there for the shell
   already, so once the shell was working it went from close to zero to 100 in nothing flat, because
   all these pieces had been in place. At some point there was enough in place that I experienced a
   Let There Be Light moment, because until then, nothing had really worked.

   Yes, I felt a great sense of satisfaction. I think that was particularly important because I hadn’t
   been doing anything that summer except working on the computer. This is not an exaggeration.

   The April through August period is pretty much the best time of the year in Finland. Folks are
   sailing in the archipelago, sunning themselves on beaches, sitting in their summer-cottage saunas.

   But I rarely even knew if it was day or night, weekend or weekday. Those thick black curtains
   blocked out the near round-the-clock sunshine, and the world. Some days—nights?—I’d roll out
   of bed directly into the chair at my computer, less than two feet away. Apparently my dad was
   bugging my mom to make me get a summer job. But she didn’t mind: I wasn’t bothering her. Sara
   was a bit annoyed that the phone lines were always tied up when I went online. She could probably
   write that sentence with a little less diplomacy. It’s not an exaggeration to say that I had virtually
   no contact with the world outside my computer. Okay, maybe once a week a friend would knock
   on my window and if I wasn’t scrolling through important code I would invite him in. (It was
   always a him—remember, this was before geeks were considered cool.) We would drink tea and
   maybe watch an hour of MTV in the tiny kitchen. Now that I think of it, yes, I do recall going out
   for an occasional beer or for some snooker after having my window pounded by someone like
   Juoko (I call him “Avuton,” which means “he who slays dragons,” but that’s another story). But,
   in all honesty, nothing else was going on in my life at the time.

   And I didn’t feel the least bit like some pathetic, paleskinned, propeller-head loser. The shell
   was operational, which meant that I had actually built the foundation of a working operating
   system. And I was having fun.

   With the shell working, I started testing its built-in programs. Then I compiled enough new
   programs to actually do something. I was compiling everything in Minix, but I moved the shell
   over to a special partition that I had created for the new operating system. Privately I called it
   Linux.

   Honest: I didn’t want to ever release it under the name Linux because it was too egotistical.

   What was the name I reserved for any eventual release? Freax. (Get it? Freaks with the requisite
   X.) In fact, some of the early make files—the files that describe how to compile the sources—
   included the word “Freax” for about half a year. But it really didn’t matter. At that point I didn’t
   need a name for it because I wasn’t releasing it to anybody.


.. _PE19:

VIII
----

   ::

      From: torvalds@klaava.Helsinki.Fi (Linus Benedict Torvalds)
      To: Newsgroups: comp.os.inix
      Subject: What would you like to see most in minix? Summary: small poll for my
      new operating system Message-ID:
      <1991Aug25.205708.9541@klaava.Helsinki.Fi>
      Hello everybody out there using minix-I’m doing a (free) operating system (just
      a hobby, won’t be big and professional like gnu) for 386 (486) AT clones. This
      has been brewing since April, and is starting to get ready. I’d like any
      feedback on things people like/dislike in minix, as my OS resembles it somewhat
      (same physical layout of the file-system (due to practical reasons) among other
      things).

      I’ve currently ported bash (1.08) and gcc (1.40), and things seem to work. This
      implies that I’ll get something practical within a few months, and I’d like to
      know what features most people would want. Any suggestions are welcome, but I
      won’t promise I’ll implement them:-)
      Linus (torvalds@kruuna.helsinki.fi)
      PS. Yes-it’s free of any minix code, and it has a multi-threaded fs. It is NOT
      portable (uses 386 task switching etc.), and it probably never will support
      anything other than AT-harddisks, as that’s all I have:-(.

   The most hard-core operating system enthusiasts among the Minix crowd felt a spark. Not many
   suggestions about Minix features came my way, but there were other inquiries.

   ::

      >Tell us more! Does it need a MMU?

      Answer: Yes
      >How much of it is in C? What difficulties will there be in porting? Nobody will
      believe you about non-portability;-), and I for one would like to port it to my
      Amiga.

      Answer: It’s mostly in C, but most people wouldn’t call what I write C. It uses
      every conceivable feature of the 386 I could find, as it was also a project to
      teach me about the 386. Some of my “C” files are almost as much assembler as C.

      As already mentioned, it uses an MMU, for both paging (not to disk yet) and
      segmentation. It’s the segmentation that makes it REALLY 386-dependent (every
      task has a 64Mb segment for code & data-max 64 tasks in 4Gb. Anybody who needs
      more than 64Mb/task-tough cookies).

   And I even got a few folks offering to be beta testers.

   In the end, it wasn’t much of a decision to post it. That was how I was accustomed to
   exchanging programs. So the only real decision was, at what point am I comfortable to dare show
   this off to people? Or, phrased more accurately: When is it good enough that I won’t have to be
   ashamed of it?

   What I ultimately wanted was to have a compiler and a real environment so that you could
   create programs in Linux itself, without having to use Minix. But I felt so proud when the gnu
   shell worked that I was ready to let the world see. Also, I wanted feedback.

   By the time the shell worked, I had a few rudimentary binaries I’d compiled for the operating
   system. You really couldn’t do anything, but you could see that it was something resembling
   Unix. In fact, it worked like a very crippled Unix.

   So I just decided I would make it available. I wouldn’t tell anybody publicly. Instead, I just
   informed a handful of people by private email, probably between five and ten people in all, that I
   had uploaded it to the ftp site. Among them were Bruce Evans of Minix fame and Ari Lemke. I
   uploaded the sources to Linux itself and a few binaries so that you could start something. I told
   people what they needed to do in order to try and run this thing. They still had to have Minix
   installed—the 386 version—and they still had to have the GCC compiler. In fact they had to have
   my version of GCC, so I made that available, too.

   There’s a protocol for numbering releases. It’s psychological. When you think a version is truly
   ready to be released, you number it version 1.0. But before that, you number the earlier versions to
   indicate how much work you need to accomplish before getting to 1.0. With that in mind, the
   operating system I posted to the ftp site was numbered version 0.01. That tells everybody it’s not
   ready for much.

   And yes, I remember the date: September 17, 1991.

   I don’t think more than one or two people ever checked it out. They had to go to the trouble of
   installing the special compiler, getting a clean partition so they could use that to boot, compiling
   my kernel, and then running just the shell. Running the shell was basically all you could do. You
   could print out the sources, which amounted to just 10,000 lines—that’s less than 100 pages of
   paper if you printed with small font. (Now it’s something on the order of 10 million lines.)
   One of the main reasons I distributed the operating system was to prove that it wasn’t all just
   hot air, that I had actually done something. On the Internet, talk is cheap. Regardless of what you
   do, whether it be operating systems or sex, too many people are just faking it in cyberspace. So
   it’s nice, after talking to a lot of people about building an operating system, to be able to say,
   “See, I actually got something done. I wasn’t stringing you along. Here’s what I’ve been doing….”

   And Ari Lemke, who insured that it made its way to the ftp site, hated the name Freax. He
   preferred the other working name I was using— Linux —and named my posting: pub/OS/ Linux . I
   admit that I didn’t put up much of a fight. But it was his doing. So I can honestly say I wasn’t
   egotistical, or half-honestly say I wasn’t egotistical. But I thought, okay, that’s a good name, and I
   can always blame somebody else for it, which I’m doing now.

   As I mentioned, my operating system really wasn’t very useful. For one thing, it would crash
   very easily if you filled up memory or if you did anything nasty. Even if you weren’t doing
   anything nasty, the operating system would crash if you kept it running for any length of time. But
   it wasn’t meant to be run at that stage. It was meant to be looked at. Yes, and admired.

   So it wasn’t intended to be anything but a specialty for the few people who were interested in
   creating new operating systems. Very technical people—and even within technical people, a
   special interest group.

   Their reaction was invariably positive, but positive in a kind of “It would be nice if it could
   also do this” kind of sense, or “It looks cool but it really doesn’t work on my computer at all.”

   I remember one email whose writer said he really liked my operating system, and he went on
   for at least one paragraph to tell me how nice it was. Then he explained that it had just eaten his
   hard disk, and that my disk driver was flaky or something. He had lost all the work he had done,
   but he was still very positive. It was fun to read that kind of email. It was a bug report about
   something that screwed him up.

   That was just the sort of feedback I was looking for. I fixed some bugs, like the one that caused
   it to lock up when it ran out of memory. And I made the big step of porting the GCC compiler to
   the operating system, so I could compile small programs. That meant users wouldn’t need to load
   my GCC compiler before running the operating system.


.. _PE20:

IX
--

   Do you pine for the days when men were men and wrote their own device drivers?

   —announcement of the posting of Linux version 0.02
   Early October saw the release of version 0.02, which included some fixed bugs and a few
   additional programs. The following month I released version 0.03.

   I probably would have stopped by the end of 1991. I had done a lot of things I thought were
   interesting. Everything didn’t really work perfectly, but in a software kind of world I find that
   once you solve the fundamental problems of a project, it’s easy to lose interest. And that’s what
   was happening to me. Trying to debug software is not very engaging. Then two things happened to
   keep me going. First, I destroyed my Minix partition by mistake. Second, people kept sending me
   feedback.

   Back then I was booting into Linux but used Minix as the main development environment.

   Most of what I was doing under Linux was reading email and news from the university’s computer
   via the terminal emulator I had written. The university computer was constantly busy, so I had
   written a program that auto-dialed into it. But in December, I mistakenly auto-dialed my hard disk
   instead of my modem. I was trying to auto-dial /dev/tty1, which is the serial line. But by mistake I
   auto-dialed /dev/hda1, which is the hard disk device. The end result was that I inadvertently
   overwrote some of the most critical parts of the of the partition where I had Minix. Yes, that
   meant I couldn’t boot Minix anymore.

   That was the point where I had a decision to make: I could reinstall Minix, or I could bite the
   bullet and acknowledge that Linux was good enough that I didn’t need Minix. I would write the
   programs to compile Linux, under itself, and whenever I felt I needed Minix I would just add the
   desired feature to Linux. It’s a big conceptual step when you drop the original hosting
   environment and truly make a program self-hosting, so big that I released the new version as 0.10
   in late November. A few weeks later came version 0.11.

   That’s when there actually started to be a number of people using it and doing things with it.

   Until then, I had gotten maybe one-line bug fixes. But now, people were sending me new features.

   I remember going out and upgrading my machine to have 8 mgs of RAM instead of 4 mgs, to
   accommodate the need for additional memory. I also went out and bought a floating-point
   coprocessor because people had started asking me if Linux would support their floating-point
   coprocessors. The extra hardware would enable my computer to perform floating-point math.

   I remember that, in December, there was this guy in Germany who only had 2 megabytes of
   RAM, and he was trying to compile the kernel and he couldn’t run GCC because GCC at the time
   needed more than a megabyte. He asked me if Linux could be compiled with a smaller compiler
   that wouldn’t need as much memory. So I decided that even though I didn’t need the particular
   feature, I would make it happen for him. It’s called page-to-disk, and it means that even though
   someone has only 2 mgs of RAM, he can make it appear to be more by using the disk for memory.

   This was around Christmas 1991. I remember on December 23rd trying to make the page-to-disk
   work. By December 24th, it kind of worked but crashed every once in a while. Then on December
   25th, it was done. It was basically the first feature I added to serve somebody else’s need.

   And I was proud of it.

   Not that I mentioned anything about it to my family, as we gathered at my paternal
   grandmother’s (Farmor!) to dine on ham and varieties of herring. Each day, the community of
   Linux users expanded, and I was receiving email from places that I’d dreamed about visiting, like
   Australia and the United States. Don’t ask me why, but I didn’t feel the need to discuss any of this
   with my parents, sister, or any other relatives. They didn’t understand computers. I guess I thought
   they wouldn’t understand what was happening.

   As far as they were concerned, I was just tying up the phone lines with my modem. In Helsinki
   it used to be that you had a flat rate during the night, so I tried to do most of the work at home late
   at night. But occasionally I tied up the phone all day. I tried to get a second line, but the building
   that housed my mother’s apartment was so old that they didn’t have any extra lines and weren’t
   interested in adding new ones. Sara was doing nothing but talking on the phone with her friends at
   the time. At least that’s what it seemed like to me. So we had fights, occasionally. Virtual fights.

   As she talked to her friends, I would force the modem to start dialing so that she would hear dee-
   dee-dee-dee-dee when I was trying to dial out. It would disturb her but she would know that I
   really, really needed to read email. I never said I was the world’s best older brother.

   Page-to-disk was a fairly big thing because it was something Minix had never done. It was
   included in version 0.12, which was released in the first week of January 1992. Immediately,
   people started to compare Linux not only to Minix but to Coherent, which was a small Unix clone
   developed by Mark Williams Company. From the beginning, the act of adding page-to-disk
   caused Linux to rise above the competition.

   That’s when Linux took off. Suddenly there were people switching over from Minix to Linux.

   At the time, Linux didn’t do everything Minix did, but it did most of the things people really cared
   about. And it had this one capability that people really, really cared about: With page-to-disk, you
   could run bigger programs than you had memory for. It meant that when you ran out of memory
   you could take an old piece of memory, save it off to disk, remember where you saved it, and
   reuse that memory for the problem you had to solve. This was a big deal in the opening weeks of
   1992.

   It was in January that Linux users grew from five, ten, twenty people—folks who I could email
   and whose names I knew—to hundreds of unidentifiable people. I didn’t know everybody using
   Linux, and that was fun.

   About this time there was a hoax speeding its way on the Internet. Some poor boy named Craig
   was dying of cancer and a popular chain letter urged you to show your support by sending him a
   postcard. It turned out to be somebody’s idea of a sick joke; I don’t think Craig ever really
   existed, much less suffered from cancer. But the appeal generated millions of postcards. So I was
   only half-serious when I asked for postcards instead of money from people who used Linux. It was
   like an oh-God-not-another-email-that-asks-for-postcards joke. In the PC world at the time, there
   had been a strong tradition of shareware. You downloaded a program and you were supposed to
   send in something on the order of ten bucks to the writer. I was getting emails from people asking
   me if I would like them to send me thirty bucks or so. I had to say something.

   Looking back, the money would have been useful, I guess. I had amassed something like
   $5,000 in student loans, and had to shell out about $50 a month to pay off my computer. My other
   major expenditures were pizza and beer. But Linux was keeping me so preoccupied that I wasn’t
   going out much at the time, maybe once a week at most. I didn’t need money for dates although I
   could have used it for hardware add-ons, but that wasn’t necessary. Probably a different son would
   have asked for money for his program, if only to fork over some rent to his working single mom.

   It never occurred to me at the time. Sue me.

   I was more interested in seeing where people were using Linux. Instead of cash, I preferred
   postcards. And they poured in—from New Zealand, from Japan, from the Netherlands, from the
   United States. It was Sara who typically picked up the mail, and she was suddenly impressed that
   her combative older brother was somehow hearing from new friends so far away. It was her first
   tip-off that I was doing anything potentially useful during those many hours when I had the phone
   line engaged. The postcards totaled in the hundreds, and I have no idea what happened to them.

   They must have disappeared in one of my moves. Avuton calls me “the least nostalgic person” he
   has ever met.

   Actually, I didn’t want the money for a variety of reasons. When I originally posted Linux, I
   felt I was following in the footsteps of centuries of scientists and other academics who built their
   work on the foundations of others—on the shoulders of giants, in the words of Sir Isaac Newton.

   Not only was I sharing my work so that others could find it useful, I also wanted feedback (okay,
   and praise). It didn’t make sense to charge people who could potentially help me improve my
   work. I suppose I would have approached it all differently if I hadn’t been raised in Finland, where
   anyone exhibiting the slightest sign of greediness is viewed with suspicion, if not envy. (This has
   changed a bit since the days when Nokia phones started making their way into pockets the world
   over, boosting the bank accounts of numerous Finns.) And, yes, I undoubtedly would have
   approached the whole no-money thing a lot differently if I had not been brought up under the
   influence of a diehard academic grandfather and a diehard communist father.

   Regardless, I didn’t want to sell Linux. And I didn’t want to lose control, which meant I didn’t
   want anybody else to sell it, either. I made that clear in the copyright policy I included in the
   copying file of the first version I had uploaded back in September. Thanks to the Berne
   Convention in Europe in the 1800s, you own the copyright to anything you create, unless you sell
   the copyright. As the copyright owner, I got to make up the rules: You can use the operating
   system for free, as long as you don’t sell it, and if you make any changes or improvements you
   must make them available to everybody in source code (as opposed to binaries, which are
   inaccessible). If you didn’t agree with these rules, you didn’t have the right to copy the code or do
   anything with it.

   Think of yourself. You put six months of your life into this thing and you want to make it
   available and you want to get something out of it, but you don’t want people to take advantage of
   it. I wanted people to be able to see it, and to make changes and improvements to their hearts’
   content. But I also wanted to make sure that what I got out of it was to see what they were doing. I
   wanted to always have access to the sources so that if they made improvements I could use those
   improvements myself. It made sense to me that the way for Linux to develop into the best possible
   technology was to keep it pure. If money was to get involved, things would get murky. If you
   don’t let money enter the picture, you won’t have greedy people.

   While I wasn’t interested in asking for money for Linux, other people were not shy about
   requesting donations whenever they gave someone a copy of the operating system they had loaded
   onto a floppy disk. By February, it was not uncommon for folks to attend Unix users’ meetings
   armed with floppies containing Linux. People started asking me if they could charge, say, five
   dollars just to cover the cost of the disk and their time. The trouble was, that was a violation of my
   copyright.

   It was time to rethink my Linux-is-not-for-sale stance. By that point, Linux was getting so
   much online discussion that I felt fairly confident that nobody was going to be in a position to just
   take it and run with it, which had been my big fear. At least they wouldn’t do it without generating
   a lot of negative reaction. If anybody tried abducting Linux and turning it into a commercial
   project, there would have been a strong backlash, and a growing community of hacker types who
   would say “Hey, that’s Linux! You can’t do that,” although not in such polite words.

   The momentum had been established: On a daily basis, hackers from around the world were
   sharing their suggested changes. We were collectively creating the best operating system around,
   and couldn’t possibly veer away from our trajectory. Because of this, and because Linux had
   become so recognizable, I felt comfortable allowing people to sell it.

   But before I make myself sound like Mr. Beneficent, let me mention another critical element of
   my decision. The fact is, to make Linux usable, I had relied on a lot of tools that had been
   distributed freely over the Internet—I had hoisted myself up on the shoulders of giants. The most
   important of these free software programs was the GCC compiler. It had been copyrighted under
   the General Public License, universally known as the GPL (or the “copyleft”), which was the
   brainchild of Richard Stallman. Under terms of the GPL, money is not the issue. You can charge a
   million bucks if somebody’s willing to pay it, but you have to make sources available. And the
   person you give or sell the source to has to have all the rights you have. It’s a brilliant device. But
   unlike many hard-core GPL freaks, who argue that every new software innovation should be
   opened up to the universe under the general public license, I believe it should be the right of the
   individual inventor to decide what to do with his or her invention.

   So I dumped my old copyright and adopted the GPL, a document that Stallman had written with
   lawyers looking it over. (Because lawyers were involved, it runs on for pages.)
   The new copyright was included in version 0.12, but I remember lying awake at night after
   releasing it, nervous about what commercial interests would do to the system. Looking back now,
   it seems ridiculous to have been so worried because the commercial interest was relatively small.

   Something made me think that I had to be careful. One of my worries was—and still is—that
   somebody would just take Linux and not honor the copyright. Back then I worried that it would be
   practically impossible to sue anyone in the United States who broke the copyright. It’s still a
   concern. It’s easy to prosecute someone for such violations, but I worry about somebody doing it
   until they’re forced to stop.

   And there are nagging fears that companies in places like China won’t honor the GPL.

   Practically nothing in their legal system prevents them from breaking the copyright, and in a real
   sense it’s not worth the trouble to go after people who would try to do something illegal. That’s
   what big software companies and the music industry have tried to do and it hasn’t been
   overwhelmingly successful. My fears are mitigated by reality. Somebody might do it for a while,
   but it is the people who actually honor the copyright, who feed back their changes to the kernel
   and have it improved, who are going to have a leg up. They’ll be part of the process of upgrading
   the kernel. By contrast, people who don’t honor the GPL will not be able to take advantage of the
   upgrades, and their customers will leave them. I hope.

   Generally speaking, I view copyrights from two perspectives. Say you have a person who earns
   $50 a month. Should you expect him or her to pay $250 for software? I don’t think it’s immoral
   for that person to illegally copy the software and spend that five months’ worth of salary on food.

   That kind of copyright infringement is morally okay. And it’s immoral—not to mention stupid—
   to go after such a “violator.” When it comes to Linux, who cares if an individual doesn’t really
   follow the GPL if they’re using the program for their own purposes? It’s when somebody goes in
   for the quick money—that’s what I find immoral, whether it happens in the United States or
   Africa. And even then it’s a matter of degree.

   Greed is never good.


.. _PE21:

X: Minix vs. Linux
------------------

   The attention wasn’t all positive. Although confrontation never has been my best sport, I was
   bullied into defending Linux and my manhood when Andrew Tanenbaum kept making attacks on
   the operating system that was supplanting his own. We’re nerds, so it was all done via email.

   Who could blame him for getting hot under the T-shirt? Before any Linux newsgroups had been
   created, I routinely used Minix newsgroups to make announcements about Linux or find people
   who were interested in the operating system. Why should Andrew like that?

   So, for starters, he was unhappy about my infringing on his newsgroup. And he obviously
   wasn’t too pleased that his operating system was becoming eclipsed by this new creation from the
   snowy wilds of Finland—and that so many developers were joining the project. He also had
   opposing ideas for how operating systems should be built. At the time, Andrew was part of a camp
   of computer scientists who favored the microkernel approach to operating systems. He had done
   Minix as a microkernel, and Amoeba, the system he was working on at the time, also involved
   one.

   This was a flourishing movement in the late 1980s and early 1990s. And Linux’s success was
   threatening it. So he kept posting unpleasant little jabs.

   The theory behind the microkernel is that operating systems are complicated. So you try to get
   some of the complexity out by modularizing it a lot. The tenet of the microkernel approach is that
   the kernel, which is the core of the core of the core, should do as little as possible. Its main
   function is to communicate. All the different things that the computer offers are services that are
   available through the microkernel communications channels. In the microkernel approach, you’re
   supposed to split up the problem space so much that none of it is complex.

   I thought this was stupid. Yes, it makes every single piece simple. But the interactions make it
   far more complex than it would be if many of the services were included in the kernel itself, as
   they are in Linux. Think of your brain. Every single piece is simple, but the interactions between
   the pieces make for a highly complex system. It’s the whole-is-bigger-than-the-parts problem. If
   you take a problem and split it in half and say that the halves are half as complicated, you’re
   ignoring the fact that you have to add in the complication of communication between the two
   halves. The theory behind the microkernel was that you split the kernel into fifty independent
   parts, and each of the parts is a fiftieth of the complexity. But then everybody ignores the fact that
   the communication among the parts is actually more complicated than the original system was—
   never mind the fact that the parts are still not trivial.

   That’s the biggest argument against microkernels. The simplicity you try to reach is a false
   simplicity.

   Linux started out much smaller and much, much simpler. It didn’t enforce modularity, so you
   could do a lot of things more straightforwardly than you ever could with Minix. One of the
   original problems I had with Minix was that if you had five different programs running at the
   same time and they all want to read five different files, the tasks would be serialized. In other
   words, you would have five different processes sending requests to the file system: “Can I please
   Read From File X?” The file system daemon that handles reading takes one of them and sends it
   back, then takes the next one and sends it back, and so on.

   Under Linux, which is a monolithic kernel, you have five different processes that each do a
   system call to the kernel. The kernel has to be very careful that they don’t get confused with each
   other, but it very naturally scales up to any number of processes doing whatever they want. It
   makes Linux much faster and more efficient.

   Another problem with Minix was that you got the sources but the licenses didn’t allow you to
   do a lot. Take someone like Bruce Evans, who performed major surgery on Minix and made it
   much more usable. He couldn’t just incorporate his improvements. He was restricted to only
   making patches. From a practical standpoint that’s a complete disaster. He couldn’t legally make
   a bootable image available to people so they could easily upgrade. So users had to take a multiple-
   step process to even get a usable system, which was horribly impractical.

   The only time I ended up communicating with Andrew Tanenbaum was in early 1992. Imagine
   logging on one blizzardy morning and running across the unedited version of this:
   ::

      From: ast@cs.vu.nl (Andy Tanenbaum)
      To: Newsgroups: comp.os.minix
      Subject: LINUX is obsolete
      Date: 29 Jan 92 12:12:50 GMT
      I was in the U.S. for a couple of weeks, so I haven’t commented much on LINUX
      (not that I would have said much had I been around), but for what it’s worth, I
      have a couple of comments now.

      As most of you know, for me MINIX is a hobby, something that I do in the evening
      when I get bored writing books and there are no major wars, revolutions, or
      senate hearings being televised live on CNN. My real job is a professor and
      researcher in the area of operating systems.

      As a result of my occupation, I think I know a bit about where operating systems
      are going in the next decade or so. Two aspects stand out:
      Most older operating systems are monolithic, that is, the whole operating system
      is a single a.out file that runs in “kernel mode.” This binary contains the
      process management, memory management, file system and the rest. Examples of
      such systems are UNIX, MS-DOS, VMS, MVS, OS/360, MULTICS, and many more.

      The alternative is a microkernel-based system, in which most of the OS runs as
      separate processes, mostly outside the kernel. They communicate by message
      passing. The kernel’s job is to handle the message passing, interrupt handling,
      low-level process management, and possibly the I/O. Examples of this design are
      the RC4000, Amoeba, Chorus, Mach, and the not-yet-released Windows/NT.

      While I could go into a long story here about the relative merits of the two
      designs, suffice it to say that among the people who actually design operating
      systems, the debate is essentially over. Microkernels have won. MINIX is a
      microkernel-based system. The file system and memory management are separate
      processes, running outside the kernel. The I/O drives are also separate
      processes. LINUX is a monolithic style system. This is a giant step back into
      the 1970’s.

      2. PORTABILITY
      MINIX was designed to be reasonably portable, and has been ported from the Intel
      line to the 680x0 (Atari, Amiga, Macintosh), SPARC, and NS32016. LINUX is tied
      fairly closely to the 80x86. Not the way to go.

      Don’t get me wrong, I am not unhappy with LINUX. It will get all the people who
      want to turn MINIX in BSD UNIX off my back. But in all honesty, I would suggest
      that people who want a **MODERN** *free* OS look around for a microkernel-based,
      portable OS, like maybe GNU or something like that.

      Andy Tanenbaum (ast@cs.vu.nl)

   I knew I needed to defend my honor, so I wrote back:
   ::

      From: torvalds@klaava.Helsinki.FI (Linus Benedict Torvalds)
      Subject: Re: LINUX is obsolete
      Date: 29 Jan 92 23:14:26 GMT
      Organization: University of Helsinki
      Well, with a subject like this, I’m afraid I’ll have to reply. Apologies to
      minix-users who have heard enough about linux anyway. I’d like to be able to
      just *ignore the bait* but… Time for some serious flamefesting!

      In article <12595@star.cs.vu.nl> ast@cs.vu.nl (Andy Tanenbaum) writes:
      >I was in the U.S. for a couple of weeks, so I haven’t commented much on LINUX
      (not that
      >I would have said much had I been around), but for what it is worth, I have a
      couple of
      >comments now.

      >As most of you know, for me MINIX is a hobby, something that I do in the
      evening when
      >I get bored writing books and there are no major wars, revolutions, or senate
      hearings
      >being televised live on CNN. My real job is professor and researcher in the
      area of
      >operating systems.

      You use this as an excuse for the limitations of minix? Sorry, but you lose:
      I’ve got more excuses than you have, and linux still beats the pants off minix
      in almost all areas. Not to mention the fact that most of the good code for
      minix seems to have been written by Bruce Evans.

      Re 1: You doing minix as a hobby-look at who makes money off minix, and who
      gives linux out for free.

      Then talk about hobbies. Make minix freely available, and one of my biggest
      gripes with it will disappear. Linux has very much been a hobby (but a serious
      one; the best type) for me: I get no money for it, and it’s not even part of any
      of my studies in the university. I’ve done it all on my own time, and on my own
      machine.

      Re 2: Your job is being a professor and researcher: That’s one hell of a good
      excuse for some of the brain damages of minix. I can only hope (and assume) that
      Amoeba doesn’t suck like minix does.

      True, linux is monolithic, and I agree that microkernels are nicer. With a less
      argumentative subject, I’d probably have agreed with most of what you said. From
      a theoretical (and aesthetical) standpoint, linux loses. If the GNU kernel had
      been ready last spring, I’d not have bothered to even start my project: the fact
      is that it wasn’t and still isn’t.

      Linux wins heavily on points of being available now.

      >MINIX is a microkernel-based system. [deleted, but not so that you miss the
      point] LINUX is a monolithic style system.

      If this was the only criterion for the “goodness” of a kernel, you’d be right.

      What you don’t mention is that minix doesn’t do the microkernel thing very well,
      and has problems with real multitasking (in the kernel). If I had made an OS
      that had problems with a multithreading file system, I wouldn’t be so fast to
      condemn others: in fact, I’d do my damnedest to make others forget about the
      fiasco.

      [yes, i know there are multithreading hacks for minix, but they are hacks, and
      bruce evans tells me there are lots of race conditions.]
      >2. PORTABILITY
      “Portability is for people who cannot write new programs”

      -me, right now (with tongue in cheek)
      The fact is that linux is more portable than minix. What? I hear you say. It’s
      true-but not in the sense that ast means: I made linux as conformant to
      standards as I knew how (without having any POSIX standard in front of me).

      Porting things to linux is generally/much/easier than porting them to minix.

      I agree that portability is a good thing: but only where it actually has some
      meaning. There is no idea in trying to make an operating system overly portable:
      adhering to a portable API is good enough. The very/idea/of an operating system
      is to use the hardware features, and hide them behind a layer of high-level
      calls. That is exactly what linux does: it just uses a bigger subset of the 386
      features than other kernels seem to do. Of course this makes the kernel proper
      unportable, but it also makes for a/much/simpler design. An acceptable trade-
      off, and one that made linux possible in the first place.

      I also agree that linux takes the non-portability to an extreme: I got my 386
      last January, and linux was partly a project to teach me about it. Many things
      should have been done more portably if it would have been a real project. I’m
      not making overly many excuses about it though: it was a design decision, and
      last april when I started the thing, I didn’t think anybody would actually want
      to use it. I’m happy to report I was wrong, and as my source is freely
      available, anybody is free to try to port it, even though it won’t be easy.

      Linus
      PS> I apologise for sometimes sounding too harsh: minix is nice enough if you
      have nothing else. Amoeba might be nice if you have 5-10 spare 386’s lying
      around, but I certainly don’t. I don’t usually get into flames, but I’m touchy
      when it comes to linux:)

   There were a few more installments in this, one of my few flame wars. But you get the point:
   There were opposing voices, even in the early days. (Or maybe the point is: Be careful when you
   put yourself out there in an electronic forum. Your typos and errors of grammar will haunt you
   forever.)

   Linus and I leave our families and friends back at the campsite and take an afternoon hike along a
   clear stream. We’re camping at Grover Hot Springs, way up in the Eastern Sierra over the July
   4th weekend, at a site that seems to have been lifted from the pages of National Geographic
   —“This is a Kodak moment,” Linus proclaims, pausing to look out over a wildflower-dusted
   meadow and the dramatic cliffs that provide the backdrop. We settle at a site along the stream,
   and I ask him to describe his lift during those days when Linux’s appeal was spreading far beyond
   its original family of newsgroup enthusiasts, few of whom Linus had even personally met.

   “It must have felt great,” I say. “For years you were toiling away on your own in your
   bedroom, with little contact with the world outside your CPU. Suddenly you have people from
   every corner of the planet acknowledging what great work you’re doing. You’re the center of this
   growing community that is looking to you to—”

   “I don’t have a memory of it being a big deal for me,” he replies. “I really don’t think it was. It
   was kind of the thing I was thinking about all the time, but mainly because there was always a
   problem to be solved. In that sense, I was thinking about it a lot, but it was not, emotionally, a big
   thing. Intellectually, it was something big.

   “I liked the fact that there were a lot of people giving me motivation to do this project. I
   thought I had seen the end of it, a point where it was almost done. But that point never came
   because people kept giving me more reasons to continue and more brainteasers to worry about.

   And that kept it interesting. Otherwise, I probably would have just moved on to another project,
   because that’s how I worked, and that was fun. But I suspect I worried more about my nose or
   something like that,” he says.

   A few weeks later we are at the Stanford Shopping Center, where Linus is perplexed over the
   selection of running shoes from which he can choose. “How many miles do you typically run each
   week?” asks the salesman. Linus smiles; he hasn’t run as much as a mile during the past ten years.

   Exercise hasn’t been a major priority. But in his weaker moments, Linus admits that he would like
   to shed some of his excess poundage.

   “Tove must have convinced you to help me get rid of my pouch,” he jokes, patting his gut.

   “Tell her that her check never arrived this week,” I reply.

   Soon we are circling the Stanford campus in search of a legal parking space. After maybe half
   an hour, we do a few stretches, then we start to run over narrow dirt paths past the campus’s dried
   up lake, into the woods, and in the direction of our goal: the huge hillside satellite dish. We never
   make it. I set an unfairly swift pace and am surprised that Linus can stick right behind me for
   about a mile. Then he loses his wind, A few minutes later we spread out on the grass along the
   lake.

   “What was your family’s reaction to everything that was happening to Linux?” I ask. “They
   must have been pretty excited about it.”

   “I don’t think anybody really noticed,” he replies. “I won’t say that nobody really cared. But I
   had been doing programming most of my lift, and this was not anything different as far as they
   were concerned.” “Well, you must have said something to your folks. Like if your dad was driving
   you someplace, didn’t you say, ‘Hey, you’re not going to believe this but you know the stuff I’ve
   been doing with my computer? Well, I’ve got hundreds of people who are using it…”

   “No,” he answers. “I just didn’t feel the need to share this with my family and friends, I never
   had the feeling that I wanted to push it on people. I remember Lars Wirzenius, around the time I
   was writing Linux, decided to buy XENIX, SCO’s version of Unix, and I think I remember he tried
   to make excuses, like, ‘Don’t take this the wrong way,’ I personally don’t think I ever cared. He
   eventually switched, but it wasn’t a big deal for me. To me the fact that people used it was nice,
   and it was wonderful that I got comments back, but at the same time it was not that important. I
   didn’t want to spread the gospel. I was proud of having people use my code, but I don’t remember
   ever having the feeling that I wanted to share that with anybody. And I didn’t think it was the most
   important thing on Earth. I didn’t think that I was doing something really important because a
   hundred people were using my software. It was more like it was fun. And that’s how I feel about it
   today.”

   “So you didn’t even want to tell your parents and family and friends about it. And you really
   weren’t excited by everything that was happening?” I ask, not masking my disbelief.

   He waits a few seconds before responding. “I don’t remember if I even had feelings back then.”

   Linus buys a new car, a BMW Z3, a two-seater convertible that he says defines the word “fun.” It
   is metallic blue, the perfect boy’s model-car color. He chose that shade because the vehicle
   doesn’t come in bright yellow, his color of choice. BMW yellow, he explains, “looks like pee.” For
   years he parked his Pontiac as close as possible to the entrance to Transmeta’s headquarters in a
   Santa Clara office park. But the BMW is parked outside his office window, allegedly so it can be
   in the shade. Now when Linus works on his computer he can admire his new car at the same time.

   A little more than a year earlier, we had taken our first trip over the mountain to Santa Cruz in
   a convertible, a white Mustang I had rented for the occasion. And during that excursion, Linus
   had made a point of stopping to check out the sports cars parked outside the sauna place and
   brewery we visited. Now we are heading over the mountain in his own sports car. He smiles as he
   takes the curves on Route 17.

   “You deserve this,” I say.

   I pull a handful of CDs from the glove compartment.

   “Pink Floyd?” I ask. “The Who? Janis Joplin?”

   “It’s the music I grew up listening to. I never bought music when I was a kid, but we had this
   around the apartment. I guess my mother was playing it, although I remember she was big on Elvis
   Costello.”

   It is Friday afternoon, a sparkling Friday afternoon of California perfection with delights for
   each of the senses: cobalt skies for the eyes, intense sunshine for the skin, the fragrance of
   mountain eucalyptus, the sweet taste of pure air, the lull of Pink Floyd on upgraded speakers.

   Sure, to passing motorists we must have appeared to be some sort of post-adolescent cliché,
   spraying on sunblock and doing the classic rock vocals, but not many cars passed Linus’s new
   BMW Z3.

   We park among shoddier vehicles along the side of Highway 1 a bit north of Santa Cruz, and
   make our way down to a mostly empty beach. We spread out on towels in the warm sun and wait a
   few minutes before I pull my tape recorder from my backpack. Again, I ask him to describe Linus
   in those early days.

   He draws a box in the sand to represent his bedroom, then indicates the location of his bed and
   computer. “I would roll out of bed and immediately check my email,” he says, moving his finger
   accordingly, “Some days I don’t think I ever left the apartment. I wasn’t checking my email just to
   see who was sending me email. It was more a matter of seeing if a particular problem had been
   fixed. It was more like, What new exciting issue do we have today? Or, if we had a problem, who
   had a solution?”

   Linus tells me that his social lift at the time was “pathetic.” Then he figures that sounds too
   pathetic, so he amends it: “Let’s say it was one notch above pathetic.”

   “I didn’t become a total complete recluse,” he says, “but even though Linux was happening, I
   was still as antisocial as I had ever been. You noticed that I never contact people by phone. It’s
   always been true. I never call. Most people who are my friends are the kind of people who contact
   people, and I’m not. You can imagine what that’s like for dating, if you never call the woman. So
   during that time I had a few friends who just came knocking on my window, wanting to come in for
   a cup of tea. I don’t think anybody could really tell the difference at that time —Oh, he’s doing
   something really big and important and someday he’ll change the world. I don’t think anybody
   really thought anything of the sort.” Linus’s single regular social event in those days was the
   weekly Spektrum meeting, where he mingled with other science majors. These social encounters
   created far more anxiety than anything connected with technology.

   “What was I worrying about? Just social life in general. Maybe worry is the wrong word, there
   was more emotional impact. Just thinking about girls, Linux wasn’t that important to me at the
   time. To some degree, it still isn’t. To some degree I can still ignore it.

   “In those early years at the university, the social thing was very important. It wasn’t as if I
   worried about my hunchback and people laughing about it. It was more like wanting to have
   friends and things. One of the reasons I liked Spektrum so much was that it was a framework for
   being social without having to be social. That was the evening I was social and every other
   evening I sat in front of the computer. It was much more of an emotional thing than Linux ever
   was. Linux was never something I got really upset about. I never lost any sleep over Linux.

   “The things that I got really upset about, and what still makes me upset, is not the technology
   per se but the social interactions around it. One of the reasons I got so upset about Andrew
   Tanenbaum’s posting was not so much the technical issues he was raising. If it had been anybody
   else, I would have just blown it off. The problem was that he was posting it to the mailing list and
   making me… I was concerned about my social standing with those people and he was attacking it.

   “One of the things that made Linux good and motivational was the feedback I was getting. It
   meant that Linux mattered and was a sign of my being in a social group. And I was the leader of
   the social group. There’s no question that was important, more important than even telling my
   Mom and Dad what I was doing. I was more concerned about the people who were using Linux. I
   had created a social circle and had the respect of those people. That’s not how I thought of it at
   the time, and it’s still not how I think of it. But it must be the most important thing. That’s why I
   reacted so strongly to Andrew Tanenbaum.

   The sun begins its descent into the Pacific and it’s time to leave the beach. Linus insists that I
   drive his car home—to see how well it responds—and that we take the long and winding way,
   Route 9, back to Silicon Valley.

   Linus says the flamefest with the Minix creator eventually moved into private email because it
   had become too nasty to be public. It was quiet for a few months. Then, Tanenbaum emailed Linus
   to direct him to the five-line ad in the back of Byte magazine for somebody’s commercial version
   of Linux.

   “The last email I got from Andrew was him asking me if this is really what I wanted to do, have
   somebody selling my work. I just sent him an email back saying Yes, and I haven’t heard from him
   since,” he says.

   Maybe a year later, when Linus was in the Netherlands for his first public speech, he made his
   way to the university where Tanenbaum taught, hoping to get him to autograph Linus’s copy of
   Operating Systems: Design and Implementation, the book that changed his life. He waited outside
   his door but Tanenbaum never emerged. The professor was out of town at the time, so they never
   met.


.. _PE22:

XI
--

   The hotel room was only slightly above freezing as I lay in bed, shivering, the night before my
   first speech. In the Netherlands they don’t heat places like they do in Finland, and this drafty room
   even had huge single-pane windows, as if it were meant to be occupied only in the summer. But
   the coldness wasn’t the only thing keeping me awake on the night of November 4, 1993. I was
   nervous beyond belief.

   Public speaking had always been a rough spot for me. In school they made us give
   presentations about something we had heavily researched—rats or whatever—and I always found
   it impossible to do. I would stand up there, unable to talk, and just start giggling. And trust me,
   I’m not a giggler. It was even uncomfortable when I had to go up to the blackboard to show the
   class how I figured out a problem.

   But there I was in Ede, Netherlands, an hour’s train ride from Amsterdam, because I had been
   invited to be speaker at the tenth anniversary of the Netherlands Unix Users Group. I wanted to
   prove to myself that I could do this. A year earlier I had been asked to speak before a similar
   organization in Spain, but declined because my fear of public speaking was greater than my desire
   to travel. And back then, I really loved to travel. (I still like traveling, but it’s not nearly the
   novelty it was for a kid who had barely been out of Finland. The only places I had ever been were
   Sweden, where we took a few camping vacations, and Moscow, where we visited my dad when I
   was about six years old.)
   It sort of bothered me that I had blown the chance to visit Spain, so I convinced myself that I
   would accept the next speaking invitation that came along. But I was having second thoughts as I
   lay in bed, wondering if I would ever overcome my fear of getting up in front of large groups of
   people, worrying that I would be unable to open my mouth, or, worse, that I would lapse into
   giggles before the 400 members of the audience.

   That’s right, I was a mess.

   I told myself the usual stuff. That the audience wants you to succeed, that they wouldn’t be
   there in the first place if they didn’t like you, and that I certainly knew the topic: the reasons
   behind the various technical decisions in the writing of the Linux kernel, the reasons for making it
   open source. Still, I was unconvinced that the speech would be a success, and my mind chugged
   along like an unstoppable freight-train engine. I literally was shaking in bed—and the frigid air
   was the least of it.

   The speech? Well, the audience was sympathetic to the obviously frightened soul standing
   before them, clinging to his PowerPoint slides (thank God for Microsoft) like a life preserver, and
   then haltingly answering their questions. Actually, the question-and-answer session was the best
   part. After my speech—such as it was—Marshall Kirk McKusik, who was instrumental in BSD
   Unix, came up to me and told me he found my speech interesting. I was so grateful for the gesture,
   I felt like getting down on my knees and kissing his feet. There are few people I look up to in
   computers, and Kirk is one of them. It’s because he was so nice to me after that first speech.

   My first speech was like shock treatment. So were the ones that followed. But they started
   making me more self-confident.

   David keeps asking me how my stature at the university changed as Linux grew bigger. But I
   wasn’t aware of any professors even mentioning it, or any other students pointing me out to their
   friends. Nothing like that. People around me at the university knew about Linux, but actually most
   of the hackers involved in it were from outside of Finland.

   In the fall of 1992 I had been made a teaching assistant for Swedish-language classes in the
   Computer Sciences department. (Here’s how that happened: They needed Swedish speaking TA’s
   for the basic computer courses. There were only two Swedish-speaking computer science majors
   who had started at the university a few years earlier: Lars and Linus. There wasn’t much of a
   choice.) At first I was afraid to even go up to the blackboard and work on problems, but it didn’t
   take long for me to just concentrate on the material and not worry about embarrassing myself. By
   the way, three years later I was promoted to research assistant, which meant that instead of getting
   paid for teaching I was paid to work in the computer lab, which mostly meant doing development
   work on Linux. It was the start of a trend: having someone else pay me to do Linux. That’s
   basically what happens at Transmeta.

   David: “So when did it start becoming a big deal?’’
   Me: “It’s still not a big deal.”

   Okay, I’ll amend that. It started becoming more of a deal when it became clear how many
   people depend on Linux as something other than a toy operating system. When they started using
   it for more than just tinkering around, I realized that if something goes wrong, I’m responsible. Or
   at least I started feeling responsible. (I still do.) During 1992 the operating system graduated from
   being mostly a game to something that had become integral to people’s lives, their livelihoods,
   commerce.

   The shift occurred in the spring of 1992, about a year after I had started terminal emulation,
   when the first version of the X windowing system ran under Linux. That meant the operating
   system was capable of supporting a graphical user interface and that users could work in multiple
   windows simultaneously, thanks to the X windowing project, which had its origins at MIT. It was
   a big change. I remember that I had joked with Lars about it, around a year before it actually
   happened, telling him that someday we would run X and be able to do it all. I never thought it
   would happen that quickly. A hacker named Orest Zborowski was able to port X to Linux.

   The way the X window system works is by way of the X server, which does all the graphics.

   The server talks to the clients, which are the things that say “I want a window and I want it this
   big.” The communication goes through a layer called sockets, or, more formally, Unix Domain
   Sockets. It’s how you communicate internally in Unix, but you also use sockets to communicate
   over the Internet. So Orest wrote the first socket layer for Linux just to port X to it. Orest’s socket
   interface was kind of tacked on and not integrated with the other code. It was a situation in which I
   agreed to the patch because we needed it, even though it was fairly raw.

   It took me awhile to get used to the notion that we had a graphical user interface. I don’t think I
   even used it on a daily basis for the first year or so. And these days I can’t live without it. There
   are always a ton of windows up when I work.

   Orest’s contribution not only enabled us to have windows, but it also opened a big door for the
   future. The domain sockets were used for the local networking that enables the X windowing
   system to operate. We could build on those same sockets to enable Linux to make the major leap
   to external networking—to have the ability to link computers. Without networking, Linux was
   usable only for people who sat at home and used a modem to dial up somewhere, or who did
   everything locally. With great optimism, we started developing Linux networking on top of those
   original sockets, even though they hadn’t been meant for networking at all.

   I was so confident that we could easily do it that I made a leap in the version-numbering
   scheme. In March 1992 I had planned to release version 0.13. Instead, with the graphical user
   interface in place, I felt confident that we were maybe 95 percent of the way to our goal of
   releasing a full-fledged, reliable operating system, and one with networking. So I named the new
   release version 0.95.

   Boy, was I premature. Not to mention clueless.

   Networking is nasty business, and it ended up taking almost exactly two years to get it right, to
   a form where it could be released. When you add networking you suddenly introduce a host of new
   issues. There are security issues. You don’t know who’s out there and what they want to do. You
   have to be really careful that people don’t crash your machine by sending it bad junk packets.

   You’re not in control of who’s trying to contact your machine anymore. Also, a lot of people have
   very different setups. With TCP/IP the networking standard, it’s difficult to get all the time-outs
   right. It felt as if the process would drag on forever. By the end of 1993 we had an almost usable
   networking capability, although some people had serious problems getting it to work. We couldn’t
   handle networks that didn’t have 8-bit boundaries.

   Because I had been overly optimistic in the naming of version 0.95, I was caught in a bind.

   Over the course of the two years it took to get version 1.0 out the door, we were forced to do some
   crazy things with numbers. There aren’t many numbers between 95 and 100, but we continually
   released new versions based on bug fixes or added functions. By the time we got to version 0.99,
   we had to start adding numbers to indicate patch levels, and then we relied on the alphabet. At one
   point we had version 0.99, patch level 15A. Then version 0.99, patch level 15B, and so on. We
   made it all the way to patch level 15Z. Patch level 16 became version 1.0, the point where it was
   usable. This was released in March 1994 with great fanfare at the University of Helsinki Computer
   Sciences Department auditorium.

   The period leading up to it had been kind of chaotic, but nothing could put a dent in Linux’s
   popularity. We had our own Internet newsgroup, comp.os. linux , which grew out of the ashes of my
   flamefest with Andrew Tanenbaum. And it was attracting hordes. Back then the Internet Cabal, the
   folks who more or less ran the Internet, kept unofficial monthly statistics on how many readers
   each newsgroup attracted. They weren’t reliable statistics, but they were the best information
   available on the popularity of your site—in this case, how many people were interested in Linux.

   Of all the newsgroups, alt.sex was the perennial favorite. (Not my particular favorite. Although I
   did check it out once or twice to see what the fuss was about, I was pretty much your typical
   under-sexed nerd, more eager to play with my floating point processor than to keep abreast of the
   latest reports from the sexuality front—newly discovered lovemaking positions or reports from
   heavy petters or whatever else it was that so many people were talking about on alt.sex.)
   With the Cabal’s monthly statistics, I could easily track the popularity of comp.os. linux . And
   trust me, I kept track. (While I might be somebody’s idea of a folk hero, I’ve never been the
   selfless, ego-free, techno-lovechild the hallucinating press insists I am.) By the fall of 1992, the
   estimates for our newsgroup were on the order of tens of thousands of people. That many people
   followed the newsgroup to see what was going on, but they weren’t all using Linux. Every month,
   when the statistics came out, there was a summary report of the forty most popular newsgroups. If
   your newsgroup didn’t make it to the top forty, you could fetch the full report on other
   newsgroups’ popularity from a special maintenance newsgroup. Usually I had to go find the full
   report.

   The Linux newsgroup kept creeping up the chart. At one point it made the top forty and I was
   happy. That was pretty cool. I seem to remember having written a fairly gloating article to
   comp.os.linux in which I basically listed the various os (operating system) newsgroups, including
   Minix, and said, “Hey look at this, we’re more popular than Windows.” Remember that, back
   then, people who liked Windows were not on the Internet. We made it to the top five sometime in
   1993. I went to bed that night brimming with self-satisfaction, excited by the fact that Linux had
   become almost as popular as sex.

   There certainly was no such matchup in my own little corner of the world. I truly did not have a
   life. By this time, as I mentioned earlier, Peter Anvin had organized an online collection that
   generated $3,000 in donations to help me pay off my computer, which I did at the end of 1993.

   And for Christmas, I upgraded to a 486 DX266, which I used for many years. But this was my life:
   I ate. I slept. Maybe I went to university. I coded. I read a lot of email. I was kind of aware of
   friends getting laid more, but that was okay.

   Quite frankly, most of my friends were losers, too.


.. _PE23:

XII
---

   The speech in Ede almost convinced me that I could survive anything, even something as
   terrifying as standing up before a group of total strangers and being the focus of their attention.

   My confidence was slowly building in other areas, too. I was being forced to make quick decisions
   regarding Linux fixes and upgrades, and with each decision I felt increasingly comfortable in my
   role as leader of a growing community. The technical decisions had never been a problem; the
   problem was figuring out how to tell one person that I preferred another’s suggested changes—
   and being diplomatic about it. Sometimes it was as simple as saying, “So-and-so’s fixes are
   working fine. Why don’t we just go with those?”

   I never saw the point of accepting anything other than what I thought was the best technical
   solution being presented. It was a way of keeping from taking sides when two or more
   programmers offered competing patches. Also, although I didn’t think of it this way at the time, it
   was a way of getting people to trust me. And the trust compounds. When people trust you, they
   take your advice.

   Of course you have to establish a foundation for all the trust. I guess that started not so much
   when I wrote the Linux kernel as when I posted it to the Internet, opening it up to anyone who
   wanted to join in and add the functions and details they liked, with me making ultimate decisions
   regarding the guts of the operating system.

   Just as I never planned for Linux to have a life outside my own computer, I also never planned
   to be the leader. It just happened by default. At some point a core group of five developers started
   generating most of the activity in the key areas of development. It made sense for them to serve as
   the filters and hold the responsibility for maintaining those areas.

   I did learn fairly early that the best and most effective way to lead is by letting people do things
   because they want to do them, not because you want them to. The best leaders also know when
   they are wrong, and are capable of pulling themselves out. And the best leaders enable others to
   make decisions for them.

   Let me rephrase that. Much of Linux’s success can be attributed to my own personality flaws:
   1) I’m lazy; and 2) I like to get credit for the work of others. Otherwise the Linux development
   model, if that’s what people are calling it, would still be limited to daily email messages among a
   half-dozen geeks, as opposed to an intricate web of hundreds of thousands of participants relying
   on mailing lists and developers’ conventions and corporate sponsorship in maybe 4,000 projects
   that are taking place at any one time. At the top, arbitrating disputes over the operating system’s
   kernel, is a leader whose instinct is, and has always been, not to lead.

   And things work out for the best. I divested myself of things that didn’t hold much interest for
   me. The first of these was the user level, the external parts of the system that end users deal with
   directly, as opposed to the deep-down, internal code. First somebody volunteers to maintain it.

   Then the process for maintaining all the subsystems becomes organic. People know who has been
   active and who they can trust, and it just happens. No voting. No orders. No recounts.

   If two people are maintaining similar kinds of software drivers, for example, I’ll sometimes
   accept the work from both of them and see which one ends up getting used. Users tend to lean on
   one versus the other. Or, if you let both maintainers work it out, they may end up evolving in
   different directions and their contributions end up having very distinct uses.

   What astonishes so many people is that the open source model actually works.

   I guess it helps to understand the mentality of hackers in the free software universe. (By the
   way, I usually try to avoid the term “hacker.” In personal conversations with technical people, I
   would probably call myself a hacker. But lately the term has come to mean something else:
   underage kids who have nothing better to do than sit around electronically breaking into corporate
   data centers, when they should be out volunteering at their local libraries or, at the very least,
   getting themselves laid.)

   The hackers—programmers—working on Linux and other open source projects forego sleep,
   Stairmaster workouts, their kids’ Little League games, and yes, occasionally, sex, because they
   love programming. And they love being part of a global collaborative effort—Linux is the world’s
   largest collaborative project—–dedicated to building the best and most beautiful technology that
   is available to anyone who wants it. It’s that simple. And it’s fun.

   Okay, I’m starting to sound like a press release with all this shameless self-promotion. Open
   source hackers aren’t the high-tech counterparts of Mother Teresa. They do get their names
   associated with their contributions in the form of the “credit list” or “history file” that is attached
   to each project. The most prolific contributors attract the attention of employers who troll the
   code, hoping to spot, and hire, top programmers. Hackers are also motivated, in large part, by the
   esteem they can gain in the eyes of their peers by making solid contributions. It’s a significant
   motivating factor. Everybody wants to impress their peers, improve their reputation, elevate their
   social status. Open source development gives programmers the chance.

   Needless to say, I was spending most of the year 1993 like I had spent most of 1992, 1991, et
   cetera: hunched over a computer. That was about to change.

   Following in the academic footsteps of my grandfather, I was a teaching assistant at the
   University of Helsinki, assigned to the fall semester of the Swedish-language “Introduction to
   Computer Sciences” course. That’s how I met Tove. She had more of an impact on my life than
   even Andrew Tanenbaum’s book, Operating Systems: Design and Implementation. But I won’t
   bore you with too many details.

   Tove was one of fifteen students in my course. She had already received a degree in preschool
   education. She wanted to study computers, too, but wasn’t progressing as quickly as the rest of the
   class. She eventually caught up.

   The course was so basic—this was the fall of 1993, before the popularity of the Internet—my
   homework assignment for the class one day was to send me email. It sounds absurd today, but I
   said: “For homework, send me email.”

   Other students’ emails contained simple test messages, or unmemorable notes about the class.

   Tove asked me out for a date.

   I married the first woman to approach me electronically.

   Our first date never ended. Tove was a preschool teacher and six-time Finnish karate champion
   who had emerged from a functional family, although that’s how I’d describe any family that was
   not as quirky as mine. She had a lot of friends. She felt like the right woman for me from the very
   first moment we got together. (I’ll spare you the elaboration.) Within a few months Randi the cat
   and I had moved into her minuscule apartment.

   For the first two weeks, I didn’t even bother bringing over my computer. Not counting my
   army service, those two weeks were the longest span of time that I had been away from a
   computer since I had been eleven years old and sitting on my grandfather’s lap. Not to dwell on
   this, but it still holds the record for being my biggest stretch—as a civilian—without a CPU.

   Somehow. I managed (again, the details aren’t interesting). My mother, the few times I saw her
   then, would mutter something about “a triumph of Mother Nature.” I think my sister and father
   were just stunned.

   Soon, Tove went out and got a cat to keep Randi company. Then we settled into a nice pattern
   of spending evenings alone or with friends, waking up at 5 A.M. so she could get to her job and I
   could go to the university early, before anyone would be there to disturb me, and read my Linux
   email.


.. _PE24:

King of the BALL
================

.. _PE25:

I
-

   The birth of version 1.0 meant something new for Linux: the need for public relations. I would
   have been just as happy to introduce the new version to the world pretty much the way I had
   introduced previous versions. I would write something on the newsgroup like “Version 1.0 is out.

   Deal with it.” (Okay, not in those exact words.)
   A lot of other people thought it was much more of a big deal. They wanted version 1.0 for
   marketing purposes. There were all these budding commercial companies that had started to sell
   Linux. To them, version 1.0 was important for psychological, not technical, reasons. I couldn’t
   disagree. The fact is, it looks bad when you try and sell version 0.96 of an operating system.

   I wanted it out because it was a milestone for me, and because it meant I could stop fixing bugs
   for a while and go back to development. The companies and the Linux community wanted to foist
   it onto the public in a major way.

   We needed a public relations strategy. I wasn’t going to personally champion the effort. I
   wasn’t interested in putting out press releases or making statements. Others thought it should be
   done that way, so others volunteered to pick up the torch. This was pretty much how Linux itself
   was done—and somehow, it all actually worked.

   Lars was one of the driving forces behind making that first official release a real event. He and
   a few others thought the university would be the most appropriate place to make the
   announcement. It made sense. My bedroom was too small. And it would have set a wrong
   precedent to host the announcement at a commercial site. So Lars volunteered to coordinate the
   event with the university. The computer sciences department at the University of Helsinki was
   small enough that he could just talk to the head of the department.

   The University of Helsinki was more than happy to offer up the main auditorium of the
   computer sciences department for the introduction of Linux Version 1.0. And why not? How often
   does a university have anything worthy of television news?

   I did agree to give a talk. But it bore none of the horror of my Ede experience. Okay, some
   things were harder, now that I think about it.

   Like having my dad in the audience. And the fact that it was on Finnish TV. It was the first
   time I ever got the chance to see myself on television. Both of my parents were in the audience
   (but I’m fairly certain they weren’t sitting together). Tove was there, too. It was the first time my
   dad met Tove, so for me it was more than just the announcement of Version 1.0. Since I was
   involved in the last-minute speech preparations, like making sure my slides were okay, I wasn’t
   there when they actually met. That apparently happened when they were walking into the
   auditorium. Maybe I caught it out of the corner of my eye.

   In that talk, and in virtually every other one over the next several years, I spoke not so much
   about the technology but about Open Source. It was nice. It changed some opinions about Linux
   inside the computer science department. Before that, Linux was something the computer science
   department was proud of, and mildly encouraged. But after the announcement, people within the
   department started taking Linux more seriously. After all, they had seen it on the news.

   Over the years, some have suggested that the university was trying to take credit for Linux.

   That wasn’t the case. The department had always been very supportive. They even gave me a job
   that enabled me to work on Linux on their time. And that was in the early days, so nobody was
   saying, “‘Let’s push this because some day it will be world famous.” But at the same time they
   were pleased to be a big part of the announcement. It provided great public relations. I know there
   are now more Swedish-speaking students in the computer sciences department, which had always
   been overshadowed by the Polytechnic University.

   Success envy is considered a Finnish cultural characteristic. And as Linux became better
   known in the world at large, I got a lot of questions about whether I had problems with people at
   the university being envious of me. The opposite turned out to be true; they were very supportive.

   Early on they started getting rid of X terminals and installing PCs with Linux instead.

   The announcement launched Linux into the above-the-radar zone in Finland, and it started
   generating publicity elsewhere, too. A lot of the early headlines came about because some
   journalist had stumbled over Linux and got excited about it. From a business standpoint, Version
   1.0 was never very challenging to any of the big players. Linux was getting the market that Minix
   and Coherent had. But there was little attention outside that community, which was fine. It was far
   more attention than I had expected initially.

   Regardless, journalists, mostly from trade publications, started knocking at my door—literally.

   It didn’t make Tove happy to wake up on a Saturday morning to find a Japanese reporter bearing
   gifts—usually watches, as they probably heard somewhere that I have a thing for them—and
   wanting to do an interview. It made her even less happy when I would invite them in. (It was a
   pattern I would repeat for years, until we made our new house a Journalist-Free Zone. In my least
   considerate moments, I would even forget to tell Tove that I had invited a journalist to our house
   for an interview—and I would forget, too. The reporter would show up and Tove would have to
   entertain him or her until I made it home.) Then there were the fan websites that started popping
   up, such as the one based in France that primarily consists of a much-updated gallery of
   embarrassing photos of me. Like the one of me from a Spektrum meeting: I’m shirtless, drinking
   a beer, looking studly.

   Not.

   And it wasn’t only journalists or Linux hacker types who were showing an interest. Suddenly,
   people with big expense accounts wanted to talk to me about their technology. Unix had long been
   seen as an operating system with vast potential, mostly because of its power and multitasking
   capabilities. So corporations that were interested in Unix started keeping an eye on Linux. One of
   those was the networking company Novell, which had started a skunkworks project based on
   Linux. It was a Unix desktop they evolved called Looking Glass. It looked nice, but it was up
   against a wall: It lacked the standard of the time, which was the Common Desktop Environment.

   In August 1994, they said they would pay me to visit them in Orem, Utah, to talk to them about
   their desktop. Novell was offering me my big chance to see America, so I told them I would
   accept if they would pay for me to visit another U.S. city. Even as an unworldly Finn I kind of
   suspected that Orem—and even Salt Lake City—weren’t quite representative of the rest of the
   country. They suggested Washington, D.C., but I didn’t want to go there. I figured it would be just
   like any other capital. They suggested New York, but I thought it would be more interesting to go
   to California.

   Inside Novell’s headquarters, it was hard to determine just how serious people were about the
   project. (In the end, they ended up being not very serious at all; they eventually killed the project,
   and the nine people involved started up Caldera.) But I was getting my first taste of the United
   States, where I somehow figured I would live at some point in my life. Novell’s commitment to
   Linux notwithstanding, the United States seemed to be the center of the growing technology
   universe.

   My visit to the United States was a bit of a jolt. The first thing that struck me was how new
   everything was, compared to Europe. The Mormon Church had had its 150th anniversary a few
   years before my visit, so they had cleaned up the main temple. It was shining white. Coming from
   Europe, where all the churches are old and have the patina of time, I could only think of one thing
   when I saw the white temple: Disneyland. It looked like a fairy-tale castle, not a church. And in
   Orem I made the mistake of checking out the hotel’s sauna. It was one of those porta-potty saunas,
   literally made of plastic, and it was barely hotter inside than outside. I came away from it thinking
   they can’t do saunas in the United States and feeling a little homesick.

   And I started learning the ropes. Just as visitors to Finland learn quickly not to start up
   conversations with random strangers in bars, I learned that in Utah—and, I later learned, the rest
   of America—you cannot rationally discuss the subject of abortion or rifles. There’s a 50-percent
   chance that you’ll get somebody who’s very emotional about those issues, and it’s easy to get into
   a big fight about something that shouldn’t be fought about. People don’t get hung up about those
   issues in Europe. The reason people get so defensive about their own positions in the United States
   is that they’ve heard the other position so much. There are probably more rifles per capita in
   Finland than in many other places, but they’re mostly used for hunting. It’s not a big thing.

   Another thing I quickly learned during my first days on U.S. soil: Root beer sucks.[2]
   After Utah, I flew to San Francisco and really, really liked it. I spent so much time walking
   around the city that I developed a major case of sunburn and had to remain indoors for an entire
   day.

   I remember walking across the Golden Gate Bridge, looking up at the Marin Headlands, excited
   about the possibility of hiking in those hills as soon as I crossed the bridge. But by the time I
   made it to the Marin side, I had lost all interest in walking anymore. I could never have predicted
   that six years later, almost to the day, I would be sitting at the crest of those windy Headlands,
   looking out on the Pacific Ocean, San Francisco Bay, the bridge, the fog, and San Francisco itself,
   explaining all this to David’s tape recorder.

   It would take only a year for me to return to the United States. I came back to speak at DECUS,
   (Digital’s User Group) in New Orleans. There were only forty people at the meeting, so it wasn’t a
   terrible ordeal. Best of all, that’s when I met Maddog, a.k.a. Jon Hall. He was a technical
   marketing person for Digital Unix and an old-time Unix user. He was responsible for sending me
   over for the talk. Maddog, who is known for his chest-length beard and his absurd sense of humor
   (not to mention his propensity to snore), heads Linux International, an organization that works to
   support Linux and Linux users. He’s also a godfather of my daughter Patricia.

   Another legacy of that New Orleans meeting: Maddog arranged for Digital to lend me an
   Alpha. That’s how Linux got ported to something other than a PC. Before that time, people had
   ported Linux to other architectures. There was a port to a 68K, the Motorola 68000 machines used
   by Atari and Amiga. But in those cases Linux didn’t work on both platforms at the same time. To
   make that version of scaling work, you rip out the pieces that don’t work on the new platform and
   you write new pieces. But the Alpha was the first real port of Linux. Basically the same sources
   worked on both the PC and Alpha. You add an abstraction layer so that the same code gets
   compiled in two different ways to work on two different architectures. It’s still the same code, but
   it ends up working on different architectures.

   When we released Version 1.2 in March 1995, the kernel had grown to include 250,000 lines of
   code, the new magazine Linux Journal claimed a 10,000-reader circulation, and Linux was capable
   of running on Intel, Digital, and Sun SPARC processors. That was a big step.


.. _PE26:

II
--

   It’s 1995 and there is a host of growing commercial versions, and Linux companies are attracting
   a strong following. The university has elevated me from a teaching assistant to a research
   assistant, which means more money and less time teaching. I’m slowly—very slowly—
   completing the coursework for my master’s degree, which is about porting Linux to different
   architectures. Tove has introduced me to squash, and we have a weekly game; we’re fairly evenly
   matched.

   From this bliss, a problem emerges. It turns out that an opportunistic fellow from Boston has
   registered the trademark for the word Linux. Not only that, but he sent email to the Linux Journal
   and a few other Linux companies asking for 5 percent of their revenues as a “thank you” for the
   trademark.

   When I heard about this, I felt a twinge of déjà vu. The guy’s name sounded familiar. I checked
   my email archives and saw that maybe a year and a half earlier he had sent me an unsolicited
   email in which he first asked me if I believed in God, and then said he had a tremendous business
   opportunity for me. This was before spamming became a global obsession, the innocent years
   before anyone thought to pollute the Internet with offers of get-rich-quick schemes. No, I hadn’t
   bothered responding to the fellow’s email, but because it was so unusual for its time, I saved it.

   So we had a little crisis on our hands. We were hackers. Nobody thought about checking the
   trademark register.

   The guy wasn’t a professional trademark squatter. He apparently just did it this one time.

   Trademarks come in different categories, and he registered his in the computer category. You
   have to submit evidence with your trademark application, so he gave the trademark office a disk
   on which he claimed to have a program called Linux.

   There was some panic. Everybody in the Linux community knew we would contest the
   trademark. The problem was, we didn’t have an organization for putting up a good fight. There
   wasn’t even enough money to hire a lawyer. None of the companies felt comfortable about laying
   down the required amount, which was $15,000. (Today they go through that in a month’s worth of
   Mountain Dew.) But at the time, it was a considerable amount of money for a single company. So
   Linux Journal and some other companies decided to pump money into Linux International, which
   would fight the trademark. Linux International had been started in Australia by a person named
   Patrick D’Cruze who migrated to the United States in 1994 to help promote Linux worldwide. The
   year of the trademark dispute was the year when Maddog became its executive director.

   Everybody trusted him, and still does.

   I was in Finland, trying to beat Tove in squash or to beat Avuton in snooker, and I had no
   interest in getting involved in this. I just wanted the entire nightmare to go away. My preference at
   the time was to just get rid of the trademark, to get it declared invalid because of prior use in the
   industry. We had enough paperwork to show that Linux had, in fact, a history of prior use. The
   trouble was, our lawyer convinced us that it would be a wasted effort, that we should not even try
   to get Linux declared a public domain instead of a trademark. The only way for it to really be in
   the public domain, he explained, was for it to become generic. And Linux at the time wasn’t that
   generic. The trademark office probably wouldn’t even consider it to be generic today. We could
   lose the battle, he said. Or if we invalidated the old trademark, somebody could possibly come
   along and trademark it anew.

   The solution he suggested was to transfer the trademark to somebody else. My vote went to
   Linux International, but there was a lot of opposition to that. Linux International was young and
   unproven. People were worried about Linux International being taken over by commercial
   interests. (It hasn’t happened, I might add.) There was also strong concern about who would
   eventually take over for Maddog if he were to step down.

   So all eyes looked to me. The lawyer suggested that the legal arguments would be easier if the
   Linux trademark were to be transferred to me because I was the original user of the word. That’s
   the strategy we took. We reached an out-of-court settlement because that seemed like the easiest
   and cheapest thing to do. Like most out-of-court settlements, the details can’t be discussed. Not
   that I even know them. I was happily uninterested in it all.

   When I went back to check my original email from the guy, I realized that it had nothing to do
   with patents. It was obvious that he just wanted to talk to me. Maybe he tried to contact me to get
   me to pay him. Or maybe, if I had shown myself to be a true believer and soul brother in his faith,
   he would have just given me the trademark. I don’t know.

   I accept the fact that some people are not morally all there. But what was more irritating at the
   time was the fact that the entire trademark system put this onus on me, who had done nothing
   wrong, to go out and fight the guy.

   As a result of the messy squirmish, I hold the Linux trademark. What that means is, when
   companies like VA Linux file for an IPO, their prospectus has to mention the fact that the
   company doesn’t even own the trademark for half of its name. (In that particular case, the
   company was involved in the legal process of getting approval from me to use the word Linux.)
   But I’ve gotten accustomed to that sort of thing.

   The trademark episode was just an unexpected growing pain for Linux. And a distraction. But
   no sooner was it settled then another surfaced: An engineer at Intel’s research lab in Portland,
   Oregon, said his company was using Linux in its exploration of new architectures. He asked me if
   I wanted to move there for a six-month internship.

   Tove and I had spoken in vague terms about possibly living in the United States. She knew how
   much I had enjoyed my few visits there, root beer notwithstanding. We agreed that the
   opportunities—not to mention the climate—were better in America. (By the way, I am totally
   convinced that the U.S. system of motivating employees is far more realistic, and produces better
   results, than the European model. In Finland if a worker is much better than his colleagues, you
   give him just a little more money and keep it very quiet. In America, you give him a lot more
   money—and it works.) The internship seemed like a great way of testing the waters, or, since it
   was in the Pacific Northwest, the rainwaters, and we agreed that I should pursue the opportunity.

   But I was ambivalent. I felt a bit uneasy about leaving school without having finished my
   master’s. Something inside me, possibly the memory of my professor grandfather, didn’t take to
   the notion of being a dropout. In the end, my feelings didn’t even matter. The engineer’s manager
   decided that it would be difficult for me to obtain the required six-month work permit from the
   U.S. Immigration and Naturalization Service for the internship.

   So we stayed in Helsinki. By the time Finland’s legendary revelers were toasting the arrival of
   New Year’s Day, 1996, I was inching toward the master’s degree finish line. I only needed to
   complete one small course to finish the credit requirements. And I also had to write my thesis.

   Ironically, it would be the first time I got any academic credit for my work on Linux, which had
   consumed most of my life throughout my college years.

   The year 1996 brought with it a wake-up call. In egalitarian Finland, you get a state-mandated
   seniority raise after you’ve been at a job for three years. When I saw my first pay stub reflecting
   the new salary, I felt a jolt: I had been working at the university long enough to be given seniority.

   Would I spend my entire working career there? Was I destined to become my grandfather?

   Remember my description of him from earlier in this book: bald, overweight, and not smelling
   like anything. I started checking myself in the mirror with some regularity. My hairline was
   creeping back a couple of millimeters. Extra kilos seemed to have made their way to my once-
   skinny torso. I was twenty-six and for the first time in my life I was feeling old. I had been at the
   university for going on seven years; I knew I could graduate fairly quickly if I got my act together.

   My ten-year-old daughter Kaley thinks it’s the apex of super-stardom to have someone buy you a
   penguin. We are sitting around a campfire on a clear Sierra night when Linus explains that a
   Linux user group in Bristol, England, bought him a penguin. Kaley cannot imagine that he hasn’t
   bothered to visit the creature. Then he elaborates: Actually, they didn’t buy him a penguin, but
   instead sponsored one in his name. And the sponsorship lasts for a year, he thinks.

   The Torvalds family is trying to understand the concept behind ’smores. Somebody looks up
   from his roasted marshmallow and makes the mistake of asking how the penguin came about as the
   planetary symbol of Linux in the first place.

   “The penguin was my idea,” says Tove. “Linus was trying to find a symbol for Linux because
   people were asking, ‘Shouldn’t there be a symbol?’ He was thinking of things he’d seen. The Linux
   companies had their own symbols. One of the companies had a pink triangle as its symbol. But I
   knew that was the international symbol for gays, so I told him that had already been taken. He
   said he would like to have something nice, something sympathetic.

   I thought about penguins. Linus had been bitten by a fairy penguin at a zoo in Australia. He
   likes to pet things. He’s always poking at stuff like rattlesnakes. Those penguins at the zoo were
   about one foot high, and he just reached into the cage to pet one of them. He kind of played with
   his fingers as if they were fish. The penguin came at him, bit him, noticed he was not a fish. He got
   bitten by a penguin but he liked it anyway. I got the feeling he was sold on penguins after that. He
   wanted to see penguins wherever it was possible.

   “So when he started looking for a symbol I said, ‘Why don’t you have a penguin because you
   fell in love with those penguins?’ He said, ‘Okay, I’II think about it.’”

   Here’s where Linus, sitting maybe three bodies away from Tove, shakes his head.

   “No, it was not her idea,” he says. “She’s wrong.”

   This was a departure. Linus and Tove don’t make a habit of disagreeing. Tove is astounding in
   her ability to deftly handle the responsibilities of the girls and the household—and a famous
   husband—fending off journalists with her karate skills. Linus seems downright cheerful about
   chipping in by occasionally folding laundry or doing his morning chore of making the cappuccino.

   Even during the stress of a ten-hour car trip with the on-again-off-again needs of a pair of young
   kids, Linus and Tove handle it all smoothly: Think of the marital equivalent of a well-crafted
   Scandinavian sofa bed.

   We found the kink.

   The story, according to Linus, is that while Tove may in fact have vaguely mentioned penguins
   at some early stage, it was in a conversation with two high-ranking Linux types that the icy
   creatures were first seriously considered as the operating system’s official mascot.

   Tove has her take on this version. “He thought it wasn’t a good idea after all, because it was
   my idea. He went on thinking about a possible symbol. Then we were in Boston with Maddog and
   Henry Hall. They started talking about the symbol. I said to them, ‘What about a penguin. Do you
   think it’s nice?’ They said yes. I think that made Linus think it might be a good idea after all.”

   “Henry Hall said he knew an artist who could draw it for him, but that never happened. The
   next thing I knew, Linus had asked on the Internet if there were people who wanted to send in
   pictures of penguins.” He chose a version by Larry Ewing, a graphic artist who works at the
   Institute for Scientific Computing at Texas A&M University.

   But this wasn’t to be just any penguin. Above all, Linus wanted one that looked happy, as if it
   had just polished off a pitcher of beer and then had the best sex of its life. Even beyond that
   stipulation, he wanted one that was distinct. Hence, while all other penguins have black beaks and
   feet, those features are orange on the Linux mascot, making it look almost like a penguin whose
   father was a duck. As if Daffy Duck got a little kwazy on a cruise to Antarctica and had a wild
   one-night-stand with some native fowl.


.. _PE27:

III
---

   News of my decision to work for Transmeta Corporation was greeted with the same reaction in the
   Linux community as was the news that Tove and I had figured out how to conceive a child and
   were expecting one at the end of 1996.

   When word leaked out in the spring that Tove was pregnant, the more vocal among Linux user
   newsgroup participants wanted to know how I planned on balancing the demands of Linux
   maintenance with those of a family. A few months later, when it became known that I would
   (finally) be leaving the University of Helsinki to work for the secretive Transmeta in Silicon
   Valley, the big, worldly debate centered on whether I could possibly keep true to my open source
   philosophy in a dreaded commercial environment, as opposed to a neutral academic institution.

   Transmeta was partly funded by Microsoft cofounder Paul Allen, folks declared in protest; some
   claimed it must be an elaborate scam for taking control of Linux.

   I’m not saying those aren’t valid concerns for loyal members of the Linux community, but it’s
   just… gimme a break! The fact is, neither the birth of Patricia in December 1996 (and Daniela
   sixteen months later and Celeste forty-eight months later) nor my job at Transmeta, which began
   in February 1997, has caused the downfall of Linux. I felt all along that if anything were to
   negatively affect my work with Linux, I would have taken the obvious necessary step of turning it
   all over to somebody I trust.

   But I’m getting ahead of myself.

   In the spring of 1996, just as the weather was breaking, I finished the last of my required
   coursework for my master’s. It was about this time that I heard from Peter Anvin, the Linux
   community member who three years earlier had organized the online collection that helped me
   pay off my first PC. Like everybody else who prowled the Linux newsgroups, he knew I would
   soon be graduating. He had been working at Transmeta for about a year, and approached his boss
   to explain that he knew this guy in Finland who might be good for the company. He came to meet
   with me briefly while he was visiting his mother in Sweden. He talked up Transmeta, which was
   pretty hard to do since it was in stealth mode and he couldn’t tell me much of anything. The rumor
   among programmers was only that it was involved in developing “programmable chips.” At the
   very least it was great to meet Peter in person.

   A week after he returned to California, he sent me an email asking when I could come. This
   was hugely different from the experience I had had with Intel a year earlier, when an engineer
   wanted to hire me for an internship but it never happened because of the paperwork issues.

   It would be fun just to get a trip to California, I thought.

   This was the first job interview of my life. I didn’t have a CV. I didn’t know what Transmeta
   was doing; it was in a strange land.

   I was more worried about the implications of moving to the United States than about getting
   the job itself, so I didn’t even think of my meetings as being interviews. What mattered more, it
   seemed, was to learn what these guys were up to. It was a fairly strange interview situation.

   After the first day, I went back to my hotel across the street from Transmeta’s office-park
   headquarters. In my jet-lagged state I thought it was all interesting, but I also thought that the
   folks at Transmeta were crazy. At that point the company didn’t have any silicon at all. No
   hardware. Everything was done with a simulator, and the demonstration of the simulation booting
   into Windows 3.11 and running solitaire did little to convince me that anything was going to
   happen. After that first day I wondered if it wasn’t all a waste. I distinctly remember thinking:
   Maybe this isn’t going to turn out—either as a technological innovation for Transmeta or a job for
   me.

   I literally slept on it. Actually, it wasn’t much of a sleep. I lay in bed thinking about
   Transmeta’s plans. Then I started fantasizing about having a backyard palm tree. Then I started
   ruminating over what I had seen on the simulator. It was a memorable, fitful night, but nothing
   like the frostbitten anxiety of Ede.

   By morning, I was somewhat excited. By the end of the second day, I was very excited. That’s
   when the stress began.

   Before accepting Transmeta’s offer, I talked it over with various people. When word got out
   that I was considering the job, I received a number of other offers. In Finland I got an offer from
   Tele, which was using Linux in some capacity. Through Maddog I got an offer at Digital. (No
   offense, but Boston in winter isn’t a whole lot better than Helsinki in winter. Okay, maybe it is.) I
   talked to some of the Red Hat people. They offered me a job and said they would pay better than
   Transmeta was paying, even though they had no idea what the proposed salary was because I
   hadn’t even discussed money with the company. The Red Hat crowd said they would even top
   Transmeta’s stock options, whatever they would be. But I wasn’t interested in working for any
   particular Linux company—even one that was fortunate enough to be located in the middle of
   North Carolina.

   In the end, I got five job offers without ever formally looking for a job. Transmeta’s was the
   most exciting, by far.

   I said yes. It felt weird. The next thing I did was tell the university I would be leaving. That’s
   when the stress really began. For me, it was a giant step that meant there was no turning back. We
   were having a new child, moving to a new country, and I was leaving the safe nest of the
   University of Helsinki—but first I had to write my thesis. In retrospect, I guess getting all those
   changes over at once was a good idea. But it was madness.

   There was no formal announcement (why should there be?).

   Just word circulating on the Internet, and the aforementioned debate about whether I would be
   able to remain true to Linux and free software in the evil corporate environment, and between the
   changing of diapers. Back then, people had this view of Linux as something that was mainly
   developed by university students, not settled-down people. I guess it was understandable that they
   would be nervous.

   I wrote my thesis over a long weekend and turned it in minutes before taking Tove to the
   hospital to deliver Patricia, who was born forty hours later. That was December 5th, 1996. Being a
   father seemed like the most natural thing in the world.

   The next several weeks we were busy with Patricia and constantly worrying about obtaining the
   approvals for our U.S. visa paperwork, which was taking forever. We figured it would help if we
   were married, so sometime in January—I always have to ask Tove the date—we went to a
   government office to be officially wed. We had three guests: Tove’s parents and my mother. (My
   dad was in Moscow). It was a strange time. At some point we shipped most of our belongings to
   the United States without knowing when we would be able to fly out. To say good-bye to all of our
   friends, we hosted a housecooling party, the reverse of a housewarming. Twenty people crammed
   into the small, recently emptied one-bedroom apartment. In good Finnish tradition, everybody got
   drunk.

   Our visas finally arrived and on February 1 7, 1997, we boarded a morning flight to San
   Francisco. I remember the temperature in Helsinki: 0 degrees Fahrenheit. I remember Tove’s
   family at the airport, crying when we said good-bye—they’re very close. I don’t remember if my
   family was there or not. They must have been. Or maybe not.

   We landed in the United States and made our way through customs carrying a baby and two
   cats. Peter Anvin was there to greet us as we rented a car for the drive down to Santa Clara, to the
   apartment complex we had chosen during an apartment-hunting trip we had taken a few months
   earlier. It all felt surreal, particularly the 70-degree difference in climate from Finland.

   Our belongings wouldn’t arrive for another two months. We spent the first night sleeping on an
   air mattress we had brought with us. The next day we went out to buy a real bed. Until our
   furniture made it to California, Patricia had to sleep in her carriage. It was something that really
   annoyed Tove, although David points out that it is sort of cyclical, referring to the first three
   months of my life that were spent in a laundry basket. We didn’t do much cooking (we still don’t)
   and didn’t know where to go for dinner. We ate most of our meals either at the food court of a
   local shopping mall or at a fast-food place. I remember telling Tove we had to find some new
   places to eat.

   With the move and getting accustomed to the new job at Transmeta, I didn’t have a lot of time
   to devote to Linux during those first couple of months. The new job occupied much of my time
   and my after-work hours were spent with Tove and Patricia, trying to get to know the new area. It
   was a fairly busy time. We had absolutely no money. I had this great salary, but everything went
   toward getting furniture. Buying our cars was a hassle because we had no way of establishing a
   credit history. We even endured hassles proving we were capable of paying for telephone service.

   My computer was on a ship that was inching its way around the Horn of Africa. It was the first
   period of time when I was quiet on the Web, and my absence worried a lot of people. It was like,
   Okay, now he’s working for a commercial company….

   Many people asked outright: Does this mean Linux will die off as a free system? I explained
   that under my agreement with Transmeta I could continue doing Linux. And that I wasn’t going to
   go away. (I couldn’t think of a way to say that I was just catching my breath.)
   Life in Transmetaland.

   One of the problems with explaining to people how the move to the States and into the
   commercial world wasn’t going to change me was the fact that Transmeta was just about the most
   secretive company around. There was only one rule concerning what you could talk about, and that
   rule was very simple: “Say nothing.” Which just made Linux people sometimes wonder what kind
   of strange cult I had joined, and whether I was ever coming back. I couldn’t even tell my mother
   what I was up to—not that she would have been interested.

   What I was doing at Transmeta wasn’t all that strange. The first thing I actually ended up doing
   was fixing some of the Linux problems that Transmeta had. The company was using a lot of
   multiprocessor Linux machines. I had never personally worked on the Linux SMP (Symmetric
   MultiProcessing) issues, and it turned out that many things didn’t really work the way they were
   supposed to. I took this as a personal affront, and had to fix it, of course.

   But my real work was actually being part of the Transmeta softball team.

   Oh, I mean software team. We didn’t play all that much softball. None of the Silicon Valley
   leagues would let us join unless we agreed to tell them what we were up to.

   I don’t know how familiar people are with Transmeta. As I’m typing this, we’re actually in our
   silent period before the (please, God, buy our stock) IPO, and we’re no longer secret, although
   we’re back in our stealth mode due to SEC rules about initial public offerings. Let’s hope that by
   the time this book is out, everybody and his dog has heard about Transmeta and bought
   (subliminal message: STOCK) one or more of our CPUs. Because that’s what Transmeta does—
   CPU’s. Hardware.

   But Transmeta does more than just hardware. Which is just as well because, quite frankly, I
   wouldn’t know a transistor from a diode even if one kicked me in the head. What Transmeta does
   is simple hardware that relies on clever software to make a simple CPU look like much more than
   it really is—like a standard Intel-compatible X86, in fact. And with the hardware being made
   smaller and simpler, the CPU ends up having fewer transistors, which in turn makes it use less
   power, which as everybody realizes will become increasingly more important in a mobile world.

   This clever software is why Transmeta has a rather large software team, and why I was there.

   This all fit me quite well. A non-Linux company that did something that was technically quite
   interesting (understatement of the year—I still don’t know of another company that has ever
   seriously even tried to do what Transmeta does). And it was in an area that I knew intimately:
   low-level programming of the quite esoteric 80x86 family of CPU’s. As you undoubtedly recall, it
   was the act of getting to know that CPU in the first personal computer I owned that had started the
   whole Linux project in the first place.

   The fact that Transmeta wasn’t a Linux company was also important to me. Don’t get me
   wrong: I loved fixing Linux problems at Transmeta, and I’ve been involved in several internal
   projects about Linux. (In fact, these days it’s probably impossible to find a serious technology
   company without such projects.) But at Transmeta, Linux was secondary—which was just what I
   wanted. I could continue to do Linux, but I didn’t feel I would have to make the technical
   compromises that would favor the company’s goals over Linux itself. I could continue to think of
   Linux as a hobby in which only technology mattered, and nothing else held sway over my
   decisions.

   So during the day, I worked for Transmeta. I wrote and maintained the “x86 interpreter” that
   we still use today (although others maintain it now). The interpreter is basically the piece of
   Transmeta software that looks at Intel instructions one at a time, and executes them (i.e., it
   “interprets” the language of the 80x86 architecture, one instruction at a time). I ended up doing
   other things later, but that’s how I got into the strange and wonderful world of hardware
   emulation.

   During the night, I slept.

   My deal with Transmeta was clear: I had been given vague assurances that I could work on
   Linux during work hours too. Trust me, I took full advantage of that.

   A lot of people believe in working long days and doing double, triple, or even quadruple shifts.

   I’m not one of them. Neither Transmeta nor Linux has ever gotten in the way of a good night’s
   sleep. In fact, if you want to know the honest truth, I’m a firm believer in sleep. Some people
   think that’s just being lazy, but I want to throw my pillow at them. I have a perfectly good excuse,
   and I’m standing by it: You may lose a few hours of your productive daytime if you sleep, oh, say,
   ten hours a day, but those few hours when you are awake you’re alert, and your brain functions on
   all six cylinders. Or four, or whatever.


.. _PE28:

IV
--

   Welcome to Silicon Valley. One of the first things I got to do upon landing in this strange galaxy
   was to meet the stars.

   I received an email from Steve Jobs’s secretary about how he’d like to meet me and could I
   spare an hour or two. Not knowing what it was all about, I said sure.

   The meeting was at Apple’s headquarters on Infinity Loop Drive. It was with Jobs and his chief
   technical guy, Avie Tevanian. This was when Apple was starting work on OS X, the Unix-based
   operating system that wasn’t released until September 2000. There wasn’t much formality to the
   meeting. Basically, Jobs started off by trying to tell me that on the desktop there were just two
   players, Microsoft and Apple, and that he thought that the best thing I could do for Linux was to
   get in bed with Apple and try to get the open source people behind Mac OS X.

   I stuck around because I wanted to learn about the new operating system. It’s based on Mach,
   the microkernel developed at Carnegie Mellon University. In the mid-1990s the Mach was
   expected to be the ultimate operating system, and a lot of people were interested in it. In fact, IBM
   and Apple used Mach as the basis for their ill-fated Taligent joint-venture operating system.

   Jobs made a big point of the fact that Mach’s low-level kernel is open source. He sort of played
   down the flaw in the setup: Who cares if the basic operating system, the real low-core stuff, is
   open source if you then have the Mac layer on top, which is not open source?

   He had no way of knowing that my personal opinion of Mach is not very high. Frankly, I think
   it’s a piece of crap. It contains all the design mistakes you can make, and managed to even make
   up a few of its own. One of the arguments against microkernels has always been performance. So
   a lot of people did research projects aimed at determining how to turn microkernels into
   something that performs really well. All of the resulting recommendations made it into Mach. As
   a result, it became a very complicated system with rules of its own. And it still doesn’t perform
   that well.

   Avie Tevanian had been one of the Mach people when it was a university project. It was kind of
   interesting, discussing what he and Steve saw as the issues. At the same time, we disagreed fairly
   fundamentally on technical matters. I really didn’t think there was a reason for open source or
   Linux people to get involved. Sure, I could understand why they wanted to get more open source
   developers into their system; they were seeing the momentum build behind Linux. But I don’t
   think they were seeing it quite enough. I don’t think Jobs realized that Linux would potentially
   have more users than Apple, although it’s a very different user base. And I don’t think Steve
   would be quite as eager to dismiss Linux as a desktop system today as he was three years ago.

   I explained why I didn’t like Mach. For understandable reasons that didn’t go over very well.

   They’d certainly heard the arguments before. Obviously, I was very set on Linux and Tevanian
   was very set on Mach. It was interesting to see how they discussed some of the technical issues.

   One of the immediate problems I could see involved how they planned on supporting old Mac
   applications in the new operating system. They wanted to do all the old stuff with a compatibility
   layer. All the old Mac applications would run within one new tacked-on process. But one of the
   major shortcomings of the old Mac is the lack of memory protection, and this solution does
   nothing to solve that problem. Only the new Mac applications would have memory protection. It
   didn’t make sense to me.

   We had basic differences in how we viewed the world. Steve was Steve, exactly as the press
   portrays him. He was interested in his own goals, and especially the marketing side. I was
   interested in the technical side, and not very interested in either his goals or his arguments. His
   main argument was that if I wanted to get the desktop market I should come join forces with
   Apple. My reaction was: Why should I care? Why would I be interested in the Apple story? I
   didn’t think there was anything interesting in Apple. And my goal in life was not to take over the
   desktop market. (Sure, it’s going to happen, but it’s never been my goal.)
   He didn’t use very many arguments. He just basically took it for granted that I would be
   interested. He was clueless, unable to imagine that there could be entire segments of the human
   race who weren’t the least bit concerned about increasing the Mac’s market share. I think he was
   truly surprised at how little I cared about how big a market the Mac had—or how big a market
   Microsoft has. And I can’t blame him for not knowing in advance how much I dislike Mach.

   But even though I disagreed with almost everything he said, I kind of liked him.

   Then there was the first time I met Bill Joy. I walked out on him.

   Okay, to be fair, I didn’t realize who he was when I first met him. It was at the Jini preview.

   Jini is Sun Microsystems’ interaction agent language, an extension to Java. It’s for doing seamless
   networking between completely different systems. You could have a printer that was Jini-aware,
   and anything on the same network that spoke Jini would be able to use Jini automatically.

   Sun Microsystems had invited me and about a dozen other open source people and technical
   people to a private preannouncement briefing that would take place in a hotel room in downtown
   San Jose during Java World. The reason we were invited: They were doing Jini under what, at Sun
   Microystems, passes for open source.

   When I went there, I kind of knew Bill Joy was there. He had been the key person behind BSD
   Unix and later joined Sun as chief scientist. I had never met him before. He just came up to me
   and said he was Bill Joy and I kind of didn’t react to it. I hadn’t come there to meet him but to see
   what Sun thought about open source and how they were going to enter open source. A few minutes
   later, Bill himself was explaining the reasons for making it open source and they had a limited
   demonstration of the system.

   Then they started explaining their licensing. It was horrible. Just stupid. Basically it boiled
   down to the fact that if somebody else wanted to use the system in even a half-commercial way, it
   wouldn’t be open source at all. I thought it was a completely idiotic idea. I was really upset about
   the fact that, on the invitation, they had touted their open-sourceness. It was open source in the
   sense that you could read the source, but if you wanted to make any modifications or make it part
   of your infrastructure, you had to license it from Sun. If somebody at Red Hat wanted to make the
   latest Red Hat CD version of Linux Jini-aware, the company would have to license the Jini
   technology from Sun.

   I asked a few questions to see if l had understood it correctly.

   Then I walked out on them.

   I was just so pissed off that they had gotten people there by claiming open-sourceness that after
   I found out what it was all about I literally said, “Forget it, I’m not interested,” and left.

   My understanding was that they wanted me there simply to inform me and that maybe if I had
   been enthusiastic they would have liked a press quote or something. That plan backfired. But
   maybe they will learn. Apparently people later convinced them to open source their Star Office.

   So I guess it all just takes time.

   I’m told that they continued the meeting that day and had dinner, and that everybody else
   stayed.

   The second time I met Bill Joy turned out to be a much better experience. About a year and a
   half later he invited me out for sushi.

   His secretary phoned me to set up a time. Bill lives and works in Colorado and apparently
   spends one week out of each month in Silicon Valley. We went to Fuki Sushi in Palo Alto. It’s one
   of the better sushi places in the Valley. Of course it’s nothing like Blowfish Sushi in San
   Francisco, with its nonstop Japanese animations to look at, or Tokyo Go Go in the Mission, with
   its hip crowd, or Sushi Ran in Sausalito, with its important patrons, or Seto Sushi in Sunnyvale,
   which has the best spicy tuna sushi of them all.

   Okay, we were at Fuki Sushi, and it was kind of fun because Bill was trying to get real wasabi. I
   didn’t know this at the time, but in most Japanese restaurants in the United States, what passes for
   wasabi is actually just colored horseradish. It turns out the wasabi plant lives only in Japanese
   streams and is difficult to grow commercially. Bill tried to explain this to the waitress and she
   really didn’t get the concept. She was Japanese, but she thought that wasabi was wasabi. He asked
   her to ask the chefs.

   The back-and-forth was sort of funny. This was a social dinner. He basically made it clear that
   if I wanted to work for Sun I could just give him the word and he would make something happen.

   But that was not the main thing. It was more of an opportunity to talk about the issues. He started
   reminiscing about how he’d been the maintainer of BSD Unix for five years and how he had
   grown to appreciate having the commercial side around him through Sun. He talked about how
   important it was to have the kind of commercial support that a company like Sun could provide. I
   found it fun and interesting to hear him talk about the early days of Unix. It didn’t make one bit of
   difference to me that we were never able to taste genuine wasabi. I distinctly remember thinking
   he was probably the nicest and most interesting of the high-profile people I had met in Silicon
   Valley.

   Flash forward three years. I pick up Wired magazine only to encounter his horribly negative
   article about technology entitled “The Future Doesn’t Need Us.” I was kind of disappointed.

   Obviously, the future doesn’t need us. But he didn’t have to be so negative about it.

   I don’t want to tear apart his article line by line, but I have a general belief that the saddest
   thing that could ever happen to humanity would be that we would just go on and on, as opposed to
   evolving. Bill seemed to feel that advances like genetic modification make us lose our humanity.

   Everybody always thinks that something different is inhuman because right now we are human.

   But as we continue to evolve with whatever happens, in 10,000 years we will not be human
   according to today’s standards. We will just be a different form of human.

   In Bill’s article, he seemed afraid of that. My feeling is that it’s unnatural—and fruitless—to
   try and curb evolution. Instead of trying to find two different kinds of dog to produce the desired
   offspring, obviously we will resort to genetics; it seems inevitable that this will happen for people,
   too. In my opinion, changing the human race through genetics is preferable to leaving the status
   quo. I think that, in the bigger picture, it would be a hell of a lot more interesting to ensure the
   continued evolution of not just humans but of society, in whatever direction it goes. You can’t
   stop technology, and you can’t stop the advances we make in our knowledge of how our universe
   works and how humans are designed. It’s all moving so fast that some people, like Bill Joy, find it
   scary. But I see it as part of our natural evolution.

   I disagree with Joy about how we should deal with the future the same way I disagreed with his
   notion of open source. I disagreed with Steve Jobs about technology. It sounds like I spent my first
   years in Silicon Valley being disagreeable, but that’s not true. I was doing a lot of coding and
   taking Patricia to the petting zoo and in general broadening my horizons—like learning the awful
   truth about wasabi.


.. _PE29:

V
-

   Our overnight success.

   Do you ever read advocacy newsgroups? The entire purpose of their existence is to advocate
   something, which means to put something else down. So if you go on them you find nothing but
   “My system is better than your system” nonsense. It’s its own form of online masturbation.

   The reason I mention advocacy newsgroups is that, despite their absurdity, they do offer a clue
   to what is happening. So when corporations first decided that Linux was the darling of operating
   systems, the growing commercial support wasn’t discussed first in the press or at the checkout
   counter at Fry’s Electronics, but on advocacy newsgroups.

   Let me back up. In the spring of 1998, a third blonde entered my world: Daniela Yolanda
   Torvalds got produced on April 16th, making her the first Torvalds to be a U.S. citizen. She and
   Patricia are sixteen months apart, the same as Sara and me. But I guarantee they won’t be as
   embattled as my sister and I were growing up—certainly not with Tove’s moderating influence.

   Or her karate skills.

   Two weeks before Daniela’s birth, the open source community—which had until recently been
   called the free software community—got its biggest boost ever. That’s when Netscape opened up
   the source code for its browser technology in a project named Mozilla. On the one hand, the news
   got everyone on the newsgroups excited because it raised the visibility of open source. But it also
   made a lot of people, including me, fairly nervous. Netscape was in trouble at the time, thanks in
   large part to Microsoft, and the opening up of its browser was seen as a somewhat desperate
   measure. (Ironically, the browser’s roots were in open source. It began as a project at the
   University of Illinois.)
   People on the newsgroups were expressing their fears that Netscape would muck things up and
   give open source a bad name. Now there would be two big-name open source projects—Netscape
   and Linux—and the reasoning was that if Netscape, the better known of the two, were to fail, the
   reputation would impact Linux, too.

   And to a large degree, Netscape did fail. The company had trouble getting open source
   developers interested in the project for the longest time. It was just a huge body of code and the
   only people who could get into that code were Netscape people.

   The project was somewhat doomed not only because of its size but also, because Netscape
   wasn’t able to make everything available as open source—only the development version, which
   was fairly broken at the time the company released it. The company couldn’t GPL the browser
   because not all the code was theirs—the Java portion was licensed from Sun, for example. Not
   everyone on the newsgroups agreed with Netscape’s license. On the whole, the license was fairly
   mellow, but if you’re someone like Richard Stallman you don’t like mellow.

   I thought it was wonderful that Netscape took this step, but I didn’t view it as a personal
   achievement. I remember that Eric Raymond took it really personally. He was extremely happy
   about it. His paper, “The Cathedral and the Bazaar,” which did an excellent job of explaining the
   open source philosophy and history, had been released the year before and was cited as one of the
   reasons behind the Netscape decision. He was actively pushing open source. He had been at
   Netscape on a number of occasions, trying to convince them to open up their browser. I was there
   only once. In fact, Eric had visited a number of companies bearing the open source message. I was
   interested in the technology, not the evangelization.

   Within 24 hours of Mozilla being released, an Australian team that called itself the Mozilla
   Crypto Group created the cryptography module. Back then, non-U.S. citizens were prohibited
   from using encryption generated on U.S. soil. Suddenly, somebody from Australia had done the
   work, so non-U.S. citizens were in a position to use it. But there was a catch. Given the export
   restrictions of the time, the Mozilla project couldn’t take the Australian code. If it made its way to
   the United States, it couldn’t be reexported. This meant that one of the first successes of the great
   Netscape experiment couldn’t become part of Mozilla.

   We were all worried because Netscape had received a lot of news coverage. And for that first
   year, people walked on eggshells. Nobody wanted to say anything negative about Netscape for fear
   that it would result in bad press for open source and scare other companies away.

   But two months after Netscape’s move, Sun Microsystems joined the game by declaring that it
   would become the first major hardware vendor to join Linux International. It would support Linux
   on its servers. The company with the unimpressive licensing scheme for its Jini project had
   decided that Linux was worth taking seriously. The newsgroups overflowed with
   selfcongratulations. With Sun on board, Linux developments made their way from Internet
   discussions to the trade press. Outsiders were suddenly interested, but mostly technical outsiders.

   Then came IBM.

   IBM has been known for being fairly stodgy, so everybody was taken by surprise when the
   company announced in June that it would sell and support Apache, the most popular commercial
   Linux version used for Web servers. You could run Apache on AIX, IBM’s UNIX, and that’s
   probably what a lot of people who bought IBM did. That’s how Apache got to IBM’s attention.

   Somebody must have noticed that most of those server machines ended up using Apache, so they
   calculated that they would sell more servers if they had the in-house expertise to support such
   customers. Or maybe they were acting on feedback from customers who said they would buy IBM
   machines but would run Apache.

   It’s relatively easy to install Linux on a computer. But for most companies, one of the big
   issues, historically, has been: Who do we blame when something goes wrong? Obviously, there
   are the Linux companies like Red Hat that provide the support, but it was a psychological
   advantage for customers to know that IBM would be there for them. When IBM started getting
   into open source, a lot of people suspected it was just lip service. But that turned out not to be the
   case. IBM dipped its toes in the water by running and supporting Linux on its server boxes and
   then sort of waded all the way in. Next came the small PC servers. Then, the regular PCs. Then,
   the laptops. The company has announced it will spend $1 billion on Linux this year.

   IBM did a lot of its Linux work on its own. I think one of the reasons they liked Linux was
   because they could just do what they wanted to do without having to deal with licensing issues.

   It’s a company that has had its share of hassles. IBM was screwed over by Microsoft after the two
   companies jointly developed the OS/2 operating system, which turned out to be just Windows on
   steroids. Microsoft failed to support OS/2 because it wasn’t interested in sharing the market.

   Windows NT is what came out of it from the Microsoft side. But OS/2 never paid back to IBM the
   billions of dollars poured into it. And IBM was plagued with the licensing issues over Java. I think
   they were just happy not to have all that aggravation with Linux.

   There’s no doubt that IBM was Linux’s biggest coup. And it generated only excitement on the
   newsgroups—not the sort of paranoia provoked by the Netscape announcement, or any of the
   seething anticommercialism that has periodically (okay: frequently) divided Linux enthusiasts.

   By July, Informix announced that it would port its databases to Linux, meaning that even if you
   used Linux to operate your computer, you could run an Informix database. It wasn’t such a big
   deal at the time. The company had been having financial trouble, but it was still one of the top
   three database vendors. Linux people were mildly happy about the development, and were writing
   self-congratulatory essays in Linux advocacy groups.

   Within weeks, from out of nowhere, Oracle followed suit. Oracle dominated databases. Long
   before the announcement there had been rumors (on the newsgroups) about the company having
   some internal ports to Linux. And, since Oracle is synonymous with Unix servers, it wasn’t such a
   major leap to Linux. But if you followed the newsgroups, we had definitely entered the big time.

   The Oracle announcement had a huge psychological impact, even if its technical impact was zero.

   Like the IBM announcement before it, Oracle’s big move was felt not only by the Linux
   community but by the folks who are commonly referred to as management decision-makers,
   although some people prefer the term “suits.” No longer would they be able to say that they
   couldn’t use Linux because their business depends on databases.

   While the news was gratifying, it didn’t change my life. Tove and I were juggling two adorable
   kids. Most of my nonfamily hours were spent on Linux maintenance, both at home and in the
   office. To keep from favoring any one version of Linux, I used Red Hat at work and SuSE, a
   European version, at home. At one point I felt I wasn’t getting enough exercise, so I decided to
   ride my bicycle the six miles between our apartment and Transmeta’s headquarters. It was on a
   Monday. There were no hills to climb, but a strong wind blew in the wrong direction, making it
   more challenging than I wanted. By the time I left work ten hours later, the wind had shifted so
   that it was still in the wrong direction. I phoned Tove and she picked me up. Needless to say,
   biking-to-work didn’t happen again.

   I add this innocuous detail only to illustrate that the Linux developments weren’t affecting my
   daily life. Most of the activity was taking place at corporations. Technical people, who had long
   known about Linux were being approached by their companies’ leaders who had been seeing
   articles about Linux in the trade press, or hearing about it. They would ask their technical folks
   what the fuss was all about. Then, once they learned the benefits, they would make the decision to
   have their servers run Linux.

   The situation was playing out in information-technology departments throughout the world,
   although most of it took place in the United States. It was rarely a decision based on the non-cost
   of Linux, because the software itself actually represents a small part of such an investment. The
   service and support are much more costly. What tended to sway the suits were the simple
   technical arguments: Linux was stronger than the competition, which consisted of Windows NT
   and the various flavors of Unix. And, importantly, people just hate having to do things the way
   Microsoft or anybody else says they have to do them. You can do things with Linux that you can’t
   do with the competition. The original people who used Linux did so because they could get access
   to sources in ways they couldn’t with commercial software.

   From that perspective, things hadn’t changed much since I had released Version 0.01 from my
   bedroom. Linux was more flexible than other systems out there. You got to be your own boss.

   And, at least in the case of Web servers, it didn’t contain the “bloat”—the many unnecessary
   features—that make up competing operating systems.

   Another thing Linux had in its favor: Despite its growing popularity as an operating system for
   Web servers, it really didn’t occupy a niche. This is important as a way of understanding Linux’s
   success.

   Mainframe computers were a niche. Unix in general was a series of niches—the U.S.

   Department of Defense super-computer niche, the banking niche. The folks selling operating
   systems for mainframes and other big systems made money because they were charging a lot for
   their operating systems. Then Microsoft came along and charged ninety bucks. Microsoft didn’t
   go after the banking niche or any other niche, but suddenly it was everywhere.

   It was like getting invaded by locusts. It’s hard to get rid of that kind of invasion. (Not that
   locusts are bad. I like all animals.)
   It’s a lot better to be everywhere and take over every niche, and that’s what Microsoft did.

   Think of a fluid organism that flows into any place it can find. If one niche is lost, it’s not a big
   deal. The organism surrounds the world, flowing into anything that’s interested.

   The same thing is happening with Linux today. It flows into anything that’s interested. Linux
   doesn’t have just one niche. It’s small and flexible and finds its way into many places. You find it
   in supercomputers, at important places like the U.S. Government’s Fermilabs, or NASA. But
   that’s kind of an outflowing of the server space. Which is an outflowing of the desktop space—
   which is where I got started. And at the same time you’ll find Linux in embedded devices,
   everything from antilock brakes to watches.

   Watch it flow.

   Meanwhile, there’s a great advantage to grass roots. The best and the brightest of the next
   generation are using your product because you are the thing that makes that generation excited. In
   an earlier generation, it wasn’t so much Microsoft and DOS but PCs that got people excited. If you
   were into PCs, you were into DOS. There wasn’t much choice.

   And that was a huge advantage for spreading Microsoft.

   If you look at the brightest young kids around, they’re not all doing Linux, but a lot of them
   are. Sure, one of the reasons that the open source philosophy and Linux both have major
   followings in universities is simple: the antiestablishment sentiment. (The same antiestablishment
   sentiment that made such a huge impact on my dad’s life.) It’s the Big, Evil Microsoft
   Corporation & Wicked, Greedy, Too-Fucking-Rich Bill Gates vs. the We’re-In-It-for-the-Love-
   and-Free-Software-for-Everybody & the Self-Effacing (Seeming) Folk Hero Linus B. Torvalds
   thing. Those kids graduate and take jobs in corporations, where they bring with them their love for
   Linux.

   So folks who’ve ventured into the depths of Microsoft tell me they’ve seen my face on
   dartboards. My only comment: How could anybody possibly miss my nose?

   But I’m getting ahead of myself. IBM’s big announcement in the spring of 1998 was followed
   by similar announcements by every major hardware vendor. By August, Forbes magazine had
   “discovered” our little world by putting a picture of me on the cover with the words, “Peace, Love,
   Software.” As company after company made an (inevitable) commitment to Linux, you no longer
   had to peruse the advocacy newsgroups to read the tea leaves.


.. _PE30:

VI
--

   Linux had captured the planet’s heart like some improbable Olympic gold medalist from an
   unrecognizable third-world nation.

   I was the poster boy. In a press interview, Eric Raymond explained that part of my appeal (or
   whatever) was that I was “less visibly odd than a lot of other hackers.” Okay. That’s one hacker’s
   opinion. Not everybody liked the situation. Richard Stallman campaigned to change the name
   Linux to gnu/ Linux , using the logic that I had relied on the GNU gcc compiler and other free
   software tools and applications to get Linux off the ground. Others were growing increasingly
   irritated by the fact that Linux was finding a home in the corporate realm.

   The press was playing up the dichotomy between the Idealists and the Pragmatists (not my
   terms!) among Linux’s now hundreds of thousands of participants. Under that division, those who
   feared that Linux’s ideals were incompatible with the goals of capitalism were dubbed the
   idealists. I led the pragmatists. But I saw such analysis as journalistic nonsense—a simplistic
   attempt to fit everything neatly into a world of black vs. white. (I have the same problem with the
   way folks view the Linux phenomenon as a Linux vs. Microsoft war, when in fact it’s something
   else entirely, something far more wide-reaching. It’s a more organic way of spreading technology,
   knowledge, wealth, and having fun than the world of commerce has ever known.)
   To me, it was a non-issue. Without commercial interests, how else would Linux flow into new
   markets? How else would it create opportunities for innovations? How else would it be able to
   reach the people who want an alternative—a free alternative—to the bad technology that’s out
   there? What more realistic way for open source to take hold than through the sponsorship of
   corporations? And what better way of getting some of the less interesting work accomplished,
   boring stuff like maintenance and support, than doing it inside companies?

   Open source is about letting everybody play. Why should business, which fuels so much of
   society’s technological advancement, be excluded—provided that they play by the rules? Open
   source can do nothing but improve the technology that companies create, and maybe make them
   less greedy.

   And even if we wanted to stop the forces of commercialism, what could we do? I was not
   willing to suggest we hide, go underground, refuse to talk to commercial people.

   Anticommercial sentiments have always been a part of the open source community, but it
   wasn’t until Linux became a household word among low-tech households that there was a lot at
   stake. The newsgroups were aflame with the paranoid rantings of some of the vocal crazies. None
   of the Linux developers I interacted with were worried at all. But others raged on about how Red
   Hat or some other company would pervert the notions of open source, and about how some people
   were losing their idealism.

   To some degree, it’s probably true that some open source folks stood to get diverted from their
   idealism. But while certain people saw that as a losing proposition, I felt that it simply gave us
   more choice. Technical people who were worried about things like feeding their kids now had an
   option, for example. You can still be as idealistic as you’ve always been or you can choose to be
   part of the new commercial breed. You don’t lose anything by having somebody else come in and
   give you a new option. Before, obviously you couldn’t choose anything but being pure.

   By the way, I’ve never felt that I was in the idealistic camp. Sure I’ve always seen open source
   as a way of making the world a better place. But more than that, I see it as a way of having fun.

   That’s not very idealistic.

   And I have always thought that idealistic people are interesting, but kind of boring and
   sometimes scary.

   In order to hold a very strong opinion, you have to exclude all the other opinions. And that
   means you have to become unreasonable. This is one of the problems I have with American
   politics vis-a-vis European politics. In the American version of the game, you draw the enemy
   lines and the skill rests on one side’s ability to be divisive. European politicians tend to win by
   demonstrating they can foster cooperation.

   So I’m stuck with the conciliatory approach. The only time I was ever nervous about
   commercialism was very early on, when Linux didn’t have much of a name. At that point, if
   commercial people had coopted Linux, there would have been nothing I could do. But that’s
   obviously not the case now. One concern raised in newsgroup flames amid the activity of 1998
   was that commercial people wouldn’t give anything back. To some extent, I had to trust the new
   corporate players as much as Linux developers were trusting me. And they proved themselves to
   be trustworthy. They haven’t held back. So far it’s been very positive.

   As poster boy, holder of the Linux trademark, maintainer of the Linux kernel, I felt a growing
   sense of responsibility. I felt increasingly responsible for the fact that millions of people now
   relied on Linux, and immense pressure to make sure it worked as reliably as possible. It was
   important to me to help corporations understand what open source was all about. There was no
   war, as far as I was concerned, between the greedy corporations and the altruistic hackers.

   No, I wasn’t giving up my ideals by meeting with Intel when they asked me to help them deal
   with the Pentium FO OF lockup bug (“Pentium FO OF bug?” I hear you ask. Yeah, it’s us whacky
   engineers, making up whacky names again. “F0 0F” is the hexadecimal representation of the first
   two bytes of an illegal instruction sequence that made Pentium CPUs lock up. Thus the name). No,
   it wasn’t hypocritical to promote the wonders of open source code while collecting a salary from a
   company that was so closed it wouldn’t even tell people what it was doing. The fact is, I respected,
   and still do, the low-power chip Transmeta was developing, and I saw it as the most interesting
   technology project out there—and the one with the broadest possible implications. And, for the
   record, I was part of an effort to get the company to release at least some of its code.

   I felt pressure to hold my ground within the open source community as someone who could be
   trusted from both a technology standpoint and an ethical standpoint. It was important to me not to
   take sides among competing Linux companies. No, I wasn’t selling out by accepting stock options
   that Red Hat was kind enough to offer me as thanks. But it did make sense to turn down the
   entrepreneur in London who was offering me $10 million just to lend my name to his fledgling
   Linux company as a board member. He couldn’t fathom that I would turn down such a huge
   amount for such little heavy lifting. It was like, “What part of ten million dollars don’t you
   understand?”

   It hadn’t occurred to me that I might face such issues. And Linux’s newfound popularity
   brought with it some tricky times not just for me but for the entire virtual community. In fact, as
   open source code gained the world’s attention in 1998, one of the big debates dealt with the name
   itself. Until then we had referred to the phenomenon of sharing software, under such licenses as
   the GP, as “free software,” and in general referred to the “free software movement.” The term has
   its roots in the Free Software Foundation, which was founded by Richard Stallman in 1985 to
   promote free software projects such as GNU, the free Unix he launched. Suddenly, evangelizers
   like Eric Raymond were finding that journalists were confused. Did the word “free” mean it didn’t
   cost anything? Did it mean “free” as in no restrictions? Did it mean “free” as in freedom? It
   turned out that Brian Behlendorf, who was talking to journalists on behalf of Apache, was
   encountering similar frustrations. After weeks of private email exchanges in which I was not a
   participant but was merely cc:ed (I wasn’t interested in the political side), a consensus was
   reached: We would refer to it as “open” instead of “free.” Hence, the free software movement
   became the open source movement—for people who preferred to see it as a movement, which I
   guess it was. However, the Free Software Foundation is still called the Free Software Foundation,
   and Richard Stallman is still the psychological mastermind behind it.

   As one of the de facto leaders of that movement, I was increasingly in demand. Every time my
   phone rang at Transmeta—and it rang all the time those days—it meant one of two things: Either
   a journalist wanted to interview me, or the organizers of a conference wanted me to speak. In
   order to spread the word about open source and Linux, I felt obligated to do both. Take a shy math
   wiz, put him on the greet-and-grin circuit for a populist cause, and you’ve created a folk hero.

   Forget what Eric Raymond said about me being less visibly odd than a lot of hackers. A big part of
   my appeal (or whatever you want to call it) is that I wasn’t Bill Gates.

   Journalists seemed to love the fact that, while Gates lived in a high-tech lakeside mansion, I
   was tripping over my daughters’ playthings in our new location—a three-bedroom ranch house of
   a duplex with bad plumbing in boring Santa Clara. And that I drove a boring Pontiac. And
   answered my own phone. Who wouldn’t love me?

   As Linux came to be viewed as a real threat to Microsoft—and at the time of Microsoft’s
   antitrust woes, it sure needed at least the appearance of a real threat—the press jumped on every
   development as if it were covering World War III. Somebody leaked the “Halloween Document,”

   an internal Microsoft memo indicating that the company was concerned about Linux. Soon Steve
   Balmer was quoted as saying, “Sure, I’m worried.” The fact was, even if Microsoft stood to
   benefit by playing up the competition its Windows NT was getting from Linux, the reality was
   that the competition would only get more intense.

   I didn’t have to stand on a soap box and say horrible things about Microsoft. What would be the
   point? Events just play themselves out, and they played themselves out in favor of Linux.

   Journalists loved it all. The Softspoken (like a fox) David vs. the Monopolistic, Meanspirited
   Goliath. And, since I’m being completely candid, I actually enjoyed talking about it all to
   reporters. I like to call journalists scum, but I found most of my interviews to be fun. The
   reporters typically were interested in our story—who wouldn’t root for the underdog?

   Once they got their fill of the Amoeba-that-Destroyed-Microsoft plot (note: in the interest of
   full disclosure, this sentence has been spell-checked by a Microsoft product), journalists wanted to
   understand the concept of open source. That message was taking less and less time to get across,
   since people could now see examples of it in action. What seemed to amaze them next was the
   administration of Linux. They couldn’t grasp how the largest collaborative project in the history
   of humanity could possibly be managed so effectively when the average thirty-person company
   typically degenerates into something resembling barnyard chaos.

   Somebody coined the phrase “Benevolent Dictator” to describe how I ran the whole thing. The
   first time I heard the term, all I could think of was some sunny-nation general with a dark
   mustache handing out bananas to his starving masses. I don’t know if I feel comfortable with the
   Benevolent Dictator image. I control the Linux kernel, the foundation of it all, because, so far,
   everybody connected with Linux trusts me more than they trust anyone else. My method for
   managing the project with hundreds of thousands of developers is the same as it was when I coded
   away in my bedroom: I don’t proactively delegate as much as I wait for people to come forward
   and volunteer to take over things. It started when I divested myself of the responsibilities I found
   less interesting, like the user-level code. People stepped forward and offered to take over the
   subsystems. Everything filters up to me through the maintainers of those subsystems.

   I approve or disapprove of their work, but mostly I let things happen naturally. If two people
   are maintaining similar kinds of things, I accept both of them to see which gets used. Sometimes
   they both get used but wind up taking different paths. Once, there was intense competition
   between two people who insisted on sending patches that fought each other’s patches. I refused to
   accept patches from either, until one of the developers lost interest. That’s how King Solomon
   would have handled things if he ran a preschool.

   Benevolent dictator? No, I’m just lazy. I try to manage by not making decisions and letting
   things occur naturally. That’s when you get the best results.

   My approach made headlines.

   But the irony here is that while my Linux management style, such as it is, was earning high
   marks in the press, I was an undeniable failure during my brief stint as a manager at Transmeta.

   At one point, it was decided that I should manage a team of developers. I flopped. As anyone who
   has ventured into my junk heap of an office knows, I’m totally disorganized. I had trouble
   managing the weekly progress meetings, the performance reviews, the action items. After three
   months it became obvious that my management style wasn’t doing anything to help Transmeta,
   despite the praise I was getting from journalists for the way I was running Linux.

   Meanwhile, the press kept pounding away at another issue: fragmentation. Those who have
   followed the rocky, unhappy history of Unix know about the endless bickering between Unix
   vendors. The question came up all the time in 1998: Would history repeat itself in the world of
   Linux? My answer was always that while there undoubtedly is bickering among Linux vendors, it
   can’t lead to the fragmentation that has kept Unix a perennial almost-been. The problem with
   Unix is that competing vendors wasted years implementing similar features, simply because they
   didn’t have access to the same source base. Developing the same features independently not only
   cost Unix years but it also led to bloody infighting. Sure, I would tell the press, Linux vendors
   don’t host regularly scheduled Love-Ins. But there is and will continue to be less fragmentation
   inside the Linux community than in the Unix community, because even Linux vendors who are not
   friendly can see the same source base and can reuse each other’s work. The source code is a
   repository from which anyone can draw.

   The more journalists started grasping such concepts, the more I liked meeting them. (Unlike
   the journalists I remember from my youth in Helsinki, most of them in the United States in the
   1990s were sober.) I particularly enjoyed the opportunity to debate with them.

   But speaking was another matter entirely. I’m not what you’d call a natural performer.

   Remember: I’m the fellow who barely left his bedroom throughout his childhood. I never was
   very good at even writing speeches, so I always waited until the night before an event to prepare.

   Somehow, that didn’t seem to matter. Typically, I would step out to the podium and people
   would rise to their feet and applaud even before I opened my mouth. I don’t want to sound
   unappreciative, but I’ve always found that to be an embarrassing situation. Anything you say
   sounds wrong, even my standard, “Thanks, Now Please Sit Down.” I’m open to suggestions.

   But not all the calls were from journalists or conference organizers. One night I was sitting at
   home with Tove. We were reading to the girls. The phone rang.

   I answered: “Torvalds.”

   “Uh. Is this the Linux guy?”

   “Yes.”

   Two seconds of silence. Click.

   Another night a fellow from Las Vegas phoned me at home, trying to get me to sign on with
   some Linux T-shirt business.

   The obvious solution would have been to get an unlisted phone number. I didn’t bother to do
   that when we first moved to California because it was more expensive than having a listed
   number. I’ve since learned the price you pay for being so frugal, and am now unlisted. Once,
   before I got de-listed, David misplaced my home number and phoned directory assistance. He
   asked for my number, and the operator who provided it said with great astonishment, “He’s listed?

   With all his millions?”

   But no, there weren’t millions. Millions of Linux users, sure. Not millions of dollars for Linus.

   And that was perfectly fine.


.. _PE31:

VII
---

   Most days I wake up thinking I’m the luckiest bastard alive. I don’t remember if Wednesday,
   August 11, 1999 was one of those days, but it should have been.

   It was the second day of the Linux World convention and trade show which had been taking
   place at the San Jose Convention Center. Dirk Hohndel, who is CEO of SuSE and traveled from
   Germany for the trade show, had spent the night on the guest bed in our family room. I’ve known
   him for years. He’s one of the old XFree86 people, and is on the graphics side of Linux. He’s also
   Daniela’s godfather. I woke up, made cappuccino for Tove and Dirk, read everything in the San
   Jose Mercury News except the sports pages and the classified ads—like I always do—and then we
   piled into the Toyota Rav4 for the ten-mile trip to downtown San Jose.

   I remember shaking a lot of hands.

   This was the day that Red Hat would be going public. The company had years earlier given me
   stock options, and had only recently sent me some paperwork that I never bothered to look at. It
   sat somewhere in a stack of papers near my computer. I remember I really wanted Red Hat to do
   well. It wasn’t so much a matter of being excited about the options—I didn’t quite realize what
   they meant. I was extremely jazzed for another reason. In many respects, the IPO’s success would
   be a validation of Linux. So I was a bit nervous that morning, but I wasn’t the only one. The
   market had been doing poorly for weeks, and people wondered whether or not Red Hat would even
   pull off its IPO.

   The “liquidity event” did, in fact, happen. We got word on the conference floor that Red Hat’s
   initial public offering came in at $15. Or was it $18? I don’t remember. The important thing was
   that it ended the first day of trading at $35. Nothing record-breaking, but it was okay.

   I remember driving home with Tove and Dirk in the car, first feeling relieved. Then, when I
   thought about the money, growing excited. Only when we were stuck in Northbound traffic on
   Highway 101 did it strike me that in one day I had gone from basically zero to half a million
   dollars. My heart started beating faster. It was elation tempered with disbelief.

   I was clueless about stock and decided I needed to find out what to do next. So I phoned Larry
   Augustin, VA Linux’s CEO. I told him he was the only person I knew who had a clue about how
   stock works. My exact words: “Do you have like a stockbroker or somebody that you trust because
   I don’t want to go on eBay?”

   Red Hat had given me options—not an outright grant of stock. I didn’t know what to do about
   exercising them. I knew there might be a lockup period but I didn’t know if it applied to me, and I
   hadn’t thought about the tax consequences. Larry, who is good at this sort of thing and who knows
   a lot of people, got me in touch with this guy at Lehman Brothers, who shouldn’t have been
   handling me at all because I wasn’t a big customer. He promised to find out what I should do.

   Meanwhile, two days after the IPO, I got an email from someone in Red Hat’s Human Resources
   Department, or their lawyer, in which they mentioned something about the stock having split
   before the IPO. I knew nothing about it. So I tracked down the manila envelope containing all the
   stock option paperwork I had never bothered to read, and there it was, in plain (for legalese)
   English: My options had magically doubled.

   My half-million dollars was actually a million dollars!

   Regardless of the image that has caught on in the press, of me as a selfless geek-for-the-masses
   living under a vow of poverty, I was, frankly, delirious.

   There, I said it.

   I sat down and read all the Red Hat papers. Yes, I was subject to a 180-day lockup.

   Do you have any idea how long 180 days can be when you’re a first-time millionaire on paper?

   Now I had a new sport (or a sport, period): keeping track of Red Hat’s stock price, which
   continued escalating during the following six months. It went up gradually and jumped a few
   times and just grew and grew. At one point, Red Hat even split once more. At best, I was worth $5
   million from the options.

   Red Hat started relatively low and inched skyward as Wall Street, in the throes of its love affair
   with anything even remotely related to the Internet, “discovered” Linux. We were the Flavor of
   the Month during the cold-weather months at the end of 1999. Investment pundits on television
   and in the general press couldn’t get enough of this crazy little operating system that was
   promising to upend Microsoft. My phone rang constantly. It all reached a stunning climax with
   the VA Linux IPO on December 9th. That was an endorsement beyond anyone’s expectation.

   Larry Augustin and I went up to San Francisco to be on site at the offices of First Boston Credit
   Suisse for the IPO. I was wearing what I always wear: a freebie T-shirt and sandals. We brought
   our wives and kids. It was a crazy scene with the toddlers running around among the buttoned-
   down investment bankers.

   It all happened so suddenly. Figures streamed across monitors indicating that VA Linux, on the
   first day of trading, was selling in the $300-a-share range. This was unheard of. Even if we hadn’t
   seen the figures, we would have known it was a record because of the way the investment bankers
   were hypnotized by CNN and the Bloomberg financial channel. For his part, Larry was his usual
   cool self. I don’t think he batted an eyelash during the whole thing. I wouldn’t know for sure,
   because I was busy chasing after my daughters.

   Even the dwellers of Madagascar’s rainforests probably were aware of how rich it all made
   Larry. He had driven up to San Francisco without much of a financial net worth, and drove back to
   Silicon Valley worth something on the order of $1.6 billion. And, as the press continually pointed
   out, he was still in his twenties.

   For my part, I had been given a stock grant and options for shares in VA Linux. As with Red
   Hat, I couldn’t sell shares for six months. But unlike Red Hat, which climbed steadily, VA Linux
   had nowhere to go but down. After its record-setting opening day, the stock dropped steadily for a
   year, reaching a low point of 6.62. Partly, the stock was a victim of the market correction that hurt
   most technology stocks that April. But also, Linux’s stint as Flavor of the Month had ended with
   the spring thaw. Because of the VA Linux lockup period, I couldn’t take advantage of the hyper
   market while it lasted. It was psychologically much harder to follow the company than it had been
   to follow Red Hat, to know that every night when I crawled into bed, I would wake up with a
   lessened financial net worth.

   But I still felt like the luckiest bastard alive.

   Linus drives up to my Sausalito office one evening in January. After snickering about my use of a
   Macintosh and a non-Linux operating system, he sits down to read the first draft of a lengthy
   preface I have written, which is in the first person, from his perspective. I sit maybe two inches
   away. The only noise Linus makes is when he trips over a line about how he never expected to find
   himself the only global superstar Finland has produced other than Jean Sibelius and Nikki the
   Reindeer. After maybe ten minutes, he finishes the preface and his only comment is: “Boy, you
   write long sentences.” We spend a couple of hours making the sentences shorter and changing
   some of the language to words that he would actually use, and learning how to collaborate at
   work, having already proven that we are champs at goofing off collaboratively. We eventually
   ditched that preface.

   Then Linus attempts, unsuccessfully, to improve the resolution on my flat screen. It was last
   year’s state-of-the-art computer screen, and I thought of it as something of a status symbol. “How
   can you read from this thing?’” he asks. He is unsuccessful at improving the resolution quality to
   meet his standards. Then he takes out a piece of paper and starts drawing diagrams and
   explaining how monitors work. At some point I say, “Hey, let’s grab some sushi.”

   “This money thing is driving me crazy,” he says.’ Just the waiting for the lock-up period to end.

   It’s like having lots of money but not having lots of money. It’s on my mind constantly.’”

   I order saki. He orders fruit-juice because he is driving.

   “Up until now, we almost never had more than $5,000 in our checking account. Except for some
   stocks and stuff we have for savings that we can’t touch, that was all the money we had to spend.

   So now I have all this money on paper and—”

   “Like how much money? A couple of million?”

   “How about $20 million? That’s what the stock from the VA Linux IPO is worth, as long as it
   doesn’t drop. But I don’t have access to the money until the lock-up period in six months. No, now
   it’s five months.”

   “I don’t see the problem here. You have to wait five months before buying a big house? I don’t
   mean to be unsympathetic but…”

   “Hey, well it seems at first that it’s enough money that we should be able to buy any house we
   want. But we need a house with five bedrooms and we want enough land around the house so we
   can hear animals and I’ve been playing pool everyday at work so we’ll need a room that’s big
   enough to hold a pool table. And we want a separate unit for when Tove’s parents visit, or so we
   can have my sister’s friends come from Finland and stay a few months and help us with the kids.

   It’s funny, we had Patricia when we moved from Finland to the states. We had Daniela when we
   moved from our apartment to the duplex, and…”

   “So you guys are working on having another kid?”

   “Well, we’re letting things happen naturally.”

   “Where I come from, you pronounce that, ‘We’re trying to have another kid,’ dude.”

   “Okay. So we’ll need more space and we’ve gone to a couple of Open Houses and the houses
   available are unbelievably expensive. I mean you get $20 million and its like, wow, I can afford
   any house in the world. But we looked at a house for $7.2 million in Woodside that had no land
   and was really trashy. The best house we saw was for $5 million. But if you have $20 million,
   you’ve gotta figure that half of that goes to taxes. Then you have $70 million to work with, but the
   taxes on a house like that could be like $60,000 a year, so you’ve got to set money aside for that.

   And I don’t know. This is going to be the only time in my life when I’ll get so much money and I
   don’t want to overextend myself and not be able to afford to live in the house. And we don’t want
   to have a mortgage hanging over our heads.”

   “I’m not feeling sorry for you. First of all, you’ll probably do okay if Transmeta does okay in
   an IPO.”

   “Yeah. But I’m only a junior engineer, so I’m not getting that much stock. And my salary isn’t
   that high.”

   “Linus, you could go to any venture capitalist in this town and get anything you wanted…”

   “I guess you’re right.”


.. _PE32:

VIII
----

   This is the place where I slip in my golden rules. Number One is: “Do unto others as you would
   want them to do unto you.” If you follow that rule, you’ll always know how to behave in any
   situation. Number Two is: “Be proud of what you do.” Number Three: “And have fun doing it.”

   Of course, it’s not always easy to be proud and have fun. A month before the VA Linux IPO, I
   accomplished neither when I delivered a keynote speech at the 1999 Comdex Show in Las Vegas.

   Comdex, as most everyone knows, is the biggest, baddest trade show known to humanity. For
   most of a week, the sleepy town of Las Vegas, Nevada, becomes a magnet for every conceivable
   high-tech product that could possibly be peddled and the masses of people who would buy and sell
   them. It’s the only time of the year when you can roll down the window of a Las Vegas cab, lean
   out, and ask a random hooker strutting past: “What time is the keynote?”—and she’ll know the
   answer.

   It was a big deal that the trade show organizers asked the benevolent dictator of Planet Linux to
   give a Comdex keynote speech. It was the computer industry’s way of acknowledging that Linux
   was a force with which to be reckoned.

   Bill Gates delivered the keynote on Sunday, the first night of the show. He had attracted a
   standing-room crowd in the Venetian Hotel ballroom, which is about the size of seven average
   IKEA stores. Conference-goers who were eager to hear what he had to say about the antitrust trial
   —which was happening at the time—or who just wanted to be able to tell their grandchildren they
   had seen the world’s richest man in the flesh, lined up hours beforehand in a snake pattern in the
   Hotel conference center’s massive basement level. Gates’s speech began with a lawyer joke, then
   included well-choreographed demonstrations of Microsoft Web technology and highly polished
   video segments, one of them with Gates dressed like and imitating Austin Powers—that sent the
   audience into fits of laughter.

   I wasn’t there. I was helping Tove shop for a bathing suit.

   But the following night, I delivered my speech in the same room.

   I would have rather gone shopping. Well, not really…
   It’s not that I wasn’t prepared. Ordinarily I write my speech the day before, but this time I
   actually got a head start. It was a Monday night speech and on Saturday I had written it and set up
   the computer to project its slides. Everything looked really good. I had even put my speech on
   three different floppies, just to protect myself in case one of them might turn out bad. The one
   thing I hate more than speaking is speaking when something goes wrong. I even put my speech on
   the Internet, just in case all the floppies were bad.

   There was a Comdex-inspired traffic jam on the Strip so we arrived at the Venetian Hotel only
   a half-hour before I was due to begin. I was with Tove and the girls and some folks from the show.

   When we finally got into the building, we had problems getting access to the backstage area
   because one of the organizers had misplaced the security badges. I mean, everything went wrong.

   So finally we got inside. I would have been nervous if I were about to speak before forty
   people, let alone the biggest audience of my life. Then it happened.

   I discovered that the computer itself, which had been so painstakingly set up two days earlier,
   was nowhere to be found. It was insane. Someone mentioned that people had started lining up for
   the speech downstairs more than four hours in advance, and that the waiting area was packed to
   capacity. Meanwhile, we were running around like hens without heads, searching backstage for the
   machine.

   It was a normal desktop system with Star Office, one of the Linux office suites, installed. And I
   was supposed to just put in my floppy and go. Everything had been set up so that there wouldn’t
   even be any cables to attach. But the computer had vanished. Apparently the machine had
   somehow gotten mislabeled or something, so it was shipped back. Happily, I had my laptop with
   me and I had the actual slide file of my speech on the laptop and I did have Star Office installed.

   Because this was my laptop, I didn’t have all the right fonts. That meant that the last line on all
   my slides was missing. When I realized this, I thought: Who cares? I’m going to get through this
   alive. Then we had to hook up all the cables. I mean, literally, they started letting people in before
   everything was set up. I was up there, still trying to get it to work, as a flood of humanity washed
   into the humongous auditorium, filling every available seat and then filling the standing area
   along the sides. Luckily, they gave me the standing-ovation before I opened my mouth.

   I started out with some lame reference to the lawyer joke that Bill Gates used to open his
   speech. I gave a one-sentence hint about what then-secretive Transmeta was developing. It had
   been wildly rumored in the press that I would use the Comdex speech as an occasion to (finally)
   announce Transmeta’s chip. But we were just not ready. The main part of my speech simply
   involved ticking off the benefits of open source computing. I wasn’t in a mood to crack as many
   jokes as I ordinarily do. At one point, Daniela—who was sitting with Tove and Patricia in the first
   row—began a crying spell that was probably audible throughout Las Vegas’s casinos and strip
   clubs.

   That was not a speech that will go down in history among the great orations. Later, someone
   tried to cheer me up by informing me that Bill Gates, too, had been visibly nervous on the same
   stage the night before. However, his onstage apparatus had worked without a hitch. The trouble
   was, he had the U.S. Department of Justice breathing down his neck. I guess I came out ahead.

   It seemed like a strategy out of Journalism 101: Find the person who had been waiting the longest
   to hear Linus’s keynote, and hang out with him (undoubtedly, him) in line. What better way to
   gather insight into the dweebie hordes who follow Linus like he’s some sort of vendorware-clad
   God.

   At 5 P.M. I’m on an escalator descending into Geek Woodstock.

   At the head of the vast, snaking line is an intense computer science student from Walla Walla
   College who eagerly agrees to let me join him. He has been waiting, so far, two and a half hours to
   see Linus, and he will be waiting another two and a half hours before being let into the
   auditorium. His classmates, who are behind him in line, arrived in the queue maybe half an hour
   after he did. They drove down from Washington State with one of their professors and are sleeping
   in the gymnasium of a local high school. They all seem to have started their own Web design
   business. They seem to have conveniently divided up the universe of grownups into two groups—
   hackers and suits—and are constantly pointing out members of the latter category in the growing
   line, saying things like, “Man, look at all the suits here,” the way their Delta Tau Chi
   counterparts might survey a beach during spring break and observe, “Man, look at all the foxes
   here.” But like their Delta Tau Chi counterparts, they are doing all the usual horseplay—slapping
   each other high-fives, trading insults, although the insults all relate to motherboards or gigabytes.

   And then they talk about Linus. His name comes across capitalized, as in “LINUS wouldn’t
   work at a company that wasn’t going to be open source, He just wouldn’t.” They have been slavish
   scrutinizers of slashdot and other Web sites where rumors of Transmeta’s hushed goings-on
   circulate like the lurid details of a Hollywood starlets love life. This mania and the
   speculation/fascination isn’t happening only among the ardent groupies who arrived here first.

   I visit the men’s room and take my place at the only empty urinal, interrupting a conversation
   in progress.

   “This speech is going to be way boring compared to the Gates keynote,” says the fellow to my
   left.

   “What do you expect?” replies the other guy. “Linus is a hacker, not a suit. I mean, give him a
   break.”

   When we finally get into the auditorium, somehow we are not up front but toward the back of
   the middle. My line-mate from Walla Walla forgets, for a moment, about the excitement of seeing
   his hero live, and goes into a rage about not being in the first row, where he deserves to be. Soon,
   he is pointing out the suits in the audience. Even though we’re maybe seventy-five yards from the
   front, its possible to catch a glimpse of Linus on the darkened stage, seated at a computer. He
   quickly types into the computer while being surrounded by a few officials. What could be
   happening up there? Some sort of last-minute software demonstration?

   Eventually, Linus and the others leave the stage. Somehow Linus International Executive
   Director Maddog (Jon Hall) is introduced. My companion from Walla Walla gets visibly excited.

   “Check out the beard,” he says. Then, Maddog announces how pleased he is to introduce a man
   who is like a son to him. Linus reemerges and gets a big hairy hug from Maddog. Even from back
   in the cheap seats, I could tell he was nervous.

   “I wanted to start with a lawyer joke, but that was taken,” he says, a reference to antitrust-suit-
   plagued Bill Gates’s well-received opening the previous night: “Anybody heard any good lawyer
   jokes?”

   He proceeds to give a one-sentence hint at Transmeta’s secretive operation. Then the rest of his
   speech consists of rattling off the sentences that are flashed on slides high above his head,
   statements about the growing importance of open source. Nothing surprising. Nothing new.

   It is delivered in a tired-but-cheerful monotone. At one point, one of his daughters cries.

   In mid-sentence he says, “That’s my kid.” You could look up at the monitor and see the stage
   lighting reflecting off the beads of sweat on his forehead.

   Afterward, audience members line up for questions, He quickly declines to say which of the
   Linux word processing software he prefers, When someone asks him how many stuffed penguins he
   has at home, he answers: “Quite a few.” An audience member asks how he likes living in
   California, to which he responds by rhapsodizing about the weather, “It’s November and I’m still
   wearing shorts, In Helsinki I’d have lost my crown jewels by now.” A fan walks up to the
   microphone for audience questions and announces, simply, “Linus, you’re my hero.” To which
   Linus responds, as if he has heard the same statement a million times and answered it a million
   times: “Thanks,”

   After the questions are over, hundreds of people flood into the area below the podium, where
   Linus has now moved and is shaking as many hands as he possibly can.

.. _PE33:

IX: Is the Linux Revolution Over?
---------------------------------

.. _PE34:

By Scott Berinato, PC Week
--------------------------

   “Thank you for calling. The Revolution is over. If you would like further information
   on Linux, please press one…”

   It appears Linus Torvalds has a handler, which must mean this whole Linux thing is mainstream, so forget about the
   revolution and get back to work on your Windows desktops.

   Once was a time when reporters could call the inventor of the Linux operating system at his office at cloak-and-dagger
   marketed Transmeta Corp., punch in his extension and receive a familiar declarative “Torvalds” from the man himself on the
   other end. He was patient and he answered your questions. He told you when he had no time. Sometimes he told you when
   you asked useless neophyte programmer questions. But he answered the phone.

   Today, when you call Transmeta and punch in his extension, a pleasant female voice greets you. “Thank you for calling
   Linus Torvalds, This voice mail does not accept messages, To contact him, please send a fax to…”

   What? And it starts to sink in: He’s not getting back to you. He’s had enough, He’s a celebrity and getting a quick
   interview with him now will be like getting a quick interview with that other big computer industry celebrity, The woman
   rattles off a fax number and you’re already thinking of hitting the old 0-# combo for a receptionist…
   “Our receptionists do not take messages for him, nor do they keep his calendar.” D’oh. She’s pleasant. The worst. “But
   they will gladly get your fax to him.” Uh-huh. And Bill will gladly break up Microsoft to appease David Boies.

   Okay, so the Linux revolution isn’t over, but like any revolution, the rag-tag riff-raff is being superseded by mainstream
   sympathizers. Suburban new wave supplanted urban punk rock. Wealthy landowners in the colonies rose up after the poor
   taxed man. (The wealthy landowners, by the way, later tried to foist on frontiersmen a whiskey tax not so different from the
   tea tax imposed on them a few years earlier.)
   In fact, it’s probably high time Linus stepped back. It was inevitable, really, given the number of press calls and the
   maddening range of topics he was fielding.

   Take his press Q+A session at the Linux World Expo in San Jose earlier this month. Torvalds, who agreed to the session
   because he simply didn’t have time to field the innumerable individual requests, first had to rattle off what were becoming
   familiar answers to familiar questions. Can open source work in the business world? Are you trying to rule software the way
   Bill Gates rules software? What do you think of Microsoft? What is open source? What is Linux? Why a penguin?

   Torvalds, by this point, was clearly entering the canned realm of sports figures with his answers. Think Tim Robbins in
   Bull Durham: “I just need to go out there and give 110 percent to try and help the team…”

   And beyond the redundant, the questions from journalists outside the tech world veered wildly. At one point during his
   press conference, the Finnish phenom was asked how he was going to capture the small and medium business market.

   (Typically Torvaldian retort: “I personally haven’t tried to capture anyone.”) Two questions later, an eager, I’ve-got-a-
   unique-angle-to-this-open-source-mess reporter asked Torvalds what he thought of corporations patenting agricultural
   genomes. (Typically quotable Torvaldian response: “I’m of two minds when it comes to patents. There are good bad ones
   and really bad ones.”)
   Programmers, heed this: If someone starts asking you about agricultural genomes, it’s likely time to get a handler.

   So maybe its a good thing that Linus doesn’t answer his phone anymore. Still, we’ll miss the candor and self-deprecation
   of Torvalds, which came across so genuinely to reporters used to burning their throats on the dry, pressurized-airplane-air
   marketing being blown by most companies. And we hope, if faxes do in fact reach his desk, and he does in fact respond to
   questions, he will keep the Torvaldian tone.

   Because if the faux-pleasant PR voices take over, this Linux thing won’t be nearly so much fun.

   Okay, I guess I owe Mr. Berinato an explanation, but not an apology.

   Anyone reading this column would assume the mounting pressures of my role as chief nerd had
   turned me into an asshole. But that’s wrong. I always was an asshole.

   I’ll start at the beginning. I think voice mail is evil. It is the perfect example of a bad
   technology. In fact it is the worst technology that exists, and I hate it with a passion. So at
   Transmeta we started out with a per-user voice mail system that allowed each employee to store
   twenty minutes worth of messages. After that, callers got the message saying the mailbox was
   full, please contact the receptionist. Mine was always full.

   I think it was the journalists who caused the backlash. They would badger the Transmeta
   receptionists because my voice mailbox was full. After the first hundred times, the receptionists
   started getting irritated. They knew I wasn’t interested and they didn’t want to be the ones telling
   people to fuck off.

   So I started deleting messages without listening to them, just so the front desk people wouldn’t
   get annoyed. Most of the time I would never listen to my messages, anyway. For one thing, people
   usually mumble their phone numbers into the recording, and I would have to listen fifteen times
   just to figure out what they’ve said. Also, I refuse to call people back if I have no reason to call
   them back. People would get a warm and fuzzy feeling that they had left a message. Until they
   realized I wouldn’t return their call.

   That’s when they would call the receptionist. The receptionist wouldn’t know what to say, so I
   would tell him or her to tell the caller to fax me. Faxes are as easy to ignore as voice mail,
   although at least with a fax you could make out the number, should you want to. I never wanted to.

   At first, the receptionist politely told callers to please send me a fax. Eventually, people caught
   on to the fact that I didn’t read the fax, and they would call back a week later and complain that
   they had already faxed me. So the receptionist again got caught in the middle. It wasn’t her job to
   handle my calls.

   Yes, Mr. Berinato’s generous description of me in the good old days before Linux took off
   notwithstanding, I truly always have been an asshole. This isn’t anything new.

   The fax solution didn’t last that long. In the end, they set up a special phone-messaging account
   for me that didn’t have voice mail. By this time Transmeta had hired a PR person who volunteered
   to handle my requests. They’re trained to do this, I’m told. They still tell me I should always call
   journalists back because, even if I don’t want to talk to them, reporters get a warm and fuzzy
   feeling that I returned their call. My reaction to that is: I don’t care about their warm and fuzzies.

   Okay. I do answer my own phone to callers who happen to call while I’m sitting at my desk.

   But that shouldn’t be interpreted as an attempt to appear accessible. And it certainly isn’t a
   political statement. The point about open source has never been that I’m more accessible than
   anybody else. It’s never been that I’m more accessible than anybody else. It’s never been that I’m
   more open to other people’s suggestions. That’s never been the issue. The issue is that even if I’m
   the blackest demon from Hell, even if I’m outright evil, people can choose to ignore me because
   they can just do the stuff themselves. It’s not about me being open, it’s about them having the
   power to ignore me. That’s important.

   There’s no “official” version of Linux. There’s my version and there’s everybody else’s
   version. The fact is, most people trust my version and rely on it as the de facto official version
   because they’ve seen me work for nine years on it. I was the original guy and people generally
   agree that I’ve been doing a good job. But let’s say I shave my head to display a 666 and say,
   “Bow before me because if you don’t I will smite thee!” They would just laugh in my face and
   say, “OK, we’ll just take this little kernel and do what we think is right.”

   People trust me. But the only reason they do is that so far I’ve been trustworthy.

   That doesn’t mean I’m willing to listen to voice mail—or to anyone who happens to reach me
   on the phone. I’ve never felt that people should see me as this good guy who likes to respond to
   anyone who calls or sends me email. And while we’re on the subject, it’s strange to have these
   stories making me out to be this self-effacing monk or saint who just doesn’t care about money at
   all. I have tried over the years to dispel that myth, but my efforts never make it into print. I don’t
   want to be the person the press wants me to be.

   The fact is, I’ve always hated that self-effacing monk image because it’s so uncool. It’s a
   boring image. And it’s untrue.


.. _PE35:

X
-

   Crawling out of my bedroom and into the spotlight, I quickly had to learn the sort of tricks of
   living that other people probably picked up en route to kindergarten. For example, I never could
   have anticipated how ridiculously seriously people would take me—or my every move. Here are
   two situations, both of them variations on a theme.

   Back at the university, I had a root account on my machine. Every account has a name
   associated with it. The name is used for informational purposes. So I named the root account on
   my machine Linus “God” Torvalds. I was God of that machine, which sat in my office at the
   university. Is that such a big deal?

   Now, when somebody “fingers” a machine under Linux, or Unix, they are checking to see
   who’s logged on to that machine. Due to the advent of firewalls, the act of fingering doesn’t take
   place much anymore. But years ago people would finger another’s machine to see if the user had
   logged on or had read his email. It was also a way of checking out someone’s “plan,” personal
   information the person had posted on their machine, sort of a predecessor to web pages. My plan
   always included the latest kernel version. So one way for people to figure out the version of the
   day was to finger my machine. Some people had even automated the process. They would finger
   me once an hour as a way of keeping up on version changes. Regardless, whenever someone
   fingered me, they would see that my root account was named Linus God Torvalds. This wasn’t a
   problem early on. Then I started getting emails from people who told me that was blasphemy. So I
   eventually changed it. These are people who take themselves too seriously, and that drives me
   crazy.

   Then, of course, there was the incident in North Carolina. Guds! That was bad. A recently
   published book about Red Hat made it sound like an international incident of potentially
   catastrophic proportions. It wasn’t really much.

   I had been invited to speak at a meeting of Linux users hosted by Red Hat, which is based in
   Durham. The auditorium was packed. The moment I walked out onto the stage, everybody rose to
   their feet and started cheering. The first words out of my mouth were the first thing that came to
   mind:

   “I am your God.”

   It was meant to be a joke, for citing out loud!

   It wasn’t, “I really am convinced that I am your God and you should never forget it.” It was:
   “Okay, okay, okay. I know I’m your God. Now please just sit down and hold your appreciation
   until after you actually hear what I have to say, although I genuinely do appreciate your
   preemptive appreciation.”

   I can’t believe I’m willingly reliving this.

   After my four-word greeting, everyone was silent for a moment. Hours later, those four words
   had become the topic of newsgroup postings. I admit it: It was tasteless, but unintentionally
   tasteless. Actually, it was probably my way of dealing with the embarrassment of having people
   stand up and applaud you just because you step out to the speaker’s podium.

   People take me too seriously. They take a lot of things too seriously. And one lesson I’ve
   learned from my years as Linux’s hood ornament is that there’s something worse: Some folks
   can’t be content to just take things too seriously on their own. They’re not happy unless they
   convince others to go along with their obsession. This has become one of my major pet peeves in
   life.

   Have you ever stopped to think why dogs love humans so much? No, it’s not because their
   owners take them to the groomers every six weeks and occasionally pick up what they leave
   behind on the sidewalk. It’s because dogs love getting told what to do. It gives them a reason to
   live. (This is particularly important since so many of them are out of work—spayed or neutered,
   which means they’ve been laid off from their job as reproducers of new generations of canines.

   Also, with a few exceptions, there isn’t much call for their wired-in jobs, like sniffing out
   rodents.) As a human, you’re the leader of the pack and you’re telling the dogs how they should
   behave. Following your orders is their passion. And they like it.

   Unfortunately, that’s how humans are built, too. People want to have somebody tell them what
   to do. It’s in our kernel. Any social animal has to be that way.

   It doesn’t mean you’re subservient. It just means that you are likely to go along with others
   when they tell you what to do.

   Then there are people with individual ideas, folks who have convictions in certain areas to the
   degree that they say, “No, I won’t go along.” And these people become leaders. It’s easy to
   become a leader. (It has to be. I became one, right?) Then, other people who don’t have
   convictions in those areas are more than happy to let these leaders make their decisions for them
   and tell them what to do.

   It’s absolutely the right of any human being to do what they’re told by someone they choose as
   a leader. I’m not arguing against that, although I find that part depressing. However, what I find to
   be unacceptable is when people, either leaders or followers, then try to impose their own world
   views on others. That’s not just depressing—it’s scary. It’s depressing that people will follow just
   about anyone, including me. And it’s scary that people will then want to impose their
   followingness—if that’s a word—on others, including me.

   Forget the clean-cut robot/proselytizers who always seem to bang on your door whenever
   you’re on the computer, concentrating on a tricky technical problem, or whenever the kids are
   finally napping and you’re just starting to get amorous. A more relevant example is close at hand
   in the open source community: the zealots who believe that every innovation should be licensed
   under the GPL (“GPL’d” in hacker parlance.) Richard Stallman wants to make everything open
   source. To him, it’s a political struggle, and he wants to use the GPL as a way to drive open
   source. He sees no other alternative. The truth is, I didn’t open source Linux for such lofty
   reasons. I wanted feedback. And it’s how things were done in the early days of computers, when
   most of the work was done at universities or defense establishments and they ended up being very
   open. You gave your source away to another university when people asked for it. What Richard
   did, after getting cut off from projects he loved, was to be the first person to consciously open
   source.

   Yes, there are enormous benefits to be gained by opening up one’s technology and making it
   available under the same terms as Linux and a host of other innovations. To get a glimpse of those
   benefits, all you have to do is just look at the comparatively low standards of quality of any closed
   software project. The GPL and open source model allows for the creation of the best technology.

   It’s that simple. It also prevents the hoarding of technology and ensures that anyone with an
   interest in a project or technology won’t be excluded from its development.

   This is not a minor point. Stallman, who deserves a monument in his honor for giving birth to
   the GPL, was inspired to jump-start the free software phenomenon mainly because he was shut out
   of a succession of interesting development projects when they moved from the open, academic
   world of the Massachusetts Institute of Technology to the proprietary corporate environment. The
   most notable of these was the LISP machine. LISP started out as part of the artificial intelligence
   community. As with many things, somebody thought it was so good that they should form a
   startup to make it a commercial success and make money on it. This happens all the time at
   universities. But Richard wasn’t part of the commercial crowd, so when LISP became a
   commercial project under a company named Symbolics in 1981, suddenly he was cut off. To add
   insult to injury, Symbolics hired away many of his cohorts from the AI lab.

   The same thing happened to him a few other times. The way I understand it, his motivation for
   promoting open source was not so much anticommercial as it was antiexclusion. For him, open
   source is about not getting left out. It’s about being able to continue working on a project
   regardless of who makes it commercial.

   The GPL is wonderful in its gift of letting anyone play. Just think about what a major advance
   for humanity that is! But does that mean that every innovation should be GPL’d?

   No way! This is the abortion issue of technology. It should be up to the individual innovator to
   decide for herself or himself whether to GPL the project or to use a more conventional approach to
   copyright. The thing that drives me crazy about Richard is that he sees everything in black and
   white. And that creates unnecessary political divisions. He never understands the viewpoint of
   anybody else. If he were into religion, you would call him a religious fanatic.

   In fact, the most annoying thing—second only to religious enthusiasts knocking on my door
   saying what I should believe in—is people knocking on my door (or bombarding me with email)
   saying how I should license my software. This should not be a political issue. People should be
   able to make up their own minds. It’s one thing to suggest to someone that they consider GPLing
   their software, and then leaving it at that. It’s another thing to argue the point. It’s really bad when
   people complain about the fact that I work for a commercial company that doesn’t GPL
   everything it does. I tell them it’s not their business.

   The thing I find hugely irritating about Richard is not that he believes that Linux—because its
   kernel relied on applications from the gnu software project—should more rightly be called
   “gnu/ Linux .” It is not that he openly resents me for being a poster boy for open source even
   though he was sharing code while I was still sleeping in a laundry basket. No, the reason I find
   him so pesty is that he continually complains about other people not using the GPL.

   I admire Richard from afar for a bunch of reasons. And I guess I tend to respect people, like
   Richard, who have very strong moral opinions. But why can’t they keep these opinions to
   themselves? The thing I dislike the most is when people tell me what I should or should not do. I
   absolutely despise people who think they have any say over my personal decisions. (Except,
   perhaps, my wife.)
   Over the course of the development of Linux, pundits such as Eric Raymond have suggested
   that the operating system’s success and the longevity of open source development have partly
   hinged on my pragmatic approach and my ability to keep from taking sides in disputes. While Eric
   is arguably the best articulator of the open-source phenomenon (and while I strongly, strongly
   disagree with his pro-gun sentiments), I believe he’s a bit off the mark on his perception of me.

   It’s not that I keep from taking sides. It’s just that I so strongly resent anyone who tries to impose
   his or her morals on others. You can replace the word, “morals” with “religion,” “computing
   preferences,” whatever.

   Just as imposing morals is wrong, the next step—institutionalizing morals—is doubly wrong.

   I’m a big believer in individual choice, which means that I think I should make my own decisions
   when it comes to moral issues.

   I want to decide for myself. I’m very much against unnecessary rules imposed by society. I’m a
   big believer that you should be able to do whatever you want in the privacy of your own home as
   long as you don’t hurt anybody else. Any law saying otherwise is a very, very broken law. And
   there are laws that say otherwise. I find some scary rules, especially some that are imposed on
   schools and children. Imagine even thinking of imposing rules about teaching evolution, and
   taking that into the wrong direction. That I find scary. This is social conscience rearing its ugly
   head in places it really has nothing at all to do with.

   At the same time, my personal belief is that what is more important than me and my individual
   moral decisions is, not even the human race, but evolution. To that extent, I want my individual
   choices to take social issues into account. But that’s probably built in. I think it is built into
   human biology—evolution—that we do take social things into account. Otherwise we’d have been
   gone long ago.

   The only other thing worth ranting about: people who are too preachy. There’s just no reason
   for folks to evangelize, and to be so self-righteous about it.

   And I’m sounding just like one of them.

   But it’s an easy trap when people start taking you far too seriously.


.. _PE36:

XI
--

   Americans make a big fuss over March 17th (St. Patrick’s Day), May 5th (Cinco de Mayo), and
   October 12th (Columbus Day), but hardly any attention is paid to December 6th, which as any
   Finn can tell you is Finnish Independence Day.

   Most folks in Finland celebrate Finnish Independence Day the way they celebrate everything
   else, by partying to excess. They party-to-excess—even by Finnish standards—the night before
   and recover in front of the television set for almost the entire national holiday. The option, I
   guess, is to go out and trudge in the snow hung over.

   What keeps everyone glued to their TV sets is a single event: the President’s Ball. Finland
   doesn’t have much in the way of high society so the President’s Ball is pretty much it, the only
   truly big society event. It’s televised nationally to keep people from driving with hangovers and to
   prove to ourselves that we can stage our own respectable version of the Academy Awards. No, a
   better metaphor: It’s the Super Bowl of Finnish high society.

   So throughout the day, from Utsjoki in the north to Hanko in the south, Finns munch on gravlax
   and aspirin as they watch a procession of invitees—men in tailcoats and women in outrageous (for
   Scandinavia) evening attire—shake hands with the president.

   Nineteen hundred and ninety-nine was the year I got invited.

   You automatically get invited if you’re an ambassador to Finland or if you’re part of the
   Finnish parliament. Maybe one hundred or two hundred random people are invited on various
   grounds. They may have won a medal in the Olympics or maybe they helped the president on his
   campaign. If you are the captain of the ice hockey team and you’ve just won the world
   championship, you get invited. If the operating system you created gains worldwide attention, you
   get an invitation. Spouses and companions come, too.

   In fact, it was lucky that Tove and I could go at all. In August we had applied to the INS for
   permission to go to Finland and return. We weren’t approved until early November. Two weeks
   later we received our invitation to the President’s Ball.

   Now imagine what it’s like. Picture 2,000 Finns—and not even the most important 2,000 Finns
   —packed into the president’s castle. It was a home that had been built for a Russian merchant. It
   really is just a large home, not exactly a one-family home but maybe a home for one family that
   has a lot of support—cooks, maids, and the like. It’s not a huge place.

   So you arrive. Someone takes your coat and then you’re just jammed in there. You don’t know
   where to go. Bowls of punch proliferate. Obviously, they contain vodka. This wouldn’t be Finland
   if they didn’t. It basically takes a while to find people to talk to. You end up speaking to
   journalists, because, frankly, they’re the most interesting people there. (Maybe it was the punch
   that made them seem more interesting than a parliament member from, say, Lahti.)
   I didn’t expect it to be much fun, because I wouldn’t know many people there. I was the only
   one from the open source crowd invited. I expected it to be like the army—more enjoyable to talk
   about later. But it actually was fun.

   Tove wore a green gown that would have been stunning and attracted media attention even if
   we were at the Oscars, not the Finnish President’s Ball. Because she looked so good, and because
   Finland hadn’t won the world ice hockey championship that year, the press dubbed us King and
   Queen of the Ball.

   Whatever.

   “You enter this house not as a journalist but as a friend. We are allowing no journalists in this
   house.”

   I had never seen Tove so ebullient. She greeted me at the door of the new house on the day she
   and Linus received the key. It’s one of those monster homes: the Media Room (which now houses
   Linus’s pool table) probably doesn’t share a zip code with the Super Bonus Room, where Patricia
   and Daniela sleep, although it could handle an entire preschool. From the front door there’s a
   wide, long angled hallway leading way back to the family room. If they remove the fancy Italian
   tiles, it will be a great place for the girls to practice skateboarding some day. Linus’s office on the
   first floor has a mirrored sliding-glass door. Five bathrooms. Maybe they’ve found more of them
   by now. It’s all in a gated community far front the heart of Silicon Valley.

   Nicke Torvalds is visiting. Father and son return from a trip to the old duplex in a rented BMW
   Z3. It’s the model Linus will soon be purchasing, and Nicke will drive it to the Stanford University
   library this afternoon. But first, he leans against the hot tub, situated in the unlandscaped
   backyard, and announces that this is the largest house anyone named Torvalds has ever owned.

   Then he takes a piece of paper and lists all twenty Torvaldses. He didn’t know that a twenty-first
   was on its way.

   Linus, too, is thrilled in the empty house. Nicke videotapes the surroundings and I ask Linus to
   carry Tove across the threshold so I can photograph the event. There’s some very un-Finnish
   public displaying of affection.

   “Did you ever think our house would be this big?” Tove asks me.

   Tove needed to be on hand at the opening of the Ikea store in Emeryville to buy armoires for
   the new house, so I suggested Linus bring the kids over to a house I was renting in Stinson Beach.

   As soon as they arrived, I urged Linus to try out the kayak in the lagoon. He paddled around by
   himself, then with each of the girls, and climbed back onto the dock with wet pants.

   I wanted Linus to give me his thoughts on a chapter entitled, “Will Success Spoil Me?” and
   took the girls outside to the beach so he could read it undisturbed. Patricia and Daniela spent
   maybe a half hour hunting for starfish and tiptoeing into the water, after which one of them
   announced “Kisin kommer,” which translates to: “I’ve got to potty.”

   We returned to the house to find Linus sitting at the computer, in his underwear, a bag of
   pretzels at his side, intently typing away. It took him maybe fifteen seconds to realize we had
   arrived. He looked up from the monitor. His first words were: “Boy, your Macintosh sucks.”

   Then: “Oh, and I put my pants in your dryer.”

   He had retitled the chapter “Fame and Fortune,” figuring that “Will Success Spoil Me?”

   sounded a bit egotistical. He wanted more time to write, so I took the girls out to search for seals
   while he finished the chapter.


.. _PE37:

XII
---

   It’s easy to fight windmills if you don’t realize how hard it is.

   Five years ago when people asked me if I thought Linux would be able to take over the desktop
   and make a dent in Microsoft, they always had a doubtful edge to their voice. I invariably told
   them that I thought it would. They would look skeptical. The fact is, they probably knew more
   than I did about the reality.

   I didn’t really understand all the steps it would take to get there. Not only what it takes to
   tackle the technical problems of developing a robust and portable operating system, but what it
   takes to make that operating system a commercial, as well as technical, success. I would have
   been discouraged if I had known in advance just how much infrastructure would need to be in
   place to make Linux as successful as it has been. It’s not only that you have to be good. You have
   to be good, sure, but everything has to turn out the right way, too.

   Any sane person would have gazed up at the rugged mountain-face that needed to be scaled,
   and would have been absolutely daunted. Just think about the technical problems of supporting
   PCs, which are about the most varied hardware out there. You have to support people who have
   bugs that you can’t reproduce on applications that you don’t even care about. But you care about
   Linux, so you care about helping to fix them.

   Even to think about penetrating the commercial market, you have to have a respectable level of
   user support. From early on with Linux, you could have real support by doing it internally within a
   company. But to make it in a big way, you have to have a lot of people and a lot of infrastructure.

   It’s not enough to have a 1900 number or a 1-800 number for the first thirty days. To some extent,
   support is no longer much of an issue because it can be bought at any number of places—
   Linuxcare, Red Hat, IBM, Silicon Graphics, Compaq, Dell. But it clearly was something that had
   to be in place. For the longest time, I didn’t even realize that. It has been a major challenge for
   years.

   Unlike business people with solid technical backgrounds or journalists with a commercial bent,
   I was a narrowly focused software developer who was naive about what would be required. The
   technical problems alone would have kept me from embarking on this journey. If I had known
   how much work it would take, and that I would still be doing it ten years later—and that it would
   be almost a full-time job those entire ten years—I never would have started.

   And the abuse! I don’t get that much abuse these days, but it still happens. People who don’t
   like open source or people who are just upset about bugs will send me email, cursing me over their
   frustrations. Compared to the amount of positive mail I get, it’s minuscule. But it still happens.

   Yes, if I had realized how much work and how hard, how difficult a lot of things would have
   been, I probably would not have done it. If I had had enough knowledge to understand the
   problems in advance, I probably never would have taken Linux far beyond its initial release. If I
   had known how much detail you have to get right, and how much people expect of an operating
   system, I would have been able to envision horror scenarios of things I couldn’t handle.

   But I also wasn’t able to predict the upside. Like how much support I would get, and how many
   people would be working together on this. So now I change my mind. I guess if I had actually
   known the upside, I probably would have done it.

.. _PE38:

Intellectual Property
=====================

   The intellectual property debate is so hot these days that I can’t wander into a restroom without
   running across graffiti supporting one side or the other. Some people think that patents and other
   forms of intellectual property law are the bane of the free universe, and that these laws are not just
   misguided but actually evil and should be struck down as soon as possible. Others are convinced
   that pretty much the whole world economy is driven by intellectual property. And those people
   want to do anything to strengthen the legal status of IP rights.

   As a result, the graffiti on the issue gets quite graphic at times.

   Of course, most of it is on the virtual restrooms on the Internet, not so much the restrooms in
   the hotspots of San Jose’s nightlife.[3] There’ll be huge flamefests over some specific issue
   associated with intellectual property law, with people arguing everything from First Amendment
   rights to whether IP law might make open source development impossible sometime in the future.

   And I find myself certifiably schizophrenic on the issue.

   It’s not that I don’t have an opinion: I have very strong opinions on the worth of intellectual
   property, but they end up being on both sides of the argument. I can tell you, this can be very
   confusing. It means that I end up arguing both sides. And I think this is because there really are
   two sides to intellectual property, and they share nothing but the name.

   To many people, including me, intellectual property is all about human inventiveness, about
   the very thing that makes us humans instead of animals (that, and thumbs, of course). And in that
   setting, the very name “intellectual property” is an affront: It’s not property to be sold like chattel,
   it’s the act of creation, it’s the greatest thing any human can ever do. It’s Art, with a capital A. It’s
   the Mona Lisa, but it’s also the end result of a long night of programming, and it’s an end result
   that you as a programmer are damned proud of. It’s something so precious that selling it isn’t
   even possible: It’s indelibly a part of who you are.

   That kind of creativity—whether it be in the form of painting, music, sculpture, writing, or
   programming—should be sacred. The creator and the thing he or she created have a bond that
   cannot be severed. It’s like the bond between a mother and child, or between bad Chinese food and
   MSG. But at the same time it’s something that everybody in the whole world should be able to be
   part of, because it is humanity.

   And then, in the other corner, weighing in at an approximate seven gadzillion billion U.S.

   dollars a year, intellectual property is huge business. Human creativity got a price tag, and it
   turned out to be quite expensive. Creativity is rare, and as a result it is not just expensive but also
   extremely lucrative. Which brings in a totally different class of arguments, and totally different
   kinds of people. The kind of people who call the end result of human creativity “property.” Not to
   mention, of course, lawyers.

   Read the title of this chapter again. The “property” people are winning. After all, their name
   stuck. So what’s the problem?

   The most well-known example of intellectual property is the notion of copyright. Copyrights
   are basically the codification of the rights of any creator to do with his or her creation as he or she
   wishes. The “owner” of the creation can decide on how that creation should be used.

   Copyrights are also legally very simple to get. You don’t have to register your copyright: You
   are automatically the copyright holder of whatever creative work you do. This is an important
   distinction from most other intellectual property law, mainly because it actually makes it easy for
   individuals, not just big corporations, to own copyrights. You can own a copyright, simply by
   virtue of writing, painting, or generally creating something unique. If you want to, you can add a
   legend like “(C) Copyright 2000 Yourname Here,” but quite frankly, you don’t need to. You own
   the copyright whether you say so or not. Saying so just makes it easier for other people to track
   you down if they want to use your work.

   Of course, just owning a copyright in itself is not very useful. But the fact that you own what
   you create means that you can control how it is used. You have, for example, the right to sell such
   a work of art to somebody else, and nobody but the IRS gets to have any say in the matter. But it’s
   about more than just the money, and that’s where a lot of people seem to find themselves
   flummoxed.

   For example, you can use your power as owner of a copyright to try to do more interesting
   things than just sell it. You can license it. This is even better than selling it; instead of selling the
   work of art you can sell the license to do certain things to it, and still retain the copyright on it.

   Basically, you can have your cake and eat it, too. This is how the Microsofts of the world get
   created: endlessly selling the rights to use something, without actually losing anything. No wonder
   people just love to own this kind of property.

   Does anybody perhaps start to see a problem here? If you don’t see anything strange so far, I
   have a bridge and a few pieces of waterfront property to sell you.

   The basic problem with intellectual property is starting to show itself: You as the owner of
   intellectual property can effectively sell it forever, without ever losing anything yourself. You
   don’t risk anything, and in fact you might decide to write your license in a way that basically says
   that even if the property is flawed, you cannot be held responsible in any way. Sounds
   preposterous? You’d be surprised.

   Flaw: no consumer protection.

   It gets worse. The copyright holder not only has the right to sell his or her property without
   losing it, but also the right to sue people who sell property that looks like his or hers. Clearly the
   copyright owner has rights over that derived work.

   Clearly? Not so fast. Where do you draw the line between inspiration and copying? And what
   happens when different people come up with similar ideas? Who gets the gravy train of being able
   to sell his idea over and over and over again, and gets to tell the other people to butt out of his
   business? It’s not just consumers who aren’t protected, it’s also other creative people who are not
   protected by the notion of “intellectual property.”

   What makes the discussion ugly at this point is that a lot of the arguments for stronger
   intellectual property rights are based on the notion of giving inventors and artists more
   “protection.” What people don’t seem to ever realize is that giving such powerful rights to some
   people also ends up taking rights away from others.

   And maybe not so surprisingly, the proponents of stricter intellectual property laws are the
   organizations that stand to gain the most. Not the artists and inventors themselves, but the
   clearinghouses of IP: companies that make a living off other people’s creativity. Oh, and lawyers,
   of course. The end result? Copyright law amendments like the infamous Digital Millennium
   Copyright Act (DMCA), which removes the last vestiges of consumer rights over the use of
   copyrighted material.

   Now, if you are getting the notion that I think copyrights are actually detrimental, you’re
   wrong. I happen to absolutely love copyrights, I just don’t believe in taking the rights of the
   authors too far. Not to the point of screwing the consumer over. And I say this not just as a
   consumer, but as a producer of copyrighted material myself, both in the form of this book and of
   Linux itself.

   I, as a copyright holder, have my rights. But with rights come obligations—or as they say in
   certain neighborhoods, noblesse oblige. And so I have the obligation to use those rights in
   responsible ways, and not as a weapon against others who lack such rights. As one great American
   once declared, “Ask not what your copyright can do for you, ask what you can do for your
   copyright”—or something to that effect.

   And in the end, copyright is, despite even the DMCA, a fairly mild and well-behaved form of
   intellectual property. The notion of “fair use” does still exist, and holding a copyright does not
   give all rights to the work to the copyright holder.

   The same cannot be said for patents, trademarks, and trade secrets; the heavy drugs of IP.

   Discussions over software patents in particular have gotten so inflamed in technical circles that it
   officially counts as one of the subjects you should not discuss in polite company, along with gun
   control, abortion rights, medical marijuana, and whether Pepsi tastes better than Coca Cola. And
   the reason is that patents, in many ways, give control over new inventions similar to that of
   copyrights, but with few of the redeeming qualities of copyrights.

   One of the most awkward issues with patents is that, unlike with copyrights, you don’t get a
   patent just for inventing something new. No, you get a patent after you’ve gone through the
   painful and prolonged process of filing for it with the patent office. Waiting for the patent office,
   by the way, is a bit like standing in line at the DMV, but you have to realize that you stand in line
   with about twelve patent lawyers, and the line is TWO YEARS LONG. In short, it’s not something
   you do for fun on a Friday evening if the kids fell asleep early.

   As if to add insult to injury, the patent office doesn’t necessarily have the resources to check
   whether the patent for a new invention of yours is really all that groundbreaking. It’s not as if they
   have Einsteins[4] working for them, so it’s fairly hard to give new inventions their proper
   checking. Which means that, in many cases, obviously bogus patents have been accepted. Think of
   it as the post office with Ph.D.’s—minus the guns.

   So what’s the result? Very few individuals get patents, for obvious reasons. Companies, on the
   other hand, get a ton of them. They are useful as weapons against other companies that threaten to
   sue over the patents they own. The patent system of today is basically a Cold War with IP instead
   of nukes. And it’s not much prettier. The people left huddling in bomb shelters are the individual
   inventors, who have to deal with a system gone crazy and who lack the resources to have 12,000
   lawyers on staff.

   Now, if you want to avoid the bother with patents, you can go for the strongest drugs of IP,
   trade secrets. The advantage of the trade secret is that you don’t have to worry about a Trade
   Secret Office or anything at all: You can just stamp your intellectual property “secret” and be
   done with it. You can still tell people about it, but you have to tell them it’s a secret.

   People used to do this all the time before, and that is actually why patent law was originally
   introduced. In order to encourage individuals and companies to expose their secrets, patent law
   allowed for protection in the marketplace for some time if you divulged what your secret to
   success was. A basic form of tit-for-tat: You tell how you do something, and we’ll give you
   exclusive rights for X years.

   Before patents, people would guard their technological advantage jealously and take their
   secrets to the grave. That was, for obvious reasons, bad for technical evolution because promising
   technologies were never divulged to anybody else. The promise of exclusive rights made patents a
   very powerful incentive to tell all, as you no longer had to worry about your competition finding
   out what you were doing—at which point you would otherwise have lost the protection of it being
   secret.

   However, that was then, and this is now. These days even trade secrets have legal protection,
   for unfathomable reasons. Any sane person realizes that once a secret is out, it is no longer a
   secret. Except in the strange and twisty passages of intellectual property law, where secrets can
   continue to be secrets even after everybody knows what they are. And where the knowledge you
   have in your head can get you sued, if you happen to go to work for the wrong employer. Some
   intellectual property law is downright scary.

   To a large degree, finding peace in this intellectual property war is what open source is all
   about. While a lot of people have their own opinions about what open source really tries to do, in
   many ways you can see it as a high-tech detente, a defusing of copyright as a weapon in this fight
   of intellectual property.

   So open source would rather use the legal weapon of copyright as an invitation to join in the
   fun, rather than as a weapon against others. It’s still the same old mantra: Make Love, Not War,
   except on a slightly more abstract level (probably a lot more abstract, considering some of the
   geeks I know).

   But as with any major philosophical rift, there is always the other side of the story. This is
   where my certifiable schizophrenia comes in.

   I’ve tried to explain why a lot of people feel that intellectual property, and especially the
   strengthening of intellectual property laws, is downright evil. Many in the open source community
   (and outside too, in all honesty) would like nothing better than to tear down all the nukes
   altogether, and totally abolish the Cold War of knowledge. Others disagree.

   The other side of the picture is that yes, intellectual property may be unfair, and yes,
   intellectual property laws are largely designed to further the aims of large corporations over the
   rights of consumers or even the individual author or inventor. But boy is it lucrative! It
   concentrates the power of the powerful, and the very fact that it’s a powerful weapon makes it so
   effective in the marketplace. The same reason that made nuclear weapons the ultimate force in the
   Cold War makes intellectual property so attractive in the war of technology. And technology sells.

   And it also generates a very powerful positive-feedback cycle. Because intellectual property is
   such a good source of revenue, a lot of money is being spent on creating more intellectual
   property. And that very fact is important. In the same ways that wars have historically always
   been a source of invention and great leaps in engineering (initially, the computer itself was largely
   developed for purely military purposes), the virtual war of intellectual property rights helps feed
   the engine and brings never-before-seen resources into technology development. This is a good
   thing.

   Of course, I, as an intellectual snob, am convinced that merely throwing resources around is not
   really all that conducive to true creativity. Just look at the music business of today. Kajil-lions of
   dollars are spent every year on finding the next hot artist—yet nobody really thinks that the Spice
   Girls (who have been richly rewarded for their contributions to their art) can compare to
   Wolfgang Amadeus Mozart (who died destitute). So throwing money at the problem does not
   make for that kind of genius.

   But intellectual snobbism—the you-can’t buy-a-genius philosophy—–doesn’t really work as a
   long-term business model. The creative juices are just so unpredictable, so hard to court on
   finding, that any long-term planning should not concentrate on the promise of pure genius. The
   technology development of today (and, sadly, the music) depends not on the Einsteins (and
   Mozarts) but on a huge army of plodding engineers (and, in the case of music, well-endowed
   young females) who may show only occasional flashes of brilliance. The added resources do not
   make for great art, but for slow and steady progress. And, in the end, this is all to the best.

   The notion of plodding engineers may have less romantic appeal than the eccentric-genius
   approach. Just think about how many “Mad Scientist” movies there are compared to the number of
   “Plodding Engineer” movies. However, when it comes down to business, you do want your
   occasional flashes of genius but, even more than that, you want the steady stream of small
   improvements over time.

   And this is where the power of intellectual property shines: Having grown so lucrative, it has
   become the holy grail of modern technology companies, feeding this big machine. And thus,
   thanks to IP protections the steady progress goes on, unhindered. It may not be all that creative
   any more, but it’s dependable.

   So I see both sides—although I have to admit that most of the time I’d rather see a more fun
   and inspiring world of technology. One where economic factors wouldn’t always prevail. I have a
   dream—one day IP laws will be dictated by morals, not on who gets the biggest piece of the cake.

   Trust me, I understand the economic issues. At the same time, I can’t help but wish they did
   not have such an overwhelmingly negative impact on modern intellectual property law. The
   economic incentives to strengthen the ownership of intellectual property, and the difficulty in
   expressing the notion of “fair use” and “morals” in legal text, have caused the two viewpoints on
   IP to grow further apart. As in a dispute between two neighbors, neither side is willing to even
   acknowledge that the right solution is likely to be somewhere in between the two extremes.

   Clearly, as the unfortunate passing of the DMCA showed, economic incentives are doing well.

   The question is, what kind of intellectual property law would help drive development while being
   less driven by crass money-grabbing interests?

   The issue is intensified by the fact that modern technology (and the Internet in particular) are
   weakening many of the traditional forms of intellectual property protection almost faster than we
   can keep up. And in ways nobody could have predicted. Who would have imagined that
   Midwestern grandmothers would be pirating needlepoint instructions over the Internet? The
   ability to copy works of art—and technology itself—on a large scale has become so widespread
   and easily available that institutions with vested IP are running around doing the best they can to
   shore up their interests. They are doing all they can to make such copying illegal, and introducing
   new measures to actually outlaw technology that can be used for piracy.

   What’s wrong with this picture? The problem is that a lot of the new efforts to make it harder
   to illegally use other people’s intellectual property also make it much harder to use other people’s
   work in legal ways. The classic example of this from the Linux world is the so-called DeCSS
   lawsuit.

   In the DeCSS suit, people who were working on technology to decode DVD movies were sued
   by the entertainment industry for making the code available to others on the Internet. It didn’t
   matter to the judge on the case that the ultimate aim of the project was perfectly legal; the fact
   that the project could potentially be used for illegal purposes made it illegal in the United States
   to distribute even the information on where to find the instructions to do the decoding. (The
   “DeCSS” name itself comes from the project undoing the DVD Content Scrambling System—
   CSS. So you “de-CSS” something in order to remove the scrambling so that you can watch the
   movie on your computer.)
   This is a perfect example of intellectual property law being used not to help foster innovation,
   but to control the marketplace, to control what consumers can and cannot do. It’s an example of
   intellectual property law gone bad.

   Such misuses of intellectual property power aren’t limited to technology, by the way. Another
   classic example is the use of trade secret law to prosecute and persecute the people who tried to
   inform the public about Scientology. The Church of Scientology successfully claimed that their
   scriptures (“Advanced Technology”) fell under trade secret protection, and used IP law to defend
   them from being made public.

   What are the alternatives? Imagine an intellectual property law that actually took other
   people’s rights into account, too. Imagine IP laws that encouraged openness and sharing. Laws
   that say sure, you can still have your secrets, whether they be technological or religious, but that
   doesn’t mandate legal protection for such secrecy.

   Yeah, I know. How unrealistic of me.

.. _PE39:

An End to Control
-----------------

   The way to survive and flourish is to make the best damn product. you can. And if you can’t
   survive and flourish on that, then you shouldn’t. If you can’t make a good car, then you deserve to
   go down like the rock that was the U.S. auto industry in the 1970s. Success is about quality and
   about giving folks what they want.

   It’s not about trying to control people.

   The trouble is, people and companies are too often motivated by pure greed. And that always
   causes them to lose in the long run. Greed leads to decisions governed by paranoia and a need for
   total control. Those are bad, short-sighted decisions that end up in disaster, or near disaster. The
   simple example on everyone’s mind has been the phenomenal early success of wireless
   technology in Europe at the expense of American companies. While the U.S. companies
   individually tried to control the market by using their own proprietary standards, the European
   companies rallied around a single standard, GSM, and chose to compete based on which company
   could produce the best product and provide the best service. The U.S. companies have fallen
   behind, plagued by their own competing standards. With a market buoyed by a common standard,
   the European companies have all shared in the boom. That’s why kids in Prague were swapping
   cell-phone text messages years before kids in Peoria had even heard about it as a new way of
   cheating on tests.

   If you try to make money by controlling a resource, you’ll eventually find yourself out of
   business. This is a form of despotism, and history overflows with examples of its ill effects. Say
   it’s the 1800s in the U.S. West and you control the source of water for local farmers. You’re
   stingy with the water and overcharge. At some point, it inevitably becomes profitable for someone
   else to devise a way to bring it in from somewhere else, and then your market collapses. Or
   technology advances so that pipes can transport water, from a distance. Either way, as
   circumstances change your hold gets broken and you’re left with nothing. This happens all the
   time, and it’s amazing that people still can’t see it coming.

   Flash forward to the music industry in the waning years of the twentieth century. The resource
   it controls is entertainment. A company owns the rights to an artist’s work. That artist produces a
   number of successful singles, but the company puts maybe one or two of those singles on each CD
   it produces. That way it can sell multiple CDs, instead of the one that everyone wants. Then
   somebody invents the technology for MP3. Suddenly, music can be downloaded from the Internet.

   MP3 is about doing the right thing for consumers by giving them a choice.

   So if a typical CD costs $10 and contains two singles a consumer wants, it may make more
   sense for him to purchase those singles separately—along with others he wants—off MP3 for
   $1.50 apiece. No longer is the buyer trapped in a despotic situation, living by the greed-inspired
   rules of the music company, which wants to give up just the bite-sized pieces that it chooses to
   give up. There’s a good reason why the music industry is scared to death of MP3 and its sister
   technologies, Napster and Gnutella. The price of water got so high that it became profitable for
   somebody to devise a new method of bringing it in from somewhere else.

   But this is an industry with a history of trying to control consumers—if not by what music it
   chooses to release, then by copyright and technology. This is the industry that tripped all over
   itself in the 1960s, trying to keep consumers from copying music onto tapes when that technology
   entered the market. Because the industry felt tapes were the perfect medium for people to disobey
   copyright laws, it argued for ways to protect its copyrights. This was a bad excuse. The industry
   was taking the moral high ground and pleading copyright when it was simply trying to maintain
   control of its niche franchise. The fact is, tapes never hurt the music industry. Sure, people copied
   music for their own use, but that only meant that people actually bought more LPs from which to
   copy. Duh. A few decades later, when CDs came out, the players were built so that you couldn’t
   copy your tape perfectly. Paranoia strikes again. Next came digital tapes. They involved a
   different sampling rate from CDs—48 kilohertz versus 44.1—to prevent users from copying their
   CDs onto digital tape. Again the industry tried to screw over the customer to get control. But in
   the case of digital tapes, the market never quite hit. It was a bit like fooling with Mother Nature.

   By trying to control each successive technology, the music industry only helps inspire people
   to devise new ways around it. Are they ever going to get it?

   That brings us, inevitably, to DVDs. This time the entertainment industry delivered much
   better sound and video than VHS tapes, plus a smaller format and greater ease-of-use. But they
   added encryption to prevent copying. And to add insult to injury, they added geographic area
   codes. The DVD you bought at the San Francisco airport wouldn’t play in Europe. It made a
   perverse sense to the industry: Hey you guys, we can sell movies at a higher price in Europe! So
   let’s make sure that Europeans can’t buy movies from the United States.

   Could the entertainment industry not have predicted the obvious? That the price of water would
   get so high that somebody would devise a new method of piping it in from somewhere else?

   Yes, while the industry was greedily trying to control people through technology, the DVD
   encryption was cracked—not even by people who wanted to copy DVDs but by people who simply
   wanted to view them under Linux. These are folks who actually wanted to buy DVDs, but they
   couldn’t; the discs would have been useless on their equipment. The industry’s moves to protect
   its fief-dom backfired: It simply prevented the market from expanding, and created the incentive
   for the cracking of the DVD encryption.

   Once again, the short-term strategy turned out to be the wrong thing to do.

   The entertainment industry is just one example. The same thing has been happening for years
   in software. That’s why Microsoft’s strategy of bundling software is ultimately doomed to fail.

   Open source products, on the other hand, cannot possibly be used in a despotic manner because
   they’re free. If somebody tried to bundle things with Linux, somebody else could just unbundle it
   and sell it the way people really want it.

   It’s doubly futile to attempt to control people through technology. In the end, it always not only
   hurts the company but also hinders the acceptance of the technology. A recent example is Java,
   which has lost a lot of the appeal it originally had. By trying to control the Java environment, Sun
   Microsystems basically lost it. Java is still doing reasonably well, but it surely hasn’t lived up to
   its potential.

   Sun wasn’t trying to make money on Java itself, but the company saw the programming
   language as a way to make its computer more unique to users and get us out of Microsoft’s grip—
   and sell more Sun hardware, by the way. But while they weren’t really trying to make money on
   Java, they did feel that they had to keep control of it as a phenomenon and as a microbe. All of
   their licensing terms came with a lot of extra baggage just for this control.

   Good product. But the problem was that they were trying too hard to screw over Microsoft.

   They were motivated by fear, loathing, and hate, which is sort of a mid-to-late 1990s approach to
   business. (Think of the Grateful Dead lyric: “Ain’t no time to hate.”) And because they were so
   hateful of Microsoft and so afraid, they made all the wrong licensing decisions. They made it
   difficult for everybody, even their partners, to use the product. That’s why companies like Hewlett
   Packard and IBM all eventually decided to make their own Java implementations. They just said
   “Screw Sun.”

   Sun tried to get Java standardized through two different standardization bodies, and each time
   they basically pulled out because of the control issues. On the one hand, Sun wanted to standardize
   the language. But at the same time they didn’t want to lose control. So the standardization boards
   basically said, “Hey, this is not just about you.” And as a result, Sun just flaked out. It’s an
   example of a company trying to control technology in ways that make no sense for the people who
   actually use the technology. And it’s always going to fail for the company. It also makes the
   technology itself fail—or take longer to be accepted.

   Contrast that with the If-you-love-something-set-it-free strategy taken by Palm Computing.

   The folks at Palm made their development environment open, and also opened up their platform,
   not only to vendors but to individuals who would want to write programs for the platform. They
   opened up their APIs and made it easy to get their development tools for free. What this did was
   create a cottage industry around the Palm Pilot. It made the Palm phenomenon more than just one
   company struggling in a new market. So now you have companies selling games that work on
   Palm Pilots, and more advanced calendar programs than what Palm itself offers. Now the
   consumer can choose what he or she wants and everybody benefits, particularly Palm, which
   enjoys a larger market as a result of opening itself up.

   Handspring is doing the same thing with its device, the Visor. It’s a Palm competitor that uses
   the Palm operating system, and the company takes openness a step further by allowing hardware
   plug-ins like GPS receivers and mobile phone attachments. Like Palm, Handspring is creating a
   community of companies to support a new platform.

   What Sun could have done is allow anybody to do their own Java—no strings attached—while
   wagering that they themselves could do a better job. That’s the sign of a company that isn’t
   blinded by greed or by fear of competition. It’s the sign of a company that believes in itself. And
   doesn’t have time to hate.

.. _PE40:

THE AMUSEMENT RIDE AHEAD
------------------------

   Is there anything more obnoxious than business prognosticators? Those self-important types who
   pretend to know where the insane technology amusement ride will take us? I guess they serve a
   good function. They populate the panel discussions and keynote speeches of the indistinguishable
   technology conferences that seem to crop up like unpleasant, inedible mushrooms in your flower
   bed. People hoping to cash in on technology trends spend thousands of dollars to hear them speak
   at technology conferences. It keeps an army of hotel workers and food handlers and bartenders
   honestly employed, so I suppose they serve a purpose.

   And now David tells me that I should do one of those “Future of Business” chapters, too. I feel
   a bit sullied by the thought, but hey, he didn’t let me drown while we were boogey-boarding, and
   if he believes that readers will think the future of business is more interesting than the meaning of
   life, then I’ll just shut up and write.

   However.

   I’ll go on record saying that I’ve not been a very good predictor of much of anything in my life,
   as far as I can remember. Did I predict that the little operating system I started writing for my own
   use would someday be all over the place? Nope. Took me by surprise, it did. My only defense is
   that nobody else seems to do be doing any better on this crystal ball thing either, and if I was
   taken by surprise by how big Linux became in the industry, then everybody else was absolutely
   flabbergasted. So I probably did better than most. And who knows? Maybe through this chapter I
   will be known as the Nostradamus of our time.

   And maybe not. Here goes, anyway.

   We can, of course, look to past experience. We can trace in sad detail how, say, an invincible-
   seeming company like AT&T went limp—and we can predict that if we stick around long enough,
   the weeds will overrun those tidy little green buildings in Redmond someday, too. Just as today’s
   hot young starlet will develop wrinkles and sagging breasts, today’s business hero will be
   supplanted by a new, more inspired model; and the hero’s company, even if it breaks a sweat
   reinventing itself—or whatever they’re calling it this month—will end up sagging and groaning,
   AT&T-style.

   Call it evolution. It’s certainly not rocket science. No business will live forever, and that is just
   as well.

   But what is it that actually drives this evolution? Is there some fundamental, inherent evolution
   of technology that will one day cause computers to take over, leaving the human race behind in
   the dust, like some people seem to think? Or is it just some random inevitability of progress, a
   “straight ahead and damn the torpedoes” kind of thing that causes technological advances?

   I say no.

   Technology is what we make of it, and neither business nor technology will change the basic
   nature of human needs and yearnings. As with everything else, the evolution slowly but inexorably
   will cause technology to move away from plain survival through a society based on
   communication and finally into the realm of entertainment (déjà vu alert: Yes, you’ve seen this
   theory before in these pages, and, assuming you stick around to the bitter end, you’ll see it once
   more).

   Humans are destined to be party animals, and technology will follow.

   So forget all the predictions about what technology can do in ten years. That’s not very relevant
   at all. We were able to put a man on the moon thirty years ago, and we’ve not been back since. I’m
   personally convinced that is simply because the moon turned out to be a drab place with basically
   no night-life at all—sort of like San Jose. As a result, people didn’t want to go back, and the
   amount of technology we’ve amassed in the meantime doesn’t mean a thing. The moon stays
   empty.

   What really matters when you talk about the future of technology is what people want. Once
   you’ve figured that out, the only remaining question is how quickly you can mass-produce the
   thing and make it cheap enough that people can get it without sacrificing anything else they want.

   Nothing else really matters.

   A small digression is in order here. What really sells, of course, is perception, not reality.

   Cruise liners sell the perception of freedom, of the salty seas, of good food and romance of Love
   Boat proportions. Who cares if the cabin is cramped if you feel like you’re free as a bird!

   And what does this all means? It explains, for example, why people are going so ga-ga over the
   Sony PlayStation 2, the single biggest piece of technology to hit the store shelves this year. (I’m
   writing this just days after it was introduced in the United States in late October 2000). Talk about
   the embodiment of the entertainment society!

   It also points out how personal computers have a perception problem. Clearly the PC industry
   is nervous about game consoles, mainly because they are seen as nonthreatening, fun and cheap,
   while PC’s are mostly seen as complicated and expensive. Sometimes even inimical.

   It also makes me personally convinced that if we’re still talking in a big way about operating
   systems fifteen years from now, something is seriously wrong somewhere. This may sound
   strange coming from somebody whose main claim to fame is writing his own operating system,
   but the fact is that, statistically speaking, nobody wants an operating system.

   In fact, nobody even wants a computer. What everybody wants is this magical toy that can be
   used to browse the Web, write term papers, play games, balance the checkbook, and so on.

   The fact that you need a computer and an operating system to do all this is something that most
   people would rather not ever think about.

   This is why a lot of analysts like the notion of devices like the Sony PlayStation 2 that take
   over a number of the chores of a computer, without having that scary hand-sweat-producing
   property of being obviously complicated, scary machines. Which is technologically senseless, as
   we’re getting more and more computers into the house all the time like this, while being unaware
   of how complicated and scary they could be.

   So my bet for the next Microsoft would be Sony, if they can just get all the pieces lined up
   properly. Now I’m not claiming that this is a prediction of Nostradamus-like mindbogglingness
   (yes, I know that’s probably not a real word, but it should be). There are others who would agree
   with this, but I’m trying to articulate why it is happening.

   Not that I’m predicting the demise of the PC, like many have unsuccessfully done before. The
   fundamental strengths of PCs are still there; they are the Swiss army knife of computers. Overtly
   complicated enough to scare off people who don’t like technology—complicated exactly because
   they are not tailor-made for only one thing. That flexibility becomes the very thing that makes
   them attractive.

   And then, the one ring to rule them all, and in the darkness bind them: communication.

   Everywhere. You can’t live without checking email at least twice an hour? No problem, my email-
   addicted friend. You can have the slightly guilty feeling of taking the day off at the beach, yet
   always be in touch with what’s going on at work. Remember: What sells is not the reality of being
   on vacation, but the perception of freedom. Size does matter after all, if only to make all of the
   technological wonders seem trivial and nonthreatening.

   And where is Linux itself, and open source generally, in all this? You won’t even know. It will
   be inside those Sony machines. You’ll never see it, you’ll never know it, but it’s there, making it
   all run. It will be in that cell phone, which is at the same time acting as your very own personal
   communications hub for the rest of your electronic widgets when you’re away from your wireless
   local area network.

   You’ll see. It’s only a matter of time. And money.

.. _PE41:

WHY OPEN SOURCE MAKES SENSE
---------------------------

   IBM is a company with a history of screwing people over. It made its money by getting a captive
   audience and making sure nobody else got a foothold. That’s how most computer companies
   worked, in fact. It’s how some of them still do. Then, when IBM developed the personal computer,
   it unintentionally opened up its technology for anyone to replicate. That single act did more than
   anything to spur the PC Revolution, which has in turn spurred the Information Revolution,
   Internet Revolution, New Economy—whatever it is they’re now calling the massive changes
   taking place throughout the world.

   It’s the best illustration of the limitless benefits to be derived from the open source philosophy.

   While the PC wasn’t developed using the open source model, it is an example of a technology that
   was opened for any person or company to clone and improve and sell. In its purest form, the open
   source model allows anyone to participate in a project’s development or commercial exploitation.

   Linux is obviously the most successful example. What started out in my messy Helsinki bedroom
   has grown to become the largest collaborative project in the history of the world. It began as an
   ideology shared by software developers who believed that computer source code should be shared
   freely, with the General Public License—the anticopyright—as the movement’s powerful tool. It
   evolved to became a method for the continuous development of the best technology. And it
   evolved further to gain widespread market acceptance, as seen in the snowballing adoption of
   Linux as an operating system for Web servers, and in its unexpectedly generous IPOs.

   What was inspired by ideology has proved itself as technology and is working in the
   marketplace. Now open source is expanding beyond the technical and business domains. At
   Harvard University Law School, professors Larry Lessig (who is now at Stanford) and Charles
   Nesson have brought the open source model to law. They started the Open Law Project, which
   relies on volunteer lawyers and law students posting opinions and research to the project’s Web
   site to help develop arguments and briefs challenging the United States Copyright Extension Act.

   The theory is that the strongest arguments will be developed when the largest number of legal
   minds are working on a project, and as a mountain of information is generated through postings
   and repostings. The site nicely sums up the tradeoff from the traditional approach: “What we lose
   in secrecy, we expect to regain in depth of sources and breadth of argument.” (Put in another
   context: With a million eyes, all software bugs will vanish.)
   It’s a wrinkle on how academic research has been conducted for years, but one that makes
   sense on a number of fronts. Think of how this approach could speed up the development of cures
   for disease, for example. Or how, with the best minds on the task, international diplomacy could
   be strengthened. As the world becomes smaller, as the pace of life and business intensifies, and as
   the technology and information become available, people realize the tight-fisted approach is
   becoming increasingly outmoded.

   The theory behind open source is simple. In the case of an operating system, the source code—
   the programming instructions underlying the system—is free. Anyone can improve it, change it,
   exploit it. But those improvements, changes, and exploitations have to be made freely available.

   Think Zen. The project belongs to no one and to everyone. When a project is opened up, there is
   rapid and continual improvement. With teams of contributors working in parallel, the results can
   happen far more speedily and successfully than if the work were being conducted behind closed
   doors.

   That’s what we experienced with Linux. Imagine: Instead of a tiny cloistered development
   team working in secret, you have a monster on your side. Potentially millions of the brightest
   minds are contributing to a project, and are supported by a peer-review process that has no, er,
   peer.

   The first time people hear about the open source approach, it sounds ludicrous. That’s why it
   has taken years for the message of its virtues to sink in. Ideology isn’t what has sold the open
   source model. It started gaining attention when it was obvious that open source was the best
   method of developing and improving the highest quality technology. And now it is winning in the
   marketplace, an accomplishment has brought open source its greatest acceptance. Companies were
   able to be created around numerous value-added services, or to use open source as a way of
   making a technology popular. When the money rolls in, people get convinced.

   One of the least understood pieces of the open source puzzle is how so many good
   programmers would deign to work for absolutely no money. A word about motivation is in order.

   In a society where survival is more or less assured, money is not the greatest of motivators. It’s
   been well established that folks do their best work when they are driven by a passion. When they
   are having fun. This is as true for playwrights and sculptors and entrepreneurs as it is for software
   engineers. The open source model gives people the opportunity to live their passion. To have fun.

   And to work with the world’s best programmers, not the few who happen to be employed by their
   company. Open source developers strive to earn the esteem of their peers. That’s got to be highly
   motivating.

   It seems that Bill Gates doesn’t understand this. Is it possible that he’s now embarrassed by an
   off-putting rhetorical question he asked in 1976? “One thing you do is prevent good software from
   being written. Who can afford to do professional work for nothing?” he wrote in a letter to open
   source programmers.

   In fact, one way to understand the open source phenomenon is to think about how science was
   perceived by religion so many centuries ago (if not today, by some creatures). Science was
   originally viewed as something dangerous, subversive, and antiestablishment—basically how
   software companies sometimes view open source. And just as science wasn’t born out of an effort
   to undermine the religious establishment, open source wasn’t conceived in order to detonate the
   software establishment. It is there to produce the best technology, and to see where it goes.

   Science on its own does not make money. It has been the secondary effects of science that
   create all the wealth. The same goes for open source. It allows the creation of secondary industries
   that challenge established businesses, much the way the spinoffs of science challenged the church.

   You find small companies like VA Linux taking advantage of open source and suddenly being
   able to compete with traditional corporations. In the words of Sir Isaac Newton, standing on the
   shoulders of giants.

   And yes, as open source gains momentum in the world economy, and as its developers earn
   recognition, they are becoming increasingly bankable as employees. Companies search credit
   lists, which are traditionally appended to open source software contributions, to determine who is
   making multiple contributions. And then they instruct their human resources departments to
   deliver a wheelbarrow full of money and stock options to potential employees. In a previous
   paragraph I pronounced that money is not the greatest motivator, and, no, I haven’t changed my
   mind in the ensuing sentences. But I must say that money isn’t such a bad thing to have as a
   reward for hard work. It certainly is handy when it comes to filling up the gas tank in my BMW.

   Like science itself, open source’s secondary effects are endless. It is creating things that until
   recently were considered impossible, and opening up unexpected new markets. With Linux, as
   with other open source projects, companies can make their own versions and their own changes,
   which really isn’t possible any other way. It’s exciting to realize that just about everything that’s
   ever been done with Linux was not remotely on the radar when we started. It is even taking off in
   China. Traditionally, software development in Asia has primarily been about translating American
   or European software. Now folks in that part of the world are using Linux to develop their own
   software. And I’m really proud of the guy who came up to me at Comdex and wanted to show me
   the gasoline pump that was running Linux. It was a prototype gasoline pump that was running
   Linux because he wanted to have Web browsers so gasoline customers could go to CNN.com
   during the three minutes they’re waiting for their tanks to fill. Standing on the shoulders of giants.

   It’s inspiring that people are using technologies like Linux to just make a better gas pump. That
   sort of innovation is not likely to have happened within the confines of a company, because if you
   were a company taking Linux to market you would go for the obvious, which right now is the
   server market or the high-end desktop market. But open source in general allows companies to
   make their own decisions about what they want to do. So it’s Linux in embedded devices. It’s Tivo
   running Linux and the Transmeta Web Slate running Linux and Telephony using Linux. This is
   how billions of dollars in wealth is being created from open source.

   It’s like letting the universe take care of itself. By not controlling the technology, you are not
   limiting its uses. You make it available and people make local decisions—to use it as a launching
   pad for their own products and services. And while most of those decisions don’t make sense in
   the larger scale of things, they actually work really well. This is not about trying to spread Linux.

   It’s about making Linux available and then letting it spread itself. And this doesn’t apply only to
   Linux. It applies to any project that’s open.

   Open source makes sense.

   People don’t quibble with the need for free speech. It is a liberty that people have defended
   with their lives. Freedom is always something you have to defend with your life. But it’s also not
   an easy choice to make initially. And the same is true of openness. You just have to make the
   decision to be open. It’s a difficult stance to take at first, but it actually creates more stability in
   the end.

   Think of politics. If the logic that’s used against open source were applied to government, then
   we would always have one-party rule. Obviously, a single-party rule is a great deal simpler than
   our system of multiple parties, the open political system in which much of the world operates.

   With one party you don’t have to worry about getting agreement with other people. The reasoning
   would follow that government is too important to waste on the give-and-take of openness. For
   some reason people see the fallacy of this argument as it applies to politics and government, but
   not as it applies to business. Ironically, in business it makes people nervous.

   The arguments a company uses to keep from opening up technology are convincing. That’s not
   how things are done, management says. And it’s scary. People are frightened of change, partly
   because they don’t know how it is going to turn out. By sticking to the status quo, a company can
   make a better judgment of where it will go, and sometimes that seems more important than being
   hugely successful. These are companies that will be predictably successful instead of being
   unpredictably really, really, really successful.

   It isn’t easy for a corporation to turn an existing product into an open source product. There are
   a host of thorny issues. For one thing, over the course of months or years that it developed the
   product, the company built up a great deal of internal knowledge. This in-house intellectual
   property is the company’s bread and butter. The organization is unwilling to relinquish the
   intellectual property that keeps it alive. But also, the very existence of this internal knowledge
   creates a barrier for outsiders. It discourages them from participating.

   But I have seen companies make the move from closed to open. One story is Wapit, a Finnish
   company creating service and support infrastructure for various interactive devices. This project
   involved the company’s wall-phone-style Web server. For them, the decision to open source their
   software makes perfect sense. They want to build up their service, but they have to build up their
   infrastructure first. That requires writing a lot of software. It’s a necessary evil. So instead of
   viewing it as a decision to make its intellectual property available to others, they look at it this
   way: The writing of software takes a lot of engineering time, but it isn’t something that creates
   value from being tightly held at the company.

   There were a few things working in Wapit’s favor. First, it was not a huge project. Second, the
   decision to open source was made in the early stages of the company’s existence. Management
   reasoned that it had the resources in-house to develop the product, but it wanted to push to have
   something more than could be created in-house. It also determined that open sourcing is a good
   way of furthering Wap as a standard for others to work on.

   Early in the game, the company asked for my advice and I told them they needed to fight the
   urge to have decisions made internally. I suggested that if they were having meetings in which
   decisions should be made, those meetings should not be closed to outsiders. By keeping the
   decision-making process a company affair, they would run the risk of alienating outsiders, who
   would have trouble getting past the company’s Old Boy’s network. That’s one of the major
   problems of establishing and maintaining an open source project from a corporate environment.

   It’s easy to give lip service to open source, but it can unintentionally degenerate into a two-tier
   society: Us vs. Them. A lot of decisions get made the easy way—sitting at the cafeteria table
   discussing the options and developing a consensus without ever opening up the discussion to the
   outside. People from the outside who have valid opinions are essentially voted down by the fact
   that the decision was already made in the company cafeteria.

   This was one of the problems that plagued Netscape in the months following that company’s
   much-heralded decision, in the spring of 1998, to release the source code (called Mozilla) for its
   next-generation browser. It took a long time before the project truly lived up to its open source
   promise. There was a camp of Netscape insiders who would not accept small patches from
   outsiders. Everybody inside knew each other, and if they weren’t physically sitting around a
   coffee shop making decisions, there was a virtual coffee shop in which the insiders stayed fairly
   close. Instead of being seen as embarking on the first great experience in taking an existing
   commercial project and opening it up, Netscape generated a bit of bad press. When word of its
   inactivity got out, Netscape could no longer take the high moral ground. That helped them open up
   to outsiders. Now the project seems to be much more dynamic.

   When folks first hear about the possibility of opening up an existing commercial project, they
   tend to ask the same questions. One question has to do with how people inside the company would
   feel about the possibility of having an outsider produce work that is better than their own—and
   having that so publicly noticeable. I think they should feel great about it, and great that they are
   getting paid for not even doing most of the work. In that regard, open source—or open anything,
   for that matter—is unforgiving. It shows who can get the job done, who is better. You can’t hide
   behind managers.

   Open source is the best way of leveraging outside talent. But you still need to have somebody
   inside the company who keeps track of the company’s needs. That person may not even be the
   project’s leader. In fact, it could be a benefit to the company if someone on the outside takes it
   over and is doing it for free. It’s fine if someone outside is doing a better job. The trouble is, the
   outsider might lead the project in a direction that doesn’t satisfy the company’s requirements. So
   the company must take care of its own needs. The opening of the project might enable the
   organization to shrink its local resources, but that doesn’t mean it can get rid of them. The project
   could expand to become far bigger than it would have been at a single company. Outside resources
   make for a cheaper, more complete, and more balanced system, but there’s this flip side: The
   expanded system no longer takes only the company’s needs into account. It actually might
   consider the needs of customers.

   Probably the most vexing thing in the whole process is giving up control and just accepting the
   fact that outsiders may actually know better. The other difficulty is finding a strong technical
   leader in the company. This has to be somebody who is trusted by everyone on two levels—both a
   technical and a political level. It has to be someone who is able to acknowledge the fact that the
   project may have been flawed from the start. Instead of trying to hide from such problems, the
   leader must be able to convince everybody that the best thing to do is to go back and start over,
   which means breaking stuff. It’s not a message people want to hear. However, coming from
   someone who commands respect, it’s a message people will accept.

   Given the nature of office politics and how corporations typically work, the technical lead
   person would have to be someone with a fairly strong personality. He or she should be somebody
   who likes working by email and who avoids taking sides. I wouldn’t use the word “liaison,”

   because that would imply there are two distinct sides here—the inside camp and the outside camp.

   And that’s not the way it should be. This technical lead person gets paid by the company to do
   open source. He or she knows, and everybody else knows, that this person is not paid to agree with
   his counterparts in the company, but simply to do the project. There’s a danger with having the
   leader too closely associated with the company. Folks might trust his or her technical ability, but
   not the nontechnical judgment.

   Is there a diplomat in the house?

   It’s like “Find me one honest man.”

   This is why I have tried so hard over the years to avoid getting involved with Linux companies.

   This is becoming increasingly critical now that the money is materializing. With so many dollars
   floating around, people start questioning your motivations. For me, it’s helpful that I’ve been
   known as being neutral. You have no idea how important it is to me to maintain that neutrality. It
   drives me nuts.

   Okay. You’re right, I should stop preaching. Open source is not for everyone or every project or
   every corporation. But the more that people start taking stock of the success of Linux, the more
   they realize this isn’t the knee-jerk rantings of idealistic, unwashed high-schoolers.

   Open up anything, and the possibilities will follow. I’ve been talking about open source for as
   long as journalists have been asking me about it, which is basically the last five years. It used to
   be that you had to explain and explain what’s so great about it. And, frankly, it felt like an endless
   trek. It was like trudging in mud.

   People get it now.

.. _PE42:

FAME AND FORTUNE
----------------

   “What about the burden of fame?” That’s what some people will ask me. And let me tell you, the
   “burden” is not a burden at all. It’s fun being famous, and famous people who say otherwise are
   just trying to be nice and make nonfamous people feel like they’re better off. You’re supposed to
   be humble about your fame, and complain about how it destroys your life.

   But face it, everybody dreams of fame and riches. I know I did. As a teenager I wished to
   become a famous scientist. Albert Einstein, but better. Who doesn’t? If not a scientist, then a
   racecar driver. Or a rock star. Or Mother Teresa. Or the President of the United States.

   And actually, getting there was not at all painful. Sure, I may not be Albert Einstein but I feel
   comfortable about having actually made a difference, and about doing something meaningful. And
   getting recognized for it makes the whole thing all the better. So the next time you hear somebody
   complaining about fame and riches, ignore them. They’re just doing it because it’s what you’re
   supposed to do.

   So is it all good? Of course not. There are certainly downsides to being well-known. I don’t
   have people recognize me in the streets (or at least not very often), but the huge amount of email I
   get is interspersed with the occasional message that is really hard to answer, and also hard to
   ignore. What do you say to somebody who asks you to give the eulogy for his dad that you never
   met? I never replied to that email, and I still feel a bit guilty about it. That was a very important
   thing for somebody, and to me it ended up being just an inconvenience.

   Or how do you tell somebody who asks you to give a keynote speech at a conference that you
   really don’t have the time or the inclination? How do you make people realize that you long ago
   stopped listening to phone-mail messages, without appearing to be an inconsiderate bastard?

   Which you really are, after all. It’s not as if I end up caring all that deeply about every issue, just
   because I care deeply about the issue I’m known for: Linux.

   Of course, eventually it becomes really easy to just say no. Or ignore the requests entirely; one
   of the reasons I love email is that it’s so convenient and easy to ignore—what’s one more email in
   the few hundred I get every day? The medium is so far removed from the person that it very
   seldom gets personal enough to make you feel guilty about ignoring it. It happens (see above), but
   it doesn’t happen very often. And even when you don’t ignore it, saying “no” over email is a lot
   easier to do than in person or over the phone.

   The problem is fundamentally one of the expectations people end up having about well-known
   people. And the fact that it’s obviously not possible to live up to all the expectations—while
   feeling like you should at least try to do so. That’s partly what made writing this book a pretty
   nerve-wracking experience—trying to write a reasonably personal book, while at the same time
   not really disappointing people who expected something different.

   And some of the expectations are downright silly. I often get the feeling that some people
   expect me to be a modern-day monk—living a frugal life in solitude. All because I thought that
   making Linux open and freely available on the Internet was a good idea, and because I didn’t take
   the traditional commercial approach to software. So then I get self-conscious and rather defensive
   about the fact that I actually enjoy spending money, and that I’ve finally upgraded my old Pontiac
   Grand Am to something more fun.[5]

   Which brings up the second question after the “burden of fame” one. Namely, “Will success
   spoil Linus (and/or Linux)?” Will I turn into a self-centered spoiled brat who writes books about
   himself because he likes seeing his name in print, and because it pays off his new useless car?

   The answer, of course, is yes.

   After all, take a person whose life-long philosophy has been to have fun and do something
   interesting, then add some money and fame, and what do you expect will happen? Instant
   philanthropist? I don’t think so. Giving away money to charity really never even entered my mind
   until David actually asked the question during the making of this book. I looked at him blankly.

   “Shave the whales” was the first thing that came to my mind. Obviously I was not born to have
   great financial responsibility.

   Does success change how you think about things? It does. Linux was a different animal when
   there were just fifty very technical users, as opposed to 25 million (or whatever the number is
   today) normal people who use it at least occasionally. And Linux was very different back when the
   only people working on it were people who did it entirely because it was fun and interesting—with
   none of the commercial interests that are so obviously there today.

   And the same is true of Linus the person. Things change, and claiming that this isn’t so doesn’t
   change the facts. Linux is not the same movement it was five years ago, and Linus isn’t the same
   person he was back then. And part of what has made doing Linux so very interesting to me has
   been exactly the fact that it hasn’t been the same, and that new issues have continuously kept
   coming up. And they haven’t been just technological issues, but issues involving how the whole
   meaning of Linux changes in the face of success. Life would be boring otherwise.

   So instead of using the word “spoiled,” I’d prefer to just say that commercial success has made
   both Linux and me “different.” I’d hesitate to say “grown up”—I think, for me, having three kids
   made far more of a difference that way—but simply different. Better, in many ways, but also less
   pure. Linux used to be just for technical people, and a safe haven for geeks. A bastion of purity,
   where technology mattered and little else.

   These days that is not true anymore. Linux still has the strong technical background, but having
   millions of users makes everybody very aware of the fact that you have to be a lot more careful
   about what you do. Backward compatibility is suddenly a factor—and some day, twenty years
   from now, somebody will come along, say that enough is enough, and start his own operating
   system called “Fredix.”[6] Without all the historical baggage. And that’s exactly as it should be.

   But what makes me inordinately proud is that even when “Fredix” comes along, things won’t
   be the same anymore. If nothing else, what Linux has done is to make people aware of a new way
   of doing things, of how open source actually enables people to build on the work done by others.

   Open source has been around for a long time, but what Linux did was to move it into the general
   consciousness. So when Fredix comes along, it won’t have to start from scratch.

   And thus, the world has become a slightly better place.

   Nearly a year after we started working on this book, Linus and I paid a Friday night visit to the
   car racing/batting cage place where we had competed with each other months earlier. This time,
   Linus clobbered me at both activities: He drove faster and made better hits. Later, over Turkish
   food, I blamed my lousy performance on a particularly frustrating day at work.

   He looked up and said: “Well, you’ve got to hang in there for three more months.”

   “Why?”

   “Isn’t that when you vest your first chunk of stock options?”

   The reason I bring this up is because the night of our previous competition at the car
   racing/batting cageplace, Linus confessed that because of his poor memory, he regularly had to
   ask Tove to remind him of his phone numbers. Suddenly he now remembers somebody else’s
   vesting schedule, and he can rattle off where we were when I first mentioned it to him. A year ago
   he seemed to delight in the role of an absent-minded professor, fuzzy about the details of anything
   less significant than SuperString Theory or the memory capacity of his earliest computers. Now he
   is incredibly tuned in.

   Back in January we sat in my old hot tub and I joked about the Marin Historical Commission
   bugging me to donate it to their museum.

   In August he casually says, “Hey, when are you going to donate that hot tub?” He doesn’t have
   to consult an electronic device to remember the dates when Avuton will be visiting. He is plugged
   into the personal details of friends and co-workers in a way he didn’t seem to be a year earlier. In
   fact, he even knows what’s going on with my friends and co-workers. And for a fellow whose first
   words to me on the subject were, “Actually, I don’t remember much of my childhood,” he suddenly
   seems to have conjured up the memories: “Did I tell you how embarrassed I was when my mother
   wanted me to ask my grandfather to give me the extra 100 FM I needed to buy my first watch?”

   The clarity thing was just one way Linus seemed to have changed over the course of an
   important year in his life. There were little things. In November, we took the family road trip to
   Los Angeles that provided the backdrop for the “Meaning of Life” preface, partly because the
   Torvaldses were invited to stay at the Brentwood home of the Finnish Consulate General. Before
   the trip, Linus was glazed-eyed as he scanned the wine counter of a Santa Clara Safeway. “Help
   me pick out wine as a gift,” he said. “I know nothing about wine.” Ten months later he knows
   which of two similar cabernets we should choose from the Bodega Bay Lodge minibar, to drink
   while watching an in-room action movie. I catch him swirling his wine before drinking.

   And then there’s the exercise thing. On my first visit to Linus’s home, he seemed to have a
   typical geek-like cavalier approach to his body and physical well-being, the “my-body’s-just-
   there-to-carry-around-my-brilliant-mind” philosophy. Linus even seemed to take pride in the fact
   that he never exercised. Tove obviously felt differently. Her karate trophies lined a full bookcase,
   and her aerobics videos rested on the television set. And it seemed to be a point of contention.

   “Maybe in five years some doctor will tell me I’ll have to lose weight or something,” Linus said at
   the time.

   I like to exercise and figured it should be a main component of our outings. I wanted to
   introduce him to surfing, but it made sense to start out with boogie-boarding. We drove over to
   Half Moon Bay one afternoon in early May, rented wet suits and boards, and Linus protested
   heavily at the thought of wading into the chilly waters of the Pacific, even in a wet suit. But within
   minutes something amazing happened: He delighted in riding the waves. “This is great,” he
   enthused like a five-year old at one point, slapping me a high five. Of course, about fifteen minutes
   later he developed a nasty leg cramp—from being so out of shape, he reasoned—and had to stop.

   (When the cramp hit, he just sat there in the white water, apparently unable to get up, as waves
   washed over him. My first thought was: “Oh fuck. If I kill this guy, I’ll have millions of nerds on
   my case.”)
   He looked forward to everything we did during the reporting phase of this book: playing tennis,
   racing each other at swimming, doing the scary amusements at Great America, driving golf balls.

   It got to the point at which he became less interested in sitting around talking into my tape
   recorder than he was in whatever activity I had arranged. The mud baths, hiking up Mt.

   Tamalpais, shooting pool, whatever. “I could do this on a regular basis,” he said, sweating
   heavily after playing tennis with me near my home. That time he borrowed both a racquet and
   running shoes. Afterward, he kept his new pair of running shoes in the trunk of his car, just in
   case.

.. _PE43:

THE MEANING OF LIFE II
----------------------

   Have you ever lain back on a warm summer’s night, looking up at the stars, and really wondered
   why you are here? What is your place in things, and what are you supposed to do with your life?

   Yeah, well, neither have I.

   Yet I ended up having a theory about Life, The Universe, and Everything—or at least the subset
   called “Life.” You were introduced to this theory in the preface of this book. And since you’ve
   gotten this far, I might as well explain myself a little more.

   My theory didn’t come about while staring up at the stars, immersed in wonder over the
   immenseness of it all on a clear night. It came about while I was preparing for a speech. When you
   become well known for one thing, people just assume you can be trusted to generate brilliant
   insight into unrelated bodies of knowledge that have been mystifying humankind for millions of
   years. And they want you to share those insights before a herd of perfect strangers.

   No, it doesn’t make much sense. I got into Linux because I was a technology geek, not because
   I was any good at public appearances, let alone philosophizing without prudent limits. But few
   things in life make all that much sense, so I’m not complaining.

   Back to the subject at hand.

   This time I was invited to a local event in Berkeley called “Webrush.” Normally I wouldn’t
   even consider it, but the invitation came through the Finnish Consulate here in the United States
   and being a patriotic person (or at least feeling slightly guilty about hating snow and having
   moved abroad), I had stupidly said “Okay. Jag gör det.[7]”

   Now, nobody expected me to talk about the meaning of life, least of all myself. But this event
   was about life in the networked society, and I was there as the Internet person and representative
   of Finland. Finland, due to Nokia (the largest, best, and most beautiful company in the world as
   any Finn will tell you), is into communications in a big way, and “the networked society” is where
   it is at. We’ve already discussed how there are more cell phones than people in Finland, and the
   current research into finding ways of implanting the things surgically at birth.

   So there I sit, wondering what I should talk about regarding communications. Oh, I forgot to
   mention that most of the rest of the panel would be comprised of philosophers talking about
   technology. This is Berkeley, after all. The two things they take very seriously in Berkeley are
   Berkeley politics and Berkeley philosophers.

   So what the heck. If they were going to have philosophers talking about technology, why not
   have a technologist like me talking about philosophy? Nobody should accuse me of not having
   balls. They might call me terminally stupid (and hey, they probably do)—but chicken?

   Not this geek.

   So there I am, feverishly trying to come up with a subject to speak about the next day. (I never
   get around to doing speeches until it is way too late, so late the evening before the event is usually
   when you’ll find me worrying about it.) And I’m struggling there, trying to ponder the
   “communication society” and what it’s all about, and what Nokia and all the other
   communications companies will eventually evolve into.

   And the best I can do is to just explain the meaning of life.

   It’s actually not much of a “meaning.” It’s more a law of life, hereafter to be called “Linus’s
   Law.” It’s equivalent to the second law of thermodynamics in physics, but rather than explaining
   the devolution of order in the universe, it is about the evolution of life.

   I’m not talking “evolution” in the Darwinian sense here. That’s a different thing—for Webrush
   I was more interested in how society evolves, and how we moved from the industrial society into a
   communications society: What’s next, and why? I wanted to make it sound good, and to make
   enough sense to convince an audience for the duration of a panel discussion. Everybody has his or
   her own agenda, and that day mine was to emerge alive from a panel discussion with two notable
   philosophers.

   So why do societies evolve? What’s the driving factor? Is it really technology that drives
   society?—which seems to be a common view. Was it really the invention of the steam engine that
   got Europe started as the industrial society, and eventually evolved us through Nokia and cell
   phones into the communications society? That seemed to be the philosophers’ take on this all, and
   they seemed to be interested in how technology changes society.

   And I, as a technologist, know that technology drives nothing. It is society that changes
   technology, not the other way around. Technology just sets the boundaries for what we can do, and
   how cheaply we can do it.

   Technology, like the devices it creates, is at least so far inherently stupid. It’s only interesting
   insofar as what you can do with it, and the driving force behind it is thus really human needs and
   interests. We don’t communicate more these days because we have the means to do so—we
   communicate more these days because people are blabbermouths, and they want to communicate;
   and if the means aren’t there, they will be created. Thus Nokia.

   So, my argument went, in order to understand the evolution of society, you have to understand
   what really motivates people. Is it money? Is it success? Is it sex? What fundamentally makes
   people do what they do?

   The one obvious motivational factor that probably nobody will argue with is simple: survival.

   That is what defines life, after all—it survives. It doesn’t just blindly follow the second law of
   thermodynamics, but instead survives despite a universe that seems fairly inimical to the kind of
   complexity and order that is the very underpinning of life. So survival is motivational factor #1.

   In order to rank the other motivational factors, I had to consider how they would stack up
   against that very simple will to survive. The question is not “Would you kill for money?” but
   “Would you die for money?” The answer there is clearly no. So we can safely strike money off the
   list of fundamental motivational factors.

   But there are obviously things that people are willing to die for. There are a lot of heroic stories
   of people and even animals who are in fact willing to die for some larger cause. So plain survival
   alone does not explain the motivational factors that drive our society.

   The other motivations I came up with for the talk in Berkeley were simple and not very
   contested at the panel. So at least somebody agrees with them. (Or, in consideration of the Finnish
   consulate, they were just being polite.) There aren’t very many things that man is willing to die
   for, but social relations is definitely one of them.

   The examples of social motivation being enough to drive people to forget about survival are
   numerous, from the literary Romeo and Juliet (dead not because they wanted anything as crass as
   sex, but because they would rather die than lose their social relationship) to the case of the
   patriotic soldier willing to risk his life for his country and his family—his society. So chalk up
   “social relations” as motivational factor #2.

   The third and final motivational factor is “entertainment.” That may sound trite, but it’s
   unquestionably a very strong force. People die every day doing things that they’re only doing for
   fun. Jumping out of perfectly operational airplanes just to get the rush, for example.

   And entertainment doesn’t have to be trite. It can be a game of chess, or the intellectual
   entertainment of trying to figure out how the world really works. It can be the curiosity and
   exploration of a new world. Anything that makes a person sit in a crowded rocket on top of a
   gadzillion pounds of highly explosive material just to be able to see the earth from space can
   certainly be called “motivational.”

   And that’s it: Survival. Your place in the social order. And entertainment. The three things that
   make us do the things we do. Everything else is what a sociologist would probably call “emergent
   behavior”—patterns of behavior that emerge from those much simpler rules.

   But it’s more than just “these are the things that motivate people.” If that were all, it wouldn’t
   be much of a theory of life. What makes it interesting is that the three motivational factors have
   an intrinsic order, an order that shows up wherever there is life. It’s not just that we’re motivated
   by those three things—they also hold true for forms of life other than human life, and they show
   up as the natural progression for any lifelike behavior.

   Survive. Socialize. Have fun. That’s the progression. And that’s also why we chose “Just for
   Fun” as the title of this book. Because everything we ever do seems to eventually end up being for
   our own entertainment—at least if we have been given the possibility to progress far enough.

   You don’t believe me?

   Look at how we classify animals as “lower” or “higher” order animals. They all survive. But
   the higher you get in the evolutionary scale, the more you are likely to first create social patterns
   —even ants, fairly low down on the scale, have very strict social patterns—that eventually
   progress into having fun. Playing with your food is not something ants tend to do a lot…. But cats
   do. Ants don’t enjoy sex, either.

   Yes, take something as basic (and delightful) as sex. I don’t claim that it is one of the
   fundamental motivational factors per se—but it’s a great example of rather fundamental human
   behavior that has undergone the whole evolution of life. There’s no question that it started out as a
   pure survival trait. After all, even plants have “sex” in the survival sense, and at some stage
   billions of years ago, sex was probably purely a survival thing for those single-celled animals that
   would slowly evolve into geeks and other humans. And there’s no question that sex long ago
   evolved from a purely survival phenomenon into a very social phenomenon. It’s not only among
   humans that you find marriage ceremonies and a lot of social infrastructure for getting laid. Think
   of the ritual dance of the Sandhill crane—which mates for life, by the way. In fact, inordinate
   amounts of energy get spent every day on the social courtship rituals associated with the simple
   matter of reproduction of all the species.

   Entertainment? That too, I assure you. Not just among humans, but it is probably no
   coincidence that the most evolved species on the planet also seems to make the most out of the
   entertainment aspect of sex.

   The progression of survival to social behavior to entertainment is everywhere. Take war: very
   much a survival trait back when the only way to get to the watering hole was to kill the people in
   your way who wanted that source of water for themselves. War has long since become a tool for
   maintaining social order in society. And with the advent of CNN, it has become entertainment.

   Like it or not, this seems to be the inevitable progression.

   Civilization itself follows the same larger pattern. Originally it was a way to ensure survival by
   cooperation and power in numbers. That is nothing unique to humans. Most animals and even
   plant life create societies in order to survive better by helping each other. And what is so
   interesting is how society itself moves from being survival-based toward being more social; how
   all human civilizations end up building bigger and better roads and communication channels in
   order to be able to better socialize.

   And in the end civilization too becomes geared toward entertainment. Look at the Roman
   Empire—famous not only for its road building and strong social order, but also, especially later,
   even more famous for its entertainment.

   Or look at the United States today. Does anybody doubt that the film and computer-game
   industries are not about ushering in the entertainment society? From having been niche markets
   not that long ago, they are now among the biggest industries in the richest country in the world.

   And what is interesting to me as a technologist is how this pattern repeats itself in the
   technology we create. We call the early age of modern technology the Industrial Age, but what it
   really should be called is the Age of Technological Survival. Technology, up until not that long
   ago, was almost exclusively for surviving better—being able to weave cloth better and to move
   goods around faster. That was some of the original impetus for it all.

   We call the current period the Information Age. It’s a big shift. It’s about technology being
   used for communication and spreading information—a very social behavior—rather than just
   surviving in better style. The Internet, and the fact that so much of our technology is starting to
   move toward it, is a big road-sign of our times: It means that people in the industrialized countries
   are starting to take the survival thing for granted, and suddenly the next phase of technology
   becomes the big and exciting one: the social aspect of communication technology, of using
   technology not just to live better but as an integral part of social life.

   The ultimate goal, of course, is still looming. Past the information society, the entertainment
   society. A place where the Internet and wireless communications twenty-four hours a day is taken
   for granted and doesn’t get any headlines anymore. A time when Cisco is the old market, and
   Disney Corporation owns the world. A time probably not too far in the future.

   So what does this all mean? Probably not much. After all, my theory of the meaning of life
   doesn’t actually guide you in what you should be doing. At most, it says “Yes, you can fight it, but
   in the end the ultimate goal of life is to have fun.”

   It does, to some degree, explain why people are willing and eager to work on projects like
   Linux on the Internet. For me, and for many other people, Linux has been a way to scratch two
   motivational itches at the same time. Taking survival for granted, Linux has instead brought
   people both the entertainment of an intellectual challenge and the social motivations associated
   with being part of creating it all. We may not have seen each other face-to-face very much, but
   email was much more than just a dry exchange of information. Bonds of friendship and other
   social ties can form over email.

   This probably also means that if and when we ever meet another intelligent life form in this
   universe, their first words are not likely to be “Take me to our leader.” They’re more likely to say
   “Party on, dude!”

   Of course, I might be wrong.


.. _PE44:

Back Cover
==========

   [1]
   Warning: Intermediate geek language until page 119.

   [2]
   Boy, that has to be an acquired taste. I’m guessing it started out with Puritans who couldn’t drink
   beer because it has alcohol. So they concocted a beverage that didn’t have alcohol in it and
   happened to be made with roots, and they called it “root beer” to fool people into thinking it was
   good stuff. And after ten generations of people being fooled into thinking it was good stuff, people
   bought into it. Today, Americans like root beer because they have ten generations of genetic
   engineering behind them.

   [3]
   This, as anybody who lives in San Jose can tell you, is called IRONY. San Jose doesn’t have
   nightlife. People living here drive to San Mateo if they actually want to have fun.

   [4]
   Actually, Einstein did work for the patent office when he did his work on special relativity. But he
   was special. Even most patent clerks admit that.

   [5]
   There’s nothing wrong with a Pontiac Grand Am, and it’s a fine car. It’s also probably the most
   “average Joe” car in the whole United States, and some journalists have found it interesting that I
   would have such an embarrassingly regular car. It’s not even Japanese, for chrissake! People will
   lose all respect for me when I admit that I spent hours agonizing over the exact color of my new
   car—a much less practical BMW Z3. Remember—“Just for Fun.” That car is completely and
   utterly useless for anything but fun. And that’s just the way I like it.

   [6]
   Or “Diannix,” as the case may be. In another twenty years, hopefully computer science will have
   progressed past the current male-dominated scene it is now….

   [7]
   Yes, sure, I’ll do it.

