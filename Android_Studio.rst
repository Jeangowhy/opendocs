

/Android Studio & Intellij IDEA
===============================

.. container:: 

   IntelliJ IDEA – the Leading Java and Kotlin IDE, by JetBrains

   IntelliJ 是一家什么样的公司？它是 JetBrains 的前身，是位于捷克的软件开发公司，该公司
   位于捷克的布拉格，并在俄罗斯的圣彼得堡、美国麻州波士顿都设立了办公室，该公司开发了最具竞争力
   的编程语言：Kotlin，以及最好好卖的软件开发平台：Intellij IDEA Platform，语言与工具相互
   成就对方！官方称拥有有 600 万个人用户（官网最新称 700 万+），有 40.5 万企业客户。软件多到
   需要专门开发一个 JetBrains Toolbox 给用户来做管理。微软的 Visual Studio Code 在轻量级
   编辑器迅猛发展，不断挤占 Sublime Text/Atom 等轻量级编辑器的市场，同时也威胁到 JetBrains
   旗下各种单一语言开发工具的市场份额。因此，JetBrains 也跟进推出全新的轻量级编辑器 Fleet_，
   并称其为更轻量的“下一代 IDE”。JetBrains Fleet_ 免费版有功能限制，包括团队远程协作开发，
   官方考虑表示将考虑开源部分基础支持代码。更简洁的 UI：菜单工具栏，外加左、下、右可组合面板。
   同样良好支持 Markdown 文档编写与同步预览，依然不支持 reStructuredText 文档。稳定性也
   对得起公共预览版（Public Preview），体验三回，都在半小时内导致 Windows 10 死机。卸载倒是
   很干净，因为插件安装在主程序安装目录。占用空间方面，ToolBox 程序 427 MB，Fleet 664 MB。
   其它插件、附加功能另算，主要有 Smart Mode，使用的 intellij-plugin，这个插件提供各种语言
   的智能提示功能，接近 4GB 体量。内存占用方面比 VS Code 更大，更是不能和 Sublime Text 比，
   CPU 占用也更高，流畅度稍有不足。

.. _Fleet: https://www.jetbrains.com/fleet/
   
   .. figure:: https://segmentfault.com/img/remote/1460000041083798

      三名创始人都是写代码的俄罗斯 Geek 出身，毕业于圣彼得堡国立大学，这家公司创立于
      2000 年互联网泡沫破灭之际，从来没有拿过任何外部的资金。2021 年 11 月 29 日，
      JetBrains 在官方博客宣布，推出轻量级编辑器 Fleet，并称其为“下一代 IDE”，
      对标微软的 Visual Studio Code。

      2000 年，互联网泡沫破灭导致许多年轻的科技公司倒闭，投资者在这个时候大幅度停止投资，
      而此时，却有三位俄罗斯软件工程师 Sergey Dmitriev 、Eugene Belyaev 和 Valentin Kipyatkov
      却逆势创业进入了开发生态系统，在捷克布拉格创立了 JetBrains（原名 IntelliJ Software）。

   IDEA 是 JetBrains 公司推出的跨平台集成开发环境，分为免费社区版与收费旗舰版，这两个版本的
   差异主要在对 JavaEE 开发的支持上，免费的社区版只支持 JavaSE, Android, Groovy, Scale。

   Android Studio 是专为 Android 开发定制的 IDEA，主要包含 Android Support 插件，以及
   NDK 插件（支持 C++ 开发）。Google 花重金向 Jetbrains 购买 C++ 代码分析和索引技术，
   这些技术之前只用在收费的 Clion 上面，现在 Google 让大家能在 Android Studio 中免费使用。
   免费的社区版 Intellij IDEA 没有这个好处。

   Android Studio Jellyfish 包含 IntelliJ 2023.3 平台版本，该版本具有许多新功能。例如，
   全面支持最新的 Java 21 编程语言功能、提供修改操作的直观浮动工具栏，以及调试程序中的运行到
   光标内嵌选项以加快工作流。Studio Bot 更名为 Gemini_，它是多模式输入的 AI 编码助手，可以
   接受文本和图像输入。依托 AI 技术的对话式体验，可通过回答 Android 开发查询帮助您提高效率。
   如需启动 Gemini_，依次点击 View > Tool Windows > Gemini_。然后，登录您的 Google 帐号，
   如果您尚未登录。因为登录问题，国内网络暂时不能使用。

.. _Gemini: https://developer.android.google.cn/studio/releases?hl=zh-cn

   Android Studio 默认会自动保存文件的修改，可以配置定期或在切换文件时自动保存正在编辑的文件。
   File -> Setting -> Appearance & Behavior -> System Settings -> Auto Save，
   旧版本提供了 Synchronization -> Save files on frame deactivation 选项启用自动保存。

   Android Studio Giraffe 2022.3.1（长颈鹿版）提供了新的 UI 方案，界面布局和图标设计更合理。
   主菜与工具条合并到界面的最顶端（标题栏），也可以设置为传统的分离显示形式，当然新版 UI 更紧凑。
   File -> Setting -> Appearance & Behavior -> Enable New UI

   Android Studio 已经把 "Document for Android SDK" 文档下载功能取消，提示文档集成
   到了源码中，不再需要手动单独安装 Android API 文档，只需要安装 SDK platform source。
   可以使用 Sublime Text 这样的工具，查看源代码文件也很方便。

   Android Studio 提供便利的快捷键配置方案，``Ctrl+``` 调出 Quick Switch Scheme...
   面板，可以快速切换主题（Theme）、快捷键方案（Keymap）、显示模式（View Mode），以及
   Editor Color Theme 和 Code Style Scheme。
 
   以下快捷键（Windows Keymap）可以调出 Switcher 面板，并直接切换到相应的功能面板：

      *  ``Ctrl+G`` Goto Line:Column
      *  ``Ctrl+N`` Goto Class...
      *  ``Ctrl+Shift+N`` Goto File...
      *  ``Ctrl+Shift+N`` Goto Symbol...

   ``Ctrl+Tab`` 调出 Switcher 面板，同时可以切换文件或者其它功能区面板（Alt + 数字切换）。

   注意：在设置快捷键时，一些特殊按键（Tab, Enter, Escape）不能直接输入，可以点击右侧的 + 图标
   弹出辅助功能菜单进行设置。另外，如果启用 Support screen readers，这将和 Switcher 快捷键
   冲突，可以设置其它快捷键。“屏幕阅读者”会使用 ``Ctrl+Tab`` 切换对话框 UI 控件的焦点，还会
   隐藏掉工具的悬停提示信息。另外，Profile & Debug APK 创建的项目文件不能修改，只读文件可以
   通过菜单切换为可写文件: File -> File Properties -> Make file writable。

   另外，Presentation Mode 可以将 Android Studio 作为幻灯片一样展示，通过放大视图模拟
   大屏幕的幻灯片展示。还可以创建版权信息模块，并使用右键菜单添加到对应 Scope 的文件类中：
   Gernerate -> Copyright。需要先给不同的文件创建或者指定版本模板，否则执行此菜单功能会提示：
   No Copyright Available。设置：Editor -> Copyright -> `Copyright Profiles`_
   向此面板添加版权模板，并指定版本模板适用的文件范围（Scope），并将设置好的版权模板添加到
   Copyright 列表中，设置合适的 Scope，比如给脚本文件使用的版权就选择 Scratch and Console。
   还可以在 Formatting 中设置具体文件类型如何处理版权信息内容。

.. _Copyright Profiles: https://www.jetbrains.com/help/idea/copyright-profiles.html

   完成以上设置后，执行 Code -> Gernerate -> Copyright 还可能没有生成任何版权内容，这功能
   就太让人操碎心了。还不如使用 GNU Coreutils 工具包，find 命令查找要添加版权的文件，sed 命令
   读取版权文件并插入。正所谓，如无必要，勿增实体！

   Android Studio 提供的 Markdown 实时预览与编辑支持，但是还没有支持 reStructuredText。

   Android Studio 提供了强大的 Help -> Find Action 面板，用于跳转文件、类型定义、符号、Git
   分支，或者执行各种菜单项或命令。是可以和 Sublime Text 跳转系统相较量的功能，完全不输半分。
   Help -> My Productivity Guide 还记录了用户的所有操作频度数据，这一功能确实可以在提升
   用户体验上起到非常大的推动作用。只有知道产品有什么类型的用户在使用，以及用户最常用的功能是什么，
   这样才能有更合理地 UI 界面设计。而这一切 Intellij IDEA 做到了，Sublime Text 也做到了。
   同时，用户也可以根据自己的习惯（可能未察觉）来设置软件，以提升软件体验。但是，Android Studio
   缺点也明显，巨耗内容，性能欠佳。

   另外，对于精神洁癖的人来说，Android Studio 还有一个毛病，这得从我无意将 Kotlin 1.9.10 
   源代码中的的一个脚本搬到了编辑器上开始。这本来是个小事，正如习惯那样，编辑器应该打开或者将文件
   添加到工程。事实上是可以的，取决于拖放到编辑器区域上，还是项目目录结构上。前者仅仅是打开文件而已，
   并且这是默会的操作。但是 Android Studio 不仅打开了文件，还将文件当作 “Non-Project File”，
   对的，就如单词所表达的内容，拖动到编辑器上并打开的文件不属于项目的文件，逻辑上也确实是这样的。
   问题就在于，没有任何可以关闭这个文件的操作！！！尝试了重建缓存（File -> Invalidate Caches）,
   尝试了删除功能（Edit -> Delete），这只删除文件的字符串内容，不删除文件。也试了代码重构工具的
   安全删除功能（Refactor -> Safe Delete），当然它只用于重构光标所在位置的代码结构之用。最后，
   不得不尝试直接在操作系统层面删除文件，但是一文件回到磁盘，Android Studio 又出出现这些非工程
   文件，真像一个幽灵一样。唯一可以原谅这种反人性的设计就是，只要这些文件安静躺着，用户不点击主界面
   上的文件列表，这们就不会占用图形界面的任何空间，一点也不碍眼。

   Android Studio 提供了强大的类型关系分析工具，View -> Tool Windows -> Structure 面板
   可以显示类型对象的继承关系，可以在面板中切换显示类型的属性（Properties）、字段（Fields）、
   私有类型（Non-Public）、类型继承关系（Inherited）、匿名类（Anonymous Classes）。还可以
   设置 Navigation with Single Click 以实现单次点击就显示源代码。并且配套提供 `Reader Mode`_，
   这个读者模式极大地方便了阅读源代码中的注解文档，这就不用耗时去查阅 Android API 文档。
   当光标位于源代码中的类型符号上时，按快捷键 ``Ctrl+Q`` 可以打开 Quick Documentation。
   配合 Goto Class 跳转功能就可以查看任意 Android 构架的源代码文档。还可以设置、添加工程模块，
   File -> Project Structure -> Modules，支持创建 Android 或 NDK，Java 或 Kotlin 模块，
   还可以导入 Gradle 或 Eclipse 工程。也可以在 Dependecies 面板中添加依赖的库。

   `Vim Emulation`_ 是模拟 Vim 编辑，此编辑器拥有强大的键盘操作能力，Emacs 编辑器是同类产品。

.. _Reader Mode: https://www.jetbrains.com/help/idea/reader-mode.html
.. _Vim Emulation: https://www.jetbrains.com/help/idea/vim-emulation.html

   Emmet_ 是一个用于快速软件 XML/HTML 标签结构的辅助工具，只要按语法输入模板字符串，就可以
   扩展生成 XML/HTML 标签层级结构。先配置启用 Editor -> Emmet（Enable XML/HTML Emmet），
   还可以启用模板预览（Enable abbreviation preview），在输入 Emmet 模板时就会悬窗显示
   当前模板扩展后内容。语法参考文档 `Emmet documentation`_。

   例如，输入模板 ``#page>div.logo+ul#navigation>li*5>a{Item $}``，按快捷键 Tab 就会
   将 abbreviation syntax 生成如下扩展内容：
   
   ::

      <div id="page">
          <div class="logo"></div>
          <ul id="navigation">
              <li><a href="">Item 1</a></li>
              <li><a href="">Item 2</a></li>
              <li><a href="">Item 3</a></li>
              <li><a href="">Item 4</a></li>
              <li><a href="">Item 5</a></li>
          </ul>
      </div>

.. _Emmet: https://www.jetbrains.com/help/idea/settings-emmet.html

.. _Emmet documentation: https://docs.emmet.io/abbreviations/

   Android Studio 定制版只是众多 IDEA 定制版本之一，相当于社区版叠加 Android 扩展插件，
   功能上与 IntelliJ IDEA Ultimate 差别，毕竟功能重叠越多，越会降低官方旗舰版本的竞争力。
   华为的 HarmonyOS 开发环境 Huawei DevEco Studio 也一样是定制版本 IDEA。HarmonyOS
   目前还是基于 Android Open Source Project (AOSP) 扩展出一个运行环境，基于 apk 应用
   之上增加了自家的 OHOS 运行环境。另外，通过切割 Android 功能，又分叉出用于嵌入式开发环境
   中轻量级 OpenHarmony。HarmonyOS Next 如何发展，暂时未知。

   Android Studio 已经提供应用布局 XML 可视化设计。另外，也可以使用 IntelliJ IDEA 开发
   Java Swing GUI 应用，至少有两个选择：使用内置的 `Swing GUI Designer`_，或者使用
   第三方插件 JFormDesigner 设计基于 XML 配置的 GUI 应用。每个表单（form）都可以单独运行、
   预览，只需要打开 form 文件，占击右键菜单的 Preview 运行 GUI 表单。另外，推荐使用 JavaFX
   图形框架来开发 GUI 应用，Intellij IDEA 集成了 JavaFX `Scene Builder`_，只需要启用
   内置的 JavaFX_ 插件即可： New Project -> JavaFX -> JavaFX FXML Application
   另外，JavaFX Runtime for Plugins 插件可以为其它插件提供 JavaFX APIs 开发图形界面。

   新版 Android Studio 使用 ``Running Devices`` 工具窗口替代旧版本的 Devices Monitor。
   并且集成了 ``Layout Inspector``，视图布局调试性能提升 50%，直接在工具面板上调试 UI 布局。
   默认配置为启用状态，并且配置在运行 App 时自动连接 ``Layout Inspector``，可以在工具配置
   面板中修改：Settings -> Tools -> Layout Inspector。

   连接手机后，使用 Device Manager 工具窗口查看已经连接的设备，并点击右侧的 Satart Mirroring
   图标开始使用 ``Running Devices`` 工具观察手机屏幕的投屏。

   Android Studio 运行 App 时，打开 ``Running Devices`` 工具窗口，并点击面板右上角的
   Toggle Layout Inspector 图标，就可以打开 ``Layout Inspector`` 工具面板。App 连接
   后就会显示布局的构架条。布局调试面板中划分为三块：

   -  Layout Display: 主屏显示手机投屏图像以及布局元素的线框；
   -  Component Tree: 组件层级树显示 UI 组件的层级关系，可以点击组件以查看其属性。
   -  View Attributes: 视图组件的属性面板，显示 View 组件对象的属性列表；

   如果投屏或连接失可以关掉 ``Running Devices`` 窗口再重开，或者重新运行 App。注意，需要
   通过 Android Studio 运行，不能直接在手机上执行。

   点击工具栏中的 Toggle Deep Inspect 功能，可以直接点击并显示 UI 组件的层级与属性。
   使用 **Overlay** 功能可以向投屏叠加一张设计参考图片，点击 **Load Overlay** 指定参考图。
   **Layout Display** 提供了 3D 可视化效果展示 UI 组件的布局，但需要先保存快照（Snapshot
   Export/Import），然后再点击快照的探测器（Inspector）中的 **3D Mode** 图标观察布局模型。

   .. figure:: https://developer.android.google.cn/static/studio/images/li-3d-mode.png
      :alt: Layout Inspector: 3D view
      :width: 80.0%

      **Figure 2.** Rotated 3D view of a Layout.

   IntelliJ IDEA 社区版本开发 Android 应用先要安装 Android 插件，可选安装 WiFi ADB 插件。
   然后设置 Android SDK：File -> Settings -> Languages & Frameworks -> Android SDK
   另外，XML 布局文件可视化设计插件（Android Design Tools）似乎搜索不到，但是打开 XML 文件
   会提示有插件可以使用。虽然社区版本可用于 Android App 开发，但是调试功能较弱，不一定正常使用。
   反之，Android Studio 作为专用的 App 开发工具，方便浏览源代码中的注解文档以及类型层级关系，
   它又阉割掉了社区版本的一些基本功能，其中一个就是不能添加 Android 系统之外的模块。

   社区版和 Android Studio 安装包的大小尺寸基本都是 2GB 多点，但是由于 Android Studio
   作为 APP 专用开发平台，它的插件配置基本都是预置好的。但是社区版就不同了，它会根据使用到的
   功能添加插件或 Gradle 工程依赖。这会导致磁盘空间大量占用。以下就是部分特大尺码的插件或依赖：

   Gradle differentiates between two kind of components:

   -  local components (like projects), built from sources
   -  external components, published to repositories

   Gradle 缓存目录包含多个子目录用于管理不同的依赖构件：

   .. code-block:: bash

      jdks                 保存项目中依赖的 JDK；
      wrapper              保存项目中 gradle-wrapper.properties 指定 Gradle 版本安装包；
      daemon               保存守护进程产生的日志；
      caches/8.7           保存 Gradle DSL 脚本产生的临时文件，数字代表版本号；
      caches\jars-9
      caches\modules-2\files-2.1 可执行命令工具，比如 Kotlin 编译器等
      caches\transforms-2
      caches\transforms-4
      caches\transforms-3

   Artifact（构件、工件）代表的是一个领域对象，它包含了一个要被发布的文件，和它怎样被发布的信息。
   如一个 jar 文件和它的 pom 文件。

   files-2.1 目录用于保存下载到的依赖包，jar/aar 都下载到这里。

   .. code-block:: bash

      #!/usr/bin/env bash

      function topsize()
      {
          folder=$1
          depth=$2
          if [[ $depth == "" ]]; then depth=1; fi
          du -hd "$depth" "$folder" | sort -hr | head -n 30 >> $0
      }

      # topsize "$USERPROFILE\.gradle\caches" 2
      # topsize "$USERPROFILE\.gradle\caches\modules-2\files-2.1"
      # topsize "$USERPROFILE\.gradle\caches\jars-9"
      # topsize "$USERPROFILE\.gradle\caches\transforms-4"
      # topsize "$USERPROFILE\.gradle\caches\transforms-3"

      size=4.2G   tree -L 3 "$USERPROFILE\.gradle\caches\modules-2\files-2.1"
      size=4.2G   tree -L 3 "$USERPROFILE\.gradle\caches\modules-2"
      size=1.8G   tree -L 3 "$USERPROFILE\.gradle\caches\jars-9"
      size=1.3G   tree -L 3 "$USERPROFILE\.gradle\caches\transforms-4"
      size=192M   tree -L 3 "$USERPROFILE\.gradle\caches\8.7"
      size=177M   tree -L 3 "$USERPROFILE\.gradle\caches\transforms-3"

      # com.jetbrains.intellij.idea ideaIC - Part of elevator/launcher UAC IntelliJ kit. 
      size=3.4G   tree -L 3 "$USERPROFILE\.gradle\caches\modules-2\files-2.1\com.jetbrains.intellij.idea"
      size=343M   tree -L 2 "$USERPROFILE\.gradle\caches\modules-2\files-2.1\org.jetbrains.kotlin"
      size=85M    tree -L 3 "$USERPROFILE\.gradle\caches\modules-2\files-2.1\com.android.tools.external.com-intellij"
      size=85M    tree -L 3 "$USERPROFILE\.gradle\caches\modules-2\files-2.1\com.android.tools.build"

      # kotlin-compiler-embeddable-1.9.23.jar
      size=157M   tree -L 3 "$USERPROFILE\.gradle\caches\jars-9\867ac4a01fbe42381fe73b87be3a416a"
      # kotlin-compiler-embeddable-1.9.20.jar
      size=157M   tree -L 3 "$USERPROFILE\.gradle\caches\jars-9\21b039d25b4f37a11678f6b784ea752c"
      # gradle-api-8.5.jar
      size=147M   tree -L 3 "$USERPROFILE\.gradle\caches\jars-9\o_80e906e504f7ce7683a4a2b7620ae169"
      # kotlin-compiler-embeddable-1.8.22.jar
      size=144M   tree -L 3 "$USERPROFILE\.gradle\caches\jars-9\8fa220ef21385a3519e9105d711e7fff"
      # gradle-api-8.5.jar
      size=132M   tree -L 3 "$USERPROFILE\.gradle\caches\jars-9\c016999f917041cee0baea3eb6465f5b"
      # lib.jar
      size=114M   tree -L 3 "$USERPROFILE\.gradle\caches\jars-9\o_ed11450c74da0f2bfd54f85e822368a6"

      # Gradle API Impldep - JetBrains IntelliJ
      size=176M   tree -L 3 "$USERPROFILE\.gradle\caches\transforms-4\e5067b8a1eb024607119311d2e2ee972"
      # Gradle-8.7 Sources
      size=174M   tree -L 3 "$USERPROFILE\.gradle\caches\transforms-4\69955912123c68eecd096b71c66ee211"
      # Kotlin Compiler (embeddable) 1.9.0
      size=153M   tree -L 3 "$USERPROFILE\.gradle\caches\transforms-4\0ea9ca035fbb3a3937f0c077e06f5d4e"
      # instrumented-util-8.jar
      size=150M   tree -L 3 "$USERPROFILE\.gradle\caches\transforms-4\40a61d734b7c3d5434942e7474847a19"
      # Kotlin Compiler (embeddable) 1.8.22
      size=144M   tree -L 3 "$USERPROFILE\.gradle\caches\transforms-4\f16519c75ec4370dd2a67effda0d9b7e"

      # GdScript2 language plugin for Godot 4.0+.
      # jetified-godot-lib.template_debug.aar
      size=81M    tree -L 3 "$USERPROFILE\.gradle\caches\transforms-3\e9aa1ee0a8fb7b97d89e4ebce377c6b3"
      # jetified-godot-lib.template_release.aar
      size=77M    tree -L 3 "$USERPROFILE\.gradle\caches\transforms-3\324e293efde58d0d90a3e06bb5ae42fe"

   Android Studio 不能识别模块问题：

   .. code-block:: bash

      > Configure project :
      Project : => 'com.jeango.app_fx' Java module

      > Task :compileKotlin UP-TO-DATE
      > Task :compileJava UP-TO-DATE
      > Task :processResources UP-TO-DATE
      > Task :classes UP-TO-DATE
      > Task :jar UP-TO-DATE

      > Task :HelloApplication.main() FAILED
      Error occurred during initialization of boot layer
      java.lang.module.FindException: Error reading module: C:\kotlin\MyEmpty\app_fx\build\classes\java\main
      Caused by: java.lang.module.InvalidModuleDescriptorException: Package com.jeango.app_fx not found in module

   可识别的 Module 会在工程文件视图中，在文件图标右下角显示一个蓝色标记。检测不到模块的一个可能是
   模块被记录到 ignored files 列表。解除设置：File -> Setttings -> Build Tools -> Maven -> ignored files

   如果模块可识别，但是执行时出现 ``InvalidModuleDescriptorException`` 异常，也就 Gradle
   命令输出上面的内容，意思是找不到程序包（Package）。这种问题可能是由于构建生成的文件存在错误，
   可以尝试重新构建模块，执行工程面板中的模块的右键菜单：Project -> Module -> Rebuild Module
   或者使用 Gradle 工具面板中罗列的命令：View -> Tool Windows -> Gradle -> Build -> Clean
   或者直接执行命令 ``./gradlew clean`` 清理构建缓存文件，再重新构建工程。直接运行 Gradle 命令
   和 Android Studio 可能会有不一样的结果，这可以帮助定位问题来源。


/Android SDK & NDK
==================

*  `AOSP Architecture overview <https://source.android.google.cn/docs/core/architecture>`__
*  `Android API Level <https://developer.android.google.cn/guide/appendix/api-levels.html>`__
*  `Download the Android source <https://source.android.google.cn/docs/setup/download>`__


Android OS 源代码包括三部分： 

*  1. `AOSP - Android Open Source Project <https://source.android.google.cn/>`__ 
   开源系统提供 Android 系统底层框架，包括定制的 Linux 内核，Dalvik 虚拟机和 Android
   应用层框架等。AOSP 的大部分源码采用 Apache 2.0 授权模式发布，另外专用的 Linux 内核部分
   采用 GPL 授权。Android SDK sources 目录下的就是 Java API framework 源代码，包含诸如
   Activity、View 等等类型的实现。

   Apache 2.0 授权规定可以任意使用源码并且可以闭源。GPL 授权规定，对源码的任何修改都必须开源。
   Linux 内核的授权是 GPL，AOSP 修改了 Linux 内核，所以 AOSP 必须开源。

*  2. GMS - Google Mobile Service 移动服务，Google 提供的一系列用以提高用户
   移动体验的应用和服务，包括置服务和内购功能，还有一些 Google 的应用：GMail，Chrome，
   Google 地图，Google+ 等。GMS 提供了很好的特性，但是它本身闭源。为了获取 GMS 的授权，
   必须通过 Google 的测试。

*  3. 基于 AOSP 源码开发独立的 Android 系统 AOSP 是开源的，任何人都可以修改 AOSP 代码
   开发独立于 AOSP 的 Android 系统。因为 AOSP 采用 Apache 2.0 授权，所以修改 AOSP 后
   的代码不需要开源。Amazon 的 Kindle Fire 和众多国产手机厂商的系统都属于这一类。AOSP 的
   所有源代码是可见的，而 GMS 和基于 AOSP 的独立 Android 系统源码是不可见的。

.. container:: 

   Android SDK (Software Development Kit) 是开发 App 的必要环境，它提供以多个开发工具组件。
   Android Studio 提供的 SDK Manager 功能用于安装 SDK 的各个组件，这些组件组织形式如下，
   需要根据开发的应用运行玩意条件来选择 API 版本或者对应 Android OS 版本号：

   ===================================  ==========  ==============  ====================
   SDK/NDK 组件                          是否必需安装  安装目录          安装版本参考
   ===================================  ==========  ==============  ====================
   **Android SDK Platform-Tools**       ✔          platform-tools  Android API 34, Android 14 ("UpsideDownCake")；
   **Android SDK Platform Libraries**   ✔          platforms       Android SDK Platform 32 (revision 1)
   **Android Framework Sources**        可选安装      sources         Sources for Android 32 (revision 1)
   **Android SDK Build-Tools**          ✔          build-tools     Android SDK Build-Tools 33.0.3
   **Android SDK Command-line Tools**   可选安装      cmdline-tools   Android SDK Command-line Tools 13.0
   **CMake**                            ✔          cmake           CMake version 3.10.2.4988404
   **Android Support Library**          可选安装      cmdline-tools   Android SDK Command-line Tools 13.0
   **Android Emulator**                 可选安装      emulator        Android Emulator v.34.2.13
   **Android Emulator Images**          可选安装      system-images   ARM EABI v7a System Image
   **Android NDK**                      可选安装      ndk             NDK (Side by side) 26.3.11579264
   **Android Support Library package**  可选安装
   **Google APIs**                      可选安装      add-ons
   ===================================  ==========  ==============  ====================

   各个 SDK 功能及安装目录说明如下：
   
   -  `Android SDK Platform-Tools`_ 和 `SDK Platform Libraries`_ 依赖库通常一起安装。
      平台工具包提供了一个最重要的工具：Android Debug Bridge (ADB)，它用于向 Android 系统
      安装 APP 以及其它调试功能。包含设备的连接、日志的获取、发送 APK 安装包以及运行 APP。
   -  `Android SDK Build-Tools`_ APK 构建、编译器工具套件，包括：
      硬件底层的抽象接口语言 `Android Interface Definition Language (AIDL)`__。
      资源打包工具 AAPT (Android Asset Packaging Tool) 。
      `LLD - The LLVM Linker <https://lld.llvm.org/>`__, 
      `Renderscript source compiler <https://developer.android.google.cn/guide/topics/renderscript/compute>`__。
   -  `Android SDK Command-line Tools`_ 是一组额外的命令行工具，包括：
      用于 SDK 安装管理的 sdkmanager，和虚拟机管理的 avdmanager，它们都是 JAR 程序，通过脚本调用。
   -  Android Emulator 是模拟器（QEMU），需要搭配 Android OS 系统镜像文件（Images）一起使用。包含：
      - **emulator**：Android Emulator，用于加载 QEMU 实现的各种 CPU 构架的模拟器。
      - `qemu-img`_：虚拟磁盘工具，QEMU disk image utility。
      - `mksdcard`_： FAT32 虚拟 SDCARD 镜像文件创建工具。
   -  Android NDK 只在需要基于 C/C++ 开发应用时使用。
   -  `CMake`_ 项目自动化构建工具。
   -  `Android Support Library`_ 是向后兼容（兼容旧版本）的 Android framework APIs 的补充。
   -  `Android Google APIs`_ 附加的 Google Maps, Google Drive 等开发接口。

   RenderScript APIs 是高性能图形脚本编程接口，允许您编写高性能图形渲染和原始计算代码，其中的
   图形概念和 OpenGL 类似。Android SDK API Level 11 (Android 3.0, Honeycomb) 系统引入。

   Android Studio 通过 Android Framework Sources 分析，以及 Reader Mode，可以完全取代
   帮助文档。镜像网站可以到的 Android 离线文件最高只有 `Android API Level 24`_。另外一个
   版本包含两个分卷 Android API Level 22 (CodeName=MNC)。由于离线文档中 HTML 会请求受限
   资源，导致加载非常缓慢。可以使用镜像网站提供的文件，也可以像本文档一样，使用 panddoc 等工具
   转换为 reStructuredText 或者 Markdown 等文件阅读的格式。

   每个 platform 版本都对应有虚拟机系统镜像（system image），支持掌上、TV、穿戴、手机行不同设备。
   并且镜像按其适用的 CPU 构架命名，比如名称中包含 Intel x86 或 ARM EABI。系统镜像名称包含
   Google APIs 表示其支持访问 Google Play 服务，名称包含 Google Play 表示带有 Google Play Store。

.. _Android API Level 24: https://mirrors.cloud.tencent.com/AndroidSDK/docs-24_r01.zip
.. _Android Support Library: https://emanual.github.io/Android-docs/tools/support-library/index.html
.. _Android Interface Definition Language (AIDL): https://source.android.google.cn/docs/core/architecture/aidl
.. _Android SDK Command-line Tools: https://developer.android.google.cn/tools
.. _Android SDK Platform-Tools: https://developer.android.google.cn/tools/releases/platform-tools
.. _Android SDK Platform: https://developer.android.google.cn/tools/releases/platforms
.. _Android SDK Build-Tools: https://developer.android.google.cn/tools/releases/build-tools
.. _qemu-img: https://www.qemu.org/docs/master/tools/qemu-img.html
.. _sdkmanager: https://developer.android.google.cn/tools/sdkmanager
.. _avdmanager: https://developer.android.google.cn/tools/avdmanager
.. _mksdcard: https://devdoc.net/android/Android-r15/guide/developing/tools/mksdcard.html

   官方网站 `Android Developer`_ 在国内访问受限，解决方法是使用镜像网站。Android Studio
   本身也配置了一个可用的服务器，`dl.google.com`_，但未提供目录索引页面，不能手动下载安装包，
   除非有相应的链接。为保障安装包的下载，Android SDK -> SDK Update Sites 添加以下镜像服务器：

   - 腾讯： https://mirrors.cloud.tencent.com/AndroidSDK/
   - 阿里： https://mirrors.aliyun.com/android.googlesource.com/

.. _Android Developer: https://developer.android.com/sdk/index.html
.. _dl.google.com: https://dl.google.com/

   以下是 Android Studio 默认使用的 SDK 索引数据文件：

   - `Android Automotive Distant Display System Images   <https://dl.google.com/android/repository/sys-img/android-automotive-distantdisplay/sys-img2-3.xml>`__
   - `Android Automotive System Images <https://dl.google.com/android/repository/sys-img/android-automotive/sys-img2-3.xml>`__
   - `Android Desktop System Images <https://dl.google.com/android/repository/sys-img/android-desktop/sys-img2-3.xml>`__
   - `Android Repository   <https://dl.google.com/android/repository/repository2-3.xml>`__
   - `Android Repository v2   <https://dl.google.com/android/repository/repository2-2.xml>`__
   - `Android SDK Platforms   <https://dl.google.com/android/repository/repository-10.xml>`__
   - `Android NDKs   <https://dl.google.com/android/repository/repository-11.xml>`__
   - `Android System Images   <https://dl.google.com/android/repository/sys-img/android/sys-img2-3.xml>`__
   - `Android TV System Images   <https://dl.google.com/android/repository/sys-img/android-tv/sys-img2-3.xml>`__
   - `Android Wear System Images <https://dl.google.com/android/repository/sys-img/android-wear/sys-img2-3.xml>`__
   - `Android Wear for China System Images   <https://dl.google.com/android/repository/sys-img/android-wear-cn/sys-img2-3.xml>`__
   - `Automated Test Device System Images <https://dl.google.com/android/repository/sys-img/aosp_atd/sys-img2-3.xml>`__
   - `Automated Test Device System Images With Google API   <https://dl.google.com/android/repository/sys-img/google_atd/sys-img2-3.xml>`__
   - `Glass Development Kit, Google Inc.  <https://dl.google.com/android/repository/glass/addon2-3.xml>`__
   - `Google API add-on System Images  <https://dl.google.com/android/repository/sys-img/google_apis/sys-img2-3.xml>`__
   - `Google API with Playstore System Images   <https://dl.google.com/android/repository/sys-img/google_apis_playstore/sys-img2-3.xml>`__
   - `Google Inc. <https://dl.google.com/android/repository/addon2-3.xml>`__
   - `Google TV System Images <https://dl.google.com/android/repository/sys-img/google-tv/sys-img2-3.xml>`__
   - `Intel HAXM  <https://dl.google.com/android/repository/extras/intel/addon2-3.xml>`__
   - `Tablet AOSP System Images  <https://dl.google.com/android/repository/sys-img/aosp_tablet/sys-img2-3.xml>`__
   - `Tablet Google API System Images  <https://dl.google.com/android/repository/sys-img/google_apis_tablet/sys-img2-3.xml>`__
   - `Tablet Google API with Playstore System Images  <https://dl.google.com/android/repository/sys-img/google_playstore_tablet/sys-img2-3.xml>`__

   未安装有 Android Studio 或想直接使用命令行工具下载安装 Android SDK/NDK 等开发环境组件，
   可以先下载好 `Android SDK Command-line Tools`_ 命令行工具，此起步工具包含有 SDK 安装
   管理工具和 AVD 虚拟机设备管理工具。使用 ``sdkmanager --list`` 查看当前安装好的组件，此命令
   会罗列 Installed packages 和可安装组件（Available Packages）。列表中的列（Path）是用于
   确定 Web 服务器资源的 URL 地址的关键信息。安装时就将其传递给 ``sdkmanager --install Path``
   命令进行下载安装：

   .. code-block:: bash

      #!/usr/bin/env powershell.exe

      pushd "C:\android-sdk\cmdline-tools\latest\bin"

      # sdkmanager --list
      # sdkmanager --install cmdline-tools;latest platform-tools

      $out = (./sdkmanager.bat --help 2>&1)
      $out -join "`n"  | sed -n '1,/version/p'

      Usage:
        sdkmanager [--uninstall] [<common args>] [--package_file=<file>] [<packages>...]
        sdkmanager --update [<common args>]
        sdkmanager --list [<common args>]
        sdkmanager --list_installed [<common args>]
        sdkmanager --licenses [<common args>]
        sdkmanager --version

      ./sdkmanager.bat --list_installed

      Installed packages:
        Path                 | Version      | Description                             | Location            
        -------              | -------      | -------                                 | -------             
        build-tools;34.0.0   | 34.0.0       | Android SDK Build-Tools 34              | build-tools\34.0.0  
        cmdline-tools;latest | 13.0         | Android SDK Command-line Tools (latest) | cmdline-tools\latest
        emulator             | 34.2.13      | Android Emulator                        | emulator            
        ndk;23.2.8568313     | 23.2.8568313 | NDK (Side by side) 23.2.8568313         | ndk\23.2.8568313    
        ndk;25.1.8937393     | 25.1.8937393 | NDK (Side by side) 25.1.8937393         | ndk\25.1.8937393    
        platform-tools       | 35.0.1       | Android SDK Platform-Tools              | platform-tools      
        platforms;android-34 | 3            | Android SDK Platform 34                 | platforms\android-34
        sources;android-34   | 2            | Sources for Android 34                  | sources\android-34  

      Available Packages:
        Path                                               | Version           | Description                                                         
        -------                                            | -------           | -------                                                             
        build-tools;19.1.0                                 | 19.1.0            | Android SDK Build-Tools 19.1                                        
        ...
        build-tools;35.0.0-rc3                             | 35.0.0 rc3        | Android SDK Build-Tools 35-rc3                                      
        cmdline-tools;13.0                                 | 13.0              | Android SDK Command-line 
        ndk-bundle                                         | 22.1.7171670      | NDK                                                                 
        ndk;16.1.4479499                                   | 16.1.4479499      | NDK (Side by side) 16.1.4479499                                     
        ...
        ndk;26.1.10909125                                  | 26.1.10909125     | NDK (Side by side) 26.1.10909125                                    
        ndk;26.2.11394342                                  | 26.2.11394342     | NDK (Side by side) 26.2.11394342                                    
        ndk;26.3.11579264                                  | 26.3.11579264     | NDK (Side by side) 26.3.11579264                                    
        ndk;27.0.11718014                                  | 27.0.11718014 rc1 | NDK (Side by side) 27.0.11718014                                    
        platform-tools                                     | 35.0.1            | Android SDK Platform-Tools                                          
        platforms;android-10                               | 2                 | Android SDK Platform 10                                             
        ...
        platforms;android-34                               | 3                 | Android SDK Platform 34                                             
        platforms;android-34-ext8                          | 1                 | Android SDK Platform 34-ext8                                        
        sources;android-15                                 | 2                 | Sources for Android 15                                              
        ...
        sources;android-33                                 | 1                 | Sources for Android 33                                              
        sources;android-34                                 | 2                 | Sources for Android 34                                              
        system-images;android-10;default;armeabi-v7a       | 5                 | ARM EABI v7a System Image                                           
        system-images;android-10;default;x86               | 5                 | Intel x86 Atom System Image                                         
        system-images;android-10;google_apis;armeabi-v7a   | 6                 | Google APIs ARM EABI v7a System Image                               
        system-images;android-10;google_apis;x86           | 6                 | Google APIs Intel x86 Atom System Image                             
        ...
        system-images;android-34;android-tv;arm64-v8a      | 2                 | Android TV ARM 64 v8a System Image                                  
        system-images;android-34;android-tv;x86            | 2                 | Android TV Intel x86 Atom System Image                              
        system-images;android-34;aosp_atd;arm64-v8a        | 2                 | AOSP ATD ARM 64 v8a System Image                                    
        system-images;android-34;aosp_atd;x86_64           | 2                 | AOSP ATD Intel x86_64 Atom System Image                             
        system-images;android-34;default;arm64-v8a         | 4                 | ARM 64 v8a System Image                                             
        system-images;android-34;default;x86_64            | 4                 | Intel x86_64 Atom System Image                                      
        system-images;android-34;google-tv;arm64-v8a       | 2                 | Google TV ARM 64 v8a System Image                                   
        ...

   使用 avdmanager 命令行工具手动创建虚拟机：

   .. code-block:: bash

      #!/usr/bin/env bash

      # create avd -n name -k "sdk_id" [-c {path|size}] [-f] [-p path]
      avdmanager create avd --name "MyAVD" --package "system-images;android-19;default;armeabi-v7a" 
      ls ~/.android/avd
      avdmanager list avd
      emulator -avd MyAVD -verbose
      avdmanager delete avd --name MyAVD

   如果没有映像文件则会提示错误，并提示已经下载的可用镜像文件。镜像文件路径对应 --package 参数值。
   分号分隔的是各个目录名称。创建 AVD 主要是建立系统镜像的配置信息文件，以及创建用户数据挂载分区的
   镜像（userdata.img）。操作中会询问是否手动指定参数，可以输入 no 省略参数指定，使用默认值。

   创建 AVD 设备后，就可以使用 ``emulator`` 虚拟器启动它，为了方便解决虚拟机问题，添加 -verbose
   参数可以打印详细调试信息，帮助分析虚拟机问题。以下显示当前虚拟机为 x86-64 平台，而要运行的虚拟机
   属于 ARM 32-bit 的镜像，这导致模拟器要找的 kernel-ranchu-64 不存在，只有 ``kernel-ranchu``。
   由于 Android 4.4 (API 19) 属于比较旧的系统，只有 32-bit 的镜像，要么换适合的模拟器，要么使用
   更新的系统镜像以适用 x86-64 平台的模拟器：

   .. code-block:: bash

      INFO    | Android emulator version 34.2.13.0 (build_id 11772612) (CL:N/A)
      DEBUG   | Current emulator version 34.2.13 is the same as the required version 34.2.13.
      INFO    | Found AVD name 'MyAVD'
      INFO    | Found AVD target architecture: arm
      INFO    | Found systemPath C:\android-sdk\system-images\android-19\default\armeabi-v7a\
      ERROR   | This AVD's configuration is missing a kernel file! Please ensure the file "kernel-ranchu" is in the same location as your system image.
      ERROR   | ANDROID_SDK_ROOT is defined (C:\android-sdk) but cannot find kernel file in C:\android-sdk\system-images\ sub directories
      INFO    | Probing for C:\android-sdk\system-images\android-19\default\armeabi-v7a\\kernel-ranchu-64: file missing
      INFO    | try dir C:\android-sdk\emulator
      INFO    | Trying emulator path 'C:\android-sdk\emulator\qemu\windows-x86_64\qemu-system-armel.exe'
      INFO    | Found target-specific 64-bit emulator binary: C:\android-sdk\emulator\qemu\windows-x86_64\qemu-system-armel.exe

   64-bit 的系统镜像需要到 Android 5 (API 21) 才有，可以通过国内镜像网站手动下载。因为开发主机
   属于 x86 CPU 构架，所以使用 x86 的系统镜像可以提升速度，省略了指令映射转换，虚拟机提示可以有
   10x 的提升。

   开发 Android APP 一般调试运行环境有两个，虚拟机和真机，如果没有真机提供运行环境，那么虚拟机
   就可以模拟出一个 APP 运行环境，可以是任何已经支持的 Android 系统版本。使用虚拟机调试 APP，
   首先需要通过 Device Manager 工具窗口创建、添加新的虚拟机设备，Android Virtual Devices (AVDs)。
   模拟器虽然灵活，但是受到开发主机性能限制，一般采用以下两种方法加速：

   -  Graphics acceleration for improved screen rendering
   -  Virtual machine (VM) acceleration for improved execution speed

   Windows 系统下有三种利用硬件提升虚拟机性能的 `Emulator hypervisor`_：

   - The Android Emulator hypervisor driver (AEHD)
   - The Windows Hypervisor Platform (WHPX)
   - The Intel Hardware Accelerated Execution Manager (HAXM)

   可以在 SDK Manager -> SDK Tools 安装加速驱动 hypervisor driver，根据开发主机的硬件
   差异，此驱动不一定能成功安装。

.. _Emulator hypervisor: https://developer.android.google.cn/studio/run/emulator-acceleration

   **SDK Manager** 配置面板提供 Android SDK 安装功能，点击 Tools -> SDK Manager 菜单或者：
   File -> Settings -> Android SDK -> Android SDK Location -> Edit

   初始安装默认包含以下组件，模拟器虽然是可选组件，但默认安装它，版本号仅作为参考：

   ==========================  ==========
   Android Emulator             393 MB
   Android SDK Build-Tools 34   55.6 MB
   Android SDK Platform 34      60.3 MB
   Android SDK Platform-Tools   6.25 MB
   Sources for Android 34       43.4 MB
   ==========================  ==========

   如果 Android SDK 缺失必需组件，Android Studio 会在应用配置面板显示以下信息：

      Error: Please select Android SDK

   可以执行 Tools -> SDK Manager -> Android SDK Location -> Next 安装必要组件，
   这个 UI 取名 **Next** 有点不太符合语义，其实应该是 **Setup**。


   Android 系统开发工具包都有各自的版本号：Android 操作系统版本又有对应的 SDK 版本号。

   Android 系统通过检测 targetSdkVersion 来保证向前兼容性，旧系统可以运行新目标 API 应用。
   Android 4.4 之后的设备上，系统会判断应用的 targetSdkVersion 是否小于某版本来决定某版本
   之前的 API 或者之后的 API，保证程序运行的一致性，实现向前兼容。

   比如，Android 6.0 新增加动态权限申请，开发应用时指定 targetSdkVersion = 5.0，如果应用
   运行在 Android 6.0 的设备上，就不能向前兼容，系统提示更新应用。

   创建工程时，minSDK 版本可能无法选择和你的设备系统兼容的版本号，这就需要创建工程后，手动修改
   Gradle 工程配置文件 build.gradle，修改 minSdkVersion 为需要的版本号，然后文件视图顶端
   会出现蓝色的提示信息栏，点击 Sync Now 同步配置修改内容。

   Android 应用开发涉及三个 SDK 版本号配置，Android SDK version properties (sdk-versions_)：

      *  **targetSdkversion** 向前兼容方式的目标 SDK 版本号，。
      *  **minSdkVersion** 指示应用可运行的最小 SDK 版本号。
      *  **compileSdkVersion** 指示当前开发环境中用于编译的 SDK 版本号。

.. _sdk-versions: https://developer.android.google.cn/ndk/guides/sdk-versions

   **minSdkVersion** 决定了应用能否运行于指定的系统版本上，如果开发时使用了特定 SDK 版本引入
   的功能，那么这个 **minSdkVersion** 值就不能小于此版本号。比如，小米 8 手机使用 Android 10
   系统，API Level 29，那么应用要想在此设备上运行，就不能使用小于 29 的最小版本号。


   NDK - Native Development Kit 原生开发工具包透过 Java Native Interface (JNI) 接口
   与 Java 虚拟机实现互调用。所谓“原生”，指的是和 Android 系统那样使用 C/C++ 语言进行编程。
   由于这些低层代码直接编译作为 CPU 指令运行，而移动设备可能使用各异的 CPU 构架，这就需要开发
   应用时处理好 CPU 构架的兼容，也就是要保证 Application Binary Interface (ABI) 一致。
   当前主流的移动设备的 CPU 构架包括：32-bit ARM, AArch64, x86, and x86-64 等等。
   .. _Android ABIs: https://developer.android.google.cn/ndk/guides/abis

   **Table 1.** ABI settings for different CPUs and architectures.

      ====================   =================
      CPU and architecture   Setting
      ====================   =================
      ARMv7                  ``armeabi-v7a``
      ARMv8 AArch64          ``arm64-v8a``
      i686                   ``x86``
      x86-64                 ``x86_64``
      ====================   =================

   Android Studio 提供了两个用于 NDK 开发的工程模板，File -> New -> New Project...：

   *  Native C++ - 要求 API 16 (Android 4.1 "Jelly Bean")
   *  Game Activity (C++) - 要求 API 30 (Android 11.0 "R")

   以上两个模板要求 SDK 版本不同，工程依赖也有所差别，但它们都是 C++/Java 混合代码结构：
   Native C++ 模板就混合代码项目，没有更多的依赖，只是基于 NativeActivity_ 开发原生应用。
   不同语言的代码归属于不同的模块。

   Game Activity (C++) 则在 C++/Java 混合代码项目的基础上，引用了 GameActivity_。这是
   2021 Google 游戏开发者峰会发布的 Android 游戏开发工具包 Android Game Development Kit
   (AGDK) 中的一个模块，Game Activity library。AGDK 是一整套工具和库，可以帮助您开发、
   优化和交付高品质的 Android 游戏。Game Activity 为 C++ 游戏提供构建基础，可以处理所有
   Android 事件 (包括屏幕旋转和应用生命周期)，提供 C 语言接口。有助于尽可能减少在 Java 
   语言上花费的开发时间。不同于原生 Activity 的是，Game Activity 不仅能与 fragment 兼容，
   还可以进行扩展。代码还内嵌着色器程序，因此这个程序涉及 C/C++/Java/Kotlin/GLSL 等多种语言，
   最好还掌握 OpenGL 或者 Vulkan 图形编程接口。

.. _GameActivity: https://developer.android.google.cn/games/agdk/game-activity
.. _NativeActivity: https://developer.android.google.cn/reference/android/app/NativeActivity

   开发 Native 应用时，可能出现调用器不能正常连接手机，导致手机弹出消息：Waiting For Debugger。
   也可能存在运行的多个手机模拟器在调试并且没有正常关闭，可以查看 5037 端口有没有在联接。也可以使用
   手动附加调试进程：Run -> Attach debugger to Android process。可能是兼容问题导致调试器
   不能自动附加调试进程，因为丢失了进程信息。

      Unable to find project context to attach debugger for process null

   任务配置面板中相关的调试器设置： Automatically attach on Debug.waitForDebugger()

   .. code-block:: bash

      netstat -ano | findstr "5037"

   此类问题在 Android Studio Jellyfish 比较明显，Hedgehog 或者 Giraffe 比较正常。
   Android Studio 与执行构建任务的 Android Gradle plugin (AGP) 插件兼容列表参考：

   ======================  =====================
   Android Studio version  Required AGP version
   ======================  =====================
   Koala     | 2024.1.1     3.2-8.5
   Jellyfish | 2023.3.1     3.2-8.4
   Iguana    | 2023.2.1     3.2-8.3
   Hedgehog  | 2023.1.1     3.2-8.2
   Giraffe   | 2022.3.1     3.2-8.1
   Flamingo  | 2022.2.1     3.2-8.0
   ======================  =====================

/Android Architecture
=====================

*  `Platform architecture <https://developer.android.google.cn/guide/platform/>`__
*  `Android SDK Developer Guides <https://devdoc.net/android/Android-r15/offline.html>`__
*  `Android Platform Samples <https://github.dev/android/platform-samples>`__

Android 系统构架结构划分为 6 层构架： 

1. System Apps 
2. Java API Framework 
3. Android Runtime 
4. Native C/C++ Libraries
5. Hardware Abstraction Layer
6. Linux Kernel

::

   ╔═══════════════════════════════════════════════════════════════════════════╗
   ║                              System Apps                                  ║
   ║───────────────────────────────────────────────────────────────────────────║
   ║ ╭──────────╮╭──────────╮╭──────────╮╭──────────╮╭──────────╮╭──────────╮  ║
   ║ │  SMS     ││  Email   ││ Calender ││  Camera  ││ Browser  ││  ......  │  ║
   ║ ╰──────────╯╰──────────╯╰──────────╯╰──────────╯╰──────────╯╰──────────╯  ║
   ╚═══════════════════════════════════════════════════════════════════════════╝

   ╔═══════════════════════════════════════════════════════════════════════════╗
   ║                 Java API Framework / Application Framework                ║
   ║───────────────────────────────────────────────────────────────────────────║
   ║                       │                   Managers                        ║
   ║ ╭───────────────────╮ │ ╭──────────╮╭──────────╮╭─────────╮╭───────────╮  ║
   ║ │ Content Providers │ │ │ Activity ││ Location ││ Package ││ Resource  │  ║
   ║ ╰───────────────────╯ │ ╰──────────╯╰──────────╯╰─────────╯╰───────────╯  ║
   ║ ╭───────────────────╮ │ ╭──────────────╮╭──────────────╮╭──────────────╮  ║
   ║ │    View System    │ │ │ Notification ││ Telephony    ││ Windows      │  ║
   ║ ╰───────────────────╯ │ ╰──────────────╯╰──────────────╯╰──────────────╯  ║
   ╚═══════════════════════════════════════════════════════════════════════════╝

   ╔══════════════════════════════════════════╗ ╔══════════════════════════════╗
   ║          Native C/C++ Libraries          ║ ║       Android Runtime        ║
   ║──────────────────────────────────────────║ ║──────────────────────────────║
   ║ ╭────────╮╭────────────╮╭───────────╮    ║ ║  ╭───────────────────────╮   ║
   ║ │ Webkit ││ OpenMax AL ││ OpenGL ES │    ║ ║  │ Android Runtime (ART) │   ║
   ║ ╰────────╯╰────────────╯╰───────────╯    ║ ║  ╰───────────────────────╯   ║
   ║ ╭──────╮╭─────────────────╮╭──────────╮  ║ ║  ╭───────────────────────╮   ║
   ║ │ Libc ││ Media Framework ││  ......  │  ║ ║  │     Core Libraries    │   ║
   ║ ╰──────╯╰─────────────────╯╰──────────╯  ║ ║  ╰───────────────────────╯   ║
   ╚══════════════════════════════════════════╝ ╚══════════════════════════════╝

   ╔═══════════════════════════════════════════════════════════════════════════╗
   ║                     Hardware Abstraction Layer (HAL)                      ║
   ║───────────────────────────────────────────────────────────────────────────║
   ║    ╭───────╮╭───────────╮╭────────╮╭─────────╮╭──────────╮╭──────────╮    ║
   ║    │ Audio ││ Bluetooth ││ Camera ││ Sensors ││ WIFI     ││ ......   │    ║
   ║    ╰───────╯╰───────────╯╰────────╯╰─────────╯╰──────────╯╰──────────╯    ║
   ╚═══════════════════════════════════════════════════════════════════════════╝

   ╔═══════════════════════════════════════════════════════════════════════════╗
   ║                              Linux Kernel                                 ║
   ║───────────────────────────────────────────────────────────────────────────║
   ║     ╭───────────────╮╭──────────────╮╭──────────────╮╭──────────────╮     ║
   ║     │     Audio     ││ Binder (IPC) ││    Display   ││    Keypad    │     ║
   ║     ╰───────────────╯╰──────────────╯╰──────────────╯╰──────────────╯     ║
   ║     ╭───────────────╮╭──────────────╮╭──────────────╮╭──────────────╮     ║
   ║     │   Bluetooth   ││     WIFI     ││     USB      ││    Camera    │     ║
   ║     ╰───────────────╯╰──────────────╯╰──────────────╯╰──────────────╯     ║
   ║     ╭───────────────╮╭──────────────╮╭──────────────╮╭──────────────╮     ║
   ║     │ Shared Memory ││    ......    ││ ......       ││ ......       │     ║
   ║     ╰───────────────╯╰──────────────╯╰──────────────╯╰──────────────╯     ║
   ║───────────────────────────────────────────────────────────────────────────║
   ║                            Power Managerment                              ║
   ╚═══════════════════════════════════════════════════════════════════════════╝

完整 API 级别及 Android 版本关系参考 manifest ``uses-sdk`` 节点的文档。 

Android Studio 使用 Tools -> SDK Manager 查看 Androi API 版本号对应关系： 

   File | Settings | Languages & Frameworks | Android SDK

项目开发时使用的 SDK 版本号为 ``compilesdkversion``，项目可以设置一个目标版本号 
``targetsdkversion`` 用来确实期待运行在什么版本的 Android 系统上，因为 Android 提供向前兼容，
需要通过目标版本号和最小版本号 ``minsdkversion`` 来确定项目应该使用到哪些兼容特性。

   ==========================  ===============  =======================
   Platform Version            API level        VERSION_CODE           
   ==========================  ===============  =======================
   Android 15                  API 34 → Beta 1  VANILLA_ICE_CREAM      
   Android 14                  34               UPSIDE_DOWN_CAKE       
   Android 13                  33               TIRAMISU               
   Android 12                  32               S_V2                   
   \                           31               S                      
   Android 11                  30               R                      
   Android 10                  29               Q                      
   Android 9                   28               P                      
   Android 8.1                 27               O_MR1                  
   Android 8.0                 26               O                      
   Android 7.1.1, 7.1          25               N_MR1                  
   Android 7.0                 24               N                      
   Android 6.0                 23               M                      
   Android 5.1                 22               LOLLIPOP_MR1           
   Android 5.0                 21               LOLLIPOP
   Android 4.4W                20               KITKAT_WATCH           
   Android 4.4                 19               KITKAT                 
   Android 4.3                 18               JELLY_BEAN_MR2         
   Android 4.2, 4.2.2          17               JELLY_BEAN_MR1         
   Android 4.1, 4.1.1          16               JELLY_BEAN             
   Android 4.0.3, 4.0.4        15               ICE_CREAM_SANDWICH_MR1 
   Android 4.0, 4.0.1, 4.0.2   14               ICE_CREAM_SANDWICH
   Android 3.2                 13               HONEYCOMB_MR2
   Android 3.1.x               12               HONEYCOMB_MR1          
   Android 3.0.x               11               HONEYCOMB              
   Android 2.3.4, 2.3.3        10               GINGERBREAD_MR1        
   Android 2.3.2, 2.3.1, 2.3   9                GINGERBREAD
   Android 2.2.x               8                FROYO                  
   Android 2.1.x               7                ECLAIR_MR1             
   Android 2.0.1               6                ECLAIR_0_1
   Android 2.0                 5                ECLAIR
   Android 1.6                 4                DONUT                  
   Android 1.5                 3                CUPCAKE                
   Android 1.1                 2                BASE_1_1
   Android 1.0                 1                BASE                   
   ==========================  ===============  =======================

   在创建虚拟机时，就需要参考 `Codenames, tags, and build numbers`_ 来确定需要使用的
   虚拟机镜像文件。因为 Device Manager 面板中是根据设备的硬件规格来选择虚拟机镜像文件的。

   在调试 Android 应用时，如果需要调试器在源代码级别调试，就需要使用 SDK 管理工具安装设备或者
   模拟器运行的 Android 系统版本号对应的源代码。以下命令可以查询 adb 连接设备的系统信息：

   .. code:: bash

      $ adb shell wm density                        # Physical density: 440
      $ adb shell getprop ro.build.version.sdk      # 29
      $ adb shell getprop ro.build.version.release  # 10
      $ adb shell getprop ro.product.brand          # Xiaomi
      $ adb shell getprop ro.product.model          # MI 8
      $ adb shell getprop | grep ro.product.cpu
      # [ro.product.cpu.abi]: [arm64-v8a]
      # [ro.product.cpu.abilist]: [arm64-v8a,armeabi-v7a,armeabi]
      # [ro.product.cpu.abilist32]: [armeabi-v7a,armeabi]
      # [ro.product.cpu.abilist64]: [arm64-v8a]

.. _Codenames, tags, and build numbers: https://source.android.google.cn/docs/setup/reference/build-numbers

.. container::

   Android 应用的一般构建过程至少包括以下步骤： 

   1. aapt 和 aidl 分别预处理资源文件和接口代码；
   2. 编译器（一般是 Java 编译器）编译代码生成 Dalvik Executable format (DEX) 字节码；
   3. apkbuilder 构建 apk 程序安装包；
   4. jarsigner 对安装包进行签名；
   5. zipalign 内存对齐并发布；

   .. figure:: https://devdoc.net/android/Android-r15/images/build.png
      :alt: Android App Building and Running
      :target: https://devdoc.net/android/Android-r15/guide/developing/building/index.html

   Android 应用需要一个调试密钥库文档（.keystore）才能安装到设备，并分发未发布的 APK。如果已经
   使用过 SDK 并构建了项目，那幺 ant 或 eclipse 可能已经自动生成了密钥库文档，此文档保存在用户
   主目录 ~/.android。也可以使用 JDK 密钥命令生成此密钥库文档：

      -  `About app bundles <https://developer.android.google.cn/guide/app-bundle>`__
   https://developer.android.google.cn/studio/publish/app-signing


Instant Run，是 Android Studio 2.0 新增的一个运行机制，在你编码开发、测试或 debug 的时候，
它都通过热重载显著地减少应用的构建和部署的时间，当你在 Android Studio 中改了你的代码，
Instant Run 可以很快的让你看到你修改的效果。而在没有 Instant Run 之前，App 一个小小的修改，
都肯能需要几十秒甚至更长的等待才能看到修改后的效果。因为需要完全的编译并且要将打包文件传输到设备
上进行完全的安装。Instant Run 编译和部署流程不同常规，构建项目的流程：构建修改的部分 → 部署修改
的 dex 或资源 → 热部署，温部署，冷部署：

1. 热拔插：代码改变部分增量更新到 APP，不需要重启应用，不需要重建当前 Activity。 
2. 温拔插：Activity 需要被重启才能看到所需更改。 场景：典型的情况是代码修改涉及到了资源文件。
3. 冷拔插：App 需要被重启（但是仍然不需要重新安装） 场景：任何涉及结构性变化的，比如：修改了继承规则、修改了方法签名等。

Andorid Studio 更新后，Instant Run 改名为 HotSwap。 
文件 -> 设置 -> Build,Execution,Deployment -> Debugger -> HotSwap

Java API Framework 也叫做 Application Framework，Android 应用开发必需掌握的构架，
它提供各种对象归类为 2 大组件 7 大管理器，典型的 APP 包含四类组件：

-  Activities 用户界面组件，用户交互功能入口点；
-  Services   服务供应组件，后台运行提供服务支持；
-  Broadcast receivers 广播接收组件，负责系统事件的接收与处理；
-  Content providers  内容供应组件，为应用提供数据；

应用开发根据不同的功能，需要使用到不同的组件及管理器，以及系统低层功能。以下是最基本的功能模块： 

   -  ``Content Providers`` 提供一个机制共享、获取应用的数据，例如读写联系人信息（Contacts）；
   -  ``Resource Manager`` 非代码资源的管理，如果字符串、图像文件、视图布局文件；
   -  ``Notification Manager`` 管理移动设备的状态条的通知信息；
   -  ``Activity Manager`` 管理 App 用户交互入口的生命周期、导航回退栈功能（BackStack）；

大多数应用将窗口显示为三个层：屏幕顶部的状态栏、底部或侧面的导航栏以，以及主应用界面。 

   ::

                           ╭─────────────╮  
                           │   Activity  │  
                           │   Launched  │  
                           ╰──────┬──────╯  
                                  V        
                         ┌────────┴────────┐
             ╭──────────>│    onCreate()   │
             │           └────────┬────────┘
             │                    V        
             │           ┌────────┴────────┐       ┌─────────────────┐
             │           │     onStart()   │<──────│   onRestart()   │<─╮ 
             │           └────────┬────────┘       └─────────────────┘  │
      User navigates              V                                     │
      to the actiity     ┌────────┴────────┐                            │
             │           │    onResume()   │────────╮                   │
             │           └────────┬────────┘        │                   │
             │                    V                 │                   │
      ╭──────┴──────╮      ╭──────┴──────╮          │                   │
      │ App process │      │   Activity  │    User returns       User navigates 
      │    killed   │      │   Running   │    to the activity   to the activity 
      ╰──────┬──────╯      ╰──────┬──────╯          │                   │
             │                    │  Another activity come              │
      Apps with highter priority  V  into the foreground                │
      need memory        ┌────────┴────────┐        │                   │
             │<──────────│    onPause()    │────────╯                   │
             │           └────────┬────────┘                            │
             │                    │   The activity is                   │
             │                    V   nolonger visible                  │
             │           ┌────────┴────────┐                            │
             ╰───────────│     onStop()    │────────────────────────────╯
                         └────────┬────────┘
                                  │   The activity is finishing or
                                  V   being destoryed by the system
                         ┌────────┴────────┐  
                         │   onDestory()   │
                         └────────┬────────┘
                                  V        
                           ╭──────┴──────╮  
                           │   Activity  │  
                           │   Shutdown  │  
                           ╰─────────────╯  

      https://developer.android.google.cn/guide/components/images/activity_lifecycle.png

      **Figure 1.** A simplified illustration of the activity lifecycle.

   .. Note::

      注：在应用启动前或者销毁后，Activity 都处于 Nonexistent 状态。执行应用， ``onCreate()``
      生命周期函数被 Android 程程加载器调用，进入 started 状态，此时已经渲染可见的用户界面。
      当切换到其它应用时，执行 ``onResume()`` 让当前应用处于后台。从其它应用切换回来时，执行
      ``onPause()`` 生命周期函数。要用户结束应用，或者因为内存不足，其它更高优先级的应用需要
      更多内存时，应用的 ``onStop()`` 生命一周期函数被执行，进入销毁流程。

      现代 Android 开发使用 Jetpack Compose 框架，组件接管经典的 Activity 生命周期。
      参考文档或者代码： 

      * `The activity lifecycle <https://developer.android.google.cn/guide/components/activities/activity-lifecycle.html>`__
      * `Handling Lifecycles with Lifecycle-Aware Components <https://developer.android.google.cn/topic/libraries/architecture/lifecycle>`__
      * `Codelabs Android Lifecycle-aware components <https://developer.android.google.cn/codelabs/android-lifecycles>`__
      * Android Lifecycle-aware Components Codelab https://github.dev/android/codelab-android-lifecycles
      * Android Sunflower with Compose https://github.dev/android/sunflower
      * Samples for Android Architecture Components https://github.com/android/architecture-components-samples

.. container:: basic-ui

   Android 应用框架新旧版本变更较大，以下是 Android 4.0 (API Level 15) 用户界面组件参考： 

   1. ``Window`` 应用窗口对象，代表用户图形窗口；
   1. ``Activity`` 用户交互功能入口点；
   2. ``Fragment`` 用户界面的一个区域，此设计引入自：Android 3.0 (API level 11)；
   3. ``Menu`` 用户菜单，通过界面右上角的 ... 图标访问菜单功能，其它菜单：PopupMenu、ContextMenu；
   4. ``ActionBar`` 用户界面上、下边的工具条；
   5. ``View`` 代表用户界面中的矩形区，图形绘制和事件处理，视图可使用 ``ViewGroup`` 容器分组管理；

   ``Window`` 它由 WindowManager 管理，窗口中的 ``Activity`` 通过 setContentView 方法
   设置视图树，视图树是由 ``ViewGroup`` 以及 ``View`` 构成层级结构（View Hierarchy）。
   而这个 View Hierarchy 被渲染到给 Window 创建的 ``SurfaceFlinger``  ``Surface``。

   绘图都渲染到 ``Surface``，它包含 ``GraphicBuffer``，最终显示在屏幕上，就是用户所看到的窗口。
   Android 3.0（API Level 11）开始，Android 2D 渲染管道支持硬件加速，也就是说，在 View 画布
   上执行的所有绘制操作都会使用 GPU。启用硬件加速需要更多资源，因此应用会占用更多内存。
   图形加速参考 AGDK 游戏开发工具包文档  
   `Android Games Development Kit (AGDK) <https://developer.android.google.cn/games/reference>`__
   `Hardware acceleration <https://developer.android.google.cn/topic/performance/hardware-accel>`__

   图形缓冲区（Buffer）存储着将要发送给 GPU 渲染图形的数据，应用视图由 ``View`` 构成的树状结构最终 
   会按图形绘画生成对应的图形数据写入 Buffer，并置于 BufferQueue 中正式绘制出用户图形界面。

   .. figure:: https://source.android.google.cn/static/docs/core/graphics/images/ape-fwk-graphics.png
      :target: https://source.android.google.cn/docs/core/graphics/surfaceflinger-windowmanager
      
      Figure 1. How surfaces are rendered.

   手机可以打开调试工具，帮助解决过度绘制问题：设置 -> 开发人员选项 -> 监控 -> GPU 呈现模式分析。
   界面显示为原色（即无过度绘制）或者为蓝色（仅有 1 次过度绘制），绿色为 2 次过度绘制。问题重点在
   粉色、红色区域，应该进行优化。移除控件中不需要的背景，减少透明度的使用，都可以缓解过度重绘。


   应用开发者可通过三种方式绘制图形到屏幕，它们根据绘图指令产生图形缓冲区数据： 

   *  Canvas - 2D 图形画布，Android View 树实际的绘制者。
   *  OpenGL ES - 嵌入式设备的 OpenGL 三维图形 API 子集。
   *  Vulkan - 跨平台的 2D/3D 绘图引擎，Android 7.0 NDK 支持。

   此外，Android 运行时提供图形处理支持，包括图形渲染 API、图片解码库，以及各种 Driver 支持： 

   *  绘图 API - 2D 图形引擎：Skia，3D 图形引擎：OpenGL ES，RenderScript，OpenCV 和 Vulkan。
   *  图片解码库 - jpg，png，gif 等格式支持。

   Fragment 碎片模式设计目标如下： 

   *  模块化（Modularity）：拆分 Activity，把各区域功能代码写在细分的 Fragment。
   *  可重用（Reusability）：多个 Activity 可以重用一个 Fragment。
   *  可适配（Adaptability）：适应不同硬件规格的屏幕尺寸、屏幕方向，方便布局，提升用户体验。

   *  `Support Libraray Artifact Mappings <https://developer.android.google.cn/jetpack/androidx/migrate/artifact-mappings>`__
   *  `Support Libraray Classes Mappings <https://developer.android.google.cn/jetpack/androidx/migrate/class-mappings>`__


.. container:: xml-layout

   应用界面使用布局容器（Layout）来排版 UI 组件（Widgets），有两种基本布局创建方式：

   *  XML 布局文件中声明 UI 组件，可以使用 Android Studio's Layout Editor 可视化编辑。
   *  运行时创建 layout elements，包括 View 和 ViewGroup 对象，以及其布局相关属性。

   ``LayoutInflate`` 调用 I/O 读取布局配置文件，然后进行解析和通过反射创建 View 层级树。
   按以上流程，布局加载就可能存在两大性能瓶颈，I/O 操作和 UI 组件实例填充（inflate）。
   Jetpack AndroidX 扩展库提供了异步布局填充工具 ``AsyncLayoutInflater``，这个类将
   `setContentView <#>`__ 和 UI 组件初始化放到 `onInflateFinished <#>`__ 回调中。
   Activity `setContentView <#>`__ 方法设置布局，加载、解析 XML 文件和填充 View 层级树。

   提升布局性能参考文档 Improve layout performance 或者使用 Jetpack Compose 构架。

   ::

      ╔════════════════════════════════════════════╗
      ║                  Activity                  ║
      ║────────────────────────────────────────────║
      ║                                            ║
      ║   ╭────────────────────────────────────╮   ║
      ║   │             PhoneWindow            │   ║
      ║   │────────────────────────────────────│   ║
      ║   │                                    │   ║
      ║   │   ╭────────────────────────────╮   │   ║
      ║   │   │          DecorView         │   │   ║
      ║   │   │────────────────────────────│   │   ║
      ║   │   │                            │   │   ║
      ║   │   │  ╭──────────────────────╮  │   │   ║   ╭────────────────────╮
      ║   │   │  │      TitleView       │────────────> │ ActionBarContainer │
      ║   │   │  │──────────────────────│  │   │   ║   ╰────────────────────╯
      ║   │   │  │                      │  │   │   ║
      ║   │   │  │                      │  │   │   ║
      ║   │   │  │                      │  │   │   ║   ╭────────────────────╮
      ║   │   │  │     ContentView      │────────────> │     FrameLayout    │
      ║   │   │  │                      │  │   │   ║   ╰────────────────────╯
      ║   │   │  │                      │  │   │   ║
      ║   │   │  │                      │  │   │   ║
      ║   │   │  ╰──────────────────────╯  │   │   ║
      ║   │   │                            │   │   ║
      ║   │   ╰────────────────────────────╯   │   ║
      ║   │                                    │   ║
      ║   ╰────────────────────────────────────╯   ║
      ║                                            ║
      ╚════════════════════════════════════════════╝

                                    ╭───────────╮
                                    │ ViewGroup │
                                    ╰─────┬─────╯
                              ╭───────────┼──────────╮
                        ╭───────────╮ ╭────────╮ ╭────────╮
                        │ ViewGroup │ │  View  │ │  View  │
                        ╰─────┬─────╯ ╰────────╯ ╰────────╯
                  ╭───────────┼──────────╮
               ╭────────╮ ╭────────╮ ╭────────╮ 
               │  View  │ │  View  │ │  View  │ 
               ╰────────╯ ╰────────╯ ╰────────╯ 

      Figure 1. Illustration of a view hierarchy, which defines a UI layout.

                                  ╭─────────────╮
                                  │ LinearLayut │
                                  ╰─────┬───────╯
                        ╭───────────────┼─────────────╮
              ╭──────────────────╮ ╭──────────╮ ╭──────────╮
              │ ConstraintLayout │ │ TextView │ │ TextView │
              ╰─────────┬────────╯ ╰──────────╯ ╰──────────╯
                        │            ^^^^^^^^     ^^^^^^^^
                        │           LinearLayut.LayoutParams
            ╭───────────┼──────────╮
      ╭──────────╮ ╭──────────╮ ╭──────────╮ 
      │ TextView │ │ TextView │ │ TextView │ 
      ╰──────────╯ ╰──────────╯ ╰──────────╯ 
        ^^^^^^^^     ^^^^^^^^     ^^^^^^^^
           ConstraintLayout.LayoutParams

      Figure 2. Visualization of a view hierarchy with layout parameters associated with each view.

   DecorView -> FrameLayout -> ViewGroup 是直接继承关系，DecorView 是 ViewGroup 子类。
   ``ViewGroup`` 作为 UI 组件容器，继承自 View，这两个类分别是 Layout 和 UI 组件（widget）
   的基类。布局容器用于放置 UI 控件，并设置它的大小、位置、颜色等属性影响界面 UI 元素的布局。旧版本
   Android 提供的布局容器包括：``LinearLayout``,``FrameLayout``,``RelativeLayout``。
   https://developer.android.google.cn/develop/ui/views/layout/declaring-layout

   帧布局在界面上是一帧一帧显示的，通常可以用于游戏开发中。釆用帧布局方式设计界面时，只能在
   左上角显示一个控件，如果添加多个控件，这些控件会按照顺序在屏幕的左上角重叠显示。

   ::

      https://developer.android.google.cn/reference/android/view/ViewGroup

      java.lang.Object
         ↳  android.view.View
            ↳  android.view.ViewGroup

      https://developer.android.google.cn/reference/kotlin/android/widget/LinearLayout

      kotlin.Any
         ↳  android.view.View
            ↳  android.view.ViewGroup
               ↳  android.widget.LinearLayout

      https://developer.android.google.cn/reference/kotlin/android/widget/TextView

      kotlin.Any
         ↳  android.view.View
            ↳  android.widget.TextView

   UI 组件在布局配置文件中（XML）设置属性与 UI 组件的属性名称有些许差别，比如 TextView 组件
   的尺寸配置及对齐方式设置，对应属性是 Width、Height、Gravity：

   ::

        android:layout_width="100dp"
        android:layout_height="100dp"
        android:layout_gravity="center_horizontal"

   Jetpack AndroidX 扩展库提供的布局容器：

   .. code:: bash

      $ tree -L 1 /android-sdk/sources/androidx | grep layout
      ├── ConstraintLayout 约束布局
      ├── CoordinatorLayout 协调布局
      ├── DrawerLayout 抽屉布局
      ├── GridLayout 网格布局
      ├── PercentLayout 比例布局
      ├── SlidingPaneLayout 面板滑动
      ├── SwiperRfreshLayout 下拉刷新

   ``ConstraintLayout``（约束布局）是现代 Android UI 主打的布局容器，用于制作响应式
   自适应用户界面（Responsive/adaptive design with views），并且可以用来减少布局层级，
   此布局容器在 2016 年 Google I/O 大会上发布。性能比 ``RelativeLayout`` 更好，也易于使用。
   Android Studio 3.0 提供了相应的操作支持约束布局，在设计视图（Design）使用箭头手柄来调整
   约束关系。组件四条边框上有一个圆形控制点，拖动它就会出现箭头，将箭头引向要关联的组件，并设置
   约束关系。组件使用弹簧线表示与四周的位置关系。四角位置的矩形控制点用来调整组件大小尺寸。

   使用左键菜单 Clear Constraints of Selection 清除与其它组件关联的约束关系，或者按 Ctrl
   再点控制点，以逐个删除约束。未按要求设置约束会在 Problems 面板显示 Missing Constraints
   错误提示信息。使用约束布局需要满足以下条件：

      -  Every view must have at least two constraints: one horizontal and one
         vertical.
      -  You can create constraints only between a constraint handle and an
         anchor point that share the same plane. A vertical plane—the left and
         right sides—of a view can be constrained only to another vertical
         plane, and baselines can constrain only to other baselines.
      -  Each constraint handle can be used for just one constraint, but you can
         create multiple constraints from different views to the same anchor
         point.

   在组件的属性面板（**Attributes**）**Layout** 区可以对约束进行微调，Constraint Widget
   也会用有一种图标指示各边设置的约束类型，点击图标或者设计视图中调整约束：

   .. figure:: https://developer.android.google.cn/static/images/training/constraint-layout/constraint-layout-ratio-2x.png
      :target: https://developer.android.google.cn/develop/ui/views/layout/constraint-layout
      :alt:    Build a responsive UI with ConstraintLayout

      *  **Fixed**: 固定约束，指定一个固定距离，使用“工”字样图标；
      *  **Wrap Content**: 包裹内容，会根据内容大小调整以适用内容，使用指向内容中心的双尖箭头；
      *  **Match Constraints**: 匹配约束，会根据每边边距伸缩，使用弹簧图标；


   ``CoordinatorLayout`` 主要作用是协调子层 View 组件之间的交互行为。它允许开发者设置各个
   View 组件之间的依赖关系来实现各种复杂的交互效果，包括 View 的移动、缩放、旋转等操作。

   Android Studio 提供了基于 XML 格式的 UI 可视化编辑，方便设计应用界面。布局设置文件保存在
   资源目录中，例如 ``res/layout/activity_main.xml``。配置文件中的节点属性可以引用
   其它资源数据，使用 @ 前缀表示引用资源。还可以使用 ``<include/>`` 复用其它布局配置。

   ``res/layout/activity_main.xml``

   .. code:: xml

      <?xml version="1.0" encoding="utf-8"?>
      <androidx.coordinatorlayout.widget.CoordinatorLayout 
          xmlns:android="http://schemas.android.com/apk/res/android"
          xmlns:app="http://schemas.android.com/apk/res-auto"
          xmlns:tools="http://schemas.android.com/tools"
          android:layout_width="match_parent"
          android:layout_height="match_parent"
          android:fitsSystemWindows="true"
          tools:context=".MainActivity">

          <com.google.android.material.appbar.AppBarLayout
              android:layout_width="match_parent"
              android:layout_height="wrap_content"
              android:fitsSystemWindows="true">

              <com.google.android.material.appbar.MaterialToolbar
                  android:id="@+id/toolbar"
                  android:layout_width="match_parent"
                  android:layout_height="?attr/actionBarSize" />

          </com.google.android.material.appbar.AppBarLayout>

          <com.google.android.material.floatingactionbutton.FloatingActionButton
              android:id="@+id/fab"
              android:layout_width="wrap_content"
              android:layout_height="wrap_content"
              android:layout_gravity="bottom|end"
              android:layout_marginEnd="@dimen/fab_margin"
              android:layout_marginBottom="16dp"
              app:srcCompat="@android:drawable/ic_dialog_email" />

          <include layout="@layout/content_main" />

      </androidx.coordinatorlayout.widget.CoordinatorLayout>

   ``res/layout/content_main.xml``

   .. code:: xml

      <?xml version="1.0" encoding="utf-8"?>
      <androidx.constraintlayout.widget.ConstraintLayout 
          xmlns:android="http://schemas.android.com/apk/res/android"
          xmlns:app="http://schemas.android.com/apk/res-auto"
          android:layout_width="match_parent"
          android:layout_height="match_parent"
          app:layout_behavior="@string/appbar_scrolling_view_behavior">

          <fragment
              android:id="@+id/nav_host_fragment_content_main"
              android:name="androidx.navigation.fragment.NavHostFragment"
              android:layout_width="0dp"
              android:layout_height="0dp"
              app:defaultNavHost="true"
              app:layout_constraintBottom_toBottomOf="parent"
              app:layout_constraintEnd_toEndOf="parent"
              app:layout_constraintStart_toStartOf="parent"
              app:layout_constraintTop_toTopOf="parent"
              app:navGraph="@navigation/nav_graph" />
      </androidx.constraintlayout.widget.ConstraintLayout>


.. container:: morden-ui

   Compose 和 Flutter 该怎么选？ 

   无论你喜欢与否，声明式 UI 开发已经逐渐代替传统的命令式 UI 界面开发，这是未来大势所趋。
   很多开发者都在 Flutter 和 Compose 之间纠结。它们的主要差别在于 Flutter 跨平台 UI 框架。

   Compose 则是一个全新的 UI 构架，隶属 Jetpack 工具包中的一员，它重新定义了现代 Android UI
   的开发方式，相比原生 Android UI 的开发方式，它大幅度提高了原生 UI 的开发效率：

   1. 声明式 UI，不需要手动刷新数据；
   2. 完全解除了 XML + Java、Kotlin 混合写法的局限性；
   3. 超强兼容性，适用于 Navigation、ViewModel、Kotlin 协程等多数常用库，与现有 View 体系并存；
   4. 加速开发，提供开箱即用的 Material 组件，提升开发效率；
   5. 精简代码数量，减少 bug 的出现；
   6. 功能完备，可以完全覆盖 Android 现有视图系统的所有能力；
   7. 实时预览，Compose Preview 预览机制可以做到与真机无异，真正的所见所即得；

   Android Studio 在运行菜单中提供了两个热更新操作：

   *  Run -> Apply Code Changes
   *  Run -> Apply Changes and Restart Activity

   Android 现代版本引入 Jetpack_ 图形框架，全称 Jetpack Compose，这是基于组件组合哲学设计的框架。
   基于 MVVM 模式，Model + View + ViewModel，由数据驱动用户界面，其中视图 View 可用 Fragment。
   但须避免在 Fragment 中添加业务逻辑，这样会增加视图的耦合度。使用 Jetpack Compose 组合函数可以
   替代 Fragment 作为 View 使用。

   Jetpack Compose 是围绕可组合函数构建的图形框架，函数式定义应用的界面，只需描述应用界面的 
   外观并提供数据依赖项，而不必关注界面的构建过程（初始化元素、将其附加到父项等）。如需创建可组合函数，
   只需将 ``@Composable`` 标注添加到函数名称中即可。

   当前 Android 并存 3 种 Activity 类型：

   1. android.app.Activity
   2. android.support.v4.app.FragmentActivity -> androidx.fragment.app.FragmentActivity
   3. androidx.appcompat.app.AppCompatActivity

   ``Activity`` 是最基础的用户交互入口，相当于 Android 系统的 ``main()`` 入口函数。
   只能使用系统自带的 host Fragment (Android 3.0, API Level 11），``getFragmentManager()`` 方法获取 Fragment 实例。

   Android 4.0 Support Library 引入 ``FragmentActivity``，间接继承 Activity。
   使用 ``getSupportFragmentManager()`` 方法处理 support 包中的 Fragment 的交互。
   可以处理 support 包中的 Fragment 的嵌套使用。

   ``AppCompatActivity`` 继承自 ``FragmentActivity``，为支持 Material 设计风格控件
   提供了便利。取代 ActionBarActivity，支持 ActionBar 功能，同时推荐使用 ToolBar。

   Android 发布过 4v, 7v, 13v 等支援库包（Support Library Packages），还会发布相应的修订版。
   Android 9.0 (API level 28) 开始 `support library`_ 更名为 AndroidX_，作为现代 UI 
   构架 Jetpack_ 的组成部分，包含最新的 Compose 组件，新旧版本的命令空间也作了变更。
   Jetpack AndroidX 源代码： `Android Jetpack <https://github.com/androidx/androidx>`__

.. _support library: https://developer.android.google.cn/topic/libraries/support-library/packages.html
.. _AndroidX: https://developer.android.google.cn/topic/libraries/support-library
.. _Jetpack: https://developer.android.google.cn/jetpack/androidx

.. container:: 

   API Level 30 之后，导航栏、状态栏配置由 systemUiVisibility 替换为 WindowInsetsController。
   新版的对象引入了两个控制方法：hide 和 show，配合常量控制 UI 组件的显示或隐藏。

   .. code-block:: java

       override fun onWindowFocusChanged(hasFocus: Boolean) {
           super.onWindowFocusChanged(hasFocus)
           if (hasFocus) {
               hideSystemUi()
           }
       }

       private fun hideSystemUi() {
           val decorView = window.decorView
           decorView.windowInsetsController?.hide(WindowInsetsCompat.Type.statusBars())
           decorView.windowInsetsController?.hide(WindowInsetsCompat.Type.navigationBars())
           //decorView.systemUiVisibility = (View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
           //         or View.SYSTEM_UI_FLAG_LAYOUT_STABLE
           //         or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
           //         or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
           //         or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
           //         or View.SYSTEM_UI_FLAG_FULLSCREEN)
       }

   以前，实现边缘到边缘导航或沉浸式模式时，edge-to-edge navigation or immersive mode，
   要采取的第一步是使用 systemUiVisibility 标志来请求应用程序全屏布局。新版本 Android 不推荐
   使用这个字段，为了全屏布局应用程序，必须在 Window 类上使用一个新方法：

      window.setDecorFitsSystemWindows(false)


Shell Scripting
---------------

   Android Studio 提供了便利的 shell 脚本功能，主界面本身就提供了 Terminal (Alt + F12)
   软终端。还可以配置运行脚快捷键，默认是 ``Ctrl+Shift+F10``，如果经常使用可以设置为 ``Alt+.``。
   IntelliJ IDEA 编辑器平台本身内置有 Shell Script 插件，它可以集成多个外部工具，包括 
   ShellCheck, Shfmt, Explainshell。

   首先设置脚本解析器：Help -> Find Action -> Shell Path，推荐在 Windows 系统上优先
   使用 PowerShell 作为默认脚本解释器。Android Studio 会根据脚本扩展名来调用脚本解析器。
   比如 bash 脚本，它就会使用带有 \ 符号表示的路径，如果默认脚本解析器使用 bash，则会导致
   解释器路径出错，而不能正确执行脚本。

   在脚本配置面板（Code style -> Shell Script）可以设置缩进符号的宽度，以及下载 Shfmt
   Formatter 工具用来格式化脚本，以提供更有条理的视觉体验。

   可以创建 Scratch 片段文件，它们会保存在统一的目录，AppData Roaming 目录下。

   由于 Android Studio 会按脚本文件扩展名来决定调用什么解析器，这会导致脚本 Shebang 指定的
   解释器无效，对于如下 .sh 脚本片段，``$SHELL`` 总是指定 bash 解释器。Shebang 机制的触发
   需要配合 ``source`` 命令，即通过点号（.）运行脚本，比如 `` ./scratch.sh``。

   .. code-block:: bash

      #!/usr/bin/env -S node
      console.log(`
         function foo() {
            old_tty_setting=$(stty -g)   # Save old terminal setting.
            echo "Hit a key "
            stty -icanon -echo           # Disable "canonical" mode for terminal.
                                         # Also, disable *local* echo.
            key=$(dd bs=1 count=1 2> /dev/null)   # Using 'dd' to get a keypress.
            echo "You hit ${#key} key."  # ${#variable} = number of characters in $variable

            read -rsn 1 key
            echo "$SHELL foo: [$key]"a

            stty "$old_tty_setting"      # Restore old setting.
            #
            # Hit any key except RETURN, and the output is "You hit 1 key."
            # Hit RETURN, and it's "You hit 0 key."
            # The newline gets eaten in the command substitution.
         }
         foo
      `)

   好在可以配置 External Tools，只需要将 bash 作为外部工具来使用，就可以任意设置其运行方式。
   并且，外部工具可以设置快捷键，这样就可以内部的操作一样。注意，Arguments 只使用脚本文件名，
   而路径设置为工具目录，以免路径中的 \ 与 bash 中的转义符号冲突导致脚本运行失败。不使用引号，
   因为未知 Android Studio 在内部调用 System Shell 如何处理字符串，引号会使命令行语法错乱。
   添加外部工具：Help -> Find Action -> External Tools，注意，外部工具的快捷键是和工具的
   序号（菜单位置）关联的。当然，这种方法的弊端就是每次都需要操作系统创建进程，响应较慢。另外，
   这种方式还可能导致 stty: 'standard input': Inappropriate ioctl for device。也就是
   说这种方便模拟的 I/O 设备不符合 ioctl (input/output control) 这种特殊的系统调用规范。

   ::

      Tool Settings:

                   Program:  bash
                 Arguments:  -c "./$FileName$"
         Working directory:  $FileDir$

   还可以在 Advanced Options 设置文件状态的同步，以及使用 console 来输入、输出数据。也就是
   可以使用控制台来与外部程序交互。Sublime Text 提供了一个命令行工具 ``subl``，就可以将它
   作为外部工具集成到 Android Studio 中，当需要使用 Sublime Text 编辑器或者需要它处理
   控制台输入、输出的数据时，就可以使用它。注意，``$Projectpath$`` 变量是代码目录列表，项目
   目录对应 ``$ProjectFileDir$`` 变量：

      Tool Settings:

                      Name:  Sublime Text [open folder]
                   Program:  subl
                 Arguments:  -n "$ProjectFileDir$"
         Working directory:  $FileDir$

                      Name:  Sublime Text [open file]
                   Program:  subl
                 Arguments:  "$FilePath$"
         Working directory:  $FileDir$

   注意，要勾选 Open console for tool output。否则程序还未未完成 subl 的执行就已经结束，
   导致无法正常使用外部的 ``subl`` 命令工具。用好 Sublime Text，在脚本编程这方面比起
   Android Studio 确实要好太多了，既轻量又快捷。

   脚本是自动化的一种基本而又强大的技术，它不仅可以使用解释器的功能，通过解释器还可以调用系统提供的
   功能，包括 Python 脚本编程，Linux 系统的 Coreutils_ 工具包，还有经常使用的 sed_、awk_ 编辑器，
   或者简单易用的 grep_ 字符串过滤命令，又或者强大又复杂的 VIM 编辑器，还网络工具 curl_ 等等。
   Windows 系统要使用 Linux 套件，可以安装 MSYS2_，系统开发可以使用 GCC_ LLVM_ 编译器套件。

.. _Coreutils: https://www.gnu.org/software/coreutils/coreutils.html
.. _sed: https://www.gnu.org/software/sed/
.. _awk: https://www.gnu.org/software/gawk/
.. _grep: https://www.gnu.org/software/grep/
.. _curl: https://curl.se/download.html

.. _MSYS2: https://www.msys2.org/
   :alt: Software Distribution and Building Platform for Windows
.. _LLVM: https://llvm.org
   :alt: The LLVM Compiler Infrastructure Project
.. _GCC: https://gcc.gnu.org
   :alt: GCC, the GNU Compiler Collection

   脚本也环境也是用来处理文档的工具，格式转换专用工具有 `Pandoc <https://pandoc.org>`__，
   reStructuredText 格式文档有专用的 `Docutils 0.21.1 <https://docutils.sourceforge.io>`__。

   当然，还有 `Android SDK Tools <https://developer.android.google.cn/tools?hl=en >`__。

   用好脚本，就有必要掌握其中一种通用的脚本解释器，推荐最基础的 Bash_，这是 GNU Project 内置
   的脚本解释器，the Bourne Again SHell。Bash_ 提供以下功能特性：

   1. command-line editing,
   2. unlimited size command history,
   3. job control,
   4. shell functions and aliases,
   5. indexed arrays of unlimited size,
   6. integer arithmetic in any base from two to sixty-four.

   官方文档资料较完善，另外这里是一份“读过”的手册，`Bash 5.1`_，里面有非常基础的一些知识点示范。

.. _Bash: https://www.gnu.org/software/bash/
.. _Bash 5.1: https://github.com/Jeangowhy/opendocs/tree/main/bash.5.1.md

   JetBrains IDE 将从 2024.1 版 IDE 开始在新 UI 中提供 New Terminal (Beta) 测试版本。
   可以在偏好设置启用它：Settings -> Preferences | Tools | Terminal | Enable New Terminal
   目前，测试版仅支持 Bash、Zsh 和 PowerShell。新增加的方便命令历史记录可供筛选和更轻松地浏览
   最近执行的命令。 用户体验设计师还修改了配色方案，使调色板美观易读。一个重大变化是命令补全功能，
   支持命令、路径、实参和选项，旨在简化命令输入。命令输出分组功能似乎是通过新建 shell 进程实现的，
   因为这个 New Terminal 响应速度明显低于原来内置的 Terminal 控制台。


Logcat and Crash troubleshot
----------------------------

   Android Studio 在调试功能上做得比较好， Run-> Edit Configurations-> Debugger
   配置面板中为 Android App 提供四种调试方式（Debug Type），可以同时调试 C++ 和 Java 代码。
   调试器分别使用 Java debugger 和 LLVM 的 LLDB（Low Level Debugger）。还可以指定调试符号
   文件所在目录（Symbol Directors）。

      -  Detect Automatically
      -  Java Only
      -  Native Only (available only with C/C++ code)
      -  Dual (Java + Native) - available only with C/C++ code

   IntelliJ IDEA 社区版可以调试 Java/Kotlin 等，但是 C++ 调试插件只能在旗舰版上安装使用。

   Android Studio 3.0 引入 Android Profiler 性能分析工具，取代旧版本中的 Android Monitor。
   Profiler 工具可提供实时数据，帮助您了解应用的 CPU、内存、网络和电池资源使用情况。
   `Inspect performance issues <https://developer.android.google.cn/studio/profile>`__

   Android Profiler 提供多个剖析工具以分析不同类型的性能问题：

   -  **CPU profiler** helps track down runtime performance issues.
   -  **Memory profiler** helps track memory allocations.
   -  **Energy profiler** tracks energy usage, which can contribute to battery drain.

   要打开 Profiler 窗口： View -> Tool Windows -> Profiler。如果联接多个设备，会弹窗
   Select Deployment Target 提示选择要在哪个设备上分析您的应用。面板左侧是会话操作区，可以
   创建多个会话来剖析不同的应用，并且可以随时暂停记录数据。注意，可以将记录数据写入硬盘，但是
   数据可能会很大。

   Android Studio Hedgehog | 2023.1.1 刺猬版默认前两个 Profiler 面板，电量剖析面板点击
   打开 System Trace 才可以看到。面板中有三条平衡时间轴，分别记录不同类型的数据：

   1. “Event”时间轴：显示应用中的 Activity 在其生命周期内不断转换而经历各种不同状态的过程
   2. “Energy”时间轴：显示应用的估算耗电量。(纵坐标高度)
   3. “System”时间轴：显示可能会影响耗电量的系统事件

   按照官方文档描述，界面中可以框选某个时间区间以查看 System Event 的细节数据，但在“刺猬版”
   中只能点击右上角的加减图标整体地缩放时间轴。也就是说，缺失鼠标拖动的 Zoom to Selection 功能。

   .. figure:: https://developer.android.google.cn/static/studio/images/profile/energy-profiler-L2_2x.png

      Figure 2. Using the Energy Profiler to find a wake lock.

   新版本 Android Studio 提供 File -> Profile & Debug APK 功能，用于调试 APK 程序包。
   注意，只有在清单文件中启用 ``extractNativeLibs="true" `` 才能调试 C/C++ 代码。正常情况下
   release 包不允许调试，让 apk 可调试，一般有两种方法：编译打包前设置清单文件 AndroidManifest.xml，
   或者使用 apktool 工具反编译 apk，修改 AndroidManifest.xml 文件后再重签名二次打包：

   .. code-block:: xml

      <application android:debuggable="true" 
                  android:extractNativeLibs=["true" | "false"]
         />

   *  `Debug pre-built APKs <https://developer.android.google.cn/studio/debug/apk-debugger>`__
   *  `Profile and debug pre-built APKs <https://developer.android.google.cn/studio/debug/apk-analyzer>`__

   启动调试器后，如果提示缺失调试符号，可以设置调试配置，使用 Attach Sources 附加源代码，如果有的话：

   .. code-block:: 
   
      No symbol directories found - please check your native debug configuration

   Android Studio 默认解析 smali 文件的插件是 Smali Support，这个插件不支持断点。可以使用
   支持断点的 smali 解析插件：smalidea_。下载 `smalidea-0.0.5.zip`_，然后在 Android Studio
   中依次点击 File -> Settting -> Plugins -> 小齿轮 -> Install Plugins from Disk，
   安装本地插件，从本地磁盘中选择下载好的 smalidea-0.0.5.zip，点击“OK”就可以完成插件的安装，
   然后会提示重启 Android Studio, 以使 smalidea 插件生效。

.. _smalidea-0.0.5.zip: https://bitbucket.org/JesusFreke/smalidea/downloads/smalidea-0.06.zip
.. _smalidea: https://github.com/JesusFreke/smalidea


   应用开发最常遇的问题是闪退或崩溃（Crash）、无响应（Application Not Responding）。
   程序正常运行中，可能会出现未捕获到的异常，这就会造成崩溃。常见 Crash 异常包括：

      ==============================   =============================
      NullPointerException             空指针
      ClassCastException               类型转换异常
      IndexOutOfBoundsException        下标越界异常
      ActivityNotFoundException        Activity  未找到异常
      IllegalStateException            非法状态异常
      ArrayIndexOutOfBoundsException   数组越界异常
      SecurityException                安全异常
      NoSuchMethodException            方法未找到异常
      SQLException                     操作数据库异常
      ==============================   =============================

   程序运行过程中出现未捕捉的异常，那么就需要分析系统日志，通过 logcat_ 命令下载移动设备上的日志。
   Android Studio 提供 `Logcat Window`_ 工具，对指定的设备使用日志内容过滤器筛选出特定内容。
   这是改版后的界面，不仅可以设置多种过滤格式，可以可以定制 Locat Format，并提供 Standard View
   和 Compact View 两个视图，还提供了 Screen Short/Recorder 工具，当然这些都可以使用命令实现。
   `Logcat Window`_ 中的日志内容提供了右键菜单添加过滤器，部分过滤器格式参考：

      ==============================   =============================
      Filters                          Descriptions
      ==============================   =============================
      is:crash                         过滤出崩溃掉的 App 日志（crash 缓冲区）。
      level:ERROR                      过滤 E 级别的日志。
      tag=:MyApp                       过滤出 tag 完全等于 MyApp 的日志。
      tag:MyApplication                过滤出 tag 包含 MyApplication 的日志。
      ==============================   =============================
   
   过滤器输入框中按下 ``Ctrl+Space`` 按键可以查看可用的过滤器，它们可以使用 & 和 | 以及圆括号
   进行逻辑组合：

   -  tag: 匹配日志的 tag 字段，可以使用运算修饰符。
   -  package: 匹配记录日志的软件包名，package:mine 匹配当前项目。
   -  process: 匹配记录日志的进程名。
   -  message: 匹配日志中 message 的内容。
   -  level: 过滤指定优先级的日志，比如 level:debug 或者 level:error。
   -  age: 最近一段时间的日志，时间单位：s 秒，m 分钟，h 小时，d 表示天。如 age:10s 最近 10s 的日志。
   -  is:crash 匹配应用崩溃日志，is:stacktrace 匹配任意类似 Java 堆栈回溯的日志。

   切换回旧版 log view：Settings(Windows)/Preferences(Mac) -> Experimental -> Enable new logcat tool window

   对于开发人员来说，抓取日志是很方便的，但对于测试人员来说，就不太方便。大多都是使用脚本执行 adb
   命令抓取日志：

   .. code-block:: bash

      @ECHO OFF
      for /f "tokens=2 delims==" %%a in ('wmic OS Get localdatetime /value') do set "dt=%%a"

      SET timeStamp=%dt:~0,4%-%dt:~4,2%-%dt:~6,2%_%dt:~8,2%-%dt:~10,2%-%dt:~12,2%
      SET mutID=_mut

      @ECHO ON
      adb logcat -v time > .\"%mutID%_%timeStamp%_logcat.log"

      pause

.. _locat: https://developer.android.google.cn/tools/logcat?hl=en 
.. _Locat Window: https://developer.android.google.cn/studio/debug/logcat
   :alt: View logs with Logcat

   Android 开发者选项中选择调试应用的列表里选择要调试的应用，然后把“等待调试器”开关打开。还可以
   使用 ``set-debug-app -w package`` 命令来设置被调试程序，-w 选项就是让 App 等待调试器。
   然后再启动进程，移动设备系统会弹窗提醒 App 正在 Waiting For Debugger。此时 App 进程已经
   fork 出来了，只不过是阻塞在 ActivityThread.handleBindApplication() 方法里面。通过调用
   Debug.waitForDebugger() 一直等待直到 DDMS 连接上来。这个时候再让 Android Studio 挂上
   调试器（attach），附加到 App 所在进程，即可开始 Debug 后续的 App 启动过程，比如调试 
   ``ClassLoader`` 的创建，App 的初始化以及启动，Activity 启动等。

   Attach 模式调试是最使用的，这种调试方式可以让 App 先运行到特定状态，然后再将调试器附加到
   Android 进程，Run -> Attach debugger to Android process。这样就可以很方便地对特定
   App 运行情景进行调试。

   Android 的日志系统使用 ``logd`` 进程管理一系列循环缓冲区（ring buffer），主要是前三个
   缓冲区。另外还有两个组合，all 表示所有 5 个缓冲区，default 表示最主要的三个缓冲区，可以使用
   ``logcat`` 命令参数 ``-b`` 来指定要获取哪些缓冲区的日志，多个缓冲区使用逗号分隔。

   -  ``main``: Views the main log buffer (default), which doesn't contain system and crash log messages.
   -  ``system``: Views the system log buffer (default).
   -  ``crash``: Views the crash log buffer (default).
   -  ``radio``: Views the buffer that contains radio/telephony related messages.
   -  ``events``: Views the interpreted binary system event buffer messages.
   -  ``all``: Views all buffers.
   -  ``default``: Reports ``main``, ``system``, and ``crash`` buffers.

   日志系统的 C/C++ 接口是 ``liblog`` 共享库和配套的头文件 ``<android/log.h>``。所有特定
   语言的日志记录工具，包括 ``android.util.Log``，最终都调用 ``__android_log_write`` 函数。

   日志优先级别（priority）从低到高使用以下字母表示，``android.util.Log`` 对象有对应的方法
   输出日志，每条日志都有一个关联的 ``tag`` 标记，可以用作 logcat 工具的过滤条件使用：

      -  ``V``: Verbose (lowest priority)
      -  ``D``: Debug
      -  ``I``: Info
      -  ``W``: Warning
      -  ``E``: Error
      -  ``F``: Fatal
      -  ``S``: Silent (highest priority, where nothing is ever printed)

   比如，以下代码片段用于打印一个 Debug 调试日志信息：

   .. code-block:: kotlin

      import android.util.Log
      
      // public static int d( String tag, String msg )
      // Send a DEBUG log message.
      Log.d("MyApp",  "MainActivity onCreate ...")

   因为日志系统是循环缓冲，logcat 可以一直输出日志内容，可以使用 grep 等工具过滤感兴趣的内容，
   也可以使用 logcat 命令自带的格式化和过滤功能。过滤器语法格式 ``<tag>[:priority]``,
   参考示例如下：

   =================================  ==================================
   logcat command                     description
   =================================  ==================================
   ``adb logcat -t 100 > log.txt``    保存最近 100 条日志到 log.txt 文件。
   ``adb logcat -v time``             按时间日志输出时间、API 调用时间格式。
   ``adb logcat *:W``                 过滤出 Warnning 以上级别的所有日志。
   ``adb logcat -d``                  过滤出 Warnning 以上级别的所有日志。
   ``adb logcat -b all -v color -d``  以彩色输出所有（5个）缓冲区的日志，然后结束。
   ``adb logcat -b crash -v color``   输出所有 crash 缓冲区的日志。
   ``adb logcat App:I MyApp:D *:S``   组合过滤出多个 App 标记的日志。
   =================================  ==================================

   注意，最后的 ``*:S`` 表示所有 S 级别以上的日志，因为没有比 S 级别更高的日志，所以它表示
   不要输出其它日志，只输出前面过滤列表匹配的日志。等价 -s 参数，Set default filter to silent。
   
   程序崩溃就会在 crash 缓冲区写入日志，这里通常包含 Java backtrace 回溯调试信息，可以用于
   程序闪退、无响应的问题分析。Crash 日志格式：首行给出原因（FATAL EXCEPTION），然后给出进程
   信息，后面缩进打印 backtraces。Crash 日志不能使用 tag 过滤，因为它不是由程序调用 ``Log``
   输出的日志格式，是由系统层面产生的异常日志。以下是 crash 日志格式参考，以及使用 sed 编辑器
   将特定的 App 的堆栈回溯日志过滤出来。以下日志显示，MainActivity 启动失败，因为 action bar
   设置错误：

   .. code-block:: bash

      adb logcat -b crash,kernel,radio -v raw | sed -n '
         /^Process: com.example.myapplication/,/^[^C ][^a ][^u ][^s ]/{p}
         '

      FATAL EXCEPTION: main
      Process: com.example.myapplication, PID: 1388
      java.lang.RuntimeException: Unable to start activity ComponentInfo\
         {com.example.myapplication/com.example.myapplication.MainActivity}: \
         java.lang.IllegalStateException: This Activity already has an action bar \
         supplied by the window decor. Do not request Window.FEATURE_SUPPORT_ACTION_BAR \
         and set windowActionBar to false in your theme to use a Toolbar instead.
          at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:3308)
          at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3457)
          at android.app.servertransaction.LaunchActivityItem.execute(LaunchActivityItem.java:83)
          ...
      Caused by: java.lang.IllegalStateException: \
         This Activity already has an action bar supplied by the window decor. \
         Do not request Window.FEATURE_SUPPORT_ACTION_BAR and set windowActionBar \
         to false in your theme to use a Toolbar instead.
          at androidx.appcompat.app.AppCompatDelegateImpl.setSupportActionBar(AppCompatDelegateImpl.java:630)
          at androidx.appcompat.app.AppCompatActivity.setSupportActionBar(AppCompatActivity.java:185)
          ...

GUI Application
---------------

   SDK API 30 (Android 10) 开始，默认使用 AndroidX 依赖库（Jetpack Compose），如果
   社区版本将 Android 工程模板作为模块添加到现有工程中时，并且选择 SDK 版本大于 API 29，
   那么 Android Create New Module 就会要求先迁移工程：

      Project needs to be converted to androidx.* dependencies

   Flutter 文档 `AndroidX migration`_ 所述，可以向配置文件 android/gradle.properties 
   或 .android/gradle.properties 添加下述代码，并点击 Sync Now 同步 gradle 配置就可以。
   也可以使用 Global Properties，即配置在项目根目录下，但是这种操作适用于 Android Studio：

      # AndroidX package structure to make it clearer which packages are bundled with the
      # Android operating system, and which are packaged with your app's APK
      # https://developer.android.com/topic/libraries/support-library/androidx-rn
      android.useAndroidX=true
      android.enableJetifier=true

   .. _AndroidX migration: https://docs.flutter.dev/release/breaking-changes/androidx-migration

   如果是社区版本，最佳操作是创建新工具，选择需要的 SDK 版本。

   Gradle 会缓存大量中间文件，并且频繁切换版本将大量增加缓存文件，在开始一个新项目时，最佳实践
   是先设置 Gradle 版本，或者直接修改 ``gradle\wrapper\gradle-wrapper.properties``。

   IntelliJ IDEA 和 Android Studio 存在插件重叠，以下是超过 50M，不乏大块头的插件，并且
   还不一定能直接替换或者使用软链接共享同一份文件，因为有插件兼容问题：

   .. code-block:: bash

      $ du -t 50M -d 1 'C:\Program Files\Android\Android Studio\plugins' | sort -n
      52057   C:\Program Files\Android\Android Studio\plugins\c-clangd
      103892  C:\Program Files\Android\Android Studio\plugins\java
      151280  C:\Program Files\Android\Android Studio\plugins\gradle
      209880  C:\Program Files\Android\Android Studio\plugins\design-tools
      273583  C:\Program Files\Android\Android Studio\plugins\android-ndk
      460731  C:\Program Files\Android\Android Studio\plugins\android
      475710  C:\Program Files\Android\Android Studio\plugins\Kotlin

      $ du -t 50M -d 1  "$USERPROFILE\AppData\Roaming\JetBrains\IdeaIC2024.1\plugins" | sort -n
      275204  "$USERPROFILE\AppData\Roaming\JetBrains\IdeaIC2024.1\plugins\JavaFX plugin"

      $ du -t 50M -d 1 'C:\IntelliJ IDEA CE2024.1.1\plugins' | sort -n
      54824   C:\IntelliJ IDEA CE2024.1.1\plugins\terminal
      98041   C:\IntelliJ IDEA CE2024.1.1\plugins\cwm-plugin
      109134  C:\IntelliJ IDEA CE2024.1.1\plugins\maven
      114900  C:\IntelliJ IDEA CE2024.1.1\plugins\java
      163016  C:\IntelliJ IDEA CE2024.1.1\plugins\gradle


   IntelliJ IDEA 2024.1.1 (Community Edition) 创建 JavaFX 项目模块时可能出现无法
   创建模块的问题，可能原因是选择的 SDK 版本过高，比如选用 OpenJDK 14，可以尝试降低版本
   `JDK 1.8`_ (Java SE Development Kit 8) 使用 JDK 内置的 JavaFX 构架来解决问题。
   但是 Intellij IDEA 需要 JDK 11 以上支持 JavaFX 项目。

      New Module
      Error adding module to project: Module root not found

   .. _JDK 1.8: https://repo.huaweicloud.com/java/jdk/8u202-b08/
   .. _JavaFX runtime: https://gluonhq.com/products/javafx/
   .. _Scene Builder: https://gluonhq.com/products/scene-builder/

.. container:: section
   
   可以先配置好 Intellij IDEA 项目，再创建 JavaFX 模块，并设置好 Sources 目录和依赖模块。
   可以先创建空项目（Gradle），然后将 JavaFX 库文件添加到项目的依赖库列表中，最好是添加到
   全局库列表中，并且将 JavaFX SDK 作为 New Project Libraray -> Java 形式添加，这样
   可以在所有项目中使用：File -> Project Structure -> Global Libraries
   在库列表中使用右键菜单 Add to Modules... 将依赖库分配给指定的 Intellij IDEA 模块使用。
   然后就只可以正常创建 JavaFX Application。一旦 Gradle 识别到 JavaFX 依赖，并下载依赖包，
   就可以正常使用 JavaFX 模板工程。

   相关的各个配置项参考如下：

   -  添加 JavaFX 依赖库（lib 目录）：Project Structure → Libraries → “+” → “Java”
   -  配置 `Scene Builder`_ 程序以编辑 fxml 文件：File -> Settings... -> Language & Framework -> JavaFX -> Path to Scene Builder
   -  配置 JVM 参数以正确引用 JavaFX runtime，解析 fxml 用户界面。编辑项目配置，引用依赖到的库：
      Run -> Edit Configurations -> Application -> Modify options -> Add VM options

      ::

         --module-path
         /javafx-sdk-17.0.11/lib
         --add-modules
         javafx.controls,javafx.fxml

   设置 --module-path 目的是让 JVM 找到库文件所在目录，设置 --add-modules 是指明引用的模块。
   如果使用 Java 9 模块，即 JavaFX jmods，那么就只需要指定 --module-path 即可。
   参考项目配置文档 `JavaFX docs`_。


   注意，Intellij IDEA 的模块相当于 Eclipse 工作空间（Workspace）下包含的 Project，
   也就是一个软件项目工程。IDEA 中只的 Project 就相当其它软件中的工作空间（Workspace）概念。

   创建空项目的好处是没有任何多余的依赖，只包含完整的项目目录结构。你可以任意编写 Gradle 等项目
   管理工具的配置脚本。然后可以再添加任意的 module，内置的 gradle 插件可以向在侧栏面板中提供
   所有可用的构建任务列表：View -> Tool Windows -> Gradle。也可以自行编辑配置，添加定制的
   构建任务：Run -> Edit Configurations，点击 + 图标添加 Application 就可以构建可执行
   执行。当然，需要在构建任务的配置面板中设置 Build and run，指定入口类。空项目添加新的 Java
   或者 Kotlin 模块时，不像 JavaFX 模板创建的模块那样属于 ``Application`` 类型。差别就在于
   ``build.gradle`` 有没有定义 application 对象（需要依赖 application 插件）。是否使用
   mainModule 属性，取决于代码是否使用 ``module-info.java`` 定义了模块信息。编辑应用配置
   时，也需要相应打开/关闭模块参数：Modify options -> Use classpath of Module。如有安装
   Android 插件，那么还会有 ``Android App`` 配置。如果安装了用于插件开发的 Plugin DevKit
   插件，那么就会有 ``Plugin``。这些不同类型的配置会有不同的执行逻辑，可能是可运行程序，也可以
   是手机上运行的 App。也可以是 Intellij IDEA 本身扩展功能的插件。

   ::

      application {
        mainModule = 'com.jeango.app_fx'
        mainClass = 'com.jeango.app_fx.HelloApplication'
      }

   如果通过 gradle 来配置项目，那么 ``build.gradle`` 配置文件应该包含以下内容，它会自动下载
   JavaFX 依赖库，以及配置 JVM 参数：

   ::

      plugins {
        id 'application'
        id 'org.openjfx.javafxplugin' version '0.0.5'
      }

      javafx {
          version = "17.0.8"
          modules = [ 'javafx.controls', 'javafx.fxml' ]
      }

   如果没有正确配置 JVM 参数，那么运行时就不会被运行，也就无法找到 JavaFX 组件：

      Error: JavaFX runtime components are missing, and are required to run this application

      java: module not found: javafx.fxml
      java: module not found: javafx.controls

   Intellij IDEA 环境中执行 Gradle (Kotlin) 项目构建时可能产生配置缓存（configuration cache）
   问题导致构建失败，错误信息如下：

      Task `:compileJava` of type `org.gradle.api.tasks.compile.JavaCompile`: 
      cannot serialize object of type 'org.gradle.api.internal.project.DefaultProject', 
      a subtype of 'org.gradle.api.Project', 
      as these are not supported with the configuration cache.
      See https://docs.gradle.org/8.2/userguide/configuration_cache.html#config_cache:requirements:disallowed_types

   以上错误就是说 ``:compileJava`` 这个任务不能序列化 DefaultProject 对象，因为它不支持
   配置缓存。核心 Gradle 插件也并非全都支持配置缓存。可以尝试直接执行 gradle 命令去构建、执行，
   可以正确完成构建与执行，但是命令操作完成，依然存在配置缓存问题。也就是返回 Intellij IDEA 
   的是构建失败的信息。

   ::

      $ ./gradlew --configuration-cache help
      Calculating task graph as configuration cache cannot be reused because file 'gradle.properties' has changed.

      > Configure project :
      Project : => 'com.jeango.demo' Java module
      ...

      $ ./gradlew :clean
      Reusing configuration cache.
      ...

      $ ./gradlew :build
      Calculating task graph as no configuration cache is available for tasks: :build
      ...

      $ ./gradlew :run
      Calculating task graph as no configuration cache is available for tasks: :run
      ...
      * What went wrong:
      Configuration cache problems found in this build.

   配置缓存是 Gradle 7.5 引入的构建优化措施，将构建过程中的一些输入缓存并复用，避免重复执行相同
   的工作，以达到优化目的。为了捕获任务图（task graph）的状态保存到配置缓存，并在以后的构建中复用，
   Gradle 对构建任务（Task）和其他构建逻辑作出一些要求。这些要求中的每一个都被视为配置缓存“问题”，
   如果存在违规，构建将失败。某些特定类型不能被任务引用，任务实例不得从其字段中引用这些类型。这同样
   适用于作为闭包的任务操作，例如 doFirst {} 或 doLast {} 。这些类型分为以下几类：

   -  Live JVM state types (e.g. ClassLoader, Thread, OutputStream, Socket etc…) 
   -  Gradle model types (e.g. Gradle, Settings, Project, SourceSet, Configuration etc…) 
   -  Dependency management types

   例如，引用 Project 以便在执行时获取 ``project.version``，则应该使用 ``Property<String>``
   直接将工程版本声明为任务的输入。又如，引用 SourceSet 以稍后获取源文件、编译类路径或源集的输出。
   应该改为将它们声明为 ``FileCollection`` 输入并仅引用它。

   同样的要求适用于依赖管理类型，但有一些细微差别。

   如果 Gradle 构建过程中未能序列化运行任务所需的状态，则会生成检测到的问题的 HTML 报告文档。
   Gradle 失败时输出内容包括指向报告的可点击链接。此报告包含三类基本信息，可深入了解问题的成因：

   -  Build configuration inputs
   -  Problems grouped by message
   -  Problems grouped by location

   第二项是分组的问题消息，它指示了什么对象的什么操作有问题，并且后面的问号链接到相关文档：

      › ⨉  execution of task :configJavafxRun caused invocation of 
           Task.extensions in other task at execution time which is unsupported. ?

      › ⨉  invocation of Task.extensions at execution time is unsupported. ?

   如果在 build.properties 配置文件中未找到相关的不合规的脚本片断，那么就有可能是引用的插件
   不支持配置缓存导致的问题。可以逐一排查 plugins 配置中涉及的插件。


   Java 8 集成 JavaFX 框架，但是 Java 9 引入模块概念，模块（Jigsaw）使用 jmods 文件。
   JavaFX 将剥离出来作为单独进行维护。JDK 11 开始，JavaFX 正式从 JDK 中分离出来作为独立模块。
   也就是说从 JDK 11 开始，Java Fx 作为第三方依赖库引入，不再是 JDK 内置模块。Java 9 。
   Gradle 或者 Maven 项目配置请参考文档 `JavaFX docs`_。

   Java 9 模块特性参考 Bruce Eckel 编写的 On Java 8 一书，8.5 New Feature: Modules。

   Java AWT（Abstract Window Toolkit）是用来处理图形最基本的方式，最早期的 GUI 框架，一般
   不直接使用它来开发，而是使用基于 AWT 的第二代 GUI 框架 Swing 等。目前最新最活跃，并更新比较
   活跃的就是 JavaFX，不仅支持 CSS 样式化，又有不少第三方库支持，开发起来还是比较方便。
   JavaFX-specific 代码文件包括 .fxml 和 JavaFX .css 样式。

   AWT（Abstract Window Toolkit）框架提供的基本功能包括：

      - UI 组件：如：窗口、按钮、菜单等；
      - 容器组件：是 UI 元素的容器，实现组件管理、布局管理；
      - Graphics：在组件上进行图形绘制所使用的图形环境的父类；
      - 布局管理器：用来安排图形界面组件的位置；
      - 事件处理对象：用来处理图形界面组件所触发的事件；

   .. _JavaFX docs: https://openjfx.io/openjfx-docs/#IDE-Intellij
   .. _JavaFX: https://www.jetbrains.com/help/idea/javafx.html
   .. _Scene Builder Wiki: https://github.com/gluonhq/scenebuilder/wiki/Basic-JavaFX-project-with-Scene-Builder
   .. _Swing GUI Designer: https://www.jetbrains.com/help/idea/gui-designer-basics.html


Plugins Dev
------------

   IDEA 提供插件扩展机制，官方推荐使用 Gradle IntelliJ Plugin 工程编写插件。
   在开发插件时就需要指定插件适用于什么 IDE， 默认值为 ``type="IC"``，对应值如下：
   ::

      IC - IntelliJ IDEA Community Edition
      IU - IntelliJ IDEA Ultimate Edition
      CL - CLion (A cross-platform IDE for C and C++)
      PY - PyCharm Professional Edition
      PC - PyCharm Community Edition
      PS - PhpStorm
      RD - Rider
      GO - GoLand
      AI - Android Studio
      JPS - JPS-only
      GW - Gateway

   IU 插件适用多种定制 IDEA，包括：

      *  WebStorm - The JavaScript and TypeScript IDE。
      *  AppCode - Smart IDE for iOS/macOS development
      *  DataGrip - A powerful cross-platform tool for relational and NoSQL databases

   插件可以通过注册 Action 扩展 IDE 现有功能，比如向菜单、工具栏中添加功能项目。参考现有插件的
   实现： WiFiADB_ - A IntelliJ IDE plugin use for connect Android device wireless. 
   
   .. _WiFiADB: https://github.com/dengzii/WiFiADB

   Plugin DevKit 是内置插件，为开发插件提供支持，它使用 IntelliJ IDEA 自己的构建系统来为
   开发 IDEA 插件提供支持。开发 IDEA 插件之前需要安装并启用 Plugin DevKit。

   Android Studio 本身已经移除了插件模板，可以使用 IntelliJ IEDA 创建插件项目，完成插件
   开发、发布之后，再安装到 Android Studio 中使用。因此，决定插件什么 Android Studio 版本
   可以使用插件是前置工作。确定它基于哪个 IntelliJ 版本，这很重要。Android Studio 版本和
   IntelliJ 版本一致，能让简化调试工作。如果插件使用了新版的 IntelliJ 包含的 features，
   可能导致插件无法安装到旧版 Android Studio，或提示兼容性报错。

   如果不能联网，可以手动安装本地插件包，打开插件配置面板，靠近右上角有一个齿轮图标，点击弹出菜单，
   选择 Install Plugin from Disk... 安装本地插件包。


   开发插件时，需要配置项目的 IntelliJ Platform Plugin SDK，基于 JDK 之上运行。
   切换到 File -> Project Structure -> Platform Settings -> SDKs。点击 + 按钮，
   先选择 Add JDK，指定 JDK 的路径再选择添加 IntelliJ Platform Plugin SDK。

   *  `IntelliJ IDEA and Android Studio FAQ <https://blog.jetbrains.com/idea/2013/05/intellij-idea-and-android-studio-faq/>`__
   *  `IntelliJ IDEA Editions Comparison Matrix <https://www.jetbrains.com/products/compare/?product=idea&product=idea-ce>`__
   *  `IntelliJ Platform SDK <https://plugins.jetbrains.com/docs/intellij/welcome.html>`__
   *  `Plugins Targeting IntelliJ Platform-Based IDEs <https://plugins.jetbrains.com/docs/intellij/dev-alternate-products.html>`__
   *  `Plugin Quick Start Guide <https://plugins.jetbrains.com/docs/intellij/plugins-quick-start.html>`__
   *  `IntelliJ Platform Plugin Template <https://github.com/JetBrains/intellij-platform-plugin-template>`__

Anti-virus program and build performance
----------------------------------------

   Windows 10 系统中设置了 ``ANDROID_NDK_HOME`` 和 ``NDK_HOME`` 环境变量，
   但 Android Studio 可能仍然无法找到 NDK，并且不能手动设置。应该使用默认的 NDK 目录，
   它位于 SDK 安装目录下的 ndk 子目录下。可以手动修改本地配置 local.properties，这里的
   “本地”（local）意指只在当前用户开发主机上使用的配置文件，一般不将它放到版本管理仓库中，
   也不需要与其他协作用户共享，他们可以使用自己的设置的“本地”配置文件：
   ::

      ndk.dir=C\:\\android-sdk\\ndk\\android-ndk-r26

   以上配置文件

   NDK 目录下有一个 package.xml 配置文件，它包含了 NDK 应该存放的路径 localPackage 节点
   的 ``path`` 属性使用分号分隔各级目录。

   例如以下配置指示 NDK 存放在 android-sdk/ndk/26.0.10792818 目录，Android Studio 工程
   设置的模块信息可以显示当前检测到的 NDK 版本，指定 NDK 版本会写入 build.properties 配置文件：
   File -> Project Structure -> Modules -> Properties -> NDK Version

   ::

       <license id="license-F208E222" type="text" />
       <localPackage path="ndk;26.0.10792818" obsolete="false">
           <type-details xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ns5:genericDetailsType" />
           <revision>
               <major>26</major>
               <minor>0</minor>
               <micro>10792818</micro>
           </revision>
           <display-name>Android NDK</display-name>
           <uses-license ref="license-F208E222" />
       </localPackage>


   如果收到警告 “Your anti-virus program might be impacting your build performance”。
   通常意味着防病毒软件可能干扰了构建过程，可以将构建过程需要用到的目录添加到可信目标列表中：
   File -> Settings -> Build, Execution, Deployment -> Compiler -> Trust Location
   或者取消 Enable Automatically Compile，如果有这个选项，减少防病毒软件的扫描频率，提高构建性能。
   将目录添加到 Windows Defender 的白名单，避免其干扰编译程序的工作，操作步骤：

   *  Select Star, then open Settings. Under Privacy & security, select Virus & threat protection.
   *  Under Virus & threat protection settings, select Manage settings, and then under Exclusions, select Add or remove exclusions.
   *  Select Add an exclusion, and then select from files, folders, file types, or process.

/TOC 💛 Android Studio
======================

.. container:: devsite-mobile-nav-bottom

   - What's new in Android Studio

      -  `Android Studio Jellyfish release notes <https://developer.android.google.cn/studio/releases>`__
      -  `Android Emulator release notes <https://developer.android.google.cn/studio/releases/emulator>`__
      -  `Past Android Studio releases <https://developer.android.google.cn/studio/releases/past-releases>`__

   - Topic: 1. 🟢 Get started with Android Studio

      -  `Overview <https://developer.android.google.cn/studio/intro>`__
      -  `Install Android Studio <https://developer.android.google.cn/studio/install>`__

      - Get to know the UI

         -  `Overview <https://developer.android.google.cn/studio/intro/user-interface>`__
         -  `Accessibility features <https://developer.android.google.cn/studio/intro/accessibility>`__
         -  `Keyboard shortcuts <https://developer.android.google.cn/studio/intro/keyboard-shortcuts>`__

      -  `Workflow basics <https://developer.android.google.cn/studio/workflow>`__

   - Topic: 2. 🟢 Manage your project

      -  `Overview <https://developer.android.google.cn/studio/projects>`__
      -  `Create a project <https://developer.android.google.cn/studio/projects/create-project>`__
      -  `Migrate to Android Studio <https://developer.android.google.cn/studio/intro/migrate>`__
      -  `Version control basics <https://developer.android.google.cn/studio/projects/version-control>`__
      -  `Configure the IDE <https://developer.android.google.cn/studio/intro/studio-config>`__
      -  `Update the IDE and tools <https://developer.android.google.cn/studio/intro/update>`__
      -  `About Play Feature Delivery <https://developer.android.google.cn/guide/app-bundle/dynamic-delivery>`__

      -  Add C and C++ code

         -  `Overview <https://developer.android.google.cn/studio/projects/add-native-code>`__
         -  `Install NDK and CMake <https://developer.android.google.cn/studio/projects/install-ndk>`__
         -  `Configure the NDK for AGP <https://developer.android.google.cn/studio/projects/configure-agp-ndk>`__
         -  `Configure CMake <https://developer.android.google.cn/studio/projects/configure-cmake>`__
         -  `Link Gradle <https://developer.android.google.cn/studio/projects/gradle-external-native-builds>`__

      -  `Create an Android library <https://developer.android.google.cn/studio/projects/android-library>`__

      -  `Set up continuous integration <https://developer.android.google.cn/studio/projects/continuous-integration>`__

   - Topic: 3. 🟢 Write your code

      -  `Write your code quicker and more efficiently <https://developer.android.google.cn/studio/write>`__

      -   Work with templates

         -  `Add code from a template <https://developer.android.google.cn/studio/projects/templates>`__
         -  `Find sample code <https://developer.android.google.cn/studio/write/sample-code>`__
         -  `Create a Java class or type <https://developer.android.google.cn/studio/write/create-java-class>`__

      -  `Add a module for a new device <https://developer.android.google.cn/studio/projects/add-app-module>`__
      -  `Use Java 8 language features <https://developer.android.google.cn/studio/write/java8-support>`__
      -  `Java 8 language support table <https://developer.android.google.cn/studio/write/java8-support-table>`__
      -  `Add app resources <https://developer.android.google.cn/studio/write/add-resources>`__

      - Use tools to develop UI

         -  `Develop a layout with Compose <https://developer.android.google.cn/jetpack/compose/tooling/previews>`__
         -  `Develop a layout with Views <https://developer.android.google.cn/studio/write/layout-editor>`__
         -  `Create animations <https://developer.android.google.cn/studio/write/motion-editor>`__
         -  `Manage UI resources <https://developer.android.google.cn/studio/write/resource-manager>`__
         -  `Add multi-density vector graphics <https://developer.android.google.cn/studio/write/vector-asset-studio>`__
         -  `Create app icons <https://developer.android.google.cn/studio/write/create-app-icons>`__
         -  `Create resizable bitmaps (9-patch) <https://developer.android.google.cn/studio/write/draw9patch>`__
         -  `Create WebP images <https://developer.android.google.cn/studio/write/convert-webp>`__
         -  `Localize the UI <https://developer.android.google.cn/studio/write/translations-editor>`__

      -  `Add Android app links <https://developer.android.google.cn/studio/write/app-link-indexing>`__
      -  `Connect to Firebase <https://developer.android.google.cn/studio/write/firebase>`__
      -  `Improve your code with lint checks <https://developer.android.google.cn/studio/write/lint>`__
      -  `Improve code inspection with annotations <https://developer.android.google.cn/studio/write/annotations>`__
      -  `Tools attributes reference <https://developer.android.google.cn/studio/write/tool-attributes>`__

   - Topic: 4. 🟢 Run and debug your app

      -  `Overview <https://developer.android.google.cn/studio/run>`__

      -  Run your app on virtual devices

         -  `Create and manage virtual devices <https://developer.android.google.cn/studio/run/managing-avds>`__

         -  Run your app with Android Emulator

            -  `Overview: Run your app with Android Emulator <https://developer.android.google.cn/studio/run/emulator>`__
            -  `Test on multiple screen sizes <https://developer.android.google.cn/studio/run/resizable-emulator>`__
            -  `Take screenshots <https://developer.android.google.cn/studio/run/emulator-take-screenshots>`__
            -  `Record the screen <https://developer.android.google.cn/studio/run/emulator-record-screen>`__
            -  `Use the camera <https://developer.android.google.cn/studio/run/emulator-use-camera>`__
            -  `Launch in a separate window <https://developer.android.google.cn/studio/run/emulator-launch-separate-window>`__
            -  `Launch without running an app <https://developer.android.google.cn/studio/run/emulator-launch-without-app>`__
            -  `Install and add files <https://developer.android.google.cn/studio/run/emulator-install-add-files>`__
            -  `Use WiFi <https://developer.android.google.cn/studio/run/emulator-wifi>`__

            -  Use advanced Android Emulator features

               -  `Use extended controls <https://developer.android.google.cn/studio/run/emulator-extended-controls>`__
               -  `Use snapshots <https://developer.android.google.cn/studio/run/emulator-snapshots>`__
               -  `Use the emulator from the command line <https://developer.android.google.cn/studio/run/emulator-commandline>`__
               -  `Send console commands <https://developer.android.google.cn/studio/run/emulator-console>`__
               -  `Set up networking <https://developer.android.google.cn/studio/run/emulator-networking>`__
               -  `Configure hardware acceleration <https://developer.android.google.cn/studio/run/emulator-acceleration>`__
               -  `Emulator feature comparison <https://developer.android.google.cn/studio/run/emulator-comparison>`__

            -  `Troubleshoot emulator <https://developer.android.google.cn/studio/run/emulator-troubleshooting>`__

      -  `Android Device Streaming <https://developer.android.google.cn/studio/run/android-device-streaming>`__

      -  Run your app on a local device

         -  `Get started <https://developer.android.google.cn/studio/run/device>`__
         -  `Install OEM USB drivers <https://developer.android.google.cn/studio/run/oem-usb>`__
         -  `Get the Google USB driver <https://developer.android.google.cn/studio/run/win-usb>`__

      -  Debug your code

         -  `Get started debugging your code <https://developer.android.google.cn/studio/debug>`__
         -  `Configure on-device developer options <https://developer.android.google.cn/studio/debug/dev-options>`__
         -  `Write and view logs <https://developer.android.google.cn/studio/debug/logcat>`__

         -  Analyze and address crash issues

            -  `Analyze a stack trace <https://developer.android.google.cn/studio/debug/stacktraces>`__
            -  `Analyze Crashlytics and Vitals reports <https://developer.android.google.cn/studio/debug/app-quality-insights>`__

         -  `Debug your layout <https://developer.android.google.cn/studio/debug/layout-inspector>`__
         -  `View design issues <https://developer.android.google.cn/studio/debug/universal-problems-panel>`__
         -  `Inspect network traffic <https://developer.android.google.cn/studio/debug/network-profiler>`__
         -  `Debug your database <https://developer.android.google.cn/studio/inspect/database>`__
         -  `Debug your WorkManager Workers <https://developer.android.google.cn/studio/inspect/task>`__
         -  `View on-device files <https://developer.android.google.cn/studio/debug/device-file-explorer>`__
         -  `Debug pre-built APKs <https://developer.android.google.cn/studio/debug/apk-debugger>`__
         -  `Take a screenshot <https://developer.android.google.cn/studio/debug/am-screenshot>`__
         -  `Record a video <https://developer.android.google.cn/studio/debug/am-video>`__
         -  `Capture and read bug reports <https://developer.android.google.cn/studio/debug/bug-report>`__
         -  `Analyze your APK or AAB <https://developer.android.google.cn/studio/debug/apk-analyzer>`__

      -  `Customize run/debug configurations <https://developer.android.google.cn/studio/run/rundebugconfig>`__

   - Topic: 5. 🟢 Test your code

      -  `Choose a testing method <https://developer.android.google.cn/studio/test>`__
      -  `Test in Android Studio <https://developer.android.google.cn/studio/test/test-in-android-studio>`__
      -  `Test with Gradle Managed Devices <https://developer.android.google.cn/studio/test/gradle-managed-devices>`__
      -  `Test against screen changes <https://developer.android.google.cn/studio/test/espresso-api>`__
      -  `Test from the command line <https://developer.android.google.cn/studio/test/command-line>`__
      -  `Set up advanced test configurations <https://developer.android.google.cn/studio/test/advanced-test-setup>`__

      -  Use specialized testing tools

         -  `Create UI tests <https://developer.android.google.cn/studio/test/other-testing-tools/espresso-test-recorder>`__
         -  `Set up automatic testing of your code <https://developer.android.google.cn/studio/test/other-testing-tools/app-crawler>`__
         -  `Stress-test your code with user events <https://developer.android.google.cn/studio/test/other-testing-tools/monkey>`__

   - Topic: 6. 🟢 Inspect performance issues

      -  `Overview: Inspect performance issues <https://developer.android.google.cn/studio/profile>`__

      -  Inspect CPU activity

         -  `Display your app's CPU profile <https://developer.android.google.cn/studio/profile/cpu-profiler>`__
         -  `Record traces <https://developer.android.google.cn/studio/profile/record-traces>`__
         -  `Export traces <https://developer.android.google.cn/studio/profile/export-traces>`__
         -  `Import traces <https://developer.android.google.cn/studio/profile/import-traces>`__
         -  `Inspect traces <https://developer.android.google.cn/studio/profile/inspect-traces>`__
         -  `Detect UI jank <https://developer.android.google.cn/studio/profile/jank-detection>`__
         -  `Generate trace logs <https://developer.android.google.cn/studio/profile/generate-trace-logs>`__

      -  `Inspect your app's memory usage <https://developer.android.google.cn/studio/profile/memory-profiler>`__
      -  `Inspect your app's energy usage <https://developer.android.google.cn/studio/profile/energy-profiler>`__
      -  `Inspect pre-built APKs <https://developer.android.google.cn/studio/profile/apk-profiler>`__
      -  `Power profiler <https://developer.android.google.cn/studio/profile/power-profiler>`__

   - Topic: 7. 🟢 Publish your app

         -  `Overview: Publish your app <https://developer.android.google.cn/studio/publish>`__
         -  `Prepare for release <https://developer.android.google.cn/studio/publish/preparing>`__
         -  `Version your app <https://developer.android.google.cn/studio/publish/versioning>`__
         -  `Sign your app <https://developer.android.google.cn/studio/publish/app-signing>`__
         -  `Upload your app <https://developer.android.google.cn/studio/publish/upload-bundle>`__

   -  `Troubleshoot <https://developer.android.google.cn/studio/troubleshoot>`__
   -  `Known issues <https://developer.android.google.cn/studio/known-issues>`__
   -  `Report a bug <https://developer.android.google.cn/studio/report-bugs>`__


/Topic: 1. 🟢 Get started with Android Studio
===============================================

/Meet Android Studio
====================

   .. container:: devsite-article-body clearfix

      Android Studio is the official Integrated Development
      Environment (IDE) for Android app development. Based on the
      powerful code editor and developer tools from `IntelliJ IDEA <https://www.jetbrains.com/idea/>`__ , Android Studio
      offers even more features that enhance your productivity
      when building Android apps, such as:

      -  A flexible Gradle-based build system
      -  A fast and feature-rich emulator
      -  A unified environment where you can develop for all
         Android devices
      -  Live Edit to update composables in emulators and physical
         devices in real time
      -  Code templates and GitHub integration to help you build
         common app features and import sample code
      -  Extensive testing tools and frameworks
      -  Lint tools to catch performance, usability, version
         compatibility, and other problems
      -  C++ and NDK support
      -  Built-in support for `Google Cloud Platform <https://cloud.google.com/tools/android-studio/docs>`__,
         making it easy to integrate Google Cloud Messaging and
         App Engine

      This page provides an introduction to basic Android Studio
      features. For a summary of the latest changes, see the
      `Android Studio release notes <https://developer.android.google.cn/studio/releases>`__.

      .. rubric:: Project structure
         :name: project_structure

      .. container:: attempt-right

         ..  image:: https://developer.android.google.cn/static/studio/images/project-android-view.png

         **Figure 1.** Project files in Android project view.

      Each project in Android Studio contains one or more modules
      with source code files and resource files. The types of
      modules include:

      -  Android app modules
      -  Library modules
      -  Google App Engine modules

      By default, Android Studio displays your project files in
      the Android project view, as shown in figure 1. This view is
      organized by modules to provide quick access to your
      project's key source files. All the build files are visible
      at the top level, under **Gradle Scripts**.

      Each app module contains the following folders:

      -  **manifests**: Contains the ``AndroidManifest.xml`` file.
      -  **java**: Contains the Kotlin and Java source code files,
         including JUnit test code.
      -  **res**: Contains all non-code resources such as UI
         strings and bitmap images.

      The Android project structure on disk differs from this
      flattened representation. To see the actual file structure
      of the project, select **Project** instead of **Android**
      from the **Project** menu.

      For more information, see `Projects overview <https://developer.android.google.cn/studio/projects>`__.

      .. rubric:: Gradle build system
         :name: gradle_build_system

      Android Studio uses Gradle as the foundation of the build
      system, with more Android-specific capabilities provided by
      the `Android Gradle plugin <https://developer.android.google.cn/build/releases/gradle-plugin>`__. This build system
      runs as an integrated tool from the Android Studio menu and
      independently from the command line. You can use the
      features of the build system to do the following:

      -  Customize, configure, and extend the build process.
      -  Create multiple APKs for your app with different
         features, using the same project and modules.
      -  Reuse code and resources across source sets.

      By employing the flexibility of Gradle, you can achieve all
      of this without modifying your app's core source files.

      Android Studio build files are named ``build.gradle.kts`` if
      you use `Kotlin <https://kotlinlang.org>`__ (recommended) or
      ``build.gradle`` if you use
      `Groovy <http://groovy-lang.org>`__. They are plain text
      files that use the Kotlin or Groovy syntax to configure the
      build with elements provided by the Android Gradle plugin.
      Each project has one top-level build file for the entire
      project and separate module-level build files for each
      module. When you import an existing project, Android Studio
      automatically generates the necessary build files.

      **Note:**\  We might reference either the
      ``build.gradle.kts`` or ``build.gradle`` file alone in the
      documentation, but they're conceptually interchangeable. For
      example if you see ``build.gradle.kts`` but you use the
      Groovy DSL to configure your build, you can think of it as
      the ``build.gradle`` file (and the other way around).
      To learn more about the build system and how to configure
      your build, see `Configure your build <https://developer.android.google.cn/build>`__.

      .. rubric:: Build variants
         :name: build_variants

      The build system can help you create different versions of
      the same app from a single project. This is useful when you
      have both a free version and a paid version of your app or
      if you want to distribute multiple APKs for different device
      configurations on Google Play.

      For more information about configuring build variants, see
      `Configure build variants <https://developer.android.google.cn/build/build-variants>`__.

      .. rubric:: Multiple APK support
         :name: multiple_apk_support

      Multiple APK support lets you efficiently create multiple
      APKs based on screen density or ABI. For example, you can
      create separate APKs of an app for the ``hdpi`` and ``mdpi``
      screen densities, while still considering them a single
      variant and letting them share test APK, ``javac``, ``dx``,
      and ProGuard settings.

      For more information about multiple APK support, read `Build multiple APKs <https://developer.android.google.cn/build/configure-apk-splits>`__.

      .. rubric:: Resource shrinking
         :name: resource_shrinking

      Resource shrinking in Android Studio automatically removes
      unused resources from your packaged app and library
      dependencies. For example, if your app uses `Google Play services <https://developers.google.cn/android/guides/overview>`__
      to access Google Drive functionality, and you are not
      currently using `Google Sign-In <https://developer.android.google.cn/training/sign-in>`__, then
      resource shrinking can remove the various drawable assets
      for the ``SignInButton`` buttons.

      **Note:** Resource shrinking works in conjunction with code
      shrinking tools, such as ProGuard.

      For more information on shrinking code and resources, see
      `Shrink, obfuscate, and optimize your app <https://developer.android.google.cn/build/shrink-code>`__.

      .. rubric:: Manage dependencies
         :name: manage_dependencies

      Dependencies for your project are specified by name in the
      module-level build script. Gradle finds dependencies and
      makes them available in your build. You can declare module
      dependencies, remote binary dependencies, and local binary
      dependencies in your ``build.gradle.kts`` file.

      Android Studio configures projects to use the Maven Central
      Repository by default. This configuration is included in the
      top-level build file for the project.

      For more information about configuring dependencies, read
      `Add build dependencies <https://developer.android.google.cn/build/dependencies>`__.

      .. rubric:: Debug and profile tools
         :name: debug_and_profile_tools

      Android Studio helps you debug and improve the performance
      of your code, including inline debugging and performance
      analysis tools.

      .. rubric:: Inline debugging
         :name: inline_debugging

      Use inline debugging to enhance your code walkthroughs in
      the debugger view with inline verification of references,
      expressions, and variable values.

      Inline debug information includes:

      -  Inline variable values
      -  Objects that reference a selected object
      -  Method return values
      -  Lambda and operator expressions
      -  Tooltip values

      To enable inline debugging, in the **Debug** window, click
      **Settings** |studio-debug-settings-icon| and select **Show Variable Values in
      Editor**.

      .. rubric:: Performance profilers
         :name: performance_profilers

      Android Studio provides performance profilers so you can
      easily track your app's memory and CPU usage, find
      deallocated objects, locate memory leaks, optimize graphics
      performance, and analyze network requests.

      To use performance profilers, with your app running on a
      device or emulator, open the Android Profiler by selecting
      **View > Tool Windows > Profiler**.

      For more information about performance profilers, see
      `Profile your app performance <https://developer.android.google.cn/studio/profile>`__.

      .. rubric:: Heap dump
         :name: heap_dump

      When profiling memory usage in Android Studio, you can
      simultaneously initiate garbage collection and dump the Java
      heap to a heap snapshot in an Android-specific ``HPROF``
      binary format file. The HPROF viewer displays classes,
      instances of each class, and a reference tree to help you
      track memory usage and find memory leaks.

      For more information about working with heap dumps, see
      `Capture a heap dump <https://developer.android.google.cn/studio/profile/memory-profiler#capture-heap-dump>`__.

      .. rubric:: Memory Profiler
         :name: memory_profiler

      Use Memory Profiler to track memory allocation and watch
      where objects are being allocated when you perform certain
      actions. These allocations help you optimize your app’s
      performance and memory use by adjusting the method calls
      related to those actions.

      For information about tracking and analyzing allocations,
      see `View memory allocations <https://developer.android.google.cn/studio/profile/memory-profiler#record-allocations>`__.

      .. rubric:: Data file access
         :name: data_file_access

      The Android SDK tools, such as
      `Systrace <https://developer.android.google.cn/topic/performance/tracing/command-line>`__ and
      `Logcat <https://developer.android.google.cn/studio/debug/am-logcat>`__, generate performance
      and debugging data for detailed app analysis.

      To view the available generated data files:

      #. Open the Captures tool window.
      #. In the list of the generated files, double-click a file
         to view the data.
      #. Right-click any HPROF files to convert them to the
         standard.
      #. Investigate your RAM usage file format.

      .. rubric:: Code inspections
         :name: code_inspections

      Whenever you compile your program, Android Studio
      automatically runs configured `lint <https://developer.android.google.cn/studio/write/lint>`__
      checks and other `IDE inspections <https://www.jetbrains.com/help/idea/2023.3/code-inspection.html>`__
      to help you easily identify and correct problems with the
      structural quality of your code.

      The lint tool checks your Android project source files for
      potential bugs and optimization improvements for
      correctness, security, performance, usability,
      accessibility, and internationalization.

      .. image:: https://developer.android.google.cn/static/studio/images/lint-inspection-results.png

      **Figure 2.** The results of a lint inspection in Android
      Studio.

      In addition to lint checks, Android Studio performs IntelliJ
      code inspections and validates annotations to streamline
      your coding workflow.

      For more information, see `Improve your code with lint checks <https://developer.android.google.cn/studio/write/lint>`__.

      .. rubric:: Annotations in Android Studio
         :name: annotations_in_android_studio

      Android Studio supports annotations for variables,
      parameters, and return values to help you catch bugs, such
      as null pointer exceptions and resource type conflicts.

      The Android SDK Manager packages the Jetpack Annotations
      library in the Android Support Repository for use with
      Android Studio. Android Studio validates the configured
      annotations during code inspection.

      For more details about Android annotations, see `Improve code inspection with annotations <https://developer.android.google.cn/studio/write/annotations>`__.

      .. rubric:: Log messages
         :name: log_messages

      When you build and run your app with Android Studio, you can
      view `adb <https://developer.android.google.cn/studio/command-line/adb>`__ output and
      device log messages in the `Logcat window <https://developer.android.google.cn/studio/debug/am-logcat>`__.

      .. rubric:: Sign in to your developer account
         :name: sign-in

      Sign in to your developer account in Android Studio to
      access additional tools that require authentication, such as
      Firebase and Android Vitals in 
      `App Quality Insights <https://developer.android.google.cn/studio/debug/app-quality-insights>`__ 
      and `Gemini in Android Studio <https://developer.android.google.cn/studio/preview/gemini>`__. By signing
      in, you give those tools permission to view and manage your
      data across Google services.

      To sign in to your developer account in Android Studio,
      click the profile icon |profile-icon| at the end of the toolbar.
      Follow the prompts to provide the IDE with only the
      permissions required for each feature you want to enable. If
      you're already signed in, manage the permissions at **File**
      (**Android Studio** on macOS) > **Settings** > **Tools** >
      **Google Accounts**.

      Content and code samples on this page are subject to the
      licenses described in the `Content License <https://developer.android.google.cn/license>`__. 
      Java and OpenJDK are trademarks or registered trademarks of Oracle
      and/or its affiliates.

      Last updated 2024-05-03 UTC.


      .. |Android Developers| image:: https://www.gstatic.cn/devrel-devsite/prod/v7ec1cdbf90989ab082f30bf9b9cbe627804848c18b70d722062aeb6c6d8958b5/android/images/lockup.svg
         :class: devsite-site-logo
      .. |studio-debug-settings-icon| image:: https://developer.android.google.cn/static/studio/images/studio-debug-settings-icon.png
         :class: inline-icon
      .. |profile-icon| image:: https://developer.android.google.cn/static/studio/images/intro/profile-icon.png
         :class: inline-icon



/Install Android Studio
=======================

.. container:: devsite-article-body clearfix

   Set up Android Studio in just a few clicks. First, check the
   system requirements. Then `download the latest version of Android Studio <#>`__.

   .. rubric:: Windows
      :name: windows

   **Note:**\  Windows machines with ARM-based CPUs aren't
   currently supported.
   Here are the system requirements for Windows:

   ==============  =============================  ========================
   Requirement     Minimum                        Recommended
   ==============  =============================  ========================
   OS              64-bit Microsoft Windows 8     Latest 64-bit version of Windows

   RAM             8 GB RAM                       16 GB RAM or more

   CPU             x86_64 CPU architecture;       Latest Intel Core processor
                   2nd generation Intel Core or 
                   newer, or AMD CPU with 
                   support for a Windows 
                   `Hypervisor Framework`_.

   Disk space      8 GB (IDE, Android SDK,        Solid state drive with 16 GB or more
                   Emulator)

   Screen          1280 x 800                     1920 x 1080
   resolution
   ==============  =============================  ========================

   .. _Hypervisor Framework:  https://developer.android.google.cn/studio/run/emulator-acceleration#vm-windows

   To install Android Studio on Windows, follow these steps:

   -  If you downloaded an ``.exe`` file (recommended), double-click to
      launch it.

   -  If you downloaded a ``.zip`` file:

      #. Unpack the ``.zip``.
      #. Copy the **android-studio** folder into your **Program Files**
         folder.
      #. Open the **android-studio > bin** folder.
      #. Launch ``studio64.exe`` (for 64-bit machines) or ``studio.exe``
         (for 32-bit machines).
      #. Follow the **Setup Wizard** in Android Studio and install any
         recommended SDK packages.

   The following video shows each step of the setup procedure for the
   recommended ``.exe`` download:

   https://developer.android.google.cn/static/studio/videos/studio-install-windows.mp4

   As new tools and other APIs become available, Android Studio notifies
   you with a pop-up. To manually check for updates, click **Help > Check
   for Update**.


   .. rubric:: Mac
      :name: Mac

   ==============  =============================  ========================
   Requirement     Minimum                        Recommended
   ==============  =============================  ========================
   OS              MacOS 10.14 (Mojave)           Latest version of MacOS

   RAM             8 GB RAM                       16 GB RAM or more

   CPU             Apple M1 chip, 
                   or 2nd generation Intel Core 
                   or newer with support for 
                   Hypervisor Framework.          Latest Apple Silicon chip

   Disk space      8 GB (IDE, Android SDK, 
                   Emulator)                      Solid state drive with 16 GB or more

   Screen          1280 x 800                     1920 x 1080
   resolution
   ==============  =============================  ========================

   To install Android Studio on your Mac, follow these steps:

   #. Launch the Android Studio DMG file.
   #. Drag and drop Android Studio into the Applications folder, then
      launch Android Studio.
   #. Choose whether to import previous Android Studio settings, then click
      **OK**.
   #. Complete the Android Studio **Setup Wizard**, which includes
      downloading the Android SDK components that are required for
      development.

   The following video shows each step of the recommended setup procedure:

   https://developer.android.google.cn/static/studio/videos/studio-install-mac.mp4

   As new tools and other APIs become available, Android Studio notifies
   you with a pop-up. To manually check for updates, click **Android Studio
   > Check for Updates**.


   .. rubric:: Linux
      :name: Linux


   **Note:**\  Linux machines with ARM-based CPUs aren't currently
   supported.

   Here are the system requirements for Linux:

   ==============  =============================  ========================
   Requirement     Minimum                        Recommended
   ==============  =============================  ========================
   OS              Any 64-bit Linux distribution 
                   that supports Gnome, KDE, or 
                   Unity DE; GNU C Library 
                   (glibc) 2.31 or later.         Latest 64-bit version of Linux

   RAM             8 GB RAM                       16 GB RAM or more

   CPU             x86_64 CPU architecture; 
                   2nd generation Intel Core 
                   or newer, or AMD processor 
                   with support for AMD 
                   Virtualization (AMD-V) 
                   and SSSE3.                     Latest Intel Core processor

   Disk space      8 GB (IDE and Android SDK 
                   and Emulator)                  Solid state drive with 16 GB or more

   Screen             1280 x 800                    1920 x 1080
   resolution
   ==============  =============================  ========================


   To install Android Studio on Linux, follow these steps:

   #. Unpack the ``.zip`` file you downloaded to an appropriate location
      for your applications, such as within ``/usr/local/`` for your user
      profile or ``/opt/`` for shared users.

      For a 64-bit version of Linux, first install the `required libraries for 64-bit machines <#64bit-libs>`__.

   #. To launch Android Studio, open a terminal, navigate to the
      ``android-studio/bin/`` directory, and execute ``studio.sh``.

   #. Select whether you want to import previous Android Studio settings,
      then click **OK**.

   #. Complete the Android Studio **Setup Wizard**, which includes
      downloading the Android SDK components that are required for
      development.

   **Tip:** To make Android Studio available in your list of applications,
   select **Tools > Create Desktop Entry** from the Android Studio menu
   bar.

   .. _64bit-libs:

   Required libraries for 64-bit machines
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   If you are running a 64-bit version of Ubuntu, you need to install some
   32-bit libraries with the following command:

   .. code:: none

      sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1 libbz2-1.0:i386

   If you are running 64-bit Fedora, the command is:

   .. code:: none

      sudo yum install zlib.i686 ncurses-libs.i686 bzip2-libs.i686

   The following video shows each step of the recommended setup procedure:

   https://developer.android.google.cn/static/studio/videos/studio-install-linux.mp4
   
   As new tools and other APIs become available, Android Studio notifies
   you with a pop-up. To manually check for updates, click **Help > Check
   for Update**.


   .. _chrome-os:

   ChromeOS
   --------

   For the system requirements to support Android Studio and the Android
   Emulator, see `Android development <https://chromeos.dev/en/android-environment#install-android-studio-on-chrome-os>`__
   in the ChromeOS documentation.

   To install Android Studio on ChromeOS, follow these steps:

   #. Install `Linux for ChromeOS <https://support.google.com/chromebook/answer/9145439>`__.

   #. Open the **Files** app and locate the DEB package in the
      **Downloads** folder under **My files**.

   #. Right-click the DEB package and select **Install with Linux (Beta)**.

      
   .. image:: https://developer.android.google.cn/static/studio/images/studio-install-chromeos.png
      :width: 628px
      :alt: The target file location for DEB package on ChromeOS.

      -  If you have installed Android Studio before, select whether you
         want to import previous Android Studio settings, then click
         **OK**.

   #. Complete the Android Studio **Setup Wizard**, which includes
      downloading the Android SDK components that are required for
      development.

   #. Once the installation is complete, launch Android Studio from the
      Launcher or from the ChromeOS Linux terminal. In the default
      installation directory ``/opt/android-studio/bin/studio.sh``, run
      ``studio.sh``.

   As new tools and other APIs become available, Android Studio notifies
   you with a pop-up. To manually check for updates, click **Help > Check
   for Update**.

   **Note:**\  Android Studio on ChromeOS currently supports deploying your
   app only to a connected hardware device. To learn more, read `Run apps on a hardware device <#>`__.

   Content and code samples on this page are subject to the licenses
   described in the `Content License <#>`__. Java and OpenJDK are
   trademarks or registered trademarks of Oracle and/or its affiliates.

   Last updated 2023-05-01 UTC.


/Android Studio Jellyfish 2023.3.1
==================================

:name: android-studio-jellyfish-2023.3.1
   :class: devsite-page-title

   Android Studio is the official IDE for Android development,
   and includes everything you need to build Android apps.

   This page lists new features and improvements in the latest
   version in the stable channel, Android Studio Jellyfish. You
   can `download it here <#>`__ or update to it inside
   Android Studio by clicking **Help** > **Check for updates**
   (**Android Studio** > **Check for updates** on macOS)

   To see what's been fixed in this version of Android Studio,
   see the `closed issues <#>`__.

   To view the release notes for older versions of Android
   Studio, see `Past releases <#>`__.

   For early access to upcoming features and improvements, see
   the `Preview builds of Android Studio <#>`__.

   If you encounter problems in Android Studio, check the
   `Known issues <#>`__ or
   `Troubleshoot <#>`__ page.

   .. rubric:: Android Gradle plugin and Android Studio
      compatibility
      :name: android_gradle_plugin_and_android_studio_compatibility

   The Android Studio build system is based on Gradle, and the
   Android Gradle plugin (AGP) adds several features that are
   specific to building Android apps. The following table lists
   which version of AGP is required for each version of Android
   Studio.

   If your project is not supported by a specific version of
   Android Studio, you can still open and update your project
   using an `older version of Android Studio <#>`__.
   
   ==========================  =======================
   Android Studio version      Required AGP version
   ==========================  =======================
   Koala  2024.1.1             3.2-8.5
   Jellyfish  2023.3.1         3.2-8.4
   Iguana  2023.2.1            3.2-8.3
   Hedgehog  2023.1.1          3.2-8.2
   Giraffe  2022.3.1           3.2-8.1
   Flamingo  2022.2.1          3.2-8.0
   ==========================  =======================


.. container::

   .. rubric:: Older versions
      :name: older-versions
      :class: showalways

   ==========================  =======================
   Android Studio version      Required AGP version
   ==========================  =======================
   Electric Eel    2022.1.1    3.2-7.4
   Dolphin    2021.3.1         3.2-7.3
   Chipmunk    2021.2.1        3.2-7.2
   Bumblebee    2021.1.1       3.2-7.1
   Arctic Fox    2020.3.1      3.1-7.0
   ==========================  =======================

For information on what’s new in the Android Gradle plugin, see the
`Android Gradle plugin release notes <#>`__.

.. _api-level-support:

Minimum versions of tools for Android API level
-----------------------------------------------

There are minimum versions of Android Studio and AGP that support a
specific API level. Using lower versions of Android Studio or AGP than
required by your project's ``targetSdk`` or ``compileSdk`` could lead to
unexpected issues. We recommend using the latest preview version of
Android Studio and AGP to work on projects that target preview versions
of the Android OS. You can `install preview versions of Android Studio alongside a stable version <#install_alongside_your_stable_version>`__.

The minimum versions of Android Studio and AGP are as follows:

================  ===============================  ====================
API level         Minimum Android Studio version   Minimum AGP version
================  ===============================  ====================
VanillaIceCream 
preview           Jellyfish 2023.3.1               8.4

34                Hedgehog 2023.1.1                8.1.1

33                Flamingo 2022.2.1                7.2
================  ===============================  ====================

The following are new features in Android Studio Jellyfish.

.. _gemini:

Introducing Gemini in Android Studio
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Gemini in Android Studio is your coding companion for Android
development. It's an AI-powered conversational experience in Android
Studio that helps you be more productive by answering Android
development queries. To learn more, see `Meet Gemini in Android Studio <#>`__.

.. _signin:

New sign-in flow
~~~~~~~~~~~~~~~~

When you sign in to Android Studio with your Developer account, you
benefit from Google developer services—such as viewing Firebase
Crashlytics and Android Vitals reports in `App Quality Insights <#>`__, accessing real remote
devices with `Device Streaming in Android Studio <#>`__, and writing
higher-quality code with `Gemini in Android Studio <#>`__—directly from the IDE.

Android Studio Jellyfish makes it easier to add and manage accounts, and
provide the IDE with only the permissions required for each feature. To
get started do one of the following:

-  Navigate to one of the features mentioned previously and follow the
   prompts to sign in and provide necessary permissions
-  If you're already signed in, you can manage your accounts and
   permissions by navigating to **File** (**Android Studio** on macOS) >
   **Settings** > **Tools** > **Google Accounts**.

.. _device-streaming:

Access real devices with Device Streaming in Android Studio
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Device Streaming in Android Studio lets you securely connect to remote
physical Android devices hosted in Google's secure data centers. Powered
by Firebase, it's the fastest and easiest way to test your app against
real devices, including the Google Pixel 8 Pro, Pixel Fold, select
Samsung devices, and more.

.. figure:: https://developer.android.google.cn/static/studio/releases/assistant/2023.3.1/device-streaming.gif
   name: device-streaming
   :alt: Animation of using Device Streaming in Android Studio.
   :width: 100.0%

After connecting to a device, you can deploy your app, view the display,
interact with the device (including rotating or unfolding the device),
and anything else you might do with a device over a direct ADB over SSL
connection—all without leaving Android Studio. When you're done using
the device, Google wipes all your data and factory resets the device
before making it available to another developer.

During the current beta period, **you can use device streaming at no
cost** with Firebase projects on either a Spark or Blaze plan. To get
started sign into your Developer account from Android Studio and select
a Firebase project. If you don't already have a Firebase project, it's
easy to create one. To learn more, go to `Device Streaming in Android Studio <#>`__.

.. _aqi:

App Quality Insights support for ANRs, custom data, and multi-events
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Dive deeper into `App Quality Insights (AQI) <#>`__ 
crash reports in Android
Studio Jellyfish with support for ANR reports, custom data, and
multi-events:

-  **Iterate through events:** Now explore multiple events within a
   Crashlytics report in reverse chronological order, revealing patterns
   for faster debugging.
-  **Explore custom data:** View custom key/values and logs for each
   crash report (find them in the Keys and Logs tabs after selecting a
   report).
-  **Analyze ANRs:** Access and investigate ANRs directly within both
   the Android Vitals and Crashlytics tabs.

.. figure:: https://developer.android.google.cn/static/studio/images/releases/aqi-jellyfish.png
   name: aqi-jellyfish
   :alt: Multi-events, ANRs, and custom data in App Quality Insights.
   :width: 100.0%

Embedded Layout Inspector
~~~~~~~~~~~~~~~~~~~~~~~~~

The Layout Inspector is now embedded by default in the **Running
Devices** tool window. This integration saves screen real-estate,
centralizes your workflow in a single tool window, and delivers
significant performance gains—with a 50% improvement in rendering
speeds. You can effortlessly toggle between deeply inspecting and
interacting with your app, and use snapshots for 3D visualizations of
your UI. Discover the full range of features at `Debug your layout with Layout Inspector <#>`__.

.. _app-links-assistant:

App Links Assistant supports web associations file validation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The `App Links Assistant <#>`__ now 
supports validation of the `Digital Asset Links JSON file <#web-assoc>`__ that
should be published on your website.

This feature extends the existing validation capabilities for the intent
filters that you declare in the app's manifest file. For each domain
that's declared in the manifest file, the Assistant parses the file on
your website, performs seven validation checks, and provides a detailed
explanation on how to fix any errors.

To get started: 

#. In Android Studio click **Tools > App Links Assistant**.
#. Double-click **Links** to get a detailed view of the checks the
   Assistant performed and understand how to fix the misconfigurations.

Ensure a seamless user experience by validating that your JSON file is
correctly formatted for upload to your domain.

Baseline Profile installation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Android Studio Jellyfish automatically compiles `Baseline Profiles <#>`__ after
installation on device for projects that use AGP 8.4 or higher. This
covers Baseline Profiles that have been generated through a `Baseline Profile Generator <#create-new-profile>`__
module or from libraries like Compose. The automatic installation lets
you experience the performance benefits of Baseline Profiles when
installing your release app locally, and when using low-overhead
profiling.

.. _compose-ui-check-colorblind:

New colorblind checks in Compose UI Check
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`Compose UI Check <#compose-ui-check>`__
includes new colorblind simulations and checks, empowering you to craft
visually accessible experiences for all users. Simply enter UI Check
mode from Compose Preview to view your Compose UI in different types of
color vision deficiencies to ensure your designs remain clear and
usable.

.. figure:: https://developer.android.google.cn/static/studio/images/design/compose-ui-check-colorblind.png
   name: compose-ui-check-colorblind
   :alt: Compose UI Check Colorblind example
   :width: 100.0%

.. _audio-redirection:

Redirect audio using device mirroring
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting with Android Studio Jellyfish Canary 5, you can redirect audio
from connected physical devices to your computer speakers or headphones.
With audio redirection, keep your headphones connected to your computer
and listen to both the computer and connected phone without having to
manually reconnect to one device and then another. To enable audio
redirection, go to **Android Studio > Settings > Tools > Device
Mirroring** and select **Redirect audio from local devices**. Note that
audio is always redirected, regardless of the settings, for Firebase
Test Lab devices running Android 12 or higher.

.. _intellij-update:

IntelliJ 2023.3 platform updates
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Android Studio Jellyfish includes the IntelliJ 2023.3 platform release,
which has many new features such as comprehensive support for the latest
Java 21 programing language features, an intuitive floating toolbar with
editing actions, and a **Run to Cursor** inlay option in the debugger to
speed up your workflow. To learn more see the `IntelliJ release notes <https://www.jetbrains.com/idea/whatsnew/2023-3/>`__.

Last updated 2024-05-03 UTC.


/Get to know the Android Studio UI
==================================

-  `Tool windows <#tool_windows>`__
-  `Code completion <#code_completion>`__
-  `Find sample code <#find_sample_code>`__
-  `Navigation <#navigation>`__
-  `Style and formatting <#style_and_formatting>`__
-  

.. container:: devsite-article-body clearfix

   The Android Studio main window consists of several logical areas,
   shown in Figure 1.

   .. image:: https://developer.android.google.cn/static/studio/images/intro/main-window_2-2_2x.png
      :name: main-window
      :width: 816px

   **Figure 1.** The Android Studio main window.

   #. **Toolbar:** Carry out a wide range of actions, including running
      your app and launching Android tools.
   #. **Navigation bar:** Navigate through your project and open files
      for editing. It provides a more compact view of the structure
      visible in the **Project** window.
   #. **Editor window:** Create and modify code. Depending on the
      current file type, the editor can change. For example, when
      viewing a layout file, the editor displays the Layout Editor.
   #. **Tool window bar:** Use the buttons on the outside of the IDE
      window to expand or collapse individual tool windows.
   #. **Tool windows:** Access specific tasks like project management,
      search, version control, and more. You can expand them and
      collapse them.
   #. **Status bar:** Display the status of your project and the IDE
      itself, as well as any warnings or messages.

   To organize the main window for more screen space, hide or move the
   toolbars and tool windows. You can also use `keyboard shortcuts <#>`__ to access most IDE
   features.

   To search across your source code, databases, actions, elements of
   the user interface, and more, do one of the following:

   -  Double-press the Shift key.
   -  Click the magnifying glass in the upper right-hand corner of the
      Android Studio window.

   This can be very useful if, for example, you are trying to locate a
   particular IDE action that you have forgotten how to trigger.

   .. rubric:: :heading:`Tool windows`
      :name: tool_windows

   Instead of using preset perspectives, Android Studio follows your
   context and automatically brings up relevant tool windows as you
   work. By default, the most commonly used tool windows are pinned to
   the tool window bar at the edges of the application window.

   Navigate the tool window using the following:

   -  To expand or collapse a tool window, click the tool¡¯s name in the
      tool window bar. You can also drag, pin, unpin, attach, and detach
      tool windows.
   -  To return to the default layout of the current tool window, click
      **Window > Restore Default Layout**. To customize your default
      layout, click **Window > Store Current Layout as Default**.
   -  To show or hide the entire tool window bar, click the window icon
      |window-icon_2| in the bottom left-hand corner of the Android Studio
      window.
   -  To locate a specific tool window, hover over the window icon and
      select the tool window from the menu.

   .. |window-icon_2| image:: https://developer.android.google.cn/static/studio/images/intro/window-icon_2-1_2x.png
      :class: inline-icon

   You can also use `keyboard shortcuts <#>`__ 
   to open tool windows.
   Table 1 lists the shortcuts for the most common tool windows.

   **Table 1.** Keyboard shortcuts for tool windows

   .. container:: devsite-table-wrapper

      ===================== ================= =================
      Tool window           Windows and Linux macos
      Project               Alt+1             Command+1
      Version Control       Alt+9             Command+9
      Run                   Shift+F10         Control+R
      Debug                 Shift+F9          Control+D
      Logcat                Alt+6             Command+6
      Return to Editor      Esc               Esc
      Hide All Tool Windows Control+Shift+F12 Command+Shift+F12
      ===================== ================= =================

   To hide all toolbars, tool windows, and editor tabs, click **View >
   Enter Distraction Free Mode**. To exit Distraction Free Mode, click
   **View > Exit Distraction Free Mode**.

   Use *Speed Search* to search and filter within most tool windows in
   Android Studio. To use Speed Search, select the tool window and then
   type your search query.

   .. rubric:: :heading:`Code completion`
      :name: code_completion

   Android Studio has three types of code completion, which you can
   access using keyboard shortcuts.

   **Table 2.** Keyboard shortcuts for code completion

   .. container:: devsite-table-wrapper

      +----------------+---------------------+---------------------+
      | Type           | Windows and Linux   | macOS               |
      +----------------+---------------------+---------------------+
      | Basic          | Control+Space       | Control+Space       |
      | Completion     |                     |                     |
      +----------------+---------------------+---------------------+
      | Smart          | Control+Shift+Space | Control+Shift+Space |
      | Completion     |                     |                     |
      +----------------+---------------------+---------------------+
      | Statement      | Control+Shift+Enter | Command+Shift+Enter |
      | Completion     |                     |                     |
      +----------------+---------------------+---------------------+

   *  **Basic Completion** - Displays basic suggestions for variables, types, methods, expressions, and so on. If you call basic completion twice in a row, you see more results, including private members and non-imported static members.
   
   *  **Smart Completion** - Displays relevant options based on the context. Smart completion is aware of the expected type and data flows. If you call Smart Completion twice in a row, you see more results, including chains. 
   
   *  **Statement Completion** - Completes the current statement for you, adding missing parentheses, brackets, braces, formatting, and so on.

   To perform quickfixes and show intention actions, press Alt+Enter.

   .. rubric:: :heading:`Find sample code`
      :name: find_sample_code

   The Code Sample Browser in Android Studio helps you find
   high-quality, Google-provided Android code samples based on the
   currently highlighted symbol in your project. For more information,
   see `Find sample code <#>`__.

   .. rubric:: :heading:`Navigation`
      :name: navigation

   Here are some tips to help you navigate Android Studio.

   -  Use the **Recent Files** action to switch between your recently
      accessed files:

      To bring up the **Recent Files** action, press Control+E
      (Command+E on macOS). By default, the last accessed file is
      selected. With this action, you can also access any tool window
      through the left column.

   -  Use the **File Structure** action to view the structure of the
      current file and quickly navigate to any part of your current
      file:

      To bring up the **File Structure** action, press Control+F12
      (Command+F12 on macOS).

   -  Use the **Navigate to Class** action to search for and navigate to
      a specific class in your project. **Navigate to Class** supports
      sophisticated expressions, including *camel humps* (which lets you
      search by the capitalized letters in an element's camel-cased
      name), paths, *line navigate to* (which lets you navigate to a
      specific line within the file), *middle name matching* (which lets
      you search for a part of the class name), and many more. If you
      call it twice in a row, it shows you the results out of the
      project classes.

      To bring up the **Navigate to Class** action, press Control+N
      (Command+O on macOS).

   -  Use the **Navigate to File** action to navigate to a file or
      folder:

      To bring up **Navigate to File** action, press Control+Shift+N
      (Command+Shift+O on macOS). To search for folders rather than
      files, add a "/" at the end of your expression.

   -  Use the **Navigate to Symbol** action to navigate to a method or
      field by name:

      To bring up the **Navigate to Symbol** action, press
      Control+Shift+Alt+N (Command+Option+O on macOS).

   -  To find all the pieces of code referencing the class, method,
      field, parameter, or statement at the current cursor position,
      press Alt+F7 (Option+F7 on macOS).

   .. rubric:: :heading:`Style and formatting`
      :name: style_and_formatting

   As you edit, Android Studio automatically applies formatting and
   styles as specified in your code style settings. You can customize
   the code style settings by programming language, including specifying
   conventions for tabs and indents, spaces, wrapping and braces, and
   blank lines.

   To customize your code style settings, click **File > Settings >
   Editor > Code Style** (**Android Studio > Preferences > Editor > Code
   Style** on macOS.)

   Although the IDE automatically applies formatting as you work, you
   can also explicitly call the **Reformat Code** action. To call the
   action, press Control+Alt+L (Opt+Command+L on macOS). To auto-indent
   all lines, press Control+Alt+I (Control+Option+I on macOS).

   .. image:: https://developer.android.google.cn/static/studio/images/intro/code-before-formatting_2-1_2x.png
   :name: code-before
   :width: 493px

   **Figure 2.** Code before formatting.

   .. image:: https://developer.android.google.cn/static/studio/images/intro/code-after-formatting_2-1_2x.png
   :name: code-after
   :width: 493px

   **Figure 3.** Code after formatting.

Last updated 2023-04-12 UTC.


/Accessibility features
=======================

.. container:: devsite-article-body clearfix

   This document describes accessibility features available in Android
   Studio, including keyboard navigation.

   IntelliJ IDEA updated accessibility features in release 2021.1, which
   is the basis of Android Studio Bumblebee, so all versions of Android
   Studio from Bumblebee onward also benefit from these updates. The
   `IntelliJ documentation <https://www.jetbrains.com/help/idea/2023.3/accessibility.html>`__
   contains full details of accessibility features such as setting up
   screen readers and customizing the IDE for greater accessibility.

   .. rubric:: Use the keyboard
      :name: keyboard

   You can use keyboard shortcuts to navigate through all controls in
   Android Studio.

   **Note:** Some Android Studio elements are keyboard-accessible only
   when using the object navigation feature of your screen reader. For
   help with object navigation or its equivalent, consult your screen
   reader documentation, such as the `NVDA user guide <http://www.nvaccess.org/files/nvda/documentation/userGuide.html>`__.

   This section includes useful keyboard shortcuts for navigating around
   Android Studio. For a complete guide to the default Android Studio
   keyboard shortcuts, read `Keyboard shortcuts <#>`__.

   .. rubric:: Activate the main menu
      :name: activate-main-menu

   To open the main menu and other top-level menus, use these shortcuts:

   -  To open the main menu, press F10.
   -  To open a top-level menu on a Windows machine, press
      Alt+[*mnemonic*]. For example, to open the File menu, press Alt+F.

   .. rubric:: Navigate between files and tool windows
      :name: navigate-files

   To navigate between files and tool windows, use these shortcuts:

   -  To move to a tool window, press Alt+[*number*] (on macOS,
      Command+[*number*]). For example, to move to the Project structure
      tool window, press Alt+0 (on macOS, Command+0).
   -  To move between files and tool windows, press Control+Tab (on
      macOS, Command+Tab). To move through all entries, keep pressing
      Control+Tab.

   .. rubric:: Use the navigation bar
      :name: navigation-bar

   The navigation bar lets you move between files in a project using the
   following shortcuts:

   -  To activate the navigation bar, press Alt+Home (on macOS,
      Option+Fn+Left).
   -  To switch between items in the navigation hierarchy, press the
      left arrow or the right arrow.
   -  To open a popup window displaying the contents of the current
      item, press the spacebar.

   .. rubric:: Disable code folding
      :name: disable-folding

   By default, the Android Studio editor folds part of the text into
   expandable regions. For example, the list of imports at the beginning
   of a Java source file is folded into a single line containing the
   text "``import …``".

   When using a screen reader, code folding can make navigation
   difficult. To modify code folding options, navigate to **File >
   Settings > Editor > General > Code Folding** (on macOS, **Android
   Studio > Preferences > Editor > General > Code Folding**).

   .. rubric:: Disable auto-insertion features
      :name: disable-auto-insertion

   By default, Android Studio automatically inserts closing curly
   braces, quotes, or parentheses.

   When using a screen reader, automatic insertion might not be useful.
   To modify automatic insertion options, navigate to **File > Settings
   > Editor > General > Smart Keys** (on macOS, **Android Studio >
   Preferences > Editor > General > Smart Keys**).

   .. rubric:: Disable automatic code completion popup
      :name: disable-code-completion-popup

   By default, Android Studio automatically shows the code completion
   popup when certain keystrokes are typed, and if it finds only a
   single match, it auto-inserts that match. This behavior can cause
   confusion with screen readers.

   To modify auto popup and auto-insertion options for code completion,
   navigate to **File > Settings > Editor > General > Code Completion**
   (on macOS, **Android Studio > Preferences > Editor > General > Code
   Completion**).

   .. rubric:: Access errors, warnings, and code inspections
      :name: access-errors

   Use your keyboard to view and navigate through errors, warnings, and
   code inspections.

   .. rubric:: Review errors in all files in a project
      :name: review-errors-project

   When you click **Build > Make Project**, all warnings and errors
   appear in the **Messages** window.

   To review errors in the **Messages** window, use these shortcuts:

   -  To activate the **Messages** window, press Alt+0 (on macOS,
      Option+0).
   -  To navigate through all messages, press the up and down arrows.

   Alternatively, you can use the text editor to view and navigate
   through all errors. To use the editor to review errors, press
   Control+Alt+Up/Down (on macOS, Command+Option+Up/Down).

   .. rubric:: Review errors and code inspections in a single file
      :name: review-errors-file

   To review errors in a single file, use these shortcuts:

   -  To go to the next or previous error, press F2 or Shift+F2 (on
      macOS, F2 or Shift+F2).
   -  To open a tooltip containing the error message, press Control+F1
      (on macOS, Command+F1).

   To navigate to all code inspections—not just errors:

   #. Click **File > Settings > Editor > General** (on macOS, **Android
      Studio > Preferences > Editor > General**).
   #. Deselect **'Next error' action goes to high priority problems
      only**.

   .. rubric:: Use tab indentation
      :name: tab-indentation

   By default, Android Studio uses the space character for indentation.
   Screen reader users may prefer tab indentation because the
   verbalization is more concise.

   To change to tab indentation:

   #. Navigate to **File > Settings > Editor > Code Style > Java > Tabs
      and Indents** (on macOS, **Android Studio > Preferences > Editor >
      Code Style > Java > Tabs and Indents**).
   #. Select **Use tab character**.

Last updated 2024-05-03 UTC.

/Keyboard shortcuts
===================

.. container:: devsite-article-body clearfix

   Keyboard shortcuts are a useful way of quickly navigating around
   Android Studio and performing common actions. In many cases, using
   keyboard shortcuts is faster than using the GUI.

   This page shows some common keyboard shortcuts. Since Android Studio
   is based on IntelliJ IDEA, you can find additional shortcuts in the
   `IntelliJ IDEA keymap reference documentation <https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf>`__.

   .. rubric:: Tool windows
      :name: tool-windows

   You can use keyboard shortcuts to open tool windows. Table 1 lists
   the shortcuts for the most common windows.

   **Table 1.** Keyboard shortcuts for common tool windows

   ===================== ================= =================
   Tool window           Windows and Linux macOS
   ===================== ================= =================
   Project               Alt+1             Command+1
   Version Control       Alt+9             Command+9
   Run                   Shift+F10         Control+R
   Debug                 Shift+F9          Control+D
   Logcat                Alt+6             Command+6
   Return to Editor      Esc               Esc
   Hide All Tool Windows Control+Shift+F12 Command+Shift+F12
   ===================== ================= =================

   .. rubric:: Code completion
      :name: code-completion

   Android Studio has three types of code completion, which you can
   access using keyboard shortcuts, as shown in the following table.

   **Table 2.** Keyboard shortcuts for code completion

   .. list-table::
      :header-rows: 1

      - 

         - Type
         - Description
         - Windows and Linux
         - macOS
      - 

         - Basic Completion
         - Displays basic suggestions for variables, types, methods,
            expressions, and so on. If you call basic completion twice
            in a row, you see more results, including private members
            and non-imported static members.
         - Control+Space
         - Control+Space
      - 

         - Smart Completion
         - Displays relevant options based on the context. Smart
            completion takes into account the expected type and data
            flows. If you call Smart Completion twice in a row, you see
            more results, including chains.
         - Control+Shift+Space
         - Control+Shift+Space
      - 

         - Statement Completion
         - Completes the current statement, adding missing parentheses,
            brackets, braces, formatting, and so on.
         - Control+Shift+Enter
         - Command+Shift+Enter

   To perform quick fixes and show `intention actions <https://www.jetbrains.com/help/idea/intention-actions.html>`__,
   press Alt+Enter.

   .. rubric:: Navigation
      :name: navigation

   Use the following tips to help navigate around Android Studio:

   -  Switch between your recently accessed files using the **Recent
      Files** action. To bring up the **Recent Files** action, press
      Control+E (Command+E on macOS). By default, the last accessed file
      is selected. You can also access any tool window through the left
      column in this action.

   -  View the structure of the current file using the **File
      Structure** action. To bring up the **File Structure** action,
      press Control+F12 (Command+F12 on macOS). Using this action, you
      can quickly navigate to any part of your current file.

   -  Search for and navigate to a specific class in your project using
      the **Navigate to Class** action. To bring up the **Navigate to
      Class** action, press Control+N (Command+O on macOS).

      **Navigate to Class** supports sophisticated expressions,
      including *camel humps* (which lets you search by the capitalized
      letters in an element's camel-cased name), paths, *line navigate
      to* (which lets you navigate to a specific line within the file),
      and *middle name matching* (which lets you search for a part of
      the class name). If you call it twice in a row, it shows you the
      results out of the project classes.

   -  Navigate to a file or folder using the **Navigate to File**
      action. To bring up the **Navigate to File**, press
      Control+Shift+N (Command+Shift+O on macOS). To search for folders
      rather than files, add a ``/`` at the end of your expression.

   -  Navigate to a method or field by name using the **Navigate to
      Symbol** action. To bring up the **Navigate to Symbol** action,
      press Control+Alt+Shift+N (Command+Option+O on macOS).

   -  To find all the pieces of code referencing the class, method,
      field, parameter, or statement at the current cursor position,
      press Alt+F7 (Option+F7 on macOS).

   .. rubric:: Default keymaps
      :name: default-keymaps

   Android Studio includes keyboard shortcuts for many common actions.
   Table 3 shows the default keyboard shortcuts by operating system.

   **Note:** In addition to the default keymaps in table 3, you can
   select from a number of preset keymaps or create a custom keymap. For
   more about customizing your keyboard shortcuts, see the `Configure custom keymaps <#custom>`__ section.

   **Table 3.** Default keyboard shortcuts for Windows or Linux and
   macOS operating systems

   +----------------------+----------------------+----------------------+
   | Description          | Windows and Linux    | macOS                |
   +======================+======================+======================+
   | General actions      |                      |                      |
   +----------------------+----------------------+----------------------+
   | Save all             | Control+S            | Command+S            |
   +----------------------+----------------------+----------------------+
   | Synchronize          | Control+Alt+Y        | Command+Option+Y     |
   +----------------------+----------------------+----------------------+
   | Maximize/minimize    | Control+Shift+F12    | Control+Command+F12  |
   | editor               |                      |                      |
   +----------------------+----------------------+----------------------+
   | Add to favorites     | Alt+Shift+F          | Option+Shift+F       |
   +----------------------+----------------------+----------------------+
   | Inspect current file | Alt+Shift+I          | Option+Shift+I       |
   | with current profile |                      |                      |
   +----------------------+----------------------+----------------------+
   | Quick switch scheme  | Control+\`           | Control+\`           |
   |                      | (backtick)           | (backtick)           |
   +----------------------+----------------------+----------------------+
   | Open settings dialog | Control+Alt+S        | Command+, (comma)    |
   +----------------------+----------------------+----------------------+
   | Open project         | Control+Alt+Shift+S  | Command+;            |
   | structure dialog     |                      | (semicolon)          |
   +----------------------+----------------------+----------------------+
   | Switch between tabs  | Control+Tab          | Control+Tab          |
   | and tool window      |                      |                      |
   +----------------------+----------------------+----------------------+
   | Navigate and search  |                      |                      |
   | within Android       |                      |                      |
   | Studio               |                      |                      |
   +----------------------+----------------------+----------------------+
   | Search everything    | Press Shift twice    | Press Shift twice    |
   | (including code and  |                      |                      |
   | menus)               |                      |                      |
   +----------------------+----------------------+----------------------+
   | Find                 | Control+F            | Command+F            |
   +----------------------+----------------------+----------------------+
   | Find next            | F3                   | Command+G            |
   +----------------------+----------------------+----------------------+
   | Find previous        | Shift+F3             | Command+Shift+G      |
   +----------------------+----------------------+----------------------+
   | Replace              | Control+R            | Command+R            |
   +----------------------+----------------------+----------------------+
   | Find action          | Control+Shift+A      | Command+Shift+A      |
   +----------------------+----------------------+----------------------+
   | Search by symbol     | Control+Alt+Shift+N  | Command+Option+O     |
   | name                 |                      |                      |
   +----------------------+----------------------+----------------------+
   | Find class           | Control+N            | Command+O            |
   +----------------------+----------------------+----------------------+
   | Find file (instead   | Control+Shift+N      | Command+Shift+O      |
   | of class)            |                      |                      |
   +----------------------+----------------------+----------------------+
   | Find in path         | Control+Shift+F      | Command+Shift+F      |
   +----------------------+----------------------+----------------------+
   | Open file structure  | Control+F12          | Command+F12          |
   | dialog               |                      |                      |
   +----------------------+----------------------+----------------------+
   | Navigate between     | Alt+Right Arrow or   | Control+Right Arrow  |
   | open editor tabs     | Left Arrow           | or Control+Left      |
   |                      |                      | Arrow                |
   +----------------------+----------------------+----------------------+
   | Jump to source       | F4 or Control+Enter  | F4 or Command+Down   |
   |                      |                      | Arrow                |
   +----------------------+----------------------+----------------------+
   | Open current editor  | Shift+F4             | Shift+F4             |
   | tab in new window    |                      |                      |
   +----------------------+----------------------+----------------------+
   | Recently opened      | Control+E            | Command+E            |
   | files dialog         |                      |                      |
   +----------------------+----------------------+----------------------+
   | Recently edited      | Control+Shift+E      | Command+Shift+E      |
   | files dialog         |                      |                      |
   +----------------------+----------------------+----------------------+
   | Go to last edit      | Con                  | Command+Shift+Delete |
   | location             | trol+Shift+Backspace |                      |
   +----------------------+----------------------+----------------------+
   | Close active editor  | Control+F4           | Command+W            |
   | tab                  |                      |                      |
   +----------------------+----------------------+----------------------+
   | Return to editor     | Esc                  | Esc                  |
   | window from a tool   |                      |                      |
   | window               |                      |                      |
   +----------------------+----------------------+----------------------+
   | Hide active or last  | Shift+Esc            | Shift+Esc            |
   | active tool window   |                      |                      |
   +----------------------+----------------------+----------------------+
   | Go to line           | Control+G            | Command+L            |
   +----------------------+----------------------+----------------------+
   | Open type hierarchy  | Control+H            | Control+H            |
   +----------------------+----------------------+----------------------+
   | Open method          | Control+Shift+H      | Command+Shift+H      |
   | hierarchy            |                      |                      |
   +----------------------+----------------------+----------------------+
   | Open call hierarchy  | Control+Alt+H        | Control+Option+H     |
   +----------------------+----------------------+----------------------+
   | View layouts         |                      |                      |
   +----------------------+----------------------+----------------------+
   | Zoom in/out          | Control+plus or      | Command+plus or      |
   |                      | Control+minus        | Command+minus        |
   +----------------------+----------------------+----------------------+
   | Fit to screen        | Control+0            | Command+0            |
   +----------------------+----------------------+----------------------+
   | Actual size          | Control+Shift+1      | Command+Shift+1      |
   +----------------------+----------------------+----------------------+
   | Design tools: Layout |                      |                      |
   | Editor               |                      |                      |
   +----------------------+----------------------+----------------------+
   | Toggle between       | B                    | B                    |
   | Design and Blueprint |                      |                      |
   | modes                |                      |                      |
   +----------------------+----------------------+----------------------+
   | Toggle between       | O                    | O                    |
   | Portrait and         |                      |                      |
   | Landscape modes      |                      |                      |
   +----------------------+----------------------+----------------------+
   | Toggle devices       | D                    | D                    |
   +----------------------+----------------------+----------------------+
   | Force refresh        | R                    | R                    |
   +----------------------+----------------------+----------------------+
   | Toggle render errors | E                    | E                    |
   | panel                |                      |                      |
   +----------------------+----------------------+----------------------+
   | Delete constraints   | Delete or            | Delete or            |
   |                      | Control+click        | Command+click        |
   +----------------------+----------------------+----------------------+
   | Zoom in              | Control+plus         | Command+plus         |
   +----------------------+----------------------+----------------------+
   | Zoom out             | Control+minus        | Command+minus        |
   +----------------------+----------------------+----------------------+
   | Zoom to fit          | Control+0            | Command+0            |
   +----------------------+----------------------+----------------------+
   | Pan                  | Hold Space+click and | Hold Space+click and |
   |                      | drag                 | drag                 |
   +----------------------+----------------------+----------------------+
   | Go to XML            | Control+B            | Command+B            |
   +----------------------+----------------------+----------------------+
   | Select all           | Control+A            | Command+A            |
   | components           |                      |                      |
   +----------------------+----------------------+----------------------+
   | Select multiple      | Shift+click or       | Shift+click or       |
   | components           | Control+click        | Command+click        |
   +----------------------+----------------------+----------------------+
   | Design tools:        |                      |                      |
   | Navigation Editor    |                      |                      |
   +----------------------+----------------------+----------------------+
   | Zoom in              | Control+plus         | Command+plus         |
   +----------------------+----------------------+----------------------+
   | Zoom out             | Control+minus        | Command+minus        |
   +----------------------+----------------------+----------------------+
   | Zoom to fit          | Control+0            | Command+0            |
   +----------------------+----------------------+----------------------+
   | Pan                  | Hold Space+click and | Hold Space+click and |
   |                      | drag                 | drag                 |
   +----------------------+----------------------+----------------------+
   | Go to XML            | Control+B            | Command+B            |
   +----------------------+----------------------+----------------------+
   | Toggle render errors | E                    | E                    |
   | panel                |                      |                      |
   +----------------------+----------------------+----------------------+
   | Group into nested    | Control+G            | Command+G            |
   | graph                |                      |                      |
   +----------------------+----------------------+----------------------+
   | Cycle through        | Tab or Shift+Tab     | Tab or Shift+Tab     |
   | destinations         |                      |                      |
   +----------------------+----------------------+----------------------+
   | Select all           | Control+A            | Command+A            |
   | destinations         |                      |                      |
   +----------------------+----------------------+----------------------+
   | Select multiple      | Shift+click or       | Shift+click or       |
   | destinations         | Control+click        | Command+click        |
   +----------------------+----------------------+----------------------+
   | Write code           |                      |                      |
   +----------------------+----------------------+----------------------+
   | Generate code        | Alt+Insert           | Command+N            |
   | (getters, setters,   |                      |                      |
   | constructors,        |                      |                      |
   | ``ha                 |                      |                      |
   | shCode``/``equals``, |                      |                      |
   | ``toString``, new    |                      |                      |
   | file, new class)     |                      |                      |
   +----------------------+----------------------+----------------------+
   | Override methods     | Control+O            | Control+O            |
   +----------------------+----------------------+----------------------+
   | Implement methods    | Control+I            | Control+I            |
   +----------------------+----------------------+----------------------+
   | Surround with        | Control+Alt+T        | Command+Option+T     |
   | (``if...else``,      |                      |                      |
   | ``try...catch``,     |                      |                      |
   | etc.)                |                      |                      |
   +----------------------+----------------------+----------------------+
   | Delete line at caret | Control+Y            | Command+Delete       |
   +----------------------+----------------------+----------------------+
   | Collapse/expand      | Control+minus or     | Command+minus or     |
   | current code block   | Control+plus         | Command+plus         |
   +----------------------+----------------------+----------------------+
   | Collapse/expand all  | Control+Shift+minus  | Command+Shift+minus  |
   | code blocks          | or                   | or                   |
   |                      | Control+Shift+plus   | Command+Shift+plus   |
   +----------------------+----------------------+----------------------+
   | Duplicate current    | Control+D            | Command+D            |
   | line or selection    |                      |                      |
   +----------------------+----------------------+----------------------+
   | Basic code           | Control+Space        | Control+Space        |
   | completion           |                      |                      |
   +----------------------+----------------------+----------------------+
   | Smart code           | Control+Shift+Space  | Control+Shift+Space  |
   | completion (filters  |                      |                      |
   | the list of methods  |                      |                      |
   | and variables by     |                      |                      |
   | expected type)       |                      |                      |
   +----------------------+----------------------+----------------------+
   | Complete statement   | Control+Shift+Enter  | Command+Shift+Enter  |
   +----------------------+----------------------+----------------------+
   | Quick documentation  | Control+Q            | Control+J            |
   | lookup               |                      |                      |
   +----------------------+----------------------+----------------------+
   | Show parameters for  | Control+P            | Command+P            |
   | selected method      |                      |                      |
   +----------------------+----------------------+----------------------+
   | Go to declaration    | Control+B or         | Command+B or         |
   | (directly)           | Control+click        | Command+click        |
   +----------------------+----------------------+----------------------+
   | Go to                | Control+Alt+B        | Command+Option+B     |
   | implementations      |                      |                      |
   +----------------------+----------------------+----------------------+
   | Go to                | Control+U            | Command+U            |
   | su                   |                      |                      |
   | permethod/superclass |                      |                      |
   +----------------------+----------------------+----------------------+
   | Open quick           | Control+Shift+I      | Command+Y            |
   | definition lookup    |                      |                      |
   +----------------------+----------------------+----------------------+
   | Toggle project tool  | Alt+1                | Command+1            |
   | window visibility    |                      |                      |
   +----------------------+----------------------+----------------------+
   | Toggle bookmark      | F11                  | F3                   |
   +----------------------+----------------------+----------------------+
   | Toggle bookmark with | Control+F11          | Option+F3            |
   | mnemonic             |                      |                      |
   +----------------------+----------------------+----------------------+
   | Comment/uncomment    | Control+/            | Command+/            |
   | with line comment    |                      |                      |
   +----------------------+----------------------+----------------------+
   | Comment/uncomment    | Control+Shift+/      | Command+Shift+/      |
   | with block comment   |                      |                      |
   +----------------------+----------------------+----------------------+
   | Select successively  | Control+W            | Option+Up            |
   | increasing code      |                      |                      |
   | blocks               |                      |                      |
   +----------------------+----------------------+----------------------+
   | Decrease current     | Control+Shift+W      | Option+Down          |
   | selection to         |                      |                      |
   | previous state       |                      |                      |
   +----------------------+----------------------+----------------------+
   | Move to code block   | Control+[            | Option+Command+[     |
   | start                |                      |                      |
   +----------------------+----------------------+----------------------+
   | Move to code block   | Control+]            | Option+Command+]     |
   | end                  |                      |                      |
   +----------------------+----------------------+----------------------+
   | Select to the code   | Control+Shift+[      | Op                   |
   | block start          |                      | tion+Command+Shift+[ |
   +----------------------+----------------------+----------------------+
   | Select to the code   | Control+Shift+]      | Op                   |
   | block end            |                      | tion+Command+Shift+] |
   +----------------------+----------------------+----------------------+
   | Delete to end of     | Control+Delete       | Option+Delete        |
   | word                 |                      |                      |
   +----------------------+----------------------+----------------------+
   | Delete to start of   | Control+Backspace    | Option+Delete        |
   | word                 |                      |                      |
   +----------------------+----------------------+----------------------+
   | Optimize imports     | Control+Alt+O        | Control+Option+O     |
   +----------------------+----------------------+----------------------+
   | Project quick fix    | Alt+Enter            | Option+Enter         |
   | (show intention      |                      |                      |
   | actions and quick    |                      |                      |
   | fixes)               |                      |                      |
   +----------------------+----------------------+----------------------+
   | Reformat code        | Control+Alt+L        | Command+Option+L     |
   +----------------------+----------------------+----------------------+
   | Auto-indent lines    | Control+Alt+I        | Control+Option+I     |
   +----------------------+----------------------+----------------------+
   | Indent/unindent      | Tab or Shift+Tab     | Tab or Shift+Tab     |
   | lines                |                      |                      |
   +----------------------+----------------------+----------------------+
   | Smart line join      | Control+Shift+J      | Control+Shift+J      |
   +----------------------+----------------------+----------------------+
   | Smart line split     | Control+Enter        | Command+Enter        |
   +----------------------+----------------------+----------------------+
   | Start new line       | Shift+Enter          | Shift+Enter          |
   +----------------------+----------------------+----------------------+
   | Next/previous        | F2 or Shift+F2       | F2 or Shift+F2       |
   | highlighted error    |                      |                      |
   +----------------------+----------------------+----------------------+
   | Build and run        |                      |                      |
   +----------------------+----------------------+----------------------+
   | Build                | Control+F9           | Command+F9           |
   +----------------------+----------------------+----------------------+
   | Build and run        | Shift+F10            | Control+R            |
   +----------------------+----------------------+----------------------+
   | Apply changes and    | Control+F10          | Control+Command+R    |
   | restart activity     |                      |                      |
   +----------------------+----------------------+----------------------+
   | Apply code changes   | Control+Alt+F10      | Con                  |
   |                      |                      | trol+Command+Shift+R |
   +----------------------+----------------------+----------------------+
   | Debug                |                      |                      |
   +----------------------+----------------------+----------------------+
   | Debug                | Shift+F9             | Control+D            |
   +----------------------+----------------------+----------------------+
   | Step over            | F8                   | F8                   |
   +----------------------+----------------------+----------------------+
   | Step into            | F7                   | F7                   |
   +----------------------+----------------------+----------------------+
   | Smart step into      | Shift+F7             | Shift+F7             |
   +----------------------+----------------------+----------------------+
   | Step out             | Shift+F8             | Shift+F8             |
   +----------------------+----------------------+----------------------+
   | Run to cursor        | Alt+F9               | Option+F9            |
   +----------------------+----------------------+----------------------+
   | Evaluate expression  | Alt+F8               | Option+F8            |
   +----------------------+----------------------+----------------------+
   | Resume program       | F9                   | Command+Option+R     |
   +----------------------+----------------------+----------------------+
   | Toggle breakpoint    | Control+F8           | Command+F8           |
   +----------------------+----------------------+----------------------+
   | View breakpoints     | Control+Shift+F8     | Command+Shift+F8     |
   +----------------------+----------------------+----------------------+
   | Refactor             |                      |                      |
   +----------------------+----------------------+----------------------+
   | Copy                 | F5                   | F5                   |
   +----------------------+----------------------+----------------------+
   | Move                 | F6                   | F6                   |
   +----------------------+----------------------+----------------------+
   | Safe delete          | Alt+Delete           | Command+Delete       |
   +----------------------+----------------------+----------------------+
   | Rename               | Shift+F6             | Shift+F6             |
   +----------------------+----------------------+----------------------+
   | Change signature     | Control+F6           | Command+F6           |
   +----------------------+----------------------+----------------------+
   | Inline               | Control+Alt+N        | Command+Option+N     |
   +----------------------+----------------------+----------------------+
   | Extract method       | Control+Alt+M        | Command+Option+M     |
   +----------------------+----------------------+----------------------+
   | Extract variable     | Control+Alt+V        | Command+Option+V     |
   +----------------------+----------------------+----------------------+
   | Extract field        | Control+Alt+F        | Command+Option+F     |
   +----------------------+----------------------+----------------------+
   | Extract constant     | Control+Alt+C        | Command+Option+C     |
   +----------------------+----------------------+----------------------+
   | Extract parameter    | Control+Alt+P        | Command+Option+P     |
   +----------------------+----------------------+----------------------+
   | Version              |                      |                      |
   | control/local        |                      |                      |
   | history              |                      |                      |
   +----------------------+----------------------+----------------------+
   | Commit project to    | Control+K            | Command+K            |
   | VCS                  |                      |                      |
   +----------------------+----------------------+----------------------+
   | Update project from  | Control+T            | Command+T            |
   | VCS                  |                      |                      |
   +----------------------+----------------------+----------------------+
   | View recent changes  | Alt+Shift+C          | Option+Shift+C       |
   +----------------------+----------------------+----------------------+
   | Open VCS dialog      | Alt+\` (backtick)    | Control+V            |
   +----------------------+----------------------+----------------------+

   .. rubric:: Configure custom keymaps
      :name: configure_custom_keymaps

   The keymap settings in Android Studio let you choose from a list of
   preset options or create a custom keymap.

   To open the keymap settings, choose **File > Settings** (on macOS,
   **Android Studio > Preferences**) and navigate to the **Keymap**
   pane.

   .. image:: https://developer.android.google.cn/static/studio/images/intro/keymap-options_2-2_2x.png
      :name: keymap-options
      :width: 768px


   **Figure 1.** The Android Studio keymap settings window on macOS.

   #. **Keymaps menu:** Select the desired keymap from this menu to
      switch between preset keymaps.
   #. **Actions list:** Right-click an action to modify it. You can add
      additional keyboard shortcuts for the action, add mouse shortcuts
      to associate an action with a mouse click, or remove current
      shortcuts. If you are using a preset keymap, modifying an action’s
      shortcuts automatically creates a copy of the keymap and adds your
      modifications to the copy.
   #. **Copy button:** Select a keymap from the menu to use as a
      starting point, and click **Copy** to create a new custom keymap.
      You can then modify the keymap name and shortcuts.
   #. **Reset button:** Select a keymap from the menu and click
      **Reset** to revert it to its original configuration.
   #. **Search box:** Type here to search for a keyboard shortcut by the
      action name.
   #. **Search by Shortcut:** Click this button and type a shortcut to
      search for actions by their assigned shortcut.

Last updated 2023-04-12 UTC.


/Developer workflow basics
==========================

.. container:: devsite-article-body clearfix

   The workflow to develop an app for Android is conceptually the same
   as for other app platforms. However, to efficiently build a
   well-designed app for Android, you need some specialized tools.

   This page provides an overview of the process to build an Android app
   and includes links to more information about Android Studio tools for
   each phase of development.

   .. container:: attempt-right

      .. image:: https://developer.android.google.cn/static/studio/images/developer-workflow_2x.png
         :width: 352px

   #. **Set up your workspace**

      This is the first step of the Android app development process. For
      more details, see the `Android Studio installation page <#>`__ and the guide to `creating a project <#>`__.

      Complete a walkthrough with Android Studio and learn some Android
      development fundamentals with the `Build your first Android app <#>`__ guide.

   #. **Write your app**

      Once you have set up your workspace, you can begin writing your
      app. Android Studio includes a variety of tools and intelligence
      to help you work faster, write quality code, design a UI, and
      create resources for different device types. For more information
      about the tools and features available, see `Write your app <#>`__.

   #. **Build and run**

      During the build and run phase, you build your project into a
      debuggable APK package that you can install and run on the
      emulator or an Android-powered device. For more information on how
      to run your code, see `Build and run your app <#>`__.

      You can also customize your build in this phase. For example, you
      can `create build variants <#>`__ that
      produce different versions of your app from the same project, and
      `shrink your code and resources <#>`__ to
      make your app smaller. For an introduction to custom build
      configurations, see `Configure your build <#>`__.

   #. **Debug, profile, and test**

      In this iterative phase, you continue developing your app while
      eliminating bugs and optimizing app performance. For help to debug
      and optimize your app, `test your app in Android Studio <#>`__.

      For more information about debugging, read `Debug your app <#>`__ and `Write and view logs with Logcat <#>`__.

      To view and analyze various performance metrics such as memory
      usage, network traffic, CPU impact, and more, see `Profile your app performance <#>`__.

   #. **Publish**

      To prepare your app for release to users, you will need to build
      an `Android App Bundle <#>`__, sign it with a
      security key, and get ready to publish to the Google Play Store.
      For more information, see the `Publish your app <#>`__.

Last updated 2023-04-12 UTC.


/Topic: 2. 🟢 Manage your project
===================================

/Overview: Projects overview
============================

.. container:: devsite-article-body clearfix

   A *project* in Android Studio contains everything that defines your
   workspace for an app, from source code and assets to test code and
   build configurations.

   When you start a new project, Android Studio creates the necessary
   structure for all your files and makes them visible in the
   **Project** window in Android Studio. To open the window, select
   **View > Tool Windows > Project**.

   This page provides an overview of the key components inside your
   project.

   .. rubric:: Modules
      :name: ApplicationModules

   A *module* is a collection of source files and build settings that
   let you divide your project into discrete units of functionality.
   Your project can have one or many modules, and one module can use
   another module as a dependency. You can independently build, test,
   and debug each module.

   Additional modules are useful when creating code libraries within
   your own project or when you want to create different sets of code
   and resources for different device types, such as phones and
   wearables, but keep all the files scoped within the same project and
   share some code.

   To add a new module to your project, click **File > New > New
   Module**.

   Android Studio offers a few distinct types of modules:

   **Android app module**
      Provides a container for your app's source code, resource files,
      and app-level settings, such as the module-level build file and
      Android Manifest file. When you create a new project, the default
      app module is named "app."

      Android Studio offers the following types of app modules:

      -  Phone & Tablet
      -  Automotive
      -  Wear OS
      -  Television
      -  Baseline Profile Generator
      -  Benchmark

      Each module provides essential files and some code templates that
      are appropriate for the corresponding app or device type.

      For more information on adding a module, read `Add a module for a new device <#>`__.

   **Feature module**
      Represents a modularized feature of your app that can take
      advantage of *Play Feature Delivery*. For example, with feature
      modules, you can provide your users with certain features of your
      app on demand or as instant experiences through `Google Play Instant <#>`__.

      Android Studio offers the following types of feature modules:

      -  Dynamic Feature Module
      -  Instant Dynamic Feature Library Module

      To learn more, read about `Play Feature Delivery <#>`__.

   **Library module**
      Provides a container for your reusable code, which you can use as
      a dependency in other app modules or import into other projects.
      Structurally, a library module is the same as an app module, but
      when built, it creates a code archive file instead of an APK, so
      it can't be installed on a device.

      In the **Create New Module** window, Android Studio offers the
      following types of library modules:

      -  **Android Library:** Contains all file types supported in an
         Android project except native C++ code, including Java and
         Kotlin source code, resources, and manifest files. The build
         result is an Android Archive (AAR) file that you can add as a
         dependency for your Android app modules.
      -  **Android Native Library:** Contains all file types supported
         in an Android project, similar to an Android Library. However,
         Android Native Libraries also can contain native C++ source
         code. The build result is an Android Archive (AAR) file that
         you can add as a dependency for your Android app modules.
      -  **Java or Kotlin Library:** Contains only Kotlin or Java source
         files. The build result is a Java Archive (JAR) file that you
         can add as a dependency for your Android app modules or
         otherKotlin or Java projects.

   Modules are sometimes referred to as *subprojects*, because Gradle
   also refers to modules as projects.

   When you create a library module and want to add it as a dependency
   to your Android app module, you must declare it as follows:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Groovy
               :name: groovy

            .. code:: prettyprint

               dependencies {
                   implementation project(':my-library-module')
               }

         .. container:: section

            .. rubric:: Kotlin
               :name: kts

            .. code:: prettyprint

               dependencies {
                   implementation(project(":my-library-module"))
               }

   .. rubric:: Project files
      :name: ProjectFiles

   .. image:: https://developer.android.google.cn/static/images/tools/projectview-p1.png
   
   By default, Android Studio displays your project files in the
   **Android** view. This view doesn't reflect the actual file hierarchy
   on disk. Instead, it's organized by modules and file types to
   simplify navigation between key source files of your project, hiding
   certain files or directories that are not commonly used.

   Some of the structural differences between the **Android** view and
   the structure on disk are that the **Android** view:

   -  Shows all the project's build-related configuration files in a
      top-level **Gradle Script** group.
   -  Shows all manifest files for each module in a module-level group
      when you have different manifest files for different product
      flavors and build types.
   -  Shows all alternative resource files in a single group instead of
      in separate folders per resource qualifier. For example, all
      density versions of your launcher icon are visible side by side.

   Within each Android app module, files are shown in the following
   groups:

   **manifests**
      Contains the
      `AndroidManifest.xml <#>`__
      file.
   **java**
      Contains the Kotlin and Java source code files, separated by
      package names, including JUnit test code.
   **res**
      Contains all non-code resources, such as UI strings and bitmap
      images, divided into corresponding subdirectories. For more
      information about possible resource types, see `App resources overview <#>`__.

   **Note:** Different module types have different group structures. For
   example, a native module also contains a ``cpp/`` folder inside the
   ``main`` group, and a Kotlin or Java library doesn't contain
   ``manifests`` or ``res`` groups.

   .. rubric:: The Project view
      :name: ProjectView

   .. image:: https://developer.android.google.cn/static/images/tools/projectview-p2.png
   
   To see the actual file structure of the project, including all files
   hidden from the **Android** view, select **Project** from the menu at
   the top of the **Project** window.

   When you select the **Project** view, you can see a lot more files
   and directories, including the following:

   ``module-name``\ ``/``
      ``build/``
         Contains build outputs.
      ``libs/``
         Contains private libraries.
      ``src/``
         Contains all code and resource files for the module in the
         following subdirectories:

         ``androidTest/``
            Contains code for instrumentation tests that run on an
            Android device. For more information, see `Test in Android Studio <#>`__.
         ``cpp/``
            Contains native C or C++ code using the Java Native
            Interface (JNI). For more information, see the `Android NDK documentation <#>`__.
         ``main/``
            Contains the "main" source set files: the Android code and
            resources shared by all build variants (files for other
            build variants reside in sibling directories, such as
            ``src/debug/`` for the debug build type):

            ``AndroidManifest.xml``
               Describes the nature of the application and each of its
               components. For more information, see the `app manifest <#>`__
               overview.
            ``java/``
               Contains Kotlin or Java code sources, or both, if your
               app has both Kotlin and Java source code.
            ``kotlin/``
               Contains only Kotlin code sources.
            ``res/``
               Contains application resources, such as drawable files
               and UI string files. For more information, see the `app resources <#>`__ overview.
            ``assets/``
               Contains files to be compiled into an APK file as-is. For
               example, this is a good location for textures and game
               data. You can navigate this directory in the same way as
               a typical file system, using URIs and read files as a
               stream of bytes using the
               `AssetManager <#>`__.
         ``test/``
            Contains code for local tests that run on your host JVM.
      ``build.gradle`` or ``build.gradle.kts`` (module)
         This defines the module-specific build configurations.
         ``build.gradle`` is the correct filename if you're using Groovy
         as your build script language, and it's ``build.gradle.kts`` if
         you're using Kotlin script.

   ``build.gradle`` or ``build.gradle.kts`` (project)
      This defines your build configuration that applies to all modules.
      ``build.gradle`` is the correct filename if you're using Groovy as
      your build script language, and it's ``build.gradle.kts`` if
      you're using Kotlin script. This file is integral to the project,
      so maintain it in revision control with all other source code.

      For information about other build files, see `Configure your build <#>`__.

   **Note:** To change the default view from the **Android** view to the
   **Project** view, select **Help > Edit Custom Properties** and add
   ``studio.projectview=true``.

   .. rubric:: Project structure settings
      :name: ProjectStructure

   To change various settings for your Android Studio project, open the
   **Project Structure** dialog by clicking **File > Project
   Structure**. It contains the following sections:

   -  **Project:** Sets the version for `Gradle and the Android Gradle plugin <#build-files>`__ and the repository location
      name.

   -  **SDK Location:** Sets the location of the JDK, Android SDK, and
      Android NDK that your project uses.

   -  **Variables:** Lets you edit variables that are used within your
      build scripts.

   -  **Modules:** Lets you edit module-specific build configurations,
      including the target and minimum SDK, the app signature, and
      library dependencies. Each module's settings page is divided into
      the following tabs:

      -  **Properties:** Specifies the versions of the SDK and build
         tools to use to compile the module.
      -  **Signing:** Specifies the certificate to use to `sign your app <#sign-auto>`__.

   -  **Dependencies:** Lists the library, file, and module dependencies
      for this module. You can add, modify, and delete dependencies from
      this pane. For more information about module dependencies, see
      `Configure build variants <#declareDeps>`__.

      **Preview:** If you're using a version catalog, be aware of the
      issue that dependencies added through the **Project Structure**
      dialog are added to the module's ``build.gradle`` file, not the
      catalog. To learn more about Gradle Version Catalogs support in
      Android Studio, see the `preview release note <#gradle-version-catalogs>`__.

   -  **Build Variants:** Lets you configure different flavors and build
      types for your project.

      -  **Flavors:** Lets you create multiple build *flavors*, where
         each flavor specifies a set of configuration settings, such as
         the module's minimum and target SDK version and the `version code and version name <#versioningsettings.html>`__.

         For example, you might define one flavor that has a minimum SDK
         of 21 and a target SDK of 29, and another flavor that has a
         minimum SDK of 24 and a target SDK of 33.

      -  **Build Types:** Lets you create and modify build
         configurations, as described in `Configure build variants <#>`__. By default,
         every module has *debug* and *release* build types, and you can
         define more as needed.

Last updated 2024-05-03 UTC.


/Create a project
=================

.. container:: devsite-article-body clearfix

   Android Studio makes it easy to create Android apps for various form
   factors, such as phones, tablets, TVs, and Wear devices. This page
   explains how to start a new Android app project or import an existing
   project.

   If you don't have a project opened, create a new project by clicking
   **Start a new Android Studio project** on the Android Studio Welcome
   screen.

   If you do have a project opened, create a new project by selecting
   **File > New > New Project** from the main menu.

   .. rubric:: Choose your project type
      :name: choose

   In the **New Project** screen that appears, you can select the type
   of project you want to create from categories of device form factors,
   shown in the **Templates** pane. For example, figure 1 shows the
   project templates for phone and tablet.

   .. figure::
      https://developer.android.google.cn/static/studio/images/projects/new-project-wizard-choose_2x.png
      :alt: Choose the type of project you want to create.
      :width: 900px

      **Figure 1.** Choose the type of project you want to create on the
      **New Project** screen.

   Selecting the type of project you want to create lets Android Studio
   include sample code and resources in your project to help you get
   started.

   Once you select your project type, click **Next**.

   .. rubric:: Configure your project
      :name: configure

   The next step in creating your project is to configure some settings,
   as shown in figure 2. If you're creating a **Native C++** project,
   read `Create a new project with C/C++ support <#new-project>`__ to learn
   more about the options you need to configure.

   .. figure::
      https://developer.android.google.cn/static/studio/images/projects/new-project-wizard-configure-2x.png
      :alt: Configure your new project with a few settings.
      :width: 900px

      **Figure 2.** Configure your new project with a few settings.

   #. Specify the **Name** of your project.

   #. Specify the **Package name**. By default, this package name
      becomes your project's namespace (used to access your project
      resources) and your project's application ID (used as the ID for
      publishing). To learn more, see `Configure the app module <#>`__.

   #. Specify the **Save location** where you want to locally store your
      project.

   #. Select the **Language**, Kotlin or Java, you want Android Studio
      to use when creating sample code for your new project. Keep in
      mind that you aren't limited to using only that language in the
      project.

   #. Select the **Minimum API level** you want your app to support.
      When you select a lower API level, your app can't use as many
      modern Android APIs. However, a larger percentage of Android
      devices can run your app. The opposite is true when selecting a
      higher API level.

      If you want to see more data to help you decide, click **Help me
      choose**. This displays a dialog showing the cumulative
      distribution for the API level you have selected and lets you see
      the impact of using different minimum API levels.

      .. figure::
         https://developer.android.google.cn/static/studio/images/projects/new-project-wizard-choose-api-level_2x.png
         :alt: A helper that shows cumulative distribution of different
         API levels.
         :width: 1100px

         **Figure 3.** A help screen that shows the cumulative
         distribution of different API levels.

   #. Your project is configured to use AndroidX libraries by default,
      which replace the Android Support libraries. To use the legacy
      support libraries instead, select **Use legacy android.support
      libraries**. However, this is not recommended, as the legacy
      support libraries are no longer supported. To learn more, read the
      `AndroidX overview <#>`__.

   #. When you're ready to create your project, click **Finish**.

   Android Studio creates your new project with some basic code and
   resources to get you started. If you decide to add support for a
   different device form factor later, you can `add a module <#>`__ to your project. And if
   you want to share code and resources between modules, you can do so
   by creating an `Android library <#>`__.

   For more information about the Android project structure and module
   types, read the `Projects overview <#>`__. If you're
   new to Android development altogether, start with the `Android Developer Guides <#>`__.

   .. rubric:: Import an existing project
      :name: ImportAProject

   To import an existing local project into Android Studio, proceed as
   follows:

   #. Click **File** > **New** > **Import Project**.
   #. In the window that appears, navigate to the root directory of the
      project you want to import.
   #. Click **OK**.

   Android Studio opens the project in a new IDE window and indexes its
   contents.

   If you are importing a project from version control, select **File**
   > **New** > **Project from Version Control**. For more information
   about importing projects from version control, read IntelliJ’s
   information about 
   `Version control <https://www.jetbrains.com/help/idea/version-control-integration.html>`__.

Last updated 2024-01-03 UTC.


/Migrate to Android Studio
==========================

.. container:: devsite-article-body clearfix

   Migrating your projects to Android Studio requires adapting to a new
   project structure, build system, and IDE functionality.

   If you are migrating from IntelliJ and your project already uses
   Gradle, you can open your existing project from Android Studio. If
   you are using IntelliJ but your project doesn't already use Gradle,
   you need to manually prepare your project before you can import it
   into Android Studio. For more information, see the `Migrate from IntelliJ <#migrate-intellij>`__ section.

   .. rubric:: Android Studio basics
      :name: studio-basics

   Here are some of the key differences to be aware of as you prepare to
   migrate to Android Studio.

   .. rubric:: Project and module organization
      :name: project-and-module-organization

   Android Studio is based on the `IntelliJ IDEA <https://www.jetbrains.com/idea/>`__ IDE. To familiarize
   yourself with the IDE basics, such as navigation, code completion,
   and keyboard shortcuts, see `Meet Android Studio <#>`__.

   Android Studio organizes code into projects, which contain everything
   that defines your Android app, from app source code to build
   configurations and test code. Projects open in separate Android
   Studio windows. Each project contains one or more modules, which let
   you divide your project into discrete units of functionality. Modules
   can be independently built, tested, and debugged.

   For more information about Android Studio projects and modules, see
   the `Projects overview <#>`__.

   .. rubric:: Gradle-based build system
      :name: gradle-based-build-system

   Android Studio’s build system is based on
   `Gradle <http://gradle.org>`__ and uses build configuration files
   written in either Groovy or Kotlin script for ease of extensibility
   and customization.

   Gradle-based projects offer significant features for Android
   development, including the following:

   -  Support for binary libraries (AARs). You no longer need to copy
      library sources into your own projects; you can `declare a dependency <#dependencies>`__ and the
      library is automatically downloaded and merged into your project.
      This includes automatically merging in resources, manifest
      entries, Proguard exclusion rules, custom lint rules, and so on at
      build time.
   -  Support for `build variants <#>`__,
      which let you build different versions of your app (such as a free
      version and a pro version) from the same project.
   -  Easy `build configuration <#>`__ and customization.
      For example, you can pull version names and version codes from Git
      tags as part of the build.
   -  Gradle can be used from the IDE, from the `command line <#>`__, and from continuous
      integration servers like Jenkins, providing the same build
      everywhere, every time.

   For more information about using and configuring Gradle, see
   `Configure your build <#>`__.

   .. rubric:: Dependencies
      :name: dependencies

   Library dependencies in Android Studio use Gradle dependency
   declarations and Maven dependencies for well-known local source and
   binary libraries with Maven coordinates. For more information, see
   `Declare dependencies <#dependencies>`__.

   .. rubric:: Migrate from IntelliJ
      :name: migrate-intellij

   If your IntelliJ project uses the Gradle build system, you can import
   your project directly into Android Studio. If your IntelliJ project
   uses Maven or another build system, you need to set it up to work
   with Gradle before you can migrate to Android Studio.

   .. rubric:: Import a Gradle-based IntelliJ project
      :name: intellij-gradle

   If you are already using Gradle with your IntelliJ project, open it
   in Android Studio using the following steps:

   #. Click **File > New > Import Project**.
   #. Select your IntelliJ project directory and click **OK**. Your
      project opens in Android Studio.

   .. rubric:: Import a non-Gradle IntelliJ project
      :name: intellij-maven

   If your IntelliJ project doesn't already use the Gradle build system,
   you have two options for importing your project into Android Studio,
   which are described in the sections that follow:

   -  Create a new empty Android Studio project and copy your existing
      source code into the directories associated with the new project.
      For more information, see the section about `migrating by creating a new empty project <#empty-project>`__.
   -  Create a new Gradle build file for your project and then import
      the project and new build file into Android Studio. For more
      information, see the section about `migrating by creating a custom Gradle build file <#custom-gradle>`__.

   .. rubric:: Migrate by creating a new empty project
      :name: empty-project

   To migrate your project into Android Studio by creating a new empty
   project and copying your source files into the new directories,
   proceed as follows:

   #. Open Android Studio and click **File > New > New Project**.
   #. Enter a name for your app project and specify the location where
      it should be created, then click **Next**.
   #. Select the form factors your app runs on, then click **Next**.
   #. Click **Add No Activity**, then click **Finish**.
   #. In the **Project** tool window, click the arrow to open the view
      menu and select the **Project** view to see and explore the
      organization of your new Android Studio project. To read more
      about changing views and how Android Studio structures projects,
      see `Project files <#ProjectFiles>`__.
   #. Navigate to the location you selected for your new project and
      move the code, unit tests, instrumentation tests, and resources
      from your old project directories into the correct locations in
      your new project structure.
   #. In Android Studio, click **File > Project Structure** to open the
      Project Structure dialog. Ensure that your app's module is
      selected in the left pane.
   #. Make any necessary modifications in the **Properties** tab for
      your project (for example, modifying the ``minSdk`` or
      ``targetSdk``).
   #. Click **Dependencies** and add any libraries your project depends
      on as Gradle dependencies. To add a new dependency, click **Add**
      |image-ic_plus|, then select the type of dependency you would like to add
      and follow the prompts.
   #. Click **OK** to save your modifications.
   #. Click **Build > Make Project** to test building your project, and
      if necessary resolve any outstanding errors.

   .. |image-ic_plus| image:: https://developer.android.google.cn/static/studio/images/buttons/ic_plus.png
      :class: inline-icon

   .. rubric:: Migrate by creating a custom Gradle build file
      :name: custom-gradle

   To migrate your project into Android Studio by creating a new Gradle
   build file to point to your existing source files, proceed as
   follows:

   #. Before you begin, back up your project files in a separate
      location, as the migration process modifies the contents of your
      project in place.

   #. Create a file in your project directory called ``build.gradle``,
      if you're using Groovy, or ``build.gradle.kts``, if you're using
      Kotlin script. This file contains all the information required for
      Gradle to run your build.

      By default, Android Studio expects your project to be organized as
      shown in figure 1.

      .. figure:: /static/images/tools/studio/project-structure_2x.png
         :width: 339px

         **Figure 1.** The default project structure for an Android app
         module.

      In ``settings.gradle``, for Groovy, or ``settings.gradle.kts``,
      for Kotlin script, you set the repositories that are used to find
      plugins and dependencies in the ``pluginManagement`` and
      ``dependencyResolutionManagement`` blocks, respectively:

      .. container::

         .. container:: ds-selector-tabs

            .. container:: section

               .. rubric:: Groovy
                  :name: groovy

               .. code:: prettyprint

                    pluginManagement {
                        repositories {
                            google()
                            mavenCentral()
                            gradlePluginPortal()
                        }
                    }
                    dependencyResolutionManagement {
                        repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
                        repositories {
                            google()
                            mavenCentral()
                        }
                    }
                    rootProject.name = "Test App"
                    include ':app'
                    

            .. container:: section

               .. rubric:: Kotlin
                  :name: kts

               .. code:: prettyprint

                    pluginManagement {
                        repositories {
                            google()
                            mavenCentral()
                            gradlePluginPortal()
                        }
                    }
                    dependencyResolutionManagement {
                        repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
                        repositories {
                            google()
                            mavenCentral()
                        }
                    }
                    rootProject.name = "Test App"
                    include(":app")
                    

      **Warning:** The JCenter repository became read-only on March 31,
      2021. For more information, see `JCenter service update <#>`__.

      The Android Gradle plugin applies some default `source sets <#sourcesets>`__ to the project. These source
      sets define the directories used to store `various types of source files <#ProjectView>`__. Gradle uses these source
      sets to determine the locations of specific file types. If your
      existing project doesn't conform to the defaults, then you can
      either move files to where they should be or `change the default source sets <#configure-sourcesets>`__
      so Gradle knows where to find them.

      For more information about setting up and customizing a Gradle
      build file, read `Configure your build. <#>`__

   #. Next, identify which library projects you are using.

      With Gradle, you no longer need to add these libraries as source
      code projects. You can instead refer to them in the
      ``dependencies{}`` block of your build file. The build system then
      handles these libraries for you, including downloading libraries,
      merging in resources, and merging manifest entries. The following
      example adds the declaration statements for a number of AndroidX
      libraries to the ``dependencies{}`` block of a build file.

      .. container::

         .. container:: ds-selector-tabs

            .. container:: section

               .. rubric:: Groovy
                  :name: groovy

               .. code:: prettyprint

                  ...
                  dependencies {
                      implementation fileTree(dir: 'libs', include: ['*.jar'])

                      // AndroidX libraries
                      implementation 'androidx.core:core-ktx:1.13.1'
                      implementation 'androidx.appcompat:appcompat:1.6.1'
                      implementation 'androidx.cardview:cardview:1.0.0'
                      implementation 'com.google.android.material:material:1.7.0'
                      implementation 'androidx.gridlayout:gridlayout:1.0.0'
                      implementation 'androidx.leanback:leanback:1.1.0-rc02'
                      implementation 'androidx.mediarouter:mediarouter:1.7.0'
                      implementation 'androidx.palette:palette-ktx:1.0.0'
                      implementation 'androidx.recyclerview:recyclerview:1.3.2'
                      implementation 'androidx.annotation:annotation:1.7.1'

                      // Note: these libraries require that the Google repository has been declared
                      // in the pluginManagement section of the top-level build.gradle file.
                  }

            .. container:: section

               .. rubric:: Kotlin
                  :name: kts

               .. code:: prettyprint

                  ...
                  dependencies {
                      implementation(fileTree(mapOf("dir" to "libs", "include" to listOf("*.jar"))))

                      // AndroidX libraries
                      implementation("androidx.core:core-ktx:1.13.1")
                      implementation("androidx.appcompat:appcompat:1.6.1")
                      implementation("androidx.cardview:cardview:1.0.0")
                      implementation("com.google.android.material:material:1.7.0")
                      implementation("androidx.gridlayout:gridlayout:1.0.0")
                      implementation("androidx.leanback:leanback:1.1.0-rc02")
                      implementation("androidx.mediarouter:mediarouter:1.7.0")
                      implementation("androidx.palette:palette-ktx:1.0.0")
                      implementation("androidx.recyclerview:recyclerview:1.3.2")
                      implementation("androidx.annotation:annotation:1.7.1")

                      // Note: these libraries require that the Google repository has been declared
                      // in the pluginManagement section of the top-level build.gradle.kts file.
                  }

      For help determining the correct declaration statements for your
      libraries, search `the Google Maven repository <https://maven.google.com/>`__ or `Maven Central <https://search.maven.org/>`__.

   #. Save your ``build.gradle`` file, then close the project in
      IntelliJ. Navigate to your project directory and delete the
      ``.idea`` directory and any IML files in your project.

   #. Launch Android Studio and click **File > New > Import Project**.

   #. Locate your project directory, select the ``build.gradle`` or
      ``build.gradle.kts`` file you created, and then click **OK** to
      import your project.

   #. Click **Build > Make Project** to test your build file by building
      your project, and address any errors you find.

   .. rubric:: Next steps
      :name: next-steps

   Once you have migrated your project to Android Studio, learn more
   about building with Gradle and running your app in Android Studio by
   reading `Build and run your app <#>`__.

   Depending on your project and workflow, you may also want to learn
   more about version control, managing dependencies, and configuring
   Android Studio. To get started using Android Studio, read `Meet Android Studio <#>`__.

   .. rubric:: Configure version control
      :name: configure-version-control

   Android Studio supports a variety of version control systems,
   including Git, Mercurial, and Subversion. Other version control
   systems can be added through plugins.

   If your app is already under source control, you might need to enable
   it in Android Studio. From the VCS menu, click **Enable Version
   Control Integration** and select the appropriate version control
   system.

   If your app is not under source control, you can configure it after
   importing your app into Android Studio. Use the Android Studio VCS
   menu options to enable VCS support for the desired version control
   system, create a repository, import the new files into version
   control, and perform other version control operations:

   #. From the Android Studio VCS menu, click **Enable Version Control
      Integration**.
   #. Select a version control system to associate with the project root
      from the menu, then click **OK**. The VCS menu now displays a
      number of version control options based on the system you
      selected.

   **Note:** You can also use the **File > Settings > Version Control**
   menu option to set up and modify the version control.

   For more information about working with version control, see
   `IntelliJ's Version control reference <https://www.jetbrains.com/help/idea/2023.3/version-control-integration.html>`__.

   .. rubric:: App signing
      :name: app-signing

   If a debug certificate was used previously, it might be detected
   during the import process. In this case, Android Studio continues to
   reference that certificate. Otherwise, the debug configuration uses
   the Android Studio-generated debug keystore, using a known password
   and a default key with a known password located in
   ``$HOME/.android/debug.keystore``. The debug build type is set to use
   this debug configuration automatically when you run or debug your
   project from Android Studio.

   Similarly, the import process might detect an existing release
   certificate. If no release certificate was defined previously, add
   the release signing configuration to the ``build.gradle`` or
   ``build.gradle.kts`` file or use the **Build > Generate Signed APK**
   menu option to open the *Generate Signed APK Wizard*. For more
   information about signing your app, see `Sign your app <#>`__.

   .. rubric:: Adjust Android Studio’s maximum heap size
      :name: adjust-heap-size

   By default, Android Studio has a maximum heap size of 1280MB. If you
   are working on a large project, or your system has a lot of RAM, you
   can improve performance by `increasing the maximum heap size <#adjusting_heap_size>`__.

   .. rubric:: Software updates
      :name: software-updates

   Android Studio updates separately from the Gradle plugin, the build
   tools, and the SDK tools. You can specify which versions you would
   like to use with Android Studio.

   By default, Android Studio provides automatic updates whenever a new
   stable version is released, but you can choose to update more
   frequently and receive preview or beta versions.

   For more information about updating Android Studio and using preview
   and beta versions, read about `updates <#>`__.

Last updated 2024-05-03 UTC.


/Version control basics
=======================

..  https://developer.android.google.cn/studio/projects/version-control?hl=en

.. container:: devsite-article-body clearfix

   Android Studio supports a variety of version control systems (VCSs),
   including Git, GitHub, CVS, Mercurial, Subversion, and Google Cloud Source
   Repositories.

   After importing your app into Android Studio, use the Android Studio VCS menu
   options to enable VCS support for the desired system, create a repository,
   import the new files into version control, and perform other version control
   operations.

   To enable VCS support, follow these steps:

   #. From the Android Studio **VCS** menu, select **Enable Version Control
      Integration**.
   #. From the menu, select a VCS to associate with the project root.
   #. Click **OK**.

   The VCS menu now displays a number of version control options based on the
   system you selected.

   **Note:** You can also use the **File > Settings > Version Control** menu
   option to set up and modify the version control settings.

Last updated 2023-04-12 UTC.


/Configure Android Studio
=========================

.. container:: devsite-article-body clearfix

   Android Studio provides wizards and templates that verify your system
   requirements, such as the Java Development Kit (JDK) and available
   RAM, and configure default settings, such as an optimized default
   Android Virtual Device (AVD) emulation and updated system images.
   This document describes additional configuration settings to
   customize your use of Android Studio.

   Android Studio provides access to two configuration files through the
   **Help** menu:

   -  `studio.vmoptions <#customize_vm>`__: Customize options for
      Android Studio's Java Virtual Machine (JVM), such as heap size and
      cache size. Note that on Linux machines this file may be named
      ``studio64.vmoptions``, depending on your version of Android
      Studio.
   -  `idea.properties <#customize_ide>`__: Customize Android Studio
      properties, such as the plugins folder path or maximum supported
      file size.

   For specific documentation about emulator and device setup and use,
   see the following topics:

   -  `Create and manage virtual devices <#>`__
   -  `Run apps on a hardware device <#>`__
   -  `Install OEM USB drivers <#>`__

   .. rubric:: Find your configuration files
      :name: file_location

   Both configuration files are stored in the configuration directory
   for Android Studio. To find the configuration directory, see
   `Directories <#directories>`__.

   **Note:**\  To quickly locate your configuration directory, navigate
   to **Help > Edit Custom VM Options** or **Help > Edit Custom
   Properties** in Android Studio. This opens a configuration file.
   Inspect the path of the configuration file to find your configuration
   directory.
   You can use the following environment variables to point to specific
   override files elsewhere:

   -  ``STUDIO_VM_OPTIONS``: set the name and location of the
      ``.vmoptions`` file.
   -  ``STUDIO_PROPERTIES``: set the name and location of the
      ``.properties`` file.

   You can configure which JDKs are used by visiting `Java versions in Android builds <#>`__.

   .. rubric:: Customize your VM options
      :name: customize_vm

   The ``studio.vmoptions`` file lets you customize options for Android
   Studio's JVM. To improve Android Studio's performance, the most
   common option to adjust is the maximum heap size, but you can also
   use the ``studio.vmoptions`` file to override other default settings
   such as initial heap size, cache size, and Java garbage collection
   switches.

   To create a new ``studio.vmoptions`` file or to open your existing
   one, follow these steps:

   #. Click **Help** > **Edit Custom VM Options**. If you have never
      edited VM options for Android Studio before, the IDE prompts you
      to create a new ``studio.vmoptions`` file. Click **Create** to
      create the file.
   #. The ``studio.vmoptions`` file opens in Android Studio's editor
      window. Edit the file to add your customized VM options. For a
      full list of customizable JVM options, see Oracle's `Java HotSpot VM Options page <http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html>`__.

   The ``studio.vmoptions`` file you create is added to the default
   ``studio.vmoptions`` file, located in the ``bin/`` directory inside
   your Android Studio installation folder.

   Don't directly edit the ``studio.vmoptions`` file found inside the
   Android Studio program folder. While you can access the file to view
   Android Studio's default VM options, editing only your own
   ``studio.vmoptions`` file ensures that you don't override important
   default settings for Android Studio. Therefore, in your
   ``studio.vmoptions`` file, override only the attributes you care
   about and let Android Studio continue using default values for any
   attributes you have not changed.

   .. rubric:: Maximum heap size
      :name: adjusting_heap_size

   By default, Android Studio has a maximum heap size of 1280MB. If you
   are working on a large project, or your system has a lot of RAM, you
   can improve performance by increasing the maximum heap size for
   Android Studio processes, such as the core IDE, Gradle daemon, and
   Kotlin daemon.

   Android Studio automatically checks for possible heap size
   optimizations and notifies you if it detects that performance can be
   improved.

   .. image:: https://developer.android.google.cn/static/studio/images/memory-settings-notification.png
      :width: 368px
      :alt: The memory settings, which let you configure maximum amount of RAM for Android Studio processes.


   **Figure 1.** A notification about recommended memory settings.

   If you use a 64-bit system that has at least 5 GB of RAM, you can
   also adjust the heap sizes for your project manually. To do so,
   follow these steps:

   #. Click **File > Settings** from the menu bar (**Android Studio >
      Preferences** on macOS).

   #. Click **Appearance & Behavior > System Settings > Memory
      Settings**.

      .. image:: https://developer.android.google.cn/static/studio/images/memory-settings.png
         :width: 728px

      **Figure 2.** Configure the maximum amount of RAM in Memory
      Settings.

   #. Adjust the heap sizes.

   #. Click **Apply**.

      If you change the heap size for the IDE, you must restart Android
      Studio before the new memory settings are applied.

   **Note:**\  Allocating too much memory can degrade performance.

   .. rubric:: Export and import IDE settings
      :name: ExportImportSettings

   You can export a ``Settings.jar`` file that contains all or a subset
   of your preferred IDE settings for a project. You can then import the
   JAR file into your other projects and/or make the JAR file available
   to your colleagues to import into their projects.

   For more information, see `Share IDE settings <https://www.jetbrains.com/help/idea/2023.3/exporting-and-importing-settings.html>`__
   at IntelliJ IDEA.

   .. rubric:: Customize your IDE properties
      :name: customize_ide

   The ``idea.properties`` file lets you customize the IDE properties
   for Android Studio, such as the path to user-installed plugins and
   the maximum file size supported by the IDE. The ``idea.properties``
   file is merged with the default properties for the IDE, so you can
   specify only the override properties.

   To create a new ``idea.properties`` file or to open your existing
   file, follow these steps:

   #. Click **Help** > **Edit Custom Properties**. If you have never
      edited the IDE properties before, Android Studio prompts you to
      create a new ``idea.properties`` file. Click **Yes** to create the
      file.
   #. The ``idea.properties`` file opens in Android Studio's editor
      window. Edit the file to add your customized IDE properties.

   The following ``idea.properties`` file includes commonly customized
   IDE properties. For a complete list of properties, read about the
   `idea.properties`` file for IntelliJ
   IDEA <https://www.jetbrains.com/help/idea/2023.3/file-idea-properties.html>`__.

   .. code:: devsite-click-to-copy

      #---------------------------------------------------------------------
      # Uncomment this option if you want to customize path to user installed plugins folder. Make sure
      # you're using forward slashes.
      #---------------------------------------------------------------------
      # idea.plugins.path=${idea.config.path}/plugins
      #---------------------------------------------------------------------
      # Maximum file size (kilobytes) IDE should provide code assistance for.
      # The larger the file is, the slower its editor works and higher overall system memory requirements are
      # if code assistance is enabled. Remove this property or set to very large number if you need
      # code assistance for any files available regardless their size.
      #---------------------------------------------------------------------
      idea.max.intellisense.filesize=2500
      #---------------------------------------------------------------------
      # This option controls console cyclic buffer: keeps the console output size not higher than the
      # specified buffer size (Kb). Older lines are deleted. In order to disable cycle buffer use
      # idea.cycle.buffer.size=disabled
      #---------------------------------------------------------------------
      idea.cycle.buffer.size=1024
      #---------------------------------------------------------------------
      # Configure if a special launcher should be used when running processes from within IDE.
      # Using Launcher enables "soft exit" and "thread dump" features.
      #---------------------------------------------------------------------
      idea.no.launcher=false
      #---------------------------------------------------------------------
      # To avoid too long classpath
      #---------------------------------------------------------------------
      idea.dynamic.classpath=false
      #---------------------------------------------------------------------
      # There are two possible values of idea.popup.weight property: "heavy" and "medium".
      # If you have WM configured as "Focus follows mouse with Auto Raise", then you have to
      # set this property to "medium". It prevents problems with popup menus on some
      # configurations.
      #---------------------------------------------------------------------
      idea.popup.weight=heavy
      #---------------------------------------------------------------------
      # Use default anti-aliasing in system, i.e. override value of
      # "Settings|Editor|Appearance|Use anti-aliased font" option. May be useful when using Windows
      # Remote Desktop Connection for instance.
      #---------------------------------------------------------------------
      idea.use.default.antialiasing.in.editor=false
      #---------------------------------------------------------------------
      # Disabling this property may lead to visual glitches like blinking and fail to repaint
      # on certain display adapter cards.
      #---------------------------------------------------------------------
      sun.java2d.noddraw=true
      #---------------------------------------------------------------------
      # Removing this property may lead to editor performance degradation under Windows.
      #---------------------------------------------------------------------
      sun.java2d.d3d=false
      #---------------------------------------------------------------------
      # Workaround for slow scrolling in JDK6.
      #---------------------------------------------------------------------
      swing.bufferPerWindow=false
      #---------------------------------------------------------------------
      # Removing this property may lead to editor performance degradation under X Window.
      #---------------------------------------------------------------------
      sun.java2d.pmoffscreen=false
      #---------------------------------------------------------------------
      # Workaround to avoid long hangs while accessing clipboard under Mac OS X.
      #---------------------------------------------------------------------
      # ide.mac.useNativeClipboard=True
      #---------------------------------------------------------------------
      # Maximum size (kilobytes) IDEA will load for showing past file contents -
      # in Show Diff or when calculating Digest Diff.
      #---------------------------------------------------------------------
      # idea.max.vcs.loaded.size.kb=20480

   .. rubric:: Configure the IDE for low-memory machines
      :name: low_memory

   If you are running Android Studio on a machine with less than the
   recommended specifications (see the `system requirements <#get-android-studio>`__), you can customize the
   IDE to improve performance on your machine as follows:

   -  **Reduce the maximum heap size available to Android Studio:**
      Reduce the maximum heap size for Android Studio to 512Mb. For more
      information on changing maximum heap size, see `Maximum heap size <#adjusting_heap_size>`__.

   -  **Update Gradle and the Android Gradle plugin:** Update to the
      latest versions of Gradle and the Android Gradle plugin to take
      advantage of the latest performance improvements. For more
      information about updating Gradle and the Android Gradle plugin,
      see the `Android Gradle plugin release notes <#>`__.

   -  **Enable Power Save Mode:** Enable Power Save Mode to turn off a
      number of memory- and battery-intensive background operations,
      including error highlighting and on-the-fly inspections,
      auto-popup code completion, and automatic incremental background
      compilation. To turn on Power Save Mode, click **File > Power Save
      Mode**.

   -  **Disable unnecessary lint checks:** To change which lint checks
      Android Studio runs on your code, do the following:

      #. Click **File > Settings** (on macOS, **Android Studio >
         Preferences**) to open the **Settings** dialog.
      #. In the left pane, expand the **Editor** section and click
         **Inspections**.
      #. Click the checkboxes to select or deselect lint checks as
         appropriate for your project.
      #. Click **Apply** or **OK** to save your changes.

   -  **Debug on a physical device:** Improve overall performance for
      Android Studio by `debugging on a physical device <#>`__. Debugging on an emulator uses more
      memory than debugging on a physical device.

   -  **Include only necessary Google Play services as dependencies:**
      Only include necessary Google Play Services as dependencies in
      your project. Dependencies increase the amount of memory
      necessary, so limiting them improves memory usage and performance.
      For more information, see `Declare dependencies for Google Play services <https://developers.google.cn/android/guides/setup#add_google_play_services_to_your_project>`__.

   -  **Reduce the maximum heap size available for Gradle:** Reduce the
      value of Gradle's maximum heap size from its default of 1,536 MB
      by overriding the ``org.gradle.jvmargs`` property in the
      ``gradle.properties`` file, as shown:

      .. code:: prettyprint

         # Make sure to gradually decrease this value and note
         # changes in performance. Allocating too little memory can
         # also decrease performance.
         org.gradle.jvmargs = -Xmx1536m

   -  **Make sure parallel compilation is not enabled:** Android Studio
      can compile independent modules in parallel, but leave this
      feature disabled if you have a low-memory system. To check this
      setting, do the following:

      #. Click **File > Settings** (on macOS, **Android Studio >
         Preferences**) to open the **Settings** dialog.
      #. In the left pane, expand **Build, Execution, Deployment** and
         then click **Compiler**.
      #. Ensure that the **Compile independent modules in parallel**
         option is unchecked.
      #. If you have made a change, click **Apply** or **OK** for your
         change to take effect.

   .. rubric:: Set proxy settings
      :name: proxy

   Proxies serve as intermediary connection points between HTTP clients
   and web servers that add security and privacy to internet
   connections.

   To support running Android Studio behind a firewall, use the Android
   Studio IDE HTTP Proxy settings page to set the HTTP proxy settings.

   When running the Android Gradle plugin from the command line or on
   machines where Android Studio is not installed, such as continuous
   integration servers, set the proxy settings in the Gradle build file.

   **Note:**\  After the initial installation of the Android Studio
   bundle, Android Studio can run with internet access or offline.
   However, Android Studio requires an internet connection for Setup
   Wizard synchronization, third-party library access, access to remote
   repositories, Gradle initialization and synchronization, and Android
   Studio version updates.

   .. rubric:: Set up the Android Studio proxy
      :name: setup-proxy

   Android Studio supports HTTP proxy settings so you can run Android
   Studio behind a firewall or secure network. To set the HTTP proxy
   settings in Android Studio:

   #. From the menu bar, click **File > Settings** (on macOS, click
      **Android Studio > Preferences**).
   #. In the left pane, click **Appearance & Behavior > System Settings
      > HTTP Proxy**. The HTTP Proxy page appears.
   #. Select **Auto-detect proxy settings** to use an automatic proxy
      configuration URL for the proxy settings or **Manual proxy
      configuration** to enter each of the settings yourself. For a
      detailed explanation of these settings, see `HTTP Proxy <https://www.jetbrains.com/help/idea/2023.3/http-proxy.html>`__.
   #. Click **Apply** or **OK** for your changes to take effect.

   .. rubric:: Android plugin for Gradle HTTP proxy settings
      :name: gradle-plugin

   When running the Android plugin from the command line or on machines
   where Android Studio is not installed, set the Android Gradle plugin
   proxy settings in the Gradle build file.

   For application-specific HTTP proxy settings, set the proxy settings
   in the ``build.gradle`` file as required for each application module:

   .. code:: prettyprint

      plugins {
        id 'com.android.application'
      }

      android {
          ...

          defaultConfig {
              ...
              systemProp.http.proxyHost=proxy.company.com
              systemProp.http.proxyPort=443
              systemProp.http.proxyUser=userid
              systemProp.http.proxyPassword=password
              systemProp.http.auth.ntlm.domain=domain
          }
          ...
      }

   For project-wide HTTP proxy settings, set the proxy settings in the
   ``gradle/gradle.properties`` file:

   .. code:: prettyprint

      # Project-wide Gradle settings.
      ...

      systemProp.http.proxyHost=proxy.company.com
      systemProp.http.proxyPort=443
      systemProp.http.proxyUser=username
      systemProp.http.proxyPassword=password
      systemProp.http.auth.ntlm.domain=domain

      systemProp.https.proxyHost=proxy.company.com
      systemProp.https.proxyPort=443
      systemProp.https.proxyUser=username
      systemProp.https.proxyPassword=password
      systemProp.https.auth.ntlm.domain=domain

      ...

   For information about using Gradle properties for proxy settings, see
   the `Gradle User Guide <http://www.gradle.org/docs/current/userguide/build_environment.html>`__.

   **Note:**\  When using Android Studio, the settings in the Android
   Studio IDE HTTP proxy settings page override the HTTP proxy settings
   in the ``gradle.properties`` file.

   .. rubric:: Optimize Android Studio performance on Windows
      :name: optimize-studio-windows

   Android Studio performance on Windows can be impacted by a variety of
   factors. This section describes how you can optimize Android Studio
   settings to get the best possible performance on Windows.

   .. rubric:: Minimize the impact of antivirus software on build speed
      :name: antivirus-impact

   Some antivirus software can interfere with the Android Studio build
   process, causing builds to run dramatically slower. When you run a
   build in Android Studio, Gradle compiles your app’s resources and
   source code and then packages the compiled resources together in an
   APK or AAB. During this process, many files are created on your
   computer. If your antivirus software has real-time scanning enabled,
   the antivirus software can force the build process to halt each time
   a file is created while it scans that file.

   To avoid this issue, you can exclude certain directories from
   real-time scanning in your antivirus software. For Windows, `Build Analyzer <#antivirus-impact>`__ can help you
   identify the directories that should be excluded from active scanning
   and exclude them.

   **Caution:**\  To ensure that your computer is safe from malicious
   software, don't completely disable real-time scanning or your
   antivirus software.
   The following list shows the default location of each Android Studio
   directory that you can exclude from real-time scanning:

   Gradle cache
      ``%USERPROFILE%\.gradle``
   Android Studio projects
      ``%USERPROFILE%\AndroidStudioProjects``
   Android SDK
      ``%USERPROFILE%\AppData\Local\Android\SDK``

   **Android Studio system files**

   Syntax: ``%LOCALAPPDATA%\Google\``\ ``<product><version>``

   Example:
   ``C:\Users\YourUserName\AppData\Local\Google\AndroidStudio4.1``

   .. rubric:: Customize directory locations for Group Policy controlled
      environments
      :name: custom-locations

   If a Group Policy limits which directories you can exclude from
   real-time scanning on your computer, you can move your Android Studio
   directories to one of the locations that the centralized Group Policy
   already excludes.

   The following list shows how to customize the location of each
   Android Studio directory, where ``C:\WorkFolder`` is the directory
   that your Group Policy already excludes:

   Gradle cache
      Define the ``GRADLE_USER_HOME`` environment variable to point to
      ``C:\WorkFolder``\ ``\.gradle``.
   Android Studio projects
      Move or create project directories in an appropriate subdirectory
      of ``C:\WorkFolder``. For example,
      ``C:\WorkFolder``\ ``\AndroidStudioProjects``.
   Android SDK
      Follow these steps to customize location:

      #. In Android Studio, open the **Settings** dialog
         (**Preferences** on macOS), then navigate to **Appearance &
         Behavior > System Settings > Android SDK**.

      #. Change the value of **Android SDK Location** to
         ``C:\WorkFolder``\ ``\AndroidSDK``.

         To avoid downloading the SDK again, copy the existing SDK
         directory, located at
         ``%USERPROFILE%\AppData\Local\Android\SDK`` by default, to the
         new location.

   Android Studio system files
      Follow these steps to customize location:

      #. In Android Studio, click **Help > Edit Custom Properties**.

         Android Studio prompts you to create an ``idea.properties``
         file if you don't already have one.

      #. Add the following line to your ``idea.properties`` file:

         .. code:: none

            idea.system.path=c:/workfolder/studio/caches/trunk-system

Last updated 2024-05-03 UTC.

/Update the IDE and SDK tools
=============================

.. container:: devsite-article-body clearfix

   Once you install Android Studio, you can keep the Android Studio IDE
   and Android SDK tools up to date with automatic updates and the
   Android SDK Manager.

   .. rubric:: Update your IDE using JetBrains Toolbox
      :name: toolbox

   If you installed Android Studio using `JetBrains Toolbox <https://www.jetbrains.com/toolbox-app/>`__, then Toolbox is
   responsible for handling updates to Android Studio. Toolbox lets you
   install canary, beta, and stable versions of Android Studio in
   parallel. It also lets you roll back to earlier versions of each, if
   required. When an update is available it displays in Toolbox, as
   shown in figure 1.

   .. image:: https://developer.android.google.cn/static/studio/images/jetbrains-toolbox_2x.png
      :width: 440px
      :alt: Jetbrains Toolbox showing updcates available
      
   **Figure 1.** Jetbrains Toolbox showing available updates.

   .. rubric:: Update your IDE and change channels
      :name: channels

   If you installed Android Studio manually, Android Studio notifies you
   with a small bubble dialog when an update is available for the IDE.
   To manually check for updates, click **File** >\ **Settings**
   >\ **Appearance & Behavior** > **System Settings** > **Updates** (on
   macOS, **Android Studio** > **Check for Updates**). See figure 2.

   Updates for Android Studio are available from the following release
   channels:

   -  **Canary channel:** these bleeding-edge releases are updated
      roughly weekly and are available for download on the `Preview release <#>`__ page.

      In addition to receiving canary versions of Android Studio, you
      also receive preview versions of other SDK tools, including the
      Android Emulator.

      Although these builds are subject to more bugs, they do get tested
      and are available so you can try new features and provide
      feedback.

      **Note:** This channel is not recommended for production
      development.

   -  **Beta channel:** these are release candidates based on stable
      canary builds and are available for download on the `Preview release <#>`__ page. They are released to get
      feedback before being integrated into the stable channel.

   -  **Stable channel:** the official, stable release of `Android Studio <#>`__.

   If you'd like to try one of the preview channels (canary or beta)
   while still using the stable build for your production projects, you
   can `install them side by side <#>`__.

   .. image:: https://developer.android.google.cn/static/studio/images/preferences-updates_2x.png
      :width: 982px

   **Figure 2.** The Android Studio Updates preferences.

   .. rubric:: Delete unused Android Studio directories
      :name: delete

   .. image:: https://developer.android.google.cn/static/studio/images/intro/delete-unused-directories-dialog-2x.png

   When you run a major version of Android Studio for the first time, it
   looks for directories containing caches, settings, indices, and logs
   for versions of Android Studio for which a corresponding installation
   can't be found. The **Delete Unused Android Studio Directories**
   dialog then displays locations, sizes, and last-modified times of
   these unused directories and provides an option to delete them.

   .. rubric:: Update your tools with the SDK Manager
      :name: sdk-manager

   The Android SDK Manager helps you download the SDK tools, platforms,
   and other components you need to develop your apps. Once downloaded,
   you can find each package in the directory indicated as the **Android
   SDK Location**, as shown in figure 3.

   To open the SDK Manager from Android Studio, click **Tools > SDK
   Manager** or click **SDK Manager** |image3-toolbar-sdk-manager| in the toolbar. If you're
   not using Android Studio, you can download tools using the
   `sdkmanager <#>`__ command-line
   tool.

   When an update is available for a package you already have, a dash
   |image4-sdk-manager-icon| appears in the checkbox next to the package.

   -  To update an item or install a new one, select the checkbox.
   -  To uninstall a package, click to clear the checkbox.

   Pending updates are indicated in the left column with a download icon
   |image5-studio-sdk-dwnld-icon|. Pending removals are indicated with a red X: |image6-studio-sdk-removal-icon|.

   To update the selected packages, click **Apply** or **OK** and agree
   to any license agreements.

   .. image:: https://developer.android.google.cn/static/studio/images/sdk-manager-tools_2x.png
      :width: 926px

   **Figure 3.** The Android SDK Manager.

   .. rubric:: Required packages
      :name: required

   You can find the following tools in the **SDK Tools** tab:

   **Android SDK Build Tools**
   Includes tools to build Android apps. For more information, see the
   `SDK Build Tools release notes <#>`__.
   **Android SDK Platform Tools**
   Includes various tools required by the Android platform, including
   the `adb <#>`__ tool.
   **Android SDK Command-Line Tools**
   Includes essential tools such as ProGuard. For more information, see
   the `SDK Tools release notes <#>`__.
   **Android SDK Platform**
   In the **SDK Platforms** tab, you must install at least one version
   of the Android platform so you can compile your app. Use the latest
   platform version as your build target to provide the best user
   experience on the latest devices. To download a version, select the
   checkbox next to the version name.

   You can still run your app on older versions; however, you must build
   against the latest version to use new features when running on
   devices with the latest version of Android.

   **Google USB Driver**
   Required for Windows. Includes tools to help you perform
   `adb <#>`__ debugging with Google devices.
   To install, visit `Get the Google USB Driver <#>`__.

   .. rubric:: Recommended packages
      :name: recommended

   The following tools are recommended for development:

   **Android Emulator**
   A QEMU-based device-emulation tool that you can use to debug and test
   your applications in an actual Android runtime environment. For more
   details, see the `Emulator release notes <#>`__.
   **Note:** Most API libraries that were previously provided by the
   **Support Repository** packages (such as the Android Support Library,
   Constraint Layout, Google Play services, and Firebase) are now
   available from Google's Maven repository. Projects created with
   Android Studio 3.0 and higher automatically include this repository
   in the build configuration. If you're using an older project, you
   must manually `add Google's Maven repository <#google-maven>`__ to your
   ``build.gradle`` or ``build.gradle.kts`` file.

   **Intel** or **ARM System Images**
   The system image is required to run the `Android Emulator <#>`__. Each platform version contains
   the supported system images. You can also download system images
   later when creating Android Virtual Devices (AVDs) in the `AVD Manager <#>`__. Select either Intel or ARM
   based on your development computer's processor.
   Google Play services
   Includes a set of libraries, Javadocs, and samples to help build your
   app. If you want to use APIs from `Google Play services <https://developers.google.cn/android/>`__, you must use
   either the Google APIs system image or the Google play system image.
   The preceding list is not comprehensive, and you can add other sites
   to download additional packages from third parties, as described in
   the following section.

   In some cases, an SDK package might require a specific minimum
   revision of another tool. If so, the SDK Manager notifies you with a
   warning and adds the dependencies to your list of downloads.

   .. rubric:: Edit or add SDK tool sites
      :name: adding-sites

   Under the **SDK Update Sites** tab, you can add and manage other
   sites that host their own tools, and then download the packages from
   those sites. Android Studio checks for Android tools and third-party
   tool updates from the SDK sites you add.

   For example, a mobile carrier or device manufacturer might offer
   additional API libraries that are supported by their own
   Android-powered devices. To develop using their libraries, you can
   install their Android SDK package by adding their SDK tools URL to
   the **SDK Manager** in the **SDK Update Sites** tab.

   If a carrier or device manufacturer has hosted an SDK add-on
   repository file on their website, follow these steps to add the site
   to the Android SDK Manager:

   #. Click the **SDK Update Sites** tab.
   #. Click **Add** |image8| at the top of the window.
   #. Enter the name and URL of the third-party site, then click **OK**.
   #. Make sure the checkbox is selected in the **Enabled** column.
   #. Click **Apply** or **OK**.

   Any SDK packages available from the site now appear in the **SDK
   Platforms** or **SDK Tools** tabs, as appropriate.

   .. rubric:: Auto-download missing packages with Gradle
      :name: download-with-gradle

   When you run a build `from the command line <#>`__ or Android Studio, Gradle
   can automatically download missing SDK packages that a project
   depends on, as long as the corresponding SDK license agreements have
   already been accepted in the **SDK Manager**.

   When you accept the license agreements using the SDK Manager, Android
   Studio creates a licenses directory inside the SDK home directory.
   This licenses directory is necessary for Gradle to auto-download
   missing packages.

   If you have accepted the license agreements on one workstation but
   want to build your projects on a different one, you can export your
   licenses by copying over the accepted licenses directory.

   To copy the licenses to another machine, follow these steps:

   #. On a machine with Android Studio installed, click **Tools > SDK
      Manager**. At the top of the window, note the **Android SDK
      Location**.

   #. Navigate to that directory and locate the ``licenses/`` directory
      inside it.

      If you don't see a ``licenses/`` directory, return to Android
      Studio, update your SDK tools, and accept the license agreements.
      When you return to the Android SDK home directory, you should see
      the directory.

   #. Copy the entire ``licenses/`` directory and paste it into the
      Android SDK home directory on the machine where you want to build
      your projects.

   Gradle can now automatically download missing packages your project
   depends on.

   Note that this feature is automatically disabled for builds you run
   from Android Studio, as the SDK manager handles downloading missing
   packages for the IDE. To manually disable this feature, set
   ``android.builder.sdkDownload=false`` in the ``gradle.properties``
   file for your project.

   .. rubric:: Update your tools with the command line
      :name: sdk-manager

   On systems that don't have a graphical UI, such as CI servers, you
   can't use the SDK Manager in Android Studio. Instead, use the
   `sdkmanager <#>`__ command-line
   tool to `install <#install>`__ and
   `update <#update-all>`__ SDK tools and
   platforms.

   After installing SDK tools and platforms using ``sdkmanager``, you
   might need to accept any missing licenses. This can also be done
   using ``sdkmanager``:

   .. code:: prettyprint

      $ sdkmanager --licenses

   This command scans all of the installed SDK tools and platforms and
   displays any licenses that have not been accepted. You are prompted
   to accept each license.

Last updated 2023-09-08 UTC.

.. |image3-toolbar-sdk-manager| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-sdk-manager.png
   :class: inline-icon
.. |image4-sdk-manager-icon| image:: https://developer.android.google.cn/static/studio/images/sdk-manager-icon-update_2-0_2x.png
   :class: inline-icon
.. |image5-studio-sdk-dwnld-icon| image:: https://developer.android.google.cn/static/images/tools/studio-sdk-dwnld-icon.png
   :class: inline-icon
.. |image6-studio-sdk-removal-icon| image:: https://developer.android.google.cn/static/images/tools/studio-sdk-removal-icon.png
   :class: inline-icon



/Overview: Add C and C++ code
=============================

.. https://developer.android.google.cn/studio/projects/add-native-code?hl=en

.. container:: devsite-article-body clearfix

   Add C and C++ code to your Android project by placing the code into a ``cpp``
   directory in your project module. When you build your project, this code is
   compiled into a native library that Gradle can package with your app. Your
   Java or Kotlin code can then call functions in your native library through
   the Java Native Interface (JNI). To learn more about using the JNI framework,
   read `JNI tips for Android <#/training/articles/perf-jni>`__.

   Android Studio supports CMake, which is useful for cross-platform projects.
   Android Studio also supports `ndk-build <#/ndk/guides/ndk-build>`__, which
   can be faster than CMake but only supports Android. Using both CMake and
   ``ndk-build`` in the same module is not currently supported.

   To import an existing ``ndk-build`` library into your Android Studio project,
   learn how to `link Gradle to your native library project <#/studio/projects/gradle-external-native-builds>`__.

   This page shows you how to `set up Android Studio <#download-ndk>`__ with the
   necessary build tools, `create a new project <#new-project>`__ with C/C++
   support, and `add new C/C++ files <#create-sources>`__ to your project.

   If instead you want to add native code to an existing project, follow these
   steps:

   #. `Create new native source files <#create-sources>`__ and add the files to
      your Android Studio project.

      -  Skip this step if you already have native code or want to import a
         prebuilt native library.

   #. `Configure CMake <#/studio/projects/configure-cmake>`__ to build your
      native source code into a library. This build script is required if you
      are importing and linking against prebuilt or platform libraries.

      -  If you have an existing native library that already has a
         ``CMakeLists.txt`` build script or uses ``ndk-build`` and includes an
         `Android.mk <#/ndk/guides/android_mk>`__ build script, skip this
         step.

   #. `Configure Gradle <#/studio/projects/gradle-external-native-builds>`__ by
      providing a path to your CMake or ``ndk-build`` script file. Gradle uses
      the build script to import source code into your Android Studio project
      and package your native library into the app.

   Once you configure your project, access your native functions from Java or
   Kotlin code using the `JNI framework <http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/jniTOC.html>`__.
   To build and run your app, click **Run** |run then run app from the menu
   bar|.

   **Note:** If your existing project uses the deprecated ``ndkCompile`` tool,
   migrate to using either CMake or ``ndk-build``.

   .. rubric:: Download the NDK and build tools
      :name: download-ndk

   To compile and debug native code for your app, you need the following
   components:

   -  `The Android Native Development Kit (NDK) <#/ndk>`__: a toolset that lets
      you use C and C++ code with Android. NDK provides platform libraries that
      let you manage native activities and access physical device components,
      such as sensors and touch input.
   -  `CMake <https://cmake.org/>`__: an external build tool that works
      alongside Gradle to build your native library. You don't need this
      component if you only plan to use ``ndk-build``.
   -  `LLDB <http://lldb.llvm.org/>`__: the debugger in Android Studio that
      `debugs native code <#/studio/debug>`__.

   For information on installing these components, see `Install and configure the NDK and CMake <#/studio/projects/install-ndk>`__.

   .. rubric:: Create a new project with C/C++ support
      :name: new-project

   To create a new project with support for native code, the process is similar
   to `creating any other Android Studio project <#/studio/projects/create-project>`__, but with an additional step:

   #. In the **Choose your project** section of the wizard, select the **Native
      C++** project type.
   #. Click **Next**.
   #. Complete all other fields in the next section of the wizard.
   #. Click **Next**.
   #. In the **Customize C++ Support** section of the wizard, you can customize
      your project with the **C++ Standard** field.

      -  Use the drop-down list to select which standardization of C++ you want
         to use. Selecting **Toolchain Default** uses the default CMake setting.

   #. Click **Finish**.

   After Android Studio finishes creating your new project, open the **Project**
   pane from the left side of the IDE and select the **Android** view from the
   menu. As shown in figure 1, Android Studio adds the **cpp** group:

   |image-cpp-project-view_2-2_2x|

   **Figure 1.** Android view groups for your native sources and external build
   scripts.

   **Note:** This view does not reflect the actual file hierarchy on disk, but
   groups similar files to simplify navigating your project.

   The **cpp** group is where you can find all the native source files, headers,
   build scripts for CMake or ``ndk-build``, and prebuilt libraries that are a
   part of your project. For new projects, Android Studio creates a sample C++
   source file, ``native-lib.cpp``, and places it in the ``src/main/cpp/``
   directory of your app module. This sample code provides a simple C++
   function, ``stringFromJNI()``, that returns the string ``"Hello from C++"``.
   Learn how to add additional source files to your project in the section about
   how to `create new native source files <#create-sources>`__.

   Similar to how ``build.gradle`` files instruct Gradle how to build your app,
   CMake and ``ndk-build`` require a build script to know how to build your
   native library. For new projects, Android Studio creates a CMake build
   script,\ ``CMakeLists.txt``, and places it in your module’s root directory.
   To learn more about the contents of this build script, read `Configure CMake <#/studio/projects/configure-cmake>`__.

   .. rubric:: Build and run the sample app
      :name: build-run-sample

   When you click **Run** |run then run app from the menu bar|, Android Studio
   builds and launches an app that displays the text "Hello from C++" on your
   Android device or emulator. The following overview describes the events that
   occur to build and run the sample app:

   #. Gradle calls on your external build script, ``CMakeLists.txt``.
   #. CMake follows commands in the build script to compile a C++ source file,
      ``native-lib.cpp``, into a shared object library and names it
      ``libnative-lib.so``. Gradle then packages it into the app.
   #. During runtime, the app's ``MainActivity`` loads the native library using
      `System.loadLibrary() <#/reference/java/lang/System#loadLibrary(java.lang.String)>`__.
      The library’s native function, ``stringFromJNI()``, is now available to
      the app.
   #. ``MainActivity.onCreate()`` calls ``stringFromJNI()``, which returns
      ``"Hello from C++"`` and uses it to update the
      `TextView <#/reference/android/widget/TextView>`__.

   To verify that Gradle packages the native library in the app, use the `APK Analyzer <#/studio/debug/apk-analyzer>`__:

   #. Select **Build > Build Bundles(s) / APK(s) > Build APK(s)**.

   #. Select **Build > Analyze APK**.

   #. Select the APK or AAB from the ``app/build/outputs/`` directory and click
      **OK**.

   #. As shown in figure 2, you can see ``libnative-lib.so`` in the APK Analyzer
      window under ``lib/<ABI>/``. |image-cpplib-apk-analyzer_2-2_2x|

      **Figure 2.** Locate a native library using the APK Analyzer.

   **Tip:** If you want to experiment with other Android apps that use native
   code, click **File > New > Import Sample** and select a sample project from
   the **Ndk** list.

   .. rubric:: Create new C/C++ source files
      :name: create-sources

   To add new C/C++ source files to an existing project, proceed as follows:

   #. If you don't already have a ``cpp/`` directory in the main source set of
      your app, create one as follows:

      a. Open the **Project** pane in the left side of the IDE and select the
         **Project** view from the menu.
      b. Navigate to **``your-module`` > src**.
      c. Right-click on the **main** directory and select **New > Directory**.
      d. Enter ``cpp`` as the directory name and click **OK**.

   #. Right-click the ``cpp/`` directory and select **New > C/C++ Source File**.
   #. Enter a name for your source file, such as ``native-lib``.
   #. From the **Type** menu, select the file extension for your source file,
      such as ``.cpp``.

      -  Click **Edit File Types** |image-dialog-wrench| to add other file types to the menu,
         such as ``.cxx`` or ``.hxx``. In the **New File Extensions** dialog box
         that pops up, select another file extension from the **Source
         Extension** and **Header Extension** menus and click **OK**.

   #. To create a header file, select the **Create an associated header**
      checkbox.
   #. Click **OK**.

   After you add new C/C++ files to you project, you still need to `configure CMake <#/studio/projects/configure-cmake>`__ to include the files in your
   native library.

   .. rubric:: Additional resources
      :name: additional_resources

   To learn more about supporting C/C++ code in your app, try the following
   resource.

   .. rubric:: Codelabs
      :name: codelabs

   -  `Create Hello-CMake with Android Studio <https://developers.google.cn/codelabs/codelabs/android-studio-cmake/>`__
      This codelab shows you how to use the Android Studio CMake template to
      start Android NDK project development.

Last updated 2024-05-03 UTC.

.. |run then run app from the menu bar| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-run.png
   :class: inline-icon
.. |image-cpp-project-view_2-2_2x| image:: https://developer.android.google.cn/static/studio/images/projects/cpp-project-view_2-2_2x.png
   :width: 286px
.. |image-cpplib-apk-analyzer_2-2_2x| image:: https://developer.android.google.cn/static/studio/images/projects/cpplib-apk-analyzer_2-2_2x.png
   :width: 583px
.. |image-dialog-wrench| image:: https://developer.android.google.cn/static/studio/images/buttons/dialog-wrench.png
   :class: inline-icon

/Install NDK and CMake
======================

.. https://developer.android.google.cn/studio/projects/install-ndk?hl=en

.. container:: devsite-article-body clearfix

   To compile and debug native code for your app, you need the following
   components:

   -  The Android Native Development Kit (NDK): a set of tools that allows you
      to use C and C++ code with Android.
   -  CMake: an external build tool that works alongside Gradle to build your
      native library. You do not need this component if you only plan to use
      ndk-build.
   -  LLDB: the debugger Android Studio uses to debug native code. By default,
      LLDB will be installed alongside Android Studio.

   This page describes how to install these components automatically, or by
   using Android Studio or the ``sdkmanager`` tool to download and install them
   manually.

   .. rubric:: Install NDK and CMake automatically
      :name: install_ndk_and_cmake_automatically

   Android Gradle Plugin 4.2.0+ can automatically install the required NDK and
   CMake the first time you build your project if their licenses have been
   accepted in advance. If you've already read and agree to the license terms,
   then you can pre-accept the licenses in scripts with the following command:

   .. code:: devsite-click-to-copy

         yes | ${sdk}/cmdline-tools/latest/bin/sdkmanager --licenses

   .. rubric:: Install the NDK and CMake
      :name: default-version

   When you install the NDK, Android Studio selects the latest available NDK.
   For most projects, installing this default version of the NDK is sufficient.
   If your project needs one or more specific versions of the NDK, though, you
   can `download and configure specific versions <#specific-version>`__. Doing
   so helps you ensure reproducible builds across projects that each depend on a
   specific version of the NDK. Android Studio installs all versions of the NDK
   in the ``android-sdk``\ ``/ndk/`` directory.

   To install CMake and the default NDK in Android Studio, do the following:

   #. With a project open, click **Tools > SDK Manager**.

   #. Click the **SDK Tools** tab.

   #. Select the **NDK (Side by side)** and **CMake** checkboxes.

      |Image of SDK Manager| **Figure 1.** The **SDK Tools** window showing the
      **NDK (Side by side)** option

      **Note:**\  If you have an NDK installed in the ``ndk-bundle`` folder, it
      appears in the list with the label **NDK**. If you are using Android
      Gradle plugin 3.5.0 or later, you can select this checkbox or clear it.
      Clearing the checkbox uninstalls the NDK, freeing up disk space, and
      causes the checkbox to disappear from the list. If you uninstall the
      legacy NDK, remove the ``ndk.dir`` value, which is now deprecated, from
      your projects' ``local.properties`` files.

   #. Click **OK**.

      A dialog box tells you how much space the NDK package consumes on disk.

   #. Click **OK**.

   #. When the installation is complete, click **Finish**.

   #. Your project automatically syncs the build file and performs a build.
      Resolve any errors that occur.

   .. rubric:: Configure a specific version of CMake
      :name: vanilla_cmake

   The SDK Manager includes the 3.6.0 forked version of CMake and version
   3.10.2. Projects that don't set a specific CMake version are built with CMake
   3.10.2. To set the CMake version, add the following to your module's
   ``build.gradle`` file:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Groovy
               :name: groovy

            .. code:: prettyprint

               android {
                   ...
                   externalNativeBuild {
                       cmake {
                           ...
                           version "cmake-version"
                       }
                   }
               }

         .. container:: section

            .. rubric:: Kotlin
               :name: kts

            .. code:: prettyprint

               android {
                   ...
                   externalNativeBuild {
                       cmake {
                           ...
                           version = "cmake-version"
                       }
                   }
               }

   If you want to use a CMake version that is not included by the SDK Manager,
   follow these steps:

   #. Download and install `CMake <https://cmake.org/download/>`__ from the
      official CMake website.

   #. Specify the CMake version you want Gradle to use in your module's
      ``build.gradle`` file.

   #. Either add the path to the CMake installation to your ``PATH`` environment
      variable or include it in your project's ``local.properties`` file, as
      shown. If Gradle is unable to find the version of CMake you specified in
      your ``build.gradle`` file, you get a build error.

      .. code:: devsite-click-to-copy

         # If you set this property, Gradle no longer uses PATH to find CMake.
         cmake.dir = "path-to-cmake"<#/pre>

   #. If you don't already have the Ninja build system installed on your
      workstation, go to the `official Ninja website <https://ninja-build.org/>`__, and download and install the latest
      version of Ninja available for your OS. Make sure to also add the path to
      the Ninja installation to your ``PATH`` environment variable.

   .. rubric:: Install a specific version of the NDK
      :name: specific-version

   To install a specific version of the NDK, do the following:

   #. With a project open, click **Tools > SDK Manager**.

   #. Click the **SDK Tools** tab.

   #. Select the **Show Package Details** checkbox.

   #. Select the **NDK (Side by side)** checkbox and the checkboxes below it
      that correspond to the NDK versions you want to install. Android Studio
      installs all versions of the NDK in the ``android-sdk``\ ``/ndk/``
      directory.

      **Note:**\  Preview releases (for example, canary and beta) of the NDK do
      not show up in this list unless you `change the update channel <#/studio/preview/install-preview#change_your_update_channel>`__
      for Android Studio. You can `install an Android Studio preview <#/studio/preview/install-preview>`__ side-by-side with the stable
      version.

      |Image of SDK Tools window| **Figure 2.** The **SDK Tools** window showing
      the **NDK (Side by side)** options

      **Note:**\  If you have an NDK installed in the ``ndk-bundle`` folder, it
      appears in the list with the label **NDK**. If you are using Gradle
      version 3.5 or later, you can select this checkbox or clear it. Clearing
      it uninstalls the NDK installed, freeing up disk space, and cause the
      checkbox to disappear from the list. If you uninstall the legacy NDK,
      remove the ``ndk.dir`` value, which is now deprecated, from your projects'
      ``local.properties`` files.

   #. Click **OK**.

      A dialog box tells you how much space the NDK package(s) consumes.

   #. Click **OK**.

   #. When the installation is complete, click **Finish**.

   #. Your project automatically syncs the build file and performs a build.
      Resolve any errors that occur.

   #. `Configure each module <#apply-specific-version>`__ with the version of
      the NDK you want it to use. When using Android Studio 3.6 or higher, if
      you do not specify the version, the Android Gradle plugin chooses a
      version that it is known to be compatible with.

   .. rubric:: Configure specific versions of the NDK in your project
      :name: apply-specific-version

   You may need to configure the version of the NDK in your project if one of
   the following is true:

   -  Your project is inherited and you need to use specific versions of the NDK
      and the Android Gradle plugin (AGP). For more information, see `Configure the NDK for the Android Gradle plugin <#/studio/projects/configure-agp-ndk>`__.

   -  You have multiple versions of the NDK installed and you want to use a
      specific one. In this case, specify the version using the
      ``android.ndkVersion`` property in the module's ``build.gradle`` file, as
      shown in the following code sample.

      .. container::

         .. container:: ds-selector-tabs

            .. container:: section

               .. rubric:: Groovy
                  :name: groovy

               .. code:: prettyprint

                  android {
                      ndkVersion "major.minor.build" // e.g.,  ndkVersion "21.3.6528147"
                  }

            .. container:: section

               .. rubric:: Kotlin
                  :name: kts

               .. code:: prettyprint

                  android {
                      ndkVersion = "major.minor.build" // e.g.,  ndkVersion "21.3.6528147"
                  }

   .. rubric:: Default NDK version per AGP version
      :name: default-ndk-per-agp

   Before release, each AGP version is thoroughly tested with the latest stable
   NDK release at that time. This NDK version is used to build your projects if
   you don't specify an NDK version in the ``build.gradle`` file. The default
   NDK version for different versions of AGP are documented in the `AGP release notes <#/studio/releases/gradle-plugin#compatibility>`__ and `AGP past release notes <#/studio/releases/past-releases>`__.

Last updated 2024-05-03 UTC.

.. |Image of SDK Manager| image:: https://developer.android.google.cn/static/studio/images/projects/install-NDK.png
.. |Image of SDK Tools window| image:: https://developer.android.google.cn/static/studio/images/projects/install-NDK-sxs.png

/Configure the NDK for AGP
==========================

.. https://developer.android.google.cn/studio/projects/configure-agp-ndk?hl=en

.. container:: devsite-article-body clearfix

   This page shows you how to configure the NDK in your project according to the
   version of the Android Gradle Plugin (AGP) used by the project.

   **Note:**\  If possible, you should try to update the version of AGP in your
   project to version 4.1 or later. These AGP versions will auto-download the
   NDK for you in Android Studio.
   The steps vary according to the version of AGP used in the project. Find the
   Android Gradle Plugin version in either of the following locations:

   -  **File > Project Structure > Project** menu in Android Studio
   -  The top-level ``build.gradle`` file in the project

   Select the version below:

   .. container::

      AGP 4.1+
      AGP 4.0
      AGP 3.6
      AGP 3.5
      AGP 3.4

   .. rubric:: AGP version 4.1+
      :name: agp_version_41

   You have the following options to configure the NDK:

   -  (Recommended) Use the
      `ndkVersion <#/studio/projects/install-ndk#apply-specific-version>`__
      property to set the NDK version.

   -  Do not set any property. Android Studio will automatically download the
      `default version of the NDK for that specific AGP version <#/studio/projects/install-ndk#default-ndk-per-agp>`__ (in this
      case, NDK version 21.0.6113669) or you can `install the NDK from the command line <#command-line>`__. Android Studio installs all versions of
      the NDK in the ``android-sdk``\ ``/ndk/`` directory. Each version is
      located in a subdirectory with the version number as its name.

   -  For special use cases, use the ``ndkPath`` property:

      .. container::

         .. container:: ds-selector-tabs

            .. container:: section

               .. rubric:: Groovy
                  :name: groovy

               .. code:: prettyprint

                  android {
                    ndkPath "/Users/ndkPath/ndk21"  // Point to your own NDK
                  }

            .. container:: section

               .. rubric:: Kotlin
                  :name: kts

               .. code:: prettyprint

                  android {
                    ndkPath = "/Users/ndkPath/ndk21"  // Point to your own NDK
                  }

      **Note:**\  Remove this property before distributing your source code; it
      should be left outside of your version control system.

   .. rubric:: Install the NDK from the command line
      :name: command-line

   To install the NDK from the command line, do the following:

   #. Use the ``sdkmanager`` tool to view versions of CMake and NDK packages
      that are available. Similar to other SDK components, the NDK is released
      through different channels:

      .. code:: prettyprint

         sdkmanager --list [--channel=channel_id]  // NDK channels: 0 (stable),
                                                     // 1 (beta), or 3 (canary)

   #. Pass the ``sdkmanager`` the strings for the packages that you want to
      install. For example, to install CMake or the NDK, use the following
      syntax:

      .. code:: prettyprint

         sdkmanager --install
                   ["ndk;major.minor.build[suffix]" | "cmake;major.minor.micro.build"]
                   [--channel=channel_id]

      Use the ``--channel`` option to only install a package if it has been
      released in a channel *up to and including*

      channel_id.

   For more information, see `sdkmanager <#/studio/command-line/sdkmanager>`__.

Last updated 2023-04-12 UTC.

/Configure CMake
================

.. https://developer.android.google.cn/studio/projects/configure-cmake?hl=en

.. container:: devsite-article-body clearfix

   A CMake build script is a plain text file that you must name
   ``CMakeLists.txt`` and includes commands CMake uses to build your C/C++
   libraries. If your native sources don't already have a CMake build script,
   you need to create one yourself and include the appropriate CMake commands.
   To learn how to install CMake, see `Install and configure the NDK and CMake <#/studio/projects/install-ndk>`__.

   This section covers some basic commands you should include in your build
   script in order to tell CMake which sources to use when creating your native
   library. To learn more, read the official documentation about `CMake commands <https://cmake.org/cmake/help/latest/manual/cmake-commands.7.html>`__.

   After you configure a new CMake build script, you need to `configure Gradle <#/studio/projects/gradle-external-native-builds>`__ to include your
   CMake project as a build dependency, so that Gradle builds and packages your
   native library with your app's APK.

   **Note:** If your project uses ndk-build, you don’t need to create a CMake
   build script. You can simply `configure Gradle <#/studio/projects/gradle-external-native-builds>`__ to include your
   existing native library project by providing a path to your
   `Android.mk <#/ndk/guides/android_mk>`__ file.

   .. rubric:: Create a CMake build script
      :name: create_script

   To create a plain text file that you can use as your CMake build script,
   proceed as follows:

   #. Open the **Project** pane from the left side of the IDE and select the
      **Project** view from the drop-down menu.

   #. Right-click on the root directory of **``your-module``** and select **New
      > File**.

      **Note:** You can create the build script in any location you want.
      However, when configuring the build script, paths to your native source
      files and libraries are relative to the location of the build script.

   #. Enter "CMakeLists.txt" as the filename and click **OK**.

   You can now configure your build script by adding CMake commands. To instruct
   CMake to create a native library from native source code, add the
   `cmake_minimum_required() <https://cmake.org/cmake/help/latest/command/cmake_minimum_required.html>`__
   and
   `add_library() <https://cmake.org/cmake/help/latest/command/add_library.html>`__
   commands to your build script:

   .. code:: none

      # Sets the minimum version of CMake required to build your native library.
      # This ensures that a certain set of CMake features is available to
      # your build.

      cmake_minimum_required(VERSION 3.4.1)

      # Specifies a library name, specifies whether the library is STATIC or
      # SHARED, and provides relative paths to the source code. You can
      # define multiple libraries by adding multiple add_library() commands,
      # and CMake builds them for you. When you build your app, Gradle
      # automatically packages shared libraries with your APK.

      add_library( # Specifies the name of the library.
                   native-lib

                   # Sets the library as a shared library.
                   SHARED

                   # Provides a relative path to your source file(s).
                   src/main/cpp/native-lib.cpp )

   **Tip:** Similar to how you can tell CMake to create a native library from
   source files, you can use the
   `add_executable() <https://cmake.org/cmake/help/latest/command/add_executable.html>`__
   command to tell CMake to instead create an executable from those source
   files. However, building executables from your native sources is optional,
   and building native libraries to package into your APK satisfies most project
   requirements.

   When you add a source file or library to your CMake build script using
   ``add_library()``, Android Studio also shows associated header files in the
   **Project** view after you sync your project. However, in order for CMake to
   locate your header files during compile time, you need to add the
   `include_directories() <https://cmake.org/cmake/help/latest/command/include_directories.html>`__
   command to your CMake build script and specify the path to your headers:

   .. code:: none

      add_library(...)

      # Specifies a path to native header files.
      include_directories(src/main/cpp/include/)

   The convention CMake uses to name the file of your library is as follows:

      ``lib``\ ``library-name``\ ``.so``

   For example, if you specify "native-lib" as the name of your shared library
   in the build script, CMake creates a file named ``libnative-lib.so``.
   However, when loading this library in your Java or Kotlin code, use the name
   you specified in the CMake build script:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               companion object {
                   init {
                       System.loadLibrary("native-lib");
                   }
               }

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               static {
                   System.loadLibrary("native-lib");
               }

   **Note:** If you rename or remove a library in your CMake build script, you
   need to clean your project before Gradle applies the changes or removes the
   older version of the library from your APK. To clean your project, select
   **Build > Clean Project** from the menu bar.

   Android Studio automatically adds the source files and headers to the **cpp**
   group in the **Project** pane. By using multiple ``add_library()`` commands,
   you can define additional libraries for CMake to build from other source
   files.

   .. rubric:: Add NDK APIs
      :name: add-ndk-api

   The Android NDK provides a set of native APIs and libraries that you may find
   useful. You can use any of these APIs by including `the NDK libraries <#/ndk/guides/stable_apis>`__ in your project’s ``CMakeLists.txt``
   script file.

   Prebuilt NDK libraries already exist on the Android platform, so you don’t
   need to build them or package them into your APK. Because the NDK libraries
   are already a part of CMake’s search path, you don’t even need to specify the
   location of the library in your local NDK installation—you only need to
   provide CMake with the name of the library you want to use and link it
   against your own native library.

   Add the
   `find_library() <https://cmake.org/cmake/help/latest/command/find_library.html>`__
   command to your CMake build script to locate an NDK library and store its
   path as a variable. You use this variable to refer to the NDK library in
   other parts of the build script. The following sample locates the
   `Android-specific log support library <#/ndk/guides/stable_apis#a3>`__ and
   stores its path in ``log-lib``:

   .. code:: none

      find_library( # Defines the name of the path variable that stores the
                    # location of the NDK library.
                    log-lib

                    # Specifies the name of the NDK library that
                    # CMake needs to locate.
                    log )

   In order for your native library to call functions in the ``log`` library,
   you need to link the libraries using the
   `target_link_libraries() <https://cmake.org/cmake/help/latest/command/target_link_libraries.html>`__
   command in your CMake build script:

   .. code:: none

      find_library(...)

      # Links your native library against one or more other native libraries.
      target_link_libraries( # Specifies the target library.
                             native-lib

                             # Links the log library to the target library.
                             ${log-lib} )

   The NDK also includes some libraries as source code that you need to build
   and link to your native library. You can compile the source code into a
   native library by using the ``add_library()`` command in your CMake build
   script. To provide a path to your local NDK library, you can use the
   ``ANDROID_NDK`` path variable, which Android Studio automatically defines for
   you.

   The following command tells CMake to build ``android_native_app_glue.c``,
   which manages `NativeActivity <#/reference/android/app/NativeActivity>`__
   lifecycle events and touch input, into a static library and links it to
   ``native-lib``:

   .. code:: none

      add_library( app-glue
                   STATIC
                   ${ANDROID_NDK}/sources/android/native_app_glue/android_native_app_glue.c )

      # You need to link static libraries against your shared native library.
      target_link_libraries( native-lib app-glue ${log-lib} )

   .. rubric:: Add other prebuilt libraries
      :name: add-other-library

   Adding a prebuilt library is similar to specifying another native library for
   CMake to build. However, because the library is already built, you need to
   use the
   `IMPORTED <https://cmake.org/cmake/help/latest/prop_tgt/IMPORTED.html#prop_tgt:IMPORTED>`__
   flag to tell CMake that you only want to import the library into your
   project:

   .. code:: none

      add_library( imported-lib
                   SHARED
                   IMPORTED )

   You then need to specify the path to the library using the
   `set_target_properties() <https://cmake.org/cmake/help/latest/command/set_target_properties.html>`__
   command as shown below.

   Some libraries provide separate packages for specific CPU architectures, or
   `Application Binary Interfaces (ABI) <#/ndk/guides/abis>`__, and organize them
   into separate directories. This approach helps libraries take advantage of
   certain CPU architectures while allowing you to use only the versions of the
   library you want. To add multiple ABI versions of a library to your CMake
   build script, without having to write multiple commands for each version of
   the library, you can use the ``ANDROID_ABI`` path variable. This variable
   uses a list of the default `ABIs that the NDK supports <#/ndk/guides/abis#sa>`__, or a filtered list of ABIs you `manually configure Gradle <#/studio/projects/gradle-external-native-builds#specify-abi>`__ to
   use. For example:

   .. code:: none

      add_library(...)
      set_target_properties( # Specifies the target library.
                             imported-lib

                             # Specifies the parameter you want to define.
                             PROPERTIES IMPORTED_LOCATION

                             # Provides the path to the library you want to import.
                             imported-lib/src/${ANDROID_ABI}/libimported-lib.so )

   For CMake to locate your header files during compile time, you need to use
   the ``include_directories()`` command and include the path to your header
   files:

   .. code:: none

      include_directories( imported-lib/include/ )

   **Note:** If you want to package a prebuilt library that is not a build-time
   dependency—for example, when adding a prebuilt library that is a dependency
   of ``imported-lib``, you do not need perform the following instructions to
   link the library.

   To link the prebuilt library to your own native library, add it to the
   ``target_link_libraries()`` command in your CMake build script:

   .. code:: none

      target_link_libraries( native-lib imported-lib app-glue ${log-lib} )

   To package the prebuilt library into your APK, you need to `manually configure Gradle <#/studio/projects/gradle-external-native-builds#configure-gradle>`__
   with the ``sourceSets`` block to include the path to your ``.so`` file. After
   building your APK, you can verify which libraries Gradle packages into your
   APK by using the `APK Analyzer <#/studio/debug/apk-analyzer>`__.

   .. rubric:: Include other CMake projects
      :name: include-other-cmake-projects

   If you want to build multiple CMake projects and include their outputs in
   your Android project, you can use one ``CMakeLists.txt`` file as the
   top-level CMake build script (which is the one you `link to Gradle <#/studio/projects/gradle-external-native-builds>`__) and add
   additional CMake projects as dependencies of that build script. The following
   top-level CMake build script uses the
   `add_subdirectory() <https://cmake.org/cmake/help/latest/command/add_subdirectory.html>`__
   command to specify another ``CMakeLists.txt`` file as a build dependency and
   then links against its output just as it would with any other prebuilt
   library.

   .. code:: none

      # Sets lib_src_DIR to the path of the target CMake project.
      set( lib_src_DIR ../gmath )

      # Sets lib_build_DIR to the path of the desired output directory.
      set( lib_build_DIR ../gmath/outputs )
      file(MAKE_DIRECTORY ${lib_build_DIR})

      # Adds the CMakeLists.txt file located in the specified directory
      # as a build dependency.
      add_subdirectory( # Specifies the directory of the CMakeLists.txt file.
                        ${lib_src_DIR}

                        # Specifies the directory for the build outputs.
                        ${lib_build_DIR} )

      # Adds the output of the additional CMake build as a prebuilt static
      # library and names it lib_gmath.
      add_library( lib_gmath STATIC IMPORTED )
      set_target_properties( lib_gmath PROPERTIES IMPORTED_LOCATION
                             ${lib_build_DIR}/${ANDROID_ABI}/lib_gmath.a )
      include_directories( ${lib_src_DIR}/include )

      # Links the top-level CMake build output against lib_gmath.
      target_link_libraries( native-lib ... lib_gmath )

   .. rubric:: Call CMake from the command line
      :name: call-cmake-cli

   Use the following command to call CMake to generate a Ninja project outside
   of Android Studio:

   .. code:: devsite-click-to-copy

      cmake
      -Hpath/to/cmakelists/folder
      -Bpath/to/generated/ninja/project/debug/ABI
      -DANDROID_ABI=ABI                               // For example, arm64-v8a
      -DANDROID_PLATFORM=platform-version-string      // For example, android-16
      -DANDROID_NDK=android-sdk/ndk/ndk-version
      -DCMAKE_TOOLCHAIN_FILE=android-sdk/ndk/ndk-version/build/cmake/android.toolchain.cmake
      -G Ninja

   This command will generate the Ninja project that can be executed to create
   Android executable libraries (``.so`` files). The ``CMAKE_TOOLCHAIN_FILE`` is
   required to use NDK's CMake support. For CMake 3.21 or later, CMake's
   built-in NDK support can be used instead, but a different group of variables
   must be used as described in CMake's `Cross Compiling for Android <https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling-for-android>`__
   documentation.

   **Warning:**\  Prior to CMake 3.20 using the built-in CMake support would
   result in very different build behavior, and while CMake 3.20 unified the
   implementation of the two interfaces, the bugs were not worked out until
   3.21.
   **Note:**\  Use the following optional parameter if CMake is unable to locate
   the Ninja executable:
   ``-DCMAKE_MAKE_PROGRAM=``\ ``path/to/``\ ``ninja/ninja.exe``.

Last updated 2024-01-03 UTC.

/Link Gradle
============

.. https://developer.android.google.cn/studio/projects/gradle-external-native-builds?hl=en

.. container:: devsite-article-body clearfix

   To include your native library project as a Gradle build dependency, you need
   to provide Gradle with the path to your CMake or ndk-build script file. When
   you build your app, Gradle runs CMake or ndk-build, and packages shared
   libraries with your app. Gradle also uses the build script to know which
   files to pull into your Android Studio project, so you can access them from
   the **Project** window. If you don’t have a build script for your native
   sources, you need to `create a CMake build script <#/studio/projects/configure-cmake>`__ before you proceed.

   Each module in your Android project can link to only one CMake or ndk-build
   script file. So, for example, if you want to build and package outputs from
   multiple CMake projects, you need to use one ``CMakeLists.txt`` file as your
   top-level CMake build script (which you then link Gradle to) and `add other CMake projects <#/studio/projects/configure-cmake#include-other-cmake-projects>`__
   as dependencies of that build script. Similarly, if you're using ndk-build,
   you can `include other Makefiles <https://www.gnu.org/software/make/manual/html_node/Include.html>`__
   in your top-level `Android.mk <#/ndk/guides/android_mk>`__ script file.

   Once you link Gradle to a native project, Android Studio updates the
   **Project** pane to show your source files and native libraries in the
   **cpp** group, and your external build scripts in the **External Build
   Files** group.

   **Note:** When making changes to the Gradle configuration, make sure to apply
   your changes by clicking **Sync Project** |image-toolbar-sync-gradle| in the toolbar.
   Additionally, when making changes to your CMake or ndk-build script file
   after you have already linked it to Gradle, you should sync Android Studio
   with your changes by selecting **Build > Refresh Linked C++ Projects** from
   the menu bar.

   .. rubric:: Use the Android Studio UI
      :name: link-with-ui

   You can link Gradle to an external CMake or ndk-build project using the
   Android Studio UI:

   #. Open the **Project** pane from the left side of the IDE and select the
      **Android** view.

   #. Right-click on the module you would like to link to your native library,
      such as the **app** module, and select **Link C++ Project with Gradle**
      from the menu. You should see a dialog similar to the one shown in figure
      4.

   #. From the drop-down menu, select either **CMake** or **ndk-build**.

      a. If you select **CMake**, use the field next to **Project Path** to
         specify the ``CMakeLists.txt`` script file for your external CMake
         project.
      b. If you select **ndk-build**, use the field next to **Project Path** to
         specify the `Android.mk <#/ndk/guides/android_mk>`__ script file for
         your external ndk-build project. Android Studio also includes the
         `Application.mk <#/ndk/guides/application_mk>`__ file if it is
         located in the same directory as your ``Android.mk`` file.

      |image-link-cpp-project_2-2_2x|

      **Figure 4.** Linking an external C++ project using the Android Studio
      dialog.

   #. Click **OK**.

   .. rubric:: Manually configure Gradle
      :name: configure-gradle

   To manually configure Gradle to link to your native library, you need to add
   the
   `externalNativeBuild <https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.ExternalNativeBuild.html>`__
   block to your module-level ``build.gradle`` file and configure it with either
   the
   `cmake <https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.CmakeOptions.html>`__
   or
   `ndkBuild <https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.NdkBuildOptions.html>`__
   block:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Groovy
               :name: groovy

            .. code:: prettyprint

               android {
                 ...
                 defaultConfig {...}
                 buildTypes {...}

                 // Encapsulates your external native build configurations.
                 externalNativeBuild {

                   // Encapsulates your CMake build configurations.
                   cmake {

                     // Provides a relative path to your CMake build script.
                     path "CMakeLists.txt"
                   }
                 }
               }

         .. container:: section

            .. rubric:: Kotlin
               :name: kts

            .. code:: prettyprint

               android {
                 ...
                 defaultConfig {...}
                 buildTypes {...}

                 // Encapsulates your external native build configurations.
                 externalNativeBuild {

                   // Encapsulates your CMake build configurations.
                   cmake {

                     // Provides a relative path to your CMake build script.
                     path = file("CMakeLists.txt")
                   }
                 }
               }

   **Note:** If you want to link Gradle to an existing ndk-build project, use
   the
   `ndkBuild <https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.NdkBuildOptions.html>`__
   block instead of the
   `cmake <https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.CmakeOptions.html>`__
   block, and provide a relative path to your
   `Android.mk <#/ndk/guides/android_mk>`__ file. Gradle also includes the
   `Application.mk <#/ndk/guides/application_mk>`__ file if it is located in
   the same directory as your `Android.mk <#/ndk/guides/android_mk>`__ file.

   .. rubric:: Specify optional configurations
      :name: pass-args-flags

   You can specify optional arguments and flags for CMake or ndk-build by
   configuring another
   `externalNativeBuild <https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.ExternalNativeBuildOptions.html>`__
   block within the ``defaultConfig`` block of your module-level
   ``build.gradle`` file. Similar to other properties in the ``defaultConfig``
   block, you can override these properties for each product flavor in your
   build configuration.

   For example, if your CMake or ndk-build project defines multiple native
   libraries and executables, you can use the
   `targets <https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.ExternalNativeCmakeOptions.html#com.android.build.gradle.internal.dsl.ExternalNativeCmakeOptions:targets>`__
   property to build and package only a subset of those artifacts for a given
   product flavor. The following code sample describes some of the properties
   you can configure:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Groovy
               :name: groovy

            .. code:: prettyprint

               android {
                 ...
                 defaultConfig {
                   ...
                   // This block is different from the one you use to link Gradle
                   // to your CMake or ndk-build script.
                   externalNativeBuild {

                     // For ndk-build, instead use the ndkBuild block.
                     cmake {

                       // Passes optional arguments to CMake.
                       arguments "-DANDROID_ARM_NEON=TRUE", "-DANDROID_TOOLCHAIN=clang"

                       // Sets a flag to enable format macro constants for the C compiler.
                       cFlags "-D__STDC_FORMAT_MACROS"

                       // Sets optional flags for the C++ compiler.
                       cppFlags "-fexceptions", "-frtti"
                     }
                   }
                 }

                 buildTypes {...}

                 productFlavors {
                   ...
                   demo {
                     ...
                     externalNativeBuild {
                       cmake {
                         ...
                         // Specifies which native libraries or executables to build and package
                         // for this product flavor. The following tells Gradle to build only the
                         // "native-lib-demo" and "my-executible-demo" outputs from the linked
                         // CMake project. If you don't configure this property, Gradle builds all
                         // executables and shared object libraries that you define in your CMake
                         // (or ndk-build) project. However, by default, Gradle packages only the
                         // shared libraries in your app.
                         targets "native-lib-demo",
                                 // You need to specify this executable and its sources in your CMakeLists.txt
                                 // using the add_executable() command. However, building executables from your
                                 // native sources is optional, and building native libraries to package into
                                 // your app satisfies most project requirements.
                                 "my-executible-demo"
                       }
                     }
                   }

                   paid {
                     ...
                     externalNativeBuild {
                       cmake {
                         ...
                         targets "native-lib-paid",
                                 "my-executible-paid"
                       }
                     }
                   }
                 }

                 // Use this block to link Gradle to your CMake or ndk-build script.
                 externalNativeBuild {
                   cmake {...}
                   // or ndkBuild {...}
                 }
               }

         .. container:: section

            .. rubric:: Kotlin
               :name: kts

            .. code:: prettyprint

               android {
                 ...
                 defaultConfig {
                   ...
                   // This block is different from the one you use to link Gradle
                   // to your CMake or ndk-build script.
                   externalNativeBuild {

                     // For ndk-build, instead use the ndkBuild block.
                     cmake {

                       // Passes optional arguments to CMake.
                       arguments += listOf("-DANDROID_ARM_NEON=TRUE", "-DANDROID_TOOLCHAIN=clang")

                       // Sets a flag to enable format macro constants for the C compiler.
                       cFlags += listOf("-D__STDC_FORMAT_MACROS")

                       // Sets optional flags for the C++ compiler.
                       cppFlags += listOf("-fexceptions", "-frtti")
                     }
                   }
                 }

                 buildTypes {...}

                 productFlavors {
                   ...
                   create("demo") {
                     ...
                     externalNativeBuild {
                       cmake {
                         ...
                         // Specifies which native libraries or executables to build and package
                         // for this product flavor. The following tells Gradle to build only the
                         // "native-lib-demo" and "my-executible-demo" outputs from the linked
                         // CMake project. If you don't configure this property, Gradle builds all
                         // executables and shared object libraries that you define in your CMake
                         // (or ndk-build) project. However, by default, Gradle packages only the
                         // shared libraries in your app.
                         targets += listOf("native-lib-demo",
                                 // You need to specify this executable and its sources in your CMakeLists.txt
                                 // using the add_executable() command. However, building executables from your
                                 // native sources is optional, and building native libraries to package into
                                 // your app satisfies most project requirements.
                                 "my-executible-demo")
                       }
                     }
                   }

                   create("paid") {
                     ...
                     externalNativeBuild {
                       cmake {
                         ...
                         targets += listOf("native-lib-paid",
                                 "my-executible-paid")
                       }
                     }
                   }
                 }

                 // Use this block to link Gradle to your CMake or ndk-build script.
                 externalNativeBuild {
                   cmake {...}
                   // or ndkBuild {...}
                 }
               }

   To learn more about configuring product flavors and build variants, go to
   `Configure Build Variants <#/studio/build/build-variants>`__. For a list of
   variables you can configure for CMake with the ``arguments`` property, see
   `Using CMake Variables <#/ndk/guides/cmake#variables>`__.

   .. rubric:: Include prebuilt native libraries
      :name: jniLibs

   If you want Gradle to package prebuilt native libraries that are not used in
   any external native build, add them to the ``src/main/jniLibs/``\ ``ABI``
   directory of your module.

   Versions of the Android Gradle Plugin prior to 4.0 required including CMake
   ``IMPORTED`` targets in your ``jniLibs`` directory for them to be included in
   your app. If you're migrating from an earlier version of the plugin, you may
   encounter an error like the following:

   .. code:: devsite-click-to-copy

      * What went wrong:
      Execution failed for task ':app:mergeDebugNativeLibs'.
      > A failure occurred while executing com.android.build.gradle.internal.tasks.Workers$ActionFacade
         > More than one file was found with OS independent path 'lib/x86/libprebuilt.so'

   If you are using Android Gradle Plugin 4.0, move any libraries that are used
   by ``IMPORTED`` CMake targets out of your ``jniLibs`` directory to avoid this
   error.

   .. rubric:: Specify ABIs
      :name: specify-abi

   By default, Gradle builds your native library into separate ``.so`` files for
   the `Application Binary Interfaces (ABIs) the NDK supports <#/ndk/guides/abis#sa>`__ and packages them all into your app. If you
   want Gradle to build and package only certain ABI configurations of your
   native libraries, you can specify them with the
   `ndk.abiFilters <https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.NdkOptions.html>`__
   flag in your module-level ``build.gradle`` file, as shown below:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Groovy
               :name: groovy

            .. code:: prettyprint

               android {
                 ...
                 defaultConfig {
                   ...
                   externalNativeBuild {
                     cmake {...}
                     // or ndkBuild {...}
                   }

                   // Similar to other properties in the defaultConfig block,
                   // you can configure the ndk block for each product flavor
                   // in your build configuration.
                   ndk {
                     // Specifies the ABI configurations of your native
                     // libraries Gradle should build and package with your app.
                     abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a',
                                  'arm64-v8a'
                   }
                 }
                 buildTypes {...}
                 externalNativeBuild {...}
               }

         .. container:: section

            .. rubric:: Kotlin
               :name: kts

            .. code:: prettyprint

               android {
                 ...
                 defaultConfig {
                   ...
                   externalNativeBuild {
                     cmake {...}
                     // or ndkBuild {...}
                   }

                   // Similar to other properties in the defaultConfig block,
                   // you can configure the ndk block for each product flavor
                   // in your build configuration.
                   ndk {
                     // Specifies the ABI configurations of your native
                     // libraries Gradle should build and package with your app.
                     abiFilters += listOf("x86", "x86_64", "armeabi", "armeabi-v7a",
                                  "arm64-v8a")
                   }
                 }
                 buildTypes {...}
                 externalNativeBuild {...}
               }

   In most cases, you only need to specify ``abiFilters`` in the ``ndk`` block,
   as shown above, because it tells Gradle to both build and package those
   versions of your native libraries. However, if you want to control what
   Gradle should build, independently of what you want it to package into your
   app, configure another ``abiFilters`` flag in the
   `defaultConfig.externalNativeBuild.cmake <https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.ExternalNativeCmakeOptions.html#com.android.build.gradle.internal.dsl.ExternalNativeCmakeOptions:abiFilters>`__
   block (or
   `defaultConfig.externalNativeBuild.ndkBuild <https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.ExternalNativeNdkBuildOptions.html#com.android.build.gradle.internal.dsl.ExternalNativeNdkBuildOptions:abiFilters>`__
   block). Gradle builds those ABI configurations but only packages the ones you
   specify in the
   `defaultConfig.ndk <https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.NdkOptions.html>`__
   block.

   It is recommended to publish using Android App Bundles to further reduce the
   size of your app, as only native libraries matching the ABI of a user's
   device will be delivered with the download.

   For legacy apps publishing using APKs (created before August 2021), consider
   `configuring multiple APKs based on ABI <#/studio/build/configure-apk-splits#configure-abi-split>`__—instead of
   creating one large APK with the all versions of your native libraries, Gradle
   creates a separate APK for each ABI you want to support and only packages the
   files each ABI needs. If you configure multiple APKs per ABI without
   specifying the ``abiFilters`` flag as shown in the code sample above, Gradle
   builds all supported ABI versions of your native libraries, but only packages
   those you specify in your multiple APK configuration. To avoid building
   versions of your native libraries that you don't want, provide the same list
   of ABIs for both the ``abiFilters`` flag and your per-ABI multiple APK
   configuration.

Last updated 2023-04-12 UTC.

.. |image-toolbar-sync-gradle| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-sync-gradle.png
   :class: inline-icon
.. |image-link-cpp-project_2-2_2x| image:: https://developer.android.google.cn/static/studio/images/projects/link-cpp-project_2-2_2x.png
   :width: 486px

/Create an Android library
==========================

.. https://developer.android.google.cn/studio/projects/android-library?hl=en

.. container:: devsite-article-body clearfix

   An Android library is structurally the same as an Android app module. It
   includes everything needed to build an app, including source code, resource
   files, and an Android manifest.

   However, instead of compiling into an APK that runs on a device, an Android
   library compiles into an Android Archive (AAR) file that you can use as a
   dependency for an Android app module. Unlike JAR files, AAR files offer the
   following functionality for Android apps:

   -  AAR files can contain Android resources and a manifest file, which lets
      you bundle in shared resources like layouts and drawables in addition to
      Kotlin or Java classes and methods.
   -  AAR files can contain `C/C++ libraries <#/studio/build/dependencies#using-native-dependencies>`__ 
      for use by the app module's C/C++ code.

   A library module is useful in the following situations:

   -  When building multiple apps that use some of the same components, such as
      activities, services, or UI layouts
   -  When building an app that exists in multiple APK variations, such as a
      free and paid version, that share core components

   In either case, move the files you want to reuse into a library module and
   then add the library as a dependency for each app module.

   This page explains how to create and use an Android library module. For
   guidance on how to publish a library, see `Publish your library <#/build/publish-library>`__

   .. rubric:: Create a library module
      :name: CreateLibrary

   To create a new library module in your project, proceed as follows:

   #. Click **File > New > New Module**.

   #. In the **Create New Module** dialog that appears, click **Android
      Library**, then click **Next**.

      There's also an option to create a Kotlin or Java library, which builds a
      traditional JAR file. While a JAR file is useful for many
      projects—especially when you want to share code with other platforms—it
      doesn't let you include Android resources or manifest files, which is very
      useful for code reuse in Android projects. This guide focuses on creating
      Android libraries.

   #. Give your library a name and select a minimum SDK version for the code in
      the library, then click **Finish**.
      **Important:** Module package names must be globally unique. You can't
      have two modules with the same package name in the same project.

   Once the Gradle project sync completes, the library module appears in the
   **Project** pane. If you don't see the new module folder, make sure the pane
   is displaying the `Android view <#/studio/projects#ProjectFiles>`__.

   .. rubric:: Convert an app module to a library module
      :name: Convert

   If you have an existing app module with code you want to reuse, you can turn
   it into a library module as follows:

   #. Open the module-level ``build.gradle`` file, if you're using Groovy, or
      the ``build.gradle.kts`` file, if you're using Kotlin script.

   #. Delete the line for the ``applicationId``. Only an Android app module can
      define this.

   #. Find the \`plugins\` block at the top of the file that looks like this:

      .. container::

         .. container:: ds-selector-tabs

            .. container:: section

               .. rubric:: Groovy
                  :name: groovy

               .. code:: prettyprint

                    plugins {
                        id 'com.android.application'
                    }
                    

            .. container:: section

               .. rubric:: Kotlin
                  :name: kts

               .. code:: prettyprint

                    plugins {
                        id("com.android.application")
                    }
                    

      Change it to the following:

      .. container::

         .. container:: ds-selector-tabs

            .. container:: section

               .. rubric:: Groovy
                  :name: groovy

               .. code:: prettyprint

                    plugins {
                        id 'com.android.library'
                    }
                    

            .. container:: section

               .. rubric:: Kotlin
                  :name: kts

               .. code:: prettyprint

                    plugins {
                        id("com.android.library")
                    }
                    

   #. Save the file and click **File > Sync Project with Gradle Files**.

   The structure of the module remains the same, but it now operates as an
   Android library. The build creates an AAR file instead of an APK.

   When you want to build the AAR file, select the library module in the
   **Project** window and click **Build > Build APK**.

   .. rubric:: Add dependencies with the Project Structure dialog
      :name: psd-add-dependencies

   You can use the **Project Structure** dialog to add dependencies to your
   project. The following sections describe how to use the dialog to add
   dependencies.

   .. rubric:: Use your library from within the same project
      :name: psd-add-module-dependency

   To use your new Android library's code in another app or library module
   within the same project, add a project-level dependency:

   #. Navigate to **File > Project Structure > Dependencies**.

   #. Select the module that you want to add the library.

   #. In the **Declared Dependencies** tab, click |image-ic_plus| and select **Module
      Dependency** from the menu.
      |image-psd-add-module-dependency-dropdown|

   #. In the **Add Module Dependency** dialog, select your library module.

      |Add module dependency in the Project Structure Dialog|

   #. Select the configuration that requires this dependency or select
      **implementation** if it applies to all configurations, then click **OK**.

   Android Studio edits your module's ``build.gradle`` or ``build.gradle.kts``
   file to add the dependency, in the following form:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Groovy
               :name: groovy

            .. code:: prettyprint

                 implementation project(path: ":example-library")

         .. container:: section

            .. rubric:: Kotlin
               :name: kts

            .. code:: prettyprint

                 implementation(project(":example-library"))

   .. rubric:: Use your library in other projects
      :name: psd-add-library-dependency

   The recommended way to share dependencies (JARs and AARs) is with a Maven
   repository, either hosted on a service, such as `Maven Central <https://maven.apache.org/repository/index.html>`__, or with a
   directory structure on your local disk. For more information on using Maven
   repositories, see `Remote repositories <#/studio/build/dependencies#remote-repositories>`__.

   When an Android library is published to a Maven repository, metadata is
   included so that the dependencies of the library are included in the
   consuming build. This lets the library be automatically deduplicated if it is
   used in multiple places.

   **Note:**\  If you can't publish your library to a Maven repository, you can
   consume the JAR or AAR file directly using the process described in the `Add your AAR or JAR as a dependency <#psd-add-aar-jar-dependency>`__ section. In
   this case, you must manually manage any transitive dependencies of that AAR.
   To use your Android library's code in another app module in a different
   project, proceed as follows:

   #. Navigate to **File > Project Structure > Dependencies**.

   #. In the **Declared Dependencies** tab, click |image-ic_plus| and select **Library
      Dependency** in the menu.
      |image-psd-add-library-dependency-dropdown|

   #. In the **Add Library Dependency** dialog, use the search box to find the
      library to add. This form searches the repositories specified in the in
      the ``dependencyResolutionManagement { repositories {...}}`` block in the
      ``settings.gradle`` or ``settings.gradle.kts`` file.

      |Add library dependency in the Project Structure Dialog|

   #. Select the configuration that requires this dependency or select
      **implementation** if it applies to all configurations, then click **OK**.

   Check your app’s ``build.gradle`` or ``build.gradle.kts`` file to confirm
   that a declaration similar to the following appears (depending on the build
   configuration you've selected):

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Groovy
               :name: groovy

            .. code:: prettyprint

                 implementation 'com.example:examplelibrary:1.0.0'

         .. container:: section

            .. rubric:: Kotlin
               :name: kts

            .. code:: prettyprint

                 implementation("com.example:examplelibrary:1.0.0")

   .. rubric:: Add your AAR or JAR as a dependency
      :name: psd-add-aar-jar-dependency

   To use your Android library's code in another app module, proceed as follows:

   #. Navigate to **File > Project Structure > Dependencies**.

   #. In the **Declared Dependencies** tab, click |image-ic_plus| and select **Jar
      Dependency** in the menu.
      |image-psd-add-jar-dependency-dropdown|

   #. In the **Add Jar/Aar Dependency** dialog, enter the path to your AAR or
      JAR file, then select the configuration to which the dependency applies.
      If the library should be available to all configurations, select the
      **implementation** configuration.

      |Add AAR dependency in the Project Structure Dialog|

      Check your app’s ``build.gradle`` or ``build.gradle.kts`` file to confirm
      that a declaration similar to the following appears (depending on the
      build configuration you've selected):

      .. container::

         .. container:: ds-selector-tabs

            .. container:: section

               .. rubric:: Groovy
                  :name: groovy

               .. code:: prettyprint

                    implementation files('my_path/my_lib.aar')

            .. container:: section

               .. rubric:: Kotlin
                  :name: kts

               .. code:: prettyprint

                    implementation(files("my_path/my_lib.aar"))

   To import a dependency on the Gradle build running outside of Android Studio,
   add a path to the dependency in your app’s ``build.gradle`` or
   ``build.gradle.kts`` file. For example:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Groovy
               :name: groovy

            .. code:: prettyprint

               dependencies {
                   implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
               }

         .. container:: section

            .. rubric:: Kotlin
               :name: kts

            .. code:: prettyprint

               dependencies {
                   implementation(fileTree(mapOf("dir" to "libs", "include" to listOf("*.jar", "*.aar"))))
               }

   For more about adding Gradle dependencies, see `Add build dependencies <#/studio/build/dependencies>`__.

   **Note:**\  In the previous examples, the ``implementation`` configuration
   adds the library as a build dependency for the entire app module. To learn
   how to configure dependencies only for specific build variants, see
   `Configure build variants <#/studio/build/build-variants>`__.
   .. rubric:: Declare a public resource
      :name: PrivateResources

   Resources include all files in your project’s ``res/`` directory, such as
   images. All resources in a library default to public. To make all resources
   implicitly private, you must define at least one specific attribute as
   public.

   To declare a public resource, add a ``<public>`` declaration to your
   library’s ``public.xml`` file. If you haven't added public resources before,
   you need to create the ``public.xml`` file in the ``res/values/`` directory
   of your library.

   The following example code creates two public string resources with the names
   ``mylib_app_name`` and ``mylib_public_string``:

   .. code:: prettyprint

      <resources>
          <public name="mylib_app_name" type="string"/>
          <public name="mylib_public_string" type="string"/>
      <#/resources>

   To prevent users of your library from accessing resources intended only for
   internal use, use this automatic private designation mechanism by declaring
   one or more public resources. Alternately, you can make all resources private
   by adding an empty ``<public />`` tag. This marks nothing as public and makes
   all resources private.

   Any resources that you want to remain visible to developers using your
   library should be made public.

   Implicitly making attributes private prevents users of your library from
   receiving code completion suggestions from internal library resources and
   lets users rename or remove private resources without breaking clients of
   your library. Private resources are filtered out of code completion, and the
   `lint tool <#/studio/write/lint>`__ warns you when you try to reference a
   private resource.

   When building a library, the Android Gradle plugin gets the public resource
   definitions and extracts them into the ``public.txt`` file, which is then
   packaged inside the AAR file.

   .. rubric:: Development considerations for library modules
      :name: Considerations

   As you develop your library modules and dependent apps, be aware of the
   following behaviors and limitations.

   -  **Libraries are merged in priority order.**

      Once you have added references to library modules to your Android app
      module, you can set their relative priority. At build time, the libraries
      are merged with the app one at a time, starting from the lowest priority
      to the highest.

   -  **Avoid resource merge conflicts.**

      The build tools merge resources from a library module with those of a
      dependent app module. If a given resource ID is defined in both modules,
      the resource from the app is used.

      If conflicts occur between multiple AAR libraries, then the resource from
      the library listed first in the dependencies list (closest to the top of
      the ``dependencies`` block) is used.

      To avoid resource conflicts, use `non-transitive ``R``
      classes <#/studio/build/optimize-your-build#use-non-transitive-r-classes>`__.
      If this is not possible, then consider using a prefix or other consistent
      naming scheme that is unique to the module (or is unique across all
      project modules).

   -  **In multi-module builds, JAR dependencies are treated as transitive
      dependencies.**

      When you add a JAR dependency to a library project that outputs an AAR,
      the JAR is processed by the library module and packaged with its AAR.

      However, if your project includes a library module that is consumed by an
      app module, the app module treats the library's local JAR dependency as a
      transitive dependency. In this case, the local JAR is processed by the app
      module that consumes it, and not by the library module. This speeds up
      incremental builds that are caused by changes to a library's code.

      Any Java resource conflicts caused by local JAR dependencies must be
      resolved in the app module that consumes the library.

   -  **A library module can depend on an external JAR library.**

      You can develop a library module that depends on an external library. In
      this case, the dependent module must build against a target that includes
      the external library.

      Note that both the library module and the dependent app must declare the
      external library in their manifest files in a
      `<uses-library> <#/guide/topics/manifest/uses-library-element>`__
      element.

   -  **The app module's ``minSdkVersion`` must be equal to or greater than the
      version defined by the library.**

      A library is compiled as part of the dependent app module, so the APIs
      used in the library module must be compatible with the platform version
      that the app module supports.

   -  **Each library module creates its own ``R`` class.**

      When you build the dependent app modules, library modules are compiled
      into an AAR file then added to the app module. Therefore, each library has
      its own ``R`` class, named according to the library's package name.

      The ``R`` class generated from main module and the library module is
      created in all the packages that are needed, including the main module's
      package and the libraries' packages.

   -  **A library module might include its own ProGuard configuration file.**

      If you have a library project that you use to build and publish an AAR,
      you can add a ProGuard configuration file to your library's build
      configuration. If you do, the Android Gradle plugin applies the ProGuard
      rules that you have specified. The build tools embed this file within the
      generated AAR file for the library module. When you add the library to an
      app module, the library's ProGuard file is appended to the ProGuard
      configuration file (``proguard.txt``) of the app module.

      By embedding a ProGuard file in your library module, you help ensure that
      app modules that depend on your library don't have to manually update
      their ProGuard files to use your library. When the Android Studio build
      system builds your app, it uses the directives from both the app module
      and the library. So there's no need to run a code shrinker on the library
      in a separate step.

      To add the ProGuard rules to your library project, specify the file's name
      with the ``consumerProguardFiles`` property inside the ``defaultConfig``
      block of your library's ``build.gradle`` or ``build.gradle.kts`` file.

      For example, the following snippet sets ``lib-proguard-rules.txt`` as the
      library's ProGuard configuration file:

      .. container::

         .. container:: ds-selector-tabs

            .. container:: section

               .. rubric:: Groovy
                  :name: groovy

               .. code:: prettyprint

                  android {
                      defaultConfig {
                          consumerProguardFiles 'lib-proguard-rules.txt'
                      }
                      ...
                  }

            .. container:: section

               .. rubric:: Kotlin
                  :name: kts

               .. code:: prettyprint

                  android {
                      defaultConfig {
                          consumerProguardFiles("lib-proguard-rules.txt")
                      }
                      ...
                  }

      However, if your library module is a part of a multi-module build that
      compiles into an APK and doesn't generate an AAR, run code shrinking on
      only the app module that consumes the library. To learn more about
      ProGuard rules and their usage, read `Shrink, obfuscate, and optimize your app <#/studio/build/shrink-code>`__.

   -  **Testing a library module is nearly the same as**\ `testing an app. <#/studio/test>`__

      The main difference is that the library and its dependencies are
      automatically included as dependencies of the test APK. This means that
      the test APK includes not only its own code but also the library's AAR and
      all its dependencies. Because there is no separate app under test, the
      ``androidTest`` task installs (and uninstalls) only the test APK.

      When `merging multiple manifest files <#/studio/build/manage-manifests#merge-manifests>`__, Gradle follows
      the default priority order and merges the library's manifest into the test
      APK's main manifest.

   .. rubric:: Anatomy of an AAR file
      :name: aar-contents

   The file extension for an AAR file is ``.aar``, and the Maven artifact type
   is ``aar`` as well. The file itself is a ZIP file. The only mandatory entry
   is ``/AndroidManifest.xml``.

   An AAR file can also include one or more of the following optional entries:

   -  ``/classes.jar``
   -  ``/res/``
   -  ``/R.txt``
   -  ``/public.txt``
   -  ``/assets/``
   -  ``/libs/``\ ``name``\ ``.jar``
   -  ``/jni/``\ ``abi_name``\ ``/``\ ``name``\ ``.so`` (where ``abi_name`` is
      one of the `Android-supported ABIs <#/ndk/guides/abis#sa>`__)
   -  ``/proguard.txt``
   -  ``/lint.jar``
   -  ``/api.jar``
   -  ``/prefab/`` for `exporting native libraries <#/studio/build/dependencies#native-dependencies-aars>`__

Last updated 2024-05-03 UTC.

.. |image-psd-add-module-dependency-dropdown| image:: https://developer.android.google.cn/static/studio/images/projects/psd-add-module-dependency-dropdown.png
.. |Add module dependency in the Project Structure Dialog| image:: https://developer.android.google.cn/static/studio/images/projects/psd-add-module-dependency.png
.. |image-psd-add-library-dependency-dropdown| image:: https://developer.android.google.cn/static/studio/images/projects/psd-add-library-dependency-dropdown.png
.. |Add library dependency in the Project Structure Dialog| image:: https://developer.android.google.cn/static/studio/images/projects/psd-add-library-dependency.png
.. |image-psd-add-jar-dependency-dropdown| image:: https://developer.android.google.cn/static/studio/images/projects/psd-add-jar-dependency-dropdown.png
.. |Add AAR dependency in the Project Structure Dialog| image:: https://developer.android.google.cn/static/studio/images/projects/psd-add-aar-dependency.png

/Set up continuous integration
==============================

.. https://developer.android.google.cn/studio/projects/continuous-integration?hl=en

.. container:: devsite-article-body clearfix

   Continuous integration systems let you automatically build and test your app
   every time you check in updates to your source control system. You can use
   any continuous integration tool that can initiate a Gradle build to build
   your Android Studio projects.

   To run tests as part of the build, you need to either configure your
   continuous integration server to use the `Android Emulator <#/studio/run/emulator-commandline>`__ or use `Firebase Test Lab <https://firebase.google.cn/docs/test-lab/>`__ to run your tests.

   For specific information about configuring continuous integration for your
   Android project using Jenkins and Firebase Test Lab, see `Start testing with continuous integration (CI) systems <https://firebase.google.cn/docs/test-lab/continuous>`__.

   **Note:**\  You must accept the license agreements for any packages your app
   requires on each machine where you build your app. If you have not installed
   Android Studio on your continuous integration server, you can `accept licenses from the command line using sdkmanager <#/studio/command-line/sdkmanager#accept-licenses>`__.

Last updated 2023-04-12 UTC.

/Topic: 3. 🟢 Write your code
===============================



/Write your code quicker and more efficiently
=============================================

.. https://developer.android.google.cn/studio/write?hl=en

.. container:: devsite-article-body clearfix

   Android Studio includes tools for every stage of development, but what's most
   important is simply writing your app: writing the code, building layouts,
   creating images, and being productive along the way.

   That's what this section is all about: the tools that help you write your app
   and write it quickly.

   .. rubric:: Coding productivity
      :name: coding_productivity

   The following are just a few features to help you be more productive when
   coding.

   .. rubric:: Code completion
      :name: code_completion

   Code completion speeds up app development by reducing typing errors and the
   need to look up class, method, and variable names. The code editor provides
   basic completion, smart completion, and statement completion.

   Learn more about `Code completion <#/studio/intro#code_completion>`__.

   .. rubric:: Create custom code-completion templates
      :name: create_custom_code-completion_templates

   Live templates allow you to enter code snippets for fast insertion and
   completion of small chunks of code. To insert a live template, type the
   template abbreviation and press the **Tab** key. Android Studio inserts the
   code snippet associated with the template into your code.

   For example, the ``comp`` abbreviation followed by **Tab** inserts the code
   for a new composable function. Or type ``loge`` to find the ``Log.e()``
   method and `log from your code <#/studio/command-line/logcat#logClass>`__.

   To see the list of supported live templates and customize them, click **File
   > Settings > Editor > Live Templates** (**Android Studio > Settings > Editor
   > Live Templates** on macOS).

   Learn more about `Live templates <https://medium.com/google-developers/writing-more-code-by-writing-less-code-with-android-studio-live-templates-244f648d17c7#.h1jn0hq31>`__.

   .. rubric:: Get quick fixes from lint
      :name: get_quick_fixes_from_lint

   Android Studio provides a code scanning tool called Lint to help you to
   identify and correct problems with the structural quality of your code,
   without executing the app or writing tests.

   Every time you build your app, Android Studio runs Lint to check your source
   files for potential bugs and looks for optimization improvements in
   correctness, security, performance, usability, accessibility, and
   internationalization.

   Learn more about `Lint <#/studio/write/lint>`__.

   .. rubric:: See documentation and resource details
      :name: see_documentation_and_resource_details

   You can view documentation for an API by placing the caret on the
   method/member/class name and pressing **F1**.

   Information is also available for other resources, such as images and themes.
   For example, if you place the caret on the theme name in your Android
   manifest file and press **F1**, you can see the theme inheritance hierarchy
   and colors or images for the various attributes.

   .. rubric:: Quickly create new files
      :name: quickly_create_new_files

   When you want to create a new file, click the desired directory in the
   Project window, then press **Alt + Insert** (**Command + N** on Mac). Android
   Studio shows a small window with a list of suggested file types, as
   appropriate for the selected directory.

   .. rubric:: Working with resources
      :name: working_with_resources

   Android Studio includes the following features and tools to help you create
   and manage resource files.

   Learn more about `adding resources <#/studio/write/add-resources>`__.

   .. rubric:: Create images for all screen densities
      :name: create_images_for_all_screen_densities

   Android Studio includes a tool called Vector Asset Studio that helps you
   create images that support each screen density. You can upload your own SVG
   file for editing or select from one of the many Google-provided material
   design icons. To get started, click **File > New > Vector Asset**.

   Learn more about `Vector Asset Studio <#/studio/write/vector-asset-studio>`__.

   .. rubric:: Preview images and colors
      :name: preview_images_and_colors

   When referencing images and icons in your code, a preview of the image
   appears in the left margin to help you verify the image or icon reference.

   To view the full size image, click the thumbnail in the left margin. Or,
   place the caret on the inline reference to the asset and press **F1** to see
   the image details, including all the alternative sizes.

   .. rubric:: Create new layouts
      :name: create_new_layouts

   Android Studio lets you preview your composable layouts when you use the
   `composable preview <#/jetpack/compose/tooling/studio#preview>`__ function.
   Previews of your composables appear in the **Design** view of the file and
   update in real time as you edit the composables.

   If you're using XML layouts, Android Studio offers the `Layout Editor <#/studio/write/layout-editor>`__ to preview your layout while editing
   the XML.

   .. rubric:: Translate UI strings
      :name: translate_ui_strings

   The Translations Editor tool gives you a single view of all of your
   translated resources, making it easy to change or add translations, and even
   find missing translations without opening every version of the
   ``strings.xml`` file. You can even upload your strings file to order
   translation services.

   To get started, right-click on any copy of your ``strings.xml`` file then
   click **Open Translations Editor**.

   Learn more about the `Translations Editor <#/studio/write/translations-editor>`__.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2023-04-12 UTC.

/Add code from a template
=========================

.. https://developer.android.google.cn/studio/projects/templates?hl=en

.. container:: devsite-article-body clearfix

   Android Studio provides code templates that follow the Android design and
   development best practices to get you on the right track to creating
   beautiful, functional apps. You can use templates to create new app modules,
   individual activities, or other specific Android project components.

   Some templates provide starter code for common usage contexts, such as
   navigation drawers or login screens. You can choose from these app module and
   activity templates when you first `create your project <#/studio/projects/create-project>`__, when you `add a new app module within an existing project <#/studio/projects/add-app-module>`__, or when you
   add a new activity within an app module.

   In addition to activities, you can also add other Android project components
   to an existing app using templates. These templates include both code
   components, such as services and fragments, and non-code components, such as
   folders and XML files.

   This page discusses how to add Android project components like activities to
   your project and describes the commonly used activity templates available in
   Android Studio. Note that most templates depend on the `Android Support Library <#/tools/support-library/features>`__ to include user interface
   principles based on `material design <#/design/material>`__.

   .. rubric:: Add a project component
      :name: FindTemplates

   .. container:: attempt-right

      |image-templates-menu|
      **Figure 1**. The templates menu, accessible through the **File** >
      **New** menu or by right-clicking in the **Project** window.

   The list of templates provided in Android Studio is constantly growing.
   Android Studio groups templates by the type of component that they add, such
   as an **Activity** or an **XML** file, as shown in figure 1.

   To add an Android project component using a template, use the **Project**
   |image-window-project| window. Right-click on the folder in which you want to add the new
   component, and select **New**. Based on what components can be added to the
   folder you clicked on, you then see a list of template types like those shown
   in figure 1.

   When you select the template you want to add, a corresponding wizard window
   appears and asks for the component's configuration information, such as its
   name. After you enter the configuration information, Android Studio creates
   and opens the files for your new component. It also runs a Gradle build to
   sync your project.

   Although you can also use the **File** > **New** menu of Android Studio to
   create a new Android project component, navigating to your desired folder in
   the **Project** window ensures that you create the component in the correct
   place.

   .. rubric:: Select an activity template
      :name: SelectTemplate

   .. container:: attempt-right

      |image-empty-compose-activity-template|
      **Figure 2**. The Empty Compose Activity template.

   One of the most common uses of templates is adding new activities to an
   existing app module. There are templates for creating screens for logging
   into an account, presenting a list of items with details, or scrolling
   through a long block of text.

   Android Studio also provides templates for a variety of different app module
   types, including Wear OS, Android TV, and Cloud App Engine. You can view
   templates for these different module types when `adding a project component <#FindTemplates>`__. Templates also exist for more API-specific
   modules and activities, such as Google AdMobs Ads and Google Maps.

   One of the most commonly used templates is the Empty Compose Activity
   template, which creates an empty activity with a sample composable and a
   preview of the composable. It lets you to start from scratch when building
   your app module or activity.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2023-04-12 UTC.

.. |image-templates-menu| image:: https://source.android.google.cn/static/studio/images/projects/templates-menu.png
   :width: 232px
.. |image-window-project| image:: https://source.android.google.cn/static/studio/images/buttons/window-project.png
   :class: inline-icon
.. |image-empty-compose-activity-template| image:: https://source.android.google.cn/static/studio/images/projects/empty-compose-activity-template.png
   :width: 232px

/Find sample code
=================

.. https://developer.android.google.cn/studio/write/sample-code?hl=en

.. container:: devsite-article-body clearfix

   Android Studio provides a selection of code samples and templates for you to
   use to accelerate your app development. Browse sample code to learn how to
   build different components for your apps. Use templates to create new app
   modules, individual activities, or other specific Android project components.

   This page describes how to access and use the high-quality, Google-provided
   Android code samples. For information about templates, see `Add code from a template <#/studio/projects/templates>`__.

   .. rubric:: Browse Samples dialog
      :name: menus

   Use the samples browser to select, preview, and import one or more sample
   apps as projects:

   #. Select **File > New > Import Sample**.
   #. Use the search box or the scroll bar to browse the samples.
   #. When you find a sample that interests you, highlight it and take a look at
      the preview.
   #. If you want to import the sample as a project, click **Next** and then
      **Finish**.

   .. figure:: https://source.android.google.cn/static/studio/images/write/new-browse-sample.png
      :alt: The Browse Samples dialog
      :width: 900px

      **Figure 1.** Browse Samples dialog with sample list and preview.

   You can also browse the source code through GitHub.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2023-04-13 UTC.

/Create a Java class or type
============================

.. https://developer.android.google.cn/studio/write/create-java-class?hl=en

.. container:: devsite-article-body clearfix

   With the **Create New Class** dialog and file templates, Android Studio helps
   you to quickly create the following new classes and types:

   -  Java classes
   -  Enumeration and singleton classes
   -  Interface and annotation types

   After you fill in the **Create New Class** dialog fields and click **OK**,
   Android Studio creates a ``.java`` file containing skeleton code, including a
   package statement, any necessary imports, a header, and a class or type
   declaration. Next, you can add your code to this file.

   File templates specify how Android Studio generates the skeleton code. You
   can use the file templates provided with Android Studio as is, or customize
   them to suit your development process.

   .. rubric:: Viewing and customizing file templates
      :name: viewing-templates

   Android Studio provides file templates that determine how new Java classes
   and types are created with the **Create New Class** dialog. You can customize
   these templates.

   |The Create New Class dialog.|

   **Figure 1**. The **Create New Class** dialog.

   The Android Studio file templates include Velocity Template Language
   (`VTL <https://velocity.apache.org/engine/>`__) code and variables that
   handle these additional options. The **Create New Class** dialog uses the
   **AnnotationType**, **Class**, **Enum**, **Interface**, and **Singleton**
   file templates.

   To view the templates, find customizations, and modify the templates, follow
   these steps:

   #. Do one of the following:

      -  For Windows or Linux, select **File > Settings > Editor > File and Code
         Templates > Files**.
      -  For macOS, select **Android Studio > Preferences > Editor > File and
         Code Templates > Files**.

      In the `template list <https://www.jetbrains.com/help/idea/2023.3/settings-file-and-code-templates.html>`__,
      internal template names are in bold font. Customized template names are
      displayed in a highlight color, such as blue.

   #. Customize the file templates as needed.

      If you want to use the **Create New Class** dialog fields, make sure your
      changes comply with the `Android Studio file template code <#templates>`__.

   For more information about file templates, including VTL, see `File and Code Templates <https://www.jetbrains.com/help/idea/2023.3/file-and-code-templates.html>`__
   and `File and Code Templates Dialog <https://www.jetbrains.com/help/idea/2023.3/settings-file-and-code-templates.html>`__.

   .. rubric:: Creating a Java class or type
      :name: creating-class

   Android Studio helps you to create new Java classes; enumeration and
   singleton classes; and interface and annotation types based on `file templates <#templates>`__.

   To create a new Java class or type, follow these steps:

   In the **Project** window, right-click a Java file or folder, and select
   **New** > **Java Class**.
   Alternatively, select a Java file or folder in the **Project** window, or
   click in a Java file in the Code Editor. Then select **File** > **New** >
   **Java Class**.

   The item you select determines the default package for the new class or type.

   In the **Create New Class** dialog, fill in the fields:

   -  **Name** - The name of the new class or type. It must comply with Java
      name requirements. Don’t type a file name extension.
   -  **Kind** - Select the category of class or type.
   -  **Superclass** - The class that your new class inherits from. You can type
      the package and class name, or just the class name and then double-click
      an item in the drop-down list to autocomplete it.
   -  **Interface(s)** - One or more interfaces that the new class or type
      implements. Multiple interfaces should be separated by a comma followed by
      an optional space. You can type the package and interface name, or just
      the interface name and then double-click an item in the drop-down list to
      autocomplete it.
   -  **Package** - The package that the class or type will reside in. The
      default automatically appears in the field. If you type a package name in
      the field, any portions of the package identifier that don’t exist are
      highlighted red; in this case, Android Studio creates the package after
      you click **OK**. This field must contain a value; otherwise, the Java
      file won’t contain a ``package`` statement, and the class or type won’t be
      placed within a package in the project.
   -  **Visibility** - Select whether the class or type is visible to all
      classes, or just to those in its own package.
   -  **Modifiers** - Select the **Abstract** or **Final** modifier for a
      **Class**, or neither.
   -  **Show Select Overrides Dialog** - For a **Kind** of **Class**, check this
      option to open the `Select Methods to Override/Implement dialog <https://www.jetbrains.com/help/idea/2023.3/overriding-methods-of-a-superclass.html>`__
      after you click **OK**. In this dialog, you can select methods that you
      would like to override or implement, and Android Studio will generate
      skeleton code for these methods.

   Any fields that don’t apply to the **Kind** are hidden.

   Click **OK**.
   Android Studio creates a Java file with skeleton code that you can modify. It
   opens the file in the Code Editor.

   **Note:** You can create a singleton class by selecting **File** > **New** >
   **Singleton** or **File** > **New** > **Java Class**; the latter technique
   offers more options.

   .. rubric:: Android Studio file templates
      :name: templates

   This section lists the Android Studio file template code written in the
   `VTL <https://velocity.apache.org/engine/>`__ scripting language, followed by
   definitions of the variables. The values that you provide in the **Create New
   Class** dialog become the variable values in the template. Note that the
   lines that begin with ``#if (${VISIBILITY}`` extend all the way to the open
   brace ( ``{`` ).

   .. rubric:: AnnotationType file template
      :name: annotation

   .. code:: none

      #if (${PACKAGE_NAME} != "")package ${PACKAGE_NAME};#end

      #if (${IMPORT_BLOCK} != "")${IMPORT_BLOCK}
      #end
      #parse("File Header.java")

      #if (${VISIBILITY} == "PUBLIC")public #end @interface ${NAME} #if (${INTERFACES} != "")extends ${INTERFACES} #end {
      }

   .. rubric:: Class file template
      :name: class

   .. code:: none

      #if (${PACKAGE_NAME} != "")package ${PACKAGE_NAME};#end

      #if (${IMPORT_BLOCK} != "")${IMPORT_BLOCK}
      #end
      #parse("File Header.java")

      #if (${VISIBILITY} == "PUBLIC")public #end #if (${ABSTRACT} == "TRUE")abstract #end #if (${FINAL} == "TRUE")final #end class ${NAME} #if (${SUPERCLASS} != "")extends ${SUPERCLASS} #end #if (${INTERFACES} != "")implements ${INTERFACES} #end {
      }

   .. rubric:: Enum file template
      :name: enum

   .. code:: none

      #if (${PACKAGE_NAME} != "")package ${PACKAGE_NAME};#end

      #if (${IMPORT_BLOCK} != "")${IMPORT_BLOCK}
      #end
      #parse("File Header.java")

      #if (${VISIBILITY} == "PUBLIC")public #end enum ${NAME} #if (${INTERFACES} != "")implements ${INTERFACES} #end {
      }

   .. rubric:: Interface file template
      :name: interface

   .. code:: none

      #if (${PACKAGE_NAME} != "")package ${PACKAGE_NAME};#end

      #if (${IMPORT_BLOCK} != "")${IMPORT_BLOCK}
      #end
      #parse("File Header.java")

      #if (${VISIBILITY} == "PUBLIC")public #end enum ${NAME} #if (${INTERFACES} != "")implements ${INTERFACES} #end {
      #end {
      }

   .. rubric:: Singleton file template
      :name: singleton

   .. code:: none

      #if (${PACKAGE_NAME} != "")package ${PACKAGE_NAME};#end

      #if (${IMPORT_BLOCK} != "")${IMPORT_BLOCK}
      #end
      #parse("File Header.java")

      #if (${VISIBILITY} == "PUBLIC")public #end class ${NAME} #if (${SUPERCLASS} != "")extends ${SUPERCLASS} #end #if (${INTERFACES} != "")implements ${INTERFACES} #end {
          private static final ${NAME} ourInstance = new ${NAME}();

          #if (${VISIBILITY} == "PUBLIC")public #end static ${NAME} getInstance() {
              return ourInstance;
          }

          private ${NAME}() {
          }
      }

   .. rubric:: File template variables
      :name: variables

   Android Studio replaces file template variables with values in the generated
   Java file. You enter the values in the **Create New Class** dialog. The
   template has the following variables that you can use:

   -  ``IMPORT_BLOCK`` - A newline-delimited list of Java ``import`` statements
      necessary to support any superclass or interfaces, or an empty string
      (``""``). For example, If you only implement the ``Runnable`` interface
      and extend nothing, this variable will be
      ``"import java.lang.Runnable;\n"``. If you implement the ``Runnable``
      interface and extend the ``Activity`` class, it will be
      ``"import android.app.Activity;\nimportjava.lang.Runnable;\n"``.
   -  ``VISIBILITY`` - Whether the class will have public access or not. It can
      have a value of ``PUBLIC`` or ``PACKAGE_PRIVATE``.
   -  ``SUPERCLASS`` - A single class name, or empty. If present, there will be
      an ``extends ${SUPERCLASS}`` clause after the new class name.
   -  ``INTERFACES`` - A comma-separated list of interfaces, or empty. If
      present, there will be an ``implements ${INTERFACES}`` clause after the
      superclass, or after the class name if there’s no superclass. For
      interfaces and annotation types, the interfaces have the ``extends``
      keyword.
   -  ``ABSTRACT`` - Whether the class should be abstract or not. It can have a
      value of ``TRUE`` or ``FALSE``.
   -  ``FINAL`` - Whether the class should be final or not. It can have a value
      of ``TRUE`` or ``FALSE``.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2024-05-03 UTC.

.. |The Create New Class dialog.| image:: https://source.android.google.cn/static/studio/images/write/create-new-class.png
   :width: 537px

/Add a module for a new device
==============================

.. https://developer.android.google.cn/studio/projects/add-app-module?hl=en

.. container:: devsite-article-body clearfix

   Modules provide a container for your app's source code, resource files, and
   app level settings, such as the module-level build file and Android manifest
   file. Each module can be independently built, tested, and debugged.

   Android Studio uses modules to make it easy to add new devices to your
   project. By following a few simple steps in Android Studio, you can create a
   module to contain code that's specific to a device type, such as Wear OS or
   Android TV. Android Studio automatically creates module directories, such as
   source and resource directories, and a default ``build.gradle`` file
   appropriate for the device type. Also, Android Studio creates device modules
   with recommended build configurations, such as using the Leanback library for
   Android TV modules.

   This page describes how to add a new module for a specific device.

   Android Studio also makes it easy to add a library or Google Cloud module to
   your project. For details on creating a library module, see `Create a Library Module <#/studio/projects/android-library#CreateLibrary>`__.

   .. rubric:: Create a new module
      :name: CreatingAModule

   To add a new module to your project for a new device, proceed as follows:

   #. Click **File** > **New** > **New Module**.

   #. In the **Create New Module** window that appears, Android Studio offers
      the following device modules:

      -  Phone & Tablet Module
      -  Wear OS Module
      -  Android TV Module
      -  Glass Module

      Select the module for the device you want, and then click **Next**.

   #. In the **Configure your new module** form, enter the following details:

      -  **Application Name**: This name is used as the title of your app
         launcher icon for the new module.
      -  **Module Name**: This text is used as the name of the folder where your
         source code and resources files are visible.
      -  **Package Name**: This is the Java namespace for the code in your
         module. It is added as the
         `package <#/guide/topics/manifest/manifest-element#package>`__
         attribute in the module's `Android manifest file <#/guide/topics/manifest/manifest-intro>`__.
         **Important:** Module package names must be globally unique. You can't
         have two modules with the same package name in the same project.
      -  **Minimum SDK**: This setting indicates the lowest version of the
         Android platform that the app module supports. This value sets the
         ``minSdkVersion`` attribute in the ``build.gradle`` file, which you can
         edit later.

      Then click **Next**.

   #. Depending on which device module you selected, the following page displays
      a selection of appropriate code templates you can select to use as your
      main activity. Click an activity template with which you want to start,
      and then click **Next**. If you don't need an activity, click **Add No
      Activity**, click **Finish**, and then you're done.

   #. If you chose an activity template, enter the settings for your activity on
      the **Customize the Activity** page. Most templates ask for an **Activity
      Name**, **Layout Name**, **Title**, and **Source Language**, but each
      template has activity-specific settings. Click **Finish**. When you create
      an app module with an activity template, you can immediately run and test
      the module on your device.

   Android Studio creates all the necessary files for the new module and syncs
   the project with the new module gradle files. Adding a module for a new
   device also adds any required dependencies for the target device to the
   module's build file.

   Once the Gradle project sync completes, the new module appears in the
   **Project** window on the left. If you don't see the new module folder, make
   sure the window is displaying the `Android view <#/studio/projects#ProjectFiles>`__.

   .. rubric:: Import a module
      :name: ImportAModule

   To import an existing module into your project, proceed as follows:

   #. Click **File > New > Import Module**.
   #. In the **Source directory** box, type or select the directory of the
      module(s) that you want to import:

      -  If you are importing one module, indicate its root directory.
      -  If you are importing multiple modules from a project, indicate the
         project folder. For each module inside the folder, a box appears and
         indicates the **Source location** and **Module name**. Make sure the
         **Import** box is checked for each module that you want to import.

      If your module(s) have other dependencies, they will be listed to import
      under **Additional required modules**.
   #. Type your desired module name(s) in the **Module name** field(s).
   #. Click **Finish.**

   Once the module is imported, it appears in the `Project window <https://developer.android.google.cn/studio/projects/index.html#ProjectFiles>`__
   on the left.

   .. rubric:: Next steps
      :name: ModuleNextSteps

   Once you've added a new module, you can modify the module code and resources,
   configure module build settings, and build the module. You can also run and
   debug the module like any other app.

   -  To learn about build settings for a module, see `The Module-level Build File <#/studio/build#module-level>`__.
   -  To build and run a specific module, see `Select and build a different module <#/studio/run#build-module>`__.

   You'll also want to add code and resources to properly support the new
   device. For more information about how to develop app modules for different
   device types, see the corresponding documentation:

   -  For Wear OS modules: `Creating and Running a Wearable App <https://developer.android.google.cn/training/wearables/apps/creating.html>`__
   -  For Android TV modules: `Get Started with TV Apps <https://developer.android.google.cn/training/tv/start/start.html>`__
   -  For Glass modules: `GDK Quick Start <https://developers.google.cn/glass/develop/gdk/quick-start#for_android_experts>`__

   As you develop your new module, you might create device independent code that
   is already duplicated in a different app module. Instead of maintaining
   duplicate code, consider moving the shared code to a library module and
   adding the library as a dependency to your app modules. For more information
   on creating a library module and adding it as a dependency, see `Create an Android Library <#/studio/projects/android-library>`__.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2023-04-12 UTC.

/Use Java 8 language features
=============================

.. https://developer.android.google.cn/studio/write/java8-support?hl=en

.. container:: devsite-article-body clearfix

   The Android Gradle plugin 3.0.0 and later supports all Java 7 language
   features and a subset of Java 8 language features that vary by platform
   version. When building your app using the Android Gradle plugin 4.0.0 and
   higher, you can use some Java 8 language APIs without requiring a minimum API
   level for your app.

   This page describes the Java 8 language features you can use, how to properly
   configure your project to use them, and any known issues you may encounter.
   See the following video for an overview of Java 8 language features.

   .. container:: video-wrapper-left

   **Note:**\  When developing apps for Android, using Java 8 language features
   is optional. You can keep your project's source and target compatibility
   values set to Java 7, but you still need to compile using JDK 8.
   The Android Gradle plugin provides built-in support for using certain Java 8
   language features and third-party libraries that use them. The default
   toolchain implements the new language features by performing bytecode
   transformations, called ``desugar``, as part of the D8/R8 compilation of
   class files into DEX code, as shown in figure 1.

   .. figure:: https://source.android.google.cn/static/studio/images/write/desugar_diagram.png
      :alt: Java 8 language feature support using \`desugar\` bytecode
      transformations

      **Figure 1.** Java 8 language feature support using ``desugar`` bytecode
      transformations.

   **Note:**\  Your choice of bytecode level is a balance between functionality
   and build speed. Bytecode level 6 has a faster build and fewer features,
   whereas bytecode level 7 has a balance of features and build speed, and
   bytecode 8 is more feature rich with slower builds.
   .. rubric:: Java 8 language feature support (Android Gradle Plugin 3.0.0+)
      :name: supported_features

   To start using supported Java 8 language features:

   #. `Update the Android Gradle plugin <#/studio/releases/gradle-plugin#updating-plugin>`__ to 3.0.0 or
      higher.
   #. For each module that uses Java 8 language features (either in its source
      code or through dependencies), update the module's ``build.gradle`` or
      ``build.gradle.kts`` file as shown below:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kts
               :class: two-line-tab

            .. code:: prettyprint

               android {
                   ...
                   // Configure only for each module that uses Java 8
                   // language features (either in its source code or
                   // through dependencies).
                   compileOptions {
                       sourceCompatibility = JavaVersion.VERSION_1_8
                       targetCompatibility = JavaVersion.VERSION_1_8
                   }
                   // For Kotlin projects
                   kotlinOptions {
                       jvmTarget = "1.8"
                   }
               }

         .. container:: section

            .. rubric:: Groovy
               :name: groovy
               :class: two-line-tab

            .. code:: prettyprint

               android {
                   ...
                   // Configure only for each module that uses Java 8
                   // language features (either in its source code or
                   // through dependencies).
                   compileOptions {
                       sourceCompatibility JavaVersion.VERSION_1_8
                       targetCompatibility JavaVersion.VERSION_1_8
                   }
                   // For Kotlin projects
                   kotlinOptions {
                       jvmTarget = "1.8"
                   }
               }

   When building your app using the Android Gradle plugin 3.0.0 and higher, the
   plugin doesn't support all Java 8 language features. The following language
   features are available on any API level:

   .. list-table::
      :header-rows: 1

      - 

         - Java 8 language feature
         - Notes
      - 

         - `Lambda expressions <https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html>`__
         - Android doesn't support the serialization of lambda expressions.
      - 

         - `Method references <https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html>`__
         -  
      - 

         - `Type annotations <https://docs.oracle.com/javase/tutorial/java/annotations/type_annotations.html>`__
         - Type annotation information is only available at compile time, not at
            runtime. The platform supports
            `TYPE <#/reference/java/lang/annotation/ElementType#TYPE>`__ in
            API level 24 and below, but not ``ElementType.TYPE_USE`` or
            ``ElementType.TYPE_PARAMETER``.
      - 

         - `Default and static interface methods <https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html>`__
         -  
      - 

         - `Repeating annotations <https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html>`__
         -  

   In addition to these Java 8 language features, Android Gradle plugin versions
   3.0.0 and higher extend support for
   ```try``-with-resources <https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html>`__
   to all Android API levels.

   Desugar doesn't support
   `MethodHandle.invoke <https://docs.oracle.com/javase/8/docs/api/java/lang/invoke/MethodHandle.html#invoke-java.lang.Object...->`__
   or
   `MethodHandle.invokeExact <https://docs.oracle.com/javase/8/docs/api/java/lang/invoke/MethodHandle.html#invokeExact-java.lang.Object...->`__.
   If your source code or one of your module dependencies uses one of these
   methods, you need to specify ``minSdkVersion 26`` or higher. Otherwise, you
   receive the following error:

   .. code:: devsite-click-to-copy

      Dex: Error converting bytecode to dex:
      Cause: signature-polymorphic method called without --min-sdk-version >= 26

   In some cases, your module might not be using the ``invoke`` or
   ``invokeExact`` methods even when they're included in a library dependency.
   To keep using that library with ``minSdkVersion 25`` or lower, `enable code shrinking <#/studio/build/shrink-code#shrink-code>`__ to remove unused
   methods. If that doesn't work, consider using an alternative library that
   doesn't use the unsupported methods.

   Java 8+ language features desugaring on the Android Gradle plugin 3.0.0 and
   higher and doesn't make any additional classes and APIs (such as
   ``java.util.stream.*``) available for use on older Android releases. Support
   for partial Java API desugaring is available from the Android Gradle plugin
   4.0.0 or higher, as described in the following section.

   .. rubric:: Java 8+ API desugaring support (Android Gradle Plugin 4.0.0+)
      :name: library-desugaring

   If you're building your app using the Android Gradle plugin 4.0.0 or higher,
   the plugin extends support for using a number of Java 8 language APIs without
   requiring a minimum API level for your app. With Android Gradle plugin 7.4.0
   or higher, a number of Java 11 language APIs are also available with
   desugared library 2.0.0 or higher.

   This additional support for older platform versions is possible because
   plugin 4.0.0 and higher extends the desugaring engine to also desugar Java
   language APIs. You can include standard language APIs that were available
   only in recent Android releases (such as ``java.util.streams``) in apps that
   support older versions of Android.

   The following set of APIs are supported when building your app using Android
   Gradle plugin 4.0.0 or higher:

   -  Sequential streams (``java.util.stream``)
   -  A subset of ``java.time``
   -  ``java.util.function``
   -  Recent additions to ``java.util.{Map,Collection,Comparator}``
   -  Optionals (``java.util.Optional``, ``java.util.OptionalInt``, and
      ``java.util.OptionalDouble``) and some new classes
   -  Some additions to ``java.util.concurrent.atomic`` (new methods on
      ``AtomicInteger``, ``AtomicLong``, and ``AtomicReference``)
   -  ``ConcurrentHashMap`` (with bug fixes for Android 5.0)

   With Android Gradle plugin 7.4.0 or higher, additional Java 11 APIs are
   supported such as a subset of the ``java.nio.file`` package.

   For a complete list of supported APIs, visit `Java 8+ APIs available through desugaring <#/studio/write/java8-support-table>`__ and `Java 11+ APIs available through desugaring <#/studio/write/java11-default-support-table>`__.

   To support these language APIs, the plugin compiles a separate DEX file that
   contains an implementation of the missing APIs and includes it in your app.
   The desugaring process rewrites your app’s code to instead use this library
   at runtime.

   To enable support for these language APIs on any version of the Android
   platform:

   #. `Update the Android Gradle plugin <#/studio/releases/gradle-plugin#updating-plugin>`__ to 4.0.0 (or
      higher).
   #. Include the following in your **app module**\ ’s ``build.gradle`` or
      ``build.gradle.kts`` file:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kts
               :class: two-line-tab

            .. code:: prettyprint

               android {
                   defaultConfig {
                       // Required when setting minSdkVersion to 20 or lower
                       multiDexEnabled = true
                   }

                   compileOptions {
                       // Flag to enable support for the new language APIs

                       // For AGP 4.1+
                       isCoreLibraryDesugaringEnabled = true
                       // For AGP 4.0
                       // coreLibraryDesugaringEnabled = true

                       // Sets Java compatibility to Java 8
                       sourceCompatibility = JavaVersion.VERSION_1_8
                       targetCompatibility = JavaVersion.VERSION_1_8
                   }
               }

               dependencies {
                   // For AGP 7.4+
                   coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:2.0.3")
                   // For AGP 7.3
                   // coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:1.2.3")
                   // For AGP 4.0 to 7.2
                   // coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:1.1.9")
               }

         .. container:: section

            .. rubric:: Groovy
               :name: groovy
               :class: two-line-tab

            .. code:: prettyprint

               android {
                   defaultConfig {
                       // Required when setting minSdkVersion to 20 or lower
                       multiDexEnabled true
                   }

                   compileOptions {
                       // Flag to enable support for the new language APIs
                       coreLibraryDesugaringEnabled true
                       // Sets Java compatibility to Java 8
                       sourceCompatibility JavaVersion.VERSION_1_8
                       targetCompatibility JavaVersion.VERSION_1_8
                   }
               }

               dependencies {
                   // For AGP 7.4+
                   coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'
                   // For AGP 7.3
                   // coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.2.3'
                   // For AGP 4.0 to 7.2
                   // coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.9'
               }

   Note that you may also need to include the previous code snippet in a library
   module's ``build.gradle`` or ``build.gradle.kts`` file if:

   -  The library module's instrumented tests use these language APIs (either
      directly or through the library module or its dependencies). This is so
      that the missing APIs are provided for your instrumented test APK.

   -  You want to run lint on the library module in isolation. This is to help
      lint recognize valid usages of the language APIs and avoid reporting false
      warnings.

   Also note that API desugaring can be combined with shrinking, but only when
   using the R8 shrinker.

   .. rubric:: Versions
      :name: library-desugaring-versions

   The following table shows the versions of the Java 8+ API library and the
   minimum Android Gradle plugin version that supports each version:

   .. list-table::
      :header-rows: 1

      - 

         - Version
         - Minimum Android Gradle plugin version
      - 

         - 1.1.9
         - 4.0.0
      - 

         - 1.2.3
         - 7.3.0
      - 

         - 2.0.3
         - 7.4.0-alpha10

   For details on the versions of the Java 8+ API library, see the `CHANGELOG.md file <https://github.com/google/desugar_jdk_libs/blob/master/CHANGELOG.md>`__
   in the ``desugar_jdk_libs`` GitHub repository.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2023-09-14 UTC.

/Java 8 language support table
==============================

.. https://developer.android.google.cn/studio/write/java8-support-table?hl=en

.. container:: devsite-article-body clearfix

   Android Studio now includes support for using a number of Java 8+ APIs
   without requiring a minimum API level for your app. Through a process called
   `API desugaring <#/studio/write/java8-support#library-desugaring>`__, the DEX
   compiler (D8) allows you to include more standard language APIs in apps that
   support older versions of Android.

   Below is a searchable table showing which Java 8+ libraries are available
   when using the latest version of the Android Gradle Plugin with the
   ``coreLibraryDesugaring`` dependency set to
   ``com.android.tools:desugar_jdk_libs:1.1.8`` in ``build.gradle`` (see `API desugaring <#/studio/write/java8-support#library-desugaring>`__ for more
   information).

   .. container::

      .. list-table::
         :widths: 27 27 27
         :header-rows: 1

         - 

            - *Package +*
               Class,
               Enum,
               or Interface
            - Constructors,
               Properties,
               and Methods
            - Notes
         - 

            - *``java.lang``*

               .. container::

                   Iterable
            - 

               -  ``public void forEach(Consumer action)``
               -  ``public java.util.Spliterator spliterator()``
            - | Additional methods on existing class.
               |  
         - 

            - *``java.time``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   Clock
            - 

               -  ``protected Clock()``
               -  ``public boolean equals(Object obj)``
               -  ``public static Clock fixed(``
                  `` Instant fixedInstant, ZoneId zone)``
               -  ``public abstract ZoneId getZone()``
               -  ``public int hashCode()``
               -  ``public abstract Instant instant()``
               -  ``public long millis()``
               -  ``public static Clock offset(``
                  `` Clock baseClock, Duration offsetDuration)``
               -  ``public static Clock system(ZoneId zone)``
               -  ``public static Clock systemDefaultZone()``
               -  ``public static Clock systemUTC()``
               -  ``public static Clock tick(``
                  `` Clock baseClock, Duration tickDuration)``
               -  ``public static Clock tickMinutes(ZoneId zone)``
               -  ``public static Clock tickSeconds(ZoneId zone)``
               -  ``public abstract Clock withZone(ZoneId p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   DateTimeException
            - 

               -  ``public DateTimeException(String message)``
               -  ``public DateTimeException(``
                  `` String message, Throwable cause)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   DayOfWeek
            - 

               -  ``public static final DayOfWeek FRIDAY``
               -  ``public static final DayOfWeek MONDAY``
               -  ``public static final DayOfWeek SATURDAY``
               -  ``public static final DayOfWeek SUNDAY``
               -  ``public static final DayOfWeek THURSDAY``
               -  ``public static final DayOfWeek TUESDAY``
               -  ``public static final DayOfWeek WEDNESDAY``
               -  ``public Temporal adjustInto(Temporal temporal)``
               -  ``public static DayOfWeek from(``
                  `` TemporalAccessor temporal)``
               -  ``public int get(TemporalField field)``
               -  ``public String getDisplayName(``
                  `` TextStyle style, java.util.Locale locale)``
               -  ``public long getLong(TemporalField field)``
               -  ``public int getValue()``
               -  ``public boolean isSupported(TemporalField field)``
               -  ``public DayOfWeek minus(long days)``
               -  ``public static DayOfWeek of(int dayOfWeek)``
               -  ``public DayOfWeek plus(long days)``
               -  ``public Object query(TemporalQuery query)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public static DayOfWeek valueOf(String name)``
               -  ``public static DayOfWeek[] values()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   Duration
            - 

               -  ``public static final Duration ZERO``
               -  ``public Duration abs()``
               -  ``public Temporal addTo(Temporal temporal)``
               -  ``public static Duration between(``
                  `` Temporal startInclusive, Temporal endExclusive)``
               -  ``public int compareTo(Duration otherDuration)``
               -  ``public Duration dividedBy(long divisor)``
               -  ``public boolean equals(Object otherDuration)``
               -  ``public static Duration from(TemporalAmount amount)``
               -  ``public long get(TemporalUnit unit)``
               -  ``public int getNano()``
               -  ``public long getSeconds()``
               -  ``public java.util.List getUnits()``
               -  ``public int hashCode()``
               -  ``public boolean isNegative()``
               -  ``public boolean isZero()``
               -  ``public Duration minus(``
                  `` long amountToSubtract, TemporalUnit unit)``
               -  ``public Duration minus(Duration duration)``
               -  ``public Duration minusDays(long daysToSubtract)``
               -  ``public Duration minusHours(long hoursToSubtract)``
               -  ``public Duration minusMillis(long millisToSubtract)``
               -  ``public Duration minusMinutes(long minutesToSubtract)``
               -  ``public Duration minusNanos(long nanosToSubtract)``
               -  ``public Duration minusSeconds(long secondsToSubtract)``
               -  ``public Duration multipliedBy(long multiplicand)``
               -  ``public Duration negated()``
               -  ``public static Duration of(``
                  `` long amount, TemporalUnit unit)``
               -  ``public static Duration ofDays(long days)``
               -  ``public static Duration ofHours(long hours)``
               -  ``public static Duration ofMillis(long millis)``
               -  ``public static Duration ofMinutes(long minutes)``
               -  ``public static Duration ofNanos(long nanos)``
               -  ``public static Duration ofSeconds(long seconds)``
               -  ``public static Duration ofSeconds(``
                  `` long seconds, long nanoAdjustment)``
               -  ``public static Duration parse(CharSequence text)``
               -  ``public Duration plus(``
                  `` long amountToAdd, TemporalUnit unit)``
               -  ``public Duration plus(Duration duration)``
               -  ``public Duration plusDays(long daysToAdd)``
               -  ``public Duration plusHours(long hoursToAdd)``
               -  ``public Duration plusMillis(long millisToAdd)``
               -  ``public Duration plusMinutes(long minutesToAdd)``
               -  ``public Duration plusNanos(long nanosToAdd)``
               -  ``public Duration plusSeconds(long secondsToAdd)``
               -  ``public Temporal subtractFrom(Temporal temporal)``
               -  ``public long toDays()``
               -  ``public long toHours()``
               -  ``public long toMillis()``
               -  ``public long toMinutes()``
               -  ``public long toNanos()``
               -  ``public String toString()``
               -  ``public Duration withNanos(int nanoOfSecond)``
               -  ``public Duration withSeconds(long seconds)``
            - Some methods (9) present in Android T are not supported.
         - 

            - *``java.time``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   Instant
            - 

               -  ``public static final Instant EPOCH``
               -  ``public static final Instant MAX``
               -  ``public static final Instant MIN``
               -  ``public Temporal adjustInto(Temporal temporal)``
               -  ``public OffsetDateTime atOffset(ZoneOffset offset)``
               -  ``public ZonedDateTime atZone(ZoneId zone)``
               -  ``public int compareTo(Instant otherInstant)``
               -  ``public boolean equals(Object otherInstant)``
               -  ``public static Instant from(``
                  `` TemporalAccessor temporal)``
               -  ``public int get(TemporalField field)``
               -  ``public long getEpochSecond()``
               -  ``public long getLong(TemporalField field)``
               -  ``public int getNano()``
               -  ``public int hashCode()``
               -  ``public boolean isAfter(Instant otherInstant)``
               -  ``public boolean isBefore(Instant otherInstant)``
               -  ``public boolean isSupported(TemporalField field)``
               -  ``public boolean isSupported(TemporalUnit unit)``
               -  ``public Instant minus(``
                  `` long amountToSubtract, TemporalUnit unit)``
               -  ``public Instant minus(``
                  `` TemporalAmount amountToSubtract)``
               -  ``public Instant minusMillis(long millisToSubtract)``
               -  ``public Instant minusNanos(long nanosToSubtract)``
               -  ``public Instant minusSeconds(long secondsToSubtract)``
               -  ``public static Instant now()``
               -  ``public static Instant now(Clock clock)``
               -  ``public static Instant ofEpochMilli(long epochMilli)``
               -  ``public static Instant ofEpochSecond(``
                  `` long epochSecond)``
               -  ``public static Instant ofEpochSecond(``
                  `` long epochSecond, long nanoAdjustment)``
               -  ``public static Instant parse(CharSequence text)``
               -  ``public Instant plus(``
                  `` long amountToAdd, TemporalUnit unit)``
               -  ``public Instant plus(TemporalAmount amountToAdd)``
               -  ``public Instant plusMillis(long millisToAdd)``
               -  ``public Instant plusNanos(long nanosToAdd)``
               -  ``public Instant plusSeconds(long secondsToAdd)``
               -  ``public Object query(TemporalQuery query)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public long toEpochMilli()``
               -  ``public String toString()``
               -  ``public Instant truncatedTo(TemporalUnit unit)``
               -  ``public long until(``
                  `` Temporal endExclusive, TemporalUnit unit)``
               -  ``public Instant with(TemporalAdjuster adjuster)``
               -  ``public Instant with(``
                  `` TemporalField field, long newValue)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   LocalDate
            - 

               -  ``public static final LocalDate MAX``
               -  ``public static final LocalDate MIN``
               -  ``public Temporal adjustInto(Temporal temporal)``
               -  ``public LocalDateTime atStartOfDay()``
               -  ``public ZonedDateTime atStartOfDay(ZoneId zone)``
               -  ``public LocalDateTime atTime(int hour, int minute)``
               -  ``public LocalDateTime atTime(``
                  `` int hour, int minute, int second)``
               -  ``public LocalDateTime atTime(``
                  ``  int hour,``
                  ``  int minute,``
                  ``  int second,``
                  ``  int nanoOfSecond)``
               -  ``public LocalDateTime atTime(LocalTime time)``
               -  ``public OffsetDateTime atTime(OffsetTime time)``
               -  ``public int compareTo(ChronoLocalDate other)``
               -  ``public boolean equals(Object obj)``
               -  ``public String format(DateTimeFormatter formatter)``
               -  ``public static LocalDate from(``
                  `` TemporalAccessor temporal)``
               -  ``public int get(TemporalField field)``
               -  ``public IsoChronology getChronology()``
               -  ``public int getDayOfMonth()``
               -  ``public DayOfWeek getDayOfWeek()``
               -  ``public int getDayOfYear()``
               -  ``public IsoEra getEra()``\ :sup:```23```
               -  ``public long getLong(TemporalField field)``
               -  ``public Month getMonth()``
               -  ``public int getMonthValue()``
               -  ``public int getYear()``
               -  ``public int hashCode()``
               -  ``public boolean isAfter(ChronoLocalDate other)``
               -  ``public boolean isBefore(ChronoLocalDate other)``
               -  ``public boolean isEqual(ChronoLocalDate other)``
               -  ``public boolean isLeapYear()``
               -  ``public boolean isSupported(TemporalField field)``
               -  ``public boolean isSupported(TemporalUnit unit)``
               -  ``public int lengthOfMonth()``
               -  ``public int lengthOfYear()``
               -  ``public LocalDate minus(``
                  `` long amountToSubtract, TemporalUnit unit)``
               -  ``public LocalDate minus(``
                  `` TemporalAmount amountToSubtract)``
               -  ``public LocalDate minusDays(long daysToSubtract)``
               -  ``public LocalDate minusMonths(long monthsToSubtract)``
               -  ``public LocalDate minusWeeks(long weeksToSubtract)``
               -  ``public LocalDate minusYears(long yearsToSubtract)``
               -  ``public static LocalDate now()``
               -  ``public static LocalDate now(Clock clock)``
               -  ``public static LocalDate now(ZoneId zone)``
               -  ``public static LocalDate of(``
                  `` int year, int month, int dayOfMonth)``
               -  ``public static LocalDate of(``
                  `` int year, Month month, int dayOfMonth)``
               -  ``public static LocalDate ofEpochDay(long epochDay)``
               -  ``public static LocalDate ofYearDay(``
                  `` int year, int dayOfYear)``
               -  ``public static LocalDate parse(CharSequence text)``
               -  ``public static LocalDate parse(``
                  `` CharSequence text, DateTimeFormatter formatter)``
               -  ``public LocalDate plus(``
                  `` long amountToAdd, TemporalUnit unit)``
               -  ``public LocalDate plus(TemporalAmount amountToAdd)``
               -  ``public LocalDate plusDays(long daysToAdd)``
               -  ``public LocalDate plusMonths(long monthsToAdd)``
               -  ``public LocalDate plusWeeks(long weeksToAdd)``
               -  ``public LocalDate plusYears(long yearsToAdd)``
               -  ``public Object query(TemporalQuery query)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public long toEpochDay()``
               -  ``public String toString()``
               -  ``public long until(``
                  `` Temporal endExclusive, TemporalUnit unit)``
               -  ``public Period until(``
                  `` ChronoLocalDate endDateExclusive)``
               -  ``public LocalDate with(TemporalAdjuster adjuster)``
               -  ``public LocalDate with(``
                  `` TemporalField field, long newValue)``
               -  ``public LocalDate withDayOfMonth(int dayOfMonth)``
               -  ``public LocalDate withDayOfYear(int dayOfYear)``
               -  ``public LocalDate withMonth(int month)``
               -  ``public LocalDate withYear(int year)``
            - | :sup:`2` Not present in Android T (May not resolve at
                 compilation).
               |  :sup:`3` Not supported at all minSDK levels.
               |  
         - 

            - *``java.time``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   LocalDateTime
            - 

               -  ``public static final LocalDateTime MAX``
               -  ``public static final LocalDateTime MIN``
               -  ``public Temporal adjustInto(Temporal temporal)``
               -  ``public OffsetDateTime atOffset(ZoneOffset offset)``
               -  ``public ZonedDateTime atZone(ZoneId zone)``
               -  ``public int compareTo(ChronoLocalDateTime other)``
               -  ``public boolean equals(Object obj)``
               -  ``public String format(DateTimeFormatter formatter)``
               -  ``public static LocalDateTime from(``
                  `` TemporalAccessor temporal)``
               -  ``public int get(TemporalField field)``
               -  ``public int getDayOfMonth()``
               -  ``public DayOfWeek getDayOfWeek()``
               -  ``public int getDayOfYear()``
               -  ``public int getHour()``
               -  ``public long getLong(TemporalField field)``
               -  ``public int getMinute()``
               -  ``public Month getMonth()``
               -  ``public int getMonthValue()``
               -  ``public int getNano()``
               -  ``public int getSecond()``
               -  ``public int getYear()``
               -  ``public int hashCode()``
               -  ``public boolean isAfter(ChronoLocalDateTime other)``
               -  ``public boolean isBefore(ChronoLocalDateTime other)``
               -  ``public boolean isEqual(ChronoLocalDateTime other)``
               -  ``public boolean isSupported(TemporalField field)``
               -  ``public boolean isSupported(TemporalUnit unit)``
               -  ``public LocalDateTime minus(``
                  `` long amountToSubtract, TemporalUnit unit)``
               -  ``public LocalDateTime minus(``
                  `` TemporalAmount amountToSubtract)``
               -  ``public LocalDateTime minusDays(long days)``
               -  ``public LocalDateTime minusHours(long hours)``
               -  ``public LocalDateTime minusMinutes(long minutes)``
               -  ``public LocalDateTime minusMonths(long months)``
               -  ``public LocalDateTime minusNanos(long nanos)``
               -  ``public LocalDateTime minusSeconds(long seconds)``
               -  ``public LocalDateTime minusWeeks(long weeks)``
               -  ``public LocalDateTime minusYears(long years)``
               -  ``public static LocalDateTime now()``
               -  ``public static LocalDateTime now(Clock clock)``
               -  ``public static LocalDateTime now(ZoneId zone)``
               -  ``public static LocalDateTime of(``
                  ``  int year,``
                  ``  int month,``
                  ``  int dayOfMonth,``
                  ``  int hour,``
                  ``  int minute)``
               -  ``public static LocalDateTime of(``
                  ``  int year,``
                  ``  int month,``
                  ``  int dayOfMonth,``
                  ``  int hour,``
                  ``  int minute,``
                  ``  int second)``
               -  ``public static LocalDateTime of(``
                  ``  int year,``
                  ``  int month,``
                  ``  int dayOfMonth,``
                  ``  int hour,``
                  ``  int minute,``
                  ``  int second,``
                  ``  int nanoOfSecond)``
               -  ``public static LocalDateTime of(``
                  ``  int year,``
                  ``  Month month,``
                  ``  int dayOfMonth,``
                  ``  int hour,``
                  ``  int minute)``
               -  ``public static LocalDateTime of(``
                  ``  int year,``
                  ``  Month month,``
                  ``  int dayOfMonth,``
                  ``  int hour,``
                  ``  int minute,``
                  ``  int second)``
               -  ``public static LocalDateTime of(``
                  ``  int year,``
                  ``  Month month,``
                  ``  int dayOfMonth,``
                  ``  int hour,``
                  ``  int minute,``
                  ``  int second,``
                  ``  int nanoOfSecond)``
               -  ``public static LocalDateTime of(``
                  `` LocalDate date, LocalTime time)``
               -  ``public static LocalDateTime ofEpochSecond(``
                  ``  long epochSecond,``
                  ``  int nanoOfSecond,``
                  ``  ZoneOffset offset)``
               -  ``public static LocalDateTime ofInstant(``
                  `` Instant instant, ZoneId zone)``
               -  ``public static LocalDateTime parse(CharSequence text)``
               -  ``public static LocalDateTime parse(``
                  `` CharSequence text, DateTimeFormatter formatter)``
               -  ``public LocalDateTime plus(``
                  `` long amountToAdd, TemporalUnit unit)``
               -  ``public LocalDateTime plus(``
                  `` TemporalAmount amountToAdd)``
               -  ``public LocalDateTime plusDays(long days)``
               -  ``public LocalDateTime plusHours(long hours)``
               -  ``public LocalDateTime plusMinutes(long minutes)``
               -  ``public LocalDateTime plusMonths(long months)``
               -  ``public LocalDateTime plusNanos(long nanos)``
               -  ``public LocalDateTime plusSeconds(long seconds)``
               -  ``public LocalDateTime plusWeeks(long weeks)``
               -  ``public LocalDateTime plusYears(long years)``
               -  ``public Object query(TemporalQuery query)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public LocalDate toLocalDate()``
               -  ``public LocalTime toLocalTime()``
               -  ``public String toString()``
               -  ``public LocalDateTime truncatedTo(TemporalUnit unit)``
               -  ``public long until(``
                  `` Temporal endExclusive, TemporalUnit unit)``
               -  ``public LocalDateTime with(TemporalAdjuster adjuster)``
               -  ``public LocalDateTime with(``
                  `` TemporalField field, long newValue)``
               -  ``public LocalDateTime withDayOfMonth(int dayOfMonth)``
               -  ``public LocalDateTime withDayOfYear(int dayOfYear)``
               -  ``public LocalDateTime withHour(int hour)``
               -  ``public LocalDateTime withMinute(int minute)``
               -  ``public LocalDateTime withMonth(int month)``
               -  ``public LocalDateTime withNano(int nanoOfSecond)``
               -  ``public LocalDateTime withSecond(int second)``
               -  ``public LocalDateTime withYear(int year)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   LocalTime
            - 

               -  ``public static final LocalTime MAX``
               -  ``public static final LocalTime MIDNIGHT``
               -  ``public static final LocalTime MIN``
               -  ``public static final LocalTime NOON``
               -  ``public Temporal adjustInto(Temporal temporal)``
               -  ``public LocalDateTime atDate(LocalDate date)``
               -  ``public OffsetTime atOffset(ZoneOffset offset)``
               -  ``public int compareTo(LocalTime other)``
               -  ``public boolean equals(Object obj)``
               -  ``public String format(DateTimeFormatter formatter)``
               -  ``public static LocalTime from(``
                  `` TemporalAccessor temporal)``
               -  ``public int get(TemporalField field)``
               -  ``public int getHour()``
               -  ``public long getLong(TemporalField field)``
               -  ``public int getMinute()``
               -  ``public int getNano()``
               -  ``public int getSecond()``
               -  ``public int hashCode()``
               -  ``public boolean isAfter(LocalTime other)``
               -  ``public boolean isBefore(LocalTime other)``
               -  ``public boolean isSupported(TemporalField field)``
               -  ``public boolean isSupported(TemporalUnit unit)``
               -  ``public LocalTime minus(``
                  `` long amountToSubtract, TemporalUnit unit)``
               -  ``public LocalTime minus(``
                  `` TemporalAmount amountToSubtract)``
               -  ``public LocalTime minusHours(long hoursToSubtract)``
               -  ``public LocalTime minusMinutes(``
                  `` long minutesToSubtract)``
               -  ``public LocalTime minusNanos(long nanosToSubtract)``
               -  ``public LocalTime minusSeconds(``
                  `` long secondsToSubtract)``
               -  ``public static LocalTime now()``
               -  ``public static LocalTime now(Clock clock)``
               -  ``public static LocalTime now(ZoneId zone)``
               -  ``public static LocalTime of(int hour, int minute)``
               -  ``public static LocalTime of(``
                  `` int hour, int minute, int second)``
               -  ``public static LocalTime of(``
                  ``  int hour,``
                  ``  int minute,``
                  ``  int second,``
                  ``  int nanoOfSecond)``
               -  ``public static LocalTime ofNanoOfDay(long nanoOfDay)``
               -  ``public static LocalTime ofSecondOfDay(``
                  `` long secondOfDay)``
               -  ``public static LocalTime parse(CharSequence text)``
               -  ``public static LocalTime parse(``
                  `` CharSequence text, DateTimeFormatter formatter)``
               -  ``public LocalTime plus(``
                  `` long amountToAdd, TemporalUnit unit)``
               -  ``public LocalTime plus(TemporalAmount amountToAdd)``
               -  ``public LocalTime plusHours(long hoursToAdd)``
               -  ``public LocalTime plusMinutes(long minutesToAdd)``
               -  ``public LocalTime plusNanos(long nanosToAdd)``
               -  ``public LocalTime plusSeconds(long secondstoAdd)``
               -  ``public Object query(TemporalQuery query)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public long toNanoOfDay()``
               -  ``public int toSecondOfDay()``
               -  ``public String toString()``
               -  ``public LocalTime truncatedTo(TemporalUnit unit)``
               -  ``public long until(``
                  `` Temporal endExclusive, TemporalUnit unit)``
               -  ``public LocalTime with(TemporalAdjuster adjuster)``
               -  ``public LocalTime with(``
                  `` TemporalField field, long newValue)``
               -  ``public LocalTime withHour(int hour)``
               -  ``public LocalTime withMinute(int minute)``
               -  ``public LocalTime withNano(int nanoOfSecond)``
               -  ``public LocalTime withSecond(int second)``
            - Some methods (2) present in Android T are not supported.
         - 

            - *``java.time``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   Month
            - 

               -  ``public static final Month APRIL``
               -  ``public static final Month AUGUST``
               -  ``public static final Month DECEMBER``
               -  ``public static final Month FEBRUARY``
               -  ``public static final Month JANUARY``
               -  ``public static final Month JULY``
               -  ``public static final Month JUNE``
               -  ``public static final Month MARCH``
               -  ``public static final Month MAY``
               -  ``public static final Month NOVEMBER``
               -  ``public static final Month OCTOBER``
               -  ``public static final Month SEPTEMBER``
               -  ``public Temporal adjustInto(Temporal temporal)``
               -  ``public int firstDayOfYear(boolean leapYear)``
               -  ``public Month firstMonthOfQuarter()``
               -  ``public static Month from(TemporalAccessor temporal)``
               -  ``public int get(TemporalField field)``
               -  ``public String getDisplayName(``
                  `` TextStyle style, java.util.Locale locale)``
               -  ``public long getLong(TemporalField field)``
               -  ``public int getValue()``
               -  ``public boolean isSupported(TemporalField field)``
               -  ``public int length(boolean leapYear)``
               -  ``public int maxLength()``
               -  ``public int minLength()``
               -  ``public Month minus(long months)``
               -  ``public static Month of(int month)``
               -  ``public Month plus(long months)``
               -  ``public Object query(TemporalQuery query)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public static Month valueOf(String name)``
               -  ``public static Month[] values()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   MonthDay
            - 

               -  ``public Temporal adjustInto(Temporal temporal)``
               -  ``public LocalDate atYear(int year)``
               -  ``public int compareTo(MonthDay other)``
               -  ``public boolean equals(Object obj)``
               -  ``public String format(DateTimeFormatter formatter)``
               -  ``public static MonthDay from(``
                  `` TemporalAccessor temporal)``
               -  ``public int get(TemporalField field)``
               -  ``public int getDayOfMonth()``
               -  ``public long getLong(TemporalField field)``
               -  ``public Month getMonth()``
               -  ``public int getMonthValue()``
               -  ``public int hashCode()``
               -  ``public boolean isAfter(MonthDay other)``
               -  ``public boolean isBefore(MonthDay other)``
               -  ``public boolean isSupported(TemporalField field)``
               -  ``public boolean isValidYear(int year)``
               -  ``public static MonthDay now()``
               -  ``public static MonthDay now(Clock clock)``
               -  ``public static MonthDay now(ZoneId zone)``
               -  ``public static MonthDay of(int month, int dayOfMonth)``
               -  ``public static MonthDay of(``
                  `` Month month, int dayOfMonth)``
               -  ``public static MonthDay parse(CharSequence text)``
               -  ``public static MonthDay parse(``
                  `` CharSequence text, DateTimeFormatter formatter)``
               -  ``public Object query(TemporalQuery query)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public String toString()``
               -  ``public MonthDay with(Month month)``
               -  ``public MonthDay withDayOfMonth(int dayOfMonth)``
               -  ``public MonthDay withMonth(int month)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   OffsetDateTime
            - 

               -  ``public static final OffsetDateTime MAX``
               -  ``public static final OffsetDateTime MIN``
               -  ``public Temporal adjustInto(Temporal temporal)``
               -  ``public ZonedDateTime atZoneSameInstant(ZoneId zone)``
               -  ``public ZonedDateTime atZoneSimilarLocal(ZoneId zone)``
               -  ``public int compareTo(OffsetDateTime other)``
               -  ``public boolean equals(Object obj)``
               -  ``public String format(DateTimeFormatter formatter)``
               -  ``public static OffsetDateTime from(``
                  `` TemporalAccessor temporal)``
               -  ``public int get(TemporalField field)``
               -  ``public int getDayOfMonth()``
               -  ``public DayOfWeek getDayOfWeek()``
               -  ``public int getDayOfYear()``
               -  ``public int getHour()``
               -  ``public long getLong(TemporalField field)``
               -  ``public int getMinute()``
               -  ``public Month getMonth()``
               -  ``public int getMonthValue()``
               -  ``public int getNano()``
               -  ``public ZoneOffset getOffset()``
               -  ``public int getSecond()``
               -  ``public int getYear()``
               -  ``public int hashCode()``
               -  ``public boolean isAfter(OffsetDateTime other)``
               -  ``public boolean isBefore(OffsetDateTime other)``
               -  ``public boolean isEqual(OffsetDateTime other)``
               -  ``public boolean isSupported(TemporalField field)``
               -  ``public boolean isSupported(TemporalUnit unit)``
               -  ``public OffsetDateTime minus(``
                  `` long amountToSubtract, TemporalUnit unit)``
               -  ``public OffsetDateTime minus(``
                  `` TemporalAmount amountToSubtract)``
               -  ``public OffsetDateTime minusDays(long days)``
               -  ``public OffsetDateTime minusHours(long hours)``
               -  ``public OffsetDateTime minusMinutes(long minutes)``
               -  ``public OffsetDateTime minusMonths(long months)``
               -  ``public OffsetDateTime minusNanos(long nanos)``
               -  ``public OffsetDateTime minusSeconds(long seconds)``
               -  ``public OffsetDateTime minusWeeks(long weeks)``
               -  ``public OffsetDateTime minusYears(long years)``
               -  ``public static OffsetDateTime now()``
               -  ``public static OffsetDateTime now(Clock clock)``
               -  ``public static OffsetDateTime now(ZoneId zone)``
               -  ``public static OffsetDateTime of(``
                  ``  int year,``
                  ``  int month,``
                  ``  int dayOfMonth,``
                  ``  int hour,``
                  ``  int minute,``
                  ``  int second,``
                  ``  int nanoOfSecond,``
                  ``  ZoneOffset offset)``
               -  ``public static OffsetDateTime of(``
                  `` LocalDate date, LocalTime time, ZoneOffset offset)``
               -  ``public static OffsetDateTime of(``
                  `` LocalDateTime dateTime, ZoneOffset offset)``
               -  ``public static OffsetDateTime ofInstant(``
                  `` Instant instant, ZoneId zone)``
               -  ``public static OffsetDateTime parse(``
                  `` CharSequence text)``
               -  ``public static OffsetDateTime parse(``
                  `` CharSequence text, DateTimeFormatter formatter)``
               -  ``public OffsetDateTime plus(``
                  `` long amountToAdd, TemporalUnit unit)``
               -  ``public OffsetDateTime plus(``
                  `` TemporalAmount amountToAdd)``
               -  ``public OffsetDateTime plusDays(long days)``
               -  ``public OffsetDateTime plusHours(long hours)``
               -  ``public OffsetDateTime plusMinutes(long minutes)``
               -  ``public OffsetDateTime plusMonths(long months)``
               -  ``public OffsetDateTime plusNanos(long nanos)``
               -  ``public OffsetDateTime plusSeconds(long seconds)``
               -  ``public OffsetDateTime plusWeeks(long weeks)``
               -  ``public OffsetDateTime plusYears(long years)``
               -  ``public Object query(TemporalQuery query)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public static java.util.Comparator timeLineOrder()``
               -  ``public long toEpochSecond()``
               -  ``public Instant toInstant()``
               -  ``public LocalDate toLocalDate()``
               -  ``public LocalDateTime toLocalDateTime()``
               -  ``public LocalTime toLocalTime()``
               -  ``public OffsetTime toOffsetTime()``
               -  ``public String toString()``
               -  ``public ZonedDateTime toZonedDateTime()``
               -  ``public OffsetDateTime truncatedTo(TemporalUnit unit)``
               -  ``public long until(``
                  `` Temporal endExclusive, TemporalUnit unit)``
               -  ``public OffsetDateTime with(``
                  `` TemporalAdjuster adjuster)``
               -  ``public OffsetDateTime with(``
                  `` TemporalField field, long newValue)``
               -  ``public OffsetDateTime withDayOfMonth(int dayOfMonth)``
               -  ``public OffsetDateTime withDayOfYear(int dayOfYear)``
               -  ``public OffsetDateTime withHour(int hour)``
               -  ``public OffsetDateTime withMinute(int minute)``
               -  ``public OffsetDateTime withMonth(int month)``
               -  ``public OffsetDateTime withNano(int nanoOfSecond)``
               -  ``public OffsetDateTime withOffsetSameInstant(``
                  `` ZoneOffset offset)``
               -  ``public OffsetDateTime withOffsetSameLocal(``
                  `` ZoneOffset offset)``
               -  ``public OffsetDateTime withSecond(int second)``
               -  ``public OffsetDateTime withYear(int year)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   OffsetTime
            - 

               -  ``public static final OffsetTime MAX``
               -  ``public static final OffsetTime MIN``
               -  ``public Temporal adjustInto(Temporal temporal)``
               -  ``public OffsetDateTime atDate(LocalDate date)``
               -  ``public int compareTo(OffsetTime other)``
               -  ``public boolean equals(Object obj)``
               -  ``public String format(DateTimeFormatter formatter)``
               -  ``public static OffsetTime from(``
                  `` TemporalAccessor temporal)``
               -  ``public int get(TemporalField field)``
               -  ``public int getHour()``
               -  ``public long getLong(TemporalField field)``
               -  ``public int getMinute()``
               -  ``public int getNano()``
               -  ``public ZoneOffset getOffset()``
               -  ``public int getSecond()``
               -  ``public int hashCode()``
               -  ``public boolean isAfter(OffsetTime other)``
               -  ``public boolean isBefore(OffsetTime other)``
               -  ``public boolean isEqual(OffsetTime other)``
               -  ``public boolean isSupported(TemporalField field)``
               -  ``public boolean isSupported(TemporalUnit unit)``
               -  ``public OffsetTime minus(``
                  `` long amountToSubtract, TemporalUnit unit)``
               -  ``public OffsetTime minus(``
                  `` TemporalAmount amountToSubtract)``
               -  ``public OffsetTime minusHours(long hours)``
               -  ``public OffsetTime minusMinutes(long minutes)``
               -  ``public OffsetTime minusNanos(long nanos)``
               -  ``public OffsetTime minusSeconds(long seconds)``
               -  ``public static OffsetTime now()``
               -  ``public static OffsetTime now(Clock clock)``
               -  ``public static OffsetTime now(ZoneId zone)``
               -  ``public static OffsetTime of(``
                  ``  int hour,``
                  ``  int minute,``
                  ``  int second,``
                  ``  int nanoOfSecond,``
                  ``  ZoneOffset offset)``
               -  ``public static OffsetTime of(``
                  `` LocalTime time, ZoneOffset offset)``
               -  ``public static OffsetTime ofInstant(``
                  `` Instant instant, ZoneId zone)``
               -  ``public static OffsetTime parse(CharSequence text)``
               -  ``public static OffsetTime parse(``
                  `` CharSequence text, DateTimeFormatter formatter)``
               -  ``public OffsetTime plus(``
                  `` long amountToAdd, TemporalUnit unit)``
               -  ``public OffsetTime plus(TemporalAmount amountToAdd)``
               -  ``public OffsetTime plusHours(long hours)``
               -  ``public OffsetTime plusMinutes(long minutes)``
               -  ``public OffsetTime plusNanos(long nanos)``
               -  ``public OffsetTime plusSeconds(long seconds)``
               -  ``public Object query(TemporalQuery query)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public LocalTime toLocalTime()``
               -  ``public String toString()``
               -  ``public OffsetTime truncatedTo(TemporalUnit unit)``
               -  ``public long until(``
                  `` Temporal endExclusive, TemporalUnit unit)``
               -  ``public OffsetTime with(TemporalAdjuster adjuster)``
               -  ``public OffsetTime with(``
                  `` TemporalField field, long newValue)``
               -  ``public OffsetTime withHour(int hour)``
               -  ``public OffsetTime withMinute(int minute)``
               -  ``public OffsetTime withNano(int nanoOfSecond)``
               -  ``public OffsetTime withOffsetSameInstant(``
                  `` ZoneOffset offset)``
               -  ``public OffsetTime withOffsetSameLocal(``
                  `` ZoneOffset offset)``
               -  ``public OffsetTime withSecond(int second)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   Period
            - 

               -  ``public static final Period ZERO``
               -  ``public Temporal addTo(Temporal temporal)``
               -  ``public static Period between(``
                  ``  LocalDate startDateInclusive,``
                  ``  LocalDate endDateExclusive)``
               -  ``public boolean equals(Object obj)``
               -  ``public static Period from(TemporalAmount amount)``
               -  ``public long get(TemporalUnit unit)``
               -  ``public IsoChronology getChronology()``
               -  ``public int getDays()``
               -  ``public int getMonths()``
               -  ``public java.util.List getUnits()``
               -  ``public int getYears()``
               -  ``public int hashCode()``
               -  ``public boolean isNegative()``
               -  ``public boolean isZero()``
               -  ``public Period minus(TemporalAmount amountToSubtract)``
               -  ``public Period minusDays(long daysToSubtract)``
               -  ``public Period minusMonths(long monthsToSubtract)``
               -  ``public Period minusYears(long yearsToSubtract)``
               -  ``public Period multipliedBy(int scalar)``
               -  ``public Period negated()``
               -  ``public Period normalized()``
               -  ``public static Period of(``
                  `` int years, int months, int days)``
               -  ``public static Period ofDays(int days)``
               -  ``public static Period ofMonths(int months)``
               -  ``public static Period ofWeeks(int weeks)``
               -  ``public static Period ofYears(int years)``
               -  ``public static Period parse(CharSequence text)``
               -  ``public Period plus(TemporalAmount amountToAdd)``
               -  ``public Period plusDays(long daysToAdd)``
               -  ``public Period plusMonths(long monthsToAdd)``
               -  ``public Period plusYears(long yearsToAdd)``
               -  ``public Temporal subtractFrom(Temporal temporal)``
               -  ``public String toString()``
               -  ``public long toTotalMonths()``
               -  ``public Period withDays(int days)``
               -  ``public Period withMonths(int months)``
               -  ``public Period withYears(int years)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   Year
            - 

               -  ``public static final int MAX_VALUE``
               -  ``public static final int MIN_VALUE``
               -  ``public Temporal adjustInto(Temporal temporal)``
               -  ``public LocalDate atDay(int dayOfYear)``
               -  ``public YearMonth atMonth(int month)``
               -  ``public YearMonth atMonth(Month month)``
               -  ``public LocalDate atMonthDay(MonthDay monthDay)``
               -  ``public int compareTo(Year other)``
               -  ``public boolean equals(Object obj)``
               -  ``public String format(DateTimeFormatter formatter)``
               -  ``public static Year from(TemporalAccessor temporal)``
               -  ``public int get(TemporalField field)``
               -  ``public long getLong(TemporalField field)``
               -  ``public int getValue()``
               -  ``public int hashCode()``
               -  ``public boolean isAfter(Year other)``
               -  ``public boolean isBefore(Year other)``
               -  ``public boolean isLeap()``
               -  ``public static boolean isLeap(long year)``
               -  ``public boolean isSupported(TemporalField field)``
               -  ``public boolean isSupported(TemporalUnit unit)``
               -  ``public boolean isValidMonthDay(MonthDay monthDay)``
               -  ``public int length()``
               -  ``public Year minus(``
                  `` long amountToSubtract, TemporalUnit unit)``
               -  ``public Year minus(TemporalAmount amountToSubtract)``
               -  ``public Year minusYears(long yearsToSubtract)``
               -  ``public static Year now()``
               -  ``public static Year now(Clock clock)``
               -  ``public static Year now(ZoneId zone)``
               -  ``public static Year of(int isoYear)``
               -  ``public static Year parse(CharSequence text)``
               -  ``public static Year parse(``
                  `` CharSequence text, DateTimeFormatter formatter)``
               -  ``public Year plus(``
                  `` long amountToAdd, TemporalUnit unit)``
               -  ``public Year plus(TemporalAmount amountToAdd)``
               -  ``public Year plusYears(long yearsToAdd)``
               -  ``public Object query(TemporalQuery query)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public String toString()``
               -  ``public long until(``
                  `` Temporal endExclusive, TemporalUnit unit)``
               -  ``public Year with(TemporalAdjuster adjuster)``
               -  ``public Year with(TemporalField field, long newValue)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   YearMonth
            - 

               -  ``public Temporal adjustInto(Temporal temporal)``
               -  ``public LocalDate atDay(int dayOfMonth)``
               -  ``public LocalDate atEndOfMonth()``
               -  ``public int compareTo(YearMonth other)``
               -  ``public boolean equals(Object obj)``
               -  ``public String format(DateTimeFormatter formatter)``
               -  ``public static YearMonth from(``
                  `` TemporalAccessor temporal)``
               -  ``public int get(TemporalField field)``
               -  ``public long getLong(TemporalField field)``
               -  ``public Month getMonth()``
               -  ``public int getMonthValue()``
               -  ``public int getYear()``
               -  ``public int hashCode()``
               -  ``public boolean isAfter(YearMonth other)``
               -  ``public boolean isBefore(YearMonth other)``
               -  ``public boolean isLeapYear()``
               -  ``public boolean isSupported(TemporalField field)``
               -  ``public boolean isSupported(TemporalUnit unit)``
               -  ``public boolean isValidDay(int dayOfMonth)``
               -  ``public int lengthOfMonth()``
               -  ``public int lengthOfYear()``
               -  ``public YearMonth minus(``
                  `` long amountToSubtract, TemporalUnit unit)``
               -  ``public YearMonth minus(``
                  `` TemporalAmount amountToSubtract)``
               -  ``public YearMonth minusMonths(long monthsToSubtract)``
               -  ``public YearMonth minusYears(long yearsToSubtract)``
               -  ``public static YearMonth now()``
               -  ``public static YearMonth now(Clock clock)``
               -  ``public static YearMonth now(ZoneId zone)``
               -  ``public static YearMonth of(int year, int month)``
               -  ``public static YearMonth of(int year, Month month)``
               -  ``public static YearMonth parse(CharSequence text)``
               -  ``public static YearMonth parse(``
                  `` CharSequence text, DateTimeFormatter formatter)``
               -  ``public YearMonth plus(``
                  `` long amountToAdd, TemporalUnit unit)``
               -  ``public YearMonth plus(TemporalAmount amountToAdd)``
               -  ``public YearMonth plusMonths(long monthsToAdd)``
               -  ``public YearMonth plusYears(long yearsToAdd)``
               -  ``public Object query(TemporalQuery query)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public String toString()``
               -  ``public long until(``
                  `` Temporal endExclusive, TemporalUnit unit)``
               -  ``public YearMonth with(TemporalAdjuster adjuster)``
               -  ``public YearMonth with(``
                  `` TemporalField field, long newValue)``
               -  ``public YearMonth withMonth(int month)``
               -  ``public YearMonth withYear(int year)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ZoneId
            - 

               -  ``public static final java.util.Map SHORT_IDS``
               -  ``public boolean equals(Object obj)``
               -  ``public static ZoneId from(TemporalAccessor temporal)``
               -  ``public static java.util.Set getAvailableZoneIds()``
               -  ``public String getDisplayName(``
                  `` TextStyle style, java.util.Locale locale)``
               -  ``public abstract String getId()``
               -  ``public abstract ZoneRules getRules()``
               -  ``public int hashCode()``
               -  ``public ZoneId normalized()``
               -  ``public static ZoneId of(String zoneId)``
               -  ``public static ZoneId of(``
                  `` String zoneId, java.util.Map aliasMap)``
               -  ``public static ZoneId ofOffset(``
                  `` String prefix, ZoneOffset offset)``
               -  ``public static ZoneId systemDefault()``
               -  ``public String toString()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ZoneOffset
            - 

               -  ``public static final ZoneOffset MAX``
               -  ``public static final ZoneOffset MIN``
               -  ``public static final ZoneOffset UTC``
               -  ``public Temporal adjustInto(Temporal temporal)``
               -  ``public int compareTo(ZoneOffset other)``
               -  ``public boolean equals(Object obj)``
               -  ``public static ZoneOffset from(``
                  `` TemporalAccessor temporal)``
               -  ``public int get(TemporalField field)``
               -  ``public String getId()``
               -  ``public long getLong(TemporalField field)``
               -  ``public ZoneRules getRules()``
               -  ``public int getTotalSeconds()``
               -  ``public int hashCode()``
               -  ``public boolean isSupported(TemporalField field)``
               -  ``public static ZoneOffset of(String offsetId)``
               -  ``public static ZoneOffset ofHours(int hours)``
               -  ``public static ZoneOffset ofHoursMinutes(``
                  `` int hours, int minutes)``
               -  ``public static ZoneOffset ofHoursMinutesSeconds(``
                  `` int hours, int minutes, int seconds)``
               -  ``public static ZoneOffset ofTotalSeconds(``
                  `` int totalSeconds)``
               -  ``public Object query(TemporalQuery query)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public String toString()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ZonedDateTime
            - 

               -  ``public boolean equals(Object obj)``
               -  ``public String format(DateTimeFormatter formatter)``
               -  ``public static ZonedDateTime from(``
                  `` TemporalAccessor temporal)``
               -  ``public int get(TemporalField field)``
               -  ``public int getDayOfMonth()``
               -  ``public DayOfWeek getDayOfWeek()``
               -  ``public int getDayOfYear()``
               -  ``public int getHour()``
               -  ``public long getLong(TemporalField field)``
               -  ``public int getMinute()``
               -  ``public Month getMonth()``
               -  ``public int getMonthValue()``
               -  ``public int getNano()``
               -  ``public ZoneOffset getOffset()``
               -  ``public int getSecond()``
               -  ``public int getYear()``
               -  ``public ZoneId getZone()``
               -  ``public int hashCode()``
               -  ``public boolean isSupported(TemporalField field)``
               -  ``public boolean isSupported(TemporalUnit unit)``
               -  ``public ZonedDateTime minus(``
                  `` long amountToSubtract, TemporalUnit unit)``
               -  ``public ZonedDateTime minus(``
                  `` TemporalAmount amountToSubtract)``
               -  ``public ZonedDateTime minusDays(long days)``
               -  ``public ZonedDateTime minusHours(long hours)``
               -  ``public ZonedDateTime minusMinutes(long minutes)``
               -  ``public ZonedDateTime minusMonths(long months)``
               -  ``public ZonedDateTime minusNanos(long nanos)``
               -  ``public ZonedDateTime minusSeconds(long seconds)``
               -  ``public ZonedDateTime minusWeeks(long weeks)``
               -  ``public ZonedDateTime minusYears(long years)``
               -  ``public static ZonedDateTime now()``
               -  ``public static ZonedDateTime now(Clock clock)``
               -  ``public static ZonedDateTime now(ZoneId zone)``
               -  ``public static ZonedDateTime of(``
                  ``  int year,``
                  ``  int month,``
                  ``  int dayOfMonth,``
                  ``  int hour,``
                  ``  int minute,``
                  ``  int second,``
                  ``  int nanoOfSecond,``
                  ``  ZoneId zone)``
               -  ``public static ZonedDateTime of(``
                  `` LocalDate date, LocalTime time, ZoneId zone)``
               -  ``public static ZonedDateTime of(``
                  `` LocalDateTime localDateTime, ZoneId zone)``
               -  ``public static ZonedDateTime ofInstant(``
                  `` Instant instant, ZoneId zone)``
               -  ``public static ZonedDateTime ofInstant(``
                  ``  LocalDateTime localDateTime,``
                  ``  ZoneOffset offset,``
                  ``  ZoneId zone)``
               -  ``public static ZonedDateTime ofLocal(``
                  ``  LocalDateTime localDateTime,``
                  ``  ZoneId zone,``
                  ``  ZoneOffset preferredOffset)``
               -  ``public static ZonedDateTime ofStrict(``
                  ``  LocalDateTime localDateTime,``
                  ``  ZoneOffset offset,``
                  ``  ZoneId zone)``
               -  ``public static ZonedDateTime parse(CharSequence text)``
               -  ``public static ZonedDateTime parse(``
                  `` CharSequence text, DateTimeFormatter formatter)``
               -  ``public ZonedDateTime plus(``
                  `` long amountToAdd, TemporalUnit unit)``
               -  ``public ZonedDateTime plus(``
                  `` TemporalAmount amountToAdd)``
               -  ``public ZonedDateTime plusDays(long days)``
               -  ``public ZonedDateTime plusHours(long hours)``
               -  ``public ZonedDateTime plusMinutes(long minutes)``
               -  ``public ZonedDateTime plusMonths(long months)``
               -  ``public ZonedDateTime plusNanos(long nanos)``
               -  ``public ZonedDateTime plusSeconds(long seconds)``
               -  ``public ZonedDateTime plusWeeks(long weeks)``
               -  ``public ZonedDateTime plusYears(long years)``
               -  ``public Object query(TemporalQuery query)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public LocalDate toLocalDate()``
               -  ``public LocalDateTime toLocalDateTime()``
               -  ``public LocalTime toLocalTime()``
               -  ``public OffsetDateTime toOffsetDateTime()``
               -  ``public String toString()``
               -  ``public ZonedDateTime truncatedTo(TemporalUnit unit)``
               -  ``public long until(``
                  `` Temporal endExclusive, TemporalUnit unit)``
               -  ``public ZonedDateTime with(TemporalAdjuster adjuster)``
               -  ``public ZonedDateTime with(``
                  `` TemporalField field, long newValue)``
               -  ``public ZonedDateTime withDayOfMonth(int dayOfMonth)``
               -  ``public ZonedDateTime withDayOfYear(int dayOfYear)``
               -  ``public ZonedDateTime withEarlierOffsetAtOverlap()``
               -  ``public ZonedDateTime withFixedOffsetZone()``
               -  ``public ZonedDateTime withHour(int hour)``
               -  ``public ZonedDateTime withLaterOffsetAtOverlap()``
               -  ``public ZonedDateTime withMinute(int minute)``
               -  ``public ZonedDateTime withMonth(int month)``
               -  ``public ZonedDateTime withNano(int nanoOfSecond)``
               -  ``public ZonedDateTime withSecond(int second)``
               -  ``public ZonedDateTime withYear(int year)``
               -  ``public ZonedDateTime withZoneSameInstant(``
                  `` ZoneId zone)``
               -  ``public ZonedDateTime withZoneSameLocal(ZoneId zone)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   AbstractChronology
            - 

               -  ``protected AbstractChronology()``
               -  ``public int compareTo(Chronology other)``
               -  ``public boolean equals(Object obj)``
               -  ``public int hashCode()``
               -  ``public ChronoLocalDate resolveDate(``
                  ``  java.util.Map fieldValues,``
                  ``  ResolverStyle resolverStyle)``
               -  ``public String toString()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ChronoLocalDate
            - 

               -  ``public Temporal adjustInto(Temporal temporal)``
               -  ``public ChronoLocalDateTime atTime(``
                  `` LocalTime localTime)``
               -  ``public int compareTo(ChronoLocalDate other)``
               -  ``public abstract boolean equals(Object p0)``
               -  ``public String format(DateTimeFormatter formatter)``
               -  ``public static ChronoLocalDate from(``
                  `` TemporalAccessor temporal)``
               -  ``public abstract Chronology getChronology()``
               -  ``public Era getEra()``
               -  ``public abstract int hashCode()``
               -  ``public boolean isAfter(ChronoLocalDate other)``
               -  ``public boolean isBefore(ChronoLocalDate other)``
               -  ``public boolean isEqual(ChronoLocalDate other)``
               -  ``public boolean isLeapYear()``
               -  ``public boolean isSupported(TemporalField field)``
               -  ``public boolean isSupported(TemporalUnit unit)``
               -  ``public abstract int lengthOfMonth()``
               -  ``public int lengthOfYear()``
               -  ``public ChronoLocalDate minus(``
                  `` long amountToSubtract, TemporalUnit unit)``
               -  ``public ChronoLocalDate minus(TemporalAmount amount)``
               -  ``public ChronoLocalDate plus(``
                  `` long amountToAdd, TemporalUnit unit)``
               -  ``public ChronoLocalDate plus(TemporalAmount amount)``
               -  ``public Object query(TemporalQuery query)``
               -  ``public static java.util.Comparator timeLineOrder()``
               -  ``public long toEpochDay()``
               -  ``public abstract String toString()``
               -  ``public abstract long until(``
                  `` Temporal p0, TemporalUnit p1)``
               -  ``public abstract ChronoPeriod until(``
                  `` ChronoLocalDate p0)``
               -  ``public ChronoLocalDate with(``
                  `` TemporalAdjuster adjuster)``
               -  ``public ChronoLocalDate with(``
                  `` TemporalField field, long newValue)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ChronoLocalDateTime
            - 

               -  ``public Temporal adjustInto(Temporal temporal)``
               -  ``public abstract ChronoZonedDateTime atZone(``
                  `` ZoneId p0)``
               -  ``public int compareTo(ChronoLocalDateTime other)``
               -  ``public abstract boolean equals(Object p0)``
               -  ``public String format(DateTimeFormatter formatter)``
               -  ``public static ChronoLocalDateTime from(``
                  `` TemporalAccessor temporal)``
               -  ``public Chronology getChronology()``
               -  ``public abstract int hashCode()``
               -  ``public boolean isAfter(ChronoLocalDateTime other)``
               -  ``public boolean isBefore(ChronoLocalDateTime other)``
               -  ``public boolean isEqual(ChronoLocalDateTime other)``
               -  ``public abstract boolean isSupported(``
                  `` TemporalField p0)``
               -  ``public boolean isSupported(TemporalUnit unit)``
               -  ``public ChronoLocalDateTime minus(``
                  `` long amountToSubtract, TemporalUnit unit)``
               -  ``public ChronoLocalDateTime minus(``
                  `` TemporalAmount amount)``
               -  ``public abstract ChronoLocalDateTime plus(``
                  `` long p0, TemporalUnit p1)``
               -  ``public ChronoLocalDateTime plus(``
                  `` TemporalAmount amount)``
               -  ``public Object query(TemporalQuery query)``
               -  ``public static java.util.Comparator timeLineOrder()``
               -  ``public long toEpochSecond(ZoneOffset offset)``
               -  ``public Instant toInstant(ZoneOffset offset)``
               -  ``public abstract ChronoLocalDate toLocalDate()``
               -  ``public abstract LocalTime toLocalTime()``
               -  ``public abstract String toString()``
               -  ``public ChronoLocalDateTime with(``
                  `` TemporalAdjuster adjuster)``
               -  ``public abstract ChronoLocalDateTime with(``
                  `` TemporalField p0, long p1)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ChronoPeriod
            - 

               -  ``public abstract Temporal addTo(Temporal p0)``
               -  ``public static ChronoPeriod between(``
                  ``  ChronoLocalDate startDateInclusive,``
                  ``  ChronoLocalDate endDateExclusive)``
               -  ``public abstract boolean equals(Object p0)``
               -  ``public abstract long get(TemporalUnit p0)``
               -  ``public abstract Chronology getChronology()``
               -  ``public abstract java.util.List getUnits()``
               -  ``public abstract int hashCode()``
               -  ``public boolean isNegative()``
               -  ``public boolean isZero()``
               -  ``public abstract ChronoPeriod minus(``
                  `` TemporalAmount p0)``
               -  ``public abstract ChronoPeriod multipliedBy(int p0)``
               -  ``public ChronoPeriod negated()``
               -  ``public abstract ChronoPeriod normalized()``
               -  ``public abstract ChronoPeriod plus(TemporalAmount p0)``
               -  ``public abstract Temporal subtractFrom(Temporal p0)``
               -  ``public abstract String toString()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ChronoZonedDateTime
            - 

               -  ``public int compareTo(ChronoZonedDateTime other)``
               -  ``public abstract boolean equals(Object p0)``
               -  ``public String format(DateTimeFormatter formatter)``
               -  ``public static ChronoZonedDateTime from(``
                  `` TemporalAccessor temporal)``
               -  ``public int get(TemporalField field)``
               -  ``public Chronology getChronology()``
               -  ``public long getLong(TemporalField field)``
               -  ``public abstract ZoneOffset getOffset()``
               -  ``public abstract ZoneId getZone()``
               -  ``public abstract int hashCode()``
               -  ``public boolean isAfter(ChronoZonedDateTime other)``
               -  ``public boolean isBefore(ChronoZonedDateTime other)``
               -  ``public boolean isEqual(ChronoZonedDateTime other)``
               -  ``public abstract boolean isSupported(``
                  `` TemporalField p0)``
               -  ``public boolean isSupported(TemporalUnit unit)``
               -  ``public ChronoZonedDateTime minus(``
                  `` long amountToSubtract, TemporalUnit unit)``
               -  ``public ChronoZonedDateTime minus(``
                  `` TemporalAmount amount)``
               -  ``public abstract ChronoZonedDateTime plus(``
                  `` long p0, TemporalUnit p1)``
               -  ``public ChronoZonedDateTime plus(``
                  `` TemporalAmount amount)``
               -  ``public Object query(TemporalQuery query)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public static java.util.Comparator timeLineOrder()``
               -  ``public long toEpochSecond()``
               -  ``public Instant toInstant()``
               -  ``public ChronoLocalDate toLocalDate()``
               -  ``public abstract ChronoLocalDateTime toLocalDateTime()``
               -  ``public LocalTime toLocalTime()``
               -  ``public abstract String toString()``
               -  ``public ChronoZonedDateTime with(``
                  `` TemporalAdjuster adjuster)``
               -  ``public abstract ChronoZonedDateTime with(``
                  `` TemporalField p0, long p1)``
               -  ``public abstract ChronoZonedDateTime withEarlierOffsetAtOverlap()``
               -  ``public abstract ChronoZonedDateTime withLaterOffsetAtOverlap()``
               -  ``public abstract ChronoZonedDateTime withZoneSameInstant(``
                  `` ZoneId p0)``
               -  ``public abstract ChronoZonedDateTime withZoneSameLocal(``
                  `` ZoneId p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   Chronology
            - 

               -  ``public abstract int compareTo(Chronology p0)``
               -  ``public abstract ChronoLocalDate date(``
                  `` int p0, int p1, int p2)``
               -  ``public ChronoLocalDate date(``
                  `` Era era, int yearOfEra, int month, int dayOfMonth)``
               -  ``public abstract ChronoLocalDate date(``
                  `` TemporalAccessor p0)``
               -  ``public abstract ChronoLocalDate dateEpochDay(``
                  `` long p0)``
               -  ``public ChronoLocalDate dateNow()``
               -  ``public ChronoLocalDate dateNow(Clock clock)``
               -  ``public ChronoLocalDate dateNow(ZoneId zone)``
               -  ``public abstract ChronoLocalDate dateYearDay(``
                  `` int p0, int p1)``
               -  ``public ChronoLocalDate dateYearDay(``
                  `` Era era, int yearOfEra, int dayOfYear)``
               -  ``public abstract boolean equals(Object p0)``
               -  ``public abstract Era eraOf(int p0)``
               -  ``public abstract java.util.List eras()``
               -  ``public static Chronology from(``
                  `` TemporalAccessor temporal)``
               -  ``public static java.util.Set getAvailableChronologies()``
               -  ``public abstract String getCalendarType()``
               -  ``public String getDisplayName(``
                  `` TextStyle style, java.util.Locale locale)``
               -  ``public abstract String getId()``
               -  ``public abstract int hashCode()``
               -  ``public abstract boolean isLeapYear(long p0)``
               -  ``public ChronoLocalDateTime localDateTime(``
                  `` TemporalAccessor temporal)``
               -  ``public static Chronology of(String id)``
               -  ``public static Chronology ofLocale(``
                  `` java.util.Locale locale)``
               -  ``public ChronoPeriod period(``
                  `` int years, int months, int days)``
               -  ``public abstract int prolepticYear(Era p0, int p1)``
               -  ``public abstract ValueRange range(ChronoField p0)``
               -  ``public abstract ChronoLocalDate resolveDate(``
                  `` java.util.Map p0, ResolverStyle p1)``
               -  ``public abstract String toString()``
               -  ``public ChronoZonedDateTime zonedDateTime(``
                  `` Instant instant, ZoneId zone)``
               -  ``public ChronoZonedDateTime zonedDateTime(``
                  `` TemporalAccessor temporal)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   Era
            - 

               -  ``public Temporal adjustInto(Temporal temporal)``
               -  ``public int get(TemporalField field)``
               -  ``public String getDisplayName(``
                  `` TextStyle style, java.util.Locale locale)``
               -  ``public long getLong(TemporalField field)``
               -  ``public abstract int getValue()``
               -  ``public boolean isSupported(TemporalField field)``
               -  ``public Object query(TemporalQuery query)``
               -  ``public ValueRange range(TemporalField field)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   HijrahChronology
            - 

               -  ``public static final HijrahChronology INSTANCE``
               -  ``public HijrahDate date(``
                  `` int prolepticYear, int month, int dayOfMonth)``
               -  ``public HijrahDate date(``
                  `` Era era, int yearOfEra, int month, int dayOfMonth)``
               -  ``public HijrahDate date(TemporalAccessor temporal)``
               -  ``public HijrahDate dateEpochDay(long epochDay)``
               -  ``public HijrahDate dateNow()``
               -  ``public HijrahDate dateNow(Clock clock)``
               -  ``public HijrahDate dateNow(ZoneId zone)``
               -  ``public HijrahDate dateYearDay(``
                  `` int prolepticYear, int dayOfYear)``
               -  ``public HijrahDate dateYearDay(``
                  `` Era era, int yearOfEra, int dayOfYear)``
               -  ``public HijrahEra eraOf(int eraValue)``
               -  ``public java.util.List eras()``
               -  ``public String getCalendarType()``
               -  ``public String getId()``
               -  ``public boolean isLeapYear(long prolepticYear)``
               -  ``public ChronoLocalDateTime localDateTime(``
                  `` TemporalAccessor temporal)``
               -  ``public int prolepticYear(Era era, int yearOfEra)``
               -  ``public ValueRange range(ChronoField field)``
               -  ``public HijrahDate resolveDate(``
                  ``  java.util.Map fieldValues,``
                  ``  ResolverStyle resolverStyle)``
               -  ``public ChronoZonedDateTime zonedDateTime(``
                  `` Instant instant, ZoneId zone)``
               -  ``public ChronoZonedDateTime zonedDateTime(``
                  `` TemporalAccessor temporal)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   HijrahDate
            - 

               -  ``public final ChronoLocalDateTime atTime(``
                  `` LocalTime localTime)``
               -  ``public boolean equals(Object obj)``
               -  ``public static HijrahDate from(``
                  `` TemporalAccessor temporal)``
               -  ``public HijrahChronology getChronology()``
               -  ``public HijrahEra getEra()``
               -  ``public long getLong(TemporalField field)``
               -  ``public int hashCode()``
               -  ``public boolean isLeapYear()``
               -  ``public int lengthOfMonth()``
               -  ``public int lengthOfYear()``
               -  ``public HijrahDate minus(``
                  `` long amountToSubtract, TemporalUnit unit)``
               -  ``public HijrahDate minus(TemporalAmount amount)``
               -  ``public static HijrahDate now()``
               -  ``public static HijrahDate now(Clock clock)``
               -  ``public static HijrahDate now(ZoneId zone)``
               -  ``public static HijrahDate of(``
                  `` int prolepticYear, int month, int dayOfMonth)``
               -  ``public HijrahDate plus(``
                  `` long amountToAdd, TemporalUnit unit)``
               -  ``public HijrahDate plus(TemporalAmount amount)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public long toEpochDay()``
               -  ``public ChronoPeriod until(ChronoLocalDate endDate)``
               -  ``public HijrahDate with(TemporalAdjuster adjuster)``
               -  ``public HijrahDate with(``
                  `` TemporalField field, long newValue)``
               -  ``public HijrahDate withVariant(``
                  `` HijrahChronology chronology)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   HijrahEra
            - 

               -  ``public static final HijrahEra AH``
               -  ``public int getValue()``
               -  ``public static HijrahEra of(int hijrahEra)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public static HijrahEra valueOf(String name)``
               -  ``public static HijrahEra[] values()``
            - Some methods (1) present in Android T are not supported.
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   IsoChronology
            - 

               -  ``public static final IsoChronology INSTANCE``
               -  ``public LocalDate date(``
                  `` int prolepticYear, int month, int dayOfMonth)``
               -  ``public LocalDate date(``
                  `` Era era, int yearOfEra, int month, int dayOfMonth)``
               -  ``public LocalDate date(TemporalAccessor temporal)``
               -  ``public LocalDate dateEpochDay(long epochDay)``
               -  ``public LocalDate dateNow()``
               -  ``public LocalDate dateNow(Clock clock)``
               -  ``public LocalDate dateNow(ZoneId zone)``
               -  ``public LocalDate dateYearDay(``
                  `` int prolepticYear, int dayOfYear)``
               -  ``public LocalDate dateYearDay(``
                  `` Era era, int yearOfEra, int dayOfYear)``
               -  ``public IsoEra eraOf(int eraValue)``
               -  ``public java.util.List eras()``
               -  ``public String getCalendarType()``
               -  ``public String getId()``
               -  ``public boolean isLeapYear(long prolepticYear)``
               -  ``public LocalDateTime localDateTime(``
                  `` TemporalAccessor temporal)``
               -  ``public Period period(``
                  `` int years, int months, int days)``
               -  ``public int prolepticYear(Era era, int yearOfEra)``
               -  ``public ValueRange range(ChronoField field)``
               -  ``public LocalDate resolveDate(``
                  ``  java.util.Map fieldValues,``
                  ``  ResolverStyle resolverStyle)``
               -  ``public ZonedDateTime zonedDateTime(``
                  `` Instant instant, ZoneId zone)``
               -  ``public ZonedDateTime zonedDateTime(``
                  `` TemporalAccessor temporal)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   IsoEra
            - 

               -  ``public static final IsoEra BCE``
               -  ``public static final IsoEra CE``
               -  ``public int getValue()``
               -  ``public static IsoEra of(int isoEra)``
               -  ``public static IsoEra valueOf(String name)``
               -  ``public static IsoEra[] values()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   JapaneseChronology
            - 

               -  ``public static final JapaneseChronology INSTANCE``
               -  ``public JapaneseDate date(``
                  `` int prolepticYear, int month, int dayOfMonth)``
               -  ``public JapaneseDate date(``
                  `` Era era, int yearOfEra, int month, int dayOfMonth)``
               -  ``public JapaneseDate date(TemporalAccessor temporal)``
               -  ``public JapaneseDate dateEpochDay(long epochDay)``
               -  ``public JapaneseDate dateNow()``
               -  ``public JapaneseDate dateNow(Clock clock)``
               -  ``public JapaneseDate dateNow(ZoneId zone)``
               -  ``public JapaneseDate dateYearDay(``
                  `` int prolepticYear, int dayOfYear)``
               -  ``public JapaneseDate dateYearDay(``
                  `` Era era, int yearOfEra, int dayOfYear)``
               -  ``public JapaneseEra eraOf(int eraValue)``
               -  ``public java.util.List eras()``
               -  ``public String getCalendarType()``
               -  ``public String getId()``
               -  ``public boolean isLeapYear(long prolepticYear)``
               -  ``public ChronoLocalDateTime localDateTime(``
                  `` TemporalAccessor temporal)``
               -  ``public int prolepticYear(Era era, int yearOfEra)``
               -  ``public ValueRange range(ChronoField field)``
               -  ``public JapaneseDate resolveDate(``
                  ``  java.util.Map fieldValues,``
                  ``  ResolverStyle resolverStyle)``
               -  ``public ChronoZonedDateTime zonedDateTime(``
                  `` Instant instant, ZoneId zone)``
               -  ``public ChronoZonedDateTime zonedDateTime(``
                  `` TemporalAccessor temporal)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   JapaneseDate
            - 

               -  ``public final ChronoLocalDateTime atTime(``
                  `` LocalTime localTime)``
               -  ``public boolean equals(Object obj)``
               -  ``public static JapaneseDate from(``
                  `` TemporalAccessor temporal)``
               -  ``public JapaneseChronology getChronology()``
               -  ``public JapaneseEra getEra()``
               -  ``public long getLong(TemporalField field)``
               -  ``public int hashCode()``
               -  ``public boolean isSupported(TemporalField field)``
               -  ``public int lengthOfMonth()``
               -  ``public int lengthOfYear()``
               -  ``public JapaneseDate minus(``
                  `` long amountToAdd, TemporalUnit unit)``
               -  ``public JapaneseDate minus(TemporalAmount amount)``
               -  ``public static JapaneseDate now()``
               -  ``public static JapaneseDate now(Clock clock)``
               -  ``public static JapaneseDate now(ZoneId zone)``
               -  ``public static JapaneseDate of(``
                  `` int prolepticYear, int month, int dayOfMonth)``
               -  ``public static JapaneseDate of(``
                  ``  JapaneseEra era,``
                  ``  int yearOfEra,``
                  ``  int month,``
                  ``  int dayOfMonth)``
               -  ``public JapaneseDate plus(``
                  `` long amountToAdd, TemporalUnit unit)``
               -  ``public JapaneseDate plus(TemporalAmount amount)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public long toEpochDay()``
               -  ``public ChronoPeriod until(ChronoLocalDate endDate)``
               -  ``public JapaneseDate with(TemporalAdjuster adjuster)``
               -  ``public JapaneseDate with(``
                  `` TemporalField field, long newValue)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   JapaneseEra
            - 

               -  ``public static final JapaneseEra HEISEI``
               -  ``public static final JapaneseEra MEIJI``
               -  ``public static final JapaneseEra SHOWA``
               -  ``public static final JapaneseEra TAISHO``
               -  ``public String getDisplayName(``
                  `` TextStyle style, java.util.Locale locale)``
               -  ``public int getValue()``
               -  ``public static JapaneseEra of(int japaneseEra)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public String toString()``
               -  ``public static JapaneseEra valueOf(``
                  `` String japaneseEra)``
               -  ``public static JapaneseEra[] values()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   MinguoChronology
            - 

               -  ``public static final MinguoChronology INSTANCE``
               -  ``public MinguoDate date(``
                  `` int prolepticYear, int month, int dayOfMonth)``
               -  ``public MinguoDate date(``
                  `` Era era, int yearOfEra, int month, int dayOfMonth)``
               -  ``public MinguoDate date(TemporalAccessor temporal)``
               -  ``public MinguoDate dateEpochDay(long epochDay)``
               -  ``public MinguoDate dateNow()``
               -  ``public MinguoDate dateNow(Clock clock)``
               -  ``public MinguoDate dateNow(ZoneId zone)``
               -  ``public MinguoDate dateYearDay(``
                  `` int prolepticYear, int dayOfYear)``
               -  ``public MinguoDate dateYearDay(``
                  `` Era era, int yearOfEra, int dayOfYear)``
               -  ``public MinguoEra eraOf(int eraValue)``
               -  ``public java.util.List eras()``
               -  ``public String getCalendarType()``
               -  ``public String getId()``
               -  ``public boolean isLeapYear(long prolepticYear)``
               -  ``public ChronoLocalDateTime localDateTime(``
                  `` TemporalAccessor temporal)``
               -  ``public int prolepticYear(Era era, int yearOfEra)``
               -  ``public ValueRange range(ChronoField field)``
               -  ``public MinguoDate resolveDate(``
                  ``  java.util.Map fieldValues,``
                  ``  ResolverStyle resolverStyle)``
               -  ``public ChronoZonedDateTime zonedDateTime(``
                  `` Instant instant, ZoneId zone)``
               -  ``public ChronoZonedDateTime zonedDateTime(``
                  `` TemporalAccessor temporal)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   MinguoDate
            - 

               -  ``public final ChronoLocalDateTime atTime(``
                  `` LocalTime localTime)``
               -  ``public boolean equals(Object obj)``
               -  ``public static MinguoDate from(``
                  `` TemporalAccessor temporal)``
               -  ``public MinguoChronology getChronology()``
               -  ``public MinguoEra getEra()``
               -  ``public long getLong(TemporalField field)``
               -  ``public int hashCode()``
               -  ``public int lengthOfMonth()``
               -  ``public MinguoDate minus(``
                  `` long amountToAdd, TemporalUnit unit)``
               -  ``public MinguoDate minus(TemporalAmount amount)``
               -  ``public static MinguoDate now()``
               -  ``public static MinguoDate now(Clock clock)``
               -  ``public static MinguoDate now(ZoneId zone)``
               -  ``public static MinguoDate of(``
                  `` int prolepticYear, int month, int dayOfMonth)``
               -  ``public MinguoDate plus(``
                  `` long amountToAdd, TemporalUnit unit)``
               -  ``public MinguoDate plus(TemporalAmount amount)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public long toEpochDay()``
               -  ``public ChronoPeriod until(ChronoLocalDate endDate)``
               -  ``public MinguoDate with(TemporalAdjuster adjuster)``
               -  ``public MinguoDate with(``
                  `` TemporalField field, long newValue)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   MinguoEra
            - 

               -  ``public static final MinguoEra BEFORE_ROC``
               -  ``public static final MinguoEra ROC``
               -  ``public int getValue()``
               -  ``public static MinguoEra of(int minguoEra)``
               -  ``public static MinguoEra valueOf(String name)``
               -  ``public static MinguoEra[] values()``
            - Some methods (1) present in Android T are not supported.
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ThaiBuddhistChronology
            - 

               -  ``public static final ThaiBuddhistChronology INSTANCE``
               -  ``public ThaiBuddhistDate date(``
                  `` int prolepticYear, int month, int dayOfMonth)``
               -  ``public ThaiBuddhistDate date(``
                  `` Era era, int yearOfEra, int month, int dayOfMonth)``
               -  ``public ThaiBuddhistDate date(``
                  `` TemporalAccessor temporal)``
               -  ``public ThaiBuddhistDate dateEpochDay(long epochDay)``
               -  ``public ThaiBuddhistDate dateNow()``
               -  ``public ThaiBuddhistDate dateNow(Clock clock)``
               -  ``public ThaiBuddhistDate dateNow(ZoneId zone)``
               -  ``public ThaiBuddhistDate dateYearDay(``
                  `` int prolepticYear, int dayOfYear)``
               -  ``public ThaiBuddhistDate dateYearDay(``
                  `` Era era, int yearOfEra, int dayOfYear)``
               -  ``public ThaiBuddhistEra eraOf(int eraValue)``
               -  ``public java.util.List eras()``
               -  ``public String getCalendarType()``
               -  ``public String getId()``
               -  ``public boolean isLeapYear(long prolepticYear)``
               -  ``public ChronoLocalDateTime localDateTime(``
                  `` TemporalAccessor temporal)``
               -  ``public int prolepticYear(Era era, int yearOfEra)``
               -  ``public ValueRange range(ChronoField field)``
               -  ``public ThaiBuddhistDate resolveDate(``
                  ``  java.util.Map fieldValues,``
                  ``  ResolverStyle resolverStyle)``
               -  ``public ChronoZonedDateTime zonedDateTime(``
                  `` Instant instant, ZoneId zone)``
               -  ``public ChronoZonedDateTime zonedDateTime(``
                  `` TemporalAccessor temporal)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ThaiBuddhistDate
            - 

               -  ``public final ChronoLocalDateTime atTime(``
                  `` LocalTime localTime)``
               -  ``public boolean equals(Object obj)``
               -  ``public static ThaiBuddhistDate from(``
                  `` TemporalAccessor temporal)``
               -  ``public ThaiBuddhistChronology getChronology()``
               -  ``public ThaiBuddhistEra getEra()``
               -  ``public long getLong(TemporalField field)``
               -  ``public int hashCode()``
               -  ``public int lengthOfMonth()``
               -  ``public ThaiBuddhistDate minus(``
                  `` long amountToAdd, TemporalUnit unit)``
               -  ``public ThaiBuddhistDate minus(TemporalAmount amount)``
               -  ``public static ThaiBuddhistDate now()``
               -  ``public static ThaiBuddhistDate now(Clock clock)``
               -  ``public static ThaiBuddhistDate now(ZoneId zone)``
               -  ``public static ThaiBuddhistDate of(``
                  `` int prolepticYear, int month, int dayOfMonth)``
               -  ``public ThaiBuddhistDate plus(``
                  `` long amountToAdd, TemporalUnit unit)``
               -  ``public ThaiBuddhistDate plus(TemporalAmount amount)``
               -  ``public ValueRange range(TemporalField field)``
               -  ``public long toEpochDay()``
               -  ``public ChronoPeriod until(ChronoLocalDate endDate)``
               -  ``public ThaiBuddhistDate with(``
                  `` TemporalAdjuster adjuster)``
               -  ``public ThaiBuddhistDate with(``
                  `` TemporalField field, long newValue)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.chrono``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ThaiBuddhistEra
            - 

               -  ``public static final ThaiBuddhistEra BE``
               -  ``public static final ThaiBuddhistEra BEFORE_BE``
               -  ``public int getValue()``
               -  ``public static ThaiBuddhistEra of(``
                  `` int thaiBuddhistEra)``
               -  ``public static ThaiBuddhistEra valueOf(String name)``
               -  ``public static ThaiBuddhistEra[] values()``
            - Some methods (1) present in Android T are not supported.
         - 

            - *``java.time.format``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   DateTimeFormatter
            - 

               -  ``public static final DateTimeFormatter BASIC_ISO_DATE``
               -  ``public static final DateTimeFormatter ISO_DATE``
               -  ``public static final DateTimeFormatter ISO_DATE_TIME``
               -  ``public static final DateTimeFormatter ISO_INSTANT``
               -  ``public static final DateTimeFormatter ISO_LOCAL_DATE``
               -  ``public static final DateTimeFormatter ISO_LOCAL_DATE_TIME``
               -  ``public static final DateTimeFormatter ISO_LOCAL_TIME``
               -  ``public static final DateTimeFormatter ISO_OFFSET_DATE``
               -  ``public static final DateTimeFormatter ISO_OFFSET_DATE_TIME``
               -  ``public static final DateTimeFormatter ISO_OFFSET_TIME``
               -  ``public static final DateTimeFormatter ISO_ORDINAL_DATE``
               -  ``public static final DateTimeFormatter ISO_TIME``
               -  ``public static final DateTimeFormatter ISO_WEEK_DATE``
               -  ``public static final DateTimeFormatter ISO_ZONED_DATE_TIME``
               -  ``public static final DateTimeFormatter RFC_1123_DATE_TIME``
               -  ``public String format(TemporalAccessor temporal)``
               -  ``public void formatTo(``
                  `` TemporalAccessor temporal, Appendable appendable)``
               -  ``public Chronology getChronology()``
               -  ``public DecimalStyle getDecimalStyle()``
               -  ``public java.util.Locale getLocale()``
               -  ``public java.util.Set getResolverFields()``
               -  ``public ResolverStyle getResolverStyle()``
               -  ``public ZoneId getZone()``
               -  ``public static DateTimeFormatter ofLocalizedDate(``
                  `` FormatStyle dateStyle)``
               -  ``public static DateTimeFormatter ofLocalizedDateTime(``
                  `` FormatStyle dateTimeStyle)``
               -  ``public static DateTimeFormatter ofLocalizedDateTime(``
                  `` FormatStyle dateStyle, FormatStyle timeStyle)``
               -  ``public static DateTimeFormatter ofLocalizedTime(``
                  `` FormatStyle timeStyle)``
               -  ``public static DateTimeFormatter ofPattern(``
                  `` String pattern)``
               -  ``public static DateTimeFormatter ofPattern(``
                  `` String pattern, java.util.Locale locale)``
               -  ``public Object parse(``
                  `` CharSequence text, TemporalQuery query)``
               -  ``public TemporalAccessor parse(CharSequence text)``
               -  ``public TemporalAccessor parse(``
                  ``  CharSequence text,``
                  ``  java.text.ParsePosition position)``
               -  ``public TemporalAccessor parseBest(``
                  `` CharSequence text, TemporalQuery[] queries)``
               -  ``public TemporalAccessor parseUnresolved(``
                  ``  CharSequence text,``
                  ``  java.text.ParsePosition position)``
               -  ``public static final TemporalQuery parsedExcessDays()``
               -  ``public static final TemporalQuery parsedLeapSecond()``
               -  ``public java.text.Format toFormat()``
               -  ``public java.text.Format toFormat(``
                  `` TemporalQuery parseQuery)``
               -  ``public String toString()``
               -  ``public DateTimeFormatter withChronology(``
                  `` Chronology chrono)``
               -  ``public DateTimeFormatter withDecimalStyle(``
                  `` DecimalStyle decimalStyle)``
               -  ``public DateTimeFormatter withLocale(``
                  `` java.util.Locale locale)``
               -  ``public DateTimeFormatter withResolverFields(``
                  `` java.util.Set resolverFields)``
               -  ``public DateTimeFormatter withResolverFields(``
                  `` TemporalField[] resolverFields)``
               -  ``public DateTimeFormatter withResolverStyle(``
                  `` ResolverStyle resolverStyle)``
               -  ``public DateTimeFormatter withZone(ZoneId zone)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.format``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   DateTimeFormatterBuilder
            - 

               -  ``public DateTimeFormatterBuilder()``
               -  ``public DateTimeFormatterBuilder append(``
                  `` DateTimeFormatter formatter)``
               -  ``public DateTimeFormatterBuilder appendChronologyId()``
               -  ``public DateTimeFormatterBuilder appendChronologyText(``
                  `` TextStyle textStyle)``
               -  ``public DateTimeFormatterBuilder appendFraction(``
                  ``  TemporalField field,``
                  ``  int minWidth,``
                  ``  int maxWidth,``
                  ``  boolean decimalPoint)``
               -  ``public DateTimeFormatterBuilder appendInstant()``
               -  ``public DateTimeFormatterBuilder appendInstant(``
                  `` int fractionalDigits)``
               -  ``public DateTimeFormatterBuilder appendLiteral(``
                  `` char literal)``
               -  ``public DateTimeFormatterBuilder appendLiteral(``
                  `` String literal)``
               -  ``public DateTimeFormatterBuilder appendLocalized(``
                  `` FormatStyle dateStyle, FormatStyle timeStyle)``
               -  ``public DateTimeFormatterBuilder appendLocalizedOffset(``
                  `` TextStyle style)``
               -  ``public DateTimeFormatterBuilder appendOffset(``
                  `` String pattern, String noOffsetText)``
               -  ``public DateTimeFormatterBuilder appendOffsetId()``
               -  ``public DateTimeFormatterBuilder appendOptional(``
                  `` DateTimeFormatter formatter)``
               -  ``public DateTimeFormatterBuilder appendPattern(``
                  `` String pattern)``
               -  ``public DateTimeFormatterBuilder appendText(``
                  `` TemporalField field)``
               -  ``public DateTimeFormatterBuilder appendText(``
                  `` TemporalField field, TextStyle textStyle)``
               -  ``public DateTimeFormatterBuilder appendText(``
                  `` TemporalField field, java.util.Map textLookup)``
               -  ``public DateTimeFormatterBuilder appendValue(``
                  `` TemporalField field)``
               -  ``public DateTimeFormatterBuilder appendValue(``
                  `` TemporalField field, int width)``
               -  ``public DateTimeFormatterBuilder appendValue(``
                  ``  TemporalField field,``
                  ``  int minWidth,``
                  ``  int maxWidth,``
                  ``  SignStyle signStyle)``
               -  ``public DateTimeFormatterBuilder appendValueReduced(``
                  ``  TemporalField field,``
                  ``  int width,``
                  ``  int maxWidth,``
                  ``  int baseValue)``
               -  ``public DateTimeFormatterBuilder appendValueReduced(``
                  ``  TemporalField field,``
                  ``  int width,``
                  ``  int maxWidth,``
                  ``  ChronoLocalDate baseDate)``
               -  ``public DateTimeFormatterBuilder appendZoneId()``
               -  ``public DateTimeFormatterBuilder appendZoneOrOffsetId()``
               -  ``public DateTimeFormatterBuilder appendZoneRegionId()``
               -  ``public DateTimeFormatterBuilder appendZoneText(``
                  `` TextStyle textStyle)``
               -  ``public DateTimeFormatterBuilder appendZoneText(``
                  `` TextStyle textStyle, java.util.Set preferredZones)``
               -  ``public static String getLocalizedDateTimePattern(``
                  ``  FormatStyle dateStyle,``
                  ``  FormatStyle timeStyle,``
                  ``  Chronology chrono,``
                  ``  java.util.Locale locale)``
               -  ``public DateTimeFormatterBuilder optionalEnd()``
               -  ``public DateTimeFormatterBuilder optionalStart()``
               -  ``public DateTimeFormatterBuilder padNext(``
                  `` int padWidth)``
               -  ``public DateTimeFormatterBuilder padNext(``
                  `` int padWidth, char padChar)``
               -  ``public DateTimeFormatterBuilder parseCaseInsensitive()``
               -  ``public DateTimeFormatterBuilder parseCaseSensitive()``
               -  ``public DateTimeFormatterBuilder parseDefaulting(``
                  `` TemporalField field, long value)``
               -  ``public DateTimeFormatterBuilder parseLenient()``
               -  ``public DateTimeFormatterBuilder parseStrict()``
               -  ``public DateTimeFormatter toFormatter()``
               -  ``public DateTimeFormatter toFormatter(``
                  `` java.util.Locale locale)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.format``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   DateTimeParseException
            - 

               -  ``public DateTimeParseException(``
                  ``  String message,``
                  ``  CharSequence parsedData,``
                  ``  int errorIndex)``
               -  ``public DateTimeParseException(``
                  ``  String message,``
                  ``  CharSequence parsedData,``
                  ``  int errorIndex,``
                  ``  Throwable cause)``
               -  ``public int getErrorIndex()``
               -  ``public String getParsedString()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.format``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   DecimalStyle
            - 

               -  ``public static final DecimalStyle STANDARD``
               -  ``public boolean equals(Object obj)``
               -  ``public static java.util.Set getAvailableLocales()``
               -  ``public char getDecimalSeparator()``
               -  ``public char getNegativeSign()``
               -  ``public char getPositiveSign()``
               -  ``public char getZeroDigit()``
               -  ``public int hashCode()``
               -  ``public static DecimalStyle of(``
                  `` java.util.Locale locale)``
               -  ``public static DecimalStyle ofDefaultLocale()``
               -  ``public String toString()``
               -  ``public DecimalStyle withDecimalSeparator(``
                  `` char decimalSeparator)``
               -  ``public DecimalStyle withNegativeSign(``
                  `` char negativeSign)``
               -  ``public DecimalStyle withPositiveSign(``
                  `` char positiveSign)``
               -  ``public DecimalStyle withZeroDigit(char zeroDigit)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.format``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   FormatStyle
            - 

               -  ``public static final FormatStyle FULL``
               -  ``public static final FormatStyle LONG``
               -  ``public static final FormatStyle MEDIUM``
               -  ``public static final FormatStyle SHORT``
               -  ``public static FormatStyle valueOf(String name)``
               -  ``public static FormatStyle[] values()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.format``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ResolverStyle
            - 

               -  ``public static final ResolverStyle LENIENT``
               -  ``public static final ResolverStyle SMART``
               -  ``public static final ResolverStyle STRICT``
               -  ``public static ResolverStyle valueOf(String name)``
               -  ``public static ResolverStyle[] values()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.format``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   SignStyle
            - 

               -  ``public static final SignStyle ALWAYS``
               -  ``public static final SignStyle EXCEEDS_PAD``
               -  ``public static final SignStyle NEVER``
               -  ``public static final SignStyle NORMAL``
               -  ``public static final SignStyle NOT_NEGATIVE``
               -  ``public static SignStyle valueOf(String name)``
               -  ``public static SignStyle[] values()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.format``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   TextStyle
            - 

               -  ``public static final TextStyle FULL``
               -  ``public static final TextStyle FULL_STANDALONE``
               -  ``public static final TextStyle NARROW``
               -  ``public static final TextStyle NARROW_STANDALONE``
               -  ``public static final TextStyle SHORT``
               -  ``public static final TextStyle SHORT_STANDALONE``
               -  ``public TextStyle asNormal()``
               -  ``public TextStyle asStandalone()``
               -  ``public boolean isStandalone()``
               -  ``public static TextStyle valueOf(String name)``
               -  ``public static TextStyle[] values()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.temporal``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ChronoField
            - 

               -  ``public static final ChronoField ALIGNED_DAY_OF_WEEK_IN_MONTH``
               -  ``public static final ChronoField ALIGNED_DAY_OF_WEEK_IN_YEAR``
               -  ``public static final ChronoField ALIGNED_WEEK_OF_MONTH``
               -  ``public static final ChronoField ALIGNED_WEEK_OF_YEAR``
               -  ``public static final ChronoField AMPM_OF_DAY``
               -  ``public static final ChronoField CLOCK_HOUR_OF_AMPM``
               -  ``public static final ChronoField CLOCK_HOUR_OF_DAY``
               -  ``public static final ChronoField DAY_OF_MONTH``
               -  ``public static final ChronoField DAY_OF_WEEK``
               -  ``public static final ChronoField DAY_OF_YEAR``
               -  ``public static final ChronoField EPOCH_DAY``
               -  ``public static final ChronoField ERA``
               -  ``public static final ChronoField HOUR_OF_AMPM``
               -  ``public static final ChronoField HOUR_OF_DAY``
               -  ``public static final ChronoField INSTANT_SECONDS``
               -  ``public static final ChronoField MICRO_OF_DAY``
               -  ``public static final ChronoField MICRO_OF_SECOND``
               -  ``public static final ChronoField MILLI_OF_DAY``
               -  ``public static final ChronoField MILLI_OF_SECOND``
               -  ``public static final ChronoField MINUTE_OF_DAY``
               -  ``public static final ChronoField MINUTE_OF_HOUR``
               -  ``public static final ChronoField MONTH_OF_YEAR``
               -  ``public static final ChronoField NANO_OF_DAY``
               -  ``public static final ChronoField NANO_OF_SECOND``
               -  ``public static final ChronoField OFFSET_SECONDS``
               -  ``public static final ChronoField PROLEPTIC_MONTH``
               -  ``public static final ChronoField SECOND_OF_DAY``
               -  ``public static final ChronoField SECOND_OF_MINUTE``
               -  ``public static final ChronoField YEAR``
               -  ``public static final ChronoField YEAR_OF_ERA``
               -  ``public Temporal adjustInto(``
                  `` Temporal temporal, long newValue)``
               -  ``public int checkValidIntValue(long value)``
               -  ``public long checkValidValue(long value)``
               -  ``public TemporalUnit getBaseUnit()``
               -  ``public String getDisplayName(``
                  `` java.util.Locale locale)``
               -  ``public long getFrom(TemporalAccessor temporal)``
               -  ``public TemporalUnit getRangeUnit()``
               -  ``public boolean isDateBased()``
               -  ``public boolean isSupportedBy(``
                  `` TemporalAccessor temporal)``
               -  ``public boolean isTimeBased()``
               -  ``public ValueRange range()``
               -  ``public ValueRange rangeRefinedBy(``
                  `` TemporalAccessor temporal)``
               -  ``public String toString()``
               -  ``public static ChronoField valueOf(String name)``
               -  ``public static ChronoField[] values()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.temporal``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ChronoUnit
            - 

               -  ``public static final ChronoUnit CENTURIES``
               -  ``public static final ChronoUnit DAYS``
               -  ``public static final ChronoUnit DECADES``
               -  ``public static final ChronoUnit ERAS``
               -  ``public static final ChronoUnit FOREVER``
               -  ``public static final ChronoUnit HALF_DAYS``
               -  ``public static final ChronoUnit HOURS``
               -  ``public static final ChronoUnit MICROS``
               -  ``public static final ChronoUnit MILLENNIA``
               -  ``public static final ChronoUnit MILLIS``
               -  ``public static final ChronoUnit MINUTES``
               -  ``public static final ChronoUnit MONTHS``
               -  ``public static final ChronoUnit NANOS``
               -  ``public static final ChronoUnit SECONDS``
               -  ``public static final ChronoUnit WEEKS``
               -  ``public static final ChronoUnit YEARS``
               -  ``public Temporal addTo(``
                  `` Temporal temporal, long amount)``
               -  ``public long between(``
                  ``  Temporal temporal1Inclusive,``
                  ``  Temporal temporal2Exclusive)``
               -  ``public Duration getDuration()``
               -  ``public boolean isDateBased()``
               -  ``public boolean isDurationEstimated()``
               -  ``public boolean isSupportedBy(Temporal temporal)``
               -  ``public boolean isTimeBased()``
               -  ``public String toString()``
               -  ``public static ChronoUnit valueOf(String name)``
               -  ``public static ChronoUnit[] values()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.temporal``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   IsoFields
            - 

               -  ``public static final TemporalField DAY_OF_QUARTER``
               -  ``public static final TemporalField QUARTER_OF_YEAR``
               -  ``public static final TemporalUnit QUARTER_YEARS``
               -  ``public static final TemporalField WEEK_BASED_YEAR``
               -  ``public static final TemporalUnit WEEK_BASED_YEARS``
               -  ``public static final TemporalField WEEK_OF_WEEK_BASED_YEAR``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.temporal``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   JulianFields
            - 

               -  ``public static final TemporalField JULIAN_DAY``
               -  ``public static final TemporalField MODIFIED_JULIAN_DAY``
               -  ``public static final TemporalField RATA_DIE``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.temporal``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   Temporal
            - 

               -  ``public abstract boolean isSupported(TemporalUnit p0)``
               -  ``public Temporal minus(``
                  `` long amountToSubtract, TemporalUnit unit)``
               -  ``public Temporal minus(TemporalAmount amount)``
               -  ``public abstract Temporal plus(``
                  `` long p0, TemporalUnit p1)``
               -  ``public Temporal plus(TemporalAmount amount)``
               -  ``public abstract long until(``
                  `` Temporal p0, TemporalUnit p1)``
               -  ``public Temporal with(TemporalAdjuster adjuster)``
               -  ``public abstract Temporal with(``
                  `` TemporalField p0, long p1)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.temporal``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   TemporalAccessor
            - 

               -  ``public int get(TemporalField field)``
               -  ``public abstract long getLong(TemporalField p0)``
               -  ``public abstract boolean isSupported(``
                  `` TemporalField p0)``
               -  ``public Object query(TemporalQuery query)``
               -  ``public ValueRange range(TemporalField field)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.temporal``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   TemporalAdjuster
            - 

               -  ``public abstract Temporal adjustInto(Temporal p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.temporal``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   TemporalAdjusters
            - 

               -  ``public static TemporalAdjuster dayOfWeekInMonth(``
                  `` int ordinal, DayOfWeek dayOfWeek)``
               -  ``public static TemporalAdjuster firstDayOfMonth()``
               -  ``public static TemporalAdjuster firstDayOfNextMonth()``
               -  ``public static TemporalAdjuster firstDayOfNextYear()``
               -  ``public static TemporalAdjuster firstDayOfYear()``
               -  ``public static TemporalAdjuster firstInMonth(``
                  `` DayOfWeek dayOfWeek)``
               -  ``public static TemporalAdjuster lastDayOfMonth()``
               -  ``public static TemporalAdjuster lastDayOfYear()``
               -  ``public static TemporalAdjuster lastInMonth(``
                  `` DayOfWeek dayOfWeek)``
               -  ``public static TemporalAdjuster next(``
                  `` DayOfWeek dayOfWeek)``
               -  ``public static TemporalAdjuster nextOrSame(``
                  `` DayOfWeek dayOfWeek)``
               -  ``public static TemporalAdjuster ofDateAdjuster(``
                  `` UnaryOperator dateBasedAdjuster)``
               -  ``public static TemporalAdjuster previous(``
                  `` DayOfWeek dayOfWeek)``
               -  ``public static TemporalAdjuster previousOrSame(``
                  `` DayOfWeek dayOfWeek)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.temporal``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   TemporalAmount
            - 

               -  ``public abstract Temporal addTo(Temporal p0)``
               -  ``public abstract long get(TemporalUnit p0)``
               -  ``public abstract java.util.List getUnits()``
               -  ``public abstract Temporal subtractFrom(Temporal p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.temporal``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   TemporalField
            - 

               -  ``public abstract Temporal adjustInto(``
                  `` Temporal p0, long p1)``
               -  ``public abstract TemporalUnit getBaseUnit()``
               -  ``public String getDisplayName(``
                  `` java.util.Locale locale)``
               -  ``public abstract long getFrom(TemporalAccessor p0)``
               -  ``public abstract TemporalUnit getRangeUnit()``
               -  ``public abstract boolean isDateBased()``
               -  ``public abstract boolean isSupportedBy(``
                  `` TemporalAccessor p0)``
               -  ``public abstract boolean isTimeBased()``
               -  ``public abstract ValueRange range()``
               -  ``public abstract ValueRange rangeRefinedBy(``
                  `` TemporalAccessor p0)``
               -  ``public TemporalAccessor resolve(``
                  ``  java.util.Map fieldValues,``
                  ``  TemporalAccessor partialTemporal,``
                  ``  ResolverStyle resolverStyle)``
               -  ``public abstract String toString()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.temporal``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   TemporalQueries
            - 

               -  ``public static TemporalQuery chronology()``
               -  ``public static TemporalQuery localDate()``
               -  ``public static TemporalQuery localTime()``
               -  ``public static TemporalQuery offset()``
               -  ``public static TemporalQuery precision()``
               -  ``public static TemporalQuery zone()``
               -  ``public static TemporalQuery zoneId()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.temporal``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   TemporalQuery
            - 

               -  ``public abstract Object queryFrom(``
                  `` TemporalAccessor p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.temporal``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   TemporalUnit
            - 

               -  ``public abstract Temporal addTo(Temporal p0, long p1)``
               -  ``public abstract long between(``
                  `` Temporal p0, Temporal p1)``
               -  ``public abstract Duration getDuration()``
               -  ``public abstract boolean isDateBased()``
               -  ``public abstract boolean isDurationEstimated()``
               -  ``public boolean isSupportedBy(Temporal temporal)``
               -  ``public abstract boolean isTimeBased()``
               -  ``public abstract String toString()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.temporal``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   UnsupportedTemporalTypeException
            - 

               -  ``public UnsupportedTemporalTypeException(``
                  `` String message)``
               -  ``public UnsupportedTemporalTypeException(``
                  `` String message, Throwable cause)``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.temporal``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ValueRange
            - 

               -  ``public int checkValidIntValue(``
                  `` long value, TemporalField field)``
               -  ``public long checkValidValue(``
                  `` long value, TemporalField field)``
               -  ``public boolean equals(Object obj)``
               -  ``public long getLargestMinimum()``
               -  ``public long getMaximum()``
               -  ``public long getMinimum()``
               -  ``public long getSmallestMaximum()``
               -  ``public int hashCode()``
               -  ``public boolean isFixed()``
               -  ``public boolean isIntValue()``
               -  ``public boolean isValidIntValue(long value)``
               -  ``public boolean isValidValue(long value)``
               -  ``public static ValueRange of(long min, long max)``
               -  ``public static ValueRange of(``
                  `` long min, long maxSmallest, long maxLargest)``
               -  ``public static ValueRange of(``
                  ``  long minSmallest,``
                  ``  long minLargest,``
                  ``  long maxSmallest,``
                  ``  long maxLargest)``
               -  ``public String toString()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.temporal``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   WeekFields
            - 

               -  ``public static final WeekFields ISO``
               -  ``public static final WeekFields SUNDAY_START``
               -  ``public static final TemporalUnit WEEK_BASED_YEARS``
               -  ``public TemporalField dayOfWeek()``
               -  ``public boolean equals(Object object)``
               -  ``public DayOfWeek getFirstDayOfWeek()``
               -  ``public int getMinimalDaysInFirstWeek()``
               -  ``public int hashCode()``
               -  ``public static WeekFields of(``
                  ``  DayOfWeek firstDayOfWeek,``
                  ``  int minimalDaysInFirstWeek)``
               -  ``public static WeekFields of(java.util.Locale locale)``
               -  ``public String toString()``
               -  ``public TemporalField weekBasedYear()``
               -  ``public TemporalField weekOfMonth()``
               -  ``public TemporalField weekOfWeekBasedYear()``
               -  ``public TemporalField weekOfYear()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.zone``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ZoneOffsetTransition
            - 

               -  ``public int compareTo(``
                  `` ZoneOffsetTransition transition)``
               -  ``public boolean equals(Object other)``
               -  ``public LocalDateTime getDateTimeAfter()``
               -  ``public LocalDateTime getDateTimeBefore()``
               -  ``public Duration getDuration()``
               -  ``public Instant getInstant()``
               -  ``public ZoneOffset getOffsetAfter()``
               -  ``public ZoneOffset getOffsetBefore()``
               -  ``public int hashCode()``
               -  ``public boolean isGap()``
               -  ``public boolean isOverlap()``
               -  ``public boolean isValidOffset(ZoneOffset offset)``
               -  ``public static ZoneOffsetTransition of(``
                  ``  LocalDateTime transition,``
                  ``  ZoneOffset offsetBefore,``
                  ``  ZoneOffset offsetAfter)``
               -  ``public long toEpochSecond()``
               -  ``public String toString()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.zone``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ZoneOffsetTransitionRule.
                   TimeDefinition
            - 

               -  ``public static final ZoneOffsetTransitionRule.TimeDefinition STANDARD``
               -  ``public static final ZoneOffsetTransitionRule.TimeDefinition UTC``
               -  ``public static final ZoneOffsetTransitionRule.TimeDefinition WALL``
               -  ``public LocalDateTime createDateTime(``
                  ``  LocalDateTime dateTime,``
                  ``  ZoneOffset standardOffset,``
                  ``  ZoneOffset wallOffset)``
               -  ``public static ZoneOffsetTransitionRule.TimeDefinition valueOf(``
                  `` String name)``
               -  ``public static ZoneOffsetTransitionRule.TimeDefinition[] values()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.zone``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ZoneOffsetTransitionRule
            - 

               -  ``public ZoneOffsetTransition createTransition(``
                  `` int year)``
               -  ``public boolean equals(Object otherRule)``
               -  ``public int getDayOfMonthIndicator()``
               -  ``public DayOfWeek getDayOfWeek()``
               -  ``public LocalTime getLocalTime()``
               -  ``public Month getMonth()``
               -  ``public ZoneOffset getOffsetAfter()``
               -  ``public ZoneOffset getOffsetBefore()``
               -  ``public ZoneOffset getStandardOffset()``
               -  ``public ZoneOffsetTransitionRule.TimeDefinition getTimeDefinition()``
               -  ``public int hashCode()``
               -  ``public boolean isMidnightEndOfDay()``
               -  ``public static ZoneOffsetTransitionRule of(``
                  ``  Month month,``
                  ``  int dayOfMonthIndicator,``
                  ``  DayOfWeek dayOfWeek,``
                  ``  LocalTime time,``
                  ``  boolean timeEndOfDay,``
                  ``  ZoneOffsetTransitionRule.TimeDefinition timeDefnition,``
                  ``  ZoneOffset standardOffset,``
                  ``  ZoneOffset offsetBefore,``
                  ``  ZoneOffset offsetAfter)``
               -  ``public String toString()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.zone``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ZoneRules
            - 

               -  ``public boolean equals(Object otherRules)``
               -  ``public Duration getDaylightSavings(Instant instant)``
               -  ``public ZoneOffset getOffset(Instant instant)``
               -  ``public ZoneOffset getOffset(``
                  `` LocalDateTime localDateTime)``
               -  ``public ZoneOffset getStandardOffset(Instant instant)``
               -  ``public ZoneOffsetTransition getTransition(``
                  `` LocalDateTime localDateTime)``
               -  ``public java.util.List getTransitionRules()``
               -  ``public java.util.List getTransitions()``
               -  ``public java.util.List getValidOffsets(``
                  `` LocalDateTime localDateTime)``
               -  ``public int hashCode()``
               -  ``public boolean isDaylightSavings(Instant instant)``
               -  ``public boolean isFixedOffset()``
               -  ``public boolean isValidOffset(``
                  `` LocalDateTime localDateTime, ZoneOffset offset)``
               -  ``public ZoneOffsetTransition nextTransition(``
                  `` Instant instant)``
               -  ``public static ZoneRules of(ZoneOffset offset)``
               -  ``public static ZoneRules of(``
                  ``  ZoneOffset baseStandardOffset,``
                  ``  ZoneOffset baseWallOffset,``
                  ``  java.util.List standardOffsetTransitionList,``
                  ``  java.util.List transitionList,``
                  ``  java.util.List lastRules)``
               -  ``public ZoneOffsetTransition previousTransition(``
                  `` Instant instant)``
               -  ``public String toString()``
            - | Fully implemented class.
               |  
         - 

            - *``java.time.zone``*
               `See customizations <#java-time-customizations>`__

               .. container::

                   ZoneRulesException
            - 

               -  ``public ZoneRulesException(String message)``
               -  ``public ZoneRulesException(``
                  `` String message, Throwable cause)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   Arrays
            - 

               -  ``public static Spliterator.OfDouble spliterator(``
                  `` double[] p0)``
               -  ``public static Spliterator.OfDouble spliterator(``
                  `` double[] p0, int p1, int p2)``
               -  ``public static Spliterator.OfInt spliterator(``
                  `` int[] p0)``
               -  ``public static Spliterator.OfInt spliterator(``
                  `` int[] p0, int p1, int p2)``
               -  ``public static Spliterator.OfLong spliterator(``
                  `` long[] p0)``
               -  ``public static Spliterator.OfLong spliterator(``
                  `` long[] p0, int p1, int p2)``
               -  ``public static Spliterator spliterator(Object[] p0)``
               -  ``public static Spliterator spliterator(``
                  `` Object[] p0, int p1, int p2)``
               -  ``public static DoubleStream stream(double[] p0)``
               -  ``public static DoubleStream stream(``
                  `` double[] p0, int p1, int p2)``
               -  ``public static IntStream stream(int[] p0)``
               -  ``public static IntStream stream(``
                  `` int[] p0, int p1, int p2)``
               -  ``public static LongStream stream(long[] p0)``
               -  ``public static LongStream stream(``
                  `` long[] p0, int p1, int p2)``
               -  ``public static Stream stream(Object[] p0)``
               -  ``public static Stream stream(``
                  `` Object[] p0, int p1, int p2)``
            - | Additional methods on existing class.
               |  
         - 

            - *``java.util``*

               .. container::

                   Calendar
            - 

               -  ``public final java.time.Instant toInstant()``
            - | Additional methods on existing class.
               |  
         - 

            - *``java.util``*

               .. container::

                   Collection
            - 

               -  ``public Stream parallelStream()``\ :sup:```1```
               -  ``public boolean removeIf(Predicate filter)``
               -  ``public Spliterator spliterator()``
               -  ``public Stream stream()``
               -  ``public Object[] toArray(``
                  `` IntFunction generator)``\ :sup:```3```
            - | Additional methods on existing class.
               |  :sup:`1` Supported only on devices which API level is 21 or
                 higher.
               |  :sup:`3` Not supported at all minSDK levels.
               |  
         - 

            - *``java.util``*

               .. container::

                   Collections
            - 

               -  ``public static Map synchronizedMap(Map p0)``
               -  ``public static SortedMap synchronizedSortedMap(``
                  `` SortedMap p0)``
            - | Additional methods on existing class.
               |  
         - 

            - *``java.util``*

               .. container::

                   Comparator
            - 

               -  ``public static Comparator comparing(``
                  `` Function keyExtractor)``
               -  ``public static Comparator comparing(``
                  `` Function keyExtractor, Comparator keyComparator)``
               -  ``public static Comparator comparingDouble(``
                  `` ToDoubleFunction keyExtractor)``
               -  ``public static Comparator comparingInt(``
                  `` ToIntFunction keyExtractor)``
               -  ``public static Comparator comparingLong(``
                  `` ToLongFunction keyExtractor)``
               -  ``public static Comparator naturalOrder()``
               -  ``public static Comparator nullsFirst(``
                  `` Comparator comparator)``
               -  ``public static Comparator nullsLast(``
                  `` Comparator comparator)``
               -  ``public static Comparator reverseOrder()``
               -  ``public Comparator reversed()``
               -  ``public Comparator thenComparing(Comparator other)``
               -  ``public Comparator thenComparing(``
                  `` Function keyExtractor)``
               -  ``public Comparator thenComparing(``
                  `` Function keyExtractor, Comparator keyComparator)``
               -  ``public Comparator thenComparingDouble(``
                  `` ToDoubleFunction keyExtractor)``
               -  ``public Comparator thenComparingInt(``
                  `` ToIntFunction keyExtractor)``
               -  ``public Comparator thenComparingLong(``
                  `` ToLongFunction keyExtractor)``
            - | Additional methods on existing class.
               |  
         - 

            - *``java.util``*

               .. container::

                   Date
            - 

               -  ``public static Date from(java.time.Instant p0)``
               -  ``public java.time.Instant toInstant()``
            - | Additional methods on existing class.
               |  
         - 

            - *``java.util``*

               .. container::

                   DoubleSummaryStatistics
            - 

               -  ``public DoubleSummaryStatistics()``
               -  ``public void accept(double value)``
               -  ``public void combine(DoubleSummaryStatistics other)``
               -  ``public final double getAverage()``
               -  ``public final long getCount()``
               -  ``public final double getMax()``
               -  ``public final double getMin()``
               -  ``public final double getSum()``
               -  ``public String toString()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   GregorianCalendar
            - 

               -  ``public static GregorianCalendar from(``
                  `` java.time.ZonedDateTime p0)``
               -  ``public java.time.ZonedDateTime toZonedDateTime()``
            - | Additional methods on existing class.
               |  
         - 

            - *``java.util``*

               .. container::

                   IntSummaryStatistics
            - 

               -  ``public IntSummaryStatistics()``
               -  ``public void accept(int value)``
               -  ``public void combine(IntSummaryStatistics other)``
               -  ``public final double getAverage()``
               -  ``public final long getCount()``
               -  ``public final int getMax()``
               -  ``public final int getMin()``
               -  ``public final long getSum()``
               -  ``public String toString()``
            - Some methods (1) present in Android T are not supported.
         - 

            - *``java.util``*

               .. container::

                   Iterator
            - 

               -  ``public void forEachRemaining(Consumer action)``
               -  ``public void remove()``
            - | Additional methods on existing class.
               |  
         - 

            - *``java.util``*

               .. container::

                   List
            - 

               -  ``public static List copyOf(Collection p0)``
               -  ``public static List of()``
               -  ``public static List of(Object p0)``
               -  ``public static List of(Object p0, Object p1)``
               -  ``public static List of(``
                  `` Object p0, Object p1, Object p2)``
               -  ``public static List of(``
                  `` Object p0, Object p1, Object p2, Object p3)``
               -  ``public static List of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4)``
               -  ``public static List of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4,``
                  ``  Object p5)``
               -  ``public static List of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4,``
                  ``  Object p5,``
                  ``  Object p6)``
               -  ``public static List of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4,``
                  ``  Object p5,``
                  ``  Object p6,``
                  ``  Object p7)``
               -  ``public static List of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4,``
                  ``  Object p5,``
                  ``  Object p6,``
                  ``  Object p7,``
                  ``  Object p8)``
               -  ``public static List of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4,``
                  ``  Object p5,``
                  ``  Object p6,``
                  ``  Object p7,``
                  ``  Object p8,``
                  ``  Object p9)``
               -  ``public static List of(Object[] p0)``
               -  ``public void replaceAll(UnaryOperator operator)``
               -  ``public void sort(Comparator c)``
               -  ``public Spliterator spliterator()``
            - | Additional methods on existing class.
               |  
         - 

            - *``java.util``*

               .. container::

                   LongSummaryStatistics
            - 

               -  ``public LongSummaryStatistics()``
               -  ``public void accept(int value)``
               -  ``public void accept(long value)``
               -  ``public void combine(LongSummaryStatistics other)``
               -  ``public final double getAverage()``
               -  ``public final long getCount()``
               -  ``public final long getMax()``
               -  ``public final long getMin()``
               -  ``public final long getSum()``
               -  ``public String toString()``
            - Some methods (1) present in Android T are not supported.
         - 

            - *``java.util``*

               .. container::

                   Map.
                   Entry
            - 

               -  ``public static Comparator comparingByKey()``
               -  ``public static Comparator comparingByKey(``
                  `` Comparator cmp)``
               -  ``public static Comparator comparingByValue()``
               -  ``public static Comparator comparingByValue(``
                  `` Comparator cmp)``
            - | Additional methods on existing class.
               |  
         - 

            - *``java.util``*

               .. container::

                   Map
            - 

               -  ``public Object compute(``
                  `` Object key, BiFunction remappingFunction)``
               -  ``public Object computeIfAbsent(``
                  `` Object key, Function mappingFunction)``
               -  ``public Object computeIfPresent(``
                  `` Object key, BiFunction remappingFunction)``
               -  ``public static Map copyOf(Map p0)``
               -  ``public static Map.Entry entry(Object p0, Object p1)``
               -  ``public void forEach(BiConsumer action)``
               -  ``public Object getOrDefault(``
                  `` Object key, Object defaultValue)``
               -  ``public Object merge(``
                  ``  Object key,``
                  ``  Object value,``
                  ``  BiFunction remappingFunction)``
               -  ``public static Map of()``
               -  ``public static Map of(Object p0, Object p1)``
               -  ``public static Map of(``
                  `` Object p0, Object p1, Object p2, Object p3)``
               -  ``public static Map of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4,``
                  ``  Object p5)``
               -  ``public static Map of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4,``
                  ``  Object p5,``
                  ``  Object p6,``
                  ``  Object p7)``
               -  ``public static Map of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4,``
                  ``  Object p5,``
                  ``  Object p6,``
                  ``  Object p7,``
                  ``  Object p8,``
                  ``  Object p9)``
               -  ``public static Map of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4,``
                  ``  Object p5,``
                  ``  Object p6,``
                  ``  Object p7,``
                  ``  Object p8,``
                  ``  Object p9,``
                  ``  Object p10,``
                  ``  Object p11)``
               -  ``public static Map of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4,``
                  ``  Object p5,``
                  ``  Object p6,``
                  ``  Object p7,``
                  ``  Object p8,``
                  ``  Object p9,``
                  ``  Object p10,``
                  ``  Object p11,``
                  ``  Object p12,``
                  ``  Object p13)``
               -  ``public static Map of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4,``
                  ``  Object p5,``
                  ``  Object p6,``
                  ``  Object p7,``
                  ``  Object p8,``
                  ``  Object p9,``
                  ``  Object p10,``
                  ``  Object p11,``
                  ``  Object p12,``
                  ``  Object p13,``
                  ``  Object p14,``
                  ``  Object p15)``
               -  ``public static Map of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4,``
                  ``  Object p5,``
                  ``  Object p6,``
                  ``  Object p7,``
                  ``  Object p8,``
                  ``  Object p9,``
                  ``  Object p10,``
                  ``  Object p11,``
                  ``  Object p12,``
                  ``  Object p13,``
                  ``  Object p14,``
                  ``  Object p15,``
                  ``  Object p16,``
                  ``  Object p17)``
               -  ``public static Map of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4,``
                  ``  Object p5,``
                  ``  Object p6,``
                  ``  Object p7,``
                  ``  Object p8,``
                  ``  Object p9,``
                  ``  Object p10,``
                  ``  Object p11,``
                  ``  Object p12,``
                  ``  Object p13,``
                  ``  Object p14,``
                  ``  Object p15,``
                  ``  Object p16,``
                  ``  Object p17,``
                  ``  Object p18,``
                  ``  Object p19)``
               -  ``public static Map ofEntries(Map.Entry[] p0)``
               -  ``public Object putIfAbsent(Object key, Object value)``
               -  ``public boolean remove(Object key, Object value)``
               -  ``public Object replace(Object key, Object value)``
               -  ``public boolean replace(``
                  `` Object key, Object oldValue, Object newValue)``
               -  ``public void replaceAll(BiFunction function)``
            - | Additional methods on existing class.
               |  
         - 

            - *``java.util``*

               .. container::

                   Optional
            - 

               -  ``public static Optional empty()``
               -  ``public boolean equals(Object obj)``
               -  ``public Optional filter(Predicate predicate)``
               -  ``public Optional flatMap(Function mapper)``
               -  ``public Object get()``
               -  ``public int hashCode()``
               -  ``public void ifPresent(Consumer consumer)``
               -  ``public void ifPresentOrElse(``
                  `` Consumer p0, Runnable p1)``
               -  ``public boolean isEmpty()``
               -  ``public boolean isPresent()``
               -  ``public Optional map(Function mapper)``
               -  ``public static Optional of(Object value)``
               -  ``public static Optional ofNullable(Object value)``
               -  ``public Optional or(Supplier p0)``
               -  ``public Object orElse(Object other)``
               -  ``public Object orElseGet(Supplier other)``
               -  ``public Object orElseThrow()``
               -  ``public Object orElseThrow(``
                  `` Supplier exceptionSupplier)``
               -  ``public Stream stream()``
               -  ``public String toString()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   OptionalDouble
            - 

               -  ``public static OptionalDouble empty()``
               -  ``public boolean equals(Object obj)``
               -  ``public double getAsDouble()``
               -  ``public int hashCode()``
               -  ``public void ifPresent(DoubleConsumer consumer)``
               -  ``public void ifPresentOrElse(``
                  `` DoubleConsumer p0, Runnable p1)``
               -  ``public boolean isEmpty()``
               -  ``public boolean isPresent()``
               -  ``public static OptionalDouble of(double value)``
               -  ``public double orElse(double other)``
               -  ``public double orElseGet(DoubleSupplier other)``
               -  ``public double orElseThrow()``
               -  ``public double orElseThrow(``
                  `` Supplier exceptionSupplier)``
               -  ``public DoubleStream stream()``
               -  ``public String toString()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   OptionalInt
            - 

               -  ``public static OptionalInt empty()``
               -  ``public boolean equals(Object obj)``
               -  ``public int getAsInt()``
               -  ``public int hashCode()``
               -  ``public void ifPresent(IntConsumer consumer)``
               -  ``public void ifPresentOrElse(``
                  `` IntConsumer p0, Runnable p1)``
               -  ``public boolean isEmpty()``
               -  ``public boolean isPresent()``
               -  ``public static OptionalInt of(int value)``
               -  ``public int orElse(int other)``
               -  ``public int orElseGet(IntSupplier other)``
               -  ``public int orElseThrow()``
               -  ``public int orElseThrow(Supplier exceptionSupplier)``
               -  ``public IntStream stream()``
               -  ``public String toString()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   OptionalLong
            - 

               -  ``public static OptionalLong empty()``
               -  ``public boolean equals(Object obj)``
               -  ``public long getAsLong()``
               -  ``public int hashCode()``
               -  ``public void ifPresent(LongConsumer consumer)``
               -  ``public void ifPresentOrElse(``
                  `` LongConsumer p0, Runnable p1)``
               -  ``public boolean isEmpty()``
               -  ``public boolean isPresent()``
               -  ``public static OptionalLong of(long value)``
               -  ``public long orElse(long other)``
               -  ``public long orElseGet(LongSupplier other)``
               -  ``public long orElseThrow()``
               -  ``public long orElseThrow(Supplier exceptionSupplier)``
               -  ``public LongStream stream()``
               -  ``public String toString()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   PrimitiveIterator.
                   OfDouble
            - 

               -  ``public void forEachRemaining(Consumer action)``
               -  ``public void forEachRemaining(DoubleConsumer action)``
               -  ``public Double next()``
               -  ``public abstract double nextDouble()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   PrimitiveIterator.
                   OfInt
            - 

               -  ``public void forEachRemaining(Consumer action)``
               -  ``public void forEachRemaining(IntConsumer action)``
               -  ``public Integer next()``
               -  ``public abstract int nextInt()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   PrimitiveIterator.
                   OfLong
            - 

               -  ``public void forEachRemaining(Consumer action)``
               -  ``public void forEachRemaining(LongConsumer action)``
               -  ``public Long next()``
               -  ``public abstract long nextLong()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   PrimitiveIterator
            - 

               -  ``public abstract void forEachRemaining(Object p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   Set
            - 

               -  ``public static Set copyOf(Collection p0)``
               -  ``public static Set of()``
               -  ``public static Set of(Object p0)``
               -  ``public static Set of(Object p0, Object p1)``
               -  ``public static Set of(``
                  `` Object p0, Object p1, Object p2)``
               -  ``public static Set of(``
                  `` Object p0, Object p1, Object p2, Object p3)``
               -  ``public static Set of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4)``
               -  ``public static Set of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4,``
                  ``  Object p5)``
               -  ``public static Set of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4,``
                  ``  Object p5,``
                  ``  Object p6)``
               -  ``public static Set of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4,``
                  ``  Object p5,``
                  ``  Object p6,``
                  ``  Object p7)``
               -  ``public static Set of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4,``
                  ``  Object p5,``
                  ``  Object p6,``
                  ``  Object p7,``
                  ``  Object p8)``
               -  ``public static Set of(``
                  ``  Object p0,``
                  ``  Object p1,``
                  ``  Object p2,``
                  ``  Object p3,``
                  ``  Object p4,``
                  ``  Object p5,``
                  ``  Object p6,``
                  ``  Object p7,``
                  ``  Object p8,``
                  ``  Object p9)``
               -  ``public static Set of(Object[] p0)``
               -  ``public Spliterator spliterator()``
            - | Additional methods on existing class.
               |  
         - 

            - *``java.util``*

               .. container::

                   SortedSet
            - 

               -  ``public Spliterator spliterator()``
            - | Additional methods on existing class.
               |  
         - 

            - *``java.util``*

               .. container::

                   Spliterator.
                   OfDouble
            - 

               -  ``public void forEachRemaining(Consumer action)``
               -  ``public void forEachRemaining(DoubleConsumer action)``
               -  ``public boolean tryAdvance(Consumer action)``
               -  ``public abstract boolean tryAdvance(``
                  `` DoubleConsumer p0)``
               -  ``public abstract Spliterator.OfDouble trySplit()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   Spliterator.
                   OfInt
            - 

               -  ``public void forEachRemaining(Consumer action)``
               -  ``public void forEachRemaining(IntConsumer action)``
               -  ``public boolean tryAdvance(Consumer action)``
               -  ``public abstract boolean tryAdvance(IntConsumer p0)``
               -  ``public abstract Spliterator.OfInt trySplit()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   Spliterator.
                   OfLong
            - 

               -  ``public void forEachRemaining(Consumer action)``
               -  ``public void forEachRemaining(LongConsumer action)``
               -  ``public boolean tryAdvance(Consumer action)``
               -  ``public abstract boolean tryAdvance(LongConsumer p0)``
               -  ``public abstract Spliterator.OfLong trySplit()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   Spliterator.
                   OfPrimitive
            - 

               -  ``public void forEachRemaining(Object action)``
               -  ``public abstract boolean tryAdvance(Object p0)``
               -  ``public abstract Spliterator.OfPrimitive trySplit()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   Spliterator
            - 

               -  ``public static final int CONCURRENT``
               -  ``public static final int DISTINCT``
               -  ``public static final int IMMUTABLE``
               -  ``public static final int NONNULL``
               -  ``public static final int ORDERED``
               -  ``public static final int SIZED``
               -  ``public static final int SORTED``
               -  ``public static final int SUBSIZED``
               -  ``public abstract int characteristics()``
               -  ``public abstract long estimateSize()``
               -  ``public void forEachRemaining(Consumer action)``
               -  ``public Comparator getComparator()``
               -  ``public long getExactSizeIfKnown()``
               -  ``public boolean hasCharacteristics(``
                  `` int characteristics)``
               -  ``public abstract boolean tryAdvance(Consumer p0)``
               -  ``public abstract Spliterator trySplit()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   Spliterators.
                   AbstractDoubleSpliterator
            - 

               -  ``protected Spliterators.AbstractDoubleSpliterator(``
                  `` long est, int additionalCharacteristics)``
               -  ``public int characteristics()``
               -  ``public long estimateSize()``
               -  ``public Spliterator.OfDouble trySplit()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   Spliterators.
                   AbstractIntSpliterator
            - 

               -  ``protected Spliterators.AbstractIntSpliterator(``
                  `` long est, int additionalCharacteristics)``
               -  ``public int characteristics()``
               -  ``public long estimateSize()``
               -  ``public Spliterator.OfInt trySplit()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   Spliterators.
                   AbstractLongSpliterator
            - 

               -  ``protected Spliterators.AbstractLongSpliterator(``
                  `` long est, int additionalCharacteristics)``
               -  ``public int characteristics()``
               -  ``public long estimateSize()``
               -  ``public Spliterator.OfLong trySplit()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   Spliterators.
                   AbstractSpliterator
            - 

               -  ``protected Spliterators.AbstractSpliterator(``
                  `` long est, int additionalCharacteristics)``
               -  ``public int characteristics()``
               -  ``public long estimateSize()``
               -  ``public Spliterator trySplit()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   Spliterators
            - 

               -  ``public static Spliterator.OfDouble emptyDoubleSpliterator()``
               -  ``public static Spliterator.OfInt emptyIntSpliterator()``
               -  ``public static Spliterator.OfLong emptyLongSpliterator()``
               -  ``public static Spliterator emptySpliterator()``
               -  ``public static Iterator iterator(``
                  `` Spliterator spliterator)``
               -  ``public static PrimitiveIterator.OfDouble iterator(``
                  `` Spliterator.OfDouble spliterator)``
               -  ``public static PrimitiveIterator.OfInt iterator(``
                  `` Spliterator.OfInt spliterator)``
               -  ``public static PrimitiveIterator.OfLong iterator(``
                  `` Spliterator.OfLong spliterator)``
               -  ``public static Spliterator.OfDouble spliterator(``
                  ``  PrimitiveIterator.OfDouble iterator,``
                  ``  long size,``
                  ``  int characteristics)``
               -  ``public static Spliterator.OfDouble spliterator(``
                  `` double[] array, int additionalCharacteristics)``
               -  ``public static Spliterator.OfDouble spliterator(``
                  ``  double[] array,``
                  ``  int fromIndex,``
                  ``  int toIndex,``
                  ``  int additionalCharacteristics)``
               -  ``public static Spliterator.OfInt spliterator(``
                  ``  PrimitiveIterator.OfInt iterator,``
                  ``  long size,``
                  ``  int characteristics)``
               -  ``public static Spliterator.OfInt spliterator(``
                  `` int[] array, int additionalCharacteristics)``
               -  ``public static Spliterator.OfInt spliterator(``
                  ``  int[] array,``
                  ``  int fromIndex,``
                  ``  int toIndex,``
                  ``  int additionalCharacteristics)``
               -  ``public static Spliterator.OfLong spliterator(``
                  ``  PrimitiveIterator.OfLong iterator,``
                  ``  long size,``
                  ``  int characteristics)``
               -  ``public static Spliterator.OfLong spliterator(``
                  `` long[] array, int additionalCharacteristics)``
               -  ``public static Spliterator.OfLong spliterator(``
                  ``  long[] array,``
                  ``  int fromIndex,``
                  ``  int toIndex,``
                  ``  int additionalCharacteristics)``
               -  ``public static Spliterator spliterator(``
                  `` Collection c, int characteristics)``
               -  ``public static Spliterator spliterator(``
                  `` Iterator iterator, long size, int characteristics)``
               -  ``public static Spliterator spliterator(``
                  `` Object[] array, int additionalCharacteristics)``
               -  ``public static Spliterator spliterator(``
                  ``  Object[] array,``
                  ``  int fromIndex,``
                  ``  int toIndex,``
                  ``  int additionalCharacteristics)``
               -  ``public static Spliterator.OfDouble spliteratorUnknownSize(``
                  ``  PrimitiveIterator.OfDouble iterator,``
                  ``  int characteristics)``
               -  ``public static Spliterator.OfInt spliteratorUnknownSize(``
                  ``  PrimitiveIterator.OfInt iterator,``
                  ``  int characteristics)``
               -  ``public static Spliterator.OfLong spliteratorUnknownSize(``
                  ``  PrimitiveIterator.OfLong iterator,``
                  ``  int characteristics)``
               -  ``public static Spliterator spliteratorUnknownSize(``
                  `` Iterator iterator, int characteristics)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   StringJoiner
            - 

               -  ``public StringJoiner(CharSequence delimiter)``
               -  ``public StringJoiner(``
                  ``  CharSequence delimiter,``
                  ``  CharSequence prefix,``
                  ``  CharSequence suffix)``
               -  ``public StringJoiner add(CharSequence newElement)``
               -  ``public int length()``
               -  ``public StringJoiner merge(StringJoiner other)``
               -  ``public StringJoiner setEmptyValue(``
                  `` CharSequence emptyValue)``
               -  ``public String toString()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util``*

               .. container::

                   TimeZone
            - 

               -  ``public static TimeZone getTimeZone(String p0)``
               -  ``public static TimeZone getTimeZone(``
                  `` java.time.ZoneId p0)``
               -  ``public java.time.ZoneId toZoneId()``
            - | Additional methods on existing class.
               |  
         - 

            - *``java.util.concurrent``*

               .. container::

                   ConcurrentHashMap.
                   KeySetView
            - 

               -  ``public boolean add(Object e)``
               -  ``public boolean addAll(Collection c)``
               -  ``public boolean contains(Object o)``
               -  ``public boolean equals(Object o)``
               -  ``public void forEach(Consumer action)``
               -  ``public Object getMappedValue()``
               -  ``public int hashCode()``
               -  ``public Iterator iterator()``
               -  ``public boolean remove(Object o)``
               -  ``public Spliterator spliterator()``
            - Some methods (9) present in Android T are not supported.
         - 

            - *``java.util.concurrent``*

               .. container::

                   ConcurrentHashMap
            - 

               -  ``public ConcurrentHashMap()``
               -  ``public ConcurrentHashMap(int initialCapacity)``
               -  ``public ConcurrentHashMap(``
                  `` int initialCapacity, float loadFactor)``
               -  ``public ConcurrentHashMap(``
                  ``  int initialCapacity,``
                  ``  float loadFactor,``
                  ``  int concurrencyLevel)``
               -  ``public ConcurrentHashMap(Map m)``
               -  ``public void clear()``
               -  ``public Object compute(``
                  `` Object key, BiFunction remappingFunction)``
               -  ``public Object computeIfAbsent(``
                  `` Object key, Function mappingFunction)``
               -  ``public Object computeIfPresent(``
                  `` Object key, BiFunction remappingFunction)``
               -  ``public boolean contains(Object value)``
               -  ``public boolean containsKey(Object key)``
               -  ``public boolean containsValue(Object value)``
               -  ``public Enumeration elements()``
               -  ``public Set entrySet()``
               -  ``public boolean equals(Object o)``
               -  ``public void forEach(BiConsumer action)``
               -  ``public Object get(Object key)``
               -  ``public Object getOrDefault(``
                  `` Object key, Object defaultValue)``
               -  ``public int hashCode()``
               -  ``public boolean isEmpty()``
               -  ``public Set keySet()``
               -  ``public Enumeration keys()``
               -  ``public long mappingCount()``
               -  ``public Object merge(``
                  ``  Object key,``
                  ``  Object value,``
                  ``  BiFunction remappingFunction)``
               -  ``public Object put(Object key, Object value)``
               -  ``public void putAll(Map m)``
               -  ``public Object putIfAbsent(Object key, Object value)``
               -  ``public Object remove(Object key)``
               -  ``public boolean remove(Object key, Object value)``
               -  ``public Object replace(Object key, Object value)``
               -  ``public boolean replace(``
                  `` Object key, Object oldValue, Object newValue)``
               -  ``public void replaceAll(BiFunction function)``
               -  ``public int size()``
               -  ``public String toString()``
               -  ``public Collection values()``
            - Some methods (34) present in Android T are not supported.
         - 

            - *``java.util.concurrent``*

               .. container::

                   ConcurrentMap
            - 

               -  ``public Object compute(``
                  `` Object key, BiFunction remappingFunction)``
               -  ``public Object computeIfAbsent(``
                  `` Object key, Function mappingFunction)``
               -  ``public Object computeIfPresent(``
                  `` Object key, BiFunction remappingFunction)``
               -  ``public void forEach(BiConsumer action)``
               -  ``public Object getOrDefault(``
                  `` Object key, Object defaultValue)``
               -  ``public Object merge(``
                  ``  Object key,``
                  ``  Object value,``
                  ``  BiFunction remappingFunction)``
               -  ``public void replaceAll(BiFunction function)``
            - | Additional methods on existing class.
               |  
         - 

            - *``java.util.concurrent``*

               .. container::

                   ThreadLocalRandom
            - 

               -  ``public static ThreadLocalRandom current()``
               -  ``public DoubleStream doubles()``
               -  ``public DoubleStream doubles(``
                  ``  double randomNumberOrigin,``
                  ``  double randomNumberBound)``
               -  ``public DoubleStream doubles(long streamSize)``
               -  ``public DoubleStream doubles(``
                  ``  long streamSize,``
                  ``  double randomNumberOrigin,``
                  ``  double randomNumberBound)``
               -  ``public IntStream ints()``
               -  ``public IntStream ints(``
                  `` int randomNumberOrigin, int randomNumberBound)``
               -  ``public IntStream ints(long streamSize)``
               -  ``public IntStream ints(``
                  ``  long streamSize,``
                  ``  int randomNumberOrigin,``
                  ``  int randomNumberBound)``
               -  ``public LongStream longs()``
               -  ``public LongStream longs(long streamSize)``
               -  ``public LongStream longs(``
                  `` long randomNumberOrigin, long randomNumberBound)``
               -  ``public LongStream longs(``
                  ``  long streamSize,``
                  ``  long randomNumberOrigin,``
                  ``  long randomNumberBound)``
               -  ``protected int next(int bits)``
               -  ``public boolean nextBoolean()``
               -  ``public double nextDouble()``
               -  ``public double nextDouble(double bound)``
               -  ``public double nextDouble(``
                  `` double origin, double bound)``
               -  ``public float nextFloat()``
               -  ``public double nextGaussian()``
               -  ``public int nextInt()``
               -  ``public int nextInt(int bound)``
               -  ``public int nextInt(int origin, int bound)``
               -  ``public long nextLong()``
               -  ``public long nextLong(long bound)``
               -  ``public long nextLong(long origin, long bound)``
               -  ``public void setSeed(long seed)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.``
               `` concurrent.atomic``*

               .. container::

                   AtomicInteger
            - 

               -  ``public final int accumulateAndGet(``
                  `` int p0, IntBinaryOperator p1)``
               -  ``public final int getAndAccumulate(``
                  `` int p0, IntBinaryOperator p1)``
               -  ``public final int getAndUpdate(IntUnaryOperator p0)``
               -  ``public final int updateAndGet(IntUnaryOperator p0)``
            - | Additional methods on existing class.
               |  
         - 

            - *``java.util.``
               `` concurrent.atomic``*

               .. container::

                   AtomicLong
            - 

               -  ``public final long accumulateAndGet(``
                  `` long p0, LongBinaryOperator p1)``
               -  ``public final long getAndAccumulate(``
                  `` long p0, LongBinaryOperator p1)``
               -  ``public final long getAndUpdate(LongUnaryOperator p0)``
               -  ``public final long updateAndGet(LongUnaryOperator p0)``
            - | Additional methods on existing class.
               |  
         - 

            - *``java.util.``
               `` concurrent.atomic``*

               .. container::

                   AtomicReference
            - 

               -  ``public final Object accumulateAndGet(``
                  `` Object p0, BinaryOperator p1)``
               -  ``public final Object getAndAccumulate(``
                  `` Object p0, BinaryOperator p1)``
               -  ``public final Object getAndUpdate(UnaryOperator p0)``
               -  ``public final Object updateAndGet(UnaryOperator p0)``
            - | Additional methods on existing class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   BiConsumer
            - 

               -  ``public abstract void accept(Object p0, Object p1)``
               -  ``public BiConsumer andThen(BiConsumer after)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   BiFunction
            - 

               -  ``public BiFunction andThen(Function after)``
               -  ``public abstract Object apply(Object p0, Object p1)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   BiPredicate
            - 

               -  ``public BiPredicate and(BiPredicate other)``
               -  ``public BiPredicate negate()``
               -  ``public BiPredicate or(BiPredicate other)``
               -  ``public abstract boolean test(Object p0, Object p1)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   BinaryOperator
            - 

               -  ``public static BinaryOperator maxBy(``
                  `` Comparator comparator)``
               -  ``public static BinaryOperator minBy(``
                  `` Comparator comparator)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   BooleanSupplier
            - 

               -  ``public abstract boolean getAsBoolean()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   Consumer
            - 

               -  ``public abstract void accept(Object p0)``
               -  ``public Consumer andThen(Consumer after)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   DoubleBinaryOperator
            - 

               -  ``public abstract double applyAsDouble(``
                  `` double p0, double p1)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   DoubleConsumer
            - 

               -  ``public abstract void accept(double p0)``
               -  ``public DoubleConsumer andThen(DoubleConsumer after)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   DoubleFunction
            - 

               -  ``public abstract Object apply(double p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   DoublePredicate
            - 

               -  ``public DoublePredicate and(DoublePredicate other)``
               -  ``public DoublePredicate negate()``
               -  ``public DoublePredicate or(DoublePredicate other)``
               -  ``public abstract boolean test(double p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   DoubleSupplier
            - 

               -  ``public abstract double getAsDouble()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   DoubleToIntFunction
            - 

               -  ``public abstract int applyAsInt(double p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   DoubleToLongFunction
            - 

               -  ``public abstract long applyAsLong(double p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   DoubleUnaryOperator
            - 

               -  ``public DoubleUnaryOperator andThen(``
                  `` DoubleUnaryOperator after)``
               -  ``public abstract double applyAsDouble(double p0)``
               -  ``public DoubleUnaryOperator compose(``
                  `` DoubleUnaryOperator before)``
               -  ``public static DoubleUnaryOperator identity()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   Function
            - 

               -  ``public Function andThen(Function after)``
               -  ``public abstract Object apply(Object p0)``
               -  ``public Function compose(Function before)``
               -  ``public static Function identity()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   IntBinaryOperator
            - 

               -  ``public abstract int applyAsInt(int p0, int p1)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   IntConsumer
            - 

               -  ``public abstract void accept(int p0)``
               -  ``public IntConsumer andThen(IntConsumer after)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   IntFunction
            - 

               -  ``public abstract Object apply(int p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   IntPredicate
            - 

               -  ``public IntPredicate and(IntPredicate other)``
               -  ``public IntPredicate negate()``
               -  ``public IntPredicate or(IntPredicate other)``
               -  ``public abstract boolean test(int p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   IntSupplier
            - 

               -  ``public abstract int getAsInt()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   IntToDoubleFunction
            - 

               -  ``public abstract double applyAsDouble(int p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   IntToLongFunction
            - 

               -  ``public abstract long applyAsLong(int p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   IntUnaryOperator
            - 

               -  ``public IntUnaryOperator andThen(``
                  `` IntUnaryOperator after)``
               -  ``public abstract int applyAsInt(int p0)``
               -  ``public IntUnaryOperator compose(``
                  `` IntUnaryOperator before)``
               -  ``public static IntUnaryOperator identity()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   LongBinaryOperator
            - 

               -  ``public abstract long applyAsLong(long p0, long p1)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   LongConsumer
            - 

               -  ``public abstract void accept(long p0)``
               -  ``public LongConsumer andThen(LongConsumer after)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   LongFunction
            - 

               -  ``public abstract Object apply(long p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   LongPredicate
            - 

               -  ``public LongPredicate and(LongPredicate other)``
               -  ``public LongPredicate negate()``
               -  ``public LongPredicate or(LongPredicate other)``
               -  ``public abstract boolean test(long p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   LongSupplier
            - 

               -  ``public abstract long getAsLong()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   LongToDoubleFunction
            - 

               -  ``public abstract double applyAsDouble(long p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   LongToIntFunction
            - 

               -  ``public abstract int applyAsInt(long p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   LongUnaryOperator
            - 

               -  ``public LongUnaryOperator andThen(``
                  `` LongUnaryOperator after)``
               -  ``public abstract long applyAsLong(long p0)``
               -  ``public LongUnaryOperator compose(``
                  `` LongUnaryOperator before)``
               -  ``public static LongUnaryOperator identity()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   ObjDoubleConsumer
            - 

               -  ``public abstract void accept(Object p0, double p1)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   ObjIntConsumer
            - 

               -  ``public abstract void accept(Object p0, int p1)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   ObjLongConsumer
            - 

               -  ``public abstract void accept(Object p0, long p1)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   Predicate
            - 

               -  ``public Predicate and(Predicate other)``
               -  ``public static Predicate isEqual(Object targetRef)``
               -  ``public Predicate negate()``
               -  ``public static Predicate not(Predicate p0)``
               -  ``public Predicate or(Predicate other)``
               -  ``public abstract boolean test(Object p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   Supplier
            - 

               -  ``public abstract Object get()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   ToDoubleBiFunction
            - 

               -  ``public abstract double applyAsDouble(``
                  `` Object p0, Object p1)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   ToDoubleFunction
            - 

               -  ``public abstract double applyAsDouble(Object p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   ToIntBiFunction
            - 

               -  ``public abstract int applyAsInt(Object p0, Object p1)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   ToIntFunction
            - 

               -  ``public abstract int applyAsInt(Object p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   ToLongBiFunction
            - 

               -  ``public abstract long applyAsLong(``
                  `` Object p0, Object p1)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   ToLongFunction
            - 

               -  ``public abstract long applyAsLong(Object p0)``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.function``*

               .. container::

                   UnaryOperator
            - 

               -  ``public static UnaryOperator identity()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.stream``*

               .. container::

                   BaseStream
            - 

               -  ``public abstract void close()``
               -  ``public abstract boolean isParallel()``
               -  ``public abstract Iterator iterator()``
               -  ``public abstract BaseStream onClose(Runnable p0)``
               -  ``public abstract BaseStream parallel()``\ :sup:```1```
               -  ``public abstract BaseStream sequential()``
               -  ``public abstract Spliterator spliterator()``
               -  ``public abstract BaseStream unordered()``
            - | :sup:`1` Supported only on devices which API level is 21 or
                 higher.
               |  
         - 

            - *``java.util.stream``*

               .. container::

                   Collector.
                   Characteristics
            - 

               -  ``public static final Collector.Characteristics CONCURRENT``
               -  ``public static final Collector.Characteristics IDENTITY_FINISH``
               -  ``public static final Collector.Characteristics UNORDERED``
               -  ``public static Collector.Characteristics valueOf(``
                  `` String name)``
               -  ``public static Collector.Characteristics[] values()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.stream``*

               .. container::

                   Collector
            - 

               -  ``public abstract BiConsumer accumulator()``
               -  ``public abstract Set characteristics()``
               -  ``public abstract BinaryOperator combiner()``
               -  ``public abstract Function finisher()``
               -  ``public static Collector of(``
                  ``  Supplier supplier,``
                  ``  BiConsumer accumulator,``
                  ``  BinaryOperator combiner,``
                  ``  Function finisher,``
                  ``  Collector.Characteristics[] characteristics)``
               -  ``public static Collector of(``
                  ``  Supplier supplier,``
                  ``  BiConsumer accumulator,``
                  ``  BinaryOperator combiner,``
                  ``  Collector.Characteristics[] characteristics)``
               -  ``public abstract Supplier supplier()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.stream``*

               .. container::

                   Collectors
            - 

               -  ``public static Collector averagingDouble(``
                  `` ToDoubleFunction mapper)``
               -  ``public static Collector averagingInt(``
                  `` ToIntFunction mapper)``
               -  ``public static Collector averagingLong(``
                  `` ToLongFunction mapper)``
               -  ``public static Collector collectingAndThen(``
                  `` Collector downstream, Function finisher)``
               -  ``public static Collector counting()``
               -  ``public static Collector groupingBy(``
                  `` Function classifier)``
               -  ``public static Collector groupingBy(``
                  ``  Function classifier,``
                  ``  Supplier mapFactory,``
                  ``  Collector downstream)``
               -  ``public static Collector groupingBy(``
                  `` Function classifier, Collector downstream)``
               -  ``public static Collector groupingByConcurrent(``
                  `` Function classifier)``
               -  ``public static Collector groupingByConcurrent(``
                  ``  Function classifier,``
                  ``  Supplier mapFactory,``
                  ``  Collector downstream)``
               -  ``public static Collector groupingByConcurrent(``
                  `` Function classifier, Collector downstream)``
               -  ``public static Collector joining()``
               -  ``public static Collector joining(``
                  `` CharSequence delimiter)``
               -  ``public static Collector joining(``
                  ``  CharSequence delimiter,``
                  ``  CharSequence prefix,``
                  ``  CharSequence suffix)``
               -  ``public static Collector mapping(``
                  `` Function mapper, Collector downstream)``
               -  ``public static Collector maxBy(Comparator comparator)``
               -  ``public static Collector minBy(Comparator comparator)``
               -  ``public static Collector partitioningBy(``
                  `` Predicate predicate)``
               -  ``public static Collector partitioningBy(``
                  `` Predicate predicate, Collector downstream)``
               -  ``public static Collector reducing(``
                  `` Object identity, BinaryOperator op)``
               -  ``public static Collector reducing(``
                  ``  Object identity,``
                  ``  Function mapper,``
                  ``  BinaryOperator op)``
               -  ``public static Collector reducing(BinaryOperator op)``
               -  ``public static Collector summarizingDouble(``
                  `` ToDoubleFunction mapper)``
               -  ``public static Collector summarizingInt(``
                  `` ToIntFunction mapper)``
               -  ``public static Collector summarizingLong(``
                  `` ToLongFunction mapper)``
               -  ``public static Collector summingDouble(``
                  `` ToDoubleFunction mapper)``
               -  ``public static Collector summingInt(``
                  `` ToIntFunction mapper)``
               -  ``public static Collector summingLong(``
                  `` ToLongFunction mapper)``
               -  ``public static Collector toCollection(``
                  `` Supplier collectionFactory)``
               -  ``public static Collector toConcurrentMap(``
                  `` Function keyMapper, Function valueMapper)``
               -  ``public static Collector toConcurrentMap(``
                  ``  Function keyMapper,``
                  ``  Function valueMapper,``
                  ``  BinaryOperator mergeFunction)``
               -  ``public static Collector toConcurrentMap(``
                  ``  Function keyMapper,``
                  ``  Function valueMapper,``
                  ``  BinaryOperator mergeFunction,``
                  ``  Supplier mapSupplier)``
               -  ``public static Collector toList()``
               -  ``public static Collector toMap(``
                  `` Function keyMapper, Function valueMapper)``
               -  ``public static Collector toMap(``
                  ``  Function keyMapper,``
                  ``  Function valueMapper,``
                  ``  BinaryOperator mergeFunction)``
               -  ``public static Collector toMap(``
                  ``  Function keyMapper,``
                  ``  Function valueMapper,``
                  ``  BinaryOperator mergeFunction,``
                  ``  Supplier mapSupplier)``
               -  ``public static Collector toSet()``
            - Some methods (6) present in Android T are not supported.
         - 

            - *``java.util.stream``*

               .. container::

                   DoubleStream.
                   Builder
            - 

               -  ``public abstract void accept(double p0)``
               -  ``public DoubleStream.Builder add(double t)``
               -  ``public abstract DoubleStream build()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.stream``*

               .. container::

                   DoubleStream
            - 

               -  ``public abstract boolean allMatch(DoublePredicate p0)``
               -  ``public abstract boolean anyMatch(DoublePredicate p0)``
               -  ``public abstract OptionalDouble average()``
               -  ``public abstract Stream boxed()``
               -  ``public static DoubleStream.Builder builder()``
               -  ``public abstract Object collect(``
                  `` Supplier p0, ObjDoubleConsumer p1, BiConsumer p2)``
               -  ``public static DoubleStream concat(``
                  `` DoubleStream a, DoubleStream b)``
               -  ``public abstract long count()``
               -  ``public abstract DoubleStream distinct()``
               -  ``public static DoubleStream empty()``
               -  ``public abstract DoubleStream filter(``
                  `` DoublePredicate p0)``
               -  ``public abstract OptionalDouble findAny()``
               -  ``public abstract OptionalDouble findFirst()``
               -  ``public abstract DoubleStream flatMap(``
                  `` DoubleFunction p0)``
               -  ``public abstract void forEach(DoubleConsumer p0)``
               -  ``public abstract void forEachOrdered(``
                  `` DoubleConsumer p0)``
               -  ``public static DoubleStream generate(``
                  `` DoubleSupplier s)``
               -  ``public static DoubleStream iterate(``
                  `` double seed, DoubleUnaryOperator f)``
               -  ``public abstract PrimitiveIterator.OfDouble iterator()``
               -  ``public abstract DoubleStream limit(long p0)``
               -  ``public abstract DoubleStream map(``
                  `` DoubleUnaryOperator p0)``
               -  ``public abstract IntStream mapToInt(``
                  `` DoubleToIntFunction p0)``
               -  ``public abstract LongStream mapToLong(``
                  `` DoubleToLongFunction p0)``
               -  ``public abstract Stream mapToObj(DoubleFunction p0)``
               -  ``public abstract OptionalDouble max()``
               -  ``public abstract OptionalDouble min()``
               -  ``public abstract boolean noneMatch(``
                  `` DoublePredicate p0)``
               -  ``public static DoubleStream of(double t)``
               -  ``public static DoubleStream of(double[] values)``
               -  ``public abstract DoubleStream parallel()``\ :sup:```1```
               -  ``public abstract DoubleStream peek(DoubleConsumer p0)``
               -  ``public abstract double reduce(``
                  `` double p0, DoubleBinaryOperator p1)``
               -  ``public abstract OptionalDouble reduce(``
                  `` DoubleBinaryOperator p0)``
               -  ``public abstract DoubleStream sequential()``
               -  ``public abstract DoubleStream skip(long p0)``
               -  ``public abstract DoubleStream sorted()``
               -  ``public abstract Spliterator.OfDouble spliterator()``
               -  ``public abstract double sum()``
               -  ``public abstract DoubleSummaryStatistics summaryStatistics()``
               -  ``public abstract double[] toArray()``
            - | :sup:`1` Supported only on devices which API level is 21 or
                 higher.
               |  
         - 

            - *``java.util.stream``*

               .. container::

                   IntStream.
                   Builder
            - 

               -  ``public abstract void accept(int p0)``
               -  ``public IntStream.Builder add(int t)``
               -  ``public abstract IntStream build()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.stream``*

               .. container::

                   IntStream
            - 

               -  ``public abstract boolean allMatch(IntPredicate p0)``
               -  ``public abstract boolean anyMatch(IntPredicate p0)``
               -  ``public abstract DoubleStream asDoubleStream()``
               -  ``public abstract LongStream asLongStream()``
               -  ``public abstract OptionalDouble average()``
               -  ``public abstract Stream boxed()``
               -  ``public static IntStream.Builder builder()``
               -  ``public abstract Object collect(``
                  `` Supplier p0, ObjIntConsumer p1, BiConsumer p2)``
               -  ``public static IntStream concat(``
                  `` IntStream a, IntStream b)``
               -  ``public abstract long count()``
               -  ``public abstract IntStream distinct()``
               -  ``public static IntStream empty()``
               -  ``public abstract IntStream filter(IntPredicate p0)``
               -  ``public abstract OptionalInt findAny()``
               -  ``public abstract OptionalInt findFirst()``
               -  ``public abstract IntStream flatMap(IntFunction p0)``
               -  ``public abstract void forEach(IntConsumer p0)``
               -  ``public abstract void forEachOrdered(IntConsumer p0)``
               -  ``public static IntStream generate(IntSupplier s)``
               -  ``public static IntStream iterate(``
                  `` int seed, IntUnaryOperator f)``
               -  ``public abstract PrimitiveIterator.OfInt iterator()``
               -  ``public abstract IntStream limit(long p0)``
               -  ``public abstract IntStream map(IntUnaryOperator p0)``
               -  ``public abstract DoubleStream mapToDouble(``
                  `` IntToDoubleFunction p0)``
               -  ``public abstract LongStream mapToLong(``
                  `` IntToLongFunction p0)``
               -  ``public abstract Stream mapToObj(IntFunction p0)``
               -  ``public abstract OptionalInt max()``
               -  ``public abstract OptionalInt min()``
               -  ``public abstract boolean noneMatch(IntPredicate p0)``
               -  ``public static IntStream of(int t)``
               -  ``public static IntStream of(int[] values)``
               -  ``public abstract IntStream parallel()``\ :sup:```1```
               -  ``public abstract IntStream peek(IntConsumer p0)``
               -  ``public static IntStream range(``
                  `` int startInclusive, int endExclusive)``
               -  ``public static IntStream rangeClosed(``
                  `` int startInclusive, int endInclusive)``
               -  ``public abstract int reduce(``
                  `` int p0, IntBinaryOperator p1)``
               -  ``public abstract OptionalInt reduce(``
                  `` IntBinaryOperator p0)``
               -  ``public abstract IntStream sequential()``
               -  ``public abstract IntStream skip(long p0)``
               -  ``public abstract IntStream sorted()``
               -  ``public abstract Spliterator.OfInt spliterator()``
               -  ``public abstract int sum()``
               -  ``public abstract IntSummaryStatistics summaryStatistics()``
               -  ``public abstract int[] toArray()``
            - | :sup:`1` Supported only on devices which API level is 21 or
                 higher.
               |  
         - 

            - *``java.util.stream``*

               .. container::

                   LongStream.
                   Builder
            - 

               -  ``public abstract void accept(long p0)``
               -  ``public LongStream.Builder add(long t)``
               -  ``public abstract LongStream build()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.stream``*

               .. container::

                   LongStream
            - 

               -  ``public abstract boolean allMatch(LongPredicate p0)``
               -  ``public abstract boolean anyMatch(LongPredicate p0)``
               -  ``public abstract DoubleStream asDoubleStream()``
               -  ``public abstract OptionalDouble average()``
               -  ``public abstract Stream boxed()``
               -  ``public static LongStream.Builder builder()``
               -  ``public abstract Object collect(``
                  `` Supplier p0, ObjLongConsumer p1, BiConsumer p2)``
               -  ``public static LongStream concat(``
                  `` LongStream a, LongStream b)``
               -  ``public abstract long count()``
               -  ``public abstract LongStream distinct()``
               -  ``public static LongStream empty()``
               -  ``public abstract LongStream filter(LongPredicate p0)``
               -  ``public abstract OptionalLong findAny()``
               -  ``public abstract OptionalLong findFirst()``
               -  ``public abstract LongStream flatMap(LongFunction p0)``
               -  ``public abstract void forEach(LongConsumer p0)``
               -  ``public abstract void forEachOrdered(LongConsumer p0)``
               -  ``public static LongStream generate(LongSupplier s)``
               -  ``public static LongStream iterate(``
                  `` long seed, LongUnaryOperator f)``
               -  ``public abstract PrimitiveIterator.OfLong iterator()``
               -  ``public abstract LongStream limit(long p0)``
               -  ``public abstract LongStream map(LongUnaryOperator p0)``
               -  ``public abstract DoubleStream mapToDouble(``
                  `` LongToDoubleFunction p0)``
               -  ``public abstract IntStream mapToInt(``
                  `` LongToIntFunction p0)``
               -  ``public abstract Stream mapToObj(LongFunction p0)``
               -  ``public abstract OptionalLong max()``
               -  ``public abstract OptionalLong min()``
               -  ``public abstract boolean noneMatch(LongPredicate p0)``
               -  ``public static LongStream of(long t)``
               -  ``public static LongStream of(long[] values)``
               -  ``public abstract LongStream parallel()``\ :sup:```1```
               -  ``public abstract LongStream peek(LongConsumer p0)``
               -  ``public static LongStream range(``
                  `` long startInclusive, long endExclusive)``
               -  ``public static LongStream rangeClosed(``
                  `` long startInclusive, long endInclusive)``
               -  ``public abstract long reduce(``
                  `` long p0, LongBinaryOperator p1)``
               -  ``public abstract OptionalLong reduce(``
                  `` LongBinaryOperator p0)``
               -  ``public abstract LongStream sequential()``
               -  ``public abstract LongStream skip(long p0)``
               -  ``public abstract LongStream sorted()``
               -  ``public abstract Spliterator.OfLong spliterator()``
               -  ``public abstract long sum()``
               -  ``public abstract LongSummaryStatistics summaryStatistics()``
               -  ``public abstract long[] toArray()``
            - | :sup:`1` Supported only on devices which API level is 21 or
                 higher.
               |  
         - 

            - *``java.util.stream``*

               .. container::

                   Stream.
                   Builder
            - 

               -  ``public abstract void accept(Object p0)``
               -  ``public Stream.Builder add(Object t)``
               -  ``public abstract Stream build()``
            - | Fully implemented class.
               |  
         - 

            - *``java.util.stream``*

               .. container::

                   Stream
            - 

               -  ``public abstract boolean allMatch(Predicate p0)``
               -  ``public abstract boolean anyMatch(Predicate p0)``
               -  ``public static Stream.Builder builder()``
               -  ``public abstract Object collect(``
                  `` Supplier p0, BiConsumer p1, BiConsumer p2)``
               -  ``public abstract Object collect(Collector p0)``
               -  ``public static Stream concat(Stream a, Stream b)``
               -  ``public abstract long count()``
               -  ``public abstract Stream distinct()``
               -  ``public static Stream empty()``
               -  ``public abstract Stream filter(Predicate p0)``
               -  ``public abstract Optional findAny()``
               -  ``public abstract Optional findFirst()``
               -  ``public abstract Stream flatMap(Function p0)``
               -  ``public abstract DoubleStream flatMapToDouble(``
                  `` Function p0)``
               -  ``public abstract IntStream flatMapToInt(Function p0)``
               -  ``public abstract LongStream flatMapToLong(``
                  `` Function p0)``
               -  ``public abstract void forEach(Consumer p0)``
               -  ``public abstract void forEachOrdered(Consumer p0)``
               -  ``public static Stream generate(Supplier s)``
               -  ``public static Stream iterate(``
                  `` Object seed, UnaryOperator f)``
               -  ``public abstract Stream limit(long p0)``
               -  ``public abstract Stream map(Function p0)``
               -  ``public abstract DoubleStream mapToDouble(``
                  `` ToDoubleFunction p0)``
               -  ``public abstract IntStream mapToInt(ToIntFunction p0)``
               -  ``public abstract LongStream mapToLong(``
                  `` ToLongFunction p0)``
               -  ``public abstract Optional max(Comparator p0)``
               -  ``public abstract Optional min(Comparator p0)``
               -  ``public abstract boolean noneMatch(Predicate p0)``
               -  ``public static Stream of(Object t)``
               -  ``public static Stream of(Object[] values)``
               -  ``public static Stream ofNullable(``
                  `` Object p0)``\ :sup:```2```
               -  ``public abstract Stream peek(Consumer p0)``
               -  ``public abstract Object reduce(``
                  `` Object p0, BiFunction p1, BinaryOperator p2)``
               -  ``public abstract Object reduce(``
                  `` Object p0, BinaryOperator p1)``
               -  ``public abstract Optional reduce(BinaryOperator p0)``
               -  ``public abstract Stream skip(long p0)``
               -  ``public abstract Stream sorted()``
               -  ``public abstract Stream sorted(Comparator p0)``
               -  ``public abstract Object[] toArray()``
               -  ``public abstract Object[] toArray(IntFunction p0)``
            - | Fully implemented class.
               |  :sup:`2` Not present in Android T (May not resolve at
                 compilation).
               |  
         - 

            - *``java.util.stream``*

               .. container::

                   StreamSupport
            - 

               -  ``public static DoubleStream doubleStream(``
                  ``  Spliterator.OfDouble spliterator,``
                  ``  boolean parallel)``
               -  ``public static DoubleStream doubleStream(``
                  ``  Supplier supplier,``
                  ``  int characteristics,``
                  ``  boolean parallel)``
               -  ``public static IntStream intStream(``
                  `` Spliterator.OfInt spliterator, boolean parallel)``
               -  ``public static IntStream intStream(``
                  ``  Supplier supplier,``
                  ``  int characteristics,``
                  ``  boolean parallel)``
               -  ``public static LongStream longStream(``
                  `` Spliterator.OfLong spliterator, boolean parallel)``
               -  ``public static LongStream longStream(``
                  ``  Supplier supplier,``
                  ``  int characteristics,``
                  ``  boolean parallel)``
               -  ``public static Stream stream(``
                  `` Spliterator spliterator, boolean parallel)``
               -  ``public static Stream stream(``
                  ``  Supplier supplier,``
                  ``  int characteristics,``
                  ``  boolean parallel)``
            - | Fully implemented class.
               |  

   .. rubric:: ``java.time`` customizations
      :name: java-time-customizations

   The following is a summary of potentially behavior-changing modifications to
   ``java.time`` that facilitate running the library on legacy Android devices.

   -  The method ``Locale.getDefault()`` is used instead of
      ``Locale.getDefault(Locale.Category.FORMAT)`` to look up user preferences.
      The latter method, as well as the ``Category`` enum, is new in JDK 8.
   -  Use ``DateFormat`` or ``SimpleDateFormat`` to look up parsing and
      formatting patterns. The internal API normally used is new in JDK 8 and
      not supported on Android. Formatting in ISO Chronology appears unaffected;
      non-ISO dates and times are calculated correctly but formatted (and
      parsed) using ISO patterns.
   -  ``Temporal.getDisplayName(Locale)`` never localizes for built-in field
      types and instead always returns English names such as "Day", "Week", and
      "Year".
   -  Similarly, chronology names are never localized during formatting and
      parsing, as this information doesn't seem to be available on legacy
      devices.
   -  Formatting and parsing are limited to most ``ChronoField`` constants
      (except quarters) and only supports ISO chronology concepts such as 7-day
      weeks, 12-month years, BC and AD eras, etc. For instance, Japanese eras
      don't work. "Standalone" formats also don't work. This is all due to the
      necessary localized strings not available through legacy JDK APIs.
   -  ``JapaneseChronology`` only partially supports the current REIWA era,
      depending on whether the Android frameworks on the device and the
      desugared library versions pre-date the start of the REIWA era (2019).
   -  ``HijrahChronology`` doesn't support "variants". Android 8 doesn't include
      any such variants, so this shouldn't make any practical difference.
   -  Time zone formatting ("printing") won't localize "generic" time zone names
      in the rare situation when the ``Temporal`` to print doesn't include
      "seconds". Generic time zone names simply aren't available on legacy
      devices, only "standard" and "daylight savings"-specific names.
   -  ``ZoneRules`` by default fall back on ``java.util.TimeZone``. This has
      limitations listed below. Note that the primary method in this class,
      ``ZoneRules.getOffset(Instant)``, should work accurately whenever data is
      available.

      -  Typically data appears to be available back to ~1900 on tested devices,
         so queries for 18xx (before the use of modern time zones) will probably
         return wrong results. Note the first daylight saving occurred in 1916,
         which is typically covered.
      -  ``getStandardOffset()`` doesn't work for time periods where a given
         timezone used a different offset from UTC. Because of that,
         ``isDaylightSavings()`` and ``getDaylightSavings()`` may also return
         wrong results in problematic time periods.
      -  ``nextTransition()`` and ``previousTransition()`` are slow but appear
         accurate within available data.
      -  ``getTransitions()`` and ``getTransitionRules()`` return empty lists.
         That's consistent with the spec but may be surprising; use
         ``nextTransition()`` or ``previousTransition()`` instead.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2024-01-26 UTC.

/Add app resources
==================

.. https://developer.android.google.cn/studio/write/add-resources?hl=en

.. container:: devsite-article-body clearfix

   App resources, such as bitmaps and layouts, are organized into type-specific
   directories inside each module's ``res/`` directory. You can also add
   alternative versions of each file that are optimized for different device
   configurations, such as a high-res version of a bitmap for high-density
   screens.

   Android Studio helps you add new resources and alternative resources in
   several ways, depending on the type of resource you want to add. This page
   describes how to add basic resource files, how to change the location of your
   resources, and how resource merging works.

   See the following pages for details about how to create specific resource
   types:

   -  To add layout files, see `Build a UI with Layout Editor <#/studio/write/layout-editor>`__.
   -  To add string files, see `Localize the UI with Translations Editor <#/studio/write/translations-editor>`__.
   -  To add bitmaps, see `Create app icons with Image Asset Studio <#/studio/write/image-asset-studio>`__.
   -  To add SVG files, see `Add multi-density vector graphics <#/studio/write/vector-asset-studio>`__.

   For information about how to reference the resources from your app code, see
   `App resources overview <#/guide/topics/resources/providing-resources>`__.

   .. rubric:: Add an XML resource file
      :name: add_xml_resource_file

   Although the preceding page links describe workflows that are customized to
   each type of resource, you can add any XML resource file by following these
   steps:

   #. Click the target app module in the **Project** window in either the
      **Android** or **Project** view.

   #. Select **File > New > Android resource file**.

      |image-new-resource_2-2_2x|

      **Figure 1.** **New Resource File** dialog.

   #. Fill out the details in the dialog:

      -  **File name**: Enter the name for the XML file (this doesn't require
         the ``.xml`` suffix).
      -  **Resource type**: Select the type of resource you want to create.
      -  **Root element**: If applicable, select the root XML element for the
         file. Some resource types support only one type of root element.
         Depending on the resource type selected, this might not be editable.
      -  **Source set**: Select the `source set <#/studio/build#sourcesets>`__
         where you want to save the file.
      -  **Directory name**: The directory must be named in a way that's
         specific to the resource type and configuration qualifiers. Don't edit
         this unless you want to add configuration qualifiers to the directory
         name manually (use **Available qualifiers** instead).
      -  **Available qualifiers**: Instead of manually including configuration
         qualifiers in your directory name, you can add them by selecting a
         qualifier from the list and clicking **Add** |image-ic_add-arrows|.

   #. Once you've added all the qualifiers you want, click **OK**.

   **Tip:** To open a simplified version of the **New Resource File** dialog
   that's specific to the resource type you want to add, right-click an existing
   resource directory within the **res** folder and select **New > ``type-name``
   resource file**.

   .. rubric:: Inline complex XML resources
      :name: inline_complex_xml_resources

   Some complex resources require multiple XML resource files. For example, an
   animated vector drawable has a vector drawable object and an animation object
   and requires at least three XML files.

   In this example, you can create and keep the three separate XML files if you
   need to reuse one or more of them. But if the XML files are used only for
   this animated vector drawable, you can instead use the inline resource format
   provided in the Android Asset Packaging Tool (AAPT). With AAPT, you can
   define all three resources in one XML file. For more information, see `Inline complex XML resources <#/guide/topics/resources/complex-xml-resources>`__.

   **Note:**\  Autocompletion isn't supported for inline resources. When
   developing new complex resources it can be easier to create them using
   separate resources and combine them into a single inline file once the
   resource is working as intended.
   .. rubric:: Add a resource directory
      :name: add_resource_directory

   To add a new resource directory, follow these steps:

   #. Click the target app module in the **Project** window.

   #. Select **File > New > Android resource directory**.

      |image-new-resource-dir_2-2_2x|

      **Figure 2.** **New Resource Directory** dialog.

   #. Fill in the details in the dialog:

      -  **Directory name**: The directory must be named in a way that's
         specific to the resource type and combination of configuration
         qualifiers. Don't edit this unless you want to add configuration
         qualifiers to the directory name manually (use **Available qualifiers**
         instead).
      -  **Resource type:** Select the type of resource you want the directory
         to contain.
      -  **Source set:** Select the source set where you want the directory.
      -  **Available qualifiers:** Instead of manually including configuration
         qualifiers in your directory name, you can add them by selecting a
         qualifier from the list and clicking **Add** |image-ic_add-arrows|.

   #. Once you've added all the qualifiers you want, click **OK**.

   .. rubric:: Change your resource directory
      :name: change_your_resource_directory

   By default, your resources are located in
   ``module-name``\ ``/src/``\ ``source-set-name``\ ``/res/``. For example,
   resources for your module's main source set are in ``src/main/res/``, and
   resources for the debug source set are in ``src/debug/res/``.

   However, you can change these paths to any other location (relative to the
   ``build.gradle`` file) with the ``res.srcDirs`` property in the
   ``sourceSets`` block. For example:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Groovy
               :name: groovy

            .. code:: prettyprint

               android {
                   sourceSets {
                       main {
                           res.srcDirs = ['resources/main']
                       }
                       debug {
                           res.srcDirs = ['resources/debug']
                       }
                   }
               }

         .. container:: section

            .. rubric:: Kotlin
               :name: kts

            .. code:: prettyprint

               android {
                   sourceSets {
                       getByName("main") {
                           res.srcDirs("resources/main")
                       }
                       getByName("debug") {
                           res.srcDirs("resources/debug")
                       }
                   }
               }

   You can also specify multiple resource directories for one source set, and
   then the build tools merge them together. For example:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Groovy
               :name: groovy

            .. code:: prettyprint


               android {
                   sourceSets {
                       main {
                           res.srcDirs = ['res1', 'res2']
                       }
                   }
               }

         .. container:: section

            .. rubric:: Kotlin
               :name: kts

            .. code:: prettyprint

               android {
                   sourceSets {
                       main {
                           res.srcDirs("res1", "res2")
                       }
                   }
               }

   **Note:**\  If two or more resource directories contain the same resource
   file, an error occurs during resource merging.
   For more information, read about `source sets <#/studio/build/build-variants#sourcesets>`__.

   .. rubric:: Resource merging
      :name: resource_merging

   Resources in your final app file can come from three sources:

   -  The main source set (generally located in ``src/main/res/``)
   -  `Build variant <#/studio/build/build-variants>`__ source sets
   -  Android libraries (AARs)

   When all resources from each source set or library are unique, they're all
   added into the final app. A resource is considered unique if its filename is
   unique within both its `resource type <#/guide/topics/resources/available-resources>`__ directory and the
   `resource qualifier <#/guide/topics/resources/providing-resources#AlternativeResources>`__
   (if defined).

   If there are two or more matching versions of the same resource, then only
   one version is included in the final app. The build tools select which
   version to keep based on the following priority order (highest priority on
   the left):

      build variant > build type > product flavor > main source set > library
      dependencies

   For example, if the main source set contains:

   -  ``res/layout/example.xml``
   -  ``res/layout-land/example.xml``

   And the debug build type contains:

   -  ``res/layout/example.xml``

   Then the final app includes ``res/layout/example.xml`` from the debug build
   type and ``res/layout-land/example.xml`` from the main source set.

   However, if your build configuration specifies `multiple resource folders <#change_your_resource_directory>`__ for a given source set and there
   are conflicts between those sources, an error occurs and the merge fails
   because each resource directory has the same priority.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2023-04-12 UTC.

.. |image-new-resource_2-2_2x| image:: https://source.android.google.cn/static/studio/images/write/new-resource_2-2_2x.png
   :width: 824px
.. |image-ic_add-arrows| image:: https://source.android.google.cn/static/studio/images/buttons/ic_add-arrows.png
   :class: inline-icon
.. |image-new-resource-dir_2-2_2x| image:: https://source.android.google.cn/static/studio/images/write/new-resource-dir_2-2_2x.png
   :width: 824px
.. |image-ic_add-arrows| image:: https://source.android.google.cn/static/studio/images/buttons/ic_add-arrows.png
   :class: inline-icon

/Develop a layout with Compose
==============================

.. https://developer.android.google.cn/jetpack/compose/tooling/previews?hl=en



/Develop a layout with Views
============================

.. https://developer.android.google.cn/studio/write/layout-editor?hl=en

.. container:: devsite-article-body clearfix

   **Note:**\  We recommend building your UI with Compose instead of Views where
   possible. To learn how to preview your Compose UI, see `Compose previews <#/jetpack/compose/tooling/previews>`__.
   The Layout Editor enables you to quickly build ``View``-based layouts by
   dragging UI elements into a visual design editor instead of writing layout
   XML. The design editor can preview your layout on different Android devices
   and versions, and you can dynamically resize the layout to be sure it works
   properly on different screen sizes.

   The Layout Editor is especially powerful when `building a layout with ``ConstraintLayout`` <#/training/constraint-layout>`__.

   This page provides an overview of the Layout Editor. To learn more about
   layout fundamentals, see `Layouts <#/guide/topics/ui/declaring-layout>`__.

   .. rubric:: Introduction to the Layout Editor
      :name: intro

   The Layout Editor appears when you open an XML layout file.

   .. figure:: https://source.android.google.cn/static/studio/images/write/layout-editor.png
      :alt: layout editor
      :width: 856px

      **Figure 1.** The Layout Editor.

   #. **Palette**: contains various views and view groups that you can drag into
      your layout.
   #. **Component Tree**: shows the hierarchy of components in your layout.
   #. **Toolbar**: has buttons that configure your layout appearance in the
      editor and change layout attributes.
   #. **Design editor**: lets you edit your layout in Design view, Blueprint
      view, or both.
   #. **Attributes**: has controls for the selected view's attributes.
   #. **View mode**: lets you view your layout in either **Code** |code mode
      icon|, **Split** |split mode icon|, or **Design** |design mode icon|
      modes. **Split** mode shows the **Code** and **Design** windows at the
      same time.
   #. **Zoom and pan controls**: control the preview size and position within
      the editor.

   When you open an XML layout file, the design editor opens by default, as
   shown in figure 1. To edit the layout XML in the text editor, click the
   **Code** |code mode icon| button in the top-right corner of the window. Note
   that the **Palette**, **Component Tree**, and **Attributes** panels are not
   available while editing your layout in **Code** view.

   **Tip:** To switch between design and text editors, press ``Alt``
   (``Control`` on macOS) plus ``Shift`` and the right or left arrow key.

   .. rubric:: Change the preview appearance
      :name: change-appearance

   The buttons in the top row of the design editor let you configure the
   appearance of your layout in the editor.

   .. figure:: https://source.android.google.cn/static/studio/images/write/layout-editor-toolbar.png
      :alt: Buttons in the Layout Editor toolbar that configure the layout
      appearance
      :width: 458px

      **Figure 2.** Buttons in the Layout Editor toolbar that configure the
      layout appearance.

   #. **Design and Blueprint**: Select how you want to view your layout in the
      editor. You can also press ``B`` to cycle through these view types.

      -  Choose **Design** to see a rendered preview of your layout.
      -  Choose **Blueprint** to see only outlines for each view.
      -  Choose **Design + Blueprint** to see both views side by side.

   #. **Screen orientation and layout variants**: Choose between landscape or
      portrait screen orientation or choose other screen modes that your app
      provides alternative layouts for, such as night mode. This menu also
      contains commands for `creating a new layout variant <#create-variant>`__,
      as described in a section on this page. You can also press the letter
      ``O`` on your keyboard to change orientation.

   #. **System UI Mode**: If you've enabled `dynamic color <https://m3.material.io/styles/color/dynamic-color/overview>`__ in
      your app, switch wallpapers and see how your layouts react to different
      users chosen wallpaper. Note that you must first change the theme to a
      Material dynamic color theme, then change the wallpaper.

   #. **Device type and size**: Select the device type (phone/tablet, Android
      TV, or Wear OS) and screen configuration (size and density). You can
      select from several pre-configured device types and your own AVD
      definitions, and you can create a new AVD by selecting **Add Device
      Definition** from the list, as shown in figure 3.

      -  To resize the device, drag the bottom-right corner of the layout.
      -  Press ``D`` to cycle through the device list.

      Testing your layout against the **Reference Devices** in this menu helps
      your app scale well to layout states on real devices.

      .. figure:: https://source.android.google.cn/static/studio/images/releases/new-device-picker.png
         :alt: The device list menu with Reference Devices
         :width: 50.0%

         **Figure 3.** The device list showing Reference Devices.

   #. **API version**: Select the version of Android to preview your layout. The
      list of available Android versions depends on which SDK platform versions
      you have installed using SDK Manager.

   #. **App theme**: Select which UI theme to apply to the preview. This works
      only for supported layout styles, so many themes in this list result in an
      error.

   #. **Language**: Select the language to show for your UI strings. This list
      displays only the languages available in your string resources. If you'd
      like to edit your translations, click **Edit Translations** from the menu.
      For more information on working with translations, see `Localize the UI with Translations Editor <#/studio/write/translations-editor>`__.

   **Note:**\  Unless you add a new layout file from **Layout Variants**, these
   configurations don't affect your app's code or manifest. They affect only the
   layout preview.
   .. rubric:: Create a new layout
      :name: create-layout

   When adding a new layout for your app, first create a default layout file in
   your project's default ``layout/`` directory so that it applies to all device
   configurations. Once you have a default layout, you can `create layout variations <#create-variant>`__, as described in a section on this page, for
   specific device configurations, such as for large screens.

   You can create a new layout in one of the following ways:

   .. rubric:: Use Android Studio's main menu
      :name: create-layout-menu

   #. In the **Project** window, click the module you want to add a layout to.
   #. In the main menu, select **File > New > XML > Layout XML File**.
   #. In the dialog that appears, provide the filename, the root layout tag, and
      the source set where the layout belongs.
   #. Click **Finish** to create the layout.

   .. rubric:: Use the Project view
      :name: create-layout-project

   #. Choose the **Project** view from within the **Project** window.
   #. Right-click the layout directory where you'd like to add the layout.
   #. In the context menu that appears, click **New > Layout Resource File**.

   .. rubric:: Use the Android view
      :name: create-layout-android

   #. Choose the **Android** view from within the **Project** window.
   #. Right-click the ``layout`` folder.
   #. In the context menu that appears, select **New > Layout Resource File**.

   .. rubric:: Use the Resource Manager
      :name: create-layout-rm

   #. In the `Resource Manager <#/studio/write/resource-manager>`__, select the
      **Layout** tab.
   #. Click the ``+`` button, and then click **Layout Resource File**.

   .. rubric:: Use layout variants to optimize for different screens
      :name: create-variant

   A *layout variant* is an alternative version of an existing layout that is
   optimized for a certain screen size or orientation.

   .. rubric:: Use a suggested layout variant
      :name: create-variant-suggested

   Android Studio includes common layout variants that you can use in your
   project. To use a suggested layout variant, do the following:

   #. Open your default layout file.
   #. Click the **Design** |design mode icon| icon in the top-right corner of
      the window.
   #. The name of the layout file appears in the **Action to switch and create
      qualifiers for layout files** drop-down. Select the drop-down.
   #. In the drop-down list, select a variant such as **Create Landscape
      Qualifier** or **Create Tablet Qualifier**.
      .. figure::
         https://source.android.google.cn/static/studio/images/write/layout-editor-create-qualifiers_2x.png
         :alt: The Create qualifiers dropdown
         :width: 806px

         **Figure 4.** Drop-down list of layout qualifiers.

   A new layout directory is created.

   .. rubric:: Create your own layout variant
      :name: create-variant-other

   If you'd like to create your own layout variant, do the following:

   #. Open your default layout file.

   #. Click the **Design** |Design mode icon| icon in the top-right corner of
      the window.

   #. The name of the layout file appears in the **Action to switch and create
      qualifiers for layout files** drop-down. Select the drop-down.

   #. In the drop-down list, select **Add Resource Qualifier**. (See figure 4
      above.)

      The **Select Resource Directory** dialog appears.

   #. In the **Select Resource Directory** dialog, define the resource
      qualifiers for the variant:

      #. Select a qualifier from the **Available qualifiers** list.
      #. Click the **Add** |add qualifier button| button.
      #. Enter any required values.
      #. Repeat these steps to add other qualifiers.

   #. Once you've added all of your qualifiers, click **OK**.

   When you have multiple variations of the same layout, you can switch between
   them by selecting a variant from the **Action to switch and create qualifiers
   for layout files** drop-down.

   For more information about how to create layouts for different screens, see
   `Support different screen sizes <#/develop/ui/compose/layouts/adaptive/support-different-screen-sizes>`__.

   .. rubric:: Convert a view or layout
      :name: convert-view

   You can convert a view to another kind of view, and you can convert a layout
   to another kind of layout:

   #. Click the **Design** button in the top-right corner of the editor window.
   #. In the **Component Tree**, right-click the view or layout, and then click
      **Convert view**.
   #. In the dialog that appears, choose the new type of view or layout, and
      then click **Apply**.

   .. rubric:: Convert a layout to ConstraintLayout
      :name: convert-constraint

   For improved layout performance, convert older layouts to
   `ConstraintLayout <#/reference/androidx/constraintlayout/widget/ConstraintLayout>`__.
   ``ConstraintLayout`` uses a constraint-based layout system that lets you
   build most layouts without any nested view groups.

   To convert an existing layout to a ``ConstraintLayout``, do the following:

   #. Open an existing layout in Android Studio.
   #. Click the **Design** |design mode icon| icon in the top-right corner of
      the editor window.
   #. In the **Component Tree**, right-click the layout, and then click
      **Convert ``your-layout-type`` to ConstraintLayout**.

   To learn more about ``ConstraintLayout``, see `Build a Responsive UI with ConstraintLayout <#/training/constraint-layout>`__.

   .. rubric:: Find items in the Palette
      :name: views-palette

   To search for a view or view group by name in the **Palette**, click the
   **Search** |palette search button| button at the top of the palette.
   Alternatively, you can type the name of the item whenever the **Palette**
   window has focus.

   In the **Palette**, you can find frequently used items in the **Common**
   category. To add an item to this category, right-click a view or view group
   in the **Palette** and then click **Favorite** in the context menu.

   .. rubric:: Open documentation from the Palette
      :name: palette-documentation

   To open the Android Developers reference documentation for a view or view
   group, select the UI element in the **Palette** and press
   ``Shift``\ +\ ``F1``.

   To view Material Guidelines documentation for a view or view group,
   right-click the UI element in the **Palette** and select **Material
   Guidelines** from the context menu. If no specific entry exists for the item,
   then the command opens the homepage of the `Material Guidelines documentation <https://material.io/guidelines/>`__.

   .. rubric:: Add views to your layout
      :name: add-views

   To start building your layout, drag views and view groups from the
   **Palette** into the design editor. As you place a view in the layout, the
   editor displays information about the view's relationship with the rest of
   the layout.

   If you are using ``ConstraintLayout``, you can `automatically create constraints <#/training/constraint-layout#use-autoconnect-and-infer-constraints>`__
   using the Infer Constraints and Autoconnect features.

   .. rubric:: Edit view attributes
      :name: edit-properties

   .. container:: attempt-right

      .. figure:: https://source.android.google.cn/static/images/studio/write/layout-editor-attributes-2x.png
         :alt: The
         :width: 492px

         **Figure 5.** The **Attributes** panel.

   You can edit view attributes from the **Attributes** panel in the Layout
   Editor. This window is available only when the design editor is open, so view
   your layout in either **Design** or **Split** mode to use it.

   When you select a view, whether by clicking the view in the **Component
   Tree** or in the design editor, the **Attributes** panel shows the following,
   as indicated in figure 5:

   #. **Declared Attributes**: Lists attributes specified in the layout file. To
      add an attribute, click the **Add** |add attribute button| button at the
      top of the section.

   #. **Layout**: Contains controls for the width and height of the view. If the
      view is in a ``ConstraintLayout``, this section also shows constraint bias
      and lists the constraints that the view uses. For more information on
      controlling the size of views with ``ConstraintLayout``, see `Adjust the view size <#/training/constraint-layout#adjust-the-view-size>`__.

   #. **Common Attributes**: Lists common attributes for the selected view. To
      see all available attributes, expand the **All Attributes** section at the
      bottom of the window.

   #. **Search**: Lets you search for a specific view attribute.

   #. The icons to the right of each attribute value indicate whether the
      attribute values are resource references. These indicators are solid
      |solid indicator icon| when the value is a resource reference and empty
      |empty indicator icon| when the value is hardcoded to help you recognize
      hardcoded values at a glance.

      Click indicators in either state to open the **Resources** dialog, where
      you can select a resource reference for the corresponding attribute.

   #. A red highlight around an attribute value indicates an error with the
      value. For example, an error might indicate an invalid entry for a
      layout-defining attribute.

      An orange highlight indicates a warning for the value. For example, a
      warning might appear when you use a hardcoded value where a resource
      reference is expected.

   .. rubric:: Add sample data to your view
      :name: sample-data

   Because many Android layouts rely on runtime data, it can be difficult to
   visualize the look and feel of a layout while designing your app. You can add
   sample preview data to a ``TextView``, an ``ImageView``, or a
   ``RecyclerView`` from within the Layout Editor.

   **Note:**\  When you add sample data to a ``View``, Android Studio makes
   changes to your project as though you were using your own data. You can then
   modify these changes as needed.
   To display the **Design-time View Attributes** window, right-click one of
   these view types and choose **Set Sample Data**, as shown in figure 6.

   .. figure::
      https://source.android.google.cn/static/images/studio/write/layout-editor-design-time-view-attributes-2x.png
      :alt: design time view attributes window

      **Figure 6.** The **Design-time View Attributes** window.

   For a ``TextView``, you can choose between different sample text categories.
   When using sample text, Android Studio populates the ``text`` attribute of
   the ``TextView`` with your chosen sample data. Note that you can choose
   sample text via the **Design-time View Attributes** window only if the
   ``text`` attribute is empty.

   .. figure:: https://source.android.google.cn/static/images/studio/write/textview-sample-data-2x.png
      :alt: text view with sample data

      **Figure 7.** A ``TextView`` with sample data.

   For an ``ImageView``, you can choose between different sample images. When
   you choose a sample image, Android Studio populates the ``tools:src``
   attribute of the ``ImageView`` (or ``tools:srcCompat`` if using AndroidX).

   .. figure:: https://source.android.google.cn/static/images/studio/write/imageview-sample-data-2x.png
      :alt: image view with sample data

      **Figure 8.** An ``ImageView`` with sample data.

   For a ``RecyclerView``, you can choose from a set of templates that contain
   sample images and texts. When using these templates, Android Studio adds a
   file to your ``res/layout`` directory, ``recycler_view_item.xml``, that
   contains the layout for the sample data. Android Studio also adds metadata to
   the ``RecyclerView`` to properly display the sample data.

   .. figure:: https://source.android.google.cn/static/images/studio/write/recyclerview-sample-data-2x.png
      :alt: recycler view with sample data

      **Figure 9.** A ``RecyclerView`` with sample data.

   .. rubric:: Show layout warnings and errors
      :name: layout-warnings-errors

   The Layout Editor notifies you of any layout issues next to the corresponding
   view in the **Component Tree** by using a red circle exclamation icon |red
   circle exclamation icon indicating a layout error| for errors or an orange
   triangle exclamation icon |orange triangle exclamation icon indicating a
   layout warning| for warnings. Click the icon to see more details.

   To see all known issues in a window below the editor, click **Show Warnings
   and Errors** (|red circle exclamation icon indicating a layout error| or
   |orange triangle exclamation icon indicating a layout warning|) in the
   toolbar.

   .. rubric:: Download fonts and apply them to text
      :name: download-fonts

   When using Android 8.0 (API level 26) or the `Jetpack Core library <#/jetpack/androidx/releases/core>`__, you can select from hundreds of
   fonts by following these steps:

   #. In the Layout Editor, click the **Design** |design mode icon| icon to view
      your layout in the design editor.
   #. Select a text view.
   #. In the **Attributes** panel, expand **textAppearance**, and then expand
      the **fontFamily** box.
   #. Scroll to the bottom of the list and click **More Fonts** to open the
      **Resources** dialog.
   #. In the **Resources** dialog, to select a font, browse the list or type
      into the search bar at the top. If you select a font under
      **Downloadable**, then you can either click **Create downloadable font**
      to load the font at runtime as a `downloadable font <#/guide/topics/ui/look-and-feel/downloadable-fonts>`__ or click **Add
      font to project** to package the TTF font file in your APK. The fonts
      listed under **Android** are provided by the Android system, so they don't
      need to be downloaded or bundled in your APK.
   #. Click **OK** to finish.

   .. rubric:: Layout Validation
      :name: layout-validation

   Layout Validation is a visual tool for simultaneously previewing layouts for
   different devices and display configurations, helping you catch problems in
   your layouts earlier in the process. To access this feature, click the
   **Layout Validation** tab in the top-right corner of the IDE window:

   |Screenshot of Layout Validation tab|

   **Figure 10**. Layout Validation tab.

   To switch between the available configuration sets, select one of the
   following from the **Reference Devices** drop-down at the top of the Layout
   Validation window:

   -  Reference Devices
   -  Custom
   -  Color Blind
   -  Font Sizes

   |Screenshot of drop-down menu in the Layout Validation tool|

   **Figure 11**. Reference Devices drop-down.

   .. rubric:: Reference Devices
      :name: ref-devices

   Reference devices are a set of devices that we recommend you test against.
   They include phone, foldable, tablet, and desktop interfaces. You should
   preview how your layout appears on this set of reference devices:

   |Screenshot of layout previews for different reference devices|

   **Figure 12**. Reference device previews in the Layout Validation tool.

   .. rubric:: Custom
      :name: custom

   To customize a display configuration to preview, choose from a variety of
   settings including language, device, or screen orientation:

   |Customize a device display in the Layout Validation tool|

   **Figure 16**. Configure a custom display in the Layout Validation tool.

   .. rubric:: Color Blind
      :name: color-blind

   To help make your app more accessible for users who are color blind, validate
   your layout with simulations of common types of color blindness:

   |Screenshot of simulation previews for different types of color blindness|

   **Figure 13**. Color blindness simulation previews in the Layout Validation
   tool.

   .. rubric:: Font Sizes
      :name: font-sizes

   Validate your layouts at various font sizes, and improve your app's
   accessibility for visually impaired users by testing your layouts with larger
   fonts:

   |Previews of app layouts at different font sizes with visible layout errors
   for large fonts|

   **Figure 14**. Variable font size previews in the Layout Validation tool.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2024-05-07 UTC.

.. |code mode icon| image:: https://source.android.google.cn/static/images/studio/write/code-mode-icon-2x.png
   :class: inline-icon
.. |split mode icon| image:: https://source.android.google.cn/static/images/studio/write/split-mode-icon-2x.png
   :class: inline-icon
.. |design mode icon| image:: https://source.android.google.cn/static/images/studio/write/design-mode-icon-2x.png
   :class: inline-icon
.. |Design mode icon| image:: https://source.android.google.cn/static/images/studio/write/design-mode-icon-2x.png
   :class: inline-icon
.. |add qualifier button| image:: https://source.android.google.cn/static/studio/images/buttons/add-arrows.png
   :class: inline-icon
.. |palette search button| image:: https://source.android.google.cn/static/studio/images/buttons/search.png
   :class: inline-icon
.. |add attribute button| image:: https://source.android.google.cn/static/studio/images/buttons/layout-editor-plus-icon.png
   :class: inline-icon
.. |solid indicator icon| image:: https://source.android.google.cn/static/studio/images/buttons/layout-editor-indicator-solid.png
   :class: inline-icon
.. |empty indicator icon| image:: https://source.android.google.cn/static/studio/images/buttons/layout-editor-indicator-empty.png
   :class: inline-icon
.. |red circle exclamation icon indicating a layout error| image:: https://source.android.google.cn/static/studio/images/buttons/layout-editor-errors.png
   :class: inline-icon
.. |orange triangle exclamation icon indicating a layout warning| image:: https://source.android.google.cn/static/studio/images/buttons/layout-editor-warnings-inline.png
   :class: inline-icon
.. |Screenshot of Layout Validation tab| image:: https://source.android.google.cn/static/studio/images/debug/layout-validation-tab.png
.. |Screenshot of drop-down menu in the Layout Validation tool| image:: https://source.android.google.cn/static/studio/images/debug/li-ref-devices-dropdown.png
.. |Screenshot of layout previews for different reference devices| image:: https://source.android.google.cn/static/studio/images/debug/layout-validation-ref-devices-array.png
.. |Customize a device display in the Layout Validation tool| image:: https://source.android.google.cn/static/studio/images/debug/layout-validation-custom.png
.. |Screenshot of simulation previews for different types of color blindness| image:: https://source.android.google.cn/static/studio/images/debug/layout-validation-color-blind.png
.. |Previews of app layouts at different font sizes with visible layout errors for large fonts| image:: https://source.android.google.cn/static/studio/images/debug/layout-validation-font-sizes.png

/Create animations
==================

.. https://developer.android.google.cn/studio/write/motion-editor?hl=en

.. container:: devsite-article-body clearfix

   Android Studio includes a visual design editor for the
   `MotionLayout <#/training/constraint-layout/motionlayout>`__ layout type,
   making it easier to create and preview animations.

   The Motion Editor provides a simple interface for manipulating elements from
   the MotionLayout library that serves as the foundation for animation in
   Android apps. Without Android Studio, creating and altering these elements
   requires manually editing constraints in XML resource files. The Motion
   Editor, however, can generate this XML for you, with support for start and
   end states, keyframes, transitions, and timelines.

   **Note:**\  Before using the Motion Editor, be sure to set the
   ``ConstraintLayout`` dependency in your ``build.gradle`` file to version
   ``2.0.0-beta3``, as described in the MotionLayout `reference documentation <#/training/constraint-layout/motionlayout#getting_started>`__.
   To get started with the Motion Editor:

   #. `Create a ConstraintLayout <#/training/constraint-layout#add-constraintlayout-to-your-project>`__.
   #. Right-click on the preview in the Layout Editor.
   #. Click **Convert to MotionLayout**, as shown below.

   |image-motion-editor-convert|

   After Android Studio converts your ConstraintLayout to MotionLayout, a Motion
   Scene file (an ``.xml`` file with ``_scene`` appended to your layout
   filename) is also added to the directory containing your XML.

   |image-convert_to_motion_layout|

   The ``MotionLayout`` then becomes your root layout, and it appears in the
   Motion Editor UI. The layout already includes a start ``ConstraintSet``, end
   ``ConstraintSet``, and a transition going from start to end.

   |image-start_end_constraint_set|

   You can use the overview graphic to select a ``ConstraintSet`` or
   ``Transition`` and to select components on the selection panel.

   |image-motion-editor-select|

   Then you can edit the constraints and attributes of either the start or end
   ``ConstraintSet`` the same way you would edit a ``ConstraintLayout``.

   |image-motion_edit_constraints|

   If you want to build more elements to your graph, you can use the creation
   icons to quickly add a ``ConstraintSet``, ``Transition``, or
   ``OnClick``/``OnSwipe`` gestures.

   |image-motion_creation_icons|

   To add a keyframe, first click on the **Transition** arrow:

   |image-motion-editor-add-keyframe|

   Then, in the **Transition** timeline pane, click on the top-right corner and
   select **KeyPosition**:

   |image-motion-editor-keyposition|

   This action opens a dialog where you can set attributes for the keyframe.

   You can also add ``OnClick`` and ``OnSwipe`` handlers to the Transition in
   the attribute panel.

   |image-motion_attribute_panel|

   This action opens a dialog where you can set attributes of the click such as
   target components and drag direction.

   The Motion Editor supports previewing animations on the design surface. When
   an animation is selected, click **Play** |image-motion_play_icon| above the timeline to
   preview the animation.

   |image-motion_animation_preview|

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2023-04-12 UTC.

.. |image-motion-editor-convert| image:: https://source.android.google.cn/static/studio/images/write/motion-editor-convert.png
.. |image-convert_to_motion_layout| image:: https://source.android.google.cn/static/studio/images/write/convert_to_motion_layout.png
.. |image-start_end_constraint_set| image:: https://source.android.google.cn/static/studio/images/write/start_end_constraint_set.png
.. |image-motion-editor-select| image:: https://source.android.google.cn/static/studio/images/write/motion-editor-select.gif
.. |image-motion_edit_constraints| image:: https://source.android.google.cn/static/studio/images/write/motion_edit_constraints.gif
.. |image-motion_creation_icons| image:: https://source.android.google.cn/static/studio/images/write/motion_creation_icons.png
.. |image-motion-editor-add-keyframe| image:: https://source.android.google.cn/static/studio/images/write/motion-editor-add-keyframe.png
.. |image-motion-editor-keyposition| image:: https://source.android.google.cn/static/studio/images/write/motion-editor-keyposition.png
.. |image-motion_attribute_panel| image:: https://source.android.google.cn/static/studio/images/write/motion_attribute_panel.png
.. |image-motion_play_icon| image:: https://source.android.google.cn/static/studio/images/write/motion_play_icon.png
.. |image-motion_animation_preview| image:: https://source.android.google.cn/static/studio/images/write/motion_animation_preview.gif

/Manage UI resources
====================

.. https://developer.android.google.cn/studio/write/resource-manager?hl=en

.. container:: devsite-article-body clearfix

   Resource Manager is a tool window for importing, creating, managing, and
   using resources in your app. To open the tool window, select **View > Tool
   Windows > Resource Manager** from the menu or select **Resource Manager** in
   the left side bar.

   |image-resource-manager-2x|

   **Figure 1.** The Resource Manager tool window.

   #. Click **Add** |image-ic_plus_dark| to add a new resource to your project. You can add
      image assets, vector assets, fonts, or resource files and values, or you
      can `import drawables <#import>`__ into your project.
   #. Select a module to view resources specific to that module.
   #. Search for a resource across all modules in your project using the search
      bar.
   #. Display your resources according to
      `type <#/guide/topics/resources/available-resources>`__ in the Resource
      Manager. Use these tabs to switch between resource types. Click the
      overflow icon |overflow icon| to show additional resource types.
   #. Filter the displayed resources from local dependent modules, external
      libraries, and the Android framework using the filter button. You can also
      use the filter to show theme attributes.
   #. Preview your resources in the main content area. Right-click a resource to
      see a context menu where you can rename the resource and search your app
      for where the resource is used.
   #. Click these buttons to view your resources as either tiles or lists.
   #. Click these buttons to change the preview size of your resources.

   In addition to these features, the Resource Manager provides a way to
   bulk-import drawables into your project. To bulk-import, you can either:

   -  Drag your image files—including SVG files—directly onto the Resource
      Manager.
   -  Use the **Import Drawables** wizard.

   For more information, see the `Import drawables into your project <#import>`__ section.

   To see more detailed information, double-click a resource in Resource
   Manager. If you have multiple versions of a resource, this detailed view
   displays each version along with any associated qualifiers, as shown in
   figure 2. From here, you can double-click a specific version to open it in an
   editor window.

   |image-resource-manager-flowers-2x|

   **Figure 2.** The Resource Manager showing versions of an image resource for
   different screen densities.

   .. rubric:: Import drawables into your project
      :name: import

   You can use the Resource Manager to import image resources into your project.
   For a list of supported image types, see `Image support <#/guide/topics/media/media-formats#image-formats>`__.

   To import image resources into your project, do the following:

   #. Drag your images directly onto the **Resource Manager** window in Android
      Studio.

      -  Alternatively, you can:

         #. Click the plus icon (**+**).
         #. Choose **Import Drawables**, as shown in figure 3.
         #. Select the files and folders that you want to import.

      |image-import-drawables-menu-2x|

      **Figure 3.** Select **Import Drawables** from the menu.

   #. The **Import drawables** dialog appears, as shown in figure 4. This dialog
      displays a list of the resources you're importing. You can rename
      resources by clicking the text box above a resource's preview.

      If you're providing multiple versions of the same resource, add `device configuration qualifiers <#automatic-parsing>`__, as described in the
      following section, that describe the specific configuration that each
      resource supports.

      For example, if you're providing multiple versions of the same resource
      for different screen densities, you can add a **Density** qualifier for
      each version. Note that if two or more resources have the same name and
      qualifiers, only one version is imported.

      For more information on resource qualifiers, see `Providing alternative resources <#/guide/topics/resources/providing-resources#AlternativeResources>`__.

      |image-import-drawables-add-qualifiers-2x|

      **Figure 4.** The **Import drawables** dialog.

      Once you've named your resources and added any necessary qualifiers, click
      **Next**.

   #. The next screen shows a summary of the resources you're importing. When
      you're ready to import, click **Import**.

   In the **Resource Manager** window, your resources are now ready for you to
   use in your project, as shown in figure 5.

   |image-resource-manager-after-import-2x|

   **Figure 5.** The Resource Manager now shows your imported images.

   .. rubric:: Automatically parse drawable densities
      :name: automatic-parsing

   When you import a file or folder and its path contains a density qualifier,
   the Resource Manager automatically applies the density qualifier as part of
   the import. The Resource Manager can parse both Android's density qualifiers
   and iOS's scale factors.

   This table lists how different supported densities are represented for
   Android and iOS:

   .. list-table::
      :header-rows: 1

      - 

         - Density
         - Android density qualifier
         - iOS scaling factor
      - 

         - Low-density (~120 dpi)
         - ``ldpi``
         - not supported
      - 

         - Medium-density (~160 dpi)
         - ``mdpi``
         - original scale
      - 

         - High-density (~240 dpi)
         - ``hdpi``
         - not supported
      - 

         - Extra-high-density (~320 dpi)
         - ``xhdpi``
         - @2x
      - 

         - Extra-extra-high-density (~480 dpi)
         - ``xxhdpi``
         - @3x
      - 

         - Extra-extra-extra-high-density (~640 dpi)
         - ``xxxhdpi``
         - @4x

   Here are some examples of how input paths translate to resource paths after
   import:

   Android density qualifier: ``hdpi``
      **Input path:** /UserFolder/icon1/**hdpi**/icon.png
      **Resource path:** *<projectFolder>*/*<moduleFolder>*
      /src/main/res/**drawable-hdpi**/icon.png
   Android density qualifier: ``xxhdpi``
      **Input path:** /UserFolder/icon1/abc-**xxhdpi**/icon.png
      **Resource path:** *<projectFolder>*/*<moduleFolder>*
      /src/main/res/**drawable-xxhdpi**/icon.png
   iOS scaling factor: @2x
      **Input path:** /UserFolder/icon1/icon\ **@2x**.png
      **Resource path:** *<projectFolder>*/*<moduleFolder>*
      /src/main/res/**drawable-xhdpi**/icon.png
   iOS scaling factor: @2x
      **Input path:** /UserFolder/icon1/icon\ **@2x**\ \_alternate.png
      **Resource path:** *<projectFolder>*/*<moduleFolder>*
      /src/main/res/**drawable-xhdpi**/icon_alternate.png

   For more information on supporting devices with different pixel densities,
   see `Support different pixel densities <#/training/multiscreen/screendensities>`__.

   .. rubric:: Drag drawables into your layout
      :name: drag-and-drop

   You can drag drawables from the Resource Manager directly onto a layout. When
   you drag a resource onto a layout, the Resource Manager creates a
   corresponding ``ImageView`` for that drawable, as shown in animation 1:

   |image-resource-manager-drag-and-drop-design|

   **Animation 1.** Drag drawables onto a layout in **Design** view.

   You can also drag directly onto the XML of the layout, as shown in animation
   2:

   |image-resource-manager-drag-and-drop-xml|

   **Animation 2.** Drag drawables onto a layout in **Text** view.

   When dragging a drawable onto a layout in the **Text** tab, the generated
   code differs depending on where you place the drawable in the layout:

   -  If you drag a drawable onto a blank area, the Resource Manager generates a
      corresponding ``ImageView``.
   -  If you drag a drawable onto any attribute in the layout XML, the Resource
      Manager replaces that attribute value with a reference to the drawable.
      You can also drag any other resource type onto an XML attribute to replace
      the attribute value.
   -  If you drag a drawable onto an existing ``ImageView`` element, the
      Resource Manager replaces the corresponding source attribute.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2023-04-12 UTC.

.. |image-resource-manager-2x| image:: https://source.android.google.cn/static/images/studio/write/resource-manager-2x.png
   :width: 550px
.. |image-ic_plus_dark| image:: https://source.android.google.cn/static/studio/images/buttons/ic_plus_dark.png
   :class: inline-icon
.. |overflow icon| image:: https://source.android.google.cn/static/images/studio/write/overflow-icon-2x.png
   :class: inline-icon
.. |image-resource-manager-flowers-2x| image:: https://source.android.google.cn/static/images/studio/write/resource-manager-flowers-2x.png
   :width: 574px
.. |image-import-drawables-menu-2x| image:: https://source.android.google.cn/static/images/studio/write/import-drawables-menu-2x.png
.. |image-import-drawables-add-qualifiers-2x| image:: https://source.android.google.cn/static/images/studio/write/import-drawables-add-qualifiers-2x.png
.. |image-resource-manager-after-import-2x| image:: https://source.android.google.cn/static/images/studio/write/resource-manager-after-import-2x.png
.. |image-resource-manager-drag-and-drop-design| image:: https://source.android.google.cn/static/images/studio/write/resource-manager-drag-and-drop-design.gif
.. |image-resource-manager-drag-and-drop-xml| image:: https://source.android.google.cn/static/images/studio/write/resource-manager-drag-and-drop-xml.gif

/Add multi-density vector graphics
==================================

.. https://developer.android.google.cn/studio/write/vector-asset-studio?hl=en

.. container:: devsite-article-body clearfix

   Android Studio includes a tool called Vector Asset Studio that helps you add
   material icons and import Scalable Vector Graphic (SVG) and Adobe Photoshop
   Document (PSD) files into your project as vector drawable resources. Using
   vector drawables instead of bitmaps reduces the size of your APK because the
   same file can be resized for different screen densities without loss of image
   quality. For older versions of Android that don't support vector drawables,
   Vector Asset Studio can, at build time, turn your vector drawables into
   different bitmap sizes for each screen density.

   .. container:: video-wrapper-left

   .. rubric:: About Vector Asset Studio
      :name: about

   Vector Asset Studio adds a vector graphic to the project as an XML file that
   describes the image. Maintaining one XML file can be easier than updating
   multiple raster graphics at various resolutions.

   Android 4.4 (API level 20) and lower doesn't support vector drawables. If
   your minimum API level is set at one of these API levels, you have two
   options when using Vector Asset Studio: generate Portable Network Graphic
   (PNG) files (the default) or use the Support Library.

   For backward-compatibility, Vector Asset Studio generates raster images of
   the vector drawable. The vector and raster drawables are packaged together in
   the APK. You can refer to vector drawables as
   `Drawable <#/reference/android/graphics/drawable/Drawable>`__ in Java code
   or ``@drawable`` in XML code; when your app runs, the corresponding vector or
   raster image displays automatically depending on the API level.

   If you want to use vector drawables only, you can use Android Support Library
   23.2 or higher. This technique requires a change to your ``build.gradle``
   file before you run Vector Asset Studio, as described in `Support Library Backward Compatibility <#sloption>`__. The
   `VectorDrawableCompat <#/reference/androidx/vectordrawable/graphics/drawable/VectorDrawableCompat>`__
   class in the Support Library allows you to support ``VectorDrawable`` in
   Android 2.1 (API level 7) and higher.

   .. rubric:: Supported vector graphic types
      :name: types

   The Google Material Design specification provides `material icons <https://www.google.com/design/icons>`__ that you can use in your
   Android apps. Vector Asset Studio helps you choose, import, and size material
   icons, as well as define opacity and the Right-to-Left (RTL) mirroring
   setting.

   Vector Asset Studio also lets you import your own SVG and PSD files. SVG is
   an XML-based open standard of the World Wide Web Consortium (W3C). The PSD
   file format supports Adobe Photoshop features. Vector Asset Studio supports
   the essential standards, but not all SVG and PSD features. When you specify
   an SVG or PSD file, Vector Asset Studio gives immediate feedback about
   whether the graphics code is supported or not. It converts the file into an
   XML file containing
   `VectorDrawable <#/reference/android/graphics/drawable/VectorDrawable>`__
   code. If you receive errors, you should verify that your vector drawable
   appears as intended. For more information about allowed PSD features, see
   `Support and restrictions for PSD files <#PSD>`__.

   For Android 5.0 (API level 21) and higher, you can use the
   `AnimatedVectorDrawable <#/reference/android/graphics/drawable/AnimatedVectorDrawable>`__
   class to animate the properties of the
   `VectorDrawable <#/reference/android/graphics/drawable/VectorDrawable>`__
   class. With the Support Library, you can use the
   `AnimatedVectorDrawableCompat <#/reference/androidx/vectordrawable/graphics/drawable/AnimatedVectorDrawableCompat>`__
   class to animate the ``VectorDrawable`` class for Android 3.0 (API level 11)
   and higher. For more information, see `Animate vector drawables <#/training/material/animations#AnimVector>`__.

   .. rubric:: Considerations for SVG and PSD files
      :name: when

   A vector drawable is appropriate for simple icons. The `material icons <https://www.google.com/design/icons>`__ provide good examples of the
   types of images that work well as vector drawables in an app. In contrast,
   many app launch icons do have many details, so they work better as raster
   images.

   The initial loading of a vector drawable can cost more CPU cycles than the
   corresponding raster image. Afterward, memory use and performance are similar
   between the two. We recommend that you limit a vector image to a maximum of
   200 x 200 dp; otherwise, it can take too long to draw.

   Although vector drawables do support one or more colors, in many cases it
   makes sense to color icons black (``android:fillColor="#FF000000"``). Using
   this approach, you can add a
   `tint <#/training/material/drawables#DrawableTint>`__ to the vector drawable
   that you placed in a layout, and the icon color changes to the tint color. If
   the icon color isn't black, the icon color might instead blend with the tint
   color.

   .. rubric:: Vector drawable backward-compatibility solutions
      :name: apilevel

   The following table summarizes the two techniques that you can use for
   backward-compatibility:

   .. list-table::
      :widths: 13 13 13 13 13 13
      :header-rows: 1

      - 

         - Technique
         - Drawables in APK
         - VectorDrawable XML elements
         - Version
         - Build flags
         - App code
      - 

         - **PNG generation**
         - Vector and raster
         - `Subset supported <#apilevel>`__
         - SVG: `Android plugin for Gradle <#/studio/releases/gradle-plugin>`__
            1.5.0 or higher

            PSD: Android Studio 2.2 or higher
         - Default
         - Variety of coding techniques supported
      - 

         - **Support Library 23.2 or higher**
         - Vector
         - Full support
         - Android plugin for Gradle 2.0 or higher
         - Support Library statements required
         - `Subset of coding techniques supported <https://android-developers.blogspot.com/2016/02/android-support-library-232.html>`__

   Using vector drawables can produce a smaller APK, but the initial loading of
   vector drawables can take longer.

   .. rubric:: PNG generation
      :name: pngoption

   Android 5.0 (API level 21) and higher provides vector drawable support. If
   your app has a minimum API level that's lower, Vector Asset Studio adds the
   vector drawable file to your project; also, at build time, Gradle creates PNG
   raster images at various resolutions. Gradle generates the PNG densities
   specified by the Domain Specific Language (DSL)
   `generatedDensities <https://google.github.io/android-gradle-dsl/1.4/com.android.build.gradle.internal.dsl.ProductFlavor.html#com.android.build.gradle.internal.dsl.ProductFlavor:generatedDensities>`__
   property in a ``build.gradle`` file.

   For Android 5.0 (API level 21) and higher, Vector Asset Studio supports all
   of the
   `VectorDrawable <#/reference/android/graphics/drawable/VectorDrawable>`__
   elements. For backward compatibility with Android 4.4 (API level 20) and
   lower, Vector Asset Studio supports the following XML elements:

   .. container:: wrap

      .. container:: cols

         .. container:: col-1of3

            ``<vector>``

            -  ``android:width``
            -  ``android:height``
            -  ``android:viewportWidth``
            -  ``android:viewportHeight``
            -  ``android:alpha``

         .. container:: col-1of3

            ``<group>``

            -  ``android:rotation``
            -  ``android:pivotX``
            -  ``android:pivotY``
            -  ``android:scaleX``
            -  ``android:scaleY``
            -  ``android:translateX``
            -  ``android:translateY``

         .. container:: col-1of3

            ``<path>``

            -  ``android:pathData``
            -  ``android:fillColor``
            -  ``android:strokeColor``
            -  ``android:strokeWidth``
            -  ``android:strokeAlpha``
            -  ``android:fillAlpha``
            -  ``android:strokeLineCap``
            -  ``android:strokeLineJoin``
            -  ``android:strokeMiterLimit``

   You can change the XML code that Vector Asset Studio generates, although it’s
   not a best practice. Changing the values in the code should not cause any
   issues, as long as they’re valid and static. If you want to add XML elements,
   you need to make sure that they’re supported based on your minimum API level.

   .. rubric:: Support Library
      :name: sloption

   This technique requires Android Support Library 23.2 or higher and Android
   Plugin for Gradle 2.0 or higher, and uses vector drawables only. The
   `VectorDrawableCompat <#/reference/androidx/vectordrawable/graphics/drawable/VectorDrawableCompat>`__
   class in the Support Library allows you to support ``VectorDrawable`` in
   Android 2.1 (API level 7) and higher.

   Before using Vector Asset Studio, you must add a statement to your
   ``build.gradle`` file:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Groovy
               :name: groovy

            .. code:: prettyprint

               android {
                   defaultConfig {
                       vectorDrawables.useSupportLibrary = true
                   }
               }

               dependencies {
                   implementation 'com.android.support:appcompat-v7:23.2.0'
               }

         .. container:: section

            .. rubric:: Kotlin
               :name: kts

            .. code:: prettyprint

               android {
                   defaultConfig {
                       vectorDrawables.useSupportLibrary = true
                   }
               }

               dependencies {
                   implementation("com.android.support:appcompat-v7:23.2.0")
               }

   You must also use coding techniques that are compatible with the Support
   Library, such as using the ``app:srcCompat`` attribute instead of the
   ``android:src`` attribute for vector drawables. For more information, see
   `Android Support Library 23.2 <https://android-developers.blogspot.com/2016/02/android-support-library-232.html>`__.

   .. rubric:: Running Vector Asset Studio
      :name: running

   To start Vector Asset Studio:

   #. In Android Studio, open an Android app project.
   #. In the *Project* window, select the `Android view <#/studio/projects#ProjectFiles>`__.
   #. Right-click the **res** folder and select **New** > **Vector Asset**.
   #. If a *Need Newer Android Plugin for Gradle* dialog appears instead,
      correct your Gradle version as follows:

      a. Select **File** > **Project Structure**.
      b. In the *Project Structure* dialog, select **Project**.
      c. In the **Android Plugin Version** field, change the Android Plugin for
         Gradle version to **1.5.0** or higher, and click **OK**.
      d. In the `Android view <#/studio/projects#ProjectFiles>`__ of the
         *Project* window, right-click the **res** folder and select **New** >
         **Vector Asset**.

   #. Continue with `Importing a Vector Graphic <#importing>`__.

   .. rubric:: Importing a vector graphic
      :name: importing

   Vector Asset Studio helps you to import a vector graphics file into your app
   project. Follow one of the following procedures:

   -  `Adding a material icon <#materialicon>`__
   -  `Importing an SVG or PSD file <#svg>`__

   .. rubric:: Adding a material icon
      :name: materialicon

   After you `open Vector Asset Studio <#running>`__, you can add a material
   icon as follows:

   #. In Vector Asset Studio, select **Material Icon**.

   #. In the Icon field, click the button.

   #. The **Select Icon** dialog appears. You can filter which icons are visible
      by selecting an icon category from the list on the left or typing in the
      search field as shown in figure 2.

      |image-vector-asset-studio-icon-filter_2-3_2x|

      **Figure 2**. Filtering material icons in the Vector Asset Studio.

   #. Optionally change the resource name, size, opacity, and Right-To-Left
      (RTL) mirroring setting:

      -  **Name** - Type a new name if you don’t want to use the default name.
         Vector Asset Studio automatically creates a unique name (adds a number
         to the end of the name) if that resource name already exists in the
         project. The name can contain lowercase characters, underscores, and
         digits only.
      -  **Override** - Select this option if you want to adjust the size of the
         image. When you type a new size, the change appears in the preview
         area.
      -  **Opacity** - Use the slider to adjust the opacity of the image. The
         change appears in the preview area.
      -  **Enable auto mirroring for RTL layout** - Select this option if you
         want a mirror image to display when the layout is right to left,
         instead of left to right. For example, some languages are read right to
         left; if you have an arrow icon, you might want to display a mirror
         image of it in this case. Note that if you’re working with an older
         project, you might also need to add ``android:supportsRtl="true"`` to
         your app manifest. Auto-mirroring is supported on Android 5.0 (API
         level 21) and higher, and with the Support Library.

   #. Click **Next**.

   #. Optionally change the module and resource directory:

      -  **Res Directory** - Select the resource source set where you want to
         add the vector drawable: ``src/main/res``, ``src/debug/res``,
         ``src/release/res``, or a user-defined source set. The main source set
         applies to all build variants, including debug and release. The debug
         and release source sets override the main source set and apply to one
         version of a build. The debug source set is for debugging only. To
         define a new source set, select **File** > **Project Structure** >
         **app** > **Build Types**. For example, you could define a beta source
         set and create a version of an icon that includes the text "BETA" in
         the bottom right corner. For more information, see `Configure Build Variants <#/studio/build/build-variants#workBuildVariants>`__.

      The **Output Directories** area displays the vector drawable and the
      directory where it will appear.

   #. Click **Finish**.

   #. Build the project.

   .. rubric:: Importing an SVG or PSD file
      :name: svg

   After you `open Vector Asset Studio <#running>`__, you can import an SVG or
   PSD file as follows:

   #. In Vector Asset Studio, select **Local file**.

   #. Specify an **Image file** by clicking **…** .

   #. Optionally change the resource name, size, opacity, and Right-To-Left
      (RTL) mirroring setting:

      -  **Name** - Type a new name if you don’t want to use the default name.
         Vector Asset Studio automatically creates a unique name (adds a number
         to the end of the name) if that resource name already exists in the
         project. The name can contain lowercase characters, underscores, and
         digits only.
      -  **Override** - Select this option if you want to adjust the size of the
         image. After you select it, the size changes to the size of the image
         itself. Whenever you change the size, the change appears in the preview
         area. The default is 24 x 24 dp, which is defined in the `material design <https://www.google.com/design/icons>`__ specification.
      -  **Opacity** - Use the slider to adjust the opacity of the image. The
         change appears in the preview area.
      -  **Enable auto mirroring for RTL layout** - Select this option if you
         want a mirror image to display when the layout is right to left,
         instead of left to right. For example, some languages are read right to
         left; if you have an arrow icon, you might want to display a mirror
         image of it in this case. Note that if you’re working with an older
         project, you might need to add ``android:supportsRtl="true"`` to your
         app manifest. Auto-mirroring is supported by Android 5.0 (API level 21)
         and higher, and the Support Library.

   #. Click **Next**.

   #. Optionally change the resource directory:

      -  **Res Directory** - Select the resource source set where you want to
         add the vector drawable: ``src/main/res``, ``src/debug/res``,
         ``src/release/res``, or a user-defined source set. The main source set
         applies to all build variants, including debug and release. The debug
         and release source sets override the main source set and apply to one
         version of a build. The debug source set is for debugging only. To
         define a new source set, select **File** > **Project Structure** >
         **app** > **Build Types**. For example, you could define a beta source
         set and create a version of an icon that includes the text "BETA" in
         the bottom right corner. For more information, see `Configure Build Variants <#/studio/build/build-variants#workBuildVariants>`__.

      The **Output Directories** area displays the vector drawable and the
      directory where it will appear.

   #. Click **Finish**.

   #. Build the project.

   .. rubric:: Adding a vector drawable to a layout
      :name: layout

   In a layout file, you can set any icon-related widget, such as
   `ImageButton <#/reference/android/widget/ImageButton>`__,
   `ImageView <#/reference/android/widget/ImageView>`__, and so on, to point
   to a vector drawable. For example, the following layout shows a vector
   drawable displayed on a button:

   |image-vas-layout_2-2_2x|
   **Figure 4**. A vector drawable displayed on a button in a layout.

   To display a vector drawable on a widget, as shown in the figure:

   #. Open a project and `import a vector drawable <#running>`__.
   #. In the `Android view <#/studio/projects#ProjectFiles>`__ of the *Project*
      window, double-click a layout XML file, such as ``content_main.xml``.
   #. Click the **Design** tab to display the `Layout Editor <#/studio/write/layout-editor>`__.
   #. Drag the `ImageButton <#/reference/android/widget/ImageButton>`__
      widget from the *Palette* window onto the Layout Editor.
   #. In the *Resources* dialog, select **Drawable** in the left pane, and then
      select the vector drawable you imported. Click **OK**.
   #. To change the color of the image to the accent color defined in the theme,
      in the *Properties* window, locate the **tint** property and click **…** .
   #. In the *Resources* dialog, select **Color** in the left pane, and then
      select **colorAccent**. Click **OK**.

   If the project uses the Support Library, the ``ImageButton`` code should be
   similar to the following:

   .. code:: prettyprint

      <ImageButton
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:srcCompat="@drawable/ic_build_black_24dp"
        tools:layout_editor_absoluteX="11dp"
        tools:layout_editor_absoluteY="225dp"
        android:id="@+id/imageButton"
        android:tint="@color/colorAccent" />

   If the project doesn't use the Support Library, the vector drawable code
   would instead be ``android:src="@drawable/ic_build_black_24dp"``.

   .. rubric:: Referring to a vector drawable in code
      :name: referring

   You can normally refer to a vector drawable resource in a generic way in your
   code, and when your app runs, the corresponding vector or raster image
   displays automatically depending on the API level:

   -  In most cases, you can refer to vector drawables as ``@drawable`` in XML
      code or `Drawable <#/reference/android/graphics/drawable/Drawable>`__
      in Java code.
   -  If your app uses the Support Library at all (even if you don't have a
      ``vectorDrawables.useSupportLibrary = true`` statement in your
      ``build.gradle`` file), you can also refer to a vector drawable with an
      ``app:srcCompat`` statement. For example:
   -  Occasionally, you might need to typecast the drawable resource to its
      exact class, such as when you need to use specific features of the
      `VectorDrawable <#/reference/android/graphics/drawable/VectorDrawable>`__
      class. To do so, you could use Java code such as the following:

   You can access vector drawable resources from the main thread only.

   For the Support Library technique, you must use coding techniques that are
   compatible with the Support Library. For more information, see `Android Support Library 23.2 <https://android-developers.blogspot.com/2016/02/android-support-library-232.html>`__.

   .. rubric:: Modifying XML code generated by Vector Asset Studio
      :name: code

   You can modify the vector drawable XML code, but not the PNGs and
   corresponding XML code generated at build time. However, we don't recommend
   it.

   When using the PNG generation technique, Vector Asset Studio makes sure that
   the vector drawable and the PNGs match, and that the manifest contains the
   proper code. If you add code that's `not supported <#apilevel>`__ on Android
   4.4 (API level 20) and lower, your vector and PNG images might differ. You
   also need to make sure that the manifest contains the code to support your
   changes.

   To modify the vector XML file when you're not using the Support Library
   technique:

   #. In the *Project* window, double-click the generated vector XML file in the
      **drawable** folder.
   #. Edit the XML code based on what’s supported by the minimum API level:

      -  Android 5.0 (API level 21) and higher - Vector Asset Studio supports
         all of the
         `Drawable <#/reference/android/graphics/drawable/Drawable>`__ and
         `VectorDrawable <#/reference/android/graphics/drawable/VectorDrawable>`__
         elements. You can add XML elements and change values.
      -  Android 4.4 (API level 20) and lower - Vector Asset Studio supports all
         of the `Drawable <#/reference/android/graphics/drawable/Drawable>`__
         elements and a subset of the
         `VectorDrawable <#/reference/android/graphics/drawable/VectorDrawable>`__
         elements. See `Vector Drawable Backward-Compatibility Solutions <#apilevel>`__ for a list. You can change values in the
         generated code and add XML elements that are supported.

   #. Build the project and check that the vector drawable and corresponding
      raster images look the same.

   .. rubric:: Deleting a vector drawable from a project
      :name: delete

   To remove a vector drawable from a project:

   #. In the *Project* window, delete the generated vector XML file by selecting
      the file and pressing the **Delete** key (or select **Edit** >
      **Delete**).
   #. Optionally select options to find where the file is used in the project,
      and click **OK**.
   #. Select **Build** > **Clean Project**.

   .. rubric:: Delivering an app Containing vector drawables
      :name: apk

   If you used the Support Library technique or your minimum API level is
   Android 5.0 (API level 21) or higher, your APK will contain the vector
   drawables that you added with Vector Asset Studio. These APKs will be smaller
   than if the vector images were converted to PNGs.

   When your minimum API level includes Android 4.4 (API level 20) or lower, and
   you have corresponding vector drawables and raster images in your project,
   you have two options for delivering your APK files:

   -  Create one APK that includes both the vector drawables and the
      corresponding raster representations. This solution is the simplest to
      implement.
   -  Create separate APKs for different API levels. When you don’t include the
      corresponding raster images in the APK for Android 5.0 (API level 21) and
      higher, the APK can be much smaller in size. For more information, see
      `Multiple APK Support <#/google/play/publishing/multiple-apks>`__.

   .. rubric:: Support and restrictions for PSD files
      :name: PSD

   Vector Asset Studio doesn't support all PSD file features. The following list
   summarizes supported and unsupported PSD characteristics, as well as some
   conversion details.

   .. rubric:: Document
      :name: document

   Supported:

   -  A PSD color mode of bitmap, grayscale, indexed, RGB, Lab, or CMYK.
   -  A color depth of 8, 16, or 32 bits.

   Conversion details:

   -  PSD document dimensions become the vector drawable and viewport
      dimensions.

   Not supported:

   -  A PSD color mode of duotone or multichannel.

   .. rubric:: Shapes
      :name: shapes

   Supported:

   -  Clipping masks, if the clipping base is another shape.
   -  Shape operations, including merge/add, intersect, subtract, and exclude.

   Not supported:

   -  Even-odd fill rule used by Photoshop shapes. In Android 6.0 (API level 23)
      and lower, vector drawables support the nonzero fill rule only. In
      self-intersecting shapes, this limitation can lead to rendering
      differences between the PSD and the resulting vector drawable. To fix this
      issue, add ``android:fillType="evenOdd"`` on the shape in the vector
      drawable. For example:

      .. code:: prettyprint

         <vector xmlns:android="https://schemas.android.com/apk/res/android"
             android:viewportHeight="168"
             android:height="24dp"
             android:viewportWidth="209"
             android:width="24dp">

             <path
                 android:fillAlpha="1.0"
                 android:fillColor="#000000"
                 android:fillType="evenOdd"
                 android:pathData="M24,58 L24,167 L114,167 L114,66 M64,1 L64,96 L208,96 L208,8 M1,97 L146,139 L172,47"/>
         </vector>

   .. rubric:: Strokes and fills
      :name: strokes-and-fills

   Supported:

   -  Strokes, including color, opacity, width, join, cap, dashes, and
      alignment.
   -  Solid color fills and strokes.
   -  Stroke and fill colors specified as RGB, Lab, or CMYK.

   Conversion details:

   -  If a stroke is dashed, clipped using a clipping base, or uses an alignment
      different from center, Vector Asset Studio converts it into a fill shape
      in the vector drawable.

   Not supported:

   -  Color fills and strokes other than solid, such as gradients.

   .. rubric:: Opacity
      :name: opacity

   Supported:

   -  Shape layers with an opacity of 0.

   Conversion details:

   -  Vector Asset Studio multiplies the fill opacity with the layer opacity to
      compute the fill alpha.
   -  The tool multiplies the opacity of the clipping base (if there is a
      clipping base) with the fill alpha to compute the final fill alpha.
   -  The tool multiplies the stroke opacity with the layer opacity to compute
      the stroke alpha.
   -  The tool multiplies the opacity of the clipping base (if there is a
      clipping base) with the stroke alpha to compute the final stroke alpha.

   .. rubric:: Layers
      :name: layers

   Supported:

   -  Any *visible* shape layer.

   Conversion details:

   -  Vector Asset Studio preserves the name of the layers in the vector
      drawable file.

   Not supported:

   -  Layer effects.
   -  Adjustment and text layers.
   -  Blending modes (ignored).

   .. rubric:: Support and restrictions for SVG files
      :name: svg-support

   Vector Asset Studio doesn't support all SVG file features. The following
   section summarizes supported and unsupported features when the tool converts
   an SVG file to a
   `VectorDrawable <#/reference/android/graphics/drawable/VectorDrawable>`__,
   along with additional conversion details.

   .. rubric:: Supported features
      :name: svg-supported

   ``VectorDrawable`` supports all features from `Tiny SVG 1.2 <https://www.w3.org/TR/SVGTiny12/>`__ except for
   `text <https://www.w3.org/TR/SVGTiny12/text.html>`__.

   .. rubric:: Shapes
      :name: shapes_1

   ``VectorDrawable`` supports `SVG paths <https://www.w3.org/TR/SVG/paths.html#DAttribute>`__.

   The tool converts primitive
   `shapes <https://www.w3.org/TR/SVG/shapes.html>`__ such as circles, squares,
   and polygons to paths.

   .. rubric:: Transformations
      :name: transformations

   The tool supports transformation matrices and applies them directly to child
   paths.

   .. rubric:: Groups
      :name: groups

   The tool supports group elements for translation, scaling, and rotation.
   Groups do not support an opacity property.

   The tool also applies any group styling or opacity to child paths.

   .. rubric:: Fills and strokes
      :name: fills-and-strokes

   Paths can be filled and stroked using solid colors or gradients (linear,
   radial, or angular). Only centered strokes are supported. Blend modes are not
   supported. Dashed paths are not supported.

   .. rubric:: Masks
      :name: masks

   The tool supports one clipping mask per group.

   .. rubric:: Features not supported by the SVG importer
      :name: svg-unsupported

   Any feature not listed in the `Supported features <#svg-supported>`__ section
   above is unsupported. Notable unsupported features include the following:

   -  Filter effects: effects such as drop shadows, blurs, and color matrix are
      not supported.
   -  Text: conversion of text to shapes using other tools is recommended.
   -  Pattern fills

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2024-01-03 UTC.

.. |image-vector-asset-studio-icon-filter_2-3_2x| image:: https://source.android.google.cn/static/studio/images/write/vector-asset-studio-icon-filter_2-3_2x.png
   :width: 704px
.. |image-vas-layout_2-2_2x| image:: https://source.android.google.cn/static/images/tools/vas-layout_2-2_2x.png

/Create app icons
=================

.. https://developer.android.google.cn/studio/write/create-app-icons?hl=en

.. container:: devsite-article-body clearfix

   Icons help your users identify your app and actions within it. You can access
   the suite of Material icons and add them to your app directly with Compose.
   To create custom icons or icons for your app with Views, Android Studio
   offers Image Asset Studio.

   .. rubric:: Add icons within your app with Compose
      :name: material-icons-compose

   With Compose, you can import the `Compose Material library <#/jetpack/androidx/releases/compose-material>`__ or `Compose Material 3 library <#/jetpack/androidx/releases/compose-material3>`__ to access any
   Material icons. Then use the ``Icon`` composable to add icons to your app.
   The Material icons are most useful for action bar icons, tab icons, or
   notification icons. For more information, see `Material icons <#/jetpack/compose/graphics/images/material>`__.

   If you need to create custom icons, for example your app launcher icon, use
   `Image Asset Studio <#about>`__. For launcher icons, the
   ``AndroidManifest.xml`` file must reference the ``mipmap/`` location. Image
   Asset Studio adds this code automatically. The following manifest file code
   references the ``ic_launcher`` icon in the ``mipmap/`` directory:

   .. code:: prettyprint

        <application android:name="ApplicationTitle"
                  android:label="@string/app_label"
                  android:icon="@mipmap/ic_launcher" >
        

   .. rubric:: About Image Asset Studio
      :name: about

   Android Studio includes a tool called Image Asset Studio that helps you
   generate your own app icons from `material icons <https://design.google.com/icons/>`__, custom images, and text strings.
   It generates a set of icons at the appropriate resolution for each `pixel density <#/training/multiscreen/screendensities>`__ that your app supports.
   Image Asset Studio places the newly generated icons in density-specific
   folders under the ``res/`` directory in your project. At runtime, Android
   uses the appropriate resource based on the screen density of the device your
   app is running on.

   Image Asset Studio helps you generate the following icon types:

   -  Launcher icons
   -  Action bar and tab icons
   -  Notification icons

   The following sections describe the icon types that you can create and the
   image and text inputs that you can use.

   .. rubric:: Adaptive and legacy launcher icons
      :name: launcher

   A launcher icon is a graphic that represents your app to users. It can:

   -  Appear in the list of apps installed on a device and on the Home screen.
   -  Represent shortcuts into your app (for example, a contact shortcut icon
      that opens detail information for a contact).
   -  Be used by launcher apps.
   -  Help users find your app on Google Play.

   Adaptive launcher icons can display as a variety of shapes across different
   device models and are available in Android 8.0 (API level 26) and higher.
   Android Studio 3.0 introduces support for creating adaptive icons using Image
   Asset Studio. Image Asset Studio generates previews of an adaptive icon in
   circle, squircle, rounded square, and square shapes, as well as a full bleed
   preview of the icon. Image Asset Studio also generates legacy, round, and
   Google Play Store previews of the icon. A legacy launcher icon is a graphic
   that represents your app on a device's home screen and in the launcher
   window. Legacy launcher icons are intended for use on devices running Android
   7.1 (API level 25) or lower, which don't support adaptive icons, and don't
   display as varying shapes across device models.

   Image Asset Studio places the icons in the proper locations in the
   ``res/mipmap-``\ ``density``\ ``/`` directories. It also creates a 512 x 512
   pixel image that's appropriate for the Google Play store.

   We recommend that you use the material design style for launcher icons, even
   if you support older Android versions.

   See `Adaptive Launcher Icons <#/guide/practices/ui_guidelines/icon_design_adaptive>`__ and `Product Icons - Material Design <https://material.io/design/iconography/product-icons.html>`__ for
   more information.

   .. rubric:: Action bar and tab icons
      :name: actionbar-tab

   Action bar icons are graphical elements placed in the action bar and that
   represent individual action items. See `Adding and Handling Actions <#/training/appbar/actions>`__, `App Bar - Material Design <https://material.google.com/layout/structure.html#structure-app-bar>`__,
   and `Action Bar Design <#/design/patterns/actionbar>`__ for more information.

   Tab icons are graphical elements used to represent individual tabs in a
   multi-tab interface. Each tab icon has two states: unselected and selected.
   See `Creating Swipe Views with Tabs <#/training/implementing-navigation/lateral>`__ and `Tabs - Material Design <https://material.google.com/components/tabs.html>`__ for more
   information.

   Image Asset Studio places the icons in the proper locations in the
   ``res/drawable-``\ ``density``\ ``/`` directories.

   We recommend that you use the material design style for action bar and tab
   icons, even if you support older Android versions. Use ``appcompat`` and
   other `support libraries <#/topic/libraries/support-library>`__ to deliver
   your material design UI to older platform versions.

   As an alternative to Image Asset Studio, you can use `Vector Asset Studio <#/studio/write/vector-asset-studio>`__ to create action bar and tab
   icons. Vector drawables are appropriate for simple icons and can reduce the
   size of your app.

   .. rubric:: Notification icons
      :name: notification

   A notification is a message that you can display to the user outside of the
   normal UI of your app. Image Asset Studio places notifications icons in the
   proper locations in the ``res/drawable-``\ ``density``\ ``/`` directories:

   -  Icons for Android 2.2 (API level 8) and lower are placed in
      ``res/drawable-``\ ``density``\ ``/`` directories.
   -  Icons for Android 2.3 to 2.3.7 (API level 9 to 10) are placed in
      ``res/drawable-``\ ``density``\ ``-v9/`` directories.
   -  Icons for Android 3 (API level 11) and higher are placed in
      ``res/drawable-``\ ``density``\ ``-v11/`` directories.

   If your app supports Android 2.3 to 2.3.7 (API level 9 to 10), Image Asset
   Studio generates a gray version of your icon. Later Android versions use the
   white icon that Image Asset Studio generates.

   See `Notifications <#/guide/topics/ui/notifiers/notifications>`__;
   `Notifications Material Design <https://material.io/design/platform-guidance/android-notifications>`__;
   `Notifications, Android 5.0 Changes <#/about/versions/lollipop#Notifications>`__; `Notifications, Android 4.4 and Lower <#/design/patterns/notifications_k>`__; and `Status Bar Icons, Android 3.0 and Lower <#/guide/practices/ui_guidelines/icon_design_status_bar>`__ for more
   information.

   .. rubric:: Clip art
      :name: clipart

   Image Asset Studio makes it easy for you to import Google material icons in
   VectorDrawable and PNG formats: simply select an icon from a dialog. For more
   information, see `Material Icons <https://fonts.google.com/icons>`__.

   .. rubric:: Images
      :name: image

   You can import your own images and adjust them for the icon type. Image Asset
   Studio supports the following file types: PNG (preferred), JPG (acceptable),
   and GIF (discouraged).

   .. rubric:: Text strings
      :name: text

   Image Asset Studio lets you type a text string in a variety of fonts, and
   places it on an icon. It converts the text-based icon into PNG files for
   different densities. You can use the fonts that are installed on your
   computer.

   .. rubric:: Run Image Asset Studio
      :name: access

   To start Image Asset Studio, follow these steps:

   #. In the **Project** window, select the `Android view <#/studio/projects#ProjectFiles>`__.

   #. Right-click the **res** folder and select **New** > **Image Asset**.

      |The adaptive and legacy icon wizard in Image Asset Studio.|

   #. Continue by following the steps to:

      -  If your app supports Android 8.0, create `adaptive and legacy launcher icons <#create-adaptive>`__.
      -  If your app supports versions no higher than Android 7.1, create a
         `legacy launcher icon only <#create-legacy>`__.
      -  Create an `action bar or tab icon <#create-actionbartab>`__.
      -  Create a `notification icon <#create-notification>`__.

   .. rubric:: Create adaptive and legacy launcher icons
      :name: create-adaptive

   **Note:** If your app supports versions no higher than Android 7.1, follow
   the instructions to create a `legacy launcher icon only <#create-legacy>`__
   instead.

   After you `open Image Asset Studio <#access>`__, you can add adaptive and
   legacy icons by following these steps:

   #. In the **Icon Type** field, select **Launcher Icons (Adaptive and
      Legacy)**.
   #. In the **Foreground Layer** tab, select an **Asset Type**, and then
      specify the asset in the field underneath:

      -  Select **Image** to specify the path for an image file.
      -  Select **Clip Art** to specify an image from the `material design icon set <https://design.google.com/icons>`__.
      -  Select **Text** to specify a text string and select a font.

   #. In the **Background Layer** tab, select an **Asset Type**, and then
      specify the asset in the field underneath. You can either select a color
      or specify an image to use as the background layer.
   #. In the **Legacy** tab, review the default settings and confirm you want to
      generate legacy, round, and Google Play Store icons.
   #. Optionally change the name and display settings for each of the
      **Foreground Layer** and **Background Layer** tabs:

      -  **Name** - If you don't want to use the default name, type a new name.
         If that resource name already exists in the project, as indicated by an
         error at the bottom of the wizard, it's overwritten. The name can
         contain lowercase characters, underscores, and digits only.
      -  **Trim** - To adjust the margin between the icon graphic and border in
         the source asset, select **Yes**. This operation removes transparent
         space, while preserving the aspect ratio. To leave the source asset
         unchanged, select **No**.
      -  **Color** - To change the color for a **Clip Art** or **Text** icon,
         click the field. In the **Select Color** dialog, specify a color and
         then click **Choose**. The new value appears in the field.
      -  **Resize** - Use the slider to specify a scaling factor in percent to
         resize an **Image**, **Clip Art**, or **Text** icon. This control is
         disabled for the background layer when you specify a **Color** asset
         type.

   #. Click **Next**.
   #. Optionally, change the resource directory: Select the resource source set
      where you want to add the image asset: **src/main/res**,
      **src/debug/res**, **src/release/res**, or a custom source set. The main
      source set applies to all build variants, including debug and release. The
      debug and release source sets override the main source set and apply to
      one version of a build. The debug source set is for debugging only. To
      define a new source set, select **File** > **Project Structure** > **app**
      > **Build Types**. For example, you can define a beta source set and
      create a version of an icon that includes the text "BETA" in the bottom
      right corner. For more information, see `Configure Build Variants <#/studio/build/build-variants#workBuildVariants>`__.
   #. Click **Finish**. Image Asset Studio adds the images to the **mipmap**
      folders for the different densities.

   .. rubric:: Preview themed app icons
      :name: preview-themed-app-icons

   Android Studio lets you preview your `themed app icon <#/about/versions/13/features#themed-app-icons>`__ and test how it adapts
   to the coloring of the user's wallpaper. To preview your themed app icon,
   open the ``launcher.xml`` file that defines your icon and then use the
   **System UI Mode** selector on the toolbar to switch wallpapers and see how
   the icon reacts.

   To learn more about how to create themed app icons, see `Adaptive icons <#/develop/ui/views/launch/icon_design_adaptive>`__.

   .. figure:: https://source.android.google.cn/static/studio/images/system-ui-mode-selector.png
      name: system-ui-mode-selector
      :width: 50.0%

      **System UI Mode** selector.

   .. figure:: https://source.android.google.cn/static/studio/images/preview-themed-app-icons.gif
      name: preview-themed-app-icons
      :width: 100.0%

      Preview themed app icons across different wallpapers.

   .. rubric:: Create a legacy launcher icon
      :name: create-legacy

   **Note:** If your app supports Android 8.0, follow the instructions to create
   an `adaptive and legacy launcher icons <#create-adaptive>`__ instead.

   After you `open Image Asset Studio <#access>`__, you can add a launcher icon
   by following these steps:

   #. In the **Icon Type** field, select **Launcher Icons (Legacy Only)** .

   #. Select an **Asset Type**, and then specify the asset in the field
      underneath:

      -  In the **Clip Art** field, click the button.
      -  In the **Path** field, specify the path and file name of the image.
         Click **...** to use a dialog.
      -  In the **Text** field, type a text string and select a font.

      The icon appears in the **Source Asset** area on the right side, and in
      the preview area at the bottom of the wizard.

   #. Optionally change the name and display settings:

      -  **Name** - If you don’t want to use the default name, type a new name.
         If that resource name already exists in the project, as indicated by an
         error at the bottom of the wizard, it's overwritten. The name can
         contain lowercase characters, underscores, and digits only.
      -  **Trim** - To adjust the margin between the icon graphic and border in
         the source asset, select **Yes**. This operation removes transparent
         space, while preserving the aspect ratio. To leave the source asset
         unchanged, select **No**.
      -  **Padding** - If you want to adjust the source asset padding on all
         four sides, move the slider. Select a value between -10% and 50%. If
         you also select **Trim**, the trimming happens first.
      -  **Foreground** - To change the foreground color for a **Clip Art** or
         **Text** icon, click the field. In the **Select Color** dialog, specify
         a color and then click **Choose**. The new value appears in the field.
      -  **Background** - To change the background color, click the field. In
         the **Select Color** dialog, specify a color and then click **Choose**.
         The new value appears in the field.
      -  **Scaling** - To fit the icon size, select **Crop** or **Shrink to
         Fit**. With crop, the image edges can be cut off, and with shrink, they
         aren't. You can adjust the padding, if needed, if the source asset
         still doesn't fit well.
      -  **Shape** - To place a backdrop behind your source asset, select a
         shape, one of circle, square, vertical rectangle, or horizontal
         rectangle. For a transparent backdrop, select **None**.
      -  **Effect** - If you want to add a dog-ear effect to the upper right of
         a square or rectangle shape, select **DogEar**. Otherwise, select
         **None**.

      Image Asset Studio places the icon within a transparent square so there's
      some padding on the edges. The padding provides adequate space for the
      standard drop-shadow icon effect.

   #. Click **Next**.

   #. Optionally change the resource directory:

      -  **Res Directory** - Select the resource source set where you want to
         add the image asset: **src/main/res**, **src/debug/res**,
         **src/release/res**, or a user-defined source set. The main source set
         applies to all build variants, including debug and release. The debug
         and release source sets override the main source set and apply to one
         version of a build. The debug source set is for debugging only. To
         define a new source set, select **File** > **Project Structure** >
         **app** > **Build Types**. For example, you could define a beta source
         set and create a version of an icon that includes the text "BETA" in
         the bottom right corner. For more information, see `Configure Build Variants <#/studio/build/build-variants#workBuildVariants>`__.

      The **Output Directories** area displays the images and the folders where
      they will appear in `Project Files view <#/studio/projects#ProjectFiles>`__
      of the **Project** window.

   #. Click **Finish**.

   .. rubric:: Create an action bar or tab icon
      :name: create-actionbartab

   After you `open Image Asset Studio <#access>`__, you can add an action bar or
   tab icon by following these steps:

   #. In the **Icon Type** field, select **Action Bar and Tab Icons**.

   #. Select an **Asset Type**, and then specify the asset in the field
      underneath:

      -  In the **Clip Art** field, click the button.
      -  In the **Path** field, specify the path and file name of the image.
         Click **...** to use a dialog.
      -  In the **Text** field, type a text string and select a font.

      The icon appears in the **Source Asset** area on the right side, and in
      the preview area at the bottom of the wizard.

   #. Optionally change the name and display options:

      -  **Name** - If you don’t want to use the default name, type a new name.
         If that resource name already exists in the project, as indicated by an
         error at the bottom of the wizard, it's overwritten. The name can
         contain lowercase characters, underscores, and digits only.
      -  **Trim** - To adjust the margin between the icon graphic and border in
         the source asset, select **Yes**. This operation removes transparent
         space, while preserving the aspect ratio. To leave the source asset
         unchanged, select **No**.
      -  **Padding** - If you want to adjust the source asset padding on all
         four sides, move the slider. Select a value between -10% and 50%. If
         you also select **Trim**, the trimming happens first.
      -  **Theme** - Select
         `HOLO_LIGHT <#/guide/topics/ui/themes#SelectATheme>`__ or **HOLO_DARK**.
         Or, to specify a color in the **Select Color** dialog, select
         **CUSTOM** and then click the **Custom color** field.

      Image Asset Studio creates the icon within a transparent square so there's
      some padding on the edges. The padding provides adequate space for the
      standard drop-shadow icon effect.

   #. Click **Next**.

   #. Optionally change the resource directory:

      -  **Res Directory** - Select the resource source set where you want to
         add the image asset: **src/main/res**, **src/debug/res**,
         **src/release/res**, or a user-defined source set. The main source set
         applies to all build variants, including debug and release. The debug
         and release source sets override the main source set and apply to one
         version of a build. The debug source set is for debugging only. To
         define a new source set, select **File** > **Project Structure** >
         **app** > **Build Types**. For example, you could define a beta source
         set and create a version of an icon that includes the text "BETA" in
         the bottom right corner. For more information, see `Configure Build Variants <#/studio/build/build-variants#workBuildVariants>`__.

      The **Output Directories** area displays the images and the folders where
      they will appear in `Project Files view <#/studio/projects#ProjectFiles>`__
      of the **Project** window.

   #. Click **Finish**.

   .. rubric:: Create a notification icon
      :name: create-notification

   After you `open Image Asset Studio <#access>`__, you can add a notification
   icon by following these steps:

   #. In the **Icon Type** field, select **Notification Icons**.

   #. Select an **Asset Type**, and then specify the asset in the field
      underneath:

      -  In the **Clip Art** field, click the button.
      -  In the **Path** field, specify the path and file name of the image.
         Click **...** to use a dialog.
      -  In the **Text** field, type a text string and select a font.

      The icon appears in the **Source Asset** area on the right side, and in
      the preview area at the bottom of the wizard.

   #. Optionally change the name and display options:

      -  **Name** - If you don’t want to use the default name, type a new name.
         If that resource name already exists in the project, as indicated by an
         error at the bottom of the wizard, it's overwritten. The name can
         contain lowercase characters, underscores, and digits only.
      -  **Trim** - To adjust the margin between the icon graphic and border in
         the source asset, select **Yes**. This operation removes transparent
         space, while preserving the aspect ratio. To leave the source asset
         unchanged, select **No**.
      -  **Padding** - If you want to adjust the source asset padding on all
         four sides, move the slider. Select a value between -10% and 50%. If
         you also select **Trim**, the trimming happens first.

      Image Asset Studio creates the icon within a transparent square so there's
      some padding on the edges. The padding provides adequate space for the
      standard drop-shadow icon effect.

   #. Click **Next**.

   #. Optionally change the resource directory:

      -  **Res Directory** - Select the resource source set where you want to
         add the image asset: **src/main/res**, **src/debug/res**,
         **src/release/res**, or a user-defined source set. The main source set
         applies to all build variants, including debug and release. The debug
         and release source sets override the main source set and apply to one
         version of a build. The debug source set is for debugging only. To
         define a new source set, select **File** > **Project Structure** >
         **app** > **Build Types**. For example, you could define a beta source
         set and create a version of an icon that includes the text "BETA" in
         the bottom right corner. For more information, see `Configure Build Variants <#/studio/build/build-variants#workBuildVariants>`__.

      The **Output Directories** area displays the images and the folders where
      they will appear in `Project Files view <#/studio/projects#ProjectFiles>`__
      of the **Project** window.

   #. Click **Finish**.

   .. rubric:: Refer to an image resource in code with Views
      :name: referincode

   **Note:** For information about referring to launcher icons in your code, see
   the `Compose launcher icon guidance <#material-icons-compose>`__, which
   applies to Views too.
   You can normally refer to an image resource in a generic way in your code,
   and when your app runs, the corresponding image displays automatically
   depending on the device:

   -  In most cases, you can refer to image resources as ``@drawable`` in XML
      code or `Drawable <#/reference/android/graphics/drawable/Drawable>`__
      in Java code.
   -  If your app uses the Support Library, you can refer to an image resource
      in XML code with an ``app:srcCompat`` statement. For example:

   You can access image resources from the main thread only.

   After you have an image resource in the ``res/`` directory of your project,
   you can reference it from your Java code or your XML layout using its
   resource ID. The following Java code sets an
   `ImageView <#/reference/android/widget/ImageView>`__ to use the
   ``drawable/myimage.png`` resource:

   .. container:: ds-selector-tabs

      .. container:: section

         .. rubric:: Kotlin
            :name: kotlin

         .. code:: prettyprint

            findViewById<ImageView>(R.id.myimageview).apply {
                setImageResource(R.drawable.myimage)
            }

      .. container:: section

         .. rubric:: Java
            :name: java

         .. code:: prettyprint

            ImageView imageView = (ImageView) findViewById(R.id.myimageview);
            imageView.setImageResource(R.drawable.myimage);

   See `Accessing Resources <#/guide/topics/resources/accessing-resources#ResourcesFromCode>`__
   for more information.

   .. rubric:: Delete an icon from a project
      :name: delete

   To remove an icon from a project:

   #. In the **Project** window, select the `Android view <#/studio/projects#ProjectFiles>`__.
   #. Expand the **res/mipmap** folder for a launcher icon, or the
      **res/drawable** folder for other types of icons.
   #. Locate a subfolder that has the name of the icon you want to delete.
   #. Select the folder and press the **Delete** key.
   #. Optionally select options to find where the icon is used in the project,
      and click **OK**.
   #. Select **Build** > **Clean Project**.
   #. If needed, correct any remaining errors due to portions of the code that
      reference the resource.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2024-01-03 UTC.

.. |The adaptive and legacy icon wizard in Image Asset Studio.| image:: https://source.android.google.cn/static/studio/images/write/new-image-asset-studio.png
   :width: 803px

/Create resizable bitmaps (9-patch)
===================================

.. https://developer.android.google.cn/studio/write/draw9patch?hl=en

.. container:: devsite-article-body clearfix

   The Draw 9-patch tool is a WYSIWYG editor included in Android Studio. The
   tool lets you create bitmap images that automatically resize to accommodate
   the contents of the view and the size of the screen. You can scale selected
   parts of the image horizontally or vertically based on indicators drawn
   within the image.

   For an introduction to NinePatch graphics and how they work, read `NinePatch drawables <#/guide/topics/graphics/2d-graphics#nine-patch>`__.

   |image-draw9patch-normal_2-2_2x|
   **Figure 1.** Android Studio's Draw 9-patch tool displaying a NinePatch
   image.

   Follow these steps to create a NinePatch graphic using the Draw 9-patch tool
   in Android Studio. You'll need the PNG image that you'd like to create a
   NinePatch image from.

   #. In Android Studio, right-click the PNG image you'd like to create a
      NinePatch image from, then click **Create 9-patch file**.

   #. Enter a filename for your NinePatch image and click **OK**. Your image
      will be created with the ``.9.png`` file extension.

   #. | Double-click your new NinePatch file to open it in Android Studio.

      In the workspace that opens, the left pane is your drawing area, where you
      can edit the lines for the stretchable patches and content area. The right
      pane is the preview area, where you can preview your graphic when
      stretched.

   #. | Click within the 1-pixel perimeter to draw the lines that define the
        stretchable patches and (optional) the content area.

      Right-click to erase previously drawn lines (on Mac, hold Shift and
      click).

   #. When done, click **File** > **Save** to save your changes.

   To open an existing NinePatch file in Android Studio, double-click the file.

   To make sure that your NinePatch graphics scale down properly, verify that
   any stretchable regions are at least 2x2 pixels in size. Otherwise, those
   regions may disappear when scaled down. To avoid interpolation during scaling
   that may cause the color at the boundaries to change, provide 1 pixel of
   extra safe space in the graphics before and after stretchable regions.

   **Note:** A normal PNG file (``*.png``) is loaded with an empty 1-pixel
   border added around the image. You can draw the stretchable patches and
   content area within the border. A previously saved NinePatch file
   (``*.9.png``) is loaded as-is, with no drawing area added because it already
   exists.

   |image-draw9patch-badpatch_2-2_2x|
   **Figure 2.** A NinePatch image in Android Studio showing content, patches,
   and bad patches.

   Optional controls include:

   **Zoom**: Adjust the zoom level of the graphic in the drawing area.
   **Patch scale**: Adjust the scale of the images in the preview area.
   **Show lock**: Visualize the non-drawable area of the graphic on mouse-over.
   **Show patches**: Preview the pink stretchable patches in the drawing area.
   Pink indicates a stretchable patch, as shown in figure 2.
   **Show content**: Highlight the content area in the preview images. Purple
   indicates the area where content is allowed, as shown in figure 2.
   **Show bad patches**: Adds a red border around patch areas that may produce
   artifacts in the graphic when stretched, as shown in figure 2. If you
   eliminate all bad patches, you will maintain the visual coherence of your
   stretched image.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2023-04-12 UTC.

.. |image-draw9patch-normal_2-2_2x| image:: https://source.android.google.cn/static/studio/images/write/draw9patch-normal_2-2_2x.png
   :width: 689px
.. |image-draw9patch-badpatch_2-2_2x| image:: https://source.android.google.cn/static/studio/images/write/draw9patch-badpatch_2-2_2x.png
   :width: 680px

/Create WebP images
===================

.. https://developer.android.google.cn/studio/write/convert-webp?hl=en

.. container:: devsite-article-body clearfix

   `WebP <https://developers.google.cn/speed/webp/>`__ is an image file format
   from Google that provides lossy compression (like JPEG) as well as
   transparency (like PNG) but can provide better compression than either JPEG
   or PNG. Lossy WebP images are supported in Android 4.0 (API level 14) and
   higher, and lossless and transparent WebP images are supported in Android 4.3
   (API level 18) and higher. This page shows how to convert images to WebP
   format and how to convert WebP images to PNG format.

   **Note:**\  Because support for lossless and transparent WebP images is only
   available in Android 4.3 and higher, your project must declare a
   ``minSdkVersion`` of 18 or higher to create lossless or transparent WebP
   images using Android Studio.
   For more information about selecting the correct image format to improve
   download speed, see `Reduce image download sizes <#/topic/performance/network-xfer#webp>`__.

   .. rubric:: Convert images to WebP
      :name: convert-to-webp

   Android Studio can convert PNG, JPG, BMP, or static GIF images to WebP
   format. You can convert individual images or folders of images.

   To convert an image or folder of images, proceed as follows:

   #. Right-click an image file or a folder containing image files, and then
      click **Convert to WebP**.

   #. The **Converting Images to WebP** dialog opens. The default settings
      depend on the ``minSdkVersion`` setting for the current module.

      | 

      .. figure:: https://source.android.google.cn/static/studio/images/write/webp-convertimage_2x.png
         :alt: The Converting Images to WebP dialog
         :width: 524px

         **Figure 1.** The Converting Images to WebP dialog.

   #. Select either lossy or lossless encoding.

      Lossless encoding is only available if your ``minSdkVersion`` is set to 18
      or higher.

      If you select lossy encoding, set the encoding quality and choose whether
      to preview each converted image before saving.

      You can also choose to skip the conversion of any files where the encoded
      version would be larger than the original or any files with transparency
      or an alpha channel. Because Android Studio only lets you create
      transparent WebP images if your ``minSdkVersion`` is set to 18 or higher,
      the **Skip images with transparency/alpha channel** checkbox is
      automatically selected if your ``minSdkVersion`` is lower than 18.

      **Note:** 9-patch files can't be converted to WebP images. The converter
      tool always automatically skips 9-patch images.

   #. Click **OK** to begin the conversion.

      If you are converting more than one image, the conversion is a single
      step, and can be undone to revert all the images you converted at once.

      If you selected lossless conversion, the conversion happens immediately.
      Your images are converted in their original location. If you selected
      lossy conversion, continue to the next step.

   #. If you selected lossy conversion and you chose to preview each converted
      image before saving, Android Studio shows you each image during the
      conversion so you can inspect the conversion result. During the preview
      step, you can adjust the quality setting for each image individually, as
      shown in figure 2.

      If you did not choose to preview the converted images, Android Studio
      skips this step and converts your images immediately.

      .. figure:: https://source.android.google.cn/static/studio/images/write/webp-convertqualitydefault_2x.png
         :alt: Converting a JPG to WebP format at 75% quality
         :width: 716px

         **Figure 2.** Previewing the conversion of a JPG image to WebP format
         at 75% quality.

      Figure 2 shows the original JPG image on the left and the lossy-encoded
      WebP image on the right. The dialog shows the file size for the original
      and the converted image. You can drag the slider left or right to change
      the quality setting and immediately see the effect on the encoded image
      and the file size.

      The middle area shows the pixels that differ between the original image
      and the encoded image. In figure 2, with the quality set to 75%, there's
      almost no difference between the two images. Figure 3 shows the same image
      encoded with the quality set to 0%.

      .. figure:: https://source.android.google.cn/static/studio/images/write/webp-convertqualitylow_2x.png
         :alt: Converting a JPG to WebP format at 0% quality
         :width: 716px

         **Figure 3.** Previewing the conversion of a JPG image to WebP format
         at 0% quality.

      **Note:** If you set the quality to 100% and the ``minSdkVersion`` is set
      to 18 or higher, Android Studio automatically switches to lossless
      encoding instead.

      Select a quality setting for each image you review. If you are converting
      more than one image, click **Next** to advance to the next image.

   #. Click **Finish**. Your images are converted in their original location.

   .. rubric:: Convert WebP images to PNG
      :name: convert-webp-to-png

   If you want to use a WebP image from your project for another purpose—for
   example, in a web page that needs to correctly display images in a browser
   without WebP support—you can use Android Studio to convert WebP images to PNG
   format.

   To convert a WebP image to PNG, proceed as follows:

   #. Right-click a WebP image in Android Studio, and then click **Convert to
      PNG**.

   #. A dialog appears, asking whether you would like to delete the original
      WebP file after conversion or keep the original WebP file as well as the
      new PNG file.

      Click **Yes** to delete the original WebP file or **No** to retain the
      WebP file in addition to the PNG file. Your image is converted
      immediately.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2023-04-12 UTC.

/Localize the UI
================

.. https://developer.android.google.cn/studio/write/translations-editor?hl=en

.. container:: devsite-article-body clearfix

   The Translations Editor provides a consolidated and editable view of all of
   your default and translated `string resources <#/guide/topics/resources/string-resource>`__.

   For an introduction to translating your app for different languages, read
   `Supporting different languages and cultures <#/training/basics/supporting-devices/languages>`__.

   |image-translations-editor-basic_2x|
   **Figure 1.** The **Translations Editor** showing app text before translation

   .. rubric:: String resources
      :name: resources

   The string resources for a project are contained in ``strings.xml`` files.
   Your project has a default ``strings.xml`` file that contains string
   resources in the default language for your app, which is the language you
   expect most of your app users to speak. You can also have translated
   ``strings.xml`` files that contain string resources for other languages that
   you want your app to accommodate.

   Once you have your default ``strings.xml`` file completed, you can add the
   translations yourself, or pay a professional service to do the translations.
   Either way, you should take advantage of the Android Studio features to help
   you `manage and test localizable text <#localize>`__. For information about
   professional translation services, see `Order translation services <#ordering>`__.

   .. rubric:: Open the Translations Editor
      :name: open

   You can access the Translations Editor from the following places in Android
   Studio.

   .. rubric:: Open from the Android view
      :name: androidview

   #. In the **Project > Android** panel on the left, select **``ModuleName`` >
      res > values**.

   #. Right-click the **strings.xml** file, and select **Open Translations
      Editor**.

      The Translations Editor displays the key and value pairs from the
      ``strings.xml`` file.

      **Note:** When you have translated ``strings.xml`` files, your project has
      multiple corresponding **values** folders with suffixes that indicate the
      language, such as **values-es** for Spanish. Your default ``strings.xml``
      file is always in the **values** (no suffix) folder.

   Figure 1 shows the default app text (in this case, English) in the
   Translations Editor for a simple app before translation work has been done.
   The contents of translated ``strings.xml`` files will appear to the right of
   the **Untranslatable** column with one column per language as shown in figure
   2.

   .. rubric:: Open from within strings.xml
      :name: strings

   You can access the **Translations Editor** from within any of your
   ``strings.xml`` files.

   #. In the **Project > Android** panel on the left, select **``ModuleName`` >
      res > values**.
   #. Double-click **strings.xml** to open it for editing.
   #. In **strings.xml**, click the **Open editor** link in the upper-right
      corner.

   **Note:** If you click the **Hide notification** link, the **Open editor**
   link goes away. To bring it back, close and reopen the project.

   .. rubric:: Open from the Design Editor
      :name: designlayout

   You can open the **Translations Editor** from the Layout Editor's Design
   Editor to edit your default and translated text to better fit your layout.
   For information about switching languages in the Design Editor, see `Display translated text in the Design Editor <#view>`__.

   #. In the **Project > Android** panel on the left, select **``ModuleName`` >
      res > layout**.
   #. Double-click **content_main.xml** to open it for editing.
   #. Click the **Design** tab in the lower-left corner to display the
      **Design** Editor.
   #. In the Design Editor, select the **Language** |image-layout-editor-language-icon| drop-down list.
   #. Select **Edit Translations** |image-translations-edit-icon|.

   .. rubric:: Configure untranslatable rows
      :name: untranslatable

   In the **Translations Editor**, you can select **Unstranslatable** to
   indicate that you do not want the text in this row to be translated. Text
   that you would not want translated might be product-specific text like trade
   names and trade marks, or technical terms that do not have a translation.

   When you check **Untranslatable**, the corresponding line in the default
   ``strings.xml`` file adds **translatable="false"**. In the following example,
   **EasyApp** in the top line is not translated because it is the product name.

   .. code:: prettyprint

      <resources>
          <string name="app_name" translatable="false">EasyApp</string>
          <string name="action_settings">Settings</string>
          <string name="easy_app">I am a Simple App!</string>
          <string name="next_page">Next Page</string>
          <string name="second_page_message">I am the Second Page!</string>
          <string name="title_activity_second">SecondActivity</string>
      </resources>

   .. rubric:: Add and delete languages
      :name: addlanguage

   The **Translations Editor** supports `BCP 47 <https://tools.ietf.org/html/bcp47>`__ and combines locale and region
   (country) codes into a single selection for targeted localizations. A locale
   defines more than the language. A locale includes country-dependent
   formatting for things like the date and time, currencies, and decimals.

   To add a language, do the following:

   #. In the **Translations Editor**, click the globe icon |image-translations-edit-icon|.

   #. From the drop-down list, select the language you want to add.

      The new language appears in the **Translations Editor**, and a
      **values-\*** folder with a ``strings.xml`` file is added to the project.
      For example, **values-es** for Spanish.

   To delete a language, do the following:

   You can delete a language in the **Translations Editor** by deleting every
   value in the column (see `Edit, add, or delete text <#editaddtext>`__), or
   you can delete the project folder for that language, as follows:

   #. In the **Project > Android** panel on the left, select **``ModuleName`` >
      res**.
   #. Right click the **values-\*** folder for the language you want to delete.
      For example, **values-hi** for Hindi.
   #. From the drop-down list, select **Delete** to delete the folder and its
      **strings.xml** file.

   .. rubric:: Edit, add, and delete text
      :name: editaddtext

   You can operate on the text settings directly in the ``strings.xml`` file or
   through the **Translations Editor**. This section describes the
   **Translations Editor** approach. In the **Translations Editor**, you can
   edit, add, or delete text through the list view or through the
   **Translation** field at the bottom of the **Translations Editor**.

   |image-translation-field_2x|
   **Figure 2.** List view on the top and the **Translation** field on the
   bottom

   .. rubric:: List view
      :name: list-view

   To edit or add text, do the following:

   #. Double-click the cell where you want to edit or add text.
   #. Do a keyboard copy-paste, or if you have a keyboard that supports
      diacritic marks, type directly into the list view.
   #. **Tab** or move the cursor out of the field.

   To delete text, do the following:

   #. Double-click the cell you want to delete.
   #. In the list view, select the text and press **Delete**.
   #. **Tab** or move the cursor out of the field.

   .. rubric:: Translation field
      :name: translation-field

   To edit or add text, do the following:

   #. In the list view, single-click the cell where you want to edit or add
      text.
   #. In the **Translation** field, do a keyboard copy-paste, or if you have a
      keyboard that supports diacritic marks, type directly into the
      **Translation** field.
   #. **Tab** or move the cursor out of the field.

   To delete text, do the following:

   #. Single-click the cell you want to delete.
   #. In the **Translation** field, select the text and press **Delete**.

   .. rubric:: Add and delete keys
      :name: addkey

   In the Translations Editor, the **Key** column lists the unique identifiers
   for each data item in your ``strings.xml`` files. You can add and delete keys
   through the Translations Editor. When you delete a key, the Translations
   Editor deletes it and all of its associated translations. The Translations
   Editor uses the Safe Delete refactoring to delete a key so you know if the
   key text is used elsewhere and have a chance to make necessary adjustments
   before you delete the key. The Safe Delete refatoring ensures that your code
   still compiles after you delete the key.

   To add a key, do the following:

   #. In the **Translations Editor**, click **Add Key** |image-add-sign-green-icon|.

   #. In the dialog, enter a key name, default value, and the location of the
      default **strings.xml** file. |image-addkey_2x|

      **Figure 3.** Add a key

   To delete a key, do the following:

   #. In the Translations Editor, select the key you want to delete.

   #. Click **Remove Keys** |image-ic_minus|.

   #. In the **Delete** dialog, decide if you want a safe delete and whether you
      want to search in comments and strings, and click **OK**.

      |image-translations-editor-delete-dialog_2x|

      **Figure 4.** Delete dialog

      If there are no references (usages) to the deleted key, or if all
      references are safely collapsible, the key is deleted. Otherwise, the
      Translations Editor displays the **Usages Detected** dialog with
      information about the problems detected.

      |image-translations-editor-usages-detected_2x|

      **Figure 5.** Delete dialog

   #. Select **View Usages** to review what will be deleted. The **Find Safe
      Delete Conflicts** dialog shows all of the usages that are not safe to
      delete so you can edit your corresponding code. |image-translations-editor-delete-key_2x|

      **Figure 6.** Unsafe usages

   #. Right-click a usage to display the context menu and select **Jump to
      Source** so you can make the needed changes.

   #. In the **Find Safe Delete Conflicts** panel, select **Rerun Safe Delete**
      to make sure there are no other usages that need attention.

   #. When the usages are cleaned up, click **Do Refactor** to delete the key.

   .. rubric:: Correct errors
      :name: correct

   Figure 7 shows the **Translations Editor** displaying the contents of the
   English, Spanish, and French ``strings.xml`` files. The red text indicates
   lines that have errors.

   |image-translations-editor_2x|
   **Figure 7.** Red text indicates an error condition that you must fix

   To correct an error, hover over the red text to display an explanation of the
   problem and its resolution.

   When you make changes in the **Translations Editor**, the underlying
   ``strings.xml`` files update with your changes. When you make changes in a
   ``strings.xml`` file, the corresponding column in the **Translations Editor**
   updates with your changes.

   Example **Translations Editor** corrections:

   -  Figure 7 shows that the **app_name** row has **Untranslatable** checked,
      but there is a Spanish translation provided. Delete the Spanish
      translation to correct the error.
   -  Figure 7 shows that the **next_page** row is missing a French translation.
      Use your keyboard to copy **Page Suivante** into the cell to correct the
      error. A keyboard copy-paste operation copies the text with the diacritic
      marks into the cell.

   .. rubric:: Display translated text in the Design Editor
      :name: view

   To see how the translated text displays in your app layout, toggle the text
   between the default and translated versions in the Design Editor, as follows:

   #. In the **Project > Android** panel on the left, select **``ModuleName`` >
      res > layout**.

   #. Double-click **content_main.xml** to open it for editing.

   #. Click the **Design** tab in the lower-left corner to display the
      **Design** Editor.

   #. In the Design Editor, select the **Language** |image-layout-editor-language-icon| drop-down list.

   #. Select **Edit Translations** |image-translations-edit-icon|.

   #. Select the language you want to use to view your app.

      |image-spanish-language_2x|

      **Figure 8.** The language drop-down list with Spanish selected

   The Design Editor displays your app layout in the selected language, which in
   this case is Spanish.

   |image-spanish-translation_2x|
   **Figure 9.** The Design Editor displaying translated text in Spanish

   .. rubric:: Set the Design Editor to the default language
      :name: default

   To set the language back to the default, select **es > Language** |image-layout-editor-language-icon|.

   |image-changelanguage_2x|
   **Figure 10.** Set to the default language

   .. rubric:: Manage and test localizable text
      :name: localize

   The Android platform and Android Studio provide several features to help you
   manage and test your localizable app text. These features have options to
   help you target issues with right-to-left (RTL) scripts, such as Arabic or
   Hebrew. Testing your localizable text allows you to make adjustments to the
   UI text and its layout before you commit your messages to the source
   repository to be sent for translation later.

   .. rubric:: Refactor your project for RTL support
      :name: refactor

   Android Studio has a refactoring command that enables support for
   bidirectional text in `TextView <#/reference/android/widget/TextView>`__,
   `ConstraintLayout <#/reference/androidx/constraintlayout/widget/ConstraintLayout>`__,
   and `LinearLayout <#/reference/android/widget/LinearLayout>`__ elements so
   your apps can display and allow users to edit text in both left-to-right
   (LTR) and right-to-left (RTL) scripts. The command also provides automatic
   mirroring of app UI layouts and all view widgets. To see the text direction
   change and the layout mirroring, you must also set the `text and layout direction properties <#direction>`__ in the `Layout Editor <https://developer.android.google.cn/studio/write/layout-editor.html>`__.

   The following procedure shows how to refactor your project for RTL support:

   #. Select **Refactor > Add RTL support where possible** to display the dialog
      shown in figure 11. |image-localize-add-rtl-support_2x|

      **Figure 11.** Add RTL support

      -  If the ``<application>`` element in your ``AndroidManifest.xml`` file
         does not have the ``android:supportsRTL="true"`` attribute, then select
         the **Update AndroidManifest.xml** checkbox.
      -  If your app's ``targetSdkVersion`` is 17 or higher, select **Replace
         Left/Right Properties with Start/End Properties**. In this case, your
         properties should use "start" and "end" instead of "left" and "right".
         For example, ``android:paddingLeft`` becomes ``android:paddingStart``.
      -  If your app's ``targetSdkVersion`` is 16 or less, select **Generate
         -v17 Versions** In this case, your XML should use both sets of
         properties. For example, your XML should use both
         ``android:paddingLeft`` and ``android:paddingStart``.

   #. To display the **Find Refactoring Preview** window, click **Run**.
      |image-localize-find-refactor-preview_2x|

      **Figure 12.** Check the preview

   #. Click **Do Refactor**.

   For more information about refactoring your project for RTL support, see
   `Native RTL support in Android 4.2 <https://android-developers.googleblog.com/2013/03/native-rtl-support-in-android-42.html>`__.

   .. rubric:: Text and layout direction properties
      :name: direction

   The Properties window on the right provides the **textDirection** property to
   use with text widgets and the **layoutDirection** property to use with layout
   widgets to change the direction of text and layout components. The direction
   properties are listed in the **Properties** window on the right, and work
   with API Level 17 or higher.

   To see the text direction change and the layout mirroring, you must also
   `refactor <#refactor>`__ the project for RTL support. In English, the text
   direction change moves only punctuation from the right side to the left side
   of the text; for example, "Hello World!" becomes "!Hello World". To see LTR
   text switch to RTL, you have to use an RTL language in your app. If you want
   to use English and see the text switch to RTL for testing purposes, use
   `pseudolocales <#pseudolocales>`__. Pseudolocales are independent of the
   refactoring command and the direction properties.

   To access and use the direction properties, do the following:

   #. In the `Layout Editor <#/studio/write/layout-editor#intro>`__, select a
      text widget.

   #. Open the **Properties** window and search for the RTL property you want to
      use.

      To set the property value, select one of the following:

      -  **firstStrong:** Default for the root view. The first strong
         directional character determines the paragraph direction. If there is
         no strong directional character, the paragraph direction is the view's
         resolved layout direction.
      -  **anyRtl:** The paragraph direction is RTL if it contains any strong
         RTL character; otherwise, it is LTR if it contains any strong LTR
         characters. If there are neither, the paragraph direction is the view's
         resolved layout direction.
      -  **ltr:** The paragraph direction is LTR.
      -  **rtl:** The paragraph direction is RTL.
      -  **locale:** The paragraph direction comes from the system locale.
      -  **inherit:** Default. Use the direction set in the parent.

      **Note:** Strong directional characters have their own predefined
      direction, such as most alphabetic and syllabic characters, non-European
      and non-Arabic digits, Han ideographs, and punctuation characters that are
      specific to only those scripts.

   #. To review the reversed text and layout, run the app.

   .. rubric:: Pseudolocales
      :name: pseudolocales

   A pseudolocale is a simulated locale that is designed to assume the
   characteristics of languages that cause UI, layout, RTL, and other
   translation problems when an app is translated. Pseudolocales provide instant
   and automatic translations that are readable in English for all localizable
   messages. This makes it possible for you to catch untranslatable messages in
   your source code.

   For information about how to use pseudolocales, see `Test Your App with Pseudolocales <#/guide/topics/resources/pseudolocales>`__.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2023-04-12 UTC.

.. |image-translations-editor-basic_2x| image:: https://source.android.google.cn/static/studio/images/write/translations-editor-basic_2x.png
   :class: full-width-nav-aware
   :width: 823px
.. |image-layout-editor-language-icon| image:: https://source.android.google.cn/static/studio/images/buttons/layout-editor-language-icon.png
   :class: inline-icon
.. |image-translations-edit-icon| image:: https://source.android.google.cn/static/studio/images/buttons/translations-edit-icon.png
   :class: inline-icon
.. |image-translations-edit-icon| image:: https://source.android.google.cn/static/studio/images/buttons/translations-edit-icon.png
   :class: inline-icon
.. |image-translation-field_2x| image:: https://source.android.google.cn/static/studio/images/write/translation-field_2x.png
   :name: fig2
   :width: 878px
.. |image-add-sign-green-icon| image:: https://source.android.google.cn/static/studio/images/buttons/add-sign-green-icon.png
   :class: inline-icon
.. |image-addkey_2x| image:: https://source.android.google.cn/static/studio/images/write/addkey_2x.png
   :width: 388px
.. |image-ic_minus| image:: https://source.android.google.cn/static/studio/images/buttons/ic_minus.png
   :class: inline-icon
.. |image-translations-editor-delete-dialog_2x| image:: https://source.android.google.cn/static/studio/images/write/translations-editor-delete-dialog_2x.png
   :width: 263px
.. |image-translations-editor-usages-detected_2x| image:: https://source.android.google.cn/static/studio/images/write/translations-editor-usages-detected_2x.png
   :width: 389px
.. |image-translations-editor-delete-key_2x| image:: https://source.android.google.cn/static/studio/images/write/translations-editor-delete-key_2x.png
   :width: 938px
.. |image-translations-editor_2x| image:: https://source.android.google.cn/static/studio/images/write/translations-editor_2x.png
   :width: 886px
.. |image-layout-editor-language-icon| image:: https://source.android.google.cn/static/studio/images/buttons/layout-editor-language-icon.png
   :class: inline-icon
.. |image-translations-edit-icon| image:: https://source.android.google.cn/static/studio/images/buttons/translations-edit-icon.png
   :class: inline-icon
.. |image-spanish-language_2x| image:: https://source.android.google.cn/static/studio/images/write/spanish-language_2x.png
   :width: 143px
.. |image-spanish-translation_2x| image:: https://source.android.google.cn/static/studio/images/write/spanish-translation_2x.png
   :width: 321px
.. |image-layout-editor-language-icon| image:: https://source.android.google.cn/static/studio/images/buttons/layout-editor-language-icon.png
   :class: inline-icon
.. |image-changelanguage_2x| image:: https://source.android.google.cn/static/studio/images/write/changelanguage_2x.png
   :width: 143px
.. |image-localize-add-rtl-support_2x| image:: https://source.android.google.cn/static/studio/images/write/localize-add-rtl-support_2x.png
   :width: 488px
.. |image-localize-find-refactor-preview_2x| image:: https://source.android.google.cn/static/studio/images/write/localize-find-refactor-preview_2x.png
   :width: 636px

/Add Android app links
======================

.. https://developer.android.google.cn/studio/write/app-link-indexing?hl=en

.. container:: devsite-article-body clearfix

   Android App Links are HTTP URLs that bring users directly to specific content
   in your Android app. Android App Links can drive more traffic to your app,
   help you discover which app content is used most, and make it easier for
   users to find and share content in an installed app.

   .. container::
      :name: workflow

      To add support for Android App Links:

      #. Create intent filters in your manifest.
      #. Add code to your app's activities to handle incoming links.
      #. Associate your app and your website with Digital Asset Links.

   The App Links Assistant in Android Studio simplifies the process with a
   step-by-step wizard, as described below.

   For more information about how app links work and the benefits they offer,
   read `Handling Android App Links <#/training/app-links>`__.

   .. container:: video-wrapper-left

   .. rubric:: Add intent filters
      :name: intent

   The App Links Assistant in Android Studio can help you create `intent filters <#/training/app-links/deep-linking#adding-filters>`__ in your manifest
   and map existing URLs from your website to activities in your app. The App
   Links Assistant also adds template code in each corresponding activity to
   handle the intent.

   To add intent filters and URL handling, follow these steps:

   #. Select **Tools > App Links Assistant**.

   #. Click **Open URL Mapping Editor** and then click **Add** |image-ic_plus| at the
      bottom of the **URL Mapping** list to add a new URL mapping.

   #. Add details for the new URL mapping:

      |The App Links Assistant walks you through basic URL mapping|

      **Figure 1.** Add basic details about your site's link structure to map
      URLs to activities in your app.

      #. Enter your website's URL in the **Host** field.

      #. Add a ```path``, ``pathPrefix``, or
         ``pathPattern`` <#/guide/topics/manifest/data-element#path>`__ for the
         URLs you want to map.

         For example, if you have a recipe-sharing app with all the recipes
         available in the same activity, and your corresponding website's
         recipes are all in the same */recipe* directory, use **pathPrefix** and
         enter */recipe.* This way, the URL
         *http://www.recipe-app.com/recipe/grilled-potato-salad* maps to the
         activity you select in the following step.

      #. Select the **Activity** the URLs should take users to.

      #. Click **OK.**

      The URL Mapping Editor window appears. The App Links Assistant adds intent
      filters based on your URL mapping to the ``AndroidManifest.xml`` file and
      highlights the changes in the **Preview** field. If you'd like to make any
      changes, click **Open AndroidManifest.xml** to edit the intent filter. To
      learn more, see `intent filters for incoming links <#/training/app-links/deep-linking#adding-filters>`__.

      The main App Links Assistant tool window also displays all existing deep
      links in the ``AndroidManifest.xml`` file and lets you quickly fix any
      misconfigurations by clicking **Fix All Manifest Issues**.

      |The App Links Assistant lets you fix manifest misconfigurations.|

      **Note:** To support future links without updating your app, define a URL
      mapping that supports URLs that you plan to add. Also, include a URL for
      your app home screen so it's included in search results.

   #. To verify that your URL mapping works properly, enter a URL in the **Check
      URL Mapping** field.

      If it's working correctly, the success message shows that the URL you
      entered maps to the activity you selected.

   .. rubric:: Handle incoming links
      :name: handling

   Once you've verified that your URL mapping is working correctly, add logic to
   handle the intent you created:

   #. Click **Select Activity** from the App Links Assistant.
   #. Select an activity from the list and click **Insert Code**.

   The App Links Assistant adds code to your activity, similar to the following:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               override fun onCreate(savedInstanceState: Bundle?) {
                   super.onCreate(savedInstanceState)
                   ...
                   // ATTENTION: This was auto-generated to handle app links.
                   val appLinkIntent: Intent = intent
                   val appLinkAction: String? = appLinkIntent.action
                   val appLinkData: Uri? = appLinkIntent.data
                   ...
               }

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               @Override
               void onCreate(Bundle savedInstanceState) {
                   super.onCreate(savedInstanceState);
                   ...
                   // ATTENTION: This was auto-generated to handle app links.
                   Intent appLinkIntent = getIntent();
                   String appLinkAction = appLinkIntent.getAction();
                   Uri appLinkData = appLinkIntent.getData();
                   ...
               }

   This code isn't complete on its own. You must now take an action based on the
   URI in ``appLinkData``, such as displaying the corresponding content. For
   example, for the recipe-sharing app, your code might look like the following
   sample:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               override fun onCreate(savedInstanceState: Bundle?) {
                   super.onCreate(savedInstanceState)
                   ...
                   handleIntent(intent)
               }

               override fun onNewIntent(intent: Intent) {
                   super.onNewIntent(intent)
                   handleIntent(intent)
               }

               private fun handleIntent(intent: Intent) {
                   val appLinkAction = intent.action
                   val appLinkData: Uri? = intent.data
                   if (Intent.ACTION_VIEW == appLinkAction) {
                       appLinkData?.lastPathSegment?.also { recipeId ->
                           Uri.parse("content://com.recipe_app/recipe/")
                                   .buildUpon()
                                   .appendPath(recipeId)
                                   .build().also { appData ->
                                       showRecipe(appData)
                                   }
                       }
                   }
               }

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               protected void onCreate(Bundle savedInstanceState) {
                 super.onCreate(savedInstanceState);
                 ...
                 handleIntent(getIntent());
               }

               protected void onNewIntent(Intent intent) {
                 super.onNewIntent(intent);
                 handleIntent(intent);
               }

               private void handleIntent(Intent intent) {
                   String appLinkAction = intent.getAction();
                   Uri appLinkData = intent.getData();
                   if (Intent.ACTION_VIEW.equals(appLinkAction) && appLinkData != null){
                       String recipeId = appLinkData.getLastPathSegment();
                       Uri appData = Uri.parse("content://com.recipe_app/recipe/").buildUpon()
                           .appendPath(recipeId).build();
                       showRecipe(appData);
                   }
               }

   .. rubric:: Associate your app with your website
      :name: associatesite

   After setting up URL support for your app, the App Links Assistant generates
   a Digital Assets Links file you can use to `associate your website with your app <#/training/app-links/verify-android-applinks#web-assoc>`__.

   As an alternative to using the Digital Asset Links file, you can `associate your site and app in Search Console <https://support.google.com/webmasters/answer/6212023>`__.

   If you're using `Play App Signing <https://support.google.com/googleplay/android-developer/answer/9842756>`__
   for your app, then the certificate fingerprint produced by the App Links
   Assistant usually doesn't match the one on users' devices. In this case, you
   can find the correct Digital Asset Links JSON snippet for your app in your
   `Play Console <https://play.google.com/console/>`__ developer account under
   **Release > Setup > App signing**.

   To associate your app and your website using the App Links Assistant, click
   **Open Digital Asset Links File Generator** from the App Links Assistant and
   follow these steps:

   |image-app-links-assistant-dal-file-generator_2x|
   **Figure 2.** Enter details about your site and app to generate a Digital
   Asset Links file.

   #. Enter your **Site domain** and your `Application ID <#/studio/build/configure-app-module#set-application-id>`__.

   #. To include support in your Digital Asset Links file for `One Tap sign-in <https://developers.google.cn/identity/one-tap/android/overview>`__,
      select **Support sharing credentials between the app and the website** and
      enter your site's sign-in URL.This adds the following string to your
      Digital Asset Links file declaring that your app and website share sign-in
      credentials: ``delegate_permission/common.get_login_creds``.

   #. Specify the `signing config <#/studio/publish/app-signing#sign-auto>`__ or
      select a `keystore file <#/studio/publish/app-signing#certificates-keystores>`__.

      Make sure you select the right release config or keystore file for the
      release build or the debug config or keystore file for the debug build of
      your app. If you want to set up your production build, use the release
      config. If you want to test your build, use the debug config.

   #. Click **Generate Digital Asset Links file**.

   #. Once Android Studio generates the file, click **Save file** to download
      it.

   #. Upload the ``assetlinks.json`` file to your site, with read access for
      everyone, at ``https://``\ ``yoursite``\ ``/.well-known/assetlinks.json``.

      **Important:** The system verifies the Digital Asset Links file via the
      encrypted HTTPS protocol. Make sure that the ``assetlinks.json`` file is
      accessible over an HTTPS connection, regardless of whether your app's
      intent filter includes ``https``.

   #. Click **Link and Verify** to confirm that you've uploaded the correct
      Digital Asset Links file to the correct location.

   The App Link Assistant can validate the Digital Assets Links file that should
   be published on your website. For each domain that's declared in the manifest
   file, the Assistant parses the file on your website, performs validation
   checks, and provides a detailed explanation on how to fix any errors.

   Learn more about associating your website with your app through the Digital
   Asset Links file in `Declare website associations <#/training/app-links/verify-android-applinks#web-assoc>`__.

   .. rubric:: Test your Android App Links
      :name: testindent

   To verify that your links open the correct activity, follow these steps:

   #. In the App Links Assistant, click **Test App Links**.
   #. Enter the URL that you want to test in the **URL** field; for example,
      *http://recipe-app.com/recipe/grilled-potato-salad*.
   #. Click **Run Test**.

   If the URL mapping isn't set up properly or doesn't exist, an error message
   appears under the URL in the **Test App Links** dialog. Otherwise, Android
   Studio launches your app in the device or emulator at the specified activity
   without showing the disambiguation dialog ("app chooser") and shows a success
   message in the **App Link Testing** dialog, as shown in figure 3.

   If Android Studio can't launch the app, an error message appears in Android
   Studio's **Run** window.

   To test Android App Links through the App Links Assistant, you must have a
   device connected or a virtual device available running Android 6.0 (API level
   23) or higher. For more information, read about how to `connect a device <#/studio/run/device>`__ or `create an AVD <#/studio/run/managing-avds#createavd>`__.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2024-04-30 UTC.

.. |image-ic_plus| image:: https://source.android.google.cn/static/studio/images/buttons/ic_plus.png
   :class: inline-icon
.. |The App Links Assistant walks you through basic URL mapping| image:: https://source.android.google.cn/static/studio/images/write/app-links-assistant-URL-mapping_2x.png
   :width: 673px
.. |The App Links Assistant lets you fix manifest misconfigurations.| image:: https://source.android.google.cn/static/studio/images/app-links-assistant.png
.. |image-app-links-assistant-dal-file-generator_2x| image:: https://source.android.google.cn/static/studio/images/write/app-links-assistant-dal-file-generator_2x.png
   :width: 731px

/Connect to Firebase
====================

.. https://developer.android.google.cn/studio/write/firebase?hl=en

.. container:: devsite-article-body clearfix

   .. container:: attempt-right

      |image-assistant-window_2-2_2x|
      **Figure 1.** The Assistant tool window in Android Studio.

   `Firebase <https://firebase.google.cn>`__ is a mobile platform that helps you
   quickly develop high-quality apps, grow your user base, and earn more money.
   Firebase consists of complementary features that you can mix and match to fit
   your needs, with `Google Analytics for Firebase <https://firebase.google.cn/docs/analytics/>`__ at the core. You can
   explore and integrate Firebase services in your app directly from Android
   Studio using the **Assistant** window shown in figure 1.

   First, make sure you have `added Google's Maven repository <#/studio/build/dependencies#google-maven>`__ to your project
   configuration.

   You can open and use the **Assistant** window in Android Studio by following
   these steps:

   #. Select **Tools > Firebase** to open the **Assistant** window.
   #. Click to expand one of the listed features.
   #. Click **Get Started with Firebase Analytics** to open a tutorial that
      connects you to Firebase and adds the necessary code to your app.

   For more information about using Firebase services, see the `Firebase documentation <https://firebase.google.cn/docs/>`__.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2023-04-12 UTC.

.. |image-assistant-window_2-2_2x| image:: https://source.android.google.cn/static/studio/images/write/assistant-window_2-2_2x.png
   :width: 351px

/Improve your code with lint checks
===================================

.. https://developer.android.google.cn/studio/write/lint?hl=en

.. container:: devsite-article-body clearfix

   In addition to `building tests <https://android-china.devsite.corp.google.com/studio/test/test-in-android-studio>`__
   to make sure your app meets its functional requirements, it's important that
   you also run the code through the lint tool to help ensure your code has no
   structural problems. The lint tool helps find poorly structured code that can
   impact the reliability and efficiency of your Android apps and make your code
   harder to maintain. It is strongly recommended that you correct any errors
   that lint detects before publishing your app.

   For example, if your XML resource files contain unused namespaces, this takes
   up space and requires unnecessary processing. Other structural issues, such
   as use of deprecated elements or API calls that are not supported by the
   target API versions, might lead to code failing to run correctly. Lint can
   help you clean up these issues.

   To improve linting performance, you can also `add annotations to your code <#/studio/write/annotations>`__.

   .. rubric:: Overview
      :name: overview

   Android Studio provides a code scanning tool called *lint* that can help you
   identify and correct problems with the structural quality of your code
   without having to execute the app or write test cases. Each problem detected
   by the tool is reported with a description message and a severity level so
   that you can prioritize the critical improvements that need to be made. You
   can also lower the severity level of a problem to ignore issues that are not
   relevant to your project or raise the severity level to highlight specific
   problems.

   The lint tool checks your Android project source files for potential bugs and
   optimization improvements for correctness, security, performance, usability,
   accessibility, and internationalization. When using Android Studio,
   configured lint and IDE inspections run when you build your app. However, you
   can `run inspections manually <#manuallyRunInspections>`__ or `run lint from the command line <#commandline>`__, as described on this page.

   The built-in lint tool checks your code while you're using Android Studio.
   You can view warnings and errors in two ways:

   -  As pop-up text in the editor window. When lint finds a problem, it
      highlights the problematic code in yellow. For more serious issues, it
      underlines the code in red.
   -  In the lint **Inspection Results** window when you click **Code > Inspect
      Code**.

   **Note:** When your code is compiled in Android Studio, additional `IntelliJ code inspections <https://www.jetbrains.com/help/idea/2023.3/code-inspection.html>`__
   run to streamline code review.

   Figure 1 shows how the lint tool processes app source files.

   .. figure:: https://source.android.google.cn/static/studio/images/write/lint.png
      :alt: Code scanning workflow with the lint tool.
      :figclass: android-image-dark-theme-background
      :name: Fig1

      **Figure 1.** Code scanning workflow with the lint tool.

   **App source files**
      The source files consist of files that make up your Android project,
      including Kotlin, Java, and XML files, icons, and ProGuard configuration
      files.
   **The ``lint.xml`` file**
      A configuration file that you can use to specify any lint checks that you
      want to exclude and to customize problem severity levels.
   **The lint tool**
      A static code scanning tool that you can run on your Android project
      either from the command line or in Android Studio. The lint tool checks
      for structural code problems that could affect the quality and performance
      of your Android app.
   **Results of lint checking**
      You can view the results from lint either in the console or the
      **Inspection Results** window in Android Studio. If you run ``lint`` from
      the command line, the results are written to the ``build/`` folder. For
      further details, see the section about `running inspections manually <#manuallyRunInspections>`__.

   .. rubric:: Run lint from the command line
      :name: commandline

   If you're using Android Studio or Gradle, use the `Gradle wrapper <https://docs.gradle.org/current/userguide/gradle_wrapper.html>`__ to
   invoke the ``lint`` task for your project by entering one of the following
   commands from the root directory of your project:

   -  On Windows:

      .. code:: none

         gradlew lint

   -  On Linux or macOS:

      .. code:: none

         ./gradlew lint

   You should see output similar to the following:

   .. code:: none

      > Task :app:lintDebug
      Wrote HTML report to file:<path-to-project>/app/build/reports/lint-results-debug.html

   When the lint tool completes its checks, it provides paths to the XML and
   HTML versions of the lint report. You can then navigate to the HTML report
   and open it in your browser, as shown in figure 2.

   .. figure:: https://source.android.google.cn/static/studio/images/write/html_lint_report.png
      :alt: Sample HTML lint report
      :name: Fig2
      :width: 758px

      **Figure 2.** Sample HTML lint report.

   If your project includes `build variants <#/studio/build/build-variants>`__,
   lint checks only the default variant. If you want to run lint on a different
   variant, you must capitalize the variant name and prefix it with ``lint``.

   .. code:: none

      ./gradlew lintRelease

   To learn more about running Gradle tasks from the command line, read `Build your app from the command line <#/studio/build/building-cmdline>`__.

   .. rubric:: Run lint using the standalone tool
      :name: standalone-lint

   If you're not using Android Studio or Gradle, install the `Android SDK command-line tools <#/studio/command-line#tools-sdk>`__ to use the standalone
   lint tool. Locate the lint tool at
   ``android_sdk``\ ``/cmdline-tools/``\ ``version``\ ``/bin/lint``.

   **Note:** If you attempt to run the standalone tool on a Gradle project, it
   gives an error. You should always use ``gradle lint`` (on Windows) or
   ``./gradlew lint`` (on macOS or Linux) to run lint on a Gradle project.

   To run lint against a list of files in a project directory, use the following
   command:

   .. code:: none

      lint [flags] <project directory>

   For example, you can issue the following command to scan the files under the
   ``myproject`` directory and its subdirectories. The issue ID
   ``MissingPrefix`` tells lint to only scan for XML attributes that are missing
   the Android namespace prefix.

   .. code:: none

      lint --check MissingPrefix myproject 

   To see the full list of flags and command-line arguments supported by the
   tool, use the following command:

   .. code:: none

      lint --help

   The following example shows the console output when the lint command is run
   against a project called Earthquake:

   .. code:: none

      $ lint Earthquake

      Scanning Earthquake: ...............................................................................................................................
      Scanning Earthquake (Phase 2): .......
      AndroidManifest.xml:23: Warning: <uses-sdk> tag appears after <application> tag [ManifestOrder]
        <uses-sdk android:minSdkVersion="7" />
        ^
      AndroidManifest.xml:23: Warning: <uses-sdk> tag should specify a target API level (the highest verified version; when running on later versions, compatibility behaviors may be enabled) with android:targetSdkVersion="?" [UsesMinSdkAttributes]
        <uses-sdk android:minSdkVersion="7" />
        ^
      res/layout/preferences.xml: Warning: The resource R.layout.preferences appears to be unused [UnusedResources]
      res: Warning: Missing density variation folders in res: drawable-xhdpi [IconMissingDensityFolder]
      0 errors, 4 warnings

   The example output lists four warnings and no errors.

   Two warnings relate to the project's ``AndroidManifest.xml`` file:

   -  ``ManifestOrder``
   -  ``UsesMinSdkAttributes``

   One warning relates to the ``Preferences.xml`` layout file:
   ``UnusedResources``.
   One warning relates to the ``res`` directory: ``IconMissingDensityFolder``.

   .. rubric:: Configure lint to suppress warnings
      :name: config

   By default, when you run a lint scan the tool checks for all issues that lint
   supports. You can also restrict the issues for lint to check, and you can
   assign severity levels for issues. For example, you can suppress lint
   checking for specific issues that are not relevant to your project, and you
   can configure lint to report non-critical issues at a lower severity level.

   The severity levels are:

   -  ``enable``
   -  ``disable`` or ``ignore``
   -  ``informational``
   -  ``warning``
   -  ``error``
   -  ``fatal``

   You can configure lint checking for different levels:

   -  Globally (entire project)
   -  Project module
   -  Production module
   -  Test module
   -  Open files
   -  Class hierarchy
   -  Version Control System (VCS) scopes

   .. rubric:: Configure the lint file
      :name: pref

   You can specify your lint checking preferences in the ``lint.xml`` file. If
   you are creating this file manually, place it in the root directory of your
   Android project.

   The ``lint.xml`` file consists of an enclosing ``<lint>`` parent tag that
   contains one or more children ``<issue>`` elements. Lint defines a unique
   ``id`` attribute value for each ``<issue>``:

   .. code:: prettyprint

      <?xml version="1.0" encoding="UTF-8"?>
      <lint>
          <!-- list of issues to configure -->
      </lint>

   To change an issue's severity level or disable lint checking for the issue,
   set the severity attribute in the ``<issue>`` tag.

   **Tip:** For a full list of lint-supported issues and their corresponding
   issue IDs, run the ``lint --list`` command.

   .. rubric:: Sample lint.xml file
      :name: sample-lint.xml-file

   The following example shows the contents of a ``lint.xml`` file:

   .. code:: prettyprint

      <?xml version="1.0" encoding="UTF-8"?>
      <lint>
          <!-- Disable the IconMissingDensityFolder check in this project -->
          <issue id="IconMissingDensityFolder" severity="ignore" />

          <!-- Ignore the ObsoleteLayoutParam issue in the specified files -->
          <issue id="ObsoleteLayoutParam">
              <ignore path="res/layout/activation.xml" />
              <ignore path="res/layout-xlarge/activation.xml" />
          </issue>

          <!-- Ignore the UselessLeaf issue in the specified file -->
          <issue id="UselessLeaf">
              <ignore path="res/layout/main.xml" />
          </issue>

          <!-- Change the severity of hardcoded strings to "error" -->
          <issue id="HardcodedText" severity="error" />
      </lint>

   This example shows how different issue types are reported. The
   ``IconMissingDensityFolder`` check is disabled completely, and the
   ``ObsoleteLayoutParam`` check is disabled only in the files specified in the
   enclosed ``<ignore ... />`` declarations.

   .. rubric:: Configure lint checking for Kotlin, Java, and XML source files
      :name: src

   You can turn off lint checking for your Kotlin, Java, and XML source files in
   the **Preferences** dialog:

   #. Select **File > Settings** (on Windows) or **Android Studio >
      Preferences** (on macOS or Linux).
   #. Select **Editor > Inspections**.
   #. To disable, deselect the appropriate source file.

   You can set these either for the IDE or for individual projects by selecting
   the appropriate profile.

   .. rubric:: Configure lint checking in Java or Kotlin
      :name: configure-lint-checking-in-java-or-kotlin

   To disable lint checking specifically for a class or method in your Android
   project, add the ``@SuppressLint`` annotation to that code.

   The following example shows how you can turn off lint checking for the
   ``NewApi`` issue in the ``onCreate`` method. The lint tool continues to check
   for the ``NewApi`` issue in other methods of this class.

   .. container:: ds-selector-tabs

      .. container:: section

         .. rubric:: Kotlin
            :name: kotlin

         .. code:: prettyprint

            @SuppressLint("NewApi")
            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                setContentView(R.layout.main)

      .. container:: section

         .. rubric:: Java
            :name: java

         .. code:: prettyprint

            @SuppressLint("NewApi")
            @Override
            public void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                setContentView(R.layout.main);

   The same can be accomplished on any Composable. The following code snippet
   shows how you can turn off ``NewApi`` checks on any Composable.

   .. container:: ds-selector-tabs

      .. container:: section

         .. rubric:: Kotlin
            :name: kotlin

         .. code:: prettyprint

              @SuppressLint("NewApi")
              @Composable
              fun MyComposable{
                ...
              }
              

   The following example shows how to turn off lint checking for the
   ``ParserError`` issue in the ``FeedProvider`` class:

   .. container:: ds-selector-tabs

      .. container:: section

         .. rubric:: Kotlin
            :name: kotlin

         .. code:: prettyprint

            @SuppressLint("ParserError")
            class FeedProvider : ContentProvider() {

      .. container:: section

         .. rubric:: Java
            :name: java

         .. code:: prettyprint

            @SuppressLint("ParserError")
            public class FeedProvider extends ContentProvider {

   To suppress checking for all lint issues in the file, use the ``all``
   keyword:

   .. container:: ds-selector-tabs

      .. container:: section

         .. rubric:: Kotlin
            :name: kotlin

         .. code:: prettyprint

            @SuppressLint("all")

      .. container:: section

         .. rubric:: Java
            :name: java

         .. code:: prettyprint

            @SuppressLint("all")

   You can use the same annotation to suppress lint checks on any Composable
   function.

   .. rubric:: Configure lint checking in XML
      :name: configure-lint-checking-in-xml

   Use the ``tools:ignore`` attribute to turn off lint checking for specific
   sections of your XML files. Put the following namespace value in the
   ``lint.xml`` file so the lint tool recognizes the attribute:

   .. code:: prettyprint

      namespace xmlns:tools="http://schemas.android.com/tools"

   The following example shows how you can turn off lint checking for the
   ``UnusedResources`` issue in a ``<LinearLayout>`` element of an XML layout
   file. The ``ignore`` attribute is inherited by the children elements of the
   parent element where the attribute is declared. In this example, the lint
   check is also disabled for the child ``<TextView>`` element:

   .. code:: prettyprint

      <LinearLayout
          xmlns:android="http://schemas.android.com/apk/res/android"
          xmlns:tools="http://schemas.android.com/tools"
          tools:ignore="UnusedResources" >

          <TextView
              android:text="@string/auto_update_prompt" />
      </LinearLayout>

   To disable more than one issue, list the issues to disable in a
   comma-separated string. For example:

   .. code:: prettyprint

      tools:ignore="NewApi,StringFormatInvalid"

   To suppress checking for all lint issues in the XML element, use the ``all``
   keyword:

   .. code:: prettyprint

      tools:ignore="all"

   .. rubric:: Configure lint options with Gradle
      :name: gradle

   The Android plugin for Gradle lets you configure certain lint options, such
   as which checks to run or ignore, using the
   `lint{} <https://developer.android.google.cn/reference/tools/gradle-api/7.0/com/android/build/api/dsl/Lint>`__
   block in your module-level ``build.gradle`` file.

   The following code snippet shows some of the properties you can configure:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kts
               :class: two-line-tab

            .. code:: prettyprint

               android {
                   ...
                   lint {
                       // Turns off checks for the issue IDs you specify.
                       disable += "TypographyFractions" + "TypographyQuotes"
                       // Turns on checks for the issue IDs you specify. These checks are in
                       // addition to the default lint checks.
                       enable += "RtlHardcoded" + "RtlCompat" + "RtlEnabled"
                       // To enable checks for only a subset of issue IDs and ignore all others,
                       // list the issue IDs with the 'check' property instead. This property overrides
                       // any issue IDs you enable or disable using the properties above.
                       checkOnly += "NewApi" + "InlinedApi"
                       // If set to true, turns off analysis progress reporting by lint.
                       quiet = true
                       // If set to true (default), stops the build if errors are found.
                       abortOnError = false
                       // If set to true, lint only reports errors.
                       ignoreWarnings = true
                       // If set to true, lint also checks all dependencies as part of its analysis.
                       // Recommended for projects consisting of an app with library dependencies.
                       checkDependencies = true
                   }
               }
               ...

         .. container:: section

            .. rubric:: Groovy
               :name: groovy
               :class: two-line-tab

            .. code:: prettyprint

               android {
                   ...
                   lint {
                       // Turns off checks for the issue IDs you specify.
                       disable 'TypographyFractions','TypographyQuotes'
                       // Turns on checks for the issue IDs you specify. These checks are in
                       // addition to the default lint checks.
                       enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
                       // To enable checks for only a subset of issue IDs and ignore all others,
                       // list the issue IDs with the 'check' property instead. This property overrides
                       // any issue IDs you enable or disable using the properties above.
                       checkOnly 'NewApi', 'InlinedApi'
                       // If set to true, turns off analysis progress reporting by lint.
                       quiet true
                       // If set to true (default), stops the build if errors are found.
                       abortOnError false
                       // If set to true, lint only reports errors.
                       ignoreWarnings true
                       // If set to true, lint also checks all dependencies as part of its analysis.
                       // Recommended for projects consisting of an app with library dependencies.
                       checkDependencies true
                   }
               }
               ...

      All lint methods that override the given severity level of an issue
      respect the order of configuration. For example, setting an issue as fatal
      in
      `finalizeDsl() <#/reference/tools/gradle-api/7.0/com/android/build/api/extension/AndroidComponentsExtension#finalizedsl_1>`__
      overrides disabling it in the main DSL.

   .. rubric:: Create a warnings baseline
      :name: snapshot

   You can take a snapshot of your project's current set of warnings, then use
   the snapshot as a baseline for future inspection runs so that only new issues
   are reported. The baseline snapshot lets you start using lint to fail the
   build without having to go back and address all existing issues first.

   To create a baseline snapshot, modify your project's ``build.gradle`` file as
   follows:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kts
               :class: two-line-tab

            .. code:: prettyprint

               android {
                   lint {
                       baseline = file("lint-baseline.xml")
                   }
               }

         .. container:: section

            .. rubric:: Groovy
               :name: groovy
               :class: two-line-tab

            .. code:: prettyprint

               android {
                   lintOptions {
                       baseline file("lint-baseline.xml")
                   }
               }

   When you first add this line, the ``lint-baseline.xml`` file is created to
   establish your baseline. From then on, the tools only read the file to
   determine the baseline. If you want to create a new baseline, manually delete
   the file and run lint again to re-create it.

   Then, run lint from the IDE by selecting **Code > Inspect Code** or from the
   command line as follows. The output prints the location of the
   ``lint-baseline.xml`` file. The file location for your setup might be
   different from what is shown here:

   .. code:: none

      $ ./gradlew lintDebug -Dlint.baselines.continue=true
      ...
      Wrote XML report to file:///app/lint-baseline.xml
      Created baseline file /app/lint-baseline.xml

   Running ``lint`` records all the current issues in the ``lint-baseline.xml``
   file. The set of current issues is called the *baseline*. You can check the
   ``lint-baseline.xml`` file into version control if you want to share it with
   others.

   .. rubric:: Customize the baseline
      :name: customize-the-baseline

   If you want to add only certain issue types to the baseline, specify the
   issues to add by editing your project's ``build.gradle`` file as follows:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kts
               :class: two-line-tab

            .. code:: prettyprint

               android {
                   lint {
                       checkOnly += "NewApi" + "HandlerLeak"
                       baseline = file("lint-baseline.xml")
                   }
               }

         .. container:: section

            .. rubric:: Groovy
               :name: groovy
               :class: two-line-tab

            .. code:: prettyprint

               android {
                   lintOptions {
                       checkOnly 'NewApi', 'HandlerLeak'
                       baseline file("lint-baseline.xml")
                   }
               }

   If you add any new warnings to the codebase after you create the baseline,
   lint lists only the newly introduced bugs.

   .. rubric:: Baseline warning
      :name: baseline-warning

   When a baseline is in effect, you get an informational warning that tells you
   that one or more issues were filtered out because they are listed in the
   baseline. This warning helps you remember that you have configured a baseline
   and that you need to fix all of the issues at some point.

   This informational warning also keeps track of issues that are no longer
   reported. This information lets you know if you have actually fixed issues,
   so you can optionally re-create the baseline to prevent an error from coming
   back undetected.

   **Note:** Baselines are enabled when you run inspections in batch mode in the
   IDE, but they are ignored for the in-editor checks that run in the background
   when you are editing a file. This is because baselines are intended for the
   case where a codebase has a large number of existing warnings, but you do
   want to fix issues locally while you touch the code.

   .. rubric:: Run inspections manually
      :name: manuallyRunInspections

   To manually run configured lint and other IDE inspections, select **Code >
   Inspect Code**. The results of the inspection appear in the **Inspection
   Results** window.

   .. rubric:: Set the inspection scope and profile
      :name: set

   Select the files you want to analyze (the inspection *scope*) and the
   inspections you want to run (the inspection *profile*) as follows:

   #. In the **Android** view, open your project and select the project, folder,
      or file that you want to analyze.

   #. From the menu bar, select **Code > Inspect Code**.

   #. In the **Specify Inspection Scope** dialog, review the settings.

      .. figure:: https://source.android.google.cn/static/studio/images/write/specify_inspection_scope_2x.png
         :alt: Specify Inspection Scope
         :name: Fig3
         :width: 495px

         **Figure 3.** Review the inspection scope settings.

      The options that appear in the **Specify Inspection Scope** dialog varies
      depending on whether you selected a project, folder, or file:

      -  When you select one project, file, or directory, the **Specify
         Inspection Scope** dialog displays the path to the project, file, or
         directory you selected.
      -  When you select more than one project, file, or directory, the
         **Specify Inspection Scope** dialog displays a selected radio button
         for **Selected files**.

      To change what to inspect, select one of the other radio buttons. See
      `Specify Inspection Scope dialog <https://www.jetbrains.com/help/idea/2023.3/specify-inspection-scope-dialog.html>`__
      for a description of all possible fields on the **Specify Inspection
      Scope** dialog.

   #. Under **Inspection profile**, select the profile you want to use.

   #. Click **OK** to run the inspection.

      Figure 4 shows lint and other IDE inspection results from the **Inspect
      Code** run:

      .. figure:: https://source.android.google.cn/static/studio/images/write/inspectandfix_2x.png
         :alt: Select an issue to see its resolution.
         :name: Fig4
         :width: 925px

         **Figure 4.** Results from the inspection. Select an issue to see the
         resolution.

   #. In the **Inspection Results** pane, view the inspection results by
      expanding and selecting error categories, types, or issues.

      The **Inspection Report** pane displays the inspection report for the
      error category, type, or issue selected in the **Inspection Results** pane
      and displays the name and location of the error. Where applicable, the
      inspection report displays other information, such as a problem synopsis,
      to help you correct the problem.

   #. In the **Inspection Results** pane tree view, right-click a category,
      type, or issue to display the context menu.

      Depending on the context, you can:

      -  Jump to source.
      -  Exclude and include selected items.
      -  Suppress problems.
      -  Edit settings.
      -  Manage inspection alerts.
      -  Rerun an inspection.

   For descriptions of the toolbar buttons, context menu items, and inspection
   report fields, see `Inspection Results tool window <https://www.jetbrains.com/help/idea/2023.3/inspection-tool-window.html>`__.

   .. rubric:: Use a custom scope
      :name: cs

   Use one of the custom scopes provided in Android Studio as follows:

   #. In the **Specify Inspection Scope** dialog, select **Custom scope**.

   #. Click the **Custom scope** list to display your options:

      .. figure:: https://source.android.google.cn/static/studio/images/write/chooseinspectionscope_2x.png
         :alt: Choose Inspection Scope
         :name: Fig5
         :width: 925px

         **Figure 5.** Select which custom scope you want to use.

      -  **All Places:** All files.
      -  **Project Files:** All the files in the current project.
      -  **Project Source Files:** Only the source files in the current project.
      -  **Project Production Files:** Only the production files in the current
         project.
      -  **Project Test Files:** Only the test files in the current project.
      -  **Scratches and Consoles:** Only the scratch files and consoles you
         have open in the current project.
      -  **Recently Viewed Files:** Only recently viewed files in the current
         project.
      -  **Current File:** Only the current file in your current project.
         Appears when you have a file or folder selected.
      -  **Selected Directory:** Only the current folder in your current
         project. Appears when you have a folder selected.
      -  **Class Hierarchy:** When you select this option and click **OK**, a
         dialog appears with all of the classes in the current project. In the
         dialog, use the **Search by Name** field to filter and select the
         classes to inspect. If you don't filter the classes list, code
         inspection inspects all of the classes.

      If you have a VCS configured for the project, there are also options to
      restrict the search to only files that have been modified.

   #. Click **OK.**

   .. rubric:: Create a custom scope
      :name: crcs

   When you want to inspect a selection of files and directories that isn't
   covered by any of the currently available custom scopes, you can create a
   custom scope:

   #. In the **Specify Inspection Scope** dialog, select **Custom scope**.

   #. Click the three dots after the **Custom Scope** list.

      .. figure:: https://source.android.google.cn/static/studio/images/write/customscope-more_2x.png
         :alt: Specify Inspection Scope dialog
         :width: 490px

         **Figure 6.** Specify Inspection Scope dialog.

      The **Scopes** dialog appears.

      .. figure:: https://source.android.google.cn/static/studio/images/write/scopes_2x.png
         :alt: Create a custom scope
         :width: 800px

         **Figure 7.** Create a custom scope.

   #. Click the |image-ic_plus| button in the top-left corner of the dialog to define a
      new scope.

   #. In the **Add Scope** list that appears, select **Local**.

      Both the local and shared scopes are used within the project for the
      **Inspect Code** feature. A **Shared** scope can also be used with other
      project features that have a scope field. For example, when you click
      **Edit Settings** |image-dialog-wrench| to change the settings for **Find Usages**, the
      resulting dialog has a **Scope** field where you can select a shared
      scope.

      .. figure:: https://source.android.google.cn/static/studio/images/write/sharedscope_2x.png
         :alt: Select a shared scope from the Find Usages dialog
         :width: 372px

         **Figure 8.** Select a shared scope from the **Find Usages** dialog.

   #. Give the scope a name and click **OK**.

      The right pane of the **Scopes** dialog populates with options that let
      you define the custom scope.

   #. From the list, select **Project**.

      A list of available projects appears.

      **Note:** You can create the custom scope for projects or packages. The
      steps are the same.

   #. Expand the project folders, select what you want to add to the custom
      scope, and select whether to include or exclude it.

      .. figure:: https://source.android.google.cn/static/studio/images/write/customscope_2x.png
         :alt: Define a custom scope
         :width: 800px

         **Figure 9.** Define a custom scope.

      -  **Include**: Include this folder and its files, but do not include any
         of its subfolders.
      -  **Include Recursively**: Include this folder and its files as well as
         its subfolders and their files.
      -  **Exclude**: Exclude this folder and its files, but do not exclude any
         of its subfolders.
      -  **Exclude Recursively**: Exclude this folder and its files as well as
         its subfolders and their files.

      Figure 10 shows that the **main** folder is included, and that the
      **java** and **res** folders are included recursively. Blue indicates a
      partially included folder, and green indicates recursively included
      folders and files.

      .. figure:: https://source.android.google.cn/static/studio/images/write/includepattern_2x.png
         :alt: Example pattern for a custom scope
         :width: 800px

         **Figure 10.** Example pattern for a custom scope.

      -  If you select the **java** folder and click **Exclude Recursively**,
         the green highlighting goes away on the **java** folder and all the
         folders and files under it.
      -  If you select the green-highlighted **MainActivity.kt** file and click
         **Exclude**, **MainActivity.kt** is no longer highlighted green, but
         everything else under the **java** folder remains green.

   #. Click **OK**. The custom scope appears at the bottom of the list.

   .. rubric:: Review and edit inspection profiles
      :name: cis

   Android Studio has a selection of lint and other inspection profiles that are
   updated through Android updates. You can use these profiles as they are or
   edit their names, descriptions, severities, and scopes. You can also activate
   and deactivate entire groups of profiles or individual profiles within a
   group.

   To access the **Inspections** settings:

   #. Select **File > Settings.** (on Windows) or **Android Studio >
      Preferences** (on macOS or Linux).

   #. Select **Editor > Inspections**.

   #. Select the **Profile** list to toggle between **Default** (Android Studio)
      and **Project Default** (the active project) inspections.

      For more information, see the IntelliJ `Manage profiles <https://www.jetbrains.com/help/idea/2023.3/inspections-settings.html#profile_management>`__
      page.

   #. In the **Inspections** list in the left pane, select a top-level profile
      category or expand a group and select a specific profile.

      When you select a profile category, you can edit all the inspections in
      that category as a single inspection.

   #. Select the **Show Schema Actions** |Show Schema Actions icon| list to
      copy, rename, add descriptions to, export, and import inspections.

   #. When you're done, click **OK**.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2024-05-03 UTC.

.. |image-ic_plus| image:: https://source.android.google.cn/static/studio/images/buttons/ic_plus.png
   :class: inline-icon
.. |image-dialog-wrench| image:: https://source.android.google.cn/static/studio/images/buttons/dialog-wrench.png
   :class: inline-icon
.. |Show Schema Actions icon| image:: https://source.android.google.cn/static/studio/images/buttons/device-settings-icon.png
   :class: inline-icon

/Improve code inspection with annotations
=========================================

.. https://developer.android.google.cn/studio/write/annotations?hl=en

.. container:: devsite-article-body clearfix

   Using code inspections tools, such as `lint <#/studio/write/lint>`__, can help
   you find problems and improve your code, but inspection tools can only infer
   so much. Android resource IDs, for example, use an ``int`` to identify
   strings, graphics, colors, and other resource types, so inspection tools
   can't tell when you have specified a string resource where you should have
   specified a color. This situation means that your app may render incorrectly
   or fail to run at all, even if you use code inspection.

   Annotations let you provide hints to code inspections tools, such as lint, to
   help detect these more subtle code problems. Annotations are added as
   metadata tags that you attach to variables, parameters, and return values to
   inspect method return values, passed parameters, local variables, and fields.
   When used with code inspection tools, annotations can help you detect
   problems such as null pointer exceptions and resource type conflicts.

   Android supports a variety of annotations through the `Jetpack Annotations Library <#/jetpack/androidx/releases/annotation>`__. You can access the
   library through the
   `androidx.annotation <#/reference/androidx/annotation/package-summary>`__
   package.

   **Note:** If a module has a dependency on an annotation processor, you must
   use either the ``kapt`` or ``ksp`` dependency configuration for Kotlin or the
   ``annotationProcessor`` dependency configuration for Java to add that
   dependency.

   .. rubric:: Add annotations to your project
      :name: adding-annotations

   To enable annotations in your project, add the
   ``androidx.annotation:annotation`` dependency to your library or app. Any
   annotations you add are checked when you run a code inspection or ``lint``
   task.

   .. rubric:: Add the Jetpack Annotations library dependency
      :name: adding-library

   The Jetpack Annotations library is published on `Google's Maven Repository <#/studio/build/dependencies#google-maven>`__. To add the Jetpack
   Anotations library to your project, include the following line in the
   ``dependencies`` block of your ``build.gradle`` or ``build.gradle.kts`` file:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kts
               :class: two-line-tab

            .. code:: prettyprint

               dependencies {
                   implementation("androidx.annotation:annotation:1.7.1")
               }

         .. container:: section

            .. rubric:: Groovy
               :name: groovy
               :class: two-line-tab

            .. code:: prettyprint

               dependencies {
                   implementation 'androidx.annotation:annotation:1.7.1'
               }

   Then, in the toolbar or sync notification that appears, click **Sync Now**.
   If you use annotations in your own library module, the annotations are
   included as part of the Android Archive (AAR) artifact in XML format in the
   ``annotations.zip`` file. Adding the ``androidx.annotation`` dependency
   doesn't introduce a dependency for any downstream users of your library.

   **Note:** If you're using other Jetpack libraries, you might not need to add
   the ``androidx.annotation`` dependency. Because many other Jetpack libraries
   depend on the Annotations Library, you might already have access to the
   annotations.

   For a complete list of annotations included in the Jetpack repository, either
   see the `Jetpack Annotations library reference <#/reference/androidx/annotation/package-summary>`__ or use the
   autocomplete feature to display the available options for the
   ``import androidx.annotation.`` statement.

   .. rubric:: Run code inspections
      :name: running-code-inspections

   To start a code inspection from Android Studio, which includes validating
   annotations and automatic lint checking, select **Analyze** **> Inspect
   Code** from the menu. Android Studio displays conflict messages to flag
   potential problems where your code conflicts with annotations and to suggest
   possible resolutions.

   You can also enforce annotations by `running the ``lint`` task using the
   command line <#/studio/write/lint#commandline>`__. Although this might be
   useful for flagging problems with a continuous integration server, the
   ``lint`` task doesn't enforce nullness annotations (described in the
   following section); only Android Studio does this. For more information on
   enabling and running lint inspections, see `Improving your code with lint checks <#/tools/debugging/improving-w-lint>`__.

   Although annotation conflicts generate warnings, these warnings don't prevent
   your app from compiling.

   .. rubric:: Nullness annotations
      :name: adding-nullness

   Nullness annotations can be useful in Java code to enforce whether values can
   be null. They are less useful in Kotlin code, as Kotlin has built in
   nullability rules that are enforced at compile time.
   Add `@Nullable <#/reference/androidx/annotation/Nullable>`__ and
   `@NonNull <#/reference/androidx/annotation/NonNull>`__ annotations to
   check the nullness of a given variable, parameter, or return value. The
   ``@Nullable`` annotation indicates a variable, parameter, or return value
   that can be null. ``@NonNull`` indicates a variable, parameter, or return
   value that can't be null.

   For example, if a local variable that contains a null value is passed as a
   parameter to a method with the ``@NonNull`` annotation attached to that
   parameter, building the code generates a warning indicating a non-null
   conflict. Also, attempting to reference the result of a method marked by
   ``@Nullable`` without first checking whether the result is null generates a
   nullness warning. Only use ``@Nullable`` on a method's return value if every
   use of the method must be explicitly null-checked.

   The following example demonstrates nullability in action. The Kotlin example
   code doesn't leverage the ``@NonNull`` annotation because it's automatically
   added to the generated bytecode when a non-nullable type is specified. The
   Java example leverages the ``@NonNull`` annotation on the ``context`` and
   ``attrs`` parameters to check that the passed parameter values aren't null.
   It also checks that the ``onCreateView()`` method itself doesn't return null:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               ...
                   /** Annotation not used because of the safe-call operator(?)**/
                   override fun onCreateView(
                           name: String?,
                           context: Context,
                           attrs: AttributeSet
                   ): View? {
                       ...
                   }
               ...

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               import androidx.annotation.NonNull;
               ...
                   /** Add support for inflating the <fragment> tag. **/
                   @NonNull
                   @Override
                   public View onCreateView(String name, @NonNull Context context,
                     @NonNull AttributeSet attrs) {
                     ...
                     }
               ...

   .. rubric:: Nullability analysis
      :name: nullability-analysis

   Android Studio supports running a nullability analysis to automatically infer
   and insert nullness annotations in your code. A nullability analysis scans
   the contracts throughout the method hierarchies in your code to detect:

   -  Calling methods that can return null.
   -  Methods that should not return null.
   -  Variables, such as fields, local variables, and parameters, that can be
      null.
   -  Variables, such as fields, local variables, and parameters, that can't
      hold a null value.

   The analysis then automatically inserts the appropriate null annotations in
   the detected locations.

   To run a nullability analysis in Android Studio, select **Analyze** > **Infer
   Nullity**. Android Studio inserts the Android
   `@Nullable <#/reference/androidx/annotation/Nullable>`__ and
   `@NonNull <#/reference/androidx/annotation/NonNull>`__ annotations in
   detected locations in your code. After running a null analysis, it's a good
   practice to verify the injected annotations.

   **Note:** When adding nullness annotations, autocomplete may suggest the
   IntelliJ `@Nullable and @NotNull <https://www.jetbrains.com/help/idea/2023.3/nullable-and-notnull-annotations.html>`__
   annotations instead of the Android null annotations and may auto-import the
   corresponding library. However, the Android Studio lint checker only looks
   for the Android null annotations. When verifying your annotations, confirm
   that your project uses the Android null annotations so the lint checker can
   properly notify you during code inspection.

   .. rubric:: Resource annotations
      :name: res-annotations

   Validating resource types can be useful because Android references to
   resources, such as `drawable <#/guide/topics/resources/drawable-resource>`__
   and `string <#/guide/topics/resources/string-resource>`__ resources, are
   passed as integers.

   Code that expects a parameter to reference a specific type of resource, such
   as a ``String``, can be passed to the expected reference type of ``int``, but
   actually reference a different type of resource, such as an ``R.string``
   resource.

   For example, add
   `@StringRes <#/reference/androidx/annotation/StringRes>`__ annotations to
   check whether a resource parameter contains an ``R.string`` reference, as
   shown here:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               abstract fun setTitle(@StringRes resId: Int)

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               public abstract void setTitle(@StringRes int resId)

   During code inspection, the annotation generates a warning if an ``R.string``
   reference isn't passed in the parameter.

   Annotations for other resource types, such as
   `@DrawableRes <#/reference/androidx/annotation/DrawableRes>`__,
   `@DimenRes <#/reference/androidx/annotation/DimenRes>`__,
   `@ColorRes <#/reference/androidx/annotation/ColorRes>`__, and
   `@InterpolatorRes <#/reference/androidx/annotation/InterpolatorRes>`__,
   can be added using the same annotation format and run during the code
   inspection.

   If your parameter supports multiple resource types, you can put more than one
   resource type annotation on a given parameter. Use
   `@AnyRes <#/reference/androidx/annotation/AnyRes>`__ to indicate that the
   annotated parameter can be any type of ``R`` resource.

   Although you can use ``@ColorRes`` to specify that a parameter should be a
   color resource, a color integer (in the ``RRGGBB`` or ``AARRGGBB`` format)
   isn't recognized as a color resource. Instead, use the
   `@ColorInt <#/reference/androidx/annotation/ColorInt>`__ annotation to
   indicate that a parameter must be a color integer. The build tools will flag
   incorrect code that passes a color resource ID such as
   ``android.R.color.black``, rather than a color integer, to annotated methods.

   .. rubric:: Thread annotations
      :name: thread-annotations

   Thread annotations check whether a method is called from a specific type of
   `thread <#/guide/components/processes-and-threads>`__. The following thread
   annotations are supported:

   -  `@MainThread <#/reference/androidx/annotation/MainThread>`__
   -  `@UiThread <#/reference/androidx/annotation/UiThread>`__
   -  `@WorkerThread <#/reference/androidx/annotation/WorkerThread>`__
   -  `@BinderThread <#/reference/androidx/annotation/BinderThread>`__
   -  `@AnyThread <#/reference/androidx/annotation/AnyThread>`__

   The build tools treat the ``@MainThread`` and ``@UiThread`` annotations as
   interchangeable, so you can call ``@UiThread`` methods from ``@MainThread``
   methods and vice versa. However, it's possible for a UI thread to be
   different from the main thread, in the case of system apps with multiple
   views on different threads. Therefore, you should annotate methods associated
   with an app's view hierarchy with ``@UiThread`` and annotate only methods
   associated with an app's lifecycle with ``@MainThread``.

   If all methods in a class share the same threading requirement, you can add a
   single thread annotation to the class to verify that all methods in the class
   are called from the same type of thread.

   A common use of thread annotations is to validate that methods or classes
   annotated with ``@WorkerThread`` are only called from an appropriate
   background thread.

   .. rubric:: Value constraint annotations
      :name: value-constraint

   Use the `@IntRange <#/reference/androidx/annotation/IntRange>`__,
   `@FloatRange <#/reference/androidx/annotation/FloatRange>`__, and
   `@Size <#/reference/androidx/annotation/Size>`__ annotations to validate
   the values of passed parameters. Both ``@IntRange`` and ``@FloatRange`` are
   most useful when applied to parameters where users are likely to get the
   range wrong.

   The ``@IntRange`` annotation validates that an integer or long parameter
   value is within a specified range. The following example indicates that the
   ``alpha`` parameter must contain an integer value from 0 to 255:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               fun setAlpha(@IntRange(from = 0, to = 255) alpha: Int) { ... }

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               public void setAlpha(@IntRange(from=0,to=255) int alpha) { ... }

   The ``@FloatRange`` annotation checks whether a float or double parameter
   value is within a specified range of floating point values. The following
   example indicates that the ``alpha`` parameter must contain a float value
   from 0.0 to 1.0:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               fun setAlpha(@FloatRange(from = 0.0, to = 1.0) alpha: Float) {...}

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               public void setAlpha(@FloatRange(from=0.0, to=1.0) float alpha) {...}

   The ``@Size`` annotation checks the size of a collection or array or the
   length of a string. The ``@Size`` annotation can be used to verify the
   following qualities:

   -  Minimum size, such as ``@Size(min=2)``
   -  Maximum size, such as ``@Size(max=2)``
   -  Exact size, such as ``@Size(2)``
   -  A number that the size must be a multiple of, such as
      ``@Size(multiple=2)``

   For example, ``@Size(min=1)`` checks whether a collection is not empty, and
   ``@Size(3)`` validates that an array contains exactly three values.

   The following example indicates that the ``location`` array must contain at
   least one element:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               fun getLocation(button: View, @Size(min=1) location: IntArray) {
                   button.getLocationOnScreen(location)
               }

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               void getLocation(View button, @Size(min=1) int[] location) {
                   button.getLocationOnScreen(location);
               }

   .. rubric:: Permission annotations
      :name: permissions

   Use the
   `@RequiresPermission <#/reference/androidx/annotation/RequiresPermission>`__
   annotation to validate the permissions of the caller of a method. To check
   for a single permission from a list of valid permissions, use the ``anyOf``
   attribute. To check for a set of permissions, use the ``allOf`` attribute.
   The following example annotates the ``setWallpaper()`` method to indicate
   that the caller of the method must have the ``permission.SET_WALLPAPERS``
   permission:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               @RequiresPermission(Manifest.permission.SET_WALLPAPER)
               @Throws(IOException::class)
               abstract fun setWallpaper(bitmap: Bitmap)

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               @RequiresPermission(Manifest.permission.SET_WALLPAPER)
               public abstract void setWallpaper(Bitmap bitmap) throws IOException;

   The following example requires the caller of the ``copyImageFile()`` method
   to have both read access to external storage and read access to location
   metadata in the copied image:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               @RequiresPermission(allOf = [
                   Manifest.permission.READ_EXTERNAL_STORAGE,
                   Manifest.permission.ACCESS_MEDIA_LOCATION
               ])
               fun copyImageFile(dest: String, source: String) {
                   ...
               }

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               @RequiresPermission(allOf = {
                   Manifest.permission.READ_EXTERNAL_STORAGE,
                   Manifest.permission.ACCESS_MEDIA_LOCATION})
               public static final void copyImageFile(String dest, String source) {
                   //...
               }

   For permissions on intents, place the permission requirement on the string
   field that defines the intent action name:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               @RequiresPermission(android.Manifest.permission.BLUETOOTH)
               const val ACTION_REQUEST_DISCOVERABLE = "android.bluetooth.adapter.action.REQUEST_DISCOVERABLE"

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               @RequiresPermission(android.Manifest.permission.BLUETOOTH)
               public static final String ACTION_REQUEST_DISCOVERABLE =
                           "android.bluetooth.adapter.action.REQUEST_DISCOVERABLE";

   For permissions on content providers that need separate permissions for read
   and write access, wrap each permission requirement in an
   `@RequiresPermission.Read <#/reference/androidx/annotation/RequiresPermission.Read>`__
   or
   `@RequiresPermission.Write <#/reference/androidx/annotation/RequiresPermission.Write>`__
   annotation:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               @RequiresPermission.Read(RequiresPermission(READ_HISTORY_BOOKMARKS))
               @RequiresPermission.Write(RequiresPermission(WRITE_HISTORY_BOOKMARKS))
               val BOOKMARKS_URI = Uri.parse("content://browser/bookmarks")

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               @RequiresPermission.Read(@RequiresPermission(READ_HISTORY_BOOKMARKS))
               @RequiresPermission.Write(@RequiresPermission(WRITE_HISTORY_BOOKMARKS))
               public static final Uri BOOKMARKS_URI = Uri.parse("content://browser/bookmarks");

   .. rubric:: Indirect permissions
      :name: indirect-permissions

   When a permission depends on the specific value supplied to a method's
   parameter, use ``@RequiresPermission`` on the parameter itself without
   listing the specific permissions. For example, the
   `startActivity(Intent) <#/reference/android/app/Activity#startActivity(android.content.Intent)>`__
   method uses an indirect permission on the intent passed to the method:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               abstract fun startActivity(@RequiresPermission intent: Intent, bundle: Bundle?)

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               public abstract void startActivity(@RequiresPermission Intent intent, @Nullable Bundle)

   When you use indirect permissions, the build tools perform data flow analysis
   to check whether the argument passed into the method has any
   ``@RequiresPermission`` annotations. They then enforce any existing
   annotations from the parameter on the method itself. In the
   ``startActivity(Intent)`` example, annotations in the
   `Intent <#/reference/android/content/Intent>`__ class cause the resulting
   warnings on invalid uses of ``startActivity(Intent)`` when an intent without
   the appropriate permissions is passed to the method, as shown in figure 1.

   |image-indirect-permissions-warning_2-2_2x|
   **Figure 1.** The warning generated from an indirect permissions annotation
   on the ``startActivity(Intent)`` method.

   The build tools generate the warning on ``startActivity(Intent)`` from the
   annotation on the corresponding intent action name in the ``Intent`` class:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               @RequiresPermission(Manifest.permission.CALL_PHONE)
               const val ACTION_CALL = "android.intent.action.CALL"

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               @RequiresPermission(Manifest.permission.CALL_PHONE)
               public static final String ACTION_CALL = "android.intent.action.CALL";

   If necessary, you can substitute ``@RequiresPermission`` for
   ``@RequiresPermission.Read`` or ``@RequiresPermission.Write`` when annotating
   a method's parameter. However, for indirect permissions
   ``@RequiresPermission`` should not be used in conjunction with either the
   read or the write permissions annotations.

   .. rubric:: Return value annotations
      :name: check-result

   Use the `@CheckResult <#/reference/androidx/annotation/CheckResult>`__
   annotation to validate that a method's result or return value is actually
   used. Instead of annotating every non-void method with ``@CheckResult``, add
   the annotation to clarify the results of potentially confusing methods.

   For example, new Java developers often mistakenly think that
   ``<``\ *``String``*\ ``>.trim()`` removes whitespace from the original
   string. Annotating the method with ``@CheckResult`` flags uses of
   ``<``\ *``String``*\ ``>.trim()`` where the caller doesn't do anything with
   the method's return value.

   The following example annotates the
   `checkPermissions() <#/reference/android/content/pm/PackageManager#checkPermission(java.lang.String,%20java.lang.String)>`__
   method to check whether the return value of the method is actually
   referenced. It also names the
   `enforcePermission() <#/reference/android/content/ContextWrapper#enforcePermission(java.lang.String,%20int,%20int,%20java.lang.String)>`__
   method as a method to be suggested to the developer as a replacement:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               @CheckResult(suggest = "#enforcePermission(String,int,int,String)")
               abstract fun checkPermission(permission: String, pid: Int, uid: Int): Int

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               @CheckResult(suggest="#enforcePermission(String,int,int,String)")
               public abstract int checkPermission(@NonNull String permission, int pid, int uid);

   .. rubric:: CallSuper annotations
      :name: call-super

   Use the `@CallSuper <#/reference/androidx/annotation/CallSuper>`__
   annotation to validate that an overriding method calls the super
   implementation of the method.

   The following example annotates the ``onCreate()`` method to ensure that any
   overriding method implementations call ``super.onCreate()``:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               @CallSuper
               override fun onCreate(savedInstanceState: Bundle?) {
               }

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               @CallSuper
               protected void onCreate(Bundle savedInstanceState) {
               }

   .. rubric:: Typedef annotations
      :name: enum-annotations

   Typedef annotations check whether a particular parameter, return value, or
   field references a specific set of constants. They also enable code
   completion to automatically offer the allowed constants.

   Use the `@IntDef <#/reference/androidx/annotation/IntDef>`__ and
   `@StringDef <#/reference/androidx/annotation/StringDef>`__ annotations to
   create enumerated annotations of integer and string sets to validate other
   types of code references.

   Typedef annotations use ``@interface`` to declare the new enumerated
   annotation type. The ``@IntDef`` and ``@StringDef`` annotations, along with
   ``@Retention``, annotate the new annotation and are necessary to define the
   enumerated type. The ``@Retention(RetentionPolicy.SOURCE)`` annotation tells
   the compiler not to store the enumerated annotation data in the ``.class``
   file.

   The following example shows the steps to create an annotation that checks
   whether a value passed as a method parameter references one of the defined
   constants:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               import androidx.annotation.IntDef
               //...
               // Define the list of accepted constants and declare the NavigationMode annotation.
               @Retention(AnnotationRetention.SOURCE)
               @IntDef(NAVIGATION_MODE_STANDARD, NAVIGATION_MODE_LIST, NAVIGATION_MODE_TABS)
               annotation class NavigationMode

               // Declare the constants.
               const val NAVIGATION_MODE_STANDARD = 0
               const val NAVIGATION_MODE_LIST = 1
               const val NAVIGATION_MODE_TABS = 2

               abstract class ActionBar {

                   // Decorate the target methods with the annotation.
                   // Attach the annotation.
                   @get:NavigationMode
                   @setparam:NavigationMode
                   abstract var navigationMode: Int

               }

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               import androidx.annotation.IntDef;
               //...
               public abstract class ActionBar {
                   //...
                   // Define the list of accepted constants and declare the NavigationMode annotation.
                   @Retention(RetentionPolicy.SOURCE)
                   @IntDef({NAVIGATION_MODE_STANDARD, NAVIGATION_MODE_LIST, NAVIGATION_MODE_TABS})
                   public @interface NavigationMode {}

                   // Declare the constants.
                   public static final int NAVIGATION_MODE_STANDARD = 0;
                   public static final int NAVIGATION_MODE_LIST = 1;
                   public static final int NAVIGATION_MODE_TABS = 2;

                   // Decorate the target methods with the annotation.
                   @NavigationMode
                   public abstract int getNavigationMode();

                   // Attach the annotation.
                   public abstract void setNavigationMode(@NavigationMode int mode);
               }

   When you build this code, a warning is generated if the ``mode`` parameter
   doesn't reference one of the defined constants (``NAVIGATION_MODE_STANDARD``,
   ``NAVIGATION_MODE_LIST``, or ``NAVIGATION_MODE_TABS``).

   Combine ``@IntDef`` and ``@IntRange`` to indicate that an integer can be
   either a given set of constants or a value within a range.

   .. rubric:: Enable combining constants with flags
      :name: typedef-flags

   If users can combine the allowed constants with a flag (such as ``|``, ``&``,
   ``^``, and so on), you can define an annotation with a ``flag`` attribute to
   check whether a parameter or return value references a valid pattern.

   The following example creates the ``DisplayOptions`` annotation with a list
   of valid ``DISPLAY_`` constants:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               import androidx.annotation.IntDef
               ...

               @IntDef(flag = true, value = [
                   DISPLAY_USE_LOGO,
                   DISPLAY_SHOW_HOME,
                   DISPLAY_HOME_AS_UP,
                   DISPLAY_SHOW_TITLE,
                   DISPLAY_SHOW_CUSTOM
               ])
               @Retention(AnnotationRetention.SOURCE)
               annotation class DisplayOptions
               ...

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               import androidx.annotation.IntDef;
               ...

               @IntDef(flag=true, value={
                       DISPLAY_USE_LOGO,
                       DISPLAY_SHOW_HOME,
                       DISPLAY_HOME_AS_UP,
                       DISPLAY_SHOW_TITLE,
                       DISPLAY_SHOW_CUSTOM
               })
               @Retention(RetentionPolicy.SOURCE)
               public @interface DisplayOptions {}

               ...

   When you build code with an annotation flag, a warning is generated if the
   decorated parameter or return value doesn't reference a valid pattern.

   .. rubric:: Keep annotation
      :name: keep

   The `@Keep <#/reference/androidx/annotation/Keep>`__ annotation ensures
   that an annotated class or method is not removed when the code is minified at
   build time. This annotation is typically added to methods and classes that
   are accessed through reflection to prevent the compiler from treating the
   code as unused.

   .. caution::

      **Caution:** The classes and methods that you annotate using ``@Keep``
      always appear in your app's APK, even if you never reference these classes
      and methods within your app's logic.

      To keep your app's size small, consider whether it's necessary to preserve
      each ``@Keep`` annotation in your app. If you use reflection to access an
      annotated class or method, use an
      `-if <https://www.guardsquare.com/en/products/proguard/manual/usage#if>`__
      conditional in your ProGuard rules, specifying the class that makes the
      reflection calls.

   For more information about how to minify your code and specify which code is
   not to be removed, see `Shrink, obfuscate, and optimize your app <#/studio/build/shrink-code>`__.

   .. rubric:: Code visibility annotations
      :name: visibility

   Use the following annotations to denote the visibility of specific portions
   of code, such as methods, classes, fields, or packages.

   .. rubric:: Make code visible for testing
      :name: visible

   The
   `@VisibleForTesting <#/reference/androidx/annotation/VisibleForTesting>`__
   annotation indicates that an annotated method is more visible than normally
   necessary to make the method testable. This annotation has an optional
   ``otherwise`` argument that lets you designate what the visibility of the
   method would be if not for the need to make it visible for testing. Lint uses
   the ``otherwise`` argument to enforce the intended visibility.

   In the following example, ``myMethod()`` is normally ``private``, but it is
   ``package-private`` for tests. With the ``VisibleForTesting.PRIVATE``
   designation, lint displays a message if this method is called from outside
   the context allowed by ``private`` access, such as from a different
   compilation unit.

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
               fun myMethod() {
                   ...
               }

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
               void myMethod() { ... }

   You can also specify
   ``@VisibleForTesting(otherwise = VisibleForTesting.NONE)`` to indicate that a
   method exists only for testing. This form is the same as using
   ``@RestrictTo(TESTS)``. They both perform the same lint check.

   .. rubric:: Restrict an API
      :name: restrict

   The `@RestrictTo <#/reference/androidx/annotation/RestrictTo>`__
   annotation indicates that access to the annotated API (package, class, or
   method) is limited, as follows:

   .. rubric:: Subclasses
      :name: subclasses

   Use the annotation form ``@RestrictTo(RestrictTo.Scope.SUBCLASSES)`` to
   restrict API access to subclasses only.

   Only classes that extend the annotated class can access this API. The Java
   ``protected`` modifier is not restrictive enough, because it allows access
   from unrelated classes within the same package. Also, there are cases when
   you want to leave a method ``public`` for future flexibility, because you can
   never make a previously ``protected`` and overridden method ``public``, but
   you want to provide a hint that the class is intended for usages within the
   class or from subclasses only.

   .. rubric:: Libraries
      :name: libraries

   Use the annotation form
   ``@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP_PREFIX)`` to restrict API access
   to your libraries only.

   Only your library code can access the annotated API. This lets you not only
   organize your code in whatever package hierarchy you want but also share the
   code among a group of related libraries. This option is already available to
   the Jetpack libraries that have a lot of implementation code that is not
   meant for external use, but that has to be ``public`` to share it across the
   various complementary Jetpack libraries.

   .. rubric:: Testing
      :name: testing

   Use the annotation form ``@RestrictTo(RestrictTo.Scope.TESTS)`` to prevent
   other developers from accessing your testing APIs.

   Only testing code can access the annotated API. This prevents other
   developers from using APIs for development that you intend for testing
   purposes only.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2024-05-03 UTC.

.. |image-indirect-permissions-warning_2-2_2x| image:: https://source.android.google.cn/static/studio/images/write/indirect-permissions-warning_2-2_2x.png

/Tools attributes reference
===========================

.. https://developer.android.google.cn/studio/write/tool-attributes?hl=en

.. container:: devsite-article-body clearfix

   Android Studio supports a variety of XML attributes in the ``tools``
   namespace that enable design-time features, such as which layout to show in a
   fragment, or compile-time behaviors, such as which shrinking mode to apply to
   your XML resources. When you build your app, the build tools remove these
   attributes so that there is no effect on your APK size or runtime behavior.

   To use these attributes, add the ``tools`` namespace to the root element of
   each XML file where you'd like to use them, as shown here:

   .. code:: prettyprint

      <RootTag xmlns:android="http://schemas.android.com/apk/res/android"
          xmlns:tools="http://schemas.android.com/tools" >

   .. rubric:: Error-handling attributes
      :name: error_handling_attributes

   The following attributes help suppress lint warning messages:

   .. rubric:: ``tools:ignore``
      :name: toolsignore

   **Intended for:** Any element

   **Used by:** `Lint <#/studio/write/lint#configuring-lint-checking-in-xml>`__

   This attribute accepts a comma-separated list of lint issue IDs that you'd
   like the tools to ignore on this element or any of its descendants.

   For example, you can tell the tools to ignore the ``MissingTranslation``
   error:

   .. code:: prettyprint

      <string name="show_all_apps" tools:ignore="MissingTranslation">All</string>

   .. rubric:: ``tools:targetApi``
      :name: toolstargetapi

   **Intended for**: Any element

   **Used by**: Lint

   This attribute works the same as the
   `@TargetApi <#/reference/android/annotation/TargetApi>`__ annotation in
   Java code. It lets you specify the API level (either as an integer or as a
   code name) that supports this element.

   This tells the tools that you believe this element and any children are used
   only on the specified API level or higher. This stops lint from warning you
   if that element or its attributes are not available on the API level you
   specify as your ``minSdkVersion``.

   For example, you might use this attribute because
   `GridLayout <#/reference/android/widget/GridLayout>`__ is only available
   on API level 14 and higher, but you know this layout is not used in your code
   for any lower versions:

   .. code:: prettyprint

      <GridLayout xmlns:android="http://schemas.android.com/apk/res/android"
          xmlns:tools="http://schemas.android.com/tools"
          tools:targetApi="14" >

   (However, note that we recommend that you use
   `GridLayout <#/reference/androidx/gridlayout/widget/GridLayout>`__ from
   the support library instead.)

   .. rubric:: ``tools:locale``
      :name: toolslocale

   **Intended for:** ``<resources>``

   **Used by:** Lint, Android Studio editor

   This tells the tools what the default language or locale is for the resources
   in the given ``<resources>`` element to avoid warnings from the spellchecker.
   The tool otherwise assumes the language is English.

   The value must be a valid `locale qualifier <#/guide/topics/resources/providing-resources#LocaleQualifier>`__.

   For example, you can add this to your default ``values/strings.xml`` file to
   indicate that the language used for the default strings is Spanish rather
   than English:

   .. code:: prettyprint

      <resources xmlns:tools="http://schemas.android.com/tools"
          tools:locale="es">

   .. rubric:: Design-time view attributes
      :name: design-time_view_attributes

   The following attributes define layout characteristics that are visible only
   in the Android Studio layout preview.

   .. rubric:: ``tools:`` instead of ``android:``
      :name: tools_instead_of_android

   **Intended for:** ``<View>``

   **Used by:** Android Studio layout editor

   You can insert sample data in your layout preview by using the ``tools:``
   prefix instead of ``android:`` with any ``<View>`` attribute from the Android
   framework. This is useful when the attribute's value isn't populated until
   runtime and you want to see the effect in the layout preview.

   For example, if the ``android:text`` attribute value is set at runtime, or
   you want to see the layout with a value different than the default, you can
   add ``tools:text`` to specify some text for the layout preview only.

   .. figure:: https://source.android.google.cn/static/studio/images/write/tools-attribute-text_2x.png
      :alt: The tools:text attribute sets Google Voice as the value for the
      layout preview
      :width: 714px

      **Figure 1.** The ``tools:text`` attribute sets "Google Voice" as the
      value for the layout preview.

   You can add both the ``android:`` namespace attribute, which is used at
   runtime, and the matching ``tools:`` attribute, which overrides the runtime
   attribute in the layout preview only.

   You can also use a ``tools:`` attribute to undo an attribute setting for the
   layout preview only. For example, if you have a ``FrameLayout`` with two
   children but you want to see only one child in the layout preview, you can
   set one of them to be invisible in the layout preview, as shown here:

   .. code:: prettyprint

      <Button
          android:id="@+id/button"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          android:text="First" />

      <Button
          android:id="@+id/button2"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          android:text="Second"
          tools:visibility="invisible"  />

   When using the `Layout Editor <#/studio/write/layout-editor>`__ in design
   view, the **Properties** window lets you edit some design-time view
   attributes. Each design-time attribute is indicated with a wrench icon |The
   Wrench icon| next to the attribute name to distinguish it from the real
   attribute of the same name.

   .. rubric:: ``tools:context``
      :name: toolscontext

   **Intended for:** Any root ``<View>``

   **Used by:** Lint, `Android Studio Layout Editor <#/studio/write/layout-editor#sample-data>`__

   This attribute declares which activity this layout is associated with by
   default. This enables features in the editor or layout preview that require
   knowledge of the activity, such as what the layout theme is in the preview
   and where to insert ``onClick`` handlers generated from a quickfix, as shown
   in figure 2.

   .. figure:: https://source.android.google.cn/static/studio/images/write/tools-attribute-context_2x.png
      :alt: Quickfix for the onClick attribute works only if you've set
      tools:context
      :width: 372px

      **Figure 2.** Quickfix for the ``onClick`` attribute works only if you've
      set ``tools:context``.

   You can specify the activity class name using the same dot prefix as in the
   manifest file (excluding the full package name).

   For example:

   .. code:: prettyprint

      <android.support.constraint.ConstraintLayout
          xmlns:android="http://schemas.android.com/apk/res/android"
          xmlns:tools="http://schemas.android.com/tools"
          tools:context=".MainActivity" >

   **Tip:**\  You can also select the theme for the layout preview from the
   `Layout Editor toolbar <#/studio/write/layout-editor#change-appearance>`__.
   .. rubric:: ``tools:itemCount``
      :name: toolsitemcount

   **Intended for:** ``<RecyclerView>``

   **Used by:** `Android Studio Layout Editor <#/studio/write/layout-editor#sample-data>`__

   For a given
   `RecyclerView <#/reference/androidx/recyclerview/widget/RecyclerView>`__,
   this attribute specifies the number of items the Layout Editor should render
   in the **Preview** window.

   For example:

   .. code:: prettyprint

      <androidx.recyclerview.widget.RecyclerView
          android:id="@+id/recyclerView"
          android:layout_width="match_parent"
          android:layout_height="match_parent"
          tools:itemCount="3"/>

   .. rubric:: ``tools:layout``
      :name: toolslayout

   **Intended for:** ``<fragment>``

   **Used by:** Android Studio Layout Editor

   This attribute declares which layout you want the layout preview to draw
   inside the fragment because the layout preview can't execute the activity
   code that normally applies the layout.

   For example:

   .. code:: prettyprint

      <fragment android:name="com.example.main.ItemListFragment"
          tools:layout="@layout/list_content" />

   .. rubric:: ``tools:listitem``, ``tools:listheader``, ``tools:listfooter``
      :name: toolslistitem_tiilslistheader_toolslistfooter

   **Intended for:** ``<AdapterView>`` (and subclasses like ``<ListView>``)

   **Used by:** Android Studio Layout Editor

   These attributes specify which layout to show in the layout preview for a
   list's items, header, and footer. Any data fields in the layout are filled
   with numeric contents, such as "Item 1," so that the list items are not
   repetitive.

   For example:

   .. code:: prettyprint

      <ListView xmlns:android="http://schemas.android.com/apk/res/android"
          xmlns:tools="http://schemas.android.com/tools"
          android:id="@android:id/list"
          android:layout_width="match_parent"
          android:layout_height="match_parent"
          tools:listitem="@layout/sample_list_item"
          tools:listheader="@layout/sample_list_header"
          tools:listfooter="@layout/sample_list_footer" />

   .. rubric:: ``tools:showIn``
      :name: toolsshownin

   **Intended for:** Any root ``<View>`` in a layout that's referred to by an
   ``<include>``

   **Used by:** Android Studio Layout Editor

   This attribute lets you point to a layout that uses this layout using
   `<include> <#/training/improving-layouts/reusing-layouts>`__, so you can
   preview and edit this file as it appears while embedded in its parent layout.

   For example:

   .. code:: prettyprint

      <TextView xmlns:android="http://schemas.android.com/apk/res/android"
          xmlns:tools="http://schemas.android.com/tools"
          android:text="@string/hello_world"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          tools:showIn="@layout/activity_main" />

   Now the layout preview shows this ``TextView`` layout as it appears inside
   the ``activity_main`` layout.

   .. rubric:: ``tools:menu``
      :name: toolsmenu

   **Intended for:** Any root ``<View>``

   **Used by:** Android Studio Layout Editor

   This attribute specifies which menu the layout preview shows in the `app bar <#/training/appbar>`__. The value is one or more menu IDs, separated by
   commas, without ``@menu/`` or any such ID prefix and without the ``.xml``
   extension.

   For example:

   .. code:: prettyprint

      <?xml version="1.0" encoding="utf-8"?>
      <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
          xmlns:tools="http://schemas.android.com/tools"
          android:orientation="vertical"
          android:layout_width="match_parent"
          android:layout_height="match_parent"
          tools:menu="menu1,menu2" />

   .. rubric:: ``tools:minValue``, ``tools:maxValue``
      :name: toolsminvalue_toolsmaxvalue

   **Intended for:** ``<NumberPicker>``

   **Used by:** Android Studio Layout Editor

   These attributes set minimum and maximum values for a
   `NumberPicker <#/reference/android/widget/NumberPicker>`__ view.

   For example:

   .. code:: prettyprint

      <NumberPicker xmlns:android="http://schemas.android.com/apk/res/android"
          xmlns:tools="http://schemas.android.com/tools"
          android:id="@+id/numberPicker"
          android:layout_width="match_parent"
          android:layout_height="wrap_content"
          tools:minValue="0"
          tools:maxValue="10" />

   .. rubric:: ``tools:openDrawer``
      :name: toolsopendrawer

   **Intended for:** ``<DrawerLayout>``

   **Used by:** Android Studio Layout Editor

   This attribute lets you open a
   `DrawerLayout <#/reference/androidx/drawerlayout/widget/DrawerLayout>`__
   in the preview.

   You can also modify how the Layout Editor renders the layout by passing one
   of the following values:

   **Table 1.** Values to modify how the Layout Editor renders a
   ``DrawerLayout``

   .. list-table::

      - 

         - Constant
         - Value
         - Description
      - 

         - ``end``
         - 800005
         - Push object to the end of its container, not changing its size.
      - 

         - ``left``
         - 3
         - Push object to the left of its container, not changing its size.
      - 

         - ``right``
         - 5
         - Push object to the right of its container, not changing its size.
      - 

         - ``start``
         - 800003
         - Push object to the beginning of its container, not changing its size.

   For example:

   .. code:: prettyprint

      <androidx.drawerlayout.widget.DrawerLayout
          xmlns:android="http://schemas.android.com/apk/res/android"
          xmlns:tools="http://schemas.android.com/tools"
          android:id="@+id/drawer_layout"
          android:layout_width="match_parent"
          android:layout_height="match_parent"
          tools:openDrawer="start" />

   .. rubric:: ``"@tools:sample/*"`` resources
      :name: toolssample_resources

   **Intended for:** Any view that supports UI text or images

   **Used by:** `Android Studio Layout Editor <#/studio/write/layout-editor#sample-data>`__

   This attribute lets you inject placeholder data or images into your view. For
   example, to test how your layout behaves with text before you have finalized
   UI text for your app, you can use placeholder text as follows:

   .. code:: prettyprint

      <TextView xmlns:android="http://schemas.android.com/apk/res/android"
          xmlns:tools="http://schemas.android.com/tools"
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          tools:text="@tools:sample/lorem" />

   The following table describes the types of placeholder data you can inject
   into your layouts:

   **Table 2.** Placeholder data for layouts

   .. list-table::
      :header-rows: 1

      - 

         - Attribute value
         - Description of placeholder data
      - 

         - ``@tools:sample/full_names``
         - Full names randomly generated from the combination of
            ``@tools:sample/first_names`` and ``@tools:sample/last_names``
      - 

         - ``@tools:sample/first_names``
         - Common first names
      - 

         - ``@tools:sample/last_names``
         - Common last names
      - 

         - ``@tools:sample/cities``
         - Names of cities from around the world
      - 

         - ``@tools:sample/us_zipcodes``
         - Randomly generated US ZIP codes
      - 

         - ``@tools:sample/us_phones``
         - Randomly generated phone numbers with the following format:
            ``(800) 555-xxxx``
      - 

         - ``@tools:sample/lorem``
         - Placeholder text in Latin
      - 

         - ``@tools:sample/date/day_of_week``
         - Randomized dates and times for the specified format
      - 

         - ``@tools:sample/date/ddmmyy``
         - 
      - 

         - ``@tools:sample/date/mmddyy``
         - 
      - 

         - ``@tools:sample/date/hhmm``
         - 
      - 

         - ``@tools:sample/date/hhmmss``
         - 
      - 

         - ``@tools:sample/avatars``
         - Vector drawables that you can use as profile avatars
      - 

         - ``@tools:sample/backgrounds/scenic``
         - Images that you can use as backgrounds

   .. rubric:: Resource shrinking attributes
      :name: resource_shrinking_attributes

   The following attributes let you enable strict reference checks and declare
   whether to keep or discard certain resources when using `resource shrinking <#/studio/build/shrink-code#shrink-resources>`__.

   To enable resource shrinking, set the ``shrinkResources`` property to
   ``true`` in your ``build.gradle`` file, alongside ``minifyEnabled`` for code
   shrinking.

   For example:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Groovy
               :name: groovy

            .. code:: prettyprint

               android {
                   ...
                   buildTypes {
                       release {
                           shrinkResources true
                           minifyEnabled true
                           proguardFiles getDefaultProguardFile('proguard-android.txt'),
                                   'proguard-rules.pro'
                       }
                   }
               }

         .. container:: section

            .. rubric:: Kotlin
               :name: kts

            .. code:: prettyprint

               android {
                   ...
                   buildTypes {
                       getByName("release") {
                           isShrinkResources = true
                           isMinifyEnabled = true
                           proguardFiles(
                               getDefaultProguardFile("proguard-android.txt"),
                               "proguard-rules.pro"
                           )
                       }
                   }
               }

   .. rubric:: ``tools:shrinkMode``
      :name: toolsshrinkmode

   **Intended for:** ``<resources>``

   **Used by:** Build tools with resource shrinking

   This attribute lets you specify whether the build tools should use the
   following:

   -  **Safe mode:** Keep all resources that are explicitly cited and that
      *might* be referenced dynamically with a call to
      `Resources.getIdentifier() <#/reference/android/content/res/Resources#getIdentifier(java.lang.String,%20java.lang.String,%20java.lang.String)>`__.
   -  **Strict mode:** Keep only the resources that are explicitly cited in code
      or in other resources.

   The default is to use safe mode (``shrinkMode="safe"``). To instead use
   strict mode, add ``shrinkMode="strict"`` to the ``<resources>`` tag as shown
   here:

   .. code:: prettyprint

      <?xml version="1.0" encoding="utf-8"?>
      <resources xmlns:tools="http://schemas.android.com/tools"
          tools:shrinkMode="strict" />

   When you enable strict mode, you might need to use
   `tools:keep <#toolskeep>`__ to keep resources that were removed but that
   you actually want, and use `tools:discard <#toolsdiscard>`__ to
   explicitly remove even more resources.

   For more information, see `Shrink your resources <#/studio/build/shrink-code#shrink-resources>`__.

   .. rubric:: ``tools:keep``
      :name: toolskeep

   **Intended for:** ``<resources>``

   **Used by:** Build tools with resource shrinking

   When using resource shrinking to remove unused resources, this attribute lets
   you specify resources to keep, typically because they are referenced in an
   indirect way at runtime, such as by passing a dynamically generated resource
   name to
   `Resources.getIdentifier() <#/reference/android/content/res/Resources#getIdentifier(java.lang.String,%20java.lang.String,%20java.lang.String)>`__.

   To use, create an XML file in your resources directory (for example,
   ``res/raw/keep.xml``) with a ``<resources>`` tag and specify each resource to
   keep in the ``tools:keep`` attribute as a comma-separated list. You can use
   the asterisk character as a wild card.

   For example:

   .. code:: prettyprint

      <?xml version="1.0" encoding="utf-8"?>
      <resources xmlns:tools="http://schemas.android.com/tools"
          tools:keep="@layout/used_1,@layout/used_2,@layout/*_3" />

   For more information, see `Shrink your resources <#/studio/build/shrink-code#shrink-resources>`__.

   .. rubric:: ``tools:discard``
      :name: toolsdiscard

   **Intended for:** ``<resources>``

   **Used by:** Build tools with resource shrinking

   When using resource shrinking to remove unused resources, this attribute lets
   you specify resources you want to manually discard, typically because the
   resource is referenced but in a way that does not affect your app or because
   the Gradle plugin has incorrectly deduced that the resource is referenced.

   To use, create an XML file in your resources directory (for example,
   ``res/raw/keep.xml``) with a ``<resources>`` tag and specify each resource to
   discard in the ``tools:discard`` attribute as a comma-separated list. You can
   use the asterisk character as a wild card.

   For example:

   .. code:: prettyprint

      <?xml version="1.0" encoding="utf-8"?>
      <resources xmlns:tools="http://schemas.android.com/tools"
          tools:discard="@layout/unused_1" />

   For more information, see `Shrink your resources <#/studio/build/shrink-code#shrink-resources>`__.

Content and code samples on this page are subject to the licenses described in
the `Content License <#/license>`__. Java and OpenJDK are trademarks or
registered trademarks of Oracle and/or its affiliates.

Last updated 2024-04-17 UTC.

.. |The Wrench icon| image:: https://source.android.google.cn/static/studio/images/buttons/layout-tools-attr.png
   :class: inline-icon


/Topic: 4. 🟢 Run and debug your app
======================================

/Overview: Run and debug your app
================================

.. https://developer.android.google.cn/studio/run?hl=en
.. container:: devsite-article-body clearfix

   To see how your app looks and behaves on a device, you need to build and run
   it. Android Studio sets up new projects so that you can deploy your app to a
   virtual or a physical device with just a few clicks.

   This overview focuses on how to use Android Studio to build and run your app
   for testing and debugging. For information on how to use Android Studio to
   build your app so that it can be released to users, see `Build your app for release to users <#/studio/run/build-for-release>`__. For more detailed
   information about managing and customizing your build with or without Android
   Studio, see `Configure your build <#/studio/build>`__.

   .. rubric:: Basic build and run
      :name: basic-build-run

   To build and run your app, follow these steps:

   #. In the toolbar, select your app from the run configurations menu.

   #. In the target device menu, select the device that you want to run your app
      on.

      |Target device menu.|

      If you don't have any devices configured, you need to either `create an Android Virtual Device <#/studio/run/managing-avds#createavd>`__ to use the
      `Android Emulator <#/studio/run/emulator>`__ or `connect a physical device <#/studio/run/device#connect>`__.

   #. Click **Run** |image-toolbar-run|.

   Android Studio warns you if you attempt to launch your project to a device
   that has an error or a warning associated with it. Iconography and stylistic
   changes differentiate between *errors* (device selections that result in a
   broken configuration) and *warnings* (device selections that might result in
   unexpected behavior but are still runnable).

   .. rubric:: Monitor the build process
      :name: gradle-console

   To view details about the build process, select **View > Tool Windows >
   Build** or click **Build** |image-toolbar-build| in the tool window bar. The **Build**
   tool window displays the tasks that Gradle executes to build your app, as
   shown in figure 1.

   .. figure:: https://developer.android.google.cn/static/studio/images/run/window-build.png

      **Figure 1.** The **Build** tool window in Android Studio.

   #. **Sync tab:** Displays tasks that Gradle executes to sync with your
      project files. Similar to the **Build Output** tab, if you encounter a
      sync error, select elements in the tree to get more information about the
      error. Also displays a summary of `download impact <#/build/build-analyzer#download-impact>`__ to determine whether
      dependency downloads are negatively affecting your build.
   #. **Build Output tab:** Displays the tasks that Gradle executes as a tree,
      where each node represents either a build phase or a group of task
      dependencies. If you receive build-time or compile-time errors, inspect
      the tree and select an element to read the error output, as shown in
      figure 2.

      .. figure:: https://developer.android.google.cn/static/studio/images/run/build-output-window-error.png

         **Figure 2.** Inspect the **Build Output** tab for error messages.

   #. **Build Analyzer tab:** Provides build performance analysis information
      about your build. See `Troubleshoot build performance with Build Analyzer <#/studio/build/build-analyzer>`__ for more information.
   #. **Restart:** Performs the last build action again. If you last ran **Build
      > Make Selected Module**, it'll build the current module. If you last ran
      **Build > Make Project**, it'll generate intermediate build files for all
      modules in your project.
   #. **Filters:** Filters out warnings, tasks, or both that completed
      successfully. This can make it easier to find issues in the output.

   If your build variants use product flavors, Gradle also invokes tasks to
   build those product flavors. To view the list of all available build tasks,
   click **View > Tool Windows > Gradle** or click **Gradle** |image-toolbar-gradle| in the
   tool window bar.

   If an error occurs during the build process, Gradle may recommend
   command-line options to help you resolve the issue, such as ``--stacktrace``
   or ``--debug``. To use command-line options with your build process:

   #. Open the **Settings** or **Preferences** dialog:

      -  On Windows or Linux, select **File** > **Settings** from the menu bar.
      -  On macOS, select **Android Studio** > **Preferences** from the menu
         bar.

   #. Navigate to **Build, Execution, Deployment** > **Compiler**.
   #. In the text field next to **Command-line Options**, enter your
      command-line options.
   #. Click **OK** to save and exit.

   Gradle applies these command-line options the next time you try building your
   app.

   .. rubric:: Advanced build and run features
      :name: advanced-build-run

   The default way to build and run your app in Android Studio should be
   sufficient to test a simple app. However, you can use these build and run
   features for more advanced use cases:

   -  To deploy your app in debug mode, click **Debug** |image-toolbar-debug|. Running your
      app in debug mode lets you set breakpoints in your code, examine variables
      and evaluate expressions at run-time, and run debugging tools. To learn
      more, see `Debug your app <#/studio/debug>`__.

   -  If you have a larger, more complex app, use Apply Changes instead of
      clicking **Run** |image-toolbar-run|. This saves time, because you avoid restarting
      your app every time you want to deploy a change. For more information
      about Apply Changes, see the `Deploy incrementally with Apply Changes <#apply-changes>`__ section.

   -  If you're using Jetpack Compose, Live Edit is an experimental feature that
      lets you update composables in real time without re-clicking **Run**
      |image-toolbar-run|. This lets you focus on writing UI code with minimal
      interruption. For more information, see the `Live Edit (experimental) <#live-edit>`__ section.

   -  If you have an app with multiple build variants or versions, you can
      choose which build variant to deploy by using the **Build Variants** tool
      window. For more information about running a specific build variant, see
      the `Change the build variant <#/studio/run#changing-variant>`__ section.

   -  To fine-tune app installation, launch, and test options, you can change
      the run/debug configuration. For more information about creating custom
      run/debug configurations, see the `Create run/debug configurations <#/studio/run#run-configuration>`__ section.

   -  We recommend that you use Android Studio for your development needs, but
      you can also deploy your app to a virtual or physical device from the
      command line. For more information, see `Build your app from the command line <#/studio/build/building-cmdline>`__.

   .. rubric:: Deploy incrementally with Apply Changes
      :name: apply-changes

   In Android Studio 3.5 and higher, Apply Changes lets you push code and
   resource changes to your running app without restarting your app—and, in some
   cases, without restarting the current activity. This flexibility helps you
   control how much of your app is restarted when you want to deploy and test
   small, incremental changes while preserving your device's current state.

   Apply Changes uses `capabilities in the Android JVMTI implementation <https://docs.oracle.com/javase/8/docs/platform/jvmti/jvmti.html#bci>`__
   that are supported on devices running Android 8.0 (API level 26) or higher.
   To learn more about how Apply Changes works, see `Android Studio Project Marble: Apply Changes <https://medium.com/androiddevelopers/android-studio-project-marble-apply-changes-e3048662e8cd>`__.

   .. rubric:: Requirements
      :name: apply-changes-requirements

   Apply Changes actions are only available when you meet the following
   conditions:

   -  You build the APK of your app using a debug build variant.
   -  You deploy your app to a target device or emulator that runs Android 8.0
      (API level 26) or higher.

   .. rubric:: Use Apply Changes
      :name: use-apply-changes

   Use the following options when you want to deploy your changes to a
   compatible device:

   **Apply Changes and Restart Activity** |Apply Changes and Restart Activity
   icon|: Attempts to apply both your resource and code changes by restarting
   your activity but without restarting your app. Generally, you can use this
   option when you've modified code in the body of a method or modified an
   existing resource.

   You can also perform this action by pressing Control+Alt+F10
   (Control+Command+Shift+R on macOS).

   **Apply Code Changes** |Apply Code Changes icon| : Attempts to apply only
   your code changes without restarting anything. Generally, you can use this
   option when you've modified code in the body of a method but you haven't
   modified any resources. If you've modified both code and resources, use
   **Apply Changes and Restart Activity** instead.

   You can also perform this action by pressing Control+F10 (Control+Command+R
   on macOS).

   **Run** |image-toolbar-run|: Deploys all changes and restarts the app. Use this option
   when the changes you've made can't be applied using either of the Apply
   Changes options. To learn more about the types of changes that require an app
   restart, see the `Limitations of Apply Changes <#apply-changes-limitations>`__ section.

   .. rubric:: Enable run fallback for Apply Changes
      :name: apply-changes-run-fallback

   When you click either **Apply Changes and Restart Activity** or **Apply Code
   Changes**, Android Studio builds a new APK and determines whether the changes
   can be applied. If the changes can't be applied and would cause Apply Changes
   to fail, Android Studio prompts you to **Run** |Run icon| your app again
   instead.

   If you don't want to be prompted every time this occurs, you can configure
   Android Studio to automatically rerun your app when changes can't be applied.
   To enable this behavior, follow these steps:

   #. Open the **Settings** or **Preferences** dialog:

      -  On Windows or Linux, select **File > Settings** from the menu.
      -  On macOS, select **Android Studio > Preferences** from the menu.

   #. Navigate to **Build, Execution, Deployment > Deployment**.

   #. Select the checkboxes to enable automatic run fallback for either or both
      of the Apply Changes actions.

   #. Click **OK**.

   **Note:**\  Some types of changes don't cause Apply Changes to fail but still
   require you to restart your app manually before you can see those changes.
   For example, if you make changes to an activity's
   `onCreate() <#/reference/android/app/Activity#onCreate(android.os.Bundle)>`__
   method, those changes only take effect after the activity is relaunched, so
   you must restart your app to see those changes.

   .. rubric:: Platform-dependent changes
      :name: ac-platform-changes

   Some features of Apply Changes depend on specific versions of the Android
   platform. To apply these kinds of changes, your app must be deployed to a
   device running that version of Android (or higher). For example, adding a
   method requires Android 11 or higher.

   .. rubric:: Limitations of Apply Changes
      :name: apply-changes-limitations

   Apply Changes is designed to speed up the app deployment process. However,
   there are some limitations on when it can be used.

   .. rubric:: Code changes that require app restart
      :name: apply-changes-restart-conditions

   Some code and resource changes can't be applied until the app is restarted,
   including the following:

   -  Adding or removing a field
   -  Removing a method
   -  Changing method signatures
   -  Changing modifiers of methods or classes
   -  Changing class inheritance
   -  Changing values in enums
   -  Adding or removing a resource
   -  Changing the app manifest
   -  Changing native libraries (SO files)

   .. rubric:: Libraries and plugins
      :name: apply-changes-libraries-plugins

   Some libraries and plugins automatically make changes to your app's manifest
   files or to resources that are referenced in the manifest. These automatic
   updates can interfere with Apply Changes in the following ways:

   -  If a library or plugin makes changes to your app's manifest, you can't use
      Apply Changes. You must restart your app to see your changes.
   -  If a library or plugin makes changes to your app's resource files, you
      can't use **Apply Code Changes** |Apply Code Changes icon|. You must use
      **Apply Changes and Restart Activity** |Apply Changes and Restart Activity
      icon| (or restart your app) to see your changes.

   To avoid these limitations, disable all automatic updates for your debug
   build variants.

   For example, `Firebase Crashlytics <https://firebase.google.cn/products/crashlytics>`__ updates app
   resources with a unique build ID during every build, which prevents you from
   using **Apply Code Changes** |Apply Code Changes icon| and requires you to
   restart your app's activity to see your changes. Disable this behavior to use
   **Apply Code Changes** alongside Crashlytics with your debug builds.

   .. rubric:: Code that directly references content in an installed APK
      :name: apply-changes-APK-code-references

   If your code directly references content from your app's APK that's installed
   on the device, that code can cause crashes or misbehave after clicking
   **Apply Code Changes** |Apply Code Changes icon|. This behavior occurs
   because when you click **Apply Code Changes** the underlying APK on the
   device is replaced during installation. In these cases, you can click **Apply
   Changes and Restart Activity** |Apply Changes and Restart Activity icon| or
   **Run** |Run icon| instead.

   If you encounter any other issues while using Apply Changes, `file a bug <https://issuetracker.google.com/issues/new?component=192708>`__.

   .. rubric:: Live Edit
      :name: live-edit

   Live Edit is an experimental feature in the Android Studio that lets you
   update composables in emulators and physical devices in real time. This
   functionality minimizes context switches between writing and building your
   app, letting you focus on writing code longer without interruption.

   `Learn more about Live Edit <#/jetpack/compose/tooling/iterative-development#live-edit>`__

   .. rubric:: Change the build variant
      :name: changing-variant

   By default, Android Studio builds the debug version of your app, which is
   intended for use only during development, when you click **Run** |UI button|.

   To change the build variant Android Studio uses, do one of the following:

   -  Select **Build** > **Select Build Variant** in the menu.
   -  Select **View** > **Tool Windows** > **Build Variants** in the menu.
   -  Click the **Build Variants** tab on the tool window bar.

   For projects without native/C++ code, the **Build Variants** panel has two
   columns: **Module** and **Active Build Variant**. The **Active Build
   Variant** value for the module determines which build variant the IDE deploys
   to your connected device and is visible in the editor.

   |image-build-variants|

   **Figure 9.** The **Build Variants** panel has two columns for projects that
   don't have native/C++ code.

   To switch between variants, click the **Active Build Variant** cell for a
   module and choose the desired variant from the list.

   For projects with native/C++ code, the **Build Variants** panel has three
   columns:

   -  **Module**
   -  **Active Build Variant**
   -  **Active ABI**

   The **Active Build Variant** value for the module determines the build
   variant that the IDE deploys to your device and is visible in the editor. For
   native modules, the **Active ABI** value determines the
   `ABI <#/ndk/guides/abis>`__ that the editor uses, but doesn't impact what is
   deployed.

   |image-build-variants-ndk|

   **Figure 10.** The **Build Variants** panel adds the **Active ABI** column
   for projects with native/C++ code.

   To change the build variant or ABI, click the cell for the **Active Build
   Variant** or **Active ABI** column and choose the desired variant or ABI from
   the list. After you change the selection, the IDE syncs your project
   automatically. Changing either column for an app or library module applies
   the change to all dependent rows.

   By default, new projects are set up with two build variants: a debug variant
   and release variant. You need to build the release variant to `prepare your app for public release <#/studio/publish/preparing>`__. To define other
   variations of your app with different features or device requirements, you
   can `define additional build variants <#/studio/build/build-variants>`__.

   .. rubric:: Conflicts in Android Studio Build Variants dialog
      :name: conflicts_in_android_studio_build_variants_dialog

   In the Android Studio **Build Variants** dialog, you might see error messages
   indicating conflicts between build variants, such as the following:

   |Build Variant window displaying variant conflict errors|

   This error doesn't indicate a build issue with Gradle. It indicates that the
   Android Studio IDE can't resolve symbols between the variants of the selected
   modules.

   For example, if you have a module ``M1`` that depends on variant ``v1`` of
   module ``M2``, but ``M2`` has variant ``v2`` selected in the IDE, you have
   unresolved symbols in the IDE. Suppose ``M1`` depends on a class that is only
   available in ``v1``; when ``v2`` is selected, that class is not known by the
   IDE. Therefore it fails to resolve the class name and shows errors in the
   ``M1`` module's code.

   These error messages appear because the IDE can't load code for multiple
   variants simultaneously. In terms of your app’s build, however, the variant
   selected in this dialog has no effect, because Gradle builds your app with
   the source code specified in your Gradle build recipes, not based on what’s
   currently loaded in the IDE.

   .. rubric:: Change the run/debug configuration
      :name: run-configuration

   When you run your app for the first time, Android Studio uses a default run
   configuration. The run configuration specifies whether to deploy your app
   from an APK or an `Android App Bundle <#/guide/app-bundle>`__ as well as the
   module to run, package to deploy, activity to start, target device, emulator
   settings, Logcat options, and more.

   The default run/debug configuration builds an APK, launches the default
   project activity, and uses the **Select Deployment Target** dialog for target
   device selection. If the default settings don't suit your project or module,
   you can customize the run/debug configuration or create a new one at the
   project, default, and module levels.

   To edit a run/debug configuration, select **Run > Edit Configurations**. For
   more information, see `Create and edit run/debug configurations <#/studio/run/rundebugconfig>`__.

Last updated 2023-07-25 UTC.

.. |Target device menu.| image:: https://developer.android.google.cn/static/studio/images/run/deploy-run-app-new-ui.png
.. |image-toolbar-run| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-run.png
   :class: inline-icon
.. |image-toolbar-build| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-build.png
   :class: inline-icon
.. |image-toolbar-gradle| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-gradle.png
   :class: inline-icon
.. |image-toolbar-debug| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-debug.png
   :class: inline-icon
.. |image-toolbar-run| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-run.png
   :class: inline-icon
.. |image-toolbar-run| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-run.png
   :class: inline-icon
.. |Apply-toolbar-apply-changes and Restart Activity icon| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-apply-changes.png
   :class: inline-icon
.. |Apply-toolbar-apply-code-changes Changes icon| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-apply-code-changes.png
   :class: inline-icon
.. |image-toolbar-run| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-run.png
   :class: inline-icon
.. |Run i-toolbar-run| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-run.png
   :class: inline-icon
.. |UI bu-toolbar-run-darkmode| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-run-darkmode.png
.. |image-build-variants| image:: https://developer.android.google.cn/static/studio/images/run/build-variants.png
   :width: 420px
.. |image-build-variants-ndk| image:: https://developer.android.google.cn/static/studio/images/run/build-variants-ndk.png
   :width: 631px
.. |Build Variant window displaying variant conflict errors| image:: https://developer.android.google.cn/static/studio/images/run/build-variant-conflict.png


/Create and manage virtual devices
==================================

.. https://developer.android.google.cn/studio/run/managing-avds?hl=en

.. container:: devsite-article-body clearfix

   An Android Virtual Device (AVD) is a configuration that defines the
   characteristics of an Android phone, tablet, Wear OS, Android TV, or
   Automotive OS device that you want to simulate in the `Android Emulator <#/studio/run/emulator>`__. The Device Manager is a tool you can
   launch from Android Studio that helps you create and manage AVDs.

   To open the new **Device Manager**, do one of the following:

   -  From the Android Studio Welcome screen, select **More Actions > Virtual
      Device Manager**.

   |Opening the Device Manager from the Welcome screen|

   -  After opening a project, select **View > Tool Windows > Device Manager**
      from the main menu bar, and then click **Create device**.

   |New Device Manager window|

   If you want to use virtual devices to run your automated instrumented tests
   in a scalable and self-managed way, consider using `Gradle Managed Devices <#/studio/test/gradle-managed-devices>`__.

   .. rubric:: About AVDs
      :name: about

   An AVD contains a hardware profile, system image, storage area, skin, and
   other properties.

   We recommend that you create an AVD for each system image that your app could
   potentially support based on the
   `<uses-sdk> <#/guide/topics/manifest/uses-sdk-element>`__ setting in your
   manifest.

   .. rubric:: Hardware profile
      :name: hardware-profile

   The hardware profile defines the characteristics of a device as shipped from
   the factory. The Device Manager comes pre-loaded with certain hardware
   profiles, such as Pixel devices, and you can define or customize the hardware
   profiles as needed.

   |The Select Hardware dialog|

   A device definition labeled with the Google Play logo in the **Play Store**
   column includes both the Google Play Store app and access to Google Play
   services, including a **Google Play** tab in the **Extended controls** dialog
   that provides a convenient button for updating Google Play services on the
   device.

   Devices with this logo *and* a device type of "Phone" are also
   `CTS <https://source.android.google.cn/compatibility/cts/>`__ compliant and
   might use system images that include the Play Store app.

   .. rubric:: System images
      :name: system-image

   A system image labeled with **Google APIs** includes access to `Google Play services <https://developers.google.cn/android/guides/overview>`__.

   |The System Image dialog|
   The **Recommended** tab lists recommended system images. The other tabs
   include a more complete list. The right pane describes the selected system
   image.

   If you see a download icon next to a system image, that image isn't currently
   installed on your development machine. Click the icon to download the system
   image. You must be connected to the internet to download system images.

   The API level of the target device is important, because your app doesn't run
   on a system image with an API level that's lower than the one required by
   your app, as specified in the
   `minSdk <#/reference/tools/gradle-api/8.4/com/android/build/api/dsl/BaseFlavor#minSdk()>`__
   attribute in the app manifest file. For more information about the
   relationship between system API level and ``minSdk``, see `Version your app <#/studio/publish/versioning>`__.

   If your app declares a
   `<uses-library> <#/guide/topics/manifest/uses-library-element>`__ element
   in the manifest file, the app requires a system image that includes that
   external library. To run your app on an emulator, create an AVD that includes
   the required library. To do so, you might need to use an add-on component for
   the AVD platform; for example, the Google APIs add-on contains the Google
   Maps library.

   To ensure app security and a consistent experience with physical devices,
   system images with the Google Play Store included are signed with a release
   key, which means that you can't get elevated privileges (root) with these
   images.

   If you require elevated privileges (root) to aid with app troubleshooting,
   you can use the Android Open Source Project (AOSP) system images that don't
   include Google apps or services. Then you can use the ``adb root`` and
   ``adb unroot`` commands to switch between normal and elevated privileges:

   .. code:: none

        % adb shell
        emu64a:/ $
        emu64a:/ $ exit
        % adb root
        restarting adbd as root
        % adb shell
        emu64a:/ #
        emu64a:/ # exit
        % adb unroot
        restarting adbd as non root
        % adb shell
        emu64a:/ $
        emu64a:/ $ exit
        %
        

   **Note:**\  When running with normal privilege level, the shell prompt ends
   with a ``$`` character, but when running with elevated (root) privileges, the
   shell prompt ends with a ``#`` character.
   .. rubric:: Storage area
      :name: storage

   The AVD has a dedicated storage area on your development machine. It stores
   the device user data, such as installed apps and settings, as well as an
   emulated SD card. If needed, you can use the Device Manager to wipe user data
   so the device has the same data as if it were new.

   .. rubric:: Skin
      :name: emulator-skin

   An emulator skin specifies the appearance of a device. The Device Manager
   provides some predefined skins. You can also define your own or use skins
   provided by third parties.

   .. rubric:: AVD and app features
      :name: app-features

   Make sure your AVD definition includes the device features your app depends
   on. See the sections about `hardware profile properties <#hpproperties>`__
   and `AVD properties <#avdproperties>`__ for lists of features you can define
   in your AVDs.

   .. rubric:: Create an AVD
      :name: createavd

   To create a new AVD:

   #. Open the Device Manager.

   #. Click **Create Device**.

      The **Select Hardware** window appears.

      |image-new-select-hardware-window|

      Notice that only some hardware profiles include **Play Store**. These
      profiles are fully
      `CTS <https://source.android.google.cn/compatibility/cts/>`__ compliant
      and might use system images that include the Play Store app.

   #. Select a hardware profile, then click **Next**.

      If you don't see the hardware profile you want, you can
      `create <#createhp>`__ or `import <#importexporthp>`__ a hardware profile,
      as described in other sections on this page.

      The **System Image** window appears.

      |image-new-system-image|

   #. Select the system image for a particular API level, and then click
      **Next**.

   #. Change the `AVD properties <#avdproperties>`__ as needed, and then click
      **Finish**.

      Click **Show Advanced Settings** to show more settings, such as the skin.

   To create an AVD starting with a copy:

   #. From the **Virtual** tab of the Device Manager, click **Menu** |image-studio-advmgr-actions-overflow-icon|
      and select **Duplicate**.

      The `Verify Configuration <#verifyconfigpage>`__ window appears.

   #. Click **Previous** if you need to make changes on the `System Image <#systemimagepage>`__ or `Select Hardware <#selecthardwarepage>`__
      windows.

   #. Make any changes you need, and then click **Finish**.

      The AVD appears in the **Virtual** tab of the Device Manager.

   .. rubric:: Create a hardware profile
      :name: createhp

   The Device Manager provides predefined hardware profiles for common devices
   so you can easily add them to your AVD definitions. If you need to define a
   different device, you can create a new hardware profile.

   You can define a new hardware profile from the beginning or copy a hardware
   profile as a starting point. The preloaded hardware profiles aren't editable.

   To create a new hardware profile from the beginning:

   #. In the `Select Hardware <#selecthardwarepage>`__ window, click **New
      Hardware Profile**.

   #. In the **Configure Hardware Profile** window, change the `hardware profile properties <#hpproperties>`__ as needed.

      |The Configure hardware profile dialog|

   #. Click **Finish**.

      Your new hardware profile appears in the **Select Hardware** window. You
      can `create an AVD <#createavd>`__ that uses the hardware profile by
      clicking **Next** or click **Cancel** to return to the **Virtual** tab or
      target device menu.

   To create a hardware profile using a copy as a starting point:

   #. In the **Select Hardware** window, select a hardware profile and click
      **Clone Device** or right-click a hardware profile and select **Clone**.
   #. In the **Configure Hardware Profile** window, change the `hardware profile properties <#hpproperties>`__ as needed.
   #. Click **Finish**.

   .. rubric:: Edit existing AVDs
      :name: workingavd

   You can perform the following operations on an AVD from the Device Manager's
   **Virtual** tab:

   -  To edit an AVD, click **Edit this AVD** |image-avd-edit| and make your changes.
   -  To delete an AVD, click **Menu** |image-studio-advmgr-actions-overflow-icon| and select **Delete**.
   -  To show the associated AVD INI and IMG files on disk, click **Menu**
      |image-studio-advmgr-actions-overflow-icon| and select **Show on Disk**.
   -  To view AVD configuration details that you can include in bug reports to
      the Android Studio team, click **Menu** |image-studio-advmgr-actions-overflow-icon| and select **View
      Details**.

   .. rubric:: Edit existing hardware profiles
      :name: workinghp

   You can't edit or delete the preloaded hardware profiles, but you can perform
   the following operations on other hardware profiles from the **Select
   Hardware** window:

   -  To edit a hardware profile, select it and click **Edit Device**. You can
      also right-click a hardware profile and select **Edit**. Next, make your
      changes.
   -  To delete a hardware profile, right-click it and select **Delete**.

   .. rubric:: Run and stop an emulator and clear data
      :name: emulator

   From the **Virtual** tab, you can perform the following operations on an
   emulator:

   -  To run an emulator that uses an AVD, click **Launch** |image-as-avd-start|.
   -  To stop a running emulator, click **Menu** |image-studio-advmgr-actions-overflow-icon| and select **Stop**.
   -  To clear the data for an emulator, click **Menu** |image-studio-advmgr-actions-overflow-icon| and select
      **Wipe Data**.

   .. rubric:: Import and export hardware profiles
      :name: importexporthp

   From the **Select Hardware** window, you can import and export hardware
   profiles as follows:

   -  To import a hardware profile, click **Import Hardware Profiles** and
      select the XML file on your computer containing the definition.
   -  To export a hardware profile, right-click it and select **Export**.
      Specify the location where you want to store the XML file containing the
      definition.

   .. rubric:: AVD properties
      :name: avdproperties

   The AVD configuration specifies the interaction between the development
   computer and the emulator as well as properties you want to override in the
   hardware profile. You can specify the following properties for AVD
   configurations in the **Verify Configuration** window. The properties labeled
   **(Advanced)** are only displayed if you click **Show Advanced Settings**.

   AVD configuration properties override hardware profile properties, and
   emulator properties that you set while the emulator is running override them
   both.

   **Table 1.** AVD configuration properties


   .. list-table::
      :widths: 40 40
      :header-rows: 1

      -
         - AVD property
         - Description

      -
         - AVD Name
         -
            Enter a name for the AVD. The name can contain uppercase or lowercase letters,
            numbers, periods, underscores, parentheses, dashes, and spaces. The name of the
            file storing the AVD configuration is derived from the AVD name.

      -
         - AVD ID (Advanced)
         -
            View the AVD ID. The AVD ID is derived from the AVD name. You can use the ID to
            refer to the AVD from the command line.

      -
         - Hardware Profile
         -
            Click **Change** to select a different hardware profile from the **Select
            Hardware** window.

      -
         - System Image
         -
            Click **Change** to select a different system image from the **System Image**
            window. An active internet connection is required to download a new image.

      -
         - Startup orientation
         -
            Select an option for the initial emulator orientation:

            -  **Portrait:** oriented taller than wide
            -  **Landscape:** oriented wider than tall

            An option is enabled only if it’s supported in the hardware profile. When
            running the AVD in the emulator, you can change the orientation if both portrait
            and landscape are supported in the hardware profile.

      -
         - Camera (Advanced)
         -
            Select an option for any enabled cameras. The Emulated and VirtualScene settings
            produce a software-generated image, while the Webcam setting uses your
            development computer's webcam to take a picture

            Camera options are available only if a camera is supported in the hardware
            profile. They are not available for Wear OS, Android TV, or Google TV.

      -
         - Network: Speed (Advanced)
         -
            Select a network protocol to determine the speed of data transfer:

            -  **GSM:** Global System for Mobile Communications
            -  **HSCSD:** High-Speed Circuit-Switched Data
            -  **GPRS:** Generic Packet Radio Service
            -  **EDGE:** Enhanced Data rates for GSM Evolution
            -  **UMTS:** Universal Mobile Telecommunications System
            -  **HSDPA:** High-Speed Downlink Packet Access
            -  **LTE:** Long-Term Evolution
            -  **Full (default):** Transfer data as quickly as your computer allows.

      -
         - Network: Latency (Advanced)
         -
            Select a network protocol to set how much time it takes for the protocol to
            transfer a data packet from one point to another point.

      -
         - Emulated Performance: Graphics
         -
            Select how graphics are rendered in the emulator:

            -  **Hardware:** use your computer graphics card for faster rendering.
            -  **Software:** emulate the graphics in software, which is useful if you're
               having a problem with rendering in your graphics card.
            -  **Automatic:** let the emulator decide the best option based on your graphics
               card.

      -
         - Emulated Performance: Boot option (Advanced)
         -
            -  **Cold boot:** the device powers up each time from the device-off state.
            -  **Quick boot:** the device loads the device state from a saved snapshot.

            Emulated Performance: Multi-Core CPU (Advanced)

            Select the number of processor cores on your computer that you want to use for
            the emulator. Using more processor cores speeds up the emulator.

      -
         - Memory and Storage: RAM (Advanced)
         -
            Override the amount of RAM on the device set by the hardware manufacturer.
            Increasing the size uses more resources on your computer but supports faster
            emulator operation. Enter a RAM size and select the units, one of B (byte), KB
            (kilobyte), MB (megabyte), GB (gigabyte), or TB (terabyte).

      -
         - Memory and Storage: VM Heap (Advanced)
         -
            Override the VM heap size set by the hardware manufacturer. Enter a heap size
            and select the units, one of B (byte), KB (kilobyte), MB (megabyte), GB
            (gigabyte), or TB (terabyte).

      -
         - Memory and Storage: Internal Storage (Advanced)
         -
            Override the amount of non-removable memory space available on the device set by
            the hardware manufacturer. Enter a size and select the units, one of B (byte),
            KB (kilobyte), MB (megabyte), GB (gigabyte), or TB (terabyte).

      -
         - Memory and Storage: SD Card (Advanced)
         -
            Specify the amount of removable memory space available to store data on the
            device.

            To use a virtual SD card managed by Android Studio, select **Studio-managed**,
            enter a size, and select the units, one of B (byte), KB (kilobyte), MB
            (megabyte), GB (gigabyte), or TB (terabyte). A minimum of 100 MB is recommended
            to use the camera.

            To manage the space in a file, select **External file** and click **...** to
            specify the file and location.

            For more information, see `mksdcard <#/tools/help/mksdcard>`__ and `AVD data directory <#/studio/run/emulator-commandline#data-filedir>`__.

      -
         - Device Frame: Enable Device Frame
         -
            Select to enable a frame around the emulator window that mimics the look of a
            real device.

      -
         - Custom Skin Definition (Advanced)
         -
            Select a skin that controls what the device looks like when displayed in the
            emulator. Specifying a screen size that's too big for the skin can mean that the
            screen is cut off, so you can't see the whole screen. See the `Create an emulator skin <#/tools/devices/managing-avds#skins>`__ section for more
            information.

      -
         - Keyboard: Enable Keyboard Input (Advanced)
         -
            Select this option to use your hardware keyboard to interact with the emulator.
            This option is disabled for Wear OS and Android TV.

.. _hpproperties:

Hardware profile properties
---------------------------

You can specify the following properties for hardware profiles in the
**Configure Hardware Profile** window. AVD configuration properties override
hardware profile properties, and emulator properties that you set while the
emulator is running override them both.

The predefined hardware profiles included with the Device Manager aren't
editable. However, you can copy the profiles and edit the copies.

Some properties are disabled for some device types. For example, the "Round"
property is only available on Wear OS devices.

**Table 2.** Hardware profile configuration properties

.. list-table::
   :widths: 40 40
   :header-rows: 1

   - 

      - Hardware profile property
      - Description
   - 

      - Device Name
      - Enter a name for the hardware profile. The name can contain uppercase or
         lowercase letters, numbers, periods, underscores, parentheses, and
         spaces. The name of the file storing the hardware profile is derived
         from the hardware profile name.
   - 

      - Device Type
      - Select one of the following:

         -  Phone/Tablet
         -  Wear OS
         -  Android TV
         -  Google TV
         -  ChromeOS Device
         -  Android Automotive
   - 

      - Screen: Screen Size
      - Specify the physical size of the screen in inches, measured on the
         diagonal. If the size is larger than your computer screen, it’s reduced
         in size at launch.
   - 

      - Screen: Screen Resolution
      - Enter a width and height in pixels to specify the total number of pixels
         on the simulated screen.
   - 

      - Screen: Round
      - Select this option if the device has a round screen, such as some Wear
         OS devices.
   - 

      - Memory: RAM
      - Enter the RAM size of the device and select the units, one of B (byte),
         KB (kilobyte), MB (megabyte), GB (gigabyte), or TB (terabyte).
   - 

      - Input: Has Hardware Buttons (Back/Home/Menu)
      - Select this option if your device has hardware navigation buttons.
         Deselect it if these buttons are implemented in software only. If you
         select this option, the buttons don't appear on the screen. In either
         case, you can use the emulator side panel to simulate pressing the
         buttons.
   - 

      - Input: Has Hardware Keyboard
      - Select this option if your device has a hardware keyboard. Deselect it
         if it doesn't. If you select this option, a keyboard doesn't appear on
         the screen. In either case, you can use your computer keyboard to send
         keystrokes to the emulator.
   - 

      - Input: Navigation Style
      - Select one of the following:

         -  **None:** no hardware controls. Navigation is through software.
         -  **D-pad:** directional pad support.
         -  **Trackball**
         -  **Wheel**

         These options are for hardware controls on the device itself. However,
         the events sent to the device by an external controller are the same.
   - 

      - Supported device states
      - Select one or both options:

         -  **Portrait:** oriented taller than wide
         -  **Landscape:** oriented wider than tall

         You must select at least one option. If you select both options, you
         can switch between orientations in the emulator.
   - 

      - Cameras
      - To enable the camera, select one or both options:

         -  **Back-Facing Camera:** the lens facing away from the user
         -  **Front-Facing Camera:** the lens facing the user

         If the camera is enabled, you can use your development machine's webcam
         or a photo provided by the emulator to simulate taking a photo, based
         on the options you select in the AVD configuration.
   - 

      - Sensors: Accelerometer
      - Select this option if the device has hardware that helps it determine
         its orientation.
   - 

      - Sensors: Gyroscope
      - Select this option if the device has hardware that detects rotation or
         twist. In combination with an accelerometer, a gyroscope can provide
         smoother orientation detection and support a six-axis orientation
         system.
   - 

      - Sensors: GPS
      - Select this option if the device has hardware that supports the Global
         Positioning System (GPS) satellite-based navigation system.
   - 

      - Sensors: Proximity Sensor
      - Select this option if the device has hardware that detects when the
         device is close to the user's face during a phone call to disable input
         from the screen.
   - 

      - Default Skin
      - Select a skin that controls what the device looks like when displayed in
         the emulator. Specifying a screen size that's too big for the
         resolution can mean that the screen is cut off, so you can't see the
         whole screen. See the section that follows about `creating an emulator skin <#/tools/devices/managing-avds#skins>`__ for more information.

.. _skins:

Create an emulator skin
-----------------------

An Android emulator skin is a collection of files that define the visual and
control elements of an emulator display. If the skin definitions available in
the AVD settings don't meet your requirements, you can create your own custom
skin definition and then apply it to your AVD.

Each emulator skin contains:

-  A ``hardware.ini`` file
-  Layout files for supported orientations and physical configurations
-  Image files for display elements, such as background, keys, and buttons

To create and use a custom skin:

#. Create a directory where you can save your skin configuration files.

#. Define the visual appearance of the skin in a text file named ``layout``.
   This file defines many characteristics of the skin, such as the size and
   image assets for specific buttons. For example:

   .. code:: none

      parts {
          device {
              display {
                  width   320
                  height  480
                  x       0
                  y       0
              }
          }

          portrait {
              background {
                  image background_port.png
              }

              buttons {
                  power {
                      image  button_vertical.png
                      x 1229
                      y 616
                  }
              }
          }
          ...
      }

#. Add bitmap files of the device images to the same directory.

#. Specify additional hardware-specific device configurations in an INI file for
   the device settings, such as ``hw.keyboard`` and ``hw.lcd.density``.

#. Archive the files in the skin folder and select the archive file as a custom
   skin.

For more detailed information about creating emulator skins, see the `Android Emulator Skin File Specification <https://android.googlesource.com/platform/external/qemu/+/emu-master-dev/android/docs/ANDROID-SKIN-FILES.TXT>`__
in the tools source code.

Last updated 2024-05-03 UTC.


.. |Opening the Device Manager from the Welcome screen| image:: https://developer.android.google.cn/static/studio/images/run/device-manager-welcome-screen.png
.. |New Device Manager window| image:: https://developer.android.google.cn/static/studio/images/run/new-device-manager.png
.. |The Select Hardware dialog| image:: https://developer.android.google.cn/static/studio/images/run/new-select-hardware-window.png
.. |The System Image dialog| image:: https://developer.android.google.cn/static/studio/images/run/new-system-image.png
.. |image-new-select-hardware-window| image:: https://developer.android.google.cn/static/studio/images/run/new-select-hardware-window.png
   :width: 856px
.. |image-new-system-image| image:: https://developer.android.google.cn/static/studio/images/run/new-system-image.png
   :width: 1147px
.. |image-studio-advmgr-actions-overflow-icon| image:: https://developer.android.google.cn/static/images/tools/studio-advmgr-actions-overflow-icon.png
   :class: inline-icon
.. |The Configure hardware profile dialog| image:: https://developer.android.google.cn/static/studio/images/run/new-configure-hardware-profile.png
   :width: 900px
.. |image-avd-edit| image:: https://developer.android.google.cn/static/studio/images/buttons/avd-edit.png
   :class: inline-icon
.. |image-studio-advmgr-actions-overflow-icon| image:: https://developer.android.google.cn/static/images/tools/studio-advmgr-actions-overflow-icon.png
   :class: inline-icon
.. |image-studio-advmgr-actions-overflow-icon| image:: https://developer.android.google.cn/static/images/tools/studio-advmgr-actions-overflow-icon.png
   :class: inline-icon
.. |image-studio-advmgr-actions-overflow-icon| image:: https://developer.android.google.cn/static/images/tools/studio-advmgr-actions-overflow-icon.png
   :class: inline-icon
.. |image-as-avd-start| image:: https://developer.android.google.cn/static/images/tools/as-avd-start.png
   :class: inline-icon
.. |image-studio-advmgr-actions-overflow-icon| image:: https://developer.android.google.cn/static/images/tools/studio-advmgr-actions-overflow-icon.png
   :class: inline-icon
.. |image-studio-advmgr-actions-overflow-icon| image:: https://developer.android.google.cn/static/images/tools/studio-advmgr-actions-overflow-icon.png
   :class: inline-icon


/Overview: Run your app with Android Emulator
=============================================

.. https://developer.android.google.cn/studio/run/emulator?hl=en

.. container:: devsite-article-body clearfix

   The Android Emulator simulates Android devices on your computer so that you
   can test your application on a variety of devices and Android API levels
   without needing to have each physical device. The emulator offers these
   advantages:

   -  **Flexibility**: In addition to being able to simulate a variety of
      devices and Android API levels, the emulator comes with predefined
      configurations for various Android phone, tablet, Wear OS, and Android TV
      devices.

   -  **High fidelity**: The emulator provides almost all the capabilities of a
      real Android device. You can simulate incoming phone calls and text
      messages, specify the location of the device, simulate different network
      speeds, simulate rotation and other hardware sensors, access the Google
      Play Store, and much more.

   -  **Speed**: Testing your app on the emulator is in some ways faster and
      easier than doing so on a physical device. For example, you can transfer
      data faster to the emulator than to a device connected over USB.

   In most cases, the emulator is the best option for your testing needs. This
   page covers the core emulator functionalities and how to get started with it.

   Alternatively, you can deploy your app to a physical device. For more
   information, see `Run apps on a hardware device <#/studio/run/device>`__.

   .. rubric:: Get started with the emulator
      :name: get-started

   The Android Emulator lets you test your app on many different devices
   virtually. The emulator comes with Android Studio, so you don't need to
   install it separately. To use the emulator, follow these basic steps, which
   are described in more detail in the sections that follow:

   #. `Verify that you have the system requirements <#requirements>`__.
   #. `Create an Android Virtual Device (AVD) <#avd>`__.
   #. `Run your app on the emulator <#runningapp>`__.
   #. `Navigate the emulator <#navigate>`__.

   This page covers the steps to set up and explore your virtual testing
   environment in more detail. If you already have your app running on the
   emulator and are ready to use more advanced features, see `Advanced emulator usage <#/studio/run/advanced-emulator-usage>`__.

   If you're experiencing issues with the emulator, see `Troubleshoot known issues with Android Emulator <#/studio/run/emulator-troubleshooting>`__.
   Depending on your needs and resources, it might be worth delving into system
   requirements and technical configurations, or it might be better to use a
   physical device.

   .. rubric:: Emulator system requirements
      :name: requirements

   For the best experience, you should use the emulator in Android Studio on a
   computer with at least the following specs:

   -  16 GB RAM
   -  64-bit Windows, macOS, Linux, or ChromeOS operating system
   -  16 GB disk space

   **Note:**\  If you're using a ChromeOS operating system, check the `devices that support the Android Emulator <https://chromeos.dev/en/android-environment#android-emulator-support>`__
   in the ChromeOS documentation.
   If you don't have these specs, the emulator might still run but not smoothly.
   In this case, consider testing on a physical device instead by following the
   guidance at `Run apps on a hardware device <#/studio/run/device>`__.

   .. rubric:: Create an Android Virtual Device
      :name: avd

   Each instance of the Android Emulator uses an *Android virtual device (AVD)*
   to specify the Android version and hardware characteristics of the simulated
   device. To effectively test your app, create an AVD that models each device
   your app is designed to run on. To create an AVD, see `Create and manage virtual devices <#/studio/run/managing-avds>`__.

   Each AVD functions as an independent device with its own private storage for
   user data, SD card, and so on. By default, the emulator stores the user data,
   SD card data, and cache in a directory specific to that AVD. When you launch
   the emulator, it loads the user data and SD card data from the AVD directory.

   .. rubric:: Run your app on the emulator
      :name: runningapp

   After you have created an AVD, you can start the Android Emulator and run an
   app in your project:

   #. In the toolbar, select the AVD that you want to run your app on from the
      target device menu.

      .. figure:: https://developer.android.google.cn/static/studio/images/run/target-device-dropdown.png
         name: target-device-dropdown
         :alt: The target device menu
         :width: 400px

         **Figure 1.** The target device menu.

   #. Click **Run**. The emulator might take a minute or so to launch for the
      first time, but subsequent launches use a
      `snapshot <#/studio/run/advanced-emulator-usage#snapshots>`__ and should
      launch faster. If you experience issues, see the `troubleshooting guide <#/studio/run/emulator-troubleshooting>`__.

   Once your app is installed on your AVD, you can run it from the device as you
   would run any app on a device. Any time you want to deploy new changes, you
   need to click **Run** or **Apply Changes** again.

   .. rubric:: Wear OS pairing assistant
      :name: wear-os-pairing

   If you want to test your app with Wear OS devices, the Wear OS pairing
   assistant guides you step-by-step through pairing Wear OS emulators with
   physical or virtual phones directly in Android Studio. To learn more, see
   `Use the Wear OS emulator pairing assistant <#/training/wearables/get-started/creating#pairing-assistant>`__.

   .. rubric:: Navigate the emulator
      :name: navigate

   While the emulator is running, you can use your computer mouse pointer to
   mimic your finger on the touch screen and use the emulator panel to perform
   common actions.

   .. rubric:: Navigate the emulator screen
      :name: navigate-screen

   Use your computer mouse pointer to mimic your finger on the touchscreen,
   select menu items and input fields, and click buttons and controls. Use your
   computer keyboard to type characters and enter emulator shortcuts.

   **Table 1.** Gestures for navigating the emulator

   .. list-table::
      :widths: 40 40
      :header-rows: 1

      - 

         - Feature
         - Description
      - 

         - Swipe the screen
         - Point to the screen, press and hold the primary mouse button, swipe
            across the screen, and then release.
      - 

         - Drag an item
         - Point to an item on the screen, press and hold the primary mouse
            button, move the item, and then release.
      - 

         - Tap
         - Point to the screen, press the primary mouse button, and then
            release.
      - 

         - Double tap
         - Point to the screen, double-click the primary mouse button quickly,
            and then release.
      - 

         - Touch & hold
         - Point to an item on the screen, press the primary mouse button, hold,
            and then release.
      - 

         - Type
         - You can type in the emulator by using your computer keyboard or using
            a keyboard that pops up on the emulator screen.
      - 

         - Pinch and spread
         - 

            .. container::

               Pressing Control (Command on macOS) brings up a pinch gesture
               multi-touch interface. The mouse acts as the first finger, and
               across the anchor point is the second finger. Drag the cursor to
               move the first point.

            .. container::

               Clicking the left mouse button mimics touching down both points
               and releasing mimics picking both up.
      - 

         - Vertical swipe
         - Open a vertical menu on the screen and use the scroll wheel (mouse
            wheel) to scroll through the menu items. Click a menu item to select
            it.

   .. rubric:: Perform common actions using the emulator panel
      :name: tasks

   To perform common actions with the emulator, use the emulator toolbar, if
   you're running the emulator within Android Studio, or the panel on the right
   side, if you're running the emulator in a window outside of Android Studio.
   Table 2 describes common emulator actions and associated buttons.

   You can use keyboard shortcuts to perform many common actions in the
   emulator. For a complete list of shortcuts in the emulator, press F1
   (Command+/ on macOS) to open the Help pane in the `Extended controls <#/studio/run/advanced-emulator-usage#extended>`__ window.

   **Table 2.** Common actions in the emulator

   .. list-table::
      :widths: 40 40
      :header-rows: 1

      -
         - Feature
         - Description

      -
         - Close
           |Close icon|
         -

            Close the emulator.

      -
         - Minimize
           |Minimize icon|
         -

            Minimize the emulator window.

      -
         - Resize
         -

            Resize the emulator as you would any other operating system window. The emulator
            maintains an aspect ratio appropriate for your device.

      -
         - Power
           |Power icon|
         -

            | Click to turn the screen on or off.
            | Click and hold to turn the device on or off.

      -
         - Volume up
           |Volume Up icon|
         -

            Click to view a slider control and turn the volume up. Click again to turn it up
            more, or use the slider control to change the volume.

      -
         - Volume down
           |Volume Down icon|
         -

            Click to view a slider control and turn the volume down. Click again to turn it
            down more, or use the slider control to change the volume.

      -
         - Rotate left
           |Rotate Left icon|
         -

            Rotate the device 90 degrees counterclockwise.

      -
         - Rotate right
           |Rotate Right icon|
         -

            Rotate the device 90 degrees clockwise.

      -
         - Take screenshot
           |Take Screenshot icon|
         -

            Click to take a screenshot of the device.

      -
         - Enter zoom mode
           |Enter Zoom Mode icon|
         -

            Click to change the cursor to the zoom icon. To exit zoom mode, click the button
            again.

            To zoom in and out in zoom mode:

            -  Left-click the screen to zoom in by 25%, up to a maximum of about twice the
               screen resolution of the virtual device.
            -  Right-click to zoom out.
            -  Left-click and drag to select a box-shaped area to zoom in on.
            -  Right-click and drag a selection box to reset to default zoom.

            To pan in zoom mode, hold Control (Command on macOS) while pressing the arrow
            keys on the keyboard.

            To tap the device screen in zoom mode, Control-click (Command-click on macOS).

      -
         - Back
           |Back icon|
         -

            Return to the previous screen or close a dialog, an options menu, the
            Notifications panel, or the onscreen keyboard.

      -
         - Home
           |Home icon|
         -

            Return to the Home screen.

            .. container::

               Overview
               |Overview icon|

            .. container::

               (Recent Apps)

            Tap to open a list of thumbnail images of apps you've worked with recently. To
            open an app, tap its thumbnail. To remove a thumbnail from the list, swipe it
            left or right. This button isn't supported for Wear OS.

      -
         - Fold
           |Fold icon|
         -

            For foldable devices, fold the device to display its smaller screen
            configuration.

      -
         - Unfold
           |Unfold icon|
         -

            For foldable devices, unfold the device to display its larger screen
            configuration.

      -
         - Button 1
           |Button 1 icon|
         -

            For Wear devices, press Button 1 on the device. Only available on Wear devices
            running API level 28 or higher.

      -
         - Button 2
           |Button 2 icon|
         -

            For Wear devices, press Button 2 on the device. Only available on Wear devices
            running API level 30 or higher.

      -
         - Palm
           |Palm button icon|
         -

            For Wear devices, press your palm on the device screen. This sets your device to
            ambient mode. Only available on Wear devices running API level 28 or higher.

      -
         - Tilt
           |Tilt button icon|
         -

            For Wear devices, tilt the device. This exits ambient mode. Only available on
            Wear devices running API level 28 or higher.

      -
         - Menu
         -

            Press Control+M (Command+M on macOS) to simulate the Menu button.

      -
         - More
           |More icon|
         -

            Click to access other features and settings.

.. _update:

Update the emulator
-------------------

To update the Android Emulator, select the **Android Emulator** component in the
**SDK Tools** tab of the **SDK Manager**. For instructions, see `Update your tools using the SDK Manager <#/studio/intro/update#sdk-manager>`__.

Last updated 2023-05-01 UTC.


.. |Close icon| image:: https://developer.android.google.cn/static/images/tools/e-iclose.png
   :class: inline-icon
.. |Minimize icon| image:: https://developer.android.google.cn/static/images/tools/e-iminimize.png
   :class: inline-icon
.. |Power icon| image:: https://developer.android.google.cn/static/images/tools/e-ipower.png
   :class: inline-icon
.. |Volume Up icon| image:: https://developer.android.google.cn/static/images/tools/e-ivolumeup.png
   :class: inline-icon
.. |Volume Down icon| image:: https://developer.android.google.cn/static/images/tools/e-ivolumedown.png
   :class: inline-icon
.. |Rotate Left icon| image:: https://developer.android.google.cn/static/images/tools/e-irotateleft.png
   :class: inline-icon
.. |Rotate Right icon| image:: https://developer.android.google.cn/static/images/tools/e-irotateright.png
   :class: inline-icon
.. |Take Screenshot icon| image:: https://developer.android.google.cn/static/images/tools/e-itakescreenshot.png
   :class: inline-icon
.. |Enter Zoom Mode icon| image:: https://developer.android.google.cn/static/images/tools/e-izoom.png
   :class: inline-icon
.. |Back icon| image:: https://developer.android.google.cn/static/images/tools/e-iback.png
   :class: inline-icon
.. |Home icon| image:: https://developer.android.google.cn/static/images/tools/e-ihome.png
   :class: inline-icon
.. |Overview icon| image:: https://developer.android.google.cn/static/images/tools/e-ioverview.png
   :class: inline-icon
.. |Fold icon| image:: https://developer.android.google.cn/static/images/tools/e-fold.png
   :class: inline-icon
.. |Unfold icon| image:: https://developer.android.google.cn/static/images/tools/e-unfold.png
   :class: inline-icon
.. |Button 1 icon| image:: https://developer.android.google.cn/static/studio/images/run/wear-emu-button-1.png
   :class: inline-icon
.. |Button 2 icon| image:: https://developer.android.google.cn/static/studio/images/run/wear-emu-button-2.png
   :class: inline-icon
.. |Palm button icon| image:: https://developer.android.google.cn/static/studio/images/run/wear-emu-palm-button.png
   :class: inline-icon
.. |Tilt button icon| image:: https://developer.android.google.cn/static/studio/images/run/wear-emu-tilt-button.png
   :class: inline-icon
.. |More icon| image:: https://developer.android.google.cn/static/images/tools/e-imore.png
   :class: inline-icon

/Test on multiple screen sizes
==============================

.. https://developer.android.google.cn/studio/run/resizable-emulator?hl=en

.. container:: devsite-article-body clearfix

   **Experimental:**\  The resizable emulator feature is under active
   development. If you encounter an issue, please `report a bug <#/studio/report-bugs>`__.
   Test your app on multiple screen sizes with a single resizable emulator.
   Testing on a single resizable emulator not only allows you to rapidly test
   changes across different interfaces, but also promotes a smoother development
   experience by saving the compute resources and memory that would be required
   to maintain separate virtual devices.

   To create a resizable Android Virtual Device (AVD) follow these steps:

   #. In the `create device flow <https://developer.android.google.cn/studio/run/managing-avds#createavd>`__,
      select the **Resizable (Experimental)** phone hardware profile.
   #. Download the system image for API level 33 or higher.
   #. Follow the prompts to create the AVD.

   When you deploy your app to the resizable emulator, use the **Display Mode**
   dropdown in the emulator toolbar to quickly toggle between a set of common
   device types. The emulator screen resizes so you can easily test your app
   across a range of screen sizes and densities.

   |Resizable emulator Display Mode dropdown menu|

Last updated 2024-01-23 UTC.


.. |Resizable emulator Display Mode dropdown menu| image:: https://developer.android.google.cn/static/studio/images/resizable-emulator.png

/Take screenshots
=================

.. https://developer.android.google.cn/studio/run/emulator-take-screenshots?hl=en

.. container:: devsite-article-body clearfix

   To take a screenshot of the Android Emulator, click the **Take screenshot**
   |Take Screenshot icon| button.

   In the **Take Screenshot** dialog that appears, you can recapture, edit, or
   copy the captured image. Once you're satisfied with the image, click
   **Save**. The emulator creates a PNG file with the name
   ``Screenshot_``\ ``yyyymmdd-hhmmss``\ ``.png``, using the year, month, day,
   hour, minute, and second of the capture. You can change the name, if you
   prefer, and choose where to save the file.

   To take a `Play-compatible screenshot of a Wear OS emulator <#/docs/quality-guidelines/wear-app-quality#google-play-screenshots-apps>`__,
   set the drop-down to **Play Store Compatible**.

   |Take screenshot dialog including Play Store Compatible drop-down.|

   You can also take screenshots from the command line with either of the
   following commands:

   -  ``screenrecord screenshot``\ ``[destination-directory]``
   -  ``adb emu screenrecord screenshot``\ ``[destination-directory]``

Last updated 2024-03-08 UTC.


.. |Take Screenshot icon| image:: https://developer.android.google.cn/static/images/tools/e-itakescreenshot.png
   :class: inline-icon
.. |Take screenshot dialog including Play Store Compatible drop-down.| image:: https://developer.android.google.cn/static/studio/images/wear-screenshot-play-compatible-dark.png
   :width: 40.0%

/Record the screen
==================

.. https://developer.android.google.cn/studio/run/emulator-record-screen?hl=en

.. container:: devsite-article-body clearfix

   You can record video and audio from the Android Emulator and save the
   recording to a WebM or animated GIF file.

   The screen recording controls are in the **Record and Playback** tab of the
   `Extended Controls <#extended>`__ window.

   **Tip:** You can open the screen recording controls by pressing
   Control+Shift+R (Command+Shift+R on macOS).

   To begin screen recording, click the **Start recording** button in the
   **Record and Playback** tab. To stop recording, click **Stop recording**.

   Controls for playing and saving the recorded video are at the bottom of the
   **Record and Playback** tab. To save the video, choose **WebM** or **GIF**
   from the menu at the bottom of the tab and click **Save**.

   You can also record and save a screen recording from the emulator using the
   following command on the command line:

   ``adb emu screenrecord start --time-limit 10``\ ``[path to save video]``\ ``/sample_video.webm``

Last updated 2023-04-12 UTC.


/Use the camera
===============

.. https://developer.android.google.cn/studio/run/emulator-use-camera?hl=en

.. container:: devsite-article-body clearfix

   The emulator supports the use of basic camera functionality on your virtual
   device for earlier Android versions. Android 11 and higher supports the
   following additional Android Emulator camera capabilities:

   -  RAW capture
   -  YUV reprocessing
   -  Level 3 devices
   -  Logical camera support
   -  Emulating sensor orientation by using data from the sensor manager
   -  Applying video stabilization by reducing handshake frequency
   -  Applying edge enhancement by removing the upscaling usually done in the
      YUV pipeline
   -  Concurrent cameras

   .. rubric:: Virtual scene camera and ARCore
      :name: arcore

   You can use the virtual scene camera in a virtual environment to experiment
   with augmented reality (AR) apps made with
   `ARCore <https://developers.google.cn/ar/discover/>`__.

   For information on using the virtual scene camera in the emulator, see `Run AR apps in Android Emulator <https://developers.google.cn/ar/develop/java/emulator>`__.

   When using the emulator with a camera app, you can import an image in PNG or
   JPEG format to be used within a virtual scene. To choose an image for use in
   a virtual scene, open the **Extended controls** window, select the **Camera >
   Virtual scene images** tab, and click **Add image**. This feature can be used
   to import custom images such as QR codes for use with any camera-based app.
   For more information, see `Add Augmented Images to the scene <https://developers.google.cn/ar/develop/java/emulator#add_augmented_images_to_the_scene>`__.

   .. rubric:: Test common AR actions with macros
      :name: ar-macros

   You can greatly reduce the time it takes to test common AR actions by using
   the preset macros in the emulator. For example, you can use a macro to reset
   all the device's sensors to their default state.

   Before using macros, follow the steps in `Run AR apps in Android Emulator <https://developers.google.cn/ar/develop/java/emulator>`__ to set up
   the virtual scene camera for your app, run your app on the emulator, and
   update ARCore. Then, follow these steps to use emulator macros:

   #. With the emulator running and your app connected to ARCore, click **More**
      |image-emulator-extended-controls| in the emulator panel.

   #. Select **Record and Playback > Macro Playback**.

   #. Choose a macro that you want to use, then click **Play**.

      During playback, you can interrupt a macro by clicking **Stop**.

Last updated 2023-04-12 UTC.


.. |image-emulator-extended-controls| image:: https://developer.android.google.cn/static/studio/images/buttons/emulator-extended-controls.png
   :class: inline-icon

/Launch in a separate window
============================

.. https://developer.android.google.cn/studio/run/emulator-launch-separate-window?hl=en

.. container:: devsite-article-body clearfix

   The Android Emulator runs inside Android Studio by default. This lets you use
   screen space efficiently, navigate quickly between the emulator and the
   editor window using hotkeys, and organize your IDE and emulator workflow in a
   single application window.

   However, some emulator features are only available when you run it in a
   separate window. To launch the emulator in a separate window, go to **File >
   Settings > Tools > Emulator** (**Android Studio > Preferences > Tools >
   Emulator** on macOS) and deselect **Launch in a tool window**.

Last updated 2023-04-12 UTC.


/Launch without running an app
==============================

.. https://developer.android.google.cn/studio/run/emulator-launch-without-app?hl=en

.. container:: devsite-article-body clearfix

   Sometimes you might want to launch the emulator without running an app, such
   as if you want to see how two emulator devices interact with each other when
   paired over Bluetooth. To launch the emulator without launching an app,
   follow these steps:

   #. `Open the Device Manager <#/studio/run/managing-avds>`__.
   #. Double-click an AVD or select an AVD and click **Run** |image-toolbar-run|. The
      Android Emulator loads.

   While the emulator is running, you can run Android Studio projects and choose
   the emulator as the target device. You can also install one or more APKs onto
   the emulator, as described in the following section, and then run them.

Last updated 2023-04-12 UTC.


.. |image-toolbar-run| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-run.png
   :class: inline-icon

/Install and add files
======================

.. https://developer.android.google.cn/studio/run/emulator-install-add-files?hl=en

.. container:: devsite-article-body clearfix

   If you want to use an app that's not available in the Google Play Store on
   the Android Emulator, you can manually install the APK file. To install an
   APK file on the emulated device, drag an APK file onto the emulator screen.
   An APK Installer dialog appears. When the installation completes, you can
   view the app in your apps list.

   To add a file to the emulated device, drag the file onto the emulator screen.
   The file is placed in the ``/sdcard/Download/`` directory. You can view the
   file from Android Studio using the `Device Explorer <#/studio/debug/device-file-explorer>`__ or find it from the device
   using the **Downloads** or **Files** app, depending on the device version.

Last updated 2023-07-25 UTC.


/Use WiFi
=========

.. https://developer.android.google.cn/studio/run/emulator-wifi?hl=en

.. container:: devsite-article-body clearfix

   When using an AVD with API level 25 or higher, the emulator provides a
   simulated Wi-Fi access point ("AndroidWifi"), and Android automatically
   connects to it.

   You can disable Wi-Fi in the emulator by running the emulator with the
   `command-line parameter <#/studio/run/emulator-commandline>`__
   ``-feature -Wifi``.

Last updated 2023-04-12 UTC.


/Use extended controls
======================

.. https://developer.android.google.cn/studio/run/emulator-extended-controls?hl=en

.. container:: devsite-article-body clearfix

   Use the extended controls on the Android Emulator to send data, change device
   properties, control apps, and more. To open the **Extended controls** window,
   click **More** |Emulator extended controls icon| in the emulator panel. Note
   that some of these extended control options are only available when you `run the emulator in a separate window <#standalone-window>`__, outside of Android
   Studio.

   You can use keyboard shortcuts to perform many of these tasks. For a complete
   list of shortcuts in the emulator, press F1 (Command+/ on macOS) to open the
   Help pane.

   **Table 1.** Extended controls details

   .. list-table::
      :widths: 40 40
      :header-rows: 1

      -
         - Feature
         - Description

      -
         - Location
         -

            The emulator lets you simulate "my location" information: where the emulated
            device is located. For example, if you click My Location |My Location icon| in
            Google Maps and then send a location, the map shows it.

            Controls for the device's location information are organized under two tabs:
            **Single points** and **Routes**.

            **Single points**

            In the **Single points** tab, you can use the Google Maps webview to search for
            points of interest, just as you would when using Google Maps on a phone or in a
            browser. When you search for (or click) a location in the map, you can save the
            location by selecting **Save point** near the bottom of the map. All your saved
            locations are listed on the right side of the **Extended controls** window.

            To set the emulator's location to the location you have selected on the map,
            click the **Set location** button near the bottom right of the **Extended
            controls** window.

            **Routes**

            Similar to the **Single points** tab, the **Routes** tab provides a Google Maps
            webview that you can use to create a route between two or more locations. To
            create and save a route, do the following:

            #. In the map view, use the text field to search for the first destination in
               your route.
            #. Select the location from the search results.
            #. Select the **Navigate** |image-emulator-navigate_icon| button.
            #. Select the starting point of your route from the map.
            #. (Optional) Click **Add destination** to add more stops to your route.
            #. Save your route by clicking **Save route** in the map view.
            #. Specify a name for the route and click **Save**.

            To simulate the emulator following the route you saved, select the route from
            the list of **Saved routes** and click **Play route** near the bottom right of
            the **Extended controls** window. To stop the simulation, click **Stop route**.

            To continuously simulate the emulator following the specified route, enable the
            switch next to **Repeat playback**. To change how quickly the emulator follows
            the specified route, select an option from the **Playback speed** menu.

            **Import GPX and KML data**

            To use geographic data from a GPS exchange format (GPX) or Keyhole Markup
            Language (KML) file:

            #. Click **Load GPX/KML**.
            #. In the file dialog, select a file on your computer and click **Open**.
            #. Optionally select a **Speed**.
            #. Click **Run** |Run icon|.

      -
         - Displays
         -

            The emulator allows you to deploy your app to multiple displays, which support
            customizable dimensions and can help you test apps that support
            `multi-window <#/guide/topics/ui/foldables#multi-window>`__ and
            `multi-display <#/guide/topics/ui/foldables#multi-display>`__. While a virtual
            device is running, you can add up to two additional displays as follows:

            #. Add a display by clicking **Add secondary display**.
            #. From the menu under **Secondary displays**, do one of the following:

               #. Select one of the preset aspect ratios.
               #. Select **custom** and set the **height**, **width**, and **dpi** for your
                  custom display.

            #. (Optional) Click **Add secondary display** again to add a third display.
            #. Click **Apply changes** to add the specified display(s) to the running
               virtual device.

      -
         - Cellular
         -

            The emulator lets you simulate various network conditions. You can approximate
            the network speed for different network protocols, or you can specify **Full**,
            which transfers data as quickly as your computer allows. Specifying a network
            protocol is always slower than **Full**. You can also specify the voice and data
            network status, such as roaming. The defaults are set in the AVD.

            Select a **Network type**:

            -  **GSM**: Global System for Mobile Communications
            -  **HSCSD**: High-Speed Circuit-Switched Data
            -  **GPRS**: Generic Packet Radio Service
            -  **EDGE**: Enhanced Data rates for GSM Evolution
            -  **UMTS**: Universal Mobile Telecommunications System
            -  **HSPDA**: High-Speed Downlink Packet Access
            -  **LTE**: Long-Term Evolution
            -  **Full** (default): Use the network as provided by your computer

            Select a **Signal strength**:

            -  **None**
            -  **Poor**
            -  **Moderate** (default)
            -  **Good**
            -  **Great**

            Select a **Voice status**, **Data status**, or both:

            -  **Home** (default)
            -  **Roaming**
            -  **Searching**
            -  **Denied (emergency calls only)**
            -  **Unregistered (off)**

      -
         - Battery
         -

            You can simulate the battery properties of a device to see how your app performs
            under different conditions. To select a **Charge level**, use the slider
            control.

            Select a **Charger connection** value:

            -  **None**
            -  **AC charger**

            Select a **Battery health** value:

            -  **Good** (default)
            -  **Failed**
            -  **Dead**
            -  **Overvoltage**
            -  **Overheated**
            -  **Unknown**

            Select a **Battery status** value:

            -  **Unknown**
            -  **Charging** (default)
            -  **Discharging**
            -  **Not charging**
            -  **Full**

      -
         - Camera
         -

            You can load pictures into the scene that is simulated when you open the
            emulator camera. For more information, see `Add Augmented Images to the scene <https://developers.google.cn/ar/develop/java/emulator#add_augmented_images_to_the_scene>`__
            in the ARCore documentation.

            Phone

            The emulator lets you simulate incoming phone calls and text messages.

            To initiate a call to the emulator:

            #. Select or type a phone number in the **From** field.
            #. Click **Call Device**.
            #. Optionally, click **Hold Call** to put the call on hold.
            #. To end the call, click **End Call**.

            To send a text message to the emulator:

            #. Select or type a phone number in the **From** field.
            #. Type a message in the **SMS message** field.
            #. Click **Send Message**.

      -
         - Directional Pad
         -

            If the AVD has the directional pad enabled in the hardware profile, you can use
            the directional pad controls with the emulator. However, not all devices support
            the directional pad; for example, Android watches don't. The buttons simulate
            the following actions:

            |Directional Pad Control|

      -
         - Microphone
         -

            When **Virtual microphone uses host audio input** is turned on, the emulator
            receives audio input from the host microphone; otherwise, the emulator doesn't
            receive any audio input. The **Virtual headset plug inserted**, **Virtual
            headset has microphone**, and **Voice Assist** options are currently
            unimplemented.

      -
         - Fingerprint
         -

            This control can simulate 10 different fingerprint scans. You can use it to test
            fingerprint integration in your app. This feature is disabled for Android 5.1
            (API level 22) and lower and for Wear OS.

            To simulate a fingerprint scan on the virtual device:

            #. Prepare an app to receive a fingerprint.
            #. Select a **Fingerprint** value.
            #. Click **Touch Sensor**.

      -
         - Virtual sensors > Device Pose
         -

            This control lets you test your app against changes in device position,
            orientation, or both. For example, you can simulate gestures such as tilt and
            rotation. The accelerometer doesn't track the absolute position of the device:
            it just detects when a change is occurring. The control simulates the way
            accelerometer and magnetometer sensors would respond when you move or rotate a
            real device.

            You must enable the accelerometer sensor in your
            `AVD <#/studio/run/managing-avds#hpproperties>`__ to use this control.

            The control reports
            `TYPE_ACCELEROMETER <#/reference/android/hardware/Sensor#TYPE_ACCELEROMETER>`__
            events on the x, y, and z axis. These values include gravity. For example, if
            the device is suspended in outer space, it would experience zero acceleration
            (all of x, y, and z are 0). When the device is on Earth and lying screen-up on
            top of a table, the acceleration is 0, 0, and 9.8 because of gravity.

            The control also reports
            `TYPE_MAGNETIC_FIELD <#/reference/android/hardware/Sensor#TYPE_MAGNETIC_FIELD>`__
            events, which measure the ambient magnetic field on the x, y and z axis in
            microteslas (μT).

            To rotate the device around the x, y, and z axes, select **Rotate** and do one
            of the following:

            -  Adjust the **Yaw**, **Pitch**, and **Roll** sliders and observe the position
               in the upper pane.
            -  Move the device representation in the upper pane and observe the **Yaw**,
               **Pitch**, and **Roll** and how the resulting accelerometer values change.

            See `Compute the device's orientation <#/guide/topics/sensors/sensors_position#sensors-pos-orient>`__ for
            more information about how yaw, pitch, and roll are calculated.

            To move the device horizontally (x) or vertically (y), select **Move** and do
            one of the following:

            -  Adjust the **X** and **Y** sliders and observe the position in the upper
               pane.
            -  Move the device representation in the upper pane and observe the **X** and
               **Y** slider values and how the resulting accelerometer values change.

            To position the device at 0, 90, 180, or 270 degrees:

            -  In the **Device rotation** area, select a button to change the rotation.

            As you adjust the device, the **Resulting values** fields change accordingly.
            These are the values that an app can access.

            For more information about these sensors, see `Sensors overview <#/guide/topics/sensors/sensors_overview>`__, `Motion sensors <#/guide/topics/sensors/sensors_motion>`__, and `Position sensors <#/guide/topics/sensors/sensors_position>`__.

      -
         - Virtual sensors > Additional sensors
         -

            The emulator can simulate various position and environment sensors. It lets you
            adjust the following sensors so you can test them with your app:

            -  **Ambient temperature**: This environmental sensor measures ambient air
               temperature.
            -  **Magnetic field**: This position sensor measures the ambient magnetic field
               on the X, Y, and Z axes, respectively. The values are in microteslas (μT).
            -  **Proximity**: This position sensor measures the distance from an object; for
               example, it can notify a phone that a face is close to it to make a call. The
               proximity sensor must be enabled in your
               `AVD <#/studio/run/managing-avds#hpproperties>`__ to use this control.
            -  **Light**: This environmental sensor measures illuminance. The values are in
               lux units.
            -  **Pressure**: This environmental sensor measures ambient air pressure. The
               values are in millibar (hPa) units.
            -  **Relative Humidity**: This environmental sensor measures ambient relative
               humidity.

            For more information about these sensors, see `Sensors overview <#/guide/topics/sensors/sensors_overview>`__, `Position sensors <#/guide/topics/sensors/sensors_position>`__, and `Environment sensors <#/guide/topics/sensors/sensors_environment>`__ .

      -
         - Bug report
         -

            If you're experiencing issues with the emulator, you can prepare and send a bug
            report. The emulator automatically collects screenshots, logs, and other data
            for the bug report.

      -
         - Record and Playback
         -

            See `Screen recording <#screen-recording>`__.

      -
         - Google Play
         -

            When the AVD system image includes the Play Store app, this displays the Google
            Play services version information.

      -
         - Settings > General
         -

            -  **Emulator window theme**: Select **Light** or **Dark**.
            -  **Send keyboard shortcuts to:** By default, some keyboard combinations
               trigger emulator control shortcuts. If you’re developing an app that includes
               keyboard shortcuts, such as one targeted at devices with Bluetooth keyboards,
               you can change this setting to send *all* keyboard input to the virtual
               device, including input that would be a shortcut in the emulator.
            -  **Screenshot save location**: Click the folder icon to specify a location to
               save screenshots of the emulator screen.
            -  **Use detected ADB location**: If you're running the emulator from Android
               Studio, select this setting (the default). If you run the emulator from
               outside Android Studio and want it to use a specific ``adb`` executable,
               deselect this option and specify the SDK Tools location. If this setting is
               incorrect, features such as screenshot capture and drag-and-drop app
               installation don't work.
            -  **When to send crash reports**: Select **Always**, **Never**, or **Ask**.
            -  **Show window frame around device**: By default, emulators with device skin
               files are shown without a surrounding window frame.

      -
         - Settings > Proxy
         -

            By default, the emulator uses the Android Studio HTTP proxy settings. This
            screen lets you manually define an HTTP proxy configuration for the emulator.
            For more information, see `Use the emulator with a proxy <#/studio/run/emulator-networking#proxy>`__.

      -
         - Settings > Advanced
         -

            -  **OpenGL ES renderer**: Select the graphics acceleration type. (This is
               equivalent to the `-gpu command line
               option <#/studio/run/emulator-acceleration#command-gpu>`__.)

               -  **Autodetect based on host**: Let the emulator choose hardware or software
                  graphics acceleration based on your computer setup. It checks whether your
                  GPU driver matches a list of known faulty GPU drivers, and if it does, the
                  emulator disables graphics hardware emulation and instead uses the CPU.
               -  **ANGLE**: (Windows only.) Use `ANGLE Direct3D <https://chromium.googlesource.com/angle/angle/+/master/README.md>`__
                  to render graphics in software.
               -  **SwiftShader**: Use
                  `SwiftShader <https://swiftshader.googlesource.com/SwiftShader>`__ to
                  render graphics in software.
               -  **Desktop native OpenGL**: Use the GPU on your host computer. This option
                  is typically the fastest. However, some drivers have issues with rendering
                  OpenGL graphics, so it might not be a reliable option.

            -  **OpenGL ES API level**: Select the maximum version of OpenGL ES to use in
               the emulator.

               -  **Autoselect**: Let the emulator choose the OpenGL ES version based on the
                  host and guest support.
               -  **Renderer maximum (up to OpenGL ES 3.1)**: Attempt to use the maximum
                  version of OpenGL ES.
               -  **Compatibility (OpenGL ES 1.1/2.0)**: Use the version of OpenGL ES that
                  is compatible with most environments.

      -
         - Help > Keyboard Shortcuts
         -

            This pane provides a complete list of keyboard shortcuts for the emulator. To
            open this pane while working in the emulator, press F1 (Command+/ on macOS).

            For the shortcuts to work, the **Send keyboard shortcuts** option in the
            **General** settings pane must be set to **Emulator controls (default)**.

      -
         - Help > Emulator Help
         -

            To go to the online documentation for the emulator, click **Documentation**.

            To file a bug against the emulator, click **Send feedback**. For more
            information, learn `how to report emulator bugs <#/studio/report-bugs#emulator-bugs>`__.

      -
         - Help > About
         -

            See which ``adb`` port the emulator uses as well as the Android and emulator
            version numbers. Compare the latest available emulator version with your version
            to determine whether you have the latest software installed.

            The emulator serial number is **emulator-**\ ``adb_port``, which you can specify
            as an ``adb`` command-line option, for example.

Last updated 2024-03-04 UTC.


.. |Emulator extended controls icon| image:: https://developer.android.google.cn/static/studio/images/buttons/emulator-extended-controls.png
   :class: inline-icon
.. |My Location icon| image:: https://developer.android.google.cn/static/images/tools/e-ilocation.png
   :class: inline-icon
.. |image-emulator-navigate_icon| image:: https://developer.android.google.cn/static/studio/images/buttons/emulator-navigate_icon.png
   :class: inline- icon
.. |Run icon| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-run.png
   :class: inline-icon
.. |Directional Pad Control| image:: https://developer.android.google.cn/static/images/tools/e-dpad.png
   :width: 244px

/Use snapshots
==============

.. https://developer.android.google.cn/studio/run/emulator-snapshots?hl=en

.. container:: devsite-article-body clearfix

   A *snapshot* is a stored image of an Android Virtual Device (AVD) that
   preserves the entire state of the device at the time that it was saved –
   including OS settings, application state, and user data. You can return to a
   saved system state by loading a snapshot, saving you the time of waiting for
   the operating system and applications on the virtual device to restart, as
   well as saving you the effort of bringing your app back to the state at which
   you want to resume your testing. Starting a virtual device by loading a
   snapshot is much like waking a physical device from a sleep state, as opposed
   to booting it from a powered-off state.

   For each AVD, you can have one *Quick Boot* snapshot and any number of
   general snapshots.

   The simplest way to take advantage of snapshots is to use a Quick Boot
   snapshot. By default, each AVD is set to automatically save a Quick Boot
   snapshot on exit and load from a Quick Boot snapshot on start.

   The first time that an AVD starts, it must perform a *cold boot*, just like
   powering on a device. If Quick Boot is enabled, all subsequent starts load
   from the specified snapshot, and the system is restored to the state saved in
   that snapshot.

   Snapshots are valid for the system image, AVD configuration, and emulator
   features they are saved with. When you make a change in any of these areas,
   all snapshots of the affected AVD become invalid. Any update to the Android
   Emulator, system image, or AVD settings resets the AVD's saved state, so the
   next time you start the AVD, it must perform a cold boot.

   Most controls for saving, loading, and managing snapshots are in the
   **Snapshots** and **Settings** tabs in the **Snapshots** pane. If you're
   running the emulator in a tool window in Android Studio, the **Snapshots**
   pane button is in the emulator toolbar. If you're running the emulator in a
   standalone window outside of Android Studio, the **Snapshots** pane is in the
   `Extended controls <#extended>`__ window.

   |image-snapshots-screenshot_2x|

   You can also control the Quick Boot options when `starting the emulator from the command line <#/studio/run/emulator-commandline#startup-options>`__.

   .. rubric:: Save Quick Boot snapshots
      :name: save-snapshots-on-exit

   You can specify whether the emulator automatically saves a snapshot when you
   close. To control this behavior, proceed as follows:

   #. Open the snapshots settings. If the emulator is embedded in Android
      Studio, click on **Snapshots** in the toolbar. If the emulator is in a
      separate window, open the `Extended controls <#extended>`__ window.

   #. In the **Snapshots** category of controls, navigate to the **Settings**
      tab.

   #. Use the **Auto-save current state to Quickboot** menu to select one of the
      following options:

      -  **Yes**: Always save an AVD snapshot when you close the emulator. This
         is the default.

         **Note:**\  When automatic Quick Boot snapshots are enabled, you can
         skip saving a Quick Boot snapshot by holding the Shift key down when
         you close the emulator.

      -  **No**: Don't save an AVD snapshot when you close the emulator.

   Your selection applies only to the AVD that is currently open. You can't save
   snapshots while ADB is offline (such as while the AVD is still booting).

   .. rubric:: Save general snapshots
      :name: save-general-snapshot-now

   Whereas you can only have one Quick Boot snapshot for each AVD, you can have
   multiple general snapshots for each AVD.

   To save a general snapshot, open the **Snapshots** pane and click the **Take
   snapshot** button in its lower-right corner.

   To edit the name and description of the selected snapshot, click the edit
   |image-edit-snapshot-button| button at the bottom of the pane.

   .. rubric:: Delete a snapshot
      :name: delete-snapshot

   To manually delete a snapshot, open the **Snapshots** pane, select the
   snapshot, and click the delete |image-delete-snapshot-button| button at the bottom of the pane.

   You can also specify whether you would like the emulator to automatically
   delete snapshots when they become invalid, such as when the AVD settings or
   emulator version change. By default, the emulator asks you whether you want
   it to delete invalid snapshots. You can change this setting with the **Delete
   invalid snapshots** menu in the **Settings** tab of the **Snapshots** pane.

   .. rubric:: Load a snapshot
      :name: load-snapshot

   To load a snapshot at any time, open the emulator's **Snapshots** pane,
   select the **Snapshots** category, choose a snapshot, and click the load
   |image-load-snapshot-button| button at the bottom of the pane.

   In Android Studio 3.2 and higher, each device configuration includes a **Boot
   option** control in the advanced settings in the `Virtual Device Configuration <#/studio/run/managing-avds>`__ dialog. You can use the control
   to specify which snapshot to load when starting that AVD.

   .. rubric:: Disable Quick Boot
      :name: disable-all-quickboot

   If you want to disable Quick Boot so your AVD always performs a cold boot, do
   the following:

   #. Select **Tools > Device Manager** and click **Edit this AVD** |image-avd-edit|.
   #. Click **Show Advanced Settings** and scroll down to **Emulated
      Performance**.
   #. Select **Cold boot**.

   .. rubric:: Cold boot once
      :name: cold-boot-once

   Instead of disabling Quick Boot completely, you can cold boot once by
   clicking **Cold Boot Now** from the AVD's menu in the **Device Manager**.

   |image-avd-coldboot-callout_2x|

   .. rubric:: Snapshot requirements and troubleshooting
      :name: quickboot-troubleshooting

   -  Snapshots don't work with Android 4.0.4 (API level 15) or lower.
   -  Snapshots don't work with ARM system images for Android 8.0 (API level
      26).
   -  If the emulator fails to boot from a snapshot, select **Cold Boot Now**
      for the AVD in the Device Manager and `submit a bug report <#/studio/report-bugs>`__.
   -  Snapshots are not reliable when software rendering is enabled. If
      snapshots don't work, click **Edit this AVD** |image-avd-edit| in the **Device
      Manager** and change **Graphics** to either **Hardware** or **Automatic**.
   -  Loading or saving a snapshot is a memory-intensive operation. If you don't
      have enough RAM free when a load or save operation begins, the operating
      system may swap the contents of RAM to the hard disk, which can greatly
      slow the operation. If you experience very slow snapshot loads or saves,
      you may be able to speed these operations by freeing RAM. Closing
      applications that are not essential for your work is a good way to free
      RAM.

Last updated 2023-04-12 UTC.


.. |image-snapshots-screenshot_2x| image:: https://developer.android.google.cn/static/studio/images/run/snapshots-screenshot_2x.png
   :width: 814px
.. |image-edit-snapshot-button| image:: https://developer.android.google.cn/static/studio/images/buttons/edit-snapshot-button.png
   :class: inline-icon
.. |image-delete-snapshot-button| image:: https://developer.android.google.cn/static/studio/images/buttons/delete-snapshot-button.png
   :class: inline-icon
.. |image-load-snapshot-button| image:: https://developer.android.google.cn/static/studio/images/buttons/load-snapshot-button.png
   :class: inline-icon
.. |image-avd-edit| image:: https://developer.android.google.cn/static/studio/images/buttons/avd-edit.png
   :class: inline-icon
.. |image-avd-coldboot-callout_2x| image:: https://developer.android.google.cn/static/studio/images/run/avd-coldboot-callout_2x.png
   :width: 856px
.. |image-avd-edit| image:: https://developer.android.google.cn/static/studio/images/buttons/avd-edit.png
   :class: inline-icon

/Use the emulator from the command line
=======================================

.. https://developer.android.google.cn/studio/run/emulator-commandline?hl=en

.. container:: devsite-article-body clearfix

   The Android SDK includes an Android device emulator—a virtual device that
   runs on your computer. The Android Emulator lets you develop and test Android
   apps without using a physical device.

   This page describes command-line features that you can use with the Android
   Emulator. For information about using the Android Emulator UI, see `Run apps on the Android Emulator <#/studio/run/emulator>`__.

   .. rubric:: Start the emulator
      :name: starting

   Use the ``emulator`` command to start the emulator, as an alternative to
   `running your project <#/studio/run/emulator#runningapp>`__ or `starting it through the AVD Manager <#/studio/run/emulator#runningemulator>`__.

   Here's the basic command-line syntax for starting a virtual device from a
   terminal prompt:

   .. code:: none

      emulator -avd avd_name [ {-option [value]} … ]

   Or

   .. code:: none

      emulator @avd_name [ {-option [value]} … ]

   For example, if you launch the emulator from within Android Studio running on
   a Mac, the default command line will be similar to the following:

   .. code:: none

      /Users/janedoe/Library/Android/sdk/emulator/emulator -avd Nexus_5X_API_23 -netdelay none -netspeed full

   You can specify startup options when you start the emulator, but not after it
   has started.

   For a list of AVD names, enter the following command:

   .. code:: none

      emulator -list-avds

   Use this option to display a list of AVD names from your Android home
   directory. You can override the default home directory by setting the
   ``ANDROID_SDK_HOME`` environment variable that specifies the root of the
   user-specific directory where all configuration and AVD content is stored.

   You can set the environment variable in the terminal window before launching
   a virtual device or through your user settings in the operating system. For
   example, in your ``.bashrc`` file on Linux.

   To stop the Android Emulator, close the emulator window.

   .. rubric:: Install an app
      :name: apps

   In addition to installing an app through Android Studio or the `emulator UI <#/studio/run/emulator#tasks>`__, you can install your app on a virtual
   device by using the `adb <#/tools/help/adb#move>`__ utility.

   To use ``adb`` to install, run, and test your app, follow these general
   steps:

   #. Build and package your app into an APK, as described in `Build and run your app <#/studio/run>`__.
   #. Start the emulator from the command line, as described in the previous
      section, using any startup options necessary.
   #. Install your app using `adb <#/tools/help/adb#move>`__.
   #. Run and test your app on the emulator.
      While the emulator is running, you can use the `Emulator console <#/studio/run/emulator-console>`__ to issue commands as needed.

   To uninstall an app, do so as you would on an Android device.

   The virtual device preserves the app and its state data across restarts in a
   user data disk partition (``userdata-qemu.img``). To clear this data, start
   the emulator with the ``-wipe-data`` option or wipe the data in the AVD
   Manager. For more information about the user data partition and other
   storage, see the following section.

   **Note:** The ``adb`` utility views the virtual device as an actual physical
   device. For this reason, you might have to use the ``-d`` flag with some
   common ``adb`` commands, such as ``install``. The ``-d`` flag lets you
   specify which of several connected devices to use as the target of a command.
   If you don't specify ``-d``, the emulator targets the first device in its
   list.

   .. rubric:: Understand the default directories and files
      :name: filedir

   The emulator uses associated files, of which the AVD system and data
   directories are the most important. It's helpful to understand the emulator
   directory structure and files when specifying command-line options, although
   you typically don't need to modify the default directories or files.

   The Android Emulator uses the Quick Emulator
   (`QEMU <http://wiki.qemu.org/>`__) hypervisor. Initial versions of the
   Android Emulator used QEMU 1 (goldfish), and later versions use QEMU 2
   (ranchu).

   .. rubric:: AVD system directory
      :name: system-filedir

   The system directory contains the Android system images that the emulator
   uses to simulate the operating system. This directory has platform-specific,
   read-only files shared by all AVDs of the same type, including API level, CPU
   architecture, and Android variant. The default locations are the following:

   -  macOS and Linux -
      ``~/Library/Android/sdk/system-images/android-``\ ``apiLevel``\ ``/``\ ``variant``\ ``/``\ ``arch``\ ``/``
   -  Microsoft Windows XP -
      ``C:\Documents and Settings\``\ ``user``\ ``\Library\Android\sdk\system-images\android-``\ ``apiLevel``\ ``\``\ ``variant``\ ``\``\ ``arch``\ ``\``
   -  Windows Vista -
      ``C:\Users\``\ ``user``\ ``\Library\Android\sdk\system-images\android-``\ ``apiLevel``\ ``\``\ ``variant``\ ``\``\ ``arch``\ ``\``

   Where:

   -  ``apiLevel`` is a numeric API level or a letter for preview releases. For
      example, ``android-M`` indicates the Android Marshmallow preview. On
      release, it became API level 23, designated by ``android-23``.
   -  ``variant`` is a name corresponding to specific features implemented by
      the system image. For example, ``google_apis`` or ``android-wear``.
   -  ``arch`` is the target CPU architecture. For example, ``x86``.

   Use the ``-sysdir`` option to specify a different system directory for the
   AVD.

   The emulator reads the following files from the system directory:

   **Table 1.** System directory files read by the Android Emulator

   .. list-table::
      :widths: 27 27 27
      :header-rows: 1

      - 

         - File
         - Description
         - Option to specify a different file
      - 

         - ``kernel-qemu`` or ``kernel-ranchu``
         - The binary kernel image for the AVD. ``kernel-ranchu`` is the QEMU 2
            emulator, the latest version.
         - ``-kernel``
      - 

         - ``ramdisk.img``
         - The boot partition image. This is a subset of ``system.img`` loaded
            by the kernel initially before the system image is mounted. It
            typically contains just a few binaries and initialization scripts.
         - ``-ramdisk``
      - 

         - ``system.img``
         - The read-only, initial version of the system image. Specifically, the
            partition containing the system libraries and data corresponding to
            the API level and variant.
         - ``-system``
      - 

         - ``userdata.img``
         - The initial version of the data partition, which appears as ``data/``
            in the emulated system and contains all writable data for the AVD.
            The emulator uses this file when you create a new AVD or use the
            ``‑wipe-data`` option. For more information, see the
            ``userdata-qemu.img`` file description in the following section.
         - ``-initdata``
            ``-init-data``

   .. rubric:: AVD data directory
      :name: data-filedir

   The AVD data directory, also called the content directory, is specific to a
   single AVD instance and contains all modifiable data for the AVD.

   The default location is the following, where ``name`` is the AVD name:

   -  macOS and Linux - ``~/.android/avd/``\ ``name``\ ``.avd/``
   -  Microsoft Windows XP -
      ``C:\Documents and Settings\``\ ``user``\ ``\.android\``\ ``name``\ ``.avd\``
   -  Windows Vista, and higher -
      ``C:\Users\``\ ``user``\ ``\.android\``\ ``name``\ ``.avd\``

   Use the ``-datadir`` option to specify a different AVD data directory.

   The following table lists the most important files contained in this
   directory:

   **Table 2.** Important files in the AVD data directory

   .. list-table::
      :widths: 27 27 27
      :header-rows: 1

      - 

         - File
         - Description
         - Option to specify a different file
      - 

         - ``userdata-qemu.img``
         - The content of the data partition, which appears as ``data/`` in the
            emulated system. When you create a new AVD or when you use the
            ``-wipe-data`` option to reset the AVD to the factory defaults, the
            emulator copies the ``userdata.img`` file in the system directory to
            create this file.

            Each virtual device instance uses a writable user-data image to
            store user and session-specific data. For example, it uses the image
            to store a unique user's installed app data, settings, databases,
            and files. Each user has a different ``ANDROID_SDK_HOME`` directory
            that stores the data directories for the AVDs created by that user.
            Each AVD has a single ``userdata-qemu.img`` file.
         - ``-data``
      - 

         - ``cache.img``
         - The cache partition image, which appears as ``cache/`` in the
            emulated system. It's empty when you first create an AVD or use the
            ``-wipe-data`` option. It stores temporary download files and is
            populated by the download manager and sometimes the system. For
            example, the browser uses it to cache downloaded web pages and
            images while the emulator is running. When you power off the virtual
            device, the file is deleted. You can persist the file by using the
            ``-cache`` option.
         - ``-cache``
      - 

         - ``sdcard.img``
         - (Optional) An SD card partition image that lets you simulate an SD
            card on a virtual device. You can create an SD card image file in
            the `AVD Manager <#/studio/run/managing-avds>`__ or using the
            `mksdcard <#/studio/command-line/mksdcard>`__ tool. The file is
            stored on your development computer and must be loaded at startup.

            When defining an AVD in the AVD Manager, you can choose to use an
            automatically managed SD card file or a file that you created with
            the ``mksdcard`` tool. You can view the ``sdcard.img`` file
            associated with an AVD in the AVD Manager. The ``-sdcard`` option
            overrides the SD card file specified in the AVD.

            You can browse, send files to, and copy and remove files from a
            simulated SD card by using the emulator UI or the
            `adb <#/studio/command-line/adb#copyfiles>`__ utility while the
            virtual device is running. You can't remove a simulated SD card from
            a running virtual device.

            To copy files to the SD card file before loading it, mount the image
            file as a loop device and then copy the files. Or, use a utility,
            such as the ``mtools`` package, to copy the files directly to the
            image.

            The emulator treats the file as a pool of bytes, so the SD card
            format doesn't matter.

            The ``-wipe-data`` option doesn't affect this file. If you want to
            clear the file, delete the file and then re-create it using the AVD
            Manager or the ``mksdcard`` tool. Changing the size of the file also
            deletes the file and creates a new file.
         - ``-sdcard``

   .. rubric:: List directories and files used by the emulator
      :name: listing-filedir

   You can discover where files are located in two ways:

   -  Use the ``-verbose`` or ``-debug init`` option when you start the emulator
      from the command line. Look at the output.

   -  Use the ``emulator`` ``-help-``\ ``option`` command to list a default
      directory. For example:

      .. code:: none

         emulator -help-datadir

           Use '-datadir <dir>' to specify a directory where writable image files
           will be searched. On this system, the default directory is:

               /Users/me/.android

           See '-help-disk-images' for more information about disk image files.

   .. rubric:: Command-line startup options
      :name: startup-options

   This section lists options you can supply on the command line when you start
   the emulator.

   **Note:** The Android Emulator is continually under development to make it
   more reliable. For status on the issues reported against various command-line
   options and to report bugs, see the `Android Issue Tracker <https://issuetracker.google.com/issues?q=componentid:192708&s=modified_time:descfirst>`__.

   .. rubric:: Commonly used options
      :name: common

   The following table lists command-line startup options that you might use
   more often:

   **Table 3.** Commonly used command-line options

   .. list-table::
      :widths: 40 40

      - 

         - Command-line option
         - Description
      - 

         - **Quick Boot**
         - 
      - 

         - ``-no-snapshot-load``
         - Performs a cold boot and saves the emulator state on exit.
      - 

         - ``-no-snapshot-save``
         - Performs a quick boot if possible, but does not save the emulator
            state on exit.
      - 

         - ``-no-snapshot``
         - Disables the Quick Boot feature completely and doesn't load or save
            the emulator state.
      - 

         - **Device Hardware**
         - 
      - 

         - ``-camera-back``\ ``mode``
            ``-camera-front``\ ``mode``
         - Sets the emulation mode for a camera facing back or front. This
            overrides any camera setting in the AVD.
            ``mode`` can be any of the following values:

            -  ``emulated`` - The emulator simulates a camera in the software.
            -  ``webcam``\ ``n`` - The emulator uses a webcam connected to your
               development computer, specified by number. For a list of webcams,
               use the ``-webcam-list`` option. For example, ``webcam0``.
            -  ``none`` - Disables the camera in the virtual device.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -camera-back webcam0
      - 

         - ``-webcam-list``
         - Lists the webcams on your development computer that are available for
            emulation. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -webcam-list
                       List of web cameras connected to the computer:
                       Camera 'webcam0' is connected to device 'webcam0'
                       on channel 0 using pixel format 'UYVY'

            In the example, the first ``webcam0`` is the name you use on the
            command line. The second ``webcam0`` is the name used by the OS on
            the development computer. The second name varies depending on the
            OS.

            As of SDK Tools 25.2.4, the AVD name is required.
      - 

         - **Disk images and memory**
         - 
      - 

         - ``-memory``\ ``size``
         - Specifies the physical RAM size, from 128 to 4096 MBs. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -memory 2048

            This value overrides the AVD setting.
      - 

         - ``-sdcard``\ ``filepath``
         - Specifies the filename and path to an SD card partition image file.
            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -sdcard C:/sd/sdcard.img

            If the file isn't found, the emulator still launches, but without an
            SD card. The command returns a **No SD Card Image** warning.

            If you don't specify this option, the default is ``sdcard.img`` in
            the data directory unless the AVD specifies something different. For
            details about emulated SD cards, see `AVD data directory <#data-filedir>`__.
      - 

         - ``-wipe-data``
         - Deletes user data and copies data from the initial data file. This
            option clears the data for the virtual device and returns it to the
            same state as when it was first defined. All installed apps and
            settings are removed. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -wipe-data

            By default, the user data file is ``userdata-qemu.img`` and the
            initial data file is ``userdata.img``. Both of these files reside in
            the data directory. The ``-wipe-data`` option doesn't affect the
            ``sdcard.img`` file. For more information about user data, see the
            section called `Understand the default directories and files <#filedir>`__.
      - 

         - **Debug**
         - 
      - 

         - ``-debug``\ ``tags``
         - Enables or disables the display of debug messages for one or more
            tags. Separate multiple tags by a space, comma, or column. For
            example:

            .. code:: none

               $ emulator @Nexus_5X_API_23 -debug init,metrics

            To disable a tag, place a dash (-) in front of it. For example, the
            following option displays all debug messages, except the ones
            related to network sockets and metrics:

            ``-debug all,-socket,-metrics``

            For a list of tags and descriptions, use the ``-help-debug-tags``
            option. For example:

            .. code:: none

               emulator -help-debug-tags

            You can define the default debug tags in the
            `ANDROID_VERBOSE <#/studio/command-line/variables#android_verbose>`__
            environment variable. Define the tags you want to use in a
            comma-delimited list. Here's an example that shows how to specify
            the ``socket`` and ``gles`` tags:

            .. code:: none

               ANDROID_VERBOSE=socket,gles

            It's equivalent to using:

            ``-debug-socket -debug-gles``

            or

            ``-debug socket,gles``
      - 

         - ``-debug-``\ ``tag``
            ``-debug-no-``\ ``tag``
         - Enables a specific debug message type. Use the ``no`` form to disable
            a debug message type. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -debug-all -debug-no-metrics

            For a list of tags, use the ``emulator -help-debug-tags`` command.
      - 

         - ``-logcat``\ ``logtags``
         - Enables the display of Logcat messages for one or more tags and
            writes them to the terminal window. For example, the following
            command enables error messages from all components:

            .. code:: none

               emulator @Nexus_5X_API_23 -logcat *:e

            ``logtags`` uses the same format as the ``adb logcat``\ ``logtags``
            command. Enter ``adb logcat -help`` for more information. It's a
            list of space- or comma-separated log filters of the format
            ``componentName``\ ``:``\ ``logLevel``. ``componentName`` is either
            a wildcard asterisk (``*``) or a component name, such as
            ``ActivityManager``, ``SystemServer``, ``InputManager``, or
            ``WindowManager``.

            ``logLevel`` is one of these values:

            -  ``v`` - verbose
            -  ``d`` - debug
            -  ``i`` - informative
            -  ``w`` - warning log level
            -  ``e`` - error
            -  ``s`` - silent

            The following example displays GSM component messages at the
            informative log level:

            .. code:: none

               emulator @Nexus_5X_API_23 -logcat '*:s GSM:i'

            If you don't supply the ``-logcat`` option on the command line, the
            emulator looks for the
            `ANDROID_LOG_TAGS <#/studio/command-line/variables#android_log_tags>`__
            environment variable. If ``ANDROID_LOG_TAGS`` is defined with a
            valid ``logtags`` value and isn't empty, the emulator uses its value
            to enable Logcat output to the terminal by default. You can also
            redirect the same or other log messages to the terminal through
            ``adb``.

            For more information about Logcat and ``adb``, see `Logcat command-line tool <#/studio/command-line/logcat>`__, `View and write logs with Logcat <#/studio/debug/am-logcat>`__,
            `Log <#/reference/android/util/Log>`__ class, and `Issue adb commands <#/studio/command-line/adb#issuingcommands>`__.
      - 

         - ``-show-kernel``
         - Displays kernel debug messages in the terminal window. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -show-kernel

            One use of this option is to check that the boot process works
            correctly.
      - 

         - ``-verbose``
         - Prints emulator initialization messages to the terminal window. For
            example:

            .. code:: none

               emulator @Nexus_5X_API_23 -verbose

            It displays which files and settings are actually selected when
            starting a virtual device defined in an AVD. This option is the same
            as specifying ``-debug-init``.
      - 

         - **Network**
         - 
      - 

         - ``-dns-server``\ ``servers``
         - Uses the specified DNS servers. ``servers`` is a comma-separated list
            of up to four DNS server names or IP addresses. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -dns-server 192.0.2.0,
               192.0.2.255

            By default, the emulator tries to detect the DNS servers you're
            using and sets up special aliases in the emulated firewall network
            to allow the Android system to connect directly to the servers. Use
            the ``-dns-server`` option to specify a different list of DNS
            servers.
      - 

         - ``-http-proxy``\ ``proxy``
         - Makes all TCP connections through a specified HTTP/HTTPS proxy. If
            your emulator must access the internet through a proxy server, you
            can use this option or the ``http_proxy`` environment variable to
            set up the appropriate redirection. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -http-proxy myserver:1981

            ``proxy`` can be one of the following:

            | ``http://``\ ``server``\ ``:``\ ``port``
            | ``http://``\ ``username``\ ``:``\ ``password``\ ``@``\ ``server``\ ``:``\ ``port``

            The ``http://`` prefix can be omitted.

            If this option isn't supplied, the emulator looks up the
            ``http_proxy`` environment variable and automatically uses any value
            matching the ``proxy`` format. For more information, see `Using the emulator with a proxy <#/studio/run/emulator-networking#proxy>`__.
      - 

         - ``-netdelay``\ ``delay``
         - Sets network latency emulation to one of the following ``delay``
            values in milliseconds:

            -  ``gsm`` - GSM/CSD (min 150, max 550).
            -  ``hscsd`` - HSCSD (min 80, max 400).
            -  ``gprs`` - GPRS (min 35, max 200).
            -  ``edge`` - EDGE/EGPRS (min 80, max 400).
            -  ``umts`` - UMTS/3G (min 35, max 200).
            -  ``hsdpa`` - HSDPA (min 0, max 0).
            -  ``lte`` - LTE (min 0, max 0).
            -  ``evdo`` - EVDO (min 0, max 0).
            -  ``none`` - No latency, the default (min 0, max 0).
            -  ``num`` - Specifies exact latency.
            -  ``min``\ ``:``\ ``max`` - Specifies individual minimum and
               maximum latencies.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -netdelay gsm

            The emulator supports network throttling as well as higher
            connection latencies. You can define it either through the skin
            configuration or with the ``‑netspeed`` and ``-netdelay`` options.
      - 

         - ``-netfast``
         - Disables network throttling. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -netfast

            This option is the same as specifying
            ``-netspeed full -netdelay none``. These are the default values for
            these options.
      - 

         - ``-netspeed``\ ``speed``
         - Sets the network speed emulation. Specifies the maximum network
            upload and download speeds with one of the following ``speed``
            values in kbps:

            -  ``gsm`` - GSM/CSD (up: 14.4, down: 14.4).
            -  ``hscsd`` - HSCSD (up: 14.4, down: 57.6).
            -  ``gprs`` - GPRS (up: 28.8, down: 57.6).
            -  ``edge`` - EDGE/EGPRS (up: 473.6, down: 473.6).
            -  ``umts`` - UMTS/3G (up: 384.0, down: 384.0).
            -  ``hsdpa`` - HSDPA (up: 5760.0, down: 13,980.0).
            -  ``lte`` - LTE (up: 58,000, down: 173,000).
            -  ``evdo`` - EVDO (up: 75,000, down: 280,000).
            -  ``full`` - No limit, the default (up: 0.0, down: 0.0).
            -  ``num`` - Specifies both upload and download speed.
            -  ``up``\ ``:``\ ``down`` - Specifies individual up and down
               speeds.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -netspeed edge

            The emulator supports network throttling as well as higher
            connection latencies. You can define it either through the skin
            configuration or with the ``‑netspeed`` and ``-netdelay`` options.
      - 

         - ``-port``\ ``port``
         - Sets the TCP port number that's used for the console and ``adb``. For
            example:

            .. code:: none

               emulator @Nexus_5X_API_23 -port 5556

            The default value is 5554 for the first virtual device instance
            running on the your machine. A virtual device normally occupies a
            pair of adjacent ports: a console port and an ``adb`` port. The
            console of the first virtual device running on a particular machine
            uses console port 5554 and ``adb`` port 5555. Subsequent instances
            use port numbers increasing by two. For example, 5556/5557,
            5558/5559, and so on. The range is 5554 to 5682, allowing for 64
            concurrent virtual devices.

            The port assignments are often the same as specifying
            ``-ports``\ ``port``\ ``,{``\ ``port``\ ``+ 1}``.
            ``{``\ ``port``\ ``+ 1}`` must be free and is reserved for ``adb``.
            If any of the console or ``adb`` ports are already in use, the
            emulator won't start.

            The ``‑port`` option reports which ports and serial number the
            virtual device is using and warns if there are any issues with the
            values you provided. In the emulator UI, you can see the console
            port number in the window title and view the ``adb`` port number by
            selecting **Help** > **About**.

            Note that if the ``port`` value is not even and is in the range 5554
            to 5584, the virtual device will start but not be visible when you
            use the ``adb devices`` command, if the ``adb server`` starts after
            the emulator. For this reason, we recommend using an even console
            port number.
      - 

         - ``-ports``
            ``console-port``\ ``,``\ ``adb-port``
         - Sets the TCP ports used for the console and ``adb``. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -ports 5556,5559

            The valid ports range is 5554 to 5682, allowing for 64 concurrent
            virtual devices. The ``-ports`` option reports which ports and
            serial number the emulator instance is using and warns if there are
            any issues with the values you provided.

            We recommend using the ``-port`` option instead, where possible. The
            ``-ports`` option is available for network configurations that
            require special settings.

            For more information about setting console and ``adb`` ports, see
            the ``-port`` option.
      - 

         - ``-tcpdump``\ ``filepath``
         - Captures network packets and stores them in a file. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -tcpdump /path/dumpfile.cap

            Use this option to begin capturing all network packets that are sent
            through the virtual Ethernet LAN of the emulator. Afterward, you can
            use a tool like Wireshark to analyze the traffic.

            Note that this option captures all ethernet packets and isn't
            limited to TCP connections.
      - 

         - **System**
         - 
      - 

         - ``-accel``\ ``mode``
         - Configures emulator VM acceleration. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -accel auto

            Accelerated emulation works for x86 and x86_64 system images only.
            On Linux, it relies on KVM. On Windows and Mac, it relies on an
            Intel CPU and Intel HAXM driver. This option is ignored if you're
            not emulating an x86 or x86_64 device.

            Valid values for ``mode`` are:

            -  ``auto`` - Determines automatically if acceleration is supported
               and uses it when possible (default).
            -  ``off`` - Disables acceleration entirely, which is primarily
               useful for debugging.
            -  ``on`` - Forces acceleration. If KVM or HAXM isn't installed or
               usable, the emulator won't start and prints an error message.

            For more information, see `Configure hardware acceleration for the Android Emulator <#/studio/run/emulator-acceleration>`__.
      - 

         - ``-accel-check``
         - Checks whether a required hypervisor for emulator VM acceleration is
            installed (HAXM or KVM). For example:

            .. code:: none

               emulator -accel-check

            For more information, see `Check if a hypervisor is installed <#/studio/run/emulator-acceleration#accel-check>`__.
      - 

         - ``-engine``\ ``engine``
         - Specifies the emulator engine:

            -  ``auto`` - Automatically selects an engine (default).
            -  ``classic`` - Uses the older QEMU 1 engine.
            -  ``qemu2`` - Uses the newer QEMU 2 engine.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -engine auto

            Auto-detection should choose the value that provides the best
            performance when emulating a particular AVD. Use the ``-engine``
            option for debugging and comparison purposes only.
      - 

         - ``-gpu``\ ``mode``
         - Selects the GPU emulation mode. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -gpu swiftshader_indirect

            For more information, see `Configure graphics acceleration <#/studio/run/emulator-acceleration#accel-graphics>`__.
      - 

         - ``-no-accel``
         - Disables emulator VM acceleration when using an x86 or x86_64 system
            image. It's useful for debugging only and is the same as specifying
            ``-accel off``. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -no-accel

            For more information, see `Configure hardware acceleration for the Android Emulator <#/studio/run/emulator-acceleration>`__.
      - 

         - ``-nojni``
            ``-no-jni``
         - Disables extended Java Native Interface (JNI) checks in the Android
            Dalvik or ART runtime. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -nojni

            When you start a virtual device, extended JNI checks are enabled by
            default. For more information, see `JNI tips <#/training/articles/perf-jni>`__.
      - 

         - ``-selinux {disabled|permissive}``
         - Sets the Security-Enhanced Linux
            (`SELinux <https://en.wikipedia.org/wiki/Security-Enhanced_Linux>`__)
            security module to either ``disabled`` or ``permissive`` mode on a
            Linux operating system. For example:

            .. code:: none

               me-linux$ emulator @Nexus_5X_API_23 -selinux permissive

            By default, SELinux is in ``enforcing`` mode, meaning the security
            policy is enforced. ``permissive`` mode loads the SELinux policy but
            doesn't enforce it. This option only logs policy violations.
            ``disabled`` mode disables kernel support for SELinux.
      - 

         - ``-timezone``\ ``timezone``
         - Sets the time zone for the virtual device to ``timezone`` instead of
            the host time zone. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -timezone Europe/Paris

            By default, the emulator uses the time zone of your development
            computer. Use this option to specify a different time zone or if the
            automatic detection isn't working correctly. The ``timezone`` value
            must be in
            `zoneinfo <https://en.wikipedia.org/wiki/List_of_tz_database_time_zones>`__
            format, which is ``area``\ ``/``\ ``location`` or
            ``area``\ ``/``\ ``subarea``\ ``/``\ ``location``. For example:

            -  ``America/Los_Angeles``
            -  ``Europe/Paris``
            -  ``America/Argentina/Buenos_Aires``

            The specified time zone must be in the `zoneinfo database <https://www.iana.org/time-zones>`__.
      - 

         - ``-version``
         - Displays the emulator version number. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -version

            Or

            .. code:: none

               emulator -version
      - 

         - **UI**
         - 
      - 

         - ``-no-boot-anim``
         - Disables the boot animation during emulator startup for faster
            booting. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -no-boot-anim

            On slower computers, this option can significantly speed up the boot
            sequence.
      - 

         - ``-screen``\ ``mode``
         - Sets emulated touch screen mode. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -screen no-touch

            ``mode`` can be any of the following values:

            -  ``touch`` - Emulates a touch screen (default).
            -  ``multi-touch`` - Emulates a multi-touch screen.
            -  ``no-touch`` - Disables touch and multi-touch screen emulation.

   .. rubric:: Advanced options
      :name: advanced

   The command-line startup options in the following table are available but not
   commonly used by the average app developer.

   In the descriptions, the *working directory* is the current directory in the
   terminal where you're entering commands. For information about the AVD system
   directory and data directory and the files stored within them, see the
   section about `default directories and files <#filedir>`__.

   Some of these options are appropriate for external app developers, and some
   of them are used primarily by platform developers. *App developers* create
   Android apps and run them on specific AVDs. *Platform developers* work on the
   Android system and run it inside the emulator with no pre-created AVD.

   **Table 4.** Advanced command-line options

   .. list-table::
      :widths: 40 40
      :header-rows: 1

      - 

         - Advanced option
         - Brief description
      - 

         - ``-bootchart``\ ``timeout``
         - Enables bootcharting with a timeout in seconds. Some Android system
            images have a modified init system that integrates a bootcharting
            facility. You can pass a bootcharting timeout period to the system
            with this option. If your init system doesn't have bootcharting
            activated, the option does nothing. This option is primarily useful
            to platform developers, not external app developers.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -bootchart 120
      - 

         - ``-cache``\ ``filepath``
         - Specifies a cache partition image file. Provides a filename and an
            absolute path or a path relative to the data directory to set up a
            persistent cache file. If the file doesn't exist, the emulator
            creates it as an empty file.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -cache
                  ~/.android/avd/Nexus_5X_API_23.avd/cache_persistent.img

            If you don't use this option, the default is a temporary file named
            ``cache.img``. For more information, see `AVD data directory <#data-filedir>`__.
      - 

         - ``-cache-size``\ ``size``
         - Sets the cache partition size in MBs.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -cache-size 1000

            If you don't specify this option, the default is 66 MB. Normally,
            most app developers don't need this option, unless they need to
            download very large files that are larger than the default cache.
            For more information about the cache file, see `AVD data directory <#data-filedir>`__.
      - 

         - ``-data``\ ``filepath``
         - Sets the user data partition image file. Provides a filename and an
            absolute path or a path relative to the working directory to set up
            a persistent user data file. If the file doesn't exist, the emulator
            creates an image from the default ``userdata.img`` file, stores it
            in the filename you specified, and persists user data to it at
            shutdown.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -data
                  ~/.android/avd/Nexus_5X_API_23.avd/userdata-test.img

            If you don't use this option, the default is a file named
            ``userdata-qemu.img``. For more information about the user data
            file, see `AVD data directory <#data-filedir>`__.
      - 

         - ``-datadir``\ ``dir``
         - Specifies a data directory using an absolute path. For more
            information, see `AVD data directory <#data-filedir>`__.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -datadir
                  ~/.android/avd/Nexus_5X_API_23.avd/mytest
      - 

         - ``-force-32bit``
         - Uses the 32-bit emulator on 64-bit platforms. Occasionally, this
            option is useful for testing or debugging. For example, there was an
            issue where the emulator would sometimes not run on 64-bit Windows,
            but 32-bit did run. This option was helpful for performing
            comparisons to debug the issue. Here's an example:

            .. code:: none

               emulator @Nexus_5X_API_23 -force-32bit
      - 

         - ``-help-disk-images``
         - Gets help about about disk images. This option provides information
            relevant to both app and platform developers. For example:

            .. code:: none

               emulator -help-disk-images
      - 

         - ``-help-char-devices``
         - Gets help about character *``device``* specifications. A *``device``*
            parameter is required by some emulator options. For example:

            .. code:: none

               emulator -help-char-devices
      - 

         - ``-help-sdk-images``
         - Gets help about disk images relevant to app developers. This option
            gets information about where the image files are located for an AVD
            created with the SDK tools. For example:

            .. code:: none

               emulator -help-sdk-images
      - 

         - ``-help-build-images``
         - Gets help about disk images relevant to platform developers. For
            example:

            .. code:: none

               emulator -help-build-images
      - 

         - ``-initdata``\ ``filepath``
            ``-init-data``\ ``filepath``
         - Specifies the initial version of the data partition. After wiping
            user data, the emulator copies the contents of the specified file to
            user data (by default, the ``userdata-qemu.img`` file) instead of
            using the default ``userdata.img`` file as the initial version.
            Specifies the filename and an absolute path or a path relative to
            the working directory.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -initdata
                  ~/Library/Android/sdk/system-images/android-23/
                  google_apis/x86/userdata-test.img

            If you don't specify a path, it places the file in the system
            directory. For more information, see `AVD system directory <#system-filedir>`__.
      - 

         - ``-kernel``\ ``filepath``
         - Uses a specific emulated kernel. If you don't specify a path, the
            emulator looks in the system directory.

            Use the ``‑show‑kernel`` option to view kernel debug messages.
            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -kernel
                  ~/Library/Android/sdk/system-images/android-23/
                  google_apis/x86/kernel-test.img -show-kernel

            If you don't specify this option, the default is ``kernel-ranchu``.
            For more information, see `AVD system directory <#system-filedir>`__.
      - 

         - ``-noaudio``
            ``-no-audio``
         - Disables audio support for this virtual device. Some Linux and
            Windows computers have faulty audio drivers that cause different
            symptoms, such as preventing the emulator from starting. In this
            case, use this option to overcome the issue. Alternatively, you can
            use the ``QEMU_AUDIO_DRV`` environment variable to change the audio
            backend.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -noaudio
      - 

         - ``-nocache``
            ``-no-cache``
         - Starts the emulator without a cache partition. If you don't use this
            option, the default is a temporary file named ``cache.img``. This
            option is for platform developers only. For more information, see
            `AVD data directory <#data-filedir>`__.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -nocache
      - 

         - ``-no-snapshot``
         - Inhibits both the automatic load and save operations, causing the
            emulator to execute a full boot sequence and to lose its state when
            closed. It overrides the ``-snapshot`` option.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -no-snapshot
      - 

         - ``-no-snapshot-load``
         - Prevents the emulator from loading the AVD state from snapshot
            storage. Performs a full boot.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -no-snapshot-load
      - 

         - ``-no-snapshot-save``
         - Prevents the emulator from saving the AVD state to snapshot storage
            on exit, meaning that all changes will be lost.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -no-snapshot-save
      - 

         - ``-no-snapshot-update-time``
         - Doesn't try to correct the AVD clock time immediately on snapshot
            restore. This option can be useful during testing as it avoids a
            sudden time jump. Time updates are still sent to the AVD about every
            15 seconds.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -no-snapshot-update-time
      - 

         - ``-no-snapstorage``
         - Starts the emulator without mounting a file to store or load state
            snapshots, forcing a full boot and disabling state snapshot
            functionality. This option overrides the ``-snapstorage`` and
            ``-snapshot`` options.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -no-snapstorage
      - 

         - ``-no-window``
         - Disables graphical window display on the emulator. This option is
            useful when running the emulator on servers that have no display.
            You can access the emulator through ``adb`` or the console. For
            example:

            .. code:: none

               emulator @Nexus_5X_API_23 -no-window
      - 

         - ``-partition-size``\ ``size``
         - Specifies the system data partition size in MBs. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -partition-size 1024
      - 

         - ``-prop``\ ``name``\ ``=``\ ``value``
         - Sets an Android system property in the emulator when it boots.
            ``name`` must be a property name labeled as ``qemu_prop`` of at most
            32 characters, without any spaces, and ``value`` must be a string of
            at most 92 characters. For an example, see the
            `property_contexts
            file <https://android.googlesource.com/device/generic/goldfish/+/refs/heads/master/sepolicy/common/property_contexts>`__.
            You can specify several ``‑prop`` options on one command line. This
            option can be useful for debugging. For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -prop qemu.name=value -prop qemu.abc=xyz
      - 

         - ``-qemu``\ ``args``
         - Passes arguments to the QEMU emulator software. Note that QEMU 1 and
            QEMU 2 can use different arguments. When using this option, make
            sure it's the last option specified, as all options after it are
            interpreted as QEMU-specific options. This option is quite advanced
            and should be used only by developers who are *very* familiar with
            QEMU *and* Android emulation.
      - 

         - ``-qemu -h``
         - Displays ``-qemu`` help. For example:

            .. code:: none

               emulator -qemu -h
      - 

         - ``-ramdisk``\ ``filepath``
         - Specifies a ramdisk boot image. Specifies the filename and an
            absolute path or a path relative to the working directory.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -ramdisk
                  ~/Library/Android/sdk/system-images/android-23/
                  google_apis/x86/ramdisk-test.img

            If you don't use this option, the default is the ``ramdisk.img``
            file in the system directory. For more information, see `AVD system directory <#system-filedir>`__.
      - 

         - ``-report-console``\ ``socket``
         - Reports the console port to a remote third party before starting
            emulation. It can be useful for an automated testing script.
            ``socket`` must use one of these formats:

            -  ``tcp:``\ ``port``\ ``[,server][,max=``\ ``seconds``\ ``][,ipv6]``
            -  ``unix:``\ ``port``\ ``[,server][,max=``\ ``seconds``\ ``][,ipv6]``

            For more information, use the ``-help-report-console`` option as
            described in the section about `help for specific options <#help-detailed>`__.
      - 

         - ``-shell``
         - Creates a root shell console on the current terminal. This option
            differs from the
            `adb shell <#/studio/command-line/adb#shellcommands>`__ command
            in the following ways:

            -  It creates a *root* shell that lets you modify many parts of the
               system.
            -  It works even if the ``adb daemon`` in the emulated system is
               broken.
            -  Press Control+C (or Command-C, on macOS) to stop the emulator
               instead of the shell.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -shell
      - 

         - ``-snapshot``\ ``name``
         - Specifies the name of a snapshot within a snapshot storage file for
            automatic start and save operations.

            Rather than executing a full boot sequence, the emulator can resume
            execution from an earlier state snapshot, which is usually
            significantly faster. When you supply this option, the emulator
            loads the snapshot of that name from the snapshot image and saves it
            back under the same name on exit.

            If you don't use this option, the default is a full boot sequence.
            If the specified snapshot doesn't exist, the emulator performs a
            full boot sequence instead and performs a save operation.

            See the ``-snapstorage`` option for information on specifying a
            snapshot storage file and the default file.

            .. code:: none

               emulator @Nexus_5X_API_23 -snapshot snapshot2

            Remember that in the process of loading a snapshot, all contents of
            the system, user data, and SD card images are overwritten with the
            contents they held when the snapshot was made. Unless you save this
            information in a different snapshot, any changes since then are
            lost.

            You can also create a snapshot from the emulator console by using
            the ``avd snapshot save``\ ``name`` command. For more information,
            see `Send Emulator console commands <#/studio/run/emulator-console>`__.
      - 

         - ``-snapshot-list``
         - Displays a list of available snapshots. This command prints a table
            of snapshots that are stored in the snapshot storage file that the
            emulator was started with, then exits. If you specify
            ``-snapstorage``\ ``file`` as well, this command prints a table of
            the snapshots stored in file.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -snapshot-list -snapstorage
                  ~/.android/avd/Nexus_5X_API_23.avd/snapshots-test.img

            You can use the ID and TAG column values in the output as arguments
            for the ``-snapshot`` option.
      - 

         - ``-snapstorage``\ ``filepath``
         - Specifies a repository file that contains all state snapshots. All
            snapshots made during execution are saved in this file. Only
            snapshots in this file can be restored during the emulator run.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -snapstorage
                  ~/.android/avd/Nexus_5X_API_23.avd/snapshots-test.img

            If you don't specify this option, the default is ``snapshots.img``
            in the data directory. If the specified file doesn't exist, the
            emulator will start, but without support for saving or loading state
            snapshots.
      - 

         - ``-sysdir``\ ``dir``
         - Specifies a system directory using an absolute path. For more
            information, see `AVD system directory <#system-filedir>`__. For
            example:

            .. code:: none

               emulator @Nexus_5X_API_23 -sysdir
                  ~/Library/Android/sdk/system-images/android-23/
                  google_apis/x86/test
      - 

         - ``-system``\ ``filepath``
         - Specifies an initial system file. Provides the filename and an
            absolute path or a path relative to the working directory.

            For example:

            .. code:: none

               emulator @Nexus_5X_API_23 -system
                  ~/Library/Android/sdk/system-images/android-23/
                  google_apis/x86/system-test.img

            If you don't use this option, the default is the ``system.img`` file
            in the system directory. For more information, see `AVD system directory <#system-filedir>`__.
      - 

         - ``-use-system-libs``
         - On Linux, uses the system ``libstdc++`` instead of the version
            bundled with the emulator system. Use this option only if the
            emulator won't start normally, and note that it doesn't always work.
            Alternatively, set the
            `ANDROID_EMULATOR_USE_SYSTEM_LIBS <#/studio/command-line/variables#android_emulator_use_system_libs>`__
            environment variable to 1.

            For example:

            .. code:: none

               me-linux$ emulator @Nexus_5X_API_23 -use-system-libs
      - 

         - ``-writable-system``
         - Use this option to have a writable system image during your emulation
            session. To do so:

            #. Start a virtual device with the ``-writable-system`` option.
            #. Enter the ``adb remount`` command from a command terminal to tell
               the emulator to remount ``system/`` as read/write. By default,
               it's mounted as read-only.

            Using this flag creates a temporary copy of the system image that
            can be very large, up to several hundred MBs, but will be destroyed
            when the emulator exits.

   .. rubric:: Deprecated options
      :name: deprecated

   The following command-line options are deprecated:

   -  ``-audio-in``
   -  ``-audio-out``
   -  ``-charmap``
   -  ``-code-profile``
   -  ``-cpu-delay``
   -  ``-dpi-device``
   -  ``-dynamic_skin``
   -  ``-enable-kvm``
   -  ``-gps``
   -  ``-image``
   -  ``-keyset``
   -  ``-help-keys``
   -  ``-help-keyset-file``
   -  ``-nand-limits``
   -  ``-noskin``
   -  ``-no-skin``
   -  ``-onion``
   -  ``-onion-alpha``
   -  ``-onion-rotation``
   -  ``-radio``
   -  ``-ranchu``
   -  ``-raw-keys``
   -  ``-scale``
   -  ``-shared-net-id``
   -  ``-shell-serial``
   -  ``-skin``
   -  ``-skindir``
   -  ``-trace``
   -  ``-useaudio``

   .. rubric:: Get help about command-line options
      :name: help

   This section describes how to get help about the command-line options. It
   provides more in-depth information about the commonly used emulator
   command-line options that are available when you start the emulator.

   .. rubric:: List all emulator options
      :name: help-all

   To print a list of all emulator options, including a short description, enter
   the following command:

   .. code:: none

      emulator -help

   .. rubric:: Get detailed help for a specific option
      :name: help-detailed

   To print help for a specific startup option, enter the following command:

   .. code:: none

      emulator -help-option

   For example:

   .. code:: none

      emulator -help-netspeed

   This help is more detailed than the description provided by the ``-help``
   option.

   .. rubric:: Get detailed help for all options
      :name: help-detailed-all

   To get detailed help for all emulator options, enter the following command:

   .. code:: none

      emulator -help-all

   .. rubric:: List emulator environment variables
      :name: help-envvar

   To get a list of emulator environment variables, enter the following command:

   .. code:: none

      emulator -help-environment

   You can set environment variables in the terminal window before launching a
   virtual device, or you can set it through your user settings in the operating
   system. For example, set it in your ``.bashrc`` file on Linux.

   .. rubric:: List debug tags
      :name: help-debug

   To print a list of tags for the ``-debug`` options, enter the following
   command:

   .. code:: none

      emulator -help-debug-tags

   The ``-debug`` options let you enable or disable debug messages from specific
   emulator components, as specified by the tags.

Last updated 2023-04-12 UTC.


/Send console commands
======================

.. https://developer.android.google.cn/studio/run/emulator-console?hl=en

.. container:: devsite-article-body clearfix

   Each running virtual device provides a console that lets you query and
   control the emulated device environment. For example, you can use the console
   to manage port redirection, network characteristics, and telephony events
   while your app is running on the emulator.

   The following commands require that you already have an emulator running. For
   more information about running an emulator, see `Run apps on the Android Emulator <#/studio/run/emulator>`__ and `Start the emulator from the command line <#/studio/run/emulator-commandline>`__.

   .. rubric:: Start and stop a console session
      :name: console-session

   To access the console and enter commands from a terminal window, use
   ``telnet`` to connect to the console port and provide your authentication
   token. Each time the console displays **OK**, it's ready to accept commands.
   There isn't a typical prompt.

   To connect to the console of a running virtual device:

   #. Open a terminal window and enter the following command:
   #. After the console displays ``OK``, enter the ``auth``\ ``auth_token``
      command.
   #. After you're connected to the console, enter `console commands <#querycontrol>`__.
   #. To exit the console session, enter ``quit`` or ``exit``.

   Here's an example session:

   .. code:: none

      $ telnet localhost 5554
      Trying ::1...
      telnet: connect to address ::1: Connection refused
      Trying 127.0.0.1...
      Connected to localhost.
      Escape character is '^]'.
      Android Console: Authentication required
      Android Console: type 'auth <auth_token>' to authenticate
      Android Console: you can find your <auth_token> in
      '/Users/me/.emulator_console_auth_token'
      OK
      auth 123456789ABCdefZ
      Android Console: type 'help' for a list of commands
      OK
      help-verbose
      Android console command help:
          help|h|?         Prints a list of commands
          help-verbose     Prints a list of commands with descriptions
          ping             Checks if the emulator is alive
          automation       Manages emulator automation
          event            Simulates hardware events
          geo              Geo-location commands
          gsm              GSM related commands
          cdma             CDMA related commands
          crash            Crashes the emulator instance
          crash-on-exit    Simulates crash on exit for the emulator instance
          kill             Terminates the emulator instance
          restart          Restarts the emulator instance
          network          Manages network settings
          power            Power related commands
          quit|exit        Quits control session
          redir            Manages port redirections
          sms              SMS related commands
          avd              Controls virtual device execution
          qemu             QEMU-specific commands
          sensor           Manages emulator sensors
          physics          Manages physical model
          finger           Manages emulator finger print
          debug            Controls the emulator debug output tags
          rotate           Rotates the screen clockwise by 90 degrees
          screenrecord     Records the emulator's display
          fold             Folds the device
          unfold           Unfolds the device
          multidisplay     Configures the multi-display

      try 'help <command>' for command-specific help
      OK
      exit
      Connection closed by foreign host.

   .. rubric:: Emulator command reference
      :name: querycontrol

   The following table describes the emulator console commands with their
   parameters and values:

   **Table 1.** Emulator console commands


   .. list-table::
      :widths: 40 40
      :header-rows: 1

      -
         - General commands
         - Description

      -
         - ``avd {stop|start|status|name}``
         - Queries, controls, and manages the virtual device, as follows:

            -  ``stop``: Stops the execution of the device.
            -  ``start``: Starts the execution of the device.
            -  ``status``: Queries the virtual device status, which can be ``running`` or
               ``stopped``.
            -  ``name``: Queries the virtual device name.

      -
         - ``avd snapshot {list|save``\ ``name``\ ``|load``\ ``name``\ ``|delete``\ ``name``\ ``}``
         - Saves and restores the device state in snapshots, as follows:

            -  ``list``: Lists all saved snapshots.
            -  ``save``\ ``name``: Saves the snapshot as ``name``.
            -  ``load``\ ``name``: Loads the named snapshot.
            -  ``delete``\ ``name``: Deletes the named snapshot.

            The following example saves a snapshot with the name ``firstactivitysnapshot``:

            .. code:: none

               avd snapshot save firstactivitysnapshot

      -
         - ``fold``
         -  Folds the device to display its smaller screen configuration, if the device is
            foldable and currently unfolded.

      -
         - ``unfold``
         -  Unfolds the device to display its larger screen configuration, if the device is
            foldable and currently folded.

      -
         - ``kill``
         -  Terminates the virtual device.

      -
         - ``ping``
         -  Checks whether the virtual device is running.

      -
         - ``rotate``
         -  Rotates the AVD counterclockwise in 45 degree increments.

      -
         -  Crash the emulator
         -  Description

      -
         - ``crash``
         - Crashes the emulator during app execution.

      -
         - ``crash-on-exit``
         -  Crashes the emulator when the app exits.

      -
         -  Debug tags
         -  Description

      -
         - ``debug``\ ``tags ...``
         -  Enables or disables debug messages from specific parts of the emulator. The
            ``tags`` parameter must be a value from the list of debug tags that appears when
            you execute ``emulator -help-debug-tags``. For more information about the
            ``-help-debug-tags`` option, see the table of `commonly used options <#/studio/run/emulator-commandline#common>`__.

            The following example enables the ``radio`` tag:

            .. code:: none

               debug radio

      -
         -  Port redirection
         -  Description

      -
         - ``redir list``
         -  Lists the current port redirection.

      -
         - ``redir add``\ ``protocol``\ ``:``\ ``host-port``\ ``:``\ ``guest-port``
         -  Adds a new port redirection, as follows:

            -  ``protocol``: Must be either ``tcp`` or ``udp``.
            -  ``host-port``: The port number to open on the host.
            -  ``guest-port``: The port number to route data to on the emulator.

      -
         - ``redir del``\ ``protocol``\ ``:``\ ``host-port``
         -  Deletes a port redirection.

            -  ``protocol``: Must be either ``tcp`` or ``udp``.
            -  ``host-port``: The port number to open on the host.

      -
         -  Geographic location
         -  Description

      -
         -  Sets the geographic location reported to the apps running inside an emulator by
            sending a GPS fix to the emulator.
         -
            You can issue one of the following ``geo`` command as soon as a virtual device
            is running. The emulator sets the location you enter by creating a mock location
            provider. This provider responds to location listeners set by apps and supplies
            the location to the
            `LocationManager <#/reference/android/location/LocationManager>`__. Any app
            can query the location manager to obtain the current GPS fix for the emulated
            device by calling ``LocationManager.getLastKnownLocation("gps")``.

            ``geo fix``\ ``longitude latitude [altitude] [satellites] [velocity]``

            Sends a simple GPS fix to the emulator. Specify ``longitude`` and ``latitude``
            in decimal degrees. Use a number from 1 to 12 to specify the number of
            ``satellites`` to use to determine the position, and specify ``altitude`` in
            meters and ``velocity`` in knots.

            ``geo nmea``\ ``sentence``

            Sends an NMEA 0183 sentence to the emulated device as if it were sent from an
            emulated GPS modem. Start ``sentence`` with '$GP'. Only '$GPGGA' and '$GPRCM'
            sentences are currently supported. The following example is a GPGGA (Global
            Positioning System Fix Data) sentence that gets the time, position, and fix data
            for a GPS receiver:

            .. code:: none

               geo nmea $GPGGA ,hhmmss.ss,llll.ll,a,yyyyy.yy,a,x,xx,x.x,x.x,M,x.x,M,x.x,xxxx

      -
         -  Fake hardware events
         -  Description

      -
         - ``event types``
         -  Lists all fake event types. For events that have codes, the number of codes is
            listed in parentheses on the right.

            .. code:: none

               event types
               event &lttype> can be an integer or one of the following aliases:
                   EV_SYN
                   EV_KEY    (405 code aliases)
                   EV_REL    (2 code aliases)
                   EV_ABS    (27 code aliases)
                   EV_MSC
                   EV_SW     (4 code aliases)
                   EV_LED
                   EV_SND
                   EV_REP
                   EV_FF
                   EV_PWR
                   EV_FF_STATUS
                   EV_MAX
               OK
                       

      -
         - ``event send``\ ``types [types ...]``
         -  Sends one or more fake event types.

      -
         - ``event codes``\ ``type``
         -  Lists the event codes for the specified fake event type.

      -
         - ``event send``\ ``type``\ ``[:``\ ``code``\ ``]:[``\ ``value``\ ``] [...]``
         -  Sends one or more fake events with optional codes and code values.

            To discover exactly which event to send, you can use the ``adb`` command while
            manually pressing the buttons on the emulator.

            These are the events generated when you press the power button:

            .. code:: none

               adb shell getevent -lt

               /dev/input/event12: EV_KEY       KEY_POWER            DOWN
               /dev/input/event12: EV_SYN       SYN_REPORT           00000000
               /dev/input/event12: EV_KEY       KEY_POWER            UP
               /dev/input/event12: EV_SYN       SYN_REPORT           00000000
                     

            For example, to simulate a long press of the power button, send two ``EV_KEY``
            events for keydown and keyup:

            .. code:: none

               event send EV_KEY:KEY_POWER:0
               OK
               event send EV_KEY:KEY_POWER:1
               OK
                     

      -
         - ``event text``\ ``message``
         -  Sends a string of characters that simulate keypresses. The message must be a
            UTF-8 string. Unicode posts are reverse-mapped according to the current device
            keyboard, and unsupported characters are discarded silently.

      -
         - Power state controls
         -  Description

      -
         - ``power display``
         -  Displays battery and charger state.

      -
         - ``power ac {on|off}``
         -  Sets AC charging state to ``on`` or ``off``.

      -
         - ``power status {unknown|charging|discharging|not-charging|full}``
         -  Changes battery status as specified.

      -
         - ``power present {true|false}``
         -  Sets battery presence state.

      -
         - ``power health {unknown|good|overheat|dead|overvoltage|failure}``
         -  Sets battery health state.

      -
         - ``power capacity``\ ``percent``
         -  Sets remaining battery capacity state as a percent from 0 to 100.

      -
         - Network connection status
         -  Description

      -
         - ``network status``
         -  Checks the network status and current delay and speed characteristics.

      -
         - ``network delay``\ ``latency``
         -  Changes the emulated network latency.

            The emulator lets you simulate various network latency levels so that you can
            test your app in an environment more typical of actual running conditions. You
            can set a latency level or range at emulator startup, or you can use the console
            to change the latency while the app is running in the emulator.

            The format of network ``latency`` is one of the following (numbers are
            milliseconds):

            **Network latency format:**

            -  ``gprs``: GPRS, which uses a latency range of 150 minimum and 550 maximum.
            -  ``edge``: EDGE/EGPRS, which uses a latency range of 80 minimum and 400
               maximum.
            -  ``umts``: UMTS/3G, which uses a latency range of 35 minimum and 200 maximum.
            -  ``none``: No latency.
            -  ``num``: Emulates the specified latency in milliseconds.
            -  ``min``\ ``:``\ ``max``: Emulates the specified latency range.

            To set latency at emulator startup, use the ``-netdelay`` `emulator option <#/studio/run/emulator-commandline#common>`__ with a supported ``latency``
            value, as listed in the preceding **Network latency format** list. Here are some
            examples:

            .. code:: none

               emulator -netdelay gprs
               emulator -netdelay 40,100

            To make changes to network delay while the emulator is running, connect to the
            console and use the ``netdelay`` command with a supported ``latency`` value from
            the preceding **Network latency format** list.

            .. code:: none

               network delay gprs
               network delay 40 100

      -
         - ``network speed``\ ``speed``
         -  The emulator lets you simulate various network transfer rates.

            You can set a transfer rate or range at emulator startup, or you can use the
            console to change the rate while the app is running in the emulator.

            The format of network ``speed`` is one of the following (numbers are
            kilobits/sec):

            **Network speed format:**

            -  ``gsm``: GSM/CSD, which uses a speed of 14.4 up and 14.4 down.
            -  ``hscsd``: HSCSD, which uses a speed of 14.4 up and 43.2 down.
            -  ``gprs``: GPRS, which uses a speed of 40.0 up and 80.0 down.
            -  ``edge``: EDGE/EGPRS, which uses a speed of 118.4 up and 236.8 down.
            -  ``umts``: UMTS/3G, which uses a speed of 128.0 up and 1920 down.
            -  ``hsdpa``: HSDPA, which uses a speed of 348.0 up and 14,400.0 down.
            -  ``lte``: LTE, which uses a speed of 58,000 up and 173,000 down.
            -  ``evdo``: EVDO, which uses a speed of 75,000 up and 280,000 down.
            -  ``full``: Unlimited speed, but depends on the connection speed of your
               computer.
            -  ``num``: Sets an exact rate in kilobits/sec used for both upload and
               download.
            -  ``up``\ ``:``\ ``down``: Sets exact rates in kilobits/sec for upload and
               download separately.

            To set the network speed at emulator startup, use the ``-netspeed`` `emulator option <#/studio/run/emulator-commandline#common>`__ with a supported ``speed``
            value, as in the preceding **Network speed format** list. Here are some
            examples:

            .. code:: none

               emulator -netspeed gsm @Pixel_API_26
               emulator -netspeed 14.4,80 @Pixel_API_26

            To make changes to network speed while the emulator is running, connect to the
            console and use the ``network speed`` command with a supported ``speed`` value
            from the preceding **Network speed format** list.

            .. code:: none

               network speed 14.4 80

      -
         - ``network capture {start|stop}``\ ``file``
         -  Sends packets to a file. The following list describes the parameters and
            parameter values:

            -  ``start``\ ``file``: Starts sending packets to the specified file.
            -  ``stop``\ ``file``: Stops sending packets to the specified file.

      -
         - Telephony emulation
         -  Description

            The Android emulator includes its own GSM and CDMA emulated modems that let you
            simulate telephony functions in the emulator. For example, with GSM you can
            simulate inbound phone calls and establish and terminate data connections. With
            CDMA, you provide a subscription source and the preferred roaming list. The
            Android system handles simulated calls exactly as it would actual calls. The
            emulator doesn't support call audio.

      -
         - ``gsm {call|accept|cancel|busy}``\ ``phonenumber``
         -  The ``gsm`` parameters are the following:

            -  ``call``: Simulates an inbound phone call from ``phonenumber``.
            -  ``accept``: Accepts an inbound call from ``phonenumber`` and changes the call
               state to ``active``. You can change a call state to ``active`` only when its
               current state is ``waiting`` or ``held``.
            -  ``cancel``: Terminates an inbound phone call from or outbound phone call to
               ``phonenumber``.
            -  ``busy``: Closes an outbound call to ``phonenumber`` and changes the call
               state to ``busy``. You can change a call state to ``busy`` only when its
               current state is ``waiting``.

      -
         - ``gsm {data|voice}``\ ``state``
         -  The ``data``\ ``state`` command changes the state of the GPRS data connection,
            and the ``data voice``\ ``state`` command changes the state of the GPRS voice
            connection, as follows:

            -  ``unregistered``: No network available.
            -  ``home``: On local network, non-roaming.
            -  ``roaming``: On roaming network.
            -  ``searching``: Searching networks.
            -  ``denied``: Emergency calls only.
            -  ``off``: Same as ``unregistered``.
            -  ``on``: Same as ``home``.

      -
         - ``gsm hold``
         -  Changes the state of a call to ``hold``. You can change a call state to ``hold``
            only when its current state is ``active`` or ``waiting``.

      -
         - ``gsm list``
         -  Lists all inbound and outbound calls and their states.

      -
         - ``gsm status``
         -  Reports the current GSM voice/data state. Values are those described for the
            ``voice`` and ``data`` commands.

      -
         - ``gsm signal {rssi|ber}``
         -  Changes the reported signal strength (rssi) and bit error rate (ber) on the next
            15 seconds of update. The following list describes the parameters and their
            values:

            -  ``rssi`` range is 0 through 31 and 99 for unknown.
            -  ``ber`` range is 0 through 7 and 99 for unknown.

      -
         - ``gsm signal-profile``\ ``num``
         -  Sets the signal strength profile. ``num`` is a number from 0 through 4.

      -
         - ``cdma ssource``\ ``source``
         -  Sets the current CDMA subscription source, where ``source`` is a network-based
            allowlist that contains the CDMA carrier's subscribers and their values, as
            follows:

            -  nv: Reads subscription from non-volatile RAM.
            -  ruim: Reads subscription from Removable User Identity Module (RUIM).

      -
         - ``cdma prl_version``\ ``version``
         -  Dumps the current preferred roaming list (PRL) version. The version number is
            for the PRL database that contains information used during the system selection
            and acquisition process.

      -
         - Manage sensors on the emulator
         -  Description

            These commands relate to which sensors are available in the AVD. Besides using
            the ``sensor`` command, you can see and adjust the settings in the emulator in
            the **Virtual sensors** screen in the **Accelerometer** and **Additional
            sensors** tabs.

      -
         - ``sensor status``
         -  Lists all sensors and their status. The following is example output for the
            ``sensor status`` command:

      -
         - ``sensor get``\ ``sensor-name``
         -  Gets the settings for ``sensor-name``. The following example gets the value for
            the acceleration sensor:

            .. code:: none

               sensor get acceleration
               acceleration = 2.23517e-07:9.77631:0.812348

            The ``acceleration`` values separated by colons(:) refer to the x, y, and z
            coordinates for the virtual sensors.

      -
         - ``sensor set``\ ``sensor-name``\ ``\ value-x``\ ``:``\ ``value-y``\ ``:``\ ``value-z``
         -  Sets the values for ``sensor-name``. The following example sets the acceleration
            sensor to the x, y, and z values separated by colons.

            .. code:: none

               sensor set acceleration 2.23517e-07:9.77631:0.812348

      -
         - SMS emulation
         -  Description

      -
         - ``sms send``\ ``sender-phone-number``\ ``\ textmessage``
         -  Generates an emulated incoming SMS. The following list describes the parameters
            and their values:

            -  ``sender-phone-number``: Contains an arbitrary numeric string.
            -  ``textmessage``: The sms message.

            The following example sends the message "hi there" to the 4085555555 phone
            number:

            .. code:: none

               sms send 4085555555 hi there

            The console forwards the SMS message to the Android framework, which passes it
            to an app on the emulator that handles SMS, such as the Messages app. If you
            pass 10 numbers, the app formats it as a phone number. Longer or shorter numeric
            strings display the way you sent them.

      -
         - Fingerprint simulation
         -  Description

      -
         - ``finger touch``\ ``fingerprint-id``
         -  Simulates a finger touching the sensor.

      -
         - ``finger remove``
         -  Simulates finger removal.

            For instructions about how to use these commands, see the following section
            about `fingerprint simulation and validation <#finger-print>`__.

.. _finger-print:

Fingerprint simulation and validation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. container:: attempt-right

   |image-fingerprint_2x|
   **Figure 1.** Fingerprint authentication screen.

Use the ``finger`` command to simulate and validate fingerprint authentication
for your app. You need SDK Tools 24.3 or higher and Android 6.0 (API level 23)
or higher.

To simulate and validate fingerprint authentication, follow these steps:

#. If you don't yet have a fingerprint ID, enroll a new fingerprint in the
   emulator by selecting **Settings** > **Security** > **Fingerprint** and
   following the enrollment instructions.

#. Set up your app to accept `fingerprint authentication <#/about/versions/marshmallow/android-6.0#fingerprint-authentication>`__.
   After you perform this setup, your device displays the fingerprint
   authentication screen.

#. While your app displays the fingerprint authentication screen, go to the
   console and enter the ``finger touch`` command and the fingerprint ID you
   created. This simulates a finger touch.

#. Then, enter the ``finger remove`` command to simulate finger removal.

   Your app should respond as if a user touched and then removed their finger
   from the fingerprint sensor.

Last updated 2023-04-12 UTC.


.. |image-fingerprint_2x| image:: https://developer.android.google.cn/static/studio/images/run/fingerprint_2x.png
   :width: 294px

/Set up networking
==================

.. https://developer.android.google.cn/studio/run/emulator-networking?hl=en

.. container:: devsite-article-body clearfix

   The emulator provides versatile networking capabilities that you can use to
   set up complex modeling and testing environments for your app. This page
   introduces the emulator network architecture and capabilities.

   .. rubric:: Network address space
      :name: networkaddresses

   Each instance of the emulator runs behind a virtual router or firewall
   service that isolates it from your development machine network interfaces and
   settings and from the internet. An emulated device can't detect your
   development machine or other emulator instances on the network. It detects
   only that it is connected through ethernet to a router or firewall.

   The virtual router for each instance manages the 10.0.2/24 network address
   space. All addresses managed by the router are in the form of
   10.0.2.\ ``xx``, where ``xx`` is a number. Addresses within this space are
   pre-allocated by the emulator or router as follows:

   .. list-table::
      :header-rows: 1

      - 

         - Network Address
         - Description
      - 

         - 10.0.2.1
         - Router or gateway address
      - 

         - 10.0.2.2
         - Special alias to your host loopback interface (127.0.0.1 on your
            development machine)
      - 

         - 10.0.2.3
         - First DNS server
      - 

         - 10.0.2.4 / 10.0.2.5 / 10.0.2.6
         - Optional second, third, and fourth DNS servers
      - 

         - 10.0.2.15
         - The emulated device network when connected using ethernet
      - 

         - 10.0.2.16
         - The emulated device network when connected using Wi-Fi
      - 

         - 127.0.0.1
         - The emulated device loopback interface

   The same address assignments are used by all running emulator instances. That
   means that if you have two instances running concurrently on your machine,
   each will have its own router, and behind that, each will have an IP address
   of 10.0.2.15. The instances are isolated by a router and can't detect each
   other on the same network. For information about how to let emulator
   instances communicate over TCP/UDP, see the section about `interconnecting emulator instances <#connecting>`__.

   The address 127.0.0.1 on your development machine corresponds to the
   emulator's loopback interface. To access services running on your development
   machine loopback interface, use the special address 10.0.2.2 instead.

   The pre-allocated addresses of an emulated device are specific to the Android
   Emulator and are likely to be very different on real devices (which are also
   likely to be network address translated, specifically behind a router or
   firewall).

   .. rubric:: Local networking limitations
      :name: networkinglimitations

   Android apps running on an emulator can connect to the network available on
   your workstation. However, apps connect through the emulator, not directly to
   hardware, and the emulator acts like a normal app on your workstation. This
   can cause some limitations:

   -  Communication with the emulated device may be blocked by a firewall
      program running on your machine.
   -  Communication with the emulated device may be blocked by another
      (physical) firewall or router where your machine is connected.

   The emulator's virtual router should be able to handle all outbound TCP and
   UDP connections and messages on behalf of the emulated device, provided your
   development machine network environment lets it. There are no built-in
   limitations on port numbers or ranges, only those imposed by your host
   operating system and network.

   Depending on the environment, the emulator might not be able to support other
   protocols (such as ICMP, used for "ping"). Currently, the emulator does not
   support IGMP or multicast.

   .. rubric:: Use network redirection
      :name: redirection

   To communicate with an emulator instance behind its virtual router, set up
   network redirection on the virtual router. Clients can then connect to a
   specified guest port on the router, while the router directs traffic to and
   from that port to the emulated device host port.

   To set up the network redirection, create a mapping of host and guest ports
   and addresses on the emulator instance. There are two ways to set up network
   redirection: using emulator console commands and using the Android Debug
   Bridge (``adb``) tool, as described in the following sections.

   .. rubric:: Set up redirection through the emulator console
      :name: consoleredir

   Each emulator instance provides a control console that you can connect to and
   issue commands to that are specific to that instance. Use the ``redir``
   console command to set up redirection as needed for an emulator instance.

   First, determine the console port number for the target emulator instance.
   For example, the console port number for the first emulator instance launched
   is 5554. Next, connect to the console of the target emulator instance,
   specifying its console port number, as follows:

   .. code:: none

      telnet localhost 5554

   Once connected, you must authenticate before you can set up redirection. See
   `Start and stop a console session <#/studio/run/emulator-console#console-session>`__ for details about
   how to do this. Once authenticated, use the ``redir`` command to work with
   redirection.

   To add a redirection, use:

   .. code:: none

      redir add <protocol>:<host-port>:<guest-port>

   Where ``<protocol>`` is either ``tcp`` or ``udp``, and ``<host-port>`` and
   ``<guest-port>`` set the mapping between your machine and the emulated
   system.

   For example, the following command sets up a redirection that handles all
   incoming TCP connections to your host (development) machine on 127.0.0.1:5000
   and passes them through to the emulated system on 10.0.2.15:6000:

   .. code:: none

      redir add tcp:5000:6000

   To delete a redirection, use the ``redir del`` command. To list all
   redirection for a specific instance, use ``redir list``. For more information
   about these and other console commands, see `Send Emulator console commands <#/studio/run/emulator-console>`__.

   Note that port numbers are restricted by your local environment. This
   typically means that you cannot use host port numbers under 1024 without
   special administrator privileges. Also, you won't be able to set up a
   redirection for a host port that is already in use by another process on your
   machine. In that case, ``redir`` generates an error message to that effect.

   .. rubric:: Set up redirection through adb
      :name: adbredir

   The Android Debug Bridge (``adb``) tool provides port forwarding, an
   alternate way for you to set up network redirection. For more information,
   see `Set up port forwarding <#/studio/command-line/adb#forwardports>`__ in the
   ``adb`` documentation.

   Note that ``adb`` doesn't currently offer a way to remove a redirection
   except by stopping the ``adb`` server.

   .. rubric:: Configure emulator DNS settings
      :name: dns

   At startup, the emulator reads the list of DNS servers that your system is
   currently using. It then stores the IP addresses of up to four servers on
   this list and sets up aliases to them on the emulated addresses 10.0.2.3,
   10.0.2.4, 10.0.2.5, and 10.0.2.6, as needed.

   On Linux and macOS, the emulator obtains the DNS server addresses by parsing
   the file ``/etc/resolv.conf``. On Windows, the emulator obtains the addresses
   by calling the ``GetNetworkParams()`` API. Note that this usually means that
   the emulator ignores the content of your "hosts" file (``/etc/hosts`` on
   Linux/macOS, ``%WINDOWS%/system32/HOSTS`` on Windows).

   When starting the emulator from the command line, you can use the
   ``-dns-server <serverList>`` option to manually specify the addresses of DNS
   servers to use, where ``<serverList>`` is a comma-separated list of server
   names or IP addresses. You might find this option useful if you encounter DNS
   resolution problems in the emulated network (for example, an "Unknown Host
   error" message that appears when using the web browser).

   .. rubric:: Use the emulator with a proxy
      :name: proxy

   On many corporate networks, direct connections to the internet are refused by
   network administrators. Instead, internet connections must pass through a
   specific proxy. To access the internet on a network with a proxy requirement,
   the emulator needs to know that there is a proxy and that it needs to connect
   to it.

   Due to the nature of HTTP, a direct web server connection and a connection
   through a proxy result in different GET requests. The emulator transparently
   rewrites the GET requests from the virtual device before talking to the proxy
   so it works.

   If your emulator must access the internet through a proxy server, you can
   configure a custom HTTP proxy from the emulator's **Extended controls**
   screen:

   #. With the emulator open, click **More** |image-emulator-extended-controls|.
   #. Click **Settings** and **Proxy**.
   #. Define your HTTP proxy settings.

   |image-emulator-proxy-settings_2x|
   Alternatively, you can configure a proxy from the command line with the
   ``-http-proxy <proxy>`` option when starting the emulator. In this case,
   specify proxy information in ``<proxy>`` in one of these formats:

   .. code:: none

      http://<machineName>:<port>

   or

   .. code:: none

      http://<username>:<password>@<machineName>:<port>

   The ``-http-proxy`` option forces the emulator to use the specified HTTP or
   HTTPS proxy for all outgoing TCP connections. Redirection for UDP is not
   supported.

   Alternatively, you can define the environment variable ``http_proxy`` with
   the value you want to use for ``<proxy>``. In this case, you do not need to
   specify a value for ``<proxy>`` in the ``-http-proxy`` command—the emulator
   checks the value of the ``http_proxy`` environment variable at startup and
   uses its value automatically, if it is defined.

   You can use the ``-debug-proxy`` option to diagnose proxy connection
   problems.

   .. rubric:: Interconnect emulator instances
      :name: connecting

   To let one emulator instance communicate with another, set up network
   redirection as described below.

   Assume that your environment is represented as follows:

   -  A is your development machine.
   -  B is your first emulator instance, running on A.
   -  C is your second emulator instance, also running on A.

   If you want to run a server on B to which C will connect, set it up as
   follows:

   #. Set up the server on B, listening to 10.0.2.15:<serverPort>.
   #. On the B console, set up a redirection from A:localhost:<localPort> to
      B:10.0.2.15:<serverPort>.
   #. On C, have the client connect to 10.0.2.2:<localPort>.

   For example, if you want to run an HTTP server, select ``<serverPort>`` as 80
   and ``<localPort>`` as 8080:

   -  B listens on 10.0.2.15:80.
   -  On the B console, issue ``redir add tcp:8080:80.``
   -  C connects to 10.0.2.2:8080.

   .. rubric:: Send a voice call or SMS to another emulator instance
      :name: calling

   The emulator automatically forwards simulated voice calls and SMS messages
   from one instance to another. To send a voice call or SMS, use the dialer app
   or SMS app, respectively, from one of the emulators.

   To initiate a simulated voice call to another emulator instance:

   #. Launch the dialer app on the originating emulator instance.

   #. As the number to dial, enter the console port number of the target
      instance.

      You can determine the console port number of the target instance by
      checking its window title, if it is running in a separate window, but not
      if it is running in a tool window. The console port number is reported as
      "Android Emulator (<port>)".

      Alternatively, the ``adb devices`` command prints a list of running
      virtual devices and their console port numbers. For more information, see
      `Query for devices <#/studio/command-line/adb#devicestatus>`__.

   #. Click the dial button. A new inbound call appears in the target emulator
      instance.

   To send an SMS message to another emulator instance:

   Launch the SMS app, if available.
   Specify the console port number of the target emulator instance as as the SMS
   address.
   Enter the message text.
   Send the message. The message is delivered to the target emulator instance.
   You can also connect to an emulator console to simulate an incoming voice
   call or SMS. For more information, see `Telephony emulation <#/studio/run/emulator-console#telephony>`__ and `SMS emulation <#/studio/run/emulator-console#sms>`__.

Last updated 2024-03-14 UTC.


.. |image-emulator-extended-controls| image:: https://developer.android.google.cn/static/studio/images/buttons/emulator-extended-controls.png
   :class: inline-icon
.. |image-emulator-proxy-settings_2x| image:: https://developer.android.google.cn/static/studio/images/run/emulator-proxy-settings_2x.png
   :width: 820px

/Configure hardware acceleration
================================

.. https://developer.android.google.cn/studio/run/emulator-acceleration?hl=en

.. container:: devsite-article-body clearfix

   The emulator runs best if it can use your machine’s hardware, such as the
   CPU, GPU, and modem, rather than running as pure software. The ability to use
   your machine’s hardware to improve performance is called *hardware
   acceleration*.

   The emulator can use hardware acceleration to improve your experience in two
   main ways:

   -  Graphics acceleration for improved screen rendering
   -  Virtual machine (VM) acceleration for improved execution speed

   Hardware acceleration is enabled by default on most machines. If it isn't
   enabled on your machine, this page describes how you can configure graphics
   and virtual machine (VM) acceleration to get higher performance from the
   emulator.

   .. rubric:: Configure graphics acceleration
      :name: accel-graphics

   Graphics acceleration uses your computer's hardware (typically the GPU) to
   make screen rendering faster. Android devices use OpenGL for Embedded Systems
   (OpenGL ES or GLES) for rendering both 2D and 3D graphics on the screen.

   When you create an Android Virtual Device (AVD) in the AVD Manager, you can
   specify whether the emulator uses hardware or software to emulate the GPU of
   the AVD. Hardware acceleration is recommended and is typically faster.
   However, you might need to use software acceleration if your computer uses
   graphics drivers that aren't compatible with the emulator.

   By default, the emulator decides whether to use hardware or software graphics
   acceleration based on your computer setup. If your GPU hardware and drivers
   are compatible, the emulator uses the GPU. Otherwise, the emulator uses
   software acceleration (using your computer's CPU) to simulate GPU processing.

   If you start the emulator from the `command line <#/studio/run/emulator-commandline#starting>`__, you can override the
   graphics acceleration setting in the AVD for that virtual device instance.

   .. rubric:: Requirements
      :name: dependencies-gpu

   To use graphics acceleration, your development environment must have the
   following:

   -  `SDK Tools <#/studio/releases/cmdline-tools>`__: Latest release recommended
      (version 17 minimum)
   -  SDK Platform: Latest release recommended (Android 4.0.3, Revision 3,
      minimum)

   .. rubric:: Configure graphics acceleration in the AVD Manager
      :name: avd-gpu

   To configure graphics acceleration for an AVD, follow these steps:

   #. Open the `AVD Manager <#/studio/run/managing-avds#viewing>`__.
   #. `Create a new AVD <#/studio/run/managing-avds#createavd>`__ or `edit an existing AVD <#/studio/run/managing-avds#workingavd>`__.
   #. In the `Verify Configuration <#/studio/run/managing-avds#verifyconfigpage>`__ window, find
      the **Emulated Performance** section.
   #. Select a value for the **Graphics:** option.
   #. Click **Finish**.

   .. rubric:: Configure graphics acceleration from the command line
      :name: command-gpu

   To specify a graphics acceleration type when you run an AVD from the command
   line, include the ``-gpu`` option, as shown in the following example:

   .. code:: none

      emulator -avd avd_name -gpu mode [{-option [value]} ... ]

   The value of ``mode`` can be set to one of the following options:

   -  ``auto``: Let the emulator choose between hardware or software graphics
      acceleration based on your computer setup.

   -  ``host``: Use the GPU on your computer for hardware acceleration. This
      option typically provides the highest graphics quality and performance for
      the emulator. However, if your graphics drivers have issues rendering
      OpenGL, you might need to use the ``swiftshader_indirect`` or
      ``angle_indirect`` options.

   -  ``swiftshader_indirect``: Use a Quick Boot-compatible variant of
      `SwiftShader <https://swiftshader.googlesource.com/SwiftShader>`__ to
      render graphics using software acceleration. This option is a good
      alternative to ``host`` mode if your computer can't use hardware
      acceleration.

   -  ``angle_indirect``: (Windows only) Use a Quick Boot-compatible variant of
      `ANGLE Direct3D <https://chromium.googlesource.com/angle/angle/+/master/README.md>`__
      to render graphics using software acceleration. This option is a good
      alternative to ``host`` mode if your computer can't use hardware
      acceleration. In most cases, ANGLE performance is similar to using
      ``host`` mode because ANGLE uses Microsoft DirectX instead of OpenGL.

      On Windows, Microsoft DirectX drivers typically have fewer issues than
      OpenGL drivers. This option uses Direct3D 11 and requires Windows 10,
      Windows 8.1, or Windows 7 SP1 with the Windows 7 Platform Update.

   -  ``guest``: Use guest-side software rendering. This option provides the
      lowest graphics quality and performance for the emulator.

   **Note:**\  If you enable a graphics acceleration option that your computer
   doesn't support, you are likely to see incorrect images displayed during
   emulation.
   The following ``mode`` options are deprecated:

   -  ``swiftshader``: Deprecated in version 27.0.2. Use
      ``swiftshader_indirect`` instead.
   -  ``angle``: Deprecated in version 27.0.2. Use ``angle_indirect`` instead
      (Windows only).
   -  ``mesa``: Deprecated in version 25.3. Use ``swiftshader_indirect``
      instead.

   .. rubric:: Enable Skia rendering for Android UI
      :name: skia-emulator

   When using images for API level 27 or higher, the emulator can render the
   Android UI with `Skia <https://skia.org/>`__. Skia helps the emulator render
   graphics more smoothly and efficiently.

   To enable Skia rendering, use the following commands in the ``adb`` shell:

   .. code:: devsite-click-to-copy

      su
      setprop debug.hwui.renderer skiagl
      stop
      start

   .. rubric:: Configure VM acceleration
      :name: accel-vm

   VM acceleration uses your computer's processor to significantly improve the
   execution speed of the emulator. A tool called a *hypervisor* manages this
   interaction using virtualization extensions that your computer's processor
   provides. This section outlines the requirements for using VM acceleration
   and describes how to set up VM acceleration on each operating system.

   .. rubric:: General requirements
      :name: dependencies

   To use VM acceleration with the emulator, your computer must meet the general
   requirements in this section. Your computer also needs to meet other
   requirements that are specific to your operating system.

   .. rubric:: Development environment requirements
      :name: vm-accel-dev-env-reqs

   To use VM acceleration, your development environment must meet the following
   requirements:

   -  `SDK Tools <#/studio/releases/cmdline-tools>`__: Minimum version 17;
      recommended version 26.1.1 or later

   -  `AVD <#/studio/run/managing-avds#about>`__: Required Android version is
      described in the table that follows.

      .. list-table::
         :header-rows: 1

         - 

            - CPU Architecture
            - System Image Requirement
         - 

            - X86_64
            - x86 or x86_64 system images for Android 2.3.3 (API level 10) and
               higher
         - 

            - ARM64
            - arm64-v8a system images for Android 5.0 (API level 21) and higher

      **Warning:**\  AVDs that don't follow the requirements, such as ARM- or
      MIPS-based system images on Intel or AMD CPUs, can't use the VM
      acceleration that is described on this page.

   .. rubric:: Virtualization extension requirements
      :name: extensions

   In addition to the development environment requirements, your computer's
   processor must support virtualization extensions. Supported processors are:

   -  Intel Processors with Intel Virtualization Technology (VT-x, vmx)
   -  AMD Processors with AMD-V (SVM)
   -  Apple silicon

   Additional Requirements for Intel and AMD processors:

   Second-level address translation (Intel EPT or AMD RVI) is required for Intel
   and AMD processors. Most modern Intel and AMD processors support second-level
   address translation. Only the first-generation Intel or AMD processors
   offering virtualization extensions may not have second-level page
   translations.

   If you're unsure whether your processor supports the required extensions,
   check the specifications for your processor on the manufacturer's site. If
   your processor doesn't support these extensions, then you can't use VM
   acceleration.

   **Note:**\  On PC platforms, virtualization extensions are typically enabled
   through the BIOS and they may be turned off by default. Check the
   documentation from your system vendor to find out how to enable
   virtualization extensions.
   .. rubric:: Restrictions
      :name: vm-accel-restrictions

   VM acceleration has the following restrictions:

   -  You can't run a VM-accelerated emulator inside another VM, such as a VM
      hosted by VirtualBox, VMWare, or Docker. You must run a VM-accelerated
      emulator directly on your host computer.
   -  Depending on your operating system and hypervisor, you may not run
      software that uses another virtualization technology at the same time that
      you run a VM-accelerated emulator. Examples of the such software include
      but are not limited to virtual machine solutions, certain antivirus
      programs and a few anti-cheat solutions. The situation is mostly observed
      on Windows with Hyper-V off. Most of such software can coexist with the
      android emulator without any problems. But when conflicts occur, it is
      recommended not to run the VM-accelerated emulator at the same time with
      such software.

   .. rubric:: About hypervisors
      :name: hypervisors

   VM acceleration requires a *hypervisor*, a tool that uses virtualization
   extensions provided by your computer's processor.

   Without a hypervisor and VM acceleration, the emulator must translate the
   machine code from the VM block by block to conform to the architecture of the
   host computer. This process can be quite slow. With a hypervisor, when the VM
   and the architecture of the host computer match, the emulator can run code
   directly on the host processor using the hypervisor. This improvement
   drastically increases both the speed and performance of the emulator.

   The hypervisor that works best for you depends on your computer's operating
   system and configuration. For more information, see one of the following
   sections:

   -  `Configure VM acceleration on Windows <#vm-windows>`__
   -  `Configure VM acceleration on macOS <#vm-mac>`__
   -  `Configure VM acceleration on Linux <#vm-linux>`__

   .. rubric:: Check whether a hypervisor is installed
      :name: accel-check

   You can use the emulator ``-accel-check`` command-line option to check
   whether a hypervisor is currently installed on your computer.

   The following examples show how to use the emulator ``accel-check`` option.
   In each example, ``Sdk`` is the location of the Android SDK:

   Windows:

   .. code:: none

      c:\Users\janedoe\AppData\Local\Android> Sdk\emulator\emulator -accel-check
      accel:
      0
      AEHD (version 2.0) is installed and usable.
      accel

   There are multiple hypervisor choices on Windows. So what you see might be
   different from the example here. For example, you may see one of the
   following keywords in the message: **GVM**\ (former name of AEHD), **WHPX**,
   **HAXM**.
   macOS:

   .. code:: none

      janedoe-macbookpro:Android janedoe$ ./Sdk/emulator/emulator -accel-check
      accel:
      0
      Hypervisor.Framework OS X Version 13.2
      accel

   Linux:

   .. code:: none

      janedoe:~/Android$ ./Sdk/emulator/emulator -accel-check
      accel:
      0
      KVM (version 12) is installed and usable.

   .. rubric:: Configure VM acceleration on Windows
      :name: vm-windows

   VM acceleration on Windows can use one of three hypervisors:

   -  The Android Emulator hypervisor driver (AEHD)
   -  The Windows Hypervisor Platform (WHPX)
   -  The Intel Hardware Accelerated Execution Manager (HAXM)

   .. rubric:: Choose a hypervisor on Windows
      :name: choose-windows-hypervisor

   This section shows the criteria to determine which hypervisor to use. The
   process to configure VM acceleration using each hypervisor is described in
   the sections that follow.

   Starting from emulator 33.x.x.x, HAXM is deprecated as `Intel discontinues development of HAXM <https://github.com/intel/haxm>`__. The Android Emulator
   hypervisor driver (AEHD) replaces Intel HAXM on Intel Processors.

   .. list-table::
      :header-rows: 1

      - 

         - Criteria (emulator 33.x.x.x and higher)
         - Hypervisor
      - 

         - You **do not need** to run Hyper-V at the same time as the Android
            Emulator.
         - Use `Android Emulator hypervisor driver <#vm-windows-aehd>`__.
      - 

         - You **do need** to run Hyper-V at the same time as the Android
            Emulator.
         - Use `WHPX <#vm-windows-whpx>`__.

   For emulator 32.x.x.x and lower, please continue to follow the old criteria
   to determine which hypervisor to use.

   .. list-table::
      :header-rows: 1

      - 

         - Criteria (emulator 32.x.x.x and lower)
         - Hypervisor
      - 

         - You have an Intel processor and **do not need** to run Hyper-V at the
            same time as the Android Emulator.
         - Use Intel `HAXM <#vm-windows-haxm-intel>`__.
      - 

         - You have an AMD processor and **do not need** to run Hyper-V at the
            same time as the Android Emulator.
         - Use `Android Emulator hypervisor driver <#vm-windows-aehd>`__.
      - 

         - You have an Intel or AMD processor and **do need** to run Hyper-V at
            the same time as the Android Emulator.
         - Use `WHPX <#vm-windows-whpx>`__.

   .. rubric:: Configure VM acceleration using Android Emulator hypervisor
      driver (AEHD) on Windows
      :name: vm-windows-aehd

   Before you can install and use the Android Emulator hypervisor driver, your
   computer must meet the following requirements:

   -  Intel or AMD processors with virtualization extension.

   -  64-bit Windows 11, Windows 10, Windows 8, or Windows 7 (32-bit Windows is
      not supported)

      **Note:**\  Windows 8.1, Windows 8 and Windows 7 users must deactivate
      driver signature enforcement in order to use the AEHD 1.8 and higher, due
      to the Windows driver signature requirement change. AEHD 1.7 and lower is
      not impacted.

   -  On Windows 11, Windows 10 or Windows 8, you must turn off Hyper-V in the
      Windows Features Dialog.

      **Note:**\  Certain windows components can turn Hyper-V back on. Refer to
      the section about `disabling Hyper-V <#disable-hyper-v>`__ for more
      details.

   On AMD Processors, the Android Emulator hypervisor driver can be installed
   via the `SDK Manager <#/studio/intro/update#sdk-manager>`__ in Android Studio
   4.0 Canary 5 or later.

   On Intel Processors, the Android Emulator hypervisor driver can be installed
   via the `SDK Manager <#/studio/intro/update#sdk-manager>`__ in Android Studio
   Flamingo or later.

   To install from the SDK Manager, follow these steps:

   #. Select **Tools >** SDK Manager.

   #. Click the **SDK Tools** tab and select **Android Emulator hypervisor
      driver**.

   #. Click **OK** to download and install the Android Emulator hypervisor
      driver.

   #. After installation, confirm that the driver is operating correctly using
      the following command-line command:

      **AEHD 2.1 and higher**

      .. code:: devsite-click-to-copy

         sc query aehd

      A status message includes the following information:

      .. code:: devsite-click-to-copy

         SERVICE_NAME: aehd
                ...
                STATE              : 4  RUNNING
                ...

      The following error message means either that virtualization extension is
      not enabled in your BIOS or that Hyper-V is not disabled:

      .. code:: devsite-click-to-copy

         SERVICE_NAME: aehd
                ...
                STATE              : 1  STOPPED
                WIN32_EXIT_CODE    : 4294967201 (0xffffffa1)
                ...

      **AEHD 2.0 and lower**

      .. code:: devsite-click-to-copy

         sc query gvm

      A status message includes the following information:

      .. code:: devsite-click-to-copy

         SERVICE_NAME: gvm
                ...
                STATE              : 4  RUNNING
                ...

      The following error message means either that virtualization extension is
      not enabled in your BIOS or that Hyper-V is not disabled:

      .. code:: devsite-click-to-copy

         SERVICE_NAME: gvm
                ...
                STATE              : 1  STOPPED
                WIN32_EXIT_CODE    : 4294967201 (0xffffffa1)
                ...

   The Android Emulator hypervisor driver can also be downloaded and installed
   from
   `GitHub <https://github.com/google/android-emulator-hypervisor-driver/releases>`__.
   After unpacking the driver package, run ``silent_install.bat`` at a command
   line with administrator privileges.

   Uninstall Android Emulator hypervisor driver using the following commands at
   a command line with administrator privileges:

   **AEHD 2.1 and higher**

   .. code:: devsite-click-to-copy

         sc stop aehd
         sc delete aehd

   **AEHD 2.0 and lower**

   .. code:: devsite-click-to-copy

         sc stop gvm
         sc delete gvm

   **Note:**\  Shut down any x86 emulators before uninstalling the Android
   Emulator hypervisor driver for AMD.
   .. rubric:: Configure VM acceleration using Intel HAXM on Windows
      :name: vm-windows-haxm-intel

   **Warning:**\  Starting with emulator 33.x.x.x, Intel HAXM is deprecated.
   Please use `Android Emulator hypervisor driver <#vm-windows-aehd>`__ instead.
   Intel HAXM support may be completely removed in future.
   Before you can install and use Intel HAXM, your computer must meet the
   following requirements:

   -  Intel processor with Virtualization Technology (VT-x), Intel EM64T (Intel
      64) features, and Execute Disable (XD) Bit functionality enabled

   -  64-bit Windows 11, Windows 10, Windows 8, or Windows 7 (or 32-bit version
      of the operating system on a 64-bit processor)

   -  On Windows 11, Windows 10 or Windows 8, you must turn off Hyper-V in the
      Windows Features Dialog.

      **Note:**\  Certain windows components might turn Hyper-V back on. Refer
      to the section about `disabling Hyper-V <#disable-hyper-v>`__ for more
      details.

   To install the Intel HAXM driver, follow these steps:

   #. Open the `SDK Manager <#/studio/intro/update#sdk-manager>`__.

   #. Click the **SDK Update Sites** tab and select **Intel HAXM**.

   #. Click **OK**.

   #. After the download finishes, run the installer.

      Typically, you can find the installer in the following location:
      ``sdk``\ ``\extras\intel\Hardware_Accelerated_Execution_Manager\intelhaxm-android.exe``

   #. Use the wizard to complete the installation.

   #. After installing Intel HAXM, confirm that the virtualization driver is
      operating correctly using the following command-line command:

      .. code:: devsite-click-to-copy

         sc query intelhaxm

      A status message includes the following information:

      .. code:: devsite-click-to-copy

         SERVICE_NAME: intelhaxm
                ...
                STATE              : 4  RUNNING
                ...

   For more information, see the `installation instructions for Intel HAXM on Windows <https://github.com/intel/haxm/wiki/Installation-Instructions-on-Windows>`__.

   To uninstall Intel HAXM, use either the installer or the Windows Control
   Panel. Before you uninstall Intel HAXM, shut down any running x86 emulators.

   **Note:**\  Intel HAXM 7.6.5 is recommended. Certain AVDs may fail to boot if
   Intel HAXM higher than 7.6.5 is installed.
   .. rubric:: Configure VM acceleration using Windows Hypervisor Platform
      :name: vm-windows-whpx

   Before you can enable WHPX, your computer must meet the following
   requirements:

   -  Intel processors: Support for Virtualization Technology (VT-x), Extended
      Page Tables (EPT), and Unrestricted Guest (UG) features. VT-x must be
      enabled in your computer's BIOS settings.
   -  AMD processors: AMD Ryzen processor recommended. Virtualization or SVM
      must be enabled in your computer's BIOS settings.
   -  `Android Studio 3.2 Beta 1 or higher <#/studio/preview>`__
   -  `Android Emulator version 27.3.8 or higher <#/studio/intro/update#sdk-manager>`__
   -  Windows 10 or higher

   To install WHPX on Windows, follow these steps:

   #. From the Windows desktop, right-click the Windows icon and select **Apps
      and features**.

   #. Under **Related settings**, click **Programs and Features**.

   #. Click **Turns Windows Features on or off**.

   #. Select **Windows Hypervisor Platform**.

      |image-whpx_windows10_1803|

   #. Click **OK**.

   #. Once the installation has finished, restart your computer.

   .. rubric:: Double-check when disabling Hyper-V
      :name: disable-hyper-v

   Hyper-V must be disabled to use the Android Emulator hypervisor driver or
   Intel HAXM. However, deselecting "Hyper-V" in the Windows Features Dialog
   does not guarantee that Hyper-V is disabled.

   Quite a few features in Windows 10 enable Hyper-V implicitly. Users might not
   even know Hyper-V is activated when they enable one of these features. These
   features include:

   -  Virtual Machine Platform
   -  Windows Hypervisor Platform
   -  Windows Sandbox
   -  Core Isolation
   -  Credential Guard

   Additionally, Windows Subsystem for Linux version 2 requires Virtual Machine
   Platform, meaning that it implicitly requires Hyper-V. This list is not
   exhaustive; `file a bug <https://b.corp.google.com/issues/new?component=192708&template=840533>`__
   if you find an item that should be included here.

   Double-check that the features listed are also disabled when disabling
   Hyper-V. Reference Microsoft documentation and the examples below to find out
   how each individual feature can be disabled.

   |image-windows-features|

   |image-core-isolation|

   Some platforms fail to immediately disable Hyper-V when it is switched off.
   When this occurs, there is no error returned by the Windows OS and Hyper-V
   appears disabled in the Windows Features Dialog. Please file a bug on
   Microsoft's issue tracker when this occurs.

   .. rubric:: Configure VM acceleration on macOS
      :name: vm-mac

   On MacOS, the Android Emulator uses the built-in
   `Hypervisor.Framework <https://developer.apple.com/documentation/hypervisor>`__,
   which requires the MacOS v10.10 (Yosemite) and higher.

   **Note:**\  It is not recommended to install and use Intel HAXM on the MacOS.
   The emulator doesn't support Intel HAXM on the MacOS any more.
   .. rubric:: Configure VM acceleration on Linux
      :name: vm-linux

   Linux-based systems support VM acceleration through the `KVM software package <https://www.linux-kvm.org/page/Main_Page>`__. Follow the
   instructions for installing KVM on your Linux system, and then verify that
   KVM is enabled. For Ubuntu systems, see `Ubuntu KVM Installation <https://help.ubuntu.com/community/KVM/Installation>`__.

   .. rubric:: Requirements
      :name: vm-linux-requirements

   Running KVM requires specific user permissions. Make sure that you have
   sufficient permissions as specified in the KVM installation instructions.

   To use VM acceleration on Linux, your computer must also meet these
   requirements:

   -  For Intel processors: Support for Virtualization Technology (VT-x), Intel
      EM64T (Intel 64) features, and Execute Disable (XD) Bit functionality
      enabled.
   -  For AMD processors: Support for AMD Virtualization (AMD-V).

   .. rubric:: Check whether KVM is currently installed on Linux
      :name: vm-linux-check-kvm

   You can use the emulator `-accel-check <#accel-check>`__ command-line
   option to check whether you have KVM installed. Alternatively, you can
   install the ``cpu-checker`` package containing the ``kvm-ok`` command.

   The following example shows how to use the ``kvm-ok`` command:

   #. Install the ``cpu-checker`` package:

      .. code:: none

         sudo apt-get install cpu-checker
         egrep -c '(vmx|svm)' /proc/cpuinfo

      An output of 1 or greater means that virtualization is supported. An
      output of 0 means that your CPU doesn't support hardware virtualization.

   #. Run the ``kvm-ok`` command:

      .. code:: none

         sudo kvm-ok

      Expected output:

      .. code:: prettyprint

         INFO: /dev/kvm exists
         KVM acceleration can be used

      If you get the following error, it means that you can still run virtual
      machines. However, your virtual machine is slower without the KVM
      extensions.

      .. code:: prettyprint

         INFO: Your CPU does not support KVM extensions
         KVM acceleration can NOT be used

   .. rubric:: Install KVM on Linux
      :name: vm-linux-kvm

   Use the following command to install KVM:

   Cosmic (18.10) or later:

   .. code:: none

      sudo apt-get install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils

   Lucid (10.04) or later:

   .. code:: none

      sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils

   Karmic (9.10) or earlier:

   .. code:: none

      sudo aptitude install kvm libvirt-bin ubuntu-vm-builder bridge-utils

Last updated 2023-12-06 UTC.


.. |image-whpx_windows10_1803| image:: https://developer.android.google.cn/static/studio/images/run/whpx_windows10_1803.png
   :width: 464px
.. |image-windows-features| image:: https://developer.android.google.cn/static/studio/images/run/windows-features.png
.. |image-core-isolation| image:: https://developer.android.google.cn/static/studio/images/run/core-isolation.png

/Emulator feature comparison
============================

.. https://developer.android.google.cn/studio/run/emulator-comparison?hl=en

.. container:: devsite-article-body clearfix

   The following table compares the tasks you can perform using the `emulator UI <#/studio/run/emulator>`__, AVD Manager, commonly used `command-line startup options <#/studio/run/emulator-commandline#startup-options>`__, and
   the `Emulator console <#/studio/run/emulator-console>`__.The table compares
   features between different emulator tools that are similar but not
   necessarily with identical functionality. In the AVD Manager, you can set
   `hardware profile <#/studio/run/managing-avds#hpproperties>`__ and
   `AVD <#/studio/run/managing-avds#avdproperties>`__ properties.

   To use certain features of the emulator with your apps, you need to enable
   them through various
   `<uses-feature> <#/guide/topics/manifest/uses-feature-element>`__ elements
   and `manifest permission <#/reference/android/Manifest.permission>`__
   constants, just as you would on a hardware device.

   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | User interface        | Hardware profile      | AVD property          | Command-line startup  | Console command       |
   | control               | property              |                       | option                |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | *Device hardware*     |                       |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       | Device type:          |                       |                       |                       |
   |                       | Phone/Tablet, Wear    |                       |                       |                       |
   |                       | OS, Android TV        |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | Back, Home, Overview, | Input: Has Hardware   |                       |                       |                       |
   | Menu                  | Buttons               |                       |                       |                       |
   |                       | (Back/Home/Menu)      |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | Settings: Send        | Input: Has Hardware   | Keyboard Input        |                       |                       |
   | keyboard shortcuts to | Keyboard              |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | Directional Pad       | Navigation Style:     |                       |                       |                       |
   |                       | None, D-pad,          |                       |                       |                       |
   |                       | Trackball, Wheel      |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | Zoom Mode             |                       |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | Battery               |                       |                       |                       | ``power``             |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | Phone                 |                       |                       |                       | ``gsm``, ``sms send`` |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | Rotate                | Supported Device      | Startup: Orientation  |                       | ``rotate``            |
   |                       | States                |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       | Camera                | Camera                | ``-camera-back``      |                       |
   |                       |                       | (can choose webcam)   | ``-camera-front``     |                       |
   |                       |                       |                       | ``-webcam-list``      |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | Take Screenshot       |                       |                       |                       |                       |
   |                       |                       |                       |                       |                       |
   | Settings: Screenshot  |                       |                       |                       |                       |
   | save location         |                       |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | Orientation           | Sensors:              |                       |                       | ``geo``               |
   | Location              | Accelerometer,        |                       |                       |                       |
   | Virtual sensors       | Gyroscope, GPS,       |                       |                       |                       |
   |                       | Proximity Sensor      |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | Fingerprint           |                       |                       |                       | ``finger``            |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | Volume                |                       |                       | ``-noaudio``          |                       |
   |                       |                       |                       | ``-no-audio``         |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       |                       |                       | ``event``             |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | *Disk Images and      |                       |                       |                       |                       |
   | Memory*               |                       |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       | Memory and Storage:   | ``-sdcard``           |                       |
   |                       |                       | SD Card               |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       | Memory and Storage:   |                       |                       |
   |                       |                       | Internal Storage      |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       | RAM                   | Memory and Storage:   | ``-memory``           |                       |
   |                       |                       | RAM                   |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       | Memory and Storage:   |                       | ``vm``                |
   |                       |                       | VM Heap               |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       | In the **Your Virtual |                       | ``-wipe-data``        |                       |
   |                       | Devices** page of the |                       |                       |                       |
   |                       | AVD Manager,          |                       |                       |                       |
   |                       | right-click an AVD    |                       |                       |                       |
   |                       | and select Wipe Data. |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | *Network*             |                       |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       |                       |                       | ``network status``    |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       |                       | ``-dns-server``       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       |                       | ``-http-proxy``       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       | Network: Latency      | ``-netdelay``         | ``network delay``     |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       |                       | ``-netfast``          |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | Cellular: Network     |                       | Network: Speed        | ``-netspeed``         | ``network speed``     |
   | Type                  |                       |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | Voice status          |                       |                       |                       | ``gsm``               |
   | Data status           |                       |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | Signal strength       |                       |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | Settings: Use         |                       |                       | ``-port``             |                       |
   | detected ADB location |                       |                       | ``-ports``            |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       |                       |                       | ``redir``             |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       |                       | ``-tcpdump``          | ``network             |
   |                       |                       |                       |                       |  capture start``,     |
   |                       |                       |                       |                       | ``network             |
   |                       |                       |                       |                       |  capture stop``       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | *System*              |                       |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       | In the ``System       |                       | ``-accel``            |                       |
   |                       |  Image`` page of      |                       | ``-accel-check``      |                       |
   |                       | the AVD Manager,      |                       | ``-no-accel``         |                       |
   |                       | select a system image |                       |                       |                       |
   |                       | capable of ``VM       |                       |                       |                       |
   |                       | acceleration``.       |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       | Multi-Core CPU        |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       |                       | ``-engine``           |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       | Emulated Performance: |                       | ``-gpu``              |                       |
   |                       | Graphics — hardware,  |                       |                       |                       |
   |                       | software, or auto     |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       |                       | ``-nojni``            |                       |
   |                       |                       |                       | ``-no-jni``           |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       |                       | ``-selinux {d         |                       |
   |                       |                       |                       | isabled|permissive}`` |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       |                       | ``-timezone``         |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       |                       | ``-version``          |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | *UI*                  |                       |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | Settings: Emulator    |                       |                       |                       |                       |
   | window theme          |                       |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | Resize                | Screen Size and       |                       |                       | ``window``            |
   |                       | Screen Resolution     |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       | Round                 |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       |                       | ``-no-boot-anim``     |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       | Default Skin          | Device Frame and      |                       |                       |
   |                       |                       | Custom Skin           |                       |                       |
   |                       |                       | Definition            |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       |                       | ``-screen {touch|mu   |                       |
   |                       |                       |                       | lti-touch|no-touch}`` |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   | *Debug*               |                       |                       |                       |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       |                       | ``-debug``\ ``tags``  |                       |
   |                       |                       |                       | ``-debug-``\ ``tag``  |                       |
   |                       |                       |                       | ``                    |                       |
   |                       |                       |                       | -debug-no-``\ ``tag`` |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       |                       | ``-logcat``           |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       |                       | ``-show-kernel``      |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+
   |                       |                       |                       | ``-verbose``          |                       |
   +-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+

Last updated 2023-04-12 UTC.


/Troubleshoot emulator
======================

.. https://developer.android.google.cn/studio/run/emulator-troubleshooting?hl=en

.. container:: devsite-article-body clearfix

   This page lists known issues, workarounds, and troubleshooting tips for the
   Android Emulator. If you encounter an issue not listed here or are unable to
   successfully use a workaround listed here, `report a bug <#/studio/report-bugs#emulator-bugs>`__.

   **Note:**\  If the emulator runs but performs poorly in general, you might
   need to `configure hardware acceleration <#/studio/run/emulator-acceleration>`__ for the emulator.
   .. rubric:: Check for adequate disk space
      :name: disk-space

   To avoid crashes and hangs due to lack of free disk space, the emulator
   checks for sufficient free disk space on startup and doesn't start unless at
   least 2 GB is free. If the emulator fails to start, check whether you have
   adequate free disk space.

   .. rubric:: Antivirus software
      :name: antivirus-software

   Because many security and antivirus software packages work by monitoring
   every read and write operation, use of such software can decrease the
   performance of tools like the Android Emulator.

   Many antivirus packages provide the ability to add specific applications to a
   list of trusted applications, which enables the listed applications to
   operate without performance degradation. If you are experiencing poor
   performance with saving or loading AVD snapshots, you might improve this
   performance by adding the Android Emulator application as a trusted
   application in your antivirus software.

   The performance impact differs between antivirus software packages. If you
   have additional antivirus software installed beyond what is included with
   your operating system, you can run simple tests to determine which antivirus
   software has a greater performance effect on emulator load and save
   operations.

   Some antivirus software may be incompatible with the Android Emulator.

   If you're using Avast software and are having trouble running the Android
   Emulator, disable **Use nested virtualization when available** and **Enable
   Hardware assisted virtualization** in the Avast **Troubleshooting** settings.
   In addition, after Avast hardware virtualization is disabled, ensure that
   HAXM is set up properly again with a full reinstallation of the latest HAXM
   from the SDK Manager.

   On Windows, sometimes the AVD freezes with HAXM and the issue can be resolved
   by uninstalling McAfee completely.

   .. rubric:: Unable to launch AVD
      :name: unable-launch-avd

   An AVD might not launch if a crash report for a newer emulator exists 
   (`issue #281725854 <https://issuetracker.google.com/281725854>`__). This issue occurs
   only for users who update from canary version 33.x to 32.1.13, had a crash
   the last time they ran the 33.x version, and haven't rebooted their AVD
   since, so the ``%TEMP%`` or ``/tmp`` directory is still on. If you're
   experiencing this issue, try clearing the ``%TEMP%`` directory (``/tmp`` on
   Linux or macOS).

   .. rubric:: HAXM on unsupported versions of macOS
      :name: haxm-mac

   If you are using Android Emulator on older, unsupported versions of macOS,
   such as 10.9, then you may need to use an older version of HAXM (6.1.2), too.

   .. rubric:: Android Emulator runs slowly after an update
      :name: emulator-slow-after-update

   A number of external factors can cause the Android Emulator to begin running
   slowly after an update. To begin troubleshooting, we recommend the following
   steps:

   -  If you have an Intel GPU (and in particular, the Intel HD 4000), ensure
      you have downloaded and installed the latest Intel graphics driver.
   -  If your machine has both an Intel HD 4000 GPU and a discrete GPU, disable
      the Intel HD 4000 GPU in Device Manager to ensure you are using the
      discrete GPU.
   -  Run the emulator using the ``-gpu angle``, ``-gpu swiftshader``, or
      ``-gpu guest`` modes. For more information about configuring graphics
      acceleration options on the command line, see `Configure hardware acceleration <#/studio/run/emulator-acceleration#command-gpu>`__.
   -  Ensure that your router is not using IPv6 addresses if you don't have an
      IPv6 connection.

   If you are still experiencing problems with the Android Emulator running
   slowly, `report a bug <#/studio/report-bugs#emulator-bugs>`__ and include the
   necessary Android Emulator details so we can investigate.

   .. rubric:: Windows: Free RAM and commit charge
      :name: win-commit-limit

   When the emulator starts, it needs to initialize the Android guest operating
   system's RAM. On Windows, the emulator requests that Windows account for the
   full size of guest memory at start time, even though during actual operation,
   the memory may be paged in on demand. The emulator requests the full amount
   of guest memory at start time because Windows is conservative in ensuring
   that there is enough physical RAM and pagefile available to hold the entire
   potential working set. This request prepares for the worst case, where all
   guest memory is touched quickly without any opportunity to discard or
   otherwise free memory.

   Sometimes, when the emulator asks Windows to account for this full guest
   memory size, the request exceeds the current *commit limit*, which is the
   total of the available physical RAM and pagefile. In this case, Windows can't
   guarantee that the worst-case working set fits in either physical RAM or
   pagefile, and the emulator fails to start.

   In typical cases, the amount of hard drive space allocated for the pagefile
   plus physical RAM is more than enough for most use cases of the emulator.
   However, if you experience failures to start the emulator because of
   exceeding the commit limit, we recommend examining the current commit charge,
   which can be seen in the **Performance** tab in the Windows Task Manager. To
   open the Task Manager, press Ctrl+Shift+Esc.

   To lower the likelihood of exceeding the commit limit in various ways:

   -  Free physical RAM before launching the emulator by closing unused
      applications and files.

   -  Disable third-party memory management and memory compression utilities.
      These utilities can inefficiently cause an excess commit charge and bring
      your system closer to the commit limit.

   -  Use a *system managed size* for the Windows pagefile, which can more
      flexibly and dynamically increase the pagefile size, and therefore the
      commit limit, in response to increased demand from the emulator and other
      applications.

      For more information on commit charges and why a flexible setting works
      best, read `this Microsoft article <https://blogs.technet.microsoft.com/markrussinovich/2008/11/17/pushing-the-limits-of-windows-virtual-memory/>`__.

   .. rubric:: Multi-touch does not work in tool window
      :name: multi-touch-does

   Multi-touch gestures, including two-finger panning, don't work when the
   emulator is running in a tool window. To enable multi-touch, `launch the emulator in a separate window <#/studio/run/advanced-emulator-usage#standalone-window>`__.

   .. rubric:: Emulator degrades Bluetooth audio output
      :name: emulator-degrades

   If you are using a Bluetooth headset, you might notice that the Bluetooth
   headphone audio output degrades when the emulator runs 
   (`issue 183139207 <https://issuetracker.google.com/issues/183139207>`__). This
   happens because when the emulator launches, it turns on the headset's
   microphone, which causes the headset to switch the duplex mode with reduced
   quality.

   To avoid this problem, disable the microphone in the emulator by adding
   ``hw.audioInput=no`` to the ``config.ini`` file of the Android Virtual Device
   (AVD). To find an AVD's ``config.ini`` file, go to the AVD in the Device
   Manager, click its overflow menu, and select **Show on Disk**.

   .. rubric:: Windows: Emulator fails to launch if there is Unicode in the AVD
      name
      :name: emulator-fails

   On Windows, when the Device Manager creates an Android Virtual Device (AVD),
   it by default creates the AVD at ``C:\Users\<name>\.android\avd``. However,
   if the AVD name (``<name>``) has Unicode, the emulator cannot launch the AVD
   properly using this default location.

   This issue is fixed in Emulator 31.3.6 and higher. To solve this issue,
   update the emulator by selecting **Tools > SDK Manager**.

   Alternatively, to work around this issue, set the environment variable
   ``ANDROID_SDK_HOME`` to a custom directory before creating an AVD. For
   example, create the directory ``C:\Android\home``, and then set
   ``ANDROID_SDK_HOME`` to this newly created directory. To learn more, see
   `Environment variables <#/studio/command-line/variables>`__.

   .. rubric:: Embedded emulator window too small
      :name: embedded-emulator

   On machines with lower resolution, such as 1024x768, it can be difficult to
   read the emulator screen when it runs in a tool window in Android Studio. To
   give the emulator more space, close the **Device Manager** tool window if
   it's open. You can also pull the emulator window out of Android Studio. To do
   so, in the emulator window, click on **Settings > View Mode** and select
   **Window** instead of **Dock Pinned**.

   .. rubric:: Error: vulkan-1.dll cannot be found
      :name: error:-`vulkan-1.dll

   If the emulator fails to launch due to the error
   ``vulkan-1.dll cannot be found``, you probably need to update the emulator.
   To update the emulator in Android Studio, go to **Tools > SDK Manager** and
   install the latest stable version of Android platform.

   Alternatively, if you don't need any apps that use the
   `Vulkan <#/ndk/guides/graphics/getting-started>`__ graphics library, turn off
   Vulkan by `launching the emulator from the command line <#/studio/run/emulator-commandline>`__ with the flag
   ``-feature -Vulkan``.

   .. rubric:: No internet: server DNS address cannot be found
      :name: no-internet:

   If the emulator cannot connect to the internet, try `launching the emulator from the command line <#/studio/run/emulator-commandline>`__ using the option
   ``-dns-server “2001:4860:4860::8844,2001:4860:4860::8888,8.8.8.8,8.8.4.4”``.
   This command supplies a comma-separated list of Google Public DNS IP
   addresses. For more information about Google Public DNS, see `Google Public DNS for your devices <https://developers.google.cn/speed/public-dns/docs/using>`__.

   .. rubric:: No internet: DNS resolution issues
      :name: no-internet-resolution:

   Sometimes DNS addresses in the ``/etc/resolv.conf`` file don't work properly.
   You can work around this issue by `launching the emulator from the command line <#/studio/run/emulator-commandline>`__ using the option
   ``-dns-server 8.8.8.8`` or ``-dns.server 2001:4860:4860::8888`` to connect
   over an IPv6-only network.

   .. rubric:: Unable to create a snapshot
      :name: unable-create

   Creating a `snapshot <#/studio/run/advanced-emulator-usage#snapshots>`__ of
   the emulator that includes the
   `Vulkan <#/ndk/guides/graphics/getting-started>`__ graphics library is not
   supported. To run the emulator without Vulkan, `launch the emulator from the command line <#/studio/run/emulator-commandline>`__ with the flag
   ``-feature -Vulkan``. Alternatively, you can uninstall and avoid using apps
   with Vulkan, such as Chrome on API 30 or higher, if you want to use snapshots
   as part of your development workflow.

   .. rubric:: Cannot open webpage correctly
      :name: cannot-open

   Starting with API level 30, Chrome uses the
   `Vulkan <#/ndk/guides/graphics/getting-started>`__ graphics library as its
   rendering backend, and it could have compatibility issues on certain
   machines. If Chrome does not render correctly for you, try to `launch the emulator from the command line <#/studio/run/emulator-commandline>`__ with the
   flag ``-feature -Vulkan``.

   .. rubric:: Intel HAXM hypervisor does not fully support pre-Intel iX CPUs
      :name: intel-haxm

   If your computer has a pre-Intel iX CPU and the Intel HAXM hypervisor, you
   might experience performance issues with the emulator. This is because the
   emulator is unable to use hardware acceleration to improve performance on
   these older machines. If you are using a pre-Intel iX CPU, you might have a
   better testing experience if you use a physical device instead of the
   emulator.

   .. rubric:: Hypervisors cannot emulate certain CPU features required by x86
      Android systems
      :name: hypervisors-cannot

   Hypervisors generally cannot emulate certain CPU features, such as `Streaming SIMD Extensions (SSE) <https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions>`__, required
   by x86 Android systems.

   .. rubric:: Android Virtual Devices fail to launch on ChromeOS
      :name: avds-fail-chrome

   On ChromeOS, Android Virtual Devices (AVDs) might fail to launch because the
   ``libnss3`` dependency is missing. To launch the AVDs successfully, run
   ``sudo apt install libnss3`` to manually install the ``libnss3`` library.

   .. rubric:: GPU Driver Warning - Falling Back To Software on Intel HD4000
      :name: gpu-driver-warning

   If you are receiving a warning about GPU driver falling back, try to change
   the GPU config to hardware. By default it uses auto which might pick software
   rendering. If you choose hardware you should be able to force it to use
   hardware rendering (it might still pop a warning message).

   For non-playstore images, you could do it in device manager -> 3 dots ->
   edit. For playstore images, you would need to manually edit those 2 config
   files:

   ~/.android/your_avd_name.avd/config.ini

   ~/.android/your_avd_name.avd/hardware-qemu.ini

   and change ``hw.gpu.mode`` to ``host``

   See `bug <https://issuetracker.google.com/issues/229642759>`__ for more
   details.

   .. rubric:: Emulator does not boot on Windows Chrome Remote Desktop
      :name: crd-boot-error

   If Emulator does not boot while using Chrome Remote Desktop on Windows, the
   current recommended workaround is to use-gpu flag like -gpu host or -gpu
   swiftshader.

Last updated 2024-04-30 UTC.


/Android Device Streaming
=========================

.. https://developer.android.google.cn/studio/run/android-device-streaming?hl=en

.. container:: devsite-article-body clearfix

   Android Device Streaming, powered by Firebase, lets you securely connect to
   remote physical Android devices hosted in Google's secure data centers. It's
   the fastest and easiest way to test your app against physical units of some
   of the latest Android devices, including the Google Pixel 8 and 8 Pro, Pixel
   Fold, select Samsung devices, and more.

   .. figure:: https://developer.android.google.cn/static/studio/releases/assistant/2023.3.1/device-streaming.gif
      name: device-streaming
      :alt: Animation of using Device Streaming in Android Studio.
      :width: 100.0%

   Android Device Streaming is now in beta. During this period, **device
   streaming is available to you at no cost** with Firebase projects on either a
   Spark or Blaze plan.

   After connecting to a device, you can deploy your app, view the display,
   interact with the device (including rotating or unfolding the device), and
   anything else you might do with a device over a direct ADB over SSL
   connection—all without leaving Android Studio. When you're done using the
   device, Google wipes all your data and factory reset the device before making
   it available to another developer.

   .. rubric:: Get started in the beta period
      :name: get-started

   To get started with the beta, follow these steps:

   #. If you haven't already done so, download and install the latest version of
      `Android Studio Jellyfish <#/studio>`__.
   #. Open an Android Studio project.
   #. Navigate to **View > Tool Windows > Device Manager** and click the
      Firebase |Dialog in Android Studio that helps you configure device
      streaming.| button near the top of the window.
   #. If you're not already signed in to your developer account, click **Log in
      to Google** and follow the prompts.
   #. After providing Android Studio with the requested permissions, return to
      the IDE and select a Firebase project.

      #. If you don't have a Firebase project, you can create one at no cost in
         the `Firebase Console <https://console.firebase.google.com>`__. Keep in
         mind, there might be a small delay between creating a new project and
         having it be selectable from Android Studio.
      #. If you get an error that you lack the proper permissions to use device
         streaming with the selected project, follow the `instructions to enable permissions <#permissions>`__.

   #. After you select a project, you can browse the list of devices and select
      the devices you want to use by checking the box next to each device in the
      list.
      |image-device-streaming-configure-2|
   #. Click **OK**.

   After the devices you want to use appear in the Device Manager, you can
   connect to a device by either clicking **Start** action next to a device, or
   by selecting a device from the deploy target drop-down in the main toolbar
   and deploying your app, like you normally would.

   After Android Studio reserves and connects to the device you requested, the
   **Running Devices** window will appear. To extend a session, click the
   **Extend Reservation** button from the **Running Devices** window toolbar and
   select the duration you want to extend your session by.

   When you're done using a device, remember click **Return and Erase Device**
   either from overflow menu for the device in the Device Manager or from the
   notification that appears after closing the device tab in the Running Devices
   window. This ensures that you don't spend device minutes unnecessarily, and
   your device is securely wiped and factory reset after before it is made
   available to another developer. Any unused minutes from your session are
   returned to your project.

   .. rubric:: Enable permissions
      :name: permissions

   To use device streaming, you need to use a Firebase project for which you
   have either **Editor** or **Owner** permissions.

   If you don't have these permissions for your existing Firebase projects, you
   can either create a new one as an Owner at no cost in the `Firebase Console <https://console.firebase.google.com>`__, or ask someone on your team
   who does to follow these steps:

   #. Navigate to the IAM section of the `Google Cloud Console <https://console.cloud.google.com/iam-admin>`__.
   #. Click **View by principles > Grant access**.
   #. Add the user IDs for each user you want to be able to access device
      streaming.
   #. Using the **Select a role** drop-down, select the **Firebase Test Lab
      Direct Access Admin** role.
   #. Click **Add another role** and select **Service Usage Consumer** from the
      **Select a role** drop-down.
   #. Save the changes by clicking **Save**

   .. rubric:: Pricing for Android Device Streaming
      :name: pricing

   **Billing for Android Device Streaming is disabled through May 31st, 2024.**

   For more information, please see `Firebase usage levels, quotas, and pricing <https://firebase.google.cn/docs/test-lab/usage-quotas-pricing#device-streaming>`__.

   .. rubric:: Frequently asked questions
      :name: faq

   .. rubric:: What makes Android Device Streaming, powered by Firebase,
      different?
      :name: what_makes_android_device_streaming_powered_by_firebase_different

   Devices, security, and functionality. Android Device Streaming is where you
   can expect to have access to some of the latest Android devices as easily and
   quickly as possible. Additionally, the service supports a select number of
   older devices, so that you have access to a wide range of configurations and
   API levels. And because these devices are housed in Google's secure data
   center, your sessions are secure and your devices are guaranteed to be
   factory reset and wiped before they are made available to another user.

   Finally, the service is integrated directly with Android Studio and
   accessible over an ADB over SSL connection, so the tools you use everyday
   over ADB work seamlessly with device streaming.

   .. rubric:: How much does the service cost?
      :name: how_much_does_the_service_cost

   For pricing details, see `Pricing for Android Device Streaming <#pricing>`__.

   .. rubric:: Is my session secure and what happens when my session ends?
      :name: is_my_session_secure_and_what_happens_when_my_session_ends

   Each device is located in Google's secure data centers and connects to your
   workstation using an ADB over SSL connection. When your session ends, device
   data is guaranteed to be fully wiped and factory reset before the device is
   made available to another developer.

   .. rubric:: Do I need to use Android Studio?
      :name: do_i_need_to_use_android_studio

   While Android Studio Jellyfish or later is required to connect to the service
   and request a device, the direct ADB over SSL connection lets you use any
   tools or IDEs that use ADB to communicate with test devices after you reserve
   and connect to a device.

Last updated 2024-05-02 UTC.


.. |Dialog in Android Studio that helps you configure device streaming.| image:: https://developer.android.google.cn/static/studio/images/firebase-device-streaming.png
   :class: inline-icon
.. |image-device-streaming-configure-2| image:: https://developer.android.google.cn/static/studio/images/device-streaming-configure-2.png
   :width: 450px
   :height: 698px


/Get started: Run your app on a local device
============================================

.. https://developer.android.google.cn/studio/run/device?hl=en

.. container:: devsite-article-body clearfix

   Always test your Android app on a real device before releasing it to users.
   This page describes how to set up your development environment and Android
   device for testing and debugging over an Android Debug Bridge (ADB)
   connection.

   **Note:**\  Use the `Android Emulator <#/studio/run/emulator>`__ to test your
   app on different versions of the Android platform and different screen sizes.
   Consider using `Firebase Test Lab <https://firebase.google.cn/docs/test-lab/>`__ to run your app on a wide
   variety of real devices hosted in a cloud-based infrastructure.

   .. rubric:: Set up a device for development
      :name: setting-up

   Before you can start debugging on your device, decide whether you want to
   connect to the device using a USB cable or Wi-Fi. Then do the following:

   #. On the device, open the **Settings** app, select **Developer options**,
      and then enable **USB debugging** (if applicable).

      **Note:**\  If you don't see **Developer options**, follow the
      instructions to `enable developer options <#/studio/debug/dev-options>`__.

   #. Set up your system to detect your device.

      -  **ChromeOS**: No additional configuration required.

      -  **macOS**: No additional configuration required.

      -  **Windows**: Install a USB driver for ADB (if applicable). For an
         installation guide and links to OEM drivers, see `Install OEM USB drivers <#/studio/run/oem-usb>`__.

      -  **Ubuntu Linux**: Set up the following:

         -  Each user that wants to use ADB needs to be in the ``plugdev``
            group. If you see an error message that says you're not in the
            ``plugdev`` group, add yourself to it using the following command:

         .. code:: devsite-click-to-copy

            sudo usermod -aG plugdev $LOGNAME

         Groups only update on login, so you must log out for this change to
         take effect. When you log back in, you can use ``id`` to check that
         you're in the ``plugdev`` group.

         -  The system needs to have ``udev`` rules installed that cover the
            device. The ``android-sdk-platform-tools-common`` package contains a
            community-maintained default set of ``udev`` rules for Android
            devices. To install it, use the following command:

         .. code:: devsite-click-to-copy

            apt-get install android-sdk-platform-tools-common

   .. rubric:: Connect to your device using USB
      :name: connect

   When you're set up and plugged in over USB, click **Run** |image-toolbar-run| in Android
   Studio to `build and run your app <#/studio/run>`__ on the device.

   You can also use `adb <#/studio/command-line/adb>`__ to issue commands, as
   follows:

   -  Verify that your device is connected by running the ``adb devices``
      command from your ``android_sdk``\ ``/platform-tools/`` directory. If
      connected, you'll see the device listed.
   -  Issue any `adb command <#/studio/command-line/adb#issuingcommands>`__
      with the ``-d`` flag to target your device.

   .. rubric:: Connect to your device using Wi-Fi
      :name: wireless

   Android 11 and higher supports deploying and debugging your app wirelessly
   from your workstation via Android Debug Bridge (ADB). For example, you can
   deploy your debuggable app to multiple remote devices without physically
   connecting your device via USB and contending with common USB connection
   issues, such as driver installation.

   To use wireless debugging, you need to pair your device to your workstation
   using a pairing code. To begin, complete the following steps:

   #. Ensure that your workstation and device are connected to the same wireless
      network.
   #. Ensure that your device is running Android 11 or higher. For more
      information, see `Check & update your Android version <https://support.google.com/android/answer/7680439>`__.
   #. Ensure that you have the latest version of Android Studio installed.
      `Download it here <#/studio>`__.
   #. On your workstation, update to the latest version of the `SDK Platform Tools <#/studio/releases/platform-tools>`__.

   To connect to your device, follow these steps:

   #. Open Android Studio and select **Pair Devices Using Wi-Fi** from the run
      configurations menu.

      .. container::

         .. figure:: https://developer.android.google.cn/static/studio/images/run/adb_wifi-pair_device.png
            :alt: Run configurations drop-down
            :figclass: screenshot
            :width: 60.0%

            **Figure 1.** Run configurations menu.

      The **Pair devices over Wi-Fi** dialog appears, as shown in figure 2.

      .. container::

         .. figure:: https://developer.android.google.cn/static/studio/images/run/adb_wifi-qr_code_scan.png
            :alt: Screenshot of the pair devices over Wi-Fi popup window
            :figclass: screenshot

            **Figure 2.** Dialog to pair devices using QR code or pairing code.

   #. Enable `developer options <#/studio/debug/dev-options>`__ on your device.
   #. Enable `debugging over Wi-Fi <#/studio/command-line/adb#connect-to-a-device-over-wi-fi>`__ on your
      device.

      .. container::

         .. figure:: https://developer.android.google.cn/static/studio/images/run/adb_wifi-wireless_debugging.png
            :alt: Screenshot of a pixel phone showing the Wireless debugging
            systems setting.
            :figclass: screenshot

            **Figure 3.** The **Wireless debugging** setting on a Google Pixel
            phone.

   #. Tap **Wireless debugging** and pair your device:

      #. To pair your device with a QR code, select **Pair device with QR code**
         and scan the QR code, shown in figure 2.
      #. To pair your device with a pairing code, select **Pair device with
         pairing code** from the **Pair new devices over Wi-Fi** dialog. On your
         device, select **Pair using pairing code**. A six-digit code appears.
         Once your device appears on the **Pair devices over Wi-Fi** window,
         enter the six-digit code shown on your device and select **Pair** .

         .. container::

            .. figure:: https://developer.android.google.cn/static/studio/images/run/adb_wifi-pin_code_entry.png
               :alt: Screenshot of example pairing code entry
               :figclass: screenshot

               **Figure 4.** Example of six-digit pairing code entry.

   #. After pairing, you can attempt to deploy your app to your device.

   To pair a different device or to forget this device on your workstation:

   #. Navigate to **Wireless debugging** on your device.
   #. Tap your workstation name under **Paired devices**.
   #. Select **Forget**.

   .. rubric:: Device mirroring
      :name: device-mirroring

   You can mirror your physical device in the **Running Devices** window in
   Android Studio. By streaming your device's display directly to Android
   Studio, you can use the Studio IDE itself to execute common actions such as
   starting apps and interacting with them, rotating the screen, folding and
   unfolding the phone, and changing the volume.

   Device mirroring is always available when there are devices connected to the
   computer that have USB or wireless debugging enabled. You can start and stop
   mirroring using the **Running Devices** window or the **Device Manager**
   (**View > Tool Windows > Device Manager**). You can also customize when
   device mirroring is activated in its settings (**Settings > Tools > Device
   Mirroring**).

   **Note:**\  If you're using certain devices, for example the Xiaomi Redmi
   K40, Poco F3, or Mi 11X, with Android 12, you must enable both the **USB
   debugging** and **USB debugging (Security settings)** settings and then
   restart the device to enable device mirroring.
   |Running Devices UI|

   .. rubric:: Redirect audio
      :name: redirect-audio

   When you're using device mirroring, you can redirect audio from connected
   physical devices to your computer speakers or headphones. With audio
   redirection, keep your headphones connected to your computer and listen to
   both the computer and connected phone without having to manually reconnect to
   one device and then another. To enable audio redirection, go to **File**
   (**Android Studio** on macOS) > **Settings** > **Tools** > **Device
   Mirroring** and select **Redirect audio from local devices**. Note that audio
   is always redirected, regardless of the settings, for Firebase Test Lab
   devices running Android 12 or higher.

   .. rubric:: Known issues
      :name: device-mirroring-issues

   Some devices might not be capable of encoding at a bitrate sufficient to
   support device mirroring. In these situations, you might see an error in the
   **Running Devices** window as well as logs similar to the following.

   .. code:: devsite-click-to-copy

      2023-06-01 15:32:22,675 [  56094]   WARN - ScreenSharingAgent Samsung SM-A045F API 33 - Too many video encoder errors:
      2023-06-01 15:32:22,676 [  56095]   WARN - ScreenSharingAgent Samsung SM-A045F API 33 - encoder: c2.android.vp8.encoder
      2023-06-01 15:32:22,676 [  56095]   WARN - ScreenSharingAgent Samsung SM-A045F API 33 - mime type: video/x-vnd.on2.vp8
      2023-06-01 15:32:22,676 [  56095]   WARN - ScreenSharingAgent Samsung SM-A045F API 33 - max resolution: 640x640
      2023-06-01 15:32:22,676 [  56095]   WARN - ScreenSharingAgent Samsung SM-A045F API 33 - min resolution: 2x2
      2023-06-01 15:32:22,676 [  56095]   WARN - ScreenSharingAgent Samsung SM-A045F API 33 - alignment: 2x2
      2023-06-01 15:32:22,676 [  56095]   WARN - ScreenSharingAgent Samsung SM-A045F API 33 - max frame rate: 960
      2023-06-01 15:32:22,676 [  56095]   WARN - ScreenSharingAgent Samsung SM-A045F API 33 - max frame rate for 288x640: 960
      2023-06-01 15:32:22,870 [  56289]   WARN - ScreenSharingAgent Samsung SM-A045F API 33 - max bitrate: 20000000
      2023-06-01 15:32:22,871 [  56290]   WARN - ScreenSharingAgent Samsung SM-A045F API 33 - terminated with code 1

   .. rubric:: Privacy notice
      :name: device-mirroring-notice

   Based on the device mirroring settings, Android Studio can automatically
   start device mirroring for any connected and paired device. This might result
   in information disclosure for devices connected with the ``adb tcpip``
   command because the mirroring information and commands are passed over a
   non-encrypted channel. In addition, Android Studio uses a non-encrypted
   channel to communicate with the adb server, so mirroring information can be
   intercepted by other users on your host machine.

   .. rubric:: Troubleshoot device connection
      :name: troubleshoot

   If your device is not connecting to Android Studio, try the following steps
   to resolve the issue:

   .. rubric:: Troubleshoot with the Connection Assistant
      :name: assistant

   The Connection Assistant provides step-by-step instructions to help you set
   up and use a device over the ADB connection.

   To start the assistant, choose **Tools** **> Troubleshoot Device
   Connections**.

   The Connection Assistant provides instructions, in-context controls, and a
   list of connected devices in a series of pages in the **Assistant** panel.
   Use the **Next** and **Previous** buttons at the bottom of the **Assistant**
   panel to work through the pages as needed:

   -  **Connect your device over USB**: The Connection Assistant first prompts
      you to connect your device over USB and provides a **Rescan USB devices**
      button where you can start a new scan for connected devices.
   -  **Enable USB debugging**: The Connection Assistant then tells you how to
      enable USB debugging in the on-device developer options.
   -  **Restart the ADB server**: If you still don't see your device on the list
      of available devices, use the **Restart ADB server** button on the last
      page of the Connection Assistant. Restarting the ADB server also causes
      ADB to scan for devices again. If you still don't see your device on the
      list of available devices, try the troubleshooting steps in the following
      section.

   .. rubric:: Resolve USB connection issues
      :name: resolve-usb-issues

   If the Connection Assistant doesn't detect your device over USB, try the
   following troubleshooting steps to resolve the issue:

   .. rubric:: Check that Android Studio connects to the Android Emulator
      :name: studio-emu-connection

   To check whether the issue is being caused by a connection problem between
   Android Studio and the Android Emulator, follow these steps:

   #. Open the `Device Manager <#/studio/run/managing-avds#viewing>`__.
   #. `Create a new AVD <#/studio/run/managing-avds#createavd>`__ if you don't
      already have one.
   #. `Run the emulator <#/studio/run/managing-avds#emulator>`__ using your AVD.
   #. Do one of the following:

      -  If Android Studio can't connect to the emulator, download the latest
         `SDK Platform Tools <#/studio/releases/platform-tools>`__ and then try
         again.
      -  If the emulator starts successfully, check the USB cable as described
         in the following section.

   .. rubric:: Check the USB cable
      :name: check-usb-cable

   To check whether the issue is being caused by a faulty USB cable, follow the
   steps in this section.

   If you have another USB cable:

   #. Connect the device using the secondary cable.
   #. Check whether the Connection Assistant can now detect the device.
   #. If the device is not detected, try the primary cable again.
   #. If the device still isn't detected, assume that the problem is with the
      device, and `check whether the device is set up for development <#check-device-setup>`__ 
      as described in the following section.

   If you don't have another USB cable but you do have another Android device:

   #. Connect the secondary device to your computer.

   #. If the Connection Assistant can detect the secondary device, assume that
      the problem is with the primary device, and `check whether the device is set up for development <#check-device-setup>`__.

      If the secondary device is not detected, the problem might be with the USB
      cable.

   .. rubric:: Check whether the device is set up for development
      :name: check-device-setup

   To check whether the issue is being caused by settings on the device, follow
   these steps:

   #. Follow the steps in the `Set up a device for development <#setting-up>`__
      section.
   #. If this doesn't resolve the problem, contact the device OEM's customer
      support for help. Tell the customer support representative that the device
      doesn't connect to Android Studio using ADB.

   .. rubric:: Resolve wireless connection issues
      :name: wireless-troubleshoot

   If you are having issues connecting to your device wirelessly, you can try
   the following troubleshooting steps to resolve the issue:

   .. rubric:: Check whether your workstation and device meet the prerequisites
      :name: check-prerequisites

   To meet the prerequisites for wireless debugging, ensure that:

   -  Your workstation and device are connected to the same wireless network.
   -  Your device is running Android 11 or higher. For more information, see
      `Check & update your Android version <https://support.google.com/android/answer/7680439>`__.
   -  You have the latest version of Android Studio. You can download it from
      `the main Android Studio page <#/studio>`__.
   -  You have the latest version of the `SDK Platform Tools <#/studio/releases/platform-tools>`__ on your workstation.

   .. rubric:: Check for other known issues
      :name: check-for-other-known-issues

   The following is a list of current known issues with wireless debugging in
   Android Studio and how to resolve them:

   -  **Wi-Fi is not connecting**: Some Wi-Fi networks, such as corporate Wi-Fi
      networks, may block p2p connections and not let you connect over Wi-Fi.
      Try connecting with a cable or another Wi-Fi network.
   -  **ADB over Wi-Fi sometimes turns off automatically**: This can happen if
      the device either switches Wi-Fi networks or disconnects from the network.

   .. rubric:: RSA security key
      :name: rsa

   When you connect a device running Android 4.2.2 (API level 17) or higher to
   your computer, the system shows a dialog asking whether to accept an RSA key
   that allows debugging through this computer. This security mechanism protects
   user devices because USB debugging and other ``adb`` commands can't be
   executed unless you're able to unlock the device and acknowledge the dialog.

Last updated 2024-05-03 UTC.

.. |image-toolbar-run| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-run.png
   :class: inline-icon
.. |Running Devices UI| image:: https://developer.android.google.cn/static/studio/images/device-mirroring.png

/Install OEM USB drivers
========================

.. https://developer.android.google.cn/studio/run/oem-usb?hl=en

.. container:: devsite-article-body clearfix

   If you are developing on Windows and want to connect a device for testing,
   then you need to install the appropriate USB driver. This page provides links
   to the web sites for several original equipment manufacturers (OEMs), where
   you can download the appropriate USB driver for your device.

   If you're developing on Mac OS X or Linux, then you shouldn't need a USB
   driver. Instead read `Using Hardware Devices <#/tools/device>`__.

   To connect and debug with any of the Google Nexus devices using Windows, you
   need to `install the Google USB driver <#/studio/run/win-usb>`__.

   .. rubric:: Install a USB driver
      :name: InstallingDriver

   First, find the appropriate driver for your device from the `OEM drivers <#Drivers>`__ table below.

   Once you've downloaded your USB driver, follow the instructions below to
   install or upgrade the driver, based on your version of Windows and whether
   you're installing for the first time or upgrading an existing driver. Then
   see `Using Hardware Devices <#/tools/device>`__ for other important
   information about using an Android device for development.

   **Caution:** You may make changes to ``android_winusb.inf`` file found inside
   ``usb_driver\`` (for example, to add support for other devices), however,
   this will lead to security warnings when you install or upgrade the driver.
   Making any other changes to the driver files may break the installation
   process.

   .. rubric:: Windows 10
      :name: Win10

   To install the Android USB driver on Windows 10 for the first time, do the
   following:

   #. Connect your Android device to your computer's USB port.
   #. From Windows Explorer, open **Computer Management**.
   #. In the **Computer Management** left pane, select **Device Manager**.
   #. In the **Device Manager** right pane, locate and expand **Portable
      Devices** or **Other Devices**, depending on which one you see.
   #. Right-click the name of the device you connected, and then select **Update
      Driver Software**.
   #. In the **Hardware Update wizard**, select **Browse my computer for driver
      software** and click **Next**.
   #. Click **Browse** and then locate the USB driver folder. For example, the
      Google USB Driver is located in
      ``android_sdk``\ ``\extras\google\usb_driver\``.
   #. Click **Next** to install the driver.

   .. rubric:: Windows 8.1
      :name: Win8

   To install the Android USB driver on Windows 8.1 for the first time, do the
   following:

   #. Connect your Android device to your computer's USB port.

   #. Access search, as follows:

      Touch screen: On your computer, swipe in from the right edge of the screen
      and tap **Search**.

      Using a mouse: Point to the lower-right corner of the screen, move the
      mouse pointer up, and then click **Search**.

   #. In the search box, type into and then click **Device Manager**.

   #. Double-click the device category, and then double-click the device you
      want.

   #. Click the **Driver** tab, click **Update Driver**, and follow the
      instructions.

   .. rubric:: Windows 7
      :name: Win7

   To install the Android USB driver on Windows 7 for the first time, do the
   following:

   #. Connect your Android device to your computer's USB port.
   #. Right-click on **Computer** from your desktop or Windows Explorer, and
      select **Manage**.
   #. Select **Devices** in the left pane.
   #. Locate and expand **Other device** in the right pane.
   #. Right-click the device name (such as **Nexus S**) and select **Update
      Driver Software**. This will launch the Hardware Update Wizard.
   #. Select **Browse my computer for driver software** and click **Next**.
   #. Click **Browse** and locate the USB driver folder. (The Google USB Driver
      is located in ``android_sdk``\ ``\extras\google\usb_driver\``.)
   #. Click **Next** to install the driver.

   Or, to *upgrade* an existing Android USB driver on Windows 7 and higher with
   the new driver:

   #. Connect your Android device to your computer's USB port.
   #. Right-click on **Computer** from your desktop or Windows Explorer, and
      select **Manage**.
   #. Select **Device Manager** in the left pane of the Computer Management
      window.
   #. Locate and expand **Android Phone** in the right pane.
   #. Right-click on **Android Composite ADB Interface** and select **Update
      Driver**. This will launch the Hardware Update Wizard.
   #. Select **Install from a list or specific location** and click **Next**.
   #. Select **Search for the best driver in these locations**; uncheck **Search
      removable media**; and check **Include this location in the search**.
   #. Click **Browse** and locate the USB driver folder. (The Google USB Driver
      is located in ``android_sdk``\ ``\extras\google\usb_driver\``.)
   #. Click **Next** to upgrade the driver.

   .. rubric:: Get OEM drivers
      :name: Drivers

   .. list-table::
      :header-rows: 1

      - 

         - OEM
         - Driver URL
      - 

         - Acer
         - https://www.acer.com/worldwide/support/
      - 

         - Alcatel Mobile
         - https://www.alcatelmobile.com/support/
      - 

         - Asus
         - https://www.asus.com/support/Download-Center/
      - 

         - Blackberry
         - https://swdownloads.blackberry.com/Downloads/entry.do?code=4EE0932F46276313B51570F46266A608
      - 

         - Dell
         - https://support.dell.com/support/downloads/index.aspx?c=us&cs=19&l=en&s=dhs&~ck=anavml
      - 

         - FCNT
         - https://www.fcnt.com/support/develop/#anc-03
      - 

         - HTC
         - https://www.htc.com/support
      - 

         - Huawei
         - https://consumer.huawei.com/en/support/index.htm
      - 

         - Intel
         - https://www.intel.com/software/android
      - 

         - Kyocera
         - https://kyoceramobile.com/support/drivers/
      - 

         - Lenovo
         - https://support.lenovo.com/us/en/GlobalProductSelector
      - 

         - LGE
         - https://www.lg.com/us/support/software-firmware
      - 

         - Motorola
         - ttps://motorola-global-portal.custhelp.com/app/answers/detail/a_id/88481
      - 

         - MTK
         - http://online.mediatek.com/Public%20Documents/MTK_Android_USB_Driver.zip
            (ZIP download)
      - 

         - Samsung
         - https://developer.samsung.com/galaxy/others/android-usb-driver-for-windows
      - 

         - Sharp
         - http://k-tai.sharp.co.jp/support/
      - 

         - Sony Mobile Communications
         - https://developer.sonymobile.com/downloads/drivers/
      - 

         - Toshiba
         - https://support.toshiba.com/sscontent?docId=4001814
      - 

         - Xiaomi
         - https://web.vip.miui.com/page/info/mio/mio/detail?postId=18464849&app_version=dev.20051
      - 

         - ZTE
         - http://support.zte.com.cn/support/news/NewsDetail.aspx?newsId=1000442

   If you don't see a link for the manufacturer of your device here, go to the
   support section of the manufacturer's website and search for USB driver
   downloads for your device.

Last updated 2023-04-12 UTC.

/Get the Google USB driver
==========================

.. https://developer.android.google.cn/studio/run/win-usb?hl=en

.. container:: devsite-article-body clearfix

   The Google USB Driver is required to perform
   `adb <#/studio/command-line/adb>`__ debugging on Windows with Google
   devices. Windows drivers for all other devices are provided by the respective
   hardware manufacturer, as listed in `Install OEM USB drivers <#/tools/extras/oem-usb>`__.

   **Note:** If you're developing on macOS or Linux, then you **do not** need to
   install a USB driver. Instead see `Run apps on a hardware device <#/studio/run/device>`__.

   There are two ways to download the Google USB Driver for Windows:

   -  Download the Google USB Driver ZIP file (ZIP).

   -  Get it from the `Android SDK Manager <#/studio/intro/update#sdk-manager>`__
      as follows:

      #. In Android Studio, click **Tools > SDK Manager**.

      #. Click the **SDK Tools** tab.

      #. Select **Google USB Driver** and click **OK**.

         |SDK Manager with the Google USB Driver selected|

         **Figure 1.** The SDK Manager with the Google USB Driver selected.

      #. Install the package. When done, the driver files are downloaded into
         the ``android_sdk``\ ``\extras\google\usb_driver\`` directory.

      Using the SDK Manager helps you keep the driver up to date by notifying
      you when your current driver is out of date.

   For installation information, read `Install a USB driver <#/studio/run/oem-usb#InstallingDriver>`__.

   .. container:: devsite-dialog dac-download-dialog
      :name: dac-download-dialog-id

      .. container:: devsite-dialog-contents

         .. rubric:: Download the Google USB driver
            :name: download-dynamic_data.setvar.dialog_product_name
            :class: hide-from-toc

         Before downloading, you must agree to the following terms and
         conditions.

         .. container:: dialog-content-stretch sdk-terms

            .. rubric:: Terms and Conditions
               :name: terms-and-conditions
               :class: hide-from-toc

            This is the Android Software Development Kit License Agreement
            .. rubric:: 1. Introduction
               :name: 1.-introduction
               :class: hide-from-toc

            1.1 The Android Software Development Kit (referred to in the License
            Agreement as the "SDK" and specifically including the Android system
            files, packaged APIs, and Google APIs add-ons) is licensed to you
            subject to the terms of the License Agreement. The License Agreement
            forms a legally binding contract between you and Google in relation
            to your use of the SDK. 1.2 "Android" means the Android software
            stack for devices, as made available under the Android Open Source
            Project, which is located at the following URL:
            https://source.android.com/, as updated from time to time. 1.3 A
            "compatible implementation" means any Android device that (i)
            complies with the Android Compatibility Definition document, which
            can be found at the Android compatibility website
            (https://source.android.com/compatibility) and which may be updated
            from time to time; and (ii) successfully passes the Android
            Compatibility Test Suite (CTS). 1.4 "Google" means Google LLC,
            organized under the laws of the State of Delaware, USA, and
            operating under the laws of the USA with principal place of business
            at 1600 Amphitheatre Parkway, Mountain View, CA 94043, USA.

            .. rubric:: 2. Accepting this License Agreement
               :name: 2.-accepting-this-license-agreement
               :class: hide-from-toc

            2.1 In order to use the SDK, you must first agree to the License
            Agreement. You may not use the SDK if you do not accept the License
            Agreement. 2.2 By clicking to accept and/or using this SDK, you
            hereby agree to the terms of the License Agreement. 2.3 You may not
            use the SDK and may not accept the License Agreement if you are a
            person barred from receiving the SDK under the laws of the United
            States or other countries, including the country in which you are
            resident or from which you use the SDK. 2.4 If you are agreeing to
            be bound by the License Agreement on behalf of your employer or
            other entity, you represent and warrant that you have full legal
            authority to bind your employer or such entity to the License
            Agreement. If you do not have the requisite authority, you may not
            accept the License Agreement or use the SDK on behalf of your
            employer or other entity.

            .. rubric:: 3. SDK License from Google
               :name: 3.-sdk-license-from-google
               :class: hide-from-toc

            3.1 Subject to the terms of the License Agreement, Google grants you
            a limited, worldwide, royalty-free, non-assignable, non-exclusive,
            and non-sublicensable license to use the SDK solely to develop
            applications for compatible implementations of Android. 3.2 You may
            not use this SDK to develop applications for other platforms
            (including non-compatible implementations of Android) or to develop
            another SDK. You are of course free to develop applications for
            other platforms, including non-compatible implementations of
            Android, provided that this SDK is not used for that purpose. 3.3
            You agree that Google or third parties own all legal right, title
            and interest in and to the SDK, including any Intellectual Property
            Rights that subsist in the SDK. "Intellectual Property Rights" means
            any and all rights under patent law, copyright law, trade secret
            law, trademark law, and any and all other proprietary rights. Google
            reserves all rights not expressly granted to you. 3.4 You may not
            use the SDK for any purpose not expressly permitted by the License
            Agreement. Except to the extent required by applicable third party
            licenses, you may not copy (except for backup purposes), modify,
            adapt, redistribute, decompile, reverse engineer, disassemble, or
            create derivative works of the SDK or any part of the SDK. 3.5 Use,
            reproduction and distribution of components of the SDK licensed
            under an open source software license are governed solely by the
            terms of that open source software license and not the License
            Agreement. 3.6 You agree that the form and nature of the SDK that
            Google provides may change without prior notice to you and that
            future versions of the SDK may be incompatible with applications
            developed on previous versions of the SDK. You agree that Google may
            stop (permanently or temporarily) providing the SDK (or any features
            within the SDK) to you or to users generally at Google's sole
            discretion, without prior notice to you. 3.7 Nothing in the License
            Agreement gives you a right to use any of Google's trade names,
            trademarks, service marks, logos, domain names, or other distinctive
            brand features. 3.8 You agree that you will not remove, obscure, or
            alter any proprietary rights notices (including copyright and
            trademark notices) that may be affixed to or contained within the
            SDK.

            .. rubric:: 4. Use of the SDK by You
               :name: 4.-use-of-the-sdk-by-you
               :class: hide-from-toc

            4.1 Google agrees that it obtains no right, title or interest from
            you (or your licensors) under the License Agreement in or to any
            software applications that you develop using the SDK, including any
            intellectual property rights that subsist in those applications. 4.2
            You agree to use the SDK and write applications only for purposes
            that are permitted by (a) the License Agreement and (b) any
            applicable law, regulation or generally accepted practices or
            guidelines in the relevant jurisdictions (including any laws
            regarding the export of data or software to and from the United
            States or other relevant countries). 4.3 You agree that if you use
            the SDK to develop applications for general public users, you will
            protect the privacy and legal rights of those users. If the users
            provide you with user names, passwords, or other login information
            or personal information, you must make the users aware that the
            information will be available to your application, and you must
            provide legally adequate privacy notice and protection for those
            users. If your application stores personal or sensitive information
            provided by users, it must do so securely. If the user provides your
            application with Google Account information, your application may
            only use that information to access the user's Google Account when,
            and for the limited purposes for which, the user has given you
            permission to do so. 4.4 You agree that you will not engage in any
            activity with the SDK, including the development or distribution of
            an application, that interferes with, disrupts, damages, or accesses
            in an unauthorized manner the servers, networks, or other properties
            or services of any third party including, but not limited to, Google
            or any mobile communications carrier. 4.5 You agree that you are
            solely responsible for (and that Google has no responsibility to you
            or to any third party for) any data, content, or resources that you
            create, transmit or display through Android and/or applications for
            Android, and for the consequences of your actions (including any
            loss or damage which Google may suffer) by doing so. 4.6 You agree
            that you are solely responsible for (and that Google has no
            responsibility to you or to any third party for) any breach of your
            obligations under the License Agreement, any applicable third party
            contract or Terms of Service, or any applicable law or regulation,
            and for the consequences (including any loss or damage which Google
            or any third party may suffer) of any such breach.

            .. rubric:: 5. Your Developer Credentials
               :name: 5.-your-developer-credentials
               :class: hide-from-toc

            5.1 You agree that you are responsible for maintaining the
            confidentiality of any developer credentials that may be issued to
            you by Google or which you may choose yourself and that you will be
            solely responsible for all applications that are developed under
            your developer credentials.

            .. rubric:: 6. Privacy and Information
               :name: 6.-privacy-and-information
               :class: hide-from-toc

            6.1 In order to continually innovate and improve the SDK, Google may
            collect certain usage statistics from the software including but not
            limited to a unique identifier, associated IP address, version
            number of the software, and information on which tools and/or
            services in the SDK are being used and how they are being used.
            Before any of this information is collected, the SDK will notify you
            and seek your consent. If you withhold consent, the information will
            not be collected. 6.2 The data collected is examined in the
            aggregate to improve the SDK and is maintained in accordance with
            Google's Privacy Policy, which is located at the following URL:
            https://policies.google.com/privacy 6.3 Anonymized and aggregated
            sets of the data may be shared with Google partners to improve the
            SDK.

            .. rubric:: 7. Third Party Applications
               :name: 7.-third-party-applications
               :class: hide-from-toc

            7.1 If you use the SDK to run applications developed by a third
            party or that access data, content or resources provided by a third
            party, you agree that Google is not responsible for those
            applications, data, content, or resources. You understand that all
            data, content or resources which you may access through such third
            party applications are the sole responsibility of the person from
            which they originated and that Google is not liable for any loss or
            damage that you may experience as a result of the use or access of
            any of those third party applications, data, content, or resources.
            7.2 You should be aware the data, content, and resources presented
            to you through such a third party application may be protected by
            intellectual property rights which are owned by the providers (or by
            other persons or companies on their behalf). You may not modify,
            rent, lease, loan, sell, distribute or create derivative works based
            on these data, content, or resources (either in whole or in part)
            unless you have been specifically given permission to do so by the
            relevant owners. 7.3 You acknowledge that your use of such third
            party applications, data, content, or resources may be subject to
            separate terms between you and the relevant third party. In that
            case, the License Agreement does not affect your legal relationship
            with these third parties.

            .. rubric:: 8. Using Android APIs
               :name: 8.-using-android-apis
               :class: hide-from-toc

            8.1 Google Data APIs 8.1.1 If you use any API to retrieve data from
            Google, you acknowledge that the data may be protected by
            intellectual property rights which are owned by Google or those
            parties that provide the data (or by other persons or companies on
            their behalf). Your use of any such API may be subject to additional
            Terms of Service. You may not modify, rent, lease, loan, sell,
            distribute or create derivative works based on this data (either in
            whole or in part) unless allowed by the relevant Terms of Service.
            8.1.2 If you use any API to retrieve a user's data from Google, you
            acknowledge and agree that you shall retrieve data only with the
            user's explicit consent and only when, and for the limited purposes
            for which, the user has given you permission to do so. If you use
            the Android Recognition Service API, documented at the following
            URL:
            `RecognitionService <https://developer.android.google.cn/reference/android/speech/RecognitionService>`__,
            as updated from time to time, you acknowledge that the use of the
            API is subject to the Data Processing Addendum for Products where
            Google is a Data Processor, which is located at the following URL:
            https://privacy.google.com/businesses/gdprprocessorterms/, as
            updated from time to time. By clicking to accept, you hereby agree
            to the terms of the Data Processing Addendum for Products where
            Google is a Data Processor.

            .. rubric:: 9. Terminating this License Agreement
               :name: 9.-terminating-this-license-agreement
               :class: hide-from-toc

            9.1 The License Agreement will continue to apply until terminated by
            either you or Google as set out below. 9.2 If you want to terminate
            the License Agreement, you may do so by ceasing your use of the SDK
            and any relevant developer credentials. 9.3 Google may at any time,
            terminate the License Agreement with you if: (A) you have breached
            any provision of the License Agreement; or (B) Google is required to
            do so by law; or (C) the partner with whom Google offered certain
            parts of SDK (such as APIs) to you has terminated its relationship
            with Google or ceased to offer certain parts of the SDK to you; or
            (D) Google decides to no longer provide the SDK or certain parts of
            the SDK to users in the country in which you are resident or from
            which you use the service, or the provision of the SDK or certain
            SDK services to you by Google is, in Google's sole discretion, no
            longer commercially viable. 9.4 When the License Agreement comes to
            an end, all of the legal rights, obligations and liabilities that
            you and Google have benefited from, been subject to (or which have
            accrued over time whilst the License Agreement has been in force) or
            which are expressed to continue indefinitely, shall be unaffected by
            this cessation, and the provisions of paragraph 14.7 shall continue
            to apply to such rights, obligations and liabilities indefinitely.

            .. rubric:: 10. DISCLAIMER OF WARRANTIES
               :name: 10.-disclaimer-of-warranties
               :class: hide-from-toc

            10.1 YOU EXPRESSLY UNDERSTAND AND AGREE THAT YOUR USE OF THE SDK IS
            AT YOUR SOLE RISK AND THAT THE SDK IS PROVIDED "AS IS" AND "AS
            AVAILABLE" WITHOUT WARRANTY OF ANY KIND FROM GOOGLE. 10.2 YOUR USE
            OF THE SDK AND ANY MATERIAL DOWNLOADED OR OTHERWISE OBTAINED THROUGH
            THE USE OF THE SDK IS AT YOUR OWN DISCRETION AND RISK AND YOU ARE
            SOLELY RESPONSIBLE FOR ANY DAMAGE TO YOUR COMPUTER SYSTEM OR OTHER
            DEVICE OR LOSS OF DATA THAT RESULTS FROM SUCH USE. 10.3 GOOGLE
            FURTHER EXPRESSLY DISCLAIMS ALL WARRANTIES AND CONDITIONS OF ANY
            KIND, WHETHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO THE
            IMPLIED WARRANTIES AND CONDITIONS OF MERCHANTABILITY, FITNESS FOR A
            PARTICULAR PURPOSE AND NON-INFRINGEMENT.

            .. rubric:: 11. LIMITATION OF LIABILITY
               :name: 11.-limitation-of-liability
               :class: hide-from-toc

            11.1 YOU EXPRESSLY UNDERSTAND AND AGREE THAT GOOGLE, ITS
            SUBSIDIARIES AND AFFILIATES, AND ITS LICENSORS SHALL NOT BE LIABLE
            TO YOU UNDER ANY THEORY OF LIABILITY FOR ANY DIRECT, INDIRECT,
            INCIDENTAL, SPECIAL, CONSEQUENTIAL OR EXEMPLARY DAMAGES THAT MAY BE
            INCURRED BY YOU, INCLUDING ANY LOSS OF DATA, WHETHER OR NOT GOOGLE
            OR ITS REPRESENTATIVES HAVE BEEN ADVISED OF OR SHOULD HAVE BEEN
            AWARE OF THE POSSIBILITY OF ANY SUCH LOSSES ARISING.

            .. rubric:: 12. Indemnification
               :name: 12.-indemnification
               :class: hide-from-toc

            12.1 To the maximum extent permitted by law, you agree to defend,
            indemnify and hold harmless Google, its affiliates and their
            respective directors, officers, employees and agents from and
            against any and all claims, actions, suits or proceedings, as well
            as any and all losses, liabilities, damages, costs and expenses
            (including reasonable attorneys fees) arising out of or accruing
            from (a) your use of the SDK, (b) any application you develop on the
            SDK that infringes any copyright, trademark, trade secret, trade
            dress, patent or other intellectual property right of any person or
            defames any person or violates their rights of publicity or privacy,
            and (c) any non-compliance by you with the License Agreement.

            .. rubric:: 13. Changes to the License Agreement
               :name: 13.-changes-to-the-license-agreement
               :class: hide-from-toc

            13.1 Google may make changes to the License Agreement as it
            distributes new versions of the SDK. When these changes are made,
            Google will make a new version of the License Agreement available on
            the website where the SDK is made available.

            .. rubric:: 14. General Legal Terms
               :name: 14.-general-legal-terms
               :class: hide-from-toc

            14.1 The License Agreement constitutes the whole legal agreement
            between you and Google and governs your use of the SDK (excluding
            any services which Google may provide to you under a separate
            written agreement), and completely replaces any prior agreements
            between you and Google in relation to the SDK. 14.2 You agree that
            if Google does not exercise or enforce any legal right or remedy
            which is contained in the License Agreement (or which Google has the
            benefit of under any applicable law), this will not be taken to be a
            formal waiver of Google's rights and that those rights or remedies
            will still be available to Google. 14.3 If any court of law, having
            the jurisdiction to decide on this matter, rules that any provision
            of the License Agreement is invalid, then that provision will be
            removed from the License Agreement without affecting the rest of the
            License Agreement. The remaining provisions of the License Agreement
            will continue to be valid and enforceable. 14.4 You acknowledge and
            agree that each member of the group of companies of which Google is
            the parent shall be third party beneficiaries to the License
            Agreement and that such other companies shall be entitled to
            directly enforce, and rely upon, any provision of the License
            Agreement that confers a benefit on (or rights in favor of) them.
            Other than this, no other person or company shall be third party
            beneficiaries to the License Agreement. 14.5 EXPORT RESTRICTIONS.
            THE SDK IS SUBJECT TO UNITED STATES EXPORT LAWS AND REGULATIONS. YOU
            MUST COMPLY WITH ALL DOMESTIC AND INTERNATIONAL EXPORT LAWS AND
            REGULATIONS THAT APPLY TO THE SDK. THESE LAWS INCLUDE RESTRICTIONS
            ON DESTINATIONS, END USERS AND END USE. 14.6 The rights granted in
            the License Agreement may not be assigned or transferred by either
            you or Google without the prior written approval of the other party.
            Neither you nor Google shall be permitted to delegate their
            responsibilities or obligations under the License Agreement without
            the prior written approval of the other party. 14.7 The License
            Agreement, and your relationship with Google under the License
            Agreement, shall be governed by the laws of the State of California
            without regard to its conflict of laws provisions. You and Google
            agree to submit to the exclusive jurisdiction of the courts located
            within the county of Santa Clara, California to resolve any legal
            matter arising from the License Agreement. Notwithstanding this, you
            agree that Google shall still be allowed to apply for injunctive
            remedies (or an equivalent type of urgent legal relief) in any
            jurisdiction. *July 27, 2021*

         .. container::

            I have read and agree with the above terms and conditions

            .. container:: buttons

               Download the Google USB driver
               `Download the Google USB driver <https://googledownloads.cn/android/repository/usb_driver_r13-windows.zip>`__
               *latest_usb_driver_windows.zip*

Last updated 2023-04-12 UTC.

.. |SDK Manager with the Google USB Driver selected| image:: https://developer.android.google.cn/static/studio/images/run/sdk-manager-google-usb-driver.png
   :width: 624px

/Get started debugging your code
================================

.. https://developer.android.google.cn/studio/debug?hl=en

.. container:: devsite-article-body clearfix

   Android Studio provides a debugger that lets you do the following and more:

   -  Select a device to debug your app on.
   -  Set breakpoints in your Java, Kotlin, and C/C++ code.
   -  Examine variables and evaluate expressions at runtime.

   This page includes instructions for basic debugger operations. For more
   documentation, also see the `IntelliJ IDEA debugging docs <https://www.jetbrains.com/help/idea/2023.3/debugging.html>`__.

   .. rubric:: Enable debugging
      :name: enable-debug

   Before you can begin debugging, do the following:

   Enable debugging on your device.
      If you're using the emulator, debugging is enabled by default. But for a
      connected device, you need to `enable debugging in the device developer options <#/studio/debug/dev-options>`__.
   Run a debuggable build variant.
      Use a `build variant <#/studio/build/build-variants>`__ that includes
      `debuggable true <#/studio/build/build-variants#build-types>`__
      (``isDebuggable = true`` in Kotlin scripts) in the build configuration.

      Usually, you can select the default "debug" variant that's included in
      every Android Studio project, even though it's not visible in the
      ``build.gradle`` file. However, if you define new build types that should
      be debuggable, you must add ``debuggable true`` to the build type:

   Detect Automatically
      Select this debug type if you want Android Studio to automatically choose
      the best option for the code you are debugging. For example, if you have
      any C or C++ code in your project, Android Studio automatically uses the
      Dual debug type. Otherwise, Android Studio uses the Java-Only debug type.
   Java Only
      Select this debug type if you want to debug only code written in Java or
      Kotlin. The Java-Only debugger ignores any breakpoints or watches you set
      in your native code.
   Native Only (available only with C/C++ code)
      Select this debug type if you want to use only LLDB to debug your code.
      When using this debug type, the Java debugger session view is not
      available. By default, LLDB inspects only your native code and ignores
      breakpoints in your Java code. If you want to also debug your Java code,
      switch to either the Detect Automatically or Dual debug type.

      Native debugging only works on devices that meet the following
      requirements:

      -  **The device supports ``run-as``.**

         To check whether the device supports ``run-as``, run the following
         command on the ADB shell that is connected to your device:

         .. code:: none

            run-as your-package-name pwd

         Replace ``your-package-name`` with your app's package name. If the
         device supports ``run-as``, the command should return without any
         errors.

      -  **The device has ``ptrace`` enabled.**

         To check whether ``ptrace`` is enabled, run the following command on
         the ADB shell that is connected to your device:

         .. code:: none

            sysctl kernel.yama.ptrace_scope

         If ``ptrace`` is enabled, the command will print the value ``0`` or an
         an ``unknown key`` error. If ``ptrace`` is not enabled, it will print a
         value other than ``0``.

   Dual (Java + Native) - available only with C/C++ code
      Select this debug type if you want to switch between debugging both Java
      and native code. Android Studio attaches both the Java debugger and LLDB
      to your app process so you can inspect breakpoints in both your Java and
      native code without restarting your app or changing your debug
      configuration.

      In figure 2, notice the two tabs to the right of the Debug window title.
      Because the app has both Java and C++ code, one tab is for debugging the
      native code and the other for debugging Java code, as indicated by
      **-java**.

      .. figure:: https://developer.android.google.cn/static/studio/images/debug/db-attachprocess_2x.png
         :width: 708px

         **Figure 3.** Tab for debugging native code and tab for debugging Java
         code.

   Line breakpoint
      The most common type is a line breakpoint that pauses the execution of
      your app at a specified line of code. While paused, you can examine
      variables, evaluate expressions, and then continue execution line by line
      to determine the causes of runtime errors.
   Method breakpoint
      A method breakpoint pauses the execution of your app when it enters or
      exits a specific method. While paused, you can examine variables, evaluate
      expressions, and then continue execution line by line to determine the
      causes of runtime errors. When you set a breakpoint on a composable
      function, the debugger lists the parameters of the composable and their
      state to help identify what changes might have caused the recomposition.
   Field breakpoint
      A field breakpoint pauses the execution of your app when it reads from or
      writes to a specific field.
   Exception breakpoint
      An exception breakpoint pauses the execution of your app when an exception
      is thrown.

   You can set conditional breakpoints that will only suspend execution if
   specific conditions are met. You can also set logging breakpoints that write
   to Logcat without suspending execution. This can help avoid littering your
   code with log statements.

   To add a line breakpoint, proceed as follows:

   #. Locate the line of code where you want to pause execution.
   #. Click the left gutter along that line of code or place the caret on the
      line and press Control+F8 (on macOS, Command+F8).
   #. If your app is already running, click **Attach debugger to Android
      process** |image-toolbar-attach-debugger|. Otherwise, to start debugging, click **Debug**
      |image-toolbar-debug|.

   A red dot appears next to the line when you set a breakpoint, as shown in
   figure 5.

   .. figure:: https://developer.android.google.cn/static/images/tools/as-breakpointline.png

      **Figure 5.** A red dot appears next to the line when you set a
      breakpoint.

   When your code execution reaches the breakpoint, Android Studio pauses
   execution of your app.

   To identify the state of the app, use the tools in the Debugger tab:

   -  To examine the object tree for a variable, expand it in the Variables
      view. If the Variables view is not visible, click **Layout Settings**
      |image-as-layoutsettings| and ensure that **variables** is checked.

   -  To advance to the next line in the code without entering a method, click
      **Step Over** |image-debugger_button_stepover_2-0|.

   -  To advance to the first line inside a method call, click **Step Into**
      |image-debugger_button_stepinto_2-0|.

   -  To advance to the next line outside the current method, click **Step Out**
      |image-debugger_button_stepout_2-0|.

   -  To continue running the app normally, click **Resume Program** |image-debugger_button_resume_2-0|.

   If your project uses any native code, by default the Detect Automatically
   debug type attaches both the Java debugger and LLDB to your app as two
   separate processes. You can switch between inspecting Java and C/C++
   breakpoints without restarting your app or changing settings.

   **Note:** For Android Studio to detect breakpoints in your C or C++ code, you
   need to use a debug type that supports LLDB, such as Detect Automatically,
   Native, or Dual. You can change the debug type Android Studio uses by
   `editing your debug configuration <#/studio/run/rundebugconfig>`__. To learn
   more about the different debug types, read the section about using other
   `debug types <#debug-types>`__.

   When Android Studio deploys your app to your target device, the Debug window
   opens with a tab or debug session view for each debugger process, as shown in
   figure 6.

   .. figure:: https://developer.android.google.cn/static/studio/images/debug/hybrid-debug-session_2-2_2x.png
      :width: 1020px

      **Figure 6.** Debugging native code using LLDB.

   #. Android Studio switches to the **``<your-module>``** tab when LLDB
      debugger encounters a breakpoint in your C/C++ code. The Frames,
      Variables, and Watches panes are also available and work exactly as they
      would if you were debugging Java code.

      Although the Threads pane is not available in the LLDB session view, you
      can access your app processes using the list in the Frames pane. Learn
      more about these panes in the sections about how to 
      `debug window frames <#stackFrames>`__ and `inspect variables <#variablesAndWatches>`__.

      **Note:** While inspecting a breakpoint in your native code, the Android
      system suspends the virtual machine that runs your app’s Java bytecode.
      This means that you are unable to interact with the Java debugger or
      retrieve any state information from your Java debugger session while
      inspecting a breakpoint in your native code.

   #. Android Studio switches to the ``<your-module>``-java tab when the Java
      debugger encounters a breakpoint in your Java or Kotlin code.

   #. While debugging with LLDB, you can use the LLDB terminal in the LLDB
      session view to pass `command-line options to LLDB <http://lldb.llvm.org/tutorial.html>`__. 
      If you have certain commands
      that you would like LLDB to execute each time you start debugging your
      app, either just before or just after the debugger attaches to your app
      process, you can `add those commands to your debug configuration <#/studio/run/rundebugconfig#debugger-tab>`__.

   While debugging C/C++ code, you can also set special types of breakpoints,
   called *watchpoints*, that can suspend your app process when your app
   interacts with a particular block of memory. To learn more, read the section
   about how to `add watchpoints <#watchpoints>`__.

   .. rubric:: View and configure breakpoints
      :name: breakPointsView

   To view all the breakpoints and configure breakpoint settings, click **View
   Breakpoints** |image-as-viewbreakbutton| in the Debug window. The Breakpoints window appears,
   as shown in figure 7.

   .. figure:: https://developer.android.google.cn/static/studio/images/debug/debugger-view-breakpoints_2x.png
      :width: 960px

      **Figure 7.** The Breakpoints window lists all the current breakpoints and
      includes behavior settings for each.

   The Breakpoints window lets you enable or disable each breakpoint from the
   list in the pane. If a breakpoint is disabled, Android Studio doesn't pause
   your app when it hits that breakpoint.

   Select a breakpoint from the list to configure its settings. You can
   configure a breakpoint to be disabled at first and have the system enable it
   after a different breakpoint is hit. You can also configure whether a
   breakpoint should be disabled after it is hit. To set a breakpoint for any
   exception, select **Exception Breakpoints** in the list of breakpoints.

   To temporarily disable all breakpoints, click **Mute Breakpoints** |image-debugger-mute-breakpoints|
   in the Debug window. Click again to re-enable.

   .. rubric:: Debug window frames
      :name: stackFrames

   In the Debugger window, the Frames pane lets you inspect the stack frame that
   caused the current breakpoint to be hit. This enables you to navigate and
   examine the stack frame and also inspect the list of threads in your Android
   app.

   To select a thread, use the thread selector menu and view its stack frame.
   Click the elements in the frame to open the source in the editor. You can
   also customize the thread presentation and export the stack frame as
   discussed in the `Examine Frames guide <https://www.jetbrains.com/help/idea/2023.3/examining-suspended-program.html#examine-frames>`__.

   .. rubric:: Inspect variables
      :name: variablesAndWatches

   In the Debugger window, the Variables pane lets you inspect variables when
   the system stops your app on a breakpoint and you select a frame from the
   Frames pane. The Variables pane also lets you evaluate ad hoc expressions
   using static methods and/or variables available within the selected frame.

   To add an expression to the object tree (while the application is being
   debugged):

   |image-debug_eval_watch|
   **Figure 8.** The object tree and expression entry box in the Debug window.

   #. Enter the expression to watch or display
   #. Click **Add to watches** or press Enter to evaluate the expression once.

   Alternatively, if the object tree contains the expression you want to watch,
   you can drag it to the top of the tree to add it as a watched expression.

   Watched expressions will update when breakpoints are hit or you step through
   your code.

   Evaluated expressions will remain displayed at the top of the object tree
   until you manually evaluate another expression or step through your code.

   To remove a watched expression from the object tree, right-click the
   expression and then click **Remove Watch**.

   .. rubric:: Add watchpoints
      :name: watchpoints

   While debugging C/C++ code, you can set special types of breakpoints, called
   *watchpoints*, that can suspend your app process when your app interacts with
   a particular block of memory. For example, if you set two pointers to a block
   of memory and assign a watchpoint to it, using either pointer to access that
   block of memory triggers the watchpoint.

   In Android Studio, you can create a watchpoint during runtime by selecting a
   specific variable, but LLDB assigns the watchpoint to only the block of
   memory the system allocates to that variable, not the variable itself. This
   is different from adding a variable to the Watches pane, which enables you to
   observe the value of a variable but doesn’t let you suspend your app process
   when the system reads or changes its value in memory.

   **Note:** When your app process exits a function and the system deallocates
   its local variables from memory, you need to reassign any watchpoints you
   created for those variables.

   To set a watchpoint, you must meet the following requirements:

   -  Your target physical device or emulator uses an x86 or x86_64 CPU. If your
      device uses an ARM CPU, then you must align the boundary of your
      variable's address in memory to either 4 bytes, for 32-bit processors, or
      8 bytes, for 64-bit processors. To align a variable in your native code,
      specify ``__attribute__((aligned(``\ ``num_bytes``\ ``)))`` in the
      variable deceleration, as shown below:

      .. code:: prettyprint

         // For a 64-bit ARM processor
         int my_counter __attribute__((aligned(8)));

   -  You have assigned three or fewer watchpoints already. Android Studio only
      supports up to four watchpoints on x86 or x86_64 target devices. Other
      devices may support fewer watchpoints.

   **Note:** When debugging your app with 32-bit ARM ABIs, adding a watchpoint
   or hovering over variables inside the code to investigate their values may
   cause a crash. As a workaround, debug using 64-bit ARM, x86, or x86_64
   binaries. This issue will be fixed in an upcoming Android Studio release.

   If you meet the requirements, you can add a watchpoint as follows:

   #. While your app is suspended on a breakpoint, navigate to the Variables
      pane in your LLDB session view.

   #. Right-click a variable that occupies the block of memory you want to track
      and select **Add Watchpoint**.

      .. figure:: https://developer.android.google.cn/static/studio/images/debug/add-watchpoint_2-2_2x.png
         :width: 604px

         **Figure 9.** Add a watchpoint to a variable in memory.

   #. A dialog to configure your watchpoint appears, as shown in figure 9.

      Configure your watchpoint with the following options:

      -  **Enabled:** Deselect this option if you want to tell Android Studio to
         ignore the watchpoint until you change the setting. Android Studio
         saves your watchpoint so you can access it later.
      -  **Suspend:** By default, the Android system suspends your app process
         when it accesses a block of memory you assign to a watchpoint. Deselect
         this option if you don’t want this behavior. This reveals additional
         options you can use to customize behavior when the system interacts
         with your watchpoint: **Log message to console** and **Remove when
         hit**.
      -  **Access Type:** Select whether your app should trigger your watchpoint
         when it tries to **Read** or **Write** to the block of memory the
         system allocates to the variable. To trigger your watchpoint on either
         a read or a write, select **Any**.

   #. Click **Done**.

   To view all your watchpoints and configure watchpoint settings, click **View
   Breakpoints** |image-as-viewbreakbutton| in the Debug window. The Breakpoints dialog appears,
   as shown in figure 10.

   .. figure:: https://developer.android.google.cn/static/studio/images/debug/watchpoint-config-dialog_2-2_2x.png
      :width: 960px

      **Figure 10.** The Breakpoints dialog lists your current watchpoints and
      includes behavior settings for each.

   After you add your watchpoint, click **Resume Program** |image-debugger_button_resume_2-0| in the
   Debug window to resume your app process. By default, if your app tries to
   access a block of memory that you have set a watchpoint to, the Android
   system suspends your app process and a watchpoint icon |image-watchpoint-icon_2-2_2x| appears next
   to the line of code that your app executed last, as shown in figure 11.

   .. figure:: https://developer.android.google.cn/static/studio/images/debug/stop-on-watchpoint_2-2_2x.png
      :width: 691px

      **Figure 11.** Android Studio indicates the line of code that your app
      executes just before triggering a watchpoint.

   .. rubric:: View and change resource value display format
      :name: viewAndChange

   In debug mode, you can view resource values and select a different display
   format for variables in your Java or Kotlin code. With the Variables tab
   displayed and a frame selected, do the following:

   #. In the Variables list, right-click anywhere on a resource line to display
      the list.

   #. In the list, select **View as** and select the format you want to use.

      The available formats depend on the data type of the resource you
      selected. You might see one or more of the following options:

      -  **Class:** Display the class definition.
      -  **toString:** Display string format.
      -  **Object:** Display the object (an instance of a class) definition.
      -  **Array:** Display in an array format.
      -  **Timestamp:** Display date and time as follows: yyyy-mm-dd hh:mm:ss.
      -  **Auto:** Android Studio chooses the best format based on the data
         type.
      -  **Binary:** Display a binary value using zeroes and ones.
      -  **MeasureSpec:** The value passed from the parent to the selected
         child. See
         `MeasureSpec. <#/reference/android/view/View.MeasureSpec>`__
      -  **Hex:** Display as a hexadecimal value.
      -  **Primitive:** Display as a numeric value using a primitive data type.
      -  **Integer:** Display as a numeric value of type ``Integer``.

   To create a custom format, do the following:

   #. Right-click the resource value.
   #. Select **View as**.
   #. Select **Create**.
   #. The **Java Data Type Renderers** dialog displays. Follow the instructions
      at `Java Data type renderers <https://www.jetbrains.com/help/idea/2023.3/java-type-renderers.html>`__.

Last updated 2024-05-03 UTC.

.. |image-toolbar-attach-debugger| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-attach-debugger.png
   :class: inline-icon
.. |image-toolbar-debug| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-debug.png
   :class: inline-icon
.. |image-as-layoutsettings| image:: https://developer.android.google.cn/static/images/tools/as-layoutsettings.png
   :class: inline-icon
.. |image-debugger_button_stepover_2-0| image:: https://developer.android.google.cn/static/studio/images/debug/debugger_button_stepover_2-0.png
   :class: inline-icon
.. |image-debugger_button_stepinto_2-0| image:: https://developer.android.google.cn/static/studio/images/debug/debugger_button_stepinto_2-0.png
   :class: inline-icon
.. |image-debugger_button_stepout_2-0| image:: https://developer.android.google.cn/static/studio/images/debug/debugger_button_stepout_2-0.png
   :class: inline-icon
.. |image-debugger_button_resume_2-0| image:: https://developer.android.google.cn/static/studio/images/debug/debugger_button_resume_2-0.png
   :class: inline-icon
.. |image-as-viewbreakbutton| image:: https://developer.android.google.cn/static/images/tools/as-viewbreakbutton.png
   :class: inline-icon
.. |image-debugger-mute-breakpoints| image:: https://developer.android.google.cn/static/studio/images/debug/debugger-mute-breakpoints.png
   :class: inline-icon
.. |image-debug_eval_watch| image:: https://developer.android.google.cn/static/studio/images/debug/debug_eval_watch.png
.. |image-as-viewbreakbutton| image:: https://developer.android.google.cn/static/images/tools/as-viewbreakbutton.png
   :class: inline-icon
.. |image-debugger_button_resume_2-0| image:: https://developer.android.google.cn/static/studio/images/debug/debugger_button_resume_2-0.png
   :class: inline-icon
.. |image-watchpoint-icon_2-2_2x| image:: https://developer.android.google.cn/static/studio/images/debug/watchpoint-icon_2-2_2x.png
   :class: inline-icon

/Configure on-device developer options
======================================

.. https://developer.android.google.cn/studio/debug/dev-options?hl=en

.. container:: devsite-article-body clearfix

   The Settings app on Android includes a screen called **Developer options**
   where you can configure system behaviors that help you profile and debug your
   app performance. For example, you can enable debugging over USB, capture a
   bug report, enable visual feedback for taps, flash window surfaces when they
   update, use the GPU for 2D graphics rendering, and more.

   .. rubric:: Enable Developer options
      :name: enable

   On Android 4.1 and lower, the **Developer options** screen is available by
   default. On Android 4.2 and higher, you must enable this screen.

   **Note:** On some devices, the **Developer options** screen might be located
   or named differently.

   #. On your device, find the **Build number** option. The following table
      shows the settings location of the **Build number** on various devices:

      **Table 1.** Device settings location for the **Build number** option

      =========================== ==============================================
      Device                      Setting
      =========================== ==============================================
      Google Pixel                - Settings -> About phone -> Build number
      Samsung Galaxy S8 and later - Settings -> About phone -> Software information -> Build number
      LG G6 and later             - Settings -> About phone -> Software info -> Build number
      HTC U11 and later           - Settings -> About -> Software information -> More -> Build number 
                                    or 
                                  - Settings -> System -> About phone -> Software information -> More -> Build number
      OnePlus 5T and later        - Settings -> About phone -> Build number
      =========================== ==============================================

   #. Tap the **Build Number** option seven times until you see the message
      ``You are now a developer!`` This enables developer options on your
      device.

   #. Return to the previous screen to find **Developer options** at the bottom.

   .. container:: attempt-right

      |image-dev-options-pixel_2x|
      **Figure 1.** On-device developer options.

   At the top of the **Developer options** screen, you can toggle the options on
   and off, as shown in figure 1. Keep this on. When off, most options are
   disabled except those that don't require communication between the device and
   your development computer.

   .. rubric:: Enable USB debugging on your device
      :name: Enable-debugging

   Before you can use the debugger and other tools, you need to enable USB
   debugging, which allows Android Studio and other SDK tools to recognize your
   device when connected via USB.

   Enable **USB debugging** in the device system settings under **Developer
   options**. You can find this option in one of the following locations,
   depending on your Android version:

   -  Android 9 (API level 28) and higher: **Settings > System > Advanced >
      Developer Options > USB debugging**
   -  Android 8.0.0 (API level 26) and Android 8.1.0 (API level 27): **Settings
      > System > Developer Options > USB debugging**
   -  Android 7.1 (API level 25) and lower: **Settings > Developer Options > USB
      debugging**

   .. rubric:: General options
      :name: general

   Tap **Quick settings developer tiles** to add selected developer options to
   your Quick Settings panel.

   Once you select one or more of the available tiles, shown in figure 2, open
   the Quick Settings panel and tap the pencil to enter edit mode. Then, drag
   the developer tiles from the tiles pane onto the Quick settings panel, and
   tap the pencil again to exit edit mode.

   .. container:: attempt-right

      |image-dev-options-quick-settings_2x|
      **Figure 2.** Add options to the Quick Settings panel.

   Other general options include the following:

   -  **Memory**: Displays memory stats, such as average memory usage, memory
      performance, total memory available, average memory used, how much free
      memory is available, and how much memory apps are using.
   -  **Take bug report:** Gets a copy of the current device log files to share
      with someone. When you get a notification that the bug report is ready,
      tap the notification to share it.
   -  **System UI demo mode:** Makes it easier to take clean screenshots by
      displaying a generic, preset notification bar that doesn't show
      notifications or low battery warnings. **Enable Demo Mode** lets you
      change the appearance of the status bar using `adb demo mode commands <https://android.googlesource.com/platform/frameworks/base/+/master/packages/SystemUI/docs/demo_mode.md>`__.
      Or you can use **Show Demo Mode** to hide notifications and display a
      preset status bar.
      **Note:** The ``adb`` demo mode commands might not work on all devices
      because they are not verified during Android certification testing.
      They're only verified to work on Nexus and Pixel devices.
   -  **Desktop backup password:** Sets a backup password so you can use ``adb``
      commands to back up and restore device apps and data under password
      protection.
   -  **Stay awake:** Sets your screen to stay on while the device is plugged
      in.
   -  **Enable Bluetooth Host Controller Interface (HCI) snoop log:** Captures
      all Bluetooth HCI packets in a file stored at ``/sdcard/btsnoop_hci.log``.
      You can retrieve the packets and use a program like Wireshark to analyze
      and troubleshoot the information.

   .. rubric:: Debugging
      :name: debugging

   .. container:: attempt-right

      |image-dev-options-debug_2x|
      **Figure 3.** Debugging options enabled.

   Debugging options provide ways to configure on-device debugging and to
   establish communication between the device and your development computer.

   Enable USB debugging, as shown in figure 3, so your Android device can
   communicate with your development machine through `Android Debug Bridge (adb) <#/studio/command-line/adb>`__. The **Wait for Debugger** option is
   unavailable until you use **Select debug app** to select the app to debug. If
   you enable **Wait for Debugger**, the selected app waits for the debugger to
   attach before it executes.

   Other debugging options include the following:

   -  **Store logger data persistently on device:** Select the type of log
      messages you want to store persistently on the device. The options are
      off, all, all but radio, or kernel only.
   -  **Select mock location app:** Use this option to fake the GPS location of
      the device to test whether your app behaves the same in other locations.
      To use this option, download and install a GPS mock location app.
   -  **Enable view attribute inspection:** Saves view attribute information in
      the ``mAttributes`` member variable of a
      `View <#/reference/android/view/View>`__ instance so it can be used for
      debugging. You can access the attribute information through the `Layout Inspector <#/studio/debug/layout-inspector>`__ user interface, as shown in
      figure 4. Without this enabled, the \**Attributes*\* item is not
      available.
   -  **Enable GPU debug layers:** Available on devices running Android 9 (API
      level 28) and higher. Enable this option to allow Vulkan validation layers
      to be loaded from local device storage. To learn more, read `Vulkan validation layers on Android <#/ndk/guides/graphics/validation-layer>`__.

   .. rubric:: Networking
      :name: networking

   .. container:: attempt-right

      |image-dev-options-select-usb-config_2x|
      **Figure 5.** Select USB Configuration options.

   Networking options provide ways to configure Wi-Fi and DHCP settings.

   Tap **Select USB Configuration** to specify how you want the computer to
   identify the device. As shown in figure 5, you can configure devices for
   charging only, to transfer files (MTP), to transfer pictures (PTP), to use
   your mobile internet on the PC (RNDIS), or to transfer audio or MIDI files.

   Tap **Bluetooth AVRCP version** and select the profile version you want to
   use to control the Bluetooth A/V equipment your device has access to.

   Additionally, to fine-tune audio playback on the device, tap and set the
   following options:

   -  **Bluetooth Audio Codec:** Adjust the sound quality (codec) of your
      devices by selecting one of the following codecs:

      -  **SBC:** Transfers data to Bluetooth audio output devices such as
         headphones and speakers.
      -  **AAC:** Provides better sound quality from wired devices than MP3 at
         similar bit rates.
      -  **aptX:** Provides a wireless sound in high-quality smartphones,
         speakers, soundbars, headphones, and tablets.
      -  **aptX HD:** Provides high-resolution streaming to Bluetooth devices.
      -  **LDAC:** Provides high-quality music listening over wireless
         connections.

   -  **Enable Optional Codecs** and **Disable Optional Codecs**: If you have
      additional codec implementations installed, use these options to enable
      and disable them.
   -  **Bluetooth Audio Sample Range:** Adjusts the number of audio samples per
      second by selecting an audio codec sample rate. Higher sample rates use
      more resources.
   -  **Bluetooth Audio Bits Per sample:** Sets the number of bits of
      information in each audio sample. With a higher the bit rate, the sound is
      better but the sample file is larger.
   -  **Bluetooth Audio Channel Mode:** Selects mono or stereo.
   -  **Bluetooth Audio LDAC Codec:** Optimizes the sound to increase audio
      quality, balance audio and connection quality, increase connection
      quality, or use an adaptive bit rate to balance audio and connection
      quality.

   The followng list describes other ways to configure Wi-Fi and DHCP setup:

   -  **Wireless display certification**: Enables advanced configuration
      controls and settings for Wireless Display certification to the
      specifications set forth in the Wi-Fi Alliance Wi-Fi Display
      Specification.
   -  **Enable Wi-Fi verbose logging:** Increases the Wi-Fi logging level for
      each wireless network (SSID) you connect to according to its relative
      received signal strength (RSSI). For more information about logs, see
      `Write and view logs with Logcat <#/studio/debug/am-logcat>`__.
   -  **Aggressive Wi-Fi to cellular handover:** When the signal is low, makes
      Wi-Fi more efficient in handing over the data connection to a cellular
      network.

   .. rubric:: Input
      :name: input

   Enable **Show taps** to display taps when you touch the screen. A circle
   appears under your finger or stylus and follows you as you move around the
   screen. A tap works like a pointer when you `record a video <#/studio/debug/am-video>`__ on your device.

   .. container:: attempt-right

      |image-dev-options-bar_2x|
      **Figure 6.** Pointer location bar.

   Enable **Pointer Location** to show the pointer (tap) location on the device
   with cross-hairs. A bar appears across the top of the screen to track the
   cross-hair coordinates, as shown in figure 6. As you move the pointer, the
   coordinates in the bar track the cross-hair location and the pointer path
   draws on the screen.

   .. rubric:: Drawing
      :name: drawing

   .. container:: attempt-right

      |image-dev-options-draw-clip-bounds_2x|
      **Figure 7.** User interface constructions.

   Drawing options provide visual cues about the app's user interface and how it
   operates.

   Enable **Show Layout Bounds** to show your app's clip bounds, margins, and
   other user interface constructions on the device, as shown in figure 7.

   Other drawing options include the following:

   -  **Force RTL layout direction:** Forces the screen layout direction to be
      from right to left (RTL) or from left to right (default).
   -  **Window animation scale:** Sets the window animation playback speed so
      you can check its performance at different speeds. A lower scale results
      in a faster speed.
   -  **Transition animation scale:** Sets the transition animation playback
      speed so you can check its performance at different speeds. A lower scale
      results in a faster speed.
   -  **Simulate secondary displays:** Creates a secondary display as an overlay
      on the device. This is useful when supporting additional displays with the
      `Presentation <#/reference/android/app/Presentation>`__ API. For more
      information, see `Secondary displays <#/about/versions/android-4.2#SecondaryDisplays>`__.

   .. rubric:: Hardware-accelerated rendering
      :name: hardware

   .. container:: attempt-right

      |image-dev-options-color-scheme_2x|
      **Figure 8.** Deuteranomaly color space.

   Hardware-accelerated rendering options provide ways to optimize your app for
   its target hardware platforms by leveraging hardware-based options such as
   the GPU, hardware layers, and multisample anti-aliasing (MSAA).

   Tap **Simulate color space** to change the color scheme of the entire device
   UI. The options refer to types of color blindness. The choices are:

   -  Disabled (no simulated color scheme)
   -  Monochromacy (limits color scheme to black, white, and gray)
   -  Deuteranomaly (affects the display of red and green)
   -  Protanomaly (affects the display of red and green)
   -  Tritanomaly (affects the display of blue and yellow)

   Protanomaly refers to red-green color blindness with weakness in red colors,
   and Deuteranomaly, shown in figure 8, refers to red-green color blindness
   with weakness in green colors.
   If you take screenshots in a simulated color space, they appear normal, as if
   you didn't change the color scheme.

   Some other ways to leverage hardware-based options are the following:

   -  **Set GPU renderer:** Changes the default Open GL graphics engine to the
      Open GL Skia graphics engine.
   -  **Force GPU rendering:** Forces apps to use the GPU for 2D drawing if they
      were written without GPU rendering by default.
   -  **Show GPU view updates:** Displays any onscreen element drawn with the
      GPU.
   -  **Debug GPU overdraw:** Displays color-coding on your device so you can
      visualize how how many times the same pixel has been drawn in the same
      frame. The visualization shows where your app might be doing more
      rendering than necessary. For more information, see `Visualize GPU overdraw <#/topic/performance/rendering/inspect-gpu-rendering#debug_overdraw>`__.
   -  **Debug non-rectangular clip operations:** Turns off the clipping area on
      the canvas to create unusual (non-rectangular) canvas areas. Normally, the
      clipping area prevents drawing anything outside the bounds of the circular
      clipping area.
   -  **Force 4x MSAA:** Enables multisample anti-aliasing (MSAA) in Open GL ES
      2.0 apps.
   -  **Disable HW overlays:** Disables the hardware overlay. Note that using
      the hardware overlay lets apps that display something on the screen use
      less processing power. Without the overlay, apps share the video memory
      and have to constantly check for collision and clipping to render a proper
      image. The checking uses a lot of processing power.

   .. rubric:: Media
      :name: media

   Set **Disable USB audio routing** on to disable automatic routing to external
   audio devices connected to a computer through a USB port. Automatic routing
   can interfere with apps that are USB-aware.

   In Android 11 and higher, when an application without
   `RECORD_AUDIO <#/reference/android/Manifest.permission#RECORD_AUDIO>`__
   permission uses
   `UsbManager <#/reference/android/hardware/usb/UsbManager>`__ to request
   direct access to a USB audio device with audio capture capability (such as a
   USB headset), a warning message appears asking the user to confirm permission
   to use the device. The system ignores any "always use" option, so the user
   must acknowledge the warning and grant permission every time an app requests
   access. To avoid this behavior, your app should request the ``RECORD_AUDIO``
   permission.

   .. rubric:: Monitoring
      :name: monitoring

   .. container::

      .. container:: attempt-right

         |image-dev-options-gpu-work_2x|
         **Figure 9.** GPU rendering profile as bar representation.

      Monitoring options provide visual information about app performance, such
      as long thread and GPU operations.

      Tap **Profile GPU Rendering** and then **On screen as bars** to display
      the GPU rendering profile as bars, as shown in figure 9. For more
      information, see `Profile GPU rendering speed <#/topic/performance/rendering/inspect-gpu-rendering#profile_rendering>`__.

   .. container::

   .. rubric:: Apps
      :name: apps

   .. container:: attempt-right

      |image-dev-options-bkgrnd-proc-lmt_2x|
      **Figure 10.** Set background process limit.

   App options help you understand how your app operates on the target device.

   Tap **Background process limit** to set the number of processes that can run
   in the background at one time. Possible settings are shown in figure 10.

   Tap **Reset ShortcutManager rate-limiting** during testing so background apps
   can continue to call shortcut APIs until the rate limit is reached again. For
   more information about shortcuts and rate limits, see
   `ShortcutManager <#/reference/android/content/pm/ShortcutManager>`__.

   Enable **Don't keep activities** to increase battery life by destroying every
   activity as soon as the user leaves the activity's main view.

Last updated 2024-05-03 UTC.

.. |image-dev-options-pixel_2x| image:: https://developer.android.google.cn/static/studio/images/run/dev-options-pixel_2x.png
   :width: 250px
.. |image-dev-options-quick-settings_2x| image:: https://developer.android.google.cn/static/studio/images/run/dev-options-quick-settings_2x.png
   :width: 250px
.. |image-dev-options-debug_2x| image:: https://developer.android.google.cn/static/studio/images/run/dev-options-debug_2x.png
   :width: 250px
.. |image-dev-options-select-usb-config_2x| image:: https://developer.android.google.cn/static/studio/images/run/dev-options-select-usb-config_2x.png
   :width: 250px
.. |image-dev-options-bar_2x| image:: https://developer.android.google.cn/static/studio/images/run/dev-options-bar_2x.png
   :width: 250px
.. |image-dev-options-draw-clip-bounds_2x| image:: https://developer.android.google.cn/static/studio/images/run/dev-options-draw-clip-bounds_2x.png
   :width: 250px
.. |image-dev-options-color-scheme_2x| image:: https://developer.android.google.cn/static/studio/images/run/dev-options-color-scheme_2x.png
   :width: 250px
.. |image-dev-options-gpu-work_2x| image:: https://developer.android.google.cn/static/studio/images/run/dev-options-gpu-work_2x.png
   :width: 250px
.. |image-dev-options-bkgrnd-proc-lmt_2x| image:: https://developer.android.google.cn/static/studio/images/run/dev-options-bkgrnd-proc-lmt_2x.png
   :width: 250px

/Write and view logs
====================

.. https://developer.android.google.cn/studio/debug/logcat?hl=en

.. container:: devsite-article-body clearfix

   The **Logcat** window in Android Studio helps you debug your app by
   displaying logs from your device in real time—for example, messages that you
   added to your app with the `Log <#/reference/android/util/Log>`__ class,
   messages from services that run on Android, or system messages, such as when
   a garbage collection occurs. When an app throws an exception, Logcat shows a
   message followed by the associated stack trace containing links to the line
   of code.

   .. rubric:: Get started with the Logcat window
      :name: ui-overview

   To view the log messages for your app, do the following.

   #. In Android Studio, `build and run your app <#/studio/run>`__ on a physical
      device or emulator.
   #. Select **View > Tool Windows > Logcat** from the menu bar.

   By default, Logcat scrolls to the end. Clicking in the Logcat view or
   scrolling up using your mouse wheel turns this feature off. To turn it back
   on, click **Scroll to the End** |Scroll to the End icon| from the toolbar.
   You can also use the toolbar to clear, pause, or restart Logcat.

   |The Logcat window UI|

   **Figure 1.** Logcat formats logs to make it easier to scan useful
   information, such as tags and messages, and identify different types of logs,
   such as warnings and errors.

   .. rubric:: How to read logs
      :name: read-logs

   Each log has a date, timestamp, process and thread ID, tag, package name,
   priority, and message associated with it. Different tags have a unique color
   that helps identify the type of log. Each log entry has a priority of
   ``FATAL``, ``ERROR``, ``WARNING``, ``INFO``, ``DEBUG``, or ``VERBOSE``.

   For example, the following log message has a priority of ``DEBUG`` and a tag
   of ``ProfileInstaller``:

   .. code:: none

      2022-12-29 04:00:18.823 30249-30321 ProfileInstaller        com.google.samples.apps.sunflower    D  Installing profile for com.google.samples.apps.sunflower

   .. rubric:: Configure the log view
      :name: configure-log-view

   The standard log view displays each log's date, time process and thread ID,
   tag, package name, priority, and the message associated with it. By default,
   message lines are not wrapped in the log view but you can use the
   **Soft-Wrap** |Soft-Wrap icon| option from the Logcat toolbar.

   You can switch to **Compact** view, which has less default display
   information, by clicking **Configure Logcat Formatting Options** |image-logcat-formatting-options|
   from the **Logcat** toolbar.

   To further configure how much information you want displayed, select **Modify
   Views**, and choose whether you want to see the timestamp, tags, process IDs,
   or package names displayed.

   .. rubric:: Change the color scheme
      :name: color-scheme

   To change the color scheme, navigate to **Android Studio** > **Settings** >
   **Editor** > **Color Scheme**. To change the color scheme of your log view,
   select **Android Logcat**. To change the color scheme of your filter, select
   **Logcat Filter**.

   .. rubric:: Additional configuration options
      :name: addl-config-options

   For additional configuration options, navigate to **Android Studio** >
   **Settings** > **Tools** > **Logcat**. From here, you can choose the Logcat
   cycle buffer size, the default filter for new Logcat windows, and whether you
   want to add filters from history to autocomplete.

   .. rubric:: Use Logcat in multiple windows
      :name: multiple-windows

   Tabs help you easily switch between different devices or queries. You can
   create multiple Logcat tabs by clicking **New Tab** |New Tab icon|.
   Right-clicking a tab lets you rename and rearrange it.

   Additionally, you can split the view within a tab to help you more easily
   compare between two sets of logs. To create a split, either right-click in
   the log view or click the **Split Panels** option from the toolbar, and
   select **Split Right** or **Split Down**. To close a split, right-click and
   select **Close**. Each split allows you to set its own device connection,
   view options, and query.

   |Multiple Logcat windows| **Figure 2.** Split **Logcat** windows in Android
   Studio.

   From the **Logcat** toolbar, you can either scroll to the end of the logs, or
   you can click on a particular line to keep that line visible.

   .. rubric:: Query logs using key-value search
      :name: key-value-search

   In Android Studio, you can generate key-value searches right from the main
   query field. This query system provides accuracy of what you want to query
   and also exclude logs based on key-values. While you have the option to use
   regular expressions, you don't have to rely on them for queries. To see
   suggestions, press ``Ctrl`` + ``Space`` in the query field.

   |List of suggestions in the query field| **Figure 3.** Press ``Ctrl`` +
   ``Space`` in the query field to see a list of suggested queries.

   The following are some examples of keys you can use in your query:

   -  ``tag``: Matches against the ``tag`` field of the log entry.
   -  ``package``: Matches against the package name of the logging app.
   -  ``process``: Matches against the process name of the logging app.
   -  ``message``: Matches against the message part of the log entry.
   -  ``level``: Matches the specified or higher severe log level–for example,
      ``DEBUG``.
   -  ``age``: Matches if the entry timestamp is recent. Values are specified as
      a number followed by a letter specifying the time unit: ``s`` for seconds,
      ``m`` for minutes, ``h`` for hours and ``d`` for days. For example,
      ``age: 5m`` filters only messages that were logged in the last 5 minutes.

   .. rubric:: Negation and regular expressions
      :name: negation-and-regex

   The following fields support negation and regular expression matching:
   ``tag``, ``package``, ``message``, and ``line``.

   Negation is expressed by prepending a ``-`` to the field name. For example,
   ``-tag:MyTag`` matches log entries whose ``tag`` doesn't contain the string
   ``MyTag``.

   Regular expression matching is expressed by appending a ``~`` to the field
   name. For example, ``tag~:My.*Tag``.

   Negation and regular expression modifiers can be combined. For example,
   ``-tag~:My.*Tag``.

   .. rubric:: Logical operators and parentheses
      :name: logical-operators

   The query language supports the ``AND`` and ``OR`` operators expressed by
   ``&`` and ``|`` and parentheses. For example:

   ``(tag:foo | level:ERROR) & package:mine``

   Note that normal operator precedence is enforced, so the following:

   ``tag:foo | level:ERROR & package:mine``

   Is evaluated as:

   ``tag:foo | (level:ERROR & package:mine)``

   .. rubric:: Implicit logical operators
      :name: implicit-logical-operators

   If logical operators are not applied, the query language automatically
   evaluates multiple non-negated ``key-value`` filter terms with the same key
   as an ``OR``, and everything else with an ``AND``.

   For example:

   ``tag:foo tag:bar package:myapp``

   Is evaluated as:

   ``(tag:foo | tag:bar) & package:myapp``

   But:

   ``tag:foo -tag:bar package:myapp``

   Is evaluated as:

   ``tag:foo & -tag:bar & package:myapp``

   If multiple query terms are separated by whitespace without a logical
   operator, they are treated as an AND with a low precedence. For example, the
   term ``foo bar tag:bar1 | tag:bar2`` is equivalent to
   ``'foo bar' & (tag: bar1 | tag: bar2)``.

   .. rubric:: Special queries
      :name: special-queries

   **``package:mine``**

   The package key supports a special value ``mine``. This special value matches
   any package names that are contained in the open project.

   **``level``**

   The ``level`` query matches against the log level of the Logcat message,
   where the log entry level is greater or equal to the query level.

   For example, ``level:INFO`` matches any log entry with a log level of
   ``INFO``, ``WARN``, ``ERROR`` or ``ASSERT``. The level is not case sensitive.
   Valid levels are: ``VERBOSE``, ``DEBUG``, ``INFO``, ``WARN``, ``ERROR`` and
   ``ASSERT``.

   **``age``**

   The ``age`` query matches entries based on their timestamp, and is formatted
   as ``age:<number><unit>``, where

   -  ``<number>`` is an integer
   -  ``<unit>`` is one of ``s``, ``m``, ``h``, and ``d`` (seconds, minutes,
      hours, and days).

   Given the following list, the ``age`` query matches log messages that have a
   timestamp in the range described by the value. For example: the query
   ``age:5m`` matches entries with a timestamp no earlier than 5 minutes ago.

   .. code:: prettyprint

      age:30s
      age:5m
      age:3h
      age:1d

   Note that the timestamp is compared against the timestamp of the host, not
   the connected device. If the time of the device is not set correctly, this
   query may not work as expected.

   **``is`` key**

   You can use the ``is`` key as follows:

   -  ``is:crash`` matches log entries that represent an application crash
      (either native or Java).
   -  ``is:stacktrace`` matches log entries that represent anything that looks
      like a Java stacktrace, regardless of the log level.

   **``name`` key**

   The ``name`` key lets you provide a unique name for a saved filter so that
   it's easily identifiable in the filter history dropdown. Although you don't
   get an error for specifying ``name`` more than once, the IDE uses only the
   last specified value for ``name`` in the query.

   .. rubric:: View query history
      :name: query-history

   You can view your query history by clicking **Show history** |Filter icon|
   next to the query field. To favorite a query so that it stays at the top of
   the list across all your studio projects, click the star next to it. You can
   also use the ``name:`` key to make favorite queries more easy to recognize.
   For more information, see `Special queries <#special-queries>`__.

   |UI for favoriting a query|

   **Figure 4.** Favorite a query by clicking the star next to it.

   .. rubric:: Track logs across app crashes and restarts
      :name: app-crashes-restarts

   When Logcat notices that your app process has stopped and restarted, it
   displays a message in the output, such as ``PROCESS ENDED`` and
   ``PROCESS STARTED``. Restarting Logcat preserves your session configuration,
   such as tab splits, filters, and view options, so that you can continue your
   session easily.

   |Logcat window for app crashes|

   **Figure 5.** When your app process restarts, Logcat prints a message that
   the process has ended and then started.

Last updated 2024-01-03 UTC.

.. |Scroll to the End icon| image:: https://developer.android.google.cn/static/studio/images/buttons/logcat-scroll-end.png
.. |The Logcat window UI| image:: https://developer.android.google.cn/static/studio/images/debug/logcat-window.png
.. |Soft-Wrap icon| image:: https://developer.android.google.cn/static/studio/images/buttons/logcat-soft-wrap.png
.. |image-logcat-formatting-options| image:: https://developer.android.google.cn/static/studio/images/buttons/logcat-formatting-options.png
.. |New Tab icon| image:: https://developer.android.google.cn/static/studio/images/buttons/logcat-new-tab.png
.. |Multiple Logcat windows| image:: https://developer.android.google.cn/static/studio/images/debug/logcat-split-view.png
.. |List of suggestions in the query field| image:: https://developer.android.google.cn/static/studio/images/debug/logcat-query-suggestions.png
.. |Filter icon| image:: https://developer.android.google.cn/static/studio/images/buttons/logcat-filter-icon.png
.. |UI for favoriting a query| image:: https://developer.android.google.cn/static/studio/images/debug/logcat-fav-query.png
.. |Logcat window for app crashes| image:: https://developer.android.google.cn/static/studio/images/debug/logcat-track-crashes.png

/Analyze a stack trace
======================

.. https://developer.android.google.cn/studio/debug/stacktraces?hl=en

.. container:: devsite-article-body clearfix

   Debugging an app often requires working with stack traces. A stack trace
   generates when your app crashes because of an error or an exception. You can
   also print a stack trace at any point in your app code using methods such as
   `Thread.dumpStack <#/reference/java/lang/Thread#dumpStack()>`__.

   While your app is running in debug mode on a connected device, Android Studio
   prints and highlights stack traces in the **Logcat** view, as shown in figure
   1. A stack trace shows a list of method calls that lead to the exception
   being thrown, together with the filenames and line numbers where the calls
   happened.

   |image-logcat-stacktrace_2x|
   **Figure 1.** A stack trace in Logcat.

   Click on the highlighted filenames to open the files and examine the source
   of the method invocation. Click the **Up the stack trace** |image-logcat-arrow-up| and
   **Down the stack trace** |image-logcat-arrow-down| buttons to quickly move between stack trace
   lines displayed in the **Logcat** window.

   .. rubric:: Open stack traces from external sources
      :name: external-stack-traces

   Sometimes you want to analyze stack traces shared in a bug report instead of
   those you found while debugging. To analyze data from `Firebase Crashlytics <https://firebase.google.cn/products/crashlytics>`__, use the
   `App Quality Insights <#/studio/debug/app-quality-insights>`__ tool window. To
   analyze data from other sources, for example stack traces generated on your
   users' devices from the Google Play Console, follow these steps:

   #. Open your project in Android Studio.

      **Note:** Make sure the source code you're viewing is from the same
      version of your app that generated the stack trace. If the code is
      different, you will get mismatches between the filenames and line numbers
      or the order of calls in the stack trace and your project.

   #. From the **Analyze** menu, click **Analyze Stacktrace**.

      |Analyze Stack Trace window|

      **Figure 2.** Analyze Stacktrace window.

   #. Paste the stack trace text into the **Analyze Stacktrace** window and
      click **OK**.

   Android Studio opens a new **<Stacktrace>** tab, shown in figure 3, with the
   stack trace you pasted under the **Run** window.

   |Stacktrace window|

   **Figure 3.** **<Stacktrace>** tab in Android Studio.

   .. rubric:: Monitor the clipboard for new stack traces
      :name: monitor-clipboard-for-stack-traces

   To improve your productivity if you frequently work with external stack
   traces, you can let Android Studio continuously monitor the system clipboard
   for new stack traces. To do so, follow these steps:

   #. Open the **Analyze Stacktrace** tool.
   #. Select the **Automatically detect and analyze thread dumps copied to the
      clipboard outside of IntelliJ IDEA** checkbox.
   #. Copy a stack trace in another application, such as a web browser, to the
      system clipboard.

   When you return to the Android Studio window, the stack trace opens
   automatically under the **Run** window, so you don't have to paste it into
   the **Analyze Stacktrace** window.

Last updated 2023-06-01 UTC.

.. |image-logcat-stacktrace_2x| image:: https://developer.android.google.cn/static/studio/images/debug/logcat-stacktrace_2x.png
   :width: 975px
.. |image-logcat-arrow-up| image:: https://developer.android.google.cn/static/studio/images/buttons/logcat-arrow-up.png
   :class: inline-icon
.. |image-logcat-arrow-down| image:: https://developer.android.google.cn/static/studio/images/buttons/logcat-arrow-down.png
   :class: inline-icon
.. |Analyze Stack Trace window| image:: https://developer.android.google.cn/static/studio/images/debug/analyze-stacktrace_2-2_2x.png
   :width: 659px
.. |Stacktrace window| image:: https://developer.android.google.cn/static/studio/images/debug/stacktrace-window_2x.png

/Analyze Crashlytics and Vitals reports
=======================================

.. https://developer.android.google.cn/studio/debug/app-quality-insights?hl=en

.. container:: devsite-article-body clearfix

   You can see and act on app crash data from `Firebase Crashlytics <https://firebase.google.cn/products/crashlytics>`__ 
   and `Android Vitals <#/topic/performance/vitals>`__ directly in Android Studio. This
   integration pulls stack trace data and crash statistics from Crashlytics and
   Google Play into the **App Quality Insights** tool window in the Studio IDE,
   so you don't have to jump back and forth between your browser and the IDE.
   Development teams can benefit from key capabilities including the following:

   -  See lines in your code highlighted when they have related Crashlytics
      event data.
   -  See the stack trace for top crashes and click on the stack trace to jump
      to the relevant lines in your code.
   -  See summary statistics about top crash and non-fatal events, for example
      grouped by device manufacturer and Android version.
   -  Filter events by attributes including severity, time, and app version.
   -  Get a browser link that opens the Crashlytics dashboard page with more
      details about the event.
   -  Get insights that help you more easily understand and resolve root causes
      of certain issues.

   Android Vitals reports are available to all apps published to Google Play. If
   you're not using Crashlytics yet and would like to learn more about its
   offerings, see `Firebase Crashlytics <https://firebase.google.cn/products/crashlytics>`__.

   .. rubric:: Get started
      :name: get-started

   To see Crashlytics data in Android Studio, you need to set up Firebase and
   Crashlytics in your app project. Here's how: open the Firebase Assistant in
   Android Studio by going to **Tools > Firebase**, click **Crashlytics**, and
   then follow the tutorial to add Firebase and Crashlytics to your project. You
   can read more about the Firebase Assistant workflow in `Firebase's getting started guide for Android <https://firebase.google.cn/docs/android/setup#assistant>`__.

   If you've already added Firebase and Crashlytics to your app, sign in to your
   Developer account in the IDE by clicking on the avatar icon |image-profile-icon|. After
   you sign in, click the **App Quality Insights** tool window |image-aqi-icon|. You
   should see the panels populate with reports from Crashlytics.

   .. rubric:: Analyze Android vitals
      :name: aqi-android-vitals

   **App Quality Insights** includes `Android vitals <#/topic/performance/vitals>`__ data. This lets you more easily access
   core metrics collected by Google Play and improve your user experience. Use
   Android vitals to address issues related to app stability to help improve the
   quality of your app on Google Play.

   |Android vitals data in Android Studio.|

   You can view Android vitals issues, filter them, and jump from stack trace to
   code all from the **App Quality Insights** tool window. To get started,
   follow these steps:

   #. Sign in to your developer account in Android Studio using the profile icon
      |image-profile-icon| at the end of the toolbar.

   #. Open **App Quality Insights** by clicking the tool window in Android
      Studio or clicking **View > Tool Windows > App Quality Insights**.

   #. Click the **Android vitals** tab within **App Quality Insights**.

   #. Optional: To use version control integration for a debuggable build, add
      the latest `Firebase Crashlytics SDK <https://firebase.google.cn/docs/crashlytics/get-started?platform=android#add-sdk>`__
      (or Firebase Android Bill of Materials) to your app. Then add the
      following code to the module-level ``build.gradle.kts`` or
      ``build.gradle`` file. Release (non-debuggable) builds have the flag
      enabled by default.

      **Note:**\  App Quality Insights only supports version control using git.

   .. container:: ds-selector-tabs

      .. container:: section

         .. rubric:: Kotlin
            :name: kts
            :class: two-line-tab

         .. code:: prettyprint

            android {
              buildTypes {
                getByName("debug") {
                  vcsInfo {
                    include = true
                  }
                }
              }
            }

      .. container:: section

         .. rubric:: Groovy
            :name: groovy
            :class: two-line-tab

         .. code:: prettyprint

            android {
              buildTypes {
                debug {
                  vcsInfo {
                    include true
                  }
                }
              }
            }

   .. rubric:: Analyze Crashlytics data in Android Studio
      :name: navigate

   The **App Quality Insights** tool window has rich data that gives you insight
   into the events your users are encountering, and links to help you quickly
   navigate to the sources of those events.

   |App Quality Insights tool window|

   #. Use the application ID dropdown menu to select the app ID you want to
      analyze. For example, while you might work on the debug version of your
      app in the IDE, you might want to see event data for your production
      version of your app that your users install.

   #. The **Issues** panel shows the top events that Crashlytics has data for,
      and is sorted by your most impactful crashes.

   #. View events by *variants*, or groups of events that have similar stack
      traces. Analyzing events by variant helps you identify the root causes of
      a crash.

   #. The **Stack trace** tab shows details about the latest occurrence of the
      event you click in the **Issues** panel. You can see the event's stack
      trace and click the stack trace to jump to the relevant lines in your
      codebase. If your code has changed since the crash occurred, click **show
      diff** next to the error in the stack trace to view a diff between your
      current code and the version of your codebase that generated the crash.

      .. figure:: https://developer.android.google.cn/static/studio/images/aqi-vcs-integration.png
         :alt: Option to show diff in the AQI stack trace.
         :width: 75.0%

      There is also information about the device type affected, its Android
      version, and the time the event occurred, as well a link to the event in
      the Firebase Crashlytics dashboard. To browse info for multiple events in
      a group, use the left and right arrows. Click **Close issue** to close an
      issue directly from the panel.

   #. The **Keys** and **Logs** tabs show custom key-value pairs and logs for
      each Crashlytics report.

   #. The **Details** panel breaks down the crash counts by device type and
      Android version, so you can determine which user groups are most affected.
      It also shows which app versions experienced the crash and the number of
      users affected.

   #. Read and attach notes to issues so that they are visible in the Firebase
      Console and your teammates. To write a note about an issue, select the
      issue and open the **Notes** panel. You must have write permission to the
      Crashlytics project in order to write notes. Issues with notes appear with
      a "notes" icon |image-aqi-notes-icon| in the **Issues** panel.
      .. figure:: https://developer.android.google.cn/static/studio/images/aqi-notes-panel.png
         :alt: App Quality Insights Notes panel.
         :name: aqi-notes-panel
         :width: 50.0%

   #. Use the variety of filters to hone in on certain subsets of events. You
      can select or deselect events that are Fatal |image-aqi-fatal-icon|, Non-Fatal |image-aqi-nonfatal-icon|,
      and `ANRs -/performance/anrs/keep-your-app-responsive>`__ |image-aqi-anr-icon|,
      as well as filter by time, app version, `Crashlytics Signal <https://firebase.google.cn/support/releases#october_8_2021>`__,
      device make and model, and Android platform version. Note that for the
      Crashlytics Signal states, an issue is considered *regressed* when it's
      been closed in the past and has occurred again in a new version of the
      app.

   In addition to being able to navigate from stack trace to code, you can also
   jump from code to stack trace: Android Studio now annotates lines of code
   that are related to crashes with a crash gutter icon |image-aqi-crash-icon| so you can
   easily spot and debug them.

   When you hover over the crash icon, a pop-up appears that shows how many
   events involve that line of code, and the event frequencies.

   |Event summary when you hover over the crash icon|

   Click on the crash icon for a more detailed list of events, including the
   frequency of and number of users affected by a given event. Click on a
   specific event to jump to the event details in the **App Quality Insights**
   tool window.

   |Event list when you click on the crash icon|

   .. rubric:: Different numbers between Android vitals and Crashlytics
      :name: diff-vitals-crashlytics-numbers

   Note that Android vitals and Crashlytics might report different values for
   the numbers of users and events associated with the same crash. These
   discrepancies happen because Play and Crashlytics can catch crashes at
   different times and for different users. Here are a couple reasons for why
   the Play and Crashlytics counts might differ:

   -  Play catches crashes starting at boot time, whereas Crashlytics catches
      crashes that happen after the Crashlytics SDK initializes.
   -  If a user opts out of crash reporting when they get a new phone, those
      crashes aren't reported to Play; however, Crashlytics catches crashes
      based on an app's own privacy policy.

   .. rubric:: Investigate with limited functionality when offline
      :name: offline

   If you make a new request, for example by clicking **Refresh**, and Android
   Studio is unable to communicate with Crashlytics, the **App Quality
   Insights** window lets you to enter **Offline Mode**.

   |App Quality Insights offers offline mode.|

   While in this mode, you can continue to investigate issues and the latest
   events from cached data. Certain functionality, such as changing some filter
   options or closing issues, isn't available. To retry your connection to
   Crashlytics and return to an online state, click **Reconnect** |image-aqi-reconnect-icon|.

Last updated 2024-04-30 UTC.

.. |image-profile-icon| image:: https://developer.android.google.cn/static/studio/images/intro/profile-icon.png
   :class: inline-icon
.. |image-aqi-icon| image:: https://developer.android.google.cn/static/studio/images/aqi-icon.png
   :class: inline-icon
.. |Android vitals data in Android Studio.| image:: https://developer.android.google.cn/static/studio/images/aqi-vitals.png
.. |image-profile-icon| image:: https://developer.android.google.cn/static/studio/images/intro/profile-icon.png
   :class: inline-icon
.. |App Quality Insights tool window| image:: https://developer.android.google.cn/static/studio/images/aqi-window-v4.png
.. |image-aqi-notes-icon| image:: https://developer.android.google.cn/static/studio/preview/features/images/aqi-notes-icon.png
   :class: inline-icon
.. |image-aqi-fatal-icon| image:: https://developer.android.google.cn/static/studio/images/aqi-fatal-icon.png
   :class: inline-icon
.. |image-aqi-nonfatal-icon| image:: https://developer.android.google.cn/static/studio/images/aqi-nonfatal-icon.png
   :class: inline-icon
.. |image-aqi-anr-icon| image:: https://developer.android.google.cn/static/studio/images/aqi-anr-icon.png
   :class: inline-icon
.. |image-aqi-crash-icon| image:: https://developer.android.google.cn/static/studio/images/aqi-crash-icon.png
   :class: inline-icon
.. |Event summary when you hover over the crash icon| image:: https://developer.android.google.cn/static/studio/images/aqi-crash-icon-hover-summary.png
.. |Event list when you click on the crash icon| image:: https://developer.android.google.cn/static/studio/images/aqi-crash-icon-click-list.png
.. |App Quality Insights offers offline mode.| image:: https://developer.android.google.cn/static/studio/images/aqi-offline-mode.png
.. |image-aqi-reconnect-icon| image:: https://developer.android.google.cn/static/studio/images/aqi-reconnect-icon.png
   :class: inline-icon

/Debug your layout
==================

.. https://developer.android.google.cn/studio/debug/layout-inspector?hl=en

.. container:: devsite-article-body clearfix

   The Layout Inspector in Android Studio lets you debug the layout of your app
   by showing a view hierarchy where you can inspect the properties of each
   view. With the Layout Inspector, you can compare your app layout with design
   mockups, display a magnified or 3D view of your app, and examine details of
   its layout at runtime. This is especially useful when your layout is built at
   runtime rather than entirely in XML and the layout is behaving unexpectedly.

   .. figure:: https://developer.android.google.cn/static/studio/images/embedded-layout-inspector.png
      :width: 70.0%

      **Figure 1.** Embedded Layout Inspector for the Jetchat app.

   .. rubric:: Get started
      :name: get-started

   To start the Layout Inspector, `run your app <#/studio/run>`__, go to the
   **Running Devices** window, and click **Toggle Layout Inspector** |Toggle
   embedded layout inspector button|. If you switch among multiple devices or
   projects, the Layout Inspector automatically connects to the debuggable
   processes running in the foreground of the connected device.

   Here's how to do some common tasks:

   -  To view hierarchy and inspect the properties of each view, use the
      **Component Tree** and **Attributes** tool windows. Layout Inspector might
      require an activity restart to access the attributes. For more
      information, see `Avoid activity restarts <#activity-restart>`__.
   -  To select views by single clicking directly on the views or navigate to
      code by double clicking on the views, enable **Toggle Deep Inspect**
      |Toggle deep inspect button|.
   -  To interact with the app, disable **Toggle Deep Inspect** |Toggle deep
      inspect button|.
   -  To inspect physical devices, enable `device mirroring <#/studio/run/device#device-mirroring>`__.
   -  To enable live updates as you update your app's UI, check that 
      `Live Edit <#/develop/ui/compose/tooling/iterative-development#live-edit>`__ is
      enabled.
   -  To use `3D mode <#rotate-layout>`__, take a Layout Inspector snapshot
      |Layout Inspector Snapshot| and then click **3D Mode** |3D button|.

   .. rubric:: Select or isolate a view
      :name: select-view

   A view usually draws something the user can see and interact with. The
   **Component Tree** shows your app's hierarchy in real time with each view
   component, which helps you debug your app's layout because you can visualize
   the elements within your app and the values associated with them.

   To select a view, click it in the **Component Tree** or the **Layout
   Display**. All of the layout attributes for the selected view appear in the
   **Attributes** panel.

   If your layout includes overlapping views, you can see all the views in a
   region when you right-click in **Deep Inspect** mode |Toggle deep inspect
   button|. To select a view that isn't in front, click it in the **Component
   Tree** or `rotate the layout <#rotate-layout>`__.

   To work with complex layouts, you can isolate individual views so that only a
   subset of the layout is shown in the **Component Tree** and rendered in the
   **Layout Display**. To isolate a view, take a snapshot |Layout Inspector
   Snapshot|, right-click the view in the **Component Tree** and select **Show
   Only Subtree** or **Show Only Parents**. To return to the full view,
   right-click the view and select **Show All**. You must take a snapshot before
   isolating a view.

   **Note:**\  The ability to isolate a view `is temporarily unavailable <#/studio/known-issues#layout-inspector-isolate-view>`__. We're
   working on fixing this issue.

   .. rubric:: Hide layout borders and view labels
      :name: hide-borders-labels

   To hide the bounding box or view labels for a layout element, click **View
   Options** |View Options button| at the top of the **Layout Display** and
   toggle **Show Borders** or **Show View Label**.

   .. rubric:: Capture layout hierarchy snapshots
      :name: capture-layout-snapshots

   Layout Inspector lets you save snapshots of your running app's layout
   hierarchy, so that you can share them with others or refer to them later.

   Snapshots capture the data you would typically see when using the Layout
   Inspector, including a detailed 3D rendering of your layout, the component
   tree of your View, Compose, or hybrid layout, and detailed attributes for
   each component of your UI. To save a snapshot, click **Snapshot
   Export/Import** |Snapshot Export/Import| and then **Export Snapshot**.

   Load a previously saved Layout Inspector snapshot by clicking **Import
   Snapshot**.

   .. rubric:: 3D mode
      :name: rotate-layout

   The **Layout Display** features an advanced 3D visualization of your app's
   view hierarchy at runtime. To use this feature, take a snapshot |Snapshot
   Export/Import|, click the **3D Mode** button |3D button| in the snapshot
   Inspector window, and rotate it by dragging the mouse.

   .. figure:: https://developer.android.google.cn/static/studio/images/li-3d-mode.png
      :alt: Layout Inspector: 3D view
      :width: 80.0%

      **Figure 2.** Rotated 3D view of a Layout.

   .. figure:: https://developer.android.google.cn/static/studio/images/debug/layout-inspector-layer-spacing.png
      :alt: Layout inspector: layer spacing view

      **Figure 3.** To expand or contract the layers of the Layout, use the
      **Layer Spacing** slider.

   .. rubric:: Compare app layout to a reference image overlay
      :name: overlay

   To compare your app layout with a reference image, such as a UI mockup, you
   can load a bitmap image overlay in the Layout Inspector.

   -  To load an overlay, select the **Load Overlay** |image-li-load-overlay| option from the
      **Layout Inspector** toolbar. The overlay is scaled to fit the layout.
   -  To adjust the transparency of the overlay, use the **Overlay Alpha**
      slider.
   -  To remove the overlay, click **Clear Overlay** |image-live-layout-inspector-remove-overlay-icon|

   .. rubric:: Inspect Compose
      :name: inspect-compose-semantics

   Layout Inspector lets you inspect a Compose layout inside a running app in an
   emulator or physical device. You can use the Layout Inspector to check how
   often a composable is recomposed or skipped, which can help identify issues
   with your app. For example, some coding errors might force your UI to
   recompose excessively, which can cause poor performance. Some coding errors
   can prevent your UI from recomposing and, therefore, preventing your UI
   changes from showing up on the screen.

   `Learn more about Layout Inspector for Compose <#/jetpack/compose/tooling/layout-inspector>`__

   .. rubric:: Avoid activity restarts
      :name: activity-restart

   Layout Inspector requires one of the following global settings to function
   properly. If you don't specify a global setting, Layout Inspector
   automatically sets one.

   #. ``adb shell settings put global debug_view_attributes_application_package <processname>``

      This option generates extra information for inspection of the specified
      process.

   #. ``adb shell settings put global debug_view_attributes 1``

      This option generates extra information for inspection on all of the
      processes on the device.

   Changing a global setting may cause an activity restart. To avoid an activity
   restart, you can either change the settings in Android Studio or change the
   **Developer Options** in your device's settings.

   To enable automatic refresh in Android Studio, open the **Run/Debug
   Configurations** by selecting **Run** > **Edit Configurations** from the
   menu. Then, navigate to the **Miscellaneous** tab and check the **Connect to
   Layout Inspector without restarting activity** box under **Layout Inspector
   Options**.

   .. figure:: https://developer.android.google.cn/static/studio/images/debug/li-activity-restart.png
      :alt: Activity restart option in Run configurations

      **Figure 4.** Enable automatic refresh from the **Run/Debug
      Configurations** dialog.

   Alternatively, `enable your device's developer options <#/studio/debug/dev-options#enable>`__, 
   and then turn on `Enable view attribute inspection <#/studio/debug/dev-options#debugging>`__ 
   from the device's developer settings.

   .. rubric:: Standalone Layout Inspector
      :name: embedded-layout-inspector

   For optimal performance, we recommend using the Layout Inspector in its
   default embedded mode. If you want to un-embed the Layout Inspector, go to
   **File** (**Android Studio** on macOS)> **Settings** > **Tools** > **Layout
   Inspector** and clear the **Enable embedded Layout Inspector** checkbox.

   In standalone mode, enable live updates by clicking the **Live Updates**
   |image-layout-inspector-live-updates-button| option from the **Layout Inspector** toolbar.

Last updated 2024-05-08 UTC.

.. |Toggle embedded layout inspector button| image:: https://developer.android.google.cn/static/studio/images/design/start-embedded-layout-inspector.png
.. |Toggle deep inspect button| image:: https://developer.android.google.cn/static/studio/images/design/deep-inspect.png
.. |Layout Inspector Snapshot| image:: https://developer.android.google.cn/static/studio/images/design/li-snapshot.png
.. |3D button| image:: https://developer.android.google.cn/static/studio/images/buttons/layout-inspector-rotation-icon.png
.. |View Options button| image:: https://developer.android.google.cn/static/studio/images/buttons/live-layout-inspector-view-options-icon.png
.. |Snapshot Export/Import| image:: https://developer.android.google.cn/static/studio/images/design/li-snapshot.png
.. |image-li-load-overlay| image:: https://developer.android.google.cn/static/studio/images/li-load-overlay.png
   :class: inline-icon
.. |image-live-layout-inspector-remove-overlay-icon| image:: https://developer.android.google.cn/static/studio/images/buttons/live-layout-inspector-remove-overlay-icon.png
   :class: inline-icon
.. |image-layout-inspector-live-updates-button| image:: https://developer.android.google.cn/static/studio/images/buttons/layout-inspector-live-updates-button.png

/View design issues
===================

.. https://developer.android.google.cn/studio/debug/universal-problems-panel?hl=en

.. container:: devsite-article-body clearfix

   The **Problems** panel in Android Studio is a centralized and shared issue
   panel for all design tools, such as Compose Preview, Layout Editor, and
   Layout Validation. To view the tool window, navigate to **View** > **Tool
   Windows** > **Problems**.

   |Panel UI| **Figure 1.** You can view all the issues for your design tools in
   a shared issue panel.

   From the **Problems** toolbar, you can see the **View Options**, such as
   Severity Filter and Order, the **Editor Preview**, and suggestions for
   **Quick Fix**.

   |View Options list| **Figure 2.** The **Problems** panel has the following
   view options that you can sort by either severity or name: Show Warning, Show
   Weak Warning, Show Server Problem, Show Typo, Show Visual Lint.

   Individual issue details are displayed in the **Issue Details** pane in the
   **Editor Preview**. Each issue can be displayed in the built-in editor so
   that you can preview the code.

   .. rubric:: View issues with visual lint
      :name: visual-lint

   Android Studio automatically checks for visual lint issues for your layouts
   that are written in Views. When you open `Layout Validation <#/studio/debug/layout-inspector#layout-validation>`__, you can see
   all your layouts render in multiple device sizes. All visual issues,
   including background visual linting, appear in the **Problems** panel.

   Visual linting rules look not only at the current file, but also at the
   versions of the same layout with different qualifiers–for example,
   ``landscape`` or ``sw600``, if they exist when performing the analysis.

   |Layout Validation UI| **Figure 3.** Visual lint issues are displayed in the
   **Problems** panel.

Last updated 2024-03-25 UTC.

.. |Panel UI| image:: https://developer.android.google.cn/static/studio/images/debug/upp.png
.. |View Options list| image:: https://developer.android.google.cn/static/studio/images/debug/upp-view-optns.png
.. |Layout Validation UI| image:: https://developer.android.google.cn/static/studio/images/visual-linting.png

/Inspect network traffic
========================

.. https://developer.android.google.cn/studio/debug/network-profiler?hl=en

.. container:: devsite-article-body clearfix

   The Network Inspector displays real-time network activity on a timeline,
   showing data sent and received. The Network Inspector lets you examine how
   and when your app transfers data and optimize the underlying code
   appropriately.

   To open the Network Inspector, follow these steps:

   #. From the Android Studio navigation bar, select **View >** **Tool Windows
      >** **App Inspection**. After the app inspection window automatically
      connects to an app process, select **Network Inspector** from the tabs.

      -  If the app inspection window doesn't connect to an app process
         automatically, you may need to select an app process manually.

   #. Select the device and app process you want to inspect from the **App
      Inspection** window.

   .. rubric:: Network Inspector overview
      :name: network-inspector-overview

   At the top of the Network Inspector window, you can see the event timeline.
   Click and drag to select a portion of the timeline and inspect the traffic.

   .. figure:: https://developer.android.google.cn/static/studio/images/debug/network-profiler.png
      :alt: The Network Inspector window

      **Figure 1.** The Network Inspector window.

   In the details pane, the timing graph can help you identify where performance
   issues could be occurring. The start of the yellow section corresponds to the
   first byte of the request being sent. The start of the blue section
   corresponds to the first byte of the response being received. The end of the
   blue section corresponds to the final byte of the response being received.

   In the pane below the timeline, select one of the following tabs for more
   detail about the network activity during the selected portion of the
   timeline:

   -  **Connection View**: Lists files that were sent or received during the
      selected portion of the timeline across all of your app's CPU threads. For
      each request, you can inspect the size, type, status, and transmission
      duration. To sort this list, click any of the column headers. You can also
      see a detailed breakdown of the selected portion of the timeline, showing
      when each file was sent or received.

   -  **Thread View**: Displays the network activity on each of your app's CPU
      threads. As shown in figure 2, this view lets you inspect which threads
      are responsible for each network request.

      .. figure:: https://developer.android.google.cn/static/studio/images/debug/network-profiler-thread-view.png
         :alt: Inspect network requests by app thread in the thread view
         :width: 894px

         **Figure 2.** Inspect network requests by app thread in the **Thread
         View**.

   -  **Rules View**: Rules help test how your app behaves when encountering
      responses with different status codes, headers, and bodies. When you
      create a new rule, name your new rule and include information about the
      origin of the response you want to intercept under the **Origin**
      subsection. In the **Response** subsection, you can specify where and how
      to modify the response. For example, you can set the rule to execute on
      responses with a specific status code as well as modify that status code.
      In the **Header rules** and **Body rules** subsections, create sub-rules
      that add or modify response headers or bodies. Rules are applied in the
      order that they're listed. Choose which rule to enable or disable by
      checking the **Active** box next to the rule.

      .. figure:: https://developer.android.google.cn/static/studio/images/debug/network-inspector-rules.png
         :alt: Network Inspector Rules and Rule Details panes
         :width: 894px

         **Figure 3.** Network Inspector **Rules** and **Rule Details** panes.

   From either the **Connection View** or **Thread View**, click a request name
   to inspect detailed information about the data sent or received. Click the
   tabs to view the response header and body, request header and body, or call
   stack.

   On the **Response** and **Request** tabs, click the **View Parsed** link to
   display formatted text. Click the **View Source** link to display raw text.

   .. figure:: https://developer.android.google.cn/static/studio/images/profile/network-profiler-text_2X.png
      :alt: Toggle between raw text and formatted text
      :width: 856px

      **Figure 4.** Toggle between raw text and formatted text by clicking the
      corresponding link.

   In addition to showing network requests for
   `HttpsURLConnection <#/reference/javax/net/ssl/HttpsURLConnection>`__,
   Network Inspector also supports
   `OkHttp <http://square.github.io/okhttp>`__. Some third-party network
   libraries, such as `Retrofit <https://square.github.io/retrofit/>`__, use
   ``OkHttp`` internally, so Network Inspector lets you inspect their network
   activity. The `Now In Android sample app <https://github.com/android/nowinandroid>`__ uses ``OkHttp`` for its
   network operations and is a good place to see it in action.

   If you are using the ``HttpsURLConnection`` API, you only see headers in the
   **Request** tab that you include in your code using the
   `setRequestProperty <#/reference/java/net/URLConnection#setRequestProperty(java.lang.String,%20java.lang.String)>`__
   method, as shown in the following sample:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               val url = URL(MY_URL_EN)
               val urlConnection: HttpsURLConnection = url.openConnection() as HttpsURLConnection
               ...
               // Sets acceptable encodings in the request header.
               urlConnection.setRequestProperty("Accept-Encoding", "identity")

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               URL url = new URL(MY_URL_EN);
               HttpsURLConnection urlConnection = (HttpsURLConnection) url.openConnection();
               //...
               // Sets acceptable encodings in the request header.
               urlConnection.setRequestProperty("Accept-Encoding", "identity");

   .. rubric:: Troubleshoot network connection
      :name: troubleshoot-network-connection

   If the Network Inspector detects traffic values but can't identify any
   supported network requests, you receive the following error message:

   .. code:: prettyprint

      **Network Inspector Data Unavailable:** There is no information for the
        network traffic you've selected.

   Currently, the Network Inspector supports only the
   `HttpsURLConnection <#/reference/javax/net/ssl/HttpsURLConnection>`__ and
   `OkHttp <http://square.github.io/okhttp>`__ libraries for network
   connections. If your app uses another network connection library, you might
   not be able to view your network activity in the Network Inspector. If you
   have received this error message but your app does use ``HttpsURLConnection``
   or ``OkHttp``, `report a bug <#/studio/report-bugs>`__ or `search the issue tracker <https://issuetracker.google.com/issues?q=componentid:317727%2B>`__
   to include your feedback in an existing report related to your issue. You can
   also use these resources to request support for additional libraries.

Last updated 2024-01-03 UTC.

/Debug your database
====================

.. https://developer.android.google.cn/studio/inspect/database?hl=en

.. container:: devsite-article-body clearfix

   The Database Inspector lets you inspect, query, and modify your app's
   databases while your app is running. This is especially useful for database
   debugging. The Database Inspector works with plain SQLite and with libraries
   built on top of SQLite, such as `Room <#/training/data-storage/room>`__.

   **Note:**\  The Database Inspector only works with the SQLite library
   included in the Android operating system on API level 26 and higher. It
   doesn't work with other SQLite libraries that you bundle with your app.

   .. rubric:: Open the Database Inspector
      :name: open

   To open a database in the Database Inspector, do the following:

   #. `Run your app <#/studio/run>`__ on an emulator or connected device running
      API level 26 or higher.

      **Note:**\  A known issue related to the Android 11 emulator causes apps
      to crash when connecting to the Database Inspector. To fix the issue,
      `follow these steps <#/studio/known-issues#ki-android-11-db-inspector>`__.

   #. From the menu bar, select **View > Tool Windows > App Inspection**.

   #. Select the **Database Inspector** tab.

   #. Select the running app process from the menu.

   #. The databases in the currently running app appear in the **Databases**
      pane. Expand the node for the database that you want to inspect.

   .. rubric:: View and modify data
      :name: view-data

   The **Databases** pane displays a list of the databases in your app and the
   tables that each database contains. Double-click a table name to display its
   data in the inspector window to the right, shown in figure 1. Click a column
   header to sort the data in the inspector window by that column.

   .. figure:: https://developer.android.google.cn/static/studio/images/inspect/db-inspector-window.png
      name: inspector-window
      :alt: Screenshot of the Database Inspector window.

      **Figure 1.** The Database Inspector window.

   To modify data in a table, follow these steps:

   #. Double-click a cell.
   #. Type a new value.
   #. Press Enter.

   If your app uses Room and your UI observes the database, such as with
   ``LiveData`` or ``Flow``, then any changes you make to the data are
   immediately visible in your running app. Otherwise, changes are only visible
   the next time your app reads the modified data from the database.

   .. rubric:: See live database changes
      :name: live-changes

   If you want the Database Inspector to automatically update the data it
   presents as you interact with your running app, select the **Live updates**
   checkbox at the top of the inspector window. While live updates are enabled,
   the table in the inspector window is read-only and you can't modify its
   values.

   Alternatively, to manually update the data, click the **Refresh table**
   button at the top of the inspector window.

   .. rubric:: Query your databases
      :name: query-dbs

   The Database Inspector can run queries against your app's database while the
   app is running. The tool can use DAO queries if your app uses Room, but it
   also supports custom SQL queries.

   .. rubric:: Run DAO queries
      :name: dao-queries

   If your app uses Room, Android Studio provides gutter actions that let you
   quickly run query methods that you have already defined in your 
   `DAO classes <#/training/data-storage/room/accessing-data>`__. These actions are
   available while your app is running and the Database Inspector is open in the
   IDE.

   To run any query method in a DAO, click the **Run SQLite statement in
   Database Inspector** |image-database_inspector_query| button next to its ``@Query`` annotation.

   .. figure:: https://developer.android.google.cn/static/studio/images/inspect/db-inspector-dao-gutters.png
      name: dao-gutters
      :alt: Screenshot of DAO gutter actions.

      **Figure 2.** DAO query gutter actions.

   If your app includes more than one database, Android Studio prompts you to
   select the database to query against from a list. If your query method
   includes named `bind parameters <#/training/data-storage/room/accessing-data#simple-parameters>`__,
   Android Studio requests values for each parameter before running the query.
   The query results are displayed in the inspector window.

   .. rubric:: Run custom SQL queries
      :name: custom-queries

   You can also use the Database Inspector to run custom SQL queries against
   your app's databases while your app is running.

   To query a database, follow these steps:

   #. Click **Open New Query tab** |image-database_inspector_query| at the top of the **Databases** pane
      to open a new tab in the inspector window.

      .. figure:: https://developer.android.google.cn/static/studio/images/inspect/db-inspector-new-query.png
         name: new-query-tab
         :alt: Screenshot indicating the new query tab button.

         **Figure 3.** Open a **New Query** tab.

   #. If your app includes more than one database, select the database to query
      from the list on the **New Query** tab.

   #. At the top of the **New Query** tab, type your custom SQL query into the
      text field.

   #. Click **Run**.

   Alternatively, use the query history feature to run a query that you used
   previously:

   #. Click the **Show query history** |Show query history button| button to see
      a list of queries that you previously ran against the selected database.

      .. figure:: https://developer.android.google.cn/static/studio/images/inspect/db-inspector-history.png
         name: query-history
         :alt: Screenshot showing the query history drop-down.

         **Figure 4.** The query history menu.

   #. Click a query in the list to see a preview of the full query in the
      editor, and press Enter to copy it to the editor.

   #. Click **Run** to execute the statement.

   The query results that are displayed in the **New Query** tab are read-only
   and can't be modified. However, you can use the custom SQL query field to run
   modifier statements such as ``UPDATE``, ``INSERT``, or ``DELETE``.

   If your app uses Room and your UI observes the database, such as with
   ``LiveData`` or ``Flow``, then any changes you make to the data are
   immediately visible in your running app. Otherwise, changes are only visible
   the next time your app reads the modified data from the database.

   .. rubric:: Offline mode
      :name: offline-mode

   In Android Studio 4.2 and higher, you can continue to inspect your app's
   databases after a process disconnects. This makes it easier to debug your app
   after a crash.

   When a disconnect occurs, the Database Inspector downloads your databases and
   makes them available to you in *offline mode*. When offline, you can still
   open tables and run queries.

   When you reconnect to a live app process, the Database Inspector leaves
   offline mode and shows you only the data that is on the device. In other
   words, data shown in offline mode does not persist when you reconnect to an
   app process. Because of this limitation, the Database Inspector doesn't let
   you edit data or run modification SQL statements while in offline mode.

   When you are viewing a database in offline mode, the process name includes
   ``[DETACHED]`` to indicate that the inspector is no longer attached to the
   process. Also, the database icon |Database offline| indicates the offline
   state, shown in figure 5.

   .. figure:: https://developer.android.google.cn/static/studio/images/inspect/db-inspector-window-offline.png
      :alt: Database inspector in offline mode

      **Figure 5.** Database Inspector in offline mode.

   .. rubric:: Keep database connections open
      :name: keep-dbs-open

   The Database Inspector can modify a database only while your app maintains a
   live connection to that database. That means that if your app frequently
   connects to and disconnects from databases, it can be difficult to debug
   those databases. The **Databases** pane uses icons to identify open |image-database_inspector-db_open|
   and closed |image-database_inspector-db_closed| databases.

   Additionally, to prevent database connections from closing, toggle **Keep
   database connections open** from off |image-database_inspector_unlocked| 
   to on |image-database_inspector_locked| at the top of
   the **Databases** pane.

   .. rubric:: Export data from the Database Inspector
      :name: export-db-inspector

   You can export databases, tables, and query results from the Database
   Inspector to save, share, or re-create locally. When you open up an app
   project in Android Studio and inspect the app for that project in the
   Database Inspector, you can start exporting data in one of the following
   ways:

   -  Select a database or table in the **Databases** panel and click **Export
      to file** near the top of the panel.
   -  Right-click a database or table in the **Databases** panel and select
      **Export to file** from the context menu.
   -  When inspecting a table or query results in a tab, click **Export to
      file** above the table or query results.

   After selecting an export action, use the **Export Database** dialog to help
   you through the final steps, as shown in figure 6.

   Depending on whether you are trying to export a database, table, or query
   results, you have the option of exporting the data in one or more of the
   following formats: DB, SQL, or CSV.

   |Export Database dialog box|
   **Figure 6.** The Export Database dialog.

   .. rubric:: Additional resources
      :name: additional-resources

   To learn more about the Database Inspector, see the following additional
   resources:

   .. rubric:: Blog posts
      :name: blogs

   -  `Database Inspector: A live database tool we've been waiting for! <https://medium.com/androiddevelopers/database-inspector-9e91aa265316>`__

   .. rubric:: Videos
      :name: videos

   -  `Database Inspector <https://www.youtube.com/watch?v=UMc7Tu0nKYQ>`__

Last updated 2023-04-12 UTC.

.. |image-database_inspector_query| image:: https://developer.android.google.cn/static/studio/images/app-inspection/database_inspector_query.png
   :class: inline-icon
.. |image-database_inspector_query| image:: https://developer.android.google.cn/static/studio/images/app-inspection/database_inspector_query.png
   :class: inline-icon
.. |Show query history button| image:: https://developer.android.google.cn/static/studio/images/buttons/db-inspector-query-history.png
   :class: inline-icon
.. |Database offline| image:: https://developer.android.google.cn/static/studio/images/app-inspection/database-offline.png
   :class: inline-icon
.. |image-database_inspector-db_open| image:: https://developer.android.google.cn/static/studio/images/app-inspection/database_inspector-db_open.png
   :class: inline-icon
.. |image-database_inspector-db_closed| image:: https://developer.android.google.cn/static/studio/images/app-inspection/database_inspector-db_closed.png
   :class: inline-icon
.. |image-database_inspector_unlocked| image:: https://developer.android.google.cn/static/studio/images/app-inspection/database_inspector_unlocked.png
   :class: inline-icon
.. |image-database_inspector_locked| image:: https://developer.android.google.cn/static/studio/images/app-inspection/database_inspector_locked.png
   :class: inline-icon
.. |Export Database dialog box| image:: https://developer.android.google.cn/static/studio/images/inspect/export-database-dialog-box.png


/Debug your WorkManager Workers
===============================

.. https://developer.android.google.cn/studio/inspect/task?hl=en

.. container:: devsite-article-body clearfix

   The Background Task Inspector helps you visualize, monitor, and debug your
   app's background workers when using `WorkManager library <#/jetpack/androidx/releases/work>`__ 2.5.0 or higher.

   .. rubric:: Get started
      :name: get-started

   To list workers in the Background Task Inspector, do the following:

   #. `Run your app <#/studio/run>`__ on an emulator or connected device running
      API level 26 or higher.

   #. Select **View > Tool Windows > App Inspection** from the menu bar.

   #. Select the **Background Task Inspector** tab.

   #. Select the running app process from the menu.

   #. The workers in the currently running app appear in the **Background Task
      Inspector** pane. Click on the worker that you want to inspect further.

   .. rubric:: View and inspect workers
      :name: view-workers

   When you deploy an app using WorkManager 2.5.0 or higher on a device running
   API level 26 or higher, the **Background Task Inspector** tab shows active
   workers. The **Background Task Inspector** (shown in a `later section <#/studio/inspect/task#inspect-jobs-alarms-wakelocks>`__ as figure 3)
   lists the class name, current status, start time, and retries of all jobs,
   whether they are running, failed, or completed.

   .. rubric:: Work Details
      :name: worker-detail

   Click a job from the list to open the **Work Details** panel, which displays
   detailed information about the worker, as shown in figure 1.

   .. figure:: https://developer.android.google.cn/static/studio/images/inspect/worker-detail-window.png
      name: worker-detail
      :alt: Screenshot of the selected Worker's details.

   **Figure 1.** **Work Details** panel.

   -  **Description**: This section lists the worker class name, with the fully
      qualified package, as well as the assigned tag and the UUID of the worker.
   -  **Execution**: This section shows the worker’s constraints (if any),
      running frequency, and state, as well as which class created and queued
      the worker.
   -  **WorkContinuation**: This section displays where the worker is in the
      work chain. To check the details of another worker in the work chain,
      click its UUID.
   -  **Results**: This section displays the start time, retry count, and the
      output data of the selected worker.

   .. rubric:: Cancel workers
      :name: cancel-worker

   To stop a currently running or enqueued worker, select the worker and click
   **Cancel Selected Worker** |image-task_inspector_stop_button| from the toolbar.

   .. rubric:: View Graph View
      :name: graph-view

   Because workers can be chained together, it’s sometimes useful to visualize
   worker dependencies as a graph.

   To see a visual representation of a worker chain, select a worker from the
   table and click **Show Graph View** |image-task_inspector_graph_view| from the toolbar. Only workers
   are drawn in the graph.

   .. figure:: https://developer.android.google.cn/static/studio/images/inspect/worker-graph-view.png
      name: graph-view
      :alt: Screenshot of the Graph view.

   **Figure 2.** Graph View.
   The graph lets you quickly see relationships between workers and monitor
   their progress in complex chaining relationships.

   To return to the list view, click **Show List View** |image-task_inspector_list_view|.

   .. rubric:: View and inspect Jobs, Alarms, and Wakelocks
      :name: inspect-jobs-alarms-wakelocks

   The Background Task Inspector also lets you inspect your app’s Jobs, Alarms,
   and Wakelocks. Each type of asynchronous task appears under the appropriate
   heading in the inspector tab, letting you easily monitor its status and
   progress.

   Similar to workers, you can select a Job, Alarm, or Wakelock to inspect its
   detailed information in the Task Details panel.

   To view detailed information for a Worker, Job, Alarm, or Wakelock, select it
   in the **Task Details** panel on the right.

   .. figure:: https://developer.android.google.cn/static/studio/images/inspect/background-task-inspector.png
      name: inspect-jobs-window
      :alt: Screenshot of the Background Task Inspector window.

   **Figure 3.** The Background Task Inspector window.

   **Note:**\  This functionality has been migrated from the 
   `Energy profiler <#/studio/profile/energy-profiler>`__. Use the **Background Task
   Inspector** to inspect all of your app’s asynchronous tasks.

   .. rubric:: Additional resources
      :name: additional-resources

   To learn more about the Background Task Inspector, see the following
   additional resources:

   .. rubric:: Documentation
      :name: docs

   -  `Schedule tasks with WorkManager <#/topic/libraries/architecture/workmanager>`__

   .. rubric:: Codelabs
      :name: codelabs

   -  `Background work with WorkManager <https://developer.android.google.cn/codelabs/android-workmanager>`__
   -  `Advanced WorkManager <https://developer.android.google.cn/codelabs/android-adv-workmanager>`__

   .. rubric:: Blog posts
      :name: blogs

   -  `Background Task Inspector <https://medium.com/androiddevelopers/background-task-inspector-30c8706f0380>`__

Last updated 2023-04-12 UTC.

.. |image-task_inspector_stop_button| image:: https://developer.android.google.cn/static/studio/images/app-inspection/task_inspector_stop_button.png
   :class: inline-icon
.. |image-task_inspector_graph_view| image:: https://developer.android.google.cn/static/studio/images/app-inspection/task_inspector_graph_view.png
   :class: inline-icon
.. |image-task_inspector_list_view| image:: https://developer.android.google.cn/static/studio/images/app-inspection/task_inspector_list_view.png
   :class: inline-icon

/View on-device files
=====================

.. https://developer.android.google.cn/studio/debug/device-file-explorer?hl=en

.. container:: devsite-article-body clearfix

   The Device Explorer lets you view, copy, and delete files on an Android
   device. It's useful when examining files your app creates or if you want to
   transfer files to and from a device.

   **Note:**\  Most device data is not visible unless you are using a rooted
   device or an emulator with a standard Android (AOSP) system image, not one of
   the Google APIs or Google Play system images. When using a connected device,
   be sure to `enable USB debugging <#/studio/debug/dev-options#enable>`__.
   To work with a device's file system, proceed as follows:

   #. To open the Device Explorer, select **View > Tool Windows > Device
      Explorer** or click the **Device Explorer** |image-device-explorer-icon| button in the tool
      window bar.
   #. Select a device from the drop-down list.
   #. Interact with the device content in the file explorer window:

      -  Right-click a file or directory to create a new file or directory.
      -  Save, upload, delete, or synchronize the selected file or directory to
         your machine.
      -  Double-click a file to open it in Android Studio.

   |image-device-explorer|

   **Figure 1.** The Device Explorer tool window.

   Android Studio saves files you open in the Device Explorer in a temporary
   directory outside of your project. If you make modifications to a file opened
   using the Device Explorer and want to save your changes back to the device,
   you must manually upload the modified version of the file to the device.

   When exploring a device's files, the following directories are particularly
   useful:

   ``data/data/``\ ``app_name``\ ``/``
      Contains data files for your app stored on `internal storage <#/training/data-storage#categories-locations>`__.
   ``sdcard/``
      Contains user files stored on `external user storage <#/training/data-storage#categories-locations>`__ (pictures, etc.).

   **Note:** Not all files on a hardware device are visible in the Device
   Explorer. For example, in the ``data/data/`` directory, entries corresponding
   to apps on the device that are not debuggable can't be expanded in the Device
   Explorer.

Last updated 2023-07-25 UTC.

.. |image-device-explorer-icon| image:: https://developer.android.google.cn/static/studio/images/buttons/device-explorer-icon.png
   :class: inline-icon
.. |image-device-explorer| image:: https://developer.android.google.cn/static/studio/images/debug/device-explorer.png
   :width: 710px

/Debug pre-built APKs
=====================

.. https://developer.android.google.cn/studio/debug/apk-debugger?hl=en

.. container:: devsite-article-body clearfix

   Android Studio 3.0 and higher lets you profile and debug APKs that have
   `debugging enabled <#/studio/debug#enable-debug>`__ without having to build
   them from an Android Studio project.

   To start debugging an APK, follow these steps:

   #. From the Android Studio Welcome screen, click **Profile or debug APK**.

      If you already have a project open, click **File > Profile or Debug APK**
      from the menu bar.

   #. In the dialog that opens, select the APK you want to import into Android
      Studio.

   #. Click **OK**.

   If this option does not show up, make sure you have the "Android APK Support"
   plugin enabled.

   Android Studio then displays the unpacked APK files, similar to figure 1.
   This is not a fully decompiled set of files, but it does provide SMALI files
   for a more readable version of the DEX files.

   |Importing a pre-built APK into Android Studio|

   **Figure 1.** Importing a pre-built APK into Android Studio.

   **Note:**\  When you import an APK into Android Studio, the IDE creates a new
   project in your home directory under ``ApkProjects/`` and makes a local copy
   of the target APK there. The SMALI files are stored in the ``smali/out/``
   folder within the new project folder.
   The **Android** view in the Project pane lets you inspect the following
   contents of your APK:

   -  **APK file:** Double-click the APK to open the APK analyzer.
   -  **manifests:** Contains the app manifests that are extracted from the APK.
   -  **java:** Contains Kotlin or Java code that Android Studio disassembles
      (into SMALI files) from your APK’s DEX files. Each SMALI file in this
      directory corresponds to a Kotlin or Java class.
   -  **cpp:** If your app includes native code, this directory contains your
      APK’s native libraries (SO files).
   -  **External Libraries:** Contains the Android SDK.

   You can `use the Android profiler <#/studio/profile/android-profiler>`__ to
   start testing your app's performance.

   To debug your app's Kotlin or Java code, you need to `attach the Kotlin or Java sources <#attach_java>`__ and add breakpoints in the Kotlin or Java
   source files. Similarly, to debug your native code, you must `attach the native debug symbols <#attach_native>`__.

   .. rubric:: Attach Kotlin or Java sources
      :name: attach_java

   By default, Android Studio extracts Kotlin or Java code from your APK and
   saves it as SMALI files. To debug the Kotlin or Java code using breakpoints,
   you need to point the IDE to the Kotlin or Java source files that correspond
   to the SMALI files you want to debug.

   To attach Kotlin or Java sources, proceed as follows:

   #. Double click on a SMALI file from the **Project** pane in the **Android**
      view. After opening the file, the editor displays a banner asking you to
      select the Kotlin or Java sources: |Attach sources banner|
   #. Click **Attach Kotlin/Java Sources...** from the banner in the editor
      window.
   #. Navigate to the directory with the app’s Kotlin or Java source files and
      click **Open**.

   In the **Project** window, Android Studio replaces SMALI files with their
   corresponding Kotlin or Java source files. Android Studio also includes inner
   classes automatically. You can now add breakpoints and `debug your app <#/studio/debug>`__.

   .. rubric:: Attach native debug symbols
      :name: attach_native

   If your APK includes native libraries (SO files) that don't include debug
   symbols, Android Studio shows you a banner, similar to the one shown in
   figure 1. You can't debug the APK’s native code or use breakpoints without
   attaching debuggable native libraries.

   To attach debuggable native libraries, proceed as follows:

   #. If you haven't already done so, `download the NDK and tools <#/ndk/guides#download-ndk>`__.

   #. In **Android** view, under the **cpp** directory in the **Project**
      window, double-click a native library file that doesn't include debug
      symbols.

      The editor shows a table of all the ABIs your APK supports.

   #. Click **Add** in the top-right corner of the editor window.

   #. Navigate to the directory that includes the debuggable native libraries
      you want to attach and click **OK**.

   If the APK and debuggable native libraries were built using a different
   workstation, you need to also specify paths to the local debug symbols by
   following these steps:

   #. Add local paths to missing debug symbols by editing the field under the
      **Local Paths** column in the **Path Mappings** section of the editor
      window, shown in figure 2.

      In most cases, you need only provide the path to a root folder, and
      Android Studio automatically inspects subdirectories to map additional
      sources. Android Studio also automatically maps paths to a remote NDK to
      your local NDK download.

   #. Click **Apply Changes** in the **Path Mappings** section of the editor
      window.

   |Providing paths to local debug symbols|

   **Figure 2.** Local paths to debug symbols.

   The native source files appear in the **Project** window. Open those native
   source files to add breakpoints and `debug your app <#/studio/debug>`__. To
   remove the mappings, click **Clear** in the **Path Mappings** section of the
   editor window.

   **Known issue:** When attaching debug symbols to an APK, both the APK and
   debuggable SO files must be built using the same workstation or build server.

   In Android Studio 3.6 and higher, you don't need to create a new project when
   the APK is updated outside the IDE. Android Studio detects changes in the APK
   and gives you the option to re-import it.

   |Import updated APK|

   **Figure 3.** APKs updated outside Android Studio can be re-imported.

Last updated 2024-04-05 UTC.

.. |Importing a pre-built APK into Android Studio| image:: https://developer.android.google.cn/static/studio/images/debug/import_apk-2X.png
   :width: 1177px
.. |Attach sources banner| image:: https://developer.android.google.cn/static/studio/images/debug/warning-attach-sources.png
.. |Providing paths to local debug symbols| image:: https://developer.android.google.cn/static/studio/images/debug/mapping_paths-2X.png
   :width: 1177px
.. |Import updated APK| image:: https://developer.android.google.cn/static/studio/images/debug/import-updated-apk.png
   :class: screenshot

/Take a screenshot
==================

.. https://developer.android.google.cn/studio/debug/am-screenshot?hl=en

.. container:: devsite-article-body clearfix

   On many Android devices, you can capture a screenshot by pressing the Power
   and Volume-down buttons on the device simultaneously. To save a screenshot
   directly to your workstation, you can capture the screenshot using Android
   Studio.

   To capture a screenshot with Android Studio, follow these steps:

   #. Run your app on a connected device or emulator. If using a connected
      device, be sure you have `enabled USB debugging <#/studio/run/device#setting-up>`__.

   #. In Android Studio, select **View > Tool Windows > Logcat** to open
      `Logcat <#/studio/debug/am-logcat>`__.

   #. Select the device and a process from the menus at the top of the window.

   #. Click **Screen Capture** |image-monitor-screenshot| on the left side of the window.

      The screenshot appears in a **Screenshot Editor** window.

      **Tip:** On Android 7.0 and higher, you can reset the status bar to
      temporarily remove notifications and set the signal and battery levels to
      full. To do so, open Settings and select **Developer options > Demo
      mode**. Enable **Show demo mode**. For more information, see `Configure on-device developer options <#/studio/debug/dev-options>`__.

      .. figure:: https://developer.android.google.cn/static/studio/images/debug/screenshot-editor_2x.png
         :width: 750px

         **Figure 1.** Screenshot editor in Android Studio.

   #. (Optional) Change the image with the following options:

      -  **Recapture**: Take a new screenshot.

      -  **Rotate Left**: Rotate the image 90 degrees counter-clockwise.

      -  **Rotate Right**: Rotate the image 90 degrees clockwise.

      -  **Frame Screenshot**: Choose a device to wrap your screenshot with real
         device artwork.

         **Note:** If you select a device for the screenshot frame that differs
         from the actual device you captured, the editor stretches your image to
         match the dimensions of the device frame. You instead might want to use
         the online `Device art generator <#/distribute/tools/promote/device-art>`__ that offers device
         frames for popular devices.

   #. Click **Save**.

   #. Specify the location and filename, and then click **OK**.

   .. rubric:: Take a screenshot from the emulator
      :name: take-a-screenshot-from-the-emulator

   If you are using the emulator, you can take a screenshot from the emulator
   window by clicking the **Take Screenshot** button, as shown in figure 2:

   |image-screenshot-emulator_2x|
   **Figure 2.** Take a screenshot from the emulator window.

Last updated 2023-06-01 UTC.

.. |image-monitor-screenshot| image:: https://developer.android.google.cn/static/studio/images/buttons/monitor-screenshot.png
   :class: inline-icon
.. |image-screenshot-emulator_2x| image:: https://developer.android.google.cn/static/studio/images/debug/screenshot-emulator_2x.png
   :width: 665px

/Record a video
===============

.. https://developer.android.google.cn/studio/debug/am-video?hl=en

.. container:: devsite-article-body clearfix

   .. container:: attempt-right

      |Device Video|
      **Figure 1.** Record a video of your app.

   `Logcat <#/studio/debug/am-logcat>`__ lets you record an MP4 video from your
   device, such as for marketing materials or for debugging. Videos are a
   maximum of three minutes long, and audio is not recorded with the video file.

   **Note:** Video recording is not available for devices running Wear OS.

   To record a video of your app, do the following:

   #. Open an app project.
   #. `Run the app <#/studio/run#RunningApp>`__ on a device.
   #. Click **View > Tool Windows > Logcat**.
   #. Interact with the display on the device to stage the start of the video.
   #. Click **Screen Record** |image-am-ivideo| in the left side of the Logcat window.
   #. In the **Screen Recorder Options** dialog, set the recording options:

      -  **Bit Rate:** Enter a bit rate. The default is 4 Mbps.
      -  **Resolution:** Enter a width and height value in pixels. The value
         must be a multiple of 16. The default is the resolution of the device.
      -  **Show Taps:** Enable visual feedback for taps.

   #. Click **Start Recording** to start the recording.
   #. Click **Stop Recording** to stop the recording.
   #. In the **Save As** dialog, save the MP4 file.
   #. In the **Screen Recorder** dialog, click one of the buttons to show the
      file location, open the recording in a player, or dismiss the dialog.

   .. rubric:: Record video with the emulator
      :name: record-video-with-the-emulator

   If you are using an emulator, you can record video directly from the **Record
   and Playback** tab in **Extended Controls**. Once you have recorded a video,
   you can save it as either WEBM or GIF format:

   .. figure:: https://developer.android.google.cn/static/studio/images/debug/video-emulator_2x.png
      :width: 820px

      **Figure 2.** Record a video using an emulator.

Last updated 2023-06-01 UTC.

.. |Device Video| image:: https://developer.android.google.cn/static/images/tools/am-video.jpg
   :width: 230px
.. |image-am-ivideo| image:: https://developer.android.google.cn/static/images/tools/am-ivideo.png
   :class: inline-icon

/Capture and read bug reports
=============================

.. https://developer.android.google.cn/studio/debug/bug-report?hl=en

.. container:: devsite-article-body clearfix

   A bug report contains device logs, stack traces, and other diagnostic
   information to help you find and fix bugs in your app. To capture a bug
   report from your device, use the **Take bug report** developer option on the
   device, the Android Emulator menu, or the ``adb bugreport`` command on your
   development machine.

   .. container:: attempt-right

      |image-dev-options-pixel_2x_cropped|
      **Figure 1.** Developer options on a device.

   To take a bug report, you must have `Developer options <#/studio/debug/dev-options>`__ enabled on your device to access the
   **Take bug report** option.

   .. rubric:: Capture a bug report from a device
      :name: bugreportdevice

   .. container:: attempt-right

      |image-dev-options-take-bug-report_2x|
      **Figure 2.** The bug report is ready.

   To get a bug report directly from your device, do the following:

   #. Enable `Developer Options <#/studio/debug/dev-options>`__.

   #. In **Developer options**, tap **Take bug report**.

   #. Select the type of bug report you want and tap **Report**.

      After a moment, you get a notification that the bug report is ready, as
      shown in figure 2.

   #. To share the bug report, tap the notification.

   .. rubric:: Capture a bug report from the Android Emulator
      :name: emulator

   From the Android Emulator, you can use the **File a bug** feature in the
   extended controls:

   #. Click **More** |image-emulator-extended-controls| in the Emulator panel.

   #. In the **Extended controls** window, select **Bug report**.

      This opens a screen where you can see the bug report details, such as the
      screenshot, the AVD configuration info, and the bug report log. You can
      also type a message with reproduction steps to save with the report.

   #. Wait for the bug report to finish collecting, then click **Save Report**.

   .. rubric:: Capture a bug report using adb
      :name: bugreportadb

   If you have just one device connected, you can get a bug report using
   `adb <#/studio/command-line/adb>`__, as follows:

   .. code:: none

      $ adb bugreport E:\Reports\MyBugReports

   If you don't specify a path for the bug report, it is saved to the local
   directory.

   If you have multiple devices connected, you must specify the device with the
   ``-s`` option. Run the following ``adb`` commands to get the device serial
   number and generate the bug report:

   .. code:: none

      $ adb devices
      List of devices attached
      emulator-5554      device
      8XV7N15C31003476 device

      $ adb -s 8XV7N15C31003476 bugreport

   .. rubric:: Save an older bug report
      :name: bugreportadbpull

   By default, bug reports are saved at ``/bugreports`` and can be viewed using
   the following command:

   .. code:: none

      $ adb shell ls /bugreports/
      bugreport-foo-bar.xxx.YYYY-MM-DD-HH-MM-SS-dumpstate_log-yyy.txt
      bugreport-foo-bar.xxx.YYYY-MM-DD-HH-MM-SS.zip
      dumpstate-stats.txt

   You can then pull the zip file via ``adb pull``:

   .. code:: none

      $ adb pull /bugreports/bugreport-foo-bar.xxx.YYYY-MM-DD-HH-MM-SS.zip

   .. rubric:: Inspect the bug report zip file
      :name: bugreport

   By default, the zip file is called
   ``bugreport-``\ ``BUILD_ID``\ ``-``\ ``DATE``\ ``.zip``. The zip file can
   contain multiple files, but the most important file is
   ``bugreport-``\ ``BUILD_ID``\ ``-``\ ``DATE``\ ``.txt``. This is the bug
   report, which contains diagnostic output for system services (``dumpsys``),
   error logs (``dumpstate``), and system message logs (``logcat``). The system
   messages include stack traces when the device throws an error and messages
   written from all apps with the `Log <#/reference/android/util/Log>`__
   class.

   The zip file contains a ``version.txt`` metadata file that contains the
   Android release letter. When systrace is enabled, the zip file also contains
   a ``systrace.txt`` file. The `Systrace tool <#/topic/performance/tracing/command-line>`__ helps analyze the
   performance of your app by capturing and displaying execution times of your
   app processes and other Android system processes.

   The ``dumpstate`` tool copies files from the device’s file system into the
   zip file under the ``FS`` folder so you can reference them. For example, a
   ``/dirA/dirB/fileC`` file in the device would generate an
   ``FS/dirA/dirB/fileC`` entry in the zip file.

   |image-capture-and-read-bug-report_2x|

   **Figure 3.** The bug report file structure.

   For more information, see `Reading bug reports <https://source.android.google.cn/source/read-bug-reports.html>`__.

   .. rubric:: Get reports from your users
      :name: userbugreports

   Capturing bug reports is helpful as you're using the app yourself, but your
   end-users can't easily share these types of bug reports with you. To get
   crash reports with stack traces from real-world users, take advantage of the
   Google Play and Firebase crash reporting features.

   .. rubric:: Google Play Console
      :name: googleplay

   You can get reports from the `Google Play Console <https://play.google.com/console/>`__ to view data for crashes and
   application not responding (ANR) errors from users who installed your app
   from Google Play. Data is available from the previous six months.

   For more information, see `View crashes and application not responding (ANR) errors <https://support.google.com/googleplay/android-developer/answer/6083203?ref_topic=7071935>`__
   in Play Console help.

   .. rubric:: Firebase crash reporting
      :name: firebase-crash-reporting

   Firebase Crashlytics reporting creates detailed reports of the errors in your
   app. Errors are grouped into issues based on similar stack traces and triaged
   by the severity of impact on your users. In addition to automatic reports,
   you can log custom events to help capture the steps leading to a crash.

   To start receiving crash reports from any user, `add the Firebase dependencies <https://firebase.google.cn/docs/crashlytics/get-started?platform=android>`__
   to your ``build.gradle`` file. For more information, see `Firebase Crashlytics <https://firebase.google.cn/docs/crashlytics/>`__.

Last updated 2023-04-12 UTC.

.. |image-dev-options-pixel_2x_cropped| image:: https://developer.android.google.cn/static/studio/images/run/dev-options-pixel_2x_cropped.png
   :width: 250px
.. |image-dev-options-take-bug-report_2x| image:: https://developer.android.google.cn/static/studio/images/run/dev-options-take-bug-report_2x.png
   :width: 250px
.. |image-emulator-extended-controls| image:: https://developer.android.google.cn/static/studio/images/buttons/emulator-extended-controls.png
   :class: inline-icon
.. |image-capture-and-read-bug-report_2x| image:: https://developer.android.google.cn/static/studio/images/debug/capture-and-read-bug-report_2x.png
   :width: 344px

/Analyze your APK or AAB
========================

.. https://developer.android.google.cn/studio/debug/apk-analyzer?hl=en

.. container:: devsite-article-body clearfix

   Android Studio includes an APK Analyzer that provides immediate insight into
   the composition of your APK or Android App Bundle after the build process
   completes. Using the APK Analyzer can reduce the time you spend debugging
   issues with DEX files and resources within your app and help reduce your APK
   size. The APK Analyzer is also available from the command line with
   `apkanalyzer <#/studio/command-line/apkanalyzer>`__.

   .. container:: video-wrapper-left

   With the APK Analyzer, you can:

   -  View the absolute and relative size of files in the app, such as the DEX
      and Android resource files.
   -  Understand the composition of DEX files.
   -  Quickly view the final versions of files in the app, such as the
      ``AndroidManifest.xml`` file.
   -  Perform a side-by-side comparison of two APKs or app bundles.

   There are three ways to access the APK Analyzer when a project is open:

   -  Drag an APK or app bundle into the **Editor** window of Android Studio.
   -  Switch to the **Project** view in the **Project** window, then
      double-click the APK in the default ``build/output/apks/`` directory.
   -  Select **Build > Analyze APK** in the menu bar, then select your APK or
      app bundle.

   .. rubric:: View file and size information
      :name: view_file_and_size_information

   APKs are files that follow the ZIP file format. The APK Analyzer displays
   each file or folder as an entity that you can expand to navigate into
   folders. The hierarchy of the entities mirrors the structure of the files and
   folders in the APK file.

   The APK Analyzer shows the zipped file size (or "raw file size") and download
   file size values for each entity, as shown in figure 1. **Raw File Size**
   represents the contribution of the entity to the total APK size. **Download
   Size** represents the estimated compressed size of the entity as it would be
   delivered by Google Play. The **% of Total Download Size** indicates the
   percentage of the APK's total download size the entity represents.

   .. figure:: https://developer.android.google.cn/static/studio/images/build/apk-file-sizes_2x.png
      :width: 837px

      **Figure 1.** File sizes in the APK Analyzer.

   .. rubric:: View the AndroidManifest.xml
      :name: view_the_androidmanifestxml

   If your project includes multiple ``AndroidManifest.xml`` files, such as for
   product flavors, or includes libraries that also provide a manifest file,
   they are merged into a single file in your app. This manifest file is
   normally a binary file within the APK or app bundle, but when selected in the
   APK Analyzer, the XML form of this entity is reconstructed and presented.

   This viewer helps you understand any changes that might have been made to
   your app during the build. For example, you are able to see how the
   ``AndroidManifest.xml`` file from a library your application depends on is
   merged into the final ``AndroidManifest.xml`` file.

   Additionally, this viewer provides some lint capabilities. Warnings or errors
   appear in the top-right corner. Figure 2 shows an error being reported for
   the selected manifest file.

   .. figure:: https://developer.android.google.cn/static/studio/images/build/apk-manifest-error_2x.png
      :width: 837px

      **Figure 2.** An error icon appears in the top right for the selected
      manifest file.

   **Note:**\  You can safely ignore this unrecognized schema error. To suppress
   it, go to **Preferences > Languages & Frameworks > Schemas and DTDs** and add
   ``http://schemas.android.com/apk/res/android`` to the list of ignored schemas
   and DTDs.

   .. rubric:: View DEX files
      :name: view_dex_files

   The APK Analyzer's DEX file viewer gives you immediate access to the
   underlying information in the DEX file(s) in your app. The viewer provides
   class, package, total reference, and declaration counts, which can assist in
   deciding whether to use multidex or how to remove dependencies to get below
   the `64K DEX limit <#/studio/build/multidex>`__.

   Figure 3 shows a medium-size app that is below the 64K DEX limit. Each
   package, class, and method inside the DEX file has counts listed in the
   **Defined Methods** and **Referenced Methods** columns.

   The **Referenced Methods** column counts all methods that the DEX file
   references. This typically includes methods defined in your code, dependency
   libraries, and methods defined in standard Java and Android packages that the
   code uses. These are the methods counted toward the 64K method limit in each
   DEX file.

   The **Defined Methods** column counts only the methods that are defined in
   one of your DEX files, so this number is a subset of **Referenced Methods**.

   **Note:**\  When you package a dependency in your app, the methods defined in
   the dependency add to both method counts. Minification and 
   `code shrinking <#/studio/build/shrink-code>`__ can each also considerably change
   the contents of a DEX file after source code is compiled.

   .. figure:: https://developer.android.google.cn/static/studio/images/build/apk-over-64k-limit_2x.png
      :width: 837px

      **Figure 3.** A medium-sized app.

   .. rubric:: Filter the DEX file tree view
      :name: filter_the_dex_file_tree_view

   Just above the **Class** list, the APK Analyzer provides filters for viewing
   the contents of the selected DEX file, as shown in figure 4.

   .. figure:: https://developer.android.google.cn/static/studio/images/build/apk-filter-tree-view_2x.png
      :width: 837px

      **Figure 4.** DEX filters set to display fields and methods for
      ``BuildConfig``.

   To use the filters to display all methods and fields inside a class, do the
   following:

   #. In the **File** list, select the ``classes.dex`` file.

   #. In the **Class** list, navigate to and select a class.

   #. Expand the class you selected.

   #. Toggle **Show fields** |image-apk-fields| to show or hide the class fields.

   #. Toggle **Show methods** |image-apk-methods| to show or hide the class methods.

   #. Toggle **Show all referenced methods or fields** |image-apk-methods-fields| to show or hide
      referenced packages, classes, methods, and fields.

      In the tree view, italicized nodes are references that don't have a
      definition in the selected DEX file. A DEX file can reference methods and
      fields that are defined in a different a file. For example
      ``System.out.println()`` is a reference to the ``println()`` method in the
      Android framework.

   .. rubric:: Load ProGuard mappings
      :name: load_proguard_mappings

   Next to the filtering icons are the ProGuard mapping icons. The ProGuard
   icons are grayed out until you load a set of ProGuard mapping files that add
   functionality to the DEX viewer, such as deobfuscating names
   (``mapping.txt``), showing nodes that were removed (``usage.txt``), and
   indicating nodes that can't be removed (``seeds.txt``).

   The ProGuard mapping file you import must result from the same build that
   produced the DEX files with code shrinking enabled.

   .. figure:: https://developer.android.google.cn/static/studio/images/build/apk-proguard-mappings_2x.png
      :width: 330px

      **Figure 5.** Load Proguard mappings...

   To load the ProGuard mapping files, do the following:

   #. Click **Load Proguard mappings...**.

   #. Navigate to the project folder that contains the mapping files and load
      all the files, any combination of the files, or the folder that contains
      the files.

      The mapping files are normally in
      ``project``\ ``/``\ ``app``\ ``/build/outputs/mappings/release/``. The
      file picker defaults to the **release** folder if it detects this project
      structure.

      First, the file picker checks for filenames that exactly match
      ``mapping.txt``, ``seeds.txt``, and ``usage.txt``. Next, the file picker
      checks for filenames that contain the text ``mapping``, ``usage``, or
      ``seeds`` somewhere and end with ``.txt``. For example
      ``release-seeds-1.10.15.txt`` is a match.

   The following list describes the mapping files:

   -  ``seeds.txt``: Nodes that the ProGuard configuration prevents from being
      removed during shrinking are shown in bold.

   -  ``mapping.txt``: Enables **Deobfuscate names** |image-apk-deobfuscate-names| so you can restore
      the original names of nodes that were obfuscated by R8. For example, you
      can restore obfuscated node names like ``a``, ``b``, ``c`` to ``MyClass``,
      ``MainActivity``, and ``myMethod()``.

   -  ``usage.txt``: Enables **Show removed nodes** |image-apk-show-removed-nodes| so you can show
      classes, methods, and fields that were removed by R8 during shrinking. The
      restored nodes are shown in strikethrough.

      For more information about using R8 to obfuscate and minimize your code,
      see `Shrink, obfuscate, and optimize your app <#/studio/build/shrink-code>`__.

   .. rubric:: Show bytecode, find usages, and generate Keep rule
      :name: show_bytecode_find_usages_and_generate_keep_rule

   The nodes in the **Class** list view have a context menu with the following
   options that let you see the bytecode, find usages, and display a dialog that
   shows ProGuard rules to copy and paste for the selected node. Right-click any
   node in the **Class** list view to display its context menu.

   **Show bytecode**: Decompiles the selected class, method, or field and
   displays the smali bytecode representation in a dialog, as follows:

   .. figure:: https://developer.android.google.cn/static/studio/images/build/apk-byte-code_2x.png
      :width: 656px

      **Figure 6.** DEX bytecode for ``init`` method.

   **Find usages**: Shows which other parts of the DEX code have references to
   the selected class or method, as shown in figure 7. If you have ``seeds.txt``
   loaded, nodes displayed in bold indicate that the ProGuard configuration
   prevents them from being removed during shrinking:

   .. figure:: https://developer.android.google.cn/static/studio/images/build/apk-references_2x.png
      :width: 806px

      **Figure 7.** References to ``MyClass``.

   **Generate Proguard Keep rule**: Shows ProGuard rules that you can copy and
   paste into your project's ProGuard configuration file, as shown in figure 8.
   This keeps a given package, class, method, or field from being removed during
   the code shrinking phase. For more information, see `Customize which code to keep <#/studio/build/shrink-code#keep-code>`__.

   .. figure:: https://developer.android.google.cn/static/studio/images/build/apk-proguard-keep-rule_2x.png
      :width: 887px

      **Figure 8.** ProGuard rules that you can copy from the dialog into your
      ProGuard configuration file.

   .. rubric:: View code and resource entities
      :name: view_code_and_resource_entities

   Various build tasks change the final entities in an app. For example,
   ProGuard shrinking rules can alter your final code, and image resources can
   be overridden by resources in a `product flavor <#/studio/build/build-variants#product-flavors>`__.

   To view the final version of your files with the APK Analyzer, click the
   entity for a preview of the text or image entity, as shown in figure 9.

   .. figure:: https://developer.android.google.cn/static/studio/images/build/apk-image-preview_2x.png
      :width: 837px

      **Figure 9.** A preview of the final image resource.

   The APK Analyzer can also display various text and binary files. For
   instance, the ``resources.arsc`` entity viewer lets you see the
   configuration-specific values, such as language translations for a string
   resource. In figure 10, you can see the translations for each string
   resource.

   .. figure:: https://developer.android.google.cn/static/studio/images/build/apk-strings_2x.png
      :width: 836px

      **Figure 10.** Preview of translated string resources.

   .. rubric:: Compare files
      :name: compare_files

   The APK Analyzer can compare the size of the entities in two different APK or
   app bundle files. This is helpful when you need to understand why your app
   increased in size compared to a previous release.

   Before you publish an updated app, do the following:

   #. Load the version of the app you are about to publish into the APK
      Analyzer.

   #. In the top-right corner of the APK Analyzer, click **Compare with previous
      APK...**.

   #. In the selection dialog, find the artifact that was last published to your
      users and click **OK**.

      A dialog similar to the one in figure 11 appears to help you assess the
      impact the update might have on users.

   Figure 11 shows the difference between a particular app's debug and release
   builds. Different build options are in use between these build types, which
   alter the underlying entities differently.

   .. figure:: https://developer.android.google.cn/static/studio/images/build/apk-compare_2x.png
      :width: 621px

      **Figure 11.** The difference between a debug and release APK.

Last updated 2024-04-12 UTC.

.. |image-apk-fields| image:: https://developer.android.google.cn/static/studio/images/buttons/apk-fields.png
   :class: inline-icon
.. |image-apk-methods| image:: https://developer.android.google.cn/static/studio/images/buttons/apk-methods.png
   :class: inline-icon
.. |image-apk-methods-fields| image:: https://developer.android.google.cn/static/studio/images/buttons/apk-methods-fields.png
   :class: inline-icon
.. |image-apk-deobfuscate-names| image:: https://developer.android.google.cn/static/studio/images/buttons/apk-deobfuscate-names.png
   :class: inline-icon
.. |image-apk-show-removed-nodes| image:: https://developer.android.google.cn/static/studio/images/buttons/apk-show-removed-nodes.png
   :class: inline-icon

/Customize run/debug configurations
===================================

.. https://developer.android.google.cn/studio/run/rundebugconfig?hl=en

.. container:: devsite-article-body clearfix

   When you run, debug, or test your code, Android Studio uses a run/debug
   configuration to determine how to perform the operation. Typically, the
   `initially-created configuration <#initially-created-config>`__ is sufficient
   to run or debug an app. However, you can modify and create new
   configurations, and modify the configuration templates to suit your
   development process as described on this page.

   For more information, also see the following IntelliJ documentation:

   -  `Run/Debug Configurations <https://www.jetbrains.com/help/idea/2023.3/run-debug-configurations.html>`__
   -  `Creating and Editing Run/Debug Configurations <https://www.jetbrains.com/help/go/creating-and-editing-run-debug-configurations.html>`__

   .. rubric:: About run/debug configurations
      :name: about

   Run/debug configurations specify details such as app installation, launch,
   and test options. You can define a configuration for one-time use, or save it
   for future use. After you save it, you can select the configuration from the
   **Select Run/Debug Configuration** drop-down list within the
   `toolbar <#/studio/intro#user-interface>`__. Android Studio saves
   configurations as part of the project.

   .. rubric:: Initially-created run/debug configuration
      :name: initially-created-config

   When you first create a project, Android Studio creates a run/debug
   configuration for the main activity based on the `Android App template <#android-application>`__. To run or debug your project, you must
   always have at least one run/debug configuration defined. For this reason, we
   recommend that you don't delete the initially-created configuration.

   .. rubric:: Project scope and version control
      :name: project

   Run/debug configurations and template changes apply to the current project
   only. You can share a run/debug configuration (but not a template) through
   your version control system. For more information about how to share a
   configuration, see `Name and Share Configuration Options <#nameshare>`__.

   .. rubric:: Open the Run/Debug Configurations dialog
      :name: opening

   To open the Run/Debug Configurations dialog, select **Run** > **Edit
   Configurations**. The **Run/Debug Configurations** dialog appears, as shown
   in figure 1.

   |image-rdc-rundebugconfg_2-3_2x|

   **Figure 1**. The **Run/Debug Configurations** dialog

   The left panel of the dialog groups your defined configurations by template
   type, and allows you to `edit configuration templates <#editing-template>`__
   at the bottom. You can edit the selected configuration in the right panel.
   Resize the dialog to see any hidden items.

   In this dialog, you can:

   -  `Create new run/debug configurations <#creating>`__.
   -  `Edit run/debug configurations. <#editing>`__
   -  `Edit configuration templates. <#editing-template>`__
   -  `Sort and group configurations. <#sorting>`__

   .. rubric:: Create a new run/debug configuration
      :name: creating

   You can define new run/debug configurations from the **Run/Debug
   Configurations** dialog, the **Project** window, or the Code Editor. The new
   configuration must be based on a `configuration template <#config-templates>`__.

   The Run/Debug Configurations dialog displays your run/debug configurations
   and the available configuration templates. You can start a new configuration
   directly from a template, or from a copy of another configuration. You can
   then change the field values as needed.

   Alternatively, you can right-click an item in the **Project** window to
   automatically create a configuration specific to that item. For example, if
   you want to run a particular activity, you can right-click the activity Java
   file and select **Run**. Depending on the item, Android Studio uses an
   `Android App <#android-application>`__, `Android Instrumented Tests <#android-tests>`__, or
   `JUnit <https://www.jetbrains.com/help/idea/2023.3/run-debug-configuration-junit.html>`__
   configuration template to create the configuration.

   In the Code Editor, you can easily create a test and run/debug configuration
   for a class or method, and then execute it.

   When you create a configuration outside of the **Run/Debug Configurations**
   dialog, the configuration is temporary unless you save it. By default, you
   can have up to five temporary configurations in the project before Android
   Studio starts to remove them. To change this default, open Android Studio
   settings, and change **Advanced Settings > Run/Debug > Temporary
   configurations limit**. For more information about temporary configurations,
   see `Creating and Saving Temporary Run/Debug Configurations <https://www.jetbrains.com/help/idea/2023.3/creating-and-saving-temporary-run-debug-configurations.html>`__.

   .. rubric:: Start a configuration based on a template
      :name: starting-a-configuration-based-on-a-template

   To define a run/debug configuration based on a template, follow these steps:

   #. `Open the Run/Debug Configurations dialog <#opening>`__.
   #. Click **Add New Configuration** |image-rdc-iaddnewconfig_2-1|.
   #. Select a `configuration template <#config-templates>`__.
   #. Type a name in the **Name** field.
   #. Modify the configuration, as needed.
   #. Click **Apply** or **OK**.

   .. rubric:: Start a configuration from a copy
      :name: starting-copy

   To define a run/debug configuration starting from a copy of another
   configuration, follow these steps:

   #. `Open the Run/Debug Configurations dialog <#opening>`__.
   #. Select an existing run/debug configuration in the left pane.
   #. Click **Copy Configuration** |image-rdc-icopyconfig_2-1|.
   #. Type a name in the **Name** field.
   #. Modify the configuration, as needed.
   #. Click **Apply** or **OK**.

   .. rubric:: Define a configuration for an item in the project
      :name: defining-a-configuration-for-an-item-in-the-project

   Android Studio can create a run/debug configuration for some items displayed
   in the **Project** window. The configuration is based on a configuration
   template, as follows:

   -  Activity Java file: The `Android App <#android-application>`__ template.
   -  Package: `Android Instrumented Tests <#android-tests>`__ or `Android JUnit <https://www.jetbrains.com/help/idea/2023.3/run-debug-configuration-junit.html>`__
      template, depending on your `source set <#/studio/build/build-variants#sourcesets>`__. If you select an
      `instrumented test <#/training/testing/unit-testing>`__, then it uses the
      Android Instrumented Tests template. If you select a `local unit test <#/training/testing/unit-testing>`__, then it uses the Android JUnit
      template. For a local unit test, you can optionally run with code
      coverage. For more information, see `Code Coverage <https://www.jetbrains.com/help/idea/2023.3/code-coverage.html>`__.

   To create a run/debug configuration for an item in your project, follow these
   steps:

   #. Open a project in `Android or Project view <#/studio/projects#ProjectFiles>`__.

   #. In the **Project** window, right-click a testable item and select either
      **Run ``filename``** or **Debug ``filename``**. Android Studio creates a
      temporary run/debug configuration and launches your app.

   #. Open the **Select Run/Debug Configuration** drop-down list in the toolbar.

   #. | Select **Save Configuration** from the options next to the configuration
        that you want to save.
      | |image-rundebug-saveconfiguration_2x|

      **Figure 2**. Save the configuration

   **Note:** If you right-click and run or debug the same item (but not an
   activity), Android Studio creates a new configuration.

   .. rubric:: Define a test configuration for a class or method
      :name: defining-a-test-configuration-for-a-class-or-method

   Android Studio lets you define a test run configuration for a class or
   method, and then execute it. For example, if you create a new class, you can
   create and run a test for it. If the test passes, you can then run the tests
   for the rest of the project to make sure that your new code doesn't break
   anything somewhere else.

   Android Studio uses the `Android Instrumented Tests <#android-tests>`__ or
   `Android JUnit <https://www.jetbrains.com/help/idea/2023.3/run-debug-configuration-junit.html>`__
   template, depending on your `source set <#/studio/build/build-variants#sourcesets>`__. For a local unit test, you
   can optionally run with `code coverage <https://www.jetbrains.com/help/idea/2023.3/code-coverage.html>`__.

   To create a run/debug configuration for a class or method in your Java code,
   follow these steps:

   #. Open a project in `Android or Project view <#/studio/projects#ProjectFiles>`__.

   #. Open a Java file in the Code Editor.

   #. Select a class or method in the code, and then press Control+Shift+T
      (Command+Shift+T).

   #. Select **Create New Test** from the menu that appears.

   #. In the `Create Test <https://www.jetbrains.com/help/idea/2023.3/create-test.html>`__
      dialog, optionally change or set the values and click **OK**.

   #. In the **Choose Destination Directory** dialog, select where in the
      project you want Android Studio to place the test. You can specify the
      location by directory structure or by selecting a neighboring class.

   #. Click **OK**.

      The new test appears in the **Project** window in the corresponding test
      source set.

   #. To run the test, do one of the following:

      -  In the **Project** window, right-click the test and select **Run** or
         **Debug**.
      -  In the Code Editor, right-click a class definition or method name in
         the test file and select **Run** or **Debug** to test all methods in
         the class.

   #. Open the **Select Run/Debug Configuration** drop-down list in the toolbar.

   #. | Select **Save Configuration** from the options next to the configuration
        that you want to save.
      | |image-rundebug-saveconfiguration_2x|

      **Figure 3**. Save the configuration

   .. rubric:: Run or debug an app using a saved configuration
      :name: running

   If you've saved a run/debug configuration, you can select it before you run
   or debug your app.

   To use a saved run/debug configuration, follow these steps:

   #. Select the run/debug configuration from the **Select Run/Debug
      Configuration** drop-down list within the
      `toolbar <#/studio/intro#user-interface>`__.
   #. Select **Run** > **Run** or **Run** > **Debug**.

   .. rubric:: Edit a run/debug configuration
      :name: editing

   To edit a run/debug configuration, follow these steps:

   #. `Open the Run/Debug Configurations dialog <#opening>`__.
   #. Select a configuration in the left pane.
   #. Modify the configuration, as needed.
   #. Click **Apply** or **OK**.

   .. rubric:: Edit a run/debug configuration template
      :name: editing-template

   You can edit the configuration templates provided by Android Studio to suit
   your development process. When you edit a template, it doesn't affect
   existing configurations that use the template. So, for example, if you need
   to create a number of configurations of a certain type, you can edit the
   template and then change it back when you're done.

   Although you can't create new templates, you can create configurations to use
   similar to a template. You can `copy a configuration <#starting-copy>`__ and
   edit the copy to create new configurations.

   To edit a template, follow these steps:

   #. `Open the Run/Debug Configurations dialog <#opening>`__.
   #. Click **Edit configuration templates...**.
   #. Select a configuration template.
   #. Modify the configuration, as needed.
   #. Click **Apply** or **OK**.

   .. rubric:: Sort and group configurations
      :name: sorting

   In the **Run/Debug Configurations** dialog, you can order your configurations
   to find them quickly. You can sort the items in the folder alphabetically,
   and create new folders to group configurations.

   To sort configurations alphabetically, follow these steps:

   #. `Open the Run/Debug Configurations dialog <#opening>`__.
   #. Select a folder that contains configurations.
   #. Click **Sort Configurations** |image-rdc-isortconfig_2-1|.
   #. Click **OK** to close the dialog.

   To group configurations in folders, follow these steps:

   #. `Open the Run/Debug Configurations dialog <#opening>`__.
   #. Select a folder that contains configurations.
   #. Click **Create New Folder** |image-rdc-icreatenewfolder_2-1|.
   #. Type a name in the **Folder Name** field.
   #. Click **Apply** to save the name.

   Drag items from the same template category into the folder.
   Order the folders and configurations in the same template category by
   dragging them into position.
   Click **OK** to close the dialog.

   .. rubric:: Define before-launch operations
      :name: definingbefore

   You can specify tasks to execute before applying the run/debug configuration.
   The tasks are performed in the order they appear in the list.

   **Note:** Defining before launch tasks is an advanced feature. Instead of
   using this feature, we recommend that you put any preparation logic as tasks
   in your ``build.gradle`` file so they'll be executed when you build from the
   command line.

   To create a task list, follow these steps:

   #. At the bottom of the **Run/Debug Configurations** dialog under **Before
      launch** (you may need to scroll down), click **Add** |image-rdc-iaddnewconfig_2-1| and select
      a task type. If a dialog opens, fill in the fields and click **OK**.

   #. Add more tasks as needed.

   #. To order the tasks, drag them or select a task and click **Up** |image-rdc-imoveup_2-1|
      and **Down** |image-rdc-imovedown_2-1| to move it up or down in the list.

   #. Select **Show this page** if you want to display the run/debug
      configuration settings before applying them.

      This option is deselected by default.

   #. Select **Active tool window** if you want the
      `Run <https://www.jetbrains.com/help/idea/2023.3/run-tool-window.html>`__
      or
      `Debug <https://www.jetbrains.com/help/idea/2023.3/debug-tool-window.html>`__
      tool window to be activated when you run or debug your app.

      This option is selected by default.

   To remove a task from the list, follow these steps:

   #. Select a task.
   #. Click **Remove** |image-rdc-iremove_2-1|.

   To edit a task, follow these steps:

   #. Select a task.
   #. Click **Edit** |image-rdc-iedit_2-1|.
   #. Edit the task settings in the dialog that opens, and then click **OK**.

   The following table lists the available tasks you can add.

   .. list-table::
      :header-rows: 1

      - 

         - Task
         - Description
      - 

         - Run External tool
         - Run an application that's external to Android Studio. In the
            `External Tools <https://www.jetbrains.com/help/idea/2023.3/create-edit-copy-tool-dialog.html>`__
            dialog, select one or more applications that you want to run and
            then click **OK**. If the application isn't defined in Android
            Studio yet, add its definition in the `Create Tools <https://www.jetbrains.com/help/idea/2023.3/create-edit-copy-tool-dialog.html>`__
            dialog. For more information, see `Configuring Third-Party Tools <https://www.jetbrains.com/help/idea/2023.3/configuring-third-party-tools.html>`__
            and `External Tools <https://www.jetbrains.com/help/idea/2023.3/external-tools.html>`__.
      - 

         - Run Another Configuration
         - Execute one of the existing run/debug configurations. In the **Choose
            Configuration to Execute** dialog, select a configuration to execute
            and then click **OK**.
      - 

         - Make
         - Compile the project or the module. Android Studio executes the `Make Module command <https://www.jetbrains.com/help/idea/2023.3/compilation-types.html#make_module>`__
            if the run/debug configuration specifies a particular module, or it
            executes the `Make Project command <https://www.jetbrains.com/help/idea/2023.3/compilation-types.html#make_project>`__
            if no modules are specified.
      - 

         - Make Project
         - Compile the project. Android Studio executes the `Make Project command <https://www.jetbrains.com/help/idea/2023.3/compilation-types.html#make_project>`__.
      - 

         - Make, no error check
         - This option is the same as **Make**, except that Android Studio
            executes the run/debug configuration irrespective of the compilation
            result.
      - 

         - Build Artifacts
         - Unsupported in Android Studio.
      - 

         - Run Gradle task
         - Run a Gradle task. In the
            `dialog <https://www.jetbrains.com/help/idea/2023.3/create-run-debug-configuration-for-gradle-tasks.html>`__
            that opens, specify the details and then click **OK**. For more
            information, see
            `Gradle <https://www.jetbrains.com/help/idea/2023.3/gradle.html>`__.
      - 

         - Gradle-aware Make
         - Compile the project and run Gradle.
      - 

         - App Engine Gradle builder
         - The App Engine Gradle builder task syncs the project and then builds
            the module.

   .. rubric:: Configuration templates
      :name: config-templates

   Android Studio provides configuration templates to help you get started
   quickly. The following sections describe the templates that apply to Android
   development with Android Studio:

   -  `Android App <#android-application>`__
   -  `Android Tests <#android-tests>`__
   -  `App Engine DevAppServer <#app-engine>`__
   -  `Wear OS Complication, Tile, and Watch Face <#wear-os-configs>`__

   **Note:** Android Studio 2.1.\ *x* and lower had a Native Application
   template, which newer versions don't have. If you have a Native Application
   template in a project, Android Studio converts it to Android App when you
   load the project. A **Convert Project** dialog guides you through the
   process.

   .. rubric:: Unsupported templates
      :name: unsupported-templates

   The following unsupported templates come from IntelliJ IDEA and aren't
   specific to Android development with Android Studio. For information about
   using these templates, follow the links to the IntelliJ IDEA documentation.

   -  `Application <https://www.jetbrains.com/help/idea/2023.3/run-debug-configuration-application.html>`__
   -  `Compound <https://www.jetbrains.com/help/idea/2023.3/run-debug-configuration-compound.html>`__
   -  `Gradle <https://www.jetbrains.com/help/idea/2023.3/run-debug-configuration-gradle.html>`__
   -  `Groovy <https://www.jetbrains.com/help/idea/2023.3/run-debug-configuration-groovy.html>`__
   -  `JAR Application <https://www.jetbrains.com/help/idea/2023.3/run-debug-configuration-jar-application.html>`__
   -  `Java Scratch <https://www.jetbrains.com/help/idea/2023.3/run-debug-configuration-java-scratch.html>`__
   -  `JUnit <https://www.jetbrains.com/help/idea/2023.3/run-debug-configuration-junit.html>`__
   -  `Kotlin <https://www.jetbrains.com/help/idea/2023.3/run-debug-configuration-kotlin.html>`__
   -  `Kotlin Script <https://www.jetbrains.com/help/idea/2023.3/run-debug-configuration-kotlin-script.html>`__
   -  `Remote Debug <https://www.jetbrains.com/help/idea/2023.3/run-debug-configuration-remote.html>`__
   -  `Shell Script <https://www.jetbrains.com/help/idea/2023.3/run-debug-configuration-shell-script.html>`__
   -  `TestNG <https://www.jetbrains.com/help/idea/2023.3/run-debug-configuration-testng.html>`__

   .. rubric:: Common configuration options
      :name: nameshare

   The **Name**, **Allow parallel run**, and **Store as project file** options
   are common to multiple configuration templates. To learn more about them, see
   `Common settings <https://www.jetbrains.com/help/webstorm/run-debug-configurations-dialog.html#common>`__.

   Android Studio stores the shared run/debug configuration in individual XML
   files under the ``project_directory``\ ``/.idea/runConfigurations/`` folder.
   For more information, see `Directory-based format <https://www.jetbrains.com/help/idea/2023.3/creating-and-managing-projects.html#directory-based>`__
   in the IntelliJ projects documentation.

   .. rubric:: Android App
      :name: android-application

   You can run or debug Android apps and activities on virtual or hardware
   devices by using configurations based on this template.

   .. rubric:: General tab
      :name: general-tab

   In the **General** tab, you can specify installation, launch, and deployment
   options. The **Miscellaneous** tab also contains installation options.

   .. list-table::
      :widths: 40 40
      :header-rows: 1

      - 

         - Field
         - Description
      - 

         - Module
         - Select a `module <#/studio/projects#ApplicationModules>`__ to apply
            this configuration to.
      - 

         - Installation Options: Deploy
         - Select an option:

            -  **Default APK** - Build and deploy an APK for your `currently selected variant <#/studio/run#changing-variant>`__.
            -  **APK from app bundle** - Build and deploy your app from an
               `Android App Bundle <#/guide/app-bundle>`__. That is, Android
               Studio first converts your app project into an app bundle that
               includes all your app's compiled code and resources. Then, from
               that app bundle, Android Studio generates only the APKs that are
               required to deploy your app to the connected device. You should
               typically use this option when testing the app bundle you intend
               to upload to Google Play because deploying from an app bundle
               extends the total build time.
            -  **Custom Artifact** - Unsupported in Android Studio.
            -  **Nothing** - Don't install an APK on a device. For example, if
               you prefer to manually install the APK, you don't need Android
               Studio to install it.
      - 

         - Installation Options: Deploy as instant app
         - If your app supports instant experiences—that is, you either add
            support for instant apps when you `create a new project <#/studio/projects/create-project>`__, or you create one or
            more `instant-enabled feature modules <#/studio/projects/dynamic-delivery#create_instant_enabled>`__—you
            can choose to deploy those instant-enabled modules by checking the
            box next to **Deploy as instant app**.
      - 

         - Installation Options: Features to deploy
         - If your app includes `feature modules <#/studio/projects/dynamic-delivery#dynamic_feature_modules>`__,
            check the box next to each feature you want to include when
            deploying your app. You see this option only if your app includes
            feature modules.
            **Note:** If you want to test downloading and installing feature
            modules on demand, you must do so after you publish your app bundle
            and then use the Play Console internal test track. To learn more,
            read `Upload your app bundle to the Play Console <#/studio/publish/upload-bundle>`__.
      - 

         - Installation Options: Install Flags
         - Type any adb `pm install <#/studio/command-line/adb#pm>`__ options
            you want to use. Format the options the same way that you would on
            the command line, but without a path. Here are some examples:
            ``-i foo.bar.baz -r /path/to/apk``

            and

            ``-d -r``

            Default: no options.
      - 

         - Launch Options: Launch
         - Select an option:

            -  **Nothing** - Don't launch anything when you select **Run** or
               **Debug**. However, if your app is already running and you select
               **Debug**, Android Studio attaches the debugger to your app
               process.

            -  **Default Activity** - Launch the activity you've marked as
               startup in the manifest. For example:

               .. code:: prettyprint

                  <intent-filter>
                    <action android:name="android.intent.action.MAIN" />
                    <category android:name="android.intent.category.LAUNCHER" />
                  <#/intent-filter>

            -  **Specified Activity** - Launch a particular app activity in your
               module. When selected, the **Activity** field appears below,
               where you can type the name of the activity you want to launch,
               or click **More** to select an activity from a list.

            -  **URL** - Launch a URL that matches an intent filter in your
               app's manifest. When selected, the **URL** field appears below,
               where you can enter the URL.

               You must fill in this field to launch an `Android Instant App <#/topic/instant-apps>`__. You may also use this to test your
               `Android App Links <#/studio/write/app-link-indexing>`__.
      - 

         - Launch Options: Launch Flags
         - Type any adb `am start <#/studio/command-line/adb#am>`__ options
            you want to use. Format the options the same way that you would on
            the command line, but without an intent. For example:
            ``-W``

            This option doesn't appear if you chose a **Launch** value of
            **Nothing**.

            Default: no options.
      - 

         - Deployment Target Options: Target
         - Select an option:

            -  **Open Select Deployment Target Dialog** - Open the **Select
               Deployment Target** dialog to select a virtual or hardware
               device.
            -  **USB Device** - Use a hardware device connected to your
               development computer through a USB port. If there's more than
               one, a dialog appears so you can select it.
            -  **Emulator** - Use a virtual device. In a configuration, you can
               select an AVD; otherwise, it just uses the first AVD in the list.
      - 

         - Deployment Target Options: Use same device for future launches
         - By default this option is deselected so that every time you run an
            app, the **Select Deployment** dialog appears for you to select a
            device. When you select this option and then run an app, the
            **Select Deployment** dialog appears for you to select a device.
            Then, every time you run the app, it launches on the device you
            selected without displaying the **Select Deployment** dialog. To run
            the app on a different device, either deselect **Use same device for
            future launches**, or stop the app with **Run > Stop ``app``** or
            **Stop** |image-toolbar-stop|, and then start it again. The **Select
            Deployment** dialog will display so you can select a device.
      - 

         - Before Launch
         - See `Defining Before Launch Operations <#definingbefore>`__.

   .. rubric:: Miscellaneous tab
      :name: miscellaneous-tab

   In the **Miscellaneous** tab, you can specify logcat, installation, launch,
   and deployment options. The **General** tab also contains installation
   options.

   .. list-table::
      :widths: 40 40
      :header-rows: 1

      - 

         - Field
         - Description
      - 

         - Logcat: Show logcat automatically
         - When this option is selected, the **Logcat** window opens every time
            you successfully deploy and launch an app using this configuration.
            Default: selected.
      - 

         - Logcat: Clear log before launch
         - Select this option if you want Android Studio to remove data from
            previous sessions from the log file before starting the app.
            Default: deselected.
      - 

         - Installation Options: Skip installation if APK has not changed.
         - When selected, Android Studio doesn't redeploy your APK if it detects
            that it's unchanged. If you want Android Studio to force an install
            of the APK, even if it hasn't changed, then deselect this option.
            Default: selected
      - 

         - Installation Options: Force stop running application before launching
            activity
         - If selected, when Android Studio detects that it doesn't have to
            reinstall an APK because it hasn't changed, it will force-stop the
            app so that the app starts from the default launcher activity. If
            this option is deselected, Android Studio doesn't force-stop the
            app.

            This option works with the previous option that controls whether an
            APK is installed or not. For both **Installation Options** fields,
            leave them at the default unless you explicitly want to force an
            install every time.

            In some cases you might want to deselect this option. For example,
            if you're writing an input method engine (IME), force-stopping the
            app deselects it as the current keyboard, which you might not want.

            Default: selected
      - 

         - Before Launch
         - See `Defining Before Launch Operations <#definingbefore>`__.

   .. rubric:: Debugger tab
      :name: debugger-tab

   Specify debug options in the **Debugger** tab.

   For C and C++ code, Android Studio uses the `LLDB <http://lldb.llvm.org/>`__
   debugger. In addition to the normal Android Studio UI, the debugger window
   has an **LLDB** tab that lets you enter LLDB commands during debugging. You
   can enter the same commands that Android Studio uses to display information
   in the debugger UI, and you can perform additional operations.

   For C and C++ projects, you can add symbol directories, as well as LLDB
   startup and post attach commands, in the **Debugger** tab. To do so, you use
   buttons similar to the following:

   -  **Add** |image-rdc-iaddnewconfig_2-1| - Add a directory or command.
   -  **Remove** |image-rdc-iremove_2-1| - Select a directory or command, and then click this
      button to remove the item.
   -  **Up** |image-rdc-imoveup_2-1| - Select a directory or command, and then click this
      button to move the item up in the list.
   -  **Down** |image-rdc-imovedown_2-1| - Select a directory or command, and then click this
      button to move the item down in the list.

   See `Debug Your App <#/studio/debug>`__ for more information about debugging
   in Android Studio.

   .. list-table::
      :widths: 40 40
      :header-rows: 1

      - 

         - Field
         - Description
      - 

         - Debug type
         - Select one of the following options:

            -  **Java only** - Debug Java code only.
            -  **Detect Automatically** - Let Android Studio choose the best
               debug type for your project.
            -  **Native Only** - Debug native C or C++ code.
            -  **Dual (Java + Native)** - Debug Java and native code in two
               separate debug sessions.

            The **Detect Automatically** option is recommended because it
            chooses the right debug type for your project.
      - 

         - Symbol Directories
         - If you want to add symbol files to provide the debugger with C or C++
            information generated outside of Android Studio, you can add one or
            more directories here. Android Studio preferentially uses any files
            within these directories over files generated by the `Android Plugin for Gradle <https://developer.android.google.cn/studio/releases/gradle-plugin.html>`__.
            The debugger searches the directories from top to bottom, in order,
            until it finds what it needs. It searches recursively through the
            files in the directory. To optimize the list and save time, put the
            directories used most often toward the top of the list.

            If you specify a directory high in the tree, it can take longer to
            search all of the subdirectories. If you add a very specific
            directory, it takes less time to search. You need to find the right
            balance between speed and finding the files you need for debugging.
            For example, if you have a directory that contains subdirectories
            for different `Android Binary Interfaces <https://developer.android.google.cn/ndk/guides/abis.html>`__
            (ABIs), you can choose to add a directory for a specific ABI or for
            all ABIs. Although it can take longer to search through the
            upper-level directory, it's also more foolproof if you decide to
            debug on a different device.

            Note that you don't have to add directories containing Gradle symbol
            files because the debugger uses them automatically.
      - 

         - LLDB Startup Commands
         - Add LLDB commands that you want to execute before the debugger
            attaches to the process. For example, you can define settings for
            the environment, as shown in the following command:

            ``settings set target.max-memory-read-size 2048``

            LLDB executes the commands in order from top to bottom.
      - 

         - LLDB Post Attach Commands
         - Add LLDB commands that you want to execute right after the debugger
            attaches to the process. For example:

            ``process handle SIGPIPE -n true -p true -s false``

            LLDB executes the commands in order from top to bottom.
      - 

         - Host working directory
         - Specify the LLDB working directory.
      - 

         - Logging: Target channels
         - Specify LLDB log options. Android Studio sets the default options
            based on the team's experience — so it's not too slow but contains
            needed information for troubleshooting issues. The log is often
            requested for Android Studio bug reports. This default is

            ``lldb process:gdb-remote packets``

            You can change the default to gather more information. For example,
            the following log options gather information about a specific
            *``platform``*:

            ``lldb process``\ *``platform``*\ ``:gdb-remote packets``
            For a complete list of log commands, enter the ``log list`` command
            from an LLDB shell window in Android Studio.

            Android Studio places device logs in the following location, where
            `ApplicationId <https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.ProductFlavor.html#com.android.build.gradle.internal.dsl.ProductFlavor:applicationId>`__
            is the unique application ID that's used in your built APK manifest,
            and identifies your app on your device and in the Google Play Store:

            ``/data/data/``\ *``ApplicationId``*\ ``/lldb/log``

            Or, if multiple users access a device, it places the logs in the
            following location, where
            `AndroidUserId <https://source.android.google.cn/devices/tech/admin/multi-user.html>`__
            is a unique identifier for a user on the device:

            ``/data/user/``\ *``AndroidUserId``*\ ``/``\ *``ApplicationId``*\ ``/lldb/log``

            For information about using LLDB for remote debugging, see `Remote Debugging <http://lldb.llvm.org/remote.html>`__.
      - 

         - Before Launch
         - See `Defining Before Launch Operations <#definingbefore>`__.

   .. rubric:: Profiling tab
      :name: profiling-tab

   The **Enable advanced profiling** option must be checked to enable certain
   features in the `Android Profiler <#/studio/profile>`__ when your device is
   running Android 7.1 or lower.

   .. rubric:: Android Tests
      :name: android-tests

   The test template that you should use depends on your `source set <#/studio/build/build-variants#sourcesets>`__. The Android Instrumented
   Tests template is for an `instrumented test <#/training/testing/unit-testing>`__. The Android JUnit template is for a
   local unit test.

   **Note:** If you're using Firebase Test Lab to test on a variety of devices,
   you can use the Android JUnit template to define your instrumented tests. For
   more information, see `Run Your Tests with Firebase Test Lab <#/training/testing/unit-testing/instrumented-unit-tests#run-ctl>`__.

   The following tab descriptions cover the tabs and fields for the Android
   Instrumented test template. For information about the tabs and fields for the
   Android JUnit test template, see the IntelliJ `Run/Debug Configuration: JUnit <https://www.jetbrains.com/help/idea/2023.3/run-debug-configuration-junit.html>`__
   page.

   .. rubric:: General tab
      :name: general-tab

   In **General** tab, you can specify test location, instrumentation runner,
   adb shell, and deployment options.

   .. list-table::
      :widths: 40 40
      :header-rows: 1

      - 

         - Field
         - Description
      - 

         - Module
         - Select a `module <#/studio/projects#ApplicationModules>`__ to apply
            this configuration to.
      - 

         - Test
         - In this area, specify the location of tests that you want to run:

            -  **All in module** - Launch all tests from the selected module.
            -  **All in package** - Launch all tests from the package specified
               in the **Package** field. Type the name, or click **More** to
               select the package from a dialog.
            -  **Class** - Launch tests of the class specified in the **Class**
               field. Type the name, or click **More** to select the class from
               a dialog.
            -  **Method** - Launch a test method. In the **Class** field,
               specify the class that contains the method. In the **Method**
               field, specify the method. Type the name, or click **More** to
               select the class or method from a dialog.
      - 

         - Specific instrumentation runner (optional)
         - Type the location of the `instrumentation runner <https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.ProductFlavor.html#com.android.build.gradle.internal.dsl.ProductFlavor:testInstrumentationRunner>`__;
            click **More** to use a dialog. The ``build.gradle`` file specifies
            the location of the instrumentation runner; this value overrides it.
            The default is typically the
            `AndroidJUnitRunner <#/reference/androidx/test/runner/AndroidJUnitRunner>`__
            class from `AndroidX Test <#/training/testing>`__.
      - 

         - Extra options
         - Type any adb `am instrument <#/studio/command-line/adb#am>`__
            options you want to use. Don't type the component. For example, if
            you're using
            ``\ `AndroidJUnitRunner`` <#/reference/androidx/test/runner/AndroidJUnitRunner>`__
            from `AndroidX Test <#/training/testing>`__, you can use this field
            to pass additional options to the runner, such as ``-e size small``.

            **Default:** no options
      - 

         - Deployment Target Options: Target
         - Select an option:

            -  **Open Select Deployment Target Dialog** - Open the **Select
               Deployment Target** dialog to select a virtual or hardware
               device.
            -  **USB Device** - Use a hardware device connected to your
               development computer through a USB port. If there's more than
               one, a dialog appears so you can select it.
            -  **Emulator** - Use a virtual device. In a configuration, you can
               select an AVD; otherwise, it just uses the first AVD in the list.
            -  **Firebase Test Lab Device Matrix** - 
               See `Run Your Tests with Firebase Test Lab <#/training/testing/unit-testing/instrumented-unit-tests#run-ctl>`__.
      - 

         - Deployment Target Options: Use same device for future launches
         - If you want to automatically use the device you chose through the
            **Select Deployment Target** dialog in the future, select this
            option. If the device isn't available, you'll receive a dialog.
            Default: deselected
      - 

         - Before Launch
         - See `Defining Before Launch Operations <#definingbefore>`__.

   .. rubric:: Miscellaneous tab
      :name: miscellaneous-tab

   The **Miscellaneous** tab contains logcat and installation options.

   .. list-table::
      :widths: 40 40
      :header-rows: 1

      - 

         - Field
         - Description
      - 

         - Logcat: Clear log before launch
         - Select this option if you want Android Studio to remove data from
            previous sessions from the log file before starting the app.
            Default: deselected.
      - 

         - Installation Options: Skip installation if APK has not changed
         - When selected, Android Studio doesn't redeploy your APK if it detects
            that it's unchanged. If you want Android Studio to force an install
            of the APK, even if it hasn't changed, then deselect this option.
            Default: selected
      - 

         - Installation Options: Force stop running application before launching
            activity
         - If selected, when Android Studio detects that it doesn't have to
            reinstall an APK because it hasn't changed, it will force-stop the
            app so that the app starts from the default launcher activity. If
            this option is deselected, Android Studio doesn't force-stop the
            app.

            This option works in conjunction with the previous option that
            controls whether an APK is installed or not. For both **Installation
            Options** fields, leave them at the default unless you explicitly
            want to force an install every time.

            In some cases you might want to deselect this option. For example,
            if you're writing an input method engine (IME), force-stopping the
            app deselects it as the current keyboard, which you might not want.

            Default: selected
      - 

         - Before Launch
         - See `Defining Before Launch Operations <#definingbefore>`__.

   .. rubric:: Debugger tab
      :name: debugger-tab-test

   Specify debug options in the **Debugger** tab.

   For C and C++ code, Android Studio uses the `LLDB <http://lldb.llvm.org/>`__
   debugger. In addition to the normal Android Studio UI, the debugger window
   has an **LLDB** tab that lets you enter LLDB commands during debugging. You
   can enter the same commands that Android Studio uses to display information
   in the debugger UI, and you can perform additional operations.

   For C and C++ projects, you can add symbol directories, as well as LLDB
   startup and post attach commands, in the **Debugger** tab. To do so, you use
   buttons similar to the following:

   -  **Add** |image-rdc-iaddnewconfig_2-1| - Add a directory or command.
   -  **Remove** |image-rdc-iremove_2-1| - Select a directory or command, and then click this
      button to remove the item.
   -  **Up** |image-rdc-imoveup_2-1| - Select a directory or command, and then click this
      button to move the item up in the list.
   -  **Down** |image-rdc-imovedown_2-1| - Select a directory or command, and then click this
      button to move the item down in the list.

   See `Debug Your App <#/studio/debug>`__ for more information about debugging
   in Android Studio.

   .. list-table::
      :widths: 40 40
      :header-rows: 1

      - 

         - Field
         - Description
      - 

         - Debug type
         - Select one of the following options:

            -  **Java only** - Debug Java code only.
            -  **Detect Automatically** - Let Android Studio choose the best
               debug type for your project.
            -  **Native Only** - Debug native C or C++ code.
            -  **Dual (Java + Native)** - Debug Java and native code in two
               separate debug sessions.

            The **Detect Automatically** option is recommended because it
            chooses the right debug type for your project.
      - 

         - Symbol Directories
         - If you want to add symbol files to provide the debugger with C or C++
            information generated outside of Android Studio, you can add one or
            more directories here. Android Studio preferentially uses any files
            within these directories over files generated by the `Android Plugin for Gradle <https://developer.android.google.cn/studio/releases/gradle-plugin.html>`__.
            The debugger searches the directories from top to bottom, in order,
            until it finds what it needs. It searches recursively through the
            files in the directory. To optimize the list and save time, put the
            directories used most often toward the top of the list.

            If you specify a directory high in the tree, it can take longer to
            search all of the subdirectories. If you add a very specific
            directory, it takes less time to search. You need to find the right
            balance between speed and finding the files you need for debugging.
            For example, if you have a directory that contains subdirectories
            for different `Android Binary Interfaces <https://developer.android.google.cn/ndk/guides/abis.html>`__
            (ABIs), you can choose to add a directory for a specific ABI or for
            all ABIs. Although it can take longer to search through the
            upper-level directory, it's also more foolproof if you decide to
            debug on a different device.

            Note that you don't have to add directories containing Gradle symbol
            files because the debugger uses them automatically.
      - 

         - LLDB Startup Commands
         - Add LLDB commands that you want to execute before the debugger
            attaches to the process. For example, you can define settings for
            the environment, as shown in the following command:

            ``settings set target.max-memory-read-size 2048``

            LLDB executes the commands in order from top to bottom.
      - 

         - LLDB Post Attach Commands
         - Add LLDB commands that you want to execute right after the debugger
            attaches to the process. For example:

            ``process handle SIGPIPE -n true -p true -s false``

            LLDB executes the commands in order from top to bottom.
      - 

         - Host working directory
         - Specify the LLDB working directory.
      - 

         - Logging: Target channels
         - Specify LLDB log options. Android Studio sets the default options
            based on the team's experience — so it's not too slow but contains
            needed information for troubleshooting issues. The log is often
            requested for Android Studio bug reports. This default is

            ``lldb process:gdb-remote packets``

            You can change the default to gather more information. For example,
            the following log options gather information about a specific
            *``platform``*:

            ``lldb process``\ *``platform``*\ ``:gdb-remote packets``
            For a complete list of log commands, enter the ``log list`` command
            from an LLDB shell window in Android Studio.

            Android Studio places device logs in the following location, where
            `ApplicationId <https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.ProductFlavor.html#com.android.build.gradle.internal.dsl.ProductFlavor:applicationId>`__
            is the unique application ID that's used in your built APK manifest,
            and identifies your app on your device and in the Google Play Store:

            ``/data/data/``\ *``ApplicationId``*\ ``/lldb/log``

            Or, if multiple users access a device, it places the logs in the
            following location, where
            `AndroidUserId <https://source.android.google.cn/devices/tech/admin/multi-user.html>`__
            is a unique identifier for a user on the device:

            ``/data/user/``\ *``AndroidUserId``*\ ``/``\ *``ApplicationId``*\ ``/lldb/log``

            For information about using LLDB for remote debugging, see `Remote Debugging <http://lldb.llvm.org/remote.html>`__.
      - 

         - Before Launch
         - See `Defining Before Launch Operations <#definingbefore>`__.

   .. rubric:: App Engine DevAppServer
      :name: app-engine

   This run/debug configuration applies to the Google Cloud Platform. For more
   information, see `Running, Testing, and Deploying the Backend <https://cloud.google.com/tools/android-studio/app_engine/run_test_deploy>`__.
   When you follow these steps and sync your project to the ``build.gradle``
   file, Android Studio creates an App Engine DevAppServer configuration for
   you.

   Note that the IntellJ IDEA `App Engine Server <https://www.jetbrains.com/help/pycharm/2023.3/run-debug-configuration-app-engine-server.html>`__
   template is a different template that's not available in Android Studio.

   .. list-table::
      :widths: 40 40
      :header-rows: 1

      - 

         - Field
         - Description
      - 

         - Single instance only
         - If you want to make sure that only one instance of the run/debug
            configuration is currently executed, select this option. It doesn't
            allow multiple runs of the same configuration at the same time.
            Default: selected
      - 

         - Module
         - Select a `module <#/studio/projects#ApplicationModules>`__ to apply
            this configuration to.
      - 

         - Synchronize with build.gradle configuration
         - If you add an App Engine module and sync to the ``build.gradle``
            file, the App Engine DevAppServer configuration fields are filled in
            for you (recommended). Selecting **File > Sync Project with Gradle
            Files** also syncs the project. Default: selected
      - 

         - App Engine SDK
         - Type a path to a `Google App Engine SDK <https://cloud.google.com/appengine/downloads#Google_App_Engine_SDK_for_Java>`__
            for Java on the local machine. Click **...** to select it from a
            dialog.
      - 

         - War Path
         - Type a path to the Web Application Archive (WAR) directory of the app
            you're deploying on the local development server. Click **...** to
            select it from a dialog.
      - 

         - VM Args
         - Specify the command-line options you want to pass to the VM for
            launching the DevAppServer. When specifying the options:

            -  Use spaces to separate different options.
            -  For options that have spaces, enclose the space in quotation
               marks (``"`` ``"``).
            -  If an option includes quotation marks, add a backslash before the
               quotation mark (``\"``).

            For more information about VM options, see the documentation for
            your J2SE version, such as `java JRDK 7 <http://docs.oracle.com/javase/7/docs/technotes/tools/windows/java.html>`__
            and `java JDK 8 <https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html>`__.

            Default: no options
      - 

         - Server Address
         - Type the host
            `address <https://cloud.google.com/appengine/docs/java/tools/devserver#The_Development_Console>`__
            to use for the server. You might need to provide the address to be
            able to access the development server from another computer on your
            network. An address of 0.0.0.0 allows both localhost access and
            hostname access. Default: localhost
      - 

         - Server Port
         - Type the
            `port <https://cloud.google.com/appengine/docs/java/tools/devserver#The_Development_Console>`__
            number to use for the server. Default: 8080
      - 

         - Disable Check for App Engine SDK Updates
         - If given, the development server will `not contact App Engine <https://cloud.google.com/appengine/docs/java/tools/devserver#The_Development_Console>`__
            to check for the availability of a new release of the SDK. By
            default, the server checks for a new version on startup, and prints
            a message if a new version is available.
      - 

         - Before Launch
         - See `Defining Before Launch Operations <#definingbefore>`__.

   .. rubric:: Wear OS run/debug configurations
      :name: wear-os-configs

   The Wear OS Complication, Tile, and Watch Face templates let you run or debug
   Wear OS apps on virtual or hardware devices. Most of the template
   configuration options are the same as the `Android App options <#android-application>`__. Here are the options that are more
   specific to the Wear OS run/debug configurations:

   -  For all Wear run/debug configurations, you have to select a specific
      complication data source, tile, or watch face (depending on the template)
      to apply the configuration to. Generally each of these entities
      corresponds to a class in your code.
   -  For the Wear OS Complication run/debug configuration, you must choose the
      **Slot** where you want to put the complication data provided by the
      complication data source. You can choose to put it at the top, right,
      bottom, left, or background of the watch face.
   -  For the Wear OS Complication run/debug configuration, you must also select
      the **Type** of the complication data provided by the complication data
      source. The types you can choose from are limited to those that are
      provided by the chosen complication data source *and* supported by the
      chosen slot. For a list of complication data types, see `Types and fields <#/training/wearables/watch-faces/adding-complications#types-fields>`__.

   Alternatively, you can also run these surfaces from the gutter icon that is
   located next to the declaration of the surface, as shown in the following
   image.

   .. figure:: https://developer.android.google.cn/static/studio/images/run/wearos_os_gutter_run.png
      :alt: Run button in the gutter next to a WatchFaceService class.
      :name: gutter-icon

      **Figure 1.** Run a Wear OS surface directly using the gutter icon.

Last updated 2024-05-03 UTC.

.. |image-rdc-rundebugconfg_2-3_2x| image:: https://developer.android.google.cn/static/studio/images/rdc-rundebugconfg_2-3_2x.png
   :width: 956px
.. |image-rdc-iaddnewconfig_2-1| image:: https://developer.android.google.cn/static/studio/images/rdc-iaddnewconfig_2-1.png
   :class: inline-icon
.. |image-rdc-icopyconfig_2-1| image:: https://developer.android.google.cn/static/studio/images/rdc-icopyconfig_2-1.png
   :class: inline-icon
.. |image-rundebug-saveconfiguration_2x| image:: https://developer.android.google.cn/static/studio/images/run/rundebug-saveconfiguration_2x.png
   :width: 500px
.. |image-rundebug-saveconfiguration_2x| image:: https://developer.android.google.cn/static/studio/images/run/rundebug-saveconfiguration_2x.png
   :width: 500px
.. |image-rdc-isortconfig_2-1| image:: https://developer.android.google.cn/static/studio/images/rdc-isortconfig_2-1.png
   :class: inline-icon
.. |image-rdc-icreatenewfolder_2-1| image:: https://developer.android.google.cn/static/studio/images/rdc-icreatenewfolder_2-1.png
   :class: inline-icon
.. |image-rdc-iaddnewconfig_2-1| image:: https://developer.android.google.cn/static/studio/images/rdc-iaddnewconfig_2-1.png
   :class: inline-icon
.. |image-rdc-imoveup_2-1| image:: https://developer.android.google.cn/static/studio/images/rdc-imoveup_2-1.png
   :class: inline-icon
.. |image-rdc-imovedown_2-1| image:: https://developer.android.google.cn/static/studio/images/rdc-imovedown_2-1.png
   :class: inline-icon
.. |image-rdc-iremove_2-1| image:: https://developer.android.google.cn/static/studio/images/rdc-iremove_2-1.png
   :class: inline-icon
   :width: 17px
.. |image-rdc-iedit_2-1| image:: https://developer.android.google.cn/static/studio/images/rdc-iedit_2-1.png
   :class: inline-icon
.. |image-toolbar-stop| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-stop.png
   :class: inline-icon
.. |image-rdc-iaddnewconfig_2-1| image:: https://developer.android.google.cn/static/studio/images/rdc-iaddnewconfig_2-1.png
   :class: inline-icon
.. |image-rdc-iremove_2-1| image:: https://developer.android.google.cn/static/studio/images/rdc-iremove_2-1.png
   :class: inline-icon
   :width: 17px
.. |image-rdc-imoveup_2-1| image:: https://developer.android.google.cn/static/studio/images/rdc-imoveup_2-1.png
   :class: inline-icon
.. |image-rdc-imovedown_2-1| image:: https://developer.android.google.cn/static/studio/images/rdc-imovedown_2-1.png
   :class: inline-icon
.. |image-rdc-iaddnewconfig_2-1| image:: https://developer.android.google.cn/static/studio/images/rdc-iaddnewconfig_2-1.png
   :class: inline-icon
.. |image-rdc-iremove_2-1| image:: https://developer.android.google.cn/static/studio/images/rdc-iremove_2-1.png
   :class: inline-icon
   :width: 17px
.. |image-rdc-imoveup_2-1| image:: https://developer.android.google.cn/static/studio/images/rdc-imoveup_2-1.png
   :class: inline-icon
.. |image-rdc-imovedown_2-1| image:: https://developer.android.google.cn/static/studio/images/rdc-imovedown_2-1.png
   :class: inline-icon


/Topic: 5. 🟢 Test your code
==============================

/Choose a testing method
========================

.. https://developer.android.google.cn/studio/test?hl=en

.. container:: devsite-article-body clearfix

   This page describes various tools that help you create, configure, and run
   your tests from Android Studio or the command line.

   If you want to learn more about the fundamentals of testing and how to write
   tests, see `Test apps on Android <#/training/testing>`__.

   There are different ways to run and configure your tests:

   -  **Test in Android Studio**

      For basic testing needs, Android Studio includes features that help you
      create, run, and view results of tests all from the IDE. Using Android
      Studio, you can point and click in the app source code to create and run
      tests for specific classes or methods, use menus to configure multiple
      test devices, and interact with the Test Matrix tool window to visualize
      test results. For more information on how to use Android Studio to create
      and manage your tests, see `Test in Android Studio <#/studio/test/test-in-android-studio>`__.

   -  **Run tests from the command line**

      For more fine-grained control, you can run tests from the command line.
      Command-line testing provides a straightforward way to target modules or
      build variants individually or in combinations. Running tests through the
      Android Debug Bridge (adb) shell allows for the most customization in
      terms of which tests you want to run.

      Running tests from the command line is also useful on a `continuous integration system <#/studio/projects/continuous-integration>`__.

      For more information, see `Test from the command line <#/studio/test/command-line>`__.

   -  **Advanced testing**

      For advanced testing needs, you may want to override default settings,
      configure Gradle options, or refactor your code so that tests are
      separated in their own module. For more information about how to set up
      your test configurations for special use cases, see `Advanced test setup <#/studio/test/advanced-test-setup>`__.

      To test how your app behaves when your user interacts with it, you can use
      tools such as `Espresso Test Recorder <#/studio/test/other-testing-tools/espresso-test-recorder>`__,
      `App Crawler <#/studio/test/other-testing-tools/app-crawler>`__, 
      `UI Automator <#/training/testing/other-components/ui-automator>`__, 
      or `Monkey testing <#/studio/test/other-testing-tools/monkey>`__.

Last updated 2023-04-12 UTC.

/Test in Android Studio
=======================

.. https://developer.android.google.cn/studio/test/test-in-android-studio?hl=en

.. container:: devsite-article-body clearfix

   Android Studio is designed to make testing simple. It contains many features
   to simplify how you create, run, and analyze tests. You can set up tests that
   run on your local machine or instrumented tests that run on a device. You can
   easily run a single test or a specific group of tests on one or more devices.
   The test results are shown directly inside Android Studio.

   |image-test-results-in-android-studio|

   **Figure 1.** Android Studio showing test results overview.

   This page is about how to manage tests in Android Studio. To learn how to
   write automated Android tests, see `Test apps on Android <#/training/testing>`__.

   .. rubric:: Test types and locations
      :name: test_types_and_locations

   The location of your tests depends on the type of test you write. Android
   projects have default source code directories for local unit tests and
   instrumented tests.

   **Local unit tests** are located at
   ``module-name``\ ``/src/``\ **``test``**\ ``/java/``. These are tests that
   run on your machine's local Java Virtual Machine (JVM). Use these tests to
   minimize execution time when your tests have no Android framework
   dependencies or when you can create test doubles for the Android framework
   dependencies. For more information on how to write local unit tests, see
   `Build local unit tests <#/training/testing/local-tests>`__.

   **Note:**\  When you run local unit tests, the Android Gradle plugin includes
   a library that contains all the APIs of the Android framework, which allows
   for the use of test doubles.
   **Instrumented tests** are located at
   ``$module-name``\ ``/src/``\ **``androidTest``**\ ``/java/``. These tests run
   on a hardware device or emulator. They have access to
   `Instrumentation <#/reference/android/app/Instrumentation>`__ APIs that
   give you access to information, such as the
   `Context <#/reference/android/content/Context>`__ class, on the app you
   are testing, and let you control the app under test from your test code.
   Instrumented tests are built into a separate APK, so they have their own
   `AndroidManifest.xml <#/guide/topics/manifest/manifest-intro>`__ file.
   This file is generated automatically, but you can create your own version at
   ``$module-name``\ ``/src/``\ **``androidTest``**\ ``/AndroidManifest.xml``,
   which will be merged with the generated manifest. Use instrumented tests when
   writing integration and functional UI tests to automate user interaction, or
   when your tests have Android dependencies that you can’t create test doubles
   for. For more information on how to write instrumented tests, see 
   `Build instrumented tests <#/training/testing/instrumented-tests>`__ and 
   `Automate UI tests <#/training/testing/instrumented-tests/ui-tests>`__.

   You can place your tests in build variant specific directories to test only
   specific build variants. For example, you could place some local unit tests
   in ``$module-name``\ ``/src/``\ **``testMyFlavor``**\ ``/java/`` so the tests
   target your app built with this flavor’s source code. For more information on
   how to create these tailored tests, see `Create an instrumented test for a build variant <#/studio/test/advanced-test-setup#create-instrumented-test-for-build-variant>`__.

   When you create a new project or add an app module, Android Studio creates
   the test source sets listed earlier and includes an example test file in
   each. You can see them in the **Project** window as shown in figure 2.

   |image-project-window-tests_2-2_2x|

   **Figure 2.** Your project's **(1)** instrumented tests and **(2)** local JVM
   tests are visible in either the **Project** view (left) or **Android** view
   (right).

   .. rubric:: Create new tests
      :name: create-new-tests

   You can add a new test for a specific class or method directly from its
   source code by following these steps:

   #. Open the source file that contains the code you want to test.
   #. Put your cursor in the name of the class or method you want to test, and
      press Control+Shift+T (Command+Shift+T on macOS).
   #. In the popup that appears, click **Create New Test…**
   #. In the **Create Test** dialog, choose **JUnit4**, edit the fields and
      methods you want to generate, and then click **OK**.
   #. In the **Choose Destination Directory** dialog, click the source set
      corresponding to the type of test you want to create: **androidTest** for
      an instrumented test or **test** for a local unit test. Then click **OK**.

   Alternatively, you can create a generic test file in the appropriate test
   source set as follows:

   #. In the **Project** window on the left, click the drop-down menu and select
      the **Android** view.
   #. Right click on the **java** directory and select **New > Java Class** or
      **New > Kotlin Class/File**. Alternatively, you can select the **java**
      directory and use the Control+N (Command+N on macOS) shortcut.
   #. In the **Choose Destination Directory** dialog, click the source set
      corresponding to the type of test you want to create: **androidTest** for
      an instrumented test or **test** for a local unit test. Then click **OK**.
   #. Name the file and then click **OK**.

   If your app doesn't compile after adding a test, make sure you have the right
   test library dependencies set up. See `Build local tests <#/training/testing/local-tests#dependencies>`__ and `Build instrumented tests <#/training/testing/unit-testing/instrumented-unit-tests#setup>`__ for
   the correct dependencies.

   .. rubric:: Run tests
      :name: run-tests

   Before running any tests, make sure your project is fully synchronized with
   Gradle by clicking **Sync Project** |image-toolbar-sync-gradle| in the toolbar. You can run
   tests with different levels of granularity:

   -  To **run all tests in a directory or file**, open the Project window and
      do either of the following:

      -  Right-click on a directory or file and click **Run** |image-toolbar-run|.
      -  Select the directory or file and use shortcut Control+Shift+R.

   -  To **run all tests in a class or a specific method**, open the test file
      in the Code Editor and do either of the following:

      -  Press the **Run test** icon |image-run-test-icon| in the
         `gutter <https://www.jetbrains.com/help/idea/settings-gutter-icons.html>`__.
      -  Right-click on the test class or method and click **Run** |image-toolbar-run|.
      -  Select the test class or method and use shortcut Control+Shift+R.

   Your instrumented tests will run on a physical device or emulator. To learn
   more about setting up physical devices, see `Run apps on a hardware device <#/studio/run/device>`__. To learn more about setting up emulators, see
   `Run apps on the Android Emulator <#/studio/run/emulator>`__.

   .. rubric:: Configure the test run
      :name: configure-the-test-run

   By default, your tests run using Android Studio’s default run configuration.
   If you need to change some run settings such as the instrumentation runner
   and deployment options, you can edit the run configuration in the **Run/Debug
   Configurations** dialog (click **Run > Edit Configurations**).

   .. rubric:: Unified Gradle test runner
      :name: bumblebee-unified-test-runner

   Android Gradle plugin 7.1.0 and Android Studio Bumblebee and higher use
   Gradle’s own implementation of the Android instrumented test runner to run
   instrumented tests. By using the same test runner, results are likely to be
   consistent whether you run using AGP from the command line, such as on a
   continuous integration server, or from Android Studio.

   |image-consolidated-test-runner|

   **Figure 3.** The Unified Gradle test runner.

   Previous versions of Android Studio use the IntelliJ Android instrumented
   test runner instead of Gradle's Android instrumented test runner. So if
   you're not using the latest version of Android Studio, depending on whether
   you run your tests from Android Studio or from the command line using the
   Gradle plugin, you might see different test results, such as tests passing
   using one runner and failing on another.

   |image-no-consolidated-test-runner|

   **Figure 4.** Discrete test runners in older versions of Android Studio.

   If you already have instrumented test configurations saved to your project,
   they’ll use Gradle to run tests on your connected device. You can create a
   new instrumented test configuration using the gutter action next to your test
   class or method, as shown below.

   |image-run-test-from-gutter|

   **Figure 5.** Run tests from gutter action.

   When running your instrumented tests, you can confirm that Android Studio is
   using the Gradle test runner by inspecting the test output in the Test Matrix
   for Gradle task output.

   .. rubric:: Run across multiple devices in parallel
      :name: run-multiple-devices-parallel

   Instrumented tests by default run on one physical device or emulator. If you
   want to see how your tests behave on a larger set of devices, you can select
   more devices by following these steps:

   #. Before running your tests, open the **target device drop-down** menu, and
      select **Select Multiple Devices…**.

      |image-select-multiple-devices|

      **Figure 6.** Select Multiple Devices drop-down menu.

   #. Select the desired devices and click **OK**.

   #. Make sure the text on the target drop-down menu is changed to **Multiple
      Devices** and click **Run** |image-toolbar-run|.

   #. The Test Matrix tool window shows the test results for each selected
      device configuration.

      |image-test-matrix-test-results|

      **Figure 7.** Test results in the Test Matrix tool window.

   #. You can click on a specific test to inspect the result in the output pane.
      You can also sort the tests by clicking the various columns.

   .. rubric:: Run with Firebase Test Lab
      :name: run-with-firebase-test-lab

   Using `Firebase Test Lab <https://firebase.google.cn/docs/test-lab/>`__, you
   can simultaneously test your app on many popular Android devices and device
   configurations (different combinations of locale, orientation, screen size,
   and platform version). These tests run on physical and virtual devices in
   remote Google data centers. Test results provide test logs and include the
   details of any app failures.

   To start using Firebase Test Lab, you need to do the following:

   #. `Create a Google account <https://accounts.google.com/>`__, if you don't
      have one already.
   #. In the `Firebase console <https://console.firebase.google.com/>`__, click
      **Create New Project**.

   **Note:**\  For information on Firebase Test Lab usage and associated costs
   (if any), see `Usage levels, quotas, and pricing for Test Lab <https://firebase.google.cn/docs/test-lab/usage-quotas-pricing>`__.
   Android Studio provides integrated tools that allow you to configure how you
   want to deploy your tests to Firebase Test Lab. After you have created a
   Firebase project, you can create a test configuration and run your tests:

   #. Click **Run** > **Edit Configurations** from the main menu.
   #. Click **Add New Configuration** |image-add-sign-icon| and select **Android
      Instrumented Tests**.
   #. Enter or select the details of your test, such as the test name, module
      type, test type, and test class.
   #. From the **Target** drop-down menu under **Deployment Target Options**,
      select **Firebase Test Lab Device Matrix**.
   #. If you are not logged in, click **Sign in with Google** and allow Android
      Studio to access your account.
   #. Next to **Cloud Project**, select your Firebase project from the list.
   #. Next to **Matrix configuration**, select one of the default configurations
      from the drop-down or create your own by pressing **Open Dialog**
      |image-open-dialog-icon|. You can select one or more devices, Android versions, locales
      and screen orientations that you want to test your app with. Firebase Test
      Lab will test your app against every combination of your selections when
      generating test results.
   #. Click **OK** in the **Run/Debug Configurations** dialog to exit.
   #. Run your tests by clicking **Run** |image-toolbar-run|.

   |image-firebase-run-debug-configurations|

   **Figure 8.** Creating a test configuration for Firebase Test Lab.

   .. rubric:: Analyze test results
      :name: analyze-test-results

   When Firebase Test Lab completes running your tests, the **Run** window will
   open to show the results, as shown in figure 9. You may need to click **Show
   Passed** |image-show-passed-check-icon| to see all your executed tests.

   |image-firebase-instrumented-test-results|

   **Figure 9.** The results of instrumented tests using Firebase Test Lab.

   You can also analyze your tests on the web by following the link displayed at
   the beginning of the test execution log in the **Run** window.

   .. rubric:: View test coverage
      :name: view_test_coverage

   The test coverage tool is available for local unit tests to track the
   percentage and areas of your app code that your unit tests have covered. Use
   the test coverage tool to determine whether you have adequately tested the
   elements, classes, methods, and lines of code that make up your app.

   To run tests with coverage, follow the same steps as described in 
   `Run tests <#run-tests>`__, only instead of clicking **Run** |image-toolbar-run|, click
   **Run test-name with coverage** |image-run-test-with-%0Acoverage-icon|. In the **Project** window, this
   option might be hidden behind **More Run/Debug**. You can also configure the
   coverage settings in the **Run/Debug Configurations** dialog, under the
   **Code Coverage** tab.

   |image-code-coverage-percentages|

   **Figure 10.** Code coverage percentages for an application.

   .. rubric:: View test results
      :name: view_test_results

   When you run one or more tests from Android Studio, the results appear in the
   **Run** window. Figure 11 shows a successful test run.

   |image-run-window-test-results|

   **Figure 11.** Test results appear in the Run window.

   The **Run** window displays the tests in a tree view on the left, and the
   results and messages for the current test suite in the output pane on the
   right. Use the toolbars, context menus, and status icons to manage the test
   results, as follows:

   #. Use the **run toolbar** to rerun the current test, stop the current test,
      rerun failed tests (not shown because it is available for unit tests
      only), pause output, and dump threads.
   #. Use the **testing toolbar** to filter and sort test results. You can also
      expand or collapse nodes, show test coverage, and import or export test
      results.
   #. Click the **context menu** to track the running test, show inline
      statistics, scroll to the stack trace, open the source code at an
      exception, auto scroll to the source, and select the first failed test
      when the test run completes.
   #. **Test status icons** indicate whether a test has an error, was ignored,
      failed, is in progress, has passed, is paused, was terminated, or was not
      run.
   #. Right-click a line in the tree view to display a context menu that lets
      you run the tests in debug mode, open the test source code file, or jump
      to the line in the source code being tested.

   .. rubric:: Analyze test failures
      :name: analyze-test-failures

   When one or more of your tests fails, the results window shows a warning sign
   and the number of failures (for example, "Tests failed: 1"):

   |image-failed-test|

   **Figure 12.** Failed test details in the output pane.

   When you click the failing test in the tree view on the left, the output pane
   on the right shows the details of that test. It shows the expected value next
   to the actual value, so you can compare them. The **Click to see difference**
   link opens a diff viewer where you can see the results side by side.

   .. rubric:: Learn more
      :name: learn-more

   This page covers the basic steps to follow when creating and running your
   first test using Android Studio. You can also choose to `run tests from the command line <#/studio/test/command-line>`__. You can also check out the
   `IntelliJ documentation on testing <https://www.jetbrains.com/help/idea/testing.html>`__. For more
   information on how to configure your tests when creating a larger test suite,
   see `Advanced test setup <#/studio/test/advanced-test-setup>`__.

Last updated 2024-03-14 UTC.

.. |image-test-results-in-android-studio| image:: https://developer.android.google.cn/static/studio/images/test/test-results-in-android-studio.png
.. |image-project-window-tests_2-2_2x| image:: https://developer.android.google.cn/static/studio/images/test/project-window-tests_2-2_2x.png
   :width: 827px
.. |image-toolbar-sync-gradle| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-sync-gradle.png
   :class: inline-icon
.. |image-toolbar-run| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-run.png
   :class: inline-icon
.. |image-run-test-icon| image:: https://developer.android.google.cn/static/studio/images/buttons/run-test-icon.png
   :class: inline-icon
.. |image-toolbar-run| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-run.png
   :class: inline-icon
.. |image-consolidated-test-runner| image:: https://developer.android.google.cn/static/studio/images/test/consolidated-test-runner.png
.. |image-no-consolidated-test-runner| image:: https://developer.android.google.cn/static/studio/images/test/no-consolidated-test-runner.png
.. |image-run-test-from-gutter| image:: https://developer.android.google.cn/static/studio/images/test/run-test-from-gutter.png
.. |image-select-multiple-devices| image:: https://developer.android.google.cn/static/studio/images/test/select-multiple-devices.png
.. |image-toolbar-run| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-run.png
   :class: inline-icon
.. |image-test-matrix-test-results| image:: https://developer.android.google.cn/static/studio/images/test/test-matrix-test-results.png
.. |image-add-sign-icon| image:: https://developer.android.google.cn/static/studio/images/buttons/add-sign-icon.png
   :class: inline-icon
.. |image-open-dialog-icon| image:: https://developer.android.google.cn/static/studio/images/buttons/open-dialog-icon.png
   :class: inline-icon
.. |image-toolbar-run| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-run.png
   :class: inline-icon
.. |image-firebase-run-debug-configurations| image:: https://developer.android.google.cn/static/studio/images/test/firebase-run-debug-configurations.png
.. |image-show-passed-check-icon| image:: https://developer.android.google.cn/static/studio/images/buttons/show-passed-check-icon.png
   :class: inline-icon
.. |image-firebase-instrumented-test-results| image:: https://developer.android.google.cn/static/studio/images/test/firebase-instrumented-test-results.png
.. |image-toolbar-run| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-run.png
   :class: inline-icon
.. |image-run-test-with-%0Acoverage-icon| image:: https://developer.android.google.cn/static/studio/images/buttons/run-test-with-%0Acoverage-icon.png
   :class: inline-icon
.. |image-code-coverage-percentages| image:: https://developer.android.google.cn/static/studio/images/test/code-coverage-percentages.png
.. |image-run-window-test-results| image:: https://developer.android.google.cn/static/studio/images/test/run-window-test-results.png
.. |image-failed-test| image:: https://developer.android.google.cn/static/studio/images/test/failed-test.png

/Test with Gradle Managed Devices
=================================

.. https://developer.android.google.cn/studio/test/gradle-managed-devices?hl=en

.. container:: devsite-article-body clearfix

   Gradle-managed devices improve consistency, performance, and reliability for
   your automated instrumented tests. This feature, available for API levels 27
   and higher, lets you configure virtual or remote physical test devices in
   your project's Gradle files. The build system uses the configurations to
   fully manage—that is, create, deploy, and tear down—those devices when
   executing your automated tests.

   This feature grants Gradle visibility into not only the tests you're running,
   but also the lifecycle of the devices, thus improving the quality of your
   testing experience in the following ways:

   -  Handles device-related issues in order to ensure your tests are executed
   -  For virtual devices, uses emulator snapshots to improve device startup
      time and memory usage and restore devices to a clean state between tests
   -  Caches test results and reruns only tests that are likely to provide
      different results
   -  Provides a consistent environment for running your tests between local and
      remote test runs

   .. rubric:: Create a virtual Gradle-managed device
      :name: create-device

   You can specify a virtual device that you want Gradle to use for testing your
   app in your module-level build file. The following code sample creates a
   Pixel 2 running API level 30 as a Gradle-managed device.

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kts
               :class: two-line-tab

            .. code:: prettyprint

               android {
                 testOptions {
                   managedDevices {
                     localDevices {
                       create("pixel2api30") {
                         // Use device profiles you typically see in Android Studio.
                         device = "Pixel 2"
                         // Use only API levels 27 and higher.
                         apiLevel = 30
                         // To include Google services, use "google".
                         systemImageSource = "aosp"
                       }
                     }
                   }
                 }
               }

         .. container:: section

            .. rubric:: Groovy
               :name: groovy
               :class: two-line-tab

            .. code:: prettyprint

               android {
                 testOptions {
                   managedDevices {
                     localDevices {
                       pixel2api30 {
                         // Use device profiles you typically see in Android Studio.
                         device = "Pixel 2"
                         // Use only API levels 27 and higher.
                         apiLevel = 30
                         // To include Google services, use "google".
                         systemImageSource = "aosp"
                       }
                     }
                   }
                 }
               }

   **Tip:**\  If you're using Android Studio to edit you build configuration,
   you can see available devices and their compatible API levels as autocomplete
   suggestions.

   .. rubric:: Define groups of devices
      :name: define-groups

   To help you scale your tests across multiple device configurations, such as
   different API levels and form factors, you can define multiple Gradle-managed
   devices and add them to a named group. Gradle can then execute your tests
   across all the devices in the group in parallel.

   The example below shows two devices added to a device group called
   ``phoneAndTablet``.

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kts
               :class: two-line-tab

            .. code:: prettyprint

               testOptions {
                 managedDevices {
                   localDevices {
                     create("pixel2api29") { ... }
                     create("nexus9api30") { ... }
                   }
                   groups {
                     create("phoneAndTablet") {
                       targetDevices.add(devices["pixel2api29"])
                       targetDevices.add(devices["nexus9api30"])
                     }
                   }
                 }
               }

         .. container:: section

            .. rubric:: Groovy
               :name: groovy
               :class: two-line-tab

            .. code:: prettyprint

               testOptions {
                 managedDevices {
                   localDevices {
                     pixel2api29 { ... }
                     nexus9api30 { ... }
                   }
                   groups {
                     phoneAndTablet {
                       targetDevices.add(devices.pixel2api29)
                       targetDevices.add(devices.nexus9api30)
                     }
                   }
                 }
               }

   .. rubric:: Run your tests
      :name: run-tests

   To run your tests using the Gradle-managed devices you configured, use the
   following command. ``device-name`` is the name of the device you configured
   in your Gradle build script (such as ``pixel2api30``), and ``BuildVariant``
   is the build variant of your app you want to test.

   On Windows:

   .. code:: devsite-terminal

      gradlew device-nameBuildVariantAndroidTest

   On Linux or macOS:

   .. code:: devsite-terminal

      ./gradlew device-nameBuildVariantAndroidTest

   To run your tests on a `group <#define-groups>`__ of Gradle-managed devices,
   use the following commands.

   On Windows:

   .. code:: devsite-terminal

      gradlew group-nameGroupBuildVariantAndroidTest

   On Linux or macOS:

   .. code:: devsite-terminal

      ./gradlew group-nameGroupBuildVariantAndroidTest

   The test output includes a path to an HTML file that has the test report. You
   can also import test results into Android Studio for further analysis by
   clicking **Run > Test History** in the IDE.

   **Note:**\  When using Gradle-managed devices on servers that don't support
   hardware rendering, such as GitHub Actions, you need to specify the following
   flag:
   ``-Pandroid.testoptions.manageddevices.emulator.gpu=swiftshader_indirect``.
   If you use PowerShell, you have to surround the flag with quotes.

   .. rubric:: Enable test sharding
      :name: test-sharding

   Gradle-managed devices support test sharding, which lets you split your test
   suite across a number of identical virtual device instances, called *shards*,
   that run in parallel. Using test sharding can help reduce overall test
   execution time at the cost of additional computational resources.

   To set the number of shards you want to use in a given test run, set the
   following in your ``gradle.properties`` file:

   .. code:: devsite-click-to-copy

      android.experimental.androidTest.numManagedDeviceShards=<number_of_shards>

   **Warning:**\  Depending on the number of shards you specify, enabling this
   feature can be resource intensive. If Gradle is unable to provision the
   devices requested, the test run might fail with a timeout error. If the issue
   persists, try requesting fewer devices by reducing either the number of
   unique devices or shards per device.
   When running your tests using this option, Gradle-managed devices provision
   the number of shards you specify for each device profile in the test run. So,
   for example, if you deployed your tests to a device group of three devices
   and set ``numManagedDeviceShards`` to two, Gradle-managed devices will
   provision a total of six virtual devices for your test run.

   When your tests are complete, Gradle outputs test results in a ``.proto``
   file for each shard used in the test run.

   .. rubric:: Use Automated Test Devices
      :name: gmd-atd

   Gradle-managed devices support a type of emulator device called the Automated
   Test Device (ATD), which is optimized to reduce CPU and memory resources when
   running your instrumented tests. ATDs improve runtime performance in a few
   ways:

   -  Remove pre-installed apps that are typically not useful for testing your
      app
   -  Disable certain background services that are typically not useful for
      testing your app
   -  Disable hardware rendering

   **Warning:**\  Screenshot tests that depend on hardware rendering currently
   aren't supported when using ATDs.
   Before getting started, make sure you `update the Android Emulator <#/studio/releases/emulator>`__ to the latest available version.
   Then, specify an "-atd" image when defining a Gradle-managed device in your
   module-level build file, as shown below:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kts
               :class: two-line-tab

            .. code:: prettyprint

               android {
                 testOptions {
                   managedDevices {
                     localDevices {
                       create("pixel2api30") {
                         // Use device profiles you typically see in Android Studio.
                         device = "Pixel 2"
                         // ATDs currently support only API level 30.
                         apiLevel = 30
                         // You can also specify "google-atd" if you require Google Play Services.
                         systemImageSource = "aosp-atd"
                       }
                     }
                   }
                 }
               }

         .. container:: section

            .. rubric:: Groovy
               :name: groovy
               :class: two-line-tab

            .. code:: prettyprint

               android {
                 testOptions {
                   managedDevices {
                     localDevices {
                       pixel2api30 {
                         // Use device profiles you typically see in Android Studio.
                         device = "Pixel 2"
                         // ATDs currently support only API level 30.
                         apiLevel = 30
                         // You can also specify "google-atd" if you require Google Play Services.
                         systemImageSource = "aosp-atd"
                       }
                     }
                   }
                 }
               }

   You can also `create device groups <#define-groups>`__ as you can with other
   Gradle-managed devices. To further leverage the performance improvements, you
   can also use ATDs with `test sharding <#test-sharding>`__ to reduce the total
   test execution time of your test suite.

   .. rubric:: What's removed from ATD images?
      :name: atd-optimizations

   In addition to operating in a headless mode, ATDs also optimize performance
   by removing or disabling apps and services that are typically not required
   for testing your app's code. The table below provides an overview of the
   components we've removed or disabled in ATD images and descriptions of why
   they might not be useful.

   .. list-table::
      :widths: 40 40
      :header-rows: 1

      - 

         - What's removed in ATD images
         - Why you might not need this when running automated tests
      - 

         - Google product apps:

            -  Mail
            -  Maps
            -  Chrome
            -  Messages
            -  Play Store, and others
         - Your automated tests should focus on your own app's logic while
            assuming that other apps or the platform will function correctly.
            With `Espresso-Intents <#/training/testing/espresso/intents>`__, you
            can match and validate your outgoing intents or even provide stub
            responses in place of actual intent responses.
      - 

         - Settings apps and services:

            -  CarrierConfig
            -  EmergencyInfo
            -  OneTimeInitializer
            -  PhotoTable (screensavers)
            -  Provision
            -  Settings app
            -  StorageManager
            -  Telephony APN Configuration
            -  WallpaperCropper
            -  WallpaperPicker
         - These apps present a GUI for end-users to change platform settings,
            set up their device, or manage device storage. This is typically
            outside the scope of app-level automated testing.
            | 
            | **Note:** `Settings provider <#/reference/android/provider/Settings>`__ is still
              available in the ATD image.
      - 

         - 
         - 
      - 

         - SystemUI
         - Your automated tests should focus on your own app's logic while
            assuming that other apps or the platform will function correctly.
      - 

         - AOSP apps and services:

            -  Browser2
            -  Calendar
            -  Camera2
            -  Contacts
            -  Dialer
            -  DeskClock
            -  Gallery2
            -  LatinIME
            -  Launcher3QuickStep
            -  Music
            -  QuickSearchBox
            -  SettingsIntelligence
         - These apps and services are typically outside the scope of automated
            tests for your app's code.

   .. rubric:: Use Firebase Test Lab devices
      :name: gmd-ftl

   You can run your automated instrumented tests at scale on `Firebase Test Lab <https://firebase.google.cn/docs/test-lab/>`__ devices when using
   Gradle-managed devices. Test Lab lets you run your tests simultaneously on a
   wide range of Android devices, both physical and virtual. These tests run in
   remote Google data centers. With support from Gradle-managed devices, the
   build system can fully manage running tests against these Test Lab devices
   based on your configurations.

   **Note:**\  For information about Firebase Test Lab usage and associated
   costs (if any), see `Usage levels, quotas, and pricing for Test Lab <https://firebase.google.cn/docs/test-lab/usage-quotas-pricing>`__.

   .. rubric:: Get started
      :name: start-ftl

   The following steps describe how to start using Firebase Test Lab devices
   with Gradle-managed devices. Note that these steps use the gcloud CLI to
   provide user credentials, which might not apply to all development
   environments. For more information about what authentication process to use
   for your needs, see `How Application Default Credentials works <https://cloud.google.com/docs/authentication/application-default-credentials>`__.

   #. To create a Firebase project, go to the `Firebase console <https://console.firebase.google.com/>`__. 
      Click **Add project**
      and follow the on-screen prompts to create a project. Remember your
      project ID.

      **Note:**\  Enabling Google Analytics is optional, and not needed to use
      Firebase Test Lab. Unless you plan to use one of the listed services that
      depend on Google Analytics, we recommend that you *not* enable Google
      Analytics when prompted in the project creation workflow.

   #. To install the Google Cloud CLI, follow the steps at `Install the gcloud CLI <https://cloud.google.com/sdk/docs/install>`__.

   #. Configure your local environment.

      #. Link to your Firebase project in gcloud:

         .. code:: devsite-terminal

            gcloud config set project FIREBASE_PROJECT_ID

      #. Authorize the use of your user credentials for API access. We recommend
         authorizing by passing a `service account JSON file <https://firebase.google.cn/docs/admin/setup#initialize_the_sdk_in_non-google_environments>`__
         to Gradle using the `DSL <#ftl-gmd-dsl>`__ in the module-level build
         script:

         .. container::

            .. container:: ds-selector-tabs

               .. container:: section

                  .. rubric:: Kotlin
                     :name: kts
                     :class: two-line-tab

                  .. code:: prettyprint

                     firebaseTestLab {
                       ...
                       serviceAccountCredentials.set(file(SERVICE_ACCOUNT_JSON_FILE))
                     }

               .. container:: section

                  .. rubric:: Groovy
                     :name: groovy
                     :class: two-line-tab

                  .. code:: prettyprint

                     firebaseTestLab {
                       ...
                       serviceAccountCredentials = file(SERVICE_ACCOUNT_JSON_FILE)
                     }

         Alternatively, you can authorize manually by using the following
         terminal command:

         .. code:: devsite-terminal

            gcloud auth application-default login

      #. Optional: Add your Firebase project as the quota project. This step is
         only needed if you exceed the `no-cost quota for Test Lab <https://firebase.google.cn/pricing#test-lab>`__.

         .. code:: devsite-terminal

            gcloud auth application-default set-quota-project FIREBASE_PROJECT_ID

         **Note:**\  To access quota beyond the no-cost threshold, your Firebase
         project must be on the `Blaze pricing plan <https://firebase.google.cn/docs/projects/billing/firebase-pricing-plans#switch-between-pricing-plans>`__.
         You can upgrade to the Blaze pricing plan in the Firebase console.

   #. Enable required APIs.

      In the `Google Developers Console API Library page <https://console.developers.google.com/apis/library>`__, enable the
      `Cloud Testing API <https://console.cloud.google.com/apis/library/testing.googleapis.com>`__
      and `Cloud Tool Results API <https://console.cloud.google.com/apis/library/toolresults.googleapis.com>`__
      by typing these API names into the search box at the top of the console,
      and then clicking **Enable API** on the overview page for each API.

   #. Configure your Android project.

      #. Add the Firebase Test Lab plugin in the top-level build script:

         .. container::

            .. container:: ds-selector-tabs

               .. container:: section

                  .. rubric:: Kotlin
                     :name: kts
                     :class: two-line-tab

                  .. code:: prettyprint

                     plugins {
                       ...
                       id("com.google.firebase.testlab") version "0.0.1-alpha05" apply false
                     }

               .. container:: section

                  .. rubric:: Groovy
                     :name: groovy
                     :class: two-line-tab

                  .. code:: prettyprint

                     plugins {
                       ...
                       id 'com.google.firebase.testlab' version '0.0.1-alpha05' apply false
                     }

      #. Enable custom device types in the ``gradle.properties`` file:

         .. code:: prettyprint

            android.experimental.testOptions.managedDevices.customDevice=true

      #. Add the Firebase Test Lab plugin in the module-level build script:

         .. container::

            .. container:: ds-selector-tabs

               .. container:: section

                  .. rubric:: Kotlin
                     :name: kts
                     :class: two-line-tab

                  .. code:: prettyprint

                     plugins {
                      ...
                      id "com.google.firebase.testlab"
                     }

               .. container:: section

                  .. rubric:: Groovy
                     :name: groovy
                     :class: two-line-tab

                  .. code:: prettyprint

                     plugins {
                      ...
                      id 'com.google.firebase.testlab'
                     }

   .. rubric:: Specify a Test Lab device
      :name: specify-ftl-device

   You can specify a Firebase Test Lab device for Gradle to use for testing your
   app in the module-level build script. The following code sample creates a
   Pixel 3 running API level 30 as a Gradle managed Test Lab device called
   ``ftlDevice``. The ``firebaseTestLab {}`` block is available when you apply
   the ``com.google.firebase.testlab`` plugin to your module.

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kts
               :class: two-line-tab

            .. code:: prettyprint

               firebaseTestLab {
                 managedDevices {
                   create("ftlDevice") {
                     device = "Pixel3"
                     apiLevel = 30
                   }
                 }
                 ...
               }

         .. container:: section

            .. rubric:: Groovy
               :name: groovy
               :class: two-line-tab

            .. code:: prettyprint

               firebaseTestLab {
                 managedDevices {
                   ftlDevice {
                     device = "Pixel3"
                     apiLevel = 30
                   }
                 }
                 ...
               }

   To define a group of Gradle-managed devices including Firebase Test Lab
   devices, see `Define groups of devices <#define-groups>`__.

   To run your tests, use the `same commands used to run other Gradle-managed devices <#run-tests>`__. Note that Gradle doesn't run tests in parallel or
   support other Google Cloud CLI configurations for Test Lab devices.

   .. rubric:: Optimize test runs with smart sharding
      :name: smart-sharding

   Testing on Gradle-managed Test Lab devices supports smart sharding. Smart
   sharding automatically distributes your tests across shards such that each
   shard runs for approximately the same time, reducing manual allocation
   efforts and overall test run duration. Smart sharding uses your test history,
   or information about how long your tests have taken to run previously, to
   distribute tests in an optimal way. Note that you need version 0.0.1-alpha05
   of the Gradle plugin for Firebase Test Lab to use smart sharding.

   To enable smart sharding, specify the amount of time tests within each shard
   should take. You should set the target shard time duration to at least five
   minutes less than ``timeoutMinutes`` to avoid the situation where shards are
   canceled before tests can finish.

   .. code:: prettyprint

      firebaseTestLab {
        ...
        testOptions {
          targetedShardDurationMinutes = 2
        }
      }

   To learn more, read about the `Firebase Test Lab device DSL options <#ftl-gmd-dsl>`__.

   .. rubric:: Updated DSL for Test Lab devices
      :name: ftl-gmd-dsl

   There are more DSL options you can configure to help customize your test runs
   or migrate from other solutions you may already be using. See some of these
   options as described in the following code snippet.

   .. code:: prettyprint

      firebaseTestLab {
        ...

        /**
         * A path to a JSON file that contains service account credentials to access to
         * a Firebase Test Lab project.
         */
        serviceAccountCredentials.set(file("your_service_account_credentials.json"))


        testOptions {
          fixture {
            /**
             * Whether to grant permissions on the device before tests begin.
             * Available options are "all" or "none".
             *
             * Default value is "all".
             */
            grantedPermissions = "all"

            /**
             * Map of files to push to the device before starting the test.
             *
             * The key is the location on the device.
             * The value is the location of the file, either local or in Google Cloud.
             */
            extraDeviceFiles["/sdcard/dir1/file1.txt"] = "local/file.txt"
            extraDeviceFiles["/sdcard/dir2/file2.txt"] = "gs://bucket/file.jpg"

            /**
             * The name of the network traffic profile.
             *
             * Specifies network conditions to emulate when running tests.
             *
             * Default value is empty.
             */
            networkProfile = "LTE"
          }

          execution {
            /**
             * The maximum time to run the test execution before cancellation,
             * measured in minutes. Does not include the setup or teardown of device,
             * and is handled server-side.
             *
             * The maximum possible testing time is 45 minutes on physical devices
             * and 60 minutes on virtual devices.
             *
             * Defaults to 15 minutes.
             */
             timeoutMinutes = 30

            /**
             * Number of times the test should be rerun if tests fail.
             * The number of times a test execution should be retried if one
             * or more of its test cases fail.
             *
             * The max number of times is 10.
             *
             * The default number of times is 0.
             */
            maxTestReruns = 2

            /**
             * Ensures only a single attempt is made for each execution if
             * an infrastructure issue occurs. This doesn't affect `maxTestReruns`.
             * Normally, two or more attempts are made by Firebase Test Lab if a
             * potential infrastructure issue is detected. This is best enabled for
             * latency sensitive workloads. The number of execution failures might be
             * significantly greater with `failFast` enabled.
             *
             * Defaults to false.
             */
            failFast = false

            /**
             * The number of shards to split the tests across.
             *
             * Default to 0 for no sharding.
             */
            numUniformShards = 20
          }

          /**
           * For smart sharding, the target length of time each shard should takes in
           * minutes. Maxes out at 50 shards for physical devices and 100 shards for
           * virtual devices.
           *
           * Only one of numUniformShards or targetedShardDurationMinutes can be set.
           *
           * Defaults to 0 for no smart sharding.
           */
           targetedShardDurationMinutes = 15
          }

          results {
            /**
             * The name of the Google storage bucket to store the test results in.
             *
             * If left unspecified, the default bucket is used.
             *
             * Please refer to Firebase Test Lab permissions for required permissions
             * for using the bucket.
             */
            cloudStorageBucket = "bucketLocationName"

            /**
             * Name of test results for the Firebase console history list.
             * All tests results with the same history name are grouped
             * together in the Firebase console in a time-ordered test history list.
             *
             * Defaults to the application label in the APK manifest in Flank/Fladle.
             */
            resultsHistoryName = "application-history"

            /**
             * List of paths to copy from the test device's storage to the test
             * results folder. These must be absolute paths under /sdcard or
             * /data/local/tmp.
             */
            directoriesToPull.addAll(
              "/sdcard/path/to/something"
            )

            /**
             * Whether to enable video recording during the test.
             *
             * Disabled by default.
             */
            recordVideo = false

            /**
             * Whether to enable performance metrics. If enabled, monitors and records
             * performance metrics such as CPU, memory, and network usage.
             *
             * Defaults to false.
             */
            performanceMetrics = true
        }
      }

Last updated 2023-11-30 UTC.

/Test against screen changes
============================

.. https://developer.android.google.cn/studio/test/espresso-api?hl=en

.. container:: devsite-article-body clearfix

   Use the Espresso Device API to test your app when the device undergoes common
   configuration changes, such as rotation and screen unfolding. The Espresso
   Device API lets you simulate these configuration changes on a virtual device
   and executes your tests synchronously, so only one UI action or assertion
   happens at a time and your test results are more reliable. If you're new to
   writing UI tests with Espresso, see its
   `documentation <#/training/testing/espresso>`__.

   To use the Espresso Device API, you need the following:

   -  Android Studio Iguana or higher
   -  Android Gradle plugin 8.3 or higher
   -  Android Emulator 33.1.10 or higher
   -  Android virtual device that runs API level 24 or higher

   .. rubric:: Set up your project for the Espresso Device API
      :name: set_up_your_project_for_the_espresso_device_api

   To set up your project so it supports the Espresso Device API, do the
   following:

   #. To let the test pass commands to the test device, add the ``INTERNET`` and
      ``ACCESS_NETWORK_STATE`` permissions to the manifest file in the
      ``androidTest`` source set:

      ::

           <uses-permission android:name="android.permission.INTERNET" />
           <uses-permission android:name="android.permissions.ACCESS_NETWORK_STATE" />
           

   #. Enable the ``enableEmulatorControl`` experimental flag in the
      ``gradle.properties`` file:

      ::

           android.experimental.androidTest.enableEmulatorControl=true
           

   #. Enable the ``emulatorControl`` option in the module-level build script:

      .. container::

         .. container:: ds-selector-tabs

            .. container:: section

               .. rubric:: Kotlin
                  :name: kts
                  :class: two-line-tab

               .. code:: prettyprint

                    testOptions {
                      emulatorControl {
                        enable = true
                      }
                    }
                    

            .. container:: section

               .. rubric:: Groovy
                  :name: groovy
                  :class: two-line-tab

               .. code:: prettyprint

                    testOptions {
                      emulatorControl {
                        enable = true
                      }
                    }
                    

   #. In the module-level build script, import the Espresso Device library into
      your project:

      .. container::

         .. container:: ds-selector-tabs

            .. container:: section

               .. rubric:: Kotlin
                  :name: kts
                  :class: two-line-tab

               .. code:: prettyprint

                    dependencies {
                      androidTestImplementation("androidx.test.espresso:espresso-device:3.5.1")
                    }
                    

            .. container:: section

               .. rubric:: Groovy
                  :name: groovy
                  :class: two-line-tab

               .. code:: prettyprint

                    dependencies {
                      androidTestImplementation 'androidx.test.espresso:espresso-device:3.5.1'
                    }
                    

   .. rubric:: Test against common configuration changes
      :name: test_against_common_configuration_changes

   The Espresso Device API has multiple screen orientation and foldable states
   that you can use to simulate device configuration changes.

   .. rubric:: Test against screen rotation
      :name: test_against_screen_rotation

   Here's an example of how to test what happens to your app when the device
   screen rotates:

   #. First, for a consistent starting state set the device to portrait mode:

      .. code:: prettyprint

           import androidx.test.espresso.device.action.ScreenOrientation
           import androidx.test.espresso.device.rules.ScreenOrientationRule
           ...
           @get:Rule
           val screenOrientationRule: ScreenOrientationRule = ScreenOrientationRule(ScreenOrientation.PORTRAIT)
           

   #. Create a test that sets the device to landscape orientation during test
      execution:

      .. code:: prettyprint

           @Test
           fun myRotationTest() {
             ...
             // Sets the device to landscape orientation during test execution.
             onDevice().setScreenOrientation(ScreenOrientation.LANDSCAPE)
             ...
           }
           

   #. After the screen rotates, check that the UI adapts to the new layout as
      expected.

      .. code:: prettyprint

           @Test
           fun myRotationTest() {
             ...
             // Sets the device to landscape orientation during test execution.
             onDevice().setScreenOrientation(ScreenOrientation.LANDSCAPE)
             composeTestRule.onNodeWithTag("NavRail").assertIsDisplayed()
             composeTestRule.onNodeWithTag("BottomBar").assertDoesNotExist()
           }
           

   .. rubric:: Test against screen unfolding
      :name: test_against_screen_unfolding

   Here's an example of how to test what happens to your app if it's on a
   foldable device and the screen unfolds:

   #. First, test with the device in the folded state by calling
      ``onDevice().setClosedMode()``. Make sure that your app's layout adapts to
      the compact screen width.

      .. code:: prettyprint

           @Test
           fun myUnfoldedTest() {
             onDevice().setClosedMode()
             composeTestRule.onNodeWithTag("BottomBar").assetIsDisplayed()
             composeTestRule.onNodeWithTag("NavRail").assetDoesNotExist()
             ...
           }
           

   #. To transition to a fully unfolded state, call
      ``onDevice().setFlatMode()``. Check that the app’s layout adapts to the
      expanded size class.

      .. code:: prettyprint

           @Test
           fun myUnfoldedTest() {
             onDevice().setClosedMode()
             ...
             onDevice().setFlatMode()
             composeTestRule.onNodeWithTag("NavRail").assertIsDisplayed()
             composeTestRule.onNodeWithTag("BottomBar").assetDoesNotExist()
           }
           

   .. rubric:: Specify what devices your tests need
      :name: specify_what_devices_your_tests_need

   If you're running a test that performs folding actions on a device that isn't
   foldable, the test will likely fail. To execute only the tests that are
   relevant to the running device, use the ``@RequiresDeviceMode`` annotation.
   The test runner automatically skips running tests on devices that don't
   support the configuration being tested. You can add the device requirement
   rule to each test or an entire test class.

   For example, to specify that a test should only be run on devices that
   support unfolding to a flat configuration, add the following
   ``@RequiresDeviceMode`` code to your test:

   .. code:: prettyprint

      @Test
      @RequiresDeviceMode(mode = FLAT)
      fun myUnfoldedTest() {
        ...
      }

Last updated 2024-05-03 UTC.

/Test from the command line
===========================

.. https://developer.android.google.cn/studio/test/command-line?hl=en

.. container:: devsite-article-body clearfix

   This document describes how to run tests directly from the command line. This
   document assumes that you already know how to create an Android app and write
   tests for your app. For more information on how to build tests for your app,
   see `Test apps on Android <#/training/testing>`__.

   When you build your app using the Gradle build system, the `Android Gradle plugin <#/tools/building/plugin-for-gradle>`__ lets you run tests from your
   Gradle project using the command line. For more fine-grained control, you can
   choose to run your tests through an `Android Debug Bridge (adb) <#/tools/help/adb>`__ shell. This can be useful when running tests in a
   `continuous integration <#/studio/projects/continuous-integration>`__
   environment.

   To learn how to run automated instrumented tests from the command line using
   virtual devices that Gradle manages for you, see `Scale your tests with Gradle Managed Devices <#/studio/test/gradle-managed-devices>`__.

   .. rubric:: Run tests with Gradle
      :name: run-tests-with-gradle

   The Android Gradle plugin lets you run tests from your Gradle project using
   the command line.

   The table below summarizes how to run your tests with Gradle:

   **Table 1.** Different ways to run your tests with Gradle

   .. list-table::
      :widths: 27 27 27
      :header-rows: 1

      - 

         - Unit test type
         - Command to run
         - Test result location
      - 

         - Local unit test
         - Run the ``test`` task:
            .. code:: prettyprint

               ./gradlew test
         - HTML test result files:
            ``path_to_your_project``\ ``/``\ ``module_name``\ ``/build/reports/tests/``
            directory.
            | XML test result files:
            | ``path_to_your_project``\ ``/``\ ``module_name``\ ``/build/test-results/``
              directory.
      - 

         - Instrumented unit test
         - Run the ``connectedAndroidTest`` task:
            .. code:: prettyprint

               ./gradlew connectedAndroidTest
         - HTML test result files:
            ``path_to_your_project``\ ``/``\ ``module_name``\ ``/build/reports/androidTests/connected/``
            directory.
            | XML test result files:
            | ``path_to_your_project``\ ``/``\ ``module_name``\ ``/build/outputs/androidTest-results/connected/``
              directory.

   Gradle supports `task name abbreviations <https://docs.gradle.org/current/userguide/command_line_interface.html#sec:name_abbreviation>`__.
   For example, you can initiate the ``connectedAndroidTest`` task by entering
   the following command:

   .. code:: prettyprint

      ./gradlew cAT

   You can also choose to run the Gradle tasks ``check`` and ``connectedCheck``.
   These tasks run your local or instrumented tests, respectively, but include
   other checks added by other Gradle plugins.

   .. rubric:: Run tests on a module
      :name: run-tests-module

   The ``test`` and ``connectedAndroidTest`` tasks run tests on each module in
   your project. You can run tests on a specific module by prefixing the
   ``test`` or ``connectedAndroidTest`` task with the module name and a colon
   (:). For example, the following command runs instrumented tests for just the
   ``mylibrary`` module:

   .. code:: prettyprint

      ./gradlew mylibrary:connectedAndroidTest

   .. rubric:: Run tests on a build variant
      :name: run-tests-build-variants

   The ``test`` and ``connectedAndroidTest`` tasks run tests on each `build variant <#/studio/build/build-variants>`__ in your project. You can target a
   specific build variant using the following syntax:

   -  For local unit tests:

      .. code:: prettyprint

         ./gradlew testVariantNameUnitTest

   -  For instrumented tests:

      .. code:: prettyprint

         ./gradlew connectedVariantNameAndroidTest

   **Note:**\  To further restrict the tests that run, target a specific build
   variant within a specific module. For example, use
   ``./gradlew``\ **``mylibrary``**\ ``:connected``\ **``VariantName``**\ ``UnitTest``
   to run all unit tests for the ``VariantName`` variant inside the
   ``mylibrary`` module.

   .. rubric:: Run specific test methods or classes
      :name: run-specific-test-methods-classes

   When running local unit tests, Gradle lets you target specific tests using
   the ``--tests`` flag. For example, the following command runs only the
   ``sampleTestMethod`` tests for the specified build variant. To learn more
   about using the ``--tests`` flag, read Gradle's documentation on `test filtering <https://docs.gradle.org/current/userguide/java_testing.html#test_filtering>`__.

   .. code:: prettyprint

      ./gradlew testVariantNameUnitTest --tests '*.sampleTestMethod'

   **Note:**\  To run specific test methods or classes for your instrumented
   tests, `run your tests with adb <#run-tests-with-adb>`__.

   .. rubric:: Run tests with adb
      :name: run-tests-with-adb

   When you run tests from the command line with `Android Debug Bridge (adb) <#/tools/help/adb>`__, there are more options for choosing the tests to
   run than with any other method. You can select individual test methods,
   filter tests according to a custom annotation, or specify testing options.
   Since the test run is controlled entirely from the command line, you can
   customize your testing with shell scripts in various ways.

   To run a test from the command line, run ``adb shell`` to start a
   command-line shell on your device or emulator. Inside that shell you can
   interact with the `activity manager <#/studio/command-line/adb#am>`__ using
   the ``am`` command and use its ``instrument`` subcommand to run your tests.

   As a shortcut, you can start an adb shell, call ``am instrument``, and
   specify command-line flags all on one input line. The shell opens on the
   device or emulator, runs your tests, produces output, and then returns to the
   command line on your computer.

   To run a test with ``am instrument``:

   #. `Build <#/studio/build/building-cmdline>`__ or rebuild your main
      application and test package.

   #. `Install <#/studio/command-line/adb#move>`__ your test package and main
      application Android package files (APK files) to your current Android
      device or emulator.

   #. At the command line, enter:

      .. code:: prettyprint

         adb shell am instrument -w <test_package_name>/<runner_class>

      Where ``<test_package_name>`` is the Android package name of your test
      application, and ``<runner_class>`` is the name of the Android test runner
      class you are using. The Android package name is the value of the manifest
      element's package attribute in your test package's manifest file
      (``AndroidManifest.xml``).

      The Android test runner class is usually
      `AndroidJUnitRunner <#/reference/androidx/test/runner/AndroidJUnitRunner>`__:

      .. code:: prettyprint

         adb shell am instrument -w com.android.example/androidx.test.runner.AndroidJUnitRunner

   Your test results appear in ``STDOUT``.

   .. rubric:: am instrument flags
      :name: am-instrument-flags

   To find a list of all the flags to use with the ``am instrument`` command,
   run ``adb shell am help``. Some important flags are described in the
   following table:

   **Table 2.** Important ``am instrument`` flags

   .. list-table::
      :header-rows: 1

      - 

         - Flag
         - Value
         - Description
      - 

         - ``-w``
         - (none)
         - Forces ``am instrument`` to wait until the instrumentation terminates
            before terminating itself. This keeps the shell open until the tests
            have finished. This flag is required to see the results of your
            tests.
      - 

         - ``-r``
         - (none)
         - Outputs results in raw format. Use this flag when you want to collect
            performance measurements so that they are not formatted as test
            results. This flag is designed for use with the flag
            ``-e perf true`` (documented in the `am instrument options <#am-instrument-options>`__) section.
      - 

         - ``-e``
         - ``<test_options>``
         - Provides testing options as key-value pairs. The ``am instrument``
            tool passes these to the specified instrumentation class using its
            `onCreate() <#/reference/android/test/InstrumentationTestRunner#onCreate(android.os.Bundle)>`__
            method. You can specify multiple occurrences of
            ``-e <test_options>``. The keys and values are described in the 
            `am instrument options <#am-instrument-options>`__ section. You can only
            use these key-value pairs with
            `AndroidJUnitRunner <#/reference/androidx/test/runner/AndroidJUnitRunner>`__
            or with
            `InstrumentationTestRunner <#/reference/android/test/InstrumentationTestRunner>`__
            and its subclasses. Using them with any other class has no effect.
      - 

         - ``--no-hidden-api-checks``
         - (none)
         - Disables restrictions on the use of hidden APIs. For more information
            on what hidden APIs are and how this can affect your app, read
            `Restrictions on non-SDK interfaces <#/guide/app-compatibility/restrictions-non-sdk-interfaces>`__.

   .. rubric:: am instrument options
      :name: am-instrument-options

   The ``am instrument`` tool passes testing options to ``AndroidJUnitRunner``
   or ``InstrumentationTestRunner`` in the form of key-value pairs, using the
   ``-e`` flag, with this syntax:

   .. code:: prettyprint

      -e <key> <value>

   Some keys accept multiple values. You specify multiple values in a
   comma-separated list. For example, this invocation of ``AndroidJUnitRunner``
   provides multiple values for the ``package`` key:

   .. code:: prettyprint

      adb shell am instrument -w -e package com.android.test.package1,com.android.test.package2 \
      > com.android.test/androidx.test.runner.AndroidJUnitRunner

   The following table lists the key-value pairs you can use with your test
   runner:

   **Table 3.** -e flag key-value pairs to use with your test runner

   .. list-table::
      :widths: 27 27 27
      :header-rows: 1

      - 

         - Key
         - Value
         - Description
      - 

         - ``package``
         - ``<Java_package_name>``
         - The fully qualified *Java* package name for one of the packages in
            the test application. Any test case class that uses this package
            name is executed. Notice that this is not an *Android* package name;
            a test package has a single Android package name but may have
            several Java packages within it.
      - 

         - ``class``
         - ``<class_name>``
         - The fully qualified Java class name for one of the test case classes.
            Only this test case class is executed.
      - 

         - 
         - ``<class_name>``\ **``#``**\ ``method name``
         - A fully qualified test case class name and one of its methods. Only
            this method is executed. Note the hash mark (#) between the class
            name and the method name.
      - 

         - ``func``
         - ``true``
         - Runs all test classes that extend
            `InstrumentationTestCase <#/reference/android/test/InstrumentationTestCase>`__.
      - 

         - ``unit``
         - ``true``
         - Runs all test classes that do *not* extend either
            ``InstrumentationTestCase`` or
            `PerformanceTestCase <#/reference/android/test/PerformanceTestCase>`__.
      - 

         - ``size``
         - [``small`` \| ``medium`` \| ``large``]
         - Runs a test method annotated by size. The annotations are
            ``@SmallTest``, ``@MediumTest``, and ``@LargeTest``.
      - 

         - ``perf``
         - ``true``
         - Runs all test classes that implement ``PerformanceTestCase``. When
            you use this option, specify the ``-r`` flag for ``am instrument``
            so that the output is kept in raw format and not reformatted as test
            results.
      - 

         - ``debug``
         - ``true``
         - Runs tests in debug mode.
      - 

         - ``log``
         - ``true``
         - Loads and logs all specified tests but doesn't run them. The test
            information appears in ``STDOUT``. Use this to verify combinations
            of other filters and test specifications.
      - 

         - ``emma``
         - ``true``
         - Runs an EMMA code coverage analysis and writes the output to
            ``/data/<app_package>/coverage.ec`` on the device. To override the
            file location, use the ``coverageFile`` key that is described in the
            following entry.
            **Note:** This option requires an EMMA-instrumented build of the
            test application, which you can generate with the ``coverage``
            target.
      - 

         - ``coverageFile``
         - ``<filename>``
         - Overrides the default location of the EMMA coverage file on the
            device. Specify this value as a path and filename in UNIX format.
            The default filename is described in the entry for the ``emma`` key.

   When using the ``-e`` flag, be aware of the following:

   -  ``am instrument`` invokes
      `onCreate(Bundle) <#/reference/android/test/InstrumentationTestRunner#onCreate(android.os.Bundle)>`__
      with a `Bundle <#/reference/android/os/Bundle>`__ containing the
      key-value pairs.
   -  The ``package`` key takes precedence over the ``class`` key. If you
      specify a package and then separately specify a class within that package,
      Android runs all the tests in the package and ignores the class key.
   -  The ``func`` key and ``unit`` key are mutually exclusive.

   .. rubric:: Usage examples
      :name: usage-examples

   The following sections provide examples of using ``am instrument`` to run
   tests. They are based on the following structure:

   -  The test package has the Android package name
      ``com.android.demo.app.tests``.
   -  Two instrumented test classes:

      -  ``TestClass1``, which contains the test method ``testMethod1``.
      -  ``TestClass2``, which contains test methods ``testMethod2`` and
         ``testMethod3``.

   -  The test runner is
      `AndroidJUnitRunner <#/reference/androidx/test/runner/AndroidJUnitRunner>`__.

   .. rubric:: Run the entire test package
      :name: run-entire-test-package

   To run all of the test classes in the test package, enter:

   .. code:: prettyprint

      adb shell am instrument -w com.android.demo.app.tests/androidx.test.runner.AndroidJUnitRunner

   .. rubric:: Run all tests in a test case class
      :name: run-all-tests-in-test-case-class

   To run all of the tests in the class ``TestClass1``, enter:

   .. code:: prettyprint

      adb shell am instrument -w  \
      > -e class com.android.demo.app.tests.TestClass1 \
      > com.android.demo.app.tests/androidx.test.runner.AndroidJUnitRunner

   .. rubric:: Select a subset of tests
      :name: select-subset-tests

   To run all of the tests in the ``TestClass1`` class and the ``testMethod3``
   method in ``TestClass2``, enter:

   .. code:: prettyprint

      adb shell am instrument -w \
      > -e class com.android.demo.app.tests.TestClass1,com.android.demo.app.tests.TestClass2#testMethod3 \
      > com.android.demo.app.tests/androidx.test.runner.AndroidJUnitRunner

   You can find more use cases in the
   `AndroidJUnitRunner <https://developer.android.google.cn/reference/androidx/test/runner/AndroidJUnitRunner#execution-options:>`__
   API reference.

Last updated 2024-04-03 UTC.

/Set up advanced test configurations
====================================

.. https://developer.android.google.cn/studio/test/advanced-test-setup?hl=en

.. container:: devsite-article-body clearfix

   `Test in Android Studio <#/studio/test/test-in-android-studio>`__ and `Test from the command line <#/studio/test/command-line>`__ explain how to set up
   and run basic test configurations. However, when your app and its test
   requirements get more advanced, you may need to adapt your test
   configurations further. For example, you might need advanced test setup when
   you want to do the following:

   -  Run instrumented tests only for a specific build variant or override its
      manifest settings.
   -  Change the build type your tests run against or configure its Gradle
      options.
   -  Extract your instrumented tests into their own test module.
   -  Perform more advanced testing as part of your Continuous Integration
      setup.

   This page describes various ways to configure your tests when the default
   settings don't fit your needs.

   .. rubric:: Create an instrumented test for a build variant
      :name: create-instrumented-test-for-build-variant

   If your project includes `build variants <#/studio/build/build-variants>`__
   with unique source sets, you might want to include instrumented tests that
   correspond to those source sets. This keeps your test code organized and lets
   you run only the tests that apply to a given build variant.

   To link instrumented tests to a build variant, place them in their own source
   set, located at ``src/androidTest``\ ``VariantName``.

   Instrumented tests in the ``src/androidTest/`` source set are shared by all
   build variants. When building a test APK for the "MyFlavor" variant of your
   app, Gradle combines the ``src/androidTest/`` and
   ``src/androidTestMyFlavor/`` source sets.

   To add a testing source set for your build variant in Android Studio, follow
   these steps:

   #. In the **Project** window, click the menu and select the **Project** view.
   #. Within the appropriate module folder, right-click the **src** folder and
      click **New > Directory**.
   #. For the directory name, enter "androidTest\ *VariantName*." For example,
      if you have a build variant called "MyFlavor," use the directory name
      ``androidTestMyFlavor``.
   #. Click **OK**.
   #. Right-click the new directory and select **New > Directory**.
   #. Enter "java" as the directory name, then click **OK**.

   Now you can add tests to this new source set by following the `steps to add a new test <#/studio/test/test-in-android-studio#create-new-tests>`__. When you
   reach the **Choose Destination Directory** dialog, select the new variant
   test source set.

   The following table shows an example of how instrumentation test files could
   reside in source sets that correspond to the app's code source sets:

   **Table 1.** App source code and corresponding instrumentation test files

   .. list-table::
      :header-rows: 1

      - 

         - Path to app class
         - Path to matching instrumentation test class
      - 

         - ``src/main/java/Example.java``
         - ``src/androidTest/java/AndroidExampleTest.java``
      - 

         - ``src/myFlavor/java/Example.java``
         - ``src/androidTestMyFlavor/java/AndroidExampleTest.java``

   Just as it does for your app source sets, the Gradle build merges and
   overrides files from different test source sets. In this case, the
   ``AndroidExampleTest.java`` file in the ``androidTestMyFlavor`` source set
   overrides the version in the ``androidTest`` source set. This is because the
   product flavor source set has priority over the main source set.

   When you select different flavors in the build variants selector, the
   appropriate ``androidTest`` folders are displayed in the **Android** view to
   show the folders that are used:

   .. figure::
      https://developer.android.google.cn/static/studio/images/test/test-myflavor-android-test-android-view.png
      :alt: MyFlavor variant selected and androidTestMyFlavor folder is shown in
      Android view
      :width: 431px

      **Figure 1.** ``MyFlavor`` variant selected; the ``androidTestMyFlavor``
      folder displays in the **Android** view.

   The ``androidTestMyFlavor`` folder is not shown when a different variant is
   selected:

   .. figure::
      https://developer.android.google.cn/static/studio/images/test/test-otherflavor-android-test-android-view.png
      :alt: OtherFlavor variant selected and androidTestMyFlavor folder is not
      shown in Android view
      :width: 431px

      **Figure 2.** ``OtherFlavor`` variant selected; the
      ``androidTestMyFlavor`` folder does not show in the **Android** view.

   This looks slightly different if you are using the **Project** view, but the
   same principle applies:

   .. figure::
      https://developer.android.google.cn/static/studio/images/test/test-myflavor-android-test-project-view.png
      :alt: MyFlavor variant selected and androidTestMyFlavor folder is active
      in Project view
      :width: 431px

      **Figure 3.** ``MyFlavor`` variant selected; the ``androidTestMyFlavor``
      folder is active in the **Project** view.

   When a different variant is selected, the ``androidTestMyFlavor`` folder is
   still visible, but it is not shown as active:

   .. figure::
      https://developer.android.google.cn/static/studio/images/test/test-otherflavor-android-test-project-view.png
      :alt: OtherFlavor variant selected and androidTestMyFlavor folder is not
      active in Project view
      :width: 431px

      **Figure 4.** ``OtherFlavor`` variant selected; the
      ``androidTestMyFlavor`` folder is not active in the **Project** view.

   For more information about how source sets are merged, see `Source sets <#/studio/build#sourcesets>`__.

   .. rubric:: Configure instrumentation manifest settings
      :name: configure-instrumentation-manifest-settings

   Instrumented tests are built into a separate APK with its own
   ``AndroidManifest.xml`` file. When Gradle builds your test APK, it
   automatically generates the ``AndroidManifest.xml`` file and configures it
   with the
   `<instrumentation> <#/guide/topics/manifest/instrumentation-element>`__
   node. One of the reasons Gradle configures this node for you is to make sure
   that the
   `targetPackage <#/guide/topics/manifest/instrumentation-element#trgt>`__
   property specifies the correct package name of the app under test.

   To change other settings for this node, either create another manifest file
   in the test source set or configure your module-level ``build.gradle`` file,
   as shown in the following code sample. The full list of options can be found
   in the
   `BaseFlavor <#/reference/tools/gradle-api/7.1/com/android/build/api/dsl/BaseFlavor>`__
   API reference.

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Groovy
               :name: groovy

            .. code:: prettyprint

               android {
                   ...
                   defaultConfig {
                       ...
                       testApplicationId "com.example.test"
                       testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                       testHandleProfiling true
                       testFunctionalTest true
                   }
               }

         .. container:: section

            .. rubric:: Kotlin
               :name: kts

            .. code:: prettyprint

               android {
                   ...
                   defaultConfig {
                       ...
                       testApplicationId = "com.example.test"
                       testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
                       testHandleProfiling = true
                       testFunctionalTest = true
                   }
               }

   .. container:: section

      Each product flavor you configure can override properties in the
      defaultConfig {} block. To learn more, go to Configure product
      flavors.

      The properties in the snippet are:

   .. list-table::

      -
         - Setting
         - Description
      -
         - ``testApplicationId``
         - Specifies the `application ID <#/studio/build/configure-app-module#set-application-id>`__ for the test APK.
      -
         - ``testInstrumentationRunner``
         - Specifies the fully qualified class name of the test instrumentation runner.
      -
         - ``testHandleProfiling``
         - If set to ``true``, enables the instrumentation class to start and stop
           profiling.
           If set to ``false``, profiling occurs the entire time the instrumentation
           class is running.
      -
         - ``testFunctionalTest``
         - If set to ``true``, indicates that the Android system should run the
           instrumentation class as a functional test.
           The default value is ``false``.


Change the test build type
--------------------------

By default, all instrumentation tests run against the ``debug`` build type. You
can change this to another build type by using the ``testBuildType`` property in
your module-level ``build.gradle`` file. For example, if you want to run your
tests against your ``staging`` build type, edit the file as shown in the
following snippet:

.. container::

   .. container:: ds-selector-tabs

      .. container:: section

         .. rubric:: Groovy
            :name: groovy

         .. code:: prettyprint

            android {
                ...
                testBuildType "staging"
            }

      .. container:: section

         .. rubric:: Kotlin
            :name: kts

         .. code:: prettyprint

            android {
                ...
                testBuildType = "staging"
            }

Configure Gradle test options
-----------------------------

The `Android Gradle plugin <#/studio/releases/gradle-plugin>`__ lets you specify
certain options for all or just some of your tests. In the module-level
``build.gradle`` file, use the
`testOptions <#/reference/tools/gradle-api/7.0/com/android/build/api/dsl/TestOptions>`__
block to specify options that change how Gradle runs all your tests:

.. container::

   .. container:: ds-selector-tabs

      .. container:: section

         .. rubric:: Groovy
            :name: groovy

         .. code:: prettyprint

            android {
                ...
                // Encapsulates options for running tests.
                testOptions {
                    reportDir "$rootDir/test-reports"
                    resultsDir "$rootDir/test-results"
                }
            }

      .. container:: section

         .. rubric:: Kotlin
            :name: kts

         .. code:: prettyprint

            android {
                ...
                // Encapsulates options for running tests.
                testOptions {
                    reportDir "$rootDir/test-reports"
                    resultsDir = "$rootDir/test-results"
                }
            }

The ``reportDir`` property changes the directory where Gradle saves test
reports. By default, Gradle saves test reports in the
``path_to_your_project``\ ``/``\ ``module_name``\ ``/build/outputs/reports/``
directory. ``$rootDir`` sets the path relative to the root directory of the
current project.

The ``resultsDir`` property changes the directory where Gradle saves test
results. By default, Gradle saves test results in the
``path_to_your_project``\ ``/``\ ``module_name``\ ``/build/outputs/test-results/``
directory. ``$rootDir`` sets the path relative to the root directory of the
current project.

To specify options for only local unit tests, configure the
`unitTests <#/reference/tools/gradle-api/7.0/com/android/build/api/dsl/UnitTestOptions>`__
block inside ``testOptions``.

.. container::

   .. container:: ds-selector-tabs

      .. container:: section

         .. rubric:: Groovy
            :name: groovy

         .. code:: prettyprint

            android {
                ...
                testOptions {
                    ...
                    // Encapsulates options for local unit tests.
                    unitTests {
                        returnDefaultValues true

                        all {
                            jvmArgs '-XX:MaxPermSize=256m'

                            if (it.name == 'testDebugUnitTest') {
                                systemProperty 'debug', 'true'
                            }
                            ...
                        }
                    }
                }
            }

      .. container:: section

         .. rubric:: Kotlin
            :name: kts

         .. code:: prettyprint

            android {
                ...
                testOptions {
                    ...
                    // Encapsulates options for local unit tests.
                    unitTests {
                        returnDefaultValues = true

                        all {
                            jvmArgs = listOf("-XX:MaxPermSize=256m")

                             if (it.name == "testDebugUnitTest") {
                                systemProperty = mapOf("debug" to "true")
                            }
                            ...
                        }
                    }
                }
            }

By default, local unit tests throw an exception any time the code you are
testing tries to access Android platform APIs, unless you 
`mock Android dependencies <#/training/testing/unit-testing/local-unit-tests#mocking-dependencies>`__
yourself or with a testing framework like Mockito. However, you can enable the
``returnDefaultValues`` property so that the test returns either null or zero
when accessing platform APIs, rather than throwing an exception.

The ``all`` block encapsulates options for controlling how Gradle executes local
unit tests. For a list of all the options you can specify, 
read `Gradle's reference documentation <https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/Test.html>`__.

The ``jvmArgs`` property sets JVM argument(s) for the test JVM(s).

You can also check the task name to apply options to only the tests you specify.
In the example snippet, the ``debug`` property is set to ``true`` but only for
the ``testDebugUnitTest`` task.

Use separate test modules for instrumented tests
------------------------------------------------

If you want to have a dedicated module for instrumented tests, to isolate the
rest of your code from your tests, create a separate test module and configure
its build similar to that of a library module.

To create a test module, proceed as follows:

#. `Create a library module <#/studio/projects/android-library#CreateLibrary>`__.
#. In the module-level ``build.gradle`` file, apply the ``com.android.test``
   plugin instead of ``com.android.library``.
#. Click **Sync Project** |image-toolbar-sync-gradle|.

After you create your test module, you can include your test code in the main or
variant source set (for example, ``src/main/java`` or
``src/``\ **``variant``**\ ``/java``). If your app module defines multiple
product flavors, you can re-create those flavors in your test module. Using
`variant-aware dependency
management <#/studio/build/build-variants#variant_aware>`__, the test module
attempts to test the matching flavor in the target module.

By default, test modules contain and test only a debug variant. However, you can
create new build types to match the tested app project. To make the test module
test a different build type and not the debug one, use ``VariantFilter`` to
disable the debug variant in the test project, as shown:

.. container::

   .. container:: ds-selector-tabs

      .. container:: section

         .. rubric:: Groovy
            :name: groovy

         .. code:: prettyprint

            android {
                variantFilter { variant ->
                    if (variant.buildType.name.equals('debug')) {
                        variant.setIgnore(true);
                    }
                }
            }

      .. container:: section

         .. rubric:: Kotlin
            :name: kts

         .. code:: prettyprint

            android {
                variantFilter {
                    if (buildType.name == "debug") {
                        ignore = true
                    }
                }
            }

If you want a test module to target only certain flavors or build types of an
app, you can use the ``matchingFallbacks`` property to target only the variants
you want to test. This also prevents the test module from having to configure
those variants for itself.

Last updated 2023-04-12 UTC.

/Create UI tests
================

.. https://developer.android.google.cn/studio/test/other-testing-tools/espresso-test-recorder?hl=en

.. container:: devsite-article-body clearfix

   The Espresso Test Recorder tool lets you create UI tests for your app without
   writing any test code. By recording a test scenario, you can record your
   interactions with a device and add assertions to verify UI elements in
   particular snapshots of your app. Espresso Test Recorder then takes the saved
   recording and automatically generates a corresponding UI test that you can
   run to test your app.

   Espresso Test Recorder writes tests based on the `Espresso Testing framework <#/training/testing/espresso>`__, an API in AndroidX Test. The
   Espresso API encourages you to create concise and reliable UI tests based on
   user actions. By stating expectations, interactions, and assertions without
   directly accessing the underlying app’s activities and views, this structure
   prevents test flakiness and optimizes test run speed.

   .. container:: video-wrapper-left

   .. rubric:: Turn off animations on your test device
      :name: turn-off-animations-on-your-test-device

   Before using Espresso Test Recorder, make sure you turn off animations on
   your test device to prevent unexpected results. Follow the `Espresso setup instructions <#/training/testing/espresso/setup>`__, but note that you do not
   need to manually set a dependency reference to the Espresso library because
   Test Recorder does this automatically when you `save a recording <#save-a-recording>`__. These steps only need to be done once for a
   given project.

   .. rubric:: Record an Espresso test
      :name: record-an-espresso-test

   Espresso tests consist of two primary components: UI interactions and
   assertions on View elements. UI interactions include tap and type actions
   that a person may use to interact with your app. Assertions verify the
   existence or contents of visual elements on the screen. For example, an
   Espresso test for the `Notes testing app <https://github.com/googlecodelabs/android-testing>`__ might include UI
   interactions for clicking on a button and writing a new note but would use
   assertions to verify the existence of the button and the contents of the
   note.

   This section will go over how to create both of these test components using
   Espresso Test Recorder, as well as how to save your finished recording to
   generate the test.

   .. rubric:: Record UI interactions
      :name: record-ui-interactions

   To start recording a test with Espresso Test Recorder, proceed as follows:

   #. Click **Run** > **Record Espresso Test**.
   #. In the **Select Deployment Target** window, choose the device on which you
      want to record the test. If necessary, `create a new Android Virtual Device <#/studio/run/managing-avds>`__. Click **OK**.
   #. Espresso Test Recorder triggers a build of your project, and the app must
      install and launch before Espresso Test Recorder allows you to interact
      with it. The **Record Your Test** window appears after the app launches,
      and since you have not interacted with the device yet, the main panel
      reads "No events recorded yet." Interact with your device to start logging
      events such as "tap" and "type" actions.

   **Note**: Before you can begin logging interactions, you may see a dialog on
   your device that says "Waiting for Debugger" or "Attaching Debugger."
   Espresso Test Recorder uses the debugger to log UI events. When the debugger
   attaches, the dialog will close automatically; do not hit **Force Close**.

   Recorded interactions will appear in the main panel in the **Record Your
   Test** window, as shown in figure 1 below. When you run the test, the
   Espresso test will try executing these actions in the same order.

   |image-espresso-test-recorder-window_2-2_2x|
   **Figure 1.** The **Record Your Test** window with logged UI interactions.

   .. rubric:: Add assertions to verify UI elements
      :name: add-assertions-to-verify-ui-elements

   Assertions verify the existence or contents of a
   `View <#/reference/android/view/View>`__ element through three main types:

   -  **text is**: Checks the text content of the selected View element
   -  **exists**: Checks that the View element is present in the current View
      hierarchy visible on the screen
   -  **does not exist**: Checks that the View element is not present in the
      current View hierarchy

   To add an assertion to your test, proceed as follows:

   #. Click **Add Assertion**. A **Screen Capture** dialog appears while
      Espresso gets the UI hierarchy and other information about the current app
      state. The dialog closes automatically once Espresso has captured the
      screenshot.
   #. A layout of the current screen appears in a panel on the right of the
      **Record Your Test** window. To select a View element on which to create
      an assertion, click on the element in the screenshot or use the first
      drop-down menu in the **Edit assertion** box at the bottom of the window.
      The selected View object is highlighted in a red box.
   #. Select the assertion you want to use from the second drop-down menu in the
      **Edit assertion** box. Espresso populates the menu with valid assertions
      for the selected View element.

      -  If you choose the "text is" assertion, Espresso automatically inserts
         the text currently inside the selected View element. You can edit the
         text to match your desired assertion using the text field in the **Edit
         assertion** box.

   #. Click **Save and Add Another** to create another assertion or click **Save
      Assertion** to close the assertion panels.

   The screenshot in figure 2 shows a "text is" assertion being created to
   verify that the title of the note is "Happy Testing!":

   |image-espresso-test-recorder-assertion_2-2_2x|
   **Figure 2.** The **Edit assertion** box after a View element is selected (in
   red).

   While creating an assertion, you can continue interacting with your app, even
   with the assertion panels still open within the **Record Your Test** window.
   Espresso Test Recorder will keep logging your actions, but the assertion you
   are editing will appear before these interactions once it’s saved. The
   screenshot for the assertion also retains the layout that the device or
   emulator had at the time you hit the **Add Assertion** button.

   .. rubric:: Save a recording
      :name: save-a-recording

   Once you finish interacting with your app and adding assertions, use the
   following steps to save your recording and generate the Espresso test:

   #. Click **Complete Recording**. The **Pick a test class name for your test**
      window appears.
   #. Espresso Test Recorder gives your test a unique name within its package
      based on the name of the launched activity. Use the **Test class name**
      text field if you want to change the suggested name. Click **Save**.

      -  If you have not added the Espresso dependencies to your app, a
         **Missing Espresso dependencies** dialog appears when you try to save
         your test. Click **Yes** to automatically add the dependencies to your
         ``build.gradle`` file.

   #. The file automatically opens after Espresso Test Recorder generates it,
      and Android Studio shows the test class as selected in the **Project**
      window of the IDE.

      -  Where the test saves depends on the location of your `instrumentation test <#/training/testing/unit-testing/instrumented-unit-tests>`__ root,
         as well as the package name of the launched activity. For example,
         tests for the `Notes testing app <https://github.com/googlecodelabs/android-testing>`__ save in the
         **src** > **androidTest** > **java** > **com.example.username.appname**
         folder of the app module on which you recorded the test.

   .. rubric:: Run an Espresso test locally
      :name: run-an-espresso-test-locally

   To run an Espresso test, use the **Project** |image-studio-icon| window on the left side
   of the Android Studio IDE:

   #. Open the desired app module folder and navigate to the test you want to
      run. The test’s location depends on the location of your `instrumentation test <#/training/testing/unit-testing/instrumented-unit-tests>`__ root and
      the package name of the launched activity. The following examples
      demonstrate where a test would save for the `Notes testing app <https://github.com/googlecodelabs/android-testing>`__:

      -  If you are using the `Android view <#/studio/projects#ProjectFiles>`__
         within the window, navigate to **java** >
         **com.example.username.appname (androidTest)**.
      -  If you are using the **Project** view inside the window, navigate to
         **src** > **androidTest** > **java** > **com.example.username.appname**
         within the module folder.

   #. Right-click on the test and click **Run ‘testName.’**

      -  Alternatively, you can open the test file and right-click on the
         generated test class or method. Read more about how to run tests on the
         `Test Your App <#/studio/test#run_a_test>`__ page.

   #. In the **Select Deployment Target** window, choose the device on which you
      want to run the test. If necessary, `create a new Android Virtual Device <#/studio/run/managing-avds>`__. Click **OK**.

   Monitor the progress of your test in the **Run** window at the bottom of the
   IDE. Android Studio runs a full build of your project and opens a tab with
   the name of your test in the **Run** window, as shown in figure 3. You can
   check whether your test passes or fails in this tab, as well as how long the
   test took to run. When the test finishes, the tab will log "Tests ran to
   completion."

   |image-run-window-espresso-test_2-2-preview-7_2x|
   **Figure 3**. Sample output in the **Run** window after running an Espresso
   test locally.

   To learn more about writing test run configurations, read the "Defining a
   test configuration for a class or method" section in `Create and Edit Run/Debug Configurations <#/studio/run/rundebugconfig#creating>`__.

   .. rubric:: Run an Espresso test with Firebase Test Lab for Android
      :name: run-an-espresso-test-with-firebase-test-lab

   You can use tests generated by Espresso Test Recorder with `Firebase Test Lab <https://firebase.google.cn/docs/test-lab/>`__ to test your app in the
   cloud on hundreds of device configurations. There is no charge to test your
   app with Test Lab within the `free daily quota on the Spark plan <https://firebase.google.cn/docs/test-lab/overview#quota_for_spark_and_flame_plans>`__.
   To run Espresso tests with Firebase Test Lab, `create a Firebase project <https://firebase.google.cn/docs/test-lab/web-ui#create_a_firebase_project>`__
   for your app and then follow the instructions to `Run your tests with Firebase Test Lab <#/training/testing/unit-testing/instrumented-unit-tests#run-ctl>`__ from
   Android Studio.

   |image-ctl-test-results|
   **Figure 4**. Sample output in the **Run** window after running a test with
   Firebase Test Lab on multiple devices.

Last updated 2023-11-14 UTC.

.. |image-espresso-test-recorder-window_2-2_2x| image:: https://developer.android.google.cn/static/studio/images/test/espresso-test-recorder-window_2-2_2x.png
.. |image-espresso-test-recorder-assertion_2-2_2x| image:: https://developer.android.google.cn/static/studio/images/test/espresso-test-recorder-assertion_2-2_2x.png
.. |image-studio-icon| image:: https://developer.android.google.cn/static/studio/images/studio-icon.png
   :class: inline-icon
.. |image-run-window-espresso-test_2-2-preview-7_2x| image:: https://developer.android.google.cn/static/studio/images/test/run-window-espresso-test_2-2-preview-7_2x.png
.. |image-ctl-test-results| image:: https://developer.android.google.cn/static/images/training/ctl-test-results.png

/Set up automatic testing of your code
======================================

.. https://developer.android.google.cn/studio/test/other-testing-tools/app-crawler?hl=en

.. container:: devsite-article-body clearfix

   |image-robo|

   Use the App Crawler tool, part of `Jetpack <#/jetpack>`__, to automatically
   test your app without the need to write or maintain any code.

   The crawler runs alongside your app, automatically issuing actions (tap,
   swipe, etc.) to explore the state-space of your app. The crawl terminates
   automatically when there are no more unique actions to perform, the app
   crashes, or a timeout you designate is reached.

   Testing with the crawler is easy because there’s no code to write or
   maintain. Moreover, you can run it on a variety of devices to look for
   crashes, visual issues, or performance problems. Typically, it’s a good idea
   to use a cloud-based service like `Firebase Test Lab <https://firebase.google.cn/docs/test-lab/>`__ to test multiple
   combinations of screen sizes and hardware configurations more easily and
   quickly.

   .. rubric:: Target audience
      :name: target-audience

   App Crawler is targeted at developers who want to ensure their app’s basic
   functionality with minimal configuration. In addition to purely opaque-box
   testing, the crawler can also be configured to provide specific inputs, such
   as login credentials or deep links.

   .. rubric:: Getting started
      :name: getting-started

   Before starting, make sure you have a recent version of the Android SDK. This
   comes with `Android Studio <#/studio>`__. If you install a standalone Android
   SDK, make sure it includes the latest latest build tools and platform tools.

   Then, `download the crawler binary archive <https://googledownloads.cn/appcrawler/beta1/app-crawler.zip>`__.
   or here https://dl.google.com/appcrawler/beta1/app-crawler.zip

   Next, either start an emulator or connect a physical device using a USB
   cable. Confirm the device is connected by running the following command:

   .. code:: none

      adb devices

   To invoke the crawler, first extract the archive to the directory of your
   choice. From that directory, invoke the crawler using the following command:

   .. code:: none

      java -jar crawl_launcher.jar --apk-file path/to/my/app.apk --android-sdk path/to/my/android/sdk

   .. rubric:: Crawler options
      :name: crawler-options

   You can use the following options to invoke the crawler:

   .. list-table::
      :widths: 28
      :header-rows: 1

      - 
         -  Option
         -  Description

      - 
         - ``--android-sdk path``
         -  Specifies the path to your Android SDK.

            This is a required flag.

      - 
         - ``--apk-file file``
         -  Specifies the path to your app APK, which App Crawler then installs and crawls.

            This is a required flag if --app-package-name isn't specified.

      - 
         - ``--app-package-name name``
         -  Specifies the package name of your app. Use this option when your app is already installed on the device and no re-installation is required.

            This is a required flag if --apk-file isn't specified.

      - 
         - ``--key-store ``
         -  Specifies the path to the keystore that signs your app and crawler APKs. Use this option when your app requires a specific signature to function properly.

      - 
         - ``--key-store-password password``
         -  Specifies the password for the keystore you provided for --key-store option.

            This is a required flag if --key-store is specified.

      - 
         - ``--timeout-sec timeout``
         -  Specifies the timeout for your crawl in seconds. If not specified, the crawl stops after 60 seconds.


   .. rubric:: Known issues
      :name: known-issues

   **Failed to delete original signature files**

   Prior to the start of the crawl, JDK 9 users may see this error message:

   .. code:: none

      androidx.test.tools.crawler.launcher.exceptions.ApkSigningException: Failed to delete original signature files

   If you experience this behavior, we recommend using JDK 8 or 10+. For more
   information on this issue, see this `JDK 9 bug <https://bugs.openjdk.java.net/browse/JDK-8184940>`__. Some users have
   fixed the issue by rebuilding their APK using an updated version of Android
   Studio.

   .. rubric:: Additional resources
      :name: additional-resources

   For more information about using App Crawler, consult the following
   resources.

   -  `Firebase Test Lab Robo Test <https://firebase.google.cn/docs/test-lab/android/robo-ux-test>`__
      contains detailed documentation as well as instructions for how to run
      crawler tests in the cloud.

Last updated 2023-04-12 UTC.

.. |image-robo| image:: https://developer.android.google.cn/static/images/training/testing/robo.png
   :class: attempt-right
   :width: 300px

/Stress-test your code with user events
=======================================

.. https://developer.android.google.cn/studio/test/other-testing-tools/monkey?hl=en

.. container:: devsite-article-body clearfix

   The Monkey is a program that runs on your `emulator <#/tools/help/emulator>`__
   or device and generates pseudo-random streams of user events such as clicks,
   touches, or gestures, as well as a number of system-level events. You can use
   the Monkey to stress-test applications that you are developing, in a random
   yet repeatable manner.

   .. rubric:: Overview
      :name: overview

   The Monkey is a command-line tool that you can run on any emulator instance
   or on a device. It sends a pseudo-random stream of user events into the
   system, which acts as a stress test on the application software you are
   developing.

   The Monkey includes a number of options, but they break down into four
   primary categories:

   -  Basic configuration options, such as setting the number of events to
      attempt.
   -  Operational constraints, such as restricting the test to a single package.
   -  Event types and frequencies.
   -  Debugging options.

   When the Monkey runs, it generates events and sends them to the system. It
   also *watches* the system under test and looks for three conditions, which it
   treats specially:

   -  If you have constrained the Monkey to run in one or more specific
      packages, it watches for attempts to navigate to any other packages, and
      blocks them.
   -  If your application crashes or receives any sort of unhandled exception,
      the Monkey will stop and report the error.
   -  If your application generates an *application not responding* error, the
      Monkey will stop and report the error.

   Depending on the verbosity level you have selected, you will also see reports
   on the progress of the Monkey and the events being generated.

   .. rubric:: Basic use of the Monkey
      :name: basic-use-of-the-monkey

   You can launch the Monkey using a command line on your development machine or
   from a script. Because the Monkey runs in the emulator/device environment,
   you must launch it from a shell in that environment. You can do this by
   prefacing ``adb shell`` to each command, or by entering the shell and
   entering Monkey commands directly.

   The basic syntax is:

   .. code:: none

      $ adb shell monkey [options] <event-count>

   With no options specified, the Monkey will launch in a quiet (non-verbose)
   mode, and will send events to any (and all) packages installed on your
   target. Here is a more typical command line, which will launch your
   application and send 500 pseudo-random events to it:

   .. code:: none

      $ adb shell monkey -p your.package.name -v 500

   .. rubric:: Command options reference
      :name: command-options-reference

   The table below lists all options you can include on the Monkey command line.

   .. list-table::
      :header-rows: 1

      - 

         - Category
         - Option
         - Description
      - 

         - General
         - ``--help``
         - Prints a simple usage guide.
      - 

         - 
         - ``-v``
         - Each -v on the command line will increment the verbosity level. Level
            0 (the default) provides little information beyond startup
            notification, test completion, and final results. Level 1 provides
            more details about the test as it runs, such as individual events
            being sent to your activities. Level 2 provides more detailed setup
            information such as activities selected or not selected for testing.
      - 

         - Events
         - ``-s <seed>``
         - Seed value for pseudo-random number generator. If you re-run the
            Monkey with the same seed value, it will generate the same sequence
            of events.
      - 

         - 
         - ``--throttle <milliseconds>``
         - Inserts a fixed delay between events. You can use this option to slow
            down the Monkey. If not specified, there is no delay and the events
            are generated as rapidly as possible.
      - 

         - 
         - ``--pct-touch <percent>``
         - Adjust percentage of touch events. (Touch events are a down-up event
            in a single place on the screen.)
      - 

         - 
         - ``--pct-motion <percent>``
         - Adjust percentage of motion events. (Motion events consist of a down
            event somewhere on the screen, a series of pseudo-random movements,
            and an up event.)
      - 

         - 
         - ``--pct-trackball <percent>``
         - Adjust percentage of trackball events. (Trackball events consist of
            one or more random movements, sometimes followed by a click.)
      - 

         - 
         - ``--pct-nav <percent>``
         - Adjust percentage of "basic" navigation events. (Navigation events
            consist of up/down/left/right, as input from a directional input
            device.)
      - 

         - 
         - ``--pct-majornav <percent>``
         - Adjust percentage of "major" navigation events. (These are navigation
            events that will typically cause actions within your UI, such as the
            center button in a 5-way pad, the back key, or the menu key.)
      - 

         - 
         - ``--pct-syskeys <percent>``
         - Adjust percentage of "system" key events. (These are keys that are
            generally reserved for use by the system, such as Home, Back, Start
            Call, End Call, or Volume controls.)
      - 

         - 
         - ``--pct-appswitch <percent>``
         - Adjust percentage of activity launches. At random intervals, the
            Monkey will issue a startActivity() call, as a way of maximizing
            coverage of all activities within your package.
      - 

         - 
         - ``--pct-anyevent <percent>``
         - Adjust percentage of other types of events. This is a catch-all for
            all other types of events such as keypresses, other less-used
            buttons on the device, and so forth.
      - 

         - Constraints
         - ``-p <allowed-package-name>``
         - If you specify one or more packages this way, the Monkey will *only*
            allow the system to visit activities within those packages. If your
            application requires access to activities in other packages (e.g. to
            select a contact) you'll need to specify those packages as well. If
            you don't specify any packages, the Monkey will allow the system to
            launch activities in all packages. To specify multiple packages, use
            the -p option multiple times — one -p option per package.
      - 

         - 
         - ``-c <main-category>``
         - If you specify one or more categories this way, the Monkey will
            *only* allow the system to visit activities that are listed with one
            of the specified categories. If you don't specify any categories,
            the Monkey will select activities listed with the category
            Intent.CATEGORY_LAUNCHER or Intent.CATEGORY_MONKEY. To specify
            multiple categories, use the -c option multiple times — one -c
            option per category.
      - 

         - Debugging
         - ``--dbg-no-events``
         - When specified, the Monkey will perform the initial launch into a
            test activity, but will not generate any further events. For best
            results, combine with -v, one or more package constraints, and a
            non-zero throttle to keep the Monkey running for 30 seconds or more.
            This provides an environment in which you can monitor package
            transitions invoked by your application.
      - 

         - 
         - ``--hprof``
         - If set, this option will generate profiling reports immediately
            before and after the Monkey event sequence. This will generate large
            (~5Mb) files in data/misc, so use with care. For information on
            analyzing profiling reports, see `Profile your app performance <#/studio/profile>`__.
      - 

         - 
         - ``--ignore-crashes``
         - Normally, the Monkey will stop when the application crashes or
            experiences any type of unhandled exception. If you specify this
            option, the Monkey will continue to send events to the system, until
            the count is completed.
      - 

         - 
         - ``--ignore-timeouts``
         - Normally, the Monkey will stop when the application experiences any
            type of timeout error such as a "Application Not Responding" dialog.
            If you specify this option, the Monkey will continue to send events
            to the system, until the count is completed.
      - 

         - 
         - ``--ignore-security-exceptions``
         - Normally, the Monkey will stop when the application experiences any
            type of permissions error, for example if it attempts to launch an
            activity that requires certain permissions. If you specify this
            option, the Monkey will continue to send events to the system, until
            the count is completed.
      - 

         - 
         - ``--kill-process-after-error``
         - Normally, when the Monkey stops due to an error, the application that
            failed will be left running. When this option is set, it will signal
            the system to stop the process in which the error occurred. Note,
            under a normal (successful) completion, the launched process(es) are
            not stopped, and the device is simply left in the last state after
            the final event.
      - 

         - 
         - ``--monitor-native-crashes``
         - Watches for and reports crashes occurring in the Android system
            native code. If --kill-process-after-error is set, the system will
            stop.
      - 

         - 
         - ``--wait-dbg``
         - Stops the Monkey from executing until a debugger is attached to it.

Last updated 2023-04-12 UTC.


/Topic: 6. 🟢 Inspect performance issues
==========================================

/Overview: Inspect performance issues
=====================================

.. https://developer.android.google.cn/studio/profile?hl=en

.. container:: devsite-article-body clearfix

   An app is considered to have poor performance if it responds slowly, shows
   choppy animations, freezes, or consumes too much power. Fixing performance
   problems involves identifying areas in which your app makes inefficient use
   of resources such as the CPU, memory, graphics, network, or the device
   battery.

   To find and fix these problems, use the profiling and benchmarking tools and
   techniques described in this topic. To learn techniques for measuring
   performance and examples of how to use these techniques to resolve specific
   problems, see `Measuring performance <#/studio/profile/measuring-performance>`__.

   Android Studio offers several profiling tools to help find and visualize
   potential problems:

   -  **CPU profiler** helps track down runtime performance issues.
   -  **Memory profiler** helps track memory allocations.
   -  **Energy profiler** tracks energy usage, which can contribute to battery
      drain.

   These tools are compatible with Android 5.0 (API level 21) and higher. For
   more information about the tools, see the other pages in this section of the
   user guide.

   The Jetpack Benchmark libraries allow your application to measure various
   important operations:

   -  **Macrobenchmark**: Measure important performance use cases, including
      application startup and redrawing that is triggered by actions such as UI
      animations or scrolling.
   -  **Microbenchmark**: Measure CPU cost of specific functions.

   To learn more about these libraries, see the `Benchmark your app <#/studio/profile/benchmarking-overview>`__ page.

   .. rubric:: Profileable applications
      :name: profileable-apps

   `Profileable <#/guide/topics/manifest/profileable-element>`__ is a
   manifest configuration introduced in Android Q. It can specify whether the
   user of the device can profile this application through tools such as Android
   Studio, Simpleperf, and Perfetto.

   Prior to ``profileable``, most developers could only profile
   `debuggable <#/studio/debug>`__ apps on Android, which added significant
   performance costs as a side effect. These performance costs could invalidate
   profiling results, especially if they were related to timing. Table 1
   summarizes the differences between debuggable and profileable apps.

   **Table 1.** Summary of key differences between debuggable and profileable
   apps.

   .. list-table::

      -
         - Feature
         - Debuggable
         - Profileable

      -
         - `Memory Profiler <#/studio/profile/memory-profiler>`__
         - Full
         - Yes:

           -  `Default view <#/studio/profile/memory-profiler#overview>`__

           -  `Native Memory Profiler <#/studio/profile/memory-profiler#native-memory-profiler>`__

           No:

           -  Event timeline

           -  `Heap dump <#/studio/profile/memory-profiler#capture-heap-dump>`__

           -  `Live allocation recording <#/studio/profile/memory-profiler#record-allocations>`__

      -
         - `CPU Profiler <#/studio/profile/cpu-profiler>`__
         - Full
         - Yes:

           -  `Default view <#/studio/profile/cpu-profiler#overview>`__

           -  UI-initiated recording

           No:

           -  Event timeline

           -  `Display status of API-initiated recording <#/studio/profile/record-traces#debug-api>`__

      -
         - `Network Profiler <#/studio/profile/network-profiler>`__
         - Yes
         - No

      -
         - `Energy Profiler <#/studio/profile/energy-profiler>`__
         - Yes
         - No

      -
         - `Power Profiler <#/studio/profile/power-profiler>`__
         - Yes
         - Yes

      -
         - Event Monitor
         - Yes
         - No

``Profileable`` has been introduced so that developers can choose to allow their
apps to expose information to profiling tools, while incurring very little
performance costs. A profileable APK is essentially a release APK with a line of
``<profileable android:shell="true"/>`` added within the ``<application>``
section of the manifest file.

.. _auto-build-run-profileable:

Build and run a profileable app automatically
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can configure, build, and run a profileable app with one click. This feature
requires a virtual or physical test device that runs API level 29 or higher and
has Google Play. To use the feature, click the arrow next to the **Profile app**
icon |image-profile-app-icon| and choose between two options:

|One-click profileable build menu.|

-  **Profile 'app' with low overhead** starts the CPU and Memory profilers. In
   the Memory profiler, only `Record Native Allocations <#/studio/profile/memory-profiler#native-memory-profiler>`__ is
   enabled.

   |Profiling with low overhead.|

-  **Profile 'app' with complete data** starts the CPU, Memory, and Energy
   profilers.

   |Profiling with complete data.|

.. _manual-build-run-profileable:

Build and run a profileable app manually
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To build a profileable application manually, you need to first build a release
application and then update its manifest file, which turns the release
application into a profileable application. After you configure the profileable
application, launch the profiler and select a profileable process to analyze.

.. _build-release-app:

Build a release app
^^^^^^^^^^^^^^^^^^^

To build a release application for profiling purposes, do the following:

#. Sign your application with the debug key by adding the following lines to
   your application's ``build.gradle`` file. If you already have a working
   release build variant, you can skip to the next step.

   ::

              buildTypes {
                release {
                  signingConfig signingConfigs.debug
                }
              }
            

#. In Android Studio, select **Build** > **Select Build Variant...** and choose
   the release variant.

Change release to profileable
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#. Convert your release application from above into a profileable application by
   opening the ``AndroidManifest.xml`` file and adding the following within
   ``<application>``. For more details, see `Building your application for release <#/studio/publish/preparing#publishing-build>`__.

   ``<profileable android:shell="true"/>``

#. Depending on the SDK version, you may need to add the following lines to the
   application's ``build.gradle`` file.

   ::

            aaptOptions {
              additionalParameters =["--warn-manifest-validation"]
            }
          

.. _profile-profileable-app:

Profile a profileable app
^^^^^^^^^^^^^^^^^^^^^^^^^

To profile a profileable app, do the following:

#. From the development emulator or device, start the app.

#. In Android Studio, launch the profiler by selecting **View** > **Tool
   Windows** > **Profiler**.

#. After the application has launched, click the |Profilers plus button| button
   in the profiler to see the dropdown menu. Select your device, then select the
   application's entry under **Other profileable processes**.

   .. container::

      |Profileable menu|

#. The profiler should attach to the application. Only the CPU and Memory
   Profilers are available, with limited capabilites for the Memory Profiler.

   .. container::

      |Profileable session view|

   .. container::

      |image-profileable_cpu_dark|

   .. container::

      |image-profileable_memory_dark|

Sessions
--------

You can save Profiler data as *sessions*, which are retained until you quit
Android Studio. By recording profiling information in multiple sessions and
switching between them, you can compare resource usage in various scenarios.

-  To start a new session, click the **Start a new profiling session** |image-ic_plus|
   button and select an app process from the dropdown menu that appears.
-  When you `record a trace <#/studio/profile/cpu-profiler#method_traces>`__ or
   `capture a heap dump <#/studio/profile/memory-profiler#capture-heap-dump>`__,
   Android Studio adds that data (along with your app's network activity) as a
   separate entry to the current session.
-  To stop adding data to the current session, click **Stop the current
   profiling session** |image-ic_red_stop|.
-  To import a trace exported from a previous run of Android Studio, click
   **Start new profiler session** |image-ic_plus| and choose **Load from file**.

.. _advanced-profiling:

Enable additional support for older devices (API level < 26)
------------------------------------------------------------

To show you additional profiling data when running a device with Android 7.1 or
lower, Android Studio must inject monitoring logic into your compiled app. These
additional profiling data include the following:

-  The event timeline on all profiler windows
-  The number of allocated objects in Memory Profiler
-  Garbage collection events in Memory Profiler
-  Details about all transmitted files in Network Profiler

**Note:** These features are available by default if your device is running
Android 8.0 or higher.

To enable additional support for older devices, follow these steps:

#. Select **Run > Edit Configurations**.
#. Select your app module in the left pane.
#. Click the **Profiling** tab, and then check **Enable additional support for
   older devices (API level < 26)**.
#. Build and run your app again.

Enabling additional support for older devices makes the build process slower, so
you should enable it only when you want to start profiling your app.

**Note:** Additional support for older devices is not available for native code
on devices using Android 9 or lower. If your app is a pure native app targeting
Android 9 or lower (that is, it doesn't have a Java ``Activity`` class), the
additional profiling data are not available. If your app uses JNI, some
profiling data are available—such as the event timeline, garbage collection
events, Java-allocated objects, and Java-based network activity—but it cannot
detect native-based allocations and network activity.

.. _standalone-profilers:

Run standalone profilers
------------------------

The standalone Android Studio Profilers let you profile your app without running
the full Android Studio IDE.

To run the standalone profilers, do the following:

#. Make sure the profiler is not currently running inside of Android Studio.

#. Go to the installation directory and navigate to the ``bin`` directory:

   **Windows/Linux**: ``studio-installation-folder``\ ``/bin``

   **macOS**: The use of standalone profilers is not supported on macOS.

#. Depending on your OS, run ``profiler.exe`` or ``profiler.sh``. The Android
   Studio splash screen appears. After the splash screen disappears, a profiler
   window opens.

Last updated 2023-08-17 UTC.

.. |image-profile-app-icon| image:: https://developer.android.google.cn/static/studio/images/profile-app-icon.png
   :class: inline-icon
.. |One-click profileable build menu.| image:: https://developer.android.google.cn/static/studio/images/one-click-profileable-build-menu.png
   :width: 50.0%
.. |Profiling with low overhead.| image:: https://developer.android.google.cn/static/studio/images/profiling-with-low-overhead.png
   :width: 70.0%
.. |Profiling with complete data.| image:: https://developer.android.google.cn/static/studio/images/profiling-with-complete-data.png
   :width: 70.0%
.. |Profilers plus button| image:: https://developer.android.google.cn/static/studio/images/profile/standalone-profilers-plus.png
.. |Profileable menu| image:: https://developer.android.google.cn/static/studio/images/profile/profileable_menu_dark.png
.. |Profileable session view| image:: https://developer.android.google.cn/static/studio/images/profile/profileable_session_view_dark.png
.. |image-profileable_cpu_dark| image:: https://developer.android.google.cn/static/studio/images/profile/profileable_cpu_dark.png
.. |image-profileable_memory_dark| image:: https://developer.android.google.cn/static/studio/images/profile/profileable_memory_dark.png
.. |image-ic_plus| image:: https://developer.android.google.cn/static/studio/images/buttons/ic_plus.png
   :class: inline-icon
.. |image-ic_red_stop| image:: https://developer.android.google.cn/static/studio/images/profile/ic_red_stop.png
   :class: inline-icon
.. |image-ic_plus| image:: https://developer.android.google.cn/static/studio/images/buttons/ic_plus.png
   :class: inline-icon

/Display your app's CPU profile
===============================

.. https://developer.android.google.cn/studio/profile/cpu-profiler?hl=en

.. container:: devsite-article-body clearfix

   Optimizing your app’s CPU usage has many advantages, such as providing a
   faster and smoother user experience and preserving device battery life.

   You can use the CPU Profiler to inspect your app’s CPU usage and thread
   activity in real time while interacting with your app, or you can inspect the
   details in recorded method traces, function traces, and system traces.

   The detailed information that the CPU Profiler records and shows is
   determined by which recording configuration you choose:

   -  **System Trace:** Captures fine-grained details that allow you to inspect
      how your app interacts with system resources.

   -  **Method and function traces:** For each thread in your app process, you
      can find out which methods (Java) or functions (C/C++) are executed over a
      period of time, and the CPU resources each method or function consumes
      during its execution. You can also use method and function traces to
      identify *callers* and *callees*. A caller is a method or function that
      invokes another method or function, and a callee is one that is invoked by
      another method or function. You can use this information to determine
      which methods or functions are responsible for invoking particular
      resource-heavy tasks too often and optimize your app’s code to avoid
      unnecessary work.

      When recording method traces, you can choose *sampled* or *instrumented*
      recording. When recording function traces, you can only use sampled
      recording.

   For details of using and choosing each of these trace options, see `Choose a recording configuration <#/studio/profile/record-traces#configurations>`__.

   .. rubric:: CPU Profiler overview
      :name: overview

   To open the CPU Profiler, follow these steps:

   #. Select **View > Tool Windows > Profiler** or click **Profile** |image-toolbar-android-profiler_dark| in
      the toolbar.

      If prompted by the **Select Deployment Target** dialog, choose the device
      to which to deploy your app for profiling. If you've connected a device
      over USB but don't see it listed, ensure that you have `enabled USB debugging <#/studio/debug/dev-options#enable>`__.

   #. Click anywhere in the **CPU** timeline to open the CPU Profiler.

   When you open the CPU Profiler, it immediately starts displaying your app’s
   CPU usage and thread activity. You should see something similar to Figure 1.

   |image-cpu_profiler_L2-2X|

   **Figure 1.** Timelines in the CPU Profiler.

   As indicated in Figure 1, the default view for the CPU Profiler includes the
   following timelines:

   #. **Event timeline:** Shows the activities in your app as they transition
      through different states in their lifecycle, and indicates user
      interactions with the device, including screen rotation events. For
      information on enabling the event timeline on devices running Android 7.1
      (API level 25) and lower, see `Enable advanced profiling <#/studio/profile#advanced-profiling>`__.

   #. **CPU timeline:** Shows real-time CPU usage of your app—as a percentage of
      total available CPU time—and the total number of threads your app is
      using. The timeline also shows the CPU usage of other processes (such as
      system processes or other apps), so you can compare it to your app’s
      usage. You can inspect historical CPU usage data by moving your mouse
      along the horizontal axis of the timeline.

   #. **Thread activity timeline:** Lists each thread that belongs to your app
      process and indicates its activity along a timeline using the colors
      listed below. After you record a trace, you can select a thread from this
      timeline to inspect its data in the trace pane.

      -  **Green:** The thread is active or is ready to use the CPU. That is,
         it's in a running or runnable state.
      -  **Yellow:** The thread is active, but it’s waiting on an I/O operation
         (for example, disk or network I/O) before it can complete its work.
      -  **Gray:** The thread is sleeping and is not consuming any CPU time.
         This sometimes occurs when the thread requires access to a resource
         that is not yet available. Either the thread goes into voluntary sleep,
         or the kernel puts the thread to sleep until the required resource
         becomes available.

      The CPU Profiler also reports CPU usage of threads that Android Studio and
      the Android platform add to your app process—such as ``JDWP``,
      ``Profile Saver``, ``Studio:VMStats``, ``Studio:Perfa``, and
      ``Studio:Heartbeat`` (although, the exact names displayed in the thread
      activity timeline may vary). Android Studio reports this data so that you
      can identify when thread activity and CPU usage are actually caused by
      your app’s code.

Last updated 2023-05-23 UTC.

.. |image-toolbar-android-profiler_dark| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-android-profiler_dark.png
   :class: inline-icon
.. |image-cpu_profiler_L2-2X| image:: https://developer.android.google.cn/static/studio/images/profile/cpu_profiler_L2-2X.png
   :width: 856px

/Record traces
==============

.. https://developer.android.google.cn/studio/profile/record-traces?hl=en

.. container:: devsite-article-body clearfix

   To start recording a trace, `choose a recording configuration <#configurations>`__ from either of the dropdown menus above or
   below the CPU Profiler and click **Record**.

   |image-cpu-profiler|

   **Figure 1.** The CPU Profiler displays the status, duration, and type of
   recording being made.

   Interact with your app, and then click **Stop** when you're done. The
   profiler automatically displays its tracing information in the trace pane, as
   shown in Figure 2.

   |image-sample-java-methods|

   **Figure 2.** The CPU Profiler after recording a method trace.

   #. **Selected range:** Determines the portion of the recorded time to inspect
      in the trace pane. When you first record a trace, the CPU Profiler
      automatically selects the entire length of your recording in the CPU
      timeline. To inspect trace data for only a portion of the recorded time
      range, drag the edges of the highlighted region.
   #. **Interaction section:** Displays user interaction and app lifecycle
      events along a timeline.
   #. **Threads section:** Displays thread state activity (such as running,
      sleeping, etc.) and **Call Chart** (or trace event chart in System Trace)
      for every thread along a timeline.

      -  Use `mouse and keyboard shortcuts <#ui-shortcuts>`__ to navigate the
         timeline.
      -  Double-click the thread name or press Enter while a thread is selected
         to expand or collapse a thread.
      -  Select a thread to see additional information in the Analysis pane.
         Hold Shift or Ctrl (Command on Mac) to select multiple threads.
      -  Select a method call (or trace event in System Trace) to see additional
         information in the Analysis pane.

   #. **Analysis pane:** Displays trace data for the time range and thread or
      method call you have selected. In this pane, you can select how to view
      each stack trace (using the analysis tabs) and how to measure execution
      time (using the time reference dropdown menu).
   #. **Analysis pane tabs:** Choose how to display trace details. For details
      about each option, see `Inspect traces <#/studio/profile/inspect-traces#inspect-traces>`__.
   #. **Time reference menu:** Select one of the following to determine how
      timing information for each call is measured (only supported in
      **Sample/Trace Java Methods**):

      -  **Wall clock time:** Timing information represents actual elapsed time.
      -  **Thread time:** Timing information represents actual elapsed time
         minus any portion of that time when the thread is not consuming CPU
         resources. For any given call, its thread time is always less than or
         equal to its wall clock time. Using thread time gives you a better
         understanding of how much of a thread’s actual CPU usage is consumed by
         a given method or function.

   #. **Filter:** Filters trace data by function, method, class, or package
      name. For example, if you want to quickly identify trace data related to a
      specific call, type the name in the search field. In the **Flame chart**
      tab, call stacks that include a call, package, or class that matches the
      search query are emphasized. In the **Top down** and **Bottom up** tabs,
      those call stacks are prioritized over other trace results. You can also
      enable the following options by checking the appropriate box next to the
      search field:

      -  **Regex:** To include regular expressions in your search, use this
         option.
      -  **Match case:** If your search is case-sensitive, use this option.

   .. note::
      :name: ui-shortcuts

      **Tip:** When inspecting the **Threads** timeline, the following shortcuts
      are available:

      -  **Zoom in:** Press W or scroll the mouse wheel while holding Ctrl
         (Command on Mac).
      -  **Zoom out:** Press S or scroll the mouse wheel backward while holding
         Ctrl (Command on Mac).
      -  **Pan left:** Press A or drag mouse right while holding Space.
      -  **Pan right:** Press D or drag mouse left while holding Space.
      -  **Expand or collapse a thread:** Double-click the thread name or press
         Enter while a thread is selected.

   .. rubric:: Choose a recording configuration
      :name: configurations

   Before you begin recording trace information, choose the appropriate
   recording configuration for the profiling information that you want to
   capture:

   -  **Sample Java Methods:** Captures your app’s call stack at frequent
      intervals during your app’s Java-based code execution. The profiler
      compares sets of captured data to derive timing and resource usage
      information about your app’s Java-based code execution.

      An inherent issue of sampled-based tracing is that if your app enters a
      method after a capture of the call stack and exits the method before the
      next capture, that method call is not logged by the profiler. If you are
      interested in tracing methods with such short lifecycles, you should use
      instrumented tracing.

   -  **Trace Java Methods:** Instruments your app at runtime to record a
      timestamp at the beginning and end of each method call. Timestamps are
      collected and compared to generate method tracing data, including timing
      information and CPU usage.

      Note that the overhead associated with instrumenting each method impacts
      runtime performance and may influence profiling data; this is even more
      noticeable for methods with relatively short lifecycles. Additionally, if
      your app executes a large number of methods in a short time, the profiler
      may quickly exceed its file size limit and may not be able to record any
      further tracing data.

   -  **Sample C/C++ Functions:** Captures sampled traces of your app’s native
      threads. To use this configuration, you must deploy your app to a device
      running Android 8.0 (API level 26) or higher.

      Internally, this configuration uses
      `simpleperf <#/ndk/guides/simpleperf>`__ to trace your app's native
      code. If you want to specify additional options for ``simpleperf``, such
      as sampling specific device CPUs or specifying sampling durations at a
      high accuracy, you can `use ``simpleperf`` from the command
      line <#/ndk/guides/simpleperf-commands>`__.

   -  **Trace System Calls:** Captures fine-grained details that allow you to
      inspect how your app interacts with system resources. You can inspect
      exact timings and durations of your thread states, visualize where your
      CPU bottlenecks are across all cores, and add custom trace events to
      analyze. Such information can be crucial when you are troubleshooting
      performance issues. To use this configuration, you must deploy your app to
      a device running Android 7.0 (API level 24) or higher.

      While using this trace configuration, you can visually mark important code
      routines in the profiler timeline by instrumenting your code. To
      instrument C/C++ code, use the `native tracing API <#/topic/performance/tracing/custom-events-native>`__ provided by
      ``trace.h``. To instrument Java code, use the
      `Trace <#/reference/android/os/Trace>`__ class. For more information,
      see `Instrument your app code <#/topic/performance/tracing/custom-events>`__.

      This trace configuration is built on ``systrace``. You can `use the ``systrace`` command-line utility <#/studio/command-line/systrace>`__ to
      specify options beyond those provided in the CPU Profiler. The additional
      system-level data provided by ``systrace`` can help you to inspect native
      system processes and troubleshoot dropped or delayed frames.

      On devices running Android 9 (API level 28) or higher, you can use a
      system app called *System Tracing* to `record system traces on a device <#/topic/performance/tracing/on-device>`__.

   .. rubric:: Create, edit, or view a recording configuration
      :name: create-configuration

   You create, edit, and view recording configurations in the **CPU Recording
   Configurations** dialog, which you open by selecting **Edit configurations**
   from the recording configurations dropdown menu at the top of the CPU
   Profiler.

   To view the settings of an existing recording configuration, select it in the
   left pane of the **CPU Recording Configurations** dialog.

   To create a new recording configuration, do the following:

   #. Click **Add** |image-ic_plus| at the top-left of the dialog. This creates a new
      configuration with some default settings.

   #. Name your configuration.

   #. Select a **Trace Technology**.

   #. For sampled recording configurations, specify the **Sampling interval** in
      microseconds (μs). This value represents the time between each sample of
      your app’s call stack. The shorter the interval you specify, the faster
      you reach the file size limit for the recorded data.

   #. Specify the **File size limit**, in megabytes (MB), for the recorded data
      that’s written to the connected device. When you stop recording, Android
      Studio parses this data and displays it in the profiler window. So, if you
      increase the limit and record a large amount of data, Android Studio takes
      much longer to parse the file and may become unresponsive.

      **Note:** If you use a connected device running Android 8.0 (API level 26)
      or higher, there is no limit on the file size of the trace data, and this
      value is ignored. However, you still need to be careful about how much
      data the device collects after each recording—Android Studio may have
      difficulty parsing large trace files. For example, if you’re recording
      either a sampled trace with a short sampling interval or an instrumented
      trace while your app calls many methods in a short time, you’ll generate
      large trace files quickly.

   #. To accept the changes and continue making changes to other configurations,
      click **Apply**. To accept all applied changes and close the dialog, click
      **OK**.

   .. rubric:: Record CPU activity with the Debug API
      :name: debug-api

   You can use the `Debug API <#/reference/android/os/Debug>`__ to give your
   app the ability to start and stop the recording of CPU activity in the CPU
   Profiler.

   The CPU Profiler begins recording when your app calls
   `startMethodTracing(String tracePath) <#/reference/android/os/Debug#startMethodTracing(java.lang.String)>`__,
   and the CPU Profiler stops recording when your app calls
   `stopMethodTracing() <#/reference/android/os/Debug#stopMethodTracing()>`__.
   While recording CPU activity that’s triggered using this API, the CPU
   profiler shows **Debug API** as the active CPU recording configuration.

   To control the recording of CPU activity with the ``Debug`` API, deploy your
   instrumented app to a device running Android 8.0 (API level 26) or higher.
   API-initiated recording is supported in profileable apps, however Android
   Studio profilers require a debuggable app to display the recording status in
   the UI.

   .. note::

      **Important:** The ``Debug`` API is intended to be used separately from
      other means for starting and stopping the recording of CPU activity, such
      as the buttons in the CPU Profiler graphical user interface and the
      setting in the recording configuration for automatic recording on app
      startup.

      Due to the buffer size limit of 8 MB, the
      ``startMethodTracing(String tracePath)`` method in the ``Debug`` API is
      designed for short intervals or scenarios that are hard to start/stop
      recording manually. For longer periods of recording, use the profiler UI
      in Android Studio.

   For more information, see `Generate trace logs by instrumenting your app <#/studio/profile/generate-trace-logs>`__.

   .. rubric:: Record CPU activity during app startup
      :name: trace-startup

   To begin recording CPU activity automatically during app startup, do the
   following:

   #. Select **Run > Edit Configurations**.
   #. In the **Profiling** tab, check the box next to **Start recording a method
      trace on startup**.
   #. Select a CPU recording configuration from the menu.
   #. Click **Apply**.
   #. Deploy your app to a device running Android 8.0 (API level 26) or higher
      by selecting **Run > Profile**.

Last updated 2023-04-12 UTC.

.. |image-cpu-profiler| image:: https://developer.android.google.cn/static/studio/images/profile/cpu-profiler.png
.. |image-sample-java-methods| image:: https://developer.android.google.cn/static/studio/images/profile/sample-java-methods.png
.. |image-ic_plus| image:: https://developer.android.google.cn/static/studio/images/buttons/ic_plus.png
   :class: inline-icon

/Export traces
==============

.. https://developer.android.google.cn/studio/profile/export-traces?hl=en

.. container:: devsite-article-body clearfix

   After you record CPU activity with the CPU profiler, you can export the data
   as a ``.trace`` file to share with others or inspect later.

   To export a trace file from the CPU timeline, do the following:

   #. In the CPU timeline, right-click the recorded method trace or system trace
      that you want to export.
   #. Select **Export trace** from the menu.
   #. Browse to where you want to save the file, specify the file name, and
      click **OK**.

   To export a trace file from the **Sessions** pane, do the following:

   #. In the **Sessions** pane, right-click the recorded trace that you want to
      export.
   #. Click the **Export method trace** or **Export system trace** button at the
      right of the session entry.
   #. Browse to where you want to save the file, specify the file name, and
      click **OK**.

Last updated 2023-04-12 UTC.

/Import traces
==============

.. https://developer.android.google.cn/studio/profile/import-traces?hl=en

.. container:: devsite-article-body clearfix

   You can import ``.trace`` files created with the `Debug
   API <#/reference/android/os/Debug>`__ or CPU Profiler.

   Import your trace file by clicking **Start new profiler session** |image-ic_plus| in
   the profiler’s **Sessions** pane and then selecting **Load from file**.

   You can inspect an imported trace in the CPU Profiler much as you do with
   traces captured directly in the CPU Profiler, with the following exceptions:

   -  CPU activity is not represented along the CPU timeline (except in System
      Trace).
   -  The timeline in the **Threads** section does not show thread states such
      as running, waiting, or sleeping (except in System Trace).

Last updated 2023-04-12 UTC.

.. |image-ic_plus| image:: https://developer.android.google.cn/static/studio/images/buttons/ic_plus.png
   :class: inline-icon

/Inspect traces
===============

.. https://developer.android.google.cn/studio/profile/inspect-traces?hl=en

.. container:: devsite-article-body clearfix

   The trace view in the CPU Profiler provides several ways to view information
   from recorded traces.

   For method traces and function traces, you can view the **Call Chart**
   directly in the **Threads** timeline and the **Flame Chart**, **Top Down**,
   **Bottom Up**, and **Events** tabs from the **Analysis** pane. For callstack
   frames, you can view the part of the code that has been executed, and why it
   was invoked. For system traces, you can view the **Trace Events** directly in
   the **Threads** timeline, and the **Flame Chart**, **Top Down**, **Bottom
   Up**, and **Events** tabs from the **Analysis** pane.

   `Mouse and keyboard shortcuts <#/studio/profile/record-traces#ui-shortcuts>`__
   are available for easier navigation of **Call Charts** or **Trace Events**.

   .. rubric:: Inspect traces using the Call Chart
      :name: call_chart

   The **Call Chart** provides a graphical representation of a method trace or
   function trace, where the period and timing of a call is represented on the
   horizontal axis, and its callees are shown along the vertical axis. Calls to
   system APIs are shown in orange, calls to your app’s own methods are shown in
   green, and calls to third-party APIs (including Java language APIs) are shown
   in blue. Figure 4 shows an example call chart and illustrates the concept of
   self time, children time, and total time for a given method or function. You
   can learn more about these concepts in the section on how to `inspect traces using Top Down and Bottom Up <#top_down_bottom_up>`__.

   |image-call_chart_1-2X|

   **Figure 1.** An example call chart that illustrates self, children, and
   total time for method D.

   **Tip:** To jump the source code of a method or function, right-click it and
   select **Jump to Source**. This works from any of the Analysis pane tabs.

   .. rubric:: Inspect traces using the Flame Chart tab
      :name: flame_chart

   The **Flame Chart** tab provides an inverted call chart that aggregates
   identical call stacks. That is, identical methods or functions that share the
   same sequence of callers are collected and represented as one longer bar in a
   flame chart (rather than displaying them as multiple shorter bars, as shown
   in a call chart). This makes it easier to see which methods or functions
   consume the most time. However, this also means that the horizontal axis
   doesn't represent a timeline; instead, it indicates the relative amount of
   time each method or function takes to execute.

   To help illustrate this concept, consider the call chart in Figure 2. Note
   that method D makes multiple calls to B (B\ :sub:`1`, B\ :sub:`2`, and
   B\ :sub:`3`), and some of those calls to B make a call to C (C\ :sub:`1` and
   C\ :sub:`3`).

   |image-call_chart_2-2X|

   **Figure 2.** A call chart with multiple method calls that share a common
   sequence of callers.

   Because B\ :sub:`1`, B\ :sub:`2`, and B\ :sub:`3` share the same sequence of
   callers (A → D → B) they are aggregated, as shown in Figure 3. Similarly,
   C\ :sub:`1` and C\ :sub:`3` are aggregated because they share the same
   sequence of callers (A → D → B → C); note that C\ :sub:`2` is not included
   because it has a different sequence of callers (A → D → C).

   |image-flame_chart_aggregation-2X|

   **Figure 3.** Aggregating identical methods that share the same call stack.

   The aggregated calls are used to create the flame chart, as shown in Figure
   4. Note that, for any given call in a flame chart, the callees that consume
   the most CPU time appear first.

   |image-flame_chart-2X|

   **Figure 4.** A flame chart representation of the call chart shown in figure
   5.

   .. rubric:: Inspect traces using Top Down and Bottom Up
      :name: top_down_bottom_up

   The **Top Down** tab displays a list of calls in which expanding a method or
   function node displays its callees. Figure 5 shows a top down graph for the
   call chart in Figure 1. Each arrow in the graph points from a caller to a
   callee.

   As shown in Figure 5, expanding the node for method A in the **Top Down** tab
   displays its callees, methods B and D. After that, expanding the node for
   method D exposes its callees, methods B and C, and so on. Similar to the
   **Flame chart** tab, the top down tree aggregates trace information for
   identical methods that share the same call stack. That is, the **Flame
   chart** tab provides a graphical representation of the **Top down** tab.

   The **Top Down** tab provides the following information to help describe CPU
   time spent on each call (times are also represented as a percentage of the
   thread’s total time over the selected range):

   -  **Self:** the time the method or function call spent executing its own
      code and not that of its callees, as illustrated in Figure 1 for method D.
   -  **Children:** the time the method or function call spent executing its
      callees and not its own code, as illustrated in Figure 1 for method D.
   -  **Total:** the sum of the method’s **Self** and **Children** time. This
      represents the total time the app spent executing a call, as illustrated
      in Figure 1 for method D.

   .. container:: cols

      .. container:: col-8

         |image-top_down_tree-2X|
         **Figure 5.** A Top Down tree.

      .. container:: col-8

         |image-bottom_up_tree-2X|
         **Figure 6.** A Bottom Up tree for method C from Figure 5.

   The **Bottom Up** tab displays a list of calls in which expanding a function
   or method’s node displays its callers. Using the example trace shown in
   Figure 5, figure 6 provides a bottom up tree for method C. Opening the node
   for method C in the bottom up tree displays each of its unique callers,
   methods B and D. Note that, although B calls C twice, B appears only once
   when expanding the node for method C in the bottom up tree. After that,
   expanding the node for B displays its caller, methods A and D.

   The **Bottom Up** tab is useful for sorting methods or functions by those
   that consume the most (or least) CPU time. You can inspect each node to
   determine which callers spend the most CPU time invoking those methods or
   functions. Compared to the top down tree, timing info for each method or
   function in a bottom up tree is in reference to the method at the top of each
   tree (top node). CPU time is also represented as a percentage of the thread’s
   total time during that recording. The following table helps explain how to
   interpret timing information for the top node and its callers (sub-nodes).

   .. list-table::
      :widths: 12 28 28 12
      :header-rows: 1

      - 

         - 
         - Self
         - Children
         - Total
      - 

         - Method or function at the top of the bottom up tree (top node)
         - Represents the total time the method or function spent executing its
            own code and not that of its callees. Compared to the top down tree,
            this timing information represents a sum of all calls to this method
            or function over the duration of the recording.
         - Represents the total time the method or function spent executing its
            callees and not its own code. Compared to the top down tree, this
            timing information represents the sum of all calls to this method or
            function's callees over the duration of the recording.
         - The sum of the self time and children time.
      - 

         - Callers (sub-nodes)
         - Represents the total self time of the callee when being called by the
            caller. Using the bottom up tree in Figure 6 as an example, the self
            time for method B would equal the sum of the self times for each
            execution of method C when called by B.
         - Represents the total children time of the callee when being invoked
            by the caller. Using the bottom up tree in Figure 6 as an example,
            the children time for method B would equal the sum of the children
            times for each execution of method C when called by B.
         - The sum of the self time and children time.

   **Note:** For a given recording, Android Studio stops collecting new data
   when the profiler reaches the file size limit (however, this does not stop
   the recording). This typically happens much more quickly when performing
   instrumented traces because this type of tracing collects more data in a
   shorter time, compared to a sampled trace. If you extend the inspection time
   into a period of the recording that occurred after reaching the limit, timing
   data in the trace pane does not change (because no new data is available).
   Additionally, the trace pane displays **NaN** for timing information when you
   select only the portion of a recording that has no data available.

   .. rubric:: Inspect traces using the Events table
      :name: events-table

   The Events table lists all calls in the currently selected thread. You can
   sort them by clicking on the column headers. By selecting a row in the table,
   you can navigate the timeline to the start and end time of the selected call.
   This allows you to accurately locate events on the timeline.

   |image-system-trace-events-table|

   **Figure 7.** Viewing the Events tab in the Analysis pane.

   .. rubric:: Inspect callstack frames
      :name: callstack-frame

   Callstacks are useful to understand which part of the code has been executed,
   and why it was invoked. If a **Callstack Sample Recording** is collected for
   a Java/Kotlin program, the callstack usually includes not only Java/Kotlin
   code, but also frames from the JNI native code, Java virtual machine (e.g.,
   ``android::AndroidRuntime::start``), and the system kernel
   (``[kernel.kallsyms]+offset``). This is because a Java/Kotlin program
   typically executes through a Java virtual machine. Native code is required to
   run the program itself and for the program to talk with the system and
   hardware. The profiler presents these frames for precision; however,
   depending on your investigation, you may or may not find these extra call
   frames useful. The profiler provides a way to collapse frames that you are
   not interested in so that you can hide information that is irrelevant for
   your investigation.

   In the example below, the trace below has many frames labeled
   ``[kernel.kallsyms]+offset``, which are not currently useful for development.

   |Example call trace|

   To collapse these frames into one, you would select the **Collapse frames**
   button from the toolbar, choose the paths to collapse, and select the
   **Apply** button to apply your changes. In this example, the path is
   ``[kernel.kallsyms]``.

   |Example of simpleperf menu|

   Doing so collapses the frames corresponding to the selected path on both the
   left and right panels, as shown below.

   |Example of simpleperf collapsed frames|

   .. rubric:: Inspect system traces
      :name: system-trace

   When inspecting a system trace, you can examine **Trace Events** in the
   **Threads** timeline to view the details of the events occurring on each
   thread. Hover your mouse pointer over an event to see the name of the event
   and the time spent in each state. Click an event to see more information in
   the **Analysis** pane.

   .. rubric:: Inspect system traces: CPU cores
      :name: cpu-cores

   In addition to CPU scheduling data, system traces also include CPU frequency
   by core. This shows the amount of activity on each core and may give you an
   idea of which ones are the `"big" or "little" cores <https://en.wikipedia.org/wiki/ARM_big.LITTLE>`__ in modern mobile
   processors.

   |image-system-trace-cpu-cores|

   **Figure 8.** Viewing CPU activity and trace events for the render thread.

   The **CPU Cores** pane (as shown in Figure 8) shows thread activity scheduled
   on every core. Hover your mouse pointer over a thread activity to see which
   thread this core is running on at that particular time.

   For additional information on inspecting system trace information, see the
   `Investigate UI performance problems <#/topic/performance/tracing/navigate-report#analysis>`__ section of
   the ``systrace`` documentation.

   .. rubric:: Inspect system traces: Frame rendering timeline
      :name: frame-render

   You can inspect how long it takes your app to render each frame on the main
   thread and ``RenderThread`` to investigate bottlenecks that cause UI jank and
   low framerates. To learn about how to use system traces to investigate and
   help reduce UI jank, see `UI jank detection <#/studio/profile/jank-detection>`__.

   .. rubric:: Inspect system traces: Process Memory (RSS)
      :name: system-traces-rss

   For apps deployed to devices running Android 9 or higher, the **Process
   Memory (RSS)** section shows the amount of physical memory currently in use
   by the app.

   |image-system-trace-process-memory|

   **Figure 9.** Viewing physical memory in the profiler.

   **Total**

   This is the total amount of *physical* memory currently in use by your
   process. On Unix-based systems, this is known as the "Resident Set Size", and
   is the combination of all the memory used by anonymous allocations, file
   mappings, and shared memory allocations.

   For Windows developers, Resident Set Size is analogous to the Working Set
   Size.

   **Allocated**

   This counter tracks how much physical memory is currently used by the
   process's normal memory allocations. These are allocations which are
   anonymous (not backed by a specific file) and private (not shared). In most
   applications, these are made up of heap allocations (with ``malloc`` or
   ``new``) and stack memory. When swapped out from physical memory, these
   allocations are written to the system swap file.

   **File Mappings**

   This counter tracks the amount of physical memory the process is using for
   file mappings – that is, memory mapped from files into a region of memory by
   the memory manager.

   **Shared**

   This counter tracks how much physical memory is being used to share memory
   between this process and other processes in the system.

Last updated 2024-01-03 UTC.

.. |image-call_chart_1-2X| image:: https://developer.android.google.cn/static/studio/images/profile/call_chart_1-2X.png
   :width: 699px
.. |image-call_chart_2-2X| image:: https://developer.android.google.cn/static/studio/images/profile/call_chart_2-2X.png
   :width: 696px
.. |image-flame_chart_aggregation-2X| image:: https://developer.android.google.cn/static/studio/images/profile/flame_chart_aggregation-2X.png
   :width: 695px
.. |image-flame_chart-2X| image:: https://developer.android.google.cn/static/studio/images/profile/flame_chart-2X.png
   :width: 675px
.. |image-top_down_tree-2X| image:: https://developer.android.google.cn/static/studio/images/profile/top_down_tree-2X.png
   :width: 319px
.. |image-bottom_up_tree-2X| image:: https://developer.android.google.cn/static/studio/images/profile/bottom_up_tree-2X.png
   :width: 321px
.. |image-system-trace-events-table| image:: https://developer.android.google.cn/static/studio/images/profile/system-trace-events-table.png
.. |Example call trace| image:: https://developer.android.google.cn/static/studio/images/profile/simpleperf-example-trace.png
.. |Example of simpleperf menu| image:: https://developer.android.google.cn/static/studio/images/profile/simpleperf_menu_dark.png
.. |Example of simpleperf collapsed frames| image:: https://developer.android.google.cn/static/studio/images/profile/simpleperf_collapsed_dark.png
.. |image-system-trace-cpu-cores| image:: https://developer.android.google.cn/static/studio/images/profile/system-trace-cpu-cores.png
.. |image-system-trace-process-memory| image:: https://developer.android.google.cn/static/studio/images/profile/system-trace-process-memory.png

/Detect UI jank
===============

.. https://developer.android.google.cn/studio/profile/jank-detection?hl=en

.. container:: devsite-article-body clearfix

   Android renders UI by generating a frame from your app and displaying it on
   the screen. If your app suffers from slow UI rendering, then the system is
   forced to skip frames. When this happens, the user perceives a recurring
   flicker on their screen, which is referred to as *jank*.

   When jank occurs, it's usually because of some deceleration or blocking async
   call on the UI thread (in most apps, it's the main thread). You can use
   system traces to identify where the problem is.

   .. rubric:: Detect jank on Android 12 and higher
      :name: detect_jank_on_android_12_and_higher

   For devices using Android 12 (API level 31) or higher, a captured trace is
   shown in the **Janky frames** track under the **Display** pane in the CPU
   Profiler.

   To detect jank,

   #. In Android Studio, select **View > Tool Windows > Profiler** or click
      **Profile** |image-toolbar-android-profiler_dark| in the toolbar.

      If prompted by the **Select Deployment Target** dialog, choose the device
      to which to deploy your app for profiling. If you've connected a device
      over USB but don't see it listed, ensure that you have `enabled USB debugging <#/studio/debug/dev-options#enable>`__.

   #. Click anywhere in the **CPU** timeline to open the CPU Profiler.

   #. Select **System Trace** from the configurations menu in the CPU Profiler
      and click **Record**. After you finish interacting with your app, click
      **Stop**.

   #. You should see the **Janky frames** track under **Display**. By default,
      the Profiler only shows janky frames as candidates for investigation.
      Within each janky frame, the red portion highlights the duration the frame
      takes past its rendering deadline. |Screenshot of the Janky frames track|

   #. Once you find a janky frame, click on it; optionally, you can press **M**
      to adjust the zoom to focus on the selected frame. The relevant events are
      highlighted in these threads: the main thread, **RenderThread** and **GPU
      completion**. |Screenshot of Profiler displaying Janky frames and main
      threads|

   #. You can optionally see all frames or a breakdown of the rendering time by
      toggling the checkboxes **All Frames** and **Lifecycle**, respectively.
      |Screenshot of Profiler as above but with All Frames and Lifecycle
      checkboxes checked|

   .. rubric:: Detect jank on Android 11
      :name: jank-detection-android-11

   For devices using Android 11 (API level 30), a captured trace is shown in the
   **Frame Lifecycle** section in the CPU Profiler.

   |Frame Lifecycle section with different tracks|

   The **Frame Lifecycle** section contains the layer name and four tracks. Each
   track represents one stage in the frame rendering pipeline. The **Frame
   Lifecycle** elements are as follows:

   #. **Frame Lifecycle (Layer name)**: The section title contains the layer
      name in parentheses. A *layer* is a single unit of composition.
   #. **Application**: This track shows the time from when the buffer was
      dequeued by the app to when it was enqueued back. This usually corresponds
      to the trace events in ``RenderThread``.
   #. **Wait for GPU**: This track shows how long the buffer was owned by the
      GPU. This is the time from when the buffer is sent to the GPU to when the
      GPU finishes its work on the buffer. **This does not indicate that the GPU
      was working only on this buffer during this time.** For detailed info on
      what the GPU works on during a given time, you may want to use `Android GPU Inspector <#/agi>`__.
   #. **Composition**: This track shows the time starting from when
      SurfaceFlinger latches on to the buffer and sends it for composition, to
      when the buffer is sent to the display.
   #. **Frames on display**: This track shows how long the frame was on the
      screen.

   The **Frame Lifecycle** section illustrates how a frame buffer moves between
   different stages of the rendering pipeline. The frames are color coded by
   frame number so that it's easier to track a particular frame.

   Android Studio also shows all frames in the trace in a table format in the
   **All Frames** tab.

   |A table of all the frames in the trace in the All Frames tab|

   The **Frame #**, **Application**, **Wait for GPU**, and **Composition**
   columns represent the same data as the tracks in the **Frame Lifecycle**
   section as above. The column **Frame Duration** represents the time from the
   start of **Application** to the start of **Frames on Display**. This is
   essentially how long it takes to render a frame end-to-end.

   You can sort the frames table by any column to quickly find the shortest or
   longest frame. The table also supports pagination controls that help you
   navigate through hundreds of frames.

   To detect and investigate jank on Android 11, follow these steps:

   #. Sort the **All Frames** table by the **Application** column in descending
      order, so that the frames that take the longest appear first.

      |Application column sorted in descending order|

   #. Find the longest running frames and select the table row. This zooms in on
      the selected frame in the timeline view to the left.

      |Timeline view alongside Frames table|

   #. Look for relevant threads in the **Frame Lifecycle** and **Threads**
      sections.

      |Frame Lifecycle and Threads sections|

   .. rubric:: Detect jank on Android 10 and lower
      :name: jank-detection-android-10-lower

   For devices using Android 10 (API level 29) and lower, relevant OS graphics
   pipeline information is displayed in a single section on the CPU Profiler
   system trace called **Display**.

   |The display UI window|

   -  **Frames**: This section shows the UI thread and ``RenderThread`` trace
      events in your app. Events that are longer than 16ms are colored red to
      highlight potential janky frames because they exceed the deadline to
      render at 60 frames per second (fps).
   -  **SurfaceFlinger**: This section shows when the SurfaceFlinger processes
      the frame buffers. SurfaceFlinger is a system process that is responsible
      for sending buffers to display.
   -  **VSYNC**: This section displays the VSYNC, a signal that synchronizes the
      display pipeline. The track displays the VSYNC-app signal, which shows
      when your app is starting too late. Typically, this occurs because the UI
      thread is busy. It causes a visible flicker to appear on your screen
      during an animation and adds extra input latency until the animation or
      scroll completes. This is especially important to view for
      high-refresh-rate displays, as they may occur more frequently than 60
      times per second or at a variable rate.
   -  **BufferQueue**: This section shows how many frame buffers are queued up
      and are waiting for SurfaceFlinger to consume. For apps deployed to
      devices running Android 9 (API level 28) or higher, this track shows the
      buffer count of the app's surface
      `BufferQueue <https://source.android.google.cn/devices/graphics#bufferqueue>`__
      (``0``, ``1``, or ``2``). BufferQueue can help you understand the state of
      image buffers as they move between the Android graphics components. For
      example, a value of ``2`` means that the app is currently triple-buffered,
      which results in extra input latency.

   The **Display** section provides useful signals to detect potential jank—for
   example, when the UI thread or ``RenderThread`` takes longer than 16 ms. To
   investigate exact details of what caused the jank, you can probe the
   **Threads** section, which shows the threads relevant to UI rendering.

   |The Threads section under Display|

   In the figure above, the **Threads** section shows the UI thread
   (``java.com.google.samples.apps.iosched``), ``RenderThread``, and the
   ``GPU completion`` thread. These are the threads relevant to UI rendering and
   may contribute to jank.

   To detect jank on Android 10 or lower, follow these steps:

   #. Look at the **Frames** track in **Display**. The red frames are candidates
      for investigation.

      |The Frames section under Display|

   #. Once you find a potentially janky frame, zoom in by pressing ``W`` or
      scrolling the mouse wheel while holding Control (Command on macOS).
      Continue zooming in until you start to see the trace events in the UI
      thread and ``RenderThread``.

      |Trace events in the UI thread and RenderThread|

      In the figure above, ``Choreographer#doFrame`` shows when the UI thread
      calls `Choreographer <#/reference/android/view/Choreographer>`__ to
      coordinate animation, view layout, image drawing, and related processes.
      ``DrawFrames`` shows when ``RenderThread`` forms and issues actual drawing
      commands to the GPU.

   #. If you see a particularly long trace event, you can zoom in further and
      find out what may have contributed to the slow rendering. The figure above
      shows ``inflate`` in the UI thread, which means the app is spending time
      on inflating the layout. When you zoom into one of the ``inflate`` events,
      you can find out exactly how long each UI component is taking, as shown
      below.

      |Menu showing precise duration of a UI component|

   .. rubric:: Learn more
      :name: learn-more

   To learn more about how to reduce jank, see `Common sources of jank <#/topic/performance/vitals/render#common-jank>`__.

Last updated 2023-04-12 UTC.

.. |image-toolbar-android-profiler_dark| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-android-profiler_dark.png
   :class: inline-icon
.. |Screenshot of the Janky frames track| image:: https://developer.android.google.cn/static/studio/images/profile/jank_detection-janky_frames.png
.. |Screenshot of Profiler displaying Janky frames and main threads| image:: https://developer.android.google.cn/static/studio/images/profile/jank_detection-janky_frames_detailed.png
.. |Screenshot of Profiler as above but with All Frames and Lifecycle checkboxes checked| image:: https://developer.android.google.cn/static/studio/images/profile/jank_detection-allframes_lifecycle_checkboxed.png
.. |Frame Lifecycle section with different tracks| image:: https://developer.android.google.cn/static/studio/images/profile/jank_detection-frame-lifecycle-tracks.png
.. |A table of all the frames in the trace in the All Frames tab| image:: https://developer.android.google.cn/static/studio/images/profile/jd-all-frames.png
.. |Application column sorted in descending order| image:: https://developer.android.google.cn/static/studio/images/profile/jank_detection-app-col-sorted.png
.. |Timeline view alongside Frames table| image:: https://developer.android.google.cn/static/studio/images/profile/jank_detection-timeline-and-frames-table.png
.. |Frame Lifecycle and Threads sections| image:: https://developer.android.google.cn/static/studio/images/profile/jank_detection-frame-lifecycle-threads.png
.. |The display UI window| image:: https://developer.android.google.cn/static/studio/images/profile/jank_detection-system_trace.png
.. |The Threads section under Display| image:: https://developer.android.google.cn/static/studio/images/profile/jank_detection-threads.png
.. |The Frames section under Display| image:: https://developer.android.google.cn/static/studio/images/profile/jank_detection-frames-track.png
.. |Trace events in the UI thread and RenderThread| image:: https://developer.android.google.cn/static/studio/images/profile/jank_detection-trace-events-ui-renderthread.png
.. |Menu showing precise duration of a UI component| image:: https://developer.android.google.cn/static/studio/images/profile/jank_detection-ui-component-duration.png

/Generate trace logs
====================

.. https://developer.android.google.cn/studio/profile/generate-trace-logs?hl=en

.. container:: devsite-article-body clearfix

   To generate a method trace of your app's execution, you can instrument your
   app using the `Debug <#/reference/android/os/Debug>`__ class.
   Instrumenting your app this way gives you more control over exactly when the
   device starts and stops recording tracing information. The device also saves
   your trace logs using the names you specify, so you can easily identify each
   log later. You can then view each trace log using the Android Studio `CPU Profiler <#/studio/profile/cpu-profiler>`__.

   You can also `start and stop tracing in the CPU Profiler <#/studio/profile/cpu-profiler#method_traces>`__ without
   instrumenting your app's code.

   Before you start generating trace logs, make sure your app has added logic to
   save trace logs to its `app-specific directory <#/training/data-storage/app-specific>`__.

   .. rubric:: Instrument your app
      :name: instrument

   To create trace logs, call
   `startMethodTracing() <#/reference/android/os/Debug#startMethodTracing()>`__
   where you want the system to start logging tracing data.

   In the call, you can specify the name for the ``.trace`` file, and the system
   saves it to a package-specific directory that's intended for persistent app
   data on the target device—this is the same directory that is returned by
   `getExternalFilesDir() <#/reference/android/content/Context#getExternalFilesDir(java.lang.String)>`__
   and is located in the ``~/sdcard/`` directory on most devices. This file
   contains the binary method trace data and a mapping table with thread and
   method names. To stop tracing, call
   `stopMethodTracing() <#/reference/android/os/Debug#stopMethodTracing()>`__.

   The following sample starts and stops recording a trace log with the name
   ``sample.trace``:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               // Starts recording a trace log with the name you provide. For example, the
               // following code tells the system to start recording a .trace file to the
               // device with the name "sample.trace".
               Debug.startMethodTracing("sample")

               // The system begins buffering the generated trace data, until your
               // application calls <code><a href="/reference/android/os/Debug.html#stopMethodTracing()">stopMethodTracing()</a></code>, at which time it writes
               // the buffered data to the output file.
               Debug.stopMethodTracing()

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               // Starts recording a trace log with the name you provide. For example, the
               // following code tells the system to start recording a .trace file to the
               // device with the name "sample.trace".
               Debug.startMethodTracing("sample");
               ...
               // The system begins buffering the generated trace data, until your
               // application calls <code><a href="/reference/android/os/Debug.html#stopMethodTracing()">stopMethodTracing()</a></code>, at which time it writes
               // the buffered data to the output file.
               Debug.stopMethodTracing();

   Note that if your app calls the
   `startMethodTracing() <#/reference/android/os/Debug#startMethodTracing()>`__
   again without changing the name of the trace log, it overwrites the existing
   log saved to the device. To learn how to dynamically change the name of each
   trace log, go to the section about `saving multiple logs <#save_multiple_logs>`__.

   If the system reaches the maximum buffer size before you call
   `stopMethodTracing() <#/reference/android/os/Debug#stopMethodTracing()>`__,
   the system stops tracing and sends a notification to the console. The methods
   that start and stop traces work across your entire app process. That is, you
   could call
   `startMethodTracing() <#/reference/android/os/Debug#startMethodTracing()>`__
   in your activity's
   `onCreate(Bundle) <#/reference/android/app/Activity#onCreate(android.os.Bundle)>`__
   method, and call
   `stopMethodTracing() <#/reference/android/os/Debug#stopMethodTracing()>`__
   in that activity's
   `onDestroy() <#/reference/android/app/Activity#onDestroy()>`__ method.

   Note that your app runs more slowly when profiling is enabled. That is, you
   shouldn't use the profiling data to determine absolute timings (such as,
   "method ``foo()`` takes 2.5 seconds to run"). The timing information in the
   trace logs are useful only when comparing it to previous trace logs, so you
   can see if recent changes make your app faster or slower.

   When deploying to devices running Android 5.0 (API level 21) and higher, you
   can use sample-based profiling to profile with less runtime performance
   impact. To enable sample profiling, call
   `startMethodTracingSampling() <#/reference/android/os/Debug#startMethodTracingSampling(java.lang.String,%20int,%20int)>`__
   (instead of calling ``startMethodTracing()``) with a specified sampling
   interval. The system gathers samples periodically until your app calls
   `stopMethodTracing() <#/reference/android/os/Debug#stopMethodTracing()>`__.

   .. rubric:: Save multiple logs
      :name: save_multiple_logs

   If your app starts and stops a method trace multiple times without specifying
   a new name for the trace log, the device overwrites the older trace log with
   the new one—that is, it only keeps the most recent trace log. To save
   multiple trace logs to your device, dynamically rename the trace log each
   time your app calls
   `startMethodTracing() <#/reference/android/os/Debug#startMethodTracing()>`__.
   The sample below uses the
   `SimpleDateFormat <#/reference/java/text/SimpleDateFormat>`__ class to
   include the current date and time when naming each trace log:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kotlin

            .. code:: prettyprint

               // Uses the <code><a href="/reference/java/text/SimpleDateFormat.html">SimpleDateFormat</a></code> class to create a String with
               // the current date and time.
               val dateFormat: DateFormat = SimpleDateFormat("dd_MM_yyyy_hh_mm_ss", Locale.getDefault())
               val logDate: String = dateFormat.format(Date())
               // Applies the date and time to the name of the trace log.
               Debug.startMethodTracing("sample-$logDate")

         .. container:: section

            .. rubric:: Java
               :name: java

            .. code:: prettyprint

               // Uses the <code><a href="/reference/java/text/SimpleDateFormat.html">SimpleDateFormat</a></code> class to create a String with
               // the current date and time.
               SimpleDateFormat dateFormat =
                       new SimpleDateFormat("dd_MM_yyyy_hh_mm_ss", Locale.getDefault());
               String logDate = dateFormat.format(new Date());
               // Applies the date and time to the name of the trace log.
               Debug.startMethodTracing(
                       "sample-" + logDate);

   .. rubric:: Access trace logs on the device
      :name: access

   After the system creates the trace log on your device, you can access the
   file in one of the following ways:

   -  `Use the Device Explorer <#/studio/debug/device-file-explorer>`__. To open
      the Device Explorer, click **View > Tool Windows > Device Explorer** (or
      click the **Device Explorer** |image-device-explorer-icon| button in the tool window bar). As
      shown in figure 1 you can locate the ``.trace`` files by navigating to
      your app's package-specific directory.

      |image-locating_log_with_device_explorer-2X|

      **Figure 1.** Locating the trace logs using the Device Explorer.

   -  Copy the file to your local machine using the ``adb pull`` command. The
      command below copies a trace log named ``sample.trace`` from the device to
      the ``~/Documents/trace-logs/`` directory of your local machine.

      .. code:: none

         adb pull path-on-device/sample.trace ~/Documents/trace-logs/

   You can then `import the trace file <#/studio/profile/cpu-profiler#import-traces>`__ with the CPU Profiler.

Last updated 2024-01-03 UTC.

.. |image-device-explorer-icon| image:: https://developer.android.google.cn/static/studio/images/buttons/device-explorer-icon.png
   :class: inline-icon
.. |image-locating_log_with_device_explorer-2X| image:: https://developer.android.google.cn/static/studio/images/profile/locating_log_with_device_explorer-2X.png
   :height: 380px

/Inspect your app's memory usage
================================

.. https://developer.android.google.cn/studio/profile/memory-profiler?hl=en

.. container:: devsite-article-body clearfix

   The Memory Profiler is a component in the `Android Profiler <#/studio/preview/features/android-profiler>`__ that helps you
   identify memory leaks and memory churn that can lead to stutter, freezes, and
   even app crashes. It shows a realtime graph of your app's memory use and lets
   you capture a heap dump, force garbage collections, and track memory
   allocations.

   To open the Memory Profiler, follow these steps:

   #. Click **View > Tool Windows > Profiler** (you can also click **Profile**
      |image-toolbar-android-profiler| in the toolbar).
   #. Select the device and app process you want to profile from the Android
      Profiler toolbar. If you've connected a device over USB but don't see it
      listed, ensure that you have `enabled USB debugging <#/studio/debug/dev-options#enable>`__.
   #. Click anywhere in the **MEMORY** timeline to open the Memory Profiler.

   Alternatively, you can inspect your app memory from the command line with
   `dumpsys <#/studio/command-line/dumpsys>`__, and also `see GC events in logcat <#/studio/debug/am-logcat#memory-logs>`__.

   .. rubric:: Why you should profile your app memory
      :name: why-profile-memory

   Android provides a `managed memory environment <#/topic/performance/memory-overview>`__—when it determines that
   your app is no longer using some objects, the garbage collector releases the
   unused memory back to the heap. How Android goes about finding unused memory
   is constantly being improved, but at some point on all Android versions, the
   system must briefly pause your code. Most of the time, the pauses are
   imperceivable. However, if your app allocates memory faster than the system
   can collect it, your app might be delayed while the collector frees enough
   memory to satisfy your allocations. The delay could cause your app to skip
   frames and cause visible slowness.

   Even if your app doesn't exhibit slowness, if it leaks memory, it can retain
   that memory even while it's in the background. This behavior can slow the
   rest of the system's memory performance by forcing unnecessary garbage
   collection events. Eventually, the system is forced to kill your app process
   to reclaim the memory. Then when the user returns to your app, it must
   restart completely.

   To help prevent these problems, you should use the Memory Profiler to do the
   following:

   -  Look for undesirable memory allocation patterns in the timeline that might
      be causing performance problems.
   -  Dump the Java heap to see which objects are using up memory at any given
      time. Several heap dumps over an extended period of time can help identify
      memory leaks.
   -  Record memory allocations during normal and extreme user interaction to
      identify exactly where your code is either allocating too many objects in
      a short time or allocating objects that become leaked.

   For information about programming practices that can reduce your app's memory
   use, read `Manage your app's memory <#/topic/performance/memory>`__.

   .. rubric:: Memory Profiler overview
      :name: overview

   When you first open the Memory Profiler, you'll see a detailed timeline of
   your app's memory use and access tools to force garbage collection, capture a
   heap dump, and record memory allocations.

   |image-memory-profiler-callouts_2x|

   **Figure 1.** The Memory Profiler

   As indicated in figure 1, the default view for the Memory Profiler includes
   the following:

   #. A button to force a garbage collection event.

   #. A button to `capture a heap dump <#capture-heap-dump>`__.

      **Note:** A button to `record memory allocations <#record-allocations>`__
      appears to the right of the heap dump button only when connected to a
      device running Android 7.1 (API level 25) or lower.

   #. A dropdown menu to specify how frequently the profiler captures memory
      allocations. Selecting the appropriate option may help you `improve app performance while profiling <#performance>`__.

   #. Buttons to zoom in/out of the timeline.

   #. A button to jump forward to the live memory data.

   #. The event timeline, which shows the activity states, user input events,
      and screen rotation events.

   #. The memory use timeline, which includes the following:

      -  A stacked graph of how much memory is being used by each memory
         category, as indicated by the y-axis on the left and the color key at
         the top.
      -  A dashed line indicates the number of allocated objects, as indicated
         by the y-axis on the right.
      -  An icon for each garbage collection event.

   However, if you're using a device running Android 7.1 or lower, not all
   profiling data is visible by default. If you see a message that says,
   "Advanced profiling is unavailable for the selected process," you need to
   `enable advanced profiling <#/studio/preview/features/android-profiler#advanced-profiling>`__
   to see the following:

   -  Event timeline
   -  Number of allocated objects
   -  Garbage collection events

   On Android 8.0 and higher, advanced profiling is always enabled for
   debuggable apps.

   .. rubric:: How memory is counted
      :name: how-counted

   The numbers you see at the top of the Memory Profiler (figure 2) are based on
   all the private memory pages that your app has committed, according to the
   Android system. This count does not include pages shared with the system or
   other apps.

   |image-memory-profiler-counts_2x|

   **Figure 2.** The memory count legend at the top of the Memory Profiler

   The categories in the memory count are as follows:

   -  **Java**: Memory from objects allocated from Java or Kotlin code.

   -  **Native**: Memory from objects allocated from C or C++ code.

      Even if you're not using C++ in your app, you might see some native memory
      used here because the Android framework uses native memory to handle
      various tasks on your behalf, such as when handling image assets and other
      graphics—even though the code you've written is in Java or Kotlin.

   -  **Graphics**: Memory used for graphics buffer queues to display pixels to
      the screen, including GL surfaces, GL textures, and so on. (Note that this
      is memory shared with the CPU, not dedicated GPU memory.)

   -  **Stack**: Memory used by both native and Java stacks in your app. This
      usually relates to how many threads your app is running.

   -  **Code**: Memory that your app uses for code and resources, such as dex
      bytecode, optimized or compiled dex code, .so libraries, and fonts.

   -  **Others**: Memory used by your app that the system isn't sure how to
      categorize.

   -  **Allocated**: The number of Java/Kotlin objects allocated by your app.
      This does not count objects allocated in C or C++.

      When connected to a device running Android 7.1 and lower, this allocation
      count starts only at the time the Memory Profiler connected to your
      running app. So any objects allocated before you start profiling are not
      accounted for. However, Android 8.0 and higher includes an on-device
      profiling tool that keeps track of all allocations, so this number always
      represents the total number of Java objects outstanding in your app on
      Android 8.0 and higher.

   When compared to memory counts from the previous Android Monitor tool, the
   new Memory Profiler records your memory differently, so it might seem like
   your memory use is now higher. The Memory Profiler monitors some extra
   categories that increase the total, but if you only care about the Java heap
   memory, then the "Java" number should be similar to the value from the
   previous tool. Although the Java number probably doesn't exactly match what
   you saw in Android Monitor, the new number accounts for all physical memory
   pages that have been allocated to your app's Java heap since it was forked
   from Zygote. So this provides an accurate representation of how much physical
   memory your app is actually using.

   **Note:**\  When using devices running Android 8.0 (API level 26) and higher,
   the Memory Profiler also shows some false-positive native memory usage in
   your app that actually belongs to the profiling tools. Up to 10MB of memory
   is added for ~100k Java objects. In a future version of the IDE, these
   numbers will be filtered out of your data.

   .. rubric:: View memory allocations
      :name: record-allocations

   Memory allocations show you *how* each Java object and JNI reference in your
   memory was allocated. Specifically, the Memory Profiler can show you the
   following about object allocations:

   -  What types of objects were allocated and how much space they use.
   -  The stack trace of each allocation, including in which thread.
   -  When the objects were *deallocated* (only when using a device with Android
      8.0 or higher).

   To record Java and Kotlin allocations, select **Record Java / Kotlin
   allocations**, then select **Record**. If the device is running Android 8 or
   higher, the Memory Profiler UI transitions to a separate screen displaying
   the ongoing recording. You can interact with the mini timeline above the
   recording (for example, to change the selection range). To complete the
   recording, select **Stop** |image-toolbar-stop-new-2|.

   |Visualization of Java allocations in Memory Profiler|

   On Android 7.1 and lower, the memory profiler uses legacy allocation
   recording, which displays the recording on the timeline until you click
   **Stop**.

   After you select a region of the timeline (or when you finish a recording
   session with a device running Android 7.1 or lower), the list of allocated
   objects appears, grouped by class name and sorted by their heap count.

   **Note:**\  On Android 7.1 and lower, you can record a maximum of 65535
   allocations. If your recording session exceeds this limit, only the most
   recent 65535 allocations are saved in the record. (There is no practical
   limit on Android 8.0 and higher.)
   To inspect the allocation record, follow these steps:

   #. Browse the list to find objects that have unusually large heap counts and
      that might be leaked. To help find known classes, click the **Class Name**
      column header to sort alphabetically. Then click a class name. The
      **Instance View** pane appears on the right, showing each instance of that
      class, as shown in figure 3.

      -  Alternatively, you can locate objects quickly by clicking **Filter**
         |image-profiler_filter|, or by pressing Control+F (Command+F on Mac), and entering a
         class or package name in the search field. You can also search by
         method name if you select **Arrange by callstack** from the dropdown
         menu. If you want to use regular expressions, check the box next to
         **Regex**. Check the box next to **Match case** if your search query is
         case-sensitive.

   #. In the **Instance View** pane, click an instance. The **Call Stack** tab
      appears below, showing where that instance was allocated and in which
      thread.
   #. In the **Call Stack** tab, right-click any line and choose **Jump to
      Source** to open that code in the editor.

   |image-memory-profiler-allocations-detail_2x|

   **Figure 3.** Details about each allocated object appear in the **Instance
   View** on the right

   You can use the two menus above the list of allocated objects to choose which
   heap to inspect and how to organize the data.

   From the menu on the left, choose which heap to inspect:

   -  **default heap**: When no heap is specified by the system.
   -  **image heap**: The system boot image, containing classes that are
      preloaded during boot time. Allocations here are guaranteed to never move
      or go away.
   -  **zygote heap**: The copy-on-write heap where an app process is forked
      from in the Android system.
   -  **app heap**: The primary heap on which your app allocates memory.
   -  **JNI heap**: The heap that shows where Java Native Interface (JNI)
      references are allocated and released.

   From the menu on the right, choose how to arrange the allocations:

   -  **Arrange by class**: Groups all allocations based on class name. This is
      the default.
   -  **Arrange by package**: Groups all allocations based on package name.
   -  **Arrange by callstack**: Groups all allocations into their corresponding
      call stack.

   .. rubric:: Improve app performance while profiling
      :name: performance

   To improve app performance while profiling, the memory profiler samples
   memory allocations periodically by default. When testing on devices running
   API level 26 or higher, you can change this behavior by using the
   **Allocation Tracking** dropdown. The options available are as follows:

   -  **Full**: Captures all object allocations in memory. This is the default
      behavior in Android Studio 3.2 and earlier. If you have an app that
      allocates a lot of objects, you might observe visible slowdowns with your
      app while profiling.
   -  **Sampled**: Samples object allocations in memory at regular intervals.
      This is the default option and has less impact on app performance while
      profiling. Apps that allocate a lot of objects over a short span of time
      may still exhibit visible slowdowns.
   -  **Off**: Stops tracking your app's memory allocation.

   **Note:**\  By default, Android Studio stops tracking live allocation when
   performing a CPU recording and turns it back on after the CPU recording is
   done. You can change this behavior in the `CPU recording configuration dialog <#/studio/profile/cpu-profiler#configurations>`__.

   .. rubric:: View global JNI references
      :name: jni

   *Java Native Interface* (JNI) is a framework that allows Java code and native
   code to call one another.

   JNI references are managed manually by the native code, so it is possible for
   Java objects used by native code to be kept alive for too long. Some objects
   on the Java heap may become unreachable if a JNI reference is discarded
   without first being explicitly deleted. Also, it is possible to exhaust the
   global JNI reference limit.

   To troubleshoot such issues, use the **JNI heap** view in the Memory Profiler
   to browse all global JNI references and filter them by Java types and native
   call stacks. With this information, you can find when and where global JNI
   references are created and deleted.

   While your app is running, select a portion of the timeline that you want to
   inspect and select **JNI heap** from the drop-down menu above the class list.
   You can then inspect objects in the heap as you normally would and
   double-click objects in the **Allocation Call Stack** tab to see where the
   JNI references are allocated and released in your code, as shown in figure 4.

   |image-memory-profiler-jni-heap_2x|

   **Figure 4.** Viewing global JNI references

   To inspect memory allocations for your app’s JNI code, you must deploy your
   app to a device running Android 8.0 or higher.

   For more information on JNI, see `JNI tips <#/training/articles/perf-jni>`__.

   .. rubric:: Native Memory Profiler
      :name: native-memory-profiler

   The Android Studio Memory Profiler includes a Native Memory Profiler for apps
   deployed to physical and virtual devices running Android 10 and higher.

   The Native Memory Profiler tracks allocations/deallocations of objects in
   native code for a specific time period and provides the following
   information:

   -  **Allocations:** A count of objects allocated via ``malloc()`` or the
      ``new`` operator during the selected time period.
   -  **Deallocations:** A count of objects deallocated via ``free()`` or the
      ``delete`` operator during the selected time period.
   -  **Allocations Size:** The aggregated size in bytes of all allocations
      during the selected time period.
   -  **Deallocations Size:** The aggregated size in bytes of all freed memory
      during the selected time period.
   -  **Total Count:** The value in the **Allocations** column minus the value
      in the **Deallocations** column.
   -  **Remaining Size:** The value in the **Allocations Size** column minus the
      value in the **Deallocations Size** column.

   |Native Memory Profiler|

   To record native allocations on devices running Android 10 and higher, select
   **Record native allocations**, then select **Record**. The recording
   continues until you click **Stop** |image-toolbar-stop-new-1|, after which the Memory Profiler
   UI transitions into a separate screen displaying the native recording.

   |Record native allocations button|

   On Android 9 and lower, the **Record native allocations** option is not
   available.

   By default, the Native Memory Profiler uses a sample size of 32 bytes: Every
   time 32 bytes of memory are allocated, a snapshot of memory is taken. A
   smaller sample size results in more frequent snapshots, yielding more
   accurate data about memory usage. A larger sample size yields less accurate
   data, but it will consume fewer resources on your system and improve
   performance while recording.

   To change the sample size of the Native Memory Profiler:

   #. Select **Run > Edit Configurations**.
   #. Select your app module in the left pane.
   #. Click the **Profiling** tab, and enter the sample size in the field
      labeled **Native memory sampling interval (bytes)**.
   #. Build and run your app again.

   **Note:** The memory data provided by the Native Memory Profiler is distinct
   from the data provided by the `memory profiler for the Java heap <#/studio/profile/memory-profiler#record-allocations>`__. Instead of
   profiling objects on the Java heap, the Native Memory Profiler only tracks
   allocations made through the C/C++ allocator, including native JNI objects.
   The Native Memory Profiler is built on ``heapprofd`` in the Perfetto stack of
   performance analysis tools. For more information on the internals of the
   Native Memory Profiler, see the `heapprofd
   documentation <https://perfetto.dev/docs/data-sources/native-heap-profiler>`__.

   **Note:** As of the initial 4.1 release of Android Studio, the Native Memory
   Profiler is disabled during app startup. This option will be enabled in an
   upcoming release.
   As a workaround, you can use the `Perfetto standalone command-line profiler <https://perfetto.dev/docs/quickstart/heap-profiling>`__ to capture
   startup profiles.

   .. rubric:: Capture a heap dump
      :name: capture-heap-dump

   A heap dump shows which objects in your app are using memory at the time you
   capture the heap dump. Especially after an extended user session, a heap dump
   can help identify memory leaks by showing objects still in memory that you
   believe should no longer be there.

   After you capture a heap dump, you can view the following:

   -  What types of objects your app has allocated, and how many of each.
   -  How much memory each object is using.
   -  Where references to each object are being held in your code.
   -  The call stack for where an object was allocated. (Call stacks are
      currently available with a heap dump only with Android 7.1 and lower when
      you capture the heap dump while recording allocations.)

   To capture a heap dump, click **Capture heap dump**, then select **Record**.
   While dumping the heap, the amount of Java memory might increase temporarily.
   This is normal because the heap dump occurs in the same process as your app
   and requires some memory to collect the data.

   After the profiler finishes capturing the heap dump, the Memory Profiler UI
   transitions to a separate screen displaying the heap dump.

   |image-profiler-heap-dump-display|

   **Figure 5.** Viewing the heap dump.

   If you need to be more precise about when the dump is created, you can create
   a heap dump at the critical point in your app code by calling
   `dumpHprofData() <#/reference/android/os/Debug#dumpHprofData(java.lang.String)>`__.

   In the list of classes, you can see the following information:

   -  **Allocations**: Number of allocations in the heap.

   -  **Native Size**: Total amount of native memory used by this object type
      (in bytes). This column is visible only for Android 7.0 and higher.

      You will see memory here for some objects allocated in Java because
      Android uses native memory for some framework classes, such as
      `Bitmap <#/reference/android/graphics/Bitmap>`__.

   -  **Shallow Size**: Total amount of Java memory used by this object type (in
      bytes).

   -  **Retained Size**: Total size of memory being retained due to all
      instances of this class (in bytes).

   You can use the two menus above the list of allocated objects to choose which
   heap dumps to inspect and how to organize the data.

   From the menu on the left, choose which heap to inspect:

   -  **default heap**: When no heap is specified by the system.
   -  **app heap**: The primary heap on which your app allocates memory.
   -  **image heap**: The system boot image, containing classes that are
      preloaded during boot time. Allocations here are guaranteed to never move
      or go away.
   -  **zygote heap**: The copy-on-write heap where an app process is forked
      from in the Android system.

   From the menu on the right, choose how to arrange the allocations:

   -  **Arrange by class**: Groups all allocations based on class name. This is
      the default.
   -  **Arrange by package**: Groups all allocations based on package name.
   -  **Arrange by callstack**: Groups all allocations into their corresponding
      call stack. This option works only if you capture the heap dump while
      recording allocations. Even so, there are likely to be objects in the heap
      that were allocated before you started recording, so those allocations
      appear first, simply listed by class name.

   The list is sorted by the **Retained Size** column by default. To sort by the
   values in a different column, click the column's heading.

   Click a class name to open the **Instance View** window on the right (shown
   in figure 6). Each listed instance includes the following:

   -  **Depth**: The shortest number of hops from any GC root to the selected
      instance.
   -  **Native Size**: Size of this instance in native memory. This column is
      visible only for Android 7.0 and higher.
   -  **Shallow Size**: Size of this instance in Java memory.
   -  **Retained Size**: Size of memory that this instance dominates (as per the
      `dominator tree <https://en.wikipedia.org/wiki/Dominator_(graph_theory)>`__).

   **Note:**\  By default, the heap dump does *not* show you the stack trace for
   each allocated object. To get the stack trace, you must begin `recording memory allocations <#record-allocations>`__ before you click **Capture heap
   dump**. Then, you can select an instance in the **Instance View** and see the
   **Call Stack** tab alongside the **References** tab, as shown in figure 6.
   However, it's likely that some objects were allocated before you began
   recording allocations, so the call stack is not available for those objects.
   Instances that do include a call stack are indicated with a "stack" badge on
   the icon |image-memory-profiler-icon-stack|. (Unfortunately, because the stack trace requires that you
   perform allocation recording, you currently cannot see the stack trace for
   heap dumps on Android 8.0.)
   |image-memory-profiler-dump-stacktrace_2x|

   **Figure 6.** The duration required to capture a heap dump is indicated in
   the timeline

   To inspect your heap, follow these steps:

   #. Browse the list to find objects that have unusually large heap counts and
      that might be leaked. To help find known classes, click the **Class Name**
      column header to sort alphabetically. Then click a class name. The
      **Instance View** pane appears on the right, showing each instance of that
      class, as shown in figure 6.

      -  Alternatively, you can locate objects quickly by clicking **Filter**
         |image-profiler_filter|, or by pressing Control+F (Command+F on Mac), and entering a
         class or package name in the search field. You can also search by
         method name if you select **Arrange by callstack** from the dropdown
         menu. If you want to use regular expressions, check the box next to
         **Regex**. Check the box next to **Match case** if your search query is
         case-sensitive.

   #. In the **Instance View** pane, click an instance. The **References** tab
      appears below, showing every reference to that object.

      Or, click the arrow next to the instance name to view all its fields, and
      then click a field name to view all its references. If you want to view
      the instance details for a field, right-click on the field and select **Go
      to Instance**.

   #. In the **References** tab, if you identify a reference that might be
      leaking memory, right-click it and select **Go to Instance**. This selects
      the corresponding instance from the heap dump, showing you its own
      instance data.

   In your heap dump, look for memory leaks caused by any of the following:

   -  Long-lived references to ``Activity``, ``Context``, ``View``,
      ``Drawable``, and other objects that might hold a reference to the
      ``Activity`` or ``Context`` container.
   -  Non-static inner classes, such as a ``Runnable``, that can hold an
      ``Activity`` instance.
   -  Caches that hold objects longer than necessary.

   .. rubric:: Save a heap dump as an HPROF file
      :name: save-hprof

   After you capture a heap dump, the data is viewable in the Memory Profiler
   only while the profiler is running. When you exit the profiling session, you
   lose the heap dump. So, if you want to save it for review later, export the
   heap dump to an HPROF file. In Android Studio 3.1 and lower, the **Export
   capture to file** |image-profiler-export-hprof| button is on the left side of the toolbar below
   the timeline; in Android Studio 3.2 and higher, there is an **Export Heap
   Dump** button at the right of each **Heap Dump** entry in the **Sessions**
   pane. In the **Export As** dialog that appears, save the file with the
   ``.hprof`` file-name extension.

   To use a different HPROF analyzer like
   `jhat <https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jhat.html>`__,
   you need to convert the HPROF file from Android format to the Java SE HPROF
   format. You can do so with the ``hprof-conv`` tool provided in the
   ``android_sdk``\ ``/platform-tools/`` directory. Run the ``hprof-conv``
   command with two arguments: the original HPROF file and the location to write
   the converted HPROF file. For example:

   .. code:: devsite-click-to-copy

      hprof-conv heap-original.hprof heap-converted.hprof

   .. rubric:: Import a heap dump file
      :name: import-hprof

   To import an HPROF (``.hprof``) file, click **Start a new profiling session**
   |image-ic_plus| in the **Sessions** pane, select **Load from file**, and choose the
   file from the file browser.

   You can also import an HPROF file by dragging it from the file browser into
   an editor window.

   .. rubric:: Leak detection in Memory Profiler
      :name: profiler-memory-leak-detection

   When analyzing a heap dump in the Memory Profiler, you can filter profiling
   data that Android Studio thinks might indicate memory leaks for ``Activity``
   and ``Fragment`` instances in your app.

   The types of data that the filter shows include the following:

   -  ``Activity`` instances that have been destroyed but are still being
      referenced.
   -  ``Fragment`` instances that do not have a valid ``FragmentManager`` but
      are still being referenced.

   In certain situations, such as the following, the filter might yield false
   positives:

   -  A ``Fragment`` is created but has not yet been used.
   -  A ``Fragment`` is being cached but not as part of a
      ``FragmentTransaction``.

   To use this feature, first `capture a heap dump <#capture-heap-dump>`__ or
   `import a heap dump file <#import-hprof>`__ into Android Studio. To display
   the fragments and activities that may be leaking memory, select the
   **Activity/Fragment Leaks** checkbox in the heap dump pane of the Memory
   Profiler, as shown in figure 7.

   |Profiler: Memory Leak Detection|

   **Figure 7.** Filtering a heap dump for memory leaks.

   .. rubric:: Techniques for profiling your memory
      :name: profile-memory-techniques

   While using the Memory Profiler, you should stress your app code and try
   forcing memory leaks. One way to provoke memory leaks in your app is to let
   it run for a while before inspecting the heap. Leaks might trickle up to the
   top of the allocations in the heap. However, the smaller the leak, the longer
   you need to run the app in order to see it.

   You can also trigger a memory leak in one of the following ways:

   -  Rotate the device from portrait to landscape and back again multiple times
      while in different activity states. Rotating the device can often cause an
      app to leak an `Activity <#/reference/android/app/Activity>`__,
      `Context <#/reference/android/content/Context>`__, or
      `View <#/reference/android/view/View>`__ object because the system
      recreates the `Activity <#/reference/android/app/Activity>`__ and if
      your app holds a reference to one of those objects somewhere else, the
      system can't garbage collect it.
   -  Switch between your app and another app while in different activity states
      (navigate to the Home screen, then return to your app).

   **Tip:** You can also perform the above steps by using the
   `monkeyrunner <#/tools/help/monkeyrunner_concepts>`__ test framework.

Last updated 2024-03-14 UTC.

.. |image-toolbar-android-profiler| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-android-profiler.png
   :class: inline-icon
.. |image-memory-profiler-callouts_2x| image:: https://developer.android.google.cn/static/studio/images/profile/memory-profiler-callouts_2x.png
   :width: 850px
.. |image-memory-profiler-counts_2x| image:: https://developer.android.google.cn/static/studio/images/profile/memory-profiler-counts_2x.png
   :width: 805px
.. |image-toolbar-stop-new-2| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-stop-new-2.png
   :class: inline-icon
.. |Visualization of Java allocations in Memory Profiler| image:: https://developer.android.google.cn/static/studio/images/profile/profiler-record-kotlin-java-visualization.png
.. |image-profiler_filter| image:: https://developer.android.google.cn/static/studio/images/buttons/profiler_filter.png
   :class: inline-icon
.. |image-memory-profiler-allocations-detail_2x| image:: https://developer.android.google.cn/static/studio/images/profile/memory-profiler-allocations-detail_2x.png
   :width: 840px
.. |image-memory-profiler-jni-heap_2x| image:: https://developer.android.google.cn/static/studio/images/memory-profiler-jni-heap_2x.png
   :width: 856px
.. |Native Memory Profiler| image:: https://developer.android.google.cn/static/studio/images/profile/native_memory_profiler.png
.. |image-toolbar-stop-new-1| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-stop-new-1.png
   :class: inline-icon
.. |Record native allocations button| image:: https://developer.android.google.cn/static/studio/images/profile/record_native_allocations.png
.. |image-profiler-heap-dump-display| image:: https://developer.android.google.cn/static/studio/images/profile/profiler-heap-dump-display.png
   :width: 813px
.. |image-memory-profiler-icon-stack| image:: https://developer.android.google.cn/static/studio/images/profile/memory-profiler-icon-stack.png
   :class: inline-icon
.. |image-memory-profiler-dump-stacktrace_2x| image:: https://developer.android.google.cn/static/studio/images/profile/memory-profiler-dump-stacktrace_2x.png
   :width: 856px
.. |image-profiler_filter| image:: https://developer.android.google.cn/static/studio/images/buttons/profiler_filter.png
   :class: inline-icon
.. |image-profiler-export-hprof| image:: https://developer.android.google.cn/static/studio/images/buttons/profiler-export-hprof.png
   :class: inline-icon
.. |image-ic_plus| image:: https://developer.android.google.cn/static/studio/images/buttons/ic_plus.png
   :class: inline-icon
.. |Profiler: Memory Leak Detection| image:: https://developer.android.google.cn/static/studio/images/profile/profiler-memory-leak-detection.png

/Inspect your app's energy usage
================================

.. https://developer.android.google.cn/studio/profile/energy-profiler?hl=en

.. container:: devsite-article-body clearfix

   The Energy Profiler helps you to find where your app uses more energy than
   necessary.

   The Energy Profiler monitors the use of the CPU, network radio, and GPS
   sensor, and it displays a visualization of how much energy each of these
   components uses. The Energy Profiler also shows you occurrences of system
   events (wake locks, alarms, jobs, and location requests) that can affect
   energy consumption.

   The Energy Profiler does not directly measure energy consumption. Rather, it
   uses a model that estimates the energy consumption for each resource on the
   device.

   .. rubric:: Energy Profiler overview
      :name: overview

   The Energy Profiler appears as a row in of the **Profiler** window when you
   run your app on a connected device or Android Emulator running Android 8.0
   (API 26) or higher.

   To open the Energy Profiler, follow these steps:

   #. Select **View > Tool Windows > Profiler** or click **Profile** |image-toolbar-android-profiler| in
      the toolbar.

      If prompted by the **Select Deployment Target** dialog, choose the device
      to which to deploy your app for profiling. If you've connected a device
      over USB but don't see it listed, ensure that you have `enabled USB debugging <#/studio/debug/dev-options#enable>`__.

   #. Click anywhere in the **Energy** timeline to open the Energy Profiler.

   When you open the Energy Profiler, it immediately starts displaying your
   app’s estimated energy usage. You should see something similar to figure 1.

   |image-energy-profiler-L1_2x|

   **Figure 1.** Timelines in the Energy Profiler.

   As indicated in figure 1, the default view for the Energy Profiler includes
   the following timelines:

   #. **Event timeline:** Shows the activities in your app as they transition
      through different states in their lifecycle. This timeline also indicates
      user interactions with the device, including screen rotation events.
   #. **Energy timeline:** Shows estimated energy consumption of your app.
   #. **System timeline:** Indicates system events that may affect energy
      consumption.

   To see a breakdown of energy use by CPU, network, and location (GPS)
   resources, as well as relevant system events, place your mouse pointer over a
   bar in the **Energy** timeline.

   .. rubric:: Inspect system events: wake locks, jobs, and alarms
      :name: inspect_system_events_wake_locks_jobs_and_alarms

   You can use the Energy Profiler to find system events that can affect energy
   consumption, including wake locks, jobs, and alarms:

   -  A `wake lock <#/training/scheduling/wakelock>`__ is a mechanism for keeping
      the CPU or screen on when the device would otherwise go to sleep. For
      example, an app that plays video may use a wake lock to keep the screen on
      when there is no user interaction with the device. Requesting a wake lock
      is not an energy-intensive action, but failing to release a wake lock can
      cause the screen or CPU to stay on for longer than necessary, which can
      drain the battery quickly. For more information, see the guidance for
      `working with wake locks <#/topic/performance/vitals/wakelock>`__.

   -  You can use `alarms <#/training/scheduling/alarms>`__ to run background
      tasks outside of the context of your app at regular intervals. When an
      alarm goes off, it may wake up the device and run energy-intensive code.
      For more information, see the guidance for `working with alarms <#/topic/performance/vitals/wakeup>`__.

   -  You can use `jobs <#/reference/android/app/job/JobScheduler>`__ to perform
      actions under specified conditions, such as when the network becomes
      available. You create jobs with ``JobBuilder`` and schedule them with
      ``JobScheduler``. In many cases, the recommended approach is to use jobs
      with ``JobScheduler`` rather than alarms or wake locks.

   -  Location requests use the GPS sensor, which can consume significant
      amounts of energy. For information on how to make energy-efficient
      location requests, see `Optimize location for battery <#/guide/topics/location/battery>`__.

   The Energy Profiler makes it easy to find where your app uses each of these
   features so that you can make informed decisions about how each is used.

   The Energy Profiler shows a color-coded bar in the **System** timeline below
   the **Energy** timeline for the time range when a system event is active.
   Wake locks are represented with a red bar, jobs and alarms are indicated with
   a yellow bar, and location events are indicated with a light purple bar.

   Figure 2 shows the Energy Profiler and the code editor open to the source
   code responsible for an unreleased wake lock.

   |image-energy-profiler-L2_2x|

   **Figure 2.** Using the Energy Profiler to find a wake lock.

   #. To open the **System Event** pane and show details for events such as wake
      locks, select a time range in the **Energy** timeline.
   #. To open the **Wake Lock Details** pane and show details for a specific
      wake lock, select the wake lock in the **System Event** pane.
   #. To open the code editor and jump to the source code for a wake lock,
      double-click the entry for the calling method at the top of the call stack
      in the **Wake Lock Details** pane.
   #. The call to acquire the wake lock is highlighted in the source editor.

   The instructions for showing details for other system events are essentially
   the same as for wake locks, with information specific to each kind of event
   in its details pane. For example, the **Job Details** pane shows call stacks
   for the portions of the code where the job is scheduled and where the job is
   finished.

Last updated 2023-04-12 UTC.

.. |image-toolbar-android-profiler| image:: https://developer.android.google.cn/static/studio/images/buttons/toolbar-android-profiler.png
   :class: inline-icon
.. |image-energy-profiler-L1_2x| image:: https://developer.android.google.cn/static/studio/images/profile/energy-profiler-L1_2x.png
   :width: 843px
.. |image-energy-profiler-L2_2x| image:: https://developer.android.google.cn/static/studio/images/profile/energy-profiler-L2_2x.png
   :width: 921px

/Inspect pre-built APKs
=======================

.. https://developer.android.google.cn/studio/profile/apk-profiler?hl=en

.. container:: devsite-article-body clearfix

   Android Studio 3.0 and higher lets you profile and debug APKs that have
   `debugging enabled <#/studio/debug#enable-debug>`__ without having to build
   them from an Android Studio project.

   To start debugging an APK, follow these steps:

   #. From the Android Studio Welcome screen, click **Profile or debug APK**.

      If you already have a project open, click **File > Profile or Debug APK**
      from the menu bar.

   #. In the dialog that opens, select the APK you want to import into Android
      Studio.

   #. Click **OK**.

   If this option does not show up, make sure you have the "Android APK Support"
   plugin enabled.

   Android Studio then displays the unpacked APK files, similar to figure 1.
   This is not a fully decompiled set of files, but it does provide SMALI files
   for a more readable version of the DEX files.

   |Importing a pre-built APK into Android Studio|

   **Figure 1.** Importing a pre-built APK into Android Studio.

   **Note:**\  When you import an APK into Android Studio, the IDE creates a new
   project in your home directory under ``ApkProjects/`` and makes a local copy
   of the target APK there. The SMALI files are stored in the ``smali/out/``
   folder within the new project folder.
   The **Android** view in the Project pane lets you inspect the following
   contents of your APK:

   -  **APK file:** Double-click the APK to open the APK analyzer.
   -  **manifests:** Contains the app manifests that are extracted from the APK.
   -  **java:** Contains Kotlin or Java code that Android Studio disassembles
      (into SMALI files) from your APK’s DEX files. Each SMALI file in this
      directory corresponds to a Kotlin or Java class.
   -  **cpp:** If your app includes native code, this directory contains your
      APK’s native libraries (SO files).
   -  **External Libraries:** Contains the Android SDK.

   You can `use the Android profiler <#/studio/profile/android-profiler>`__ to
   start testing your app's performance.

   To debug your app's Kotlin or Java code, you need to `attach the Kotlin or Java sources <#attach_java>`__ and add breakpoints in the Kotlin or Java
   source files. Similarly, to debug your native code, you must `attach the native debug symbols <#attach_native>`__.

   .. rubric:: Attach Kotlin or Java sources
      :name: attach_java

   By default, Android Studio extracts Kotlin or Java code from your APK and
   saves it as SMALI files. To debug the Kotlin or Java code using breakpoints,
   you need to point the IDE to the Kotlin or Java source files that correspond
   to the SMALI files you want to debug.

   To attach Kotlin or Java sources, proceed as follows:

   #. Double click on a SMALI file from the **Project** pane in the **Android**
      view. After opening the file, the editor displays a banner asking you to
      select the Kotlin or Java sources: |Attach sources banner|
   #. Click **Attach Kotlin/Java Sources...** from the banner in the editor
      window.
   #. Navigate to the directory with the app’s Kotlin or Java source files and
      click **Open**.

   In the **Project** window, Android Studio replaces SMALI files with their
   corresponding Kotlin or Java source files. Android Studio also includes inner
   classes automatically. You can now add breakpoints and `debug your app <#/studio/debug>`__.

   .. rubric:: Attach native debug symbols
      :name: attach_native

   If your APK includes native libraries (SO files) that don't include debug
   symbols, Android Studio shows you a banner, similar to the one shown in
   figure 1. You can't debug the APK’s native code or use breakpoints without
   attaching debuggable native libraries.

   To attach debuggable native libraries, proceed as follows:

   #. If you haven't already done so, `download the NDK and tools <#/ndk/guides#download-ndk>`__.

   #. In **Android** view, under the **cpp** directory in the **Project**
      window, double-click a native library file that doesn't include debug
      symbols.

      The editor shows a table of all the ABIs your APK supports.

   #. Click **Add** in the top-right corner of the editor window.

   #. Navigate to the directory that includes the debuggable native libraries
      you want to attach and click **OK**.

   If the APK and debuggable native libraries were built using a different
   workstation, you need to also specify paths to the local debug symbols by
   following these steps:

   #. Add local paths to missing debug symbols by editing the field under the
      **Local Paths** column in the **Path Mappings** section of the editor
      window, shown in figure 2.

      In most cases, you need only provide the path to a root folder, and
      Android Studio automatically inspects subdirectories to map additional
      sources. Android Studio also automatically maps paths to a remote NDK to
      your local NDK download.

   #. Click **Apply Changes** in the **Path Mappings** section of the editor
      window.

   |Providing paths to local debug symbols|

   **Figure 2.** Local paths to debug symbols.

   The native source files appear in the **Project** window. Open those native
   source files to add breakpoints and `debug your app <#/studio/debug>`__. To
   remove the mappings, click **Clear** in the **Path Mappings** section of the
   editor window.

   **Known issue:** When attaching debug symbols to an APK, both the APK and
   debuggable SO files must be built using the same workstation or build server.

   In Android Studio 3.6 and higher, you don't need to create a new project when
   the APK is updated outside the IDE. Android Studio detects changes in the APK
   and gives you the option to re-import it.

   |Import updated APK|

   **Figure 3.** APKs updated outside Android Studio can be re-imported.

Last updated 2024-04-05 UTC.

.. |Importing a pre-built APK into Android Studio| image:: https://developer.android.google.cn/static/studio/images/debug/import_apk-2X.png
   :width: 1177px
.. |Attach sources banner| image:: https://developer.android.google.cn/static/studio/images/debug/warning-attach-sources.png
.. |Providing paths to local debug symbols| image:: https://developer.android.google.cn/static/studio/images/debug/mapping_paths-2X.png
   :width: 1177px
.. |Import updated APK| image:: https://developer.android.google.cn/static/studio/images/debug/import-updated-apk.png
   :class: screenshot

/Power profiler
===============

.. https://developer.android.google.cn/studio/profile/power-profiler?hl=en

.. container:: devsite-article-body clearfix

   Starting in Android Studio Hedgehog, the Power Profiler shows power
   consumption on devices. You can view this new data in the On Device Power
   Rails Monitor (ODPM). It segments the information by subsystems called "Power
   Rails". See `Profileable power rails <#power-rails>`__ for a list of
   supported sub-systems.

   The `System Trace <#/studio/profile/cpu-profiler>`__ records and displays
   power consumption data. It is part of the CPU profiler This data helps you to
   visually correlate power consumption of the device with the actions occurring
   in your app. The Power Profiler enables visualizing this data.

   .. figure:: https://developer.android.google.cn/static/studio/images/power-consumption-power-rails.png

      **Figure 1.** Example of power consumption in different power rails.

   .. rubric:: Profileable power rails
      :name: power-rails

   The ODPM reports all profileable power rails and is available in Android 10
   (API level 29) and higher and on Pixel 6 and subsequent Pixel devices.

   .. table:: **Table 1.** Availability of individual power rails is expected to
   change based on the device being used.

      ================   =============================================
      Power rail name    Description
      ================   =============================================
      CPU Big            Power being consumed by the big CPU core.
      CPU Little         Power being consumed by the little CPU core.
      CPU Mid            Power being consumed by the mid CPU core.
      Camera             Power being consumed by the camera sensor.
      Cellular           Power being consumed by the cellular sensor.
      Display            Power being consumed by the display.
      GPS                Power being consumed by the GPS sensor.
      GPU                Power being consumed by the GPU sensor.
      Memory             Power being consumed by the RAM memory sensor.
      Sensor core        Power being consumed by other device sensors.
      UFS (disk)         Power being consumed by the Disk sensor.
      WLAN               Power being consumed by the Wifi sensor.
      ================   =============================================

   Devices that don't support ODPM can offer power consumption data through
   Coulomb counters and the battery gauge.

   .. table:: **Table 2.** Power consumption data.

      ================   =============================================
      Name               Description
      ================   =============================================
      Capacity           The remaining battery percentage (%).
      Charge             The remaining battery charge in microampere-hours (µAh).
      Current            The instantaneous current in microampere (µA).
      ================   =============================================

   .. rubric:: Example scenarios for profiling power consumption through the
      Power Profiler
      :name: examples

   Assume you are building an app that needs to download assets over the
   network. You want to understand how the power consumption of WLAN power rail
   changes while downloading assets individually versus in a large chunk.

   **Scenario A:** The app makes individual network requests to download assets
   over WLAN.

   .. figure:: https://developer.android.google.cn/static/studio/images/assets-over-wlan.png

      **Figure 2.** Individual network requests to download assets over WLAN.

   **Scenario B:** The app makes one network request to download a very large
   asset over WLAN.

   .. figure:: https://developer.android.google.cn/static/studio/images/large-assets-over-wlan.png

      **Figure 3.** Individual network requests to download a very large asset
      over WLAN.

   As shown in the preceding scenarios, the two system traces show different
   signatures of power consumption in the WLAN power rail based on how you
   trigger the download.

   Even though the preceding example is a simple way to measure power
   consumption in different scenarios, it demonstrates the process with which
   you can build more sophisticated A/B tests for your app. You can use these
   tests to optimize power consumption across different features or different
   implementations of the same feature.

   .. rubric:: Important notes
      :name: important-notes

   -  ODPM measures power consumption at the device level—not specific to any
      app. You can correlate power consumption information from the ODPM to
      what's happening in your app foreground or background. As a result, you
      can expect noise in power consumption data based on how many apps are
      active in the device at the time of reading ODPM data.
   -  Power Profiler reads power consumption data from the ODPM, which is only
      available on Pixel 6 and subsequent Pixel devices running Android 10 (API
      level 29) and higher.
   -  Some power rails might only be available on some devices implementing
      ODPM.

Last updated 2023-11-06 UTC.


/Topic: 7. 🟢 Publish your app
================================

/Overview: Publish your app
===========================

.. https://developer.android.google.cn/studio/publish?hl=en

.. container:: devsite-article-body clearfix

   **Important:** From August 2021, new apps are required to publish with the
   `Android App Bundle <#/guide/app-bundle>`__ on Google Play. New apps larger
   than 200 MB are now supported by either `Play Feature Delivery <#/guide/app-bundle/dynamic-delivery>`__ 
   or `Play Asset Delivery <#/guide/app-bundle/asset-delivery>`__. From June 2023, new and
   existing `TV apps are required to be published as App Bundles <#/docs/quality-guidelines/tv-app-quality#SC-E1>`__.
   Publishing is the general process that makes your Android app available to
   users. When you publish an Android app, you do the following:

   -  **Prepare the app for release.**

      During the preparation step, you build a release version of your app.

   -  **Release the app to users.**

      During the release step, you publicize, sell, and distribute the release
      version of your app, which users can download and install on their
      Android-powered devices.

   This page provides an overview of the process for preparing to publish your
   app. If you plan to publish on Google Play, read `Release with confidence <#/distribute/best-practices/launch/launch-checklist>`__.

   If you use a Continuous Integration server, you can configure it to automate
   the steps outlined here. You can also configure it to push builds to your
   `internal test distribution channel <#/studio/publish/upload-bundle#test_with_play>`__.

   .. rubric:: Prepare your app for release
      :name: publishing-prepare

   Preparing your app for release is a multistep process involving the following
   tasks:

   -  **Configure your app for release.**

      At a minimum, you need to make sure that logging is disabled and removed
      and that your release variant has ``debuggable false`` for Groovy or
      ``isDebuggable = false`` for Kotlin script set. You should also `set your app's version information <#/studio/publish/versioning>`__.

   -  **Build and sign a release version of your app.**

      You can use the Gradle build files with the *release* build type to build
      and sign a release version of your app. For more information, see `Build and run your app <#/tools/building/building-studio>`__.

   -  **Test the release version of your app.**

      Before you distribute your app, you should thoroughly test the release
      version on at least one target handset device and one target tablet
      device. `Firebase Test Lab <https://firebase.google.cn/docs/test-lab/android/get-started>`__ is
      useful for testing across a variety of devices and configurations.

   -  **Update app resources for release.**

      Make sure that all app resources, such as multimedia files and graphics,
      are updated and included with your app or staged on the proper production
      servers.

   -  **Prepare remote servers and services that your app depends on.**

      If your app depends on external servers or services, make sure they are
      secure and production ready.

   You might need to perform several other tasks as part of the preparation
   process. For example, you need to create an account on the app marketplace
   you want to use, if you don't already have one. You also need to create an
   icon for your app, and you might want to prepare an End User License
   Agreement (EULA) to protect yourself, your organization, and your
   intellectual property.

   To learn how to prepare your app for release, see `Prepare for release <#/tools/publishing/preparing>`__ for step-by-step instructions for
   configuring and building a release version of your app.

   When you are finished preparing your app for release, you have a signed APK
   file that you can distribute to users.

   .. rubric:: Release your app to users
      :name: publishing-release

   You can release your Android apps several ways. Typically, you release apps
   through an app marketplace such as `Google Play <https://play.google.com>`__.
   You can also release apps on your own website or by sending an app directly
   to a user.

   .. rubric:: Release through an app marketplace
      :name: publishing-marketplace

   If you want to distribute your apps to the broadest possible audience,
   release them through an app marketplace.

   Google Play is the premier marketplace for Android apps and is particularly
   useful if you want to distribute your apps to a large global audience.
   However, you can distribute your apps through any app marketplace, and you
   can use multiple marketplaces.

   .. rubric:: Release your apps on Google Play
      :name: publishing-market

   `Google Play <https://play.google.com>`__ is a robust publishing platform
   that helps you publicize, sell, and distribute your Android apps to users
   around the world. When you release your apps through Google Play, you have
   access to a suite of developer tools that let you analyze your sales,
   identify market trends, and control who your apps are being distributed to.

   Google Play also gives you access to several revenue-enhancing features such
   as `in-app billing <#/google/play/billing>`__ and `app licensing <#/google/play/licensing>`__. The rich array of tools and features,
   coupled with numerous end-user community features, makes Google Play the
   premier marketplace for selling and buying Android apps.

   `Releasing your app on Google Play <#/distribute/googleplay>`__ is a simple
   process that involves three basic steps:

   -  **Prepare promotional materials.**

      To fully leverage the marketing and publicity capabilities of Google Play,
      you need to create promotional materials for your app such as screenshots,
      videos, graphics, and promotional text.

   -  **Configure options and uploading assets.**

      Google Play lets you target your app to a worldwide pool of users and
      devices. By configuring various Google Play settings, you can choose the
      countries you want to reach, the listing languages you want to use, and
      the price you want to charge in each country.

      You can also configure listing details such as the app type, category, and
      content rating. When you are done configuring options, you can upload your
      promotional materials and your app as a draft app.

   -  **Publish the release version of your app.**

      If you are satisfied that your publishing settings are correctly
      configured and your uploaded app is ready to be released to the public,
      click **Publish**. Once it has passed Google Play review, your app will be
      live and available for download around the world.

   For more information, see `How Google Play works <#/distribute/googleplay>`__.

   .. rubric:: Release through a website
      :name: publishing-website

   If you don't want to release your app on a marketplace like Google Play, you
   can make the app available for download on your own website or server,
   including on a private or enterprise server.

   To release through a website:

   #. `Prepare your app for release <#/tools/publishing/preparing>`__.
   #. Host the release-ready APK file on your website.
   #. Provide a download link to users.

   When users browse to the download link from their Android-powered devices,
   the file is downloaded and the Android system automatically starts installing
   it on the device.

   **Note:** The installation process will start automatically only if the user
   has configured their settings to allow the installation of apps from `unknown sources <#unknown-sources>`__.

   Although it is relatively easy to release your app on your own website, it
   can be inefficient. For example, if you want to monetize your app, you need
   to process and track all financial transactions yourself, and you can't use
   Google Play's `in-app billing service <#/google/play/billing>`__ to sell
   in-app products. You also can't use `app licensing <#/google/play/licensing>`__ to help prevent unauthorized
   installation and use of your app.

   .. rubric:: User opt-in for unknown apps and sources
      :name: publishing-unknown

   Android protects users from inadvertent download and installation of apps
   from locations other than a trusted, first-party app store, such as Google
   Play. Android blocks such installs until the user opts into allowing the
   installation of apps from other sources. The opt-in process depends on the
   version of Android running on the user's device:

   .. container:: attempt-right

      |Screenshot showing the settings screen for accepting install of unknown
      apps from different sources.|
      **Figure 1.** The **Install unknown apps** system settings screen, where
      users grant permission for a particular source to install unknown apps.

   -  On devices running Android 8.0 (API level 26) and higher, users must
      navigate to the **Install unknown apps** system settings screen to enable
      app installations from a particular source.
   -  On devices running Android 7.1.1 (API level 25) and lower, users must
      either enable the **Unknown sources** system setting or allow a single
      installation of an unknown app.

   .. rubric:: Install unknown apps
      :name: install-unknown-apps

   On devices running Android 8.0 (API level 26) and higher, users must grant
   permission to install apps from a source that isn't a first-party app store.
   To do so, they must enable the **Allow app installs** setting for that source
   within the **Install unknown apps** system settings screen, shown in figure
   1.

   **Note:** Users can change this setting for a particular source at any time.
   Therefore, a source that installs unknown apps should always call
   `canRequestPackageInstalls() <#/reference/android/content/pm/PackageManager#canRequestPackageInstalls()>`__
   to check whether the user has granted that source permission to install
   unknown apps. If this method returns ``false``, the source should prompt the
   user to re-enable the **Allow app installs** setting for that source.

   .. rubric:: Unknown sources
      :name: unknown-sources

   .. container:: attempt-right

      |Screenshot showing the setting for accepting download and install of apps
      from unknown sources.|
      **Figure 2.** The **Unknown sources** setting determines whether users can
      install apps that aren't downloaded from Google Play.

   To permit the installation of apps from non-first-party sources on devices
   running Android 7.1.1 (API level 25) and lower, users enable the **Unknown
   sources** setting in **Settings > Security**, as shown in Figure 2.

   When users attempt to install an unknown app on a device running Android
   7.1.1 (API level 25) or lower, the system sometimes shows a dialog that asks
   the user whether they want to allow only one particular unknown app to be
   installed. In most cases, it is recommended that users allow only one unknown
   app installation at a time, if the option is available.

   In either case, users need to make this configuration change before they can
   download and install unknown apps onto their devices.

   **Note:** Some network providers don't let users install apps from unknown
   sources.

Last updated 2023-11-15 UTC.

.. |Screenshot showing the settings screen for accepting install of unknown apps from different sources.| image:: https://developer.android.google.cn/static/images/publishing/publishing_unknown_apps_sm.png
.. |Screenshot showing the setting for accepting download and install of apps from unknown sources.| image:: https://developer.android.google.cn/static/images/publishing/publishing_unknown_sources_sm.png

/Prepare for release
====================

.. https://developer.android.google.cn/studio/publish/preparing?hl=en

.. container:: devsite-article-body clearfix

   To prepare your app for release, you need to configure, build, and test a
   release version of your app. The configuration tasks involve basic code
   cleanup and code modification tasks that help optimize your app. The build
   process is similar to the debug build process and can be done using JDK and
   Android SDK tools.

   Testing tasks serve as a final check, helping ensure that your app performs
   as expected under real-world conditions. Firebase offers a large set of both
   physical and virtual test devices through `Firebase Test Lab <https://firebase.google.cn/products/test-lab>`__ that you can use to
   improve your app quality.

   When you are finished preparing your app for release, you have a signed APK
   file, which you can distribute directly to users or distribute through an app
   marketplace such as `Google Play <https://play.google.com>`__.

   This document summarizes the main tasks you need to perform to prepare your
   app for release. The tasks described on this page apply to all Android apps,
   regardless of how they are released or distributed to users. If you are
   releasing your app through Google Play, read `Release with confidence <#/distribute/best-practices/launch/launch-checklist>`__.

   **Note:** As a best practice, make sure your app meets all of your release
   criteria for functionality, performance, and stability before you perform the
   tasks outlined on this page.

   |Shows how the preparation process fits into the development process|
   **Figure 1.** Preparing for release is a required development task and is the
   first step in the publishing process.

   .. rubric:: Tasks to prepare for release
      :name: publishing-intro

   To release your app to users, you need to create a release-ready package that
   users can install and run on their Android-powered devices. The release-ready
   package contains the same components as the debug APK file—compiled source
   code, resources, manifest file, and so on—and is built using the same build
   tools. However, unlike the debug APK file, the release-ready APK file is
   signed with your own certificate and is optimized with the ``zipalign`` tool.

   .. container:: attempt-right

      |Shows the five tasks you perform to prepare your app for release|
      **Figure 2.** There are five main tasks to prepare your app for release.

   The signing and optimization tasks are usually seamless if you are building
   your app with Android Studio. For example, you can use Android Studio with
   the Gradle build files to compile, sign, and optimize your app all at once.
   You can also configure the Gradle build files to do the same when you build
   from the command line. For more details about using the Gradle build files,
   see `Configure your build <#/studio/build>`__.

   To prepare your app for release, you typically perform five main tasks, as
   shown in figure 2. Each main task may include one or more smaller tasks,
   depending on how you are releasing your app. For example, if you are
   releasing your app through Google Play, you may want to add special filtering
   rules to your manifest while you are configuring your app for release.
   Similarly, to meet Google Play publishing guidelines you may have to prepare
   screenshots and create promotional text while you are gathering materials for
   release.

   You usually perform the tasks listed in figure 2 after you have throroughly
   debugged and tested your app. The Android SDK contains several tools to help
   you test and debug your Android apps. For more information, see `Debug your app <#/tools/debugging>`__ and `Test your app <#/tools/testing>`__.

   .. rubric:: Gather materials and resources
      :name: publishing-gather

   To prepare your app for release, you need to gather several supporting items.
   At a minimum, this includes cryptographic keys for signing your app and an
   app icon. You might also want to include an end-user license agreement.

   .. rubric:: Cryptographic keys
      :name: publishing-keys

   Android requires that all APKs are digitally signed with a certificate before
   they are installed on a device or updated. For `Google Play Store <https://play.google.com>`__, all apps created after August 2021 are
   required to use `Play App Signing <#/studio/publish/app-signing#app-signing-google-play>`__. But
   uploading your AAB to Play Console still requires you to sign it with your
   developer certificate. Older apps can still self-sign, but whether you're
   using Play App Signing or you're self-signing, you must sign your app before
   you can upload it.

   To learn about certificate requirements, see `Sign your app <#/tools/publishing/app-signing>`__.

   **Important:** Your app must be signed with a cryptographic key that has a
   validity period ending after October 22, 2033.

   You might also have to obtain other release keys if your app accesses a
   service or uses a third-party library that requires you to use a key that is
   based on your private key.

   .. rubric:: App icon
      :name: app-icon

   Your app's icon helps users identify your app on a device's Home screen and
   in the Launcher window. It also appears in Manage Applications, My Downloads,
   and elsewhere. In addition, publishing services such as Google Play display
   your icon to users. Be sure you have an app icon and that it meets the
   recommended `icon guidelines <https://material.io/design/iconography/product-icons.html#design-principles>`__.

   **Note:** If you are releasing your app on Google Play, you need to create a
   high-resolution version of your icon. See `Add preview assests to showcase your app <https://www.google.com/support/androidmarket/developer/bin/answer.py?answer=1078870>`__
   for more information.

   .. rubric:: End-user license agreement
      :name: end-user-license-agreement

   Consider preparing an end-user license agreement (EULA) for your app. A EULA
   can help protect your person, organization, and intellectual property, and we
   recommend that you provide one with your app.

   .. rubric:: Miscellaneous materials
      :name: miscellaneous-materials

   You might also have to prepare promotional and marketing materials to
   publicize your app. For example, if you are releasing your app on Google
   Play, you will need to prepare some promotional text and you will need to
   create screenshots of your app. For more information, see `Add preview assets to showcase your app <https://www.google.com/support/androidmarket/developer/bin/answer.py?answer=1078870>`__.

   .. rubric:: Configure your app for release
      :name: publishing-configure

   After you gather all of your supporting materials, you can start configuring
   your app for release. This section provides a summary of the configuration
   changes we recommend that you make to your source code, resource files, and
   app manifest prior to releasing your app.

   Although most of the configuration changes listed in this section are
   optional, they are considered good coding practices and we encourage you to
   implement them. In some cases, you might already have made these
   configuration changes as part of your development process.

   .. rubric:: Choose a suitable application ID
      :name: choose-a-suitable-application-id

   Make sure you choose an application ID that is suitable over the life of your
   app. You can't change the application ID after you distribute your app to
   users. To set it, use the ``applicationId`` property in the module-level
   ``build.gradle`` or ``build.gradle.kts`` file. For more information, see `Set the application ID <#/studio/build/configure-app-module#set-application-id>`__.

   .. rubric:: Turn off debugging
      :name: turn-off-debugging

   To configure whether the APK is debuggable, use the ``debuggable`` flag for
   Groovy or the ``isDebuggable`` flag for Kotlin script:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Kotlin
               :name: kts
               :class: two-line-tab

            .. code:: prettyprint

                 android {
                   ...
                   buildTypes {
                     release {
                       isDebuggable = false
                       ...
                     }
                     debug {
                       isDebuggable = true
                       ...
                     }
                   }
                   ...
                 }
                 

         .. container:: section

            .. rubric:: Groovy
               :name: groovy
               :class: two-line-tab

            .. code:: prettyprint

                 android {
                   ...
                   buildTypes {
                     release {
                       debuggable false
                       ...
                     }
                     debug {
                       debuggable true
                       ...
                     }
                   }
                   ...
                 }

   .. rubric:: Enable and configure app shrinking
      :name: enable-and-configure-app-shrinking

   Many of the following optimizations can be automated by enabling
   `shrinking <#/studio/build/shrink-code>`__ for your release build. For
   example, you can add ProGuard rules to remove log statements, and the
   shrinker will identify and remove unused code and resources. The shrinker can
   also replace class and variable names with shorter names to further reduce
   DEX size.

   .. rubric:: Turn off logging
      :name: turn-off-logging

   Deactivate logging before you build your app for release. You can deactivate
   logging by removing calls to `Log <#/reference/android/util/Log>`__
   methods in your source files. Also, remove any log files or static test files
   that were created in your project.

   Also, remove all `Debug <#/reference/android/os/Debug>`__ tracing calls
   that you added to your code, such as
   `startMethodTracing() <#/reference/android/os/Debug#startMethodTracing()>`__
   and
   `stopMethodTracing() <#/reference/android/os/Debug#stopMethodTracing()>`__
   method calls.

   **Important:** Ensure that you disable debugging for your app if using
   `WebView <#/reference/android/webkit/WebView>`__ to display paid content
   or if using JavaScript interfaces, because debugging lets users inject
   scripts and extract content using Chrome DevTools. To disable debugging, use
   the
   `WebView.setWebContentsDebuggingEnabled() <#/reference/android/webkit/WebView#setWebContentsDebuggingEnabled(boolean)>`__
   method.

   .. rubric:: Clean up your project directories
      :name: clean-up-your-project-directories

   Clean up your project and make sure it conforms to the directory structure
   described in `Projects overview <#/tools/projects#ApplicationProjects>`__.
   Leaving stray or orphaned files in your project can prevent your app from
   compiling and cause your app to behave unpredictably. At a minimum, perform
   the following cleanup tasks:

   -  Review the contents of your ``cpp/``, ``lib/``, and ``src/`` directories.
      The ``cpp/`` directory should contain only source files associated with
      the `Android NDK <#/tools/sdk/ndk>`__, such as C or C++ source files,
      header files, or makefiles. The ``lib/`` directory should contain only
      third-party library files or private library files, including prebuilt
      shared and static libraries. The ``src/`` directory should contain only
      the source files for your app (Java, Kotlin, and AIDL files). The ``src/``
      directory should not contain any JAR files.
   -  Check your project for private or proprietary data files that your app
      doesn't use and remove them. For example, look in your project's ``res/``
      directory for old drawable files, layout files, and values files that you
      are no longer using and delete them.
   -  Check your ``lib/`` directory for test libraries and remove them if they
      are no longer being used by your app.
   -  Review the contents of your ``assets/`` directory and your ``res/raw/``
      directory for raw asset files and static files that you need to update or
      remove prior to release.

   .. rubric:: Review and update your manifest and Gradle build settings
      :name: review-and-update-your-manifest-and-gradle-build-settings

   Verify that the following manifest and build files items are set correctly:

   -  ``\ `<uses-permission>`` <#/guide/topics/manifest/uses-permission-element>`__
      element

      Specify only those permissions that are relevant and required for your
      app.

   -  ``android:icon`` and ``android:label`` attributes

      You must specify values for these attributes, which are located in the
      `<application> <#/guide/topics/manifest/application-element>`__
      element.

   -  ``versionCode`` and ``versionName`` properties

      We recommend that you specify values for these properties, which are
      located in the app module-level ``build.gradle`` or ``build.gradle.kts``
      file. For more information, see `Version your app <#/tools/publishing/versioning>`__.

   There are several additional build file elements that you can set if you are
   releasing your app on Google Play. For example, the ``minSdk`` and
   ``targetSdk`` attributes, which are located in the app module-level
   ``build.gradle`` or ``build.gradle.kts`` file. For more information about
   these and other Google Play settings, see `Filters on Google Play <#/google/play/filters>`__.

   .. rubric:: Address compatibility issues
      :name: address-compatibility-issues

   Android provides several tools and techniques to make your app compatible
   with a wide range of devices. To make your app available to the largest
   number of users, consider doing the following:

   Add support for multiple screen configurations.
      Make sure you meet the best practices for `supporting multiple screens <#/guide/practices/screens_support#screen-independence>`__. By
      supporting multiple screen configurations, you can create an app that
      functions properly and looks good on any of the screen sizes supported by
      Android.
   Optimize your app for larger displays.
      You can optimize your app to work well on devices with large displays such
      as tablets and foldables. For example, `list-detail layouts <#/guide/topics/large-screens/large-screen-canonical-layouts#list-detail>`__
      can improve usability on larger screens.
   Consider using Jetpack libraries.
      Jetpack is a suite of libraries to help developers follow best practices,
      reduce boilerplate code, and write code that works consistently across
      Android versions and devices.

   .. rubric:: Update URLs for servers and services
      :name: update-urls-for-servers-and-services

   If your app accesses remote servers or services, make sure you are using the
   production URL or path for the server or service and not a test URL or path.

   .. rubric:: Implement licensing for Google Play
      :name: implement-licensing-for-google-play

   If you are releasing a paid app through Google Play, consider adding support
   for Google Play Licensing. Licensing lets you control access to your app
   based on whether the current user has purchased it. Using Google Play
   Licensing is optional, even if you are releasing your app through Google
   Play.

   For more information about the Google Play Licensing Service and how to use
   it in your app, see `App Licensing <#/google/play/licensing>`__.

   .. rubric:: Build your app for release
      :name: publishing-build

   After you finish configuring your app, you can build it into a release-ready
   APK file that is signed and optimized. The JDK includes the tools for signing
   the APK file (Keytool and Jarsigner); the Android SDK includes the tools for
   compiling and optimizing the APK file. If you are using Android Studio or you
   are using the Gradle build system from the command line, you can automate the
   entire build process. For more information about configuring Gradle builds,
   see `Configure build variants <#/tools/building/configuring-gradle>`__.

   If you are using a `continuous integration system <#/studio/projects/continuous-integration>`__, you can configure a task
   to automate your release process. This is not limited to building your
   release APK or AAB. You can also configure it to automatically upload the
   build artifact(s) to Play Console.

   .. rubric:: Build with Android Studio
      :name: build-with-android-studio

   You can use the Gradle build system, integrated with Android Studio, to build
   a release-ready APK file that is signed with your private key and optimized.
   To learn how to set up and run builds from Android Studio, see `Build and run your app <#/tools/building/building-studio>`__.

   The build process assumes that you have a certificate and private key
   suitable for signing your app. If you don't have a suitable certificate and
   private key, Android Studio can help you generate one. For more information
   about the signing process, see `Sign your app <#/tools/publishing/app-signing>`__.

   .. rubric:: Prepare external servers and resources
      :name: publishing-resources

   If your app relies on a remote server, make sure the server is secure and
   that it is configured for production use. This is particularly important if
   you are implementing `in-app billing <#/google/play/billing>`__ in your app
   and you are performing the signature verification step on a remote server.

   Also, if your app fetches content from a remote server or a real-time service
   (such as a content feed), be sure the content you are providing is up to date
   and production ready.

   .. rubric:: Test your app for release
      :name: publishing-test

   Testing the release version of your app helps ensure that your app runs
   properly under realistic device and network conditions. Ideally, test your
   app on at least one handset-sized device and one tablet-sized device to
   verify that your user interface elements are sized correctly and that your
   app's performance and battery efficiency are acceptable. `Firebase Test Lab <https://firebase.google.cn/docs/test-lab>`__ can also be useful for
   testing across a variety of different devices and Android OS versions.

   As a starting point for testing, see `Core app quality <#/tools/testing/what_to_test>`__. When you are done testing and
   satisfied that the release version of your app behaves correctly, you can
   release your app to users. For more information, see `Release your app to users <#/tools/publishing/publishing_overview#publishing-release>`__.

Last updated 2023-04-12 UTC.

.. |Shows how the preparation process fits into the development process| image:: https://developer.android.google.cn/static/images/publishing/publishing_overview_prep.png
   :name: figure1
   :height: 190px
.. |Shows the five tasks you perform to prepare your app for release| image:: https://developer.android.google.cn/static/images/publishing/publishing_preparing.png
   :height: 450px

/Version your app
=================

.. https://developer.android.google.cn/studio/publish/versioning?hl=en

.. container:: devsite-article-body clearfix

   Versioning is a critical component of your app upgrade and maintenance
   strategy. Versioning is important because:

   -  Users need to have specific information about the app version that is
      installed on their devices and the upgrade versions available for
      installation.
   -  Other apps—including other apps that you publish as a suite—need to query
      the system for your app's version to determine compatibility and identify
      dependencies.
   -  Services where you publish your app(s) may also need to query your app for
      its version so that they can display the version to users. A publishing
      service may also need to check the app version to determine compatibility
      and establish upgrade/downgrade relationships.

   The Android system uses your app's version information to protect against
   downgrades. The system doesn't use app version information to enforce
   restrictions on upgrades or compatibility of third-party apps. Your app must
   enforce any version restrictions and tell users about them.

   The Android system enforces system version compatibility, as expressed by the
   ``minSdk`` setting in the build files. This setting lets an app specify the
   minimum system API that it is compatible with. For more information about API
   requirements, see `Specify API level requirements <#minsdk>`__.

   Versioning requirements vary between different projects. However, many
   developers consider `Semantic Versioning <https://semver.org>`__ a good basis
   for a versioning strategy.

   .. rubric:: Set app version information
      :name: appversioning

   To define the version information for your app, set values for the version
   settings in the Gradle build files:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Groovy
               :name: groovy

            .. code:: prettyprint

                   android {
                     namespace 'com.example.testapp'
                     compileSdk 33

                     defaultConfig {
                         applicationId "com.example.testapp"
                         minSdk 24
                         targetSdk 33
                         versionCode 1
                         versionName "1.0"
                         ...
                     }
                     ...
                   }
                   ...
                   

         .. container:: section

            .. rubric:: Kotlin
               :name: kts

            .. code:: prettyprint

                   android {
                     namespace = "com.example.testapp"
                     compileSdk = 33

                     defaultConfig {
                         applicationId = "com.example.testapp"
                         minSdk = 24
                         targetSdk = 33
                         versionCode = 1
                         versionName = "1.0"
                         ...
                     }
                     ...
                   }
                   ...
                     

   .. rubric:: Version settings
      :name: versioningsettings

   Define values for both of the version settings available: ``versionCode`` and
   ``versionName``.

   ``versionCode``
      A positive integer used as an internal version number. This number helps
      determine whether one version is more recent than another, with higher
      numbers indicating more recent versions. This is not the version number
      shown to users; that number is set by the ``versionName`` setting. The
      Android system uses the ``versionCode`` value to protect against
      downgrades by preventing users from installing an APK with a lower
      ``versionCode`` than the version currently installed on their device.

      The value is a positive integer so that other apps can programmatically
      evaluate it—to check an upgrade or downgrade relationship, for instance.
      You can set the value to any positive integer. However, make sure that
      each successive release of your app uses a greater value.

      **Note:** The greatest value Google Play allows for ``versionCode`` is
      2100000000.

      You can't upload an APK to the Play Store with a ``versionCode`` you have
      already used for a previous version.

      **Note:** In some situations, you might want to upload a version of your
      app with a lower ``versionCode`` than the most recent version. For
      example, if you are publishing multiple APKs, you might have pre-set
      ``versionCode`` ranges for specific APKs. For more about assigning
      ``versionCode`` values for multiple APKs, see `Assigning version codes <#/google/play/publishing/multiple-apks#VersionCodes>`__.

      Typically, you release the first version of your app with ``versionCode``
      set to 1, then monotonically increase the value with each release,
      regardless of whether the release constitutes a major or minor release.
      This means that the ``versionCode`` value doesn't necessarily resemble the
      app release version that is visible to the user. Apps and publishing
      services shouldn't display this version value to users.

   ``versionName``
      A string used as the version number shown to users. This setting can be
      specified as a raw string or as a reference to a string resource.

      The value is a string so that you can describe the app version as a
      <major>.<minor>.<point> string or as any other type of absolute or
      relative version identifier. The ``versionName`` is the only value
      displayed to users.

   .. rubric:: Define version values
      :name: versionvalues

   You can define default values for these settings by including them in the
   ``defaultConfig {}`` block, nested inside the ``android {}`` block of your
   module's ``build.gradle`` or ``build.gradle.kts`` file. You can then override
   these default values for different versions of your app by defining separate
   values for individual build types or product flavors. The following file
   shows the ``versionCode`` and ``versionName`` settings in the
   ``defaultConfig {}`` block, as well as the ``productFlavors {}`` block.

   These values are then merged into your app's manifest file during the build
   process.

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Groovy
               :name: groovy

            .. code:: prettyprint

                   android {
                       ...
                       defaultConfig {
                           ...
                           versionCode 2
                           versionName "1.1"
                       }
                       productFlavors {
                           demo {
                               ...
                               versionName "1.1-demo"
                           }
                           full {
                               ...
                           }
                       }
                   }
                   

         .. container:: section

            .. rubric:: Kotlin
               :name: kts

            .. code:: prettyprint

                   android {
                       ...
                       defaultConfig {
                           ...
                           versionCode = 2
                           versionName = "1.1"
                       }
                       productFlavors {
                           create("demo") {
                               ...
                               versionName = "1.1-demo"
                           }
                           create("full") {
                               ...
                           }
                       }
                   }
                   

   In the ``defaultConfig {}`` block of this example, the ``versionCode`` value
   indicates that the current APK contains the second release of the app, and
   the ``versionName`` string specifies that it will appear to users as version
   1.1. This file also defines two product flavors, "demo" and "full." Since the
   "demo" product flavor defines ``versionName`` as "1.1-demo", the "demo" build
   uses this ``versionName`` instead of the default value. The "full" product
   flavor block doesn't define ``versionName``, so it uses the default value of
   "1.1".

   **Note:** If your app defines the app version directly in the ``<manifest>``
   element, the version values in the Gradle build file override the settings in
   the manifest. Additionally, defining these settings in the Gradle build files
   lets you specify different values for different versions of your app. For
   greater flexibility and to avoid potential overwriting when the manifest is
   merged, remove these attributes from the ``<manifest>`` element and define
   your version settings in the Gradle build files instead.

   The Android framework provides an API to let you query the system for version
   information about your app. To obtain version information, use the
   `PackageManager.getPackageInfo(java.lang.String, int) <#>`__
   method.

   .. rubric:: Specify API level requirements
      :name: minsdk

   If your app requires a specific minimum version of the Android platform, you
   can specify that version requirement as API level settings in the app's
   ``build.gradle`` or ``build.gradle.kts`` file. During the build process,
   these settings are merged into your app's manifest file. Specifying API level
   requirements ensures that your app can only be installed on devices that are
   running a compatible version of the Android platform.

   **Note:** If you specify API level requirements directly in your app's
   manifest file, the corresponding settings in the build files will override
   the settings in the manifest file. Additionally, defining these settings in
   the Gradle build files lets you specify different values for different
   versions of your app. For greater flexibility and to avoid potential
   overwriting when the manifest is merged, remove these attributes from the
   ``<uses-sdk>`` element and define your API level settings in the Gradle build
   files instead.

   There are two API level settings available:

   -  ``minSdk`` — The minimum version of the Android platform on which the app
      will run, specified by the platform's API level identifier.
   -  ``targetSdk`` — The API level on which the app is designed to run. In some
      cases, this allows the app to use manifest elements or behaviors defined
      in the target API level, rather than being restricted to using only those
      defined for the minimum API level.

   To specify default API level requirements in a ``build.gradle`` or
   ``build.gradle.kts`` file, add one or more of the API level settings to the
   ``defaultConfig{}`` block, nested inside the ``android {}`` block. You can
   also override these default values for different versions of your app by
   adding the settings to build types or product flavors.

   The following file specifies default ``minSdk`` and ``targetSdk`` settings in
   the ``defaultConfig {}`` block and overrides ``minSdk`` for one product
   flavor:

   .. container::

      .. container:: ds-selector-tabs

         .. container:: section

            .. rubric:: Groovy
               :name: groovy

            .. code:: prettyprint

               android {
                   ...
                   defaultConfig {
                       ...
                       minSdk 21
                       targetSdk 33
                   }
                   productFlavors {
                       main {
                           ...
                       }
                       afterNougat {
                           ...
                           minSdk 24
                       }
                   }
               }

         .. container:: section

            .. rubric:: Kotlin
               :name: kts

            .. code:: prettyprint

               android {
                   ...
                   defaultConfig {
                       ...
                       minSdk = 21
                       targetSdk = 33
                   }
                   productFlavors {
                       create("main") {
                           ...
                       }
                       create("afterNougat") {
                           ...
                           minSdk = 24
                       }
                   }
               }

   When preparing to install your app, the system checks the value of these
   settings and compares them to the system version. If the ``minSdk`` value is
   greater than the system version, the system prevents the installation of the
   app.

   If you don't specify these settings, the system assumes that your app is
   compatible with all platform versions. This is equivalent to setting
   ``minSdk`` to ``1``.

   For more information, see `What is API Level? <#/guide/topics/manifest/uses-sdk-element#ApiLevels>`__. For Gradle
   build settings, see `Configure build variants <#/studio/build/build-variants>`__.

Last updated 2023-04-12 UTC.

/Sign your app
==============

.. https://developer.android.google.cn/studio/publish/app-signing?hl=en

.. container:: devsite-article-body clearfix

   Android requires that all APKs be digitally signed with a certificate before
   they are installed on a device or updated. When releasing using 
   `Android App Bundles <#/guide/app-bundle>`__, you need to sign your app bundle with an
   upload key before uploading it to the Play Console, and Play App Signing
   takes care of the rest. For apps distributing using APKs on the Play Store or
   on other stores, you must manually sign your APKs for upload.

   This page guides you through some important concepts related to app signing
   and security, how to sign your app for release to Google Play using Android
   Studio, and how to configure Play App Signing.

   The following is a high-level overview of the steps you might need to take to
   sign and publish a new app to Google Play:

   #. `Generate an upload key and keystore <#generate-key>`__
   #. `Sign your app with your upload key <#sign_release>`__
   #. `Configure Play App Signing <#enroll>`__
   #. `Upload your app to Google Play <#/studio/publish/upload-bundle>`__
   #. `Prepare & roll out release of your app <https://support.google.com/googleplay/android-developer/answer/7159011>`__

   If instead your app is already published to the Google Play Store with an
   existing app signing key, or you would like to choose the app signing key for
   a new app instead of having Google generate it, follow these steps:

   #. `Sign your app <#sign_release>`__ with your app’s *signing key*.
   #. `Upload your app’s signing key <#enroll_existing>`__ to Play App Signing.
   #. (Recommended) `Generate and register an upload certificate <#generate-key>`__ for future updates to your app
   #. `Upload your app to Google Play <#/studio/publish/upload-bundle>`__
   #. `Prepare & roll out release of your app <https://support.google.com/googleplay/android-developer/answer/7159011>`__

   This page also explores how to manage your own keys for when uploading your
   app to other app stores. If you do not use Android Studio or would rather
   sign your app from the command line, learn about how to use
   `apksigner <#/studio/command-line/apksigner>`__.

   **Note:**\  If you are building a Wear OS app, the process for signing the
   app can differ from the process described on this page. See the information
   about `packaging and publishing Wear OS apps <#/training/wearables/apps/packaging>`__.

   .. rubric:: Play App Signing
      :name: app-signing-google-play

   With Play App Signing, Google manages and protects your app's signing key for
   you and uses it to sign your APKs for distribution. And, because app bundles
   defer building and signing APKs to the Google Play Store, you need to
   configure Play App Signing before you upload your app bundle. Doing so lets
   you benefit from the following:

   -  Use the Android App Bundle and support Google Play’s advanced delivery
      modes. The Android App Bundle makes your app much smaller, your releases
      simpler, and makes it possible to use feature modules and offer instant
      experiences.

   -  Increase the security of your signing key, and make it possible to use a
      separate upload key to sign the app bundle you upload to Google Play.

   -  Key upgrade lets you change your app signing key in case your existing one
      is compromised or if you need to migrate to a cryptographically stronger
      key

      **Note:**\  In order to ensure security, after you configure Play App
      Signing with either an auto-generated key, or a key that you supply, you
      cannot retrieve a copy of your app's signing key and Google may retain a
      backup copy of the key for disaster recovery purposes.

   Play App Signing uses two keys: the *app signing key* and the *upload key*,
   which are described in further detail in the section about 
   `Keys and keystores <#certificates-keystores>`__. You keep the upload key and use it to
   sign your app for upload to the Google Play Store. Google uses the upload
   certificate to verify your identity, and signs your APK(s) with your app
   signing key for distribution as shown in figure 1. By using a separate upload
   key you can `request an upload key reset <https://support.google.com/googleplay/android-developer/answer/7384423#reset>`__
   if your key is ever lost or compromised.

   By comparison, for apps that have not opted in to Play App Signing, if you
   lose your app’s signing key, you lose the ability to update your app.

   **Important:**\  If you want to use the same signing key across multiple
   stores, make sure to provide your own signing key when you 
   `configure Play App Signing <#enroll>`__, instead of having Google generate one for you.
   |image-appsigning_googleplayappsigningdiagram_2x|

   **Figure 1**. Signing an app with Play App Signing

   Your keys are stored on the same infrastructure that Google uses to store its
   own keys, where they are protected by Google’s Key Management Service. You
   can learn more about Google’s technical infrastructure by reading the 
   `Google Cloud Security Whitepapers <https://services.google.com/fh/files/misc/security_whitepapers_march2018.pdf>`__.

   When you use Play App Signing, if you lose your upload key, or if it is
   compromised, you can request an upload key reset in the Play Console. Because
   your app signing key is secured by Google, you can continue to upload new
   versions of your app as updates to the original app, even if you change
   upload keys. To learn more, read `Reset a lost or compromised private upload key <#reset_upload_key>`__.

   The next section describes some important terms and concepts related to app
   signing and security. If you’d rather skip ahead and learn how to prepare
   your app for upload to the Google Play Store, go to `Sign your app for release <#sign-apk>`__.

   .. rubric:: Keystores, keys, and certificates
      :name: certificates-keystores

   Java Keystores (.jks or .keystore) are binary files that serve as
   repositories of certificates and private keys.

   A **public key certificate** (``.der`` or ``.pem`` files), also known as a
   digital certificate or an identity certificate, contains the public key of a
   public/private key pair, as well as some other metadata identifying the owner
   (for example, name and location) who holds the corresponding private key.

   The following are the different types of keys you should understand:

   -  **App signing key:** The key that is used to sign APKs that are installed
      on a user's device. As part of Android’s secure update model, the signing
      key never changes during the lifetime of your app. The app signing key is
      private and must be kept secret. You can, however, share the certificate
      that is generated using your app signing key.

   -  **Upload key:** The key you use to sign the app bundle or APK before you
      upload it for `app signing with Google Play <#app-signing-google-play>`__.
      You must keep the upload key secret. However, you can share the
      certificate that is generated using your upload key. You may generate an
      upload key in one of the following ways:

      -  If you choose for Google to generate the app signing key for you when
         you opt in, then the key you use to `sign your app for release <#sign-apk>`__ is designated as your upload key.
      -  If you provide the app signing key to Google when opting in your new or
         existing app, then you have the option to generate a new upload key
         during or after opting in for increased security.
      -  If you do not generate a new upload key, you continue to use your app
         signing key as your upload key to sign each release.

      **Tip:** To keep your keys secure, it’s a good idea to make sure your app
      signing key and upload key are different.

   .. rubric:: Working with API providers
      :name: api-providers

   You can download the certificate for the app signing key and your upload key
   from the **Release > Setup > App signing** page in the `Play Console <https://play.google.com/console/>`__. This is used to register
   public key(s) with API providers; it's intended to be shared, as it does not
   contain your private key.

   A **certificate fingerprint** is a short and unique representation of a
   certificate that is often requested by API providers alongside the package
   name to register an app to use their service. The MD5, SHA-1 and SHA-256
   fingerprints of the upload and app signing certificates can be found on the
   app signing page of the Play Console. Other fingerprints can also be computed
   by downloading the original certificate (``.der``) from the same page.

   .. rubric:: Sign your debug build
      :name: debug-mode

   When running or debugging your project from the IDE, Android Studio
   automatically signs your app with a debug certificate generated by the
   Android SDK tools. The first time you run or debug your project in Android
   Studio, the IDE automatically creates the debug keystore and certificate in
   ``$HOME/.android/debug.keystore``, and sets the keystore and key passwords.

   Because the debug certificate is created by the build tools and is insecure
   by design, most app stores (including the Google Play Store) do not accept
   apps signed with a debug certificate for publishing.

   Android Studio automatically stores your debug signing information in a
   signing configuration so you do not have to enter it every time you debug. A
   signing configuration is an object consisting of all of the necessary
   information to sign your app, including the keystore location, keystore
   password, key name, and key password.

   For more information about how to build and run apps for debugging, see
   `Build and Run Your App <#/tools/building/building-studio>`__.

   .. rubric:: Expiry of the debug certificate
      :name: expdebug

   The self-signed certificate used to sign your app for debugging has an
   expiration date of 30 years from its creation date. When the certificate
   expires, you get a build error.

   To fix this problem, simply delete the ``debug.keystore`` file stored in one
   of the following locations:

   -  ``~/.android/`` on OS X and Linux
   -  ``C:\Documents and Settings\``\ ``user``\ ``\.android\`` on Windows XP
   -  ``C:\Users\``\ ``user``\ ``\.android\`` on Windows Vista and Windows 7, 8,
      and 10

   The next time you build *and run* a debug version of your app, Android Studio
   regenerates a new keystore and debug key.

   .. rubric:: Sign your app for release to Google Play
      :name: sign-apk

   When you are ready to publish your app, you need to sign your app and upload
   it to an app store, such as Google Play. When publishing your app to Google
   Play for the first time, you must also configure Play App Signing. Play App
   Signing is optional for apps created before August 2021. This section shows
   you how to properly sign your app for release and configure Play App Signing.

   .. rubric:: Generate an upload key and keystore
      :name: generate-key

   If you don't already have an upload key, which is useful when configuring
   Play App Signing, you can generate one using Android Studio as follows:

   #. In the menu bar, click **Build > Generate Signed Bundle/APK**.

   #. In the **Generate Signed Bundle or APK** dialog, select **Android App
      Bundle** or **APK** and click **Next**.

   #. Below the field for **Key store path**, click **Create new**.

   #. On the **New Key Store** window, provide the following information for
      your keystore and key, as shown in figure 2.

      .. container:: attempt-right

         |image-keystore-wizard_2x|
         **Figure 2.** Create a new upload key and keystore in Android Studio.

   #. **Keystore**

      -  **Key store path:** Select the location where your keystore should be
         created. Also, a file name should be added to the end of the location
         path with the ``.jks`` extension.
      -  **Password:** Create and confirm a secure password for your keystore.

   #. **Key**

      -  **Alias:** Enter an identifying name for your key.
      -  **Password:** Create and confirm a secure password for your key. This
         should be the same as your keystore password. (Please refer to the
         `known issue <https://developer.android.google.cn/studio/known-issues#ki-key-keystore-warning>`__
         for more information)
      -  **Validity (years):** Set the length of time in years that your key
         will be valid. Your key should be valid for at least 25 years, so you
         can sign app updates with the same key through the lifespan of your
         app.
      -  **Certificate:** Enter some information about yourself for your
         certificate. This information is not displayed in your app, but is
         included in your certificate as part of the APK.

   #. Once you complete the form, click **OK**.

   #. If you would like to build and sign your app with your upload key,
      continue to the section about how to `Sign your app with your upload key <#sign_release>`__. If you only want to generate the key and keystore,
      click **Cancel**.

   .. rubric:: Sign your app with your key
      :name: sign_release

   If you already have an upload key, use it to sign your app. If instead your
   app is already signed and published to the Google Play store with an existing
   app signing key, use it to sign your app. You can later `generate and register a separate upload key <#register_upload_key>`__ with Google Play to
   sign and upload subsequent updates to your app.

   To sign your app using Android Studio, follow these steps:

   #. If you don’t currently have the **Generate Signed Bundle or APK** dialog
      open, click **Build > Generate Signed Bundle/APK**.

   #. In the **Generate Signed Bundle or APK** dialog, select either **Android
      App Bundle** or **APK** and click **Next**.

   #. Select a module from the drop down.

   #. Specify the path to your keystore, the alias for your key, and enter the
      passwords for both. If you haven't yet prepared your upload keystore and
      key, first `Generate an upload key and keystore <#generate-key>`__ and
      then return to complete this step.

      |image-generate-signed-apk-wizard_2x|

      **Figure 3**. Sign your app with your upload key.

      **Note:**\  For increased security, Google Play is introducing a new
      process to upload signing keys, and the option **Export encrypted key** in
      Android Studio is being deprecated. If you're signing an app with an
      existing app signing key, and you'd like to opt your app in to Play App
      Signing, see `Opt in an existing app <#enroll_existing>`__ for the process
      to encrypt and export your signing key.

   #. Click **Next**.

   #. In the next window (shown in figure 4), select a destination folder for
      your signed app, select the build type, choose the product flavor(s) if
      applicable.

   #. If you are building and signing an APK, you need to select which
      **Signature Versions** you want your app to support. To learn more, read
      about `app signing schemes <https://source.android.google.cn/security/apksigning>`__

      **Note:**\  Google Play supports `APK Signature Scheme v3 <https://source.android.google.cn/security/apksigning/v3>`__ for APKs
      that aren't already published with an existing `signing certificate lineage <#/studio/command-line/apksigner#usage-rotate>`__.

   #. Click **Create**.

      **Note:**\  If your project uses product flavors, you can select multiple
      product flavors while holding down the **Control** key on Windows/Linux,
      or the **Command** key on Mac OSX. Android Studio will generate a separate
      APK or app bundle for each product flavor you select.

   .. container:: attempt-right

      |image-generate_signed_bundle_popup-2x|
      **Figure 5.** Click the link in the popup to analyze or locate your app
      bundle.

   After Android Studio finishes building your signed app, you can either
   **locate** or **analyze** your app by clicking on the appropriate option in
   the pop-up notification, as shown in figure 5.

   Now you’re ready to opt your app in to Play App Signing and upload your app
   for release. If you’re new to the app publishing process, you may want to
   read the `Launch overview <#/distribute/best-practices/launch>`__. Otherwise,
   continue to the page about how to `Upload your app to the Play Console <#/studio/publish/upload-bundle>`__.

   .. rubric:: Using Play App Signing
      :name: enroll

   As described earlier in this page, configuring `Play App Signing <#app-signing-google-play>`__ is required to sign your app for
   distribution through Google Play (except for apps created before August 2021,
   which may continue distributing self-signed APKs). The steps you need to take
   depend on whether your app has not yet been published to Google Play, or your
   app is already signed and was published before August 2021 using an existing
   app signing key.

   .. rubric:: Configure a new app
      :name: enroll_new

   To configure signing for an app that has not yet been published to Google
   Play, proceed as follows:

   #. If you haven’t already done so, `generate an upload key <#generate-key>`__
      and `sign your app <#sign_release>`__ with that upload key.
   #. Sign in to your `Play Console <https://play.google.com/console/>`__.
   #. Follow the steps to `prepare & roll out your release <https://support.google.com/googleplay/android-developer/answer/7159011>`__
      to create a new release.
   #. After you choose a release track, configure app signing under the **App
      signing** section as follows:

      -  To have Google Play generate an app signing key for you and use it to
         sign your app, you don't have to do anything. The key you use to sign
         your first release becomes your upload key, and you should use it to
         sign future releases.
      -  To use the same key as another app on your developer account, select
         **Change app signing key > Use the same key as another app in this
         account**, select an app, and then click **Continue**.
      -  To provide your own signing key for Google to use when signing your
         app, select **Change app signing key** and select one of the **Export
         and upload** options that lets you securely upload a private key and
         its public certificate.

   **Note:**\  If you haven't already accepted the `Terms of Service <https://play.google.com/about/play-app-signing-terms.html>`__, you
   are required to review the terms and select **Accept** to continue.
   In the section called **App Bundles**, click **Browse files** to locate and
   upload the app you signed using your upload key. For more information about
   releasing your app, refer to `prepare & roll out your release <https://support.google.com/googleplay/android-developer/answer/7159011>`__.
   When you release your app after configuring Play App Signing, Google Play
   generates (unless you upload an existing key) and manages your app’s signing
   key for you. Simply sign subsequent updates to your app using your app’s
   upload key before uploading it to Google Play.

   If you need to create a new upload key for you app, go to the section about
   how to `Reset a lost or compromised private upload key <#reset_upload_key>`__.

   .. rubric:: Opt in an existing app
      :name: enroll_existing

   If you’re updating an app that’s already published to Google Play using an
   existing app signing key, you can opt in to Play App Signing as follows:

   #. Sign in to your `Play Console <https://play.google.com/console/>`__ and
      navigate to your app.
   #. On the left menu, click **Release > Setup > App signing**.
   #. If applicable, review the Terms of Service and select **Accept**.
   #. Select one of the options that best describes the signing key you want to
      upload to Google Play and follow the instructions that are shown. For
      example, if you are using a Java Keystore for your signing key, select
      **Upload a new app signing key from Java Keystore** and follow the
      instructions to download and run the PEPK tool, and upload the generated
      file with your encrypted key.
   #. Click **Enroll**.

   You should now see a page with the details of your app’s signing and upload
   certificates. Google Play now signs your app with your existing key when
   deploying it to users. However, one of the most important benefits to Play
   App Signing is the ability to separate the key you use to sign the artifact
   you upload to Google Play from the key that Google Play uses to sign your app
   for distribution to users. So, consider following the steps in the next
   section to generate and register a separate upload key.

   .. rubric:: Generate and register an upload certificate
      :name: register_upload_key

   When you're publishing an app that is not signed by an upload key, the Google
   Play Console provides the option to register one for future updates to the
   app. Although this is an optional step, it’s recommended that you publish
   your app with a key that’s separate from the one Google Play uses to
   distribute your app to users. That way, Google keeps your signing key secure,
   and you have the option to `reset a lost or compromised private upload key <#reset_upload_key>`__. This section describes how to create an upload
   key, generate an upload certificate from it, and register that certificate
   with Google Play for future updates of your app.

   The following describes the situations in which you see the option to
   register an upload certificate in the Play Console:

   -  When you publish a new app that’s signed with a signing key and opt it in
      to Play App Signing.
   -  When you are about to publish an existing app that’s already opted in to
      Play App Signing, but it is signed using its signing key.

   If you are not publishing an update to an existing app that’s already opted
   in to Play App Signing, and you’d like to register an upload certificate,
   complete the steps below and continue on to the section about how to `reset a lost or compromised private upload key <#reset_upload_key>`__.

   If you haven’t already done so, `generate an upload key and keystore <#generate-key>`__.

   After you create your upload key and keystore, you need to generate a public
   certificate from your upload key using
   `keytool <https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html>`__,
   with the following command:

   .. code:: none

      $ keytool -export -rfc
        -keystore your-upload-keystore.jks
        -alias upload-alias
        -file output_upload_certificate.pem

   Now that you have your upload certificate, register it with Google when
   prompted in the Play Console or `when resetting your upload key <#reset_upload_key>`__.

   .. rubric:: Upgrade your app signing key
      :name: upgrade_key

   In some circumstances, you might want to change your app's signing key. For
   example, because you want a cryptographically stronger key or your signing
   key has been compromised. However, because users can only update your app if
   the update is signed with the same signing key, it's difficult to change the
   signing key for an app that's already published.

   If you publish your app to Google Play, you can upgrade the signing key for
   your published app through the Play Console—your new key is used to sign
   installs and app updates on Android 13 and higher, while your older app
   signing key is used to sign updates for users on earlier versions of Android.

   To learn more, read `Upgrade your app signing key <https://support.google.com/googleplay/android-developer/answer/7384423#Upgrade>`__.

   .. rubric:: Reset a lost or compromised private upload key
      :name: reset_upload_key

   If you lost your private upload key or your private key has been compromised,
   you can create a new one and `request an upload key reset <https://support.google.com/googleplay/android-developer/answer/7384423#reset>`__
   in the Play console.

   **Note:**\  Resetting your upload key will not affect the app signing key
   that Google Play uses to re-sign APKs before delivering to users.

   .. rubric:: Configure the build process to automatically sign your app
      :name: sign-auto

   In Android Studio, you can configure your project to sign the release version
   of your app automatically during the build process by creating a signing
   configuration and assigning it to your release build type. A signing
   configuration consists of a keystore location, keystore password, key alias,
   and key password. To create a signing configuration and assign it to your
   release build type using Android Studio, complete the following steps:

   #. In the **Project** window, right click on your app and click **Open Module
      Settings**.

   #. On the **Project Structure** window, under **Modules** in the left panel,
      click the module you would like to sign.

   #. Click the **Signing** tab, then click **Add** |image-add-signing-config_2-1_2x|.

   #. Select your keystore file, enter a name for this signing configuration (as
      you may create more than one), and enter the required information.

      |image-project-structure-signing_2-1_2x|

      **Figure 7**. The window for creating a new signing configuration.

   #. Click the **Build Types** tab.

   #. Click the **release** build.

   #. Under **Signing Config**, select the signing configuration you just
      created.

      |image-project-structure-build-types_2-1_2x|

      **Figure 8**. Select a signing configuration in Android Studio.

   #. Click **OK**.

   Now every time you build your release build type by selecting an option under
   **Build > Build Bundle(s) / APK(s)** in Android Studio, the IDE will sign
   your app automatically, using the signing configuration you specified. You
   can find your signed APK or app bundle in the ``build/outputs/`` directory
   inside the project directory for the module you are building.

   When you create a signing configuration, your signing information is included
   in plain text in your Gradle build files. If you are working in a team or
   sharing your code publicly, you should keep your signing information secure
   by removing it from the build files and storing it separately. You can read
   more about how to remove your signing information from your build files in
   `Remove Signing Information from Your Build Files <#secure-shared-keystore>`__. For more about keeping your signing
   information secure, see `Keep your key secure <#secure_key>`__, below.

   .. rubric:: Sign each product flavor differently
      :name: sign-flavors

   If your app uses product flavors and you would like to sign each flavor
   differently, you can create additional signing configurations and assign them
   by flavor:

   #. In the **Project** window, right click on your app and click **Open Module
      Settings**.

   #. On the **Project Structure** window, under **Modules** in the left panel,
      click the module you would like to sign.

   #. Click the **Signing** tab, then click **Add** |image-add-signing-config_2-1_2x|.

   #. Select your keystore file, enter a name for this signing configuration (as
      you may create more than one), and enter the required information.

      |image-project-structure-signing_2-1_2x|

      **Figure 10**. The window for creating a new signing configuration.

   #. Repeat steps 3 and 4 as necessary until you have created all your signing
      configurations.

   #. Click the **Flavors** tab.

   #. Click the flavor you would like to configure, then select the appropriate
      signing configuration from the **Signing Config** dropdown menu. |image-project-structure-flavors_2-1_2x|

      **Figure 11**. Configure signing settings by product flavor.

      Repeat to configure any additional product flavors.

   #. Click **OK**.

   You can also specify your signing settings in Gradle configuration files. For
   more information, see `Configuring Signing Settings <#/studio/build/build-variants#signing>`__.

   .. rubric:: Run a signing report
      :name: signing_report

   To get signing information for each of your app's variants, run the Gradle
   ``signingReport`` task in Android Studio:

   #. Select **View > Tool Windows > Gradle** to open the Gradle tool window
   #. Select **YourApp > Tasks > android > signingReport** to run the report

   **Note:**\  If you don't see ``signingReport`` in the list of Gradle tasks,
   open the Android Studio settings dialog by selecting **File > Settings**
   (**Android Studio > Settings** on macOS), select **Experimental**, then under
   the Gradle heading, clear any checkboxes that limit the types of tasks
   included in the Gradle task list.

   .. rubric:: Manage your own signing key
      :name: opt-out

   If you choose not to opt in to Play App Signing (only for apps created before
   August 2021), you can manage your own app signing key and keystore. Keep in
   mind, **you are responsible for securing the key and the keystore**.
   Additionally, your app will not be able to support Android App Bundles, Play
   Feature Delivery and Play Asset Delivery.

   When you are ready to create your own key and keystore, make sure you first
   choose a strong password for your keystore and a separate strong password for
   each private key stored in the keystore. You must keep your keystore in a
   safe and secure place. If you lose access to your app signing key or your key
   is compromised, Google cannot retrieve the app signing key for you, and you
   will not be able to release new versions of your app to users as updates to
   the original app. For more information, see `Keep your key secure <#secure_key>`__, below.

   If you manage your own app signing key and keystore, when you sign your APK,
   you will sign it locally using your app signing key and upload the signed APK
   directly to the Google Play Store for distribution as shown in figure 12.

   |image-appsigning_selfmanagediagram_2x|

   **Figure 12**. Signing an app when you manage your own app signing key

   When you use `Play App Signing <#/studio/publish/app-signing#google-play-app-signing>`__, Google
   keeps your signing key safe, and ensures your apps are correctly signed and
   able to receive updates throughout their lifespans. However, if you decide to
   manage your app signing key yourself, there are a few considerations you
   should keep in mind.

   .. rubric:: Signing considerations
      :name: considerations

   You should sign your app with the same certificate throughout its expected
   lifespan. There are several reasons why you should do so:

   -  **App upgrade:** When the system is installing an update to an app, it
      compares the certificate(s) in the new version with those in the existing
      version. The system allows the update if the certificates match. If you
      sign the new version with a different certificate, you must assign a
      different package name to the app—in this case, the user installs the new
      version as a completely new app.
   -  **App modularity:** Android allows APKs signed by the same certificate to
      run in the same process, if the apps so request, so that the system treats
      them as a single app. In this way you can deploy your app in modules, and
      users can update each of the modules independently.
   -  **Code/data sharing through permissions:** Android provides
      signature-based permissions enforcement, so that an app can expose
      functionality to another app that is signed with a specified certificate.
      By signing multiple APKs with the same certificate and using
      signature-based permissions checks, your apps can share code and data in a
      secure manner.

   If you plan to support upgrades for an app, ensure that your app signing key
   has a validity period that exceeds the expected lifespan of that app. A
   validity period of 25 years or more is recommended. When your key's validity
   period expires, users will no longer be able to seamlessly upgrade to new
   versions of your app.

   If you plan to publish your apps on Google Play, the key you use to sign your
   app must have a validity period ending after 22 October 2033. Google Play
   enforces this requirement to ensure that users can seamlessly upgrade apps
   when new versions are available.

   .. rubric:: Keep your key secure
      :name: secure_key

   If you choose to manage and secure your app signing key and keystore yourself
   (instead of opting in to `Play App Signing <#app-signing-google-play>`__),
   securing your app signing key is of critical importance, both to you and to
   the user. If you allow someone to use your key, or if you leave your keystore
   and passwords in an unsecured location such that a third-party could find and
   use them, your authoring identity and the trust of the user are compromised.

   **Note:**\  If you use Play App Signing, your app signing key is kept secure
   using Google's infrastructure. You should still keep your upload key secure
   as described below. If your upload key is compromised, you can `request an upload key reset <#reset_upload_key>`__ in the Play Console.
   If a third party should manage to take your app signing key without your
   knowledge or permission, that person could sign and distribute apps that
   maliciously replace your authentic apps or corrupt them. Such a person could
   also sign and distribute apps under your identity that attack other apps or
   the system itself, or corrupt or steal user data.

   Your private key is required for signing all future versions of your app. If
   you lose or misplace your key, you will not be able to publish updates to
   your existing app. You cannot regenerate a previously generated key.

   Your reputation as a developer entity depends on your securing your app
   signing key properly, at all times, until the key is expired. Here are some
   tips for keeping your key secure:

   -  Select strong passwords for the keystore and key.
   -  Do not give or lend anyone your private key, and do not let unauthorized
      persons know your keystore and key passwords.
   -  Keep the keystore file containing your private key in a safe, secure
      place.

   In general, if you follow common-sense precautions when generating, using,
   and storing your key, it will remain secure.

   .. rubric:: Remove signing information from your build files
      :name: secure-shared-keystore

   When you create a signing configuration, Android Studio adds your signing
   information in plain text to the module's ``build.gradle`` files. If you are
   working with a team or open-sourcing your code, you should move this
   sensitive information out of the build files so it is not easily accessible
   to others. To do this, you should create a separate properties file to store
   secure information and refer to that file in your build files as follows:

   #. Create a signing configuration, and assign it to one or more build types.
      These instructions assume you have configured a single signing
      configuration for your release build type, as described in `Configure the build process to automatically sign your app <#sign-auto>`__, above.

   #. Create a file named ``keystore.properties`` in the root directory of your
      project. This file should contain your signing information, as follows:

      .. code:: none

         storePassword=myStorePassword
         keyPassword=mykeyPassword
         keyAlias=myKeyAlias
         storeFile=myStoreFileLocation

   #. In your module's ``build.gradle`` file, add code to load your
      ``keystore.properties`` file before the ``android {}`` block.

      .. container::

         .. container:: ds-selector-tabs

            .. container:: section

               .. rubric:: Groovy
                  :name: groovy

               .. code:: prettyprint

                  ...

                  // Create a variable called keystorePropertiesFile, and initialize it to your
                  // keystore.properties file, in the rootProject folder.
                  def keystorePropertiesFile = rootProject.file("keystore.properties")

                  // Initialize a new Properties() object called keystoreProperties.
                  def keystoreProperties = new Properties()

                  // Load your keystore.properties file into the keystoreProperties object.
                  keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                  android {
                      ...
                  }

            .. container:: section

               .. rubric:: Kotlin
                  :name: kts

               .. code:: prettyprint

                  ...
                  import java.util.Properties
                  import java.io.FileInputStream

                  // Create a variable called keystorePropertiesFile, and initialize it to your
                  // keystore.properties file, in the rootProject folder.
                  val keystorePropertiesFile = rootProject.file("keystore.properties")

                  // Initialize a new Properties() object called keystoreProperties.
                  val keystoreProperties = Properties()

                  // Load your keystore.properties file into the keystoreProperties object.
                  keystoreProperties.load(FileInputStream(keystorePropertiesFile))

                  android {
                      ...
                  }

      **Note:** You could choose to store your ``keystore.properties`` file in
      another location (for example, in the module folder rather than the root
      folder for the project, or on your build server if you are using a
      continuous integration tool). In that case, you should modify the code
      above to correctly initialize ``keystorePropertiesFile`` using your actual
      ``keystore.properties`` file's location.

   #. You can refer to properties stored in ``keystoreProperties`` using the
      syntax ``keystoreProperties['``\ ``propertyName``\ ``']``. Modify the
      ``signingConfigs`` block of your module's ``build.gradle`` file to
      reference the signing information stored in ``keystoreProperties`` using
      this syntax.

      .. container::

         .. container:: ds-selector-tabs

            .. container:: section

               .. rubric:: Groovy
                  :name: groovy

               .. code:: prettyprint

                  android {
                      signingConfigs {
                          config {
                              keyAlias keystoreProperties['keyAlias']
                              keyPassword keystoreProperties['keyPassword']
                              storeFile file(keystoreProperties['storeFile'])
                              storePassword keystoreProperties['storePassword']
                          }
                      }
                      ...
                    }

            .. container:: section

               .. rubric:: Kotlin
                  :name: kts

               .. code:: prettyprint

                  android {
                      signingConfigs {
                          create("config") {
                              keyAlias = keystoreProperties["keyAlias"] as String
                              keyPassword = keystoreProperties["keyPassword"] as String
                              storeFile = file(keystoreProperties["storeFile"] as String)
                              storePassword = keystoreProperties["storePassword"] as String
                          }
                      }
                      ...
                    }

   #. Open the **Build Variants** tool window and ensure that the release build
      type is selected.

   #. Select an option under **Build > Build Bundle(s) / APK(s)** to build
      either an APK or app bundle of your release build. You should see the
      build output in the ``build/outputs/`` directory for your module.

   Because your build files no longer contain sensitive information, you can now
   include them in source control or upload them to a shared codebase. Be sure
   to keep the ``keystore.properties`` file secure. This may include removing it
   from your source control system.

Last updated 2023-08-16 UTC.

.. |image-appsigning_googleplayappsigningdiagram_2x| image:: https://developer.android.google.cn/static/studio/images/publish/appsigning_googleplayappsigningdiagram_2x.png
   :width: 734px
.. |image-keystore-wizard_2x| image:: https://developer.android.google.cn/static/studio/images/publish/keystore-wizard_2x.png
   :width: 522px
.. |image-generate-signed-apk-wizard_2x| image:: https://developer.android.google.cn/static/studio/images/publish/generate-signed-apk-wizard_2x.png
   :width: 705px
.. |image-generate_signed_bundle_popup-2x| image:: https://developer.android.google.cn/static/studio/images/publish/generate_signed_bundle_popup-2x.png
   :width: 358px
.. |image-add-signing-config_2-1_2x| image:: https://developer.android.google.cn/static/studio/images/publish/add-signing-config_2-1_2x.png
   :class: inline-icon
.. |image-project-structure-signing_2-1_2x| image:: https://developer.android.google.cn/static/studio/images/publish/project-structure-signing_2-1_2x.png
   :width: 820px
.. |image-project-structure-build-types_2-1_2x| image:: https://developer.android.google.cn/static/studio/images/publish/project-structure-build-types_2-1_2x.png
   :width: 819px
.. |image-add-signing-config_2-1_2x| image:: https://developer.android.google.cn/static/studio/images/publish/add-signing-config_2-1_2x.png
   :class: inline-icon
.. |image-project-structure-signing_2-1_2x| image:: https://developer.android.google.cn/static/studio/images/publish/project-structure-signing_2-1_2x.png
   :width: 820px
.. |image-project-structure-flavors_2-1_2x| image:: https://developer.android.google.cn/static/studio/images/publish/project-structure-flavors_2-1_2x.png
   :width: 816px
.. |image-appsigning_selfmanagediagram_2x| image:: https://developer.android.google.cn/static/studio/images/publish/appsigning_selfmanagediagram_2x.png
   :width: 734px

/Upload your app
================

.. https://developer.android.google.cn/studio/publish/upload-bundle?hl=en

.. container:: devsite-article-body clearfix

   After you `sign the release version of your app <#/studio/publish/app-signing#sign-apk>`__, the next step is to upload it
   to Google Play to inspect, test, and publish your app. Before you get
   started, you must meet the following requirements:

   -  If you haven't already done so, `enroll in Play App Signing <#/studio/publish/app-signing#enroll>`__, which is the mandatory
      way to upload and sign all new apps since August 2021.
   -  Ensure that your app meets Google Play's size requirements. Google Play
      supports compressed app downloads of 200 MB or less. To learn more, read
      `Compressed download size restriction <#/guide/app-bundle#size_restrictions>`__.

   After you've met the requirements above, `upload your app to the Play Console <https://support.google.com/googleplay/android-developer/answer/7159011>`__
   .

   This page also describes how you can test and update your app bundle after
   it's been uploaded.

   .. rubric:: Inspect APKs using bundle explorer
      :name: bundle_explorer

   If you upload your app as an Android App Bundle, the Play Console
   automatically generates split APKs and multi-APKs for all device
   configurations your app supports. In the Play Console, you can use the app
   bundle explorer to see all APK artifacts that Google Play generates, inspect
   data such as supported devices and APK size savings, and download generated
   APKs to deploy and test locally.

   To learn more about bundle explorer, see the Play Console help topic `Inspect app versions with the app bundle explorer <https://support.google.com/googleplay/android-developer/answer/9006925>`__.

   .. rubric:: Test your app internally
      :name: test_with_play

   There are several ways to share your app internally for testing:

   -  Upload and distribute your app internally using `Firebase App Distribution <https://firebase.com/docs/app-distribution>`__.
   -  Upload and distribute your app internally using `Play Console's internal app sharing tool <https://play.google.com/console/internal-app-sharing>`__.

   Each of these offers slightly different benefits, so use the one that works
   best for your team.

   -  Firebase app distribution lets you deploy any kind of build and distribute
      it to a list of users. This can be a good way of distributing builds from
      a continuous integration system so that testers can access specific builds
      for testing.

   -  Play console internal track is faster to deploy compared to the alpha or
      beta tracks and gives you access to services such as Subscriptions, In-App
      purchases, and ads. This also goes through Play Console signing and
      shrinking so is the closest to what is distributed to end users through
      the play store. It is possible to defer the Play Store review until later
      to avoid having to wait for review to complete. However, the review is
      required before you can fully distribute your app to end-users through the
      Play Store.

   .. rubric:: Update your app bundle
      :name: update_your_app

   To update your app after you upload it to the Play Console, you need to
   increase the version code included in the base module, then build and upload
   a new app bundle. Google Play then generates updated APKs with new version
   codes and serves them to users as needed.

Last updated 2023-11-15 UTC.


/TOC 💛 IntelliJ Platform SDK
=============================

.. _IntelliJ Platform SDK: https://plugins.jetbrains.com/docs/intellij/welcome.html

