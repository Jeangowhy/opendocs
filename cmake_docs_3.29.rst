


/P/🚀 Docs combine script
===============================


文档合并脚本中使用了 sed 流式编辑器、awk 结构化数据编辑器，使用教程参考 OpenDocs： 

1. [Sed in 5 Minutes](https://github.com/Jeangowhy/opendocs/blob/main/sed.info)
2. [AWK in 5 Minutes](https://github.com/Jeangowhy/opendocs/blob/main/sed.info)

.. code-block:: bash

    #! /usr/bin/env bash
    
    print_title () {
        printf '\n%.0s' {1..2};
        printf "\n/P/🚀 $1\n"
        echo "\n/P/🚀 $1\n" | sed -n 's/./=/gp'
        printf '\n%.0s' {1..2};
    }
    
    function filter {
        local parent=`echo $1 | sed -n 's/[^/\]\+$//p'`
        echo "$1"
        echo "[$1] ==>" >&2
        while read -r it; do
            doc="$parent$it"
            if ! [ -d "$doc" ]; then # not a directory
                doc="$(echo "$parent$it.rst" | sed -n 's/.rst.rst/.rst/;p' | sed -n 's|manual//|/|;p')"
            # else
            #     echo "[$doc] is a directory -->" >&2
            fi
            # echo "[$parent] [$it] [$doc]" >&2
            if [ -f "$doc" ] && [ -z "${doc/*index.rst/}" ]; then
                filter "$doc"
            elif ! [ -d "$doc" ]; then
                echo "$doc"
            fi
        done <<EOF
        `sed -n "/^ *.. toctree::/,/^\S/{ s/^ \+[^:]\+$/\0/p }" $1 | sed -n 's|.*<\(.*\)>|\1|;p'`
    EOF
    }
    
    function toc() {
        echo ./README.rst
        echo ./CONTRIBUTING.rst
        filter index.rst
        filter manual/cpack-generators.7.rst
        filter manual/cmake-commands.7.rst
        filter manual/cmake-env-variables.7.rst
        filter manual/cmake-generators.7.rst
        filter manual/cmake-policies.7.rst
        filter manual/cmake-properties.7.rst
        filter manual/cmake-variables.7.rst
        # filter release/index.rst
    }
    
    function doc(){
        cat << EOF
    文档合并脚本中使用了 sed 流式编辑器、awk 结构化数据编辑器，使用教程参考 OpenDocs： 
    
    1. [Sed in 5 Minutes](https://github.com/Jeangowhy/opendocs/blob/main/sed.info)
    2. [AWK in 5 Minutes](https://github.com/Jeangowhy/opendocs/blob/main/sed.info)
    
    EOF
    }
    
    function combine() {
        print_title "Docs combine script"
        doc
        echo '.. code-block:: bash'
    
        echo ''
        cat $0 | sed -n 's/^/    /p'
    
        echo ''
        echo "Docs Count: `find ./ -name "*.rst" | wc -l` ::"
        echo ''
        # find ./ -name "*.rst" | sed -n 's/.*/    \0/p' | grep -v library
    
        while read -r it
        do 
            print_title "$it"
            cat "$it"
        done << EOF
    `toc`
    EOF
    }
    
    function include(){
        while read -r it; do
            doc="$(find ./Help | grep "$it")" 
            print_title "$doc"
            printf ".. code-block:: \n\n"
            cat "$doc"| sed -n 's/.*/    \0/p'
        done <<EOF
        $(
        # cat "$out" | sed -n 's/^.. include:://p'
        # cat "$out" | sed -n 's/^.. literalinclude:://p'
        find ./Help -type f | grep -v 'rst\|png'
            )
    EOF
    }
    
    out=/c/opendocs/cmake_docs_3.29.rst
    combine > $out; subl $out
    # include >> $out; subl $out

    function combine_fix()
    {
        while read -r it
        do 
            print_title "$it"
            cat "$it"
        done << EOF
        ./Help/dev/README.rst
        ./Help/dev/maint.rst
        ./Help/dev/documentation.rst
        ./Help/dev/experimental.rst
        ./Help/dev/review.rst
        ./Help/dev/source.rst
        ./Help/dev/testing.rst
        ./Help/dev/try_compile-linker-language.rst
    EOF
    }
    combine_fix >> $out; subl $out

Docs Count: 2049 ::




/P/🚀 README.rst
========================


CMake
*****

Introduction
============

CMake is a cross-platform, open-source build system generator.
For full documentation visit the `CMake Home Page`_ and the
`CMake Documentation Page`_. The `CMake Community Wiki`_ also
references useful guides and recipes.

.. _`CMake Home Page`: https://cmake.org
.. _`CMake Documentation Page`: https://cmake.org/documentation
.. _`CMake Community Wiki`: https://gitlab.kitware.com/cmake/community/-/wikis/home

CMake is maintained and supported by `Kitware`_ and developed in
collaboration with a productive community of contributors.

.. _`Kitware`: https://www.kitware.com/cmake

License
=======

CMake is distributed under the OSI-approved BSD 3-clause License.
See `Copyright.txt`_ for details.

.. _`Copyright.txt`: Copyright.txt

Building CMake
==============

Supported Platforms
-------------------

* Microsoft Windows
* Apple macOS
* Linux
* FreeBSD
* OpenBSD
* Solaris
* AIX

Other UNIX-like operating systems may work too out of the box, if not
it should not be a major problem to port CMake to this platform.
Please post to the `CMake Discourse Forum`_ to ask if others have
had experience with the platform.

.. _`CMake Discourse Forum`: https://discourse.cmake.org

Building CMake from Scratch
---------------------------

UNIX/Mac OSX/MinGW/MSYS/Cygwin
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You need to have a C++ compiler (supporting C++11) and a ``make`` installed.
Run the ``bootstrap`` script you find in the source directory of CMake.
You can use the ``--help`` option to see the supported options.
You may use the ``--prefix=<install_prefix>`` option to specify a custom
installation directory for CMake.  Once this has finished successfully,
run ``make`` and ``make install``.

For example, if you simply want to build and install CMake from source,
you can build directly in the source tree::

  $ ./bootstrap && make && sudo make install

Or, if you plan to develop CMake or otherwise run the test suite, create
a separate build tree::

  $ mkdir build && cd build
  $ ../bootstrap && make

Windows
^^^^^^^

There are two ways for building CMake under Windows:

1. Compile with MSVC from VS 2015 or later.
   You need to download and install a binary release of CMake.  You can get
   these releases from the `CMake Download Page`_.  Then proceed with the
   instructions below for `Building CMake with CMake`_.

2. Bootstrap with MinGW under MSYS2.
   Download and install `MSYS2`_.  Then install the required build tools::

     $ pacman -S --needed git base-devel mingw-w64-x86_64-gcc

   and bootstrap as above.

.. _`CMake Download Page`: https://cmake.org/download
.. _`MSYS2`: https://www.msys2.org/

Building CMake with CMake
-------------------------

You can build CMake as any other project with a CMake-based build system:
run the installed CMake on the sources of this CMake with your preferred
options and generators. Then build it and install it.
For instructions how to do this, see documentation on `Running CMake`_.

.. _`Running CMake`: https://cmake.org/runningcmake

To build the documentation, install `Sphinx`_ and configure CMake with
``-DSPHINX_HTML=ON`` and/or ``-DSPHINX_MAN=ON`` to enable the "html" or
"man" builder.  Add ``-DSPHINX_EXECUTABLE=/path/to/sphinx-build`` if the
tool is not found automatically.

.. _`Sphinx`: https://sphinx-doc.org

Reporting Bugs
==============

If you have found a bug:

1. If you have a patch, please read the `CONTRIBUTING.rst`_ document.

2. Otherwise, please post to the `CMake Discourse Forum`_ and ask about
   the expected and observed behaviors to determine if it is really
   a bug.

3. Finally, if the issue is not resolved by the above steps, open
   an entry in the `CMake Issue Tracker`_.

.. _`CMake Issue Tracker`: https://gitlab.kitware.com/cmake/cmake/-/issues

Contributing
============

See `CONTRIBUTING.rst`_ for instructions to contribute.

.. _`CONTRIBUTING.rst`: CONTRIBUTING.rst



/P/🚀 ./CONTRIBUTING.rst
==============================


Contributing to CMake
*********************

The following summarizes the process for contributing changes.
See documentation on `CMake Development`_ for more information.

.. _`CMake Development`: Help/dev/README.rst

Community
=========

CMake is maintained and supported by `Kitware`_ and developed in
collaboration with a productive community of contributors.
Please post to the ``Development`` category of the `CMake Forum`_ to raise
discussion of development topics.

.. _`Kitware`: https://www.kitware.com/cmake
.. _`CMake Forum`: https://discourse.cmake.org

Patches
=======

CMake uses `Kitware's GitLab Instance`_ to manage development and code review.
To contribute patches:

#. Fork the upstream `CMake Repository`_ into a personal account.
#. Run `Utilities/SetupForDevelopment.sh`_ for local git configuration.
#. See `Building CMake`_ for building CMake locally.
#. See the `CMake Source Code Guide`_ for coding guidelines.
#. Create a topic branch named suitably for your work.
   Base all new work on the upstream ``master`` branch.
   Base work on the upstream ``release`` branch only if it fixes a
   regression or bug in a feature new to that release.
   If in doubt, prefer ``master``.  Reviewers may simply ask for
   a rebase if deemed appropriate in particular cases.
#. Create commits making incremental, distinct, logically complete changes
   with appropriate `commit messages`_.
#. Push the topic branch to a personal repository fork on GitLab.
#. Create a GitLab Merge Request targeting the upstream ``master`` branch
   (even if the change is intended for merge to the ``release`` branch).
   Check the box labeled "Allow commits from members who can merge to the
   target branch".  This will allow maintainers to make minor edits on your
   behalf.

The merge request will enter the `CMake Review Process`_ for consideration.

.. _`Kitware's GitLab Instance`: https://gitlab.kitware.com
.. _`CMake Repository`: https://gitlab.kitware.com/cmake/cmake
.. _`Utilities/SetupForDevelopment.sh`: Utilities/SetupForDevelopment.sh
.. _`Building CMake`: README.rst#building-cmake
.. _`CMake Source Code Guide`: Help/dev/source.rst
.. _`commit messages`: Help/dev/review.rst#commit-messages
.. _`CMake Review Process`: Help/dev/review.rst

CMake Dashboard Client
======================

The *integration testing* step of the `CMake Review Process`_ uses a set of
testing machines that follow an integration branch on their own schedule to
drive testing and submit results to the `CMake CDash Page`_.  Anyone is
welcome to provide testing machines in order to help keep support for their
platforms working.

See documentation on `CMake Testing Process`_ for more information.

.. _`CMake CDash Page`: https://open.cdash.org/index.php?project=CMake
.. _`CMake Testing Process`: Help/dev/testing.rst

License
=======

We do not require any formal copyright assignment or contributor license
agreement.  Any contributions intentionally sent upstream are presumed
to be offered under terms of the OSI-approved BSD 3-clause License.
See `Copyright.txt`_ for details.

.. _`Copyright.txt`: Copyright.txt



/P/🚀 TOC index.rst
============================


.. title:: CMake Reference Documentation

Introduction
############

CMake is a tool to manage building of source code.  Originally, CMake was
designed as a generator for various dialects of ``Makefile``, today
CMake generates modern buildsystems such as ``Ninja`` as well as project
files for IDEs such as Visual Studio and Xcode.

CMake is widely used for the C and C++ languages, but it may be used to
build source code of other languages too.

People encountering CMake for the first time may have different initial
goals.  To learn how to build a source code package downloaded from the
internet, start with the :guide:`User Interaction Guide`.
This will detail the steps needed to run the :manual:`cmake(1)` or
:manual:`cmake-gui(1)` executable and how to choose a generator, and
how to complete the build.

The :guide:`Using Dependencies Guide` is aimed at developers
wishing to get started using a third-party library.

For developers starting a project using CMake, the :guide:`CMake Tutorial`
is a suitable starting point.  The :manual:`cmake-buildsystem(7)`
manual is aimed at developers expanding their knowledge of maintaining
a buildsystem and becoming familiar with the build targets that
can be represented in CMake.  The :manual:`cmake-packages(7)` manual
explains how to create packages which can easily be consumed by
third-party CMake-based buildsystems.

Command-Line Tools
##################

.. toctree::
   :maxdepth: 1

    Help/manual/cmake.1
    Help/manual/ctest.1
    Help/manual/cpack.1

Interactive Dialogs
###################

.. toctree::
   :maxdepth: 1

    Help/manual/cmake-gui.1
    Help/manual/ccmake.1

Reference Manuals
#################

.. toctree::
   :maxdepth: 1

    Help/manual/cmake-buildsystem.7
    Help/manual/cmake-commands.7
    Help/manual/cmake-compile-features.7
    Help/manual/cmake-configure-log.7
    Help/manual/cmake-cxxmodules.7
    Help/manual/cmake-developer.7
    Help/manual/cmake-env-variables.7
    Help/manual/cmake-file-api.7
    Help/manual/cmake-generator-expressions.7
    Help/manual/cmake-generators.7
    Help/manual/cmake-language.7
    Help/manual/cmake-modules.7
    Help/manual/cmake-packages.7
    Help/manual/cmake-policies.7
    Help/manual/cmake-presets.7
    Help/manual/cmake-properties.7
    Help/manual/cmake-qt.7
    Help/manual/cmake-server.7
    Help/manual/cmake-toolchains.7
    Help/manual/cmake-variables.7
    Help/manual/cpack-generators.7

.. only:: not man

 Guides
 ######

 .. toctree::
    :maxdepth: 1

    guide/tutorial/index
    guide/user-interaction/index
    guide/using-dependencies/index
    guide/importing-exporting/index
    guide/ide-integration/index

.. only:: html or text

 Release Notes
 #############

 .. toctree::
    :maxdepth: 1

    release/index

.. only:: html

 Index and Search
 ################

 * :ref:`genindex`
 * :ref:`search`



/P/🚀 manual/cmake.1.rst
======================================


.. cmake-manual-description: CMake Command-Line Reference

cmake(1)
********

Synopsis
========

.. parsed-literal::

 `Generate a Project Buildsystem`_
  cmake [<options>] -B <path-to-build> [-S <path-to-source>]
  cmake [<options>] <path-to-source | path-to-existing-build>

 `Build a Project`_
  cmake --build <dir> [<options>] [-- <build-tool-options>]

 `Install a Project`_
  cmake --install <dir> [<options>]

 `Open a Project`_
  cmake --open <dir>

 `Run a Script`_
  cmake [-D <var>=<value>]... -P <cmake-script-file>

 `Run a Command-Line Tool`_
  cmake -E <command> [<options>]

 `Run the Find-Package Tool`_
  cmake --find-package [<options>]

 `Run a Workflow Preset`_
  cmake --workflow [<options>]

 `View Help`_
  cmake --help[-<topic>]

Description
===========

The :program:`cmake` executable is the command-line interface of the cross-platform
buildsystem generator CMake.  The above `Synopsis`_ lists various actions
the tool can perform as described in sections below.

To build a software project with CMake, `Generate a Project Buildsystem`_.
Optionally use :program:`cmake` to `Build a Project`_, `Install a Project`_ or just
run the corresponding build tool (e.g. ``make``) directly.  :program:`cmake` can also
be used to `View Help`_.

The other actions are meant for use by software developers writing
scripts in the :manual:`CMake language <cmake-language(7)>` to support
their builds.

For graphical user interfaces that may be used in place of :program:`cmake`,
see :manual:`ccmake <ccmake(1)>` and :manual:`cmake-gui <cmake-gui(1)>`.
For command-line interfaces to the CMake testing and packaging facilities,
see :manual:`ctest <ctest(1)>` and :manual:`cpack <cpack(1)>`.

For more information on CMake at large, `see also`_ the links at the end
of this manual.


Introduction to CMake Buildsystems
==================================

A *buildsystem* describes how to build a project's executables and libraries
from its source code using a *build tool* to automate the process.  For
example, a buildsystem may be a ``Makefile`` for use with a command-line
``make`` tool or a project file for an Integrated Development Environment
(IDE).  In order to avoid maintaining multiple such buildsystems, a project
may specify its buildsystem abstractly using files written in the
:manual:`CMake language <cmake-language(7)>`.  From these files CMake
generates a preferred buildsystem locally for each user through a backend
called a *generator*.

To generate a buildsystem with CMake, the following must be selected:

Source Tree
  The top-level directory containing source files provided by the project.
  The project specifies its buildsystem using files as described in the
  :manual:`cmake-language(7)` manual, starting with a top-level file named
  ``CMakeLists.txt``.  These files specify build targets and their
  dependencies as described in the :manual:`cmake-buildsystem(7)` manual.

Build Tree
  The top-level directory in which buildsystem files and build output
  artifacts (e.g. executables and libraries) are to be stored.
  CMake will write a ``CMakeCache.txt`` file to identify the directory
  as a build tree and store persistent information such as buildsystem
  configuration options.

  To maintain a pristine source tree, perform an *out-of-source* build
  by using a separate dedicated build tree.  An *in-source* build in
  which the build tree is placed in the same directory as the source
  tree is also supported, but discouraged.

Generator
  This chooses the kind of buildsystem to generate.  See the
  :manual:`cmake-generators(7)` manual for documentation of all generators.
  Run :option:`cmake --help` to see a list of generators available locally.
  Optionally use the :option:`-G <cmake -G>` option below to specify a
  generator, or simply accept the default CMake chooses for the current
  platform.

  When using one of the :ref:`Command-Line Build Tool Generators`
  CMake expects that the environment needed by the compiler toolchain
  is already configured in the shell.  When using one of the
  :ref:`IDE Build Tool Generators`, no particular environment is needed.

.. _`Generate a Project Buildsystem`:

Generate a Project Buildsystem
==============================

Run CMake with one of the following command signatures to specify the
source and build trees and generate a buildsystem:

``cmake [<options>] -B <path-to-build> [-S <path-to-source>]``

  .. versionadded:: 3.13

  Uses ``<path-to-build>`` as the build tree and ``<path-to-source>``
  as the source tree.  The specified paths may be absolute or relative
  to the current working directory.  The source tree must contain a
  ``CMakeLists.txt`` file.  The build tree will be created automatically
  if it does not already exist.  For example:

  .. code-block:: console

    $ cmake -S src -B build

``cmake [<options>] <path-to-source>``
  Uses the current working directory as the build tree, and
  ``<path-to-source>`` as the source tree.  The specified path may
  be absolute or relative to the current working directory.
  The source tree must contain a ``CMakeLists.txt`` file and must
  *not* contain a ``CMakeCache.txt`` file because the latter
  identifies an existing build tree.  For example:

  .. code-block:: console

    $ mkdir build ; cd build
    $ cmake ../src

``cmake [<options>] <path-to-existing-build>``
  Uses ``<path-to-existing-build>`` as the build tree, and loads the
  path to the source tree from its ``CMakeCache.txt`` file, which must
  have already been generated by a previous run of CMake.  The specified
  path may be absolute or relative to the current working directory.
  For example:

  .. code-block:: console

    $ cd build
    $ cmake .

In all cases the ``<options>`` may be zero or more of the `Options`_ below.

The above styles for specifying the source and build trees may be mixed.
Paths specified with :option:`-S <cmake -S>` or :option:`-B <cmake -B>`
are always classified as source or build trees, respectively.  Paths
specified with plain arguments are classified based on their content
and the types of paths given earlier.  If only one type of path is given,
the current working directory (cwd) is used for the other.  For example:

============================== ============ ===========
 Command Line                   Source Dir   Build Dir
============================== ============ ===========
 ``cmake -B build``             `cwd`        ``build``
 ``cmake -B build src``         ``src``      ``build``
 ``cmake -B build -S src``      ``src``      ``build``
 ``cmake src``                  ``src``      `cwd`
 ``cmake build`` (existing)     `loaded`     ``build``
 ``cmake -S src``               ``src``      `cwd`
 ``cmake -S src build``         ``src``      ``build``
 ``cmake -S src -B build``      ``src``      ``build``
============================== ============ ===========

.. versionchanged:: 3.23

  CMake warns when multiple source paths are specified.  This has never
  been officially documented or supported, but older versions accidentally
  accepted multiple source paths and used the last path specified.
  Avoid passing multiple source path arguments.

After generating a buildsystem one may use the corresponding native
build tool to build the project.  For example, after using the
:generator:`Unix Makefiles` generator one may run ``make`` directly:

  .. code-block:: console

    $ make
    $ make install

Alternatively, one may use :program:`cmake` to `Build a Project`_ by
automatically choosing and invoking the appropriate native build tool.

.. _`CMake Options`:

Options
-------

.. program:: cmake

.. include:: OPTIONS_BUILD.txt

.. option:: --fresh

 .. versionadded:: 3.24

 Perform a fresh configuration of the build tree.
 This removes any existing ``CMakeCache.txt`` file and associated
 ``CMakeFiles/`` directory, and recreates them from scratch.

.. option:: -L[A][H]

 List non-advanced cached variables.

 List ``CACHE`` variables will run CMake and list all the variables from
 the CMake ``CACHE`` that are not marked as ``INTERNAL`` or :prop_cache:`ADVANCED`.
 This will effectively display current CMake settings, which can then be
 changed with :option:`-D <cmake -D>` option.  Changing some of the variables
 may result in more variables being created.  If ``A`` is specified, then it
 will display also advanced variables.  If ``H`` is specified, it will also
 display help for each variable.

.. option:: -N

 View mode only.

 Only load the cache.  Do not actually run configure and generate
 steps.

.. option:: --graphviz=<file>

 Generate graphviz of dependencies, see :module:`CMakeGraphVizOptions` for more.

 Generate a graphviz input file that will contain all the library and
 executable dependencies in the project.  See the documentation for
 :module:`CMakeGraphVizOptions` for more details.

.. option:: --system-information [file]

 Dump information about this system.

 Dump a wide range of information about the current system.  If run
 from the top of a binary tree for a CMake project it will dump
 additional information such as the cache, log files etc.

.. option:: --log-level=<level>

 Set the log ``<level>``.

 The :command:`message` command will only output messages of the specified
 log level or higher.  The valid log levels are ``ERROR``, ``WARNING``,
 ``NOTICE``, ``STATUS`` (default), ``VERBOSE``, ``DEBUG``, or ``TRACE``.

 To make a log level persist between CMake runs, set
 :variable:`CMAKE_MESSAGE_LOG_LEVEL` as a cache variable instead.
 If both the command line option and the variable are given, the command line
 option takes precedence.

 For backward compatibility reasons, ``--loglevel`` is also accepted as a
 synonym for this option.

 .. versionadded:: 3.25
   See the :command:`cmake_language` command for a way to
   :ref:`query the current message logging level <query_message_log_level>`.

.. option:: --log-context

 Enable the :command:`message` command outputting context attached to each
 message.

 This option turns on showing context for the current CMake run only.
 To make showing the context persistent for all subsequent CMake runs, set
 :variable:`CMAKE_MESSAGE_CONTEXT_SHOW` as a cache variable instead.
 When this command line option is given, :variable:`CMAKE_MESSAGE_CONTEXT_SHOW`
 is ignored.

.. option:: --debug-trycompile

 Do not delete the files and directories created for
 :command:`try_compile` / :command:`try_run` calls.
 This is useful in debugging failed checks.

 Note that some uses of :command:`try_compile` may use the same build tree,
 which will limit the usefulness of this option if a project executes more
 than one :command:`try_compile`.  For example, such uses may change results
 as artifacts from a previous try-compile may cause a different test to either
 pass or fail incorrectly.  This option is best used only when debugging.

 (With respect to the preceding, the :command:`try_run` command
 is effectively a :command:`try_compile`.  Any combination of the two
 is subject to the potential issues described.)

 .. versionadded:: 3.25

   When this option is enabled, every try-compile check prints a log
   message reporting the directory in which the check is performed.

.. option:: --debug-output

 Put cmake in a debug mode.

 Print extra information during the cmake run like stack traces with
 :command:`message(SEND_ERROR)` calls.

.. option:: --debug-find

 .. versionadded:: 3.17

 Put cmake find commands in a debug mode.

 Print extra find call information during the cmake run to standard
 error. Output is designed for human consumption and not for parsing.
 See also the :variable:`CMAKE_FIND_DEBUG_MODE` variable for debugging
 a more local part of the project.

.. option:: --debug-find-pkg=<pkg>[,...]

 .. versionadded:: 3.23

 Put cmake find commands in a debug mode when running under calls
 to :command:`find_package(\<pkg\>) <find_package>`, where ``<pkg>``
 is an entry in the given comma-separated list of case-sensitive package
 names.

 Like :option:`--debug-find <cmake --debug-find>`, but limiting scope
 to the specified packages.

.. option:: --debug-find-var=<var>[,...]

 .. versionadded:: 3.23

 Put cmake find commands in a debug mode when called with ``<var>``
 as the result variable, where ``<var>`` is an entry in the given
 comma-separated list.

 Like :option:`--debug-find <cmake --debug-find>`, but limiting scope
 to the specified variable names.

.. option:: --trace

 Put cmake in trace mode.

 Print a trace of all calls made and from where.

.. option:: --trace-expand

 Put cmake in trace mode.

 Like :option:`--trace <cmake --trace>`, but with variables expanded.

.. option:: --trace-format=<format>

 .. versionadded:: 3.17

 Put cmake in trace mode and sets the trace output format.

 ``<format>`` can be one of the following values.

   ``human``
     Prints each trace line in a human-readable format. This is the
     default format.

   ``json-v1``
     Prints each line as a separate JSON document. Each document is
     separated by a newline ( ``\n`` ). It is guaranteed that no
     newline characters will be present inside a JSON document.

     .. code-block:: json
       :caption: JSON trace format

       {
         "file": "/full/path/to/the/CMake/file.txt",
         "line": 0,
         "cmd": "add_executable",
         "args": ["foo", "bar"],
         "time": 1579512535.9687231,
         "frame": 2,
         "global_frame": 4
       }

     The members are:

     ``file``
       The full path to the CMake source file where the function
       was called.

     ``line``
       The line in ``file`` where the function call begins.

     ``line_end``
       If the function call spans multiple lines, this field will
       be set to the line where the function call ends. If the function
       calls spans a single line, this field will be unset. This field
       was added in minor version 2 of the ``json-v1`` format.

     ``defer``
       Optional member that is present when the function call was deferred
       by :command:`cmake_language(DEFER)`.  If present, its value is a
       string containing the deferred call ``<id>``.

     ``cmd``
       The name of the function that was called.

     ``args``
       A string list of all function parameters.

     ``time``
       Timestamp (seconds since epoch) of the function call.

     ``frame``
       Stack frame depth of the function that was called, within the
       context of the  ``CMakeLists.txt`` being processed currently.

     ``global_frame``
       Stack frame depth of the function that was called, tracked globally
       across all ``CMakeLists.txt`` files involved in the trace. This field
       was added in minor version 2 of the ``json-v1`` format.

     Additionally, the first JSON document outputted contains the
     ``version`` key for the current major and minor version of the

     .. code-block:: json
       :caption: JSON version format

       {
         "version": {
           "major": 1,
           "minor": 2
         }
       }

     The members are:

     ``version``
       Indicates the version of the JSON format. The version has a
       major and minor components following semantic version conventions.

.. option:: --trace-source=<file>

 Put cmake in trace mode, but output only lines of a specified file.

 Multiple options are allowed.

.. option:: --trace-redirect=<file>

 Put cmake in trace mode and redirect trace output to a file instead of stderr.

.. option:: --warn-uninitialized

 Warn about uninitialized values.

 Print a warning when an uninitialized variable is used.

.. option:: --warn-unused-vars

 Does nothing.  In CMake versions 3.2 and below this enabled warnings about
 unused variables.  In CMake versions 3.3 through 3.18 the option was broken.
 In CMake 3.19 and above the option has been removed.

.. option:: --no-warn-unused-cli

 Don't warn about command line options.

 Don't find variables that are declared on the command line, but not
 used.

.. option:: --check-system-vars

 Find problems with variable usage in system files.

 Normally, unused and uninitialized variables are searched for only
 in :variable:`CMAKE_SOURCE_DIR` and :variable:`CMAKE_BINARY_DIR`.
 This flag tells CMake to warn about other files as well.

.. option:: --compile-no-warning-as-error

 .. versionadded:: 3.24

 Ignore target property :prop_tgt:`COMPILE_WARNING_AS_ERROR` and variable
 :variable:`CMAKE_COMPILE_WARNING_AS_ERROR`, preventing warnings from being
 treated as errors on compile.

.. option:: --profiling-output=<path>

 .. versionadded:: 3.18

 Used in conjunction with
 :option:`--profiling-format <cmake --profiling-format>` to output to a
 given path.

.. option:: --profiling-format=<file>

 Enable the output of profiling data of CMake script in the given format.

 This can aid performance analysis of CMake scripts executed. Third party
 applications should be used to process the output into human readable format.

 Currently supported values are:
 ``google-trace`` Outputs in Google Trace Format, which can be parsed by the
 about:tracing tab of Google Chrome or using a plugin for a tool like Trace
 Compass.

.. option:: --preset <preset>, --preset=<preset>

 Reads a :manual:`preset <cmake-presets(7)>` from
 ``<path-to-source>/CMakePresets.json`` and
 ``<path-to-source>/CMakeUserPresets.json``. The preset may specify the
 generator and the build directory, and a list of variables and other
 arguments to pass to CMake. The current working directory must contain
 CMake preset files. The :manual:`CMake GUI <cmake-gui(1)>` can
 also recognize ``CMakePresets.json`` and ``CMakeUserPresets.json`` files. For
 full details on these files, see :manual:`cmake-presets(7)`.

 The presets are read before all other command line options. The options
 specified by the preset (variables, generator, etc.) can all be overridden by
 manually specifying them on the command line. For example, if the preset sets
 a variable called ``MYVAR`` to ``1``, but the user sets it to ``2`` with a
 ``-D`` argument, the value ``2`` is preferred.

.. option:: --list-presets[=<type>]

 Lists the available presets of the specified ``<type>``.  Valid values for
 ``<type>`` are ``configure``, ``build``, ``test``, ``package``, or ``all``.
 If ``<type>`` is omitted, ``configure`` is assumed.  The current working
 directory must contain CMake preset files.

.. option:: --debugger

  Enables interactive debugging of the CMake language. CMake exposes a debugging
  interface on the pipe named by :option:`--debugger-pipe <cmake --debugger-pipe>`
  that conforms to the `Debug Adapter Protocol`_ specification with the following
  modifications.

  The ``initialize`` response includes an additional field named ``cmakeVersion``
  which specifies the version of CMake being debugged.

  .. code-block:: json
    :caption: Debugger initialize response

    {
      "cmakeVersion": {
        "major": 3,
        "minor": 27,
        "patch": 0,
        "full": "3.27.0"
      }
    }

  The members are:

  ``major``
    An integer specifying the major version number.

  ``minor``
    An integer specifying the minor version number.

  ``patch``
    An integer specifying the patch version number.

  ``full``
    A string specifying the full CMake version.

.. _`Debug Adapter Protocol`: https://microsoft.github.io/debug-adapter-protocol/

.. option:: --debugger-pipe <pipe name>, --debugger-pipe=<pipe name>

  Name of the pipe (on Windows) or domain socket (on Unix) to use for
  debugger communication.

.. option:: --debugger-dap-log <log path>, --debugger-dap-log=<log path>

  Logs all debugger communication to the specified file.

.. _`Build Tool Mode`:

Build a Project
===============

.. program:: cmake

CMake provides a command-line signature to build an already-generated
project binary tree:

.. code-block:: shell

  cmake --build <dir>             [<options>] [-- <build-tool-options>]
  cmake --build --preset <preset> [<options>] [-- <build-tool-options>]

This abstracts a native build tool's command-line interface with the
following options:

.. option:: --build <dir>

  Project binary directory to be built.  This is required (unless a preset
  is specified) and must be first.

.. program:: cmake--build

.. option:: --preset <preset>, --preset=<preset>

  Use a build preset to specify build options. The project binary directory
  is inferred from the ``configurePreset`` key. The current working directory
  must contain CMake preset files.
  See :manual:`preset <cmake-presets(7)>` for more details.

.. option:: --list-presets

  Lists the available build presets. The current working directory must
  contain CMake preset files.

.. option:: -j [<jobs>], --parallel [<jobs>]

  .. versionadded:: 3.12

  The maximum number of concurrent processes to use when building.
  If ``<jobs>`` is omitted the native build tool's default number is used.

  The :envvar:`CMAKE_BUILD_PARALLEL_LEVEL` environment variable, if set,
  specifies a default parallel level when this option is not given.

  Some native build tools always build in parallel.  The use of ``<jobs>``
  value of ``1`` can be used to limit to a single job.

.. option:: -t <tgt>..., --target <tgt>...

  Build ``<tgt>`` instead of the default target.  Multiple targets may be
  given, separated by spaces.

.. option:: --config <cfg>

  For multi-configuration tools, choose configuration ``<cfg>``.

.. option:: --clean-first

  Build target ``clean`` first, then build.
  (To clean only, use :option:`--target clean <cmake--build --target>`.)

.. option:: --resolve-package-references=<value>

  .. versionadded:: 3.23

  Resolve remote package references from external package managers (e.g. NuGet)
  before build. When ``<value>`` is set to ``on`` (default), packages will be
  restored before building a target.  When ``<value>`` is set to ``only``, the
  packages will be restored, but no build will be performed.  When
  ``<value>`` is set to ``off``, no packages will be restored.

  If the target does not define any package references, this option does nothing.

  This setting can be specified in a build preset (using
  ``resolvePackageReferences``). The preset setting will be ignored, if this
  command line option is specified.

  If no command line parameter or preset option are provided, an environment-
  specific cache variable will be evaluated to decide, if package restoration
  should be performed.

  When using the Visual Studio generator, package references are defined
  using the :prop_tgt:`VS_PACKAGE_REFERENCES` property. Package references
  are restored using NuGet. It can be disabled by setting the
  ``CMAKE_VS_NUGET_PACKAGE_RESTORE`` variable to ``OFF``.

.. option:: --use-stderr

  Ignored.  Behavior is default in CMake >= 3.0.

.. option:: -v, --verbose

  Enable verbose output - if supported - including the build commands to be
  executed.

  This option can be omitted if :envvar:`VERBOSE` environment variable or
  :variable:`CMAKE_VERBOSE_MAKEFILE` cached variable is set.


.. option:: --

  Pass remaining options to the native tool.

Run :option:`cmake --build` with no options for quick help.

Install a Project
=================

.. program:: cmake

CMake provides a command-line signature to install an already-generated
project binary tree:

.. code-block:: shell

  cmake --install <dir> [<options>]

This may be used after building a project to run installation without
using the generated build system or the native build tool.
The options are:

.. option:: --install <dir>

  Project binary directory to install. This is required and must be first.

.. program:: cmake--install

.. option:: --config <cfg>

  For multi-configuration generators, choose configuration ``<cfg>``.

.. option:: --component <comp>

  Component-based install. Only install component ``<comp>``.

.. option:: --default-directory-permissions <permissions>

  Default directory install permissions. Permissions in format ``<u=rwx,g=rx,o=rx>``.

.. option:: --prefix <prefix>

  Override the installation prefix, :variable:`CMAKE_INSTALL_PREFIX`.

.. option:: --strip

  Strip before installing.

.. option:: -v, --verbose

  Enable verbose output.

  This option can be omitted if :envvar:`VERBOSE` environment variable is set.

Run :option:`cmake --install` with no options for quick help.

Open a Project
==============

.. program:: cmake

.. code-block:: shell

  cmake --open <dir>

Open the generated project in the associated application.  This is only
supported by some generators.


.. _`Script Processing Mode`:

Run a Script
============

.. program:: cmake

.. code-block:: shell

  cmake [-D <var>=<value>]... -P <cmake-script-file> [-- <unparsed-options>...]

.. program:: cmake-P

.. option:: -D <var>=<value>

 Define a variable for script mode.

.. program:: cmake

.. option:: -P <cmake-script-file>

 Process the given cmake file as a script written in the CMake
 language.  No configure or generate step is performed and the cache
 is not modified.  If variables are defined using ``-D``, this must be
 done before the ``-P`` argument.

Any options after ``--`` are not parsed by CMake, but they are still included
in the set of :variable:`CMAKE_ARGV<n> <CMAKE_ARGV0>` variables passed to the
script (including the ``--`` itself).


.. _`Run a Command-Line Tool`:

Run a Command-Line Tool
=======================

.. program:: cmake

CMake provides builtin command-line tools through the signature

.. code-block:: shell

  cmake -E <command> [<options>]

.. option:: -E [help]

  Run ``cmake -E`` or ``cmake -E help`` for a summary of commands.

.. program:: cmake-E

Available commands are:

.. option:: capabilities

  .. versionadded:: 3.7

  Report cmake capabilities in JSON format. The output is a JSON object
  with the following keys:

  ``version``
    A JSON object with version information. Keys are:

    ``string``
      The full version string as displayed by cmake :option:`--version <cmake --version>`.
    ``major``
      The major version number in integer form.
    ``minor``
      The minor version number in integer form.
    ``patch``
      The patch level in integer form.
    ``suffix``
      The cmake version suffix string.
    ``isDirty``
      A bool that is set if the cmake build is from a dirty tree.

  ``generators``
    A list available generators. Each generator is a JSON object with the
    following keys:

    ``name``
      A string containing the name of the generator.
    ``toolsetSupport``
      ``true`` if the generator supports toolsets and ``false`` otherwise.
    ``platformSupport``
      ``true`` if the generator supports platforms and ``false`` otherwise.
    ``supportedPlatforms``
      .. versionadded:: 3.21

      Optional member that may be present when the generator supports
      platform specification via :variable:`CMAKE_GENERATOR_PLATFORM`
      (:option:`-A ... <cmake -A>`).  The value is a list of platforms known to
      be supported.
    ``extraGenerators``
      A list of strings with all the :ref:`Extra Generators` compatible with
      the generator.

  ``fileApi``
    Optional member that is present when the :manual:`cmake-file-api(7)`
    is available.  The value is a JSON object with one member:

    ``requests``
      A JSON array containing zero or more supported file-api requests.
      Each request is a JSON object with members:

      ``kind``
        Specifies one of the supported :ref:`file-api object kinds`.

      ``version``
        A JSON array whose elements are each a JSON object containing
        ``major`` and ``minor`` members specifying non-negative integer
        version components.

  ``serverMode``
    ``true`` if cmake supports server-mode and ``false`` otherwise.
    Always false since CMake 3.20.

  ``tls``
    .. versionadded:: 3.25

    ``true`` if TLS support is enabled and ``false`` otherwise.

  ``debugger``
    .. versionadded:: 3.27

    ``true`` if the :option:`--debugger <cmake --debugger>` mode
    is supported and ``false`` otherwise.

.. option:: cat [--] <files>...

  .. versionadded:: 3.18

  Concatenate files and print on the standard output.

  .. program:: cmake-E_cat

  .. option:: --

    .. versionadded:: 3.24

    Added support for the double dash argument ``--``. This basic implementation
    of ``cat`` does not support any options, so using a option starting with
    ``-`` will result in an error. Use ``--`` to indicate the end of options, in
    case a file starts with ``-``.

  .. versionadded:: 3.29

    ``cat`` can now print the standard input by passing the ``-`` argument.

.. program:: cmake-E

.. option:: chdir <dir> <cmd> [<arg>...]

  Change the current working directory and run a command.

.. option:: compare_files [--ignore-eol] <file1> <file2>

  Check if ``<file1>`` is same as ``<file2>``. If files are the same,
  then returns ``0``, if not it returns ``1``.  In case of invalid
  arguments, it returns 2.

  .. program:: cmake-E_compare_files

  .. option:: --ignore-eol

    .. versionadded:: 3.14

    The option implies line-wise comparison and ignores LF/CRLF differences.

.. program:: cmake-E

.. option:: copy <file>... <destination>, copy -t <destination> <file>...

  Copy files to ``<destination>`` (either file or directory).
  If multiple files are specified, or if ``-t`` is specified, the
  ``<destination>`` must be directory and it must exist. If ``-t`` is not
  specified, the last argument is assumed to be the ``<destination>``.
  Wildcards are not supported. ``copy`` does follow symlinks. That means it
  does not copy symlinks, but the files or directories it point to.

  .. versionadded:: 3.5
    Support for multiple input files.

  .. versionadded:: 3.26
    Support for ``-t`` argument.

.. option:: copy_directory <dir>... <destination>

  Copy content of ``<dir>...`` directories to ``<destination>`` directory.
  If ``<destination>`` directory does not exist it will be created.
  ``copy_directory`` does follow symlinks.

  .. versionadded:: 3.5
    Support for multiple input directories.

  .. versionadded:: 3.15
    The command now fails when the source directory does not exist.
    Previously it succeeded by creating an empty destination directory.

.. option:: copy_directory_if_different <dir>... <destination>

  .. versionadded:: 3.26

  Copy changed content of ``<dir>...`` directories to ``<destination>`` directory.
  If ``<destination>`` directory does not exist it will be created.

  ``copy_directory_if_different`` does follow symlinks.
  The command fails when the source directory does not exist.

.. option:: copy_if_different <file>... <destination>

  Copy files to ``<destination>`` (either file or directory) if
  they have changed.
  If multiple files are specified, the ``<destination>`` must be
  directory and it must exist.
  ``copy_if_different`` does follow symlinks.

  .. versionadded:: 3.5
    Support for multiple input files.

.. option:: create_symlink <old> <new>

  Create a symbolic link ``<new>`` naming ``<old>``.

  .. versionadded:: 3.13
    Support for creating symlinks on Windows.

  .. note::
    Path to where ``<new>`` symbolic link will be created has to exist beforehand.

.. option:: create_hardlink <old> <new>

  .. versionadded:: 3.19

  Create a hard link ``<new>`` naming ``<old>``.

  .. note::
    Path to where ``<new>`` hard link will be created has to exist beforehand.
    ``<old>`` has to exist beforehand.

.. option:: echo [<string>...]

  Displays arguments as text.

.. option:: echo_append [<string>...]

  Displays arguments as text but no new line.

.. option:: env [<options>] [--] <command> [<arg>...]

  .. versionadded:: 3.1

  Run command in a modified environment. Options are:

  .. program:: cmake-E_env

  .. option:: NAME=VALUE

    Replaces the current value of ``NAME`` with ``VALUE``.

  .. option:: --unset=NAME

    Unsets the current value of ``NAME``.

  .. option:: --modify ENVIRONMENT_MODIFICATION

    .. versionadded:: 3.25

    Apply a single :prop_test:`ENVIRONMENT_MODIFICATION` operation to the
    modified environment.

    The ``NAME=VALUE`` and ``--unset=NAME`` options are equivalent to
    ``--modify NAME=set:VALUE`` and ``--modify NAME=unset:``, respectively.
    Note that ``--modify NAME=reset:`` resets ``NAME`` to the value it had
    when :program:`cmake` launched (or unsets it), not to the most recent
    ``NAME=VALUE`` option.

  .. option:: --

    .. versionadded:: 3.24

    Added support for the double dash argument ``--``. Use ``--`` to stop
    interpreting options/environment variables and treat the next argument as
    the command, even if it start with ``-`` or contains a ``=``.

.. program:: cmake-E

.. option:: environment

  Display the current environment variables.

.. option:: false

  .. versionadded:: 3.16

  Do nothing, with an exit code of 1.

.. option:: make_directory <dir>...

  Create ``<dir>`` directories.  If necessary, create parent
  directories too.  If a directory already exists it will be
  silently ignored.

  .. versionadded:: 3.5
    Support for multiple input directories.

.. option:: md5sum <file>...

  Create MD5 checksum of files in ``md5sum`` compatible format::

     351abe79cd3800b38cdfb25d45015a15  file1.txt
     052f86c15bbde68af55c7f7b340ab639  file2.txt

.. option:: sha1sum <file>...

  .. versionadded:: 3.10

  Create SHA1 checksum of files in ``sha1sum`` compatible format::

     4bb7932a29e6f73c97bb9272f2bdc393122f86e0  file1.txt
     1df4c8f318665f9a5f2ed38f55adadb7ef9f559c  file2.txt

.. option:: sha224sum <file>...

  .. versionadded:: 3.10

  Create SHA224 checksum of files in ``sha224sum`` compatible format::

     b9b9346bc8437bbda630b0b7ddfc5ea9ca157546dbbf4c613192f930  file1.txt
     6dfbe55f4d2edc5fe5c9197bca51ceaaf824e48eba0cc453088aee24  file2.txt

.. option:: sha256sum <file>...

  .. versionadded:: 3.10

  Create SHA256 checksum of files in ``sha256sum`` compatible format::

     76713b23615d31680afeb0e9efe94d47d3d4229191198bb46d7485f9cb191acc  file1.txt
     15b682ead6c12dedb1baf91231e1e89cfc7974b3787c1e2e01b986bffadae0ea  file2.txt

.. option:: sha384sum <file>...

  .. versionadded:: 3.10

  Create SHA384 checksum of files in ``sha384sum`` compatible format::

     acc049fedc091a22f5f2ce39a43b9057fd93c910e9afd76a6411a28a8f2b8a12c73d7129e292f94fc0329c309df49434  file1.txt
     668ddeb108710d271ee21c0f3acbd6a7517e2b78f9181c6a2ff3b8943af92b0195dcb7cce48aa3e17893173c0a39e23d  file2.txt

.. option:: sha512sum <file>...

  .. versionadded:: 3.10

  Create SHA512 checksum of files in ``sha512sum`` compatible format::

     2a78d7a6c5328cfb1467c63beac8ff21794213901eaadafd48e7800289afbc08e5fb3e86aa31116c945ee3d7bf2a6194489ec6101051083d1108defc8e1dba89  file1.txt
     7a0b54896fe5e70cca6dd643ad6f672614b189bf26f8153061c4d219474b05dad08c4e729af9f4b009f1a1a280cb625454bf587c690f4617c27e3aebdf3b7a2d  file2.txt

.. option:: remove [-f] <file>...

  .. deprecated:: 3.17

  Remove the file(s). The planned behavior was that if any of the
  listed files already do not exist, the command returns a non-zero exit code,
  but no message is logged. The ``-f`` option changes the behavior to return a
  zero exit code (i.e. success) in such situations instead.
  ``remove`` does not follow symlinks. That means it remove only symlinks
  and not files it point to.

  The implementation was buggy and always returned 0. It cannot be fixed without
  breaking backwards compatibility. Use ``rm`` instead.

.. option:: remove_directory <dir>...

  .. deprecated:: 3.17

  Remove ``<dir>`` directories and their contents. If a directory does
  not exist it will be silently ignored.
  Use ``rm`` instead.

  .. versionadded:: 3.15
    Support for multiple directories.

  .. versionadded:: 3.16
    If ``<dir>`` is a symlink to a directory, just the symlink will be removed.

.. option:: rename <oldname> <newname>

  Rename a file or directory (on one volume). If file with the ``<newname>`` name
  already exists, then it will be silently replaced.

.. option:: rm [-rRf] [--] <file|dir>...

  .. versionadded:: 3.17

  Remove the files ``<file>`` or directories ``<dir>``.
  Use ``-r`` or ``-R`` to remove directories and their contents recursively.
  If any of the listed files/directories do not exist, the command returns a
  non-zero exit code, but no message is logged. The ``-f`` option changes
  the behavior to return a zero exit code (i.e. success) in such
  situations instead. Use ``--`` to stop interpreting options and treat all
  remaining arguments as paths, even if they start with ``-``.

.. option:: sleep <number>

  .. versionadded:: 3.0

  Sleep for ``<number>`` seconds. ``<number>`` may be a floating point number.
  A practical minimum is about 0.1 seconds due to overhead in starting/stopping
  CMake executable. This can be useful in a CMake script to insert a delay:

  .. code-block:: cmake

    # Sleep for about 0.5 seconds
    execute_process(COMMAND ${CMAKE_COMMAND} -E sleep 0.5)

.. option:: tar [cxt][vf][zjJ] file.tar [<options>] [--] [<pathname>...]

  Create or extract a tar or zip archive.  Options are:

  .. program:: cmake-E_tar

  .. option:: c

    Create a new archive containing the specified files.
    If used, the ``<pathname>...`` argument is mandatory.

  .. option:: x

    Extract to disk from the archive.

    .. versionadded:: 3.15
      The ``<pathname>...`` argument could be used to extract only selected files
      or directories.
      When extracting selected files or directories, you must provide their exact
      names including the path, as printed by list (``-t``).

  .. option:: t

    List archive contents.

    .. versionadded:: 3.15
      The ``<pathname>...`` argument could be used to list only selected files
      or directories.

  .. option:: v

    Produce verbose output.

  .. option:: z

    Compress the resulting archive with gzip.

  .. option:: j

    Compress the resulting archive with bzip2.

  .. option:: J

    .. versionadded:: 3.1

    Compress the resulting archive with XZ.

  .. option:: --zstd

    .. versionadded:: 3.15

    Compress the resulting archive with Zstandard.

  .. option:: --files-from=<file>

    .. versionadded:: 3.1

    Read file names from the given file, one per line.
    Blank lines are ignored.  Lines may not start in ``-``
    except for ``--add-file=<name>`` to add files whose
    names start in ``-``.

  .. option:: --format=<format>

    .. versionadded:: 3.3

    Specify the format of the archive to be created.
    Supported formats are: ``7zip``, ``gnutar``, ``pax``,
    ``paxr`` (restricted pax, default), and ``zip``.

  .. option:: --mtime=<date>

    .. versionadded:: 3.1

    Specify modification time recorded in tarball entries.

  .. option:: --touch

    .. versionadded:: 3.24

    Use current local timestamp instead of extracting file timestamps
    from the archive.

  .. option:: --

    .. versionadded:: 3.1

    Stop interpreting options and treat all remaining arguments
    as file names, even if they start with ``-``.

  .. versionadded:: 3.1
    LZMA (7zip) support.

  .. versionadded:: 3.15
    The command now continues adding files to an archive even if some of the
    files are not readable.  This behavior is more consistent with the classic
    ``tar`` tool. The command now also parses all flags, and if an invalid flag
    was provided, a warning is issued.

.. program:: cmake-E

.. option:: time <command> [<args>...]

  Run ``<command>`` and display elapsed time (including overhead of CMake frontend).

  .. versionadded:: 3.5
    The command now properly passes arguments with spaces or special characters
    through to the child process. This may break scripts that worked around the
    bug with their own extra quoting or escaping.

.. option:: touch <file>...

  Creates ``<file>`` if file do not exist.
  If ``<file>`` exists, it is changing ``<file>`` access and modification times.

.. option:: touch_nocreate <file>...

  Touch a file if it exists but do not create it.  If a file does
  not exist it will be silently ignored.

.. option:: true

  .. versionadded:: 3.16

  Do nothing, with an exit code of 0.

Windows-specific Command-Line Tools
-----------------------------------

The following ``cmake -E`` commands are available only on Windows:

.. option:: delete_regv <key>

  Delete Windows registry value.

.. option:: env_vs8_wince <sdkname>

  .. versionadded:: 3.2

  Displays a batch file which sets the environment for the provided
  Windows CE SDK installed in VS2005.

.. option:: env_vs9_wince <sdkname>

  .. versionadded:: 3.2

  Displays a batch file which sets the environment for the provided
  Windows CE SDK installed in VS2008.

.. option:: write_regv <key> <value>

  Write Windows registry value.

.. _`Find-Package Tool Mode`:

Run the Find-Package Tool
=========================

.. program:: cmake--find-package

CMake provides a pkg-config like helper for Makefile-based projects:

.. code-block:: shell

  cmake --find-package [<options>]

It searches a package using :command:`find_package()` and prints the
resulting flags to stdout.  This can be used instead of pkg-config
to find installed libraries in plain Makefile-based projects or in
autoconf-based projects (via ``share/aclocal/cmake.m4``).

.. note::
  This mode is not well-supported due to some technical limitations.
  It is kept for compatibility but should not be used in new projects.

.. _`Workflow Mode`:

Run a Workflow Preset
=====================

.. versionadded:: 3.25

.. program:: cmake

:manual:`CMake Presets <cmake-presets(7)>` provides a way to execute multiple
build steps in order:

.. code-block:: shell

  cmake --workflow [<options>]

The options are:

.. option:: --workflow

  Select a :ref:`Workflow Preset` using one of the following options.

.. program:: cmake--workflow

.. option:: --preset <preset>, --preset=<preset>

  Use a workflow preset to specify a workflow. The project binary directory
  is inferred from the initial configure preset. The current working directory
  must contain CMake preset files.
  See :manual:`preset <cmake-presets(7)>` for more details.

.. option:: --list-presets

  Lists the available workflow presets. The current working directory must
  contain CMake preset files.

.. option:: --fresh

  Perform a fresh configuration of the build tree.
  This removes any existing ``CMakeCache.txt`` file and associated
  ``CMakeFiles/`` directory, and recreates them from scratch.

View Help
=========

.. program:: cmake

To print selected pages from the CMake documentation, use

.. code-block:: shell

  cmake --help[-<topic>]

with one of the following options:

.. include:: OPTIONS_HELP.txt

To view the presets available for a project, use

.. code-block:: shell

  cmake <source-dir> --list-presets


.. _`CMake Exit Code`:

Return Value (Exit Code)
========================

Upon regular termination, the :program:`cmake` executable returns the exit code ``0``.

If termination is caused by the command :command:`message(FATAL_ERROR)`,
or another error condition, then a non-zero exit code is returned.


See Also
========

.. include:: LINKS.txt



/P/🚀 manual/ctest.1.rst
======================================


.. cmake-manual-description: CTest Command-Line Reference

ctest(1)
********

.. contents::

Synopsis
========

.. parsed-literal::

 `Run Tests`_
  ctest [<options>] [--test-dir <path-to-build>]

 `Build and Test Mode`_
  ctest --build-and-test <path-to-source> <path-to-build>
        --build-generator <generator> [<options>...]
       [--build-options <opts>...]
       [--test-command <command> [<args>...]]

 `Dashboard Client`_
  ctest -D <dashboard>         [-- <dashboard-options>...]
  ctest -M <model> -T <action> [-- <dashboard-options>...]
  ctest -S <script>            [-- <dashboard-options>...]
  ctest -SP <script>           [-- <dashboard-options>...]

 `View Help`_
  ctest --help[-<topic>]


Description
===========

The :program:`ctest` executable is the CMake test driver program.
CMake-generated build trees created for projects that use the
:command:`enable_testing` and :command:`add_test` commands have testing support.
This program will run the tests and report results.

.. _`Run Tests`:

Run Tests
=========

.. program:: ctest

.. option:: --preset <preset>, --preset=<preset>

 Use a test preset to specify test options. The project binary directory
 is inferred from the ``configurePreset`` key. The current working directory
 must contain CMake preset files.
 See :manual:`preset <cmake-presets(7)>` for more details.

.. option:: --list-presets

 Lists the available test presets. The current working directory must contain
 CMake preset files.

.. option:: -C <cfg>, --build-config <cfg>

 Choose configuration to test.

 Some CMake-generated build trees can have multiple build
 configurations in the same tree.  This option can be used to specify
 which one should be tested.  Example configurations are ``Debug`` and
 ``Release``.

.. option:: --progress

 Enable short progress output from tests.

 When the output of :program:`ctest` is being sent directly to a terminal, the
 progress through the set of tests is reported by updating the same line
 rather than printing start and end messages for each test on new lines.
 This can significantly reduce the verbosity of the test output.
 Test completion messages are still output on their own line for failed
 tests and the final test summary will also still be logged.

 This option can also be enabled by setting the environment variable
 :envvar:`CTEST_PROGRESS_OUTPUT`.

.. option:: -V, --verbose

 Enable verbose output from tests.

 Test output is normally suppressed and only summary information is
 displayed.  This option will show all test output.

.. option:: -VV, --extra-verbose

 Enable more verbose output from tests.

 Test output is normally suppressed and only summary information is
 displayed.  This option will show even more test output.

.. option:: --debug

 Displaying more verbose internals of CTest.

 This feature will result in a large number of output that is mostly
 useful for debugging dashboard problems.

.. option:: --output-on-failure

 Output anything outputted by the test program if the test should fail.
 This option can also be enabled by setting the
 :envvar:`CTEST_OUTPUT_ON_FAILURE` environment variable

.. option:: --stop-on-failure

 Stop running the tests when the first failure happens.

.. option:: -F

 Enable failover.

 This option allows CTest to resume a test set execution that was
 previously interrupted.  If no interruption occurred, the ``-F`` option
 will have no effect.

.. option:: -j [<level>], --parallel [<level>]

 Run tests in parallel, optionally limited to a given level of parallelism.

 .. versionadded:: 3.29

    The ``<level>`` may be omitted, or ``0``, in which case:

    * Under `Job Server Integration`_, parallelism is limited by
      available job tokens.

    * Otherwise, if the value is omitted, parallelism is limited
      by the number of processors, or 2, whichever is larger.

    * Otherwise, if the value is ``0``, parallelism is unbounded.

 This option may instead be specified by the :envvar:`CTEST_PARALLEL_LEVEL`
 environment variable.

 This option can be used with the :prop_test:`PROCESSORS` test property.
 See the `Label and Subproject Summary`_.

.. option:: --resource-spec-file <file>

 Run CTest with :ref:`resource allocation <ctest-resource-allocation>` enabled,
 using the
 :ref:`resource specification file <ctest-resource-specification-file>`
 specified in ``<file>``.

 When :program:`ctest` is run as a `Dashboard Client`_ this sets the
 ``ResourceSpecFile`` option of the `CTest Test Step`_.

.. option:: --test-load <level>

 While running tests in parallel (e.g. with :option:`-j <ctest -j>`), try
 not to start tests when they may cause the CPU load to pass above a given
 threshold.

 When :program:`ctest` is run as a `Dashboard Client`_ this sets the
 ``TestLoad`` option of the `CTest Test Step`_.

.. option:: -Q, --quiet

 Make CTest quiet.

 This option will suppress all the output.  The output log file will
 still be generated if the :option:`--output-log <ctest --output-log>` is
 specified.  Options such as :option:`--verbose <ctest --verbose>`,
 :option:`--extra-verbose <ctest --extra-verbose>`, and
 :option:`--debug <ctest --debug>` are ignored
 if ``--quiet`` is specified.

.. option:: -O <file>, --output-log <file>

 Output to log file.

 This option tells CTest to write all its output to a ``<file>`` log file.

.. option:: --output-junit <file>

 .. versionadded:: 3.21

 Write test results in JUnit format.

 This option tells CTest to write test results to ``<file>`` in JUnit XML
 format. If ``<file>`` already exists, it will be overwritten. If using the
 :option:`-S <ctest -S>` option to run a dashboard script, use the
 ``OUTPUT_JUNIT`` keyword with the :command:`ctest_test` command instead.

.. option:: -N, --show-only[=<format>]

 Disable actual execution of tests.

 This option tells CTest to list the tests that would be run but not
 actually run them.  Useful in conjunction with the :option:`-R <ctest -R>`
 and :option:`-E <ctest -E>` options.

 .. versionadded:: 3.14

   The ``--show-only`` option accepts a ``<format>`` value.

 ``<format>`` can be one of the following values.

   ``human``
     Human-friendly output.  This is not guaranteed to be stable.
     This is the default.

   ``json-v1``
     Dump the test information in JSON format.
     See `Show as JSON Object Model`_.

.. option:: -L <regex>, --label-regex <regex>

 Run tests with labels matching regular expression as described under
 :ref:`string(REGEX) <Regex Specification>`.

 This option tells CTest to run only the tests whose labels match the
 given regular expression.  When more than one ``-L`` option is given,
 a test will only be run if each regular expression matches at least one
 of the test's labels (i.e. the multiple ``-L`` labels form an ``AND``
 relationship).  See `Label Matching`_.

.. option:: -R <regex>, --tests-regex <regex>

 Run tests matching regular expression.

 This option tells CTest to run only the tests whose names match the
 given regular expression.

.. option:: -E <regex>, --exclude-regex <regex>

 Exclude tests matching regular expression.

 This option tells CTest to NOT run the tests whose names match the
 given regular expression.

.. option:: -LE <regex>, --label-exclude <regex>

 Exclude tests with labels matching regular expression.

 This option tells CTest to NOT run the tests whose labels match the
 given regular expression.  When more than one ``-LE`` option is given,
 a test will only be excluded if each regular expression matches at least one
 of the test's labels (i.e. the multiple ``-LE`` labels form an ``AND``
 relationship).  See `Label Matching`_.

.. option:: --tests-from-file <filename>

 .. versionadded:: 3.29

 Run tests listed in the given file.

 This option tells CTest to run tests that are listed in the given file.
 The file must contain one exact test name per line.
 Lines that do not exactly match any test names are ignored.
 This option can be combined with the other options like
 ``-R``, ``-E``, ``-L`` or ``-LE``.

.. option:: --exclude-from-file <filename>

 .. versionadded:: 3.29

 Exclude tests listed in the given file.

 This option tells CTest to NOT run tests that are listed in the given file.
 The file must contain one exact test name per line.
 Lines that do not exactly match any test names are ignored.
 This option can be combined with the other options like
 ``-R``, ``-E``, ``-L`` or ``-LE``.

.. option:: -FA <regex>, --fixture-exclude-any <regex>

 Exclude fixtures matching ``<regex>`` from automatically adding any tests to
 the test set.

 If a test in the set of tests to be executed requires a particular fixture,
 that fixture's setup and cleanup tests would normally be added to the test set
 automatically. This option prevents adding setup or cleanup tests for fixtures
 matching the ``<regex>``. Note that all other fixture behavior is retained,
 including test dependencies and skipping tests that have fixture setup tests
 that fail.

.. option:: -FS <regex>, --fixture-exclude-setup <regex>

 Same as :option:`-FA <ctest -FA>` except only matching setup tests are
 excluded.

.. option:: -FC <regex>, --fixture-exclude-cleanup <regex>

 Same as :option:`-FA <ctest -FA>` except only matching cleanup tests are
 excluded.

.. option:: -I [Start,End,Stride,test#,test#|Test file], --tests-information

 Run a specific number of tests by number.

 This option causes CTest to run tests starting at number ``Start``,
 ending at number ``End``, and incrementing by ``Stride``.  Any additional
 numbers after ``Stride`` are considered individual test numbers.  ``Start``,
 ``End``, or ``Stride`` can be empty.  Optionally a file can be given that
 contains the same syntax as the command line.

.. option:: -U, --union

 Take the Union of :option:`-I <ctest -I>` and :option:`-R <ctest -R>`.

 When both :option:`-R <ctest -R>` and :option:`-I <ctest -I>` are specified
 by default the intersection of tests are run.  By specifying ``-U`` the union
 of tests is run instead.

.. option:: --rerun-failed

 Run only the tests that failed previously.

 This option tells CTest to perform only the tests that failed during
 its previous run.  When this option is specified, CTest ignores all
 other options intended to modify the list of tests to run (
 :option:`-L <ctest -L>`, :option:`-R <ctest -R>`, :option:`-E <ctest -E>`,
 :option:`-LE <ctest -LE>`, :option:`-I <ctest -I>`, etc).  In the event that
 CTest runs and no tests fail, subsequent calls to CTest with the
 ``--rerun-failed`` option will run the set of tests that most recently
 failed (if any).

.. option:: --repeat <mode>:<n>

  Run tests repeatedly based on the given ``<mode>`` up to ``<n>`` times.
  The modes are:

  ``until-fail``
    Require each test to run ``<n>`` times without failing in order to pass.
    This is useful in finding sporadic failures in test cases.

  ``until-pass``
    Allow each test to run up to ``<n>`` times in order to pass.
    Repeats tests if they fail for any reason.
    This is useful in tolerating sporadic failures in test cases.

  ``after-timeout``
    Allow each test to run up to ``<n>`` times in order to pass.
    Repeats tests only if they timeout.
    This is useful in tolerating sporadic timeouts in test cases
    on busy machines.

.. option:: --repeat-until-fail <n>

 Equivalent to :option:`--repeat until-fail:\<n\> <ctest --repeat>`.

.. option:: --max-width <width>

 Set the max width for a test name to output.

 Set the maximum width for each test name to show in the output.
 This allows the user to widen the output to avoid clipping the test
 name which can be very annoying.

.. option:: --interactive-debug-mode [0|1]

 Set the interactive mode to ``0`` or ``1``.

 This option causes CTest to run tests in either an interactive mode
 or a non-interactive mode.  In dashboard mode (``Experimental``, ``Nightly``,
 ``Continuous``), the default is non-interactive.  In non-interactive mode,
 the environment variable :envvar:`DASHBOARD_TEST_FROM_CTEST` is set.

 Prior to CMake 3.11, interactive mode on Windows allowed system debug
 popup windows to appear.  Now, due to CTest's use of ``libuv`` to launch
 test processes, all system debug popup windows are always blocked.

.. option:: --no-label-summary

 Disable timing summary information for labels.

 This option tells CTest not to print summary information for each
 label associated with the tests run.  If there are no labels on the
 tests, nothing extra is printed.

 See `Label and Subproject Summary`_.

.. option:: --no-subproject-summary

 Disable timing summary information for subprojects.

 This option tells CTest not to print summary information for each
 subproject associated with the tests run.  If there are no subprojects on the
 tests, nothing extra is printed.

 See `Label and Subproject Summary`_.

.. option:: --test-dir <dir>

 .. versionadded:: 3.20

 Specify the directory in which to look for tests, typically a CMake project
 build directory. If not specified, the current directory is used.

.. option:: --test-output-size-passed <size>

 .. versionadded:: 3.4

 Limit the output for passed tests to ``<size>`` bytes.

.. option:: --test-output-size-failed <size>

 .. versionadded:: 3.4

 Limit the output for failed tests to ``<size>`` bytes.

.. option:: --test-output-truncation <mode>

 .. versionadded:: 3.24

 Truncate ``tail`` (default), ``middle`` or ``head`` of test output once
 maximum output size is reached.

.. option:: --overwrite

 Overwrite CTest configuration option.

 By default CTest uses configuration options from configuration file.
 This option will overwrite the configuration option.

.. option:: --force-new-ctest-process

 Run child CTest instances as new processes.

 By default CTest will run child CTest instances within the same
 process.  If this behavior is not desired, this argument will
 enforce new processes for child CTest processes.

.. option:: --schedule-random

 Use a random order for scheduling tests.

 This option will run the tests in a random order.  It is commonly
 used to detect implicit dependencies in a test suite.

.. option:: --submit-index

 Legacy option for old Dart2 dashboard server feature.
 Do not use.

.. option:: --timeout <seconds>

 Set the default test timeout.

 This option effectively sets a timeout on all tests that do not
 already have a timeout set on them via the :prop_test:`TIMEOUT`
 property.

.. option:: --stop-time <time>

 Set a time at which all tests should stop running.

 Set a real time of day at which all tests should timeout.  Example:
 ``7:00:00 -0400``.  Any time format understood by the curl date parser
 is accepted.  Local time is assumed if no timezone is specified.

.. option:: --print-labels

 Print all available test labels.

 This option will not run any tests, it will simply print the list of
 all labels associated with the test set.

.. option:: --no-tests=<action>

 Regard no tests found either as error (when ``<action>`` is set to
 ``error``) or ignore it (when ``<action>`` is set to ``ignore``).

 If no tests were found, the default behavior of CTest is to always log an
 error message but to return an error code in script mode only.  This option
 unifies the behavior of CTest by either returning an error code if no tests
 were found or by ignoring it.

 .. versionadded:: 3.26

 This option can also be set by setting the :envvar:`CTEST_NO_TESTS_ACTION`
 environment variable.

View Help
=========

To print version details or selected pages from the CMake documentation,
use one of the following options:

.. include:: OPTIONS_HELP.txt

.. _`Label Matching`:

Label Matching
==============

Tests may have labels attached to them. Tests may be included
or excluded from a test run by filtering on the labels.
Each individual filter is a regular expression applied to
the labels attached to a test.

When :option:`-L <ctest -L>` is used, in order for a test to be included in a
test run, each regular expression must match at least one
label.  Using more than one :option:`-L <ctest -L>` option means "match **all**
of these".

The :option:`-LE <ctest -LE>` option works just like :option:`-L <ctest -L>`,
but excludes tests rather than including them. A test is excluded if each
regular expression matches at least one label.

If a test has no labels attached to it, then :option:`-L <ctest -L>` will never
include that test, and :option:`-LE <ctest -LE>` will never exclude that test.
As an example of tests with labels, consider five tests,
with the following labels:

* *test1* has labels *tuesday* and *production*
* *test2* has labels *tuesday* and *test*
* *test3* has labels *wednesday* and *production*
* *test4* has label *wednesday*
* *test5* has labels *friday* and *test*

Running :program:`ctest` with ``-L tuesday -L test`` will select *test2*, which has
both labels. Running CTest with ``-L test`` will select *test2* and
*test5*, because both of them have a label that matches that regular
expression.

Because the matching works with regular expressions, take note that
running CTest with ``-L es`` will match all five tests.
To select the *tuesday* and *wednesday* tests together, use a single
regular expression that matches either of them, like ``-L "tue|wed"``.

.. _`Label and Subproject Summary`:

Label and Subproject Summary
============================

CTest prints timing summary information for each ``LABEL`` and subproject
associated with the tests run. The label time summary will not include labels
that are mapped to subprojects.

.. versionadded:: 3.22
  Labels added dynamically during test execution are also reported in the
  timing summary.  See :ref:`Additional Labels`.

When the :prop_test:`PROCESSORS` test property is set, CTest will display a
weighted test timing result in label and subproject summaries. The time is
reported with `sec*proc` instead of just `sec`.

The weighted time summary reported for each label or subproject ``j``
is computed as::

  Weighted Time Summary for Label/Subproject j =
      sum(raw_test_time[j,i] * num_processors[j,i], i=1...num_tests[j])

  for labels/subprojects j=1...total

where:

* ``raw_test_time[j,i]``: Wall-clock time for the ``i`` test
  for the ``j`` label or subproject
* ``num_processors[j,i]``: Value of the CTest :prop_test:`PROCESSORS` property
  for the ``i`` test for the ``j`` label or subproject
* ``num_tests[j]``: Number of tests associated with the ``j`` label or subproject
* ``total``: Total number of labels or subprojects that have at least one test run

Therefore, the weighted time summary for each label or subproject represents
the amount of time that CTest gave to run the tests for each label or
subproject and gives a good representation of the total expense of the tests
for each label or subproject when compared to other labels or subprojects.

For example, if ``SubprojectA`` showed ``100 sec*proc`` and ``SubprojectB`` showed
``10 sec*proc``, then CTest allocated approximately 10 times the CPU/core time
to run the tests for ``SubprojectA`` than for ``SubprojectB`` (e.g. so if effort
is going to be expended to reduce the cost of the test suite for the whole
project, then reducing the cost of the test suite for ``SubprojectA`` would
likely have a larger impact than effort to reduce the cost of the test suite
for ``SubprojectB``).

.. _`Build and Test Mode`:

Build and Test Mode
===================

CTest provides a command-line signature to configure (i.e. run cmake on),
build, and/or execute a test::

  ctest --build-and-test <path-to-source> <path-to-build>
        --build-generator <generator>
        [<options>...]
        [--build-options <opts>...]
        [--test-command <command> [<args>...]]

The configure and test steps are optional. The arguments to this command line
are the source and binary directories.  The ``--build-generator`` option *must*
be provided to use ``--build-and-test``.  If ``--test-command`` is specified
then that will be run after the build is complete.  Other options that affect
this mode include:

.. option:: --build-and-test

 Switch into the build and test mode.

.. option:: --build-target

 Specify a specific target to build.  The option can be given multiple times
 with different targets, in which case each target is built in turn.
 A clean will be done before building each target unless the
 :option:`--build-noclean` option is given.

 If no ``--build-target`` is specified, the ``all`` target is built.

.. option:: --build-nocmake

 Run the build without running cmake first.

 Skip the cmake step.

.. option:: --build-run-dir

 Specify directory to run programs from.

 Directory where programs will be after it has been compiled.

.. option:: --build-two-config

 Run CMake twice.

.. option:: --build-exe-dir

 Specify the directory for the executable.

.. option:: --build-generator

 Specify the generator to use. See the :manual:`cmake-generators(7)` manual.

.. option:: --build-generator-platform

 Specify the generator-specific platform.

.. option:: --build-generator-toolset

 Specify the generator-specific toolset.

.. option:: --build-project

 Specify the name of the project to build.

.. option:: --build-makeprogram

 Specify the explicit make program to be used by CMake when configuring and
 building the project. Only applicable for Make and Ninja based generators.

.. option:: --build-noclean

 Skip the make clean step.

.. option:: --build-config-sample

 A sample executable to use to determine the configuration that
 should be used.  e.g.  ``Debug``, ``Release`` etc.

.. option:: --build-options

 Additional options for configuring the build (i.e. for CMake, not for
 the build tool).  Note that if this is specified, the ``--build-options``
 keyword and its arguments must be the last option given on the command
 line, with the possible exception of ``--test-command``.

.. option:: --test-command

 The command to run as the test step with the
 :option:`--build-and-test <ctest --build-and-test>` option.
 All arguments following this keyword will be assumed to be part of the
 test command line, so it must be the last option given.

.. option:: --test-timeout

 The time limit in seconds

.. _`Dashboard Client`:

Dashboard Client
================

CTest can operate as a client for the `CDash`_ software quality dashboard
application.  As a dashboard client, CTest performs a sequence of steps
to configure, build, and test software, and then submits the results to
a `CDash`_ server. The command-line signature used to submit to `CDash`_ is::

  ctest -D <dashboard>         [-- <dashboard-options>...]
  ctest -M <model> -T <action> [-- <dashboard-options>...]
  ctest -S <script>            [-- <dashboard-options>...]
  ctest -SP <script>           [-- <dashboard-options>...]

.. _`CDash`: https://www.cdash.org

Options for Dashboard Client include:

.. option:: -D <dashboard>, --dashboard <dashboard>

 Execute dashboard test.

 This option tells CTest to act as a CDash client and perform a
 dashboard test.  All tests are ``<Mode><Test>``, where ``<Mode>`` can be
 ``Experimental``, ``Nightly``, and ``Continuous``, and ``<Test>`` can be
 ``Start``, ``Update``, ``Configure``, ``Build``, ``Test``,
 ``Coverage``, and ``Submit``.

 If ``<dashboard>`` is not one of the recognized ``<Mode><Test>`` values,
 this will be treated as a variable definition instead (see the
 :ref:`dashboard-options <Dashboard Options>` further below).

.. option:: -M <model>, --test-model <model>

 Sets the model for a dashboard.

 This option tells CTest to act as a CDash client where the ``<model>``
 can be ``Experimental``, ``Nightly``, and ``Continuous``.
 Combining ``-M`` and :option:`-T <ctest -T>` is similar to
 :option:`-D <ctest -D>`.

.. option:: -T <action>, --test-action <action>

 Sets the dashboard action to perform.

 This option tells CTest to act as a CDash client and perform some
 action such as ``start``, ``build``, ``test`` etc. See
 `Dashboard Client Steps`_ for the full list of actions.
 Combining :option:`-M <ctest -M>` and ``-T`` is similar to
 :option:`-D <ctest -D>`.

.. option:: -S <script>, --script <script>

 Execute a dashboard for a configuration.

 This option tells CTest to load in a configuration script which sets
 a number of parameters such as the binary and source directories.
 Then CTest will do what is required to create and run a dashboard.
 This option basically sets up a dashboard and then runs :option:`ctest -D`
 with the appropriate options.

.. option:: -SP <script>, --script-new-process <script>

 Execute a dashboard for a configuration.

 This option does the same operations as :option:`-S <ctest -S>` but it
 will do them in a separate process.  This is primarily useful in cases
 where the script may modify the environment and you do not want the modified
 environment to impact other :option:`-S <ctest -S>` scripts.

.. _`Dashboard Options`:

The available ``<dashboard-options>`` are the following:

.. option:: -D <var>:<type>=<value>

 Define a variable for script mode.

 Pass in variable values on the command line.  Use in conjunction
 with :option:`-S <ctest -S>` to pass variable values to a dashboard script.
 Parsing ``-D`` arguments as variable values is only attempted if the value
 following ``-D`` does not match any of the known dashboard types.

.. option:: --group <group>

 Specify what group you'd like to submit results to

 Submit dashboard to specified group instead of default one.  By
 default, the dashboard is submitted to Nightly, Experimental, or
 Continuous group, but by specifying this option, the group can be
 arbitrary.

 This replaces the deprecated option ``--track``.
 Despite the name change its behavior is unchanged.

.. option:: -A <file>, --add-notes <file>

 Add a notes file with submission.

 This option tells CTest to include a notes file when submitting
 dashboard.

.. option:: --tomorrow-tag

 ``Nightly`` or ``Experimental`` starts with next day tag.

 This is useful if the build will not finish in one day.

.. option:: --extra-submit <file>[;<file>]

 Submit extra files to the dashboard.

 This option will submit extra files to the dashboard.

.. option:: --http-header <header>

 .. versionadded:: 3.29

 Append HTTP header when submitting to the dashboard.

 This option will cause CTest to append the specified header
 when submitting to the dashboard.
 This option may be specified more than once.

.. option:: --http1.0

 Submit using `HTTP 1.0`.

 This option will force CTest to use `HTTP 1.0` to submit files to the
 dashboard, instead of `HTTP 1.1`.

.. option:: --no-compress-output

 Do not compress test output when submitting.

 This flag will turn off automatic compression of test output.  Use
 this to maintain compatibility with an older version of CDash which
 doesn't support compressed test output.

Dashboard Client Steps
----------------------

CTest defines an ordered list of testing steps of which some or all may
be run as a dashboard client:

``Start``
  Start a new dashboard submission to be composed of results recorded
  by the following steps.
  See the `CTest Start Step`_ section below.

``Update``
  Update the source tree from its version control repository.
  Record the old and new versions and the list of updated source files.
  See the `CTest Update Step`_ section below.

``Configure``
  Configure the software by running a command in the build tree.
  Record the configuration output log.
  See the `CTest Configure Step`_ section below.

``Build``
  Build the software by running a command in the build tree.
  Record the build output log and detect warnings and errors.
  See the `CTest Build Step`_ section below.

``Test``
  Test the software by loading a ``CTestTestfile.cmake``
  from the build tree and executing the defined tests.
  Record the output and result of each test.
  See the `CTest Test Step`_ section below.

``Coverage``
  Compute coverage of the source code by running a coverage
  analysis tool and recording its output.
  See the `CTest Coverage Step`_ section below.

``MemCheck``
  Run the software test suite through a memory check tool.
  Record the test output, results, and issues reported by the tool.
  See the `CTest MemCheck Step`_ section below.

``Submit``
  Submit results recorded from other testing steps to the
  software quality dashboard server.
  See the `CTest Submit Step`_ section below.

Dashboard Client Modes
----------------------

CTest defines three modes of operation as a dashboard client:

``Nightly``
  This mode is intended to be invoked once per day, typically at night.
  It enables the ``Start``, ``Update``, ``Configure``, ``Build``, ``Test``,
  ``Coverage``, and ``Submit`` steps by default.  Selected steps run even
  if the ``Update`` step reports no changes to the source tree.

``Continuous``
  This mode is intended to be invoked repeatedly throughout the day.
  It enables the ``Start``, ``Update``, ``Configure``, ``Build``, ``Test``,
  ``Coverage``, and ``Submit`` steps by default, but exits after the
  ``Update`` step if it reports no changes to the source tree.

``Experimental``
  This mode is intended to be invoked by a developer to test local changes.
  It enables the ``Start``, ``Configure``, ``Build``, ``Test``, ``Coverage``,
  and ``Submit`` steps by default.

Dashboard Client via CTest Command-Line
---------------------------------------

CTest can perform testing on an already-generated build tree.
Run the :program:`ctest` command with the current working directory set
to the build tree and use one of these signatures::

  ctest -D <mode>[<step>]
  ctest -M <mode> [-T <step>]...

The ``<mode>`` must be one of the above `Dashboard Client Modes`_,
and each ``<step>`` must be one of the above `Dashboard Client Steps`_.

CTest reads the `Dashboard Client Configuration`_ settings from
a file in the build tree called either ``CTestConfiguration.ini``
or ``DartConfiguration.tcl`` (the names are historical).  The format
of the file is::

  # Lines starting in '#' are comments.
  # Other non-blank lines are key-value pairs.
  <setting>: <value>

where ``<setting>`` is the setting name and ``<value>`` is the
setting value.

In build trees generated by CMake, this configuration file is
generated by the :module:`CTest` module if included by the project.
The module uses variables to obtain a value for each setting
as documented with the settings below.

.. _`CTest Script`:

Dashboard Client via CTest Script
---------------------------------

CTest can perform testing driven by a :manual:`cmake-language(7)`
script that creates and maintains the source and build tree as
well as performing the testing steps.  Run the :program:`ctest` command
with the current working directory set outside of any build tree
and use one of these signatures::

  ctest -S <script>
  ctest -SP <script>

The ``<script>`` file must call :ref:`CTest Commands` commands
to run testing steps explicitly as documented below.  The commands
obtain `Dashboard Client Configuration`_ settings from their
arguments or from variables set in the script.

Dashboard Client Configuration
==============================

The `Dashboard Client Steps`_ may be configured by named
settings as documented in the following sections.

.. _`CTest Start Step`:

CTest Start Step
----------------

Start a new dashboard submission to be composed of results recorded
by the following steps.

In a `CTest Script`_, the :command:`ctest_start` command runs this step.
Arguments to the command may specify some of the step settings.
The command first runs the command-line specified by the
``CTEST_CHECKOUT_COMMAND`` variable, if set, to initialize the source
directory.

Configuration settings include:

``BuildDirectory``
  The full path to the project build tree.

  * `CTest Script`_ variable: :variable:`CTEST_BINARY_DIRECTORY`
  * :module:`CTest` module variable: :variable:`PROJECT_BINARY_DIR`

``SourceDirectory``
  The full path to the project source tree.

  * `CTest Script`_ variable: :variable:`CTEST_SOURCE_DIRECTORY`
  * :module:`CTest` module variable: :variable:`PROJECT_SOURCE_DIR`

.. _`CTest Update Step`:

CTest Update Step
-----------------

In a `CTest Script`_, the :command:`ctest_update` command runs this step.
Arguments to the command may specify some of the step settings.

Configuration settings to specify the version control tool include:

``BZRCommand``
  ``bzr`` command-line tool to use if source tree is managed by Bazaar.

  * `CTest Script`_ variable: :variable:`CTEST_BZR_COMMAND`
  * :module:`CTest` module variable: none

``BZRUpdateOptions``
  Command-line options to the ``BZRCommand`` when updating the source.

  * `CTest Script`_ variable: :variable:`CTEST_BZR_UPDATE_OPTIONS`
  * :module:`CTest` module variable: none

``CVSCommand``
  ``cvs`` command-line tool to use if source tree is managed by CVS.

  * `CTest Script`_ variable: :variable:`CTEST_CVS_COMMAND`
  * :module:`CTest` module variable: ``CVSCOMMAND``

``CVSUpdateOptions``
  Command-line options to the ``CVSCommand`` when updating the source.

  * `CTest Script`_ variable: :variable:`CTEST_CVS_UPDATE_OPTIONS`
  * :module:`CTest` module variable: ``CVS_UPDATE_OPTIONS``

``GITCommand``
  ``git`` command-line tool to use if source tree is managed by Git.

  * `CTest Script`_ variable: :variable:`CTEST_GIT_COMMAND`
  * :module:`CTest` module variable: ``GITCOMMAND``

  The source tree is updated by ``git fetch`` followed by
  ``git reset --hard`` to the ``FETCH_HEAD``.  The result is the same
  as ``git pull`` except that any local modifications are overwritten.
  Use ``GITUpdateCustom`` to specify a different approach.

``GITInitSubmodules``
  If set, CTest will update the repository's submodules before updating.

  * `CTest Script`_ variable: :variable:`CTEST_GIT_INIT_SUBMODULES`
  * :module:`CTest` module variable: ``CTEST_GIT_INIT_SUBMODULES``

``GITUpdateCustom``
  Specify a custom command line (as a semicolon-separated list) to run
  in the source tree (Git work tree) to update it instead of running
  the ``GITCommand``.

  * `CTest Script`_ variable: :variable:`CTEST_GIT_UPDATE_CUSTOM`
  * :module:`CTest` module variable: ``CTEST_GIT_UPDATE_CUSTOM``

``GITUpdateOptions``
  Command-line options to the ``GITCommand`` when updating the source.

  * `CTest Script`_ variable: :variable:`CTEST_GIT_UPDATE_OPTIONS`
  * :module:`CTest` module variable: ``GIT_UPDATE_OPTIONS``

``HGCommand``
  ``hg`` command-line tool to use if source tree is managed by Mercurial.

  * `CTest Script`_ variable: :variable:`CTEST_HG_COMMAND`
  * :module:`CTest` module variable: none

``HGUpdateOptions``
  Command-line options to the ``HGCommand`` when updating the source.

  * `CTest Script`_ variable: :variable:`CTEST_HG_UPDATE_OPTIONS`
  * :module:`CTest` module variable: none

``P4Client``
  Value of the ``-c`` option to the ``P4Command``.

  * `CTest Script`_ variable: :variable:`CTEST_P4_CLIENT`
  * :module:`CTest` module variable: ``CTEST_P4_CLIENT``

``P4Command``
  ``p4`` command-line tool to use if source tree is managed by Perforce.

  * `CTest Script`_ variable: :variable:`CTEST_P4_COMMAND`
  * :module:`CTest` module variable: ``P4COMMAND``

``P4Options``
  Command-line options to the ``P4Command`` for all invocations.

  * `CTest Script`_ variable: :variable:`CTEST_P4_OPTIONS`
  * :module:`CTest` module variable: ``CTEST_P4_OPTIONS``

``P4UpdateCustom``
  Specify a custom command line (as a semicolon-separated list) to run
  in the source tree (Perforce tree) to update it instead of running
  the ``P4Command``.

  * `CTest Script`_ variable: none
  * :module:`CTest` module variable: ``CTEST_P4_UPDATE_CUSTOM``

``P4UpdateOptions``
  Command-line options to the ``P4Command`` when updating the source.

  * `CTest Script`_ variable: :variable:`CTEST_P4_UPDATE_OPTIONS`
  * :module:`CTest` module variable: ``CTEST_P4_UPDATE_OPTIONS``

``SVNCommand``
  ``svn`` command-line tool to use if source tree is managed by Subversion.

  * `CTest Script`_ variable: :variable:`CTEST_SVN_COMMAND`
  * :module:`CTest` module variable: ``SVNCOMMAND``

``SVNOptions``
  Command-line options to the ``SVNCommand`` for all invocations.

  * `CTest Script`_ variable: :variable:`CTEST_SVN_OPTIONS`
  * :module:`CTest` module variable: ``CTEST_SVN_OPTIONS``

``SVNUpdateOptions``
  Command-line options to the ``SVNCommand`` when updating the source.

  * `CTest Script`_ variable: :variable:`CTEST_SVN_UPDATE_OPTIONS`
  * :module:`CTest` module variable: ``SVN_UPDATE_OPTIONS``

``UpdateCommand``
  Specify the version-control command-line tool to use without
  detecting the VCS that manages the source tree.

  * `CTest Script`_ variable: :variable:`CTEST_UPDATE_COMMAND`
  * :module:`CTest` module variable: ``<VCS>COMMAND``
    when ``UPDATE_TYPE`` is ``<vcs>``, else ``UPDATE_COMMAND``

``UpdateOptions``
  Command-line options to the ``UpdateCommand``.

  * `CTest Script`_ variable: :variable:`CTEST_UPDATE_OPTIONS`
  * :module:`CTest` module variable: ``<VCS>_UPDATE_OPTIONS``
    when ``UPDATE_TYPE`` is ``<vcs>``, else ``UPDATE_OPTIONS``

``UpdateType``
  Specify the version-control system that manages the source
  tree if it cannot be detected automatically.
  The value may be ``bzr``, ``cvs``, ``git``, ``hg``,
  ``p4``, or ``svn``.

  * `CTest Script`_ variable: none, detected from source tree
  * :module:`CTest` module variable: ``UPDATE_TYPE`` if set,
    else ``CTEST_UPDATE_TYPE``

.. _`UpdateVersionOnly`:

``UpdateVersionOnly``
  Specify that you want the version control update command to only
  discover the current version that is checked out, and not to update
  to a different version.

  * `CTest Script`_ variable: :variable:`CTEST_UPDATE_VERSION_ONLY`

.. _`UpdateVersionOverride`:

``UpdateVersionOverride``
  Specify the current version of your source tree.

  When this variable is set to a non-empty string, CTest will report the value
  you specified rather than using the update command to discover the current
  version that is checked out. Use of this variable supersedes
  ``UpdateVersionOnly``. Like ``UpdateVersionOnly``, using this variable tells
  CTest not to update the source tree to a different version.

  * `CTest Script`_ variable: :variable:`CTEST_UPDATE_VERSION_OVERRIDE`

Additional configuration settings include:

``NightlyStartTime``
  In the ``Nightly`` dashboard mode, specify the "nightly start time".
  With centralized version control systems (``cvs`` and ``svn``),
  the ``Update`` step checks out the version of the software as of
  this time so that multiple clients choose a common version to test.
  This is not well-defined in distributed version-control systems so
  the setting is ignored.

  * `CTest Script`_ variable: :variable:`CTEST_NIGHTLY_START_TIME`
  * :module:`CTest` module variable: ``NIGHTLY_START_TIME`` if set,
    else ``CTEST_NIGHTLY_START_TIME``

.. _`CTest Configure Step`:

CTest Configure Step
--------------------

In a `CTest Script`_, the :command:`ctest_configure` command runs this step.
Arguments to the command may specify some of the step settings.

Configuration settings include:

``ConfigureCommand``
  Command-line to launch the software configuration process.
  It will be executed in the location specified by the
  ``BuildDirectory`` setting.

  * `CTest Script`_ variable: :variable:`CTEST_CONFIGURE_COMMAND`
  * :module:`CTest` module variable: :variable:`CMAKE_COMMAND`
    followed by :variable:`PROJECT_SOURCE_DIR`

``LabelsForSubprojects``
  Specify a semicolon-separated list of labels that will be treated as
  subprojects. This mapping will be passed on to CDash when configure, test or
  build results are submitted.

  * `CTest Script`_ variable: :variable:`CTEST_LABELS_FOR_SUBPROJECTS`
  * :module:`CTest` module variable: ``CTEST_LABELS_FOR_SUBPROJECTS``

  See `Label and Subproject Summary`_.

.. _`CTest Build Step`:

CTest Build Step
----------------

In a `CTest Script`_, the :command:`ctest_build` command runs this step.
Arguments to the command may specify some of the step settings.

Configuration settings include:

``DefaultCTestConfigurationType``
  When the build system to be launched allows build-time selection
  of the configuration (e.g. ``Debug``, ``Release``), this specifies
  the default configuration to be built when no :option:`-C <ctest -C>`
  option is given to the :program:`ctest` command.  The value will be substituted
  into the value of ``MakeCommand`` to replace the literal string
  ``${CTEST_CONFIGURATION_TYPE}`` if it appears.

  * `CTest Script`_ variable: :variable:`CTEST_CONFIGURATION_TYPE`
  * :module:`CTest` module variable: ``DEFAULT_CTEST_CONFIGURATION_TYPE``,
    initialized by the :envvar:`CMAKE_CONFIG_TYPE` environment variable

``LabelsForSubprojects``
  Specify a semicolon-separated list of labels that will be treated as
  subprojects. This mapping will be passed on to CDash when configure, test or
  build results are submitted.

  * `CTest Script`_ variable: :variable:`CTEST_LABELS_FOR_SUBPROJECTS`
  * :module:`CTest` module variable: ``CTEST_LABELS_FOR_SUBPROJECTS``

  See `Label and Subproject Summary`_.

``MakeCommand``
  Command-line to launch the software build process.
  It will be executed in the location specified by the
  ``BuildDirectory`` setting.

  * `CTest Script`_ variable: :variable:`CTEST_BUILD_COMMAND`
  * :module:`CTest` module variable: ``MAKECOMMAND``,
    initialized by the :command:`build_command` command

``UseLaunchers``
  For build trees generated by CMake using one of the
  :ref:`Makefile Generators` or the :generator:`Ninja`
  generator, specify whether the
  ``CTEST_USE_LAUNCHERS`` feature is enabled by the
  :module:`CTestUseLaunchers` module (also included by the
  :module:`CTest` module).  When enabled, the generated build
  system wraps each invocation of the compiler, linker, or
  custom command line with a "launcher" that communicates
  with CTest via environment variables and files to report
  granular build warning and error information.  Otherwise,
  CTest must "scrape" the build output log for diagnostics.

  * `CTest Script`_ variable: :variable:`CTEST_USE_LAUNCHERS`
  * :module:`CTest` module variable: ``CTEST_USE_LAUNCHERS``

.. _`CTest Test Step`:

CTest Test Step
---------------

In a `CTest Script`_, the :command:`ctest_test` command runs this step.
Arguments to the command may specify some of the step settings.

Configuration settings include:

``ResourceSpecFile``
  Specify a
  :ref:`resource specification file <ctest-resource-specification-file>`.

  * `CTest Script`_ variable: :variable:`CTEST_RESOURCE_SPEC_FILE`
  * :module:`CTest` module variable: ``CTEST_RESOURCE_SPEC_FILE``

  See :ref:`ctest-resource-allocation` for more information.

``LabelsForSubprojects``
  Specify a semicolon-separated list of labels that will be treated as
  subprojects. This mapping will be passed on to CDash when configure, test or
  build results are submitted.

  * `CTest Script`_ variable: :variable:`CTEST_LABELS_FOR_SUBPROJECTS`
  * :module:`CTest` module variable: ``CTEST_LABELS_FOR_SUBPROJECTS``

  See `Label and Subproject Summary`_.

``TestLoad``
  While running tests in parallel (e.g. with :option:`-j <ctest -j>`),
  try not to start tests when they may cause the CPU load to pass above
  a given threshold.

  * `CTest Script`_ variable: :variable:`CTEST_TEST_LOAD`
  * :module:`CTest` module variable: ``CTEST_TEST_LOAD``

``TimeOut``
  The default timeout for each test if not specified by the
  :prop_test:`TIMEOUT` test property or the
  :option:`--timeout <ctest --timeout>` flag.

  * `CTest Script`_ variable: :variable:`CTEST_TEST_TIMEOUT`
  * :module:`CTest` module variable: ``DART_TESTING_TIMEOUT``

To report extra test values to CDash, see :ref:`Additional Test Measurements`.

.. _`CTest Coverage Step`:

CTest Coverage Step
-------------------

In a `CTest Script`_, the :command:`ctest_coverage` command runs this step.
Arguments to the command may specify some of the step settings.

Configuration settings include:

``CoverageCommand``
  Command-line tool to perform software coverage analysis.
  It will be executed in the location specified by the
  ``BuildDirectory`` setting.

  * `CTest Script`_ variable: :variable:`CTEST_COVERAGE_COMMAND`
  * :module:`CTest` module variable: ``COVERAGE_COMMAND``

``CoverageExtraFlags``
  Specify command-line options to the ``CoverageCommand`` tool.

  * `CTest Script`_ variable: :variable:`CTEST_COVERAGE_EXTRA_FLAGS`
  * :module:`CTest` module variable: ``COVERAGE_EXTRA_FLAGS``

  These options are the first arguments passed to ``CoverageCommand``.

.. _`CTest MemCheck Step`:

CTest MemCheck Step
-------------------

In a `CTest Script`_, the :command:`ctest_memcheck` command runs this step.
Arguments to the command may specify some of the step settings.

Configuration settings include:

``MemoryCheckCommand``
  Command-line tool to perform dynamic analysis.  Test command lines
  will be launched through this tool.

  * `CTest Script`_ variable: :variable:`CTEST_MEMORYCHECK_COMMAND`
  * :module:`CTest` module variable: ``MEMORYCHECK_COMMAND``

``MemoryCheckCommandOptions``
  Specify command-line options to the ``MemoryCheckCommand`` tool.
  They will be placed prior to the test command line.

  * `CTest Script`_ variable: :variable:`CTEST_MEMORYCHECK_COMMAND_OPTIONS`
  * :module:`CTest` module variable: ``MEMORYCHECK_COMMAND_OPTIONS``

``MemoryCheckType``
  Specify the type of memory checking to perform.

  * `CTest Script`_ variable: :variable:`CTEST_MEMORYCHECK_TYPE`
  * :module:`CTest` module variable: ``MEMORYCHECK_TYPE``

``MemoryCheckSanitizerOptions``
  Specify options to sanitizers when running with a sanitize-enabled build.

  * `CTest Script`_ variable: :variable:`CTEST_MEMORYCHECK_SANITIZER_OPTIONS`
  * :module:`CTest` module variable: ``MEMORYCHECK_SANITIZER_OPTIONS``

``MemoryCheckSuppressionFile``
  Specify a file containing suppression rules for the
  ``MemoryCheckCommand`` tool.  It will be passed with options
  appropriate to the tool.

  * `CTest Script`_ variable: :variable:`CTEST_MEMORYCHECK_SUPPRESSIONS_FILE`
  * :module:`CTest` module variable: ``MEMORYCHECK_SUPPRESSIONS_FILE``

Additional configuration settings include:

``BoundsCheckerCommand``
  Specify a ``MemoryCheckCommand`` that is known to be command-line
  compatible with Bounds Checker.

  * `CTest Script`_ variable: none
  * :module:`CTest` module variable: none

``PurifyCommand``
  Specify a ``MemoryCheckCommand`` that is known to be command-line
  compatible with Purify.

  * `CTest Script`_ variable: none
  * :module:`CTest` module variable: ``PURIFYCOMMAND``

``ValgrindCommand``
  Specify a ``MemoryCheckCommand`` that is known to be command-line
  compatible with Valgrind.

  * `CTest Script`_ variable: none
  * :module:`CTest` module variable: ``VALGRIND_COMMAND``

``ValgrindCommandOptions``
  Specify command-line options to the ``ValgrindCommand`` tool.
  They will be placed prior to the test command line.

  * `CTest Script`_ variable: none
  * :module:`CTest` module variable: ``VALGRIND_COMMAND_OPTIONS``

``DrMemoryCommand``
  Specify a ``MemoryCheckCommand`` that is known to be a command-line
  compatible with DrMemory.

  * `CTest Script`_ variable: none
  * :module:`CTest` module variable: ``DRMEMORY_COMMAND``

``DrMemoryCommandOptions``
  Specify command-line options to the ``DrMemoryCommand`` tool.
  They will be placed prior to the test command line.

  * `CTest Script`_ variable: none
  * :module:`CTest` module variable: ``DRMEMORY_COMMAND_OPTIONS``

``CudaSanitizerCommand``
  Specify a ``MemoryCheckCommand`` that is known to be a command-line
  compatible with cuda-memcheck or compute-sanitizer.

  * `CTest Script`_ variable: none
  * :module:`CTest` module variable: ``CUDA_SANITIZER_COMMAND``

``CudaSanitizerCommandOptions``
  Specify command-line options to the ``CudaSanitizerCommand`` tool.
  They will be placed prior to the test command line.

  * `CTest Script`_ variable: none
  * :module:`CTest` module variable: ``CUDA_SANITIZER_COMMAND_OPTIONS``

.. _`CTest Submit Step`:

CTest Submit Step
-----------------

In a `CTest Script`_, the :command:`ctest_submit` command runs this step.
Arguments to the command may specify some of the step settings.

Configuration settings include:

``BuildName``
  Describe the dashboard client platform with a short string.
  (Operating system, compiler, etc.)

  * `CTest Script`_ variable: :variable:`CTEST_BUILD_NAME`
  * :module:`CTest` module variable: ``BUILDNAME``

``CDashVersion``
  Legacy option.  Not used.

  * `CTest Script`_ variable: none, detected from server
  * :module:`CTest` module variable: ``CTEST_CDASH_VERSION``

``CTestSubmitRetryCount``
  Specify a number of attempts to retry submission on network failure.

  * `CTest Script`_ variable: none,
    use the :command:`ctest_submit` ``RETRY_COUNT`` option.
  * :module:`CTest` module variable: ``CTEST_SUBMIT_RETRY_COUNT``

``CTestSubmitRetryDelay``
  Specify a delay before retrying submission on network failure.

  * `CTest Script`_ variable: none,
    use the :command:`ctest_submit` ``RETRY_DELAY`` option.
  * :module:`CTest` module variable: ``CTEST_SUBMIT_RETRY_DELAY``

``CurlOptions``
  Specify a semicolon-separated list of options to control the
  Curl library that CTest uses internally to connect to the
  server.  Possible options are ``CURLOPT_SSL_VERIFYPEER_OFF``
  and ``CURLOPT_SSL_VERIFYHOST_OFF``.

  * `CTest Script`_ variable: :variable:`CTEST_CURL_OPTIONS`
  * :module:`CTest` module variable: ``CTEST_CURL_OPTIONS``

``DropLocation``
  Legacy option.  When ``SubmitURL`` is not set, it is constructed from
  ``DropMethod``, ``DropSiteUser``, ``DropSitePassword``, ``DropSite``, and
  ``DropLocation``.

  * `CTest Script`_ variable: :variable:`CTEST_DROP_LOCATION`
  * :module:`CTest` module variable: ``DROP_LOCATION`` if set,
    else ``CTEST_DROP_LOCATION``

``DropMethod``
  Legacy option.  When ``SubmitURL`` is not set, it is constructed from
  ``DropMethod``, ``DropSiteUser``, ``DropSitePassword``, ``DropSite``, and
  ``DropLocation``.

  * `CTest Script`_ variable: :variable:`CTEST_DROP_METHOD`
  * :module:`CTest` module variable: ``DROP_METHOD`` if set,
    else ``CTEST_DROP_METHOD``

``DropSite``
  Legacy option.  When ``SubmitURL`` is not set, it is constructed from
  ``DropMethod``, ``DropSiteUser``, ``DropSitePassword``, ``DropSite``, and
  ``DropLocation``.

  * `CTest Script`_ variable: :variable:`CTEST_DROP_SITE`
  * :module:`CTest` module variable: ``DROP_SITE`` if set,
    else ``CTEST_DROP_SITE``

``DropSitePassword``
  Legacy option.  When ``SubmitURL`` is not set, it is constructed from
  ``DropMethod``, ``DropSiteUser``, ``DropSitePassword``, ``DropSite``, and
  ``DropLocation``.

  * `CTest Script`_ variable: :variable:`CTEST_DROP_SITE_PASSWORD`
  * :module:`CTest` module variable: ``DROP_SITE_PASSWORD`` if set,
    else ``CTEST_DROP_SITE_PASWORD``

``DropSiteUser``
  Legacy option.  When ``SubmitURL`` is not set, it is constructed from
  ``DropMethod``, ``DropSiteUser``, ``DropSitePassword``, ``DropSite``, and
  ``DropLocation``.

  * `CTest Script`_ variable: :variable:`CTEST_DROP_SITE_USER`
  * :module:`CTest` module variable: ``DROP_SITE_USER`` if set,
    else ``CTEST_DROP_SITE_USER``

``IsCDash``
  Legacy option.  Not used.

  * `CTest Script`_ variable: :variable:`CTEST_DROP_SITE_CDASH`
  * :module:`CTest` module variable: ``CTEST_DROP_SITE_CDASH``

``ScpCommand``
  Legacy option.  Not used.

  * `CTest Script`_ variable: :variable:`CTEST_SCP_COMMAND`
  * :module:`CTest` module variable: ``SCPCOMMAND``

``Site``
  Describe the dashboard client host site with a short string.
  (Hostname, domain, etc.)

  * `CTest Script`_ variable: :variable:`CTEST_SITE`
  * :module:`CTest` module variable: ``SITE``,
    initialized by the :command:`site_name` command

``SubmitURL``
  The ``http`` or ``https`` URL of the dashboard server to send the submission
  to.

  * `CTest Script`_ variable: :variable:`CTEST_SUBMIT_URL`
  * :module:`CTest` module variable: ``SUBMIT_URL`` if set,
    else ``CTEST_SUBMIT_URL``

``SubmitInactivityTimeout``
  The time to wait for the submission after which it is canceled
  if not completed. Specify a zero value to disable timeout.

  * `CTest Script`_ variable: :variable:`CTEST_SUBMIT_INACTIVITY_TIMEOUT`
  * :module:`CTest` module variable: ``CTEST_SUBMIT_INACTIVITY_TIMEOUT``

``TriggerSite``
  Legacy option.  Not used.

  * `CTest Script`_ variable: :variable:`CTEST_TRIGGER_SITE`
  * :module:`CTest` module variable: ``TRIGGER_SITE`` if set,
    else ``CTEST_TRIGGER_SITE``

.. _`Show as JSON Object Model`:

Show as JSON Object Model
=========================

.. versionadded:: 3.14

When the ``--show-only=json-v1`` command line option is given, the test
information is output in JSON format.  Version 1.0 of the JSON object
model is defined as follows:

``kind``
  The string "ctestInfo".

``version``
  A JSON object specifying the version components.  Its members are

  ``major``
    A non-negative integer specifying the major version component.
  ``minor``
    A non-negative integer specifying the minor version component.

``backtraceGraph``
    JSON object representing backtrace information with the
    following members:

    ``commands``
      List of command names.
    ``files``
      List of file names.
    ``nodes``
      List of node JSON objects with members:

      ``command``
        Index into the ``commands`` member of the ``backtraceGraph``.
      ``file``
        Index into the ``files`` member of the ``backtraceGraph``.
      ``line``
        Line number in the file where the backtrace was added.
      ``parent``
        Index into the ``nodes`` member of the ``backtraceGraph``
        representing the parent in the graph.

``tests``
  A JSON array listing information about each test.  Each entry
  is a JSON object with members:

  ``name``
    Test name.
  ``config``
    Configuration that the test can run on.
    Empty string means any config.
  ``command``
    List where the first element is the test command and the
    remaining elements are the command arguments.
  ``backtrace``
    Index into the ``nodes`` member of the ``backtraceGraph``.
  ``properties``
    Test properties.
    Can contain keys for each of the supported test properties.

.. _`ctest-resource-allocation`:

Resource Allocation
===================

CTest provides a mechanism for tests to specify the resources that they need
in a fine-grained way, and for users to specify the resources available on
the running machine. This allows CTest to internally keep track of which
resources are in use and which are free, scheduling tests in a way that
prevents them from trying to claim resources that are not available.

When the resource allocation feature is used, CTest will not oversubscribe
resources. For example, if a resource has 8 slots, CTest will not run tests
that collectively use more than 8 slots at a time. This has the effect of
limiting how many tests can run at any given time, even if a high ``-j``
argument is used, if those tests all use some slots from the same resource.
In addition, it means that a single test that uses more of a resource than is
available on a machine will not run at all (and will be reported as
``Not Run``).

A common use case for this feature is for tests that require the use of a GPU.
Multiple tests can simultaneously allocate memory from a GPU, but if too many
tests try to do this at once, some of them will fail to allocate, resulting in
a failed test, even though the test would have succeeded if it had the memory
it needed. By using the resource allocation feature, each test can specify how
much memory it requires from a GPU, allowing CTest to schedule tests in a way
that running several of these tests at once does not exhaust the GPU's memory
pool.

Please note that CTest has no concept of what a GPU is or how much memory it
has. It does not have any way of communicating with a GPU to retrieve this
information or perform any memory management, although the project can define
a test that provides details about the test machine (see
:ref:`ctest-resource-dynamically-generated-spec-file`).

CTest keeps track of a list of abstract resource types, each of which has a
certain number of slots available for tests to use. Each test specifies the
number of slots that it requires from a certain resource, and CTest then
schedules them in a way that prevents the total number of slots in use from
exceeding the listed capacity. When a test is executed, and slots from a
resource are allocated to that test, tests may assume that they have exclusive
use of those slots for the duration of the test's process.

The CTest resource allocation feature consists of at least two inputs:

* The :ref:`resource specification file <ctest-resource-specification-file>`,
  described below, which describes the resources available on the system.
* The :prop_test:`RESOURCE_GROUPS` property of tests, which describes the
  resources required by the test.

When CTest runs a test, the resources allocated to that test are passed in the
form of a set of
:ref:`environment variables <ctest-resource-environment-variables>` as
described below. Using this information to decide which resource to connect to
is left to the test writer.

The ``RESOURCE_GROUPS`` property tells CTest what resources a test expects
to use grouped in a way meaningful to the test.  The test itself must read
the :ref:`environment variables <ctest-resource-environment-variables>` to
determine which resources have been allocated to each group.  For example,
each group may correspond to a process the test will spawn when executed.

Note that even if a test specifies a ``RESOURCE_GROUPS`` property, it is still
possible for that to test to run without any resource allocation (and without
the corresponding
:ref:`environment variables <ctest-resource-environment-variables>`)
if the user does not pass a resource specification file. Passing this file,
either through the ``--resource-spec-file`` command-line argument or the
``RESOURCE_SPEC_FILE`` argument to :command:`ctest_test`, is what activates the
resource allocation feature. Tests should check the
``CTEST_RESOURCE_GROUP_COUNT`` environment variable to find out whether or not
resource allocation is activated. This variable will always (and only) be
defined if resource allocation is activated. If resource allocation is not
activated, then the ``CTEST_RESOURCE_GROUP_COUNT`` variable will not exist,
even if it exists for the parent :program:`ctest` process. If a test absolutely must
have resource allocation, then it can return a failing exit code or use the
:prop_test:`SKIP_RETURN_CODE` or :prop_test:`SKIP_REGULAR_EXPRESSION`
properties to indicate a skipped test.

.. _`ctest-resource-specification-file`:

Resource Specification File
---------------------------

The resource specification file is a JSON file which is passed to CTest in one
of a number of ways. It can be specified on the command line with the
:option:`ctest --resource-spec-file` option, it can be given using the
``RESOURCE_SPEC_FILE`` argument of :command:`ctest_test`, or it can be
generated dynamically as part of test execution (see
:ref:`ctest-resource-dynamically-generated-spec-file`).

If a dashboard script is used and ``RESOURCE_SPEC_FILE`` is not specified, the
value of :variable:`CTEST_RESOURCE_SPEC_FILE` in the dashboard script is used
instead.  If :option:`--resource-spec-file <ctest --resource-spec-file>`,
``RESOURCE_SPEC_FILE``, and :variable:`CTEST_RESOURCE_SPEC_FILE` in the
dashboard script are not specified, the value of
:variable:`CTEST_RESOURCE_SPEC_FILE` in the CMake build is used instead.
If none of these are specified, no resource spec file is used.

The resource specification file must be a JSON object. All examples in this
document assume the following resource specification file:

.. code-block:: json

  {
    "version": {
      "major": 1,
      "minor": 0
    },
    "local": [
      {
        "gpus": [
          {
            "id": "0",
            "slots": 2
          },
          {
            "id": "1",
            "slots": 4
          },
          {
            "id": "2",
            "slots": 2
          },
          {
            "id": "3"
          }
        ],
        "crypto_chips": [
          {
            "id": "card0",
            "slots": 4
          }
        ]
      }
    ]
  }

The members are:

``version``
  An object containing a ``major`` integer field and a ``minor`` integer field.
  Currently, the only supported version is major ``1``, minor ``0``. Any other
  value is an error.

``local``
  A JSON array of resource sets present on the system.  Currently, this array
  is restricted to being of size 1.

  Each array element is a JSON object with members whose names are equal to the
  desired resource types, such as ``gpus``. These names must start with a
  lowercase letter or an underscore, and subsequent characters can be a
  lowercase letter, a digit, or an underscore. Uppercase letters are not
  allowed, because certain platforms have case-insensitive environment
  variables. See the `Environment Variables`_ section below for
  more information. It is recommended that the resource type name be the plural
  of a noun, such as ``gpus`` or ``crypto_chips`` (and not ``gpu`` or
  ``crypto_chip``.)

  Please note that the names ``gpus`` and ``crypto_chips`` are just examples,
  and CTest does not interpret them in any way. You are free to make up any
  resource type you want to meet your own requirements.

  The value for each resource type is a JSON array consisting of JSON objects,
  each of which describe a specific instance of the specified resource. These
  objects have the following members:

  ``id``
    A string consisting of an identifier for the resource. Each character in
    the identifier can be a lowercase letter, a digit, or an underscore.
    Uppercase letters are not allowed.

    Identifiers must be unique within a resource type. However, they do not
    have to be unique across resource types. For example, it is valid to have a
    ``gpus`` resource named ``0`` and a ``crypto_chips`` resource named ``0``,
    but not two ``gpus`` resources both named ``0``.

    Please note that the IDs ``0``, ``1``, ``2``, ``3``, and ``card0`` are just
    examples, and CTest does not interpret them in any way. You are free to
    make up any IDs you want to meet your own requirements.

  ``slots``
    An optional unsigned number specifying the number of slots available on the
    resource. For example, this could be megabytes of RAM on a GPU, or
    cryptography units available on a cryptography chip. If ``slots`` is not
    specified, a default value of ``1`` is assumed.

In the example file above, there are four GPUs with ID's 0 through 3. GPU 0 has
2 slots, GPU 1 has 4, GPU 2 has 2, and GPU 3 has a default of 1 slot. There is
also one cryptography chip with 4 slots.

``RESOURCE_GROUPS`` Property
----------------------------

See :prop_test:`RESOURCE_GROUPS` for a description of this property.

.. _`ctest-resource-environment-variables`:

Environment Variables
---------------------

Once CTest has decided which resources to allocate to a test, it passes this
information to the test executable as a series of environment variables. For
each example below, we will assume that the test in question has a
:prop_test:`RESOURCE_GROUPS` property of
``2,gpus:2;gpus:4,gpus:1,crypto_chips:2``.

The following variables are passed to the test process:

.. envvar:: CTEST_RESOURCE_GROUP_COUNT

  The total number of groups specified by the :prop_test:`RESOURCE_GROUPS`
  property. For example:

  * ``CTEST_RESOURCE_GROUP_COUNT=3``

  This variable will only be defined if :manual:`ctest(1)` has been given a
  ``--resource-spec-file``, or if :command:`ctest_test` has been given a
  ``RESOURCE_SPEC_FILE``. If no resource specification file has been given,
  this variable will not be defined.

.. envvar:: CTEST_RESOURCE_GROUP_<num>

  The list of resource types allocated to each group, with each item
  separated by a comma. ``<num>`` is a number from zero to
  ``CTEST_RESOURCE_GROUP_COUNT`` minus one. ``CTEST_RESOURCE_GROUP_<num>``
  is defined for each ``<num>`` in this range. For example:

  * ``CTEST_RESOURCE_GROUP_0=gpus``
  * ``CTEST_RESOURCE_GROUP_1=gpus``
  * ``CTEST_RESOURCE_GROUP_2=crypto_chips,gpus``

.. envvar:: CTEST_RESOURCE_GROUP_<num>_<resource-type>

  The list of resource IDs and number of slots from each ID allocated to each
  group for a given resource type. This variable consists of a series of
  pairs, each pair separated by a semicolon, and with the two items in the pair
  separated by a comma. The first item in each pair is ``id:`` followed by the
  ID of a resource of type ``<resource-type>``, and the second item is
  ``slots:`` followed by the number of slots from that resource allocated to
  the given group. For example:

  * ``CTEST_RESOURCE_GROUP_0_GPUS=id:0,slots:2``
  * ``CTEST_RESOURCE_GROUP_1_GPUS=id:2,slots:2``
  * ``CTEST_RESOURCE_GROUP_2_GPUS=id:1,slots:4;id:3,slots:1``
  * ``CTEST_RESOURCE_GROUP_2_CRYPTO_CHIPS=id:card0,slots:2``

  In this example, group 0 gets 2 slots from GPU ``0``, group 1 gets 2 slots
  from GPU ``2``, and group 2 gets 4 slots from GPU ``1``, 1 slot from GPU
  ``3``, and 2 slots from cryptography chip ``card0``.

  ``<num>`` is a number from zero to ``CTEST_RESOURCE_GROUP_COUNT`` minus one.
  ``<resource-type>`` is the name of a resource type, converted to uppercase.
  ``CTEST_RESOURCE_GROUP_<num>_<resource-type>`` is defined for the product
  of each ``<num>`` in the range listed above and each resource type listed in
  ``CTEST_RESOURCE_GROUP_<num>``.

  Because some platforms have case-insensitive names for environment variables,
  the names of resource types may not clash in a case-insensitive environment.
  Because of this, for the sake of simplicity, all resource types must be
  listed in all lowercase in the
  :ref:`resource specification file <ctest-resource-specification-file>` and
  in the :prop_test:`RESOURCE_GROUPS` property, and they are converted to all
  uppercase in the ``CTEST_RESOURCE_GROUP_<num>_<resource-type>`` environment
  variable.

.. _`ctest-resource-dynamically-generated-spec-file`:

Dynamically-Generated Resource Specification File
-------------------------------------------------

.. versionadded:: 3.28

A project may optionally specify a single test which will be used to
dynamically generate the resource specification file that CTest will use for
scheduling tests that use resources. The test that generates the file must
have the :prop_test:`GENERATED_RESOURCE_SPEC_FILE` property set, and must have
exactly one fixture in its :prop_test:`FIXTURES_SETUP` property. This fixture
is considered by CTest to have special meaning: it's the fixture that generates
the resource spec file. The fixture may have any name. If such a fixture
exists, all tests that have :prop_test:`RESOURCE_GROUPS` set must have the
fixture in their :prop_test:`FIXTURES_REQUIRED`, and a resource spec file may
not be specified with the ``--resource-spec-file`` argument or the
:variable:`CTEST_RESOURCE_SPEC_FILE` variable.

.. _`ctest-job-server-integration`:

Job Server Integration
======================

.. versionadded:: 3.29

On POSIX systems, when running under the context of a `Job Server`_,
CTest shares its job slots.  This is independent of the :prop_test:`PROCESSORS`
test property, which still counts against CTest's :option:`-j <ctest -j>`
parallel level.  CTest acquires exactly one token from the job server before
running each test, and returns it when the test finishes.

For example, consider the ``Makefile``:

.. literalinclude:: CTEST_EXAMPLE_MAKEFILE_JOB_SERVER.make
  :language: make

When invoked via ``make -j 2 test``, ``ctest`` connects to the job server,
acquires a token for each test, and runs at most 2 tests concurrently.

On Windows systems, job server integration is not yet implemented.

.. _`Job Server`: https://www.gnu.org/software/make/manual/html_node/Job-Slots.html

See Also
========

.. include:: LINKS.txt



/P/🚀 manual/cpack.1.rst
======================================


.. cmake-manual-description: CPack Command-Line Reference

cpack(1)
********

Synopsis
========

.. parsed-literal::

 cpack [<options>]

Description
===========

The :program:`cpack` executable is the CMake packaging program.  It generates
installers and source packages in a variety of formats.

For each installer or package format, :program:`cpack` has a specific backend,
called "generator". A generator is responsible for generating the required
inputs and invoking the specific package creation tools. These installer
or package generators are not to be confused with the makefile generators
of the :manual:`cmake <cmake(1)>` command.

All supported generators are specified in the :manual:`cpack-generators
<cpack-generators(7)>` manual.  The command ``cpack --help`` prints a
list of generators supported for the target platform.  Which of them are
to be used can be selected through the :variable:`CPACK_GENERATOR` variable
or through the command-line option :option:`-G <cpack -G>`.

The :program:`cpack` program is steered by a configuration file written in the
:manual:`CMake language <cmake-language(7)>`. Unless chosen differently
through the command-line option :option:`--config <cpack --config>`, the
file ``CPackConfig.cmake`` in the current directory is used.

In the standard CMake workflow, the file ``CPackConfig.cmake`` is generated
by the :manual:`cmake <cmake(1)>` executable, provided the :module:`CPack`
module is included by the project's ``CMakeLists.txt`` file.

Options
=======

.. program:: cpack

.. option:: -G <generators>

  ``<generators>`` is a :ref:`semicolon-separated list <CMake Language Lists>`
  of generator names.  :program:`cpack` will iterate through this list and produce
  package(s) in that generator's format according to the details provided in
  the ``CPackConfig.cmake`` configuration file.  If this option is not given,
  the :variable:`CPACK_GENERATOR` variable determines the default set of
  generators that will be used.

.. option:: -C <configs>

  Specify the project configuration(s) to be packaged (e.g. ``Debug``,
  ``Release``, etc.), where ``<configs>`` is a
  :ref:`semicolon-separated list <CMake Language Lists>`.
  When the CMake project uses a multi-configuration
  generator such as Xcode or Visual Studio, this option is needed to tell
  :program:`cpack` which built executables to include in the package.
  The user is responsible for ensuring that the configuration(s) listed
  have already been built before invoking :program:`cpack`.

.. option:: -D <var>=<value>

  Set a CPack variable.  This will override any value set for ``<var>`` in the
  input file read by :program:`cpack`.

.. option:: --config <configFile>

  Specify the configuration file read by :program:`cpack` to provide the packaging
  details.  By default, ``CPackConfig.cmake`` in the current directory will
  be used.

.. option:: -V, --verbose

  Run :program:`cpack` with verbose output.  This can be used to show more details
  from the package generation tools and is suitable for project developers.

.. option:: --debug

  Run :program:`cpack` with debug output.  This option is intended mainly for the
  developers of :program:`cpack` itself and is not normally needed by project
  developers.

.. option:: --trace

  Put the underlying cmake scripts in trace mode.

.. option:: --trace-expand

  Put the underlying cmake scripts in expanded trace mode.

.. option:: -P <packageName>

  Override/define the value of the :variable:`CPACK_PACKAGE_NAME` variable used
  for packaging.  Any value set for this variable in the ``CPackConfig.cmake``
  file will then be ignored.

.. option:: -R <packageVersion>

  Override/define the value of the :variable:`CPACK_PACKAGE_VERSION`
  variable used for packaging.  It will override a value set in the
  ``CPackConfig.cmake`` file or one automatically computed from
  :variable:`CPACK_PACKAGE_VERSION_MAJOR`,
  :variable:`CPACK_PACKAGE_VERSION_MINOR` and
  :variable:`CPACK_PACKAGE_VERSION_PATCH`.

.. option:: -B <packageDirectory>

  Override/define :variable:`CPACK_PACKAGE_DIRECTORY`, which controls the
  directory where CPack will perform its packaging work.  The resultant
  package(s) will be created at this location by default and a
  ``_CPack_Packages`` subdirectory will also be created below this directory to
  use as a working area during package creation.

.. option:: --vendor <vendorName>

  Override/define :variable:`CPACK_PACKAGE_VENDOR`.

.. option:: --preset <presetName>

  Use a preset from :manual:`cmake-presets(7)`.

.. option:: --list-presets

  List presets from :manual:`cmake-presets(7)`.

.. include:: OPTIONS_HELP.txt

See Also
========

.. include:: LINKS.txt



/P/🚀 manual/cmake-gui.1.rst
==========================================


.. cmake-manual-description: CMake GUI Command-Line Reference

cmake-gui(1)
************

Synopsis
========

.. parsed-literal::

 cmake-gui [<options>]
 cmake-gui [<options>] -B <path-to-build> [-S <path-to-source>]
 cmake-gui [<options>] <path-to-source | path-to-existing-build>
 cmake-gui [<options>] --browse-manual [<filename>]

Description
===========

The :program:`cmake-gui` executable is the CMake GUI.  Project configuration
settings may be specified interactively.  Brief instructions are
provided at the bottom of the window when the program is running.

CMake is a cross-platform build system generator.  Projects specify
their build process with platform-independent CMake listfiles included
in each directory of a source tree with the name ``CMakeLists.txt``.
Users build a project by using CMake to generate a build system for a
native tool on their platform.

Options
=======

.. program:: cmake-gui

.. option:: -S <path-to-source>

 Path to root directory of the CMake project to build.

.. option:: -B <path-to-build>

 Path to directory which CMake will use as the root of build directory.

 If the directory doesn't already exist CMake will make it.

.. option:: --preset=<preset-name>

 Name of the preset to use from the project's
 :manual:`presets <cmake-presets(7)>` files, if it has them.

.. option:: --browse-manual [<filename>]

 Open the CMake reference manual in a browser and immediately exit. If
 ``<filename>`` is specified, open that file within the reference manual
 instead of ``index.html``.

.. include:: OPTIONS_HELP.txt

See Also
========

.. include:: LINKS.txt



/P/🚀 manual/ccmake.1.rst
=======================================


.. cmake-manual-description: CMake Curses Dialog Command-Line Reference

ccmake(1)
*********

Synopsis
========

.. parsed-literal::

 ccmake [<options>] -B <path-to-build> [-S <path-to-source>]
 ccmake [<options>] <path-to-source | path-to-existing-build>

Description
===========

The :program:`ccmake` executable is the CMake curses interface.  Project
configuration settings may be specified interactively through this
GUI.  Brief instructions are provided at the bottom of the terminal
when the program is running.

CMake is a cross-platform build system generator.  Projects specify
their build process with platform-independent CMake listfiles included
in each directory of a source tree with the name ``CMakeLists.txt``.
Users build a project by using CMake to generate a build system for a
native tool on their platform.

Options
=======

.. program:: ccmake

.. include:: OPTIONS_BUILD.txt

.. include:: OPTIONS_HELP.txt

See Also
========

.. include:: LINKS.txt



/P/🚀 manual/cmake-buildsystem.7.rst
==================================================


.. cmake-manual-description: CMake Buildsystem Reference

cmake-buildsystem(7)
********************

Introduction
============

A CMake-based buildsystem is organized as a set of high-level logical
targets.  Each target corresponds to an executable or library, or
is a custom target containing custom commands.  Dependencies between the
targets are expressed in the buildsystem to determine the build order
and the rules for regeneration in response to change.

Binary Targets
==============

Executables and libraries are defined using the :command:`add_executable`
and :command:`add_library` commands.  The resulting binary files have
appropriate :prop_tgt:`PREFIX`, :prop_tgt:`SUFFIX` and extensions for the
platform targeted. Dependencies between binary targets are expressed using
the :command:`target_link_libraries` command:

.. code-block:: cmake

  add_library(archive archive.cpp zip.cpp lzma.cpp)
  add_executable(zipapp zipapp.cpp)
  target_link_libraries(zipapp archive)

``archive`` is defined as a ``STATIC`` library -- an archive containing objects
compiled from ``archive.cpp``, ``zip.cpp``, and ``lzma.cpp``.  ``zipapp``
is defined as an executable formed by compiling and linking ``zipapp.cpp``.
When linking the ``zipapp`` executable, the ``archive`` static library is
linked in.

.. _`Binary Executables`:

Binary Executables
------------------

The :command:`add_executable` command defines an executable target:

.. code-block:: cmake

  add_executable(mytool mytool.cpp)

Commands such as :command:`add_custom_command`, which generates rules to be
run at build time can transparently use an :prop_tgt:`EXECUTABLE <TYPE>`
target as a ``COMMAND`` executable.  The buildsystem rules will ensure that
the executable is built before attempting to run the command.

Binary Library Types
--------------------

.. _`Normal Libraries`:

Normal Libraries
^^^^^^^^^^^^^^^^

By default, the :command:`add_library` command defines a ``STATIC`` library,
unless a type is specified.  A type may be specified when using the command:

.. code-block:: cmake

  add_library(archive SHARED archive.cpp zip.cpp lzma.cpp)

.. code-block:: cmake

  add_library(archive STATIC archive.cpp zip.cpp lzma.cpp)

The :variable:`BUILD_SHARED_LIBS` variable may be enabled to change the
behavior of :command:`add_library` to build shared libraries by default.

In the context of the buildsystem definition as a whole, it is largely
irrelevant whether particular libraries are ``SHARED`` or ``STATIC`` --
the commands, dependency specifications and other APIs work similarly
regardless of the library type.  The ``MODULE`` library type is
dissimilar in that it is generally not linked to -- it is not used in
the right-hand-side of the :command:`target_link_libraries` command.
It is a type which is loaded as a plugin using runtime techniques.
If the library does not export any unmanaged symbols (e.g. Windows
resource DLL, C++/CLI DLL), it is required that the library not be a
``SHARED`` library because CMake expects ``SHARED`` libraries to export
at least one symbol.

.. code-block:: cmake

  add_library(archive MODULE 7z.cpp)

.. _`Apple Frameworks`:

Apple Frameworks
""""""""""""""""

A ``SHARED`` library may be marked with the :prop_tgt:`FRAMEWORK`
target property to create an macOS or iOS Framework Bundle.
A library with the ``FRAMEWORK`` target property should also set the
:prop_tgt:`FRAMEWORK_VERSION` target property.  This property is typically
set to the value of "A" by macOS conventions.
The ``MACOSX_FRAMEWORK_IDENTIFIER`` sets the ``CFBundleIdentifier`` key
and it uniquely identifies the bundle.

.. code-block:: cmake

  add_library(MyFramework SHARED MyFramework.cpp)
  set_target_properties(MyFramework PROPERTIES
    FRAMEWORK TRUE
    FRAMEWORK_VERSION A # Version "A" is macOS convention
    MACOSX_FRAMEWORK_IDENTIFIER org.cmake.MyFramework
  )

.. _`Object Libraries`:

Object Libraries
^^^^^^^^^^^^^^^^

The ``OBJECT`` library type defines a non-archival collection of object files
resulting from compiling the given source files.  The object files collection
may be used as source inputs to other targets by using the syntax
:genex:`$<TARGET_OBJECTS:name>`.  This is a
:manual:`generator expression <cmake-generator-expressions(7)>` that can be
used to supply the ``OBJECT`` library content to other targets:

.. code-block:: cmake

  add_library(archive OBJECT archive.cpp zip.cpp lzma.cpp)

  add_library(archiveExtras STATIC $<TARGET_OBJECTS:archive> extras.cpp)

  add_executable(test_exe $<TARGET_OBJECTS:archive> test.cpp)

The link (or archiving) step of those other targets will use the object
files collection in addition to those from their own sources.

Alternatively, object libraries may be linked into other targets:

.. code-block:: cmake

  add_library(archive OBJECT archive.cpp zip.cpp lzma.cpp)

  add_library(archiveExtras STATIC extras.cpp)
  target_link_libraries(archiveExtras PUBLIC archive)

  add_executable(test_exe test.cpp)
  target_link_libraries(test_exe archive)

The link (or archiving) step of those other targets will use the object
files from ``OBJECT`` libraries that are *directly* linked.  Additionally,
usage requirements of the ``OBJECT`` libraries will be honored when compiling
sources in those other targets.  Furthermore, those usage requirements
will propagate transitively to dependents of those other targets.

Object libraries may not be used as the ``TARGET`` in a use of the
:command:`add_custom_command(TARGET)` command signature.  However,
the list of objects can be used by :command:`add_custom_command(OUTPUT)`
or :command:`file(GENERATE)` by using ``$<TARGET_OBJECTS:objlib>``.

Build Specification and Usage Requirements
==========================================

The :command:`target_include_directories`, :command:`target_compile_definitions`
and :command:`target_compile_options` commands specify the build specifications
and the usage requirements of binary targets.  The commands populate the
:prop_tgt:`INCLUDE_DIRECTORIES`, :prop_tgt:`COMPILE_DEFINITIONS` and
:prop_tgt:`COMPILE_OPTIONS` target properties respectively, and/or the
:prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`, :prop_tgt:`INTERFACE_COMPILE_DEFINITIONS`
and :prop_tgt:`INTERFACE_COMPILE_OPTIONS` target properties.

Each of the commands has a ``PRIVATE``, ``PUBLIC`` and ``INTERFACE`` mode.  The
``PRIVATE`` mode populates only the non-``INTERFACE_`` variant of the target
property and the ``INTERFACE`` mode populates only the ``INTERFACE_`` variants.
The ``PUBLIC`` mode populates both variants of the respective target property.
Each command may be invoked with multiple uses of each keyword:

.. code-block:: cmake

  target_compile_definitions(archive
    PRIVATE BUILDING_WITH_LZMA
    INTERFACE USING_ARCHIVE_LIB
  )

Note that usage requirements are not designed as a way to make downstreams
use particular :prop_tgt:`COMPILE_OPTIONS` or
:prop_tgt:`COMPILE_DEFINITIONS` etc for convenience only.  The contents of
the properties must be **requirements**, not merely recommendations or
convenience.

See the :ref:`Creating Relocatable Packages` section of the
:manual:`cmake-packages(7)` manual for discussion of additional care
that must be taken when specifying usage requirements while creating
packages for redistribution.

Target Properties
-----------------

The contents of the :prop_tgt:`INCLUDE_DIRECTORIES`,
:prop_tgt:`COMPILE_DEFINITIONS` and :prop_tgt:`COMPILE_OPTIONS` target
properties are used appropriately when compiling the source files of a
binary target.

Entries in the :prop_tgt:`INCLUDE_DIRECTORIES` are added to the compile line
with ``-I`` or ``-isystem`` prefixes and in the order of appearance in the
property value.

Entries in the :prop_tgt:`COMPILE_DEFINITIONS` are prefixed with ``-D`` or
``/D`` and added to the compile line in an unspecified order.  The
:prop_tgt:`DEFINE_SYMBOL` target property is also added as a compile
definition as a special convenience case for ``SHARED`` and ``MODULE``
library targets.

Entries in the :prop_tgt:`COMPILE_OPTIONS` are escaped for the shell and added
in the order of appearance in the property value.  Several compile options have
special separate handling, such as :prop_tgt:`POSITION_INDEPENDENT_CODE`.

The contents of the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`,
:prop_tgt:`INTERFACE_COMPILE_DEFINITIONS` and
:prop_tgt:`INTERFACE_COMPILE_OPTIONS` target properties are
*Usage Requirements* -- they specify content which consumers
must use to correctly compile and link with the target they appear on.
For any binary target, the contents of each ``INTERFACE_`` property on
each target specified in a :command:`target_link_libraries` command is
consumed:

.. code-block:: cmake

  set(srcs archive.cpp zip.cpp)
  if (LZMA_FOUND)
    list(APPEND srcs lzma.cpp)
  endif()
  add_library(archive SHARED ${srcs})
  if (LZMA_FOUND)
    # The archive library sources are compiled with -DBUILDING_WITH_LZMA
    target_compile_definitions(archive PRIVATE BUILDING_WITH_LZMA)
  endif()
  target_compile_definitions(archive INTERFACE USING_ARCHIVE_LIB)

  add_executable(consumer)
  # Link consumer to archive and consume its usage requirements. The consumer
  # executable sources are compiled with -DUSING_ARCHIVE_LIB.
  target_link_libraries(consumer archive)

Because it is common to require that the source directory and corresponding
build directory are added to the :prop_tgt:`INCLUDE_DIRECTORIES`, the
:variable:`CMAKE_INCLUDE_CURRENT_DIR` variable can be enabled to conveniently
add the corresponding directories to the :prop_tgt:`INCLUDE_DIRECTORIES` of
all targets.  The variable :variable:`CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE`
can be enabled to add the corresponding directories to the
:prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of all targets.  This makes use of
targets in multiple different directories convenient through use of the
:command:`target_link_libraries` command.


.. _`Target Usage Requirements`:

Transitive Usage Requirements
-----------------------------

The usage requirements of a target can transitively propagate to the dependents.
The :command:`target_link_libraries` command has ``PRIVATE``,
``INTERFACE`` and ``PUBLIC`` keywords to control the propagation.

.. code-block:: cmake

  add_library(archive archive.cpp)
  target_compile_definitions(archive INTERFACE USING_ARCHIVE_LIB)

  add_library(serialization serialization.cpp)
  target_compile_definitions(serialization INTERFACE USING_SERIALIZATION_LIB)

  add_library(archiveExtras extras.cpp)
  target_link_libraries(archiveExtras PUBLIC archive)
  target_link_libraries(archiveExtras PRIVATE serialization)
  # archiveExtras is compiled with -DUSING_ARCHIVE_LIB
  # and -DUSING_SERIALIZATION_LIB

  add_executable(consumer consumer.cpp)
  # consumer is compiled with -DUSING_ARCHIVE_LIB
  target_link_libraries(consumer archiveExtras)

Because the ``archive`` is a ``PUBLIC`` dependency of ``archiveExtras``, the
usage requirements of it are propagated to ``consumer`` too.

Because
``serialization`` is a ``PRIVATE`` dependency of ``archiveExtras``, the usage
requirements of it are not propagated to ``consumer``.

Generally, a dependency should be specified in a use of
:command:`target_link_libraries` with the ``PRIVATE`` keyword if it is used by
only the implementation of a library, and not in the header files.  If a
dependency is additionally used in the header files of a library (e.g. for
class inheritance), then it should be specified as a ``PUBLIC`` dependency.
A dependency which is not used by the implementation of a library, but only by
its headers should be specified as an ``INTERFACE`` dependency.  The
:command:`target_link_libraries` command may be invoked with multiple uses of
each keyword:

.. code-block:: cmake

  target_link_libraries(archiveExtras
    PUBLIC archive
    PRIVATE serialization
  )

Usage requirements are propagated by reading the ``INTERFACE_`` variants
of target properties from dependencies and appending the values to the
non-``INTERFACE_`` variants of the operand.  For example, the
:prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of dependencies is read and
appended to the :prop_tgt:`INCLUDE_DIRECTORIES` of the operand.  In cases
where order is relevant and maintained, and the order resulting from the
:command:`target_link_libraries` calls does not allow correct compilation,
use of an appropriate command to set the property directly may update the
order.

For example, if the linked libraries for a target must be specified
in the order ``lib1`` ``lib2`` ``lib3`` , but the include directories must
be specified in the order ``lib3`` ``lib1`` ``lib2``:

.. code-block:: cmake

  target_link_libraries(myExe lib1 lib2 lib3)
  target_include_directories(myExe
    PRIVATE $<TARGET_PROPERTY:lib3,INTERFACE_INCLUDE_DIRECTORIES>)

Note that care must be taken when specifying usage requirements for targets
which will be exported for installation using the :command:`install(EXPORT)`
command.  See :ref:`Creating Packages` for more.

.. _`Compatible Interface Properties`:

Compatible Interface Properties
-------------------------------

Some target properties are required to be compatible between a target and
the interface of each dependency.  For example, the
:prop_tgt:`POSITION_INDEPENDENT_CODE` target property may specify a
boolean value of whether a target should be compiled as
position-independent-code, which has platform-specific consequences.
A target may also specify the usage requirement
:prop_tgt:`INTERFACE_POSITION_INDEPENDENT_CODE` to communicate that
consumers must be compiled as position-independent-code.

.. code-block:: cmake

  add_executable(exe1 exe1.cpp)
  set_property(TARGET exe1 PROPERTY POSITION_INDEPENDENT_CODE ON)

  add_library(lib1 SHARED lib1.cpp)
  set_property(TARGET lib1 PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE ON)

  add_executable(exe2 exe2.cpp)
  target_link_libraries(exe2 lib1)

Here, both ``exe1`` and ``exe2`` will be compiled as position-independent-code.
``lib1`` will also be compiled as position-independent-code because that is the
default setting for ``SHARED`` libraries.  If dependencies have conflicting,
non-compatible requirements :manual:`cmake(1)` issues a diagnostic:

.. code-block:: cmake

  add_library(lib1 SHARED lib1.cpp)
  set_property(TARGET lib1 PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE ON)

  add_library(lib2 SHARED lib2.cpp)
  set_property(TARGET lib2 PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE OFF)

  add_executable(exe1 exe1.cpp)
  target_link_libraries(exe1 lib1)
  set_property(TARGET exe1 PROPERTY POSITION_INDEPENDENT_CODE OFF)

  add_executable(exe2 exe2.cpp)
  target_link_libraries(exe2 lib1 lib2)

The ``lib1`` requirement ``INTERFACE_POSITION_INDEPENDENT_CODE`` is not
"compatible" with the :prop_tgt:`POSITION_INDEPENDENT_CODE` property of
the ``exe1`` target.  The library requires that consumers are built as
position-independent-code, while the executable specifies to not built as
position-independent-code, so a diagnostic is issued.

The ``lib1`` and ``lib2`` requirements are not "compatible".  One of them
requires that consumers are built as position-independent-code, while
the other requires that consumers are not built as position-independent-code.
Because ``exe2`` links to both and they are in conflict, a CMake error message
is issued::

  CMake Error: The INTERFACE_POSITION_INDEPENDENT_CODE property of "lib2" does
  not agree with the value of POSITION_INDEPENDENT_CODE already determined
  for "exe2".

To be "compatible", the :prop_tgt:`POSITION_INDEPENDENT_CODE` property,
if set must be either the same, in a boolean sense, as the
:prop_tgt:`INTERFACE_POSITION_INDEPENDENT_CODE` property of all transitively
specified dependencies on which that property is set.

This property of "compatible interface requirement" may be extended to other
properties by specifying the property in the content of the
:prop_tgt:`COMPATIBLE_INTERFACE_BOOL` target property.  Each specified property
must be compatible between the consuming target and the corresponding property
with an ``INTERFACE_`` prefix from each dependency:

.. code-block:: cmake

  add_library(lib1Version2 SHARED lib1_v2.cpp)
  set_property(TARGET lib1Version2 PROPERTY INTERFACE_CUSTOM_PROP ON)
  set_property(TARGET lib1Version2 APPEND PROPERTY
    COMPATIBLE_INTERFACE_BOOL CUSTOM_PROP
  )

  add_library(lib1Version3 SHARED lib1_v3.cpp)
  set_property(TARGET lib1Version3 PROPERTY INTERFACE_CUSTOM_PROP OFF)

  add_executable(exe1 exe1.cpp)
  target_link_libraries(exe1 lib1Version2) # CUSTOM_PROP will be ON

  add_executable(exe2 exe2.cpp)
  target_link_libraries(exe2 lib1Version2 lib1Version3) # Diagnostic

Non-boolean properties may also participate in "compatible interface"
computations.  Properties specified in the
:prop_tgt:`COMPATIBLE_INTERFACE_STRING`
property must be either unspecified or compare to the same string among
all transitively specified dependencies. This can be useful to ensure
that multiple incompatible versions of a library are not linked together
through transitive requirements of a target:

.. code-block:: cmake

  add_library(lib1Version2 SHARED lib1_v2.cpp)
  set_property(TARGET lib1Version2 PROPERTY INTERFACE_LIB_VERSION 2)
  set_property(TARGET lib1Version2 APPEND PROPERTY
    COMPATIBLE_INTERFACE_STRING LIB_VERSION
  )

  add_library(lib1Version3 SHARED lib1_v3.cpp)
  set_property(TARGET lib1Version3 PROPERTY INTERFACE_LIB_VERSION 3)

  add_executable(exe1 exe1.cpp)
  target_link_libraries(exe1 lib1Version2) # LIB_VERSION will be "2"

  add_executable(exe2 exe2.cpp)
  target_link_libraries(exe2 lib1Version2 lib1Version3) # Diagnostic

The :prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MAX` target property specifies
that content will be evaluated numerically and the maximum number among all
specified will be calculated:

.. code-block:: cmake

  add_library(lib1Version2 SHARED lib1_v2.cpp)
  set_property(TARGET lib1Version2 PROPERTY INTERFACE_CONTAINER_SIZE_REQUIRED 200)
  set_property(TARGET lib1Version2 APPEND PROPERTY
    COMPATIBLE_INTERFACE_NUMBER_MAX CONTAINER_SIZE_REQUIRED
  )

  add_library(lib1Version3 SHARED lib1_v3.cpp)
  set_property(TARGET lib1Version3 PROPERTY INTERFACE_CONTAINER_SIZE_REQUIRED 1000)

  add_executable(exe1 exe1.cpp)
  # CONTAINER_SIZE_REQUIRED will be "200"
  target_link_libraries(exe1 lib1Version2)

  add_executable(exe2 exe2.cpp)
  # CONTAINER_SIZE_REQUIRED will be "1000"
  target_link_libraries(exe2 lib1Version2 lib1Version3)

Similarly, the :prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MIN` may be used to
calculate the numeric minimum value for a property from dependencies.

Each calculated "compatible" property value may be read in the consumer at
generate-time using generator expressions.

Note that for each dependee, the set of properties specified in each
compatible interface property must not intersect with the set specified in
any of the other properties.

Property Origin Debugging
-------------------------

Because build specifications can be determined by dependencies, the lack of
locality of code which creates a target and code which is responsible for
setting build specifications may make the code more difficult to reason about.
:manual:`cmake(1)` provides a debugging facility to print the origin of the
contents of properties which may be determined by dependencies.  The properties
which can be debugged are listed in the
:variable:`CMAKE_DEBUG_TARGET_PROPERTIES` variable documentation:

.. code-block:: cmake

  set(CMAKE_DEBUG_TARGET_PROPERTIES
    INCLUDE_DIRECTORIES
    COMPILE_DEFINITIONS
    POSITION_INDEPENDENT_CODE
    CONTAINER_SIZE_REQUIRED
    LIB_VERSION
  )
  add_executable(exe1 exe1.cpp)

In the case of properties listed in :prop_tgt:`COMPATIBLE_INTERFACE_BOOL` or
:prop_tgt:`COMPATIBLE_INTERFACE_STRING`, the debug output shows which target
was responsible for setting the property, and which other dependencies also
defined the property.  In the case of
:prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MAX` and
:prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MIN`, the debug output shows the
value of the property from each dependency, and whether the value determines
the new extreme.

Build Specification with Generator Expressions
----------------------------------------------

Build specifications may use
:manual:`generator expressions <cmake-generator-expressions(7)>` containing
content which may be conditional or known only at generate-time.  For example,
the calculated "compatible" value of a property may be read with the
``TARGET_PROPERTY`` expression:

.. code-block:: cmake

  add_library(lib1Version2 SHARED lib1_v2.cpp)
  set_property(TARGET lib1Version2 PROPERTY
    INTERFACE_CONTAINER_SIZE_REQUIRED 200)
  set_property(TARGET lib1Version2 APPEND PROPERTY
    COMPATIBLE_INTERFACE_NUMBER_MAX CONTAINER_SIZE_REQUIRED
  )

  add_executable(exe1 exe1.cpp)
  target_link_libraries(exe1 lib1Version2)
  target_compile_definitions(exe1 PRIVATE
      CONTAINER_SIZE=$<TARGET_PROPERTY:CONTAINER_SIZE_REQUIRED>
  )

In this case, the ``exe1`` source files will be compiled with
``-DCONTAINER_SIZE=200``.

The unary ``TARGET_PROPERTY`` generator expression and the ``TARGET_POLICY``
generator expression are evaluated with the consuming target context.  This
means that a usage requirement specification may be evaluated differently based
on the consumer:

.. code-block:: cmake

  add_library(lib1 lib1.cpp)
  target_compile_definitions(lib1 INTERFACE
    $<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:LIB1_WITH_EXE>
    $<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:LIB1_WITH_SHARED_LIB>
    $<$<TARGET_POLICY:CMP0041>:CONSUMER_CMP0041_NEW>
  )

  add_executable(exe1 exe1.cpp)
  target_link_libraries(exe1 lib1)

  cmake_policy(SET CMP0041 NEW)

  add_library(shared_lib shared_lib.cpp)
  target_link_libraries(shared_lib lib1)

The ``exe1`` executable will be compiled with ``-DLIB1_WITH_EXE``, while the
``shared_lib`` shared library will be compiled with ``-DLIB1_WITH_SHARED_LIB``
and ``-DCONSUMER_CMP0041_NEW``, because policy :policy:`CMP0041` is
``NEW`` at the point where the ``shared_lib`` target is created.

The ``BUILD_INTERFACE`` expression wraps requirements which are only used when
consumed from a target in the same buildsystem, or when consumed from a target
exported to the build directory using the :command:`export` command.  The
``INSTALL_INTERFACE`` expression wraps requirements which are only used when
consumed from a target which has been installed and exported with the
:command:`install(EXPORT)` command:

.. code-block:: cmake

  add_library(ClimbingStats climbingstats.cpp)
  target_compile_definitions(ClimbingStats INTERFACE
    $<BUILD_INTERFACE:ClimbingStats_FROM_BUILD_LOCATION>
    $<INSTALL_INTERFACE:ClimbingStats_FROM_INSTALLED_LOCATION>
  )
  install(TARGETS ClimbingStats EXPORT libExport ${InstallArgs})
  install(EXPORT libExport NAMESPACE Upstream::
          DESTINATION lib/cmake/ClimbingStats)
  export(EXPORT libExport NAMESPACE Upstream::)

  add_executable(exe1 exe1.cpp)
  target_link_libraries(exe1 ClimbingStats)

In this case, the ``exe1`` executable will be compiled with
``-DClimbingStats_FROM_BUILD_LOCATION``.  The exporting commands generate
:prop_tgt:`IMPORTED` targets with either the ``INSTALL_INTERFACE`` or the
``BUILD_INTERFACE`` omitted, and the ``*_INTERFACE`` marker stripped away.
A separate project consuming the ``ClimbingStats`` package would contain:

.. code-block:: cmake

  find_package(ClimbingStats REQUIRED)

  add_executable(Downstream main.cpp)
  target_link_libraries(Downstream Upstream::ClimbingStats)

Depending on whether the ``ClimbingStats`` package was used from the build
location or the install location, the ``Downstream`` target would be compiled
with either ``-DClimbingStats_FROM_BUILD_LOCATION`` or
``-DClimbingStats_FROM_INSTALL_LOCATION``.  For more about packages and
exporting see the :manual:`cmake-packages(7)` manual.

.. _`Include Directories and Usage Requirements`:

Include Directories and Usage Requirements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Include directories require some special consideration when specified as usage
requirements and when used with generator expressions.  The
:command:`target_include_directories` command accepts both relative and
absolute include directories:

.. code-block:: cmake

  add_library(lib1 lib1.cpp)
  target_include_directories(lib1 PRIVATE
    /absolute/path
    relative/path
  )

Relative paths are interpreted relative to the source directory where the
command appears.  Relative paths are not allowed in the
:prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of :prop_tgt:`IMPORTED` targets.

In cases where a non-trivial generator expression is used, the
``INSTALL_PREFIX`` expression may be used within the argument of an
``INSTALL_INTERFACE`` expression.  It is a replacement marker which
expands to the installation prefix when imported by a consuming project.

Include directories usage requirements commonly differ between the build-tree
and the install-tree.  The ``BUILD_INTERFACE`` and ``INSTALL_INTERFACE``
generator expressions can be used to describe separate usage requirements
based on the usage location.  Relative paths are allowed within the
``INSTALL_INTERFACE`` expression and are interpreted relative to the
installation prefix.  For example:

.. code-block:: cmake

  add_library(ClimbingStats climbingstats.cpp)
  target_include_directories(ClimbingStats INTERFACE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/generated>
    $<INSTALL_INTERFACE:/absolute/path>
    $<INSTALL_INTERFACE:relative/path>
    $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/$<CONFIG>/generated>
  )

Two convenience APIs are provided relating to include directories usage
requirements.  The :variable:`CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE` variable
may be enabled, with an equivalent effect to:

.. code-block:: cmake

  set_property(TARGET tgt APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR};${CMAKE_CURRENT_BINARY_DIR}>
  )

for each target affected.  The convenience for installed targets is
an ``INCLUDES DESTINATION`` component with the :command:`install(TARGETS)`
command:

.. code-block:: cmake

  install(TARGETS foo bar bat EXPORT tgts ${dest_args}
    INCLUDES DESTINATION include
  )
  install(EXPORT tgts ${other_args})
  install(FILES ${headers} DESTINATION include)

This is equivalent to appending ``${CMAKE_INSTALL_PREFIX}/include`` to the
:prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of each of the installed
:prop_tgt:`IMPORTED` targets when generated by :command:`install(EXPORT)`.

When the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of an
:ref:`imported target <Imported targets>` is consumed, the entries in the
property may be treated as system include directories.  The effects of that
are toolchain-dependent, but one common effect is to omit compiler warnings
for headers found in those directories.  The :prop_tgt:`SYSTEM` property of
the installed target determines this behavior (see the
:prop_tgt:`EXPORT_NO_SYSTEM` property for how to modify the installed value
for a target).  It is also possible to change how consumers interpret the
system behavior of consumed imported targets by setting the
:prop_tgt:`NO_SYSTEM_FROM_IMPORTED` target property on the *consumer*.

If a binary target is linked transitively to a macOS :prop_tgt:`FRAMEWORK`, the
``Headers`` directory of the framework is also treated as a usage requirement.
This has the same effect as passing the framework directory as an include
directory.

Link Libraries and Generator Expressions
----------------------------------------

Like build specifications, :prop_tgt:`link libraries <LINK_LIBRARIES>` may be
specified with generator expression conditions.  However, as consumption of
usage requirements is based on collection from linked dependencies, there is
an additional limitation that the link dependencies must form a "directed
acyclic graph".  That is, if linking to a target is dependent on the value of
a target property, that target property may not be dependent on the linked
dependencies:

.. code-block:: cmake

  add_library(lib1 lib1.cpp)
  add_library(lib2 lib2.cpp)
  target_link_libraries(lib1 PUBLIC
    $<$<TARGET_PROPERTY:POSITION_INDEPENDENT_CODE>:lib2>
  )
  add_library(lib3 lib3.cpp)
  set_property(TARGET lib3 PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE ON)

  add_executable(exe1 exe1.cpp)
  target_link_libraries(exe1 lib1 lib3)

As the value of the :prop_tgt:`POSITION_INDEPENDENT_CODE` property of
the ``exe1`` target is dependent on the linked libraries (``lib3``), and the
edge of linking ``exe1`` is determined by the same
:prop_tgt:`POSITION_INDEPENDENT_CODE` property, the dependency graph above
contains a cycle.  :manual:`cmake(1)` issues an error message.

.. _`Output Artifacts`:

Output Artifacts
----------------

The buildsystem targets created by the :command:`add_library` and
:command:`add_executable` commands create rules to create binary outputs.
The exact output location of the binaries can only be determined at
generate-time because it can depend on the build-configuration and the
link-language of linked dependencies etc.  ``TARGET_FILE``,
``TARGET_LINKER_FILE`` and related expressions can be used to access the
name and location of generated binaries.  These expressions do not work
for ``OBJECT`` libraries however, as there is no single file generated
by such libraries which is relevant to the expressions.

There are three kinds of output artifacts that may be build by targets
as detailed in the following sections.  Their classification differs
between DLL platforms and non-DLL platforms.  All Windows-based
systems including Cygwin are DLL platforms.

.. _`Runtime Output Artifacts`:

Runtime Output Artifacts
^^^^^^^^^^^^^^^^^^^^^^^^

A *runtime* output artifact of a buildsystem target may be:

* The executable file (e.g. ``.exe``) of an executable target
  created by the :command:`add_executable` command.

* On DLL platforms: the executable file (e.g. ``.dll``) of a shared
  library target created by the :command:`add_library` command
  with the ``SHARED`` option.

The :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` and :prop_tgt:`RUNTIME_OUTPUT_NAME`
target properties may be used to control runtime output artifact locations
and names in the build tree.

.. _`Library Output Artifacts`:

Library Output Artifacts
^^^^^^^^^^^^^^^^^^^^^^^^

A *library* output artifact of a buildsystem target may be:

* The loadable module file (e.g. ``.dll`` or ``.so``) of a module
  library target created by the :command:`add_library` command
  with the ``MODULE`` option.

* On non-DLL platforms: the shared library file (e.g. ``.so`` or ``.dylib``)
  of a shared library target created by the :command:`add_library`
  command with the ``SHARED`` option.

The :prop_tgt:`LIBRARY_OUTPUT_DIRECTORY` and :prop_tgt:`LIBRARY_OUTPUT_NAME`
target properties may be used to control library output artifact locations
and names in the build tree.

.. _`Archive Output Artifacts`:

Archive Output Artifacts
^^^^^^^^^^^^^^^^^^^^^^^^

An *archive* output artifact of a buildsystem target may be:

* The static library file (e.g. ``.lib`` or ``.a``) of a static
  library target created by the :command:`add_library` command
  with the ``STATIC`` option.

* On DLL platforms: the import library file (e.g. ``.lib``) of a shared
  library target created by the :command:`add_library` command
  with the ``SHARED`` option.  This file is only guaranteed to exist if
  the library exports at least one unmanaged symbol.

* On DLL platforms: the import library file (e.g. ``.lib``) of an
  executable target created by the :command:`add_executable` command
  when its :prop_tgt:`ENABLE_EXPORTS` target property is set.

* On AIX: the linker import file (e.g. ``.imp``) of an executable target
  created by the :command:`add_executable` command when its
  :prop_tgt:`ENABLE_EXPORTS` target property is set.

* On macOS: the linker import file (e.g. ``.tbd``) of a shared library target
  created by the :command:`add_library` command with the ``SHARED`` option and
  when its :prop_tgt:`ENABLE_EXPORTS` target property is set.

The :prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY` and :prop_tgt:`ARCHIVE_OUTPUT_NAME`
target properties may be used to control archive output artifact locations
and names in the build tree.

Directory-Scoped Commands
-------------------------

The :command:`target_include_directories`,
:command:`target_compile_definitions` and
:command:`target_compile_options` commands have an effect on only one
target at a time.  The commands :command:`add_compile_definitions`,
:command:`add_compile_options` and :command:`include_directories` have
a similar function, but operate at directory scope instead of target
scope for convenience.

.. _`Build Configurations`:

Build Configurations
====================

Configurations determine specifications for a certain type of build, such
as ``Release`` or ``Debug``.  The way this is specified depends on the type
of :manual:`generator <cmake-generators(7)>` being used.  For single
configuration generators like  :ref:`Makefile Generators` and
:generator:`Ninja`, the configuration is specified at configure time by the
:variable:`CMAKE_BUILD_TYPE` variable. For multi-configuration generators
like :ref:`Visual Studio <Visual Studio Generators>`, :generator:`Xcode`, and
:generator:`Ninja Multi-Config`, the configuration is chosen by the user at
build time and :variable:`CMAKE_BUILD_TYPE` is ignored.  In the
multi-configuration case, the set of *available* configurations is specified
at configure time by the :variable:`CMAKE_CONFIGURATION_TYPES` variable,
but the actual configuration used cannot be known until the build stage.
This difference is often misunderstood, leading to problematic code like the
following:

.. code-block:: cmake

  # WARNING: This is wrong for multi-config generators because they don't use
  #          and typically don't even set CMAKE_BUILD_TYPE
  string(TOLOWER ${CMAKE_BUILD_TYPE} build_type)
  if (build_type STREQUAL debug)
    target_compile_definitions(exe1 PRIVATE DEBUG_BUILD)
  endif()

:manual:`Generator expressions <cmake-generator-expressions(7)>` should be
used instead to handle configuration-specific logic correctly, regardless of
the generator used.  For example:

.. code-block:: cmake

  # Works correctly for both single and multi-config generators
  target_compile_definitions(exe1 PRIVATE
    $<$<CONFIG:Debug>:DEBUG_BUILD>
  )

In the presence of :prop_tgt:`IMPORTED` targets, the content of
:prop_tgt:`MAP_IMPORTED_CONFIG_DEBUG <MAP_IMPORTED_CONFIG_<CONFIG>>` is also
accounted for by the above :genex:`$<CONFIG:Debug>` expression.


Case Sensitivity
----------------

:variable:`CMAKE_BUILD_TYPE` and :variable:`CMAKE_CONFIGURATION_TYPES` are
just like other variables in that any string comparisons made with their
values will be case-sensitive.  The :genex:`$<CONFIG>` generator expression also
preserves the casing of the configuration as set by the user or CMake defaults.
For example:

.. code-block:: cmake

  # NOTE: Don't use these patterns, they are for illustration purposes only.

  set(CMAKE_BUILD_TYPE Debug)
  if(CMAKE_BUILD_TYPE STREQUAL DEBUG)
    # ... will never get here, "Debug" != "DEBUG"
  endif()
  add_custom_target(print_config ALL
    # Prints "Config is Debug" in this single-config case
    COMMAND ${CMAKE_COMMAND} -E echo "Config is $<CONFIG>"
    VERBATIM
  )

  set(CMAKE_CONFIGURATION_TYPES Debug Release)
  if(DEBUG IN_LIST CMAKE_CONFIGURATION_TYPES)
    # ... will never get here, "Debug" != "DEBUG"
  endif()

In contrast, CMake treats the configuration type case-insensitively when
using it internally in places that modify behavior based on the configuration.
For example, the :genex:`$<CONFIG:Debug>` generator expression will evaluate to 1
for a configuration of not only ``Debug``, but also ``DEBUG``, ``debug`` or
even ``DeBuG``.  Therefore, you can specify configuration types in
:variable:`CMAKE_BUILD_TYPE` and :variable:`CMAKE_CONFIGURATION_TYPES` with
any mixture of upper and lowercase, although there are strong conventions
(see the next section).  If you must test the value in string comparisons,
always convert the value to upper or lowercase first and adjust the test
accordingly.

Default And Custom Configurations
---------------------------------

By default, CMake defines a number of standard configurations:

* ``Debug``
* ``Release``
* ``RelWithDebInfo``
* ``MinSizeRel``

In multi-config generators, the :variable:`CMAKE_CONFIGURATION_TYPES` variable
will be populated with (potentially a subset of) the above list by default,
unless overridden by the project or user.  The actual configuration used is
selected by the user at build time.

For single-config generators, the configuration is specified with the
:variable:`CMAKE_BUILD_TYPE` variable at configure time and cannot be changed
at build time.  The default value will often be none of the above standard
configurations and will instead be an empty string.  A common misunderstanding
is that this is the same as ``Debug``, but that is not the case.  Users should
always explicitly specify the build type instead to avoid this common problem.

The above standard configuration types provide reasonable behavior on most
platforms, but they can be extended to provide other types.  Each configuration
defines a set of compiler and linker flag variables for the language in use.
These variables follow the convention :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>`,
where ``<CONFIG>`` is always the uppercase configuration name.  When defining
a custom configuration type, make sure these variables are set appropriately,
typically as cache variables.


Pseudo Targets
==============

Some target types do not represent outputs of the buildsystem, but only inputs
such as external dependencies, aliases or other non-build artifacts.  Pseudo
targets are not represented in the generated buildsystem.

.. _`Imported Targets`:

Imported Targets
----------------

An :prop_tgt:`IMPORTED` target represents a pre-existing dependency.  Usually
such targets are defined by an upstream package and should be treated as
immutable. After declaring an :prop_tgt:`IMPORTED` target one can adjust its
target properties by using the customary commands such as
:command:`target_compile_definitions`, :command:`target_include_directories`,
:command:`target_compile_options` or :command:`target_link_libraries` just like
with any other regular target.

:prop_tgt:`IMPORTED` targets may have the same usage requirement properties
populated as binary targets, such as
:prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`,
:prop_tgt:`INTERFACE_COMPILE_DEFINITIONS`,
:prop_tgt:`INTERFACE_COMPILE_OPTIONS`,
:prop_tgt:`INTERFACE_LINK_LIBRARIES`, and
:prop_tgt:`INTERFACE_POSITION_INDEPENDENT_CODE`.

The :prop_tgt:`LOCATION` may also be read from an IMPORTED target, though there
is rarely reason to do so.  Commands such as :command:`add_custom_command` can
transparently use an :prop_tgt:`IMPORTED` :prop_tgt:`EXECUTABLE <TYPE>` target
as a ``COMMAND`` executable.

The scope of the definition of an :prop_tgt:`IMPORTED` target is the directory
where it was defined.  It may be accessed and used from subdirectories, but
not from parent directories or sibling directories.  The scope is similar to
the scope of a cmake variable.

It is also possible to define a ``GLOBAL`` :prop_tgt:`IMPORTED` target which is
accessible globally in the buildsystem.

See the :manual:`cmake-packages(7)` manual for more on creating packages
with :prop_tgt:`IMPORTED` targets.

.. _`Alias Targets`:

Alias Targets
-------------

An ``ALIAS`` target is a name which may be used interchangeably with
a binary target name in read-only contexts.  A primary use-case for ``ALIAS``
targets is for example or unit test executables accompanying a library, which
may be part of the same buildsystem or built separately based on user
configuration.

.. code-block:: cmake

  add_library(lib1 lib1.cpp)
  install(TARGETS lib1 EXPORT lib1Export ${dest_args})
  install(EXPORT lib1Export NAMESPACE Upstream:: ${other_args})

  add_library(Upstream::lib1 ALIAS lib1)

In another directory, we can link unconditionally to the ``Upstream::lib1``
target, which may be an :prop_tgt:`IMPORTED` target from a package, or an
``ALIAS`` target if built as part of the same buildsystem.

.. code-block:: cmake

  if (NOT TARGET Upstream::lib1)
    find_package(lib1 REQUIRED)
  endif()
  add_executable(exe1 exe1.cpp)
  target_link_libraries(exe1 Upstream::lib1)

``ALIAS`` targets are not mutable, installable or exportable.  They are
entirely local to the buildsystem description.  A name can be tested for
whether it is an ``ALIAS`` name by reading the :prop_tgt:`ALIASED_TARGET`
property from it:

.. code-block:: cmake

  get_target_property(_aliased Upstream::lib1 ALIASED_TARGET)
  if(_aliased)
    message(STATUS "The name Upstream::lib1 is an ALIAS for ${_aliased}.")
  endif()

.. _`Interface Libraries`:

Interface Libraries
-------------------

An ``INTERFACE`` library target does not compile sources and does not
produce a library artifact on disk, so it has no :prop_tgt:`LOCATION`.

It may specify usage requirements such as
:prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`,
:prop_tgt:`INTERFACE_COMPILE_DEFINITIONS`,
:prop_tgt:`INTERFACE_COMPILE_OPTIONS`,
:prop_tgt:`INTERFACE_LINK_LIBRARIES`,
:prop_tgt:`INTERFACE_SOURCES`,
and :prop_tgt:`INTERFACE_POSITION_INDEPENDENT_CODE`.
Only the ``INTERFACE`` modes of the :command:`target_include_directories`,
:command:`target_compile_definitions`, :command:`target_compile_options`,
:command:`target_sources`, and :command:`target_link_libraries` commands
may be used with ``INTERFACE`` libraries.

Since CMake 3.19, an ``INTERFACE`` library target may optionally contain
source files.  An interface library that contains source files will be
included as a build target in the generated buildsystem.  It does not
compile sources, but may contain custom commands to generate other sources.
Additionally, IDEs will show the source files as part of the target for
interactive reading and editing.

A primary use-case for ``INTERFACE`` libraries is header-only libraries.
Since CMake 3.23, header files may be associated with a library by adding
them to a header set using the :command:`target_sources` command:

.. code-block:: cmake

  add_library(Eigen INTERFACE)

  target_sources(Eigen PUBLIC
    FILE_SET HEADERS
      BASE_DIRS src
      FILES src/eigen.h src/vector.h src/matrix.h
  )

  add_executable(exe1 exe1.cpp)
  target_link_libraries(exe1 Eigen)

When we specify the ``FILE_SET`` here, the ``BASE_DIRS`` we define automatically
become include directories in the usage requirements for the target ``Eigen``.
The usage requirements from the target are consumed and used when compiling, but
have no effect on linking.

Another use-case is to employ an entirely target-focussed design for usage
requirements:

.. code-block:: cmake

  add_library(pic_on INTERFACE)
  set_property(TARGET pic_on PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE ON)
  add_library(pic_off INTERFACE)
  set_property(TARGET pic_off PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE OFF)

  add_library(enable_rtti INTERFACE)
  target_compile_options(enable_rtti INTERFACE
    $<$<OR:$<COMPILER_ID:GNU>,$<COMPILER_ID:Clang>>:-rtti>
  )

  add_executable(exe1 exe1.cpp)
  target_link_libraries(exe1 pic_on enable_rtti)

This way, the build specification of ``exe1`` is expressed entirely as linked
targets, and the complexity of compiler-specific flags is encapsulated in an
``INTERFACE`` library target.

``INTERFACE`` libraries may be installed and exported. We can install the
default header set along with the target:

.. code-block:: cmake

  add_library(Eigen INTERFACE)

  target_sources(Eigen INTERFACE
    FILE_SET HEADERS
      BASE_DIRS src
      FILES src/eigen.h src/vector.h src/matrix.h
  )

  install(TARGETS Eigen EXPORT eigenExport
    FILE_SET HEADERS DESTINATION include/Eigen)
  install(EXPORT eigenExport NAMESPACE Upstream::
    DESTINATION lib/cmake/Eigen
  )

Here, the headers defined in the header set are installed to ``include/Eigen``.
The install destination automatically becomes an include directory that is a
usage requirement for consumers.



/P/🚀 manual/cmake-compile-features.7.rst
=======================================================


.. cmake-manual-description: CMake Compile Features Reference

cmake-compile-features(7)
*************************

Introduction
============

Project source code may depend on, or be conditional on, the availability
of certain features of the compiler.  There are three use-cases which arise:
`Compile Feature Requirements`_, `Optional Compile Features`_
and `Conditional Compilation Options`_.

While features are typically specified in programming language standards,
CMake provides a primary user interface based on granular handling of
the features, not the language standard that introduced the feature.

The :prop_gbl:`CMAKE_C_KNOWN_FEATURES`, :prop_gbl:`CMAKE_CUDA_KNOWN_FEATURES`,
and :prop_gbl:`CMAKE_CXX_KNOWN_FEATURES` global properties contain all the
features known to CMake, regardless of compiler support for the feature.
The :variable:`CMAKE_C_COMPILE_FEATURES`, :variable:`CMAKE_CUDA_COMPILE_FEATURES`
, and :variable:`CMAKE_CXX_COMPILE_FEATURES` variables contain all features
CMake knows are known to the compiler, regardless of language standard
or compile flags needed to use them.

Features known to CMake are named mostly following the same convention
as the Clang feature test macros.  There are some exceptions, such as
CMake using ``cxx_final`` and ``cxx_override`` instead of the single
``cxx_override_control`` used by Clang.

Note that there are no separate compile features properties or variables for
the ``OBJC`` or ``OBJCXX`` languages.  These are based off ``C`` or ``C++``
respectively, so the properties and variables for their corresponding base
language should be used instead.

Compile Feature Requirements
============================

Compile feature requirements may be specified with the
:command:`target_compile_features` command.  For example, if a target must
be compiled with compiler support for the
:prop_gbl:`cxx_constexpr <CMAKE_CXX_KNOWN_FEATURES>` feature:

.. code-block:: cmake

  add_library(mylib requires_constexpr.cpp)
  target_compile_features(mylib PRIVATE cxx_constexpr)

In processing the requirement for the ``cxx_constexpr`` feature,
:manual:`cmake(1)` will ensure that the in-use C++ compiler is capable
of the feature, and will add any necessary flags such as ``-std=gnu++11``
to the compile lines of C++ files in the ``mylib`` target.  A
``FATAL_ERROR`` is issued if the compiler is not capable of the
feature.

The exact compile flags and language standard are deliberately not part
of the user interface for this use-case.  CMake will compute the
appropriate compile flags to use by considering the features specified
for each target.

Such compile flags are added even if the compiler supports the
particular feature without the flag. For example, the GNU compiler
supports variadic templates (with a warning) even if ``-std=gnu++98`` is
used.  CMake adds the ``-std=gnu++11`` flag if ``cxx_variadic_templates``
is specified as a requirement.

In the above example, ``mylib`` requires ``cxx_constexpr`` when it
is built itself, but consumers of ``mylib`` are not required to use a
compiler which supports ``cxx_constexpr``.  If the interface of
``mylib`` does require the ``cxx_constexpr`` feature (or any other
known feature), that may be specified with the ``PUBLIC`` or
``INTERFACE`` signatures of :command:`target_compile_features`:

.. code-block:: cmake

  add_library(mylib requires_constexpr.cpp)
  # cxx_constexpr is a usage-requirement
  target_compile_features(mylib PUBLIC cxx_constexpr)

  # main.cpp will be compiled with -std=gnu++11 on GNU for cxx_constexpr.
  add_executable(myexe main.cpp)
  target_link_libraries(myexe mylib)

Feature requirements are evaluated transitively by consuming the link
implementation.  See :manual:`cmake-buildsystem(7)` for more on
transitive behavior of build properties and usage requirements.

.. _`Requiring Language Standards`:

Requiring Language Standards
----------------------------

In projects that use a large number of commonly available features from
a particular language standard (e.g. C++ 11) one may specify a
meta-feature (e.g. ``cxx_std_11``) that requires use of a compiler mode
that is at minimum aware of that standard, but could be greater.
This is simpler than specifying all the features individually, but does
not guarantee the existence of any particular feature.
Diagnosis of use of unsupported features will be delayed until compile time.

For example, if C++ 11 features are used extensively in a project's
header files, then clients must use a compiler mode that is no less
than C++ 11.  This can be requested with the code:

.. code-block:: cmake

  target_compile_features(mylib PUBLIC cxx_std_11)

In this example, CMake will ensure the compiler is invoked in a mode
of at-least C++ 11 (or C++ 14, C++ 17, ...), adding flags such as
``-std=gnu++11`` if necessary.  This applies to sources within ``mylib``
as well as any dependents (that may include headers from ``mylib``).

.. include:: ../prop_gbl/CMAKE_LANG_STD_FLAGS.txt

Availability of Compiler Extensions
-----------------------------------

The :prop_tgt:`<LANG>_EXTENSIONS` target property defaults to the compiler's
default (see :variable:`CMAKE_<LANG>_EXTENSIONS_DEFAULT`). Note that because
most compilers enable extensions by default, this may expose portability bugs
in user code or in the headers of third-party dependencies.

:prop_tgt:`<LANG>_EXTENSIONS` used to default to ``ON``. See :policy:`CMP0128`.

Optional Compile Features
=========================

Compile features may be preferred if available, without creating a hard
requirement.   This can be achieved by *not* specifying features with
:command:`target_compile_features` and instead checking the compiler
capabilities with preprocessor conditions in project code.

In this use-case, the project may wish to establish a particular language
standard if available from the compiler, and use preprocessor conditions
to detect the features actually available.  A language standard may be
established by `Requiring Language Standards`_ using
:command:`target_compile_features` with meta-features like ``cxx_std_11``,
or by setting the :prop_tgt:`CXX_STANDARD` target property or
:variable:`CMAKE_CXX_STANDARD` variable.

See also policy :policy:`CMP0120` and legacy documentation on
:ref:`Example Usage <WCDH Example Usage>` of the deprecated
:module:`WriteCompilerDetectionHeader` module.

Conditional Compilation Options
===============================

Libraries may provide entirely different header files depending on
requested compiler features.

For example, a header at ``with_variadics/interface.h`` may contain:

.. code-block:: c++

  template<int I, int... Is>
  struct Interface;

  template<int I>
  struct Interface<I>
  {
    static int accumulate()
    {
      return I;
    }
  };

  template<int I, int... Is>
  struct Interface
  {
    static int accumulate()
    {
      return I + Interface<Is...>::accumulate();
    }
  };

while a header at ``no_variadics/interface.h`` may contain:

.. code-block:: c++

  template<int I1, int I2 = 0, int I3 = 0, int I4 = 0>
  struct Interface
  {
    static int accumulate() { return I1 + I2 + I3 + I4; }
  };

It may be possible to write an abstraction ``interface.h`` header
containing something like:

.. code-block:: c++

  #ifdef HAVE_CXX_VARIADIC_TEMPLATES
  #include "with_variadics/interface.h"
  #else
  #include "no_variadics/interface.h"
  #endif

However this could be unmaintainable if there are many files to
abstract. What is needed is to use alternative include directories
depending on the compiler capabilities.

CMake provides a ``COMPILE_FEATURES``
:manual:`generator expression <cmake-generator-expressions(7)>` to implement
such conditions.  This may be used with the build-property commands such as
:command:`target_include_directories` and :command:`target_link_libraries`
to set the appropriate :manual:`buildsystem <cmake-buildsystem(7)>`
properties:

.. code-block:: cmake

  add_library(foo INTERFACE)
  set(with_variadics ${CMAKE_CURRENT_SOURCE_DIR}/with_variadics)
  set(no_variadics ${CMAKE_CURRENT_SOURCE_DIR}/no_variadics)
  target_include_directories(foo
    INTERFACE
      "$<$<COMPILE_FEATURES:cxx_variadic_templates>:${with_variadics}>"
      "$<$<NOT:$<COMPILE_FEATURES:cxx_variadic_templates>>:${no_variadics}>"
    )

Consuming code then simply links to the ``foo`` target as usual and uses
the feature-appropriate include directory

.. code-block:: cmake

  add_executable(consumer_with consumer_with.cpp)
  target_link_libraries(consumer_with foo)
  set_property(TARGET consumer_with CXX_STANDARD 11)

  add_executable(consumer_no consumer_no.cpp)
  target_link_libraries(consumer_no foo)

Supported Compilers
===================

CMake is currently aware of the :prop_tgt:`C++ standards <CXX_STANDARD>`
and :prop_gbl:`compile features <CMAKE_CXX_KNOWN_FEATURES>` available from
the following :variable:`compiler ids <CMAKE_<LANG>_COMPILER_ID>` as of the
versions specified for each:

* ``AppleClang``: Apple Clang for Xcode versions 4.4+.
* ``Clang``: Clang compiler versions 2.9+.
* ``GNU``: GNU compiler versions 4.4+.
* ``MSVC``: Microsoft Visual Studio versions 2010+.
* ``SunPro``: Oracle SolarisStudio versions 12.4+.
* ``Intel``: Intel compiler versions 12.1+.

CMake is currently aware of the :prop_tgt:`C standards <C_STANDARD>`
and :prop_gbl:`compile features <CMAKE_C_KNOWN_FEATURES>` available from
the following :variable:`compiler ids <CMAKE_<LANG>_COMPILER_ID>` as of the
versions specified for each:

* all compilers and versions listed above for C++.
* ``GNU``: GNU compiler versions 3.4+

CMake is currently aware of the :prop_tgt:`C++ standards <CXX_STANDARD>` and
their associated meta-features (e.g. ``cxx_std_11``) available from the
following :variable:`compiler ids <CMAKE_<LANG>_COMPILER_ID>` as of the
versions specified for each:

* ``Cray``: Cray Compiler Environment version 8.1+.
* ``Fujitsu``: Fujitsu HPC compiler 4.0+.
* ``PGI``: PGI version 12.10+.
* ``NVHPC``: NVIDIA HPC compilers version 11.0+.
* ``TI``: Texas Instruments compiler.
* ``TIClang``: Texas Instruments Clang-based compilers.
* ``XL``: IBM XL version 10.1+.

CMake is currently aware of the :prop_tgt:`C standards <C_STANDARD>` and
their associated meta-features (e.g. ``c_std_99``) available from the
following :variable:`compiler ids <CMAKE_<LANG>_COMPILER_ID>` as of the
versions specified for each:

* all compilers and versions listed above with only meta-features for C++.

CMake is currently aware of the :prop_tgt:`CUDA standards <CUDA_STANDARD>` and
their associated meta-features (e.g. ``cuda_std_11``) available from the
following :variable:`compiler ids <CMAKE_<LANG>_COMPILER_ID>` as of the
versions specified for each:

* ``Clang``: Clang compiler 5.0+.
* ``NVIDIA``: NVIDIA nvcc compiler 7.5+.

.. _`Language Standard Flags`:

Language Standard Flags
=======================

In order to satisfy requirements specified by the
:command:`target_compile_features` command or the
:variable:`CMAKE_<LANG>_STANDARD` variable, CMake may pass a
language standard flag to the compiler, such as ``-std=c++11``.

For :ref:`Visual Studio Generators`, CMake cannot precisely control
the placement of the language standard flag on the compiler command line.
For :ref:`Ninja Generators`, :ref:`Makefile Generators`, and
:generator:`Xcode`, CMake places the language standard flag just after
the language-wide flags from :variable:`CMAKE_<LANG>_FLAGS`
and :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>`.

.. versionchanged:: 3.26
  The language standard flag is placed before flags specified by other
  abstractions such as the :command:`target_compile_options` command.
  Prior to CMake 3.26, the language standard flag was placed after them.



/P/🚀 manual/cmake-configure-log.7.rst
====================================================


.. cmake-manual-description: CMake Configure Log

cmake-configure-log(7)
**********************

.. versionadded:: 3.26

Introduction
============

CMake writes a running log, known as the *configure log*,
of certain events that occur during the Configure step.
The configure log does *not* contain a log of all output, errors,
or messages printed while configuring a project.  It is a log of
detailed information about specific events, such as toolchain inspection
by :command:`try_compile`, meant for use in debugging the configuration
of a build tree.

For human use, this version of CMake writes the configure log to the file::

  ${CMAKE_BINARY_DIR}/CMakeFiles/CMakeConfigureLog.yaml

However, the *location and name of the log file may change* in future
versions of CMake.  Tools that read the configure log should get its
location using a :ref:`configureLog <file-api configureLog>` query to
the :manual:`cmake-file-api(7)`.
See the `Log Versioning`_ section below for details.

Log Structure
=============

The configure log is designed to be both machine- and human-readable.

The log file is a YAML document stream containing zero or more YAML
documents separated by document markers.  Each document begins
with a ``---`` document marker line, contains a single YAML mapping
that logs events from one CMake "configure" step, and, if the configure
step finished normally, ends with a ``...`` document marker line:

.. code-block:: yaml

  ---
  events:
    -
      kind: "try_compile-v1"
      # (other fields omitted)
    -
      kind: "try_compile-v1"
      # (other fields omitted)
  ...

A new document is appended to the log every time CMake configures
the build tree and logs new events.

The keys of each document root mapping are:

``events``
  A YAML block sequence of nodes corresponding to events logged during
  one CMake "configure" step.  Each event is a YAML node containing one
  of the `Event Kinds`_ documented below.

Log Versioning
--------------

Each of the `Event Kinds`_ is versioned independently.  The set of
keys an event's log entry provides is specific to its major version.
When an event is logged, the latest version of its event kind that is
known to the running version of CMake is always written to the log.

Tools reading the configure log must ignore event kinds and versions
they do not understand:

* A future version of CMake may introduce a new event kind or version.

* If an existing build tree is re-configured with a different version of
  CMake, the log may contain different versions of the same event kind.

* If :manual:`cmake-file-api(7)` queries request one or more
  :ref:`configureLog <file-api configureLog>` object versions,
  the log may contain multiple entries for the same event, each
  with a different version of its event kind.

IDEs should write a :manual:`cmake-file-api(7)` query requesting a
specific :ref:`configureLog <file-api configureLog>` object version,
before running CMake, and then read the configure log only as described
by the file-api reply.

Text Block Encoding
-------------------

In order to make the log human-readable, text blocks are always
represented using YAML literal block scalars (``|``).
Since literal block scalars do not support escaping, backslashes
and non-printable characters are encoded at the application layer:

* ``\\`` encodes a backslash.
* ``\xXX`` encodes a byte using two hexadecimal digits, ``XX``.

.. _`configure-log event kinds`:

Event Kinds
===========

Every event kind is represented by a YAML mapping of the form:

.. code-block:: yaml

  kind: "<kind>-v<major>"
  backtrace:
    - "<file>:<line> (<function>)"
  checks:
    - "Checking for something"
  #...event-specific keys...

The keys common to all events are:

``kind``
  A string identifying the event kind and major version.

``backtrace``
  A YAML block sequence reporting the call stack of CMake source
  locations at which the event occurred, from most-recent to
  least-recent.  Each node is a string specifying one location
  formatted as ``<file>:<line> (<function>)``.

``checks``
  An optional key that is present when the event occurred with
  at least one pending :command:`message(CHECK_START)`.  Its value
  is a YAML block sequence reporting the stack of pending checks,
  from most-recent to least-recent.  Each node is a string containing
  a pending check message.

Additional mapping keys are specific to each (versioned) event kind,
described below.

.. _`message configure-log event`:

Event Kind ``message``
----------------------

The :command:`message(CONFIGURE_LOG)` command logs ``message`` events.

There is only one ``message`` event major version, version 1.

.. _`message-v1 event`:

``message-v1`` Event
^^^^^^^^^^^^^^^^^^^^

A ``message-v1`` event is a YAML mapping:

.. code-block:: yaml

  kind: "message-v1"
  backtrace:
    - "CMakeLists.txt:123 (message)"
  checks:
    - "Checking for something"
  message: |
    # ...

The keys specific to ``message-v1`` mappings are:

``message``
  A YAML literal block scalar containing the message text,
  represented using our `Text Block Encoding`_.

.. _`try_compile configure-log event`:

Event Kind ``try_compile``
--------------------------

The :command:`try_compile` command logs ``try_compile`` events.

There is only one ``try_compile`` event major version, version 1.

.. _`try_compile-v1 event`:

``try_compile-v1`` Event
^^^^^^^^^^^^^^^^^^^^^^^^

A ``try_compile-v1`` event is a YAML mapping:

.. code-block:: yaml

  kind: "try_compile-v1"
  backtrace:
    - "CMakeLists.txt:123 (try_compile)"
  checks:
    - "Checking for something"
  description: "Explicit LOG_DESCRIPTION"
  directories:
    source: "/path/to/.../TryCompile-01234"
    binary: "/path/to/.../TryCompile-01234"
  cmakeVariables:
    SOME_VARIABLE: "Some Value"
  buildResult:
    variable: "COMPILE_RESULT"
    cached: true
    stdout: |
      # ...
    exitCode: 0

The keys specific to ``try_compile-v1`` mappings are:

``description``
  An optional key that is present when the ``LOG_DESCRIPTION <text>`` option
  was used.  Its value is a string containing the description ``<text>``.

``directories``
  A mapping describing the directories associated with the
  compilation attempt.  It has the following keys:

  ``source``
    String specifying the source directory of the
    :command:`try_compile` project.

  ``binary``
    String specifying the binary directory of the
    :command:`try_compile` project.
    For non-project invocations, this is often the same as
    the source directory.

``cmakeVariables``
  An optional key that is present when CMake propagates variables
  into the test project, either automatically or due to the
  :variable:`CMAKE_TRY_COMPILE_PLATFORM_VARIABLES` variable.
  Its value is a mapping from variable names to their values.

``buildResult``
  A mapping describing the result of compiling the test code.
  It has the following keys:

  ``variable``
    A string specifying the name of the CMake variable
    storing the result of trying to build the test project.

  ``cached``
    A boolean indicating whether the above result ``variable``
    is stored in the CMake cache.

  ``stdout``
    A YAML literal block scalar containing the output from building
    the test project, represented using our `Text Block Encoding`_.
    This contains build output from both stdout and stderr.

  ``exitCode``
    An integer specifying the build tool exit code from trying
    to build the test project.

.. _`try_run configure-log event`:

Event Kind ``try_run``
----------------------

The :command:`try_run` command logs ``try_run`` events.

There is only one ``try_run`` event major version, version 1.

.. _`try_run-v1 event`:

``try_run-v1`` Event
^^^^^^^^^^^^^^^^^^^^

A ``try_run-v1`` event is a YAML mapping:

.. code-block:: yaml

  kind: "try_run-v1"
  backtrace:
    - "CMakeLists.txt:456 (try_run)"
  checks:
    - "Checking for something"
  description: "Explicit LOG_DESCRIPTION"
  directories:
    source: "/path/to/.../TryCompile-56789"
    binary: "/path/to/.../TryCompile-56789"
  buildResult:
    variable: "COMPILE_RESULT"
    cached: true
    stdout: |
      # ...
    exitCode: 0
  runResult:
    variable: "RUN_RESULT"
    cached: true
    stdout: |
      # ...
    stderr: |
      # ...
    exitCode: 0

The keys specific to ``try_run-v1`` mappings include those
documented by the `try_compile-v1 event`_, plus:

``runResult``
  A mapping describing the result of running the test code.
  It has the following keys:

  ``variable``
    A string specifying the name of the CMake variable
    storing the result of trying to run the test executable.

  ``cached``
    A boolean indicating whether the above result ``variable``
    is stored in the CMake cache.

  ``stdout``
    An optional key that is present when the test project built successfully.
    Its value is a YAML literal block scalar containing output from running
    the test executable, represented using our `Text Block Encoding`_.

    If ``RUN_OUTPUT_VARIABLE`` was used, stdout and stderr are captured
    together, so this will contain both.  Otherwise, this will contain
    only the stdout output.

  ``stderr``
    An optional key that is present when the test project built successfully
    and the ``RUN_OUTPUT_VARIABLE`` option was not used.
    Its value is a YAML literal block scalar containing output from running
    the test executable, represented using our `Text Block Encoding`_.

    If ``RUN_OUTPUT_VARIABLE`` was used, stdout and stderr are captured
    together in the ``stdout`` key, and this key will not be present.
    Otherwise, this will contain the stderr output.

  ``exitCode``
    An optional key that is present when the test project built successfully.
    Its value is an integer specifying the exit code, or a string containing
    an error message, from trying to run the test executable.



/P/🚀 manual/cmake-cxxmodules.7.rst
=================================================


.. cmake-manual-description: CMake C++ Modules Support Reference

cmake-cxxmodules(7)
*******************

.. versionadded:: 3.28

C++ 20 introduced the concept of "modules" to the language.  The design
requires build systems to order compilations among each other to satisfy
``import`` statements reliably.  CMake's implementation asks the compiler
to scan source files for module dependencies during the build, collates
scanning results to infer ordering constraints, and tells the build tool
how to dynamically update the build graph.

Scanning Control
================

Whether or not sources get scanned for C++ module usage is dependent on the
following queries. The first query that provides a yes/no answer is used.

- If the source file belongs to a file set of type ``CXX_MODULES``, it will
  be scanned.
- If the target does not use at least C++ 20, it will not be scanned.
- If the source file is not the language ``CXX``, it will not be scanned.
- If the :prop_sf:`CXX_SCAN_FOR_MODULES` source file property is set, its
  value will be used.
- If the :prop_tgt:`CXX_SCAN_FOR_MODULES` target property is set, its value
  will be used.  Set the :variable:`CMAKE_CXX_SCAN_FOR_MODULES` variable
  to initialize this property on all targets as they are created.
- Otherwise, the source file will be scanned if the compiler and generator
  support scanning.  See policy :policy:`CMP0155`.

Note that any scanned source will be excluded from any unity build (see
:prop_tgt:`UNITY_BUILD`) because module-related statements can only happen at
one place within a C++ translation unit.

Compiler Support
================

Compilers which CMake natively supports module dependency scanning include:

* MSVC toolset 14.34 and newer (provided with Visual Studio 17.4 and newer)
* LLVM/Clang 16.0 and newer
* GCC 14 (for the in-development branch, after 2023-09-20) and newer

Generator Support
=================

The list of generators which support scanning sources for C++ modules include:

- :generator:`Ninja`
- :generator:`Ninja Multi-Config`
- :generator:`Visual Studio 17 2022`

Limitations
-----------

There are a number of known limitations of the current C++ module support in
CMake.  This does not document known limitations or bugs in compilers as these
can change over time.

For all generators:

- Header units are not supported.
- No builtin support for ``import std;`` or other compiler-provided modules.

For the Ninja Generators:

- ``ninja`` 1.11 or newer is required.

For the :ref:`Visual Studio Generators`:

- Only Visual Studio 2022 and MSVC toolsets 14.34 (Visual Studio
  17.4) and newer.
- No support for exporting or installing BMI or module information.
- No support for compiling BMIs from ``IMPORTED`` targets with C++ modules.
- No diagnosis of using modules provided by ``PRIVATE`` sources from
  ``PUBLIC`` module sources.



/P/🚀 manual/cmake-developer.7.rst
================================================


.. cmake-manual-description: CMake Developer Reference

cmake-developer(7)
******************

Introduction
============

This manual is intended for reference by developers working with
:manual:`cmake-language(7)` code, whether writing their own modules,
authoring their own build systems, or working on CMake itself.

See https://cmake.org/get-involved/ to get involved in development of
CMake upstream.  It includes links to contribution instructions, which
in turn link to developer guides for CMake itself.

Accessing Windows Registry
==========================

CMake offers some facilities to access the registry on ``Windows`` platforms.

Query Windows Registry
----------------------

.. versionadded:: 3.24

The :command:`cmake_host_system_information` command offers the possibility to
query the registry on the local computer. See
:ref:`cmake_host_system(QUERY_WINDOWS_REGISTRY) <Query Windows registry>` for
more information.

.. _`Find Using Windows Registry`:

Find Using Windows Registry
---------------------------

.. versionchanged:: 3.24

Options ``HINTS`` and ``PATHS`` of :command:`find_file`,
:command:`find_library`, :command:`find_path`, :command:`find_program`, and
:command:`find_package` commands offer the possibility, on ``Windows``
platform, to query the registry.

The formal syntax, as specified using 
`BNF <https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form>`_ notation with
the regular extensions, for registry query is the following:

.. raw:: latex

   \begin{small}

.. productionlist::
  registry_query: '[' `sep_definition`? `root_key`
                :     ((`key_separator` `sub_key`)? (`value_separator` `value_name`_)?)? ']'
  sep_definition: '{' `value_separator` '}'
  root_key: 'HKLM' | 'HKEY_LOCAL_MACHINE' | 'HKCU' | 'HKEY_CURRENT_USER' |
          : 'HKCR' | 'HKEY_CLASSES_ROOT' | 'HKCC' | 'HKEY_CURRENT_CONFIG' |
          : 'HKU' | 'HKEY_USERS'
  sub_key: `element` (`key_separator` `element`)*
  key_separator: '/' | '\\'
  value_separator: `element` | ';'
  value_name: `element` | '(default)'
  element: `character`\+
  character: <any character except `key_separator` and `value_separator`>

.. raw:: latex

   \end{small}

The :token:`sep_definition` optional item offers the possibility to specify
the string used to separate the :token:`sub_key` from the :token:`value_name`
item. If not specified, the character ``;`` is used. Multiple
:token:`registry_query` items can be specified as part of a path.

.. code-block:: cmake

  # example using default separator
  find_file(... PATHS "/root/[HKLM/Stuff;InstallDir]/lib[HKLM\\\\Stuff;Architecture]")

  # example using different specified separators
  find_library(... HINTS "/root/[{|}HKCU/Stuff|InstallDir]/lib[{@@}HKCU\\\\Stuff@@Architecture]")

If the :token:`value_name` item is not specified or has the special name
``(default)``, the content of the default value, if any, will be returned. The
supported types for the :token:`value_name` are:

* ``REG_SZ``.
* ``REG_EXPAND_SZ``. The returned data is expanded.
* ``REG_DWORD``.
* ``REG_QWORD``.

When the registry query failed, typically because the key does not exist or
the data type is not supported, the string ``/REGISTRY-NOTFOUND`` is substituted
to the ``[]`` query expression.

.. _`Find Modules`:

Find Modules
============

A "find module" is a ``Find<PackageName>.cmake`` file to be loaded by the
:command:`find_package` command when invoked for ``<PackageName>``.

The primary task of a find module is to determine whether a package is
available, set the ``<PackageName>_FOUND`` variable to reflect this and
provide any variables, macros and imported targets required to use the
package.  A find module is useful in cases where an upstream library does
not provide a :ref:`config file package <Config File Packages>`.

The traditional approach is to use variables for everything, including
libraries and executables: see the `Standard Variable Names`_ section
below.  This is what most of the existing find modules provided by CMake
do.

The more modern approach is to behave as much like
:ref:`config file packages <Config File Packages>` files as possible, by
providing :ref:`imported target <Imported targets>`.  This has the advantage
of propagating :ref:`Target Usage Requirements` to consumers.

In either case (or even when providing both variables and imported
targets), find modules should provide backwards compatibility with old
versions that had the same name.

A FindFoo.cmake module will typically be loaded by the command::

  find_package(Foo [major[.minor[.patch[.tweak]]]]
               [EXACT] [QUIET] [REQUIRED]
               [[COMPONENTS] [components...]]
               [OPTIONAL_COMPONENTS components...]
               [NO_POLICY_SCOPE])

See the :command:`find_package` documentation for details on what
variables are set for the find module.  Most of these are dealt with by
using :module:`FindPackageHandleStandardArgs`.

Briefly, the module should only locate versions of the package
compatible with the requested version, as described by the
``Foo_FIND_VERSION`` family of variables.  If ``Foo_FIND_QUIETLY`` is
set to true, it should avoid printing messages, including anything
complaining about the package not being found.  If ``Foo_FIND_REQUIRED``
is set to true, the module should issue a ``FATAL_ERROR`` if the package
cannot be found.  If neither are set to true, it should print a
non-fatal message if it cannot find the package.

Packages that find multiple semi-independent parts (like bundles of
libraries) should search for the components listed in
``Foo_FIND_COMPONENTS`` if it is set , and only set ``Foo_FOUND`` to
true if for each searched-for component ``<c>`` that was not found,
``Foo_FIND_REQUIRED_<c>`` is not set to true.  The ``HANDLE_COMPONENTS``
argument of ``find_package_handle_standard_args()`` can be used to
implement this.

If ``Foo_FIND_COMPONENTS`` is not set, which modules are searched for
and required is up to the find module, but should be documented.

For internal implementation, it is a generally accepted convention that
variables starting with underscore are for temporary use only.


.. _`CMake Developer Standard Variable Names`:

Standard Variable Names
-----------------------

For a ``FindXxx.cmake`` module that takes the approach of setting
variables (either instead of or in addition to creating imported
targets), the following variable names should be used to keep things
consistent between Find modules.  Note that all variables start with
``Xxx_``, which (unless otherwise noted) must match exactly the name
of the ``FindXxx.cmake`` file, including upper/lowercase.
This prefix on the variable names ensures that they do not conflict with
variables of other Find modules.  The same pattern should also be followed
for any macros, functions and imported targets defined by the Find module.

``Xxx_INCLUDE_DIRS``
  The final set of include directories listed in one variable for use by
  client code. This should not be a cache entry (note that this also means
  this variable should not be used as the result variable of a
  :command:`find_path` command - see ``Xxx_INCLUDE_DIR`` below for that).

``Xxx_LIBRARIES``
  The libraries to use with the module.  These may be CMake targets, full
  absolute paths to a library binary or the name of a library that the
  linker must find in its search path.  This should not be a cache entry
  (note that this also means this variable should not be used as the
  result variable of a :command:`find_library` command - see
  ``Xxx_LIBRARY`` below for that).

``Xxx_DEFINITIONS``
  The compile definitions to use when compiling code that uses the module.
  This really shouldn't include options such as ``-DHAS_JPEG`` that a client
  source-code file uses to decide whether to ``#include <jpeg.h>``

``Xxx_EXECUTABLE``
  The full absolute path to an executable.  In this case, ``Xxx`` might not
  be the name of the module, it might be the name of the tool (usually
  converted to all uppercase), assuming that tool has such a well-known name
  that it is unlikely that another tool with the same name exists.  It would
  be appropriate to use this as the result variable of a
  :command:`find_program` command.

``Xxx_YYY_EXECUTABLE``
  Similar to ``Xxx_EXECUTABLE`` except here the ``Xxx`` is always the module
  name and ``YYY`` is the tool name (again, usually fully uppercase).
  Prefer this form if the tool name is not very widely known or has the
  potential  to clash with another tool.  For greater consistency, also
  prefer this form if the module provides more than one executable.

``Xxx_LIBRARY_DIRS``
  Optionally, the final set of library directories listed in one
  variable for use by client code. This should not be a cache entry.

``Xxx_ROOT_DIR``
  Where to find the base directory of the module.

``Xxx_VERSION_VV``
  Variables of this form specify whether the ``Xxx`` module being provided
  is version ``VV`` of the module.  There should not be more than one
  variable of this form set to true for a given module.  For example, a
  module ``Barry`` might have evolved over many years and gone through a
  number of different major versions.  Version 3 of the ``Barry`` module
  might set the variable ``Barry_VERSION_3`` to true, whereas an older
  version of the module might set ``Barry_VERSION_2`` to true instead.
  It would be an error for both ``Barry_VERSION_3`` and ``Barry_VERSION_2``
  to both be set to true.

``Xxx_WRAP_YY``
  When a variable of this form is set to false, it indicates that the
  relevant wrapping command should not be used.  The wrapping command
  depends on the module, it may be implied by the module name or it might
  be specified by the ``YY`` part of the variable.

``Xxx_Yy_FOUND``
  For variables of this form, ``Yy`` is the name of a component for the
  module.  It should match exactly one of the valid component names that
  may be passed to the :command:`find_package` command for the module.
  If a variable of this form is set to false, it means that the ``Yy``
  component of module ``Xxx`` was not found or is not available.
  Variables of this form would typically be used for optional components
  so that the caller can check whether an optional component is available.

``Xxx_FOUND``
  When the :command:`find_package` command returns to the caller, this
  variable will be set to true if the module was deemed to have been found
  successfully.

``Xxx_NOT_FOUND_MESSAGE``
  Should be set by config-files in the case that it has set
  ``Xxx_FOUND`` to FALSE.  The contained message will be printed by the
  :command:`find_package` command and by
  :command:`find_package_handle_standard_args` to inform the user about the
  problem.  Use this instead of calling :command:`message` directly to
  report a reason for failing to find the module or package.

``Xxx_RUNTIME_LIBRARY_DIRS``
  Optionally, the runtime library search path for use when running an
  executable linked to shared libraries.  The list should be used by
  user code to create the ``PATH`` on windows or ``LD_LIBRARY_PATH`` on
  UNIX.  This should not be a cache entry.

``Xxx_VERSION``
  The full version string of the package found, if any.  Note that many
  existing modules provide ``Xxx_VERSION_STRING`` instead.

``Xxx_VERSION_MAJOR``
  The major version of the package found, if any.

``Xxx_VERSION_MINOR``
  The minor version of the package found, if any.

``Xxx_VERSION_PATCH``
  The patch version of the package found, if any.

The following names should not usually be used in ``CMakeLists.txt`` files.
They are intended for use by Find modules to specify and cache the locations
of specific files or directories.  Users are typically able to set and edit
these variables to control the behavior of Find modules (like entering the
path to a library manually):

``Xxx_LIBRARY``
  The path of the library.  Use this form only when the module provides a
  single library.  It is appropriate to use this as the result variable
  in a :command:`find_library` command.

``Xxx_Yy_LIBRARY``
  The path of library ``Yy`` provided by the module ``Xxx``.  Use this form
  when the module provides more than one library or where other modules may
  also provide a library of the same name. It is also appropriate to use
  this form as the result variable in a :command:`find_library` command.

``Xxx_INCLUDE_DIR``
  When the module provides only a single library, this variable can be used
  to specify where to find headers for using the library (or more accurately,
  the path that consumers of the library should add to their header search
  path).  It would be appropriate to use this as the result variable in a
  :command:`find_path` command.

``Xxx_Yy_INCLUDE_DIR``
  If the module provides more than one library or where other modules may
  also provide a library of the same name, this form is recommended for
  specifying where to find headers for using library ``Yy`` provided by
  the module.  Again, it would be appropriate to use this as the result
  variable in a :command:`find_path` command.

To prevent users being overwhelmed with settings to configure, try to
keep as many options as possible out of the cache, leaving at least one
option which can be used to disable use of the module, or locate a
not-found library (e.g. ``Xxx_ROOT_DIR``).  For the same reason, mark
most cache options as advanced.  For packages which provide both debug
and release binaries, it is common to create cache variables with a
``_LIBRARY_<CONFIG>`` suffix, such as ``Foo_LIBRARY_RELEASE`` and
``Foo_LIBRARY_DEBUG``.  The :module:`SelectLibraryConfigurations` module
can be helpful for such cases.

While these are the standard variable names, you should provide
backwards compatibility for any old names that were actually in use.
Make sure you comment them as deprecated, so that no-one starts using
them.

A Sample Find Module
--------------------

We will describe how to create a simple find module for a library ``Foo``.

The top of the module should begin with a license notice, followed by
a blank line, and then followed by a :ref:`Bracket Comment`.  The comment
should begin with ``.rst:`` to indicate that the rest of its content is
reStructuredText-format documentation.  For example:

::

  # Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
  # file Copyright.txt or https://cmake.org/licensing for details.

  #[=======================================================================[.rst:
  FindFoo
  -------

  Finds the Foo library.

  Imported Targets
  ^^^^^^^^^^^^^^^^

  This module provides the following imported targets, if found:

  ``Foo::Foo``
    The Foo library

  Result Variables
  ^^^^^^^^^^^^^^^^

  This will define the following variables:

  ``Foo_FOUND``
    True if the system has the Foo library.
  ``Foo_VERSION``
    The version of the Foo library which was found.
  ``Foo_INCLUDE_DIRS``
    Include directories needed to use Foo.
  ``Foo_LIBRARIES``
    Libraries needed to link to Foo.

  Cache Variables
  ^^^^^^^^^^^^^^^

  The following cache variables may also be set:

  ``Foo_INCLUDE_DIR``
    The directory containing ``foo.h``.
  ``Foo_LIBRARY``
    The path to the Foo library.

  #]=======================================================================]

The module documentation consists of:

* An underlined heading specifying the module name.

* A simple description of what the module finds.
  More description may be required for some packages.  If there are
  caveats or other details users of the module should be aware of,
  specify them here.

* A section listing imported targets provided by the module, if any.

* A section listing result variables provided by the module.

* Optionally a section listing cache variables used by the module, if any.

If the package provides any macros or functions, they should be listed in
an additional section, but can be documented by additional ``.rst:``
comment blocks immediately above where those macros or functions are defined.

The find module implementation may begin below the documentation block.
Now the actual libraries and so on have to be found.  The code here will
obviously vary from module to module (dealing with that, after all, is the
point of find modules), but there tends to be a common pattern for libraries.

First, we try to use ``pkg-config`` to find the library.  Note that we
cannot rely on this, as it may not be available, but it provides a good
starting point.

.. code-block:: cmake

  find_package(PkgConfig)
  pkg_check_modules(PC_Foo QUIET Foo)

This should define some variables starting ``PC_Foo_`` that contain the
information from the ``Foo.pc`` file.

Now we need to find the libraries and include files; we use the
information from ``pkg-config`` to provide hints to CMake about where to
look.

.. code-block:: cmake

  find_path(Foo_INCLUDE_DIR
    NAMES foo.h
    PATHS ${PC_Foo_INCLUDE_DIRS}
    PATH_SUFFIXES Foo
  )
  find_library(Foo_LIBRARY
    NAMES foo
    PATHS ${PC_Foo_LIBRARY_DIRS}
  )

Alternatively, if the library is available with multiple configurations, you can
use :module:`SelectLibraryConfigurations` to automatically set the
``Foo_LIBRARY`` variable instead:

.. code-block:: cmake

  find_library(Foo_LIBRARY_RELEASE
    NAMES foo
    PATHS ${PC_Foo_LIBRARY_DIRS}/Release
  )
  find_library(Foo_LIBRARY_DEBUG
    NAMES foo
    PATHS ${PC_Foo_LIBRARY_DIRS}/Debug
  )

  include(SelectLibraryConfigurations)
  select_library_configurations(Foo)

If you have a good way of getting the version (from a header file, for
example), you can use that information to set ``Foo_VERSION`` (although
note that find modules have traditionally used ``Foo_VERSION_STRING``,
so you may want to set both).  Otherwise, attempt to use the information
from ``pkg-config``

.. code-block:: cmake

  set(Foo_VERSION ${PC_Foo_VERSION})

Now we can use :module:`FindPackageHandleStandardArgs` to do most of the
rest of the work for us

.. code-block:: cmake

  include(FindPackageHandleStandardArgs)
  find_package_handle_standard_args(Foo
    FOUND_VAR Foo_FOUND
    REQUIRED_VARS
      Foo_LIBRARY
      Foo_INCLUDE_DIR
    VERSION_VAR Foo_VERSION
  )

This will check that the ``REQUIRED_VARS`` contain values (that do not
end in ``-NOTFOUND``) and set ``Foo_FOUND`` appropriately.  It will also
cache those values.  If ``Foo_VERSION`` is set, and a required version
was passed to :command:`find_package`, it will check the requested version
against the one in ``Foo_VERSION``.  It will also print messages as
appropriate; note that if the package was found, it will print the
contents of the first required variable to indicate where it was found.

At this point, we have to provide a way for users of the find module to
link to the library or libraries that were found.  There are two
approaches, as discussed in the `Find Modules`_ section above.  The
traditional variable approach looks like

.. code-block:: cmake

  if(Foo_FOUND)
    set(Foo_LIBRARIES ${Foo_LIBRARY})
    set(Foo_INCLUDE_DIRS ${Foo_INCLUDE_DIR})
    set(Foo_DEFINITIONS ${PC_Foo_CFLAGS_OTHER})
  endif()

If more than one library was found, all of them should be included in
these variables (see the `Standard Variable Names`_ section for more
information).

When providing imported targets, these should be namespaced (hence the
``Foo::`` prefix); CMake will recognize that values passed to
:command:`target_link_libraries` that contain ``::`` in their name are
supposed to be imported targets (rather than just library names), and
will produce appropriate diagnostic messages if that target does not
exist (see policy :policy:`CMP0028`).

.. code-block:: cmake

  if(Foo_FOUND AND NOT TARGET Foo::Foo)
    add_library(Foo::Foo UNKNOWN IMPORTED)
    set_target_properties(Foo::Foo PROPERTIES
      IMPORTED_LOCATION "${Foo_LIBRARY}"
      INTERFACE_COMPILE_OPTIONS "${PC_Foo_CFLAGS_OTHER}"
      INTERFACE_INCLUDE_DIRECTORIES "${Foo_INCLUDE_DIR}"
    )
  endif()

One thing to note about this is that the ``INTERFACE_INCLUDE_DIRECTORIES`` and
similar properties should only contain information about the target itself, and
not any of its dependencies.  Instead, those dependencies should also be
targets, and CMake should be told that they are dependencies of this target.
CMake will then combine all the necessary information automatically.

The type of the :prop_tgt:`IMPORTED` target created in the
:command:`add_library` command can always be specified as ``UNKNOWN``
type.  This simplifies the code in cases where static or shared variants may
be found, and CMake will determine the type by inspecting the files.

If the library is available with multiple configurations, the
:prop_tgt:`IMPORTED_CONFIGURATIONS` target property should also be
populated:

.. code-block:: cmake

  if(Foo_FOUND)
    if (NOT TARGET Foo::Foo)
      add_library(Foo::Foo UNKNOWN IMPORTED)
    endif()
    if (Foo_LIBRARY_RELEASE)
      set_property(TARGET Foo::Foo APPEND PROPERTY
        IMPORTED_CONFIGURATIONS RELEASE
      )
      set_target_properties(Foo::Foo PROPERTIES
        IMPORTED_LOCATION_RELEASE "${Foo_LIBRARY_RELEASE}"
      )
    endif()
    if (Foo_LIBRARY_DEBUG)
      set_property(TARGET Foo::Foo APPEND PROPERTY
        IMPORTED_CONFIGURATIONS DEBUG
      )
      set_target_properties(Foo::Foo PROPERTIES
        IMPORTED_LOCATION_DEBUG "${Foo_LIBRARY_DEBUG}"
      )
    endif()
    set_target_properties(Foo::Foo PROPERTIES
      INTERFACE_COMPILE_OPTIONS "${PC_Foo_CFLAGS_OTHER}"
      INTERFACE_INCLUDE_DIRECTORIES "${Foo_INCLUDE_DIR}"
    )
  endif()

The ``RELEASE`` variant should be listed first in the property
so that the variant is chosen if the user uses a configuration which is
not an exact match for any listed ``IMPORTED_CONFIGURATIONS``.

Most of the cache variables should be hidden in the :program:`ccmake` interface unless
the user explicitly asks to edit them.

.. code-block:: cmake

  mark_as_advanced(
    Foo_INCLUDE_DIR
    Foo_LIBRARY
  )

If this module replaces an older version, you should set compatibility variables
to cause the least disruption possible.

.. code-block:: cmake

  # compatibility variables
  set(Foo_VERSION_STRING ${Foo_VERSION})




/P/🚀 manual/cmake-file-api.7.rst
===============================================


.. cmake-manual-description: CMake File-Based API

cmake-file-api(7)
*****************

Introduction
============

CMake provides a file-based API that clients may use to get semantic
information about the buildsystems CMake generates.  Clients may use
the API by writing query files to a specific location in a build tree
to request zero or more `Object Kinds`_.  When CMake generates the
buildsystem in that build tree it will read the query files and write
reply files for the client to read.

The file-based API uses a ``<build>/.cmake/api/`` directory at the top
of a build tree.  The API is versioned to support changes to the layout
of files within the API directory.  API file layout versioning is
orthogonal to the versioning of `Object Kinds`_ used in replies.
This version of CMake supports only one API version, `API v1`_.

.. versionadded:: 3.27
  Projects may also submit queries for the current run using the
  :command:`cmake_file_api` command.

.. _`file-api v1`:

API v1
======

API v1 is housed in the ``<build>/.cmake/api/v1/`` directory.
It has the following subdirectories:

``query/``
  Holds query files written by clients.
  These may be `v1 Shared Stateless Query Files`_,
  `v1 Client Stateless Query Files`_, or `v1 Client Stateful Query Files`_.

``reply/``
  Holds reply files written by CMake whenever it runs to generate a build
  system.  These are indexed by a `v1 Reply Index File`_ file that may
  reference additional `v1 Reply Files`_.  CMake owns all reply files.
  Clients must never remove them.

  Clients may look for and read a reply index file at any time.
  Clients may optionally create the ``reply/`` directory at any time
  and monitor it for the appearance of a new reply index file.

v1 Shared Stateless Query Files
-------------------------------

Shared stateless query files allow clients to share requests for
major versions of the `Object Kinds`_ and get all requested versions
recognized by the CMake that runs.

Clients may create shared requests by creating empty files in the
``v1/query/`` directory.  The form is::

  <build>/.cmake/api/v1/query/<kind>-v<major>

where ``<kind>`` is one of the `Object Kinds`_, ``-v`` is literal,
and ``<major>`` is the major version number.

Files of this form are stateless shared queries not owned by any specific
client.  Once created they should not be removed without external client
coordination or human intervention.

v1 Client Stateless Query Files
-------------------------------

Client stateless query files allow clients to create owned requests for
major versions of the `Object Kinds`_ and get all requested versions
recognized by the CMake that runs.

Clients may create owned requests by creating empty files in
client-specific query subdirectories.  The form is::

  <build>/.cmake/api/v1/query/client-<client>/<kind>-v<major>

where ``client-`` is literal, ``<client>`` is a string uniquely
identifying the client, ``<kind>`` is one of the `Object Kinds`_,
``-v`` is literal, and ``<major>`` is the major version number.
Each client must choose a unique ``<client>`` identifier via its
own means.

Files of this form are stateless queries owned by the client ``<client>``.
The owning client may remove them at any time.

v1 Client Stateful Query Files
------------------------------

Stateful query files allow clients to request a list of versions of
each of the `Object Kinds`_ and get only the most recent version
recognized by the CMake that runs.

Clients may create owned stateful queries by creating ``query.json``
files in client-specific query subdirectories.  The form is::

  <build>/.cmake/api/v1/query/client-<client>/query.json

where ``client-`` is literal, ``<client>`` is a string uniquely
identifying the client, and ``query.json`` is literal.  Each client
must choose a unique ``<client>`` identifier via its own means.

``query.json`` files are stateful queries owned by the client ``<client>``.
The owning client may update or remove them at any time.  When a
given client installation is updated it may then update the stateful
query it writes to build trees to request newer object versions.
This can be used to avoid asking CMake to generate multiple object
versions unnecessarily.

A ``query.json`` file must contain a JSON object:

.. code-block:: json

  {
    "requests": [
      { "kind": "<kind>" , "version": 1 },
      { "kind": "<kind>" , "version": { "major": 1, "minor": 2 } },
      { "kind": "<kind>" , "version": [2, 1] },
      { "kind": "<kind>" , "version": [2, { "major": 1, "minor": 2 }] },
      { "kind": "<kind>" , "version": 1, "client": {} },
      { "kind": "..." }
    ],
    "client": {}
  }

The members are:

``requests``
  A JSON array containing zero or more requests.  Each request is
  a JSON object with members:

  ``kind``
    Specifies one of the `Object Kinds`_ to be included in the reply.

  ``version``
    Indicates the version(s) of the object kind that the client
    understands.  Versions have major and minor components following
    semantic version conventions.  The value must be

    * a JSON integer specifying a (non-negative) major version number, or
    * a JSON object containing ``major`` and (optionally) ``minor``
      members specifying non-negative integer version components, or
    * a JSON array whose elements are each one of the above.

  ``client``
    Optional member reserved for use by the client.  This value is
    preserved in the reply written for the client in the
    `v1 Reply Index File`_ but is otherwise ignored.  Clients may use
    this to pass custom information with a request through to its reply.

  For each requested object kind CMake will choose the *first* version
  that it recognizes for that kind among those listed in the request.
  The response will use the selected *major* version with the highest
  *minor* version known to the running CMake for that major version.
  Therefore clients should list all supported major versions in
  preferred order along with the minimal minor version required
  for each major version.

``client``
  Optional member reserved for use by the client.  This value is
  preserved in the reply written for the client in the
  `v1 Reply Index File`_ but is otherwise ignored.  Clients may use
  this to pass custom information with a query through to its reply.

Other ``query.json`` top-level members are reserved for future use.
If present they are ignored for forward compatibility.

v1 Reply Index File
-------------------

CMake writes an ``index-*.json`` file to the ``v1/reply/`` directory
whenever it runs to generate a build system.  Clients must read the
reply index file first and may read other `v1 Reply Files`_ only by
following references.  The form of the reply index file name is::

  <build>/.cmake/api/v1/reply/index-<unspecified>.json

where ``index-`` is literal and ``<unspecified>`` is an unspecified
name selected by CMake.  Whenever a new index file is generated it
is given a new name and any old one is deleted.  During the short
time between these steps there may be multiple index files present;
the one with the largest name in lexicographic order is the current
index file.

The reply index file contains a JSON object:

.. code-block:: json

  {
    "cmake": {
      "version": {
        "major": 3, "minor": 14, "patch": 0, "suffix": "",
        "string": "3.14.0", "isDirty": false
      },
      "paths": {
        "cmake": "/prefix/bin/cmake",
        "ctest": "/prefix/bin/ctest",
        "cpack": "/prefix/bin/cpack",
        "root": "/prefix/share/cmake-3.14"
      },
      "generator": {
        "multiConfig": false,
        "name": "Unix Makefiles"
      }
    },
    "objects": [
      { "kind": "<kind>",
        "version": { "major": 1, "minor": 0 },
        "jsonFile": "<file>" },
      { "...": "..." }
    ],
    "reply": {
      "<kind>-v<major>": { "kind": "<kind>",
                           "version": { "major": 1, "minor": 0 },
                           "jsonFile": "<file>" },
      "<unknown>": { "error": "unknown query file" },
      "...": {},
      "client-<client>": {
        "<kind>-v<major>": { "kind": "<kind>",
                             "version": { "major": 1, "minor": 0 },
                             "jsonFile": "<file>" },
        "<unknown>": { "error": "unknown query file" },
        "...": {},
        "query.json": {
          "requests": [ {}, {}, {} ],
          "responses": [
            { "kind": "<kind>",
              "version": { "major": 1, "minor": 0 },
              "jsonFile": "<file>" },
            { "error": "unknown query file" },
            { "...": {} }
          ],
          "client": {}
        }
      }
    }
  }

The members are:

``cmake``
  A JSON object containing information about the instance of CMake that
  generated the reply.  It contains members:

  ``version``
    A JSON object specifying the version of CMake with members:

    ``major``, ``minor``, ``patch``
      Integer values specifying the major, minor, and patch version components.
    ``suffix``
      A string specifying the version suffix, if any, e.g. ``g0abc3``.
    ``string``
      A string specifying the full version in the format
      ``<major>.<minor>.<patch>[-<suffix>]``.
    ``isDirty``
      A boolean indicating whether the version was built from a version
      controlled source tree with local modifications.

  ``paths``
    A JSON object specifying paths to things that come with CMake.
    It has members for :program:`cmake`, :program:`ctest`, and :program:`cpack`
    whose values are JSON strings specifying the absolute path to each tool,
    represented with forward slashes.  It also has a ``root`` member for
    the absolute path to the directory containing CMake resources like the
    ``Modules/`` directory (see :variable:`CMAKE_ROOT`).

  ``generator``
    A JSON object describing the CMake generator used for the build.
    It has members:

    ``multiConfig``
      A boolean specifying whether the generator supports multiple output
      configurations.
    ``name``
      A string specifying the name of the generator.
    ``platform``
      If the generator supports :variable:`CMAKE_GENERATOR_PLATFORM`,
      this is a string specifying the generator platform name.

``objects``
  A JSON array listing all versions of all `Object Kinds`_ generated
  as part of the reply.  Each array entry is a
  `v1 Reply File Reference`_.

``reply``
  A JSON object mirroring the content of the ``query/`` directory
  that CMake loaded to produce the reply.  The members are of the form

  ``<kind>-v<major>``
    A member of this form appears for each of the
    `v1 Shared Stateless Query Files`_ that CMake recognized as a
    request for object kind ``<kind>`` with major version ``<major>``.
    The value is a `v1 Reply File Reference`_ to the corresponding
    reply file for that object kind and version.

  ``<unknown>``
    A member of this form appears for each of the
    `v1 Shared Stateless Query Files`_ that CMake did not recognize.
    The value is a JSON object with a single ``error`` member
    containing a string with an error message indicating that the
    query file is unknown.

  ``client-<client>``
    A member of this form appears for each client-owned directory
    holding `v1 Client Stateless Query Files`_.
    The value is a JSON object mirroring the content of the
    ``query/client-<client>/`` directory.  The members are of the form:

    ``<kind>-v<major>``
      A member of this form appears for each of the
      `v1 Client Stateless Query Files`_ that CMake recognized as a
      request for object kind ``<kind>`` with major version ``<major>``.
      The value is a `v1 Reply File Reference`_ to the corresponding
      reply file for that object kind and version.

    ``<unknown>``
      A member of this form appears for each of the
      `v1 Client Stateless Query Files`_ that CMake did not recognize.
      The value is a JSON object with a single ``error`` member
      containing a string with an error message indicating that the
      query file is unknown.

    ``query.json``
      This member appears for clients using
      `v1 Client Stateful Query Files`_.
      If the ``query.json`` file failed to read or parse as a JSON object,
      this member is a JSON object with a single ``error`` member
      containing a string with an error message.  Otherwise, this member
      is a JSON object mirroring the content of the ``query.json`` file.
      The members are:

      ``client``
        A copy of the ``query.json`` file ``client`` member, if it exists.

      ``requests``
        A copy of the ``query.json`` file ``requests`` member, if it exists.

      ``responses``
        If the ``query.json`` file ``requests`` member is missing or invalid,
        this member is a JSON object with a single ``error`` member
        containing a string with an error message.  Otherwise, this member
        contains a JSON array with a response for each entry of the
        ``requests`` array, in the same order.  Each response is

        * a JSON object with a single ``error`` member containing a string
          with an error message, or
        * a `v1 Reply File Reference`_ to the corresponding reply file for
          the requested object kind and selected version.

After reading the reply index file, clients may read the other
`v1 Reply Files`_ it references.

v1 Reply File Reference
^^^^^^^^^^^^^^^^^^^^^^^

The reply index file represents each reference to another reply file
using a JSON object with members:

``kind``
  A string specifying one of the `Object Kinds`_.
``version``
  A JSON object with members ``major`` and ``minor`` specifying
  integer version components of the object kind.
``jsonFile``
  A JSON string specifying a path relative to the reply index file
  to another JSON file containing the object.

v1 Reply Files
--------------

Reply files containing specific `Object Kinds`_ are written by CMake.
The names of these files are unspecified and must not be interpreted
by clients.  Clients must first read the `v1 Reply Index File`_ and
follow references to the names of the desired response objects.

Reply files (including the index file) will never be replaced by
files of the same name but different content.  This allows a client
to read the files concurrently with a running CMake that may generate
a new reply.  However, after generating a new reply CMake will attempt
to remove reply files from previous runs that it did not just write.
If a client attempts to read a reply file referenced by the index but
finds the file missing, that means a concurrent CMake has generated
a new reply.  The client may simply start again by reading the new
reply index file.

.. _`file-api object kinds`:

Object Kinds
============

The CMake file-based API reports semantic information about the build
system using the following kinds of JSON objects.  Each kind of object
is versioned independently using semantic versioning with major and
minor components.  Every kind of object has the form:

.. code-block:: json

  {
    "kind": "<kind>",
    "version": { "major": 1, "minor": 0 },
    "...": {}
  }

The ``kind`` member is a string specifying the object kind name.
The ``version`` member is a JSON object with ``major`` and ``minor``
members specifying integer components of the object kind's version.
Additional top-level members are specific to each object kind.

Object Kind "codemodel"
-----------------------

The ``codemodel`` object kind describes the build system structure as
modeled by CMake.

There is only one ``codemodel`` object major version, version 2.
Version 1 does not exist to avoid confusion with that from
:manual:`cmake-server(7)` mode.

"codemodel" version 2
^^^^^^^^^^^^^^^^^^^^^

``codemodel`` object version 2 is a JSON object:

.. code-block:: json

  {
    "kind": "codemodel",
    "version": { "major": 2, "minor": 7 },
    "paths": {
      "source": "/path/to/top-level-source-dir",
      "build": "/path/to/top-level-build-dir"
    },
    "configurations": [
      {
        "name": "Debug",
        "directories": [
          {
            "source": ".",
            "build": ".",
            "childIndexes": [ 1 ],
            "projectIndex": 0,
            "targetIndexes": [ 0 ],
            "hasInstallRule": true,
            "minimumCMakeVersion": {
              "string": "3.14"
            },
            "jsonFile": "<file>"
          },
          {
            "source": "sub",
            "build": "sub",
            "parentIndex": 0,
            "projectIndex": 0,
            "targetIndexes": [ 1 ],
            "minimumCMakeVersion": {
              "string": "3.14"
            },
            "jsonFile": "<file>"
          }
        ],
        "projects": [
          {
            "name": "MyProject",
            "directoryIndexes": [ 0, 1 ],
            "targetIndexes": [ 0, 1 ]
          }
        ],
        "targets": [
          {
            "name": "MyExecutable",
            "directoryIndex": 0,
            "projectIndex": 0,
            "jsonFile": "<file>"
          },
          {
            "name": "MyLibrary",
            "directoryIndex": 1,
            "projectIndex": 0,
            "jsonFile": "<file>"
          }
        ]
      }
    ]
  }

The members specific to ``codemodel`` objects are:

``paths``
  A JSON object containing members:

  ``source``
    A string specifying the absolute path to the top-level source directory,
    represented with forward slashes.

  ``build``
    A string specifying the absolute path to the top-level build directory,
    represented with forward slashes.

``configurations``
  A JSON array of entries corresponding to available build configurations.
  On single-configuration generators there is one entry for the value
  of the :variable:`CMAKE_BUILD_TYPE` variable.  For multi-configuration
  generators there is an entry for each configuration listed in the
  :variable:`CMAKE_CONFIGURATION_TYPES` variable.
  Each entry is a JSON object containing members:

  ``name``
    A string specifying the name of the configuration, e.g. ``Debug``.

  ``directories``
    A JSON array of entries each corresponding to a build system directory
    whose source directory contains a ``CMakeLists.txt`` file.  The first
    entry corresponds to the top-level directory.  Each entry is a
    JSON object containing members:

    ``source``
      A string specifying the path to the source directory, represented
      with forward slashes.  If the directory is inside the top-level
      source directory then the path is specified relative to that
      directory (with ``.`` for the top-level source directory itself).
      Otherwise the path is absolute.

    ``build``
      A string specifying the path to the build directory, represented
      with forward slashes.  If the directory is inside the top-level
      build directory then the path is specified relative to that
      directory (with ``.`` for the top-level build directory itself).
      Otherwise the path is absolute.

    ``parentIndex``
      Optional member that is present when the directory is not top-level.
      The value is an unsigned integer 0-based index of another entry in
      the main ``directories`` array that corresponds to the parent
      directory that added this directory as a subdirectory.

    ``childIndexes``
      Optional member that is present when the directory has subdirectories.
      The value is a JSON array of entries corresponding to child directories
      created by the :command:`add_subdirectory` or :command:`subdirs`
      command.  Each entry is an unsigned integer 0-based index of another
      entry in the main ``directories`` array.

    ``projectIndex``
      An unsigned integer 0-based index into the main ``projects`` array
      indicating the build system project to which the this directory belongs.

    ``targetIndexes``
      Optional member that is present when the directory itself has targets,
      excluding those belonging to subdirectories.  The value is a JSON
      array of entries corresponding to the targets.  Each entry is an
      unsigned integer 0-based index into the main ``targets`` array.

    ``minimumCMakeVersion``
      Optional member present when a minimum required version of CMake is
      known for the directory.  This is the ``<min>`` version given to the
      most local call to the :command:`cmake_minimum_required(VERSION)`
      command in the directory itself or one of its ancestors.
      The value is a JSON object with one member:

      ``string``
        A string specifying the minimum required version in the format::

          <major>.<minor>[.<patch>[.<tweak>]][<suffix>]

        Each component is an unsigned integer and the suffix may be an
        arbitrary string.

    ``hasInstallRule``
      Optional member that is present with boolean value ``true`` when
      the directory or one of its subdirectories contains any
      :command:`install` rules, i.e. whether a ``make install``
      or equivalent rule is available.

    ``jsonFile``
      A JSON string specifying a path relative to the codemodel file
      to another JSON file containing a
      `"codemodel" version 2 "directory" object`_.

      This field was added in codemodel version 2.3.

  ``projects``
    A JSON array of entries corresponding to the top-level project
    and sub-projects defined in the build system.  Each (sub-)project
    corresponds to a source directory whose ``CMakeLists.txt`` file
    calls the :command:`project` command with a project name different
    from its parent directory.  The first entry corresponds to the
    top-level project.

    Each entry is a JSON object containing members:

    ``name``
      A string specifying the name given to the :command:`project` command.

    ``parentIndex``
      Optional member that is present when the project is not top-level.
      The value is an unsigned integer 0-based index of another entry in
      the main ``projects`` array that corresponds to the parent project
      that added this project as a sub-project.

    ``childIndexes``
      Optional member that is present when the project has sub-projects.
      The value is a JSON array of entries corresponding to the sub-projects.
      Each entry is an unsigned integer 0-based index of another
      entry in the main ``projects`` array.

    ``directoryIndexes``
      A JSON array of entries corresponding to build system directories
      that are part of the project.  The first entry corresponds to the
      top-level directory of the project.  Each entry is an unsigned
      integer 0-based index into the main ``directories`` array.

    ``targetIndexes``
      Optional member that is present when the project itself has targets,
      excluding those belonging to sub-projects.  The value is a JSON
      array of entries corresponding to the targets.  Each entry is an
      unsigned integer 0-based index into the main ``targets`` array.

  ``targets``
    A JSON array of entries corresponding to the build system targets.
    Such targets are created by calls to :command:`add_executable`,
    :command:`add_library`, and :command:`add_custom_target`, excluding
    imported targets and interface libraries (which do not generate any
    build rules).  Each entry is a JSON object containing members:

    ``name``
      A string specifying the target name.

    ``id``
      A string uniquely identifying the target.  This matches the ``id``
      field in the file referenced by ``jsonFile``.

    ``directoryIndex``
      An unsigned integer 0-based index into the main ``directories`` array
      indicating the build system directory in which the target is defined.

    ``projectIndex``
      An unsigned integer 0-based index into the main ``projects`` array
      indicating the build system project in which the target is defined.

    ``jsonFile``
      A JSON string specifying a path relative to the codemodel file
      to another JSON file containing a
      `"codemodel" version 2 "target" object`_.

"codemodel" version 2 "directory" object
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A codemodel "directory" object is referenced by a `"codemodel" version 2`_
object's ``directories`` array.  Each "directory" object is a JSON object
with members:

``paths``
  A JSON object containing members:

  ``source``
    A string specifying the path to the source directory, represented
    with forward slashes.  If the directory is inside the top-level
    source directory then the path is specified relative to that
    directory (with ``.`` for the top-level source directory itself).
    Otherwise the path is absolute.

  ``build``
    A string specifying the path to the build directory, represented
    with forward slashes.  If the directory is inside the top-level
    build directory then the path is specified relative to that
    directory (with ``.`` for the top-level build directory itself).
    Otherwise the path is absolute.

``installers``
  A JSON array of entries corresponding to :command:`install` rules.
  Each entry is a JSON object containing members:

  ``component``
    A string specifying the component selected by the corresponding
    :command:`install` command invocation.

  ``destination``
    Optional member that is present for specific ``type`` values below.
    The value is a string specifying the install destination path.
    The path may be absolute or relative to the install prefix.

  ``paths``
    Optional member that is present for specific ``type`` values below.
    The value is a JSON array of entries corresponding to the paths
    (files or directories) to be installed.  Each entry is one of:

    * A string specifying the path from which a file or directory
      is to be installed.  The portion of the path not preceded by
      a ``/`` also specifies the path (name) to which the file
      or directory is to be installed under the destination.

    * A JSON object with members:

      ``from``
        A string specifying the path from which a file or directory
        is to be installed.

      ``to``
        A string specifying the path to which the file or directory
        is to be installed under the destination.

    In both cases the paths are represented with forward slashes.  If
    the "from" path is inside the top-level directory documented by the
    corresponding ``type`` value, then the path is specified relative
    to that directory.  Otherwise the path is absolute.

  ``type``
    A string specifying the type of installation rule.  The value is one
    of the following, with some variants providing additional members:

    ``file``
      An :command:`install(FILES)` or :command:`install(PROGRAMS)` call.
      The ``destination`` and ``paths`` members are populated, with paths
      under the top-level *source* directory expressed relative to it.
      The ``isOptional`` member may exist.
      This type has no additional members.

    ``directory``
      An :command:`install(DIRECTORY)` call.
      The ``destination`` and ``paths`` members are populated, with paths
      under the top-level *source* directory expressed relative to it.
      The ``isOptional`` member may exist.
      This type has no additional members.

    ``target``
      An :command:`install(TARGETS)` call.
      The ``destination`` and ``paths`` members are populated, with paths
      under the top-level *build* directory expressed relative to it.
      The ``isOptional`` member may exist.
      This type has additional members ``targetId``, ``targetIndex``,
      ``targetIsImportLibrary``, and ``targetInstallNamelink``.

    ``export``
      An :command:`install(EXPORT)` call.
      The ``destination`` and ``paths`` members are populated, with paths
      under the top-level *build* directory expressed relative to it.
      The ``paths`` entries refer to files generated automatically by
      CMake for installation, and their actual values are considered
      private implementation details.
      This type has additional members ``exportName`` and ``exportTargets``.

    ``script``
      An :command:`install(SCRIPT)` call.
      This type has additional member ``scriptFile``.

    ``code``
      An :command:`install(CODE)` call.
      This type has no additional members.

    ``importedRuntimeArtifacts``
      An :command:`install(IMPORTED_RUNTIME_ARTIFACTS)` call.
      The ``destination`` member is populated. The ``isOptional`` member may
      exist. This type has no additional members.

    ``runtimeDependencySet``
      An :command:`install(RUNTIME_DEPENDENCY_SET)` call or an
      :command:`install(TARGETS)` call with ``RUNTIME_DEPENDENCIES``. The
      ``destination`` member is populated. This type has additional members
      ``runtimeDependencySetName`` and ``runtimeDependencySetType``.

    ``fileSet``
      An :command:`install(TARGETS)` call with ``FILE_SET``.
      The ``destination`` and ``paths`` members are populated.
      The ``isOptional`` member may exist.
      This type has additional members ``fileSetName``, ``fileSetType``,
      ``fileSetDirectories``, and ``fileSetTarget``.

      This type was added in codemodel version 2.4.

  ``isExcludeFromAll``
    Optional member that is present with boolean value ``true`` when
    :command:`install` is called with the ``EXCLUDE_FROM_ALL`` option.

  ``isForAllComponents``
    Optional member that is present with boolean value ``true`` when
    :command:`install(SCRIPT|CODE)` is called with the
    ``ALL_COMPONENTS`` option.

  ``isOptional``
    Optional member that is present with boolean value ``true`` when
    :command:`install` is called with the ``OPTIONAL`` option.
    This is allowed when ``type`` is ``file``, ``directory``, or ``target``.

  ``targetId``
    Optional member that is present when ``type`` is ``target``.
    The value is a string uniquely identifying the target to be installed.
    This matches the ``id`` member of the target in the main
    "codemodel" object's ``targets`` array.

  ``targetIndex``
    Optional member that is present when ``type`` is ``target``.
    The value is an unsigned integer 0-based index into the main "codemodel"
    object's ``targets`` array for the target to be installed.

  ``targetIsImportLibrary``
    Optional member that is present when ``type`` is ``target`` and
    the installer is for a Windows DLL import library file or for an
    AIX linker import file.  If present, it has boolean value ``true``.

  ``targetInstallNamelink``
    Optional member that is present when ``type`` is ``target`` and
    the installer corresponds to a target that may use symbolic links
    to implement the :prop_tgt:`VERSION` and :prop_tgt:`SOVERSION`
    target properties.
    The value is a string indicating how the installer is supposed to
    handle the symlinks: ``skip`` means the installer should skip the
    symlinks and install only the real file, and ``only`` means the
    installer should install only the symlinks and not the real file.
    In all cases the ``paths`` member lists what it actually installs.

  ``exportName``
    Optional member that is present when ``type`` is ``export``.
    The value is a string specifying the name of the export.

  ``exportTargets``
    Optional member that is present when ``type`` is ``export``.
    The value is a JSON array of entries corresponding to the targets
    included in the export.  Each entry is a JSON object with members:

    ``id``
      A string uniquely identifying the target.  This matches
      the ``id`` member of the target in the main "codemodel"
      object's ``targets`` array.

    ``index``
      An unsigned integer 0-based index into the main "codemodel"
      object's ``targets`` array for the target.

  ``runtimeDependencySetName``
    Optional member that is present when ``type`` is ``runtimeDependencySet``
    and the installer was created by an
    :command:`install(RUNTIME_DEPENDENCY_SET)` call. The value is a string
    specifying the name of the runtime dependency set that was installed.

  ``runtimeDependencySetType``
    Optional member that is present when ``type`` is ``runtimeDependencySet``.
    The value is a string with one of the following values:

    ``library``
      Indicates that this installer installs dependencies that are not macOS
      frameworks.

    ``framework``
      Indicates that this installer installs dependencies that are macOS
      frameworks.

  ``fileSetName``
    Optional member that is present when ``type`` is ``fileSet``. The value is
    a string with the name of the file set.

    This field was added in codemodel version 2.4.

  ``fileSetType``
    Optional member that is present when ``type`` is ``fileSet``. The value is
    a string with the type of the file set.

    This field was added in codemodel version 2.4.

  ``fileSetDirectories``
    Optional member that is present when ``type`` is ``fileSet``. The value
    is a list of strings with the file set's base directories (determined by
    genex-evaluation of :prop_tgt:`HEADER_DIRS` or
    :prop_tgt:`HEADER_DIRS_<NAME>`).

    This field was added in codemodel version 2.4.

  ``fileSetTarget``
    Optional member that is present when ``type`` is ``fileSet``. The value
    is a JSON object with members:

    ``id``
      A string uniquely identifying the target.  This matches
      the ``id`` member of the target in the main "codemodel"
      object's ``targets`` array.

    ``index``
      An unsigned integer 0-based index into the main "codemodel"
      object's ``targets`` array for the target.

    This field was added in codemodel version 2.4.

  ``scriptFile``
    Optional member that is present when ``type`` is ``script``.
    The value is a string specifying the path to the script file on disk,
    represented with forward slashes.  If the file is inside the top-level
    source directory then the path is specified relative to that directory.
    Otherwise the path is absolute.

  ``backtrace``
    Optional member that is present when a CMake language backtrace to
    the :command:`install` or other command invocation that added this
    installer is available.  The value is an unsigned integer 0-based
    index into the ``backtraceGraph`` member's ``nodes`` array.

``backtraceGraph``
  A `"codemodel" version 2 "backtrace graph"`_ whose nodes are referenced
  from ``backtrace`` members elsewhere in this "directory" object.

"codemodel" version 2 "target" object
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A codemodel "target" object is referenced by a `"codemodel" version 2`_
object's ``targets`` array.  Each "target" object is a JSON object
with members:

``name``
  A string specifying the logical name of the target.

``id``
  A string uniquely identifying the target.  The format is unspecified
  and should not be interpreted by clients.

``type``
  A string specifying the type of the target.  The value is one of
  ``EXECUTABLE``, ``STATIC_LIBRARY``, ``SHARED_LIBRARY``,
  ``MODULE_LIBRARY``, ``OBJECT_LIBRARY``, ``INTERFACE_LIBRARY``,
  or ``UTILITY``.

``backtrace``
  Optional member that is present when a CMake language backtrace to
  the command in the source code that created the target is available.
  The value is an unsigned integer 0-based index into the
  ``backtraceGraph`` member's ``nodes`` array.

``folder``
  Optional member that is present when the :prop_tgt:`FOLDER` target
  property is set.  The value is a JSON object with one member:

  ``name``
    A string specifying the name of the target folder.

``paths``
  A JSON object containing members:

  ``source``
    A string specifying the path to the target's source directory,
    represented with forward slashes.  If the directory is inside the
    top-level source directory then the path is specified relative to
    that directory (with ``.`` for the top-level source directory itself).
    Otherwise the path is absolute.

  ``build``
    A string specifying the path to the target's build directory,
    represented with forward slashes.  If the directory is inside the
    top-level build directory then the path is specified relative to
    that directory (with ``.`` for the top-level build directory itself).
    Otherwise the path is absolute.

``nameOnDisk``
  Optional member that is present for executable and library targets
  that are linked or archived into a single primary artifact.
  The value is a string specifying the file name of that artifact on disk.

``artifacts``
  Optional member that is present for executable and library targets
  that produce artifacts on disk meant for consumption by dependents.
  The value is a JSON array of entries corresponding to the artifacts.
  Each entry is a JSON object containing one member:

  ``path``
    A string specifying the path to the file on disk, represented with
    forward slashes.  If the file is inside the top-level build directory
    then the path is specified relative to that directory.
    Otherwise the path is absolute.

``isGeneratorProvided``
  Optional member that is present with boolean value ``true`` if the
  target is provided by CMake's build system generator rather than by
  a command in the source code.

``install``
  Optional member that is present when the target has an :command:`install`
  rule.  The value is a JSON object with members:

  ``prefix``
    A JSON object specifying the installation prefix.  It has one member:

    ``path``
      A string specifying the value of :variable:`CMAKE_INSTALL_PREFIX`.

  ``destinations``
    A JSON array of entries specifying an install destination path.
    Each entry is a JSON object with members:

    ``path``
      A string specifying the install destination path.  The path may
      be absolute or relative to the install prefix.

    ``backtrace``
      Optional member that is present when a CMake language backtrace to
      the :command:`install` command invocation that specified this
      destination is available.  The value is an unsigned integer 0-based
      index into the ``backtraceGraph`` member's ``nodes`` array.

``launchers``
  Optional member that is present on executable targets that have
  at least one launcher specified by the project.  The value is a
  JSON array of entries corresponding to the specified launchers.
  Each entry is a JSON object with members:

  ``command``
    A string specifying the path to the launcher on disk, represented
    with forward slashes. If the file is inside the top-level source
    directory then the path is specified relative to that directory.

  ``arguments``
    Optional member that is present when the launcher command has
    arguments preceding the executable to be launched.  The value
    is a JSON array of strings representing the arguments.

  ``type``
    A string specifying the type of launcher.  The value is one of
    the following:

    ``emulator``
      An emulator for the target platform when cross-compiling.
      See the :prop_tgt:`CROSSCOMPILING_EMULATOR` target property.

    ``test``
      A start program for the execution of tests.
      See the :prop_tgt:`TEST_LAUNCHER` target property.

  This field was added in codemodel version 2.7.

``link``
  Optional member that is present for executables and shared library
  targets that link into a runtime binary.  The value is a JSON object
  with members describing the link step:

  ``language``
    A string specifying the language (e.g. ``C``, ``CXX``, ``Fortran``)
    of the toolchain is used to invoke the linker.

  ``commandFragments``
    Optional member that is present when fragments of the link command
    line invocation are available.  The value is a JSON array of entries
    specifying ordered fragments.  Each entry is a JSON object with members:

    ``fragment``
      A string specifying a fragment of the link command line invocation.
      The value is encoded in the build system's native shell format.

    ``role``
      A string specifying the role of the fragment's content:

      * ``flags``: link flags.
      * ``libraries``: link library file paths or flags.
      * ``libraryPath``: library search path flags.
      * ``frameworkPath``: macOS framework search path flags.

  ``lto``
    Optional member that is present with boolean value ``true``
    when link-time optimization (a.k.a. interprocedural optimization
    or link-time code generation) is enabled.

  ``sysroot``
    Optional member that is present when the :variable:`CMAKE_SYSROOT_LINK`
    or :variable:`CMAKE_SYSROOT` variable is defined.  The value is a
    JSON object with one member:

    ``path``
      A string specifying the absolute path to the sysroot, represented
      with forward slashes.

``archive``
  Optional member that is present for static library targets.  The value
  is a JSON object with members describing the archive step:

  ``commandFragments``
    Optional member that is present when fragments of the archiver command
    line invocation are available.  The value is a JSON array of entries
    specifying the fragments.  Each entry is a JSON object with members:

    ``fragment``
      A string specifying a fragment of the archiver command line invocation.
      The value is encoded in the build system's native shell format.

    ``role``
      A string specifying the role of the fragment's content:

      * ``flags``: archiver flags.

  ``lto``
    Optional member that is present with boolean value ``true``
    when link-time optimization (a.k.a. interprocedural optimization
    or link-time code generation) is enabled.

``dependencies``
  Optional member that is present when the target depends on other targets.
  The value is a JSON array of entries corresponding to the dependencies.
  Each entry is a JSON object with members:

  ``id``
    A string uniquely identifying the target on which this target depends.
    This matches the main ``id`` member of the other target.

  ``backtrace``
    Optional member that is present when a CMake language backtrace to
    the :command:`add_dependencies`, :command:`target_link_libraries`,
    or other command invocation that created this dependency is
    available.  The value is an unsigned integer 0-based index into
    the ``backtraceGraph`` member's ``nodes`` array.

``fileSets``
  A JSON array of entries corresponding to the target's file sets. Each entry
  is a JSON object with members:

  ``name``
    A string specifying the name of the file set.

  ``type``
    A string specifying the type of the file set.  See
    :command:`target_sources` supported file set types.

  ``visibility``
    A string specifying the visibility of the file set; one of ``PUBLIC``,
    ``PRIVATE``, or ``INTERFACE``.

  ``baseDirectories``
    A JSON array of strings, each specifying a base directory containing
    sources in the file set.  If the directory is inside the top-level source
    directory then the path is specified relative to that directory.
    Otherwise the path is absolute.

  This field was added in codemodel version 2.5.

``sources``
  A JSON array of entries corresponding to the target's source files.
  Each entry is a JSON object with members:

  ``path``
    A string specifying the path to the source file on disk, represented
    with forward slashes.  If the file is inside the top-level source
    directory then the path is specified relative to that directory.
    Otherwise the path is absolute.

  ``compileGroupIndex``
    Optional member that is present when the source is compiled.
    The value is an unsigned integer 0-based index into the
    ``compileGroups`` array.

  ``sourceGroupIndex``
    Optional member that is present when the source is part of a source
    group either via the :command:`source_group` command or by default.
    The value is an unsigned integer 0-based index into the
    ``sourceGroups`` array.

  ``isGenerated``
    Optional member that is present with boolean value ``true`` if
    the source is :prop_sf:`GENERATED`.

  ``fileSetIndex``
    Optional member that is present when the source is part of a file set.
    The value is an unsigned integer 0-based index into the ``fileSets``
    array.

    This field was added in codemodel version 2.5.

  ``backtrace``
    Optional member that is present when a CMake language backtrace to
    the :command:`target_sources`, :command:`add_executable`,
    :command:`add_library`, :command:`add_custom_target`, or other
    command invocation that added this source to the target is
    available.  The value is an unsigned integer 0-based index into
    the ``backtraceGraph`` member's ``nodes`` array.

``sourceGroups``
  Optional member that is present when sources are grouped together by
  the :command:`source_group` command or by default.  The value is a
  JSON array of entries corresponding to the groups.  Each entry is
  a JSON object with members:

  ``name``
    A string specifying the name of the source group.

  ``sourceIndexes``
    A JSON array listing the sources belonging to the group.
    Each entry is an unsigned integer 0-based index into the
    main ``sources`` array for the target.

``compileGroups``
  Optional member that is present when the target has sources that compile.
  The value is a JSON array of entries corresponding to groups of sources
  that all compile with the same settings.  Each entry is a JSON object
  with members:

  ``sourceIndexes``
    A JSON array listing the sources belonging to the group.
    Each entry is an unsigned integer 0-based index into the
    main ``sources`` array for the target.

  ``language``
    A string specifying the language (e.g. ``C``, ``CXX``, ``Fortran``)
    of the toolchain is used to compile the source file.

  ``languageStandard``
    Optional member that is present when the language standard is set
    explicitly (e.g. via :prop_tgt:`CXX_STANDARD`) or implicitly by
    compile features.  Each entry is a JSON object with two members:

    ``backtraces``
      Optional member that is present when a CMake language backtrace to
      the ``<LANG>_STANDARD`` setting is available.  If the language
      standard was set implicitly by compile features those are used as
      the backtrace(s).  It's possible for multiple compile features to
      require the same language standard so there could be multiple
      backtraces. The value is a JSON array with each entry being an
      unsigned integer 0-based index into the ``backtraceGraph``
      member's ``nodes`` array.

    ``standard``
      String representing the language standard.

    This field was added in codemodel version 2.2.

  ``compileCommandFragments``
    Optional member that is present when fragments of the compiler command
    line invocation are available.  The value is a JSON array of entries
    specifying ordered fragments.  Each entry is a JSON object with
    one member:

    ``fragment``
      A string specifying a fragment of the compile command line invocation.
      The value is encoded in the build system's native shell format.

  ``includes``
    Optional member that is present when there are include directories.
    The value is a JSON array with an entry for each directory.  Each
    entry is a JSON object with members:

    ``path``
      A string specifying the path to the include directory,
      represented with forward slashes.

    ``isSystem``
      Optional member that is present with boolean value ``true`` if
      the include directory is marked as a system include directory.

    ``backtrace``
      Optional member that is present when a CMake language backtrace to
      the :command:`target_include_directories` or other command invocation
      that added this include directory is available.  The value is
      an unsigned integer 0-based index into the ``backtraceGraph``
      member's ``nodes`` array.

  ``frameworks``
    Optional member that is present when, on Apple platforms, there are
    frameworks. The value is a JSON array with an entry for each directory.
    Each entry is a JSON object with members:

    ``path``
      A string specifying the path to the framework directory,
      represented with forward slashes.

    ``isSystem``
      Optional member that is present with boolean value ``true`` if
      the framework is marked as a system one.

    ``backtrace``
      Optional member that is present when a CMake language backtrace to
      the :command:`target_link_libraries` or other command invocation
      that added this framework is available.  The value is
      an unsigned integer 0-based index into the ``backtraceGraph``
      member's ``nodes`` array.

    This field was added in codemodel version 2.6.

  ``precompileHeaders``
    Optional member that is present when :command:`target_precompile_headers`
    or other command invocations set :prop_tgt:`PRECOMPILE_HEADERS` on the
    target.  The value is a JSON array with an entry for each header.  Each
    entry is a JSON object with members:

    ``header``
      Full path to the precompile header file.

    ``backtrace``
      Optional member that is present when a CMake language backtrace to
      the :command:`target_precompile_headers` or other command invocation
      that added this precompiled header is available.  The value is an
      unsigned integer 0-based index into the ``backtraceGraph`` member's
      ``nodes`` array.

    This field was added in codemodel version 2.1.

  ``defines``
    Optional member that is present when there are preprocessor definitions.
    The value is a JSON array with an entry for each definition.  Each
    entry is a JSON object with members:

    ``define``
      A string specifying the preprocessor definition in the format
      ``<name>[=<value>]``, e.g. ``DEF`` or ``DEF=1``.

    ``backtrace``
      Optional member that is present when a CMake language backtrace to
      the :command:`target_compile_definitions` or other command invocation
      that added this preprocessor definition is available.  The value is
      an unsigned integer 0-based index into the ``backtraceGraph``
      member's ``nodes`` array.

  ``sysroot``
    Optional member that is present when the
    :variable:`CMAKE_SYSROOT_COMPILE` or :variable:`CMAKE_SYSROOT`
    variable is defined.  The value is a JSON object with one member:

    ``path``
      A string specifying the absolute path to the sysroot, represented
      with forward slashes.

``backtraceGraph``
  A `"codemodel" version 2 "backtrace graph"`_ whose nodes are referenced
  from ``backtrace`` members elsewhere in this "target" object.

"codemodel" version 2 "backtrace graph"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ``backtraceGraph`` member of a `"codemodel" version 2 "directory" object`_,
or `"codemodel" version 2 "target" object`_ is a JSON object describing a
graph of backtraces.  Its nodes are referenced from ``backtrace`` members
elsewhere in the containing object.  The backtrace graph object members are:

``nodes``
  A JSON array listing nodes in the backtrace graph.  Each entry
  is a JSON object with members:

  ``file``
    An unsigned integer 0-based index into the backtrace ``files`` array.

  ``line``
    An optional member present when the node represents a line within
    the file.  The value is an unsigned integer 1-based line number.

  ``command``
    An optional member present when the node represents a command
    invocation within the file.  The value is an unsigned integer
    0-based index into the backtrace ``commands`` array.

  ``parent``
    An optional member present when the node is not the bottom of
    the call stack.  The value is an unsigned integer 0-based index
    of another entry in the backtrace ``nodes`` array.

``commands``
  A JSON array listing command names referenced by backtrace nodes.
  Each entry is a string specifying a command name.

``files``
  A JSON array listing CMake language files referenced by backtrace nodes.
  Each entry is a string specifying the path to a file, represented
  with forward slashes.  If the file is inside the top-level source
  directory then the path is specified relative to that directory.
  Otherwise the path is absolute.

.. _`file-api configureLog`:

Object Kind "configureLog"
--------------------------

The ``configureLog`` object kind describes the location and contents of
a :manual:`cmake-configure-log(7)` file.

There is only one ``configureLog`` object major version, version 1.

"configureLog" version 1
^^^^^^^^^^^^^^^^^^^^^^^^

``configureLog`` object version 1 is a JSON object:

.. code-block:: json

  {
    "kind": "configureLog",
    "version": { "major": 1, "minor": 0 },
    "path": "/path/to/top-level-build-dir/CMakeFiles/CMakeConfigureLog.yaml",
    "eventKindNames": [ "try_compile-v1", "try_run-v1" ]
  }

The members specific to ``configureLog`` objects are:

``path``
  A string specifying the path to the configure log file.
  Clients must read the log file from this path, which may be
  different than the path documented by :manual:`cmake-configure-log(7)`.
  The log file may not exist if no events are logged.

``eventKindNames``
  A JSON array whose entries are each a JSON string naming one
  of the :manual:`cmake-configure-log(7)` versioned event kinds.
  At most one version of each configure log event kind will be listed.
  Although the configure log may contain other (versioned) event kinds,
  clients must ignore those that are not listed in this field.

Object Kind "cache"
-------------------

The ``cache`` object kind lists cache entries.  These are the
:ref:`CMake Language Variables` stored in the persistent cache
(``CMakeCache.txt``) for the build tree.

There is only one ``cache`` object major version, version 2.
Version 1 does not exist to avoid confusion with that from
:manual:`cmake-server(7)` mode.

"cache" version 2
^^^^^^^^^^^^^^^^^

``cache`` object version 2 is a JSON object:

.. code-block:: json

  {
    "kind": "cache",
    "version": { "major": 2, "minor": 0 },
    "entries": [
      {
        "name": "BUILD_SHARED_LIBS",
        "value": "ON",
        "type": "BOOL",
        "properties": [
          {
            "name": "HELPSTRING",
            "value": "Build shared libraries"
          }
        ]
      },
      {
        "name": "CMAKE_GENERATOR",
        "value": "Unix Makefiles",
        "type": "INTERNAL",
        "properties": [
          {
            "name": "HELPSTRING",
            "value": "Name of generator."
          }
        ]
      }
    ]
  }

The members specific to ``cache`` objects are:

``entries``
  A JSON array whose entries are each a JSON object specifying a
  cache entry.  The members of each entry are:

  ``name``
    A string specifying the name of the entry.

  ``value``
    A string specifying the value of the entry.

  ``type``
    A string specifying the type of the entry used by
    :manual:`cmake-gui(1)` to choose a widget for editing.

  ``properties``
    A JSON array of entries specifying associated
    :ref:`cache entry properties <Cache Entry Properties>`.
    Each entry is a JSON object containing members:

    ``name``
      A string specifying the name of the cache entry property.

    ``value``
      A string specifying the value of the cache entry property.

Object Kind "cmakeFiles"
------------------------

The ``cmakeFiles`` object kind lists files used by CMake while
configuring and generating the build system.  These include the
``CMakeLists.txt`` files as well as included ``.cmake`` files.

There is only one ``cmakeFiles`` object major version, version 1.

"cmakeFiles" version 1
^^^^^^^^^^^^^^^^^^^^^^

``cmakeFiles`` object version 1 is a JSON object:

.. code-block:: json

  {
    "kind": "cmakeFiles",
    "version": { "major": 1, "minor": 0 },
    "paths": {
      "build": "/path/to/top-level-build-dir",
      "source": "/path/to/top-level-source-dir"
    },
    "inputs": [
      {
        "path": "CMakeLists.txt"
      },
      {
        "isGenerated": true,
        "path": "/path/to/top-level-build-dir/.../CMakeSystem.cmake"
      },
      {
        "isExternal": true,
        "path": "/path/to/external/third-party/module.cmake"
      },
      {
        "isCMake": true,
        "isExternal": true,
        "path": "/path/to/cmake/Modules/CMakeGenericSystem.cmake"
      }
    ]
  }

The members specific to ``cmakeFiles`` objects are:

``paths``
  A JSON object containing members:

  ``source``
    A string specifying the absolute path to the top-level source directory,
    represented with forward slashes.

  ``build``
    A string specifying the absolute path to the top-level build directory,
    represented with forward slashes.

``inputs``
  A JSON array whose entries are each a JSON object specifying an input
  file used by CMake when configuring and generating the build system.
  The members of each entry are:

  ``path``
    A string specifying the path to an input file to CMake, represented
    with forward slashes.  If the file is inside the top-level source
    directory then the path is specified relative to that directory.
    Otherwise the path is absolute.

  ``isGenerated``
    Optional member that is present with boolean value ``true``
    if the path specifies a file that is under the top-level
    build directory and the build is out-of-source.
    This member is not available on in-source builds.

  ``isExternal``
    Optional member that is present with boolean value ``true``
    if the path specifies a file that is not under the top-level
    source or build directories.

  ``isCMake``
    Optional member that is present with boolean value ``true``
    if the path specifies a file in the CMake installation.

Object Kind "toolchains"
------------------------

The ``toolchains`` object kind lists properties of the toolchains used during
the build.  These include the language, compiler path, ID, and version.

There is only one ``toolchains`` object major version, version 1.

"toolchains" version 1
^^^^^^^^^^^^^^^^^^^^^^

``toolchains`` object version 1 is a JSON object:

.. code-block:: json

  {
    "kind": "toolchains",
    "version": { "major": 1, "minor": 0 },
    "toolchains": [
      {
        "language": "C",
        "compiler": {
          "path": "/usr/bin/cc",
          "id": "GNU",
          "version": "9.3.0",
          "implicit": {
            "includeDirectories": [
              "/usr/lib/gcc/x86_64-linux-gnu/9/include",
              "/usr/local/include",
              "/usr/include/x86_64-linux-gnu",
              "/usr/include"
            ],
            "linkDirectories": [
              "/usr/lib/gcc/x86_64-linux-gnu/9",
              "/usr/lib/x86_64-linux-gnu",
              "/usr/lib",
              "/lib/x86_64-linux-gnu",
              "/lib"
            ],
            "linkFrameworkDirectories": [],
            "linkLibraries": [ "gcc", "gcc_s", "c", "gcc", "gcc_s" ]
          }
        },
        "sourceFileExtensions": [ "c", "m" ]
      },
      {
        "language": "CXX",
        "compiler": {
          "path": "/usr/bin/c++",
          "id": "GNU",
          "version": "9.3.0",
          "implicit": {
            "includeDirectories": [
              "/usr/include/c++/9",
              "/usr/include/x86_64-linux-gnu/c++/9",
              "/usr/include/c++/9/backward",
              "/usr/lib/gcc/x86_64-linux-gnu/9/include",
              "/usr/local/include",
              "/usr/include/x86_64-linux-gnu",
              "/usr/include"
            ],
            "linkDirectories": [
              "/usr/lib/gcc/x86_64-linux-gnu/9",
              "/usr/lib/x86_64-linux-gnu",
              "/usr/lib",
              "/lib/x86_64-linux-gnu",
              "/lib"
            ],
            "linkFrameworkDirectories": [],
            "linkLibraries": [
              "stdc++", "m", "gcc_s", "gcc", "c", "gcc_s", "gcc"
            ]
          }
        },
        "sourceFileExtensions": [
          "C", "M", "c++", "cc", "cpp", "cxx", "mm", "CPP"
        ]
      }
    ]
  }

The members specific to ``toolchains`` objects are:

``toolchains``
  A JSON array whose entries are each a JSON object specifying a toolchain
  associated with a particular language. The members of each entry are:

  ``language``
    A JSON string specifying the toolchain language, like C or CXX. Language
    names are the same as language names that can be passed to the
    :command:`project` command. Because CMake only supports a single toolchain
    per language, this field can be used as a key.

  ``compiler``
    A JSON object containing members:

    ``path``
      Optional member that is present when the
      :variable:`CMAKE_<LANG>_COMPILER` variable is defined for the current
      language. Its value is a JSON string holding the path to the compiler.

    ``id``
      Optional member that is present when the
      :variable:`CMAKE_<LANG>_COMPILER_ID` variable is defined for the current
      language. Its value is a JSON string holding the ID (GNU, MSVC, etc.) of
      the compiler.

    ``version``
      Optional member that is present when the
      :variable:`CMAKE_<LANG>_COMPILER_VERSION` variable is defined for the
      current language. Its value is a JSON string holding the version of the
      compiler.

    ``target``
      Optional member that is present when the
      :variable:`CMAKE_<LANG>_COMPILER_TARGET` variable is defined for the
      current language. Its value is a JSON string holding the cross-compiling
      target of the compiler.

    ``implicit``
      A JSON object containing members:

      ``includeDirectories``
        Optional member that is present when the
        :variable:`CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES` variable is
        defined for the current language. Its value is a JSON array of JSON
        strings where each string holds a path to an implicit include
        directory for the compiler.

      ``linkDirectories``
        Optional member that is present when the
        :variable:`CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES` variable is
        defined for the current language. Its value is a JSON array of JSON
        strings where each string holds a path to an implicit link directory
        for the compiler.

      ``linkFrameworkDirectories``
        Optional member that is present when the
        :variable:`CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES` variable
        is defined for the current language. Its value is a JSON array of JSON
        strings where each string holds a path to an implicit link framework
        directory for the compiler.

      ``linkLibraries``
        Optional member that is present when the
        :variable:`CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES` variable is defined
        for the current language. Its value is a JSON array of JSON strings
        where each string holds a path to an implicit link library for the
        compiler.

  ``sourceFileExtensions``
    Optional member that is present when the
    :variable:`CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS` variable is defined for
    the current language. Its value is a JSON array of JSON strings where each
    each string holds a file extension (without the leading dot) for the
    language.



/P/🚀 manual/cmake-generator-expressions.7.rst
============================================================


.. cmake-manual-description: CMake Generator Expressions

cmake-generator-expressions(7)
******************************

Introduction
============

Generator expressions are evaluated during build system generation to produce
information specific to each build configuration.  They have the form
``$<...>``.  For example:

.. code-block:: cmake

  target_include_directories(tgt PRIVATE /opt/include/$<CXX_COMPILER_ID>)

This would expand to ``/opt/include/GNU``, ``/opt/include/Clang``, etc.
depending on the C++ compiler used.

Generator expressions are allowed in the context of many target properties,
such as :prop_tgt:`LINK_LIBRARIES`, :prop_tgt:`INCLUDE_DIRECTORIES`,
:prop_tgt:`COMPILE_DEFINITIONS` and others.  They may also be used when using
commands to populate those properties, such as :command:`target_link_libraries`,
:command:`target_include_directories`, :command:`target_compile_definitions`
and others.  They enable conditional linking, conditional definitions used when
compiling, conditional include directories, and more.  The conditions may be
based on the build configuration, target properties, platform information,
or any other queryable information.

Generator expressions can be nested:

.. code-block:: cmake

  target_compile_definitions(tgt PRIVATE
    $<$<VERSION_LESS:$<CXX_COMPILER_VERSION>,4.2.0>:OLD_COMPILER>
  )

The above would expand to ``OLD_COMPILER`` if the
:variable:`CMAKE_CXX_COMPILER_VERSION <CMAKE_<LANG>_COMPILER_VERSION>` is less
than 4.2.0.

Whitespace And Quoting
======================

Generator expressions are typically parsed after command arguments.
If a generator expression contains spaces, new lines, semicolons or
other characters that may be interpreted as command argument separators,
the whole expression should be surrounded by quotes when passed to a
command.  Failure to do so may result in the expression being split and
it may no longer be recognized as a generator expression.

When using :command:`add_custom_command` or :command:`add_custom_target`,
use the ``VERBATIM`` and ``COMMAND_EXPAND_LISTS`` options to obtain robust
argument splitting and quoting.

.. code-block:: cmake

  # WRONG: Embedded space will be treated as an argument separator.
  # This ends up not being seen as a generator expression at all.
  add_custom_target(run_some_tool
    COMMAND some_tool -I$<JOIN:$<TARGET_PROPERTY:tgt,INCLUDE_DIRECTORIES>, -I>
    VERBATIM
  )

.. code-block:: cmake

  # Better, but still not robust. Quotes prevent the space from splitting the
  # expression. However, the tool will receive the expanded value as a single
  # argument.
  add_custom_target(run_some_tool
    COMMAND some_tool "-I$<JOIN:$<TARGET_PROPERTY:tgt,INCLUDE_DIRECTORIES>, -I>"
    VERBATIM
  )

.. code-block:: cmake

  # Nearly correct. Using a semicolon to separate arguments and adding the
  # COMMAND_EXPAND_LISTS option means that paths with spaces will be handled
  # correctly. Quoting the whole expression ensures it is seen as a generator
  # expression. But if the target property is empty, we will get a bare -I
  # with nothing after it.
  add_custom_target(run_some_tool
    COMMAND some_tool "-I$<JOIN:$<TARGET_PROPERTY:tgt,INCLUDE_DIRECTORIES>,;-I>"
    COMMAND_EXPAND_LISTS
    VERBATIM
  )

Using variables to build up a more complex generator expression is also a
good way to reduce errors and improve readability.  The above example can be
improved further like so:

.. code-block:: cmake

  # The $<BOOL:...> check prevents adding anything if the property is empty,
  # assuming the property value cannot be one of CMake's false constants.
  set(prop "$<TARGET_PROPERTY:tgt,INCLUDE_DIRECTORIES>")
  add_custom_target(run_some_tool
    COMMAND some_tool "$<$<BOOL:${prop}>:-I$<JOIN:${prop},;-I>>"
    COMMAND_EXPAND_LISTS
    VERBATIM
  )

Finally, the above example can be expressed in a more simple and robust way
using an alternate generator expression:

.. code-block:: cmake

  add_custom_target(run_some_tool
    COMMAND some_tool "$<LIST:TRANSFORM,$<TARGET_PROPERTY:tgt,INCLUDE_DIRECTORIES>,PREPEND,-I>"
    COMMAND_EXPAND_LISTS
    VERBATIM
  )

A common mistake is to try to split a generator expression across multiple
lines with indenting:

.. code-block:: cmake

  # WRONG: New lines and spaces all treated as argument separators, so the
  # generator expression is split and not recognized correctly.
  target_compile_definitions(tgt PRIVATE
    $<$<AND:
        $<CXX_COMPILER_ID:GNU>,
        $<VERSION_GREATER_EQUAL:$<CXX_COMPILER_VERSION>,5>
      >:HAVE_5_OR_LATER>
  )

Again, use helper variables with well-chosen names to build up a readable
expression instead:

.. code-block:: cmake

  set(is_gnu "$<CXX_COMPILER_ID:GNU>")
  set(v5_or_later "$<VERSION_GREATER_EQUAL:$<CXX_COMPILER_VERSION>,5>")
  set(meet_requirements "$<AND:${is_gnu},${v5_or_later}>")
  target_compile_definitions(tgt PRIVATE
    "$<${meet_requirements}:HAVE_5_OR_LATER>"
  )

Debugging
=========

Since generator expressions are evaluated during generation of the buildsystem,
and not during processing of ``CMakeLists.txt`` files, it is not possible to
inspect their result with the :command:`message()` command.  One possible way
to generate debug messages is to add a custom target:

.. code-block:: cmake

  add_custom_target(genexdebug COMMAND ${CMAKE_COMMAND} -E echo "$<...>")

After running :program:`cmake`, you can then build the ``genexdebug`` target to print
the result of the ``$<...>`` expression (i.e. run the command
:option:`cmake --build ... --target genexdebug <cmake--build --target>`).

Another way is to write debug messages to a file with :command:`file(GENERATE)`:

.. code-block:: cmake

  file(GENERATE OUTPUT filename CONTENT "$<...>")

Generator Expression Reference
==============================

.. note::

  This reference deviates from most of the CMake documentation in that it
  omits angular brackets ``<...>`` around placeholders like ``condition``,
  ``string``, ``target``, etc.  This is to prevent an opportunity for those
  placeholders to be misinterpreted as generator expressions.

.. _`Conditional Generator Expressions`:

Conditional Expressions
-----------------------

A fundamental category of generator expressions relates to conditional logic.
Two forms of conditional generator expressions are supported:

.. genex:: $<condition:true_string>

  Evaluates to ``true_string`` if ``condition`` is ``1``, or an empty string
  if ``condition`` evaluates to ``0``.  Any other value for ``condition``
  results in an error.

.. genex:: $<IF:condition,true_string,false_string>

  .. versionadded:: 3.8

  Evaluates to ``true_string`` if ``condition`` is ``1``, or ``false_string``
  if ``condition`` is ``0``.  Any other value for ``condition`` results in an
  error.

  .. versionadded:: 3.28

    This generator expression short-circuits such that generator expressions in
    ``false_string`` will not evaluate when ``condition`` is ``1``, and generator
    expressions in ``true_string`` will not evaluate when condition is ``0``.

Typically, the ``condition`` is itself a generator expression.  For instance,
the following expression expands to ``DEBUG_MODE`` when the ``Debug``
configuration is used, and the empty string for all other configurations:

.. code-block:: cmake

  $<$<CONFIG:Debug>:DEBUG_MODE>

Boolean-like ``condition`` values other than ``1`` or ``0`` can be handled
by wrapping them with the ``$<BOOL:...>`` generator expression:

.. genex:: $<BOOL:string>

  Converts ``string`` to ``0`` or ``1``. Evaluates to ``0`` if any of the
  following is true:

  * ``string`` is empty,
  * ``string`` is a case-insensitive equal of
    ``0``, ``FALSE``, ``OFF``, ``N``, ``NO``, ``IGNORE``, or ``NOTFOUND``, or
  * ``string`` ends in the suffix ``-NOTFOUND`` (case-sensitive).

  Otherwise evaluates to ``1``.

The ``$<BOOL:...>`` generator expression is often used when a ``condition``
is provided by a CMake variable:

.. code-block:: cmake

  $<$<BOOL:${HAVE_SOME_FEATURE}>:-DENABLE_SOME_FEATURE>


.. _`Boolean Generator Expressions`:

Logical Operators
-----------------

The common boolean logic operators are supported:

.. genex:: $<AND:conditions>

  where ``conditions`` is a comma-separated list of boolean expressions,
  all of which must evaluate to either ``1`` or ``0``.  The whole expression
  evaluates to ``1`` if all conditions are ``1``.  If any condition is ``0``,
  the whole expression evaluates to ``0``.

.. genex:: $<OR:conditions>

  where ``conditions`` is a comma-separated list of boolean expressions.
  all of which must evaluate to either ``1`` or ``0``.  The whole expression
  evaluates to ``1`` if at least one of the ``conditions`` is ``1``.  If all
  ``conditions`` evaluate to ``0``, the whole expression evaluates to ``0``.

.. genex:: $<NOT:condition>

  ``condition`` must be ``0`` or ``1``.  The result of the expression is
  ``0`` if ``condition`` is ``1``, else ``1``.

.. versionadded:: 3.28

  Logical operators short-circuit such that generator expressions in the
  arguments list will not be evaluated once a return value can be determined.

.. _`Comparison Expressions`:

Primary Comparison Expressions
------------------------------

CMake supports a variety of generator expressions that compare things.
This section covers the primary and most widely used comparison types.
Other more specific comparison types are documented in their own separate
sections further below.

String Comparisons
^^^^^^^^^^^^^^^^^^

.. genex:: $<STREQUAL:string1,string2>

  ``1`` if ``string1`` and ``string2`` are equal, else ``0``.
  The comparison is case-sensitive.  For a case-insensitive comparison,
  combine with a :ref:`string transforming generator expression
  <String Transforming Generator Expressions>`.  For example, the following
  evaluates to ``1`` if ``${foo}`` is any of ``BAR``, ``Bar``, ``bar``, etc.

  .. code-block:: cmake

    $<STREQUAL:$<UPPER_CASE:${foo}>,BAR>

.. genex:: $<EQUAL:value1,value2>

  ``1`` if ``value1`` and ``value2`` are numerically equal, else ``0``.

Version Comparisons
^^^^^^^^^^^^^^^^^^^

.. genex:: $<VERSION_LESS:v1,v2>

  ``1`` if ``v1`` is a version less than ``v2``, else ``0``.

.. genex:: $<VERSION_GREATER:v1,v2>

  ``1`` if ``v1`` is a version greater than ``v2``, else ``0``.

.. genex:: $<VERSION_EQUAL:v1,v2>

  ``1`` if ``v1`` is the same version as ``v2``, else ``0``.

.. genex:: $<VERSION_LESS_EQUAL:v1,v2>

  .. versionadded:: 3.7

  ``1`` if ``v1`` is a version less than or equal to ``v2``, else ``0``.

.. genex:: $<VERSION_GREATER_EQUAL:v1,v2>

  .. versionadded:: 3.7

  ``1`` if ``v1`` is a version greater than or equal to ``v2``, else ``0``.

.. _`String Transforming Generator Expressions`:

String Transformations
----------------------

.. genex:: $<LOWER_CASE:string>

  Content of ``string`` converted to lower case.

.. genex:: $<UPPER_CASE:string>

  Content of ``string`` converted to upper case.

.. genex:: $<MAKE_C_IDENTIFIER:...>

  Content of ``...`` converted to a C identifier.  The conversion follows the
  same behavior as :command:`string(MAKE_C_IDENTIFIER)`.

List Expressions
----------------

Most of the expressions in this section are closely associated with the
:command:`list` command, providing the same capabilities, but in
the form of a generator expression.

In each of the following list-related generator expressions, the ``list``
must not contain any commas if that generator expression expects something to
be provided after the ``list``.  For example, the expression
``$<LIST:FIND,list,value>`` requires a ``value`` after the ``list``.
Since a comma is used to separate the ``list`` and the ``value``, the ``list``
cannot itself contain a comma.  This restriction does not apply to the
:command:`list` command, it is specific to the list-handling generator
expressions only.

.. _GenEx List Comparisons:

List Comparisons
^^^^^^^^^^^^^^^^

.. genex:: $<IN_LIST:string,list>

  .. versionadded:: 3.12

  ``1`` if ``string`` is an item in the semicolon-separated ``list``, else ``0``.
  It uses case-sensitive comparisons.

.. _GenEx List Queries:

List Queries
^^^^^^^^^^^^

.. genex:: $<LIST:LENGTH,list>

  .. versionadded:: 3.27

  The number of items in the ``list``.

.. genex:: $<LIST:GET,list,index,...>

  .. versionadded:: 3.27

  Expands to the list of items specified by indices from the ``list``.

.. genex:: $<LIST:SUBLIST,list,begin,length>

  .. versionadded:: 3.27

  A sublist of the given ``list``.  If ``length`` is 0, an empty list
  will be returned.  If ``length`` is -1 or the list is smaller than
  ``begin + length``, the remaining items of the list starting at
  ``begin`` will be returned.

.. genex:: $<LIST:FIND,list,value>

  .. versionadded:: 3.27

  The index of the first item in ``list`` with the specified ``value``,
  or -1 if ``value`` is not in the ``list``.

.. _GenEx List Transformations:

List Transformations
^^^^^^^^^^^^^^^^^^^^

.. _GenEx LIST-JOIN:

.. genex:: $<LIST:JOIN,list,glue>

  .. versionadded:: 3.27

  Converts ``list`` to a single string with the content of the ``glue`` string
  inserted between each item.  This is conceptually the same operation as
  :genex:`$<JOIN:list,glue>`, but the two have different behavior with regard
  to empty items.  ``$<LIST:JOIN,list,glue>`` preserves all empty items,
  whereas :genex:`$<JOIN:list,glue>` drops all empty items from the list.

.. genex:: $<LIST:APPEND,list,item,...>

  .. versionadded:: 3.27

  The ``list`` with each ``item`` appended.  Multiple items should be
  separated by commas.

.. genex:: $<LIST:PREPEND,list,item,...>

  .. versionadded:: 3.27

  The ``list`` with each ``item`` inserted at the beginning.  If there are
  multiple items, they should be separated by commas, and the order of the
  prepended items will be preserved.

.. genex:: $<LIST:INSERT,list,index,item,...>

  .. versionadded:: 3.27

  The ``list`` with the ``item`` (or multiple items) inserted at the specified
  ``index``.  Multiple items should be separated by commas.

  It is an error to specify an out-of-range ``index``. Valid indexes are 0 to N,
  where N is the length of the list, inclusive. An empty list has length 0.

.. genex:: $<LIST:POP_BACK,list>

  .. versionadded:: 3.27

  The ``list`` with the last item removed.

.. genex:: $<LIST:POP_FRONT,list>

  .. versionadded:: 3.27

  The ``list`` with the first item removed.

.. genex:: $<LIST:REMOVE_ITEM,list,value,...>

  .. versionadded:: 3.27

  The ``list`` with all instances of the given ``value`` (or values) removed.
  If multiple values are given, they should be separated by commas.

.. genex:: $<LIST:REMOVE_AT,list,index,...>

  .. versionadded:: 3.27

  The ``list`` with the item at each given ``index`` removed.

.. _GenEx LIST-REMOVE_DUPLICATES:

.. genex:: $<LIST:REMOVE_DUPLICATES,list>

  .. versionadded:: 3.27

  The ``list`` with all duplicated items removed.  The relative order of
  items is preserved, but if duplicates are encountered, only the first
  instance is preserved.  The result is the same as
  :genex:`$<REMOVE_DUPLICATES:list>`.

.. _GenEx LIST-FILTER:

.. genex:: $<LIST:FILTER,list,INCLUDE|EXCLUDE,regex>

  .. versionadded:: 3.27

  A list of items from the ``list`` which match (``INCLUDE``) or do not match
  (``EXCLUDE``) the regular expression ``regex``.  The result is the same as
  :genex:`$<FILTER:list,INCLUDE|EXCLUDE,regex>`.

.. genex:: $<LIST:TRANSFORM,list,ACTION[,SELECTOR]>

  .. versionadded:: 3.27

  The ``list`` transformed by applying an ``ACTION`` to all or, by
  specifying a ``SELECTOR``, to the selected list items.

  .. note::

    The ``TRANSFORM`` sub-command does not change the number of items in the
    list. If a ``SELECTOR`` is specified, only some items will be changed,
    the other ones will remain the same as before the transformation.

  ``ACTION`` specifies the action to apply to the items of the list.
  The actions have exactly the same semantics as for the
  :command:`list(TRANSFORM)` command.  ``ACTION`` must be one of the following:

    :command:`APPEND <list(TRANSFORM_APPEND)>`, :command:`PREPEND <list(TRANSFORM_APPEND)>`
      Append, prepend specified value to each item of the list.

      .. code-block:: cmake

        $<LIST:TRANSFORM,list,(APPEND|PREPEND),value[,SELECTOR]>

    :command:`TOLOWER <list(TRANSFORM_TOLOWER)>`, :command:`TOUPPER <list(TRANSFORM_TOLOWER)>`
      Convert each item of the list to lower, upper characters.

      .. code-block:: cmake

        $<LIST:TRANSFORM,list,(TOLOWER|TOUPPER)[,SELECTOR]>

    :command:`STRIP <list(TRANSFORM_STRIP)>`
      Remove leading and trailing spaces from each item of the list.

      .. code-block:: cmake

        $<LIST:TRANSFORM,list,STRIP[,SELECTOR]>

    :command:`REPLACE <list(TRANSFORM_REPLACE)>`:
      Match the regular expression as many times as possible and substitute
      the replacement expression for the match for each item of the list.

      .. code-block:: cmake

        $<LIST:TRANSFORM,list,REPLACE,regular_expression,replace_expression[,SELECTOR]>

  ``SELECTOR`` determines which items of the list will be transformed.
  Only one type of selector can be specified at a time. When given,
  ``SELECTOR`` must be one of the following:

    ``AT``
      Specify a list of indexes.

      .. code-block:: cmake

        $<LIST:TRANSFORM,list,ACTION,AT,index[,index...]>

    ``FOR``
      Specify a range with, optionally, an increment used to iterate over the
      range.

      .. code-block:: cmake

        $<LIST:TRANSFORM,list,ACTION,FOR,start,stop[,step]>

    ``REGEX``
      Specify a regular expression.
      Only items matching the regular expression will be transformed.

      .. code-block:: cmake

        $<LIST:TRANSFORM,list,ACTION,REGEX,regular_expression>

.. genex:: $<JOIN:list,glue>

  Joins the ``list`` with the content of the ``glue`` string inserted between
  each item.  This is conceptually the same operation as
  :ref:`$\<LIST:JOIN,list,glue\> <GenEx LIST-JOIN>`, but the two have
  different behavior with regard to empty items.
  :ref:`$\<LIST:JOIN,list,glue\> <GenEx LIST-JOIN>` preserves all empty items,
  whereas ``$<JOIN,list,glue>`` drops all empty items from the list.

.. genex:: $<REMOVE_DUPLICATES:list>

  .. versionadded:: 3.15

  Removes duplicated items in the given ``list``. The relative order of items
  is preserved, and if duplicates are encountered, only the first instance is
  retained.  The result is the same as
  :ref:`$\<LIST:REMOVE_DUPLICATES,list\> <GenEx LIST-REMOVE_DUPLICATES>`.

.. genex:: $<FILTER:list,INCLUDE|EXCLUDE,regex>

  .. versionadded:: 3.15

  Includes or removes items from ``list`` that match the regular expression
  ``regex``.  The result is the same as
  :ref:`$\<LIST:FILTER,list,INCLUDE|EXCLUDE,regex\> <GenEx LIST-FILTER>`.

.. _GenEx List Ordering:

List Ordering
^^^^^^^^^^^^^

.. genex:: $<LIST:REVERSE,list>

  .. versionadded:: 3.27

  The ``list`` with the items in reverse order.

.. genex:: $<LIST:SORT,list[,(COMPARE:option|CASE:option|ORDER:option)]...>

  .. versionadded:: 3.27

  The ``list`` sorted according to the specified options.

  Use one of the ``COMPARE`` options to select the comparison method
  for sorting:

    ``STRING``
      Sorts a list of strings alphabetically.
      This is the default behavior if the ``COMPARE`` option is not given.

    ``FILE_BASENAME``
      Sorts a list of file paths by their basenames.

    ``NATURAL``
      Sorts a list of strings using natural order (see the man page for
      ``strverscmp(3)``), such that contiguous digits are compared as whole
      numbers.  For example, the following list ``10.0 1.1 2.1 8.0 2.0 3.1``
      will be sorted as ``1.1 2.0 2.1 3.1 8.0 10.0`` if the ``NATURAL``
      comparison is selected, whereas it will be sorted as
      ``1.1 10.0 2.0 2.1 3.1 8.0`` with the ``STRING`` comparison.

  Use one of the ``CASE`` options to select a case-sensitive or
  case-insensitive sort mode:

    ``SENSITIVE``
      List items are sorted in a case-sensitive manner.
      This is the default behavior if the ``CASE`` option is not given.

    ``INSENSITIVE``
      List items are sorted in a case-insensitive manner.  The order of
      items which differ only by upper/lowercase is not specified.

  To control the sort order, one of the ``ORDER`` options can be given:

    ``ASCENDING``
      Sorts the list in ascending order.
      This is the default behavior when the ``ORDER`` option is not given.

    ``DESCENDING``
      Sorts the list in descending order.

  Options can be specified in any order, but it is an error to specify the
  same option multiple times.

  .. code-block:: cmake

    $<LIST:SORT,list,CASE:SENSITIVE,COMPARE:STRING,ORDER:DESCENDING>

Path Expressions
----------------

Most of the expressions in this section are closely associated with the
:command:`cmake_path` command, providing the same capabilities, but in
the form of a generator expression.

For all generator expressions in this section, paths are expected to be in
cmake-style format. The :ref:`$\<PATH:CMAKE_PATH\> <GenEx PATH-CMAKE_PATH>`
generator expression can be used to convert a native path to a cmake-style
one.

.. _GenEx Path Comparisons:

Path Comparisons
^^^^^^^^^^^^^^^^

.. genex:: $<PATH_EQUAL:path1,path2>

  .. versionadded:: 3.24

  Compares the lexical representations of two paths. No normalization is
  performed on either path. Returns ``1`` if the paths are equal, ``0``
  otherwise.

  See :ref:`cmake_path(COMPARE) <Path COMPARE>` for more details.

.. _GenEx Path Queries:

Path Queries
^^^^^^^^^^^^

These expressions provide the generation-time capabilities equivalent to the
:ref:`Query <Path Query>` options of the :command:`cmake_path` command.
All paths are expected to be in cmake-style format.

.. genex:: $<PATH:HAS_*,path>

  .. versionadded:: 3.24

  The following operations return ``1`` if the particular path component is
  present, ``0`` otherwise. See :ref:`Path Structure And Terminology` for the
  meaning of each path component.

  ::

    $<PATH:HAS_ROOT_NAME,path>
    $<PATH:HAS_ROOT_DIRECTORY,path>
    $<PATH:HAS_ROOT_PATH,path>
    $<PATH:HAS_FILENAME,path>
    $<PATH:HAS_EXTENSION,path>
    $<PATH:HAS_STEM,path>
    $<PATH:HAS_RELATIVE_PART,path>
    $<PATH:HAS_PARENT_PATH,path>

  Note the following special cases:

  * For ``HAS_ROOT_PATH``, a true result will only be returned if at least one
    of ``root-name`` or ``root-directory`` is non-empty.

  * For ``HAS_PARENT_PATH``, the root directory is also considered to have a
    parent, which will be itself.  The result is true except if the path
    consists of just a :ref:`filename <FILENAME_DEF>`.

.. genex:: $<PATH:IS_ABSOLUTE,path>

  .. versionadded:: 3.24

  Returns ``1`` if the path is :ref:`absolute <IS_ABSOLUTE>`, ``0`` otherwise.

.. genex:: $<PATH:IS_RELATIVE,path>

  .. versionadded:: 3.24

  This will return the opposite of ``IS_ABSOLUTE``.

.. genex:: $<PATH:IS_PREFIX[,NORMALIZE],path,input>

  .. versionadded:: 3.24

  Returns ``1`` if ``path`` is the prefix of ``input``, ``0`` otherwise.

  When the ``NORMALIZE`` option is specified, ``path`` and ``input`` are
  :ref:`normalized <Normalization>` before the check.

.. _GenEx Path Decomposition:

Path Decomposition
^^^^^^^^^^^^^^^^^^

These expressions provide the generation-time capabilities equivalent to the
:ref:`Decomposition <Path Decomposition>` options of the :command:`cmake_path`
command.  All paths are expected to be in cmake-style format.

.. genex:: $<PATH:GET_*,...>

  .. versionadded:: 3.24

  The following operations retrieve a different component or group of
  components from a path. See :ref:`Path Structure And Terminology` for the
  meaning of each path component.

  .. versionchanged:: 3.27
    All operations now accept a list of paths as argument. When a list of paths
    is specified, the operation will be applied to each path.

  ::

    $<PATH:GET_ROOT_NAME,path...>
    $<PATH:GET_ROOT_DIRECTORY,path...>
    $<PATH:GET_ROOT_PATH,path...>
    $<PATH:GET_FILENAME,path...>
    $<PATH:GET_EXTENSION[,LAST_ONLY],path...>
    $<PATH:GET_STEM[,LAST_ONLY],path...>
    $<PATH:GET_RELATIVE_PART,path...>
    $<PATH:GET_PARENT_PATH,path...>

  If a requested component is not present in the path, an empty string is
  returned.

.. _GenEx Path Transformations:

Path Transformations
^^^^^^^^^^^^^^^^^^^^

These expressions provide the generation-time capabilities equivalent to the
:ref:`Modification <Path Modification>` and :ref:`Generation <Path Generation>`
options of the :command:`cmake_path` command.  All paths are expected to be
in cmake-style format.

.. versionchanged:: 3.27
  All operations now accept a list of paths as argument. When a list of paths
  is specified, the operation will be applied to each path.


.. _GenEx PATH-CMAKE_PATH:

.. genex:: $<PATH:CMAKE_PATH[,NORMALIZE],path...>

  .. versionadded:: 3.24

  Returns ``path``. If ``path`` is a native path, it is converted into a
  cmake-style path with forward-slashes (``/``). On Windows, the long filename
  marker is taken into account.

  When the ``NORMALIZE`` option is specified, the path is :ref:`normalized
  <Normalization>` after the conversion.

.. genex:: $<PATH:APPEND,path...,input,...>

  .. versionadded:: 3.24

  Returns all the ``input`` arguments appended to ``path`` using ``/`` as the
  ``directory-separator``. Depending on the ``input``, the value of ``path``
  may be discarded.

  See :ref:`cmake_path(APPEND) <APPEND>` for more details.

.. genex:: $<PATH:REMOVE_FILENAME,path...>

  .. versionadded:: 3.24

  Returns ``path`` with filename component (as returned by
  ``$<PATH:GET_FILENAME>``) removed. After removal, any trailing
  ``directory-separator`` is left alone, if present.

  See :ref:`cmake_path(REMOVE_FILENAME) <REMOVE_FILENAME>` for more details.

.. genex:: $<PATH:REPLACE_FILENAME,path...,input>

  .. versionadded:: 3.24

  Returns ``path`` with the filename component replaced by ``input``. If
  ``path`` has no filename component (i.e. ``$<PATH:HAS_FILENAME>`` returns
  ``0``), ``path`` is unchanged.

  See :ref:`cmake_path(REPLACE_FILENAME) <REPLACE_FILENAME>` for more details.

.. genex:: $<PATH:REMOVE_EXTENSION[,LAST_ONLY],path...>

  .. versionadded:: 3.24

  Returns ``path`` with the :ref:`extension <EXTENSION_DEF>` removed, if any.

  See :ref:`cmake_path(REMOVE_EXTENSION) <REMOVE_EXTENSION>` for more details.

.. genex:: $<PATH:REPLACE_EXTENSION[,LAST_ONLY],path...,input>

  .. versionadded:: 3.24

  Returns ``path`` with the :ref:`extension <EXTENSION_DEF>` replaced by
  ``input``, if any.

  See :ref:`cmake_path(REPLACE_EXTENSION) <REPLACE_EXTENSION>` for more details.

.. genex:: $<PATH:NORMAL_PATH,path...>

  .. versionadded:: 3.24

  Returns ``path`` normalized according to the steps described in
  :ref:`Normalization`.

.. genex:: $<PATH:RELATIVE_PATH,path...,base_directory>

  .. versionadded:: 3.24

  Returns ``path``, modified to make it relative to the ``base_directory``
  argument.

  See :ref:`cmake_path(RELATIVE_PATH) <cmake_path-RELATIVE_PATH>` for more
  details.

.. genex:: $<PATH:ABSOLUTE_PATH[,NORMALIZE],path...,base_directory>

  .. versionadded:: 3.24

  Returns ``path`` as absolute. If ``path`` is a relative path
  (``$<PATH:IS_RELATIVE>`` returns ``1``), it is evaluated relative to the
  given base directory specified by ``base_directory`` argument.

  When the ``NORMALIZE`` option is specified, the path is
  :ref:`normalized <Normalization>` after the path computation.

  See :ref:`cmake_path(ABSOLUTE_PATH) <ABSOLUTE_PATH>` for more details.

Shell Paths
^^^^^^^^^^^

.. genex:: $<SHELL_PATH:...>

  .. versionadded:: 3.4

  Content of ``...`` converted to shell path style. For example, slashes are
  converted to backslashes in Windows shells and drive letters are converted
  to posix paths in MSYS shells. The ``...`` must be an absolute path.

  .. versionadded:: 3.14
    The ``...`` may be a :ref:`semicolon-separated list <CMake Language Lists>`
    of paths, in which case each path is converted individually and a result
    list is generated using the shell path separator (``:`` on POSIX and
    ``;`` on Windows).  Be sure to enclose the argument containing this genex
    in double quotes in CMake source code so that ``;`` does not split arguments.

Configuration Expressions
-------------------------

.. genex:: $<CONFIG>

  Configuration name. Use this instead of the deprecated :genex:`CONFIGURATION`
  generator expression.

.. genex:: $<CONFIG:cfgs>

  ``1`` if config is any one of the entries in comma-separated list
  ``cfgs``, else ``0``. This is a case-insensitive comparison. The mapping in
  :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` is also considered by this
  expression when it is evaluated on a property of an :prop_tgt:`IMPORTED`
  target.

  .. versionchanged:: 3.19
    Multiple configurations can be specified for ``cfgs``.
    CMake 3.18 and earlier only accepted a single configuration.

.. genex:: $<OUTPUT_CONFIG:...>

  .. versionadded:: 3.20

  Only valid in :command:`add_custom_command` and :command:`add_custom_target`
  as the outer-most generator expression in an argument.
  With the :generator:`Ninja Multi-Config` generator, generator expressions
  in ``...`` are evaluated using the custom command's "output config".
  With other generators, the content of ``...`` is evaluated normally.

.. genex:: $<COMMAND_CONFIG:...>

  .. versionadded:: 3.20

  Only valid in :command:`add_custom_command` and :command:`add_custom_target`
  as the outer-most generator expression in an argument.
  With the :generator:`Ninja Multi-Config` generator, generator expressions
  in ``...`` are evaluated using the custom command's "command config".
  With other generators, the content of ``...`` is evaluated normally.

Toolchain And Language Expressions
----------------------------------

Platform
^^^^^^^^

.. genex:: $<PLATFORM_ID>

  The current system's CMake platform id.
  See also the :variable:`CMAKE_SYSTEM_NAME` variable.

.. genex:: $<PLATFORM_ID:platform_ids>

  ``1`` if CMake's platform id matches any one of the entries in
  comma-separated list ``platform_ids``, otherwise ``0``.
  See also the :variable:`CMAKE_SYSTEM_NAME` variable.

Compiler Version
^^^^^^^^^^^^^^^^

See also the :variable:`CMAKE_<LANG>_COMPILER_VERSION` variable, which is
closely related to the expressions in this sub-section.

.. genex:: $<C_COMPILER_VERSION>

  The version of the C compiler used.

.. genex:: $<C_COMPILER_VERSION:version>

  ``1`` if the version of the C compiler matches ``version``, otherwise ``0``.

.. genex:: $<CXX_COMPILER_VERSION>

  The version of the CXX compiler used.

.. genex:: $<CXX_COMPILER_VERSION:version>

  ``1`` if the version of the CXX compiler matches ``version``, otherwise ``0``.

.. genex:: $<CUDA_COMPILER_VERSION>

  .. versionadded:: 3.15

  The version of the CUDA compiler used.

.. genex:: $<CUDA_COMPILER_VERSION:version>

  .. versionadded:: 3.15

  ``1`` if the version of the CXX compiler matches ``version``, otherwise ``0``.

.. genex:: $<OBJC_COMPILER_VERSION>

  .. versionadded:: 3.16

  The version of the OBJC compiler used.

.. genex:: $<OBJC_COMPILER_VERSION:version>

  .. versionadded:: 3.16

  ``1`` if the version of the OBJC compiler matches ``version``, otherwise ``0``.

.. genex:: $<OBJCXX_COMPILER_VERSION>

  .. versionadded:: 3.16

  The version of the OBJCXX compiler used.

.. genex:: $<OBJCXX_COMPILER_VERSION:version>

  .. versionadded:: 3.16

  ``1`` if the version of the OBJCXX compiler matches ``version``, otherwise ``0``.

.. genex:: $<Fortran_COMPILER_VERSION>

  The version of the Fortran compiler used.

.. genex:: $<Fortran_COMPILER_VERSION:version>

  ``1`` if the version of the Fortran compiler matches ``version``, otherwise ``0``.

.. genex:: $<HIP_COMPILER_VERSION>

  .. versionadded:: 3.21

  The version of the HIP compiler used.

.. genex:: $<HIP_COMPILER_VERSION:version>

  .. versionadded:: 3.21

  ``1`` if the version of the HIP compiler matches ``version``, otherwise ``0``.

.. genex:: $<ISPC_COMPILER_VERSION>

  .. versionadded:: 3.19

  The version of the ISPC compiler used.

.. genex:: $<ISPC_COMPILER_VERSION:version>

  .. versionadded:: 3.19

  ``1`` if the version of the ISPC compiler matches ``version``, otherwise ``0``.

Compiler Language And ID
^^^^^^^^^^^^^^^^^^^^^^^^

See also the :variable:`CMAKE_<LANG>_COMPILER_ID` variable, which is closely
related to most of the expressions in this sub-section.

.. genex:: $<C_COMPILER_ID>

  CMake's compiler id of the C compiler used.

.. genex:: $<C_COMPILER_ID:compiler_ids>

  where ``compiler_ids`` is a comma-separated list.
  ``1`` if CMake's compiler id of the C compiler matches any one
  of the entries in ``compiler_ids``, otherwise ``0``.

  .. versionchanged:: 3.15
    Multiple ``compiler_ids`` can be specified.
    CMake 3.14 and earlier only accepted a single compiler ID.

.. genex:: $<CXX_COMPILER_ID>

  CMake's compiler id of the CXX compiler used.

.. genex:: $<CXX_COMPILER_ID:compiler_ids>

  where ``compiler_ids`` is a comma-separated list.
  ``1`` if CMake's compiler id of the CXX compiler matches any one
  of the entries in ``compiler_ids``, otherwise ``0``.

  .. versionchanged:: 3.15
    Multiple ``compiler_ids`` can be specified.
    CMake 3.14 and earlier only accepted a single compiler ID.

.. genex:: $<CUDA_COMPILER_ID>

  .. versionadded:: 3.15

  CMake's compiler id of the CUDA compiler used.

.. genex:: $<CUDA_COMPILER_ID:compiler_ids>

  .. versionadded:: 3.15

  where ``compiler_ids`` is a comma-separated list.
  ``1`` if CMake's compiler id of the CUDA compiler matches any one
  of the entries in ``compiler_ids``, otherwise ``0``.

.. genex:: $<OBJC_COMPILER_ID>

  .. versionadded:: 3.16

  CMake's compiler id of the OBJC compiler used.

.. genex:: $<OBJC_COMPILER_ID:compiler_ids>

  .. versionadded:: 3.16

  where ``compiler_ids`` is a comma-separated list.
  ``1`` if CMake's compiler id of the Objective-C compiler matches any one
  of the entries in ``compiler_ids``, otherwise ``0``.

.. genex:: $<OBJCXX_COMPILER_ID>

  .. versionadded:: 3.16

  CMake's compiler id of the OBJCXX compiler used.

.. genex:: $<OBJCXX_COMPILER_ID:compiler_ids>

  .. versionadded:: 3.16

  where ``compiler_ids`` is a comma-separated list.
  ``1`` if CMake's compiler id of the Objective-C++ compiler matches any one
  of the entries in ``compiler_ids``, otherwise ``0``.

.. genex:: $<Fortran_COMPILER_ID>

  CMake's compiler id of the Fortran compiler used.

.. genex:: $<Fortran_COMPILER_ID:compiler_ids>

  where ``compiler_ids`` is a comma-separated list.
  ``1`` if CMake's compiler id of the Fortran compiler matches any one
  of the entries in ``compiler_ids``, otherwise ``0``.

  .. versionchanged:: 3.15
    Multiple ``compiler_ids`` can be specified.
    CMake 3.14 and earlier only accepted a single compiler ID.

.. genex:: $<HIP_COMPILER_ID>

  .. versionadded:: 3.21

  CMake's compiler id of the HIP compiler used.

.. genex:: $<HIP_COMPILER_ID:compiler_ids>

  .. versionadded:: 3.21

  where ``compiler_ids`` is a comma-separated list.
  ``1`` if CMake's compiler id of the HIP compiler matches any one
  of the entries in ``compiler_ids``, otherwise ``0``.

.. genex:: $<ISPC_COMPILER_ID>

  .. versionadded:: 3.19

  CMake's compiler id of the ISPC compiler used.

.. genex:: $<ISPC_COMPILER_ID:compiler_ids>

  .. versionadded:: 3.19

  where ``compiler_ids`` is a comma-separated list.
  ``1`` if CMake's compiler id of the ISPC compiler matches any one
  of the entries in ``compiler_ids``, otherwise ``0``.

.. genex:: $<COMPILE_LANGUAGE>

  .. versionadded:: 3.3

  The compile language of source files when evaluating compile options.
  See :ref:`the related boolean expression
  <Boolean COMPILE_LANGUAGE Generator Expression>`
  ``$<COMPILE_LANGUAGE:language>``
  for notes about the portability of this generator expression.

.. _`Boolean COMPILE_LANGUAGE Generator Expression`:

.. genex:: $<COMPILE_LANGUAGE:languages>

  .. versionadded:: 3.3

  .. versionchanged:: 3.15
    Multiple languages can be specified for ``languages``.
    CMake 3.14 and earlier only accepted a single language.

  ``1`` when the language used for compilation unit matches any of the
  comma-separated entries in ``languages``, otherwise ``0``. This expression
  may be used to specify compile options, compile definitions, and include
  directories for source files of a particular language in a target. For
  example:

  .. code-block:: cmake

    add_executable(myapp main.cpp foo.c bar.cpp zot.cu)
    target_compile_options(myapp
      PRIVATE $<$<COMPILE_LANGUAGE:CXX>:-fno-exceptions>
    )
    target_compile_definitions(myapp
      PRIVATE $<$<COMPILE_LANGUAGE:CXX>:COMPILING_CXX>
              $<$<COMPILE_LANGUAGE:CUDA>:COMPILING_CUDA>
    )
    target_include_directories(myapp
      PRIVATE $<$<COMPILE_LANGUAGE:CXX,CUDA>:/opt/foo/headers>
    )

  This specifies the use of the ``-fno-exceptions`` compile option,
  ``COMPILING_CXX`` compile definition, and ``cxx_headers`` include
  directory for C++ only (compiler id checks elided).  It also specifies
  a ``COMPILING_CUDA`` compile definition for CUDA.

  Note that with :ref:`Visual Studio Generators` and :generator:`Xcode` there
  is no way to represent target-wide compile definitions or include directories
  separately for ``C`` and ``CXX`` languages.
  Also, with :ref:`Visual Studio Generators` there is no way to represent
  target-wide flags separately for ``C`` and ``CXX`` languages.  Under these
  generators, expressions for both C and C++ sources will be evaluated
  using ``CXX`` if there are any C++ sources and otherwise using ``C``.
  A workaround is to create separate libraries for each source file language
  instead:

  .. code-block:: cmake

    add_library(myapp_c foo.c)
    add_library(myapp_cxx bar.cpp)
    target_compile_options(myapp_cxx PUBLIC -fno-exceptions)
    add_executable(myapp main.cpp)
    target_link_libraries(myapp myapp_c myapp_cxx)

.. genex:: $<COMPILE_LANG_AND_ID:language,compiler_ids>

  .. versionadded:: 3.15

  ``1`` when the language used for compilation unit matches ``language`` and
  CMake's compiler id of the ``language`` compiler matches any one of the
  comma-separated entries in ``compiler_ids``, otherwise ``0``. This expression
  is a short form for the combination of ``$<COMPILE_LANGUAGE:language>`` and
  ``$<LANG_COMPILER_ID:compiler_ids>``. This expression may be used to specify
  compile options, compile definitions, and include directories for source
  files of a particular language and compiler combination in a target.
  For example:

  .. code-block:: cmake

    add_executable(myapp main.cpp foo.c bar.cpp zot.cu)
    target_compile_definitions(myapp
      PRIVATE $<$<COMPILE_LANG_AND_ID:CXX,AppleClang,Clang>:COMPILING_CXX_WITH_CLANG>
              $<$<COMPILE_LANG_AND_ID:CXX,Intel>:COMPILING_CXX_WITH_INTEL>
              $<$<COMPILE_LANG_AND_ID:C,Clang>:COMPILING_C_WITH_CLANG>
    )

  This specifies the use of different compile definitions based on both
  the compiler id and compilation language. This example will have a
  ``COMPILING_CXX_WITH_CLANG`` compile definition when Clang is the CXX
  compiler, and ``COMPILING_CXX_WITH_INTEL`` when Intel is the CXX compiler.
  Likewise, when the C compiler is Clang, it will only see the
  ``COMPILING_C_WITH_CLANG`` definition.

  Without the ``COMPILE_LANG_AND_ID`` generator expression, the same logic
  would be expressed as:

  .. code-block:: cmake

    target_compile_definitions(myapp
      PRIVATE $<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CXX_COMPILER_ID:AppleClang,Clang>>:COMPILING_CXX_WITH_CLANG>
              $<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CXX_COMPILER_ID:Intel>>:COMPILING_CXX_WITH_INTEL>
              $<$<AND:$<COMPILE_LANGUAGE:C>,$<C_COMPILER_ID:Clang>>:COMPILING_C_WITH_CLANG>
    )

Compile Features
^^^^^^^^^^^^^^^^

.. genex:: $<COMPILE_FEATURES:features>

  .. versionadded:: 3.1

  where ``features`` is a comma-separated list.
  Evaluates to ``1`` if all of the ``features`` are available for the 'head'
  target, and ``0`` otherwise. If this expression is used while evaluating
  the link implementation of a target and if any dependency transitively
  increases the required :prop_tgt:`C_STANDARD` or :prop_tgt:`CXX_STANDARD`
  for the 'head' target, an error is reported.  See the
  :manual:`cmake-compile-features(7)` manual for information on
  compile features and a list of supported compilers.

Compile Context
^^^^^^^^^^^^^^^

.. genex:: $<COMPILE_ONLY:...>

  .. versionadded:: 3.27

  Content of ``...``, when collecting :ref:`Target Usage Requirements`,
  otherwise it is the empty string.  This is intended for use in an
  :prop_tgt:`INTERFACE_LINK_LIBRARIES` and :prop_tgt:`LINK_LIBRARIES` target
  properties, typically populated via the :command:`target_link_libraries` command.
  Provides compilation usage requirements without any linking requirements.

  Use cases include header-only usage where all usages are known to not have
  linking requirements (e.g., all-``inline`` or C++ template libraries).

  Note that for proper evaluation of this expression requires policy :policy:`CMP0099`
  to be set to `NEW`.

Linker Language And ID
^^^^^^^^^^^^^^^^^^^^^^

.. genex:: $<LINK_LANGUAGE>

  .. versionadded:: 3.18

  The link language of the target when evaluating link options.
  See :ref:`the related boolean expression
  <Boolean LINK_LANGUAGE Generator Expression>` ``$<LINK_LANGUAGE:languages>``
  for notes about the portability of this generator expression.

  .. note::

    This generator expression is not supported by the link libraries
    properties to avoid side-effects due to the double evaluation of
    these properties.


.. _`Boolean LINK_LANGUAGE Generator Expression`:

.. genex:: $<LINK_LANGUAGE:languages>

  .. versionadded:: 3.18

  ``1`` when the language used for link step matches any of the comma-separated
  entries in ``languages``, otherwise ``0``.  This expression may be used to
  specify link libraries, link options, link directories and link dependencies
  of a particular language in a target. For example:

  .. code-block:: cmake

    add_library(api_C ...)
    add_library(api_CXX ...)
    add_library(api INTERFACE)
    target_link_options(api   INTERFACE $<$<LINK_LANGUAGE:C>:-opt_c>
                                        $<$<LINK_LANGUAGE:CXX>:-opt_cxx>)
    target_link_libraries(api INTERFACE $<$<LINK_LANGUAGE:C>:api_C>
                                        $<$<LINK_LANGUAGE:CXX>:api_CXX>)

    add_executable(myapp1 main.c)
    target_link_options(myapp1 PRIVATE api)

    add_executable(myapp2 main.cpp)
    target_link_options(myapp2 PRIVATE api)

  This specifies to use the ``api`` target for linking targets ``myapp1`` and
  ``myapp2``. In practice, ``myapp1`` will link with target ``api_C`` and
  option ``-opt_c`` because it will use ``C`` as link language. And ``myapp2``
  will link with ``api_CXX`` and option ``-opt_cxx`` because ``CXX`` will be
  the link language.

  .. _`Constraints LINK_LANGUAGE Generator Expression`:

  .. note::

    To determine the link language of a target, it is required to collect,
    transitively, all the targets which will be linked to it. So, for link
    libraries properties, a double evaluation will be done. During the first
    evaluation, ``$<LINK_LANGUAGE:..>`` expressions will always return ``0``.
    The link language computed after this first pass will be used to do the
    second pass. To avoid inconsistency, it is required that the second pass
    do not change the link language. Moreover, to avoid unexpected
    side-effects, it is required to specify complete entities as part of the
    ``$<LINK_LANGUAGE:..>`` expression. For example:

    .. code-block:: cmake

      add_library(lib STATIC file.cxx)
      add_library(libother STATIC file.c)

      # bad usage
      add_executable(myapp1 main.c)
      target_link_libraries(myapp1 PRIVATE lib$<$<LINK_LANGUAGE:C>:other>)

      # correct usage
      add_executable(myapp2 main.c)
      target_link_libraries(myapp2 PRIVATE $<$<LINK_LANGUAGE:C>:libother>)

    In this example, for ``myapp1``, the first pass will, unexpectedly,
    determine that the link language is ``CXX`` because the evaluation of the
    generator expression will be an empty string so ``myapp1`` will depends on
    target ``lib`` which is ``C++``. On the contrary, for ``myapp2``, the first
    evaluation will give ``C`` as link language, so the second pass will
    correctly add target ``libother`` as link dependency.

.. genex:: $<LINK_LANG_AND_ID:language,compiler_ids>

  .. versionadded:: 3.18

  ``1`` when the language used for link step matches ``language`` and the
  CMake's compiler id of the language linker matches any one of the comma-separated
  entries in ``compiler_ids``, otherwise ``0``. This expression is a short form
  for the combination of ``$<LINK_LANGUAGE:language>`` and
  ``$<LANG_COMPILER_ID:compiler_ids>``. This expression may be used to specify
  link libraries, link options, link directories and link dependencies of a
  particular language and linker combination in a target. For example:

  .. code-block:: cmake

    add_library(libC_Clang ...)
    add_library(libCXX_Clang ...)
    add_library(libC_Intel ...)
    add_library(libCXX_Intel ...)

    add_executable(myapp main.c)
    if (CXX_CONFIG)
      target_sources(myapp PRIVATE file.cxx)
    endif()
    target_link_libraries(myapp
      PRIVATE $<$<LINK_LANG_AND_ID:CXX,Clang,AppleClang>:libCXX_Clang>
              $<$<LINK_LANG_AND_ID:C,Clang,AppleClang>:libC_Clang>
              $<$<LINK_LANG_AND_ID:CXX,Intel>:libCXX_Intel>
              $<$<LINK_LANG_AND_ID:C,Intel>:libC_Intel>)

  This specifies the use of different link libraries based on both the
  compiler id and link language. This example will have target ``libCXX_Clang``
  as link dependency when ``Clang`` or ``AppleClang`` is the ``CXX``
  linker, and ``libCXX_Intel`` when ``Intel`` is the ``CXX`` linker.
  Likewise when the ``C`` linker is ``Clang`` or ``AppleClang``, target
  ``libC_Clang`` will be added as link dependency and ``libC_Intel`` when
  ``Intel`` is the ``C`` linker.

  See :ref:`the note related to
  <Constraints LINK_LANGUAGE Generator Expression>`
  ``$<LINK_LANGUAGE:language>`` for constraints about the usage of this
  generator expression.

Link Features
^^^^^^^^^^^^^

.. genex:: $<LINK_LIBRARY:feature,library-list>

  .. versionadded:: 3.24

  Specify a set of libraries to link to a target, along with a ``feature``
  which provides details about *how* they should be linked.  For example:

  .. code-block:: cmake

    add_library(lib1 STATIC ...)
    add_library(lib2 ...)
    target_link_libraries(lib2 PRIVATE "$<LINK_LIBRARY:WHOLE_ARCHIVE,lib1>")

  This specifies that ``lib2`` should link to ``lib1`` and use the
  ``WHOLE_ARCHIVE`` feature when doing so.

  Feature names are case-sensitive and may only contain letters, numbers and
  underscores.  Feature names defined in all uppercase are reserved for CMake's
  own built-in features.  The pre-defined built-in library features are:

  .. include:: ../variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt

  Built-in and custom library features are defined in terms of the following
  variables:

  * :variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED`
  * :variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>`
  * :variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED`
  * :variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>`

  The value used for each of these variables is the value as set at the end of
  the directory scope in which the target was created.  The usage is as follows:

  1. If the language-specific
     :variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED` variable
     is true, the ``feature`` must be defined by the corresponding
     :variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>` variable.
  2. If no language-specific ``feature`` is supported, then the
     :variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED` variable must be
     true and the ``feature`` must be defined by the corresponding
     :variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>` variable.

  The following limitations should be noted:

  * The ``library-list`` can specify CMake targets or libraries.
    Any CMake target of type :ref:`OBJECT <Object Libraries>`
    or :ref:`INTERFACE <Interface Libraries>` will ignore the feature aspect
    of the expression and instead be linked in the standard way.

  * The ``$<LINK_LIBRARY:...>`` generator expression can only be used to
    specify link libraries.  In practice, this means it can appear in the
    :prop_tgt:`LINK_LIBRARIES`, :prop_tgt:`INTERFACE_LINK_LIBRARIES`, and
    :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT`  target properties, and be
    specified in :command:`target_link_libraries` and :command:`link_libraries`
    commands.

  * If a ``$<LINK_LIBRARY:...>`` generator expression appears in the
    :prop_tgt:`INTERFACE_LINK_LIBRARIES` property of a target, it will be
    included in the imported target generated by a :command:`install(EXPORT)`
    command.  It is the responsibility of the environment consuming this
    import to define the link feature used by this expression.

  * Each target or library involved in the link step must have at most only
    one kind of library feature.  The absence of a feature is also incompatible
    with all other features.  For example:

    .. code-block:: cmake

      add_library(lib1 ...)
      add_library(lib2 ...)
      add_library(lib3 ...)

      # lib1 will be associated with feature1
      target_link_libraries(lib2 PUBLIC "$<LINK_LIBRARY:feature1,lib1>")

      # lib1 is being linked with no feature here. This conflicts with the
      # use of feature1 in the line above and would result in an error.
      target_link_libraries(lib3 PRIVATE lib1 lib2)

    Where it isn't possible to use the same feature throughout a build for a
    given target or library, the :prop_tgt:`LINK_LIBRARY_OVERRIDE` and
    :prop_tgt:`LINK_LIBRARY_OVERRIDE_<LIBRARY>` target properties can be
    used to resolve such incompatibilities.

  * The ``$<LINK_LIBRARY:...>`` generator expression does not guarantee
    that the list of specified targets and libraries will be kept grouped
    together.  To manage constructs like ``--start-group`` and ``--end-group``,
    as supported by the GNU ``ld`` linker, use the :genex:`LINK_GROUP`
    generator expression instead.

.. genex:: $<LINK_GROUP:feature,library-list>

  .. versionadded:: 3.24

  Specify a group of libraries to link to a target, along with a ``feature``
  which defines how that group should be linked.  For example:

  .. code-block:: cmake

    add_library(lib1 STATIC ...)
    add_library(lib2 ...)
    target_link_libraries(lib2 PRIVATE "$<LINK_GROUP:RESCAN,lib1,external>")

  This specifies that ``lib2`` should link to ``lib1`` and ``external``, and
  that both of those two libraries should be included on the linker command
  line according to the definition of the ``RESCAN`` feature.

  Feature names are case-sensitive and may only contain letters, numbers and
  underscores.  Feature names defined in all uppercase are reserved for CMake's
  own built-in features.  Currently, there is only one pre-defined built-in
  group feature:

  .. include:: ../variable/LINK_GROUP_PREDEFINED_FEATURES.txt

  Built-in and custom group features are defined in terms of the following
  variables:

  * :variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED`
  * :variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>`
  * :variable:`CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED`
  * :variable:`CMAKE_LINK_GROUP_USING_<FEATURE>`

  The value used for each of these variables is the value as set at the end of
  the directory scope in which the target was created.  The usage is as follows:

  1. If the language-specific
     :variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED` variable
     is true, the ``feature`` must be defined by the corresponding
     :variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>` variable.
  2. If no language-specific ``feature`` is supported, then the
     :variable:`CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED` variable must be
     true and the ``feature`` must be defined by the corresponding
     :variable:`CMAKE_LINK_GROUP_USING_<FEATURE>` variable.

  The ``LINK_GROUP`` generator expression is compatible with the
  :genex:`LINK_LIBRARY` generator expression. The libraries involved in a
  group can be specified using the :genex:`LINK_LIBRARY` generator expression.

  Each target or external library involved in the link step is allowed to be
  part of multiple groups, but only if all the groups involved specify the
  same ``feature``.  Such groups will not be merged on the linker command line,
  the individual groups will still be preserved.  Mixing different group
  features for the same target or library is forbidden.

  .. code-block:: cmake

    add_library(lib1 ...)
    add_library(lib2 ...)
    add_library(lib3 ...)
    add_library(lib4 ...)
    add_library(lib5 ...)

    target_link_libraries(lib3 PUBLIC  "$<LINK_GROUP:feature1,lib1,lib2>")
    target_link_libraries(lib4 PRIVATE "$<LINK_GROUP:feature1,lib1,lib3>")
    # lib4 will be linked with the groups {lib1,lib2} and {lib1,lib3}.
    # Both groups specify the same feature, so this is fine.

    target_link_libraries(lib5 PRIVATE "$<LINK_GROUP:feature2,lib1,lib3>")
    # An error will be raised here because both lib1 and lib3 are part of two
    # groups with different features.

  When a target or an external library is involved in the link step as part of
  a group and also as not part of any group, any occurrence of the non-group
  link item will be replaced by the groups it belongs to.

  .. code-block:: cmake

    add_library(lib1 ...)
    add_library(lib2 ...)
    add_library(lib3 ...)
    add_library(lib4 ...)

    target_link_libraries(lib3 PUBLIC lib1)

    target_link_libraries(lib4 PRIVATE lib3 "$<LINK_GROUP:feature1,lib1,lib2>")
    # lib4 will only be linked with lib3 and the group {lib1,lib2}

  Because ``lib1`` is part of the group defined for ``lib4``, that group then
  gets applied back to the use of ``lib1`` for ``lib3``.  The end result will
  be as though the linking relationship for ``lib3`` had been specified as:

  .. code-block:: cmake

    target_link_libraries(lib3 PUBLIC "$<LINK_GROUP:feature1,lib1,lib2>")

  Be aware that the precedence of the group over the non-group link item can
  result in circular dependencies between groups.  If this occurs, a fatal
  error is raised because circular dependencies are not allowed for groups.

  .. code-block:: cmake

    add_library(lib1A ...)
    add_library(lib1B ...)
    add_library(lib2A ...)
    add_library(lib2B ...)
    add_library(lib3 ...)

    # Non-group linking relationships, these are non-circular so far
    target_link_libraries(lib1A PUBLIC lib2A)
    target_link_libraries(lib2B PUBLIC lib1B)

    # The addition of these groups creates circular dependencies
    target_link_libraries(lib3 PRIVATE
      "$<LINK_GROUP:feat,lib1A,lib1B>"
      "$<LINK_GROUP:feat,lib2A,lib2B>"
    )

  Because of the groups defined for ``lib3``, the linking relationships for
  ``lib1A`` and ``lib2B`` effectively get expanded to the equivalent of:

  .. code-block:: cmake

    target_link_libraries(lib1A PUBLIC "$<LINK_GROUP:feat,lib2A,lib2B>")
    target_link_libraries(lib2B PUBLIC "$<LINK_GROUP:feat,lib1A,lib1B>")

  This creates a circular dependency between groups:
  ``lib1A --> lib2B --> lib1A``.

  The following limitations should also be noted:

  * The ``library-list`` can specify CMake targets or libraries.
    Any CMake target of type :ref:`OBJECT <Object Libraries>`
    or :ref:`INTERFACE <Interface Libraries>` will ignore the feature aspect
    of the expression and instead be linked in the standard way.

  * The ``$<LINK_GROUP:...>`` generator expression can only be used to
    specify link libraries.  In practice, this means it can appear in the
    :prop_tgt:`LINK_LIBRARIES`, :prop_tgt:`INTERFACE_LINK_LIBRARIES`,and
    :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` target properties, and be
    specified in :command:`target_link_libraries` and :command:`link_libraries`
    commands.

  * If a ``$<LINK_GROUP:...>`` generator expression appears in the
    :prop_tgt:`INTERFACE_LINK_LIBRARIES` property of a target, it will be
    included in the imported target generated by a :command:`install(EXPORT)`
    command.  It is the responsibility of the environment consuming this
    import to define the link feature used by this expression.

Link Context
^^^^^^^^^^^^

.. genex:: $<LINK_ONLY:...>

  .. versionadded:: 3.1

  Content of ``...``, except while collecting :ref:`Target Usage Requirements`,
  in which case it is the empty string.  This is intended for use in an
  :prop_tgt:`INTERFACE_LINK_LIBRARIES` target property, typically populated
  via the :command:`target_link_libraries` command, to specify private link
  dependencies without other usage requirements such as include directories or
  compile options.

  .. versionadded:: 3.24
    ``LINK_ONLY`` may also be used in a :prop_tgt:`LINK_LIBRARIES` target
    property.  See policy :policy:`CMP0131`.

.. genex:: $<DEVICE_LINK:list>

  .. versionadded:: 3.18

  Returns the list if it is the device link step, an empty list otherwise.
  The device link step is controlled by :prop_tgt:`CUDA_SEPARABLE_COMPILATION`
  and :prop_tgt:`CUDA_RESOLVE_DEVICE_SYMBOLS` properties and
  policy :policy:`CMP0105`. This expression can only be used to specify link
  options.

.. genex:: $<HOST_LINK:list>

  .. versionadded:: 3.18

  Returns the list if it is the normal link step, an empty list otherwise.
  This expression is mainly useful when a device link step is also involved
  (see :genex:`$<DEVICE_LINK:list>` generator expression). This expression can
  only be used to specify link options.


.. _`Target-Dependent Queries`:

Target-Dependent Expressions
----------------------------

These queries refer to a target ``tgt``. Unless otherwise stated, this can
be any runtime artifact, namely:

* An executable target created by :command:`add_executable`.
* A shared library target (``.so``, ``.dll`` but not their ``.lib`` import
  library) created by :command:`add_library`.
* A static library target created by :command:`add_library`.

In the following, the phrase "the ``tgt`` filename" means the name of the
``tgt`` binary file. This has to be distinguished from the phrase
"the target name", which is just the string ``tgt``.

.. genex:: $<TARGET_EXISTS:tgt>

  .. versionadded:: 3.12

  ``1`` if ``tgt`` exists as a CMake target, else ``0``.

.. genex:: $<TARGET_NAME_IF_EXISTS:tgt>

  .. versionadded:: 3.12

  The target name ``tgt`` if the target exists, an empty string otherwise.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_NAME:...>

  Marks ``...`` as being the name of a target.  This is required if exporting
  targets to multiple dependent export sets.  The ``...`` must be a literal
  name of a target, it may not contain generator expressions.

.. genex:: $<TARGET_PROPERTY:tgt,prop>

  Value of the property ``prop`` on the target ``tgt``.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

  .. versionchanged:: 3.26
    When encountered during evaluation of :ref:`Target Usage Requirements`,
    typically in an ``INTERFACE_*`` target property, lookup of the ``tgt``
    name occurs in the directory of the target specifying the requirement,
    rather than the directory of the consuming target for which the
    expression is being evaluated.

.. genex:: $<TARGET_PROPERTY:prop>
  :target: TARGET_PROPERTY:prop

  Value of the property ``prop`` on the target for which the expression
  is being evaluated. Note that for generator expressions in
  :ref:`Target Usage Requirements` this is the consuming target rather
  than the target specifying the requirement.

.. genex:: $<TARGET_OBJECTS:tgt>

  .. versionadded:: 3.1

  List of objects resulting from building ``tgt``.  This would typically be
  used on :ref:`object library <Object Libraries>` targets.

.. genex:: $<TARGET_POLICY:policy>

  ``1`` if the ``policy`` was ``NEW`` when the 'head' target was created,
  else ``0``.  If the ``policy`` was not set, the warning message for the policy
  will be emitted. This generator expression only works for a subset of
  policies.

.. genex:: $<TARGET_FILE:tgt>

  Full path to the ``tgt`` binary file.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on, unless the expression is being used in
  :command:`add_custom_command` or :command:`add_custom_target`.

.. genex:: $<TARGET_FILE_BASE_NAME:tgt>

  .. versionadded:: 3.15

  Base name of ``tgt``, i.e. ``$<TARGET_FILE_NAME:tgt>`` without prefix and
  suffix.
  For example, if the ``tgt`` filename is ``libbase.so``, the base name is ``base``.

  See also the :prop_tgt:`OUTPUT_NAME`, :prop_tgt:`ARCHIVE_OUTPUT_NAME`,
  :prop_tgt:`LIBRARY_OUTPUT_NAME` and :prop_tgt:`RUNTIME_OUTPUT_NAME`
  target properties and their configuration specific variants
  :prop_tgt:`OUTPUT_NAME_<CONFIG>`, :prop_tgt:`ARCHIVE_OUTPUT_NAME_<CONFIG>`,
  :prop_tgt:`LIBRARY_OUTPUT_NAME_<CONFIG>` and
  :prop_tgt:`RUNTIME_OUTPUT_NAME_<CONFIG>`.

  The :prop_tgt:`<CONFIG>_POSTFIX` and :prop_tgt:`DEBUG_POSTFIX` target
  properties can also be considered.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_FILE_PREFIX:tgt>

  .. versionadded:: 3.15

  Prefix of the ``tgt`` filename (such as ``lib``).

  See also the :prop_tgt:`PREFIX` target property.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_FILE_SUFFIX:tgt>

  .. versionadded:: 3.15

  Suffix of the ``tgt`` filename (extension such as ``.so`` or ``.exe``).

  See also the :prop_tgt:`SUFFIX` target property.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_FILE_NAME:tgt>

  The ``tgt`` filename.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on (see policy :policy:`CMP0112`).

.. genex:: $<TARGET_FILE_DIR:tgt>

  Directory of the ``tgt`` binary file.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on (see policy :policy:`CMP0112`).

.. genex:: $<TARGET_IMPORT_FILE:tgt>

  .. versionadded:: 3.27

  Full path to the linker import file. On DLL platforms, it would be the
  ``.lib`` file. For executables on AIX, and for shared libraries on macOS,
  it could be, respectively, the ``.imp`` or ``.tbd`` import file,
  depending on the value of the :prop_tgt:`ENABLE_EXPORTS` property.

  This expands to an empty string when there is no import file associated
  with the target.

.. genex:: $<TARGET_IMPORT_FILE_BASE_NAME:tgt>

  .. versionadded:: 3.27

  Base name of the linker import file of the target ``tgt`` without prefix or
  suffix. For example, if the target file name is ``libbase.tbd``, the base
  name is ``base``.

  See also the :prop_tgt:`OUTPUT_NAME` and :prop_tgt:`ARCHIVE_OUTPUT_NAME`
  target properties and their configuration specific variants
  :prop_tgt:`OUTPUT_NAME_<CONFIG>` and :prop_tgt:`ARCHIVE_OUTPUT_NAME_<CONFIG>`.

  The :prop_tgt:`<CONFIG>_POSTFIX` and :prop_tgt:`DEBUG_POSTFIX` target
  properties can also be considered.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_IMPORT_FILE_PREFIX:tgt>

  .. versionadded:: 3.27

  Prefix of the import file of the target ``tgt``.

  See also the :prop_tgt:`IMPORT_PREFIX` target property.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_IMPORT_FILE_SUFFIX:tgt>

  .. versionadded:: 3.27

  Suffix of the import file of the target ``tgt``.

  The suffix corresponds to the file extension (such as ``.lib`` or ``.tbd``).

  See also the :prop_tgt:`IMPORT_SUFFIX` target property.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_IMPORT_FILE_NAME:tgt>

  .. versionadded:: 3.27

  Name of the import file of the target ``tgt``.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_IMPORT_FILE_DIR:tgt>

  .. versionadded:: 3.27

  Directory of the import file of the target ``tgt``.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_LINKER_FILE:tgt>

  File used when linking to the ``tgt`` target.  This will usually
  be the library that ``tgt`` represents (``.a``, ``.lib``, ``.so``),
  but for a shared library on DLL platforms, it would be the ``.lib``
  import library associated with the DLL.

  .. versionadded:: 3.27
    On macOS, it could be the ``.tbd`` import file associated with the shared
    library, depending on the value of the :prop_tgt:`ENABLE_EXPORTS` property.

  This generator expression is equivalent to
  :genex:`$<TARGET_LINKER_LIBRARY_FILE>` or
  :genex:`$<TARGET_LINKER_IMPORT_FILE>` generator expressions, depending on the
  characteristics of the target and the platform.

.. genex:: $<TARGET_LINKER_FILE_BASE_NAME:tgt>

  .. versionadded:: 3.15

  Base name of file used to link the target ``tgt``, i.e.
  :genex:`$<TARGET_LINKER_FILE_NAME:tgt>` without prefix and suffix. For
  example, if target file name is ``libbase.a``, the base name is ``base``.

  See also the :prop_tgt:`OUTPUT_NAME`, :prop_tgt:`ARCHIVE_OUTPUT_NAME`,
  and :prop_tgt:`LIBRARY_OUTPUT_NAME` target properties and their configuration
  specific variants :prop_tgt:`OUTPUT_NAME_<CONFIG>`,
  :prop_tgt:`ARCHIVE_OUTPUT_NAME_<CONFIG>` and
  :prop_tgt:`LIBRARY_OUTPUT_NAME_<CONFIG>`.

  The :prop_tgt:`<CONFIG>_POSTFIX` and :prop_tgt:`DEBUG_POSTFIX` target
  properties can also be considered.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_LINKER_FILE_PREFIX:tgt>

  .. versionadded:: 3.15

  Prefix of file used to link target ``tgt``.

  See also the :prop_tgt:`PREFIX` and :prop_tgt:`IMPORT_PREFIX` target
  properties.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_LINKER_FILE_SUFFIX:tgt>

  .. versionadded:: 3.15

  Suffix of file used to link where ``tgt`` is the name of a target.

  The suffix corresponds to the file extension (such as ".so" or ".lib").

  See also the :prop_tgt:`SUFFIX` and :prop_tgt:`IMPORT_SUFFIX` target
  properties.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_LINKER_FILE_NAME:tgt>

  Name of file used to link target ``tgt``.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on (see policy :policy:`CMP0112`).

.. genex:: $<TARGET_LINKER_FILE_DIR:tgt>

  Directory of file used to link target ``tgt``.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on (see policy :policy:`CMP0112`).

.. genex:: $<TARGET_LINKER_LIBRARY_FILE:tgt>

  .. versionadded:: 3.27

  File used when linking o the ``tgt`` target is done using directly the
  library, and not an import file. This will usually be the library that
  ``tgt`` represents (``.a``, ``.so``, ``.dylib``). So, on DLL platforms, it
  will be an empty string.

.. genex:: $<TARGET_LINKER_LIBRARY_FILE_BASE_NAME:tgt>

  .. versionadded:: 3.27

  Base name of library file used to link the target ``tgt``, i.e.
  :genex:`$<TARGET_LINKER_LIBRARY_FILE_NAME:tgt>` without prefix and suffix.
  For example, if target file name is ``libbase.a``, the base name is ``base``.

  See also the :prop_tgt:`OUTPUT_NAME`, :prop_tgt:`ARCHIVE_OUTPUT_NAME`,
  and :prop_tgt:`LIBRARY_OUTPUT_NAME` target properties and their configuration
  specific variants :prop_tgt:`OUTPUT_NAME_<CONFIG>`,
  :prop_tgt:`ARCHIVE_OUTPUT_NAME_<CONFIG>` and
  :prop_tgt:`LIBRARY_OUTPUT_NAME_<CONFIG>`.

  The :prop_tgt:`<CONFIG>_POSTFIX` and :prop_tgt:`DEBUG_POSTFIX` target
  properties can also be considered.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_LINKER_LIBRARY_FILE_PREFIX:tgt>

  .. versionadded:: 3.27

  Prefix of the library file used to link target ``tgt``.

  See also the :prop_tgt:`PREFIX` target property.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_LINKER_LIBRARY_FILE_SUFFIX:tgt>

  .. versionadded:: 3.27

  Suffix of the library file used to link target ``tgt``.

  The suffix corresponds to the file extension (such as ".a" or ".dylib").

  See also the :prop_tgt:`SUFFIX` target property.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_LINKER_LIBRARY_FILE_NAME:tgt>

  .. versionadded:: 3.27

  Name of the library file used to link target ``tgt``.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_LINKER_LIBRARY_FILE_DIR:tgt>

  .. versionadded:: 3.27

  Directory of the library file used to link target ``tgt``.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_LINKER_IMPORT_FILE:tgt>

  .. versionadded:: 3.27

  File used when linking to the ``tgt`` target is done using an import
  file.  This will usually be the import file that ``tgt`` represents
  (``.lib``, ``.tbd``). So, when no import file is involved in the link step,
  an empty string is returned.

.. genex:: $<TARGET_LINKER_IMPORT_FILE_BASE_NAME:tgt>

  .. versionadded:: 3.27

  Base name of the import file used to link the target ``tgt``, i.e.
  :genex:`$<TARGET_LINKER_IMPORT_FILE_NAME:tgt>` without prefix and suffix.
  For example, if target file name is ``libbase.tbd``, the base name is ``base``.

  See also the :prop_tgt:`OUTPUT_NAME` and :prop_tgt:`ARCHIVE_OUTPUT_NAME`,
  target properties and their configuration
  specific variants :prop_tgt:`OUTPUT_NAME_<CONFIG>` and
  :prop_tgt:`ARCHIVE_OUTPUT_NAME_<CONFIG>`.

  The :prop_tgt:`<CONFIG>_POSTFIX` and :prop_tgt:`DEBUG_POSTFIX` target
  properties can also be considered.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_LINKER_IMPORT_FILE_PREFIX:tgt>

  .. versionadded:: 3.27

  Prefix of the import file used to link target ``tgt``.

  See also the :prop_tgt:`IMPORT_PREFIX` target property.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_LINKER_IMPORT_FILE_SUFFIX:tgt>

  .. versionadded:: 3.27

  Suffix of the import file used to link target ``tgt``.

  The suffix corresponds to the file extension (such as ".lib" or ".tbd").

  See also the :prop_tgt:`IMPORT_SUFFIX` target property.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_LINKER_IMPORT_FILE_NAME:tgt>

  .. versionadded:: 3.27

  Name of the import file used to link target ``tgt``.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_LINKER_IMPORT_FILE_DIR:tgt>

  .. versionadded:: 3.27

  Directory of the import file used to link target ``tgt``.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_SONAME_FILE:tgt>

  File with soname (``.so.3``) where ``tgt`` is the name of a target.

.. genex:: $<TARGET_SONAME_FILE_NAME:tgt>

  Name of file with soname (``.so.3``).

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on (see policy :policy:`CMP0112`).

.. genex:: $<TARGET_SONAME_FILE_DIR:tgt>

  Directory of file with soname (``.so.3``).

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on (see policy :policy:`CMP0112`).

.. genex:: $<TARGET_SONAME_IMPORT_FILE:tgt>

  .. versionadded:: 3.27

  Import file with soname (``.3.tbd``) where ``tgt`` is the name of a target.

.. genex:: $<TARGET_SONAME_IMPORT_FILE_NAME:tgt>

  .. versionadded:: 3.27

  Name of the import file with soname (``.3.tbd``).

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_SONAME_IMPORT_FILE_DIR:tgt>

  .. versionadded:: 3.27

  Directory of the import file with soname (``.3.tbd``).

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_PDB_FILE:tgt>

  .. versionadded:: 3.1

  Full path to the linker generated program database file (.pdb)
  where ``tgt`` is the name of a target.

  See also the :prop_tgt:`PDB_NAME` and :prop_tgt:`PDB_OUTPUT_DIRECTORY`
  target properties and their configuration specific variants
  :prop_tgt:`PDB_NAME_<CONFIG>` and :prop_tgt:`PDB_OUTPUT_DIRECTORY_<CONFIG>`.

.. genex:: $<TARGET_PDB_FILE_BASE_NAME:tgt>

  .. versionadded:: 3.15

  Base name of the linker generated program database file (.pdb)
  where ``tgt`` is the name of a target.

  The base name corresponds to the target PDB file name (see
  ``$<TARGET_PDB_FILE_NAME:tgt>``) without prefix and suffix. For example,
  if target file name is ``base.pdb``, the base name is ``base``.

  See also the :prop_tgt:`PDB_NAME` target property and its configuration
  specific variant :prop_tgt:`PDB_NAME_<CONFIG>`.

  The :prop_tgt:`<CONFIG>_POSTFIX` and :prop_tgt:`DEBUG_POSTFIX` target
  properties can also be considered.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.

.. genex:: $<TARGET_PDB_FILE_NAME:tgt>

  .. versionadded:: 3.1

  Name of the linker generated program database file (.pdb).

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on (see policy :policy:`CMP0112`).

.. genex:: $<TARGET_PDB_FILE_DIR:tgt>

  .. versionadded:: 3.1

  Directory of the linker generated program database file (.pdb).

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on (see policy :policy:`CMP0112`).

.. genex:: $<TARGET_BUNDLE_DIR:tgt>

  .. versionadded:: 3.9

  Full path to the bundle directory (``/path/to/my.app``,
  ``/path/to/my.framework``, or ``/path/to/my.bundle``),
  where ``tgt`` is the name of a target.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on (see policy :policy:`CMP0112`).

.. genex:: $<TARGET_BUNDLE_DIR_NAME:tgt>

  .. versionadded:: 3.24

  Name of the bundle directory (``my.app``, ``my.framework``, or
  ``my.bundle``), where ``tgt`` is the name of a target.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on (see policy :policy:`CMP0112`).

.. genex:: $<TARGET_BUNDLE_CONTENT_DIR:tgt>

  .. versionadded:: 3.9

  Full path to the bundle content directory where ``tgt`` is the name of a
  target.  For the macOS SDK it leads to ``/path/to/my.app/Contents``,
  ``/path/to/my.framework``, or ``/path/to/my.bundle/Contents``.
  For all other SDKs (e.g. iOS) it leads to ``/path/to/my.app``,
  ``/path/to/my.framework``, or ``/path/to/my.bundle`` due to the flat
  bundle structure.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on (see policy :policy:`CMP0112`).

.. genex:: $<TARGET_RUNTIME_DLLS:tgt>

  .. versionadded:: 3.21

  List of DLLs that the target depends on at runtime. This is determined by
  the locations of all the ``SHARED`` targets in the target's transitive
  dependencies. If only the directories of the DLLs are needed, see the
  :genex:`TARGET_RUNTIME_DLL_DIRS` generator expression.
  Using this generator expression on targets other than
  executables, ``SHARED`` libraries, and ``MODULE`` libraries is an error.
  **On non-DLL platforms, this expression always evaluates to an empty string**.

  This generator expression can be used to copy all of the DLLs that a target
  depends on into its output directory in a ``POST_BUILD`` custom command using
  the :option:`cmake -E copy -t <cmake-E copy>` command. For example:

  .. code-block:: cmake

    find_package(foo CONFIG REQUIRED) # package generated by install(EXPORT)

    add_executable(exe main.c)
    target_link_libraries(exe PRIVATE foo::foo foo::bar)
    add_custom_command(TARGET exe POST_BUILD
      COMMAND ${CMAKE_COMMAND} -E copy -t $<TARGET_FILE_DIR:exe> $<TARGET_RUNTIME_DLLS:exe>
      COMMAND_EXPAND_LISTS
    )

  .. note::

    :ref:`Imported Targets` are supported only if they know the location
    of their ``.dll`` files.  An imported ``SHARED`` library must have
    :prop_tgt:`IMPORTED_LOCATION` set to its ``.dll`` file.  See the
    :ref:`add_library imported libraries <add_library imported libraries>`
    section for details.  Many :ref:`Find Modules` produce imported targets
    with the ``UNKNOWN`` type and therefore will be ignored.

  On platforms that support runtime paths (``RPATH``), refer to the
  :prop_tgt:`INSTALL_RPATH` target property.
  On Apple platforms, refer to the :prop_tgt:`INSTALL_NAME_DIR` target property.

.. genex:: $<TARGET_RUNTIME_DLL_DIRS:tgt>

  .. versionadded:: 3.27

  List of the directories which contain the DLLs that the target depends on at
  runtime (see :genex:`TARGET_RUNTIME_DLLS`). This is determined by
  the locations of all the ``SHARED`` targets in the target's transitive
  dependencies. Using this generator expression on targets other than
  executables, ``SHARED`` libraries, and ``MODULE`` libraries is an error.
  **On non-DLL platforms, this expression always evaluates to an empty string**.

  This generator expression can e.g. be used to create a batch file using
  :command:`file(GENERATE)` which sets the PATH environment variable accordingly.

Export And Install Expressions
------------------------------

.. genex:: $<INSTALL_INTERFACE:...>

  Content of ``...`` when the property is exported using
  :command:`install(EXPORT)`, and empty otherwise.

.. genex:: $<BUILD_INTERFACE:...>

  Content of ``...`` when the property is exported using :command:`export`, or
  when the target is used by another target in the same buildsystem. Expands to
  the empty string otherwise.

.. genex:: $<BUILD_LOCAL_INTERFACE:...>

  .. versionadded:: 3.26

  Content of ``...`` when the target is used by another target in the same
  buildsystem. Expands to the empty string otherwise.

.. genex:: $<INSTALL_PREFIX>

  Content of the install prefix when the target is exported via
  :command:`install(EXPORT)`, or when evaluated in the
  :prop_tgt:`INSTALL_NAME_DIR` property or the ``INSTALL_NAME_DIR`` argument of
  :command:`install(RUNTIME_DEPENDENCY_SET)`, and empty otherwise.

  .. versionchanged:: 3.27
    Evaluates to the content of the install prefix
    in the code argument of :command:`install(CODE)` or
    the file argument of :command:`install(SCRIPT)`.

Multi-level Expression Evaluation
---------------------------------

.. genex:: $<GENEX_EVAL:expr>

  .. versionadded:: 3.12

  Content of ``expr`` evaluated as a generator expression in the current
  context. This enables consumption of generator expressions whose
  evaluation results itself in generator expressions.

.. genex:: $<TARGET_GENEX_EVAL:tgt,expr>

  .. versionadded:: 3.12

  Content of ``expr`` evaluated as a generator expression in the context of
  ``tgt`` target. This enables consumption of custom target properties that
  themselves contain generator expressions.

  Having the capability to evaluate generator expressions is very useful when
  you want to manage custom properties supporting generator expressions.
  For example:

  .. code-block:: cmake

    add_library(foo ...)

    set_property(TARGET foo PROPERTY
      CUSTOM_KEYS $<$<CONFIG:DEBUG>:FOO_EXTRA_THINGS>
    )

    add_custom_target(printFooKeys
      COMMAND ${CMAKE_COMMAND} -E echo $<TARGET_PROPERTY:foo,CUSTOM_KEYS>
    )

  This naive implementation of the ``printFooKeys`` custom command is wrong
  because ``CUSTOM_KEYS`` target property is not evaluated and the content
  is passed as is (i.e. ``$<$<CONFIG:DEBUG>:FOO_EXTRA_THINGS>``).

  To have the expected result (i.e. ``FOO_EXTRA_THINGS`` if config is
  ``Debug``), it is required to evaluate the output of
  ``$<TARGET_PROPERTY:foo,CUSTOM_KEYS>``:

  .. code-block:: cmake

    add_custom_target(printFooKeys
      COMMAND ${CMAKE_COMMAND} -E
        echo $<TARGET_GENEX_EVAL:foo,$<TARGET_PROPERTY:foo,CUSTOM_KEYS>>
    )

Escaped Characters
------------------

These expressions evaluate to specific string literals. Use them in place of
the actual string literal where you need to prevent them from having their
special meaning.

.. genex:: $<ANGLE-R>

  A literal ``>``. Used for example to compare strings that contain a ``>``.

.. genex:: $<COMMA>

  A literal ``,``. Used for example to compare strings which contain a ``,``.

.. genex:: $<SEMICOLON>

  A literal ``;``. Used to prevent list expansion on an argument with ``;``.

Deprecated Expressions
----------------------

.. genex:: $<CONFIGURATION>

  Configuration name. Deprecated since CMake 3.0. Use :genex:`CONFIG` instead.



/P/🚀 manual/cmake-language.7.rst
===============================================


.. cmake-manual-description: CMake Language Reference

cmake-language(7)
*****************

Organization
============

CMake input files are written in the "CMake Language" in source files
named ``CMakeLists.txt`` or ending in a ``.cmake`` file name extension.

CMake Language source files in a project are organized into:

* `Directories`_ (``CMakeLists.txt``),
* `Scripts`_ (``<script>.cmake``), and
* `Modules`_ (``<module>.cmake``).

Directories
-----------

When CMake processes a project source tree, the entry point is
a source file called ``CMakeLists.txt`` in the top-level source
directory.  This file may contain the entire build specification
or use the :command:`add_subdirectory` command to add subdirectories
to the build.  Each subdirectory added by the command must also
contain a ``CMakeLists.txt`` file as the entry point to that
directory.  For each source directory whose ``CMakeLists.txt`` file
is processed CMake generates a corresponding directory in the build
tree to act as the default working and output directory.

Scripts
-------

An individual ``<script>.cmake`` source file may be processed
in *script mode* by using the :manual:`cmake(1)` command-line tool
with the :option:`-P <cmake -P>` option.  Script mode simply runs
the commands in the given CMake Language source file and does not
generate a build system.  It does not allow CMake commands that
define build targets or actions.

Modules
-------

CMake Language code in either `Directories`_ or `Scripts`_ may
use the :command:`include` command to load a ``<module>.cmake``
source file in the scope of the including context.
See the :manual:`cmake-modules(7)` manual page for documentation
of modules included with the CMake distribution.
Project source trees may also provide their own modules and
specify their location(s) in the :variable:`CMAKE_MODULE_PATH`
variable.

Syntax
======

.. _`CMake Language Encoding`:

Encoding
--------

A CMake Language source file may be written in 7-bit ASCII text for
maximum portability across all supported platforms.  Newlines may be
encoded as either ``\n`` or ``\r\n`` but will be converted to ``\n``
as input files are read.

Note that the implementation is 8-bit clean so source files may
be encoded as UTF-8 on platforms with system APIs supporting this
encoding.  In addition, CMake 3.2 and above support source files
encoded in UTF-8 on Windows (using UTF-16 to call system APIs).
Furthermore, CMake 3.0 and above allow a leading UTF-8
`Byte-Order Mark`_ in source files.

.. _Byte-Order Mark: https://en.wikipedia.org/wiki/Byte_order_mark

Source Files
------------

A CMake Language source file consists of zero or more
`Command Invocations`_ separated by newlines and optionally
spaces and `Comments`_:

.. raw:: latex

   \begin{small}

.. productionlist::
 file: `file_element`*
 file_element: `command_invocation` `line_ending` |
             : (`bracket_comment`|`space`)* `line_ending`
 line_ending: `line_comment`? `newline`
 space: <match '[ \t]+'>
 newline: <match '\n'>

.. raw:: latex

   \end{small}

Note that any source file line not inside `Command Arguments`_ or
a `Bracket Comment`_ can end in a `Line Comment`_.

.. _`Command Invocations`:

Command Invocations
-------------------

A *command invocation* is a name followed by paren-enclosed arguments
separated by whitespace:

.. raw:: latex

   \begin{small}

.. productionlist::
 command_invocation: `space`* `identifier` `space`* '(' `arguments` ')'
 identifier: <match '[A-Za-z_][A-Za-z0-9_]*'>
 arguments: `argument`? `separated_arguments`*
 separated_arguments: `separation`+ `argument`? |
                    : `separation`* '(' `arguments` ')'
 separation: `space` | `line_ending`

.. raw:: latex

   \end{small}

For example:

.. code-block:: cmake

 add_executable(hello world.c)

Command names are case-insensitive.
Nested unquoted parentheses in the arguments must balance.
Each ``(`` or ``)`` is given to the command invocation as
a literal `Unquoted Argument`_.  This may be used in calls
to the :command:`if` command to enclose conditions.
For example:

.. code-block:: cmake

 if(FALSE AND (FALSE OR TRUE)) # evaluates to FALSE

.. note::
 CMake versions prior to 3.0 require command name identifiers
 to be at least 2 characters.

 CMake versions prior to 2.8.12 silently accept an `Unquoted Argument`_
 or a `Quoted Argument`_ immediately following a `Quoted Argument`_ and
 not separated by any whitespace.  For compatibility, CMake 2.8.12 and
 higher accept such code but produce a warning.

Command Arguments
-----------------

There are three types of arguments within `Command Invocations`_:

.. raw:: latex

   \begin{small}

.. productionlist::
 argument: `bracket_argument` | `quoted_argument` | `unquoted_argument`

.. raw:: latex

   \end{small}

.. _`Bracket Argument`:

Bracket Argument
^^^^^^^^^^^^^^^^

A *bracket argument*, inspired by `Lua`_ long bracket syntax,
encloses content between opening and closing "brackets" of the
same length:

.. raw:: latex

   \begin{small}

.. productionlist::
 bracket_argument: `bracket_open` `bracket_content` `bracket_close`
 bracket_open: '[' '='* '['
 bracket_content: <any text not containing a `bracket_close` with
                :  the same number of '=' as the `bracket_open`>
 bracket_close: ']' '='* ']'

.. raw:: latex

   \end{small}

An opening bracket is written ``[`` followed by zero or more ``=`` followed
by ``[``.  The corresponding closing bracket is written ``]`` followed
by the same number of ``=`` followed by ``]``.
Brackets do not nest.  A unique length may always be chosen
for the opening and closing brackets to contain closing brackets
of other lengths.

Bracket argument content consists of all text between the opening
and closing brackets, except that one newline immediately following
the opening bracket, if any, is ignored.  No evaluation of the
enclosed content, such as `Escape Sequences`_ or `Variable References`_,
is performed.  A bracket argument is always given to the command
invocation as exactly one argument.

.. ATTENTION No code-block syntax highlighting in the following example
   (long string literal not supported by our cmake.py)

For example::

 message([=[
 This is the first line in a bracket argument with bracket length 1.
 No \-escape sequences or ${variable} references are evaluated.
 This is always one argument even though it contains a ; character.
 The text does not end on a closing bracket of length 0 like ]].
 It does end in a closing bracket of length 1.
 ]=])

.. note::
 CMake versions prior to 3.0 do not support bracket arguments.
 They interpret the opening bracket as the start of an
 `Unquoted Argument`_.

.. _`Lua`: https://www.lua.org/

.. _`Quoted Argument`:

Quoted Argument
^^^^^^^^^^^^^^^

A *quoted argument* encloses content between opening and closing
double-quote characters:

.. raw:: latex

   \begin{small}

.. productionlist::
 quoted_argument: '"' `quoted_element`* '"'
 quoted_element: <any character except '\' or '"'> |
                 : `escape_sequence` |
                 : `quoted_continuation`
 quoted_continuation: '\' `newline`

.. raw:: latex

   \end{small}

Quoted argument content consists of all text between opening and
closing quotes.  Both `Escape Sequences`_ and `Variable References`_
are evaluated.  A quoted argument is always given to the command
invocation as exactly one argument.

.. ATTENTION No code-block syntax highlighting in the following example
   (escape \" not supported by our cmake.py)

For example:

.. code-block:: cmake

  message("This is a quoted argument containing multiple lines.
  This is always one argument even though it contains a ; character.
  Both \\-escape sequences and ${variable} references are evaluated.
  The text does not end on an escaped double-quote like \".
  It does end in an unescaped double quote.
  ")

.. ATTENTION No code-block syntax highlighting in the following example
   (for conformity with the two above examples)

The final ``\`` on any line ending in an odd number of backslashes
is treated as a line continuation and ignored along with the
immediately following newline character.  For example:

.. code-block:: cmake

  message("\
  This is the first line of a quoted argument. \
  In fact it is the only line but since it is long \
  the source code uses line continuation.\
  ")

.. note::
 CMake versions prior to 3.0 do not support continuation with ``\``.
 They report errors in quoted arguments containing lines ending in
 an odd number of ``\`` characters.

.. _`Unquoted Argument`:

Unquoted Argument
^^^^^^^^^^^^^^^^^

An *unquoted argument* is not enclosed by any quoting syntax.
It may not contain any whitespace, ``(``, ``)``, ``#``, ``"``, or ``\``
except when escaped by a backslash:

.. raw:: latex

   \begin{small}

.. productionlist::
 unquoted_argument: `unquoted_element`+ | `unquoted_legacy`
 unquoted_element: <any character except whitespace or one of '()#"\'> |
                 : `escape_sequence`
 unquoted_legacy: <see note in text>

.. raw:: latex

   \end{small}

Unquoted argument content consists of all text in a contiguous block
of allowed or escaped characters.  Both `Escape Sequences`_ and
`Variable References`_ are evaluated.  The resulting value is divided
in the same way `Lists`_ divide into elements.  Each non-empty element
is given to the command invocation as an argument.  Therefore an
unquoted argument may be given to a command invocation as zero or
more arguments.

For example:

.. code-block:: cmake

 foreach(arg
     NoSpace
     Escaped\ Space
     This;Divides;Into;Five;Arguments
     Escaped\;Semicolon
     )
   message("${arg}")
 endforeach()

.. note::
 To support legacy CMake code, unquoted arguments may also contain
 double-quoted strings (``"..."``, possibly enclosing horizontal
 whitespace), and make-style variable references (``$(MAKEVAR)``).

 Unescaped double-quotes must balance, may not appear at the
 beginning of an unquoted argument, and are treated as part of the
 content.  For example, the unquoted arguments ``-Da="b c"``,
 ``-Da=$(v)``, and ``a" "b"c"d`` are each interpreted literally.
 They may instead be written as quoted arguments ``"-Da=\"b c\""``,
 ``"-Da=$(v)"``, and ``"a\" \"b\"c\"d"``, respectively.

 Make-style references are treated literally as part of the content
 and do not undergo variable expansion.  They are treated as part
 of a single argument (rather than as separate ``$``, ``(``,
 ``MAKEVAR``, and ``)`` arguments).

 The above "unquoted_legacy" production represents such arguments.
 We do not recommend using legacy unquoted arguments in new code.
 Instead use a `Quoted Argument`_ or a `Bracket Argument`_ to
 represent the content.

.. _`Escape Sequences`:

Escape Sequences
----------------

An *escape sequence* is a ``\`` followed by one character:

.. raw:: latex

   \begin{small}

.. productionlist::
 escape_sequence: `escape_identity` | `escape_encoded` | `escape_semicolon`
 escape_identity: '\' <match '[^A-Za-z0-9;]'>
 escape_encoded: '\t' | '\r' | '\n'
 escape_semicolon: '\;'

.. raw:: latex

   \end{small}

A ``\`` followed by a non-alphanumeric character simply encodes the literal
character without interpreting it as syntax.  A ``\t``, ``\r``, or ``\n``
encodes a tab, carriage return, or newline character, respectively. A ``\;``
outside of any `Variable References`_  encodes itself but may be used in an
`Unquoted Argument`_ to encode the ``;`` without dividing the argument
value on it.  A ``\;`` inside `Variable References`_ encodes the literal
``;`` character.  (See also policy :policy:`CMP0053` documentation for
historical considerations.)

.. _`Variable References`:

Variable References
-------------------

A *variable reference* has the form ``${<variable>}`` and is
evaluated inside a `Quoted Argument`_ or an `Unquoted Argument`_.
A variable reference is replaced by the value of the specified
variable or cache entry, or if neither is set, by the empty string.
Variable references can nest and are evaluated from the
inside out, e.g. ``${outer_${inner_variable}_variable}``.

Literal variable references may consist of alphanumeric characters,
the characters ``/_.+-``, and `Escape Sequences`_.  Nested references
may be used to evaluate variables of any name.  See also policy
:policy:`CMP0053` documentation for historical considerations and reasons why
the ``$`` is also technically permitted but is discouraged.

The `Variables`_ section documents the scope of variable names
and how their values are set.

An *environment variable reference* has the form ``$ENV{<variable>}``.
See the `Environment Variables`_ section for more information.

A *cache variable reference* has the form ``$CACHE{<variable>}``,
and is replaced by the value of the specified cache entry without
checking for a normal variable of the same name.  If the cache
entry does not exist, it is replaced by the empty string.
See :variable:`CACHE` for more information.

The :command:`if` command has a special condition syntax that
allows for variable references in the short form ``<variable>``
instead of ``${<variable>}``.  However, environment variables
always need to be referenced as ``$ENV{<variable>}``.

Comments
--------

A comment starts with a ``#`` character that is not inside a
`Bracket Argument`_, `Quoted Argument`_, or escaped with ``\``
as part of an `Unquoted Argument`_.  There are two types of
comments: a `Bracket Comment`_ and a `Line Comment`_.

.. _`Bracket Comment`:

Bracket Comment
^^^^^^^^^^^^^^^

A ``#`` immediately followed by a :token:`bracket_open` forms a
*bracket comment* consisting of the entire bracket enclosure:

.. raw:: latex

   \begin{small}

.. productionlist::
 bracket_comment: '#' `bracket_argument`

.. raw:: latex

   \end{small}

For example:

::

 #[[This is a bracket comment.
 It runs until the close bracket.]]
 message("First Argument\n" #[[Bracket Comment]] "Second Argument")

.. note::
 CMake versions prior to 3.0 do not support bracket comments.
 They interpret the opening ``#`` as the start of a `Line Comment`_.

.. _`Line Comment`:

Line Comment
^^^^^^^^^^^^

A ``#`` not immediately followed by a :token:`bracket_open` forms a
*line comment* that runs until the end of the line:

.. raw:: latex

   \begin{small}

.. productionlist::
 line_comment: '#' <any text not starting in a `bracket_open`
             :      and not containing a `newline`>

.. raw:: latex

   \end{small}

For example:

.. code-block:: cmake

 # This is a line comment.
 message("First Argument\n" # This is a line comment :)
         "Second Argument") # This is a line comment.

Control Structures
==================

Conditional Blocks
------------------

The :command:`if`/:command:`elseif`/:command:`else`/:command:`endif`
commands delimit code blocks to be executed conditionally.

Loops
-----

The :command:`foreach`/:command:`endforeach` and
:command:`while`/:command:`endwhile` commands delimit code
blocks to be executed in a loop.  Inside such blocks the
:command:`break` command may be used to terminate the loop
early whereas the :command:`continue` command may be used
to start with the next iteration immediately.

Command Definitions
-------------------

The :command:`macro`/:command:`endmacro`, and
:command:`function`/:command:`endfunction` commands delimit
code blocks to be recorded for later invocation as commands.

.. _`CMake Language Variables`:

Variables
=========

Variables are the basic unit of storage in the CMake Language.
Their values are always of string type, though some commands may
interpret the strings as values of other types.
The :command:`set` and :command:`unset` commands explicitly
set or unset a variable, but other commands have semantics
that modify variables as well.
Variable names are case-sensitive and may consist of almost
any text, but we recommend sticking to names consisting only
of alphanumeric characters plus ``_`` and ``-``.

Variables have dynamic scope.  Each variable "set" or "unset"
creates a binding in the current scope:

Block Scope
 The :command:`block` command may create a new scope for variable bindings.

Function Scope
 `Command Definitions`_ created by the :command:`function` command
 create commands that, when invoked, process the recorded commands
 in a new variable binding scope.  A variable "set" or "unset"
 binds in this scope and is visible for the current function and
 any nested calls within it, but not after the function returns.

Directory Scope
 Each of the `Directories`_ in a source tree has its own variable
 bindings.  Before processing the ``CMakeLists.txt`` file for a
 directory, CMake copies all variable bindings currently defined
 in the parent directory, if any, to initialize the new directory
 scope.  CMake `Scripts`_, when processed with :option:`cmake -P`,
 bind variables in one "directory" scope.

 A variable "set" or "unset" not inside a function call binds
 to the current directory scope.

Persistent Cache
 CMake stores a separate set of "cache" variables, or "cache entries",
 whose values persist across multiple runs within a project build
 tree.  Cache entries have an isolated binding scope modified only
 by explicit request, such as by the ``CACHE`` option of the
 :command:`set` and :command:`unset` commands.

When evaluating `Variable References`_, CMake first searches the
function call stack, if any, for a binding and then falls back
to the binding in the current directory scope, if any.  If a
"set" binding is found, its value is used.  If an "unset" binding
is found, or no binding is found, CMake then searches for a
cache entry.  If a cache entry is found, its value is used.
Otherwise, the variable reference evaluates to an empty string.
The ``$CACHE{VAR}`` syntax can be used to do direct cache entry
lookups.

The :manual:`cmake-variables(7)` manual documents the many variables
that are provided by CMake or have meaning to CMake when set
by project code.

.. include:: ID_RESERVE.txt

.. _`CMake Language Environment Variables`:

Environment Variables
=====================

Environment Variables are like ordinary `Variables`_, with the
following differences:

Scope
 Environment variables have global scope in a CMake process.
 They are never cached.

References
 `Variable References`_ have the form ``$ENV{<variable>}``, using the
 :variable:`ENV` operator.

Initialization
 Initial values of the CMake environment variables are those of
 the calling process.
 Values can be changed using the :command:`set` and :command:`unset`
 commands.
 These commands only affect the running CMake process,
 not the system environment at large.
 Changed values are not written back to the calling process,
 and they are not seen by subsequent build or test processes.

 See the :option:`cmake -E env <cmake-E env>` command-line
 tool to run a command in a modified environment.

Inspection
 See the :option:`cmake -E environment <cmake-E environment>` command-line
 tool to display all current environment variables.

The :manual:`cmake-env-variables(7)` manual documents environment
variables that have special meaning to CMake.

.. _`CMake Language Lists`:

Lists
=====

Although all values in CMake are stored as strings, a string
may be treated as a list in certain contexts, such as during
evaluation of an `Unquoted Argument`_.  In such contexts, a string
is divided into list elements by splitting on ``;`` characters not
following an unequal number of ``[`` and ``]`` characters and not
immediately preceded by a ``\``.  The sequence ``\;`` does not
divide a value but is replaced by ``;`` in the resulting element.

A list of elements is represented as a string by concatenating
the elements separated by ``;``.  For example, the :command:`set`
command stores multiple values into the destination variable
as a list:

.. code-block:: cmake

 set(srcs a.c b.c c.c) # sets "srcs" to "a.c;b.c;c.c"

Lists are meant for simple use cases such as a list of source
files and should not be used for complex data processing tasks.
Most commands that construct lists do not escape ``;`` characters
in list elements, thus flattening nested lists:

.. code-block:: cmake

 set(x a "b;c") # sets "x" to "a;b;c", not "a;b\;c"

In general, lists do not support elements containing ``;`` characters.
To avoid problems, consider the following advice:

* The interfaces of many CMake commands, variables, and properties accept
  semicolon-separated lists.  Avoid passing lists with elements containing
  semicolons to these interfaces unless they document either direct support
  or some way to escape or encode semicolons.

* When constructing a list, substitute an otherwise-unused placeholder
  for ``;`` in elements when.  Then substitute ``;`` for the placeholder
  when processing list elements.
  For example, the following code uses ``|`` in place of ``;`` characters:

  .. code-block:: cmake

    set(mylist a "b|c")
    foreach(entry IN LISTS mylist)
      string(REPLACE "|" ";" entry "${entry}")
      # use "${entry}" normally
    endforeach()

  The :module:`ExternalProject` module's ``LIST_SEPARATOR`` option is an
  example of an interface built using this approach.

* In lists of :manual:`generator expressions <cmake-generator-expressions(7)>`,
  use the :genex:`$<SEMICOLON>` generator expression.

* In command calls, use `Quoted Argument`_ syntax whenever possible.
  The called command will receive the content of the argument with
  semicolons preserved.  An `Unquoted Argument`_ will be split on
  semicolons.

* In :command:`function` implementations, avoid ``ARGV`` and ``ARGN``,
  which do not distinguish semicolons in values from those separating values.
  Instead, prefer using named positional arguments and the ``ARGC`` and
  ``ARGV#`` variables.
  When using :command:`cmake_parse_arguments` to parse arguments, prefer
  its ``PARSE_ARGV`` signature, which uses the ``ARGV#`` variables.

  Note that this approach does not apply to :command:`macro` implementations
  because they reference arguments using placeholders, not real variables.



/P/🚀 manual/cmake-modules.7.rst
==============================================


.. cmake-manual-description: CMake Modules Reference

cmake-modules(7)
****************

The modules listed here are part of the CMake distribution.
Projects may provide further modules; their location(s)
can be specified in the :variable:`CMAKE_MODULE_PATH` variable.

Utility Modules
^^^^^^^^^^^^^^^

These modules are loaded using the :command:`include` command.

.. toctree::
   :maxdepth: 1

    Help/module/AndroidTestUtilities
    Help/module/BundleUtilities
    Help/module/CheckCCompilerFlag
    Help/module/CheckCompilerFlag
    Help/module/CheckCSourceCompiles
    Help/module/CheckCSourceRuns
    Help/module/CheckCXXCompilerFlag
    Help/module/CheckCXXSourceCompiles
    Help/module/CheckCXXSourceRuns
    Help/module/CheckCXXSymbolExists
    Help/module/CheckFortranCompilerFlag
    Help/module/CheckFortranFunctionExists
    Help/module/CheckFortranSourceCompiles
    Help/module/CheckFortranSourceRuns
    Help/module/CheckFunctionExists
    Help/module/CheckIncludeFileCXX
    Help/module/CheckIncludeFile
    Help/module/CheckIncludeFiles
    Help/module/CheckIPOSupported
    Help/module/CheckLanguage
    Help/module/CheckLibraryExists
    Help/module/CheckLinkerFlag
    Help/module/CheckOBJCCompilerFlag
    Help/module/CheckOBJCSourceCompiles
    Help/module/CheckOBJCSourceRuns
    Help/module/CheckOBJCXXCompilerFlag
    Help/module/CheckOBJCXXSourceCompiles
    Help/module/CheckOBJCXXSourceRuns
    Help/module/CheckPIESupported
    Help/module/CheckPrototypeDefinition
    Help/module/CheckSourceCompiles
    Help/module/CheckSourceRuns
    Help/module/CheckStructHasMember
    Help/module/CheckSymbolExists
    Help/module/CheckTypeSize
    Help/module/CheckVariableExists
    Help/module/CMakeAddFortranSubdirectory
    Help/module/CMakeBackwardCompatibilityCXX
    Help/module/CMakeDependentOption
    Help/module/CMakeFindDependencyMacro
    Help/module/CMakeFindFrameworks
    Help/module/CMakeFindPackageMode
    Help/module/CMakeGraphVizOptions
    Help/module/CMakePackageConfigHelpers
    Help/module/CMakePrintHelpers
    Help/module/CMakePrintSystemInformation
    Help/module/CMakePushCheckState
    Help/module/CMakeVerifyManifest
    Help/module/CPack
    Help/module/CPackComponent
    Help/module/CPackIFW
    Help/module/CPackIFWConfigureFile
    Help/module/CSharpUtilities
    Help/module/CTest
    Help/module/CTestCoverageCollectGCOV
    Help/module/CTestScriptMode
    Help/module/CTestUseLaunchers
    Help/module/DeployQt4
    Help/module/ExternalData
    Help/module/ExternalProject
    Help/module/FeatureSummary
    Help/module/FetchContent
    Help/module/FindPackageHandleStandardArgs
    Help/module/FindPackageMessage
    Help/module/FortranCInterface
    Help/module/GenerateExportHeader
    Help/module/GNUInstallDirs
    Help/module/GoogleTest
    Help/module/InstallRequiredSystemLibraries
    Help/module/ProcessorCount
    Help/module/SelectLibraryConfigurations
    Help/module/SquishTestScript
    Help/module/TestForANSIForScope
    Help/module/TestForANSIStreamHeaders
    Help/module/TestForSSTREAM
    Help/module/TestForSTDNamespace
    Help/module/UseEcos
    Help/module/UseJava
    Help/module/UseSWIG
    Help/module/UsewxWidgets

Find Modules
^^^^^^^^^^^^

These modules search for third-party software.
They are normally called through the :command:`find_package` command.

.. toctree::
   :maxdepth: 1

    Help/module/FindALSA
    Help/module/FindArmadillo
    Help/module/FindASPELL
    Help/module/FindAVIFile
    Help/module/FindBacktrace
    Help/module/FindBISON
    Help/module/FindBLAS
    Help/module/FindBoost
    Help/module/FindBullet
    Help/module/FindBZip2
    Help/module/FindCABLE
    Help/module/FindCoin3D
    Help/module/FindCUDAToolkit
    Help/module/FindCups
    Help/module/FindCURL
    Help/module/FindCurses
    Help/module/FindCVS
    Help/module/FindCxxTest
    Help/module/FindCygwin
    Help/module/FindDCMTK
    Help/module/FindDevIL
    Help/module/FindDoxygen
    Help/module/FindEnvModules
    Help/module/FindEXPAT
    Help/module/FindFLEX
    Help/module/FindFLTK
    Help/module/FindFLTK2
    Help/module/FindFontconfig
    Help/module/FindFreetype
    Help/module/FindGCCXML
    Help/module/FindGDAL
    Help/module/FindGettext
    Help/module/FindGIF
    Help/module/FindGit
    Help/module/FindGLEW
    Help/module/FindGLUT
    Help/module/FindGnuplot
    Help/module/FindGnuTLS
    Help/module/FindGSL
    Help/module/FindGTest
    Help/module/FindGTK
    Help/module/FindGTK2
    Help/module/FindHDF5
    Help/module/FindHg
    Help/module/FindHSPELL
    Help/module/FindHTMLHelp
    Help/module/FindIce
    Help/module/FindIconv
    Help/module/FindIcotool
    Help/module/FindICU
    Help/module/FindImageMagick
    Help/module/FindIntl
    Help/module/FindJasper
    Help/module/FindJava
    Help/module/FindJNI
    Help/module/FindJPEG
    Help/module/FindKDE3
    Help/module/FindKDE4
    Help/module/FindLAPACK
    Help/module/FindLATEX
    Help/module/FindLibArchive
    Help/module/FindLibinput
    Help/module/FindLibLZMA
    Help/module/FindLibXml2
    Help/module/FindLibXslt
    Help/module/FindLTTngUST
    Help/module/FindLua
    Help/module/FindLua50
    Help/module/FindLua51
    Help/module/FindMatlab
    Help/module/FindMFC
    Help/module/FindMotif
    Help/module/FindMPEG
    Help/module/FindMPEG2
    Help/module/FindMPI
    Help/module/FindMsys
    Help/module/FindODBC
    Help/module/FindOpenACC
    Help/module/FindOpenAL
    Help/module/FindOpenCL
    Help/module/FindOpenGL
    Help/module/FindOpenMP
    Help/module/FindOpenSceneGraph
    Help/module/FindOpenSP
    Help/module/FindOpenSSL
    Help/module/FindOpenThreads
    Help/module/Findosg
    Help/module/Findosg_functions
    Help/module/FindosgAnimation
    Help/module/FindosgDB
    Help/module/FindosgFX
    Help/module/FindosgGA
    Help/module/FindosgIntrospection
    Help/module/FindosgManipulator
    Help/module/FindosgParticle
    Help/module/FindosgPresentation
    Help/module/FindosgProducer
    Help/module/FindosgQt
    Help/module/FindosgShadow
    Help/module/FindosgSim
    Help/module/FindosgTerrain
    Help/module/FindosgText
    Help/module/FindosgUtil
    Help/module/FindosgViewer
    Help/module/FindosgVolume
    Help/module/FindosgWidget
    Help/module/FindPatch
    Help/module/FindPerl
    Help/module/FindPerlLibs
    Help/module/FindPHP4
    Help/module/FindPhysFS
    Help/module/FindPike
    Help/module/FindPkgConfig
    Help/module/FindPNG
    Help/module/FindPostgreSQL
    Help/module/FindProducer
    Help/module/FindProtobuf
    Help/module/FindPython
    Help/module/FindPython2
    Help/module/FindPython3
    Help/module/FindQt3
    Help/module/FindQt4
    Help/module/FindQuickTime
    Help/module/FindRTI
    Help/module/FindRuby
    Help/module/FindSDL
    Help/module/FindSDL_image
    Help/module/FindSDL_gfx
    Help/module/FindSDL_mixer
    Help/module/FindSDL_net
    Help/module/FindSDL_sound
    Help/module/FindSDL_ttf
    Help/module/FindSelfPackers
    Help/module/FindSquish
    Help/module/FindSQLite3
    Help/module/FindSubversion
    Help/module/FindSWIG
    Help/module/FindTCL
    Help/module/FindTclsh
    Help/module/FindTclStub
    Help/module/FindThreads
    Help/module/FindTIFF
    Help/module/FindVulkan
    Help/module/FindWget
    Help/module/FindWish
    Help/module/FindwxWidgets
    Help/module/FindX11
    Help/module/FindXalanC
    Help/module/FindXCTest
    Help/module/FindXercesC
    Help/module/FindXMLRPC
    Help/module/FindZLIB

Deprecated Modules
^^^^^^^^^^^^^^^^^^^

Deprecated Utility Modules
==========================

.. toctree::
   :maxdepth: 1

    Help/module/AddFileDependencies
    Help/module/CMakeDetermineVSServicePack
    Help/module/CMakeExpandImportedTargets
    Help/module/CMakeForceCompiler
    Help/module/CMakeParseArguments
    Help/module/Dart
    Help/module/Documentation
    Help/module/GetPrerequisites
    Help/module/MacroAddFileDependencies
    Help/module/TestBigEndian
    Help/module/TestCXXAcceptsFlag
    Help/module/UseJavaClassFilelist
    Help/module/UseJavaSymlinks
    Help/module/UsePkgConfig
    Help/module/Use_wxWindows
    Help/module/WriteBasicConfigVersionFile
    Help/module/WriteCompilerDetectionHeader

Deprecated Find Modules
=======================

.. toctree::
   :maxdepth: 1

    Help/module/FindCUDA
    Help/module/FindDart
    Help/module/FindITK
    Help/module/FindPythonInterp
    Help/module/FindPythonLibs
    Help/module/FindQt
    Help/module/FindUnixCommands
    Help/module/FindVTK
    Help/module/FindwxWindows

Legacy CPack Modules
====================

These modules used to be mistakenly exposed to the user, and have been moved
out of user visibility. They are for CPack internal use, and should never be
used directly.

.. toctree::
   :maxdepth: 1

    Help/module/CPackArchive
    Help/module/CPackBundle
    Help/module/CPackCygwin
    Help/module/CPackDeb
    Help/module/CPackDMG
    Help/module/CPackFreeBSD
    Help/module/CPackNSIS
    Help/module/CPackNuGet
    Help/module/CPackProductBuild
    Help/module/CPackRPM
    Help/module/CPackWIX



/P/🚀 manual/cmake-packages.7.rst
===============================================


.. cmake-manual-description: CMake Packages Reference

cmake-packages(7)
*****************

Introduction
============

Packages provide dependency information to CMake based buildsystems.  Packages
are found with the :command:`find_package` command.  The result of
using :command:`find_package` is either a set of :prop_tgt:`IMPORTED` targets, or
a set of variables corresponding to build-relevant information.

Using Packages
==============

CMake provides direct support for two forms of packages,
`Config-file Packages`_ and `Find-module Packages`_.
Indirect support for ``pkg-config`` packages is also provided via
the :module:`FindPkgConfig` module.  In all cases, the basic form
of :command:`find_package` calls is the same:

.. code-block:: cmake

  find_package(Qt4 4.7.0 REQUIRED) # CMake provides a Qt4 find-module
  find_package(Qt5Core 5.1.0 REQUIRED) # Qt provides a Qt5 package config file.
  find_package(LibXml2 REQUIRED) # Use pkg-config via the LibXml2 find-module

In cases where it is known that a package configuration file is provided by
upstream, and only that should be used, the ``CONFIG`` keyword may be passed
to :command:`find_package`:

.. code-block:: cmake

  find_package(Qt5Core 5.1.0 CONFIG REQUIRED)
  find_package(Qt5Gui 5.1.0 CONFIG)

Similarly, the ``MODULE`` keyword says to use only a find-module:

.. code-block:: cmake

  find_package(Qt4 4.7.0 MODULE REQUIRED)

Specifying the type of package explicitly improves the error message shown to
the user if it is not found.

Both types of packages also support specifying components of a package,
either after the ``REQUIRED`` keyword:

.. code-block:: cmake

  find_package(Qt5 5.1.0 CONFIG REQUIRED Widgets Xml Sql)

or as a separate ``COMPONENTS`` list:

.. code-block:: cmake

  find_package(Qt5 5.1.0 COMPONENTS Widgets Xml Sql)

or as a separate ``OPTIONAL_COMPONENTS`` list:

.. code-block:: cmake

  find_package(Qt5 5.1.0 COMPONENTS Widgets
                         OPTIONAL_COMPONENTS Xml Sql
  )

Handling of ``COMPONENTS`` and ``OPTIONAL_COMPONENTS`` is defined by the
package.

By setting the :variable:`CMAKE_DISABLE_FIND_PACKAGE_<PackageName>` variable to
``TRUE``, the ``<PackageName>`` package will not be searched, and will always
be ``NOTFOUND``. Likewise, setting the
:variable:`CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>` to ``TRUE`` will make the
package REQUIRED.

.. _`Config File Packages`:

Config-file Packages
--------------------

A config-file package is a set of files provided by upstreams for downstreams
to use. CMake searches in a number of locations for package configuration files, as
described in the :command:`find_package` documentation.  The most simple way for
a CMake user to tell :manual:`cmake(1)` to search in a non-standard prefix for
a package is to set the ``CMAKE_PREFIX_PATH`` cache variable.

Config-file packages are provided by upstream vendors as part of development
packages, that is, they belong with the header files and any other files
provided to assist downstreams in using the package.

A set of variables which provide package status information are also set
automatically when using a config-file package.  The ``<PackageName>_FOUND``
variable is set to true or false, depending on whether the package was
found.  The ``<PackageName>_DIR`` cache variable is set to the location of the
package configuration file.

Find-module Packages
--------------------

A find module is a file with a set of rules for finding the required pieces of
a dependency, primarily header files and libraries.  Typically, a find module
is needed when the upstream is not built with CMake, or is not CMake-aware
enough to otherwise provide a package configuration file.  Unlike a package configuration
file, it is not shipped with upstream, but is used by downstream to find the
files by guessing locations of files with platform-specific hints.

Unlike the case of an upstream-provided package configuration file, no single point
of reference identifies the package as being found, so the ``<PackageName>_FOUND``
variable is not automatically set by the :command:`find_package` command.  It
can still be expected to be set by convention however and should be set by
the author of the Find-module.  Similarly there is no ``<PackageName>_DIR`` variable,
but each of the artifacts such as library locations and header file locations
provide a separate cache variable.

See the :manual:`cmake-developer(7)` manual for more information about creating
Find-module files.

Package Layout
==============

A config-file package consists of a `Package Configuration File`_ and
optionally a `Package Version File`_ provided with the project distribution.

Package Configuration File
--------------------------

Consider a project ``Foo`` that installs the following files::

  <prefix>/include/foo-1.2/foo.h
  <prefix>/lib/foo-1.2/libfoo.a

It may also provide a CMake package configuration file::

  <prefix>/lib/cmake/foo-1.2/FooConfig.cmake

with content defining :prop_tgt:`IMPORTED` targets, or defining variables, such
as:

.. code-block:: cmake

  # ...
  # (compute PREFIX relative to file location)
  # ...
  set(Foo_INCLUDE_DIRS ${PREFIX}/include/foo-1.2)
  set(Foo_LIBRARIES ${PREFIX}/lib/foo-1.2/libfoo.a)

If another project wishes to use ``Foo`` it need only to locate the ``FooConfig.cmake``
file and load it to get all the information it needs about package content
locations.  Since the package configuration file is provided by the package
installation it already knows all the file locations.

The :command:`find_package` command may be used to search for the package
configuration file.  This command constructs a set of installation prefixes
and searches under each prefix in several locations.  Given the name ``Foo``,
it looks for a file called ``FooConfig.cmake`` or ``foo-config.cmake``.
The full set of locations is specified in the :command:`find_package` command
documentation. One place it looks is::

 <prefix>/lib/cmake/Foo*/

where ``Foo*`` is a case-insensitive globbing expression.  In our example the
globbing expression will match ``<prefix>/lib/cmake/foo-1.2`` and the package
configuration file will be found.

Once found, a package configuration file is immediately loaded.  It, together
with a package version file, contains all the information the project needs to
use the package.

Package Version File
--------------------

When the :command:`find_package` command finds a candidate package configuration
file it looks next to it for a version file. The version file is loaded to test
whether the package version is an acceptable match for the version requested.
If the version file claims compatibility the configuration file is accepted.
Otherwise it is ignored.

The name of the package version file must match that of the package configuration
file but has either ``-version`` or ``Version`` appended to the name before
the ``.cmake`` extension.  For example, the files::

 <prefix>/lib/cmake/foo-1.3/foo-config.cmake
 <prefix>/lib/cmake/foo-1.3/foo-config-version.cmake

and::

 <prefix>/lib/cmake/bar-4.2/BarConfig.cmake
 <prefix>/lib/cmake/bar-4.2/BarConfigVersion.cmake

are each pairs of package configuration files and corresponding package version
files.

When the :command:`find_package` command loads a version file it first sets the
following variables:

``PACKAGE_FIND_NAME``
 The ``<PackageName>``

``PACKAGE_FIND_VERSION``
 Full requested version string

``PACKAGE_FIND_VERSION_MAJOR``
 Major version if requested, else 0

``PACKAGE_FIND_VERSION_MINOR``
 Minor version if requested, else 0

``PACKAGE_FIND_VERSION_PATCH``
 Patch version if requested, else 0

``PACKAGE_FIND_VERSION_TWEAK``
 Tweak version if requested, else 0

``PACKAGE_FIND_VERSION_COUNT``
 Number of version components, 0 to 4

The version file must use these variables to check whether it is compatible or
an exact match for the requested version and set the following variables with
results:

``PACKAGE_VERSION``
 Full provided version string

``PACKAGE_VERSION_EXACT``
 True if version is exact match

``PACKAGE_VERSION_COMPATIBLE``
 True if version is compatible

``PACKAGE_VERSION_UNSUITABLE``
 True if unsuitable as any version

Version files are loaded in a nested scope so they are free to set any variables
they wish as part of their computation. The find_package command wipes out the
scope when the version file has completed and it has checked the output
variables. When the version file claims to be an acceptable match for the
requested version the find_package command sets the following variables for
use by the project:

``<PackageName>_VERSION``
 Full provided version string

``<PackageName>_VERSION_MAJOR``
 Major version if provided, else 0

``<PackageName>_VERSION_MINOR``
 Minor version if provided, else 0

``<PackageName>_VERSION_PATCH``
 Patch version if provided, else 0

``<PackageName>_VERSION_TWEAK``
 Tweak version if provided, else 0

``<PackageName>_VERSION_COUNT``
 Number of version components, 0 to 4

The variables report the version of the package that was actually found.
The ``<PackageName>`` part of their name matches the argument given to the
:command:`find_package` command.

.. _`Creating Packages`:

Creating Packages
=================

Usually, the upstream depends on CMake itself and can use some CMake facilities
for creating the package files. Consider an upstream which provides a single
shared library:

.. code-block:: cmake

  project(UpstreamLib)

  set(CMAKE_INCLUDE_CURRENT_DIR ON)
  set(CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE ON)

  set(Upstream_VERSION 3.4.1)

  include(GenerateExportHeader)

  add_library(ClimbingStats SHARED climbingstats.cpp)
  generate_export_header(ClimbingStats)
  set_property(TARGET ClimbingStats PROPERTY VERSION ${Upstream_VERSION})
  set_property(TARGET ClimbingStats PROPERTY SOVERSION 3)
  set_property(TARGET ClimbingStats PROPERTY
    INTERFACE_ClimbingStats_MAJOR_VERSION 3)
  set_property(TARGET ClimbingStats APPEND PROPERTY
    COMPATIBLE_INTERFACE_STRING ClimbingStats_MAJOR_VERSION
  )

  install(TARGETS ClimbingStats EXPORT ClimbingStatsTargets
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
    INCLUDES DESTINATION include
  )
  install(
    FILES
      climbingstats.h
      "${CMAKE_CURRENT_BINARY_DIR}/climbingstats_export.h"
    DESTINATION
      include
    COMPONENT
      Devel
  )

  include(CMakePackageConfigHelpers)
  write_basic_package_version_file(
    "${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsConfigVersion.cmake"
    VERSION ${Upstream_VERSION}
    COMPATIBILITY AnyNewerVersion
  )

  export(EXPORT ClimbingStatsTargets
    FILE "${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsTargets.cmake"
    NAMESPACE Upstream::
  )
  configure_file(cmake/ClimbingStatsConfig.cmake
    "${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsConfig.cmake"
    COPYONLY
  )

  set(ConfigPackageLocation lib/cmake/ClimbingStats)
  install(EXPORT ClimbingStatsTargets
    FILE
      ClimbingStatsTargets.cmake
    NAMESPACE
      Upstream::
    DESTINATION
      ${ConfigPackageLocation}
  )
  install(
    FILES
      cmake/ClimbingStatsConfig.cmake
      "${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsConfigVersion.cmake"
    DESTINATION
      ${ConfigPackageLocation}
    COMPONENT
      Devel
  )

The :module:`CMakePackageConfigHelpers` module provides a macro for creating
a simple ``ConfigVersion.cmake`` file.  This file sets the version of the
package.  It is read by CMake when :command:`find_package` is called to
determine the compatibility with the requested version, and to set some
version-specific variables ``<PackageName>_VERSION``, ``<PackageName>_VERSION_MAJOR``,
``<PackageName>_VERSION_MINOR`` etc.  The :command:`install(EXPORT)` command is
used to export the targets in the ``ClimbingStatsTargets`` export-set, defined
previously by the :command:`install(TARGETS)` command. This command generates
the ``ClimbingStatsTargets.cmake`` file to contain :prop_tgt:`IMPORTED`
targets, suitable for use by downstreams and arranges to install it to
``lib/cmake/ClimbingStats``.  The generated ``ClimbingStatsConfigVersion.cmake``
and a ``cmake/ClimbingStatsConfig.cmake`` are installed to the same location,
completing the package.

The generated :prop_tgt:`IMPORTED` targets have appropriate properties set
to define their :ref:`usage requirements <Target Usage Requirements>`, such as
:prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`,
:prop_tgt:`INTERFACE_COMPILE_DEFINITIONS` and other relevant built-in
``INTERFACE_`` properties.  The ``INTERFACE`` variant of user-defined
properties listed in :prop_tgt:`COMPATIBLE_INTERFACE_STRING` and
other :ref:`Compatible Interface Properties` are also propagated to the
generated :prop_tgt:`IMPORTED` targets.  In the above case,
``ClimbingStats_MAJOR_VERSION`` is defined as a string which must be
compatible among the dependencies of any depender.  By setting this custom
defined user property in this version and in the next version of
``ClimbingStats``, :manual:`cmake(1)` will issue a diagnostic if there is an
attempt to use version 3 together with version 4.  Packages can choose to
employ such a pattern if different major versions of the package are designed
to be incompatible.

A ``NAMESPACE`` with double-colons is specified when exporting the targets
for installation.  This convention of double-colons gives CMake a hint that
the name is an :prop_tgt:`IMPORTED` target when it is used by downstreams
with the :command:`target_link_libraries` command.  This way, CMake can
issue a diagnostic if the package providing it has not yet been found.

In this case, when using :command:`install(TARGETS)` the ``INCLUDES DESTINATION``
was specified.  This causes the ``IMPORTED`` targets to have their
:prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` populated with the ``include``
directory in the :variable:`CMAKE_INSTALL_PREFIX`.  When the ``IMPORTED``
target is used by downstream, it automatically consumes the entries from
that property.

Creating a Package Configuration File
-------------------------------------

In this case, the ``ClimbingStatsConfig.cmake`` file could be as simple as:

.. code-block:: cmake

  include("${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsTargets.cmake")

As this allows downstreams to use the ``IMPORTED`` targets.  If any macros
should be provided by the ``ClimbingStats`` package, they should
be in a separate file which is installed to the same location as the
``ClimbingStatsConfig.cmake`` file, and included from there.

This can also be extended to cover dependencies:

.. code-block:: cmake

  # ...
  add_library(ClimbingStats SHARED climbingstats.cpp)
  generate_export_header(ClimbingStats)

  find_package(Stats 2.6.4 REQUIRED)
  target_link_libraries(ClimbingStats PUBLIC Stats::Types)

As the ``Stats::Types`` target is a ``PUBLIC`` dependency of ``ClimbingStats``,
downstreams must also find the ``Stats`` package and link to the ``Stats::Types``
library.  The ``Stats`` package should be found in the ``ClimbingStatsConfig.cmake``
file to ensure this.  The ``find_dependency`` macro from the
:module:`CMakeFindDependencyMacro` helps with this by propagating
whether the package is ``REQUIRED``, or ``QUIET`` etc.  All ``REQUIRED``
dependencies of a package should be found in the ``Config.cmake`` file:

.. code-block:: cmake

  include(CMakeFindDependencyMacro)
  find_dependency(Stats 2.6.4)

  include("${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsTargets.cmake")
  include("${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsMacros.cmake")

The ``find_dependency`` macro also sets ``ClimbingStats_FOUND`` to ``False`` if
the dependency is not found, along with a diagnostic that the ``ClimbingStats``
package can not be used without the ``Stats`` package.

If ``COMPONENTS`` are specified when the downstream uses :command:`find_package`,
they are listed in the ``<PackageName>_FIND_COMPONENTS`` variable. If a particular
component is non-optional, then the ``<PackageName>_FIND_REQUIRED_<comp>`` will
be true. This can be tested with logic in the package configuration file:

.. code-block:: cmake

  include(CMakeFindDependencyMacro)
  find_dependency(Stats 2.6.4)

  include("${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsTargets.cmake")
  include("${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsMacros.cmake")

  set(_ClimbingStats_supported_components Plot Table)

  foreach(_comp ${ClimbingStats_FIND_COMPONENTS})
    if (NOT ";${_ClimbingStats_supported_components};" MATCHES ";${_comp};")
      set(ClimbingStats_FOUND False)
      set(ClimbingStats_NOT_FOUND_MESSAGE "Unsupported component: ${_comp}")
    endif()
    include("${CMAKE_CURRENT_LIST_DIR}/ClimbingStats${_comp}Targets.cmake")
  endforeach()

Here, the ``ClimbingStats_NOT_FOUND_MESSAGE`` is set to a diagnosis that the package
could not be found because an invalid component was specified.  This message
variable can be set for any case where the ``_FOUND`` variable is set to ``False``,
and will be displayed to the user.

Creating a Package Configuration File for the Build Tree
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The :command:`export(EXPORT)` command creates an :prop_tgt:`IMPORTED` targets
definition file which is specific to the build-tree, and is not relocatable.
This can similarly be used with a suitable package configuration file and
package version file to define a package for the build tree which may be used
without installation.  Consumers of the build tree can simply ensure that the
:variable:`CMAKE_PREFIX_PATH` contains the build directory, or set the
``ClimbingStats_DIR`` to ``<build_dir>/ClimbingStats`` in the cache.

.. _`Creating Relocatable Packages`:

Creating Relocatable Packages
-----------------------------

A relocatable package must not reference absolute paths of files on
the machine where the package is built that will not exist on the
machines where the package may be installed.

Packages created by :command:`install(EXPORT)` are designed to be relocatable,
using paths relative to the location of the package itself.  When defining
the interface of a target for ``EXPORT``, keep in mind that the include
directories should be specified as relative paths which are relative to the
:variable:`CMAKE_INSTALL_PREFIX`:

.. code-block:: cmake

  target_include_directories(tgt INTERFACE
    # Wrong, not relocatable:
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_PREFIX}/include/TgtName>
  )

  target_include_directories(tgt INTERFACE
    # Ok, relocatable:
    $<INSTALL_INTERFACE:include/TgtName>
  )

The ``$<INSTALL_PREFIX>``
:manual:`generator expression <cmake-generator-expressions(7)>` may be used as
a placeholder for the install prefix without resulting in a non-relocatable
package.  This is necessary if complex generator expressions are used:

.. code-block:: cmake

  target_include_directories(tgt INTERFACE
    # Ok, relocatable:
    $<INSTALL_INTERFACE:$<$<CONFIG:Debug>:$<INSTALL_PREFIX>/include/TgtName>>
  )

This also applies to paths referencing external dependencies.
It is not advisable to populate any properties which may contain
paths, such as :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` and
:prop_tgt:`INTERFACE_LINK_LIBRARIES`, with paths relevant to dependencies.
For example, this code may not work well for a relocatable package:

.. code-block:: cmake

  target_link_libraries(ClimbingStats INTERFACE
    ${Foo_LIBRARIES} ${Bar_LIBRARIES}
    )
  target_include_directories(ClimbingStats INTERFACE
    "$<INSTALL_INTERFACE:${Foo_INCLUDE_DIRS};${Bar_INCLUDE_DIRS}>"
    )

The referenced variables may contain the absolute paths to libraries
and include directories **as found on the machine the package was made on**.
This would create a package with hard-coded paths to dependencies and not
suitable for relocation.

Ideally such dependencies should be used through their own
:ref:`IMPORTED targets <Imported Targets>` that have their own
:prop_tgt:`IMPORTED_LOCATION` and usage requirement properties
such as :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` populated
appropriately.  Those imported targets may then be used with
the :command:`target_link_libraries` command for ``ClimbingStats``:

.. code-block:: cmake

  target_link_libraries(ClimbingStats INTERFACE Foo::Foo Bar::Bar)

With this approach the package references its external dependencies
only through the names of :ref:`IMPORTED targets <Imported Targets>`.
When a consumer uses the installed package, the consumer will run the
appropriate :command:`find_package` commands (via the ``find_dependency``
macro described above) to find the dependencies and populate the
imported targets with appropriate paths on their own machine.

Unfortunately many :manual:`modules <cmake-modules(7)>` shipped with
CMake do not yet provide :ref:`IMPORTED targets <Imported Targets>`
because their development pre-dated this approach.  This may improve
incrementally over time.  Workarounds to create relocatable packages
using such modules include:

* When building the package, specify each ``Foo_LIBRARY`` cache
  entry as just a library name, e.g. ``-DFoo_LIBRARY=foo``.  This
  tells the corresponding find module to populate the ``Foo_LIBRARIES``
  with just ``foo`` to ask the linker to search for the library
  instead of hard-coding a path.

* Or, after installing the package content but before creating the
  package installation binary for redistribution, manually replace
  the absolute paths with placeholders for substitution by the
  installation tool when the package is installed.

.. _`Package Registry`:

Package Registry
================

CMake provides two central locations to register packages that have
been built or installed anywhere on a system:

* `User Package Registry`_
* `System Package Registry`_

The registries are especially useful to help projects find packages in
non-standard install locations or directly in their own build trees.
A project may populate either the user or system registry (using its own
means, see below) to refer to its location.
In either case the package should store at the registered location a
`Package Configuration File`_ (``<PackageName>Config.cmake``) and optionally a
`Package Version File`_ (``<PackageName>ConfigVersion.cmake``).

The :command:`find_package` command searches the two package registries
as two of the search steps specified in its documentation.  If it has
sufficient permissions it also removes stale package registry entries
that refer to directories that do not exist or do not contain a matching
package configuration file.

.. _`User Package Registry`:

User Package Registry
---------------------

The User Package Registry is stored in a per-user location.
The :command:`export(PACKAGE)` command may be used to register a project
build tree in the user package registry.  CMake currently provides no
interface to add install trees to the user package registry.  Installers
must be manually taught to register their packages if desired.

On Windows the user package registry is stored in the Windows registry
under a key in ``HKEY_CURRENT_USER``.

A ``<PackageName>`` may appear under registry key::

  HKEY_CURRENT_USER\Software\Kitware\CMake\Packages\<PackageName>

as a ``REG_SZ`` value, with arbitrary name, that specifies the directory
containing the package configuration file.

On UNIX platforms the user package registry is stored in the user home
directory under ``~/.cmake/packages``.  A ``<PackageName>`` may appear under
the directory::

  ~/.cmake/packages/<PackageName>

as a file, with arbitrary name, whose content specifies the directory
containing the package configuration file.

.. _`System Package Registry`:

System Package Registry
-----------------------

The System Package Registry is stored in a system-wide location.
CMake currently provides no interface to add to the system package registry.
Installers must be manually taught to register their packages if desired.

On Windows the system package registry is stored in the Windows registry
under a key in ``HKEY_LOCAL_MACHINE``.  A ``<PackageName>`` may appear under
registry key::

  HKEY_LOCAL_MACHINE\Software\Kitware\CMake\Packages\<PackageName>

as a ``REG_SZ`` value, with arbitrary name, that specifies the directory
containing the package configuration file.

There is no system package registry on non-Windows platforms.

.. _`Disabling the Package Registry`:

Disabling the Package Registry
------------------------------

In some cases using the Package Registries is not desirable. CMake
allows one to disable them using the following variables:

* The :command:`export(PACKAGE)` command does not populate the user
  package registry when :policy:`CMP0090` is set to ``NEW`` unless the
  :variable:`CMAKE_EXPORT_PACKAGE_REGISTRY` variable explicitly enables it.
  When :policy:`CMP0090` is *not* set to ``NEW`` then
  :command:`export(PACKAGE)` populates the user package registry unless
  the :variable:`CMAKE_EXPORT_NO_PACKAGE_REGISTRY` variable explicitly
  disables it.
* :variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` disables the
  User Package Registry in all the :command:`find_package` calls when
  set to ``FALSE``.
* Deprecated :variable:`CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY` disables the
  User Package Registry in all the :command:`find_package` calls when set
  to ``TRUE``. This variable is ignored when
  :variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` has been set.
* :variable:`CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY` disables
  the System Package Registry in all the :command:`find_package` calls.

Package Registry Example
------------------------

A simple convention for naming package registry entries is to use content
hashes.  They are deterministic and unlikely to collide
(:command:`export(PACKAGE)` uses this approach).
The name of an entry referencing a specific directory is simply the content
hash of the directory path itself.

If a project arranges for package registry entries to exist, such as::

 > reg query HKCU\Software\Kitware\CMake\Packages\MyPackage
 HKEY_CURRENT_USER\Software\Kitware\CMake\Packages\MyPackage
  45e7d55f13b87179bb12f907c8de6fc4 REG_SZ c:/Users/Me/Work/lib/cmake/MyPackage
  7b4a9844f681c80ce93190d4e3185db9 REG_SZ c:/Users/Me/Work/MyPackage-build

or::

 $ cat ~/.cmake/packages/MyPackage/7d1fb77e07ce59a81bed093bbee945bd
 /home/me/work/lib/cmake/MyPackage
 $ cat ~/.cmake/packages/MyPackage/f92c1db873a1937f3100706657c63e07
 /home/me/work/MyPackage-build

then the ``CMakeLists.txt`` code:

.. code-block:: cmake

  find_package(MyPackage)

will search the registered locations for package configuration files
(``MyPackageConfig.cmake``).  The search order among package registry
entries for a single package is unspecified and the entry names
(hashes in this example) have no meaning.  Registered locations may
contain package version files (``MyPackageConfigVersion.cmake``) to
tell :command:`find_package` whether a specific location is suitable
for the version requested.

Package Registry Ownership
--------------------------

Package registry entries are individually owned by the project installations
that they reference.  A package installer is responsible for adding its own
entry and the corresponding uninstaller is responsible for removing it.

The :command:`export(PACKAGE)` command populates the user package registry
with the location of a project build tree.  Build trees tend to be deleted by
developers and have no "uninstall" event that could trigger removal of their
entries.  In order to keep the registries clean the :command:`find_package`
command automatically removes stale entries it encounters if it has sufficient
permissions.  CMake provides no interface to remove an entry referencing an
existing build tree once :command:`export(PACKAGE)` has been invoked.
However, if the project removes its package configuration file from the build
tree then the entry referencing the location will be considered stale.



/P/🚀 manual/cmake-presets.7.rst
==============================================


.. cmake-manual-description: CMakePresets.json

cmake-presets(7)
****************

Introduction
============

.. versionadded:: 3.19

One problem that CMake users often face is sharing settings with other people
for common ways to configure a project. This may be done to support CI builds,
or for users who frequently use the same build. CMake supports two main files,
``CMakePresets.json`` and ``CMakeUserPresets.json``, that allow users to
specify common configure options and share them with others. CMake also
supports files included with the ``include`` field.

``CMakePresets.json`` and ``CMakeUserPresets.json`` live in the project's root
directory. They both have exactly the same format, and both are optional
(though at least one must be present if :option:`--preset <cmake --preset>`
is specified).  ``CMakePresets.json`` is meant to specify project-wide build
details, while ``CMakeUserPresets.json`` is meant for developers to specify
their own local build details.

``CMakePresets.json`` may be checked into a version control system, and
``CMakeUserPresets.json`` should NOT be checked in. For example, if a
project is using Git, ``CMakePresets.json`` may be tracked, and
``CMakeUserPresets.json`` should be added to the ``.gitignore``.

Format
======

The files are a JSON document with an object as the root:

.. literalinclude:: presets/example.json
  :language: json

The root object recognizes the following fields:

``$schema``
  An optional string that provides a URI to the JSON schema that describes the
  structure of this JSON document. This field is used for validation and
  autocompletion in editors that support JSON schema. It doesn't affect the
  behavior of the document itself. If this field is not specified, the JSON
  document will still be valid, but tools that use JSON schema for validation
  and autocompletion may not function correctly.
  This is allowed in preset files specifying version ``8`` or above.

``version``
  A required integer representing the version of the JSON schema.
  The supported versions are:

  ``1``
    .. versionadded:: 3.19

  ``2``
    .. versionadded:: 3.20

  ``3``
    .. versionadded:: 3.21

  ``4``
    .. versionadded:: 3.23

  ``5``
    .. versionadded:: 3.24

  ``6``
    .. versionadded:: 3.25

  ``7``
    .. versionadded:: 3.27

  ``8``
    .. versionadded:: 3.28

``cmakeMinimumRequired``
  An optional object representing the minimum version of CMake needed to
  build this project. This object consists of the following fields:

  ``major``
    An optional integer representing the major version.

  ``minor``
    An optional integer representing the minor version.

  ``patch``
    An optional integer representing the patch version.

``include``
  An optional array of strings representing files to include. If the filenames
  are not absolute, they are considered relative to the current file.
  This is allowed in preset files specifying version ``4`` or above.
  See `Includes`_ for discussion of the constraints on included files.

``vendor``
  An optional map containing vendor-specific information. CMake does not
  interpret the contents of this field except to verify that it is a map if
  it does exist. However, the keys should be a vendor-specific domain name
  followed by a ``/``-separated path. For example, the Example IDE 1.0 could
  use ``example.com/ExampleIDE/1.0``. The value of each field can be anything
  desired by the vendor, though will typically be a map.

``configurePresets``
  An optional array of `Configure Preset`_ objects.
  This is allowed in preset files specifying version ``1`` or above.

``buildPresets``
  An optional array of `Build Preset`_ objects.
  This is allowed in preset files specifying version ``2`` or above.

``testPresets``
  An optional array of `Test Preset`_ objects.
  This is allowed in preset files specifying version ``2`` or above.

``packagePresets``
  An optional array of `Package Preset`_ objects.
  This is allowed in preset files specifying version ``6`` or above.

``workflowPresets``
  An optional array of `Workflow Preset`_ objects.
  This is allowed in preset files specifying version ``6`` or above.

Includes
^^^^^^^^

``CMakePresets.json`` and ``CMakeUserPresets.json`` can include other files
with the ``include`` field in file version ``4`` and later. Files included
by these files can also include other files. If ``CMakePresets.json`` and
``CMakeUserPresets.json`` are both present, ``CMakeUserPresets.json``
implicitly includes ``CMakePresets.json``, even with no ``include`` field,
in all versions of the format.

If a preset file contains presets that inherit from presets in another file,
the file must include the other file either directly or indirectly.
Include cycles are not allowed among files. If ``a.json`` includes
``b.json``, ``b.json`` cannot include ``a.json``. However, a file may be
included multiple times from the same file or from different files.

Files directly or indirectly included from ``CMakePresets.json`` should be
guaranteed to be provided by the project. ``CMakeUserPresets.json`` may
include files from anywhere.

Starting from version ``7``, the ``include`` field supports
`macro expansion`_, but only ``$penv{}`` macro expansion.

Configure Preset
^^^^^^^^^^^^^^^^

Each entry of the ``configurePresets`` array is a JSON object
that may contain the following fields:

``name``
  A required string representing the machine-friendly name of the preset.
  This identifier is used in the :ref:`cmake --preset <CMake Options>` option.
  There must not be two configure presets in the union of ``CMakePresets.json``
  and ``CMakeUserPresets.json`` in the same directory with the same name.
  However, a configure preset may have the same name as a build, test,
  package, or workflow preset.

``hidden``
  An optional boolean specifying whether or not a preset should be hidden.
  If a preset is hidden, it cannot be used in the ``--preset=`` argument,
  will not show up in the :manual:`CMake GUI <cmake-gui(1)>`, and does not
  have to have a valid ``generator`` or ``binaryDir``, even from
  inheritance. ``hidden`` presets are intended to be used as a base for
  other presets to inherit via the ``inherits`` field.

``inherits``
  An optional array of strings representing the names of presets to inherit
  from. This field can also be a string, which is equivalent to an array
  containing one string.

  The preset will inherit all of the fields from the ``inherits``
  presets by default (except ``name``, ``hidden``, ``inherits``,
  ``description``, and ``displayName``), but can override them as
  desired. If multiple ``inherits`` presets provide conflicting values for
  the same field, the earlier preset in the ``inherits`` array will be
  preferred.

  A preset can only inherit from another preset that is defined in the
  same file or in one of the files it includes (directly or indirectly).
  Presets in ``CMakePresets.json`` may not inherit from presets in
  ``CMakeUserPresets.json``.

``condition``
  An optional `Condition`_ object. This is allowed in preset files specifying
  version ``3`` or above.

``vendor``
  An optional map containing vendor-specific information. CMake does not
  interpret the contents of this field except to verify that it is a map
  if it does exist. However, it should follow the same conventions as the
  root-level ``vendor`` field. If vendors use their own per-preset
  ``vendor`` field, they should implement inheritance in a sensible manner
  when appropriate.

``displayName``
  An optional string with a human-friendly name of the preset.

``description``
  An optional string with a human-friendly description of the preset.

``generator``
  An optional string representing the generator to use for the preset. If
  ``generator`` is not specified, it must be inherited from the
  ``inherits`` preset (unless this preset is ``hidden``). In version ``3``
  or above, this field may be omitted to fall back to regular generator
  discovery procedure.

  Note that for Visual Studio generators, unlike in the command line
  :option:`-G <cmake -G>` argument, you cannot include the platform name
  in the generator name. Use the ``architecture`` field instead.

``architecture``, ``toolset``
  Optional fields representing the platform and toolset, respectively, for
  :manual:`generators <cmake-generators(7)>` that support them.

  See :option:`cmake -A` option for possible values for ``architecture``
  and :option:`cmake -T` for ``toolset``.

  Each may be either a string or an object with the following fields:

  ``value``
    An optional string representing the value.

  ``strategy``
    An optional string telling CMake how to handle the ``architecture`` or
    ``toolset`` field. Valid values are:

    ``"set"``
      Set the respective value. This will result in an error for generators
      that do not support the respective field.

    ``"external"``
      Do not set the value, even if the generator supports it. This is
      useful if, for example, a preset uses the Ninja generator, and an IDE
      knows how to set up the Visual C++ environment from the
      ``architecture`` and ``toolset`` fields. In that case, CMake will
      ignore the field, but the IDE can use them to set up the environment
      before invoking CMake.

    If no ``strategy`` field is given, or if the field uses the string form
    rather than the object form, the behavior is the same as ``"set"``.

``toolchainFile``
  An optional string representing the path to the toolchain file.
  This field supports `macro expansion`_. If a relative path is specified,
  it is calculated relative to the build directory, and if not found,
  relative to the source directory. This field takes precedence over any
  :variable:`CMAKE_TOOLCHAIN_FILE` value. It is allowed in preset files
  specifying version ``3`` or above.

``binaryDir``
  An optional string representing the path to the output binary directory.
  This field supports `macro expansion`_. If a relative path is specified,
  it is calculated relative to the source directory. If ``binaryDir`` is not
  specified, it must be inherited from the ``inherits`` preset (unless this
  preset is ``hidden``). In version ``3`` or above, this field may be
  omitted.

``installDir``
  An optional string representing the path to the installation directory.
  This field supports `macro expansion`_. If a relative path is specified,
  it is calculated relative to the source directory. This is allowed in
  preset files specifying version ``3`` or above.

``cmakeExecutable``
  An optional string representing the path to the CMake executable to use
  for this preset. This is reserved for use by IDEs, and is not used by
  CMake itself. IDEs that use this field should expand any macros in it.

``cacheVariables``
  An optional map of cache variables. The key is the variable name (which
  may not be an empty string), and the value is either ``null``, a boolean
  (which is equivalent to a value of ``"TRUE"`` or ``"FALSE"`` and a type
  of ``BOOL``), a string representing the value of the variable (which
  supports `macro expansion`_), or an object with the following fields:

  ``type``
    An optional string representing the type of the variable.

  ``value``
    A required string or boolean representing the value of the variable.
    A boolean is equivalent to ``"TRUE"`` or ``"FALSE"``. This field
    supports `macro expansion`_.

  Cache variables are inherited through the ``inherits`` field, and the
  preset's variables will be the union of its own ``cacheVariables`` and
  the ``cacheVariables`` from all its parents. If multiple presets in this
  union define the same variable, the standard rules of ``inherits`` are
  applied. Setting a variable to ``null`` causes it to not be set, even if
  a value was inherited from another preset.

``environment``
  An optional map of environment variables. The key is the variable name
  (which may not be an empty string), and the value is either ``null`` or
  a string representing the value of the variable. Each variable is set
  regardless of whether or not a value was given to it by the process's
  environment. This field supports `macro expansion`_, and environment
  variables in this map may reference each other, and may be listed in any
  order, as long as such references do not cause a cycle (for example,
  if ``ENV_1`` is ``$env{ENV_2}``, ``ENV_2`` may not be ``$env{ENV_1}``.)

  Environment variables are inherited through the ``inherits`` field, and
  the preset's environment will be the union of its own ``environment`` and
  the ``environment`` from all its parents. If multiple presets in this
  union define the same variable, the standard rules of ``inherits`` are
  applied. Setting a variable to ``null`` causes it to not be set, even if
  a value was inherited from another preset.

``warnings``
  An optional object specifying the warnings to enable. The object may
  contain the following fields:

  ``dev``
    An optional boolean. Equivalent to passing :option:`-Wdev <cmake -Wdev>`
    or :option:`-Wno-dev <cmake -Wno-dev>` on the command line. This may not
    be set to ``false`` if ``errors.dev`` is set to ``true``.

  ``deprecated``
    An optional boolean. Equivalent to passing
    :option:`-Wdeprecated <cmake -Wdeprecated>` or
    :option:`-Wno-deprecated <cmake -Wno-deprecated>` on the command line.
    This may not be set to ``false`` if ``errors.deprecated`` is set to
    ``true``.

  ``uninitialized``
    An optional boolean. Setting this to ``true`` is equivalent to passing
    :option:`--warn-uninitialized <cmake --warn-uninitialized>` on the command
    line.

  ``unusedCli``
    An optional boolean. Setting this to ``false`` is equivalent to passing
    :option:`--no-warn-unused-cli <cmake --no-warn-unused-cli>` on the command
    line.

  ``systemVars``
    An optional boolean. Setting this to ``true`` is equivalent to passing
    :option:`--check-system-vars <cmake --check-system-vars>` on the command
    line.

``errors``
  An optional object specifying the errors to enable. The object may
  contain the following fields:

  ``dev``
    An optional boolean. Equivalent to passing :option:`-Werror=dev <cmake -Werror>`
    or :option:`-Wno-error=dev <cmake -Werror>` on the command line.
    This may not be set to ``true`` if ``warnings.dev`` is set to ``false``.

  ``deprecated``
    An optional boolean. Equivalent to passing
    :option:`-Werror=deprecated <cmake -Werror>` or
    :option:`-Wno-error=deprecated <cmake -Werror>` on the command line.
    This may not be set to ``true`` if ``warnings.deprecated`` is set to
    ``false``.

``debug``
  An optional object specifying debug options. The object may contain the
  following fields:

  ``output``
    An optional boolean. Setting this to ``true`` is equivalent to passing
    :option:`--debug-output <cmake --debug-output>` on the command line.

  ``tryCompile``
    An optional boolean. Setting this to ``true`` is equivalent to passing
    :option:`--debug-trycompile <cmake --debug-trycompile>` on the command
    line.

  ``find``
    An optional boolean. Setting this to ``true`` is equivalent to passing
    :option:`--debug-find <cmake --debug-find>` on the command line.

``trace``
  An optional object specifying trace options. This is allowed in preset
  files specifying version ``7``. The object may contain the following fields:

  ``mode``
    An optional string that specifies the trace mode. Valid values are:

    ``on``
      Causes a trace of all calls made and from where to be printed.
      Equivalent to passing :option:`--trace <cmake --trace>` on the command
      line.

    ``off``
      A trace of all calls will not be printed.

    ``expand``
      Causes a trace with variables expanded of all calls made and from where
      to be printed. Equivalent to passing :option:`--trace-expand <cmake --trace-expand>`
      on the command line.

  ``format``
    An optional string that specifies the format output of the trace.
    Valid values are:

    ``human``
      Prints each trace line in a human-readable format.
      This is the default format.  Equivalent to passing
      :option:`--trace-format=human <cmake --trace-format>`
      on the command line.

    ``json-v1``
      Prints each line as a separate JSON document.  Equivalent to passing
      :option:`--trace-format=json-v1 <cmake --trace-format>`
      on the command line.

  ``source``
    An optional array of strings representing the paths of source files to
    be traced.  This field can also be a string, which is equivalent to an
    array containing one string.  Equivalent to passing
    :option:`--trace-source <cmake --trace-source>` on the command line.

  ``redirect``
    An optional string specifying a path to a trace output file.  Equivalent
    to passing :option:`--trace-redirect <cmake --trace-redirect>`
    on the command line.

Build Preset
^^^^^^^^^^^^

Each entry of the ``buildPresets`` array is a JSON object
that may contain the following fields:

``name``
  A required string representing the machine-friendly name of the preset.
  This identifier is used in the
  :ref:`cmake --build --preset <Build Tool Mode>` option.
  There must not be two build presets in the union of ``CMakePresets.json``
  and ``CMakeUserPresets.json`` in the same directory with the same name.
  However, a build preset may have the same name as a configure, test,
  package, or workflow preset.

``hidden``
  An optional boolean specifying whether or not a preset should be hidden.
  If a preset is hidden, it cannot be used in the
  :option:`--preset <cmake --preset>` argument
  and does not have to have a valid ``configurePreset``, even from
  inheritance. ``hidden`` presets are intended to be used as a base for
  other presets to inherit via the ``inherits`` field.

``inherits``
  An optional array of strings representing the names of presets to inherit
  from. This field can also be a string, which is equivalent to an array
  containing one string.

  The preset will inherit all of the fields from the
  ``inherits`` presets by default (except ``name``, ``hidden``,
  ``inherits``, ``description``, and ``displayName``), but can override
  them as desired. If multiple ``inherits`` presets provide conflicting
  values for the same field, the earlier preset in the ``inherits`` array
  will be preferred.

  A preset can only inherit from another preset that is defined in the
  same file or in one of the files it includes (directly or indirectly).
  Presets in ``CMakePresets.json`` may not inherit from presets in
  ``CMakeUserPresets.json``.

``condition``
  An optional `Condition`_ object. This is allowed in preset files specifying
  version ``3`` or above.

``vendor``
  An optional map containing vendor-specific information. CMake does not
  interpret the contents of this field except to verify that it is a map
  if it does exist. However, it should follow the same conventions as the
  root-level ``vendor`` field. If vendors use their own per-preset
  ``vendor`` field, they should implement inheritance in a sensible manner
  when appropriate.

``displayName``
  An optional string with a human-friendly name of the preset.

``description``
  An optional string with a human-friendly description of the preset.

``environment``
  An optional map of environment variables. The key is the variable name
  (which may not be an empty string), and the value is either ``null`` or
  a string representing the value of the variable. Each variable is set
  regardless of whether or not a value was given to it by the process's
  environment. This field supports macro expansion, and environment
  variables in this map may reference each other, and may be listed in any
  order, as long as such references do not cause a cycle (for example, if
  ``ENV_1`` is ``$env{ENV_2}``, ``ENV_2`` may not be ``$env{ENV_1}``.)

  Environment variables are inherited through the ``inherits`` field, and
  the preset's environment will be the union of its own ``environment``
  and the ``environment`` from all its parents. If multiple presets in
  this union define the same variable, the standard rules of ``inherits``
  are applied. Setting a variable to ``null`` causes it to not be set,
  even if a value was inherited from another preset.

  .. note::

    For a CMake project using ExternalProject with a configuration preset
    having environment variables needed in the ExternalProject, use a build
    preset that inherits that configuration preset or the ExternalProject
    will not have the environment variables set in the configuration preset.
    Example: suppose the host defaults to one compiler (say Clang)
    and the user wishes to use another compiler (say GCC). Set configuration
    preset environment variables ``CC`` and ``CXX`` and use a build preset
    that inherits that configuration preset. Otherwise the ExternalProject
    may use a different (system default) compiler than the top-level CMake
    project.

``configurePreset``
  An optional string specifying the name of a configure preset to
  associate with this build preset. If ``configurePreset`` is not
  specified, it must be inherited from the inherits preset (unless this
  preset is hidden). The build directory is inferred from the configure
  preset, so the build will take place in the same ``binaryDir`` that the
  configuration did.

``inheritConfigureEnvironment``
  An optional boolean that defaults to true. If true, the environment
  variables from the associated configure preset are inherited after all
  inherited build preset environments, but before environment variables
  explicitly specified in this build preset.

``jobs``
  An optional integer. Equivalent to passing
  :option:`--parallel <cmake--build --parallel>` or ``-j`` on the command line.

``targets``
  An optional string or array of strings. Equivalent to passing
  :option:`--target <cmake--build --target>` or ``-t`` on the command line.
  Vendors may ignore the targets property or hide build presets that
  explicitly specify targets. This field supports macro expansion.

``configuration``
  An optional string. Equivalent to passing
  :option:`--config <cmake--build --config>` on the command line.

``cleanFirst``
  An optional bool. If true, equivalent to passing
  :option:`--clean-first <cmake--build --clean-first>` on the command line.

``resolvePackageReferences``
  An optional string that specifies the package resolve mode. This is
  allowed in preset files specifying version ``4`` or above.

  Package references are used to define dependencies to packages from
  external package managers. Currently only NuGet in combination with the
  Visual Studio generator is supported. If there are no targets that define
  package references, this option does nothing. Valid values are:

  ``on``
    Causes package references to be resolved before attempting a build.

  ``off``
    Package references will not be resolved. Note that this may cause
    errors in some build environments, such as .NET SDK style projects.

  ``only``
    Only resolve package references, but do not perform a build.

  .. note::

    The command line parameter
    :option:`--resolve-package-references <cmake--build --resolve-package-references>`
    will take priority over this setting. If the command line parameter is not
    provided and this setting is not specified, an environment-specific cache
    variable will be evaluated to decide, if package restoration should be
    performed.

    When using the Visual Studio generator, package references are defined
    using the :prop_tgt:`VS_PACKAGE_REFERENCES` property. Package references
    are restored using NuGet. It can be disabled by setting the
    ``CMAKE_VS_NUGET_PACKAGE_RESTORE`` variable to ``OFF``. This can also be
    done from within a configure preset.

``verbose``
  An optional bool. If true, equivalent to passing
  :option:`--verbose <cmake--build --verbose>` on the command line.

``nativeToolOptions``
  An optional array of strings. Equivalent to passing options after ``--``
  on the command line. The array values support macro expansion.

Test Preset
^^^^^^^^^^^

Each entry of the ``testPresets`` array is a JSON object
that may contain the following fields:

``name``
  A required string representing the machine-friendly name of the preset.
  This identifier is used in the :option:`ctest --preset` option.
  There must not be two test presets in the union of ``CMakePresets.json``
  and ``CMakeUserPresets.json`` in the same directory with the same name.
  However, a test preset may have the same name as a configure, build,
  package, or workflow preset.

``hidden``
  An optional boolean specifying whether or not a preset should be hidden.
  If a preset is hidden, it cannot be used in the
  :option:`--preset <ctest --preset>` argument
  and does not have to have a valid ``configurePreset``, even from
  inheritance. ``hidden`` presets are intended to be used as a base for
  other presets to inherit via the ``inherits`` field.

``inherits``
  An optional array of strings representing the names of presets to inherit
  from. This field can also be a string, which is equivalent to an array
  containing one string.

  The preset will inherit all of the fields from the
  ``inherits`` presets by default (except ``name``, ``hidden``,
  ``inherits``, ``description``, and ``displayName``), but can override
  them as desired. If multiple ``inherits`` presets provide conflicting
  values for the same field, the earlier preset in the ``inherits`` array
  will be preferred.

  A preset can only inherit from another preset that is defined in the
  same file or in one of the files it includes (directly or indirectly).
  Presets in ``CMakePresets.json`` may not inherit from presets in
  ``CMakeUserPresets.json``.

``condition``
  An optional `Condition`_ object. This is allowed in preset files specifying
  version ``3`` or above.

``vendor``
  An optional map containing vendor-specific information. CMake does not
  interpret the contents of this field except to verify that it is a map
  if it does exist. However, it should follow the same conventions as the
  root-level ``vendor`` field. If vendors use their own per-preset
  ``vendor`` field, they should implement inheritance in a sensible manner
  when appropriate.

``displayName``
  An optional string with a human-friendly name of the preset.

``description``
  An optional string with a human-friendly description of the preset.

``environment``
  An optional map of environment variables. The key is the variable name
  (which may not be an empty string), and the value is either ``null`` or
  a string representing the value of the variable. Each variable is set
  regardless of whether or not a value was given to it by the process's
  environment. This field supports macro expansion, and environment
  variables in this map may reference each other, and may be listed in any
  order, as long as such references do not cause a cycle (for example, if
  ``ENV_1`` is ``$env{ENV_2}``, ``ENV_2`` may not be ``$env{ENV_1}``.)

  Environment variables are inherited through the ``inherits`` field, and
  the preset's environment will be the union of its own ``environment``
  and the ``environment`` from all its parents. If multiple presets in
  this union define the same variable, the standard rules of ``inherits``
  are applied. Setting a variable to ``null`` causes it to not be set,
  even if a value was inherited from another preset.

``configurePreset``
  An optional string specifying the name of a configure preset to
  associate with this test preset. If ``configurePreset`` is not
  specified, it must be inherited from the inherits preset (unless this
  preset is hidden). The build directory is inferred from the configure
  preset, so tests will run in the same ``binaryDir`` that the
  configuration did and build did.

``inheritConfigureEnvironment``
  An optional boolean that defaults to true. If true, the environment
  variables from the associated configure preset are inherited after all
  inherited test preset environments, but before environment variables
  explicitly specified in this test preset.

``configuration``
  An optional string. Equivalent to passing
  :option:`--build-config <ctest --build-config>` on the command line.

``overwriteConfigurationFile``
  An optional array of configuration options to overwrite options
  specified in the CTest configuration file. Equivalent to passing
  :option:`--overwrite <ctest --overwrite>` for each value in the array.
  The array values support macro expansion.

``output``
  An optional object specifying output options. The object may contain the
  following fields.

  ``shortProgress``
    An optional bool. If true, equivalent to passing
    :option:`--progress <ctest --progress>` on the command line.

  ``verbosity``
    An optional string specifying verbosity level. Must be one of the
    following:

    ``default``
      Equivalent to passing no verbosity flags on the command line.

    ``verbose``
      Equivalent to passing :option:`--verbose <ctest --verbose>` on
      the command line.

    ``extra``
      Equivalent to passing :option:`--extra-verbose <ctest --extra-verbose>`
      on the command line.

  ``debug``
    An optional bool. If true, equivalent to passing
    :option:`--debug <ctest --debug>` on the command line.

  ``outputOnFailure``
    An optional bool. If true, equivalent to passing
    :option:`--output-on-failure <ctest --output-on-failure>` on the command
    line.

  ``quiet``
    An optional bool. If true, equivalent to passing
    :option:`--quiet <ctest --quiet>` on the command line.

  ``outputLogFile``
    An optional string specifying a path to a log file. Equivalent to
    passing :option:`--output-log <ctest --output-log>` on the command line.
    This field supports macro expansion.

  ``outputJUnitFile``
    An optional string specifying a path to a JUnit file. Equivalent to
    passing :option:`--output-junit <ctest --output-junit>` on the command line.
    This field supports macro expansion. This is allowed in preset files
    specifying version ``6`` or above.

  ``labelSummary``
    An optional bool. If false, equivalent to passing
    :option:`--no-label-summary <ctest --no-label-summary>` on the command
    line.

  ``subprojectSummary``
    An optional bool. If false, equivalent to passing
    :option:`--no-subproject-summary <ctest --no-subproject-summary>`
    on the command line.

  ``maxPassedTestOutputSize``
    An optional integer specifying the maximum output for passed tests in
    bytes. Equivalent to passing
    :option:`--test-output-size-passed <ctest --test-output-size-passed>`
    on the command line.

  ``maxFailedTestOutputSize``
    An optional integer specifying the maximum output for failed tests in
    bytes. Equivalent to passing
    :option:`--test-output-size-failed <ctest --test-output-size-failed>`
    on the command line.

  ``testOutputTruncation``
    An optional string specifying the test output truncation mode. Equivalent
    to passing
    :option:`--test-output-truncation <ctest --test-output-truncation>` on
    the command line. This is allowed in preset files specifying version
    ``5`` or above.

  ``maxTestNameWidth``
    An optional integer specifying the maximum width of a test name to
    output. Equivalent to passing :option:`--max-width <ctest --max-width>`
    on the command line.

``filter``
  An optional object specifying how to filter the tests to run. The object
  may contain the following fields.

  ``include``
    An optional object specifying which tests to include. The object may
    contain the following fields.

    ``name``
      An optional string specifying a regex for test names. Equivalent to
      passing :option:`--tests-regex <ctest --tests-regex>` on the command
      line. This field supports macro expansion. CMake regex syntax is
      described under :ref:`string(REGEX) <Regex Specification>`.

    ``label``
      An optional string specifying a regex for test labels. Equivalent to
      passing :option:`--label-regex <ctest --label-regex>` on the command
      line. This field supports macro expansion.

    ``useUnion``
      An optional bool. Equivalent to passing :option:`--union <ctest --union>`
      on the command line.

    ``index``
      An optional object specifying tests to include by test index. The
      object may contain the following fields. Can also be an optional
      string specifying a file with the command line syntax for
      :option:`--tests-information <ctest --tests-information>`.
      If specified as a string, this field supports macro expansion.

      ``start``
        An optional integer specifying a test index to start testing at.

      ``end``
        An optional integer specifying a test index to stop testing at.

      ``stride``
        An optional integer specifying the increment.

      ``specificTests``
        An optional array of integers specifying specific test indices to
        run.

  ``exclude``
    An optional object specifying which tests to exclude. The object may
    contain the following fields.

    ``name``
      An optional string specifying a regex for test names. Equivalent to
      passing :option:`--exclude-regex <ctest --exclude-regex>` on the
      command line. This field supports macro expansion.

    ``label``
      An optional string specifying a regex for test labels. Equivalent to
      passing :option:`--label-exclude <ctest --label-exclude>` on the
      command line. This field supports macro expansion.

    ``fixtures``
      An optional object specifying which fixtures to exclude from adding
      tests. The object may contain the following fields.

      ``any``
        An optional string specifying a regex for text fixtures to exclude
        from adding any tests. Equivalent to
        :option:`--fixture-exclude-any <ctest --fixture-exclude-any>` on
        the command line. This field supports macro expansion.

      ``setup``
        An optional string specifying a regex for text fixtures to exclude
        from adding setup tests. Equivalent to
        :option:`--fixture-exclude-setup <ctest --fixture-exclude-setup>`
        on the command line. This field supports macro expansion.

      ``cleanup``
        An optional string specifying a regex for text fixtures to exclude
        from adding cleanup tests. Equivalent to
        :option:`--fixture-exclude-cleanup <ctest --fixture-exclude-cleanup>`
        on the command line. This field supports macro expansion.

``execution``
  An optional object specifying options for test execution. The object may
  contain the following fields.

  ``stopOnFailure``
    An optional bool. If true, equivalent to passing
    :option:`--stop-on-failure <ctest --stop-on-failure>` on the command
    line.

  ``enableFailover``
    An optional bool. If true, equivalent to passing :option:`-F <ctest -F>`
    on the command line.

  ``jobs``
    An optional integer. Equivalent to passing
    :option:`--parallel <ctest --parallel>` on the command line.

  ``resourceSpecFile``
    An optional string. Equivalent to passing
    :option:`--resource-spec-file <ctest --resource-spec-file>` on
    the command line. This field supports macro expansion.

  ``testLoad``
    An optional integer. Equivalent to passing
    :option:`--test-load <ctest --test-load>` on the command line.

  ``showOnly``
    An optional string. Equivalent to passing
    :option:`--show-only <ctest --show-only>` on the
    command line. The string must be one of the following values:

    ``human``

    ``json-v1``

  ``repeat``
    An optional object specifying how to repeat tests. Equivalent to
    passing :option:`--repeat <ctest --repeat>` on the command line.
    The object must have the following fields.

    ``mode``
      A required string. Must be one of the following values:

      ``until-fail``

      ``until-pass``

      ``after-timeout``

    ``count``
      A required integer.

  ``interactiveDebugging``
    An optional bool. If true, equivalent to passing
    :option:`--interactive-debug-mode 1 <ctest --interactive-debug-mode>`
    on the command line. If false, equivalent to passing
    :option:`--interactive-debug-mode 0 <ctest --interactive-debug-mode>`
    on the command line.

  ``scheduleRandom``
    An optional bool. If true, equivalent to passing
    :option:`--schedule-random <ctest --schedule-random>` on the command
    line.

  ``timeout``
    An optional integer. Equivalent to passing
    :option:`--timeout <ctest --timeout>` on the command line.

  ``noTestsAction``
    An optional string specifying the behavior if no tests are found. Must
    be one of the following values:

    ``default``
      Equivalent to not passing any value on the command line.

    ``error``
      Equivalent to passing :option:`--no-tests=error <ctest --no-tests>`
      on the command line.

    ``ignore``
      Equivalent to passing :option:`--no-tests=ignore <ctest --no-tests>`
      on the command line.

Package Preset
^^^^^^^^^^^^^^

Package presets may be used in schema version ``6`` or above. Each entry of
the ``packagePresets`` array is a JSON object that may contain the following
fields:

``name``
  A required string representing the machine-friendly name of the preset.
  This identifier is used in the :option:`cpack --preset` option.
  There must not be two package presets in the union of ``CMakePresets.json``
  and ``CMakeUserPresets.json`` in the same directory with the same name.
  However, a package preset may have the same name as a configure, build,
  test, or workflow preset.

``hidden``
  An optional boolean specifying whether or not a preset should be hidden.
  If a preset is hidden, it cannot be used in the
  :option:`--preset <cpack --preset>` argument
  and does not have to have a valid ``configurePreset``, even from
  inheritance. ``hidden`` presets are intended to be used as a base for
  other presets to inherit via the ``inherits`` field.

``inherits``
  An optional array of strings representing the names of presets to inherit
  from. This field can also be a string, which is equivalent to an array
  containing one string.

  The preset will inherit all of the fields from the
  ``inherits`` presets by default (except ``name``, ``hidden``,
  ``inherits``, ``description``, and ``displayName``), but can override
  them as desired. If multiple ``inherits`` presets provide conflicting
  values for the same field, the earlier preset in the ``inherits`` array
  will be preferred.

  A preset can only inherit from another preset that is defined in the
  same file or in one of the files it includes (directly or indirectly).
  Presets in ``CMakePresets.json`` may not inherit from presets in
  ``CMakeUserPresets.json``.

``condition``
  An optional `Condition`_ object.

``vendor``
  An optional map containing vendor-specific information. CMake does not
  interpret the contents of this field except to verify that it is a map
  if it does exist. However, it should follow the same conventions as the
  root-level ``vendor`` field. If vendors use their own per-preset
  ``vendor`` field, they should implement inheritance in a sensible manner
  when appropriate.

``displayName``
  An optional string with a human-friendly name of the preset.

``description``
  An optional string with a human-friendly description of the preset.

``environment``
  An optional map of environment variables. The key is the variable name
  (which may not be an empty string), and the value is either ``null`` or
  a string representing the value of the variable. Each variable is set
  regardless of whether or not a value was given to it by the process's
  environment. This field supports macro expansion, and environment
  variables in this map may reference each other, and may be listed in any
  order, as long as such references do not cause a cycle (for example, if
  ``ENV_1`` is ``$env{ENV_2}``, ``ENV_2`` may not be ``$env{ENV_1}``.)

  Environment variables are inherited through the ``inherits`` field, and
  the preset's environment will be the union of its own ``environment``
  and the ``environment`` from all its parents. If multiple presets in
  this union define the same variable, the standard rules of ``inherits``
  are applied. Setting a variable to ``null`` causes it to not be set,
  even if a value was inherited from another preset.

``configurePreset``
  An optional string specifying the name of a configure preset to
  associate with this package preset. If ``configurePreset`` is not
  specified, it must be inherited from the inherits preset (unless this
  preset is hidden). The build directory is inferred from the configure
  preset, so packaging will run in the same ``binaryDir`` that the
  configuration did and build did.

``inheritConfigureEnvironment``
  An optional boolean that defaults to true. If true, the environment
  variables from the associated configure preset are inherited after all
  inherited package preset environments, but before environment variables
  explicitly specified in this package preset.

``generators``
  An optional array of strings representing generators for CPack to use.

``configurations``
  An optional array of strings representing build configurations for CPack to
  package.

``variables``
  An optional map of variables to pass to CPack, equivalent to
  :option:`-D <cpack -D>` arguments. Each key is the name of a variable, and
  the value is the string to assign to that variable.

``configFile``
  An optional string representing the config file for CPack to use.

``output``
  An optional object specifying output options. Valid keys are:

  ``debug``
    An optional boolean specifying whether or not to print debug information.
    A value of ``true`` is equivalent to passing
    :option:`--debug <cpack --debug>` on the command line.

  ``verbose``
    An optional boolean specifying whether or not to print verbosely. A value
    of ``true`` is equivalent to passing :option:`--verbose <cpack --verbose>`
    on the command line.

``packageName``
  An optional string representing the package name.

``packageVersion``
  An optional string representing the package version.

``packageDirectory``
  An optional string representing the directory in which to place the package.

``vendorName``
  An optional string representing the vendor name.

.. _`Workflow Preset`:

Workflow Preset
^^^^^^^^^^^^^^^

Workflow presets may be used in schema version ``6`` or above. Each entry of
the ``workflowPresets`` array is a JSON object that may contain the following
fields:

``name``
  A required string representing the machine-friendly name of the preset.
  This identifier is used in the
  :ref:`cmake --workflow --preset <Workflow Mode>` option. There must not be
  two workflow presets in the union of ``CMakePresets.json`` and
  ``CMakeUserPresets.json`` in the same directory with the same name. However,
  a workflow preset may have the same name as a configure, build, test, or
  package preset.

``vendor``
  An optional map containing vendor-specific information. CMake does not
  interpret the contents of this field except to verify that it is a map
  if it does exist. However, it should follow the same conventions as the
  root-level ``vendor`` field.

``displayName``
  An optional string with a human-friendly name of the preset.

``description``
  An optional string with a human-friendly description of the preset.

``steps``
  A required array of objects describing the steps of the workflow. The first
  step must be a configure preset, and all subsequent steps must be non-
  configure presets whose ``configurePreset`` field matches the starting
  configure preset. Each object may contain the following fields:

  ``type``
    A required string. The first step must be ``configure``. Subsequent steps
    must be either ``build``, ``test``, or ``package``.

  ``name``
    A required string representing the name of the configure, build, test, or
    package preset to run as this workflow step.

Condition
^^^^^^^^^

The ``condition`` field of a preset, allowed in preset files specifying version
``3`` or above, is used to determine whether or not the preset is enabled. For
example, this can be used to disable a preset on platforms other than Windows.
``condition`` may be either a boolean, ``null``, or an object. If it is a
boolean, the boolean indicates whether the preset is enabled or disabled. If it
is ``null``, the preset is enabled, but the ``null`` condition is not inherited
by any presets that may inherit from the preset. Sub-conditions (for example in
a ``not``, ``anyOf``, or ``allOf`` condition) may not be ``null``. If it is an
object, it has the following fields:

``type``
  A required string with one of the following values:

  ``"const"``
    Indicates that the condition is constant. This is equivalent to using a
    boolean in place of the object. The condition object will have the
    following additional fields:

    ``value``
      A required boolean which provides a constant value for the condition's
      evaluation.

  ``"equals"``

  ``"notEquals"``
    Indicates that the condition compares two strings to see if they are equal
    (or not equal). The condition object will have the following additional
    fields:

    ``lhs``
      First string to compare. This field supports macro expansion.

    ``rhs``
      Second string to compare. This field supports macro expansion.

  ``"inList"``

  ``"notInList"``
    Indicates that the condition searches for a string in a list of strings.
    The condition object will have the following additional fields:

    ``string``
      A required string to search for. This field supports macro expansion.

    ``list``
      A required array of strings to search. This field supports macro
      expansion, and uses short-circuit evaluation.

  ``"matches"``

  ``"notMatches"``
    Indicates that the condition searches for a regular expression in a string.
    The condition object will have the following additional fields:

    ``string``
      A required string to search. This field supports macro expansion.

    ``regex``
      A required regular expression to search for. This field supports macro
      expansion.

  ``"anyOf"``

  ``"allOf"``

    Indicates that the condition is an aggregation of zero or more nested
    conditions. The condition object will have the following additional fields:

    ``conditions``
      A required array of condition objects. These conditions use short-circuit
      evaluation.

  ``"not"``
    Indicates that the condition is an inversion of another condition. The
    condition object will have the following additional fields:

    ``condition``
      A required condition object.

Macro Expansion
^^^^^^^^^^^^^^^

As mentioned above, some fields support macro expansion. Macros are
recognized in the form ``$<macro-namespace>{<macro-name>}``. All macros are
evaluated in the context of the preset being used, even if the macro is in a
field that was inherited from another preset. For example, if the ``Base``
preset sets variable ``PRESET_NAME`` to ``${presetName}``, and the
``Derived`` preset inherits from ``Base``, ``PRESET_NAME`` will be set to
``Derived``.

It is an error to not put a closing brace at the end of a macro name. For
example, ``${sourceDir`` is invalid. A dollar sign (``$``) followed by
anything other than a left curly brace (``{``) with a possible namespace is
interpreted as a literal dollar sign.

Recognized macros include:

``${sourceDir}``
  Path to the project source directory (i.e. the same as
  :variable:`CMAKE_SOURCE_DIR`).

``${sourceParentDir}``
  Path to the project source directory's parent directory.

``${sourceDirName}``
  The last filename component of ``${sourceDir}``. For example, if
  ``${sourceDir}`` is ``/path/to/source``, this would be ``source``.

``${presetName}``
  Name specified in the preset's ``name`` field.

``${generator}``
  Generator specified in the preset's ``generator`` field. For build and
  test presets, this will evaluate to the generator specified by
  ``configurePreset``.

``${hostSystemName}``
  The name of the host operating system. Contains the same value as
  :variable:`CMAKE_HOST_SYSTEM_NAME`. This is allowed in preset files
  specifying version ``3`` or above.

``${fileDir}``
  Path to the directory containing the preset file which contains the macro.
  This is allowed in preset files specifying version ``4`` or above.

``${dollar}``
  A literal dollar sign (``$``).

``${pathListSep}``
  Native character for separating lists of paths, such as ``:`` or ``;``.

  For example, by setting ``PATH`` to
  ``/path/to/ninja/bin${pathListSep}$env{PATH}``, ``${pathListSep}`` will
  expand to the underlying operating system's character used for
  concatenation in ``PATH``.

  This is allowed in preset files specifying version ``5`` or above.

``$env{<variable-name>}``
  Environment variable with name ``<variable-name>``. The variable name may
  not be an empty string. If the variable is defined in the ``environment``
  field, that value is used instead of the value from the parent environment.
  If the environment variable is not defined, this evaluates as an empty
  string.

  Note that while Windows environment variable names are case-insensitive,
  variable names within a preset are still case-sensitive. This may lead to
  unexpected results when using inconsistent casing. For best results, keep
  the casing of environment variable names consistent.

``$penv{<variable-name>}``
  Similar to ``$env{<variable-name>}``, except that the value only comes from
  the parent environment, and never from the ``environment`` field. This
  allows you to prepend or append values to existing environment variables.
  For example, setting ``PATH`` to ``/path/to/ninja/bin:$penv{PATH}`` will
  prepend ``/path/to/ninja/bin`` to the ``PATH`` environment variable. This
  is needed because ``$env{<variable-name>}`` does not allow circular
  references.

``$vendor{<macro-name>}``
  An extension point for vendors to insert their own macros. CMake will not
  be able to use presets which have a ``$vendor{<macro-name>}`` macro, and
  effectively ignores such presets. However, it will still be able to use
  other presets from the same file.

  CMake does not make any attempt to interpret ``$vendor{<macro-name>}``
  macros. However, to avoid name collisions, IDE vendors should prefix
  ``<macro-name>`` with a very short (preferably <= 4 characters) vendor
  identifier prefix, followed by a ``.``, followed by the macro name. For
  example, the Example IDE could have ``$vendor{xide.ideInstallDir}``.

Schema
======

:download:`This file </manual/presets/schema.json>` provides a machine-readable
JSON schema for the ``CMakePresets.json`` format.



/P/🚀 manual/cmake-qt.7.rst
=========================================


.. cmake-manual-description: CMake Qt Features Reference

cmake-qt(7)
***********

Introduction
============

CMake can find and use Qt 4, Qt 5 and Qt 6 libraries. The Qt 4 libraries are
found by the :module:`FindQt4` find-module shipped with CMake, whereas the
Qt 5 and Qt 6 libraries are found using "Config-file Packages" shipped with
Qt 5 and Qt 6. See :manual:`cmake-packages(7)` for more information about CMake
packages, and see `the Qt cmake manual`_ for your Qt version.

.. _`the Qt cmake manual`: https://doc.qt.io/qt-6/cmake-manual.html

Qt 4, Qt 5 and Qt 6 may be used together in the same
:manual:`CMake buildsystem <cmake-buildsystem(7)>`:

.. code-block:: cmake

  cmake_minimum_required(VERSION 3.16 FATAL_ERROR)

  project(Qt4_5_6)

  set(CMAKE_AUTOMOC ON)

  find_package(Qt6 COMPONENTS Widgets DBus REQUIRED)
  add_executable(publisher publisher.cpp)
  target_link_libraries(publisher Qt6::Widgets Qt6::DBus)

  find_package(Qt5 COMPONENTS Gui DBus REQUIRED)
  add_executable(subscriber1 subscriber1.cpp)
  target_link_libraries(subscriber1 Qt5::Gui Qt5::DBus)

  find_package(Qt4 REQUIRED)
  add_executable(subscriber2 subscriber2.cpp)
  target_link_libraries(subscriber2 Qt4::QtGui Qt4::QtDBus)

A CMake target may not link to more than one Qt version.  A diagnostic is issued
if this is attempted or results from transitive target dependency evaluation.

Qt Build Tools
==============

Qt relies on some bundled tools for code generation, such as ``moc`` for
meta-object code generation, ``uic`` for widget layout and population,
and ``rcc`` for virtual file system content generation.  These tools may be
automatically invoked by :manual:`cmake(1)` if the appropriate conditions
are met.  The automatic tool invocation may be used with Qt version 4 to 6.

.. _`Qt AUTOMOC`:

AUTOMOC
^^^^^^^

The :prop_tgt:`AUTOMOC` target property controls whether :manual:`cmake(1)`
inspects the C++ files in the target to determine if they require ``moc`` to
be run, and to create rules to execute ``moc`` at the appropriate time.

If a macro from :prop_tgt:`AUTOMOC_MACRO_NAMES` is found in a header file,
``moc`` will be run on the file.  The result will be put into a file named
according to ``moc_<basename>.cpp``.
If the macro is found in a C++ implementation
file, the moc output will be put into a file named according to
``<basename>.moc``, following the Qt conventions.  The ``<basename>.moc`` must
be included by the user in the C++ implementation file with a preprocessor
``#include``.

Included ``moc_*.cpp`` and ``*.moc`` files will be generated in the
``<AUTOGEN_BUILD_DIR>/include`` directory which is
automatically added to the target's :prop_tgt:`INCLUDE_DIRECTORIES`.

* This differs from CMake 3.7 and below; see their documentation for details.

* For :prop_gbl:`multi configuration generators <GENERATOR_IS_MULTI_CONFIG>`,
  the include directory is ``<AUTOGEN_BUILD_DIR>/include_<CONFIG>``.

* See :prop_tgt:`AUTOGEN_BUILD_DIR`.

Not included ``moc_<basename>.cpp`` files will be generated in custom
folders to avoid name collisions and included in a separate
file which is compiled into the target, named either
``<AUTOGEN_BUILD_DIR>/mocs_compilation.cpp`` or
``<AUTOGEN_BUILD_DIR>/mocs_compilation_$<CONFIG>.cpp``.

* See :prop_tgt:`AUTOGEN_BUILD_DIR`.

The ``moc`` command line will consume the :prop_tgt:`COMPILE_DEFINITIONS` and
:prop_tgt:`INCLUDE_DIRECTORIES` target properties from the target it is being
invoked for, and for the appropriate build configuration.

The :prop_tgt:`AUTOMOC` target property may be pre-set for all
following targets by setting the :variable:`CMAKE_AUTOMOC` variable.  The
:prop_tgt:`AUTOMOC_MOC_OPTIONS` target property may be populated to set
options to pass to ``moc``. The :variable:`CMAKE_AUTOMOC_MOC_OPTIONS`
variable may be populated to pre-set the options for all following targets.

Additional macro names to search for can be added to
:prop_tgt:`AUTOMOC_MACRO_NAMES`.

Additional ``moc`` dependency file names can be extracted from source code
by using :prop_tgt:`AUTOMOC_DEPEND_FILTERS`.

Source C++ files can be excluded from :prop_tgt:`AUTOMOC` processing by
enabling :prop_sf:`SKIP_AUTOMOC` or the broader :prop_sf:`SKIP_AUTOGEN`.

.. _`Qt AUTOUIC`:

AUTOUIC
^^^^^^^

The :prop_tgt:`AUTOUIC` target property controls whether :manual:`cmake(1)`
inspects the C++ files in the target to determine if they require ``uic`` to
be run, and to create rules to execute ``uic`` at the appropriate time.

If a preprocessor ``#include`` directive is found which matches
``<path>ui_<basename>.h``, and a ``<basename>.ui`` file exists,
then ``uic`` will be executed to generate the appropriate file.
The ``<basename>.ui`` file is searched for in the following places

1. ``<source_dir>/<basename>.ui``
2. ``<source_dir>/<path><basename>.ui``
3. ``<AUTOUIC_SEARCH_PATHS>/<basename>.ui``
4. ``<AUTOUIC_SEARCH_PATHS>/<path><basename>.ui``

where ``<source_dir>`` is the directory of the C++ file and
:prop_tgt:`AUTOUIC_SEARCH_PATHS` is a list of additional search paths.

The generated generated ``ui_*.h`` files are placed in the
``<AUTOGEN_BUILD_DIR>/include`` directory which is
automatically added to the target's :prop_tgt:`INCLUDE_DIRECTORIES`.

* This differs from CMake 3.7 and below; see their documentation for details.

* For :prop_gbl:`multi configuration generators <GENERATOR_IS_MULTI_CONFIG>`,
  the include directory is ``<AUTOGEN_BUILD_DIR>/include_<CONFIG>``.

* See :prop_tgt:`AUTOGEN_BUILD_DIR`.

The :prop_tgt:`AUTOUIC` target property may be pre-set for all following
targets by setting the :variable:`CMAKE_AUTOUIC` variable.  The
:prop_tgt:`AUTOUIC_OPTIONS` target property may be populated to set options
to pass to ``uic``.  The :variable:`CMAKE_AUTOUIC_OPTIONS` variable may be
populated to pre-set the options for all following targets.  The
:prop_sf:`AUTOUIC_OPTIONS` source file property may be set on the
``<basename>.ui`` file to set particular options for the file.  This
overrides options from the :prop_tgt:`AUTOUIC_OPTIONS` target property.

A target may populate the :prop_tgt:`INTERFACE_AUTOUIC_OPTIONS` target
property with options that should be used when invoking ``uic``.  This must be
consistent with the :prop_tgt:`AUTOUIC_OPTIONS` target property content of the
depender target.  The :variable:`CMAKE_DEBUG_TARGET_PROPERTIES` variable may
be used to track the origin target of such
:prop_tgt:`INTERFACE_AUTOUIC_OPTIONS`.  This means that a library which
provides an alternative translation system for Qt may specify options which
should be used when running ``uic``:

.. code-block:: cmake

  add_library(KI18n klocalizedstring.cpp)
  target_link_libraries(KI18n Qt6::Core)

  # KI18n uses the tr2i18n() function instead of tr().  That function is
  # declared in the klocalizedstring.h header.
  set(autouic_options
    -tr tr2i18n
    -include klocalizedstring.h
  )

  set_property(TARGET KI18n APPEND PROPERTY
    INTERFACE_AUTOUIC_OPTIONS ${autouic_options}
  )

A consuming project linking to the target exported from upstream automatically
uses appropriate options when ``uic`` is run by :prop_tgt:`AUTOUIC`, as a
result of linking with the :prop_tgt:`IMPORTED` target:

.. code-block:: cmake

  set(CMAKE_AUTOUIC ON)
  # Uses a libwidget.ui file:
  add_library(LibWidget libwidget.cpp)
  target_link_libraries(LibWidget
    KF5::KI18n
    Qt5::Widgets
  )

Source files can be excluded from :prop_tgt:`AUTOUIC` processing by
enabling :prop_sf:`SKIP_AUTOUIC` or the broader :prop_sf:`SKIP_AUTOGEN`.

.. _`Qt AUTORCC`:

AUTORCC
^^^^^^^

The :prop_tgt:`AUTORCC` target property controls whether :manual:`cmake(1)`
creates rules to execute ``rcc`` at the appropriate time on source files
which have the suffix ``.qrc``.

.. code-block:: cmake

  add_executable(myexe main.cpp resource_file.qrc)

The :prop_tgt:`AUTORCC` target property may be pre-set for all following targets
by setting the :variable:`CMAKE_AUTORCC` variable.  The
:prop_tgt:`AUTORCC_OPTIONS` target property may be populated to set options
to pass to ``rcc``.  The :variable:`CMAKE_AUTORCC_OPTIONS` variable may be
populated to pre-set the options for all following targets.  The
:prop_sf:`AUTORCC_OPTIONS` source file property may be set on the
``<name>.qrc`` file to set particular options for the file.  This
overrides options from the :prop_tgt:`AUTORCC_OPTIONS` target property.

Source files can be excluded from :prop_tgt:`AUTORCC` processing by
enabling :prop_sf:`SKIP_AUTORCC` or the broader :prop_sf:`SKIP_AUTOGEN`.

.. _`<ORIGIN>_autogen`:

The ``<ORIGIN>_autogen`` target
===============================

The ``moc`` and ``uic`` tools are executed as part of a synthesized
:ref:`<ORIGIN>_autogen` :command:`custom target <add_custom_target>` generated by
CMake.  By default that :ref:`<ORIGIN>_autogen` target inherits the dependencies
of the ``<ORIGIN>`` target (see :prop_tgt:`AUTOGEN_ORIGIN_DEPENDS`).
Target dependencies may be added to the :ref:`<ORIGIN>_autogen` target by adding
them to the :prop_tgt:`AUTOGEN_TARGET_DEPENDS` target property.

.. note::
  If Qt 5.15 or later is used and the generator is either :generator:`Ninja` or
  :ref:`Makefile Generators`, see :ref:`<ORIGIN>_autogen_timestamp_deps`.

.. _`<ORIGIN>_autogen_timestamp_deps`:

The ``<ORIGIN>_autogen_timestamp_deps`` target
==============================================

If Qt 5.15 or later is used and the generator is either :generator:`Ninja` or
:ref:`Makefile Generators`, the ``<ORIGIN>_autogen_timestamp_deps`` target is
also created in addition to the :ref:`<ORIGIN>_autogen` target.  This target
does not have any sources or commands to execute, but it has dependencies that
were previously inherited by the pre-Qt 5.15 :ref:`<ORIGIN>_autogen` target.
These dependencies will serve as a list of order-only dependencies for the
custom command, without forcing the custom command to re-execute.

Visual Studio Generators
========================

When using the :manual:`Visual Studio generators <cmake-generators(7)>`, CMake
generates a ``PRE_BUILD`` :command:`custom command <add_custom_command>`
instead of the :ref:`<ORIGIN>_autogen`
:command:`custom target <add_custom_target>` (for :prop_tgt:`AUTOMOC` and
:prop_tgt:`AUTOUIC`).  This isn't always possible though and an
:ref:`<ORIGIN>_autogen` :command:`custom target <add_custom_target>` is used,
when either

- the ``<ORIGIN>`` target depends on :prop_sf:`GENERATED` files which aren't
  excluded from :prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC` by
  :prop_sf:`SKIP_AUTOMOC`, :prop_sf:`SKIP_AUTOUIC`, :prop_sf:`SKIP_AUTOGEN`
  or :policy:`CMP0071`
- :prop_tgt:`AUTOGEN_TARGET_DEPENDS` lists a source file
- :variable:`CMAKE_GLOBAL_AUTOGEN_TARGET` is enabled

qtmain.lib on Windows
=====================

The Qt 4 and 5 :prop_tgt:`IMPORTED` targets for the QtGui libraries specify
that the qtmain.lib static library shipped with Qt will be linked by all
dependent executables which have the :prop_tgt:`WIN32_EXECUTABLE` enabled.

To disable this behavior, enable the ``Qt5_NO_LINK_QTMAIN`` target property for
Qt 5 based targets or ``QT4_NO_LINK_QTMAIN`` target property for Qt 4 based
targets.

.. code-block:: cmake

  add_executable(myexe WIN32 main.cpp)
  target_link_libraries(myexe Qt4::QtGui)

  add_executable(myexe_no_qtmain WIN32 main_no_qtmain.cpp)
  set_property(TARGET main_no_qtmain PROPERTY QT4_NO_LINK_QTMAIN ON)
  target_link_libraries(main_no_qtmain Qt4::QtGui)



/P/🚀 manual/cmake-server.7.rst
=============================================


.. cmake-manual-description: CMake Server

cmake-server(7)
***************

The :manual:`cmake(1)` server mode has been removed since CMake 3.20.
Clients should use the :manual:`cmake-file-api(7)` instead.



/P/🚀 manual/cmake-toolchains.7.rst
=================================================


.. cmake-manual-description: CMake Toolchains Reference

cmake-toolchains(7)
*******************

Introduction
============

CMake uses a toolchain of utilities to compile, link libraries and create
archives, and other tasks to drive the build. The toolchain utilities available
are determined by the languages enabled. In normal builds, CMake automatically
determines the toolchain for host builds based on system introspection and
defaults. In cross-compiling scenarios, a toolchain file may be specified
with information about compiler and utility paths.

.. versionadded:: 3.19
  One may use :manual:`cmake-presets(7)` to specify toolchain files.

Languages
=========

Languages are enabled by the :command:`project` command.  Language-specific
built-in variables, such as
:variable:`CMAKE_CXX_COMPILER <CMAKE_<LANG>_COMPILER>`,
:variable:`CMAKE_CXX_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` etc are set by
invoking the :command:`project` command.  If no project command
is in the top-level CMakeLists file, one will be implicitly generated. By default
the enabled languages are ``C`` and ``CXX``:

.. code-block:: cmake

  project(C_Only C)

A special value of ``NONE`` can also be used with the :command:`project` command
to enable no languages:

.. code-block:: cmake

  project(MyProject NONE)

The :command:`enable_language` command can be used to enable languages after the
:command:`project` command:

.. code-block:: cmake

  enable_language(CXX)

When a language is enabled, CMake finds a compiler for that language, and
determines some information, such as the vendor and version of the compiler,
the target architecture and bitwidth, the location of corresponding utilities
etc.

The :prop_gbl:`ENABLED_LANGUAGES` global property contains the languages which
are currently enabled.

Variables and Properties
========================

Several variables relate to the language components of a toolchain which are
enabled:

:variable:`CMAKE_<LANG>_COMPILER`
  The full path to the compiler used for ``<LANG>``
:variable:`CMAKE_<LANG>_COMPILER_ID`
  The compiler identifier used by CMake
:variable:`CMAKE_<LANG>_COMPILER_VERSION`
  The version of the compiler.
:variable:`CMAKE_<LANG>_FLAGS`
  The variables and the configuration-specific equivalents contain flags that
  will be added to the compile command when compiling a file of a particular
  language.

CMake needs a way to determine which compiler to use to invoke the linker.
This is determined by the :prop_sf:`LANGUAGE` property of source files of the
:manual:`target <cmake-buildsystem(7)>`, and in the case of static libraries,
the ``LANGUAGE`` of the dependent libraries. The choice CMake makes may be overridden
with the :prop_tgt:`LINKER_LANGUAGE` target property.

Toolchain Features
==================

CMake provides the :command:`try_compile` command and wrapper macros such as
:module:`CheckSourceCompiles`, :module:`CheckCXXSymbolExists` and
:module:`CheckIncludeFile` to test capability and availability of various
toolchain features. These APIs test the toolchain in some way and cache the
result so that the test does not have to be performed again the next time
CMake runs.

Some toolchain features have built-in handling in CMake, and do not require
compile-tests. For example, :prop_tgt:`POSITION_INDEPENDENT_CODE` allows
specifying that a target should be built as position-independent code, if
the compiler supports that feature. The :prop_tgt:`<LANG>_VISIBILITY_PRESET`
and :prop_tgt:`VISIBILITY_INLINES_HIDDEN` target properties add flags for
hidden visibility, if supported by the compiler.

.. _`Cross Compiling Toolchain`:

Cross Compiling
===============

If :manual:`cmake(1)` is invoked with the command line parameter
:option:`--toolchain path/to/file <cmake --toolchain>` or
:option:`-DCMAKE_TOOLCHAIN_FILE=path/to/file <cmake -D>`, the
file will be loaded early to set values for the compilers.
The :variable:`CMAKE_CROSSCOMPILING` variable is set to true when CMake is
cross-compiling.

Note that using the :variable:`CMAKE_SOURCE_DIR` or :variable:`CMAKE_BINARY_DIR`
variables inside a toolchain file is typically undesirable.  The toolchain
file is used in contexts where these variables have different values when used
in different places (e.g. as part of a call to :command:`try_compile`).  In most
cases, where there is a need to evaluate paths inside a toolchain file, the more
appropriate variable to use would be :variable:`CMAKE_CURRENT_LIST_DIR`, since
it always has an unambiguous, predictable value.

Cross Compiling for Linux
-------------------------

A typical cross-compiling toolchain for Linux has content such
as:

.. code-block:: cmake

  set(CMAKE_SYSTEM_NAME Linux)
  set(CMAKE_SYSTEM_PROCESSOR arm)

  set(CMAKE_SYSROOT /home/devel/rasp-pi-rootfs)
  set(CMAKE_STAGING_PREFIX /home/devel/stage)

  set(tools /home/devel/gcc-4.7-linaro-rpi-gnueabihf)
  set(CMAKE_C_COMPILER ${tools}/bin/arm-linux-gnueabihf-gcc)
  set(CMAKE_CXX_COMPILER ${tools}/bin/arm-linux-gnueabihf-g++)

  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

Where:

:variable:`CMAKE_SYSTEM_NAME`
  is the CMake-identifier of the target platform to build for.
:variable:`CMAKE_SYSTEM_PROCESSOR`
  is the CMake-identifier of the target architecture.
:variable:`CMAKE_SYSROOT`
  is optional, and may be specified if a sysroot is available.
:variable:`CMAKE_STAGING_PREFIX`
  is also optional. It may be used to specify a path on the host to install to.
  The :variable:`CMAKE_INSTALL_PREFIX` is always the runtime installation
  location, even when cross-compiling.
:variable:`CMAKE_<LANG>_COMPILER`
  variable may be set to full paths, or to names of compilers to search for
  in standard locations.  For toolchains that do not support linking binaries
  without custom flags or scripts one may set the
  :variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` variable to ``STATIC_LIBRARY`` to
  tell CMake not to try to link executables during its checks.

CMake ``find_*`` commands will look in the sysroot, and the :variable:`CMAKE_FIND_ROOT_PATH`
entries by default in all cases, as well as looking in the host system root prefix.
Although this can be controlled on a case-by-case basis, when cross-compiling, it
can be useful to exclude looking in either the host or the target for particular
artifacts. Generally, includes, libraries and packages should be found in the
target system prefixes, whereas executables which must be run as part of the build
should be found only on the host and not on the target. This is the purpose of
the ``CMAKE_FIND_ROOT_PATH_MODE_*`` variables.

.. _`Cray Cross-Compile`:

Cross Compiling for the Cray Linux Environment
----------------------------------------------

Cross compiling for compute nodes in the Cray Linux Environment can be done
without needing a separate toolchain file.  Specifying
``-DCMAKE_SYSTEM_NAME=CrayLinuxEnvironment`` on the CMake command line will
ensure that the appropriate build settings and search paths are configured.
The platform will pull its configuration from the current environment
variables and will configure a project to use the compiler wrappers from the
Cray Programming Environment's ``PrgEnv-*`` modules if present and loaded.

The default configuration of the Cray Programming Environment is to only
support static libraries.  This can be overridden and shared libraries
enabled by setting the ``CRAYPE_LINK_TYPE`` environment variable to
``dynamic``.

Running CMake without specifying :variable:`CMAKE_SYSTEM_NAME` will
run the configure step in host mode assuming a standard Linux environment.
If not overridden, the ``PrgEnv-*`` compiler wrappers will end up getting used,
which if targeting the either the login node or compute node, is likely not the
desired behavior.  The exception to this would be if you are building directly
on a NID instead of cross-compiling from a login node. If trying to build
software for a login node, you will need to either first unload the
currently loaded ``PrgEnv-*`` module or explicitly tell CMake to use the
system compilers in ``/usr/bin`` instead of the Cray wrappers.  If instead
targeting a compute node is desired, just specify the
:variable:`CMAKE_SYSTEM_NAME` as mentioned above.

Cross Compiling using Clang
---------------------------

Some compilers such as Clang are inherently cross compilers.
The :variable:`CMAKE_<LANG>_COMPILER_TARGET` can be set to pass a
value to those supported compilers when compiling:

.. code-block:: cmake

  set(CMAKE_SYSTEM_NAME Linux)
  set(CMAKE_SYSTEM_PROCESSOR arm)

  set(triple arm-linux-gnueabihf)

  set(CMAKE_C_COMPILER clang)
  set(CMAKE_C_COMPILER_TARGET ${triple})
  set(CMAKE_CXX_COMPILER clang++)
  set(CMAKE_CXX_COMPILER_TARGET ${triple})

Similarly, some compilers do not ship their own supplementary utilities
such as linkers, but provide a way to specify the location of the external
toolchain which will be used by the compiler driver. The
:variable:`CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN` variable can be set in a
toolchain file to pass the path to the compiler driver.

Cross Compiling for QNX
-----------------------

As the Clang compiler the QNX QCC compile is inherently a cross compiler.
And the :variable:`CMAKE_<LANG>_COMPILER_TARGET` can be set to pass a
value to those supported compilers when compiling:

.. code-block:: cmake

  set(CMAKE_SYSTEM_NAME QNX)

  set(arch gcc_ntoarmv7le)

  set(CMAKE_C_COMPILER qcc)
  set(CMAKE_C_COMPILER_TARGET ${arch})
  set(CMAKE_CXX_COMPILER QCC)
  set(CMAKE_CXX_COMPILER_TARGET ${arch})

  set(CMAKE_SYSROOT $ENV{QNX_TARGET})


Cross Compiling for Windows CE
------------------------------

Cross compiling for Windows CE requires the corresponding SDK being
installed on your system.  These SDKs are usually installed under
``C:/Program Files (x86)/Windows CE Tools/SDKs``.

A toolchain file to configure a Visual Studio generator for
Windows CE may look like this:

.. code-block:: cmake

  set(CMAKE_SYSTEM_NAME WindowsCE)

  set(CMAKE_SYSTEM_VERSION 8.0)
  set(CMAKE_SYSTEM_PROCESSOR arm)

  set(CMAKE_GENERATOR_TOOLSET CE800) # Can be omitted for 8.0
  set(CMAKE_GENERATOR_PLATFORM SDK_AM335X_SK_WEC2013_V310)

The :variable:`CMAKE_GENERATOR_PLATFORM` tells the generator which SDK to use.
Further :variable:`CMAKE_SYSTEM_VERSION` tells the generator what version of
Windows CE to use.  Currently version 8.0 (Windows Embedded Compact 2013) is
supported out of the box.  Other versions may require one to set
:variable:`CMAKE_GENERATOR_TOOLSET` to the correct value.

Cross Compiling for Windows 10 Universal Applications
-----------------------------------------------------

A toolchain file to configure :ref:`Visual Studio Generators` for a
Windows 10 Universal Application may look like this:

.. code-block:: cmake

  set(CMAKE_SYSTEM_NAME WindowsStore)
  set(CMAKE_SYSTEM_VERSION 10.0)

A Windows 10 Universal Application targets both Windows Store and
Windows Phone.  Specify the :variable:`CMAKE_SYSTEM_VERSION` variable
to be ``10.0`` or higher.

CMake selects a Windows SDK as described by documentation of the
:variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION` variable.

Cross Compiling for Windows Phone
---------------------------------

A toolchain file to configure a Visual Studio generator for
Windows Phone may look like this:

.. code-block:: cmake

  set(CMAKE_SYSTEM_NAME WindowsPhone)
  set(CMAKE_SYSTEM_VERSION 8.1)

Cross Compiling for Windows Store
---------------------------------

A toolchain file to configure a Visual Studio generator for
Windows Store may look like this:

.. code-block:: cmake

  set(CMAKE_SYSTEM_NAME WindowsStore)
  set(CMAKE_SYSTEM_VERSION 8.1)

.. _`Cross Compiling for ADSP SHARC/Blackfin`:

Cross Compiling for ADSP SHARC/Blackfin
---------------------------------------

Cross-compiling for ADSP SHARC or Blackfin can be configured
by setting the :variable:`CMAKE_SYSTEM_NAME` variable to ``ADSP``
and the :variable:`CMAKE_SYSTEM_PROCESSOR` variable
to the "part number", excluding the ``ADSP-`` prefix,
for example, ``21594``, ``SC589``, etc.
This value is case insensitive.

CMake will automatically search for CCES or VDSP++ installs
in their default install locations
and select the most recent version found.
CCES will be selected over VDSP++ if both are installed.
Custom install paths can be set via the :variable:`CMAKE_ADSP_ROOT` variable
or the :envvar:`ADSP_ROOT` environment variable.

The compiler (``cc21k`` vs. ``ccblkfn``) is selected automatically
based on the :variable:`CMAKE_SYSTEM_PROCESSOR` value provided.

.. _`Cross Compiling for Android`:

Cross Compiling for Android
---------------------------

A toolchain file may configure cross-compiling for Android by setting the
:variable:`CMAKE_SYSTEM_NAME` variable to ``Android``.  Further configuration
is specific to the Android development environment to be used.

For :ref:`Visual Studio Generators`, CMake expects :ref:`NVIDIA Nsight Tegra
Visual Studio Edition <Cross Compiling for Android with NVIDIA Nsight Tegra
Visual Studio Edition>` or the :ref:`Visual Studio tools for Android
<Cross Compiling for Android with the NDK>` to be installed. See those sections
for further configuration details.

For :ref:`Makefile Generators` and the :generator:`Ninja` generator,
CMake expects one of these environments:

* :ref:`NDK <Cross Compiling for Android with the NDK>`
* :ref:`Standalone Toolchain <Cross Compiling for Android with a Standalone Toolchain>`

CMake uses the following steps to select one of the environments:

* If the :variable:`CMAKE_ANDROID_NDK` variable is set, the NDK at the
  specified location will be used.

* Else, if the :variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN` variable
  is set, the Standalone Toolchain at the specified location will be used.

* Else, if the :variable:`CMAKE_SYSROOT` variable is set to a directory
  of the form ``<ndk>/platforms/android-<api>/arch-<arch>``, the ``<ndk>``
  part will be used as the value of :variable:`CMAKE_ANDROID_NDK` and the
  NDK will be used.

* Else, if the :variable:`CMAKE_SYSROOT` variable is set to a directory of the
  form ``<standalone-toolchain>/sysroot``, the ``<standalone-toolchain>`` part
  will be used as the value of :variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN`
  and the Standalone Toolchain will be used.

* Else, if a cmake variable ``ANDROID_NDK`` is set it will be used
  as the value of :variable:`CMAKE_ANDROID_NDK`, and the NDK will be used.

* Else, if a cmake variable ``ANDROID_STANDALONE_TOOLCHAIN`` is set, it will be
  used as the value of :variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN`, and the
  Standalone Toolchain will be used.

* Else, if an environment variable ``ANDROID_NDK_ROOT`` or
  ``ANDROID_NDK`` is set, it will be used as the value of
  :variable:`CMAKE_ANDROID_NDK`, and the NDK will be used.

* Else, if an environment variable ``ANDROID_STANDALONE_TOOLCHAIN`` is
  set then it will be used as the value of
  :variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN`, and the Standalone
  Toolchain will be used.

* Else, an error diagnostic will be issued that neither the NDK or
  Standalone Toolchain can be found.

.. versionadded:: 3.20
  If an Android NDK is selected, its version number is reported
  in the :variable:`CMAKE_ANDROID_NDK_VERSION` variable.

.. _`Cross Compiling for Android with the NDK`:

Cross Compiling for Android with the NDK
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A toolchain file may configure :ref:`Makefile Generators`,
:ref:`Ninja Generators`, or :ref:`Visual Studio Generators` to target
Android for cross-compiling.

Configure use of an Android NDK with the following variables:

:variable:`CMAKE_SYSTEM_NAME`
  Set to ``Android``.  Must be specified to enable cross compiling
  for Android.

:variable:`CMAKE_SYSTEM_VERSION`
  Set to the Android API level.  If not specified, the value is
  determined as follows:

  * If the :variable:`CMAKE_ANDROID_API` variable is set, its value
    is used as the API level.
  * If the :variable:`CMAKE_SYSROOT` variable is set, the API level is
    detected from the NDK directory structure containing the sysroot.
  * Otherwise, the latest API level available in the NDK is used.

:variable:`CMAKE_ANDROID_ARCH_ABI`
  Set to the Android ABI (architecture).  If not specified, this
  variable will default to the first supported ABI in the list of
  ``armeabi``, ``armeabi-v7a`` and ``arm64-v8a``.
  The :variable:`CMAKE_ANDROID_ARCH` variable will be computed
  from ``CMAKE_ANDROID_ARCH_ABI`` automatically.
  Also see the :variable:`CMAKE_ANDROID_ARM_MODE` and
  :variable:`CMAKE_ANDROID_ARM_NEON` variables.

:variable:`CMAKE_ANDROID_NDK`
  Set to the absolute path to the Android NDK root directory.
  If not specified, a default for this variable will be chosen
  as specified :ref:`above <Cross Compiling for Android>`.

:variable:`CMAKE_ANDROID_NDK_DEPRECATED_HEADERS`
  Set to a true value to use the deprecated per-api-level headers
  instead of the unified headers.  If not specified, the default will
  be false unless using a NDK that does not provide unified headers.

:variable:`CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION`
  On NDK r19 or above, this variable must be unset or set to ``clang``.
  On NDK r18 or below, set this to the version of the NDK toolchain to
  be selected as the compiler.  If not specified, the default will be
  the latest available GCC toolchain.

:variable:`CMAKE_ANDROID_STL_TYPE`
  Set to specify which C++ standard library to use.  If not specified,
  a default will be selected as described in the variable documentation.

The following variables will be computed and provided automatically:

:variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX`
  The absolute path prefix to the binutils in the NDK toolchain.

:variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX`
  The host platform suffix of the binutils in the NDK toolchain.


For example, a toolchain file might contain:

.. code-block:: cmake

  set(CMAKE_SYSTEM_NAME Android)
  set(CMAKE_SYSTEM_VERSION 21) # API level
  set(CMAKE_ANDROID_ARCH_ABI arm64-v8a)
  set(CMAKE_ANDROID_NDK /path/to/android-ndk)
  set(CMAKE_ANDROID_STL_TYPE gnustl_static)

Alternatively one may specify the values without a toolchain file:

.. code-block:: console

  $ cmake ../src \
    -DCMAKE_SYSTEM_NAME=Android \
    -DCMAKE_SYSTEM_VERSION=21 \
    -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a \
    -DCMAKE_ANDROID_NDK=/path/to/android-ndk \
    -DCMAKE_ANDROID_STL_TYPE=gnustl_static

.. _`Cross Compiling for Android with a Standalone Toolchain`:

Cross Compiling for Android with a Standalone Toolchain
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A toolchain file may configure :ref:`Makefile Generators` or the
:generator:`Ninja` generator to target Android for cross-compiling
using a standalone toolchain.

Configure use of an Android standalone toolchain with the following variables:

:variable:`CMAKE_SYSTEM_NAME`
  Set to ``Android``.  Must be specified to enable cross compiling
  for Android.

:variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN`
  Set to the absolute path to the standalone toolchain root directory.
  A ``${CMAKE_ANDROID_STANDALONE_TOOLCHAIN}/sysroot`` directory
  must exist.
  If not specified, a default for this variable will be chosen
  as specified :ref:`above <Cross Compiling for Android>`.

:variable:`CMAKE_ANDROID_ARM_MODE`
  When the standalone toolchain targets ARM, optionally set this to ``ON``
  to target 32-bit ARM instead of 16-bit Thumb.
  See variable documentation for details.

:variable:`CMAKE_ANDROID_ARM_NEON`
  When the standalone toolchain targets ARM v7, optionally set thisto ``ON``
  to target ARM NEON devices.  See variable documentation for details.

The following variables will be computed and provided automatically:

:variable:`CMAKE_SYSTEM_VERSION`
  The Android API level detected from the standalone toolchain.

:variable:`CMAKE_ANDROID_ARCH_ABI`
  The Android ABI detected from the standalone toolchain.

:variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX`
  The absolute path prefix to the ``binutils`` in the standalone toolchain.

:variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX`
  The host platform suffix of the ``binutils`` in the standalone toolchain.

For example, a toolchain file might contain:

.. code-block:: cmake

  set(CMAKE_SYSTEM_NAME Android)
  set(CMAKE_ANDROID_STANDALONE_TOOLCHAIN /path/to/android-toolchain)

Alternatively one may specify the values without a toolchain file:

.. code-block:: console

  $ cmake ../src \
    -DCMAKE_SYSTEM_NAME=Android \
    -DCMAKE_ANDROID_STANDALONE_TOOLCHAIN=/path/to/android-toolchain

.. _`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition`:

Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A toolchain file to configure one of the :ref:`Visual Studio Generators`
to build using NVIDIA Nsight Tegra targeting Android may look like this:

.. code-block:: cmake

  set(CMAKE_SYSTEM_NAME Android)

The :variable:`CMAKE_GENERATOR_TOOLSET` may be set to select
the Nsight Tegra "Toolchain Version" value.

See also target properties:

* :prop_tgt:`ANDROID_ANT_ADDITIONAL_OPTIONS`
* :prop_tgt:`ANDROID_API_MIN`
* :prop_tgt:`ANDROID_API`
* :prop_tgt:`ANDROID_ARCH`
* :prop_tgt:`ANDROID_ASSETS_DIRECTORIES`
* :prop_tgt:`ANDROID_GUI`
* :prop_tgt:`ANDROID_JAR_DEPENDENCIES`
* :prop_tgt:`ANDROID_JAR_DIRECTORIES`
* :prop_tgt:`ANDROID_JAVA_SOURCE_DIR`
* :prop_tgt:`ANDROID_NATIVE_LIB_DEPENDENCIES`
* :prop_tgt:`ANDROID_NATIVE_LIB_DIRECTORIES`
* :prop_tgt:`ANDROID_PROCESS_MAX`
* :prop_tgt:`ANDROID_PROGUARD_CONFIG_PATH`
* :prop_tgt:`ANDROID_PROGUARD`
* :prop_tgt:`ANDROID_SECURE_PROPS_PATH`
* :prop_tgt:`ANDROID_SKIP_ANT_STEP`
* :prop_tgt:`ANDROID_STL_TYPE`

.. _`Cross Compiling for iOS, tvOS, visionOS, or watchOS`:

Cross Compiling for iOS, tvOS, visionOS, or watchOS
---------------------------------------------------

For cross-compiling to iOS, tvOS, visionOS, or watchOS, the :generator:`Xcode`
generator is recommended.  The :generator:`Unix Makefiles` or
:generator:`Ninja` generators can also be used, but they require the
project to handle more areas like target CPU selection and code signing.

Any of the Apple device platforms can be targeted by setting the
:variable:`CMAKE_SYSTEM_NAME` variable to a value from the table below.
By default, the latest Device SDK is chosen.  As for all Apple platforms,
a different SDK (e.g. a simulator) can be selected by setting the
:variable:`CMAKE_OSX_SYSROOT` variable, although this should rarely be
necessary (see :ref:`Switching Between Device and Simulator` below).
A list of available SDKs can be obtained by running ``xcodebuild -showsdks``.

========  ================= ==================== ================
OS        CMAKE_SYSTEM_NAME Device SDK (default) Simulator SDK
========  ================= ==================== ================
iOS       iOS               iphoneos             iphonesimulator
tvOS      tvOS              appletvos            appletvsimulator
visionOS  visionOS          xros                 xrsimulator
watchOS   watchOS           watchos              watchsimulator
========  ================= ==================== ================

For example, to create a CMake configuration for iOS, the following
command is sufficient:

.. code-block:: console

  cmake .. -GXcode -DCMAKE_SYSTEM_NAME=iOS

Variable :variable:`CMAKE_OSX_ARCHITECTURES` can be used to set architectures
for both device and simulator. Variable :variable:`CMAKE_OSX_DEPLOYMENT_TARGET`
can be used to set an iOS/tvOS/visionOS/watchOS deployment target.

The next example installs five architectures in a universal binary for an iOS
library.  It adds the relevant ``-miphoneos-version-min=9.3`` or
``-mios-simulator-version-min=9.3`` compiler flag where appropriate.
Note that the :variable:`CMAKE_IOS_INSTALL_COMBINED` variable used in the
example is now deprecated, so this approach is no longer recommended.

.. code-block:: console

  $ cmake -S. -B_builds -GXcode \
      -DCMAKE_SYSTEM_NAME=iOS \
      "-DCMAKE_OSX_ARCHITECTURES=armv7;armv7s;arm64;i386;x86_64" \
      -DCMAKE_OSX_DEPLOYMENT_TARGET=9.3 \
      -DCMAKE_INSTALL_PREFIX=`pwd`/_install \
      -DCMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH=NO \
      -DCMAKE_IOS_INSTALL_COMBINED=YES

Example:

.. code-block:: cmake

  # CMakeLists.txt
  cmake_minimum_required(VERSION 3.14)
  project(foo)
  add_library(foo foo.cpp)
  install(TARGETS foo DESTINATION lib)

Install:

.. code-block:: console

    $ cmake --build _builds --config Release --target install

Check library:

.. code-block:: console

    $ lipo -info _install/lib/libfoo.a
    Architectures in the fat file: _install/lib/libfoo.a are: i386 armv7 armv7s x86_64 arm64

.. code-block:: console

    $ otool -l _install/lib/libfoo.a | grep -A2 LC_VERSION_MIN_IPHONEOS
          cmd LC_VERSION_MIN_IPHONEOS
      cmdsize 16
      version 9.3

Code Signing
^^^^^^^^^^^^

Some build artifacts for the embedded Apple platforms require mandatory
code signing.  If the :generator:`Xcode` generator is being used and
code signing is required or desired, the development team ID can be
specified via the ``CMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM`` CMake variable.
This team ID will then be included in the generated Xcode project.
By default, CMake avoids the need for code signing during the internal
configuration phase (i.e compiler ID and feature detection).

.. _`Switching Between Device and Simulator`:

Switching Between Device and Simulator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When configuring for any of the embedded platforms, one can target either
real devices or the simulator.  Both have their own separate SDK, but CMake
only supports specifying a single SDK for the configuration phase.  This
means the developer must select one or the other at configuration time.
When using the :generator:`Xcode` generator, this is less of a limitation
because Xcode still allows you to build for either a device or a simulator,
even though configuration was only performed for one of the two.  From
within the Xcode IDE, builds are performed for the selected "destination"
platform.  When building from the command line, the desired sdk can be
specified directly by passing a ``-sdk`` option to the underlying build
tool (``xcodebuild``).  For example:

.. code-block:: console

  $ cmake --build ... -- -sdk iphonesimulator

Please note that checks made during configuration were performed against
the configure-time SDK and might not hold true for other SDKs.  Commands
like :command:`find_package`, :command:`find_library`, etc. store and use
details only for the configured SDK/platform, so they can be problematic
if wanting to switch between device and simulator builds. You can follow
the next rules to make device + simulator configuration work:

- Use explicit ``-l`` linker flag,
  e.g. ``target_link_libraries(foo PUBLIC "-lz")``

- Use explicit ``-framework`` linker flag,
  e.g. ``target_link_libraries(foo PUBLIC "-framework CoreFoundation")``

- Use :command:`find_package` only for libraries installed with
  :variable:`CMAKE_IOS_INSTALL_COMBINED` feature




/P/🚀 guide/tutorial/index.rst
============================================


CMake Tutorial
**************

Introduction
============

The CMake tutorial provides a step-by-step guide that covers common build
system issues that CMake helps address. Seeing how various topics all
work together in an example project can be very helpful.

Steps
=====

.. include:: source.txt

|tutorial_source|
Each step has its own subdirectory containing code that may be used as a
starting point. The tutorial examples are progressive so that each step
provides the complete solution for the previous step.

The tutorial source code examples are available in `this archive`_. 

.. _this archive: https://cmake.org/cmake/help/latest/_downloads/47465adb3616215a5242d3f872d21a72/cmake-3.29.0-tutorial-source.zip

.. toctree::
  :maxdepth: 2

  A Basic Starting Point
  Adding a Library
  Adding Usage Requirements for a Library
  Adding Generator Expressions
  Installing and Testing
  Adding Support for a Testing Dashboard
  Adding System Introspection
  Adding a Custom Command and Generated File
  Packaging an Installer
  Selecting Static or Shared Libraries
  Adding Export Configuration
  Packaging Debug and Release

.. 
  Whenever a step above is renamed or removed, leave forwarding text in
  its original document file, and list it below to preserve old links
  to cmake.org/cmake/help/latest/ URLs.

.. toctree::
  :maxdepth: 1
  :hidden:



/P/🚀 guide/tutorial/A Basic Starting Point.rst
=============================================================


Step 1: A Basic Starting Point
==============================

Where do I start with CMake? This step will provide an introduction to some of
CMake's basic syntax, commands, and variables. As these concepts are
introduced, we will work through three exercises and create a simple CMake
project.

Each exercise in this step will start with some background information. Then, a
goal and list of helpful resources are provided. Each file in the
``Files to Edit`` section is in the ``Step1`` directory and contains one or
more ``TODO`` comments. Each ``TODO`` represents a line or two of code to
change or add. The ``TODO`` s are intended to be completed in numerical order,
first complete  ``TODO 1`` then ``TODO 2``, etc. The ``Getting Started``
section will give some helpful hints and guide you through the exercise. Then
the ``Build and Run`` section will walk step-by-step through how to build and
test the exercise. Finally, at the end of each exercise the intended solution
is discussed.

Also note that each step in the tutorial builds on the next. So, for example,
the starting code for ``Step2`` is the complete solution to ``Step1``.

Exercise 1 - Building a Basic Project
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The most basic CMake project is an executable built from a single source code
file. For simple projects like this, a ``CMakeLists.txt`` file with three
commands is all that is required.

**Note:** Although upper, lower and mixed case commands are supported by CMake,
lower case commands are preferred and will be used throughout the tutorial.

Any project's top most CMakeLists.txt must start by specifying a minimum CMake
version using the :command:`cmake_minimum_required` command. This establishes
policy settings and ensures that the following CMake functions are run with a
compatible version of CMake.

To start a project, we use the :command:`project` command to set the project
name. This call is required with every project and should be called soon after
:command:`cmake_minimum_required`. As we will see later, this command can
also be used to specify other project level information such as the language
or version number.

Finally, the :command:`add_executable` command tells CMake to create an
executable using the specified source code files.

Goal
----

Understand how to create a simple CMake project.

Helpful Resources
-----------------

* :command:`add_executable`
* :command:`cmake_minimum_required`
* :command:`project`

Files to Edit
-------------

* ``CMakeLists.txt``

Getting Started
----------------

The source code for ``tutorial.cxx`` is provided in the
``Help/guide/tutorial/Step1`` directory and can be used to compute the square
root of a number. This file does not need to be edited in this step.

In the same directory is a ``CMakeLists.txt`` file which you will complete.
Start with ``TODO 1`` and work through ``TODO 3``.

Build and Run
-------------

Once ``TODO 1`` through ``TODO 3`` have been completed, we are ready to build
and run our project! First, run the :manual:`cmake <cmake(1)>` executable or the
:manual:`cmake-gui <cmake-gui(1)>` to configure the project and then build it
with your chosen build tool.

For example, from the command line we could navigate to the
``Help/guide/tutorial`` directory of the CMake source code tree and create a
build directory:

.. code-block:: console

  mkdir Step1_build

Next, navigate to that build directory and run
:manual:`cmake <cmake(1)>` to configure the project and generate a native build
system:

.. code-block:: console

  cd Step1_build
  cmake ../Step1

Then call that build system to actually compile/link the project:

.. code-block:: console

  cmake --build .

For multi-config generators (e.g. Visual Studio), first navigate to the
appropriate subdirectory, for example:

.. code-block:: console

  cd Debug

Finally, try to use the newly built ``Tutorial``:

.. code-block:: console

  Tutorial 4294967296
  Tutorial 10
  Tutorial


**Note:** Depending on the shell, the correct syntax may be ``Tutorial``,
``./Tutorial`` or ``.\Tutorial``. For simplicity, the exercises will use
``Tutorial`` throughout.

Solution
--------

As mentioned above, a three line ``CMakeLists.txt`` is all that we need to get
up and running. The first line is to use :command:`cmake_minimum_required` to
set the CMake version as follows:

.. raw:: html

  <details><summary>TODO 1: Click to show/hide answer</summary>

.. literalinclude:: Step2/CMakeLists.txt
  :caption: TODO 1: CMakeLists.txt
  :name: CMakeLists.txt-cmake_minimum_required
  :language: cmake
  :end-before: # set the project name and version

.. raw:: html

  </details>

The next step to make a basic project is to use the :command:`project`
command as follows to set the project name:

.. raw:: html

  <details><summary>TODO 2: Click to show/hide answer</summary>

.. code-block:: cmake
  :caption: TODO 2: CMakeLists.txt
  :name: CMakeLists.txt-project

  project(Tutorial)

.. raw:: html

  </details>

The last command to call for a basic project is
:command:`add_executable`. We call it as follows:

.. raw:: html

  <details><summary>TODO 3: Click to show/hide answer</summary>

.. literalinclude:: Step2/CMakeLists.txt
  :caption: TODO 3: CMakeLists.txt
  :name: CMakeLists.txt-add_executable
  :language: cmake
  :start-after: # add the executable
  :end-before: # TODO 3:

.. raw:: html

  </details>

Exercise 2 - Specifying the C++ Standard
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CMake has some special variables that are either created behind the scenes or
have meaning to CMake when set by project code. Many of these variables start
with ``CMAKE_``. Avoid this naming convention when creating variables for your
projects. Two of these special user settable variables are
:variable:`CMAKE_CXX_STANDARD` and :variable:`CMAKE_CXX_STANDARD_REQUIRED`.
These may be used together to specify the C++ standard needed to build the
project.

Goal
----

Add a feature that requires C++11.

Helpful Resources
-----------------

* :variable:`CMAKE_CXX_STANDARD`
* :variable:`CMAKE_CXX_STANDARD_REQUIRED`
* :command:`set`

Files to Edit
-------------

* ``CMakeLists.txt``
* ``tutorial.cxx``

Getting Started
---------------

Continue editing files in the ``Step1`` directory. Start with ``TODO 4`` and
complete through ``TODO 6``.

First, edit ``tutorial.cxx`` by adding a feature that requires C++11. Then
update ``CMakeLists.txt`` to require C++11.

Build and Run
-------------

Let's build our project again. Since we already created a build directory and
ran CMake for Exercise 1, we can skip to the build step:

.. code-block:: console

  cd Step1_build
  cmake --build .

Now we can try to use the newly built ``Tutorial`` with same commands as
before:

.. code-block:: console

  Tutorial 4294967296
  Tutorial 10
  Tutorial

Solution
--------

We start by adding some C++11 features to our project by replacing
``atof`` with ``std::stod`` in ``tutorial.cxx``. This looks like
the following:

.. raw:: html

  <details><summary>TODO 4: Click to show/hide answer</summary>

.. literalinclude:: Step2/tutorial.cxx
  :caption: TODO 4: tutorial.cxx
  :name: tutorial.cxx-cxx11
  :language: c++
  :start-after: // convert input to double
  :end-before: // TODO 6:

.. raw:: html

  </details>

To complete ``TODO 5``, simply remove ``#include <cstdlib>``.

We will need to explicitly state in the CMake code that it should use the
correct flags. One way to enable support for a specific C++ standard in CMake
is by using the :variable:`CMAKE_CXX_STANDARD` variable. For this tutorial, set
the :variable:`CMAKE_CXX_STANDARD` variable in the ``CMakeLists.txt`` file to
``11`` and :variable:`CMAKE_CXX_STANDARD_REQUIRED` to ``True``. Make sure to
add the :variable:`CMAKE_CXX_STANDARD` declarations above the call to
:command:`add_executable`.

.. raw:: html

  <details><summary>TODO 6: Click to show/hide answer</summary>

.. literalinclude:: Step2/CMakeLists.txt
  :caption: TODO 6: CMakeLists.txt
  :name: CMakeLists.txt-CXX_STANDARD
  :language: cmake
  :start-after: # specify the C++ standard
  :end-before: # configure a header file

.. raw:: html

  </details>

Exercise 3 - Adding a Version Number and Configured Header File
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Sometimes it may be useful to have a variable that is defined in your
``CMakelists.txt`` file also be available in your source code. In this case, we
would like to print the project version.

One way to accomplish this is by using a configured header file. We create an
input file with one or more variables to replace. These variables have special
syntax which looks like ``@VAR@``.
Then, we use the :command:`configure_file` command to copy the input file to a
given output file and replace these variables with the current value of ``VAR``
in the ``CMakelists.txt`` file.

While we could edit the version directly in the source code, using this
feature is preferred since it creates a single source of truth and avoids
duplication.

Goal
----

Define and report the project's version number.

Helpful Resources
-----------------

* :variable:`<PROJECT-NAME>_VERSION_MAJOR`
* :variable:`<PROJECT-NAME>_VERSION_MINOR`
* :command:`configure_file`
* :command:`target_include_directories`

Files to Edit
-------------

* ``CMakeLists.txt``
* ``tutorial.cxx``

Getting Started
---------------

Continue to edit files from ``Step1``. Start on ``TODO 7`` and complete through
``TODO 12``. In this exercise, we start by adding a project version number in
``CMakeLists.txt``. In that same file, use :command:`configure_file` to copy a
given input file to an output file and substitute some variable values in the
input file content.

Next, create an input header file ``TutorialConfig.h.in`` defining version
numbers which will accept variables passed from :command:`configure_file`.

Finally, update ``tutorial.cxx`` to print out its version number.

Build and Run
-------------

Let's build our project again. As before, we already created a build directory
and ran CMake so we can skip to the build step:

.. code-block:: console

  cd Step1_build
  cmake --build .

Verify that the version number is now reported when running the executable
without any arguments.

Solution
--------

In this exercise, we improve our executable by printing a version number.
While we could do this exclusively in the source code, using ``CMakeLists.txt``
lets us maintain a single source of data for the version number.

First, we modify the ``CMakeLists.txt`` file to use the
:command:`project` command to set both the project name and version number.
When the :command:`project` command is called, CMake defines
``Tutorial_VERSION_MAJOR`` and ``Tutorial_VERSION_MINOR`` behind the scenes.

.. raw:: html

  <details><summary>TODO 7: Click to show/hide answer</summary>

.. literalinclude:: Step2/CMakeLists.txt
  :caption: TODO 7: CMakeLists.txt
  :name: CMakeLists.txt-project-VERSION
  :language: cmake
  :start-after: # set the project name and version
  :end-before: # specify the C++ standard

.. raw:: html

  </details>

Then we used :command:`configure_file` to copy the input file with the
specified CMake variables replaced:

.. raw:: html

  <details><summary>TODO 8: Click to show/hide answer</summary>

.. literalinclude:: Step2/CMakeLists.txt
  :caption: TODO 8: CMakeLists.txt
  :name: CMakeLists.txt-configure_file
  :language: cmake
  :start-after: # to the source code
  :end-before: # TODO 2:

.. raw:: html

  </details>

Since the configured file will be written into the project binary
directory, we must add that directory to the list of paths to search for
include files.

**Note:** Throughout this tutorial, we will refer to the project build and
the project binary directory interchangeably. These are the same and are not
meant to refer to a `bin/` directory.

We used :command:`target_include_directories` to specify
where the executable target should look for include files.

.. raw:: html

  <details><summary>TODO 9: Click to show/hide answer</summary>

.. literalinclude:: Step2/CMakeLists.txt
  :caption: TODO 9: CMakeLists.txt
  :name: CMakeLists.txt-target_include_directories
  :language: cmake
  :start-after: # so that we will find TutorialConfig.h

.. raw:: html

  </details>

``TutorialConfig.h.in`` is the input header file to be configured.
When :command:`configure_file` is called from our ``CMakeLists.txt``, the
values for ``@Tutorial_VERSION_MAJOR@`` and ``@Tutorial_VERSION_MINOR@`` will
be replaced with the corresponding version numbers from the project in
``TutorialConfig.h``.

.. raw:: html

  <details><summary>TODO 10: Click to show/hide answer</summary>

.. literalinclude:: Step2/TutorialConfig.h.in
  :caption: TODO 10: TutorialConfig.h.in
  :name: TutorialConfig.h.in
  :language: c++

.. raw:: html

  </details>

Next, we need to modify ``tutorial.cxx`` to include the configured header file,
``TutorialConfig.h``.

.. raw:: html

  <details><summary>TODO 11: Click to show/hide answer</summary>

.. code-block:: c++
  :caption: TODO 11: tutorial.cxx

  #include "TutorialConfig.h"

.. raw:: html

  </details>

Finally, we print out the executable name and version number by updating
``tutorial.cxx`` as follows:

.. raw:: html

  <details><summary>TODO 12: Click to show/hide answer</summary>

.. literalinclude:: Step2/tutorial.cxx
  :caption: TODO 12 : tutorial.cxx
  :name: tutorial.cxx-print-version
  :language: c++
  :start-after: {
  :end-before: // convert input to double

.. raw:: html

  </details>



/P/🚀 guide/tutorial/Adding a Library.rst
=======================================================


Step 2: Adding a Library
========================

At this point, we have seen how to create a basic project using CMake. In this
step, we will learn how to create and use a library in our project. We will
also see how to make the use of our library optional.

Exercise 1 - Creating a Library
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To add a library in CMake, use the :command:`add_library` command and specify
which source files should make up the library.

Rather than placing all of the source files in one directory, we can organize
our project with one or more subdirectories. In this case, we will create a
subdirectory specifically for our library. Here, we can add a new
``CMakeLists.txt`` file and one or more source files. In the top level
``CMakeLists.txt`` file, we will use the :command:`add_subdirectory` command
to add the subdirectory to the build.

Once the library is created, it is connected to our executable target with
:command:`target_include_directories` and :command:`target_link_libraries`.

Goal
----

Add and use a library.

Helpful Resources
-----------------

* :command:`add_library`
* :command:`add_subdirectory`
* :command:`target_include_directories`
* :command:`target_link_libraries`
* :variable:`PROJECT_SOURCE_DIR`

Files to Edit
-------------

* ``CMakeLists.txt``
* ``tutorial.cxx``
* ``MathFunctions/CMakeLists.txt``

Getting Started
---------------

In this exercise, we will add a library to our project that contains our own
implementation for computing the square root of a number. The executable can
then use this library instead of the standard square root function provided by
the compiler.

For this tutorial we will put the library into a subdirectory called
``MathFunctions``. This directory already contains the header files
``MathFunctions.h`` and ``mysqrt.h``. Their respective source files
``MathFunctions.cxx`` and ``mysqrt.cxx`` are also provided. We will not need
to modify any of these files. ``mysqrt.cxx`` has one function called
``mysqrt`` that provides similar functionality to the compiler's ``sqrt``
function. ``MathFunctions.cxx`` contains one function ``sqrt`` which serves
to hide the implementation details of ``sqrt``.

From the ``Help/guide/tutorial/Step2`` directory, start with ``TODO 1`` and
complete through ``TODO 6``.

First, fill in the one line ``CMakeLists.txt`` in the ``MathFunctions``
subdirectory.

Next, edit the top level ``CMakeLists.txt``.

Finally, use the newly created ``MathFunctions`` library in ``tutorial.cxx``

Build and Run
-------------

Run the :manual:`cmake  <cmake(1)>` executable or the
:manual:`cmake-gui <cmake-gui(1)>` to configure the project and then build it
with your chosen build tool.

Below is a refresher of what that looks like from the command line:

.. code-block:: console

  mkdir Step2_build
  cd Step2_build
  cmake ../Step2
  cmake --build .

Try to use the newly built ``Tutorial`` and ensure that it is still
producing accurate square root values.

Solution
--------

In the ``CMakeLists.txt`` file in the ``MathFunctions`` directory, we create
a library target called ``MathFunctions`` with :command:`add_library`. The
source files for the library are passed as an argument to
:command:`add_library`. This looks like the following line:

.. raw:: html

  <details><summary>TODO 1: Click to show/hide answer</summary>

.. code-block:: cmake
  :caption: TODO 1: MathFunctions/CMakeLists.txt
  :name: MathFunctions/CMakeLists.txt-add_library

  add_library(MathFunctions MathFunctions.cxx mysqrt.cxx)

.. raw:: html

  </details>

To make use of the new library we will add an :command:`add_subdirectory`
call in the top-level ``CMakeLists.txt`` file so that the library will get
built.

.. raw:: html

  <details><summary>TODO 2: Click to show/hide answer</summary>

.. code-block:: cmake
  :caption: TODO 2: CMakeLists.txt
  :name: CMakeLists.txt-add_subdirectory

  add_subdirectory(MathFunctions)

.. raw:: html

  </details>

Next, the new library target is linked to the executable target using
:command:`target_link_libraries`.

.. raw:: html

  <details><summary>TODO 3: Click to show/hide answer</summary>

.. code-block:: cmake
  :caption: TODO 3: CMakeLists.txt
  :name: CMakeLists.txt-target_link_libraries

  target_link_libraries(Tutorial PUBLIC MathFunctions)

.. raw:: html

  </details>

Finally we need to specify the library's header file location.
Modify the existing :command:`target_include_directories` call
to add the ``MathFunctions`` subdirectory as an include directory
so that the ``MathFunctions.h`` header file can be found.

.. raw:: html

  <details><summary>TODO 4: Click to show/hide answer</summary>

.. code-block:: cmake
  :caption: TODO 4: CMakeLists.txt
  :name: CMakeLists.txt-target_include_directories-step2

  target_include_directories(Tutorial PUBLIC
                            "${PROJECT_BINARY_DIR}"
                            "${PROJECT_SOURCE_DIR}/MathFunctions"
                            )

.. raw:: html

  </details>

Now let's use our library. In ``tutorial.cxx``, include ``MathFunctions.h``:

.. raw:: html

  <details><summary>TODO 5: Click to show/hide answer</summary>

.. literalinclude:: Step3/tutorial.cxx
  :caption: TODO 5: tutorial.cxx
  :name: CMakeLists.txt-include-MathFunctions.h
  :language: cmake
  :start-after: #include <string>
  :end-before: #include "TutorialConfig.h"

.. raw:: html

  </details>

Lastly, replace ``sqrt`` with the wrapper function ``mathfunctions::sqrt``.

.. raw:: html

  <details><summary>TODO 6: Click to show/hide answer</summary>

.. literalinclude:: Step3/tutorial.cxx
  :caption: TODO 6: tutorial.cxx
  :name: CMakeLists.txt-option
  :language: cmake
  :start-after:   const double inputValue = std::stod(argv[1]);
  :end-before: std::cout

.. raw:: html

  </details>

Exercise 2 - Adding an Option
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Now let us add an option in the MathFunctions library to allow developers to
select either the custom square root implementation or the built in standard
implementation. While for the tutorial
there really isn't any need to do so, for larger projects this is a common
occurrence.

CMake can do this using the :command:`option` command. This gives users a
variable which they can change when configuring their cmake build. This
setting will be stored in the cache so that the user does not need to set
the value each time they run CMake on a build directory.

Goal
----

Add the option to build without ``MathFunctions``.


Helpful Resources
-----------------

* :command:`if`
* :command:`option`
* :command:`target_compile_definitions`

Files to Edit
-------------

* ``MathFunctions/CMakeLists.txt``
* ``MathFunctions/MathFunctions.cxx``

Getting Started
---------------

Start with the resulting files from Exercise 1. Complete ``TODO 7`` through
``TODO 14``.

First create a variable ``USE_MYMATH`` using the :command:`option` command
in ``MathFunctions/CMakeLists.txt``. In that same file, use that option
to pass a compile definition to the ``MathFunctions`` library.

Then, update ``MathFunctions.cxx`` to redirect compilation based on
``USE_MYMATH``.

Lastly, prevent ``mysqrt.cxx`` from being compiled when ``USE_MYMATH`` is on
by making it its own library inside of the ``USE_MYMATH`` block of
``MathFunctions/CMakeLists.txt``.

Build and Run
-------------

Since we have our build directory already configured from Exercise 1, we can
rebuild by simply calling the following:

.. code-block:: console

  cd ../Step2_build
  cmake --build .

Next, run the ``Tutorial`` executable on a few numbers to verify that it's
still correct.

Now let's update the value of ``USE_MYMATH`` to ``OFF``. The easiest way is to
use the :manual:`cmake-gui <cmake-gui(1)>` or  :manual:`ccmake <ccmake(1)>`
if you're in the terminal. Or, alternatively, if you want to change the
option from the command-line, try:

.. code-block:: console

  cmake ../Step2 -DUSE_MYMATH=OFF

Now, rebuild the code with the following:

.. code-block:: console

  cmake --build .

Then, run the executable again to ensure that it still works with
``USE_MYMATH`` set to ``OFF``. Which function gives better results, ``sqrt``
or ``mysqrt``?

Solution
--------

The first step is to add an option to ``MathFunctions/CMakeLists.txt``.
This option will be displayed in the :manual:`cmake-gui <cmake-gui(1)>` and
:manual:`ccmake <ccmake(1)>` with a default value of ``ON`` that can be
changed by the user.

.. raw:: html

  <details><summary>TODO 7: Click to show/hide answer</summary>

.. literalinclude:: Step3/MathFunctions/CMakeLists.txt
  :caption: TODO 7: MathFunctions/CMakeLists.txt
  :name: CMakeLists.txt-option-library-level
  :language: cmake
  :start-after: # should we use our own math functions
  :end-before: if (USE_MYMATH)

.. raw:: html

  </details>

Next, make building and linking our library with ``mysqrt`` function
conditional using this new option.

Create an :command:`if` statement which checks the value of
``USE_MYMATH``. Inside the :command:`if` block, put the
:command:`target_compile_definitions` command with the compile
definition ``USE_MYMATH``.

.. raw:: html

  <details><summary>TODO 8: Click to show/hide answer</summary>

.. code-block:: cmake
  :caption: TODO 8: MathFunctions/CMakeLists.txt
  :name: CMakeLists.txt-USE_MYMATH

  if (USE_MYMATH)
    target_compile_definitions(MathFunctions PRIVATE "USE_MYMATH")
  endif()

.. raw:: html

  </details>

When ``USE_MYMATH`` is ``ON``, the compile definition ``USE_MYMATH`` will
be set. We can then use this compile definition to enable or disable
sections of our source code.

The corresponding changes to the source code are fairly straightforward.
In ``MathFunctions.cxx``, we make ``USE_MYMATH`` control which square root
function is used:

.. raw:: html

  <details><summary>TODO 9: Click to show/hide answer</summary>

.. literalinclude:: Step3/MathFunctions/MathFunctions.cxx
  :caption: TODO 9: MathFunctions/MathFunctions.cxx
  :name: MathFunctions-USE_MYMATH-if
  :language: c++
  :start-after: which square root function should we use?
  :end-before: }

.. raw:: html

  </details>

Next, we need to include ``mysqrt.h`` if ``USE_MYMATH`` is defined.

.. raw:: html

  <details><summary>TODO 10: Click to show/hide answer</summary>

.. literalinclude:: Step3/MathFunctions/MathFunctions.cxx
  :caption: TODO 10: MathFunctions/MathFunctions.cxx
  :name: MathFunctions-USE_MYMATH-if-include
  :language: c++
  :start-after: include <cmath>
  :end-before: namespace mathfunctions

.. raw:: html

  </details>

Finally, we need to include ``cmath`` now that we are using ``std::sqrt``.

.. raw:: html

  <details><summary>TODO 11: Click to show/hide answer</summary>

.. code-block:: c++
  :caption: TODO 11 : MathFunctions/MathFunctions.cxx
  :name: tutorial.cxx-include_cmath

  #include <cmath>

.. raw:: html

  </details>

At this point, if ``USE_MYMATH`` is ``OFF``, ``mysqrt.cxx`` would not be used
but it will still be compiled because the ``MathFunctions`` target has
``mysqrt.cxx`` listed under sources.

There are a few ways to fix this. The first option is to use
:command:`target_sources` to add ``mysqrt.cxx`` from within the ``USE_MYMATH``
block. Another option is to create an additional library within the
``USE_MYMATH`` block which is responsible for compiling ``mysqrt.cxx``. For
the sake of this tutorial, we are going to create an additional library.

First, from within ``USE_MYMATH`` create a library called ``SqrtLibrary``
that has sources ``mysqrt.cxx``.

.. raw:: html

  <details><summary>TODO 12: Click to show/hide answer</summary>

.. literalinclude:: Step3/MathFunctions/CMakeLists.txt
  :caption: TODO 12 : MathFunctions/CMakeLists.txt
  :name: MathFunctions/CMakeLists.txt-add_library-SqrtLibrary
  :language: cmake
  :start-after: # library that just does sqrt
  :end-before: # TODO 7: Link

.. raw:: html

  </details>

Next, we link ``SqrtLibrary`` onto ``MathFunctions`` when ``USE_MYMATH`` is
enabled.

.. raw:: html

  <details><summary>TODO 13: Click to show/hide answer</summary>

.. literalinclude:: Step3/MathFunctions/CMakeLists.txt
  :caption: TODO 13 : MathFunctions/CMakeLists.txt
  :name: MathFunctions/CMakeLists.txt-target_link_libraries-SqrtLibrary
  :language: cmake
  :start-after: to tutorial_compiler_flags
  :end-before: endif()

.. raw:: html

  </details>

Finally, we can remove ``mysqrt.cxx`` from our ``MathFunctions`` library
source list because it will be pulled in when ``SqrtLibrary`` is included.

.. raw:: html

  <details><summary>TODO 14: Click to show/hide answer</summary>

.. literalinclude:: Step3/MathFunctions/CMakeLists.txt
  :caption: TODO 14 : MathFunctions/CMakeLists.txt
  :name: MathFunctions/CMakeLists.txt-remove-mysqrt.cxx-MathFunctions
  :language: cmake
  :end-before: # TODO 1:

.. raw:: html

  </details>

With these changes, the ``mysqrt`` function is now completely optional to
whoever is building and using the ``MathFunctions`` library. Users can toggle
``USE_MYMATH`` to manipulate what library is used in the build.



/P/🚀 guide/tutorial/Adding Usage Requirements for a Library.rst
==============================================================================


Step 3: Adding Usage Requirements for a Library
===============================================

Exercise 1 - Adding Usage Requirements for a Library
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

:ref:`Usage requirements <Target Usage Requirements>` of a target parameters
allow for far better control over a library or executable's link and include
line while also giving more control over the transitive property of targets
inside CMake. The primary commands that
leverage usage requirements are:

* :command:`target_compile_definitions`
* :command:`target_compile_options`
* :command:`target_include_directories`
* :command:`target_link_directories`
* :command:`target_link_options`
* :command:`target_precompile_headers`
* :command:`target_sources`


Goal
----

Add usage requirements for a library.

Helpful Materials
-----------------

* :variable:`CMAKE_CURRENT_SOURCE_DIR`

Files to Edit
-------------

* ``MathFunctions/CMakeLists.txt``
* ``CMakeLists.txt``

Getting Started
---------------

In this exercise, we will refactor our code from
:guide:`tutorial/Adding a Library` to use the modern CMake approach. We will
let our library define its own usage requirements so they are passed
transitively to other targets as necessary. In this case, ``MathFunctions``
will specify any needed include directories itself. Then, the consuming target
``Tutorial`` simply needs to link to ``MathFunctions`` and not worry about
any additional include directories.

The starting source code is provided in the ``Step3`` directory. In this
exercise, complete ``TODO 1`` through ``TODO 3``.

First, add a call to :command:`target_include_directories` in
``MathFunctions/CMakeLists``. Remember that
:variable:`CMAKE_CURRENT_SOURCE_DIR` is the path to the source directory
currently being processed.

Then, update (and simplify!) the call to
:command:`target_include_directories` in the top-level ``CMakeLists.txt``.

Build and Run
-------------

Make a new directory called ``Step3_build``, run the :manual:`cmake
<cmake(1)>` executable or the :manual:`cmake-gui <cmake-gui(1)>` to
configure the project and then build it with your chosen build tool or by
using :option:`cmake --build . <cmake --build>` from the build directory.
Here's a refresher of what that looks like from the command line:

.. code-block:: console

  mkdir Step3_build
  cd Step3_build
  cmake ../Step3
  cmake --build .

Next, use the newly built ``Tutorial`` and verify that it is working as
expected.

Solution
--------

Let's update the code from the previous step to use the modern CMake
approach of usage requirements.

We want to state that anybody linking to ``MathFunctions`` needs to include
the current source directory, while ``MathFunctions`` itself doesn't. This
can be expressed with an ``INTERFACE`` usage requirement. Remember
``INTERFACE`` means things that consumers require but the producer doesn't.

At the end of ``MathFunctions/CMakeLists.txt``, use
:command:`target_include_directories` with the ``INTERFACE`` keyword, as
follows:

.. raw:: html

  <details><summary>TODO 1: Click to show/hide answer</summary>

.. literalinclude:: Step4/MathFunctions/CMakeLists.txt
  :caption: TODO 1: MathFunctions/CMakeLists.txt
  :name: MathFunctions/CMakeLists.txt-target_include_directories-INTERFACE
  :language: cmake
  :start-after: # to find MathFunctions.h
  :end-before: # should we use our own

.. raw:: html

  </details>

Now that we've specified usage requirements for ``MathFunctions`` we can
safely remove our uses of the ``EXTRA_INCLUDES`` variable from the top-level
``CMakeLists.txt``.

Remove this line:

.. raw:: html

  <details><summary>TODO 2: Click to show/hide answer</summary>

.. literalinclude:: Step3/CMakeLists.txt
  :caption: TODO 2: CMakeLists.txt
  :name: CMakeLists.txt-remove-EXTRA_INCLUDES
  :language: cmake
  :start-after: add_subdirectory(MathFunctions)
  :end-before: # add the executable

.. raw:: html

  </details>

And remove ``EXTRA_INCLUDES`` from ``target_include_directories``:

.. raw:: html

  <details><summary>TODO 3: Click to show/hide answer</summary>

.. literalinclude:: Step4/CMakeLists.txt
  :caption: TODO 3: CMakeLists.txt
  :name: CMakeLists.txt-target_include_directories-remove-EXTRA_INCLUDES
  :language: cmake
  :start-after: # so that we will find TutorialConfig.h

.. raw:: html

  </details>

Notice that with this technique, the only thing our executable target does to
use our library is call :command:`target_link_libraries` with the name
of the library target. In larger projects, the classic method of specifying
library dependencies manually becomes very complicated very quickly.

Exercise 2 - Setting the C++ Standard with Interface Libraries
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Now that we have switched our code to a more modern approach, let's demonstrate
a modern technique to set properties to multiple targets.

Let's refactor our existing code to use an ``INTERFACE`` library. We will
use that library in the next step to demonstrate a common use for
:manual:`generator expressions <cmake-generator-expressions(7)>`.

Goal
----

Add an ``INTERFACE`` library target to specify the required C++ standard.

Helpful Resources
-----------------

* :command:`add_library`
* :command:`target_compile_features`
* :command:`target_link_libraries`

Files to Edit
-------------

* ``CMakeLists.txt``
* ``MathFunctions/CMakeLists.txt``

Getting Started
---------------

In this exercise, we will refactor our code to use an ``INTERFACE`` library to
specify the C++ standard.

Start this exercise from what we left at the end of Step3 exercise 1. You will
have to complete ``TODO 4`` through ``TODO 7``.

Start by editing the top level ``CMakeLists.txt`` file. Construct an
``INTERFACE`` library target called ``tutorial_compiler_flags`` and
specify ``cxx_std_11`` as a target compiler feature.

Modify ``CMakeLists.txt`` and ``MathFunctions/CMakeLists.txt`` so that all
targets have a :command:`target_link_libraries` call to
``tutorial_compiler_flags``.

Build and Run
-------------

Since we have our build directory already configured from Exercise 1, simply
rebuild our code by calling the following:

.. code-block:: console

  cd Step3_build
  cmake --build .

Next, use the newly built ``Tutorial`` and verify that it is working as
expected.

Solution
--------

Let's update our code from the previous step to use interface libraries
to set our C++ requirements.

To start, we need to remove the two :command:`set` calls on the variables
:variable:`CMAKE_CXX_STANDARD` and :variable:`CMAKE_CXX_STANDARD_REQUIRED`.
The specific lines to remove are as follows:

.. literalinclude:: Step3/CMakeLists.txt
  :caption: CMakeLists.txt
  :name: CMakeLists.txt-CXX_STANDARD-variable-remove
  :language: cmake
  :start-after: # specify the C++ standard
  :end-before: # configure a header file

Next, we need to create an interface library, ``tutorial_compiler_flags``. And
then use :command:`target_compile_features` to add the compiler feature
``cxx_std_11``.


.. raw:: html

  <details><summary>TODO 4: Click to show/hide answer</summary>

.. literalinclude:: Step4/CMakeLists.txt
  :caption: TODO 4: CMakeLists.txt
  :name: CMakeLists.txt-cxx_std-feature
  :language: cmake
  :start-after: # specify the C++ standard
  :end-before: # TODO 2: Create helper

.. raw:: html

  </details>

Finally, with our interface library set up, we need to link our
executable ``Tutorial``, our ``SqrtLibrary`` library and our ``MathFunctions``
library to our new ``tutorial_compiler_flags`` library. Respectively, the code
will look like this:

.. raw:: html

  <details><summary>TODO 5: Click to show/hide answer</summary>

.. literalinclude:: Step4/CMakeLists.txt
  :caption: TODO 5: CMakeLists.txt
  :name: CMakeLists.txt-target_link_libraries-step4
  :language: cmake
  :start-after: add_executable(Tutorial tutorial.cxx)
  :end-before: # add the binary tree to the search path for include file

.. raw:: html

  </details>

this:

.. raw:: html

  <details><summary>TODO 6: Click to show/hide answer</summary>

.. literalinclude:: Step4/MathFunctions/CMakeLists.txt
  :caption: TODO 6: MathFunctions/CMakeLists.txt
  :name: MathFunctions-CMakeLists.txt-target_link_libraries-step4
  :language: cmake
  :start-after: # link SqrtLibrary to tutorial_compiler_flags
  :end-before: target_link_libraries(MathFunctions

.. raw:: html

  </details>

and this:

.. raw:: html

  <details><summary>TODO 7: Click to show/hide answer</summary>

.. literalinclude:: Step4/MathFunctions/CMakeLists.txt
  :caption: TODO 7: MathFunctions/CMakeLists.txt
  :name: MathFunctions-SqrtLibrary-target_link_libraries-step4
  :language: cmake
  :start-after: # link MathFunctions to tutorial_compiler_flags

.. raw:: html

  </details>


With this, all of our code still requires C++ 11 to build. Notice
though that with this method, it gives us the ability to be specific about
which targets get specific requirements. In addition, we create a single
source of truth in our interface library.



/P/🚀 guide/tutorial/Adding Generator Expressions.rst
===================================================================


Step 4: Adding Generator Expressions
=====================================

:manual:`Generator expressions <cmake-generator-expressions(7)>` are evaluated
during build system generation to produce information specific to each build
configuration.

:manual:`Generator expressions <cmake-generator-expressions(7)>` are allowed in
the context of many target properties, such as :prop_tgt:`LINK_LIBRARIES`,
:prop_tgt:`INCLUDE_DIRECTORIES`, :prop_tgt:`COMPILE_DEFINITIONS` and others.
They may also be used when using commands to populate those properties, such as
:command:`target_link_libraries`, :command:`target_include_directories`,
:command:`target_compile_definitions` and others.

:manual:`Generator expressions <cmake-generator-expressions(7)>`  may be used
to enable conditional linking, conditional definitions used when compiling,
conditional include directories and more. The conditions may be based on the
build configuration, target properties, platform information or any other
queryable information.

There are different types of
:manual:`generator expressions <cmake-generator-expressions(7)>` including
Logical, Informational, and Output expressions.

Logical expressions are used to create conditional output. The basic
expressions are the ``0`` and ``1`` expressions. A ``$<0:...>`` results in the
empty string, and ``$<1:...>`` results in the content of ``...``.  They can also
be nested.

Exercise 1 - Adding Compiler Warning Flags with Generator Expressions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A common usage of
:manual:`generator expressions <cmake-generator-expressions(7)>` is to
conditionally add compiler flags, such as those for language levels or
warnings. A nice pattern is to associate this information to an ``INTERFACE``
target allowing this information to propagate.

Goal
----

Add compiler warning flags when building but not for installed versions.

Helpful Resources
-----------------

* :manual:`cmake-generator-expressions(7)`
* :command:`cmake_minimum_required`
* :command:`set`
* :command:`target_compile_options`

Files to Edit
-------------

* ``CMakeLists.txt``

Getting Started
---------------

Open the file ``Step4/CMakeLists.txt`` and complete ``TODO 1`` through
``TODO 4``.

First, in the top level ``CMakeLists.txt`` file, we need to set the
:command:`cmake_minimum_required` to ``3.15``. In this exercise we are going
to use a generator expression which was introduced in CMake 3.15.

Next we add the desired compiler warning flags that we want for our project.
As warning flags vary based on the compiler, we use the
``COMPILE_LANG_AND_ID`` generator expression to control which flags to apply
given a language and a set of compiler ids.

Build and Run
-------------

Make a new directory called ``Step4_build``, run the :manual:`cmake <cmake(1)>`
executable or the :manual:`cmake-gui <cmake-gui(1)>` to configure the project
and then build it with your chosen build tool or by using ``cmake --build .``
from the build directory.

.. code-block:: console

  mkdir Step4_build
  cd Step4_build
  cmake ../Step4
  cmake --build .

Solution
--------

Update the :command:`cmake_minimum_required` to require at least CMake
version ``3.15``:

.. raw:: html

  <details><summary>TODO 1: Click to show/hide answer</summary>

.. literalinclude:: Step5/CMakeLists.txt
  :caption: TODO 1: CMakeLists.txt
  :name: MathFunctions-CMakeLists.txt-minimum-required-step4
  :language: cmake
  :end-before: # set the project name and version

.. raw:: html

  </details>

Next we determine which compiler our system is currently using to build
since warning flags vary based on the compiler we use. This is done with
the ``COMPILE_LANG_AND_ID`` generator expression. We set the result in the
variables ``gcc_like_cxx`` and ``msvc_cxx`` as follows:

.. raw:: html

  <details><summary>TODO 2: Click to show/hide answer</summary>

.. literalinclude:: Step5/CMakeLists.txt
  :caption: TODO 2: CMakeLists.txt
  :name: CMakeLists.txt-compile_lang_and_id
  :language: cmake
  :start-after: # the BUILD_INTERFACE genex
  :end-before: target_compile_options(tutorial_compiler_flags INTERFACE

.. raw:: html

  </details>

Next we add the desired compiler warning flags that we want for our project.
Using our variables ``gcc_like_cxx`` and ``msvc_cxx``, we can use another
generator expression to apply the respective flags only when the variables are
true. We use :command:`target_compile_options` to apply these flags to our
interface library.

.. raw:: html

  <details><summary>TODO 3: Click to show/hide answer</summary>

.. code-block:: cmake
  :caption: TODO 3: CMakeLists.txt
  :name: CMakeLists.txt-compile_flags

  target_compile_options(tutorial_compiler_flags INTERFACE
    "$<${gcc_like_cxx}:-Wall;-Wextra;-Wshadow;-Wformat=2;-Wunused>"
    "$<${msvc_cxx}:-W3>"
  )

.. raw:: html

  </details>

Lastly, we only want these warning flags to be used during builds. Consumers
of our installed project should not inherit our warning flags. To specify
this, we wrap our flags from TODO 3 in a generator expression using the
``BUILD_INTERFACE`` condition. The resulting full code looks like the following:

.. raw:: html

  <details><summary>TODO 4: Click to show/hide answer</summary>

.. literalinclude:: Step5/CMakeLists.txt
  :caption: TODO 4: CMakeLists.txt
  :name: CMakeLists.txt-target_compile_options-genex
  :language: cmake
  :start-after: set(msvc_cxx "$<COMPILE_LANG_AND_ID:CXX,MSVC>")
  :end-before: # configure a header file to pass some of the CMake settings

.. raw:: html

  </details>



/P/🚀 guide/tutorial/Installing and Testing.rst
=============================================================


Step 5: Installing and Testing
==============================

Exercise 1 - Install Rules
^^^^^^^^^^^^^^^^^^^^^^^^^^

Often, it is not enough to only build an executable, it should also be
installable. With CMake, we can specify install rules using the
:command:`install` command. Supporting local installations for your builds in
CMake is often as simple as specifying an install location and the targets and
files to be installed.

Goal
----

Install the ``Tutorial`` executable and the ``MathFunctions`` library.

Helpful Materials
-----------------

* :command:`install`

Files to Edit
-------------

* ``MathFunctions/CMakeLists.txt``
* ``CMakeLists.txt``

Getting Started
---------------

The starting code is provided in the ``Step5`` directory. In this
exercise, complete ``TODO 1`` through ``TODO 4``.

First, update ``MathFunctions/CMakeLists.txt`` to install the
``MathFunctions`` and ``tutorial_compiler_flags`` libraries to the ``lib``
directory. In that same file, specify the install rules needed to install
``MathFunctions.h`` to the ``include`` directory.

Then, update the top level ``CMakeLists.txt`` to install
the ``Tutorial`` executable to the ``bin`` directory. Lastly, any header files
should be installed to the ``include`` directory. Remember that
``TutorialConfig.h`` is in the :variable:`PROJECT_BINARY_DIR`.

Build and Run
-------------

Make a new directory called ``Step5_build``. Run the
:manual:`cmake <cmake(1)>` executable or the
:manual:`cmake-gui <cmake-gui(1)>` to configure the project and then build it
with your chosen build tool.

Then, run the install step by using the :option:`--install <cmake --install>`
option of the :manual:`cmake  <cmake(1)>` command (introduced in 3.15, older
versions of CMake must use ``make install``) from the command line. This step
will install the appropriate header files, libraries, and executables.
For example:

.. code-block:: console

  cmake --install .

For multi-configuration tools, don't forget to use the
:option:`--config <cmake--build --config>` argument to specify the configuration.

.. code-block:: console

  cmake --install . --config Release

If using an IDE, simply build the ``INSTALL`` target. You can build the same
install target from the command line like the following:

.. code-block:: console

  cmake --build . --target install --config Debug

The CMake variable :variable:`CMAKE_INSTALL_PREFIX` is used to determine the
root of where the files will be installed. If using the :option:`cmake --install`
command, the installation prefix can be overridden via the
:option:`--prefix <cmake--install --prefix>` argument. For example:

.. code-block:: console

  cmake --install . --prefix "/home/myuser/installdir"

Navigate to the install directory and verify that the installed ``Tutorial``
runs.

Solution
--------

The install rules for our project are fairly simple:

* For ``MathFunctions``, we want to install the libraries and header file to
  the ``lib`` and ``include`` directories respectively.

* For the ``Tutorial`` executable, we want to install the executable and
  configured header file to the ``bin`` and ``include`` directories
  respectively.

So to the end of ``MathFunctions/CMakeLists.txt`` we add:

.. raw:: html

  <details><summary>TODO 1: Click to show/hide answer</summary>

.. literalinclude:: Step6/MathFunctions/CMakeLists.txt
  :caption: TODO 1: MathFunctions/CMakeLists.txt
  :name: MathFunctions/CMakeLists.txt-install-TARGETS
  :language: cmake
  :start-after: # install libs
  :end-before: # install include headers

.. raw:: html

  </details>

and

.. raw:: html

  <details><summary>TODO 2: Click to show/hide answer</summary>

.. literalinclude:: Step6/MathFunctions/CMakeLists.txt
  :caption: TODO 2: MathFunctions/CMakeLists.txt
  :name: MathFunctions/CMakeLists.txt-install-headers
  :language: cmake
  :start-after: # install include headers

.. raw:: html

  </details>

The install rules for the ``Tutorial`` executable and configured header file
are similar. To the end of the top-level ``CMakeLists.txt`` we add:

.. raw:: html

  <details><summary>TODO 3,4: Click to show/hide answer</summary>

.. literalinclude:: Step6/CMakeLists.txt
  :caption: CMakeLists.txt
  :name: TODO 3,4: CMakeLists.txt-install-TARGETS
  :language: cmake
  :start-after: # add the install targets
  :end-before: # TODO 1: Replace enable_testing() with include(CTest)

.. raw:: html

  </details>

That is all that is needed to create a basic local
install of the tutorial.

.. _`Tutorial Testing Support`:

Exercise 2 - Testing Support
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CTest offers a way to easily manage tests for your project. Tests can be
added through the :command:`add_test` command. Although it is not
explicitly covered in this tutorial, there is a lot of compatibility
between CTest and other testing frameworks such as :module:`GoogleTest`.

Goal
----

Create unit tests for our executable using CTest.

Helpful Materials
-----------------

* :command:`enable_testing`
* :command:`add_test`
* :command:`function`
* :command:`set_tests_properties`
* :manual:`ctest <ctest(1)>`

Files to Edit
-------------

* ``CMakeLists.txt``

Getting Started
---------------

The starting source code is provided in the ``Step5`` directory. In this
exercise, complete ``TODO 5`` through ``TODO 9``.

First, we need to enable testing. Next, begin adding tests to our project
using :command:`add_test`. We will work through adding 3 simple tests and
then you can add additional testing as you see fit.

Build and Run
-------------

Navigate to the build directory and rebuild the application. Then, run the
:program:`ctest` executable: :option:`ctest -N` and :option:`ctest -VV`. For
multi-config generators (e.g. Visual Studio), the configuration type must be
specified with the :option:`-C \<mode\> <ctest -C>` flag.  For example, to run tests in Debug
mode use ``ctest -C Debug -VV`` from the build directory
(not the Debug subdirectory!). Release mode would be executed from the same
location but with a ``-C Release``. Alternatively, build the ``RUN_TESTS``
target from the IDE.

Solution
--------

Let's test our application. At the end of the top-level ``CMakeLists.txt``
file we first need to enable testing with the
:command:`enable_testing` command.

.. raw:: html

  <details><summary>TODO 5: Click to show/hide answer</summary>

.. literalinclude:: Step6/CMakeLists.txt
  :caption: TODO 5: CMakeLists.txt
  :name: CMakeLists.txt-enable_testing
  :language: cmake
  :start-after: # enable testing
  :end-before: # does the application run

.. raw:: html

  </details>

With testing enabled, we will add a number of basic tests to verify
that the application is working correctly. First, we create a test using
:command:`add_test` which runs the ``Tutorial`` executable with the
parameter 25 passed in. For this test, we are not going to check the
executable's computed answer. This test will verify that
application runs, does not segfault or otherwise crash, and has a zero
return value. This is the basic form of a CTest test.

.. raw:: html

  <details><summary>TODO 6: Click to show/hide answer</summary>

.. literalinclude:: Step6/CMakeLists.txt
  :caption: TODO 6: CMakeLists.txt
  :name: CMakeLists.txt-test-runs
  :language: cmake
  :start-after: # does the application run
  :end-before: # does the usage message work

.. raw:: html

  </details>

Next, let's use the :prop_test:`PASS_REGULAR_EXPRESSION` test property to
verify that the output of the test contains certain strings. In this case,
verifying that the usage message is printed when an incorrect number of
arguments are provided.

.. raw:: html

  <details><summary>TODO 7: Click to show/hide answer</summary>

.. literalinclude:: Step6/CMakeLists.txt
  :caption: TODO 7: CMakeLists.txt
  :name: CMakeLists.txt-test-usage
  :language: cmake
  :start-after: # does the usage message work?
  :end-before: # define a function to simplify adding tests

.. raw:: html

  </details>

The next test we will add verifies the computed value is truly the
square root.

.. raw:: html

  <details><summary>TODO 8: Click to show/hide answer</summary>

.. code-block:: cmake
  :caption: TODO 8: CMakeLists.txt
  :name: CMakeLists.txt-test-standard

  add_test(NAME StandardUse COMMAND Tutorial 4)
  set_tests_properties(StandardUse
    PROPERTIES PASS_REGULAR_EXPRESSION "4 is 2"
    )

.. raw:: html

  </details>

This one test is not enough to give us confidence that it will
work for all values passed in. We should add more tests to verify this.
To easily add more tests, we make a function called ``do_test`` that runs the
application and verifies that the computed square root is correct for
given input. For each invocation of ``do_test``, another test is added to
the project with a name, input, and expected results based on the passed
arguments.

.. raw:: html

  <details><summary>TODO 9: Click to show/hide answer</summary>

.. literalinclude:: Step6/CMakeLists.txt
  :caption: TODO 9: CMakeLists.txt
  :name: CMakeLists.txt-generalized-tests
  :language: cmake
  :start-after: # define a function to simplify adding tests

.. raw:: html

  </details>



/P/🚀 guide/tutorial/Adding Support for a Testing Dashboard.rst
=============================================================================


Step 6: Adding Support for a Testing Dashboard
==============================================

Adding support for submitting our test results to a dashboard is simple. We
already defined a number of tests for our project in
:ref:`Testing Support <Tutorial Testing Support>`. Now we just have to run
those tests and submit them to CDash.


Exercise 1 - Send Results to a Testing Dashboard
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Goal
----

Display our CTest results with CDash.

Helpful Resources
-----------------

* :manual:`ctest(1)`
* :command:`include`
* :module:`CTest`

Files to Edit
-------------

* ``CMakeLists.txt``

Getting Started
---------------

For this exercise, complete ``TODO 1`` in the top-level ``CMakeLists.txt`` by
including the :module:`CTest` module. This will enable testing with CTest as
well as dashboard submissions to CDash, so we can safely remove the call to
:command:`enable_testing`.

We will also need to acquire a ``CTestConfig.cmake`` file to be placed in the
top-level directory. When run, the :manual:`ctest <ctest(1)>` executable will
read this file to gather information about the testing dashboard. It contains:

* The project name

* The project "Nightly" start time

  *  The time when a 24 hour "day" starts for this project.

* The URL of the CDash instance where the submission's generated documents
  will be sent

For this tutorial, a public dashboard server is used and its corresponding
``CTestConfig.cmake`` file is provided for you in this step's root directory.
In practice, this file would be downloaded from a project's ``Settings`` page
on the CDash instance intended to host the test results. Once downloaded from
CDash, the file should not be modified locally.

.. literalinclude:: Step7/CTestConfig.cmake
  :caption: CTestConfig.cmake
  :name: CTestConfig.cmake
  :language: cmake


Build and Run
-------------

Note that as part of the CDash submission some information about your
development system (e.g. site name or full pathnames) may displayed publicly.

To create a simple test dashboard, run the :manual:`cmake <cmake(1)>`
executable or the :manual:`cmake-gui <cmake-gui(1)>` to configure the project
but do not build it yet. Instead, navigate to the build directory and run:

.. code-block:: console

  ctest [-VV] -D Experimental

Remember, for multi-config generators (e.g. Visual Studio), the configuration
type must be specified:

.. code-block:: console

  ctest [-VV] -C Debug -D Experimental

Or, from an IDE, build the ``Experimental`` target.

The :manual:`ctest <ctest(1)>` executable will build the project, run any
tests, and submit the results to Kitware's public dashboard:
https://my.cdash.org/index.php?project=CMakeTutorial.

Solution
--------

The only CMake code changed needed in this step was to enable dashboard
submissions to CDash by including the :module:`CTest` module in our top-level
``CMakeLists.txt``:

.. raw:: html

  <details><summary>TODO 1: Click to show/hide answer</summary>

.. literalinclude:: Step7/CMakeLists.txt
  :caption: TODO 1: CMakeLists.txt
  :name: CMakeLists.txt-include-CTest
  :language: cmake
  :start-after: # enable testing
  :end-before: # does the application run

.. raw:: html

  </details>



/P/🚀 guide/tutorial/Adding System Introspection.rst
==================================================================


Step 7: Adding System Introspection
===================================

Let us consider adding some code to our project that depends on features the
target platform may not have. For this example, we will add some code that
depends on whether or not the target platform has the ``log`` and ``exp``
functions. Of course almost every platform has these functions but for this
tutorial assume that they are not common.

Exercise 1 - Assessing Dependency Availability
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Goal
----

Change implementation based on available system dependencies.

Helpful Resources
-----------------

* :module:`CheckCXXSourceCompiles`
* :command:`target_compile_definitions`

Files to Edit
-------------

* ``MathFunctions/CMakeLists.txt``
* ``MathFunctions/mysqrt.cxx``

Getting Started
---------------

The starting source code is provided in the ``Step7`` directory. In this
exercise, complete ``TODO 1`` through ``TODO 5``.

Start by editing ``MathFunctions/CMakeLists.txt``. Include the
:module:`CheckCXXSourceCompiles` module. Then, use
``check_cxx_source_compiles`` to determine whether ``log`` and ``exp`` are
available from ``cmath``. If they are available, use
:command:`target_compile_definitions` to specify ``HAVE_LOG`` and ``HAVE_EXP``
as compile definitions.

In the ``MathFunctions/mysqrt.cxx``, include ``cmath``. Then, if the system has
``log`` and ``exp``, use them to compute the square root.

Build and Run
-------------

Make a new directory called ``Step7_build``. Run the
:manual:`cmake  <cmake(1)>` executable or the
:manual:`cmake-gui <cmake-gui(1)>` to configure the project and then build it
with your chosen build tool and run the ``Tutorial`` executable.

This can look like the following:

.. code-block:: console

  mkdir Step7_build
  cd Step7_build
  cmake ../Step7
  cmake --build .

Which function gives better results now, ``sqrt`` or ``mysqrt``?

Solution
--------

In this exercise we will use functions from the
:module:`CheckCXXSourceCompiles` module so first we must include it in
``MathFunctions/CMakeLists.txt``.

.. raw:: html

  <details><summary>TODO 1: Click to show/hide answer</summary>

.. literalinclude:: Step8/MathFunctions/CMakeLists.txt
  :caption: TODO 1: MathFunctions/CMakeLists.txt
  :name: MathFunctions/CMakeLists.txt-include-check_cxx_source_compiles
  :language: cmake
  :start-after: # does this system provide the log and exp functions?
  :end-before: check_cxx_source_compiles

.. raw:: html

  </details>

Then test for the availability of
``log`` and ``exp`` using ``check_cxx_compiles_source``. This function
lets us try compiling simple code with the required dependency prior to
the true source code compilation. The resulting variables ``HAVE_LOG``
and ``HAVE_EXP`` represent whether those dependencies are available.

.. raw:: html

  <details><summary>TODO 2: Click to show/hide answer</summary>

.. literalinclude:: Step8/MathFunctions/CMakeLists.txt
  :caption: TODO 2: MathFunctions/CMakeLists.txt
  :name: MathFunctions/CMakeLists.txt-check_cxx_source_compiles
  :language: cmake
  :start-after: include(CheckCXXSourceCompiles)
  :end-before: # add compile definitions

.. raw:: html

  </details>

Next, we need to pass these CMake variables to our source code. This way,
our source code can tell what resources are available. If both ``log`` and
``exp`` are available, use :command:`target_compile_definitions` to specify
``HAVE_LOG`` and ``HAVE_EXP`` as ``PRIVATE`` compile definitions.

.. raw:: html

  <details><summary>TODO 3: Click to show/hide answer</summary>

.. literalinclude:: Step8/MathFunctions/CMakeLists.txt
  :caption: TODO 3: MathFunctions/CMakeLists.txt
  :name: MathFunctions/CMakeLists.txt-target_compile_definitions
  :language: cmake
  :start-after: # add compile definitions
  :end-before: # state

.. raw:: html

  </details>

Since we may be using ``log`` and ``exp``, we need to modify
``mysqrt.cxx`` to include ``cmath``.

.. raw:: html

  <details><summary>TODO 4: Click to show/hide answer</summary>

.. literalinclude:: Step8/MathFunctions/mysqrt.cxx
  :caption: TODO 4: MathFunctions/mysqrt.cxx
  :name: MathFunctions/mysqrt.cxx-include-cmath
  :language: c++
  :start-after: #include "mysqrt.h"
  :end-before: include <iostream>

.. raw:: html

  </details>

If ``log`` and ``exp`` are available on the system, then use them to
compute the square root in the ``mysqrt`` function. The ``mysqrt`` function in
``MathFunctions/mysqrt.cxx`` will look as follows:

.. raw:: html

  <details><summary>TODO 5: Click to show/hide answer</summary>

.. literalinclude:: Step8/MathFunctions/mysqrt.cxx
  :caption: TODO 5: MathFunctions/mysqrt.cxx
  :name: MathFunctions/mysqrt.cxx-ifdef
  :language: c++
  :start-after: // if we have both log and exp then use them
  :end-before: return result;

.. raw:: html

  </details>



/P/🚀 guide/tutorial/Adding a Custom Command and Generated File.rst
=================================================================================


Step 8: Adding a Custom Command and Generated File
==================================================

Suppose, for the purpose of this tutorial, we decide that we never want to use
the platform ``log`` and ``exp`` functions and instead would like to
generate a table of precomputed values to use in the ``mysqrt`` function.
In this section, we will create the table as part of the build process,
and then compile that table into our application.

First, let's remove the check for the ``log`` and ``exp`` functions in
``MathFunctions/CMakeLists.txt``. Then remove the check for ``HAVE_LOG`` and
``HAVE_EXP`` from ``mysqrt.cxx``. At the same time, we can remove
:code:`#include <cmath>`.

In the ``MathFunctions`` subdirectory, a new source file named
``MakeTable.cxx`` has been provided to generate the table.

After reviewing the file, we can see that the table is produced as valid C++
code and that the output filename is passed in as an argument.

The next step is to create ``MathFunctions/MakeTable.cmake``. Then, add the
appropriate commands to the file to build the ``MakeTable`` executable and
then run it as part of the build process. A few commands are needed to
accomplish this.

First, we add an executable for ``MakeTable``.

.. literalinclude:: Step9/MathFunctions/MakeTable.cmake
  :caption: MathFunctions/MakeTable.cmake
  :name: MathFunctions/MakeTable.cmake-add_executable-MakeTable
  :language: cmake
  :start-after: # first we add the executable that generates the table
  :end-before: target_link_libraries

After creating the executable, we add the ``tutorial_compiler_flags`` to our
executable using :command:`target_link_libraries`.

.. literalinclude:: Step9/MathFunctions/MakeTable.cmake
  :caption: MathFunctions/MakeTable.cmake
  :name: MathFunctions/MakeTable.cmake-link-tutorial-compiler-flags
  :language: cmake
  :start-after: add_executable
  :end-before: # add the command to generate

Then we add a custom command that specifies how to produce ``Table.h``
by running MakeTable.

.. literalinclude:: Step9/MathFunctions/MakeTable.cmake
  :caption: MathFunctions/MakeTable.cmake
  :name: MathFunctions/MakeTable.cmake-add_custom_command-Table.h
  :language: cmake
  :start-after: # add the command to generate the source code

Next we have to let CMake know that ``mysqrt.cxx`` depends on the generated
file ``Table.h``. This is done by adding the generated ``Table.h`` to the list
of sources for the library ``SqrtLibrary``.

.. literalinclude:: Step9/MathFunctions/CMakeLists.txt
  :caption: MathFunctions/CMakeLists.txt
  :name: MathFunctions/CMakeLists.txt-add_library-Table.h
  :language: cmake
  :start-after:   # library that just does sqrt
  :end-before: # state that we depend on

We also have to add the current binary directory to the list of include
directories so that ``Table.h`` can be found and included by ``mysqrt.cxx``.

.. literalinclude:: Step9/MathFunctions/CMakeLists.txt
  :caption: MathFunctions/CMakeLists.txt
  :name: MathFunctions/CMakeLists.txt-target_include_directories-Table.h
  :language: cmake
  :start-after: # state that we depend on our bin
  :end-before: target_link_libraries

As the last step, we need to include
``MakeTable.cmake`` at the top of the ``MathFunctions/CMakeLists.txt``.

.. literalinclude:: Step9/MathFunctions/CMakeLists.txt
  :caption: MathFunctions/CMakeLists.txt
  :name: MathFunctions/CMakeLists.txt-include-MakeTable.cmake
  :language: cmake
  :start-after: # generate Table.h
  :end-before: # library that just does sqrt

Now let's use the generated table. First, modify ``mysqrt.cxx`` to include
``Table.h``. Next, we can rewrite the ``mysqrt`` function to use the table:

.. literalinclude:: Step9/MathFunctions/mysqrt.cxx
  :caption: MathFunctions/mysqrt.cxx
  :name: MathFunctions/mysqrt.cxx
  :language: c++
  :start-after: // a hack square root calculation using simple operations

Run the :manual:`cmake  <cmake(1)>` executable or the
:manual:`cmake-gui <cmake-gui(1)>` to configure the project and then build it
with your chosen build tool.

When this project is built it will first build the ``MakeTable`` executable.
It will then run ``MakeTable`` to produce ``Table.h``. Finally, it will
compile ``mysqrt.cxx`` which includes ``Table.h`` to produce the
``MathFunctions`` library.

Run the Tutorial executable and verify that it is using the table.



/P/🚀 guide/tutorial/Packaging an Installer.rst
=============================================================


Step 9: Packaging an Installer
==============================

Next suppose that we want to distribute our project to other people so that
they can use it. We want to provide both binary and source distributions on a
variety of platforms. This is a little different from the install we did
previously in :guide:`tutorial/Installing and Testing`, where we were
installing the binaries that we had built from the source code. In this
example we will be building installation packages that support binary
installations and package management features. To accomplish this we will use
CPack to create platform specific installers. Specifically we need to add a
few lines to the bottom of our top-level ``CMakeLists.txt`` file.

.. literalinclude:: Step10/CMakeLists.txt
  :caption: CMakeLists.txt
  :name: CMakeLists.txt-include-CPack
  :language: cmake
  :start-after: # setup installer

That is all there is to it. We start by including
:module:`InstallRequiredSystemLibraries`. This module will include any runtime
libraries that are needed by the project for the current platform. Next we set
some CPack variables to where we have stored the license and version
information for this project. The version information was set earlier in this
tutorial and the ``License.txt`` has been included in the top-level source
directory for this step.  The :variable:`CPACK_SOURCE_GENERATOR` variable
selects a file format for the source package.

Finally we include the :module:`CPack module <CPack>` which will use these
variables and some other properties of the current system to setup an
installer.

The next step is to build the project in the usual manner and then run the
:manual:`cpack <cpack(1)>` executable. To build a binary distribution, from the
binary directory run:

.. code-block:: console

  cpack

To specify the generator, use the :option:`-G <cpack -G>` option. For multi-config builds,
use :option:`-C <cpack -C>` to specify the configuration. For example:

.. code-block:: console

  cpack -G ZIP -C Debug

For a list of available generators, see :manual:`cpack-generators(7)` or call
:option:`cpack --help`. An :cpack_gen:`archive generator <CPack Archive Generator>`
like ZIP creates a compressed archive of all *installed* files.

To create an archive of the *full* source tree you would type:

.. code-block:: console

  cpack --config CPackSourceConfig.cmake

Alternatively, run ``make package`` or right click the ``Package`` target and
``Build Project`` from an IDE.

Run the installer found in the binary directory. Then run the installed
executable and verify that it works.



/P/🚀 guide/tutorial/Selecting Static or Shared Libraries.rst
===========================================================================


Step 10: Selecting Static or Shared Libraries
=============================================

In this section we will show how the :variable:`BUILD_SHARED_LIBS` variable can
be used to control the default behavior of :command:`add_library`,
and allow control over how libraries without an explicit type (``STATIC``,
``SHARED``, ``MODULE`` or ``OBJECT``) are built.

To accomplish this we need to add :variable:`BUILD_SHARED_LIBS` to the
top-level ``CMakeLists.txt``. We use the :command:`option` command as it allows
users to optionally select if the value should be ``ON`` or ``OFF``.

.. literalinclude:: Step11/CMakeLists.txt
  :caption: CMakeLists.txt
  :name: CMakeLists.txt-option-BUILD_SHARED_LIBS
  :language: cmake
  :start-after: set(CMAKE_RUNTIME_OUTPUT_DIRECTORY
  :end-before: # configure a header file to pass the version number only

Next, we need to specify output directories for our static and shared
libraries.

.. literalinclude:: Step11/CMakeLists.txt
  :caption: CMakeLists.txt
  :name: CMakeLists.txt-cmake-output-directories
  :language: cmake
  :start-after: # we don't need to tinker with the path to run the executable
  :end-before: # configure a header file to pass the version number only

Finally, update ``MathFunctions/MathFunctions.h`` to use dll export defines:

.. literalinclude:: Step11/MathFunctions/MathFunctions.h
  :caption: MathFunctions/MathFunctions.h
  :name: MathFunctions/MathFunctions.h
  :language: c++

At this point, if you build everything, you may notice that linking fails
as we are combining a static library without position independent code with a
library that has position independent code. The solution to this is to
explicitly set the :prop_tgt:`POSITION_INDEPENDENT_CODE` target property of
SqrtLibrary to be ``True`` when building shared libraries.

.. literalinclude:: Step11/MathFunctions/CMakeLists.txt
  :caption: MathFunctions/CMakeLists.txt
  :name: MathFunctions/CMakeLists.txt-POSITION_INDEPENDENT_CODE
  :language: cmake
  :start-at: # state that SqrtLibrary need PIC when the default is shared libraries
  :end-at:  )

Define ``EXPORTING_MYMATH`` stating we are using ``declspec(dllexport)`` when
building on Windows.

.. literalinclude:: Step11/MathFunctions/CMakeLists.txt
  :caption: MathFunctions/CMakeLists.txt
  :name: MathFunctions/CMakeLists.txt-dll-export
  :language: cmake
  :start-at: # define the symbol stating we are using the declspec(dllexport) when
  :end-at: target_compile_definitions(MathFunctions PRIVATE "EXPORTING_MYMATH")

**Exercise**: We modified ``MathFunctions.h`` to use dll export defines.
Using CMake documentation can you find a helper module to simplify this?



/P/🚀 guide/tutorial/Adding Export Configuration.rst
==================================================================


Step 11: Adding Export Configuration
====================================

During :guide:`tutorial/Installing and Testing` of the tutorial we added the
ability for CMake to install the library and headers of the project. During
:guide:`tutorial/Packaging an Installer` we added the ability to package up
this information so it could be distributed to other people.

The next step is to add the necessary information so that other CMake projects
can use our project, be it from a build directory, a local install or when
packaged.

The first step is to update our :command:`install(TARGETS)` commands to not
only specify a ``DESTINATION`` but also an ``EXPORT``. The ``EXPORT`` keyword
generates a CMake file containing code to import all targets listed in the
install command from the installation tree. So let's go ahead and explicitly
``EXPORT`` the ``MathFunctions`` library by updating the ``install`` command
in ``MathFunctions/CMakeLists.txt`` to look like:

.. literalinclude:: Complete/MathFunctions/CMakeLists.txt
  :caption: MathFunctions/CMakeLists.txt
  :name: MathFunctions/CMakeLists.txt-install-TARGETS-EXPORT
  :language: cmake
  :start-after: # install libs

Now that we have ``MathFunctions`` being exported, we also need to explicitly
install the generated ``MathFunctionsTargets.cmake`` file. This is done by
adding the following to the bottom of the top-level ``CMakeLists.txt``:

.. literalinclude:: Complete/CMakeLists.txt
  :caption: CMakeLists.txt
  :name: CMakeLists.txt-install-EXPORT
  :language: cmake
  :start-after: # install the configuration targets
  :end-before: include(CMakePackageConfigHelpers)

At this point you should try and run CMake. If everything is setup properly
you will see that CMake will generate an error that looks like:

.. code-block:: console

  Target "MathFunctions" INTERFACE_INCLUDE_DIRECTORIES property contains
  path:

    "/Users/robert/Documents/CMakeClass/Tutorial/Step11/MathFunctions"

  which is prefixed in the source directory.

What CMake is trying to say is that during generating the export information
it will export a path that is intrinsically tied to the current machine and
will not be valid on other machines. The solution to this is to update the
``MathFunctions`` :command:`target_include_directories` to understand that it
needs different ``INTERFACE`` locations when being used from within the build
directory and from an install / package. This means converting the
:command:`target_include_directories` call for ``MathFunctions`` to look like:

.. literalinclude:: Step12/MathFunctions/CMakeLists.txt
  :caption: MathFunctions/CMakeLists.txt
  :name: MathFunctions/CMakeLists.txt-target_include_directories
  :language: cmake
  :start-after: # to find MathFunctions.h, while we don't.
  :end-before: # should we use our own math functions

Once this has been updated, we can re-run CMake and verify that it doesn't
warn anymore.

At this point, we have CMake properly packaging the target information that is
required but we will still need to generate a ``MathFunctionsConfig.cmake`` so
that the CMake :command:`find_package` command can find our project. So let's go
ahead and add a new file to the top-level of the project called
``Config.cmake.in`` with the following contents:

.. literalinclude:: Step12/Config.cmake.in
  :caption: Config.cmake.in
  :name: Config.cmake.in

Then, to properly configure and install that file, add the following to the
bottom of the top-level ``CMakeLists.txt``:

.. literalinclude:: Step12/CMakeLists.txt
  :caption: CMakeLists.txt
  :name: CMakeLists.txt-install-Config.cmake
  :language: cmake
  :start-after: # install the configuration targets
  :end-before: # generate the config file


Next, we execute the :command:`configure_package_config_file`.  This command
will configure a provided file but with a few specific differences from the
standard :command:`configure_file` way.
To properly utilize this function, the input file should have a single line
with the text ``@PACKAGE_INIT@`` in addition to the content that is desired.
That variable will be replaced with a block of code which turns set values into
relative paths.  These values which are new can be referenced by the same name
but prepended with a ``PACKAGE_`` prefix.

.. literalinclude:: Step12/CMakeLists.txt
  :caption: CMakeLists.txt
  :name: CMakeLists.txt-configure-package-config.cmake
  :language: cmake
  :start-after: # install the configuration targets
  :end-before: # generate the version file

The :command:`write_basic_package_version_file` is next.  This command writes
a file which is used by :command:`find_package`, documenting the version and
compatibility of the desired package.  Here, we use the ``Tutorial_VERSION_*``
variables and say that it is compatible with ``AnyNewerVersion``, which
denotes that this version or any higher one are compatible with the requested
version.

.. literalinclude:: Step12/CMakeLists.txt
  :caption: CMakeLists.txt
  :name: CMakeLists.txt-basic-version-file.cmake
  :language: cmake
  :start-after: # generate the version file
  :end-before: # install the generated configuration files

Finally, set both generated files to be installed:

.. literalinclude:: Step12/CMakeLists.txt
  :caption: CMakeLists.txt
  :name: CMakeLists.txt-install-configured-files.cmake
  :language: cmake
  :start-after: # install the generated configuration files
  :end-before: # generate the export

At this point, we have generated a relocatable CMake Configuration for our
project that can be used after the project has been installed or packaged. If
we want our project to also be used from a build directory we only have to add
the following to the bottom of the top level ``CMakeLists.txt``:

.. literalinclude:: Step12/CMakeLists.txt
  :caption: CMakeLists.txt
  :name: CMakeLists.txt-export
  :language: cmake
  :start-after: # needs to be after the install(TARGETS) command

With this export call we now generate a ``MathFunctionsTargets.cmake``, allowing the
configured ``MathFunctionsConfig.cmake`` in the build directory to be used by
other projects, without needing it to be installed.



/P/🚀 guide/tutorial/Packaging Debug and Release.rst
==================================================================


Step 12: Packaging Debug and Release
====================================

**Note:** This example is valid for single-configuration generators and will
not work for multi-configuration generators (e.g. Visual Studio).

By default, CMake's model is that a build directory only contains a single
configuration, be it Debug, Release, MinSizeRel, or RelWithDebInfo. It is
possible, however, to setup CPack to bundle multiple build directories and
construct a package that contains multiple configurations of the same project.

First, we want to ensure that the debug and release builds use different names
for the libraries that will be installed. Let's use `d` as the
postfix for the debug libraries.

Set :variable:`CMAKE_DEBUG_POSTFIX` near the beginning of the top-level
``CMakeLists.txt`` file:

.. literalinclude:: Complete/CMakeLists.txt
  :caption: CMakeLists.txt
  :name: CMakeLists.txt-CMAKE_DEBUG_POSTFIX-variable
  :language: cmake
  :start-after: project(Tutorial VERSION 1.0)
  :end-before: target_compile_features(tutorial_compiler_flags

And the :prop_tgt:`DEBUG_POSTFIX` property on the tutorial executable:

.. literalinclude:: Complete/CMakeLists.txt
  :caption: CMakeLists.txt
  :name: CMakeLists.txt-DEBUG_POSTFIX-property
  :language: cmake
  :start-after: # add the executable
  :end-before: # add the binary tree to the search path for include files

Let's also add version numbering to the ``MathFunctions`` library. In
``MathFunctions/CMakeLists.txt``, set the :prop_tgt:`VERSION` and
:prop_tgt:`SOVERSION` properties:

.. literalinclude:: Complete/MathFunctions/CMakeLists.txt
  :caption: MathFunctions/CMakeLists.txt
  :name: MathFunctions/CMakeLists.txt-VERSION-properties
  :language: cmake
  :start-after: # setup the version numbering
  :end-before: # install libs

From the ``Step12`` directory, create ``debug`` and ``release``
subdirectories. The layout will look like:

.. code-block:: none

  - Step12
     - debug
     - release

Now we need to setup debug and release builds. We can use
:variable:`CMAKE_BUILD_TYPE` to set the configuration type:

.. code-block:: console

  cd debug
  cmake -DCMAKE_BUILD_TYPE=Debug ..
  cmake --build .
  cd ../release
  cmake -DCMAKE_BUILD_TYPE=Release ..
  cmake --build .

Now that both the debug and release builds are complete, we can use a custom
configuration file to package both builds into a single release. In the
``Step12`` directory, create a file called ``MultiCPackConfig.cmake``. In this
file, first include the default configuration file that was created by the
:manual:`cmake  <cmake(1)>` executable.

Next, use the ``CPACK_INSTALL_CMAKE_PROJECTS`` variable to specify which
projects to install. In this case, we want to install both debug and release.

.. literalinclude:: Complete/MultiCPackConfig.cmake
  :caption: MultiCPackConfig.cmake
  :name: MultiCPackConfig.cmake
  :language: cmake

From the ``Step12`` directory, run :manual:`cpack <cpack(1)>` specifying our
custom configuration file with the ``config`` option:

.. code-block:: console

  cpack --config MultiCPackConfig.cmake



/P/🚀 guide/user-interaction/index.rst
====================================================


User Interaction Guide
**********************

Introduction
============

Where a software package supplies a CMake-based buildsystem
with the source of their software, the consumer of the
software is required to run a CMake user interaction tool
in order to build it.

Well-behaved CMake-based buildsystems do not create any
output in the source directory, so typically, the user
performs an out-of-source build and performs the build
there.  First, CMake must be instructed to generate a
suitable buildsystem, then the user invokes a build tool
to process that generated buildsystem.  The generated
buildsystem is specific to the machine used to generate
it and is not redistributable.  Each consumer of a provided
source software package is required to use CMake to
generate a buildsystem specific to their system.

Generated buildsystems should generally be treated as
read-only. The CMake files as a primary artifact should
completely specify the buildsystem and there should be no
reason to populate properties manually in an IDE for
example after generating the buildsystem.  CMake will
periodically rewrite the generated buildsystem, so
modifications by users will be overwritten.

The features and user interfaces described in this manual
are available for all CMake-based build systems by virtue
of providing CMake files.

The CMake tooling may report errors to the user when
processing provided CMake files, such as reporting that
the compiler is not supported, or the compiler does not
support a required compile option, or a dependency can
not be found.  These errors must be resolved by the user
by choosing a different compiler,
:guide:`installing dependencies <Using Dependencies Guide>`,
or instructing CMake where to find them, etc.

Command Line cmake tool
-----------------------

A simple but typical use of :manual:`cmake(1)` with a fresh
copy of software source code is to create a build directory
and invoke cmake there:

.. code-block:: console

  $ cd some_software-1.4.2
  $ mkdir build
  $ cd build
  $ cmake .. -DCMAKE_INSTALL_PREFIX=/opt/the/prefix
  $ cmake --build .
  $ cmake --build . --target install

It is recommended to build in a separate directory to the
source because that keeps the source directory pristine,
allows for building a single source with multiple
toolchains, and allows easy clearing of build artifacts by
simply deleting the build directory.

The CMake tooling may report warnings which are intended
for the provider of the software, not intended for the
consumer of the software.  Such warnings end with "This
warning is for project developers".  Users may disable
such warnings by passing the :option:`-Wno-dev <cmake -Wno-dev>`
flag to :manual:`cmake(1)`.

cmake-gui tool
--------------

Users more accustomed to GUI interfaces may use the
:manual:`cmake-gui(1)` tool to invoke CMake and generate
a buildsystem.

The source and binary directories must first be
populated.  It is always advised to use different
directories for the source and the build.

.. image:: GUI-Source-Binary.png
   :alt: Choosing source and binary directories

Generating a Buildsystem
========================

There are several user interface tools which may be used
to generate a buildsystem from CMake files.  The
:manual:`ccmake(1)` and :manual:`cmake-gui(1)` tools guide
the user through setting the various necessary options.
The :manual:`cmake(1)` tool can be invoked to specify
options on the command line.  This manual describes options
which may be set using any of the user interface tools,
though the mode of setting an option is different for each
tool.

Command line environment
------------------------

When invoking :manual:`cmake(1)` with a command line
buildsystem such as ``Makefiles`` or ``Ninja``, it is
necessary to use the correct build environment to
ensure that build tools are available. CMake must be
able to find the appropriate
:variable:`build tool <CMAKE_MAKE_PROGRAM>`,
compiler, linker and other tools as needed.

On Linux systems, the appropriate tools are often
provided in system-wide locations and may be readily
installed through the system package manager. Other
toolchains provided by the user or installed in
non-default locations can also be used.

When cross-compiling, some platforms may require
environment variables to be set or may provide
scripts to set the environment.

Visual Studio ships multiple command prompts and
``vcvarsall.bat`` scripts for setting up the
correct environments for command line buildsystems. While
not strictly necessary to use a corresponding
command line environment when using a Visual Studio
generator, doing so has no disadvantages.

When using Xcode, there can be more than one Xcode
version installed.  Which one to use can be selected
in a number of different ways, but the most common
methods are:

* Setting the default version in the preferences
  of the Xcode IDE.
* Setting the default version via the ``xcode-select``
  command line tool.
* Overriding the default version by setting the
  ``DEVELOPER_DIR`` environment variable when running
  CMake and the build tool.

For convenience, :manual:`cmake-gui(1)` provides an
environment variable editor.

Command line ``-G`` option
--------------------------

CMake chooses a generator by default based on the
platform.  Usually, the default generator is sufficient
to allow the user to proceed to build the software.

The user may override the default generator with
the :option:`-G <cmake -G>` option:

.. code-block:: console

  $ cmake .. -G Ninja

The output of :option:`cmake --help` includes a list of
:manual:`generators <cmake-generators(7)>` available
for the user to choose from.  Note that generator
names are case sensitive.

On Unix-like systems (including Mac OS X), the
:generator:`Unix Makefiles` generator is used by
default.  A variant of that generator can also be used
on Windows in various environments, such as the
:generator:`NMake Makefiles` and
:generator:`MinGW Makefiles` generator.  These generators
generate a ``Makefile`` variant which can be executed
with ``make``, ``gmake``, ``nmake`` or similar tools.
See the individual generator documentation for more
information on targeted environments and tools.

The :generator:`Ninja` generator is available on all
major platforms. ``ninja`` is a build tool similar
in use-cases to ``make``, but with a focus on
performance and efficiency.

On Windows, :manual:`cmake(1)` can be used to generate
solutions for the Visual Studio IDE.  Visual Studio
versions may be specified by the product name of the
IDE, which includes a four-digit year.  Aliases are
provided for other means by which Visual Studio
versions are sometimes referred to, such as two
digits which correspond to the product version of the
VisualC++ compiler, or a combination of the two:

.. code-block:: console

  $ cmake .. -G "Visual Studio 2019"
  $ cmake .. -G "Visual Studio 16"
  $ cmake .. -G "Visual Studio 16 2019"

Visual Studio generators can target different architectures.
One can specify the target architecture using the
:option:`-A <cmake -A>` option:

.. code-block:: console

  cmake .. -G "Visual Studio 2019" -A x64
  cmake .. -G "Visual Studio 16" -A ARM
  cmake .. -G "Visual Studio 16 2019" -A ARM64

On Apple, the :generator:`Xcode` generator may be used to
generate project files for the Xcode IDE.

Some IDEs such as KDevelop4, QtCreator and CLion have
native support for CMake-based buildsystems.  Those IDEs
provide user interface for selecting an underlying
generator to use, typically a choice between a ``Makefile``
or a ``Ninja`` based generator.

Note that it is not possible to change the generator
with :option:`-G <cmake -G>` after the first invocation of CMake.
To change the generator, the build directory must be
deleted and the build must be started from scratch.

When generating Visual Studio project and solutions
files several other options are available to use when
initially running :manual:`cmake(1)`.

The Visual Studio toolset can be specified with the
:option:`cmake -T` option:

.. code-block:: console

    $ # Build with the clang-cl toolset
    $ cmake.exe .. -G "Visual Studio 16 2019" -A x64 -T ClangCL
    $ # Build targeting Windows XP
    $ cmake.exe .. -G "Visual Studio 16 2019" -A x64 -T v120_xp

Whereas the :option:`-A <cmake -A>` option specifies the _target_
architecture, the :option:`-T <cmake -T>` option can be used to specify
details of the toolchain used.  For example, ``-Thost=x64``
can be given to select the 64-bit version of the host
tools.  The following demonstrates how to use 64-bit
tools and also build for a 64-bit target architecture:

.. code-block:: console

    $ cmake .. -G "Visual Studio 16 2019" -A x64 -Thost=x64

Choosing a generator in cmake-gui
---------------------------------

The "Configure" button triggers a new dialog to
select the CMake generator to use.

.. image:: GUI-Configure-Dialog.png
   :alt: Configuring a generator

All generators available on the command line are also
available in :manual:`cmake-gui(1)`.

.. image:: GUI-Choose-Generator.png
   :alt: Choosing a generator

When choosing a Visual Studio generator, further options
are available to set an architecture to generate for.

.. image:: VS-Choose-Arch.png
   :alt: Choosing an architecture for Visual Studio generators

.. _`Setting Build Variables`:

Setting Build Variables
=======================

Software projects often require variables to be
set on the command line when invoking CMake.  Some of
the most commonly used CMake variables are listed in
the table below:

========================================== ============================================================
 Variable                                   Meaning
========================================== ============================================================
 :variable:`CMAKE_PREFIX_PATH`              Path to search for
                                            :guide:`dependent packages <Using Dependencies Guide>`
 :variable:`CMAKE_MODULE_PATH`              Path to search for additional CMake modules
 :variable:`CMAKE_BUILD_TYPE`               Build configuration, such as
                                            ``Debug`` or ``Release``, determining
                                            debug/optimization flags.  This is only
                                            relevant for single-configuration buildsystems such
                                            as ``Makefile`` and ``Ninja``.  Multi-configuration
                                            buildsystems such as those for Visual Studio and Xcode
                                            ignore this setting.
 :variable:`CMAKE_INSTALL_PREFIX`           Location to install the
                                            software to with the
                                            ``install`` build target
 :variable:`CMAKE_TOOLCHAIN_FILE`           File containing cross-compiling
                                            data such as
                                            :manual:`toolchains and sysroots <cmake-toolchains(7)>`.
 :variable:`BUILD_SHARED_LIBS`              Whether to build shared
                                            instead of static libraries
                                            for :command:`add_library`
                                            commands used without a type
 :variable:`CMAKE_EXPORT_COMPILE_COMMANDS`  Generate a ``compile_commands.json``
                                            file for use with clang-based tools
========================================== ============================================================

Other project-specific variables may be available
to control builds, such as enabling or disabling
components of the project.

There is no convention provided by CMake for how
such variables are named between different
provided buildsystems, except that variables with
the prefix ``CMAKE_`` usually refer to options
provided by CMake itself and should not be used
in third-party options, which should use
their own prefix instead.  The
:manual:`cmake-gui(1)` tool can display options
in groups defined by their prefix, so it makes
sense for third parties to ensure that they use a
self-consistent prefix.

Setting variables on the command line
-------------------------------------

CMake variables can be set on the command line either
when creating the initial build:

.. code-block:: console

    $ mkdir build
    $ cd build
    $ cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug

or later on a subsequent invocation of
:manual:`cmake(1)`:

.. code-block:: console

    $ cd build
    $ cmake . -DCMAKE_BUILD_TYPE=Debug

The :option:`-U <cmake -U>` flag may be used to unset variables
on the :manual:`cmake(1)` command line:

.. code-block:: console

    $ cd build
    $ cmake . -UMyPackage_DIR

A CMake buildsystem which was initially created
on the command line can be modified using the
:manual:`cmake-gui(1)` and vice-versa.

The :manual:`cmake(1)` tool allows specifying a
file to use to populate the initial cache using
the :option:`-C <cmake -C>` option.  This can be useful to simplify
commands and scripts which repeatedly require the
same cache entries.

Setting variables with cmake-gui
--------------------------------

Variables may be set in the cmake-gui using the "Add Entry"
button.  This triggers a new dialog to set the value of
the variable.

.. image:: GUI-Add-Entry.png
   :alt: Editing a cache entry

The main view of the :manual:`cmake-gui(1)` user interface
can be used to edit existing variables.

The CMake Cache
---------------

When CMake is executed, it needs to find the locations of
compilers, tools and dependencies.  It also needs to be
able to consistently re-generate a buildsystem to use the
same compile/link flags and paths to dependencies.  Such
parameters are also required to be configurable by the
user because they are paths and options specific to the
users system.

When it is first executed, CMake generates a
``CMakeCache.txt`` file in the build directory containing
key-value pairs for such artifacts.  The cache file can be
viewed or edited by the user by running the
:manual:`cmake-gui(1)` or :manual:`ccmake(1)` tool.  The
tools provide an interactive interface for re-configuring
the provided software and re-generating the buildsystem,
as is needed after editing cached values.  Each cache
entry may have an associated short help text which is
displayed in the user interface tools.

The cache entries may also have a type to signify how it
should be presented in the user interface.  For example,
a cache entry of type ``BOOL`` can be edited by a
checkbox in a user interface, a ``STRING`` can be edited
in a text field, and a ``FILEPATH`` while similar to a
``STRING`` should also provide a way to locate filesystem
paths using a file dialog.  An entry of type ``STRING``
may provide a restricted list of allowed values which are
then provided in a drop-down menu in the
:manual:`cmake-gui(1)` user interface (see the
:prop_cache:`STRINGS` cache property).

The CMake files shipped with a software package may also
define boolean toggle options using the :command:`option`
command.  The command creates a cache entry which has a
help text and a default value.  Such cache entries are
typically specific to the provided software and affect
the configuration of the build, such as whether tests
and examples are built, whether to build with exceptions
enabled etc.

Presets
=======

CMake understands a file, ``CMakePresets.json``, and its
user-specific counterpart, ``CMakeUserPresets.json``, for
saving presets for commonly-used configure settings. These
presets can set the build directory, generator, cache
variables, environment variables, and other command-line
options. All of these options can be overridden by the
user. The full details of the ``CMakePresets.json`` format
are listed in the :manual:`cmake-presets(7)` manual.

Using presets on the command-line
---------------------------------

When using the :manual:`cmake(1)` command line tool, a
preset can be invoked by using the :option:`--preset <cmake --preset>`
option. If :option:`--preset <cmake --preset>` is specified,
the generator and build directory are not required, but can be
specified to override them. For example, if you have the following
``CMakePresets.json`` file:

.. code-block:: json

  {
    "version": 1,
    "configurePresets": [
      {
        "name": "ninja-release",
        "binaryDir": "${sourceDir}/build/${presetName}",
        "generator": "Ninja",
        "cacheVariables": {
          "CMAKE_BUILD_TYPE": "Release"
        }
      }
    ]
  }

and you run the following:

.. code-block:: console

  cmake -S /path/to/source --preset=ninja-release

This will generate a build directory in
``/path/to/source/build/ninja-release`` with the
:generator:`Ninja` generator, and with
:variable:`CMAKE_BUILD_TYPE` set to ``Release``.

If you want to see the list of available presets, you can
run:

.. code-block:: console

  cmake -S /path/to/source --list-presets

This will list the presets available in
``/path/to/source/CMakePresets.json`` and
``/path/to/source/CMakeUsersPresets.json`` without
generating a build tree.

Using presets in cmake-gui
--------------------------

If a project has presets available, either through
``CMakePresets.json`` or ``CMakeUserPresets.json``, the
list of presets will appear in a drop-down menu in
:manual:`cmake-gui(1)` between the source directory and
the binary directory. Choosing a preset sets the binary
directory, generator, environment variables, and cache
variables, but all of these options can be overridden after
a preset is selected.

Invoking the Buildsystem
========================

After generating the buildsystem, the software can be
built by invoking the particular build tool.  In the
case of the IDE generators, this can involve loading
the generated project file into the IDE to invoke the
build.

CMake is aware of the specific build tool needed to invoke
a build so in general, to build a buildsystem or project
from the command line after generating, the following
command may be invoked in the build directory:

.. code-block:: console

  $ cmake --build .

The :option:`--build <cmake --build>` flag enables a
particular mode of operation for the :manual:`cmake(1)`
tool.  It invokes the  :variable:`CMAKE_MAKE_PROGRAM`
command associated with the
:manual:`generator <cmake-generators(7)>`, or
the build tool configured by the user.

The :option:`--build <cmake --build>` mode also accepts
the parameter :option:`--target <cmake--build --target>` to
specify a particular target to build, for example a
particular library, executable or custom target, or a
particular special target like ``install``:

.. code-block:: console

  $ cmake --build . --target myexe

The :option:`--build <cmake --build>` mode also accepts a
:option:`--config <cmake--build --config>` parameter
in the case of multi-config generators to specify which
particular configuration to build:

.. code-block:: console

  $ cmake --build . --target myexe --config Release

The :option:`--config <cmake--build --config>` option has no
effect if the generator generates a buildsystem specific
to a configuration which is chosen when invoking cmake
with the :variable:`CMAKE_BUILD_TYPE` variable.

Some buildsystems omit details of command lines invoked
during the build.  The :option:`--verbose <cmake--build --verbose>`
flag can be used to cause those command lines to be shown:

.. code-block:: console

  $ cmake --build . --target myexe --verbose

The :option:`--build <cmake --build>` mode can also pass
particular command line options to the underlying build
tool by listing them after ``--``.  This can be useful
to specify options to the build tool, such as to continue the
build after a failed job, where CMake does not
provide a high-level user interface.

For all generators, it is possible to run the underlying
build tool after invoking CMake.  For example, ``make``
may be executed after generating with the
:generator:`Unix Makefiles` generator to invoke the build,
or ``ninja`` after generating with the :generator:`Ninja`
generator etc.  The IDE buildsystems usually provide
command line tooling for building a project which can
also be invoked.

Selecting a Target
------------------

Each executable and library described in the CMake files
is a build target, and the buildsystem may describe
custom targets, either for internal use, or for user
consumption, for example to create documentation.

CMake provides some built-in targets for all buildsystems
providing CMake files.

``all``
  The default target used by ``Makefile`` and ``Ninja``
  generators.  Builds all targets in the buildsystem,
  except those which are excluded by their
  :prop_tgt:`EXCLUDE_FROM_ALL` target property or
  :prop_dir:`EXCLUDE_FROM_ALL` directory property.  The
  name ``ALL_BUILD`` is used for this purpose for the
  Xcode and Visual Studio generators.
``help``
  Lists the targets available for build.  This target is
  available when using the :generator:`Unix Makefiles` or
  :generator:`Ninja` generator, and the exact output is
  tool-specific.
``clean``
  Delete built object files and other output files.  The
  ``Makefile`` based generators create a ``clean`` target
  per directory, so that an individual directory can be
  cleaned.  The ``Ninja`` tool provides its own granular
  ``-t clean`` system.
``test``
  Runs tests.  This target is only automatically available
  if the CMake files provide CTest-based tests.  See also
  `Running Tests`_.
``install``
  Installs the software.  This target is only automatically
  available if the software defines install rules with the
  :command:`install` command.  See also
  `Software Installation`_.
``package``
  Creates a binary package.  This target is only
  automatically available if the CMake files provide
  CPack-based packages.
``package_source``
  Creates a source package.  This target is only
  automatically available if the CMake files provide
  CPack-based packages.

For ``Makefile`` based systems, ``/fast`` variants of binary
build targets are provided. The ``/fast`` variants are used
to build the specified target without regard for its
dependencies.  The dependencies are not checked and
are not rebuilt if out of date.  The :generator:`Ninja`
generator is sufficiently fast at dependency checking that
such targets are not provided for that generator.

``Makefile`` based systems also provide build-targets to
preprocess, assemble and compile individual files in a
particular directory.

.. code-block:: console

  $ make foo.cpp.i
  $ make foo.cpp.s
  $ make foo.cpp.o

The file extension is built into the name of the target
because another file with the same name but a different
extension may exist.  However, build-targets without the
file extension are also provided.

.. code-block:: console

  $ make foo.i
  $ make foo.s
  $ make foo.o

In buildsystems which contain ``foo.c`` and ``foo.cpp``,
building the ``foo.i`` target will preprocess both files.

Specifying a Build Program
--------------------------

The program invoked by the :option:`--build <cmake --build>`
mode is determined by the :variable:`CMAKE_MAKE_PROGRAM` variable.
For most generators, the particular program does not need to be
configured.

===================== =========================== ===========================
      Generator           Default make program           Alternatives
===================== =========================== ===========================
 XCode                 ``xcodebuild``
 Unix Makefiles        ``make``
 NMake Makefiles       ``nmake``                   ``jom``
 NMake Makefiles JOM   ``jom``                     ``nmake``
 MinGW Makefiles       ``mingw32-make``
 MSYS Makefiles        ``make``
 Ninja                 ``ninja``
 Visual Studio         ``msbuild``
 Watcom WMake          ``wmake``
===================== =========================== ===========================

The ``jom`` tool is capable of reading makefiles of the
``NMake`` flavor and building in parallel, while the
``nmake`` tool always builds serially.  After generating
with the :generator:`NMake Makefiles` generator a user
can run ``jom`` instead of ``nmake``.  The
:option:`--build <cmake --build>`
mode would also use ``jom`` if the
:variable:`CMAKE_MAKE_PROGRAM` was set to ``jom`` while
using the :generator:`NMake Makefiles` generator, and
as a convenience, the :generator:`NMake Makefiles JOM`
generator is provided to find ``jom`` in the normal way
and use it as the :variable:`CMAKE_MAKE_PROGRAM`. For
completeness, ``nmake`` is an alternative tool which
can process the output of the
:generator:`NMake Makefiles JOM` generator, but doing
so would be a pessimization.

Software Installation
=====================

The :variable:`CMAKE_INSTALL_PREFIX` variable can be
set in the CMake cache to specify where to install the
provided software.  If the provided software has install
rules, specified using the :command:`install` command,
they will install artifacts into that prefix.  On Windows,
the default installation location corresponds to the
``ProgramFiles`` system directory which may be
architecture specific.  On Unix hosts, ``/usr/local`` is
the default installation location.

The :variable:`CMAKE_INSTALL_PREFIX` variable always
refers to the installation prefix on the target
filesystem.

In cross-compiling or packaging scenarios where the
sysroot is read-only or where the sysroot should otherwise
remain pristine, the :variable:`CMAKE_STAGING_PREFIX`
variable can be set to a location to actually install
the files.

The commands:

.. code-block:: console

  $ cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DCMAKE_SYSROOT=$HOME/root \
    -DCMAKE_STAGING_PREFIX=/tmp/package
  $ cmake --build .
  $ cmake --build . --target install

result in files being installed to paths such
as ``/tmp/package/lib/libfoo.so`` on the host machine.
The ``/usr/local`` location on the host machine is
not affected.

Some provided software may specify ``uninstall`` rules,
but CMake does not generate such rules by default itself.

Running Tests
=============

The :manual:`ctest(1)` tool is shipped with the CMake
distribution to execute provided tests and report
results.  The ``test`` build-target is provided to run
all available tests, but the :manual:`ctest(1)` tool
allows granular control over which tests to run, how to
run them, and how to report results.  Executing
:manual:`ctest(1)` in the build directory is equivalent
to running the ``test`` target:

.. code-block:: console

  $ ctest

A regular expression can be passed to run only tests
which match the expression.  To run only tests with
``Qt`` in their name:

.. code-block:: console

  $ ctest -R Qt

Tests can be excluded by regular expression too.  To
run only tests without ``Qt`` in their name:

.. code-block:: console

  $ ctest -E Qt

Tests can be run in parallel by passing :option:`-j <ctest -j>`
arguments to :manual:`ctest(1)`:

.. code-block:: console

  $ ctest -R Qt -j8

The environment variable :envvar:`CTEST_PARALLEL_LEVEL`
can alternatively be set to avoid the need to pass
:option:`-j <ctest -j>`.

By default :manual:`ctest(1)` does not print the output
from the tests. The command line argument :option:`-V <ctest -V>`
(or ``--verbose``) enables verbose mode to print the
output from all tests.
The :option:`--output-on-failure <ctest --output-on-failure>`
option prints the test output for failing tests only.
The environment variable :envvar:`CTEST_OUTPUT_ON_FAILURE`
can be set to ``1`` as an alternative to passing the
:option:`--output-on-failure <ctest --output-on-failure>`
option to :manual:`ctest(1)`.



/P/🚀 guide/using-dependencies/index.rst
======================================================


Using Dependencies Guide
************************

Introduction
============

Projects will frequently depend on other projects, assets, and artifacts.
CMake provides a number of ways to incorporate such things into the build.
Projects and users have the flexibility to choose between methods that
best suit their needs.

The primary methods of bringing dependencies into the build are the
:command:`find_package` command and the :module:`FetchContent` module.
The :module:`FindPkgConfig` module is also sometimes used, although it
lacks some of the integration of the other two and is not discussed any
further in this guide.

Dependencies can also be made available by a custom
:ref:`dependency provider <dependency_providers>`.
This might be a third party package manager, or it might be custom code
implemented by the developer.  Dependency providers co-operate with the
primary methods mentioned above to extend their flexibility.

.. _prebuilt_find_package:

Using Pre-built Packages With ``find_package()``
================================================

A package needed by the project may already be built and available at some
location on the user's system.  That package might have also been built by
CMake, or it could have used a different build system entirely.  It might
even just be a collection of files that didn't need to be built at all.
CMake provides the :command:`find_package` command for these scenarios.
It searches well-known locations, along with additional hints and paths
provided by the project or user.  It also supports package components and
packages being optional.  Result variables are provided to allow the project
to customize its own behavior according to whether the package or specific
components were found.

In most cases, projects should generally use the :ref:`basic signature`.
Most of the time, this will involve just the package name, maybe a version
constraint, and the ``REQUIRED`` keyword if the dependency is not optional.
A set of package components may also be specified.

.. code-block:: cmake
  :caption: Examples of ``find_package()`` basic signature

  find_package(Catch2)
  find_package(GTest REQUIRED)
  find_package(Boost 1.79 COMPONENTS date_time)

The :command:`find_package` command supports two main methods for carrying
out the search:

**Config mode**
  With this method, the command looks for files that are typically provided
  by the package itself.  This is the more reliable method of the two, since
  the package details should always be in sync with the package.

**Module mode**
  Not all packages are CMake-aware. Many don't provide the files needed to
  support config mode.  For such cases, a Find module file can be provided
  separately, either by the project or by CMake.  A Find module is typically
  a heuristic implementation which knows what the package normally provides
  and how to present that package to the project.  Since Find modules are
  usually distributed separately from the package, they are not as reliable.
  They are typically maintained separately, and they are likely to follow
  different release schedules, so they can easily become out-of-date.

Depending on the arguments used, :command:`find_package` may use one or both
of the above methods.  By restricting the options to just the basic signature,
both config mode and module mode can be used to satisfy the dependency.
The presence of other options may restrict the call to using only one of the
two methods, potentially reducing the command's ability to find the dependency.
See the :command:`find_package` documentation for full details about this
complex topic.

For both search methods, the user can also set cache variables on the
:manual:`cmake(1)` command line or in the :manual:`ccmake(1)` or
:manual:`cmake-gui(1)` UI tools to influence and override where to find
packages. See the :ref:`User Interaction Guide <Setting Build Variables>`
for more on how to set cache variables.

.. _Libraries providing Config-file packages:

Config-file packages
--------------------

The preferred way for a third party to provide executables, libraries,
headers, and other files for use with CMake is to provide
:ref:`config files <Config File Packages>`.  These are text files shipped
with the package, which define CMake targets, variables, commands, and so on.
The config file is an ordinary CMake script, which is read in by the
:command:`find_package` command.

The config files can usually be found in a directory whose name matches the
pattern ``lib/cmake/<PackageName>``, although they may be in other locations
instead (see :ref:`search procedure`).  The ``<PackageName>`` is usually the
first argument to the :command:`find_package` command, and it may even be the
only argument.  Alternative names can also be specified with the ``NAMES``
option:

.. code-block:: cmake
  :caption: Providing alternative names when finding a package

  find_package(SomeThing
    NAMES
      SameThingOtherName   # Another name for the package
      SomeThing            # Also still look for its canonical name
  )

The config file must be named either ``<PackageName>Config.cmake`` or
``<LowercasePackageName>-config.cmake`` (the former is used for the remainder
of this guide, but both are supported).  This file is the entry point
to the package for CMake.  A separate optional file named
``<PackageName>ConfigVersion.cmake`` or
``<LowercasePackageName>-config-version.cmake`` may also exist in the same
directory.  This file is used by CMake to determine whether the version of
the package satisfies any version constraint included in the call to
:command:`find_package`.  It is optional to specify a version when calling
:command:`find_package`, even if a ``<PackageName>ConfigVersion.cmake``
file is present.

If the ``<PackageName>Config.cmake`` file is found and any version constraint
is satisfied, the :command:`find_package` command considers the package to be
found, and the entire package is assumed to be complete as designed.

There may be additional files providing CMake commands or
:ref:`imported targets` for you to use.  CMake does not enforce any naming
convention for these files.  They are related to the primary
``<PackageName>Config.cmake`` file by use of the CMake :command:`include`
command.  The ``<PackageName>Config.cmake`` file would typically include
these for you, so they won't usually require any additional step other than
the call to :command:`find_package`.

If the location of the package is in a
:ref:`directory known to CMake <search procedure>`, the
:command:`find_package` call should succeed.  The directories known to CMake
are platform-specific.  For example, packages installed on Linux with a
standard system package manager will be found in the ``/usr`` prefix
automatically.  Packages installed in ``Program Files`` on Windows will
similarly be found automatically.

Packages will not be found automatically without help if they are in
locations not known to CMake, such as ``/opt/mylib`` or ``$HOME/dev/prefix``.
This is a normal situation, and CMake provides several ways for users to
specify where to find such libraries.

The :variable:`CMAKE_PREFIX_PATH` variable may be
:ref:`set when invoking CMake <Setting Build Variables>`.
It is treated as a list of base paths in which to search for
:ref:`config files <Config File Packages>`.  A package installed in
``/opt/somepackage`` will typically install config files such as
``/opt/somepackage/lib/cmake/somePackage/SomePackageConfig.cmake``.
In that case, ``/opt/somepackage`` should be added to
:variable:`CMAKE_PREFIX_PATH`.

The environment variable ``CMAKE_PREFIX_PATH`` may also be populated with
prefixes to search for packages.  Like the ``PATH`` environment variable,
this is a list, but it needs to use the platform-specific environment variable
list item separator (``:`` on Unix and ``;`` on Windows).

The :variable:`CMAKE_PREFIX_PATH` variable provides convenience in cases
where multiple prefixes need to be specified, or when multiple packages
are available under the same prefix.  Paths to packages may also be
specified by setting variables matching ``<PackageName>_DIR``, such as
``SomePackage_DIR``.  Note that this is not a prefix, but should be a full
path to a directory containing a config-style package file, such as
``/opt/somepackage/lib/cmake/SomePackage`` in the above example.
See the :command:`find_package` documentation for other CMake variables and
environment variables that can affect the search.

.. _Libraries not Providing Config-file Packages:

Find Module Files
-----------------

Packages which do not provide config files can still be found with the
:command:`find_package` command, if a ``FindSomePackage.cmake`` file is
available.  These Find module files are different to config files in that:

#. Find module files should not be provided by the package itself.
#. The availability of a ``Find<PackageName>.cmake`` file does not indicate
   the availability of the package, or any particular part of the package.
#. CMake does not search the locations specified in the
   :variable:`CMAKE_PREFIX_PATH` variable for ``Find<PackageName>.cmake``
   files.  Instead, CMake searches for such files in the locations given
   by the :variable:`CMAKE_MODULE_PATH` variable.  It is common for users to
   set the :variable:`CMAKE_MODULE_PATH` when running CMake, and it is common
   for CMake projects to append to :variable:`CMAKE_MODULE_PATH` to allow use
   of local Find module files.
#. CMake ships ``Find<PackageName>.cmake`` files for some
   :manual:`third party packages <cmake-modules(7)>`.  These files are a
   maintenance burden for CMake, and it is not unusual for these to fall
   behind the latest releases of the packages they are associated with.
   In general, new Find modules are not added to CMake any more.  Projects
   should encourage the upstream packages to provide a config file where
   possible.  If that is unsuccessful, the project should provide its own
   Find module for the package.

See :ref:`Find Modules` for a detailed discussion of how to write a
Find module file.

.. _Imported Targets from Packages:

Imported Targets
----------------

Both config files and Find module files can define :ref:`Imported targets`.
These will typically have names of the form ``SomePrefix::ThingName``.
Where these are available, the project should prefer to use them instead of
any CMake variables that may also be provided.  Such targets typically carry
usage requirements and apply things like header search paths, compiler
definitions, etc. automatically to other targets that link to them (e.g. using
:command:`target_link_libraries`).  This is both more robust and more
convenient than trying to apply the same things manually using variables.
Check the documentation for the package or Find module to see what imported
targets it defines, if any.

Imported targets should also encapsulate any configuration-specific paths.
This includes the location of binaries (libraries, executables), compiler
flags, and any other configuration-dependent quantities.  Find modules may
be less reliable in providing these details than config files.

A complete example which finds a third party package and uses a library
from it might look like the following:

.. code-block:: cmake

  cmake_minimum_required(VERSION 3.10)
  project(MyExeProject VERSION 1.0.0)

  # Make project-provided Find modules available
  list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

  find_package(SomePackage REQUIRED)
  add_executable(MyExe main.cpp)
  target_link_libraries(MyExe PRIVATE SomePrefix::LibName)

Note that the above call to :command:`find_package` could be resolved by
a config file or a Find module.  It uses only the basic arguments supported
by the :ref:`basic signature`.  A ``FindSomePackage.cmake`` file in the
``${CMAKE_CURRENT_SOURCE_DIR}/cmake`` directory would allow the
:command:`find_package` command to succeed using module mode, for example.
If no such module file is present, the system would be searched for a config
file.


Downloading And Building From Source With ``FetchContent``
==========================================================

Dependencies do not necessarily have to be pre-built in order to use them
with CMake.  They can be built from sources as part of the main project.
The :module:`FetchContent` module provides functionality to download
content (typically sources, but can be anything) and add it to the main
project if the dependency also uses CMake.  The dependency's sources will
be built along with the rest of the project, just as though the sources were
part of the project's own sources.

The general pattern is that the project should first declare all the
dependencies it wants to use, then ask for them to be made available.
The following demonstrates the principle (see :ref:`fetch-content-examples`
for more):

.. code-block:: cmake

  include(FetchContent)
  FetchContent_Declare(
    googletest
    GIT_REPOSITORY https://github.com/google/googletest.git
    GIT_TAG        703bd9caab50b139428cea1aaff9974ebee5742e # release-1.10.0
  )
  FetchContent_Declare(
    Catch2
    GIT_REPOSITORY https://github.com/catchorg/Catch2.git
    GIT_TAG        605a34765aa5d5ecbf476b4598a862ada971b0cc # v3.0.1
  )
  FetchContent_MakeAvailable(googletest Catch2)

Various download methods are supported, including downloading and extracting
archives from a URL (a range of archive formats are supported), and a number
of repository formats including Git, Subversion, and Mercurial.
Custom download, update, and patch commands can also be used to support
arbitrary use cases.

When a dependency is added to the project with :module:`FetchContent`, the
project links to the dependency's targets just like any other target from the
project.  If the dependency provides namespaced targets of the form
``SomePrefix::ThingName``, the project should link to those rather than to
any non-namespaced targets.  See the next section for why this is recommended.

Not all dependencies can be brought into the project this way.  Some
dependencies define targets whose names clash with other targets from the
project or other dependencies.  Concrete executable and library targets
created by :command:`add_executable` and :command:`add_library` are global,
so each one must be unique across the whole build.  If a dependency would
add a clashing target name, it cannot be brought directly into the build
with this method.

``FetchContent`` And ``find_package()`` Integration
===================================================

.. versionadded:: 3.24

Some dependencies support being added by either :command:`find_package` or
:module:`FetchContent`.  Such dependencies must ensure they define the same
namespaced targets in both installed and built-from-source scenarios.
A consuming project then links to those namespaced targets and can handle
both scenarios transparently, as long as the project does not use anything
else that isn't provided by both methods.

The project can indicate it is happy to accept a dependency by either method
using the ``FIND_PACKAGE_ARGS`` option to :command:`FetchContent_Declare`.
This allows :command:`FetchContent_MakeAvailable` to try satisfying the
dependency with a call to :command:`find_package` first, using the arguments
after the ``FIND_PACKAGE_ARGS`` keyword, if any.  If that doesn't find the
dependency, it is built from source as described previously instead.

.. code-block:: cmake

  include(FetchContent)
  FetchContent_Declare(
    googletest
    GIT_REPOSITORY https://github.com/google/googletest.git
    GIT_TAG        703bd9caab50b139428cea1aaff9974ebee5742e # release-1.10.0
    FIND_PACKAGE_ARGS NAMES GTest
  )
  FetchContent_MakeAvailable(googletest)

  add_executable(ThingUnitTest thing_ut.cpp)
  target_link_libraries(ThingUnitTest GTest::gtest_main)

The above example calls
:command:`find_package(googletest NAMES GTest) <find_package>` first.
CMake provides a :module:`FindGTest` module, so if that finds a GTest package
installed somewhere, it will make it available, and the dependency will not be
built from source.  If no GTest package is found, it *will* be built from
source.  In either case, the ``GTest::gtest_main`` target is expected to be
defined, so we link our unit test executable to that target.

High-level control is also available through the
:variable:`FETCHCONTENT_TRY_FIND_PACKAGE_MODE` variable.  This can be set to
``NEVER`` to disable all redirection to :command:`find_package`.  It can be
set to ``ALWAYS`` to try :command:`find_package` even if ``FIND_PACKAGE_ARGS``
was not specified (this should be used with caution).

The project might also decide that a particular dependency must be built from
source.  This might be needed if a patched or unreleased version of the
dependency is required, or to satisfy some policy that requires all
dependencies to be built from source.  The project can enforce this by adding
the ``OVERRIDE_FIND_PACKAGE`` keyword to :command:`FetchContent_Declare`.
A call to :command:`find_package` for that dependency will then be redirected
to :command:`FetchContent_MakeAvailable` instead.

.. code-block:: cmake

  include(FetchContent)
  FetchContent_Declare(
    Catch2
    URL https://intranet.mycomp.com/vendored/Catch2_2.13.4_patched.tgz
    URL_HASH MD5=abc123...
    OVERRIDE_FIND_PACKAGE
  )

  # The following is automatically redirected to FetchContent_MakeAvailable(Catch2)
  find_package(Catch2)

For more advanced use cases, see the
:variable:`CMAKE_FIND_PACKAGE_REDIRECTS_DIR` variable.

.. _dependency_providers_overview:

Dependency Providers
====================

.. versionadded:: 3.24

The preceding section discussed techniques that projects can use to specify
their dependencies.  Ideally, the project shouldn't really care where a
dependency comes from, as long as it provides the things it expects (often
just some imported targets).  The project says what it needs and may also
specify where to get it from, in the absence of any other details, so that it
can still be built out-of-the-box.

The developer, on the other hand, may be much more interested in controlling
*how* a dependency is provided to the project.  You might want to use a
particular version of a package that you built yourself.  You might want
to use a third party package manager.  You might want to redirect some
requests to a different URL on a system you control for security or
performance reasons.  CMake supports these sort of scenarios through
:ref:`dependency_providers`.

A dependency provider can be set to intercept :command:`find_package` and
:command:`FetchContent_MakeAvailable` calls.  The provider is given an
opportunity to satisfy such requests before falling back to the built-in
implementation if the provider doesn't fulfill it.

Only one dependency provider can be set, and it can only be set at a very
specific point early in the CMake run.
The :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` variable lists CMake files
that will be read while processing the first :command:`project()` call (and
only that call).  This is the only time a dependency provider may be set.
At most, one single provider is expected to be used throughout the whole
project.

For some scenarios, the user wouldn't need to know the details of how the
dependency provider is set.  A third party may provide a file that can be
added to :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES`, which will set up
the dependency provider on the user's behalf.  This is the recommended
approach for package managers.  The developer can use such a file like so::

  cmake -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=/path/to/package_manager/setup.cmake ...

For details on how to implement your own custom dependency provider, see the
:command:`cmake_language(SET_DEPENDENCY_PROVIDER)` command.



/P/🚀 guide/importing-exporting/index.rst
=======================================================


Importing and Exporting Guide
*****************************

Introduction
============

In this guide, we will present the concept of :prop_tgt:`IMPORTED` targets
and demonstrate how to import existing executable or library files from disk
into a CMake project. We will then show how CMake supports exporting targets
from one CMake-based project and importing them into another. Finally, we
will demonstrate how to package a project with a configuration file to allow
for easy integration into other CMake projects. This guide and the complete
example source code can be found in the ``Help/guide/importing-exporting``
directory of the CMake source code tree.


Importing Targets
=================

:prop_tgt:`IMPORTED` targets are used to convert files outside of a CMake
project into logical targets inside of the project. :prop_tgt:`IMPORTED`
targets are created using the ``IMPORTED`` option of the
:command:`add_executable` and :command:`add_library` commands. No build
files are generated for :prop_tgt:`IMPORTED` targets. Once imported,
:prop_tgt:`IMPORTED` targets may be referenced like any other target within
the project and provide a convenient, flexible reference to outside
executables and libraries.

By default, the :prop_tgt:`IMPORTED` target name has scope in the directory in
which it is created and below. We can use the ``GLOBAL`` option to extended
visibility so that the target is accessible globally in the build system.

Details about the :prop_tgt:`IMPORTED` target are specified by setting
properties whose names begin in ``IMPORTED_`` and ``INTERFACE_``. For example,
:prop_tgt:`IMPORTED_LOCATION` contains the full path to the target on
disk.

Importing Executables
---------------------

To start, we will walk through a simple example that creates an
:prop_tgt:`IMPORTED` executable target and then references it from the
:command:`add_custom_command` command.

We'll need to do some setup to get started. We want to create an executable
that when run creates a basic ``main.cc`` file in the current directory. The
details of this project are not important. Navigate to
``Help/guide/importing-exporting/MyExe``, create a build directory, run
:manual:`cmake <cmake(1)>` and build and install the project.

.. code-block:: console

  $ cd Help/guide/importing-exporting/MyExe
  $ mkdir build
  $ cd build
  $ cmake ..
  $ cmake --build .
  $ cmake --install . --prefix <install location>
  $ <install location>/myexe
  $ ls
  [...] main.cc [...]

Now we can import this executable into another CMake project. The source code
for this section is available in ``Help/guide/importing-exporting/Importing``.
In the CMakeLists file, use the :command:`add_executable` command to create a
new target called ``myexe``. Use the ``IMPORTED`` option to tell CMake that
this target references an executable file located outside of the project. No
rules will be generated to build it and the :prop_tgt:`IMPORTED` target
property will be set  to ``true``.

.. literalinclude:: Importing/CMakeLists.txt
  :language: cmake
  :start-after: # Add executable
  :end-before: # Set imported location

Next, set the :prop_tgt:`IMPORTED_LOCATION` property of the target using
the :command:`set_property` command. This will tell CMake the location of the
target on disk. The location may need to be adjusted to the
``<install location>`` specified in the previous step.

.. literalinclude:: Importing/CMakeLists.txt
  :language: cmake
  :start-after: # Set imported location
  :end-before: # Add custom command

We can now reference this :prop_tgt:`IMPORTED` target just like any target
built within the project. In this instance, let's imagine that we want to use
the generated source file in our project. Use the :prop_tgt:`IMPORTED`
target in the :command:`add_custom_command` command:

.. literalinclude:: Importing/CMakeLists.txt
  :language: cmake
  :start-after: # Add custom command
  :end-before: # Use source file

As ``COMMAND`` specifies an executable target name, it will automatically be
replaced by the location of the executable given by the
:prop_tgt:`IMPORTED_LOCATION` property above.

Finally, use the output from :command:`add_custom_command`:

.. literalinclude:: Importing/CMakeLists.txt
  :language: cmake
  :start-after: # Use source file

Importing Libraries
-------------------

In a similar manner, libraries from other projects may be accessed through
:prop_tgt:`IMPORTED` targets.

Note: The full source code for the examples in this section is not provided
and is left as an exercise for the reader.

In the CMakeLists file, add an :prop_tgt:`IMPORTED` library and specify its
location on disk:

.. code-block:: cmake

  add_library(foo STATIC IMPORTED)
  set_property(TARGET foo PROPERTY
               IMPORTED_LOCATION "/path/to/libfoo.a")

Then use the :prop_tgt:`IMPORTED` library inside of our project:

.. code-block:: cmake

  add_executable(myexe src1.c src2.c)
  target_link_libraries(myexe PRIVATE foo)


On Windows, a .dll and its .lib import library may be imported together:

.. code-block:: cmake

  add_library(bar SHARED IMPORTED)
  set_property(TARGET bar PROPERTY
               IMPORTED_LOCATION "c:/path/to/bar.dll")
  set_property(TARGET bar PROPERTY
               IMPORTED_IMPLIB "c:/path/to/bar.lib")
  add_executable(myexe src1.c src2.c)
  target_link_libraries(myexe PRIVATE bar)

A library with multiple configurations may be imported with a single target:

.. code-block:: cmake

  find_library(math_REL NAMES m)
  find_library(math_DBG NAMES md)
  add_library(math STATIC IMPORTED GLOBAL)
  set_target_properties(math PROPERTIES
    IMPORTED_LOCATION "${math_REL}"
    IMPORTED_LOCATION_DEBUG "${math_DBG}"
    IMPORTED_CONFIGURATIONS "RELEASE;DEBUG"
  )
  add_executable(myexe src1.c src2.c)
  target_link_libraries(myexe PRIVATE math)

The generated build system will link ``myexe`` to ``m.lib`` when built in the
release configuration, and ``md.lib`` when built in the debug configuration.

Exporting Targets
=================

While :prop_tgt:`IMPORTED` targets on their own are useful, they still
require that the project that imports them knows the locations of the target
files on disk. The real power of :prop_tgt:`IMPORTED`  targets is when the
project providing the target files also provides a CMake file to help import
them. A project can be setup to produce the necessary information so that it
can easily be used by other CMake projects be it from a build directory, a
local install or when packaged.

In the remaining sections, we will walk through a set of example projects
step-by-step. The first project will create and install a library and
corresponding CMake configuration and package files. The second project will
use the generated package.

Let's start by looking at the ``MathFunctions`` project in the
``Help/guide/importing-exporting/MathFunctions`` directory. Here we have a
header file ``MathFunctions.h`` that declares a ``sqrt`` function:

.. literalinclude:: MathFunctions/MathFunctions.h
  :language: c++

And a corresponding source file ``MathFunctions.cxx``:

.. literalinclude:: MathFunctions/MathFunctions.cxx
  :language: c++

Don't worry too much about the specifics of the C++ files, they are just meant
to be a simple example that will compile and run on many build systems.

Now we can create a ``CMakeLists.txt`` file for the ``MathFunctions``
project. Start by specifying the :command:`cmake_minimum_required` version and
:command:`project` name:

.. literalinclude:: MathFunctions/CMakeLists.txt
  :language: cmake
  :end-before: # create library

The :module:`GNUInstallDirs` module is included in order to provide the
project with the flexibility to install into different platform layouts by
making the directories available as cache variables.

Create a library called ``MathFunctions`` with the :command:`add_library`
command:

.. literalinclude:: MathFunctions/CMakeLists.txt
  :language: cmake
  :start-after: # create library
  :end-before: # add include directories

And then use the :command:`target_include_directories` command to specify the
include directories for the target:

.. literalinclude:: MathFunctions/CMakeLists.txt
  :language: cmake
  :start-after: # add include directories
  :end-before: # install the target and create export-set

We need to tell CMake that we want to use different include directories
depending on if we're building the library or using it from an installed
location. If we don't do this, when CMake creates the export information it
will export a path that is specific to the current build directory
and will not be valid for other projects. We can use
:manual:`generator expressions <cmake-generator-expressions(7)>` to specify
that if we're building the library include the current source directory.
Otherwise, when installed, include the ``include`` directory. See the `Creating
Relocatable Packages`_ section for more details.

The :command:`install(TARGETS)` and :command:`install(EXPORT)` commands
work together to install both targets (a library in our case) and a CMake
file designed to make it easy to import the targets into another CMake project.

First, in the :command:`install(TARGETS)` command we will specify the target,
the ``EXPORT`` name and the destinations that tell CMake where to install the
targets.

.. literalinclude:: MathFunctions/CMakeLists.txt
  :language: cmake
  :start-after: # install the target and create export-set
  :end-before: # install header file

Here, the ``EXPORT`` option tells CMake to create an export called
``MathFunctionsTargets``. The generated :prop_tgt:`IMPORTED` targets have
appropriate properties set to define their
:ref:`usage requirements <Target Usage Requirements>`, such as
:prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`,
:prop_tgt:`INTERFACE_COMPILE_DEFINITIONS` and other relevant built-in
``INTERFACE_`` properties.  The ``INTERFACE`` variant of user-defined
properties listed in :prop_tgt:`COMPATIBLE_INTERFACE_STRING` and other
:ref:`Compatible Interface Properties` are also propagated to the
generated :prop_tgt:`IMPORTED` targets. For example, in this case, the
:prop_tgt:`IMPORTED` target will have its
:prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` property populated with
the directory specified by the ``INCLUDES DESTINATION`` property. As a
relative path was given, it is treated as relative to the
:variable:`CMAKE_INSTALL_PREFIX`.

Note, we have *not* asked CMake to install the export yet.

We don't want to forget to install the ``MathFunctions.h`` header file with the
:command:`install(FILES)` command. The header file should be installed to the
``include`` directory, as specified by the
:command:`target_include_directories` command above.

.. literalinclude:: MathFunctions/CMakeLists.txt
  :language: cmake
  :start-after: # install header file
  :end-before: # generate and install export file

Now that the ``MathFunctions`` library and header file are installed, we also
need to explicitly install the ``MathFunctionsTargets``  export details. Use
the :command:`install(EXPORT)` command to export the targets in
``MathFunctionsTargets``, as defined by the  :command:`install(TARGETS)`
command.

.. literalinclude:: MathFunctions/CMakeLists.txt
  :language: cmake
  :start-after: # generate and install export file
  :end-before: # include CMakePackageConfigHelpers macro

This command generates the ``MathFunctionsTargets.cmake`` file and arranges
to install it to ``${CMAKE_INSTALL_LIBDIR}/cmake/MathFunctions``. The file
contains code suitable for use by downstreams to import all targets listed in
the install command from the installation tree.

The ``NAMESPACE`` option will prepend ``MathFunctions::`` to  the target names
as they are written to the export file. This convention of double-colons
gives CMake a hint that the name is an  :prop_tgt:`IMPORTED` target when it
is used by downstream projects. This way, CMake can issue a diagnostic
message if the package providing it was not found.

The generated export file contains code that creates an :prop_tgt:`IMPORTED` library.

.. code-block:: cmake

  # Create imported target MathFunctions::MathFunctions
  add_library(MathFunctions::MathFunctions STATIC IMPORTED)

  set_target_properties(MathFunctions::MathFunctions PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  )

This code is very similar to the example we created by hand in the
`Importing Libraries`_ section. Note that ``${_IMPORT_PREFIX}`` is computed
relative to the file location.

An outside project may load this file with the :command:`include` command and
reference the ``MathFunctions`` library from the installation tree as if it
were built in its own tree. For example:

.. code-block:: cmake
  :linenos:

   include(GNUInstallDirs)
   include(${INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/cmake/MathFunctions/MathFunctionTargets.cmake)
   add_executable(myexe src1.c src2.c )
   target_link_libraries(myexe PRIVATE MathFunctions::MathFunctions)

Line 2 loads the target CMake file. Although we only exported a single
target, this file may import any number of targets. Their locations are
computed relative to the file location so that the install tree may be
easily moved. Line 4 references the imported ``MathFunctions`` library. The
resulting build system will link to the library from its installed location.

Executables may also be exported and imported using the same process.

Any number of target installations may be associated with the same
export name. Export names are considered global so any directory may
contribute a target installation. The :command:`install(EXPORT)` command only
needs to be called once to install a file that references all targets. Below
is an example of how multiple exports may be combined into a single
export file, even if they are in different subdirectories of the project.

.. code-block:: cmake

  # A/CMakeLists.txt
  add_executable(myexe src1.c)
  install(TARGETS myexe DESTINATION lib/myproj
          EXPORT myproj-targets)

  # B/CMakeLists.txt
  add_library(foo STATIC foo1.c)
  install(TARGETS foo DESTINATION lib EXPORTS myproj-targets)

  # Top CMakeLists.txt
  add_subdirectory (A)
  add_subdirectory (B)
  install(EXPORT myproj-targets DESTINATION lib/myproj)

Creating Packages
-----------------

At this point, the ``MathFunctions`` project is exporting the target
information required to be used by other projects. We can make this project
even easier for other projects to use by generating a configuration file so
that the CMake :command:`find_package` command can find our project.

To start, we will need to make a few additions to the ``CMakeLists.txt``
file. First, include the :module:`CMakePackageConfigHelpers` module to get
access to some helper functions for creating config files.

.. literalinclude:: MathFunctions/CMakeLists.txt
  :language: cmake
  :start-after: # include CMakePackageConfigHelpers macro
  :end-before: # set version

Then we will create a package configuration file and a package version file.

Creating a Package Configuration File
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Use the :command:`configure_package_config_file` command provided by the
:module:`CMakePackageConfigHelpers` to generate the package configuration
file. Note that this command should be used instead of the plain
:command:`configure_file` command. It helps to ensure that the resulting
package is relocatable by avoiding hardcoded paths in the installed
configuration file. The path given to ``INSTALL_DESTINATION`` must  be the
destination where the ``MathFunctionsConfig.cmake`` file will be installed.
We will examine the contents of the package configuration file in the next
section.

.. literalinclude:: MathFunctions/CMakeLists.txt
  :language: cmake
  :start-after: # create config file
  :end-before: # install config files

Install the generated configuration files with the :command:`INSTALL(files)`
command. Both ``MathFunctionsConfigVersion.cmake`` and
``MathFunctionsConfig.cmake`` are installed to the same location, completing
the package.

.. literalinclude:: MathFunctions/CMakeLists.txt
  :language: cmake
  :start-after: # install config files
  :end-before: # generate the export targets for the build tree

Now we need to create the package configuration file itself. In this case, the
``Config.cmake.in`` file is very simple but sufficient to allow downstreams
to use the :prop_tgt:`IMPORTED` targets.

.. literalinclude:: MathFunctions/Config.cmake.in

The first line of the file contains only the string ``@PACKAGE_INIT@``. This
expands when the file is configured and allows the use of relocatable paths
prefixed with ``PACKAGE_``. It also provides the ``set_and_check()`` and
``check_required_components()`` macros.

The ``check_required_components`` helper macro ensures that all requested,
non-optional components have been found by checking the
``<Package>_<Component>_FOUND`` variables for all required components. This
macro should be called at the end of the package configuration file even if the
package does not have any components. This way, CMake can make sure that the
downstream project hasn't specified any non-existent components. If
``check_required_components`` fails, the ``<Package>_FOUND`` variable is set to
FALSE, and the package is considered to be not found.

The ``set_and_check()`` macro should be used in configuration files instead
of the normal ``set()`` command for setting directories and file locations.
If a referenced file or directory does not exist, the macro will fail.

If any macros should be provided by the ``MathFunctions`` package, they should
be in a separate file which is installed to the same location as the
``MathFunctionsConfig.cmake`` file, and included from there.

**All required dependencies of a package must also be found in the package
configuration file.** Let's imagine that we require the ``Stats`` library in
our project. In the CMakeLists file, we would add:

.. code-block:: cmake

  find_package(Stats 2.6.4 REQUIRED)
  target_link_libraries(MathFunctions PUBLIC Stats::Types)

As the ``Stats::Types`` target is a ``PUBLIC`` dependency of ``MathFunctions``,
downstreams must also find the ``Stats`` package and link to the
``Stats::Types`` library.  The ``Stats`` package should be found in the
configuration file to ensure this.

.. code-block:: cmake

  include(CMakeFindDependencyMacro)
  find_dependency(Stats 2.6.4)

The ``find_dependency`` macro from the :module:`CMakeFindDependencyMacro`
module helps by propagating  whether the package is ``REQUIRED``, or
``QUIET``, etc. The ``find_dependency`` macro also sets
``MathFunctions_FOUND`` to ``False`` if the dependency is not found, along
with a diagnostic that the ``MathFunctions`` package cannot be used without
the ``Stats`` package.

**Exercise:** Add a required library to the ``MathFunctions`` project.

Creating a Package Version File
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The :module:`CMakePackageConfigHelpers` module provides the
:command:`write_basic_package_version_file` command for creating a simple
package version file.  This file is read by CMake when :command:`find_package`
is called to determine the compatibility with the requested version, and to set
some version-specific variables such as ``<PackageName>_VERSION``,
``<PackageName>_VERSION_MAJOR``, ``<PackageName>_VERSION_MINOR``, etc. See
:manual:`cmake-packages <cmake-packages(7)>` documentation for more details.

.. literalinclude:: MathFunctions/CMakeLists.txt
  :language: cmake
  :start-after: # set version
  :end-before: # create config file

In our example, ``MathFunctions_MAJOR_VERSION`` is defined as a
:prop_tgt:`COMPATIBLE_INTERFACE_STRING` which means that it must be
compatible among the dependencies of any depender. By setting this
custom defined user property in this version and in the next version of
``MathFunctions``, :manual:`cmake <cmake(1)>` will issue a diagnostic if
there is an attempt to use version 3 together with version 4.  Packages can
choose to employ such a pattern if different major versions of the package
are designed to be incompatible.


Exporting Targets from the Build Tree
-------------------------------------

Typically, projects are built and installed before being used by an outside
project. However, in some cases, it is desirable to export targets directly
from a build tree. The targets may then be used by an outside project that
references the build tree with no installation involved. The :command:`export`
command is used to generate a file exporting targets from a project build tree.

If we want our example project to also be used from a build directory we only
have to add the following to ``CMakeLists.txt``:

.. literalinclude:: MathFunctions/CMakeLists.txt
  :language: cmake
  :start-after: # generate the export targets for the build tree

Here we use the :command:`export` command to generate the export targets for
the build tree. In this case, we'll create a file called
``MathFunctionsTargets.cmake`` in the ``cmake`` subdirectory of the build
directory. The generated file contains the required code to import the target
and may be loaded by an outside project that is aware of the project build
tree. This file is specific to the build-tree, and **is not relocatable**.

It is possible to create a suitable package configuration file and package
version file to define a package for the build tree which may be used without
installation.  Consumers of the build tree can simply ensure that the
:variable:`CMAKE_PREFIX_PATH` contains the build directory, or set the
``MathFunctions_DIR`` to ``<build_dir>/MathFunctions`` in the cache.

An example application of this feature is for building an executable on a host
platform when cross-compiling. The project containing the executable may be
built on the host platform and then the project that is being cross-compiled
for another platform may load it.

Building and Installing a Package
---------------------------------

At this point, we have generated a relocatable CMake configuration for our
project that can be used after the project has been installed. Let's try to
build the ``MathFunctions`` project:

.. code-block:: console

  mkdir MathFunctions_build
  cd MathFunctions_build
  cmake ../MathFunctions
  cmake --build .

In the build directory, notice that the file ``MathFunctionsTargets.cmake``
has been created in the ``cmake`` subdirectory.

Now install the project:

.. code-block:: console

    $ cmake --install . --prefix "/home/myuser/installdir"

Creating Relocatable Packages
=============================

Packages created by :command:`install(EXPORT)` are designed to be relocatable,
using paths relative to the location of the package itself. They must not
reference absolute paths of files on the machine where the package is built
that will not exist on the machines where the package may be installed.

When defining the interface of a target for ``EXPORT``, keep in mind that the
include directories should be specified as relative paths to the
:variable:`CMAKE_INSTALL_PREFIX` but should not explicitly include the
:variable:`CMAKE_INSTALL_PREFIX`:

.. code-block:: cmake

  target_include_directories(tgt INTERFACE
    # Wrong, not relocatable:
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_PREFIX}/include/TgtName>
  )

  target_include_directories(tgt INTERFACE
    # Ok, relocatable:
    $<INSTALL_INTERFACE:include/TgtName>
  )

The :genex:`$<INSTALL_PREFIX>` generator expression may be used as
a placeholder for the install prefix without resulting in a non-relocatable
package.  This is necessary if complex generator expressions are used:

.. code-block:: cmake

  target_include_directories(tgt INTERFACE
    # Ok, relocatable:
    $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/include/TgtName>
  )

This also applies to paths referencing external dependencies.
It is not advisable to populate any properties which may contain
paths, such as :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` or
:prop_tgt:`INTERFACE_LINK_LIBRARIES`, with paths relevant to dependencies.
For example, this code may not work well for a relocatable package:

.. code-block:: cmake

  target_link_libraries(MathFunctions INTERFACE
    ${Foo_LIBRARIES} ${Bar_LIBRARIES}
    )
  target_include_directories(MathFunctions INTERFACE
    "$<INSTALL_INTERFACE:${Foo_INCLUDE_DIRS};${Bar_INCLUDE_DIRS}>"
    )

The referenced variables may contain the absolute paths to libraries
and include directories **as found on the machine the package was made on**.
This would create a package with hard-coded paths to dependencies not
suitable for relocation.

Ideally such dependencies should be used through their own
:ref:`IMPORTED targets <Imported Targets>` that have their own
:prop_tgt:`IMPORTED_LOCATION` and usage requirement properties
such as :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` populated
appropriately.  Those imported targets may then be used with
the :command:`target_link_libraries` command for ``MathFunctions``:

.. code-block:: cmake

  target_link_libraries(MathFunctions INTERFACE Foo::Foo Bar::Bar)

With this approach the package references its external dependencies
only through the names of :ref:`IMPORTED targets <Imported Targets>`.
When a consumer uses the installed package, the consumer will run the
appropriate :command:`find_package` commands (via the ``find_dependency``
macro described above) to find the dependencies and populate the
imported targets with appropriate paths on their own machine.

Using the Package Configuration File
====================================

Now we're ready to create a project to use the installed ``MathFunctions``
library. In this section we will be using source code from
``Help\guide\importing-exporting\Downstream``. In this directory, there is a
source file called ``main.cc`` that uses the ``MathFunctions`` library to
calculate the square root of a given number and then prints the results:

.. literalinclude:: Downstream/main.cc
  :language: c++

As before, we'll start with the :command:`cmake_minimum_required` and
:command:`project` commands in the ``CMakeLists.txt`` file. For this project,
we'll also specify the C++ standard.

.. literalinclude:: Downstream/CMakeLists.txt
  :language: cmake
  :end-before: # find MathFunctions

We can use the :command:`find_package` command:

.. literalinclude:: Downstream/CMakeLists.txt
  :language: cmake
  :start-after: # find MathFunctions
  :end-before: # create executable

Create an executable:

.. literalinclude:: Downstream/CMakeLists.txt
  :language: cmake
  :start-after: # create executable
  :end-before: # use MathFunctions library

And link to the ``MathFunctions`` library:

.. literalinclude:: Downstream/CMakeLists.txt
  :language: cmake
  :start-after: # use MathFunctions library

That's it! Now let's try to build the ``Downstream`` project.

.. code-block:: console

  mkdir Downstream_build
  cd Downstream_build
  cmake ../Downstream
  cmake --build .

A warning may have appeared during CMake configuration:

.. code-block:: console

  CMake Warning at CMakeLists.txt:4 (find_package):
    By not providing "FindMathFunctions.cmake" in CMAKE_MODULE_PATH this
    project has asked CMake to find a package configuration file provided by
    "MathFunctions", but CMake did not find one.

    Could not find a package configuration file provided by "MathFunctions"
    with any of the following names:

      MathFunctionsConfig.cmake
      mathfunctions-config.cmake

    Add the installation prefix of "MathFunctions" to CMAKE_PREFIX_PATH or set
    "MathFunctions_DIR" to a directory containing one of the above files.  If
    "MathFunctions" provides a separate development package or SDK, be sure it
    has been installed.

Set the ``CMAKE_PREFIX_PATH`` to where MathFunctions was installed previously
and try again. Ensure that the newly created executable runs as expected.

Adding Components
=================

Let's edit the ``MathFunctions`` project to use components. The source code for
this section can be found in
``Help\guide\importing-exporting\MathFunctionsComponents``. The CMakeLists file
for this project adds two subdirectories: ``Addition`` and ``SquareRoot``.

.. literalinclude:: MathFunctionsComponents/CMakeLists.txt
  :language: cmake
  :end-before: # include CMakePackageConfigHelpers macro

Generate and install the package configuration and package version files:

.. literalinclude:: MathFunctionsComponents/CMakeLists.txt
  :language: cmake
  :start-after: # include CMakePackageConfigHelpers macro

If ``COMPONENTS`` are specified when the downstream uses
:command:`find_package`, they are listed in the
``<PackageName>_FIND_COMPONENTS`` variable. We can use this variable to verify
that all necessary component targets are included in ``Config.cmake.in``. At
the same time, this function will act as a custom ``check_required_components``
macro to ensure that the downstream only attempts to use supported components.

.. literalinclude:: MathFunctionsComponents/Config.cmake.in

Here, the ``MathFunctions_NOT_FOUND_MESSAGE`` is set to a diagnosis that the
package could not be found because an invalid component was specified. This
message variable can be set for any case where the ``_FOUND`` variable is set
to ``False``, and will be displayed to the user.

The ``Addition`` and ``SquareRoot`` directories are similar. Let's look at one
of the CMakeLists files:

.. literalinclude:: MathFunctionsComponents/SquareRoot/CMakeLists.txt
  :language: cmake

Now we can build the project as described in earlier sections. To test using
this package, we can use the project in
``Help\guide\importing-exporting\DownstreamComponents``. There's two
differences from the previous ``Downstream`` project. First, we need to find
the package components. Change the ``find_package`` line from:

.. literalinclude:: Downstream/CMakeLists.txt
  :language: cmake
  :start-after: # find MathFunctions
  :end-before: # create executable

To:

.. literalinclude:: DownstreamComponents/CMakeLists.txt
  :language: cmake
  :start-after: # find MathFunctions
  :end-before: # create executable

and the ``target_link_libraries`` line from:

.. literalinclude:: Downstream/CMakeLists.txt
  :language: cmake
  :start-after: # use MathFunctions library

To:

.. literalinclude:: DownstreamComponents/CMakeLists.txt
  :language: cmake
  :start-after: # use MathFunctions library
  :end-before: # Workaround for GCC on AIX to avoid -isystem

In ``main.cc``, replace ``#include MathFunctions.h`` with:

.. literalinclude:: DownstreamComponents/main.cc
  :language: c
  :start-after: #include <string>
  :end-before: int main

Finally, use the ``Addition`` library:

.. literalinclude:: DownstreamComponents/main.cc
  :language: c
  :start-after: // calculate sum
  :end-before: return 0;

Build the ``Downstream`` project and confirm that it can find and use the
package components.



/P/🚀 guide/ide-integration/index.rst
===================================================


IDE Integration Guide
*********************

.. only:: html

  .. contents::

Introduction
============

Integrated development environments (IDEs) may want to integrate with CMake to
improve the development experience for CMake users. This document lays out the
recommended best practices for such integration.

Bundling
========

Many IDE vendors will want to bundle a copy of CMake with their IDE. IDEs that
bundle CMake should present the user with the option of using an external CMake
installation instead of the bundled one, in case the bundled copy becomes
outdated and the user wants to use a newer version.

While IDE vendors may be tempted to bundle different versions of CMake with
their application, such practice is not recommended. CMake has strong
guarantees of backwards compatibility, and there is no reason not to use a
newer version of CMake than what a project requires, or indeed, the very latest
version. Therefore, it is recommended that IDE vendors that bundle CMake with
their application always include the very latest patch version of CMake
available at the time of release.

As a suggestion, IDEs may also ship a copy of the Ninja buildsystem alongside
CMake. Ninja is highly performant and well-supported on all platforms that
support CMake. IDEs that bundle Ninja should use Ninja 1.10 or later, which
contains features needed to support Fortran builds.

Presets
=======

CMake supports a file format called ``CMakePresets.json``, and its
user-specific counterpart, ``CMakeUserPresets.json``. This file contains
information on the various configure presets that a user may want. Each preset
may have a different compiler, build flags, etc. The details of this format are
explained in the :manual:`cmake(1)` manual.

IDE vendors are encouraged to read and evaluate this file the same way CMake
does, and present the user with the presets listed in the file. Users should be
able to see (and possibly edit) the CMake cache variables, environment
variables, and command line options that are defined for a given preset. The
IDE should then construct the list of appropriate :manual:`cmake(1)` command
line arguments based on these settings, rather than using the
:option:`--preset= <cmake --preset>` option directly. The
:option:`--preset= <cmake --preset>` option is intended only as a convenient
frontend for command line users, and should not be used by the IDE.

For example, if a preset named ``ninja`` specifies ``Ninja`` as the generator
and ``${sourceDir}/build`` as the build directory, instead of running:

.. code-block:: console

  cmake -S /path/to/source --preset=ninja

the IDE should instead calculate the settings of the ``ninja`` preset, and then
run:

.. code-block:: console

  cmake -S /path/to/source -B /path/to/source/build -G Ninja

In cases where a preset contains lots of cache variables, and passing all of
them as :option:`-D <cmake -D>` flags would cause the command line length limit
of the platform to be exceeded, the IDE should instead construct a temporary
cache script and pass it with the :option:`-C <cmake -C>` flag.

While reading, parsing, and evaluating the contents of ``CMakePresets.json`` is
straightforward, it is not trivial. In addition to the documentation, IDE
vendors may also wish to refer to the CMake source code and test cases for a
better understanding of how to implement the format.
:download:`This file <../../manual/presets/schema.json>` provides a
machine-readable JSON schema for the ``CMakePresets.json`` format that IDE
vendors may find useful for validation and providing editing assistance.

Configuring
===========

IDEs that invoke :manual:`cmake(1)` to run the configure step may wish to
receive information about the artifacts that the build will produce, as well
as the include directories, compile definitions, etc. used to build the
artifacts. Such information can be obtained by using the
:manual:`File API <cmake-file-api(7)>`. The manual page for the File API
contains more information about the API and how to invoke it.
:manual:`Server mode <cmake-server(7)>` was removed as of CMake 3.20 and
should not be used on CMake 3.14 or later.

IDEs should avoid creating more build trees than necessary, and only create
multiple build trees if the user wishes to switch to a different compiler,
use different compile flags, etc. In particular, IDEs should NOT create
multiple single-config build trees which all have the same properties except
for a differing :variable:`CMAKE_BUILD_TYPE`, effectively creating a
multi-config environment. Instead, the :generator:`Ninja Multi-Config`
generator, in conjunction with the :manual:`File API <cmake-file-api(7)>` to
get the list of build configurations, should be used for this purpose.

IDEs should not use the "extra generators" with Makefile or Ninja generators,
which generate IDE project files in addition to the Makefile or Ninja files.
Instead the :manual:`File API <cmake-file-api(7)>` should be used to get the
list of build artifacts.

Building
========

If a Makefile or Ninja generator is used to generate the build tree, it is not
recommended to invoke ``make`` or ``ninja`` directly. Instead, it is
recommended that the IDE invoke :manual:`cmake(1)` with the
:option:`--build <cmake --build>` argument, which will in turn invoke the
appropriate build tool.

If an IDE project generator is used, such as :generator:`Xcode` or one of the
Visual Studio generators, and the IDE understands the project format used, the
IDE should read the project file and build it the same way it would otherwise.

The :manual:`File API <cmake-file-api(7)>` can be used to obtain a list of
build configurations from the build tree, and the IDE should present this list
to the user to select a build configuration.

Testing
=======

:manual:`ctest(1)` supports outputting a JSON format with information about the
available tests and test configurations. IDEs which want to run CTest should
obtain this information and use it to present the user with a list of tests.

IDEs should not invoke the ``test`` target of the generated buildsystem.
Instead, they should invoke :manual:`ctest(1)` directly.

IDEs with CMake integration
===========================

The following IDEs support CMake natively:

* `CLion`_
* `KDevelop`_
* `QtCreator`_
* `Vim`_ (via a plugin)
* `Visual Studio`_
* `VSCode`_ (via a plugin)

.. _CLion: https://www.jetbrains.com/clion/
.. _KDevelop: https://kdevelop.org/
.. _QtCreator: https://www.qt.io/product/development-tools
.. _Vim: https://www.vim.org/
.. _Visual Studio: https://visualstudio.microsoft.com/
.. _VSCode: https://code.visualstudio.com/

Additionally, CMake has builtin support for some IDEs:

* :ref:`IDE Build Tool Generators`:
  Generate IDE native build systems such as Visual Studio or Xcode.
* :ref:`Extra Generators`:
  Extend :ref:`Command-Line Build Tool Generators` to generate IDE
  project files that hook into the command-line build system.
  Superseded by the :manual:`File API <cmake-file-api(7)>`.



/P/🚀 release/index.rst
=====================================


:orphan:

CMake Release Notes
*******************

.. 
  This file should include the adjacent "dev.txt" file
  in development versions but not in release versions.

Releases
========

.. toctree::
   :maxdepth: 1

   3.29 <3.29>
   3.28 <3.28>
   3.27 <3.27>
   3.26 <3.26>
   3.25 <3.25>
   3.24 <3.24>
   3.23 <3.23>
   3.22 <3.22>
   3.21 <3.21>
   3.20 <3.20>
   3.19 <3.19>
   3.18 <3.18>
   3.17 <3.17>
   3.16 <3.16>
   3.15 <3.15>
   3.14 <3.14>
   3.13 <3.13>
   3.12 <3.12>
   3.11 <3.11>
   3.10 <3.10>
   3.9 <3.9>
   3.8 <3.8>
   3.7 <3.7>
   3.6 <3.6>
   3.5 <3.5>
   3.4 <3.4>
   3.3 <3.3>
   3.2 <3.2>
   3.1 <3.1>
   3.0 <3.0>



/P/🚀 release/3.29.rst
====================================


CMake 3.29 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.28 include the following.

New Features
============

Command-Line
------------

* :manual:`cmake(1)` :option:`-E cat <cmake-E cat>` can now print the standard
  input by passing the ``-`` argument.

Generators
----------

* :ref:`Visual Studio Generators` now support selecting between the
  Intel oneAPI Fortran compiler (``ifx``) and the Intel classic Fortran
  compiler (``ifort``) using a ``fortran=`` field in
  :variable:`CMAKE_GENERATOR_TOOLSET`.

File-Based API
--------------

* The :manual:`cmake-file-api(7)` "codemodel" version 2 ``version`` field has
  been updated to 2.7.

* The :manual:`cmake-file-api(7)` "codemodel" version 2 "target" object gained
  a new "launchers" field.

Compilers
---------

* The LLVM/Clang GNU-like frontend on Windows (``clang++``) may now be used
  to compile ``CUDA`` language sources.

* Compilers targeting the GNU ABI on Windows (MinGW) may now be used to
  compile Objective C (``OBJC``) and Objective C++ (``OBJCXX``).  These
  include GNU compilers (``gcc`` and ``g++``) and the LLVM/Clang GNU-like
  frontends (``clang`` and ``clang++``).

* TI Clang-based compilers are now supported with
  :variable:`compiler id <CMAKE_<LANG>_COMPILER_ID>` ``TIClang``.

Commands
--------

* The :ref:`add_custom_command(TARGET) <add_custom_command(TARGET)>`
  signature now supports adding build events through :ref:`Alias Targets`.

* The :command:`cmake_language(EXIT)` sub-command was added to terminate
  :option:`cmake -P` scripts with a specified exit code.

* The :command:`export(SETUP)` sub-command was added to configure export sets.
  Its ``TARGET`` option's ``XCFRAMEWORK_LOCATION`` setting specifies the
  location of a ``.xcframework`` that can be substituted for an installed
  target.

* The :command:`if` command gained new tests ``IS_READABLE``, ``IS_WRITABLE``
  and ``IS_EXECUTABLE`` to check file or directory permissions.

Variables
---------

* The :envvar:`CMAKE_INSTALL_PREFIX` environment variable was added to
  provide a default value for the :variable:`CMAKE_INSTALL_PREFIX` variable.

* The :variable:`CMAKE_LINKER_TYPE` variable and corresponding
  :prop_tgt:`LINKER_TYPE` target property were added to specify
  what linker to use with some toolchains.

* The :variable:`CMAKE_<LANG>_COMPILER_LINKER`,
  :variable:`CMAKE_<LANG>_COMPILER_LINKER_ID`,
  :variable:`CMAKE_<LANG>_COMPILER_LINKER_VERSION` and
  :variable:`CMAKE_<LANG>_COMPILER_LINKER_FRONTEND_VARIANT` variables
  were added to describe the linker used by the language's link step.

* The :variable:`CMAKE_PROJECT_INCLUDE`,
  :variable:`CMAKE_PROJECT_INCLUDE_BEFORE`,
  :variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE`, and
  :variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE` variables learned
  to support a :ref:`semicolon-separated list <CMake Language Lists>` of
  CMake language files to be included sequentially. These variables can also
  reference module names to be found in :variable:`CMAKE_MODULE_PATH` or
  builtin to CMake.

* The :variable:`CMAKE_SKIP_TEST_ALL_DEPENDENCY` variable was added
  to control whether the ``test`` (or ``RUN_TESTS``) buildsystem
  target depends on the ``all`` (or ``ALL_BUILD``) target.

* A :variable:`CMAKE_TEST_LAUNCHER` variable and corresponding
  :prop_tgt:`TEST_LAUNCHER` target property were added to specify
  a launcher to be used by executable targets when invoked by
  tests added by the :command:`add_test` command.

Properties
----------

* The :prop_tgt:`CROSSCOMPILING_EMULATOR` target property now
  supports :manual:`generator expressions <cmake-generator-expressions(7)>`.

* The :prop_tgt:`UNITY_BUILD` target property now supports the
  Objective C (``OBJC``) and Objective C++ (``OBJCXX``) languages.

* The :prop_tgt:`XCODE_EMBED_XPC_SERVICES <XCODE_EMBED_<type>>` target property
  was added to tell the :generator:`Xcode` generator what targets to put in
  the ``Embed XPC Resources`` build phase.

Modules
-------

* The :module:`CMakePackageConfigHelpers` module gained new
  :command:`generate_apple_platform_selection_file` and
  :command:`generate_apple_architecture_selection_file` functions, which can
  be used to generate a file that includes another Apple-platform-specific
  file or the includes an architecture-specific implementation of a package
  for an Apple platform, respectively.

* The :module:`FindOpenGL` module learned to find a GLU include
  directory different than the GL include directory.  A new
  ``OPENGL_INCLUDE_DIRS`` result variable provides all include
  directories.

CTest
-----

* :manual:`ctest(1)` gained a :option:`--http-header <ctest --http-header>`
  option to add custom headers on submission to CDash.

* :manual:`ctest(1)` gained the :option:`--tests-from-file <ctest
  --tests-from-file>` and :option:`--exclude-from-file <ctest
  --exclude-from-file>` options to run or exclude tests named in a file.

* :manual:`ctest(1)` now supports :ref:`job server integration
  <ctest-job-server-integration>` on POSIX systems.

* The :option:`ctest -j` option may now be given without a value to let
  ctest choose a default level of parallelism, or with ``0`` to let ctest
  use unbounded parallelism.  The corresponding :envvar:`CTEST_PARALLEL_LEVEL`
  environment variable, if set to the empty string, is now equivalent to
  passing ``-j`` with no value.

* The :command:`ctest_test` command gained options
  ``INCLUDE_FROM_FILE`` and ``EXCLUDE_FROM_FILE`` to run or exclude
  tests named in a file.

CPack
-----

* The :cpack_gen:`CPack DEB Generator` :variable:`CPACK_DEBIAN_FILE_NAME`
  variable may now be set without any suffix, and the ``.deb`` suffix
  will be added automatically.

* The :cpack_gen:`CPack RPM Generator` :variable:`CPACK_RPM_FILE_NAME`
  variable may now be set without any suffix, and the ``.rpm`` suffix
  will be added automatically.

* The :cpack_gen:`CPack WIX Generator` gained a new variable,
  :variable:`CPACK_WIX_INSTALL_SCOPE`, to control the
  ``InstallScope`` property of WiX MSI installers.

Other Changes
=============

* CMake learned to de-duplicate libraries on link lines based on linker
  capabilities.  See policy :policy:`CMP0156`.

* The :command:`add_test` command now honors
  :variable:`CMAKE_CROSSCOMPILING_EMULATOR` only when cross-compiling.
  See policy :policy:`CMP0158`.

* On Windows, when targeting the MSVC ABI, the :command:`find_library` command
  now accepts ``.a`` file names after first considering ``.lib``.  This is
  symmetric with existing behavior when targeting the GNU ABI, in which the
  command accepts ``.lib`` file names after first considering ``.a``.

* On Windows, when targeting the MSVC ABI, the :command:`find_library` command
  now considers ``.dll.lib`` file names before ``.lib``.  This is the default
  suffix for DLL import libraries created by Rust toolchains for the MSVC ABI.

* The :generator:`Ninja` and :generator:`NMake Makefiles` generators now use
  the ``-external:I`` flag for system includes when using IntelLLVM as of
  version 2021.4. The ``-external:W0`` flag is also used as of version 2022.2.

* The :command:`create_test_sourcelist` command now provides a full path to
  the generated driver source file.

* The :variable:`CPACK_PRODUCTBUILD_DOMAINS` variable now defaults to true.
  See policy :policy:`CMP0161`.

* The :cpack_gen:`CPack WIX Generator` now produces WiX MSI installers
  that create start menu and uninstall entries for all users by default,
  as documented by the :variable:`CPACK_WIX_INSTALL_SCOPE` variable
  ``perMachine`` value.  Previously, without a custom WiX template,
  it produced installers that would only create start menu and uninstall
  entries for the current user, even though they install for all users.



/P/🚀 release/3.28.rst
====================================


CMake 3.28 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.27 include the following.

New Features
============

Languages
---------

* C++ 20 named modules are now supported by :ref:`Ninja Generators`
  and :ref:`Visual Studio Generators` for VS 2022 and newer, in combination
  with the MSVC 14.34 toolset (provided with VS 17.4) and newer, LLVM/Clang
  16.0 and newer, and GCC 14 (after the 2023-09-20 daily bump) and newer.
  See :manual:`cmake-cxxmodules(7)` for details.

* ``HIP`` language code may now be compiled for NVIDIA GPUs
  using the NVIDIA CUDA Compiler (NVCC).
  See the :variable:`CMAKE_HIP_PLATFORM` variable.

Platforms
---------

* On Apple platforms, ``.xcframework`` folders are now supported:

  * The :command:`find_library` command now finds ``.xcframework`` folders.

  * The :command:`target_link_libraries` command now supports
    linking against a ``.xcframework`` folder.

  * The :prop_tgt:`IMPORTED_LOCATION` target property of an imported
    library target may now be the path to a ``.xcframework`` folder.

* Apple visionOS and its ``xros`` and ``xrsimulator`` SDKs are now supported.
  Compiling for Apple visionOS can be requested by setting
  :variable:`CMAKE_SYSTEM_NAME` to ``visionOS``.
  See :ref:`Cross Compiling for iOS, tvOS, visionOS, or watchOS`
  for more information.

Presets
-------

* :manual:`cmake-presets(7)` files now support schema version ``8``.
  It adds support for a ``$schema`` field.

Compilers
---------

* Cray Clang-based compilers are now supported with
  :variable:`compiler id <CMAKE_<LANG>_COMPILER_ID>` ``CrayClang``.

* The OrangeC compiler is now supported with
  :variable:`compiler id <CMAKE_<LANG>_COMPILER_ID>` ``OrangeC``.

Commands
--------

* The :command:`add_custom_command` and :command:`add_custom_target`
  commands gained a ``JOB_SERVER_AWARE`` option.

* The :command:`cmake_host_system_information` command gained a
  ``MSYSTEM_PREFIX`` query for the installation prefix of a MSYS
  or MinGW development environment on Windows hosts.

* The :command:`set_property` command ``TEST`` mode gained a ``DIRECTORY``
  option to set properties on tests in other directories.

* The :command:`set_tests_properties` command gained a ``DIRECTORY``
  option to set properties on tests in other directories.

* The :command:`get_property` command ``TEST`` mode gained a ``DIRECTORY``
  option to get properties on tests in other directories.

* The :command:`get_test_property` command gained a ``DIRECTORY``
  option to get properties on tests in other directories.

Variables
---------

* The :envvar:`CMAKE_CROSSCOMPILING_EMULATOR` environment variable
  was added to initialize the :variable:`CMAKE_CROSSCOMPILING_EMULATOR`
  cache variable.

* The :variable:`CMAKE_HIP_PLATFORM` variable was added to specify
  the GPU platform for which HIP language sources are to be compiled
  (``amd`` or ``nvidia``).

Properties
----------

* On imported shared libraries, the :prop_tgt:`IMPORTED_IMPLIB` target
  property may now be used without :prop_tgt:`IMPORTED_LOCATION`.
  This can be used to represent a stub library whose location should not
  be added as a runtime search path to dependents that link it.

* The :prop_tgt:`IMPORTED_LOCATION` property of a macOS framework
  may now be a path to the ``.framework`` folder itself.

* The :prop_tgt:`XCODE_EMBED_RESOURCES <XCODE_EMBED_<type>>` target property
  was added to tell the :generator:`Xcode` generator what targets to put in
  the ``Embed Resources`` build phase.

Modules
-------

* The :module:`ExternalProject` module now includes the
  ``BUILD_JOB_SERVER_AWARE`` option for the
  :command:`ExternalProject_Add` command. This option enables
  the integration of the GNU Make job server when using an
  explicit ``BUILD_COMMAND`` with certain :ref:`Makefile Generators`.
  Additionally, the :command:`ExternalProject_Add_Step` command
  has been updated to support the new ``JOB_SERVER_AWARE`` option.

* The :module:`FetchContent` module's :command:`FetchContent_Declare` command
  gained an ``EXCLUDE_FROM_ALL`` option, which propagates through to the
  :command:`add_subdirectory` call made by
  :command:`FetchContent_MakeAvailable` for the dependency.

* The :module:`FindCURL` module gained a ``CURL_USE_STATIC_LIBS`` hint
  to select static libraries.

* The :module:`FindEXPAT` module gained an ``EXPAT_USE_STATIC_LIBS`` hint
  to select static libraries.

* The :module:`FindPkgConfig` module :command:`pkg_get_variable` command
  gained a ``DEFINE_VARIABLES`` option to pass variables to ``pkg-config``.

Generator Expressions
---------------------

* The :manual:`generator expressions <cmake-generator-expressions(7)>`
  :genex:`$<IF:...>`, :genex:`$<AND:...>`, and :genex:`$<OR:...>`
  short-circuit to avoid unnecessary evaluation of parameters.

CTest
-----

* CTest may now take a :ref:`dynamically-generated resource spec file
  <ctest-resource-dynamically-generated-spec-file>`, which can be specified by the
  :prop_test:`GENERATED_RESOURCE_SPEC_FILE` test property.

Deprecated and Removed Features
===============================

* The :command:`exec_program` command, which has been deprecated
  since CMake 3.0, has been removed by policy :policy:`CMP0153`.
  Use the :command:`execute_process` command instead.

* The :generator:`Visual Studio 11 2012` generator has been removed.

* The :generator:`Visual Studio 12 2013` generator is now deprecated
  and will be removed in a future version of CMake.

* The :prop_tgt:`IOS_INSTALL_COMBINED` target property and corresponding
  :variable:`CMAKE_IOS_INSTALL_COMBINED` variable have been deprecated.
  Their functionality does not make sense on Apple Silicon hosts.

* The :generator:`Xcode` generator will now issue a fatal error if
  the Legacy Build System has been selected for Xcode 14 and
  newer. Those Xcode versions dropped support for the Legacy Build
  System and expect the project to be set-up for their current
  Build System.

Other Changes
=============

* Generated files, in targets using :ref:`file sets`, are now considered
  private by default.  Generated public headers must be specified using
  file sets.  This allows :ref:`Ninja Generators` to produce more
  efficient build graphs.  See policy :policy:`CMP0154`.

* The :command:`find_library`, :command:`find_path`, and :command:`find_file`
  commands no longer search in installation prefixes derived from the ``PATH``
  environment variable.  This behavior was added in CMake 3.3 to support
  MSYS and MinGW (``MSYSTEM``) development environments on Windows, but
  it can search undesired prefixes that happen to be in the ``PATH`` for
  unrelated reasons.  Users who keep some ``<prefix>/bin`` directories in
  the ``PATH`` just for their tools do not necessarily want any corresponding
  ``<prefix>/lib`` or ``<prefix>/include`` directories searched.
  The behavior was reverted for non-Windows platforms by CMake 3.6.
  Now it has been reverted on Windows platforms too.

  One may set the ``CMAKE_PREFIX_PATH`` environment variable with a
  :ref:`semicolon-separated list <CMake Language Lists>` of prefixes
  that are to be searched.

* When using MinGW tools in a ``MSYSTEM`` environment on Windows,
  the ``$MSYSTEM_PREFIX/local`` and ``$MSYSTEM_PREFIX`` prefixes are
  now added to :variable:`CMAKE_SYSTEM_PREFIX_PATH`.

* The precompiled Linux ``x86_64`` binaries provided on
  `cmake.org <https://cmake.org/download/>`_ now require GLIBC 2.17 or higher.

Updates
=======

Changes made since CMake 3.28.0 include the following.

3.28.1, 3.28.2, 3.28.3
----------------------

* These versions made no changes to documented features or interfaces.
  Some implementation updates were made to support ecosystem changes
  and/or fix regressions.

3.28.4
------

* Apple visionOS support has been updated for the official Xcode 15.2
  release of the  ``xros`` and ``xrsimulator`` SDKs.



/P/🚀 release/3.27.rst
====================================


CMake 3.27 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.26 include the following.

New Features
============

Debugger
--------

* :manual:`cmake(1)` now supports interactive debugging of the CMake language.
  See the :option:`--debugger <cmake --debugger>` option.

Presets
-------

* :manual:`cmake-presets(7)` files now support schema version ``7``.

* :manual:`cmake-presets(7)` now supports ``$penv{}`` macro expansion
  in ``include`` fields.

Generators
----------

* The :ref:`Makefile <Makefile Generators>` and :ref:`Ninja <Ninja Generators>`
  generators now support using the ``--dependency-file`` linker flag,
  added by GNU Binutils 2.35 and LLVM's LLD 12.0.0, so that files read by the
  linker will cause a relink if they change (typically modified timestamps).
  See the :variable:`CMAKE_LINK_DEPENDS_USE_LINKER` variable.

* The :ref:`Visual Studio Generators` for VS 14 (2015) and above learned to
  select the Windows SDK version explicitly using a ``version=`` field
  in the :variable:`CMAKE_GENERATOR_PLATFORM` variable.
  See :ref:`Visual Studio Platform Selection`.

Languages
---------

* The ``CXX`` language now treats source file extensions
  ``.ccm``, ``.cxxm``, and ``.c++m`` as C++.

File-Based API
--------------

* The :manual:`cmake-file-api(7)` "codemodel" version 2 ``version`` field has
  been updated to 2.6.

* The :manual:`cmake-file-api(7)` "codemodel" version 2 "target" object gained
  a new "frameworks" field in the "compileGroups" objects.

Platforms
---------

* Apple text-based stubs (i.e. ``.tbd`` files) may now be created for shared
  libraries on macOS.  See the :prop_tgt:`ENABLE_EXPORTS` property.

Commands
--------

* The :command:`add_custom_command` command gained a new
  ``DEPENDS_EXPLICIT_ONLY`` option to tell the :ref:`Ninja Generators`
  not to add any dependencies implied by the target to which it is
  attached.  The :variable:`CMAKE_ADD_CUSTOM_COMMAND_DEPENDS_EXPLICIT_ONLY`
  variable was added to enable ``DEPENDS_EXPLICIT_ONLY`` on all calls to
  :command:`add_custom_command` command.

* The :command:`cmake_file_api` command was added for projects to add
  :manual:`CMake file API <cmake-file-api(7)>` queries for the current
  CMake run.

* The :command:`find_package` command now searches prefixes specified by
  upper-case :variable:`<PACKAGENAME>_ROOT` CMake variables and upper-case
  :envvar:`<PACKAGENAME>_ROOT` environment variables.
  See policy :policy:`CMP0144`.

* The :command:`install(CODE)` and :command:`install(SCRIPT)` commands
  now support the :genex:`$<INSTALL_PREFIX>` generator expression.

Variables
---------

* The :variable:`CMAKE_DLL_NAME_WITH_SOVERSION` variable and associated
  :prop_tgt:`DLL_NAME_WITH_SOVERSION` target property were added to
  optionally append the :prop_tgt:`SOVERSION` to the filename of the
  ``.dll`` part of a shared library on Windows.

* Variables :variable:`CMAKE_VS_DEBUGGER_COMMAND`,
  :variable:`CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS`,
  :variable:`CMAKE_VS_DEBUGGER_ENVIRONMENT`, and
  :variable:`CMAKE_VS_DEBUGGER_WORKING_DIRECTORY` were added to initialize
  corresponding target properties.

* The :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION` variable
  was added to initialize the :prop_tgt:`VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION`
  target property on all targets when they are created.

Properties
----------

* A :prop_tgt:`CUDA_CUBIN_COMPILATION` target property was added to
  :ref:`Object Libraries` to support compiling to ``.cubin`` files
  instead of host object files. Currently only supported with NVIDIA.

* A :prop_tgt:`CUDA_FATBIN_COMPILATION` target property was added to
  :ref:`Object Libraries` to support compiling to ``.fatbin`` files
  instead of host object files. Currently only supported with NVIDIA.

* A :prop_tgt:`CUDA_OPTIX_COMPILATION` target property was added to
  :ref:`Object Libraries` to support compiling to ``.optixir`` files
  instead of host object files. Currently only supported with NVIDIA.

* The :prop_tgt:`<LANG>_CLANG_TIDY`, :prop_tgt:`<LANG>_CPPCHECK`,
  :prop_tgt:`<LANG>_CPPLINT`, and :prop_tgt:`<LANG>_INCLUDE_WHAT_YOU_USE`,
  target properties now support
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

* The :prop_tgt:`<LANG>_LINKER_LAUNCHER` target property now supports
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

* The :prop_sf:`SKIP_LINTING` source file property was added to suppress
  target-wide code checks on specific sources.

Modules
-------

* The :module:`FindCUDAToolkit` module now provides an imported target for
  ``cudla``, and imported targets for CUPTI's ``nvperf`` and ``pcsampling``
  components.

* The :module:`FindDoxygen` module's :command:`doxygen_add_docs` command gained
  a ``CONFIG_FILE`` option to specify a custom doxygen configuration file.

* The :module:`FindOpenGL` module gained support for components
  ``GLES2`` and ``GLES3``.

* The :module:`FindwxWidgets` module now provides an imported target.

Generator Expressions
---------------------

* The :genex:`COMPILE_ONLY` generator expression was added to specify
  compilation usage requirements without any linking requirements.

* ``$<LIST:...>`` generator expressions were added for
  :ref:`query <GenEx List Queries>`,
  :ref:`transformation <GenEx List Transformations>`, and
  :ref:`ordering <GenEx List Ordering>` operations on
  :ref:`lists <CMake Language Lists>`.

* ``$<PATH:...>`` generator expressions for
  :ref:`decomposition <GenEx Path Decomposition>` and
  :ref:`transformation <GenEx Path Transformations>` operations learned
  to process :ref:`lists <CMake Language Lists>` of paths element-wise.

* The :genex:`TARGET_IMPORT_FILE`, :genex:`TARGET_IMPORT_FILE_BASE_NAME`,
  :genex:`TARGET_IMPORT_FILE_PREFIX`, :genex:`TARGET_IMPORT_FILE_SUFFIX`,
  :genex:`TARGET_IMPORT_FILE_NAME`, and :genex:`TARGET_IMPORT_FILE_DIR`
  generator expressions were added.  These expand to details about the
  linker import file for a target.

* The :genex:`TARGET_RUNTIME_DLL_DIRS` generator expression was added.
  It expands to a list of the directories containing DLLs in
  :genex:`TARGET_RUNTIME_DLLS`.

Autogen
-------

* The :variable:`CMAKE_AUTOMOC_EXECUTABLE`,
  :variable:`CMAKE_AUTORCC_EXECUTABLE`, and
  :variable:`CMAKE_AUTOUIC_EXECUTABLE` variables were added to initialize the
  corresponding target properties as targets are created.

* The :prop_tgt:`AUTOGEN_USE_SYSTEM_INCLUDE` target property and
  corresponding :variable:`CMAKE_AUTOGEN_USE_SYSTEM_INCLUDE` variable were
  added to explicitly control whether autogen headers are
  considered system headers.

* The :prop_tgt:`INTERFACE_AUTOMOC_MACRO_NAMES` target property was added to
  specify macro names for ``moc`` as a transitive usage requirement.

CTest
-----

* The :prop_test:`TIMEOUT_SIGNAL_NAME` and
  :prop_test:`TIMEOUT_SIGNAL_GRACE_PERIOD` test properties were added
  to specify a POSIX signal to send to a test process when its timeout
  is reached.

CPack
-----

* The :cpack_gen:`CPack Inno Setup Generator` was added to package using
  Inno Setup.

Deprecated and Removed Features
===============================

* Compatibility with versions of CMake older than 3.5 is now deprecated
  and will be removed from a future version.  Calls to
  :command:`cmake_minimum_required` or :command:`cmake_policy` that set
  the policy version to an older value now issue a deprecation diagnostic.

* The :ref:`Extra Generators` have been deprecated.  IDEs may use the
  :manual:`cmake-file-api(7)` to view CMake-generated project build trees.

* The :module:`FindCUDA` module, which has been deprecated since CMake 3.10,
  has been removed by policy :policy:`CMP0146`.  Port projects to CMake's
  first-class ``CUDA`` language support.

* The :module:`FindPythonInterp` and :module:`FindPythonLibs` modules,
  which have been deprecated since CMake 3.12, have been removed by
  policy :policy:`CMP0148`.  Port projects to :module:`FindPython3`,
  :module:`FindPython2`, or :module:`FindPython`.

* The :module:`Dart` and :module:`FindDart` modules have been deprecated via
  policy :policy:`CMP0145`.  Port projects to the :module:`CTest` module.

* The :generator:`Visual Studio 9 2008` generator is now deprecated
  and will be removed in a future version of CMake.

Other Changes
=============

* ``cmake --build $dir --verbose`` will now print the working directory and
  command line used to perform the build.

* The :module:`ExternalProject` and :module:`FetchContent` modules
  now resolve relative ``GIT_REPOSITORY`` paths as relative to the
  parent project's remote, not as a relative local file system path.
  See :policy:`CMP0150`.

* The :module:`ExternalProject` ``configure`` step no longer re-runs on
  every build when the ``UPDATE_DISCONNECTED`` option is enabled.
  It will only re-run if details of the ``download``, ``update``,
  or ``patch`` step change.

* The :module:`ExternalProject` ``update`` and ``patch`` steps now always
  re-run if any of their details change, even if the ``UPDATE_DISCONNECTED``
  option is enabled.  If using the ``GIT`` download method, and the ``GIT_TAG``
  is changed to a commit that is not already known locally, an error is now
  issued instead of silently using the previous ``GIT_TAG``.

* The :module:`FindPython`, :module:`FindPython2` and :module:`FindPython3`
  modules now support the Windows ARM64 platform.

* The :command:`file(GET_RUNTIME_DEPENDENCIES)` command now case-preserves
  DLL names reported on Windows.  They are still converted to lowercase
  for filter matching.

* The :prop_tgt:`SYSTEM` target property is now honored for Apple Frameworks.

* :ref:`Visual Studio Generators`, for VS 15.8 (2017) and newer, now
  build custom commands in parallel.  See policy :policy:`CMP0147`.

* :ref:`Visual Studio Generators` for VS 14 (2015) and above now prefer
  to select the latest Windows SDK version.  See policy :policy:`CMP0149`.

Updates
=======

Changes made since CMake 3.27.0 include the following.

3.27.1
------

* This version made no changes to documented features or interfaces.
  Some implementation updates were made to support ecosystem changes
  and/or fix regressions.

3.27.2
------

* :ref:`Visual Studio Generators` for VS 14 (2015) and above now prefer to
  select the latest Windows SDK, as documented by policy :policy:`CMP0149`,
  when targeting any version of Windows.  In CMake 3.27.[0-1] the
  preference was limited to targeting Windows 10 and above.

* :ref:`Visual Studio Generators` for VS 14 (2015) and above now support
  using ``version=8.1`` in the :variable:`CMAKE_GENERATOR_PLATFORM` variable
  to select the Windows 8.1 SDK.  In CMake 3.27.[0-1] the ``version=`` field
  was limited to selecting Windows 10 SDKs.

3.27.3, 3.27.4, 3.27.5, 3.27.6, 3.27.7, 3.27.8
----------------------------------------------

* These versions made no changes to documented features or interfaces.
  Some implementation updates were made to support ecosystem changes
  and/or fix regressions.

3.27.9
------

* The :manual:`cmake-file-api(7)` "codemodel" version 2 "target" object
  ``fileSets`` field was introduced by CMake 3.26.0 with entries of its
  ``baseDirectories`` member incorrectly expressed as absolute paths
  even if they are inside the top-level source directory.  This was
  fixed in CMake 3.26.6 and has now been fixed in 3.27.9.  Clients must
  be updated to expect relative paths under the top-level source directory.

* Fortran module dependency scanning in :ref:`Ninja Generators` was updated
  by CMake 3.27.0 to use exact collation dependencies.  This was supposed
  to fix subtle rebuild failures when moving module sources among targets.
  Since then, several cases have been found in which exact collation
  dependencies were incorrectly computed when using :ref:`Object Libraries`.
  Some of these cases were incrementally fixed through the 3.27.x patch
  series, but additional more subtle cases have since been found.  In order
  to avoid further churn in the 3.27 release series, the original change has
  been reverted and deferred to a future version of CMake.



/P/🚀 release/3.26.rst
====================================


CMake 3.26 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.25 include the following.

New Features
============

Languages
---------

* The ``ASM_MARMASM`` language was added to support the
  Microsoft ARM assembler language.

Command-Line
------------

* The :option:`cmake -E copy <cmake-E copy>` command-line tool now
  supports a ``-t`` argument.

* The :option:`cmake -E copy_directory_if_different
  <cmake-E copy_directory_if_different>` command-line tool was added.

Configure Log
-------------

* CMake now writes a YAML log of configure-time checks to
  ``CMakeFiles/CMakeConfigureLog.yaml`` under the top of the build tree.
  See the :manual:`cmake-configure-log(7)` manual.

File-Based API
--------------

* The :manual:`cmake-file-api(7)` "codemodel" version 2 ``version`` field has
  been updated to 2.5.

* The :manual:`cmake-file-api(7)` "codemodel" version 2 "target" object
  gained a new ``fileSets`` field and associated ``fileSetIndex``
  field to ``sources`` objects.

* The :manual:`cmake-file-api(7)` gained a new "configureLog" object kind
  that enables stable access to the :manual:`cmake-configure-log(7)`.

Commands
--------

* The :command:`add_custom_command` and :command:`add_custom_target` commands
  now support :manual:`generator expressions <cmake-generator-expressions(7)>`
  in their ``COMMENT`` option.

* The :command:`message` command gained a ``CONFIGURE_LOG`` mode to
  record an entry in the :manual:`cmake-configure-log(7)`.

* The :command:`string(TIMESTAMP)` and :command:`file(TIMESTAMP)` commands
  now support the ``%z`` and ``%Z`` specifiers for the time zone.

* The :command:`try_compile` and :command:`try_run` commands gained
  a ``LOG_DESCRIPTION`` option specifying text to be recorded in the
  :manual:`cmake-configure-log(7)`.

* The :command:`try_compile` and :command:`try_run` commands gained a
  ``NO_LOG`` option to skip recording a :manual:`cmake-configure-log(7)`
  entry.

Variables
---------

* The :variable:`CMAKE_<LANG>_COMPILER_FRONTEND_VARIANT` variable is now
  set for ``GNU``, ``MSVC``, and ``AppleClang`` compilers that have only
  one frontend variant.

* A :variable:`CMAKE_VS_VERSION_BUILD_NUMBER` variable is now set by
  :ref:`Visual Studio Generators` for VS 2017 and above to report the
  four-component Visual Studio version number.

Properties
----------

* The :prop_tgt:`<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR` target property was
  added to allow the ``clang-tidy`` tool to export its suggested fixes to a
  set of ``.yaml`` files. A new
  :variable:`CMAKE_<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR` variable was created to
  initialize this property.

* The :prop_tgt:`XCODE_EMBED_EXTENSIONKIT_EXTENSIONS <XCODE_EMBED_<type>>`
  target property was added to tell the :generator:`Xcode` generator to embed
  ExtensionKit-based extensions such as extensions using the Background
  Assets framework.  Aspects of the embedding can be customized with:

  * :prop_tgt:`XCODE_EMBED_EXTENSIONKIT_EXTENSIONS_PATH <XCODE_EMBED_<type>>`
  * :prop_tgt:`XCODE_EMBED_EXTENSIONKIT_EXTENSIONS_CODE_SIGN_ON_COPY <XCODE_EMBED_<type>_CODE_SIGN_ON_COPY>`
  * :prop_tgt:`XCODE_EMBED_EXTENSIONKIT_EXTENSIONS_REMOVE_HEADERS_ON_COPY <XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY>`

Modules
-------

* The :module:`ExternalProject` module's :command:`ExternalProject_Add` command
  gained an ``INSTALL_BYPRODUCTS`` option to specify files generated by the
  ``install`` step.

* The :module:`FindCUDAToolkit` module:

  * gained support for the ``sbsa-linux`` cross compilation target, and

  * now provides an imported target for ``nvrtc_static``, if found.

* The :module:`FindImageMagick` module now provides imported targets.

* The :module:`FindPython3` and :module:`FindPython` modules gained
  support for the `Stable Application Binary Interface`_.

* The :module:`UseSWIG` module gained support for the ``perl5`` language.

.. _`Stable Application Binary Interface`: https://docs.python.org/3/c-api/stable.html

Generator Expressions
---------------------

* The :genex:`$<BUILD_LOCAL_INTERFACE:...>` generator expression was added to
  prevent usage requirements from being exported to dependent projects.

CTest
-----

* The :envvar:`CTEST_NO_TESTS_ACTION` environment variable was added to
  provide a default value for the
  :option:`--no-tests=\<action\> <ctest --no-tests>` command line
  argument of :manual:`ctest(1)`.

Deprecated and Removed Features
===============================

* The ``CMakeFiles/CMakeOutput.log`` and ``CMakeFiles/CMakeError.log``
  files are no longer populated by CMake's built-in modules.
  :manual:`cmake(1)` no longer suggests looking at them after a
  ``CMake Error`` occurs.  Information previously logged to those
  files is instead logged to the :manual:`cmake-configure-log(7)`.

* On CYGWIN, the undocumented ``CMAKE_LEGACY_CYGWIN_WIN32`` mode for
  compatibility with CMake versions older than 2.8.4 has been removed.

Other Changes
=============

* :ref:`Language Standard Flags`, such as ``-std=c++11``, when generated due
  to :command:`target_compile_features` or :variable:`CMAKE_<LANG>_STANDARD`,
  are now placed before flags added by :command:`target_compile_options`,
  rather than after them.

* For all ``COMPILE_DEFINITIONS`` properties, any leading ``-D`` on an item
  is removed whether or not it was specified by a generator expression.

* The ``compile_commands.json`` database enabled by
  :variable:`CMAKE_EXPORT_COMPILE_COMMANDS` now provides the ``output``
  field in the compile commands objects.  This allows multi-config
  generators, such as the :generator:`Ninja Multi-Config` generator,
  to provide the compile commands for all configurations.

* The :prop_gbl:`USE_FOLDERS` global property is treated as ``ON`` by default.
  See policy :policy:`CMP0143`.

* The top-level :command:`project` call will now emit an author warning if the
  documented command order in relation to :command:`cmake_minimum_required` is
  not respected.

* The :option:`cmake --trace` option now follows :command:`try_compile` and
  :command:`try_run` invocations.

Updates
=======

Changes made since CMake 3.26.0 include the following.

3.26.1, 3.26.2, 3.26.3, 3.26.4, 3.26.5
--------------------------------------

* These versions made no changes to documented features or interfaces.
  Some implementation updates were made to support ecosystem changes
  and/or fix regressions.

3.26.6
------

* The :manual:`cmake-file-api(7)` "codemodel" version 2 "target" object
  ``fileSets`` field was introduced by CMake 3.26.0 with entries of its
  ``baseDirectories`` member incorrectly expressed as absolute paths
  even if they are inside the top-level source directory.  This has
  been fixed.  Clients must be updated to expect relative paths under
  the top-level source directory.



/P/🚀 release/3.25.rst
====================================


CMake 3.25 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.24 include the following.

New Features
============

Presets
-------

* The :manual:`cmake-presets(7)` schema version has been bumped to ``6``.

* The :manual:`cmake-presets(7)` format now supports a
  ``packagePresets`` field to specify presets for :option:`cpack --preset`.

* The :manual:`cmake-presets(7)` format now supports a
  ``workflowPresets`` field to specify presets for :option:`cmake --workflow`.

* The :manual:`cmake-presets(7)` format now supports an
  ``outputJUnitFile`` field to specify JUnit output in test presets.

Languages
---------

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality
  is now aware of C++26, and defines a ``cxx_std_26`` meta-feature.
  C++26 compiler modes may also be specified via the :prop_tgt:`CXX_STANDARD`,
  :prop_tgt:`CUDA_STANDARD`, :prop_tgt:`HIP_STANDARD`,
  or :prop_tgt:`OBJCXX_STANDARD` target properties.

* ``CUDA`` language support now includes device link-time optimization when
  using ``nvcc``.  The :variable:`CMAKE_INTERPROCEDURAL_OPTIMIZATION` variable
  and the associated :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` target property
  will activate device LTO.

Command-Line
------------

* A :option:`cmake --workflow --preset <cmake--workflow --preset>` mode was
  added to drive sequences of configure, build, test, and package operations
  through a single command.

* The :option:`cmake -E capabilities <cmake-E capabilities>` command
  gained a new ``tls`` field that tells whether or not TLS is enabled.

* The :option:`cmake -E env <cmake-E env>` command-line tool gained
  a ``--modify`` flag to support :prop_test:`ENVIRONMENT_MODIFICATION`
  operations.

* The :option:`cmake --debug-trycompile` option now prints log messages
  reporting the directory in which each try-compile check is done.

Compilers
---------

* Support for the `Tasking compiler toolsets`_ (SmartCode, TriCore,
  Standalone: ARM, MCS, 8051) was added with compiler id ``Tasking``.
  See the :variable:`CMAKE_TASKING_TOOLSET` variable.

.. _Tasking compiler toolsets: https://www.tasking.com

Commands
--------

* The :command:`add_subdirectory` command gained a ``SYSTEM`` option
  to enable the :prop_dir:`SYSTEM` directory property in the subdirectory.

* The :command:`block` and :command:`endblock` commands were added to manage
  specific scopes (policy or variable) for a contained block of commands.

* The :command:`cmake_language` command gained a new
  ``GET_MESSAGE_LOG_LEVEL`` sub-command.  It can be used to
  query the current message logging level.

* The :command:`find_file`, :command:`find_path`, :command:`find_library`, and
  :command:`find_program` commands gained a ``VALIDATOR`` option to specify a
  function to be called for each candidate item to validate it.

* The :command:`find_package` command now considers paths of
  the form ``<prefix>/<name>*/(cmake|CMake)/<name>*/`` when
  searching for package configuration files.

* The :command:`return` command gained a ``PROPAGATE`` option to propagate
  variables to the scope to which control returns.
  See policy :policy:`CMP0140`.

* The :command:`try_compile` and :command:`try_run` commands gained new
  signatures that more consistently use keyword dispatch and do not require a
  binary directory to be specified.  Additionally, these signatures use a
  unique directory for each invocation, which allows multiple outputs to be
  preserved when using :option:`cmake --debug-trycompile`.

* The :command:`try_compile` and :command:`try_run` commands gained the
  option ``NO_CACHE`` to store results in normal variables.

* The :command:`try_run` command gained ``RUN_OUTPUT_STDOUT_VARIABLE``
  and ``RUN_OUTPUT_STDERR_VARIABLE`` options to capture stdout and stderr
  separately from the output of the compiled program.

Variables
---------

* The :variable:`BSD` and :variable:`CMAKE_HOST_BSD` variables are now set
  to a string value when the target or host system is BSD, respectively.

* The :variable:`LINUX` and :variable:`CMAKE_HOST_LINUX` variables are
  now set to true when the target or host system is Linux, respectively.

* The :variable:`CMAKE_MSVC_DEBUG_INFORMATION_FORMAT` variable and
  :prop_tgt:`MSVC_DEBUG_INFORMATION_FORMAT` target property were introduced
  to select the debug information format for compilers targeting the MSVC ABI.
  See policy :policy:`CMP0141`.

* The :variable:`CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION` variable and
  corresponding :prop_tgt:`XCODE_SCHEME_ENABLE_GPU_API_VALIDATION` target
  property were added to tell the :generator:`Xcode` generator what to put
  in the scheme's ``Metal: API Validation`` setting.

* The :variable:`CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION` variable and
  corresponding :prop_tgt:`XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION` target
  property were added to tell the :generator:`Xcode` generator what to put
  in the scheme's ``Metal: Shader Validation`` setting.

* The :variable:`CMAKE_XCODE_SCHEME_LAUNCH_MODE` variable and corresponding
  :prop_tgt:`XCODE_SCHEME_LAUNCH_MODE` target property were added to tell
  the :generator:`Xcode` generator what to put in the scheme's "Launch"
  mode setting.

* The :variable:`CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION` variable and
  corresponding :prop_tgt:`XCODE_SCHEME_LAUNCH_CONFIGURATION` target
  property were added to tell the :generator:`Xcode` generator what
  configuration to put in the scheme's Launch action.

Properties
----------

* The :prop_tgt:`<LANG>_COMPILER_LAUNCHER` target property now supports
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

* The :prop_tgt:`EXPORT_NO_SYSTEM` target property was added to
  specify that :command:`install(EXPORT)` and :command:`export`
  commands will generate na imported target with
  :prop_tgt:`SYSTEM` property ``OFF``.

* The :prop_tgt:`SYSTEM` target property was added to specify
  whether a target should be treated as a system library (i.e.
  its include directories are automatically ``SYSTEM`` when
  compiling consumers).  If not set, the default is the previous
  behavior: on for imported targets and off for other targets.

* The :prop_dir:`SYSTEM` directory property was added to initialize the
  :prop_tgt:`SYSTEM` target property for targets created in that directory.

Modules
-------

* The :module:`FetchContent` module's :command:`FetchContent_Declare`
  command gained a ``SYSTEM`` option which sets the :prop_dir:`SYSTEM`
  directory property on subdirectories created by
  :command:`FetchContent_MakeAvailable`.

* The :module:`FindCUDAToolkit` module now provides a target for
  :ref:`nvtx3 <cuda_toolkit_nvtx3>` for CUDA 10.0+, which supersedes
  :ref:`nvToolsExt <cuda_toolkit_nvToolsExt>`. A deprecation warning
  is emitted when using ``nvToolsExt`` if the project requires CMake
  3.25 and CUDA 10.0+ is used.

* The :module:`FindDoxygen` module's version handling has been improved:

  * Multiple candidate installations will now be considered, if needed,
    to satisfy version constraints.  Previously, only the first one
    encountered would be considered.

  * Version ranges are supported.

  * Variations in the version format reported by Doxygen are now
    tolerated (e.g. a trailing git commit hash).

* The :module:`FindOpenAL` module now provides an imported target.

* The :module:`FindOpenSP` module was added to find the OpenSP library.

* The :module:`FindVulkan` module gained support for new components:

  ``dxc``
    DirectX Shader Compiler.

  ``volk``
    Volk open-source vulkan meta-loader.

CPack
-----

* The :cpack_gen:`CPack Archive Generator` gained a new
  :variable:`CPACK_ARCHIVE_FILE_EXTENSION` variable to control
  the package file name extension.

* The :cpack_gen:`CPack NSIS Generator` gained two new variables
  :variable:`CPACK_NSIS_EXECUTABLE_PRE_ARGUMENTS` and
  :variable:`CPACK_NSIS_EXECUTABLE_POST_ARGUMENTS`
  to provide arguments to the nsis executable invocation.

* The :module:`CPack` module gained the :variable:`CPACK_READELF_EXECUTABLE`,
  :variable:`CPACK_OBJCOPY_EXECUTABLE`, and
  :variable:`CPACK_OBJDUMP_EXECUTABLE` variables to control the locations
  of binutils used by :manual:`cpack(1)`.

Deprecated and Removed Features
===============================

* The :prop_tgt:`IMPORTED_NO_SYSTEM` target property has been deprecated
  in favor of :prop_tgt:`SYSTEM` and :prop_tgt:`EXPORT_NO_SYSTEM`.

* The :generator:`Visual Studio 10 2010` generator has been removed.

* The :generator:`Visual Studio 11 2012` generator is now deprecated
  and will be removed in a future version of CMake.

Other Changes
=============

* The :envvar:`SSL_CERT_FILE` and :envvar:`SSL_CERT_DIR` environment
  variables can now be used to override where to find certificate
  authorities for TLS/SSL operations.

* If :prop_tgt:`<LANG>_CLANG_TIDY` includes a ``-p`` argument, the
  full compiler command line is no longer appended after ``--``.

* The :generator:`Xcode` generator no longer adds the per-config suffix
  ``$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)`` to library search paths.
  See policy :policy:`CMP0142`.

Updates
=======

Changes made since CMake 3.25.0 include the following.

3.25.1
------

* On Windows, when targeting the MSVC ABI, the :command:`find_library`
  command no longer accepts ``.a`` file names.  This behavior was added
  in CMake 3.25.0, but has been reverted due finding GNU-ABI libraries
  in cases we did not previously.

3.25.2
------

* CUDA language level 20 (corresponding to C++20) is now supported with
  NVCC 12.0 and above.

* On Windows, the ``icpx`` compiler now provided by Intel oneAPI 2023.0
  and above is no longer selected because its GNU-like command-line is
  not yet supported by CMake.

3.25.3
------

* This version made no changes to documented features or interfaces.
  Some implementation updates were made to support ecosystem changes
  and/or fix regressions.



/P/🚀 release/3.24.rst
====================================


CMake 3.24 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.23 include the following.

New Features
============

Presets
-------

* :manual:`cmake-presets(7)` files now support schema version ``5``.

* :manual:`cmake-presets(7)` files now support a ``${pathListSep}`` macro,
  which expands to ``:`` or ``;`` based on the platform.

* :manual:`cmake-presets(7)` files gained support for specifying a
  ``testOutputTruncation`` field in test presets, which specifies the
  truncation mode once the maximum test output size has been reached.

Generators
----------

* The :generator:`Green Hills MULTI` generator now generates build
  rules to re-run CMake if any CMake files are updated.

* The :ref:`Visual Studio Generators` now support ``SYSTEM`` headers
  when using VS 2019 Update 11 or later.

Command-Line
------------

* :manual:`cmake(1)` gained the :option:`--fresh <cmake --fresh>` command-line
  option to remove any existing ``CMakeCache.txt`` file and associated ``CMakeFiles/``
  directory, when configuring a build tree, thus starting a new configuration
  as if the build tree were freshly created.

* :manual:`cmake(1)` gained the
  :option:`--compile-no-warning-as-error <cmake --compile-no-warning-as-error>`
  command-line option which causes the effects of the
  :prop_tgt:`COMPILE_WARNING_AS_ERROR` target property and
  :variable:`CMAKE_COMPILE_WARNING_AS_ERROR` variable to be ignored.

* The :manual:`cmake(1)` :option:`--trace=json-v1 <cmake --trace>` trace
  format gained fields ``global_frame`` and ``line_end``.

* The :manual:`cmake(1)` :option:`-E <cmake -E>` commands :option:`cat <cmake-E cat>`
  and :option:`env <cmake-E env>` learned to respect a double dash
  (:option:`-- <cmake-E_env -->`) argument that acts as a delimiter indicating
  the end of options. Any following arguments are treated as operands/positional
  arguments, even if they begin with a dash ``-`` character.

* The :manual:`cmake(1)` :option:`-E tar <cmake-E tar>` command gained the
  :option:`--touch <cmake-E_tar --touch>` option
  to keep the current local timestamp instead of extracting file timestamps
  from the archive.

Compilers
---------

* LLVM's `flang`_ Fortran compiler is now supported on some platforms,
  with compiler id ``LLVMFlang``.

.. _`flang`: https://github.com/llvm/llvm-project/tree/main/flang

* ADSP compiler support (SHARC and Blackfin) now covers both CCES and
  VDSP++ installations, with required configuration now done in the
  compiler module itself rather than the ``Generic-ADSP`` platform module.

Platforms
---------

* A dedicated ``ADSP`` platform has been added
  to replace the existing ``Generic-ADSP`` implementation.
  This features automatic detection of the latest CCES/VDSP++ install
  and compiler selection (``cc21k`` vs. ``ccblkfn``)
  based off of the :variable:`CMAKE_SYSTEM_PROCESSOR` variable.

Commands
--------

* The :command:`cmake_host_system_information` command, on Windows,
  gained a ``QUERY WINDOWS_REGISTRY`` mode.
  See its :ref:`Query Windows registry` section.

* The :command:`cmake_language` command gained a new
  ``SET_DEPENDENCY_PROVIDER`` sub-command.  When a dependency provider is set,
  calls to :command:`find_package` and :command:`FetchContent_MakeAvailable`
  can be redirected through a custom command, which can choose to fulfill the
  request directly, modify how the request is processed, or leave it to be
  fulfilled by the built-in implementation.  See :ref:`dependency_providers`.

* The :command:`file(DOWNLOAD)` command gained options ``RANGE_START`` and
  ``RANGE_END`` to specify a range of bytes to download.  This can be
  useful for downloading parts of big binary files.

* The :command:`find_file`, :command:`find_path`, :command:`find_library`,
  :command:`find_program`, and :command:`find_package` commands gained the
  ``NO_CMAKE_INSTALL_PREFIX`` option to control searching
  :variable:`CMAKE_INSTALL_PREFIX`.

* The :command:`find_file`, :command:`find_path`, :command:`find_library`,
  :command:`find_program`, and :command:`find_package` commands gained the
  ability to specify which Windows Registry views must be queried.

* The :command:`find_package` command gained a ``GLOBAL`` option that
  allows for the promotion of imported targets to global scope for the
  duration of the :command:`find_package` call.

* The :command:`if` command gained the capability to compare paths by
  using the ``PATH_EQUAL`` operator.  See policy :policy:`CMP0139`.

Variables
---------

* The :variable:`CMAKE_COLOR_DIAGNOSTICS` variable was added to control
  color diagnostics generated by compilers.  This variable also controls
  color build system messages with :ref:`Makefile Generators`, replacing
  :variable:`CMAKE_COLOR_MAKEFILE`.

  The :envvar:`CMAKE_COLOR_DIAGNOSTICS` environment variable was added to set
  a default value for :variable:`CMAKE_COLOR_DIAGNOSTICS`.

* The :variable:`CMAKE_COMPILE_WARNING_AS_ERROR` variable and corresponding
  :prop_tgt:`COMPILE_WARNING_AS_ERROR` target property were added to enable
  compilation with a compiler-specific flag to treat warnings as errors,
  such as ``-Werror``.

* The :variable:`CMAKE_CUDA_ARCHITECTURES` variable and associated
  :prop_tgt:`CUDA_ARCHITECTURES` target property now support the
  special ``native`` value to compile for the architectures(s)
  of the host's GPU(s).

* The :variable:`CMAKE_FIND_PACKAGE_TARGETS_GLOBAL` variable was added to
  toggle behavior of the :command:`find_package` command's new ``GLOBAL``
  option.

* The :variable:`CMAKE_FIND_USE_INSTALL_PREFIX` variable was added to toggle
  behavior of the :command:`find_file`, :command:`find_library`,
  :command:`find_path`, :command:`find_package`, and :command:`find_program`
  commands' new ``NO_CMAKE_INSTALL_PREFIX`` option.

* The :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` variable was added to allow
  injecting custom code at the site of the first :command:`project` call,
  after the host and target platform details have been determined.

* The :variable:`CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES` variable
  was added to tell the :command:`try_compile` command not to
  pass any platform variables to the test project.

* The :variable:`CMAKE_VERIFY_INTERFACE_HEADER_SETS` variable and
  corresponding :prop_tgt:`VERIFY_INTERFACE_HEADER_SETS` target property
  were added to enable build rules that verify all headers in header sets
  can be used on their own.

* The :variable:`CMAKE_VS_NO_COMPILE_BATCHING` variable and corresponding
  :prop_tgt:`VS_NO_COMPILE_BATCHING` target property were added to
  tell :ref:`Visual Studio Generators` whether to disable compiler
  parallelism and call the compiler with one source file at a time.

* The :variable:`CMAKE_WATCOM_RUNTIME_LIBRARY` variable and
  :prop_tgt:`WATCOM_RUNTIME_LIBRARY` target property were introduced to
  select the runtime library used by compilers targeting the Watcom ABI.
  See policy :policy:`CMP0136`.

* The :variable:`CMAKE_XCODE_XCCONFIG` variable and corresponding
  :prop_tgt:`XCODE_XCCONFIG` target property were added to tell
  the :generator:`Xcode` generator to handle ``xcconfig`` files.

Properties
----------

* The :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` and
  :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE` target properties
  were added to express usage requirements affecting a consumer's
  direct link dependencies.

* The :prop_tgt:`INTERFACE_HEADER_SETS_TO_VERIFY` target property was
  added to specify which header sets should be verified by
  :prop_tgt:`VERIFY_INTERFACE_HEADER_SETS`.

* The :prop_tgt:`LINK_LIBRARIES` target property now supports
  the :genex:`$<LINK_ONLY:...>` generator expression.
  See policy :policy:`CMP0131`.

* The :prop_tgt:`VS_DOTNET_STARTUP_OBJECT` target property was added to
  tell :ref:`Visual Studio Generators` which startup class shall be used
  when the program or project is executed. This is necessary when more
  than one ``static void Main(string[])`` function signature is available
  in a managed .NET project.

Modules
-------

* The :module:`ExternalProject` module :command:`ExternalProject_Add`
  command gained a new ``DOWNLOAD_EXTRACT_TIMESTAMP`` option for
  controlling whether the timestamps of extracted contents are set to
  match those in the archive when the ``URL`` download method is used.
  Policy :policy:`CMP0135` was added to enable the option by default.

* The :module:`FetchContent` module and the :command:`find_package` command
  now support integration capabilities:

  * :command:`FetchContent_MakeAvailable` can now try to satisfy a dependency
    by calling :command:`find_package` first.  A new
    :variable:`FETCHCONTENT_TRY_FIND_PACKAGE_MODE` variable controls whether
    this is done by default for all dependencies, is opt-in per dependency,
    or is disabled entirely.

  * :command:`find_package` can be re-routed to call
    :command:`FetchContent_MakeAvailable` instead.  A new read-only
    :variable:`CMAKE_FIND_PACKAGE_REDIRECTS_DIR` variable points to a
    directory where config package files can be located to facilitate these
    re-routed calls.

* The :module:`FindJNI` module now provides imported targets.

* The :module:`FindMatlab` module :command:`matlab_add_mex` function
  gained a ``NO_IMPLICIT_LINK_TO_MATLAB_LIBRARIES`` option to disable
  automatic linking of MATLAB libraries.

* The :module:`FindVulkan` module now supports components to select which
  VulkanSDK tool and libraries to find in addition to the Vulkan SDK headers
  and library.

* The :module:`FindZLIB` gained a new ``ZLIB_USE_STATIC_LIBS`` variable to
  search only for static libraries.

Generator Expressions
---------------------

* The :genex:`LINK_LIBRARY` generator expression was added to manage how
  libraries are specified during the link step.
  The :variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>` and
  :variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>` variables are used to define
  features usable by the :genex:`LINK_LIBRARY` generator expression.
  Moreover, the :prop_tgt:`LINK_LIBRARY_OVERRIDE` and
  :prop_tgt:`LINK_LIBRARY_OVERRIDE_<LIBRARY>` target properties are
  available to resolve incompatible features.

  The :genex:`LINK_LIBRARY` generator expression can link frameworks in
  various ways when targeting ``Apple`` platforms.
  The following features were added:

  * ``FRAMEWORK``
  * ``NEEDED_FRAMEWORK``
  * ``REEXPORT_FRAMEWORK``
  * ``WEAK_FRAMEWORK``

  The :genex:`LINK_LIBRARY` generator expression can link libraries in
  various ways when targeting ``Apple`` platforms.
  The following features were added:

  * ``NEEDED_LIBRARY``
  * ``REEXPORT_LIBRARY``
  * ``WEAK_LIBRARY``

  The :genex:`LINK_LIBRARY` generator expression gained the feature
  ``WHOLE_ARCHIVE`` to force load of all members in a static library.
  This feature is supported on the following target platforms:

  * all ``Apple`` variants
  * ``Linux``
  * all ``BSD`` variants
  * ``SunOS``
  * ``Windows``
  * ``CYGWIN``
  * ``MSYS``

* The :genex:`LINK_GROUP` generator expression was added to manage the
  grouping of libraries during the link step.  The
  :variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>` and
  :variable:`CMAKE_LINK_GROUP_USING_<FEATURE>` variables are used to define
  features usable with the :genex:`LINK_GROUP` generator expression.
  This release defines the ``RESCAN`` feature, which can be used to handle
  circular references among static libraries when using toolchains for
  Linux, BSD, SunOS and GNU toolchains for Windows.

* The :genex:`PATH` generator expression was added to manage paths.

* The :genex:`PATH_EQUAL` generator expression was added to manage path
  comparisons.

* The :genex:`TARGET_BUNDLE_DIR_NAME` generator expression
  was added to evaluate to the name of the bundle directory
  for a given bundle target.

CTest
-----

* :manual:`ctest(1)` gained a
  :option:`--test-output-truncation <ctest --test-output-truncation>` option
  (and corresponding :variable:`CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION` variable)
  to specify the truncation mode once the maximum test output size has been
  reached. Possible values are ``tail`` (default), ``middle`` or ``head``.

CPack
-----

* The :cpack_gen:`CPack WIX Generator` gained a new variable,
  :variable:`CPACK_WIX_ARCHITECTURE`, to specify the installer architecture
  in order to support computers running Windows for ARM.

* CPack now supports the :variable:`CPACK_THREADS` option for ``zstd``
  compression when compiled with libarchive 3.6 or higher.  It is
  supported by official CMake binaries available on `cmake.org`_.

Deprecated and Removed Features
===============================

* The :module:`CPack` module no longer enables the SLA by default in the
  :cpack_gen:`CPack DragNDrop Generator`.  See policy :policy:`CMP0133`
  and the :variable:`CPACK_DMG_SLA_USE_RESOURCE_FILE_LICENSE` variable.

* The deprecated :cpack_gen:`CPack PackageMaker Generator` has been removed.

* The :module:`FindGLUT` module no longer provides the undocumented
  ``GLUT_LIBRARY`` and ``GLUT_INCLUDE_PATH`` result variables.

* The :module:`FindVulkan` module no longer silently ignores unknown
  components requested by a ``find_package(Vulkan REQUIRED ...)`` call.
  With the addition of support for components, requests for unknown
  components now produce an error.

Other Changes
=============

* CMake no longer sets environment variables like :envvar:`CC`, :envvar:`CXX`,
  etc. when enabling the corresponding language during the first CMake run in
  a build directory.  See policy :policy:`CMP0132`.

* The :module:`CheckIPOSupported` module :command:`check_ipo_supported`
  command now uses the caller's :variable:`CMAKE_<LANG>_FLAGS`
  and :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` values.
  See policy :policy:`CMP0138`.

* The :generator:`MSYS Makefiles` and :generator:`MinGW Makefiles`
  generators, when a compiler is not explicitly specified, now select
  the first compiler (of any name) found in directories listed by the
  ``PATH`` environment variable.

* The :command:`try_compile` command
  :ref:`whole-project <Try Compiling Whole Projects>` signature
  now propagates platform variables.  See policy :policy:`CMP0137`.

* The :command:`while` command now diagnoses errors during condition
  evaluation.  See policy :policy:`CMP0130`.

* The precompiled macOS binaries provided on `cmake.org`_ no longer attach a
  SLA to the ``.dmg`` packages.  This was removed because macOS 12 deprecated
  the tools used to attach ``.dmg`` resources.

* A precompiled Windows ``arm64`` binary is now provided on `cmake.org`_.

.. _`cmake.org`: https://cmake.org/download/

Updates
=======

Changes made since CMake 3.24.0 include the following.

3.24.1, 3.24.2
--------------

* These versions made no changes to documented features or interfaces.
  Some implementation updates were made to support ecosystem changes
  and/or fix regressions.

3.24.3
------

* The ``LLVMFlang`` Fortran compiler support added in 3.24.0 has been extended:

  * It now supports mixed-language linking between Fortran and C or CXX.
  * It now supports the GNU ABI (MinGW) on Windows, but not yet the MSVC ABI.

* Some implementation updates were made to support ecosystem changes
  and/or fix regressions.

3.24.4
------

* This version made no changes to documented features or interfaces.
  Some implementation updates were made to support ecosystem changes
  and/or fix regressions.



/P/🚀 release/3.23.rst
====================================


CMake 3.23 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.22 include the following.

New Features
============

Presets
-------

* :manual:`cmake-presets(7)` files now support schema version ``4``.

* :manual:`cmake-presets(7)` files now have an optional ``include`` field,
  which allows the files to include other files.

* :manual:`cmake-presets(7)` files now support a ``${fileDir}`` macro, which
  contains the directory containing the preset file.

* :manual:`cmake-presets(7)` gained support for specifying the
  ``resolvePackageReferences`` command line option in a build preset to control
  restoration behavior of package references from external package managers.
  Currently this is only supported by the Visual Studio generator to support
  restoring packages from NuGet. Other generators ignore this option.

Generators
----------

* The :ref:`Visual Studio Generators` for VS 2019 and above learned to
  support .NET SDK-style project files (``.csproj``) for C# projects.
  See the :prop_tgt:`DOTNET_SDK` target property and corresponding
  :variable:`CMAKE_DOTNET_SDK` variable.  :command:`add_custom_command`
  is not yet supported in .NET SDK-style projects.

* The :ref:`Visual Studio Generators` for VS 2017 and above learned to
  use portable instances of Visual Studio not known to the VS installer.
  See the :variable:`CMAKE_GENERATOR_INSTANCE` variable.

Command-Line
------------

* The :manual:`cmake(1)` :option:`--build <cmake --build>` command, when used with
  :ref:`Visual Studio Generators` on projects that set the
  :prop_tgt:`VS_PACKAGE_REFERENCES` target property, now automatically
  restores package references from NuGet.  The cache variable
  :variable:`CMAKE_VS_NUGET_PACKAGE_RESTORE` may be set to toggle this behavior
  in a build tree.  Use the
  :option:`--resolve-package-references <cmake--build --resolve-package-references>`
  command-line option to control the behavior on one invocation.

* The :manual:`cmake(1)` command line tool gained a
  :option:`--debug-find-pkg <cmake --debug-find-pkg>`
  option to enable debug messages under specific :command:`find_package`
  calls.

* The :manual:`cmake(1)` command line tool gained a
  :option:`--debug-find-var <cmake --debug-find-var>`
  option to enable debug messages for ``find_*`` calls that use specific
  result variables.

Compilers
---------

* The IBM Open XL C/C++ compiler, based on LLVM, is now supported with
  compiler id ``IBMClang``.

* The MCST LCC compiler is now supported with compiler id ``LCC``.
  See policy :policy:`CMP0129`.

File-Based API
--------------

* The :manual:`cmake-file-api(7)` "codemodel" version 2 ``version`` field
  has been updated to ``2.4``.

* The :manual:`cmake-file-api(7)` "codemodel" version 2 ``directory``
  object ``installers`` field gained a new ``fileSet`` installer type.

Commands
--------

* The :command:`define_property` command gained a new
  ``INITIALIZE_FROM_VARIABLE`` option to cause a target property to be
  initialized from a variable when a target is created.

* The :command:`install(TARGETS)` command gained a new ``FILE_SET`` argument,
  which can be used to install header file sets associated with a target.

* The :command:`string(TIMESTAMP)` and :command:`file(TIMESTAMP)` commands now
  support the ``%f`` specifier for microseconds.

* The :command:`target_sources` command gained a new ``FILE_SET`` mode, which
  can be used to add headers as header-only source files of a target.

Variables
---------

* The :variable:`CMAKE_CUDA_ARCHITECTURES` variable and associated
  :prop_tgt:`CUDA_ARCHITECTURES` target property now support the
  ``all``, and ``all-major`` values for CUDA toolkit 7.0+.

* The :variable:`CMAKE_IGNORE_PREFIX_PATH` and
  :variable:`CMAKE_SYSTEM_IGNORE_PREFIX_PATH` variables were added
  to tell the :command:`find_package`, :command:`find_program`,
  :command:`find_library`, :command:`find_path`, and :command:`find_file`
  commands to ignore specified prefixes.

* The :variable:`CMAKE_LINK_LIBRARIES_ONLY_TARGETS` variable and
  corresponding :prop_tgt:`LINK_LIBRARIES_ONLY_TARGETS` target
  property were added to optionally require that all link items
  that can be target names are actually names of existing targets.

Properties
----------

* The :prop_tgt:`HEADER_SETS` and :prop_tgt:`INTERFACE_HEADER_SETS` read-only
  target properties were added to list header sets associated with a target.

* The :prop_tgt:`HEADER_SET` and :prop_tgt:`HEADER_SET_<NAME>` target
  properties were added to list files in the default header set
  and named header sets, respectively.

* The :prop_tgt:`HEADER_DIRS` and :prop_tgt:`HEADER_DIRS_<NAME>` target
  properties were added to specify the base directories of the default
  header set and named header sets, respectively.

* The :prop_tgt:`IMPORTED_NO_SYSTEM` target property was added to
  specify that an :ref:`Imported Target <Imported Targets>` should
  not be treated as a system library (i.e. its include directories
  are not automatically ``SYSTEM``).

* The :prop_tgt:`XCODE_EMBED_PLUGINS <XCODE_EMBED_<type>>` target property
  was added to tell the :generator:`Xcode` generator what targets to put in
  the ``Embed PlugIns`` build phase.

* The :prop_tgt:`XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE` target property
  and supporting :variable:`CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE`
  variable were added to tell the :generator:`Xcode` generator to enable
  specifying the Xcode scheme option property ``GPU Frame Capture``.

Modules
-------

* The :module:`CheckPIESupported` module now supports the ``OBJC``,
  ``OBJCXX``, ``CUDA``, and ``HIP`` languages.  It also now honors
  :variable:`CMAKE_SYSROOT` and :variable:`CMAKE_OSX_SYSROOT`.

* The :module:`ExternalProject` module's :command:`ExternalProject_Add`
  command gained support for a ``USES_TERMINAL_PATCH`` option to give
  the patch step exclusive terminal access.

* The :module:`FindCUDAToolkit` module now provides a target for
  ``libcufft_static_nocallback``, if found.

* The :module:`FindGLUT` module now provides the ``GLUT_INCLUDE_DIRS``
  result variable to conform with naming conventions documented in the
  :manual:`cmake-developer(7)` manual.  This supersedes the legacy
  ``GLUT_INCLUDE_DIR`` variable.

* The :module:`FindGTest` module now provides a target for GMock, if found.

* The :module:`FindVulkan` module now provides a ``Vulkan_VERSION`` result
  variable reporting the version number.

CTest
-----

* :manual:`ctest(1)` gained a new :variable:`CTEST_SUBMIT_INACTIVITY_TIMEOUT`
  variable, which can be used to specify a timeout for submission inactivity.

CPack
-----

* The :cpack_gen:`CPack productbuild Generator` gained the new
  :variable:`CPACK_PRODUCTBUILD_DOMAINS`,
  :variable:`CPACK_PRODUCTBUILD_DOMAINS_ANYWHERE`,
  :variable:`CPACK_PRODUCTBUILD_DOMAINS_USER`, and
  :variable:`CPACK_PRODUCTBUILD_DOMAINS_ROOT` variables for
  adding the domains element to the Distribution XML. With these variables,
  it is now possible to install products to the user's home directory
  without requiring administrative privileges.

* The :cpack_gen:`CPack productbuild Generator` gained a new variable,
  :variable:`CPACK_PRODUCTBUILD_IDENTIFIER`, used to customize the unique
  product identifier associated with the product.

* The ``CPack.distribution.dist.in`` template used by the
  :cpack_gen:`CPack productbuild Generator` and
  CPack ``PackageMaker`` generator was updated to use a new
  ``CPACK_APPLE_PKG_INSTALLER_CONTENT`` variable for its main content.
  This replaced the previously undocumented and now deprecated
  ``CPACK_PACKAGEMAKER_CHOICES`` variable.

* The :cpack_gen:`CPack IFW Generator` gained the new
  :variable:`CPACK_IFW_ARCHIVE_FORMAT` and
  :variable:`CPACK_IFW_ARCHIVE_COMPRESSION` variables for setting the
  format used when packaging new component data archives, and choosing
  the compression level used.
  These features are available for QtIFW 4.2 and newer.

* The :cpack_gen:`CPack IFW Generator` gained new
  :variable:`CPACK_IFW_PACKAGE_DISABLE_COMMAND_LINE_INTERFACE` variable to
  prevent the user from passing any consumer command to the installer, like
  ``install``, ``update``, and ``remove``.
  This feature is available for QtIFW 4.0 and newer.

* The :cpack_gen:`CPack IFW Generator` gained the new
  :variable:`CPACK_IFW_PACKAGE_PRODUCT_IMAGES` variable for adding a
  list of images to be shown on the ``PerformInstallationPage``.
  This feature is available for QtIFW 4.0 and newer.

* The :cpack_gen:`CPack IFW Generator` gained the new
  :variable:`CPACK_IFW_PACKAGE_RUN_PROGRAM`,
  :variable:`CPACK_IFW_PACKAGE_RUN_PROGRAM_ARGUMENTS`, and
  :variable:`CPACK_IFW_PACKAGE_RUN_PROGRAM_DESCRIPTION` variables for
  executing a command after the installer is done if the user accepts
  the action.  This feature is available for QtIFW 4.0 and newer.

* The :cpack_gen:`CPack IFW Generator` gained the new
  :variable:`CPACK_IFW_PACKAGE_SIGNING_IDENTITY` variable for specifying a
  code signing identity to be used for signing the generated app bundle.
  This feature is available on macOS only, and for QtIFW 3.0 and newer.

* The :cpack_gen:`CPack WIX Generator` gained a new variable,
  :variable:`CPACK_WIX_SKIP_WIX_UI_EXTENSION`, to skip the inclusion
  of WixUIExtensions.

Deprecated and Removed Features
===============================

* :manual:`cmake(1)` now warns when multiple source paths are specified,
  as in ``cmake -S src1 src2``.  This has never been officially documented
  or supported, but older versions accidentally accepted multiple source
  paths and used the last path specified.  Update scripts to avoid
  passing multiple source path arguments.

* The :manual:`cpack(1)` undocumented ``OSXX11`` generator has been removed.

* The previously undocumented ``CPACK_PACKAGEMAKER_CHOICES`` variable used in
  the ``CPack.distribution.dist.in`` template has been replaced by a new
  ``CPACK_APPLE_PKG_INSTALLER_CONTENT`` variable. This only affects projects
  that were providing their own custom ``CPack.distribution.dist.in`` template
  file, but still relied on ``CPACK_PACKAGEMAKER_CHOICES`` being set. Those
  custom template files should be updated to use
  ``CPACK_APPLE_PKG_INSTALLER_CONTENT`` instead, or to fully define all the
  template file's contents without relying on substitution of either variable.

Other Changes
=============

* The :cpack_gen:`CPack DragNDrop Generator` no longer attaches
  :variable:`CPACK_RESOURCE_FILE_LICENSE` as the license agreement in
  the generated ``.dmg`` unless explicitly activated by a
  :variable:`CPACK_DMG_SLA_USE_RESOURCE_FILE_LICENSE` option.
  In CMake projects, the :module:`CPack` module enables the option
  by default for compatibility.

* ``CUDA`` targets may now enable both :prop_tgt:`CUDA_SEPARABLE_COMPILATION`
  and :prop_tgt:`CUDA_PTX_COMPILATION`.

* ``CUDA`` compiler detection now:

  * issues an error in all cases when it's unable to compute the default
    architecture(s) if required (see :policy:`CMP0104`),

  * handles ``OFF`` for :variable:`CMAKE_CUDA_ARCHITECTURES` on Clang,

  * supports the theoretical case of multiple default architectures, and

  * tries to detect invalid architectures and issue an error.

* ``CUDA`` with Clang now implements policy :policy:`CMP0105` and
  the :genex:`$<DEVICE_LINK:...>` and :genex:`$<HOST_LINK:...>`
  generator expressions.

* The :command:`define_property` command's ``BRIEF_DOCS`` and ``FULL_DOCS``
  arguments are now optional.

* :manual:`ccmake(1)` may now be enabled on Windows when building
  CMake from source.  This is experimental, and so is not included
  in official distributions.

Updates
=======

Changes made since CMake 3.23.0 include the following.

3.23.1
------

* The :command:`target_sources` ``FILE_SET`` feature added in CMake 3.23.0
  does not yet place header files properly in Apple :prop_tgt:`FRAMEWORK`
  targets.  Pending further work in a future version of CMake, it is now
  an error to add a ``FILE_SET`` of type ``HEADERS`` to such targets on
  Apple platforms.

* The :prop_tgt:`HEADER_SETS` and :prop_tgt:`INTERFACE_HEADER_SETS` target
  properties added in CMake 3.23.0 are now read-only records of the header
  sets created by the :command:`target_sources` command.

3.23.2
------

* The ``CPACK_PACKAGEMAKER_CHOICES`` variable used in the
  ``CPack.distribution.dist.in`` template file was replaced by a new
  ``CPACK_APPLE_PKG_INSTALLER_CONTENT`` variable in CMake 3.23.0.
  This broke projects that provided their own template file but still
  expected the ``CPACK_PACKAGEMAKER_CHOICES`` variable to be defined.
  The old ``CPACK_PACKAGEMAKER_CHOICES`` variable is now also set to the
  same content as it was before, but it is formally deprecated.

3.23.3, 3.23.4, 3.23.5
----------------------

* These versions made no changes to documented features or interfaces.
  Some implementation updates were made to support ecosystem changes
  and/or fix regressions.



/P/🚀 release/3.22.rst
====================================


CMake 3.22 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.21 include the following.

New Features
============

Commands
--------

* The :command:`cmake_host_system_information` command can now query
  `OS identification variables`_ from the :file:`/etc/os-release` file.

* The :command:`string(TIMESTAMP)` command now supports the ``%V``
  specifier for ISO 8601 week numbers.

.. _`OS identification variables`: https://www.freedesktop.org/software/systemd/man/latest/os-release.html

Variables
---------

* The :envvar:`CMAKE_BUILD_TYPE` environment variable was added to
  provide a default value for the :variable:`CMAKE_BUILD_TYPE` variable.

* The :envvar:`CMAKE_CONFIGURATION_TYPES` environment variable was added to
  provide a default value for the :variable:`CMAKE_CONFIGURATION_TYPES`
  variable.

* The :envvar:`CMAKE_INSTALL_MODE` environment variable was added to
  tell :command:`install` rules (implemented by :command:`file(INSTALL)`)
  to install symbolic links instead of copying of files.

* The :variable:`CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG` and
  :variable:`CMAKE_LINK_WHAT_YOU_USE_CHECK` variables were added to
  control the linker flag and check used by the
  :prop_tgt:`LINK_WHAT_YOU_USE` target property.

* The :variable:`CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>` variable
  was added to turn a non-REQUIRED :command:`find_package` call into
  a REQUIRED one.

Properties
----------

* The :prop_tgt:`<LANG>_EXTENSIONS` target property is now initialized to
  :variable:`CMAKE_<LANG>_EXTENSIONS_DEFAULT`, detected from the compiler.
  See :policy:`CMP0128`.

* The :prop_sf:`VS_SETTINGS` source file property is now supported for
  all source file types.  Previously it worked only for non-built sources.

Modules
-------

* The :module:`CMakeDependentOption` module :command:`cmake_dependent_option`
  macro now supports full :ref:`Condition Syntax`.
  See policy :policy:`CMP0127`.

* The :module:`FetchContent` module now passes through the
  :variable:`CMAKE_TLS_VERIFY`, :variable:`CMAKE_TLS_CAINFO`,
  :variable:`CMAKE_NETRC` and :variable:`CMAKE_NETRC_FILE` variables (when
  defined) to the underlying :module:`ExternalProject` sub-build.
  Previously, those variables were silently ignored by :module:`FetchContent`.

* The :module:`FindBLAS` and :module:`FindLAPACK` modules gained
  a ``BLA_SIZEOF_INTEGER`` option to find a BLAS/LAPACK whose ABI
  uses a specific integer size.

* The :module:`FindJasper` module now provides an imported target.

* The :module:`FindMatlab` module now provides imported targets.

* The :module:`FindPkgConfig` module gained a :variable:`PKG_CONFIG_ARGN`
  variable to specify arguments to ``pkg-config`` calls.

* The :module:`GoogleTest` module :command:`gtest_discover_tests`
  function gained a ``TEST_FILTER`` option to filter tests using
  ``--gtest_filter`` during test discovery.

* The :module:`UseSWIG` module, for :ref:`Visual Studio Generators`,
  can now use the ``swig`` tool to generate implicit dependencies.

CTest
-----

* :manual:`ctest(1)` learned to recognize labels attached to a test at run time.
  Previously it was only possible to attach labels to tests at configure time
  by using the :prop_test:`LABELS` test property.
  See :ref:`Additional Test Measurements` for more information.

* :manual:`ctest(1)` learned to be able to modify the environment for a test
  through the :prop_test:`ENVIRONMENT_MODIFICATION` property. This is allows
  for updates to environment variables based on the environment present at
  test time.

* The :command:`ctest_memcheck` command now also generates a
  :file:`DynamicAnalysis-Test.xml` file which may be used to submit test
  results to CDash.

CPack
-----

* The :cpack_gen:`CPack DEB Generator` gained the
  option to set :variable:`CPACK_DEBIAN_COMPRESSION_TYPE` to ``zstd``,
  which enables Zstandard compression for deb packages.

* The :cpack_gen:`CPack NSIS Generator` gained a new
  :variable:`CPACK_NSIS_IGNORE_LICENSE_PAGE` variable to suppress
  the license page in the installer.

* The :cpack_gen:`CPack RPM Generator` gained the
  :variable:`CPACK_RPM_REQUIRES_EXCLUDE_FROM` option to avoid scanning
  specific paths for dependencies.

Deprecated and Removed Features
===============================

* The :generator:`Visual Studio 10 2010` generator is now deprecated
  and will be removed in a future version of CMake.

Other Changes
=============

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality now
  correctly disables or enables compiler extensions when no standard level is
  specified and avoids unnecessarily adding language standard flags if the
  requested settings match the compiler's defaults. See :policy:`CMP0128`.

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality
  now ignores features for languages that are not enabled.

* The :ref:`Ninja Generators` now implement the ``edit_cache`` target
  using :manual:`ccmake(1)` if available.

* The :generator:`Ninja` and :generator:`NMake Makefiles` generators
  now use the MSVC ``-external:I`` flag for system includes.
  This became available as of VS 16.10 (toolchain version 14.29.30037).

* The :cpack_gen:`CPack NSIS Generator` now requires NSIS 3.03 or later.

Updates
=======

Changes made since CMake 3.22.0 include the following.

3.22.1
------

* This version made no changes to documented features or interfaces.
  Some implementation updates were made to support ecosystem changes
  and/or fix regressions.

3.22.2
------

* The ``OLD`` behavior of :policy:`CMP0128` was fixed to add flags even when
  the specified standard matches the compiler default.

3.22.3
------

* The :command:`while` command again ignores errors in condition evaluation
  as CMake 3.21 and below did.  This bug was fixed in 3.22.0, but exposed
  errors in existing projects.  The fix has been reverted to restore
  compatibility.  The fix may be restored in a future version of CMake
  via a policy.

3.22.4, 3.22.5, 3.22.6
----------------------

* These versions made no changes to documented features or interfaces.
  Some implementation updates were made to support ecosystem changes
  and/or fix regressions.



/P/🚀 release/3.21.rst
====================================


CMake 3.21 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.20 include the following.

New Features
============

Presets
-------

* :manual:`cmake-presets(7)` gained support for specifying the install prefix
  in a configure preset.

* :manual:`cmake-presets(7)` gained support for conditional enabling of presets.

* :manual:`cmake-presets(7)` gained support for a ``${hostSystemName}`` macro.

* :manual:`cmake-presets(7)` gained support for omitting the ``generator`` and
  ``binaryDir`` fields.

Generators
----------

* The :generator:`Visual Studio 17 2022` generator was added.

* The :ref:`Makefile Generators` and the :generator:`Ninja` generator
  learned to add linker launcher tools along with the linker for ``C``,
  ``CXX``, ``OBJC``, and ``OBJCXX`` languages.
  See the :variable:`CMAKE_<LANG>_LINKER_LAUNCHER` variable
  and :prop_tgt:`<LANG>_LINKER_LAUNCHER` target property for details.

Languages
---------

* CMake learned to support ``HIP`` as a first-class language that can be
  enabled via the :command:`project` and :command:`enable_language` commands.

* :prop_tgt:`C_STANDARD`, :prop_tgt:`OBJC_STANDARD`, and the
  :manual:`Compile Features <cmake-compile-features(7)>` functionality gained
  support for C17 and C23.

* Source file extensions ``.ixx`` and ``.cppm`` are now treated as C++.

Command-Line
------------

* :manual:`cmake(1)` gained the :option:`--install-prefix <cmake --install-prefix>`
  command-line option to specify the location of the install prefix.

* :manual:`cmake(1)` gained the :option:`--toolchain <cmake --toolchain>`
  command-line option to specify a toolchain file.

* :manual:`cmake(1)` :option:`-E capabilities <cmake-E capabilities>` output,
  for some generators, may now contain a ``supportedPlatforms`` field listing
  platforms known to be supported in :variable:`CMAKE_GENERATOR_PLATFORM`.

* Messages printed to a terminal now may be colored by message type.

Compilers
---------

* The Fujitsu compiler is now supported using compiler id ``Fujitsu``
  in traditional (``Trad``) mode, and compiler id ``FujitsuClang``
  in ``Clang`` mode.

Platforms
---------

* CMake now supports the MSYS runtime environment, much like CYGWIN.

File-Based API
--------------

* The :manual:`cmake-file-api(7)` "codemodel" version 2 ``version`` field
  has been updated to 2.3.

* The :manual:`cmake-file-api(7)` "codemodel" version 2 gained a
  new "directory" object containing directory-level information.
  This includes a list of installers generated by the :command:`install`
  command.

Commands
--------

* The :command:`add_custom_command` command ``DEPFILE`` option:

  * may now use
    :manual:`generator expressions <cmake-generator-expressions(7)>`,

  * is now supported by :ref:`Visual Studio Generators` for VS 2012
    and above, and

  * is now supported by the :generator:`Xcode` generator.

* The :command:`add_custom_command(TARGET)` command
  (for :ref:`Build Events <add_custom_command(TARGET)>`)
  gained support for resolving target-dependent generator expressions.

* The :command:`build_command` command gained a ``PARALLEL_LEVEL`` option.

* The :command:`file(COPY_FILE)` command was added to copy a single file.

* The :command:`file(GET_RUNTIME_DEPENDENCIES)` command gained new
  ``POST_INCLUDE_FILES`` and ``POST_EXCLUDE_FILES`` arguments.

* The :command:`file(REAL_PATH)` command gained the option ``EXPAND_TILDE`` to
  replace any leading tilde with the path to the user's home directory.

* The :command:`file(RENAME)` command learned to optionally capture
  failure in a result variable.  It also gained a ``NO_REPLACE``
  option to fail if the destination exists.

* The :command:`install` command gained a new ``IMPORTED_RUNTIME_ARTIFACTS``
  mode, which can be used to install the runtime artifacts of imported targets.

* The :command:`install` command gained a new ``RUNTIME_DEPENDENCY_SET`` mode,
  which can be used to install runtime dependencies using
  :command:`file(GET_RUNTIME_DEPENDENCIES)`.

* The :command:`install(TARGETS)` command gained new ``RUNTIME_DEPENDENCIES``
  and ``RUNTIME_DEPENDENCY_SET`` arguments, which can be used to install
  runtime dependencies using :command:`file(GET_RUNTIME_DEPENDENCIES)`.

* The :command:`install(SCRIPT|CODE)` command
  supports a new option ``ALL_COMPONENTS`` which allows
  the corresponding code to run for every component of
  a per component installation.

* The :command:`project` command now sets variables
  :variable:`PROJECT_IS_TOP_LEVEL` and :variable:`<PROJECT-NAME>_IS_TOP_LEVEL`
  to indicate whether it was called in a top-level ``CMakeLists.txt`` file.

Variables
---------

* The :envvar:`CMAKE_TOOLCHAIN_FILE` environment variable was added to
  provide a default value for the :variable:`CMAKE_TOOLCHAIN_FILE` variable.

Properties
----------

* The :prop_dir:`IMPORTED_TARGETS` directory property was added to
  get a list of :ref:`Imported Targets` created in the current
  directory.

* The :prop_tgt:`XCODE_EMBED_APP_EXTENSIONS <XCODE_EMBED_<type>>` target property
  was added to tell the :generator:`Xcode` generator to embed app extensions
  such as iMessage sticker packs.
  Aspects of the embedding can be customized with the
  :prop_tgt:`XCODE_EMBED_APP_EXTENSIONS_PATH <XCODE_EMBED_<type>>`,
  :prop_tgt:`XCODE_EMBED_APP_EXTENSIONS_CODE_SIGN_ON_COPY <XCODE_EMBED_<type>_CODE_SIGN_ON_COPY>` and
  :prop_tgt:`XCODE_EMBED_APP_EXTENSIONS_REMOVE_HEADERS_ON_COPY <XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY>`
  properties.

Modules
-------

* The :module:`FindBLAS` and :module:`FindLAPACK` modules learned to support
  the serial ``Fujitsu_SSL2`` and parallel ``Fujitsu_SSL2BLAMP`` libraries.

* The :module:`FindDevIL` module now provides imported targets.

* The :module:`FindIconv` module now has version support.

* The :module:`FindIntl` module now has version support.

* The :module:`FindMPI` module learned to support ``Fujitsu`` and
  ``FujitsuClang`` in both host and cross compiling modes.

* The :module:`FindMsys` module was added to find MSYS installations.
  Like :module:`FindCygwin`, it is used automatically by some other
  find modules to locate UNIX-style tools on Windows.

* The :module:`FindOpenMP` module learned to support ``Fujitsu`` and
  ``FujitsuClang``.

* The :module:`FindVulkan` module gained imported targets
  ``Vulkan::Headers`` and ``Vulkan::glslangValidator``.

* The :module:`UseJava` module command ``add_jar`` gained a ``RESOURCES``
  option to allow explicit naming of resources with non-optional namespace.

* The :module:`UseSWIG` module use now standard library naming conventions
  for the ``CSharp`` language. See policy :policy:`CMP0122`.

* The :module:`UseSWIG` module now supports using the ``swig`` tool to
  generate implicit dependencies with the :generator:`Xcode` generator.

Generator Expressions
---------------------

* A new :genex:`TARGET_RUNTIME_DLLS` generator expression was added.

CTest
-----

* :manual:`ctest(1)` gained documentation for its ability to capture
  :ref:`Additional Test Measurements`.

* :manual:`ctest(1)` learned to recognize files attached to a test at run time.
  Previously it was only possible to attach files to tests at configure time
  by using the :prop_test:`ATTACHED_FILES` or
  :prop_test:`ATTACHED_FILES_ON_FAIL` test properties.
  See :ref:`Additional Test Measurements` for more information.

* :manual:`ctest(1)` gained a :option:`--output-junit <ctest --output-junit>`
  option to write test results to a JUnit XML file.

* The :command:`ctest_build` command gained a ``PARALLEL_LEVEL`` option.

CPack
-----

* The :cpack_gen:`CPack DragNDrop Generator` gained option
  :variable:`CPACK_DMG_FILESYSTEM` to control the ``.dmg`` filesystem.

* The :cpack_gen:`CPack IFW Generator` now supports hyphens in names
  given to :command:`cpack_ifw_configure_component` or
  :command:`cpack_ifw_configure_component_group` as ``DEPENDS`` or
  ``DEPENDENCIES`` arguments.  This requires QtIFW 3.1 or later.

* The :cpack_gen:`CPack NSIS Generator` gained a new
  :variable:`CPACK_NSIS_EXECUTABLE` variable to specify the ``makensis``
  executable to use instead of the default one.

* The :variable:`CPACK_CUSTOM_INSTALL_VARIABLES` variable was added to set
  variables in ``cmake_install.cmake`` script invocations made by CPack.

Deprecated and Removed Features
===============================

* Undocumented :variable:`CMAKE_SYSTEM_NAME` version-stripping behavior has
  been removed entirely. If it is set by a ``-D`` flag or by a
  :manual:`toolchain file <cmake-toolchains(7)>`, it is left unaltered,
  even if it still contains a version number.
  Similar :variable:`CMAKE_HOST_SYSTEM_NAME` version-stripping behavior,
  also undocumented, has been moved earlier, before :command:`project` or
  :command:`enable_language` is called.

* ``ARMClang`` cpu/arch compile and link flags are no longer added
  automatically based on the :variable:`CMAKE_SYSTEM_PROCESSOR`
  variable or the undocumented ``CMAKE_SYSTEM_ARCH`` variable.
  They must be specified explicitly.  See policy :policy:`CMP0123`.

Other Changes
=============

* The :command:`find_file`, :command:`find_path`, :command:`find_program`,
  and :command:`find_library` commands handle cache variables in the same way
  regardless how they are defined. See policy :policy:`CMP0125` for details.

* The :command:`find_file`, :command:`find_path`, :command:`find_program`,
  and :command:`find_library` commands gained the option ``NO_CACHE`` to store
  find result in normal variable.

* The :command:`foreach` command now isolates loop variables in the loop scope.
  See policy :policy:`CMP0124` for details.

* The :command:`list` command's ``GET``, ``INSERT``, ``SUBLIST``, and
  ``REMOVE_AT`` subcommands now error with invalid (i.e., non-integer) values
  are given as any of their index arguments based on the setting of policy
  :policy:`CMP0121`.

* The :command:`set(CACHE)` command no longer removes a normal variable
  of the same name, if any. See policy :policy:`CMP0126`.

* :command:`target_link_libraries` calls referencing object libraries
  via the :genex:`TARGET_OBJECTS` generator expression now place the
  object files before all libraries on the link line, regardless of
  their specified order.  See documentation on
  :ref:`Linking Object Libraries via \$\<TARGET_OBJECTS\>` for details.

* The :ref:`Ninja Generators` now pass source files and include directories
  to the compiler using absolute paths.  This makes diagnostic messages and
  debug symbols more consistent, and matches the :ref:`Makefile Generators`.

* The :generator:`NMake Makefiles` generator now encodes the generated
  makefiles as UTF-8 with a BOM when using ``nmake`` from VS 9 or above.

* The :ref:`Visual Studio Generators` for VS 2010 and above now place
  per-source preprocessor definitions after target-wide preprocssor
  definitions.  This makes VS consistent with the :ref:`Ninja Generators`
  and the :ref:`Makefile Generators`.

* The precompiled binaries provided on
  `cmake.org <https://cmake.org/download/>`_ now support
  ``liblzma`` multi-threading.  See the :variable:`CPACK_THREADS` and
  :variable:`CPACK_ARCHIVE_THREADS` variables.

Updates
=======

Changes made since CMake 3.21.0 include the following.

3.21.1
------

* The :generator:`Visual Studio 17 2022` generator is now based on
  "Visual Studio 2022 Preview 2".  Previously it was based on "Preview 1.1".

3.21.2
------

* ``CUDA`` targets with :prop_tgt:`CUDA_SEPARABLE_COMPILATION` enabled are now
  correctly generated in non-root directories.

* The :generator:`Visual Studio 17 2022` generator is now based on
  "Visual Studio 2022 Preview 3.1".  Previously it was based on "Preview 2".

3.21.3
------

* The :generator:`Visual Studio 17 2022` generator is now based on
  "Visual Studio 2022 Preview 4".  Previously it was based on "Preview 3.1".

* The AMD ROCm Platform ``hipcc`` compiler was identified by CMake 3.21.0
  through 3.21.2 as a distinct compiler with id ``ROCMClang``.  This has
  been removed because it caused regressions.  Instead:

  * ``hipcc`` may no longer be used as a ``HIP`` compiler because it
    interferes with flags CMake needs to pass to Clang.  Use Clang directly.

  * ``hipcc`` may once again be used as a ``CXX`` compiler, and is treated as
    whatever compiler it selects underneath, as CMake 3.20 and below did.

3.21.4
------

* The :generator:`Visual Studio 17 2022` generator is now based on the
  "Visual Studio 2022" release candidates.  Previously it was based on
  preview versions.

3.21.5, 3.21.6, 3.21.7
----------------------

These versions made no changes to documented features or interfaces.
Some implementation updates were made to support ecosystem changes
and/or fix regressions.



/P/🚀 release/3.20.rst
====================================


CMake 3.20 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.19 include the following.

New Features
============

Presets
-------

* :manual:`cmake-presets(7)` gained support for build and test presets.

Generators
----------

* :ref:`Makefile Generators`, for some toolchains, now use the compiler
  to extract implicit dependencies while compiling source files.

Languages
---------

* C++23 compiler modes may now be specified via the :prop_tgt:`CXX_STANDARD`,
  :prop_tgt:`CUDA_STANDARD`, or :prop_tgt:`OBJCXX_STANDARD` target properties,
  or via the :manual:`Compile Features <cmake-compile-features(7)>`
  functionality's ``cxx_std_23`` meta-feature.

* ``CUDA`` language support now works when ``nvcc`` is a symbolic link,
  for example due to a ``ccache`` or ``colornvcc`` wrapper script.

* The :envvar:`CUDAARCHS` environment variable was added for initializing
  :variable:`CMAKE_CUDA_ARCHITECTURES`. Useful in cases where the compiler
  default is unsuitable for the machine's GPU.

Compilers
---------

* The NVIDIA HPC SDK compilers are now supported with compiler id ``NVHPC``.

* The Intel oneAPI NextGen LLVM compilers are now supported with
  compiler id ``IntelLLVM``:

  * The ``icx``/``icpx`` C/C++ compilers on Linux, and the ``icx``
    C/C++ compiler on Windows, are fully supported as of oneAPI 2021.1.

  * The ``ifx`` Fortran compiler on Linux is supported as of oneAPI 2021.1.

  * The ``ifx`` Fortran compiler on Windows is not yet supported.

  The Intel oneAPI Classic compilers (``icc``, ``icpc``, and ``ifort``)
  continue to be supported with compiler id ``Intel``.

* Support was added for the IAR STM8 compiler.

Platforms
---------

* CMake's support for :ref:`Cross Compiling for Android`
  is now merged with the Android NDK's toolchain file.
  They now have similar behavior, though some variable names differ.
  User-facing changes include:

  - ``find_*`` functions will search NDK ABI / API specific paths by default.

  - The default :variable:`CMAKE_BUILD_TYPE` for Android is
    now ``RelWithDebInfo``.

  - The :variable:`CMAKE_ANDROID_NDK_VERSION` variable was added to
    report the version of the NDK.

File-Based API
--------------

* The :manual:`cmake-file-api(7)` gained a new "toolchains" object
  kind that describes the compiler used for each enabled language.

Commands
--------

* :command:`add_custom_command` and :command:`add_custom_target` now
  support :manual:`generator expressions <cmake-generator-expressions(7)>`
  in their ``OUTPUT`` and ``BYPRODUCTS`` options.

  Their ``COMMAND``, ``WORKING_DIRECTORY``, and ``DEPENDS`` options gained
  support for new generator expressions :genex:`$<COMMAND_CONFIG:...>` and
  :genex:`$<OUTPUT_CONFIG:...>` that control cross-config handling when using
  the :generator:`Ninja Multi-Config` generator.

* The :command:`add_custom_command` command gained ``DEPFILE`` support on
  :ref:`Makefile Generators`.

* The :command:`add_library` command previously prohibited imported object
  libraries when using potentially multi-architecture configurations.
  This mostly affected the :generator:`Xcode` generator, e.g. when targeting
  iOS or one of the other device platforms.  This restriction has now been
  removed.

* The :command:`cmake_path` command was added for operations on
  filesystem paths.

* The :command:`configure_file` command gained ``USE_SOURCE_PERMISSIONS``
  and ``FILE_PERMISSIONS`` options to support copying of permissions of the
  source file and using specified permissions respectively.

* The :command:`file(GENERATE)` command gained a ``NEWLINE_STYLE`` option to
  specify how newlines are handled for the generated file.

* The :command:`file(GENERATE)` command gained ``NO_SOURCE_PERMISSIONS``,
  ``USE_SOURCE_PERMISSIONS``, and ``FILE_PERMISSIONS`` options for controlling
  the permissions of the generated file.

* The :command:`install(FILES)` command ``RENAME`` option learned to
  support :manual:`generator expressions <cmake-generator-expressions(7)>`.

* The :command:`target_include_directories` command gained a new option
  ``AFTER``.

* The :command:`target_sources` command now supports targets created
  by the :command:`add_custom_target` command.

* The :command:`try_run` command gained a ``WORKING_DIRECTORY`` option to
  set the working directory in which to run the compiled check executable.

Variables
---------

* The :variable:`CMAKE_<LANG>_BYTE_ORDER` variable was added to provide the
  target architecture byte order detected from the toolchain.

* The :variable:`CMAKE_RUNTIME_OUTPUT_DIRECTORY`,
  :variable:`CMAKE_LIBRARY_OUTPUT_DIRECTORY`, and
  :variable:`CMAKE_ARCHIVE_OUTPUT_DIRECTORY` variables now support
  target-dependent generator expressions.

Properties
----------

* The :prop_tgt:`<LANG>_CLANG_TIDY` target property and the associated
  :variable:`CMAKE_<LANG>_CLANG_TIDY` variable learned to support
  the ``OBJC`` and ``OBJCXX`` languages.

* The :prop_tgt:`EXPORT_COMPILE_COMMANDS` target property was added
  for the associated :variable:`CMAKE_EXPORT_COMPILE_COMMANDS` variable
  to allow for configuration of exporting compile commands per target.

* The :prop_sf:`GENERATED` source-file property is now visible
  from any directory scope, regardless of the scope in which it is set.
  See policy :policy:`CMP0118`.

* The :prop_tgt:`UNITY_BUILD_UNIQUE_ID` target property
  was added to support generation of an identifier that is
  unique per source file in unity builds.  It can help to
  resolve duplicate symbol problems with anonymous namespaces.

* The :prop_tgt:`WIN32_EXECUTABLE` target property now works with Clang
  on Windows.

* The :prop_tgt:`XCODE_EMBED_FRAMEWORKS <XCODE_EMBED_<type>>` target property
  was added to tell the :generator:`Xcode` generator to embed frameworks.
  Aspects of the embedding can be customized with the
  :prop_tgt:`XCODE_EMBED_FRAMEWORKS_PATH <XCODE_EMBED_<type>>`,
  :prop_tgt:`XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY`, and
  :prop_tgt:`XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY` target properties.

Modules
-------

* The :module:`ExternalData` module :command:`ExternalData_Add_Target`
  function gained a ``SHOW_PROGRESS <bool>`` option for controlling whether
  or not to show progress output during the build.

* The :module:`ExternalProject` module :command:`ExternalProject_Add` function
  gained a ``CONFIGURE_HANDLED_BY_BUILD`` option.  This can be used to make
  subsequent runs of the configure step be triggered by the build step when
  an external project dependency rebuilds instead of always re-running the
  configure step in such cases.

* The :module:`FindBoost` module gained a ``Boost_NO_WARN_NEW_VERSIONS``
  option to silence the warning about unknown dependencies for new
  Boost versions.

* The :module:`FindCUDAToolkit` module gained support for finding CUDA
  toolkits when ``nvcc`` is a symbolic link,
  for example due to a ``ccache`` or ``colornvcc`` wrapper script.

* The :module:`FindGDAL` module has been improved to document and mark as
  advanced its cache variables. There is a new ``FindGDAL_SKIP_GDAL_CONFIG``
  variable which may be used to skip over the ``gdal-config``-based search.
  Users may also set ``GDAL_ADDITIONAL_LIBRARY_VERSIONS`` to add additional
  versions to the library name search strategy.

* The :module:`FindIntl` module now provides an imported target.

* The :module:`FindOpenSSL` module learned to support a version range.

* The :module:`FindPython3`, :module:`FindPython2` and :module:`FindPython`
  modules gained options controlling how unversioned interpreter names are
  searched.

* The :module:`UseJava` module ``add_jar()`` command's
  ``GENERATE_NATIVE_HEADERS`` feature gained options to export the
  generated target.

* The :module:`UseSWIG` module gained the capability, for
  :ref:`Makefile <Makefile Generators>` and :ref:`Ninja <Ninja Generators>`
  generators, to use the ``swig`` tool to generate implicit dependencies.

Autogen
-------

* The :ref:`Qt AUTOMOC` feature now works with per-config sources.

CTest
-----

* :manual:`ctest(1)` gained a :option:`--test-dir <ctest --test-dir>`
  option to specify the directory in which to look for tests.

CPack
-----

* :module:`CPack` gained the :variable:`CPACK_THREADS` variable to
  control the number of threads used for parallelized operations,
  such as compressing the installer package.

* The :cpack_gen:`CPack DEB Generator` learned a new
  :variable:`CPACK_DEBIAN_PACKAGE_SHLIBDEPS_PRIVATE_DIRS`
  variable to specify additional search directories for
  resolving private library dependencies when using
  ``dpkg-shlibdeps``.

* The :cpack_gen:`CPack IFW Generator` gained a new
  :variable:`CPACK_IFW_PACKAGE_WIZARD_SHOW_PAGE_LIST` variable to
  control visibility of the widget listing installer pages on the left side
  of the wizard. This feature available only since QtIFW 4.0.

* The :cpack_gen:`CPack NSIS Generator` gained new
  :variable:`CPACK_NSIS_BRANDING_TEXT` and
  :variable:`CPACK_NSIS_BRANDING_TEXT_TRIM_POSITION` variables to change
  the text at the bottom of the install window and change its trim position

* The :cpack_gen:`CPack NSIS Generator` now correctly handles Unicode
  characters.  If you want to have a :variable:`CPACK_RESOURCE_FILE_LICENSE`
  with UTF-8 characters, it needs to be encoded in UTF-8 BOM.

* The :cpack_gen:`CPack NuGet Generator` gained options:

  - :variable:`CPACK_NUGET_PACKAGE_ICON` and
    :variable:`CPACK_NUGET_<compName>_PACKAGE_ICON`
    allow package icons to be specified by local files.
  - :variable:`CPACK_NUGET_PACKAGE_LICENSE_EXPRESSION` and
    :variable:`CPACK_NUGET_<compName>_PACKAGE_LICENSE_EXPRESSION` add
    support for specifying licenses recognized by the
    `Software Package Data Exchange`_ (SPDX).
  - :variable:`CPACK_NUGET_PACKAGE_LICENSE_FILE_NAME` and
    :variable:`CPACK_NUGET_<compName>_PACKAGE_LICENSE_FILE_NAME` allow
    licenses to be specified by local files.
  - :variable:`CPACK_NUGET_PACKAGE_LANGUAGE` and
    :variable:`CPACK_NUGET_<compName>_PACKAGE_LANGUAGE` allow the locale
    for a package to be specified, for example ``en_CA``.

.. _Software Package Data Exchange: https://spdx.dev/

Deprecated and Removed Features
===============================

* The :manual:`cmake-server(7)` mode has been removed.
  Clients should use the :manual:`cmake-file-api(7)` instead.

* The :module:`WriteCompilerDetectionHeader` module has been deprecated
  via policy :policy:`CMP0120`.  Projects should be ported away from it.

* The :module:`TestBigEndian` module has been deprecated in favor
  of the :variable:`CMAKE_<LANG>_BYTE_ORDER` variable.

* The :module:`AddFileDependencies` module is deprecated.
  Port projects to use :command:`set_property` directly.

* The :cpack_gen:`CPack NuGet Generator` deprecated some variables to reflect
  changes in the NuGet specification:

  - :variable:`CPACK_NUGET_PACKAGE_ICONURL` and
    :variable:`CPACK_NUGET_<compName>_PACKAGE_ICONURL` have been deprecated;
    replace with a reference to a local icon file.
  - :variable:`CPACK_NUGET_PACKAGE_LICENSEURL` and
    :variable:`CPACK_NUGET_<compName>_PACKAGE_LICENSEURL` have been deprecated;
    replace with a reference to the project's license file or SPDX
    license expression.

Other Changes
=============

* When running :manual:`cmake(1)` to :ref:`Generate a Project Buildsystem`,
  unknown command-line arguments starting with a hyphen (``-``) are now
  rejected with an error.  Previously they were silently ignored.

* Source file extensions must now be explicit.
  See policy :policy:`CMP0115` for details.

* The :prop_sf:`LANGUAGE` source file property now forces compilation
  as the specified language.  See policy :policy:`CMP0119`.

* On AIX, installation of XCOFF executables and shared libraries
  no longer requires relinking to change the runtime search path
  from the build-tree RPATH to the install-tree RPATH.  CMake now
  edits the XCOFF binaries directly during installation, as has
  long been done on ELF platforms.

* With MSVC-like compilers the value of
  :variable:`CMAKE_CXX_FLAGS <CMAKE_<LANG>_FLAGS>` no longer contains
  the ``/GR`` flag for runtime type information by default.
  See policy :policy:`CMP0117`.

* Ninja generators now transform the ``DEPFILE`` generated by an
  :command:`add_custom_command`. See policy :policy:`CMP0116` for details.

* The precompiled Linux binaries provided on
  `cmake.org <https://cmake.org/download/>`_ have changed their naming pattern
  to ``cmake-$ver-linux-$arch``, where ``$arch`` is either ``x86_64`` or
  ``aarch64``.

* The precompiled Windows binaries provided on
  `cmake.org <https://cmake.org/download/>`_ have changed their naming pattern
  to ``cmake-$ver-windows-$arch``, where ``$arch`` is either ``x86_64`` or
  ``i386``.

Updates
=======

Changes made since CMake 3.20.0 include the following.

3.20.1
------

* The :module:`FindIntl` module in CMake 3.20.0 added checks
  ``Intl_HAVE_GETTEXT_BUILTIN``, ``Intl_HAVE_DCGETTEXT_BUILTIN``,
  and ``Intl_IS_BUILTIN``, but they were not implemented correctly.
  These have been removed and replaced with a single ``Intl_IS_BUILT_IN``
  check, whose name is consistent with the :module:`FindIconv` module.

* The ``-rpath`` linker flag is now specified as supported on all Apple
  platforms, not just macOS.  The ``install_name_dir`` used for
  iOS, tvOS and watchOS should now default to ``@rpath`` instead of using
  a full absolute path and failing at runtime when the library or framework
  is embedded in an application bundle (see :prop_tgt:`XCODE_EMBED_<type>`).

3.20.2
------

* The Intel Classic 2021 compiler version numbers are now detected correctly
  as having major version 2021.  CMake 3.20.1 and below were not aware of a
  change to the identification macro version scheme made by Intel starting
  in version 2021, and detected the version as 20.2.

* The Intel oneAPI Fortran compiler is now identified as ``IntelLLVM``.
  The oneAPI 2021.1 Fortran compiler is missing an identification macro,
  so CMake 3.20.1 and below identified it as ``Intel``.  CMake now has
  a special case to recognize oneAPI 2021.1 Fortran as ``IntelLLVM``.
  The oneAPI 2021.2 Fortran compiler defines the proper identification
  macro and so is identified as ``IntelLLVM`` by all CMake 3.20 versions.

3.20.3, 3.20.4, 3.20.5, 3.20.6
------------------------------

These versions made no changes to documented features or interfaces.
Some implementation updates were made to support ecosystem changes
and/or fix regressions.



/P/🚀 release/3.19.rst
====================================


CMake 3.19 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.18 include the following.

New Features
============

Presets
-------

* :manual:`cmake(1)` and :manual:`cmake-gui(1)` now recognize
  ``CMakePresets.json`` and ``CMakeUserPresets.json`` files (see
  :manual:`cmake-presets(7)`).

Generators
----------

* The :generator:`Xcode` generator now uses the Xcode "new build system"
  when generating for Xcode 12.0 or higher.
  See the :variable:`CMAKE_XCODE_BUILD_SYSTEM` variable.
  One may use ``-T buildsystem=1`` to switch to the legacy build system.

* The :generator:`Xcode` generator gained support for linking libraries and
  frameworks via the *Link Binaries With Libraries* build phase instead of
  always by embedding linker flags directly.  This behavior is controlled by
  a new :prop_tgt:`XCODE_LINK_BUILD_PHASE_MODE` target property, which is
  initialized by a new :variable:`CMAKE_XCODE_LINK_BUILD_PHASE_MODE`
  variable.

* The :ref:`Visual Studio Generators` for VS 2015 and above gained support
  for the Visual Studio Tools for Android.  One may now set
  :variable:`CMAKE_SYSTEM_NAME` to ``Android`` to generate ``.vcxproj`` files
  for the Android tools.

Languages
---------

* CMake learned to support ``ISPC`` as a first-class language that can be
  enabled via the :command:`project` and :command:`enable_language` commands.
  ``ISPC`` is currently supported by the :ref:`Makefile Generators`
  and the :generator:`Ninja` generator on Linux, macOS, and Windows
  using the Intel ISPC compiler.

* ``CUDA`` language support for Clang now includes:

  - separable compilation (:prop_tgt:`CUDA_SEPARABLE_COMPILATION`), and
  - finding scattered toolkit installations when cross-compiling.

* ``CUDA`` language support now works on QNX.

Platforms
---------

* Apple Silicon is now supported (since CMake 3.19.2):

  * The :variable:`CMAKE_HOST_SYSTEM_PROCESSOR` is selected using ``uname -m``.
    Since this may vary based on CMake's own architecture and that of
    the invoking process tree, the :variable:`CMAKE_APPLE_SILICON_PROCESSOR`
    variable or :envvar:`CMAKE_APPLE_SILICON_PROCESSOR` environment
    variable may be set to specify a host architecture explicitly.

  * If :variable:`CMAKE_OSX_ARCHITECTURES` is not set, CMake adds explicit
    flags to tell the compiler to build for the
    :variable:`CMAKE_HOST_SYSTEM_PROCESSOR` so the toolchain does not
    have to guess based on the process tree's architecture.

File-Based API
--------------

* The :manual:`cmake-file-api(7)` "codemodel" version 2 ``version`` field has
  been updated to 2.2.

* The :manual:`cmake-file-api(7)` "codemodel" version 2 "target" object
  gained a new ``languageStandard`` field in the ``compileGroups`` objects.

Command-Line
------------

* The :manual:`cmake(1)` command-line tool's ``--install`` mode gained a
  ``--default-directory-permissions`` option.

* :manual:`cmake(1)` gained a ``-E create_hardlink`` command-line tool
  that can be used to create hardlinks between files.

GUI
---

* The :manual:`CMake GUI <cmake-gui(1)>` now has an environment variable
  editor.

Commands
--------

* The :command:`add_test` command now (officially) supports whitespace and
  other special characters in the name for the test it creates.
  See policy :policy:`CMP0110`.

* The :command:`cmake_language` command gained a ``DEFER`` mode to
  schedule command calls to occur at the end of processing a directory.

* The :command:`configure_file` command gained a ``NO_SOURCE_PERMISSIONS``
  option to suppress copying the input file's permissions to the output file.

* The :command:`execute_process` command gained a ``COMMAND_ERROR_IS_FATAL``
  option to specify a fatal error.

* The :command:`file(ARCHIVE_CREATE)` command gained a ``COMPRESSION_LEVEL``
  option to specify the compression level.

* The :command:`file(CHMOD)` and :command:`file(CHMOD_RECURSE)` subcommands
  were added to set permissions of files and directories.

* The :command:`file(DOWNLOAD)` command ``<file>`` argument is now
  optional.  If it is not specified, the file is not saved.

* The :command:`file(GENERATE)` command gained a new ``TARGET`` keyword to
  support resolving target-dependent generator expressions.

* The :command:`file` command gained a new ``REAL_PATH`` sub-command to
  compute a path with symlinks resolved.

* The :command:`find_package` command learned to handle a version range.

* The :command:`separate_arguments` command gained a new ``PROGRAM`` option.
  It allows the arguments to be treated as a program invocation and will
  resolve the executable to a full path if it can be found.

* The ``DIRECTORY`` option of the :command:`set_property`,
  :command:`get_property`, and :command:`get_directory_property` commands
  now accepts references to binary directory paths, such as the value of
  :variable:`CMAKE_CURRENT_BINARY_DIR`.

* The :command:`string` command gained a set of new ``JSON`` sub commands
  that provide JSON parsing capabilities.

Variables
---------

* The :variable:`CMAKE_CLANG_VFS_OVERLAY` variable was added to tell
  Clang to use a VFS overlay to support the Windows SDK when
  cross-compiling from hosts with case-sensitive filesystems.

* The :variable:`CMAKE_MFC_FLAG` variable now supports generator expressions.

* The :variable:`CMAKE_OPTIMIZE_DEPENDENCIES` variable was added to
  initialize the new :prop_tgt:`OPTIMIZE_DEPENDENCIES` target property and
  avoid unnecessarily building dependencies for a static library.

* The :variable:`CMAKE_PCH_INSTANTIATE_TEMPLATES` variable was added to
  initialize the new :prop_tgt:`PCH_INSTANTIATE_TEMPLATES` target property.

* The :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM` variable
  was added to tell the :ref:`Visual Studio Generators` what maximum
  version of the Windows SDK to choose.

Properties
----------

* The :prop_tgt:`EXCLUDE_FROM_ALL` target property now supports
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

* The :prop_tgt:`OPTIMIZE_DEPENDENCIES` target property was added to
  avoid unnecessarily building dependencies for a static library.

* The :prop_tgt:`PCH_INSTANTIATE_TEMPLATES` target property was added to enable
  template instantiation in the precompiled header. This is enabled by default
  and may significantly improve compile times. Currently only supported for
  Clang (version 11 or later).

* The :prop_tgt:`WIN32_EXECUTABLE` target property now supports
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

Modules
-------

* The :module:`CheckCompilerFlag` module has been added to
  generalize :module:`CheckCCompilerFlag` and
  :module:`CheckCXXCompilerFlag` to more languages.
  It also supports the ``CUDA`` and ``ISPC`` languages.

* The :module:`CheckLinkerFlag` module now supports the ``CUDA`` language.

* The :module:`CheckSourceCompiles` module has been added to
  generalize :module:`CheckCSourceCompiles` and
  :module:`CheckCXXSourceCompiles` to more languages.
  It also supports the ``CUDA`` and ``ISPC`` languages.

* The :module:`CheckSourceRuns` module has been added to
  generalize :module:`CheckCSourceRuns` and
  :module:`CheckCXXSourceRuns` to more languages.
  It also supports the ``CUDA`` language.

* The :module:`CMakePackageConfigHelpers` module gained support for version
  ranges.

* The :module:`FindCUDAToolkit` module gained support for finding CUDA
  toolkits that do not contain ``nvcc``, as well as for finding scattered
  toolkit installations when cross-compiling.

* The :module:`FindPackageHandleStandardArgs` module learned to handle
  version ranges. It also gained the ``find_package_check_version()`` command
  to check the validity of a version against version-related arguments of
  :command:`find_package` command.

* The :module:`FindPython3`, :module:`FindPython2` and :module:`FindPython`
  modules gained the ability to handle a version range.

* The :module:`FindPython3`, :module:`FindPython2` and :module:`FindPython`
  modules provide, respectively, the variable ``Python3_LINK_OPTIONS``,
  ``Python2_LINK_OPTIONS`` and ``Python_LINK_OPTIONS`` for link options.

* The :module:`FindSDL` module now provides:

  * An imported target ``SDL::SDL``.

  * Result variables ``SDL_LIBRARIES`` and ``SDL_INCLUDE_DIRS``.

  * Version variables ``SDL_VERSION``, ``SDL_VERSION_MAJOR``,
    ``SDL_VERSION_MINOR``, and ``SDL_VERSION_PATCH``.

* The :module:`FindSWIG` module gained the ability to handle a version range.

* The :module:`FindTIFF` module gained a ``CXX`` component to
  find the ``tiffxx`` library containing C++ bindings.

* The :module:`FindVulkan` module now provides a ``Vulkan::glslc`` imported
  target and associated ``Vulkan_GLSLC_EXECUTABLE`` variable which contain
  the path to the GLSL SPIR-V compiler.

* The :module:`UseSWIG` module gained support for new source file properties
  ``OUTPUT_DIR`` and ``OUTFILE_DIR`` to manage output directories on a
  per-source basis.

CTest
-----

* :manual:`ctest(1)` now supports the CUDA ``compute-sanitizer`` checker
  (previously known as ``cuda-memcheck``) as the ``CTEST_MEMORYCHECK_COMMAND``.
  The different tools (``memcheck``, ``racecheck``, ``synccheck`` and
  ``initcheck``) supported by ``compute-sanitizer`` can be selected by
  adding appropriate flags to the ``CTEST_MEMORYCHECK_COMMAND_OPTIONS``
  variable.  The default flags are ``--tool memcheck --leak-check full``.

CPack
-----

* CPack gained the :variable:`CPACK_PRE_BUILD_SCRIPTS`,
  :variable:`CPACK_POST_BUILD_SCRIPTS`, and :variable:`CPACK_PACKAGE_FILES`
  variables.

* The :cpack_gen:`CPack External Generator` gained the
  :variable:`CPACK_EXTERNAL_BUILT_PACKAGES` variable.

* The :cpack_gen:`CPack WIX Generator` gained a
  :variable:`CPACK_WIX_CUSTOM_XMLNS` option to specify custom XML namespaces.

Other
-----

* :ref:`Interface Libraries` may now have source files added via
  :command:`add_library` or :command:`target_sources`.  Those
  with sources will be generated as part of the build system.

Deprecated and Removed Features
===============================

* Compatibility with versions of CMake older than 2.8.12 is now deprecated
  and will be removed from a future version.  Calls to
  :command:`cmake_minimum_required` or :command:`cmake_policy` that set
  the policy version to an older value now issue a deprecation diagnostic.

* An explicit deprecation diagnostic was added for policy ``CMP0071``
  (``CMP0071`` and below were already deprecated).
  The :manual:`cmake-policies(7)` manual explains that the OLD behaviors
  of all policies are deprecated and that projects should port to the
  NEW behaviors.

* macOS SDKs older than 10.5 are no longer supported.

* :manual:`cmake-gui(1)` now requires Qt5.
  Support for compiling with Qt4 has been removed.

* The :manual:`cmake(1)` command-line option ``--warn-unused-vars`` has
  been removed and is now silently ignored.  The option has not worked
  correctly since CMake 3.3.

Documentation
=============

The following guides have been added:

* :guide:`IDE Integration Guide`
* :guide:`Importing and Exporting Guide`

Other Changes
=============

* Building for macOS will now use the latest SDK available on the system,
  unless the user has explicitly chosen a SDK using
  :variable:`CMAKE_OSX_SYSROOT`.  The deployment target or system macOS
  version will not affect the choice of SDK.

* The :variable:`CMAKE_<LANG>_COMPILER` variable may now be used to
  store "mandatory" compiler flags like the :envvar:`CC` and other environment
  variables.

* The :variable:`CMAKE_<LANG>_FLAGS_INIT` variable will now be considered
  during the compiler identification check if other sources like
  :variable:`CMAKE_<LANG>_FLAGS` or :envvar:`CFLAGS` are not set.

* The :command:`find_program` command now requires permission to execute
  but not to read the file found.  See policy :policy:`CMP0109`.

* An imported target missing its location property fails during generation
  if the location is used.  See policy :policy:`CMP0111`.

* The following target-based generator expressions that query for directory or
  file name components no longer add a dependency on the evaluated target.
  See policy :policy:`CMP0112`.

  - ``TARGET_FILE_DIR``
  - ``TARGET_LINKER_FILE_BASE_NAME``
  - ``TARGET_LINKER_FILE_NAME``
  - ``TARGET_LINKER_FILE_DIR``
  - ``TARGET_SONAME_FILE_NAME``
  - ``TARGET_SONAME_FILE_DIR``
  - ``TARGET_PDB_FILE_NAME``
  - ``TARGET_PDB_FILE_DIR``
  - ``TARGET_BUNDLE_DIR``
  - ``TARGET_BUNDLE_CONTENT_DIR``

* :ref:`Makefile Generators` no longer repeat custom commands from target
  dependencies.  See policy :policy:`CMP0113`.

* The :module:`ExternalProject` module handling of step target dependencies
  has been revised.  See policy :policy:`CMP0114`.

* The :prop_tgt:`OSX_ARCHITECTURES` target property is now respected
  for the ``ASM`` language.

* If ``CUDA`` compiler detection fails with user-specified
  :variable:`CMAKE_CUDA_ARCHITECTURES` or
  :variable:`CMAKE_CUDA_HOST_COMPILER`, an error is raised.

Updates
=======

Changes made since CMake 3.19.0 include the following.

3.19.1
------

* CMake 3.19.0 compiles source files with the :prop_sf:`LANGUAGE`
  property by passing an explicit language flag such as ``-x c``.
  This is consistent with the property's documented meaning that
  the source file is written in the specified language.  However,
  it can break projects that were using the property only to
  cause the specified language's compiler to be used.  This has
  been reverted to restore behavior from CMake 3.18 and below.

* CUDA 11.1 support for Clang.

3.19.2
------

* The precompiled macOS binary provided on ``cmake.org`` is now a
  universal binary with ``x86_64`` and ``arm64`` architectures.
  It requires macOS 10.10 or newer.
  The package file naming pattern has been changed from
  ``cmake-$ver-Darwin-x86_64`` to ``cmake-$ver-macos-universal``.

* Apple Silicon host architecture selection support was updated.
  CMake 3.19.0 and 3.19.1 always chose ``arm64`` as the host architecture.
  CMake 3.19.2 returns to using ``uname -m`` as CMake 3.18 and below did.
  Since this may vary based on CMake's own architecture and that of
  the invoking process tree, the :variable:`CMAKE_APPLE_SILICON_PROCESSOR`
  variable or :envvar:`CMAKE_APPLE_SILICON_PROCESSOR` environment
  variable may be set to specify a host architecture explicitly.

* The :variable:`CMAKE_ISPC_HEADER_SUFFIX` variable and corresponding
  :prop_tgt:`ISPC_HEADER_SUFFIX` target property were added to control
  the header suffix used by ``ISPC`` compiler generated headers.

3.19.3
------

* A precompiled Linux ``aarch64`` binary is now provided on ``cmake.org``.

* Two precompiled macOS binaries are now provided on ``cmake.org``:

  * The naming pattern ``cmake-$ver-macos-universal`` is a universal
    binary with ``x86_64`` and ``arm64`` architectures.  It requires
    macOS 10.13 or newer.

  * The naming pattern ``cmake-$ver-macos10.10-universal`` is a universal
    binary with ``x86_64`` and ``arm64`` architectures.  It requires
    macOS 10.10 or newer.

3.19.4
------

* The :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM`
  variable introduced in 3.19.0 previously worked only with the
  :generator:`Visual Studio 14 2015` generator.  It has now been fixed to
  work with :ref:`Visual Studio Generators` for later VS versions too.

3.19.5
------

* When :prop_tgt:`IOS_INSTALL_COMBINED` is enabled and the :generator:`Xcode`
  generator is used, it is now possible to initiate an install or package
  creation by running ``cmake --install`` or ``cpack`` from the command line.
  When using the Xcode new build system, these are the only supported methods
  due to a limitation of Xcode.  Initiating these operations by building the
  ``install`` or ``package`` targets in Xcode is only supported when using
  the legacy build system.

* The framework handling introduced in 3.19.0 as part of supporting Xcode's
  *Link Binaries With Libraries* build phase broke the ability to switch
  between device and simulator builds without reconfiguring.  That capability
  has now been restored.

3.19.6
------

* The :manual:`cmake-presets(7)` feature no longer allows comments in
  ``CMakePresets.json`` or ``CMakeUserPresets.json`` files.
  This was mistakenly allowed by the implementation in CMake 3.19.0 through
  CMake 3.19.5, and was not documented.

3.19.7
------

* With :ref:`Visual Studio Generators` for VS 2017 and higher, the
  :variable:`CMAKE_GENERATOR_TOOLSET` field ``version=`` now accepts
  three-component MSVC toolset versions such as ``14.28.29910``.
  See the :variable:`CMAKE_VS_PLATFORM_TOOLSET_VERSION` variable.



/P/🚀 release/3.18.rst
====================================


CMake 3.18 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.17 include the following.

New Features
============

Languages
---------

* The ``CUDA`` language can now be compiled using Clang on non-Windows
  platforms. Separable compilation is not yet supported on any platform.

Command-Line
------------

* :manual:`cmake(1)` gained support for profiling of CMake scripts through
  the parameters ``--profiling-output`` and ``--profiling-format``.

* :manual:`cmake(1)` gained a ``cat`` command line
  option that can be used to concatenate files and print them
  on standard output.

Commands
--------

* The :command:`add_library` and :command:`add_executable` commands
  learned to create :ref:`Alias Targets` referencing non-``GLOBAL``
  :ref:`Imported Targets`.

* The :command:`cmake_language()` command was added for meta-operations on
  scripted or built-in commands, starting with a mode to ``CALL`` other
  commands, and ``EVAL CODE`` to inplace evaluate a CMake script.

* The :command:`execute_process` command gained the ``ECHO_OUTPUT_VARIABLE``
  and ``ECHO_ERROR_VARIABLE`` options.

* The :command:`export` command now raise an error if used multiple times with
  same ``FILE`` without ``APPEND``. See policy :policy:`CMP0103`.

* The :command:`file` command gained the ``ARCHIVE_CREATE`` and
  ``ARCHIVE_EXTRACT`` subcommands to expose the :manual:`cmake(1)` ``-E tar``
  functionality to CMake scripting code.

* The :command:`file(CONFIGURE)` subcommand was created in order to replicate
  the :command:`configure_file` functionality without resorting to a
  pre-existing file on disk as input. The content is instead passed as a
  string.

* The :command:`file(UPLOAD)` command gained ``TLS_VERIFY`` and ``TLS_CAINFO``
  options to control server certificate verification.

* The :command:`find_program`, :command:`find_library`, :command:`find_path`
  and :command:`find_file` commands gained a new ``REQUIRED`` option that will
  stop processing with an error message if nothing is found.

* The :command:`get_property` command with ``SOURCE`` scope gained the
  ``DIRECTORY`` and ``TARGET_DIRECTORY`` options to get a property
  from the provided directory scope.

* The :command:`get_source_file_property` command gained the ``DIRECTORY``
  and ``TARGET_DIRECTORY`` options to get a property from the
  provided directory scope.

* The :command:`list` operation ``SORT`` gained the ``NATURAL`` sort
  option to sort using natural order (see ``strverscmp(3)`` manual).

* The :command:`set_property` command with the ``SOURCE`` scope gained the
  ``DIRECTORY`` and ``TARGET_DIRECTORY`` options to set properties
  in the provided directory scopes.

* The :command:`set_source_files_properties` command gained the ``DIRECTORY``
  and ``TARGET_DIRECTORY`` options to set properties in the provided
  directory scopes.

* The :command:`string` command learned a new ``HEX`` sub-command, which
  converts strings into their hexadecimal representation.

Variables
---------

* A :variable:`CMAKE_CUDA_ARCHITECTURES` variable was added to specify
  CUDA output architectures.  Users are encouraged to use this instead of
  specifying options manually, as this approach is compiler-agnostic.
  The variable is initialized automatically when
  :variable:`CMAKE_CUDA_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` is ``NVIDIA``.
  The variable is used to initialize the new :prop_tgt:`CUDA_ARCHITECTURES`
  target property.  See policy :policy:`CMP0104`.

* The :variable:`CMAKE_PCH_WARN_INVALID` variable was added to initialize the
  :prop_tgt:`PCH_WARN_INVALID` target property to allow the removal of the
  precompiled header invalid warning.

Properties
----------

* The :prop_tgt:`CUDA_ARCHITECTURES` target property was added to specify
  CUDA output architectures. Users are encouraged to use this instead of
  specifying options manually, as this approach is compiler-agnostic.
  The property is initialized by the new :variable:`CMAKE_CUDA_ARCHITECTURES`
  variable.  See policy :policy:`CMP0104`.

* The :prop_tgt:`Fortran_PREPROCESS` target property and
  :prop_sf:`Fortran_PREPROCESS` source-file property were added to
  control preprocessing of Fortran source files.

* The :prop_tgt:`FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>` target property
  and associated :variable:`CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>`
  variable were created to allow adding a postfix to the name of a
  framework file name when using a multi-config generator.

* The :prop_sf:`OBJECT_OUTPUTS` source file property now supports
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

* The :prop_tgt:`PCH_WARN_INVALID` target property was added to allow the
  removal of the precompiled header invalid warning.

* The :prop_tgt:`UNITY_BUILD_MODE` target property was added to tell
  generators which algorithm to use for grouping included source
  files.

* The :prop_tgt:`VS_SOURCE_SETTINGS_<tool>` target property was added
  to tell :ref:`Visual Studio Generators` for VS 2010 and above to add
  metadata to non-built source files using ``<tool>``.

* The :prop_sf:`VS_SETTINGS` source file property was added to tell
  :ref:`Visual Studio Generators` for VS 2010 and above to add
  metadata to a non-built source file.

* The :prop_tgt:`VS_PLATFORM_TOOLSET` target property was added to tell
  :ref:`Visual Studio Generators` for VS 2010 and above to override
  the platform toolset.

* The :prop_tgt:`VS_SOLUTION_DEPLOY` target property was added to tell
  :ref:`Visual Studio Generators` for VS 2010 and above to mark a
  target for deployment even when not building for Windows Phone/Store/CE.

Modules
-------

* The :module:`CheckLinkerFlag` module has been added to provide a
  facility to check validity of link flags.

* The :module:`ExternalProject` module :command:`ExternalProject_Add` command
  gained a new ``GIT_REMOTE_UPDATE_STRATEGY`` keyword.  This can be used to
  specify how failed rebase operations during a git update should be handled.
  The ``CMAKE_EP_GIT_REMOTE_UPDATE_STRATEGY`` variable was also added as a
  global default and is honored by both the :module:`ExternalProject` and
  :module:`FetchContent` modules.

* The :module:`FetchContent` module :command:`FetchContent_Declare` command
  now supports a ``SOURCE_SUBDIR`` option.  It can be used to direct
  :command:`FetchContent_MakeAvailable` to look in a different location
  for the ``CMakeLists.txt`` file.

* The :module:`FindBLAS` module now provides an imported target.

* The :module:`FindCUDAToolkit` module:

  * gained the variable
    ``CUDAToolkit_LIBRARY_ROOT``, which is the directory containing the
    ``nvvm`` directory and ``version.txt``.

  * uses toolkit and library root found during ``CUDA`` compiler detection.

* The :module:`FindLAPACK` module now provides an imported target.

* The :module:`FindPython3`, :module:`FindPython2` and :module:`FindPython`
  modules:

  * gained the possibility to create per-artifact cache variables for
    interactive editing in :manual:`cmake-gui(1)` and :manual:`ccmake(1)`.

  * gained sub-components ``Development.Module`` and
    ``Development.Embed`` under the ``Development`` component.

  * gained the capability to specify which Python implementations to find,
    including ``IronPython`` and ``PyPy``.

* The :module:`FindRuby` module input and output variables were all renamed
  from ``RUBY_`` to ``Ruby_`` for consistency with other find modules.
  Input variables of the old case will be honored if provided, and output
  variables of the old case are always provided.

* The :module:`FindSWIG` module now accepts target languages as  ``COMPONENTS``
  and ``OPTIONAL_COMPONENTS`` arguments to ``find_package``.

* The :module:`GoogleTest` module :command:`gtest_discover_tests` command:

  * gained a new ``DISCOVERY_MODE`` option to control when the test
    discovery step is run.  It offers a new ``PRE_TEST`` setting to
    run the discovery at test time instead of build time.  A new
    ``CMAKE_GTEST_DISCOVER_TESTS_DISCOVERY_MODE`` variable can be used
    to change the default globally.

  * gained a new optional parameter ``XML_OUTPUT_DIR``. When set the
    JUnit XML test results are stored in that directory.

* The :module:`FindLibXslt` module now provides imported targets.

* The :module:`UseSWIG` module now supports Fortran as a target language if
  the ``SWIG_EXECUTABLE`` is SWIG-Fortran_.

.. _`SWIG-Fortran`: https://github.com/swig-fortran/swig

Generator Expressions
---------------------

* The :genex:`$<DEVICE_LINK:...>` and :genex:`$<HOST_LINK:...>`
  generator expressions were added to manage device and host link steps.

* The :genex:`$<LINK_LANGUAGE:...>` and :genex:`$<LINK_LANG_AND_ID:...>`
  generator expressions were added.

CTest
-----

* :manual:`ctest(1)` gained a new :variable:`CTEST_RESOURCE_SPEC_FILE`
  variable, which can be used to specify a
  :ref:`resource specification file <ctest-resource-specification-file>`.

* :manual:`ctest(1)` gained a ``--stop-on-failure`` option,
  which can be used to stop running the tests once one has failed.

* The :command:`ctest_test` command gained a ``STOP_ON_FAILURE`` option
  which can be used to stop running the tests once one has failed.

* The :module:`CTestCoverageCollectGCOV` module
  :command:`ctest_coverage_collect_gcov` command gained a
  ``TARBALL_COMPRESSION`` option to control compression of the
  tarball of collected results.

CPack
-----

* The :cpack_gen:`CPack Archive Generator`'s ``TXZ`` format learned the
  :variable:`CPACK_ARCHIVE_THREADS` variable to enable parallel compression.
  Requires support in the ``liblzma`` used by CMake.

* The :cpack_gen:`CPack NSIS Generator` gained a new variable
  :variable:`CPACK_NSIS_MANIFEST_DPI_AWARE` to declare that the
  installer is DPI-aware.

* The :cpack_gen:`CPack RPM Generator` gained
  :variable:`CPACK_RPM_PRE_TRANS_SCRIPT_FILE` and
  :variable:`CPACK_RPM_POST_TRANS_SCRIPT_FILE`
  variables to specify pre- and post-transaction scripts.

Other
-----

* :manual:`cmake-gui(1)` now populates its generator selection
  widget default value from the :envvar:`CMAKE_GENERATOR` environment
  variable.  Additionally, environment variables
  :envvar:`CMAKE_GENERATOR_PLATFORM` and :envvar:`CMAKE_GENERATOR_TOOLSET`
  are used to populate their respective widget defaults.

* :manual:`ccmake(1)` learned to read a :envvar:`CCMAKE_COLORS`
  environment variable to customize colors.

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality
  is now aware of the availability of C11 features in MSVC 19.27 and 19.28,
  including support for the ``c_restrict``, ``c_static_assert`` features and
  the ``-std:c11`` flag.

Deprecated and Removed Features
===============================

* The :module:`Documentation` module has been deprecated via
  :policy:`CMP0106`. This module was essentially VTK code that CMake should
  not be shipping anymore.

* An explicit deprecation diagnostic was added for policy ``CMP0070``
  and policy ``CMP0071`` (``CMP0069`` and below were already deprecated).
  The :manual:`cmake-policies(7)` manual explains that the OLD behaviors
  of all policies are deprecated and that projects should port to the
  NEW behaviors.

Other Changes
=============

* On Windows, the :generator:`Ninja` and :generator:`Ninja Multi-Config`
  generators, when a compiler is not explicitly specified, now select
  the first compiler (of any name) found in directories listed by the
  ``PATH`` environment variable.

* The :prop_tgt:`LINK_OPTIONS` and :prop_tgt:`INTERFACE_LINK_OPTIONS` target
  properties are now used for the device link step.
  See policy :policy:`CMP0105`.

* Creation of an ``ALIAS`` target overwriting an existing target now raises an
  error. See policy :policy:`CMP0107`.

* Linking a target to itself through an alias now raises an error.
  See policy :policy:`CMP0108`.

* The :module:`FindPackageHandleStandardArgs` module option ``REQUIRED_VARS``
  is now optional if ``HANDLE_COMPONENTS`` is specified.

* The :command:`source_group` command now also recognizes forward slashes
  as subgroup delimiters, not just backslashes.

* :manual:`ctest(1)` now logs environment variables that it sets for each test,
  either due to the :prop_test:`ENVIRONMENT` property or the
  :ref:`resource allocation <ctest-resource-allocation>` feature, and submits
  this log to CDash. It does not log environment variables that were set
  outside of CTest.

* When building CMake itself from source and not using a system-provided
  libcurl, HTTP/2 support is now enabled for commands supporting
  network communication via ``http(s)``, such as :command:`file(DOWNLOAD)`,
  :command:`file(UPLOAD)`, and :command:`ctest_submit`.
  The precompiled binaries provided on ``cmake.org`` now support HTTP/2.

* The :manual:`cmake-file-api(7)` "codemodel" version 2 ``version`` field has
  been updated to 2.1.

* The :manual:`cmake-file-api(7)` "codemodel" version 2 "target" object gained
  a new ``precompileHeaders`` field in the ``compileGroups`` objects.

Updates
=======

Changes made since CMake 3.18.0 include the following.

3.18.1
------

* The :generator:`Xcode` generator, when :variable:`CMAKE_OSX_ARCHITECTURES`
  is not defined, now selects ``$(NATIVE_ARCH_ACTUAL)`` as the default
  architecture (the Xcode ``ARCHS`` setting).  This is needed for Xcode 12
  to select the host's architecture, which older versions of Xcode did
  by default.

* In CMake 3.18.0 the :command:`add_test` command learned to support
  special characters in test names.  This was accidentally left out of
  its release notes.  Unfortunately the fix breaks existing projects
  that were using manual quoting or escaping to work around the prior
  limitation.  This fix has been reverted in 3.18.1, but may be
  re-introduced in future versions of CMake with a policy for compatibility.

3.18.2
------

* The default value of :variable:`CMAKE_AUTOMOC_PATH_PREFIX` was changed to
  ``OFF`` because this feature can break existing projects that have
  identically named header files in different include directories.
  This restores compatibility with behavior of CMake 3.15 and below.
  The default was also changed to ``OFF`` in 3.16.9 and 3.17.5.

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality
  was updated for MSVC 19.27 as mentioned above (``c_restrict``).

3.18.3
------

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality
  was updated for MSVC 19.28 as mentioned above (``c_static_assert``).



/P/🚀 release/3.17.rst
====================================


CMake 3.17 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.16 include the following.

New Features
============

Generators
----------

* :manual:`cmake(1)` gained a :generator:`Ninja Multi-Config` generator,
  which is similar to the :generator:`Ninja` generator but can be used to build
  multiple configurations at once.

* :ref:`Visual Studio Generators` learned to support per-config sources.
  Previously only :ref:`Command-Line Build Tool Generators` supported them.

* :ref:`Visual Studio Generators` for VS 2010 and above now support
  specifying the ``VCTargetsPath`` value for project files in
  :variable:`CMAKE_GENERATOR_TOOLSET` setting.

* :ref:`Visual Studio Generators` for VS 2010 and above learned to
  support .NET Standard and .NET Core.  See the
  :prop_tgt:`DOTNET_TARGET_FRAMEWORK` target property and
  associated :variable:`CMAKE_DOTNET_TARGET_FRAMEWORK` variable.

Languages
---------

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality
  now offers meta-features for the CUDA language standard levels
  (e.g. ``cuda_std_03``, ``cuda_std_14``).  See
  :prop_gbl:`CMAKE_CUDA_KNOWN_FEATURES`.

Compilers
---------

* The IBM XL Fortran compiler is now supported by the :generator:`Ninja`
  generator.

Command-Line
------------

* :manual:`cmake(1)` gained a ``--debug-find`` command-line option to
  enable additional human-readable output on where ``find_*`` commands search.

* :manual:`cmake(1)` gained a ``--trace-format`` command-line option that
  can be used to set the ``--trace`` output format. Currently, the old
  human readable and the new JSON format are supported. The new JSON format
  is easier to parse automatically than the existing format.

* :manual:`cmake(1)` gained a ``-E rm`` command-line tool that can be
  used to remove directories and files.  This supersedes the existing
  ``-E remove`` and ``-E remove_directory`` tools and has better semantics.

Commands
--------

* The :command:`add_custom_command` command learned to interpret paths in
  ``DEPENDS`` arguments that are specified relative to the current
  binary directory.

* The :command:`foreach` command learned a new ``ZIP_LISTS`` option to iterate
  over multiple lists simultaneously.

* The :command:`load_cache(READ_WITH_PREFIX)` command mode is now allowed
  when using ``cmake -P`` to :ref:`Run a Script <Script Processing Mode>`.

* The :command:`message` command learned to output context provided in
  the :variable:`CMAKE_MESSAGE_CONTEXT` variable for log levels
  ``NOTICE`` and below.  Enable this output with the new ``--log-context``
  command-line option or :variable:`CMAKE_MESSAGE_CONTEXT_SHOW` variable.

* The :command:`message` command gained new keywords ``CHECK_START``,
  ``CHECK_PASS`` and ``CHECK_FAIL``.

* The :command:`target_compile_options` command now honors the ``BEFORE``
  keyword more consistently.  See policy :policy:`CMP0101`.

Variables
---------

* A :variable:`CMAKE_CTEST_ARGUMENTS` variable was added to specify a list
  of command-line arguments passed to CTest when running through the
  ``test`` (or ``RUN_TESTS``) target of the generated build system.

* The following variables are now defined inside a :command:`function`:

  - :variable:`CMAKE_CURRENT_FUNCTION`
  - :variable:`CMAKE_CURRENT_FUNCTION_LIST_DIR`
  - :variable:`CMAKE_CURRENT_FUNCTION_LIST_FILE`
  - :variable:`CMAKE_CURRENT_FUNCTION_LIST_LINE`

* The :variable:`CMAKE_CUDA_RUNTIME_LIBRARY` variable and
  :prop_tgt:`CUDA_RUNTIME_LIBRARY` target property were introduced to
  select the CUDA runtime library used when linking targets that
  use CUDA.

* The :variable:`CMAKE_FIND_DEBUG_MODE` variable was introduced to
  print extra ``find_*`` call information during the cmake run to standard
  error. Output is designed for human consumption and not for parsing.

* The :variable:`CMAKE_EXPORT_COMPILE_COMMANDS` variable now takes its
  initial value from the :envvar:`CMAKE_EXPORT_COMPILE_COMMANDS` environment
  variable if no explicit configuration is given.

* The :variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` variable, if not set
  explicitly, now takes its initial value from the
  :envvar:`CMAKE_<LANG>_COMPILER_LAUNCHER` environment variable.

* The :variable:`CMAKE_MESSAGE_LOG_LEVEL` variable can now be used
  to persist a log level between CMake runs, unlike the ``--log-level``
  command line option which only applies to that particular run.

* The :variable:`CMAKE_XCODE_SCHEME_ENVIRONMENT` variable was added
  to initialize the :prop_tgt:`XCODE_SCHEME_ENVIRONMENT` target property.

* The :variable:`CMAKE_XCODE_SCHEME_WORKING_DIRECTORY` variable and
  associated :prop_tgt:`XCODE_SCHEME_WORKING_DIRECTORY` target property
  were added to tell the :generator:`Xcode` generator to set the value of
  the ``Custom Working Directory`` schema option.

Properties
----------

* The :prop_tgt:`AIX_EXPORT_ALL_SYMBOLS` target property and associated
  :variable:`CMAKE_AIX_EXPORT_ALL_SYMBOLS` variable were created to
  optionally explicitly disable automatic export of symbols from shared
  libraries on AIX.

* The :prop_tgt:`DEPRECATION` target property was added to mark
  a target as deprecated.  If a linked target is marked as
  deprecated, a warning with the deprecation message is issued
  at generate time.

* The :prop_tgt:`INSTALL_NAME_DIR` target property now supports
  :manual:`generator expressions <cmake-generator-expressions(7)>`.
  In particular, the :genex:`$<INSTALL_PREFIX>` generator expression can
  be used to set the directory relative to the install-time prefix.

* Target properties :prop_tgt:`MACHO_COMPATIBILITY_VERSION` and
  :prop_tgt:`MACHO_CURRENT_VERSION` were added to set the
  ``compatibility_version`` and ``curent_version``, respectively,
  for Mach-O binaries.  For backwards compatibility, if these properties
  are not set, :prop_tgt:`SOVERSION` and :prop_tgt:`VERSION`
  are used respectively as fallbacks.

* The :prop_tgt:`VS_DOTNET_DOCUMENTATION_FILE` target property was added
  to tell :ref:`Visual Studio Generators` to generate a ``DocumentationFile``
  reference in ``.csproj`` files.

Modules
-------

* The :module:`ExternalProject` module :command:`ExternalProject_Add`
  command gained a ``GIT_SUBMODULES_RECURSE`` option to specify whether
  Git submodules should be updated recursively.  The default is on to
  preserve existing behavior.

* The :module:`FindCUDAToolkit` module was added to find the
  CUDA Toolkit without enabling CUDA as a language.

* The :module:`FindCURL` module learned to find CURL using
  the ``CURLConfig.cmake`` package configuration file generated by
  CURL's cmake buildsystem.  It also gained a new ``CURL_NO_CURL_CMAKE``
  option to disable this behavior.

* The :module:`FindFLEX` module's ``FLEX_TARGET`` command now runs ``flex``
  with :variable:`CMAKE_CURRENT_BINARY_DIR` as the working directory.
  See policy :policy:`CMP0098`.

* The :module:`FindLibArchive` module now provides an imported target
  for libarchive.

* The :module:`FindPython` module has learned to find Python components
  in active virtual environments managed by ``conda``.

* The :module:`FindPython3` and :module:`FindPython` modules gained,
  respectively, variable ``Python3_SOABI`` and ``Python_SOABI`` giving
  the standard extension suffix for modules. Moreover, commands
  ``Python3_add_library()`` and ``Python_add_library()`` gained the option
  ``WITH_SOABI`` to prefix the library suffix with the value of ``SOABI``.

* The :module:`FindLibXml2` module now provides an imported target for the
  ``xmllint`` executable.

Autogen
-------

* :prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC` learned to process headers
  with a ``.hh`` extension.  See policy :policy:`CMP0100`.

CTest
-----

* The :variable:`CTEST_CONFIGURATION_TYPE` variable is now set from the
  command line when :manual:`ctest(1)` is invoked with ``-C <cfg>``.

* The :manual:`ctest(1)` tool gained support for Dr. Memory to run
  memcheck runs.

* The :manual:`ctest(1)` tool gained a ``--no-tests=<[error|ignore]>`` option
  to explicitly set and unify the behavior between direct invocation and
  script mode if no tests were found.

* The :manual:`ctest(1)` tool gained a ``--repeat <mode>:<n>`` option
  to specify conditions in which to repeat tests.  This generalizes
  the existing ``--repeat-until-fail <n>`` option to add modes for
  ``until-pass`` and ``after-timeout``.

* The :command:`ctest_test` command gained a ``REPEAT <mode>:<n>`` option
  to specify conditions in which to repeat tests.

CPack
-----

* The :cpack_gen:`CPack DragNDrop Generator` learned to use
  the :variable:`CPACK_DMG_<component>_FILE_NAME` variable
  to set a custom filename when packaging components into
  their own DMGs.

* The :cpack_gen:`CPack DragNDrop Generator` learned to handle
  RTF formatted license files.  When :variable:`CPACK_DMG_SLA_DIR`
  variable is set, ``<language>.license.rtf`` is considered, but
  only as a fallback when the plaintext (``.txt``) file is not found
  in order to maintain backwards compatibility.

* The :cpack_gen:`CPack NSIS Generator` gained a new variable
  :variable:`CPACK_NSIS_MUI_HEADERIMAGE` to set the header image.
  To not break existing setups, it still defaults to
  :variable:`CPACK_PACKAGE_ICON` if the new variable is not set.

* The :cpack_gen:`CPack NSIS Generator` now supports
  :variable:`CPACK_NSIS_UNINSTALL_NAME`.
  This can be used to specify the name of the Uninstall program.

* The :cpack_gen:`CPack NSIS Generator` now supports
  :variable:`CPACK_NSIS_WELCOME_TITLE` and
  :variable:`CPACK_NSIS_WELCOME_TITLE_3LINES`.
  These can be used to specify the welcome page title and display it in 3 lines.

* The :cpack_gen:`CPack NSIS Generator` now supports
  :variable:`CPACK_NSIS_FINISH_TITLE` and
  :variable:`CPACK_NSIS_FINISH_TITLE_3LINES`.
  These can be used to specify the finish page title and display it in 3 lines.

* The :cpack_gen:`CPack productbuild Generator` gained support for a
  :variable:`CPACK_PRODUCTBUILD_BACKGROUND` variable to specify a background
  image for the macOS installer.

Other
-----

* :manual:`ccmake(1)` now displays cache values using colors
  based on the entry type if the terminal supports color.

* :manual:`ccmake(1)` now displays messages and a progress bar during
  configure and generate.  It will keep the output displayed if any
  errors or warnings occurred.

Deprecated and Removed Features
===============================

* An explicit deprecation diagnostic was added for policy ``CMP0068``
  and policy ``CMP0069`` (``CMP0067`` and below were already deprecated).
  The :manual:`cmake-policies(7)` manual explains that the OLD behaviors
  of all policies are deprecated and that projects should port to the
  NEW behaviors.

* The CPack ``PackageMaker`` generator has been
  deprecated because Xcode no longer distributes the PackageMaker tools.
  The undocumented ``OSXX11`` generator has also been deprecated.

* The :manual:`cmake(1)` command-line ``-E remove`` and ``-E remove_directory``
  tools are deprecated in favor of the new ``-E rm`` tool.  The older tools
  always returned 0 if a named path did not exist even without the force
  option and cannot be fixed without breaking compatibility, and so have
  been superseded.

* The :cpack_gen:`CPack NSIS Generator` now requires NSIS 3.0 or later.

Other Changes
=============

* The :manual:`file API <cmake-file-api(7)>` index file now emits a
  ``multiConfig`` flag specifying whether or not the generator supports
  multiple output configurations.

* Target link properties :prop_tgt:`INTERFACE_LINK_OPTIONS`,
  :prop_tgt:`INTERFACE_LINK_DIRECTORIES` and
  :prop_tgt:`INTERFACE_LINK_DEPENDS` are now transitive over private
  dependencies on static libraries.
  See policy :policy:`CMP0099`.

* When using MinGW tools, the :command:`find_library` command no longer
  finds ``.dll`` files by default.  Instead, it expects ``.dll.a`` import
  libraries to be available.

* The :generator:`MinGW Makefiles` generator no longer issues an error if
  ``sh.exe`` is present in the environment's ``PATH``.

* The :generator:`Ninja` generator now prefers the first ninja build
  tool to appear in the ``PATH`` no matter whether it is called
  ``ninja-build``, ``ninja``, or ``samu``.  Previously the first
  of those names to appear anywhere in the ``PATH`` would be preferred.

* With SDCC the ``sdar`` tool is now preferred over ``sdcclib`` as librarian.
  The latter was deprecated by SDCC 3.2.0 and removed in SDCC 3.8.6.

* With SDCC the default flags no longer include any target-specific flags.
  Previously the default flags were hard-coded for 8051.

* The :variable:`CMAKE_VS_GLOBALS` variable value now applies during
  compiler identification and in targets created by the
  :command:`add_custom_target` command.

* The :generator:`Xcode` generator no longer hard-codes ``-Wmost``,
  ``-Wno-four-char-constants``, and ``-Wno-unknown-pragmas`` warning flags.

Updates
=======

Changes made since CMake 3.17.0 include the following.

3.17.1
------

* CMake 3.17.0 updated the :cpack_gen:`CPack NSIS Generator` with changes
  that require NSIS 3.0 or later.  CMake 3.17.1 now enforces the use
  of a sufficiently new version.

3.17.3
------

* Selection of the Objective C or C++ compiler now considers the
  :envvar:`CC` or :envvar:`CXX` environment variable if the
  :envvar:`OBJC` or :envvar:`OBJCXX` environment variable is not set.

* The :module:`FindPkgConfig` module now extracts include directories
  prefixed with ``-isystem`` into the ``*_INCLUDE_DIRS`` variables and
  :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` target properties.
  Previously they would be places in ``*_CFLAGS_OTHER`` variables and
  :prop_tgt:`INTERFACE_COMPILE_OPTIONS` target properties.

3.17.5
------

* The default value of :variable:`CMAKE_AUTOMOC_PATH_PREFIX` was changed to
  ``OFF`` because this feature can break existing projects that have
  identically named header files in different include directories.
  This restores compatibility with behavior of CMake 3.15 and below.
  The default was also changed to ``OFF`` in 3.16.9.



/P/🚀 release/3.16.rst
====================================


CMake 3.16 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.15 include the following.

New Features
============

Languages
---------

* CMake learned to support the Objective C (``OBJC``) and Objective C++
  (``OBJCXX``) languages.  They may be enabled via the :command:`project`
  and :command:`enable_language` commands.  When ``OBJC`` or ``OBJCXX``
  is enabled, source files with the ``.m`` or ``.mm``, respectively,
  will be compiled as Objective C or C++.  Otherwise they will be treated
  as plain C++ sources as they were before.

Compilers
---------

* The ``Clang`` compiler is now supported on ``Solaris``.

Platforms
---------

* On AIX, executables using the :prop_tgt:`ENABLE_EXPORTS` target property
  now produce a linker import file with a ``.imp`` extension in addition
  to the executable file.  Plugins (created via :command:`add_library` with
  the ``MODULE`` option) that use :command:`target_link_libraries` to link
  to the executable for its symbols are now linked using the import file.
  The :command:`install(TARGETS)` command now installs the import file as
  an ``ARCHIVE`` artifact.

* On AIX, runtime linking is no longer enabled by default.  CMake provides
  the linker enough information to resolve all symbols up front.
  One may manually enable runtime linking for shared libraries and/or
  loadable modules by adding ``-Wl,-G`` to their link flags
  (e.g. in the :variable:`CMAKE_SHARED_LINKER_FLAGS` or
  :variable:`CMAKE_MODULE_LINKER_FLAGS` variable).
  One may manually enable runtime linking for executables by adding
  ``-Wl,-brtl`` to their link flags (e.g. in the
  :variable:`CMAKE_EXE_LINKER_FLAGS` variable).

Command-Line
------------

* :manual:`cmake(1)` ``-E`` now supports ``true`` and ``false`` commands,
  which do nothing while returning exit codes of 0 and 1, respectively.

* :manual:`cmake(1)` gained a ``--trace-redirect=<file>`` command line
  option that can be used to redirect ``--trace`` output to a file instead
  of ``stderr``.

* The :manual:`cmake(1)` ``--loglevel`` command line option has been
  renamed to ``--log-level`` to make it consistent with the naming of other
  command line options.  The ``--loglevel`` option is still supported to
  preserve backward compatibility.

Commands
--------

* The :command:`add_test` command learned the option ``COMMAND_EXPAND_LISTS``
  which causes lists in the ``COMMAND`` argument to be expanded, including
  lists created by generator expressions.

* The :command:`file` command learned a new sub-command,
  ``GET_RUNTIME_DEPENDENCIES``, which allows you to recursively get the list of
  libraries linked by an executable or library. This sub-command is intended as
  a replacement for :module:`GetPrerequisites`.

* The :command:`find_file`, :command:`find_library`, :command:`find_path`,
  :command:`find_package`, and :command:`find_program` commands have learned to
  check the following variables to control the default behavior for groups of
  search locations:

  * :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` - Controls the default
    behavior of searching the :variable:`<PackageName>_ROOT` variables.

  * :variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH` - Controls the default
    behavior of searching the CMake-specific environment variables.

  * :variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH` - Controls the default
    behavior of searching the standard system environment variables.

  * :variable:`CMAKE_FIND_USE_CMAKE_PATH` - Controls the default behavior of
    searching the CMake-specific cache variables.

  * :variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH` - Controls the default
    behavior of searching the platform-specific CMake variables.

* The :command:`find_package` command has learned to check the
  :variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` variable to control the default
  behavior of searching the CMake user package registry and to check the
  :variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY` variable to control
  the default behavior of searching the CMake system package registry.

* The :command:`message` command learned indentation control with the new
  :variable:`CMAKE_MESSAGE_INDENT` variable.

* The :command:`target_precompile_headers` command was added to specify
  a list of headers to precompile for faster compilation times.

Variables
---------

* The :variable:`CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS` variable has been
  introduced to optionally initialize the
  :prop_tgt:`CUDA_RESOLVE_DEVICE_SYMBOLS` target property.

* The :variable:`CMAKE_ECLIPSE_RESOURCE_ENCODING` variable was added to
  specify the resource encoding for the the :generator:`Eclipse CDT4` extra
  generator.

* The :variable:`CMAKE_UNITY_BUILD` variable was added to initialize the
  :prop_tgt:`UNITY_BUILD` target property to tell generators to batch
  include source files for faster compilation times.

Properties
----------

* The :prop_tgt:`BUILD_RPATH` and :prop_tgt:`INSTALL_RPATH` target properties
  now support :manual:`generator expressions <cmake-generator-expressions(7)>`.

* The :prop_tgt:`INSTALL_REMOVE_ENVIRONMENT_RPATH` target property was
  added to remove compiler-defined ``RPATH`` entries from a target.
  This property is initialized by the
  :variable:`CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH` variable.

* The :prop_tgt:`PRECOMPILE_HEADERS` target property was added to specify
  a list of headers to precompile for faster compilation times.
  Set it using the :command:`target_precompile_headers` command.

* The :prop_tgt:`UNITY_BUILD` target property was added to tell
  generators to batch include source files for faster compilation
  times.

* The :prop_tgt:`VS_CONFIGURATION_TYPE` target property now supports
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

* The :prop_tgt:`VS_DPI_AWARE` target property was added to tell
  :ref:`Visual Studio Generators` to set the ``EnableDpiAwareness``
  property in ``.vcxproj`` files.

* The :prop_tgt:`XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING` target property was
  added to tell the :generator:`Xcode` generator to set the value of the
  ``Allow debugging when using document Versions Browser`` schema option.

Modules
-------

* The :module:`FindDoxygen` module :command:`doxygen_add_docs` command
  gained a new ``USE_STAMP_FILE`` option.  When this option present,
  the custom target created by the command will only re-run Doxygen if
  any of the source files have changed since the last successful run.

* The :module:`FindGnuTLS` module now provides an imported target.

* The :module:`FindPackageHandleStandardArgs` module
  :command:`find_package_handle_standard_args` command gained
  a new ``REASON_FAILURE_MESSAGE`` option to specify a message
  giving the reason for the failure.

* The :module:`FindPkgConfig` module :command:`pkg_search_module` macro
  now defines a ``<prefix>_MODULE_NAME`` result variable containing the
  first matching module name.

* The :module:`FindPython3` and :module:`FindPython` modules gained
  options to control which ``ABIs`` will be searched.

* The :module:`FindPython3`, :module:`FindPython2`, and :module:`FindPython`
  modules now support direct specification of artifacts via cache entries.

Autogen
-------

* When using :prop_tgt:`AUTOMOC`, the new :variable:`CMAKE_AUTOMOC_PATH_PREFIX`
  variable or :prop_tgt:`AUTOMOC_PATH_PREFIX` target property may be enabled
  to generate the ``-p`` path prefix
  option for ``moc``.  This ensures that ``moc`` output files are identical
  on different build setups (given, that the headers compiled by ``moc`` are
  in an :command:`include directory <target_include_directories>`).
  Also it ensures that ``moc`` output files will compile correctly when the
  source and/or build directory is a symbolic link.

CTest
-----

* :manual:`ctest(1)` now has the ability to schedule tests based on resource
  requirements for each test. See :ref:`ctest-resource-allocation` for
  details.

* A new test property, :prop_test:`SKIP_REGULAR_EXPRESSION`, has been added.
  This property is similar to :prop_test:`FAIL_REGULAR_EXPRESSION` and
  :prop_test:`PASS_REGULAR_EXPRESSION`, but with the same meaning as
  :prop_test:`SKIP_RETURN_CODE`. This is useful, for example, in cases where
  the user has no control over the return code of the test. For example, in
  Catch2, the return value is the number of assertion failed, therefore it is
  impossible to use it for :prop_test:`SKIP_RETURN_CODE`.

CPack
-----

* :manual:`cpack(1)` learned support for multiple configurations for ``-C``
  option.

* The :cpack_gen:`CPack DEB Generator` is now able to format generic text
  (usually used as the description for multiple CPack generators) according
  to the `Debian Policy Manual`_.  See the
  :variable:`CPACK_PACKAGE_DESCRIPTION_FILE` and
  :variable:`CPACK_DEBIAN_<COMPONENT>_DESCRIPTION` variables.

* The :cpack_gen:`CPack Archive Generator` learned to generate ``.tar.zst``
  packages with Zstandard compression.

.. _`Debian Policy Manual`: https://www.debian.org/doc/debian-policy/ch-controlfields.html#description

Deprecated and Removed Features
===============================

* An explicit deprecation diagnostic was added for policy ``CMP0067``
  (``CMP0066`` and below were already deprecated).
  The :manual:`cmake-policies(7)` manual explains that the OLD behaviors
  of all policies are deprecated and that projects should port to the
  NEW behaviors.

* The :variable:`CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY` variable has been
  deprecated.  Use the :variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` variable
  instead.

* The :module:`GetPrerequisites` module has been deprecated, as it has been
  superseded by :command:`file(GET_RUNTIME_DEPENDENCIES)`.

* The ``CPACK_INSTALL_SCRIPT`` variable has been deprecated in favor of the
  new, more accurately named :variable:`CPACK_INSTALL_SCRIPTS` variable.

Other Changes
=============

* The :manual:`cmake(1)` ``-C <initial-cache>`` option now evaluates the
  initial cache script with :variable:`CMAKE_SOURCE_DIR` and
  :variable:`CMAKE_BINARY_DIR` set to the top-level source and build trees.

* The :manual:`cmake(1)` ``-E remove_directory`` command-line tool,
  when given the path to a symlink to a directory, now removes just
  the symlink.  It no longer removes content of the linked directory.

* The :manual:`ctest(1)`  ``--build-makeprogram`` command-line option now
  specifies the make program used when configuring a project with the
  :generator:`Ninja` generator or the :ref:`Makefile Generators`.

* The :module:`ExternalProject` module :command:`ExternalProject_Add` command
  has been updated so that ``GIT_SUBMODULES ""`` initializes no submodules.
  See policy :policy:`CMP0097`.

* The :module:`FindGTest` module has been updated to recognize
  MSVC build trees generated by GTest 1.8.1.

* The :command:`project` command no longer strips leading zeros in version
  components.  See policy :policy:`CMP0096`.

* The Qt Compressed Help file is now named ``CMake.qch``, which no longer
  contains the release version in the file name.  When CMake is upgraded
  in-place, the name and location of this file will remain constant.
  Tools such as IDEs, help viewers, etc. should now be able to refer to this
  file at a fixed location that remains valid across CMake upgrades.

* ``RPATH`` entries are properly escaped in the generated CMake scripts
  used for installation.  See policy :policy:`CMP0095`.

* When using :variable:`CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS` on Windows the
  auto-generated exports are now updated only when the object files
  providing the symbols are updated.

Updates
=======

Changes made since CMake 3.16.0 include the following.

3.16.2
------

* CMake 3.16.0 and 3.16.1 processed ``.hh`` files with :prop_tgt:`AUTOMOC`.
  This was a behavior change from CMake 3.15 and below that can break
  existing projects, so it has been reverted as of 3.16.2.

3.16.5
------

* The :module:`FindPython`, :module:`FindPython2`, and :module:`FindPython3`
  modules no longer create cache entries for ``Python{,2,3}_LIBRARY_RELEASE``
  and ``Python{,2,3}_LIBRARY_DEBUG``.  Those values are always computed from
  other results and so should not be cached.  The entries were created by
  CMake 3.16.0 through 3.16.4 but were always ``FORCE``-set and could not
  be meaningfully edited by users.

  Additionally, the modules no longer expose their internal ``_Python*``
  cache entries publicly.  CMake 3.16.0 through 3.16.4 accidentally
  made them visible as advanced cache entries.

3.16.7
------

* Selection of the Objective C or C++ compiler now considers the
  :envvar:`CC` or :envvar:`CXX` environment variable if the
  :envvar:`OBJC` or :envvar:`OBJCXX` environment variable is not set.

* The :module:`FindPkgConfig` module now extracts include directories
  prefixed with ``-isystem`` into the ``*_INCLUDE_DIRS`` variables and
  :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` target properties.
  Previously they would be places in ``*_CFLAGS_OTHER`` variables and
  :prop_tgt:`INTERFACE_COMPILE_OPTIONS` target properties.

3.16.9
------

* The default value of :variable:`CMAKE_AUTOMOC_PATH_PREFIX` was changed to
  ``OFF`` because this feature can break existing projects that have
  identically named header files in different include directories.
  This restores compatibility with behavior of CMake 3.15 and below.



/P/🚀 release/3.15.rst
====================================


CMake 3.15 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.14 include the following.

New Features
============

Generators
----------

* The :generator:`Xcode` generator now supports per-target schemes.
  See the :variable:`CMAKE_XCODE_GENERATE_SCHEME` variable and
  :prop_tgt:`XCODE_GENERATE_SCHEME` target property.

* The :generator:`Green Hills MULTI` generator has been updated:

  * It now supports the :command:`add_custom_command` and
    :command:`add_custom_target` commands.

  * It is now available on Linux.

Languages
---------

* Preliminary support for the ``Swift`` language was added to the
  :generator:`Ninja` generator:

  * Use the :envvar:`SWIFTC` environment variable to specify a compiler.

  * The :prop_tgt:`Swift_DEPENDENCIES_FILE` target property and
    :prop_sf:`Swift_DEPENDENCIES_FILE` source file property were added
    to customize dependency files.

  * The :prop_tgt:`Swift_MODULE_NAME` target property was added to
    customize the Swift module name.

  * The :prop_sf:`Swift_DIAGNOSTICS_FILE` source property was added to
    indicate where to write the serialized Swift diagnostics.

  The Swift support is experimental, not considered stable, and may change
  in future releases of CMake.

Compilers
---------

* The ``Clang`` compiler variant on Windows that targets the MSVC ABI
  but has a GNU-like command line is now supported.

* Support for the Clang-based ARM compiler was added with compiler id
  ``ARMClang``.

* Support was added for the IAR compiler architectures Renesas RX,
  RL78, RH850 and Texas Instruments MSP430.

* Support was added for the IAR compilers built for Linux (IAR BuildLx).

Command-Line
------------

* The :envvar:`CMAKE_GENERATOR` environment variable was added
  to specify a default generator to use when :manual:`cmake(1)` is
  run without a ``-G`` option.  Additionally, environment variables
  :envvar:`CMAKE_GENERATOR_PLATFORM`, :envvar:`CMAKE_GENERATOR_TOOLSET`,
  and :envvar:`CMAKE_GENERATOR_INSTANCE` were created to configure
  the generator.

* The :manual:`cmake(1)` ``--build`` tool ``--target`` parameter gained support
  for multiple targets, e.g. ``cmake --build . --target Library1 Library2``.
  It now also has a short form ``-t`` alias, e.g.
  ``cmake --build . -t Library1 Library2``.

* The :manual:`cmake(1)` command gained a new ``--install`` option.
  This may be used after building a project to run installation without
  using the generated build system or the native build tool.

* The :manual:`cmake(1)` command learned a new CLI option ``--loglevel``.

* The :manual:`cmake(1)` ``-E remove_directory`` command-line tool learned
  to support removing multiple directories.

* The :manual:`cmake(1)` ``-E tar`` tool has been improved:

  * It now continues adding files to an archive even if some of the files
    are not readable.  This behavior is more consistent with the
    classic ``tar`` tool.

  * It now parses all flags, and if an invalid flag was provided, a
    warning is issued.

  * It now displays an error if no action flag was specified, along with a
    list of possible actions: ``t`` (list), ``c`` (create) or ``x`` (extract).

  * It now supports extracting (``-x``) or listing (``-t``) only specific
    files or directories.

  * It now supports Zstandard compression with a ``--zstd`` option.
    Zstandard was designed to give a compression ratio comparable to that
    of the DEFLATE (zip) algorithm, but faster, especially for decompression.

Commands
--------

* The :command:`add_custom_command` and :command:`add_custom_target` commands
  gained a new ``JOB_POOL`` option that works with the :generator:`Ninja`
  generator to set the pool variable on the build statement.

* The :command:`add_library` command ``ALIAS`` option learned to support
  import libraries of the ``UNKNOWN`` type.

* The :command:`cmake_parse_arguments` command gained an additional
  ``<prefix>_KEYWORDS_MISSING_VALUES`` output variable to report
  keyword arguments that were given by the caller with no values.

* The :command:`execute_process` command gained a ``COMMAND_ECHO`` option
  and supporting :variable:`CMAKE_EXECUTE_PROCESS_COMMAND_ECHO` variable
  to enable echoing of the command-line string before execution.

* The :command:`file(INSTALL)` command learned a new argument,
  ``FOLLOW_SYMLINK_CHAIN``, which can be used to recursively resolve and
  install symlinks.

* :command:`list` learned new sub-commands:
  ``PREPEND``, ``POP_FRONT`` and ``POP_BACK``.

* The :command:`message` command learned new types:
  ``NOTICE``, ``VERBOSE``, ``DEBUG`` and ``TRACE``.

* The :command:`string` learned a new sub-command ``REPEAT``.

Variables
---------

* The :variable:`CMAKE_CROSSCOMPILING_EMULATOR` variable and corresponding
  :prop_tgt:`CROSSCOMPILING_EMULATOR` target property learned to support
  arguments to the emulator.

* The :variable:`CMAKE_FIND_PACKAGE_PREFER_CONFIG` variable was added to tell
  :command:`find_package` calls to look for a package configuration
  file first even if a find module is available.

* The :variable:`CMAKE_FRAMEWORK` variable was added to initialize the
  :prop_tgt:`FRAMEWORK` property on all targets.

* The :variable:`CMAKE_VS_JUST_MY_CODE_DEBUGGING` variable and
  :prop_tgt:`VS_JUST_MY_CODE_DEBUGGING` target property were added to
  enable the Just My Code feature of the Visual Studio Debugger when
  compiling with MSVC cl 19.05 and higher.

* The :variable:`CMAKE_MSVC_RUNTIME_LIBRARY` variable and
  :prop_tgt:`MSVC_RUNTIME_LIBRARY` target property were introduced to
  select the runtime library used by compilers targeting the MSVC ABI.
  See policy :policy:`CMP0091`.

* The :variable:`CMAKE_PROJECT_INCLUDE` and
  :variable:`CMAKE_PROJECT_INCLUDE_BEFORE` variables were added to allow
  injection of custom code at the sites of :command:`project` calls
  without knowing the project name a priori.

Properties
----------

* The :prop_tgt:`ADDITIONAL_CLEAN_FILES` target property and
  :prop_dir:`ADDITIONAL_CLEAN_FILES` directory property were added.
  They allow to register additional files that should be removed during
  the clean stage.

* The :prop_tgt:`PUBLIC_HEADER` and :prop_tgt:`PRIVATE_HEADER` properties
  may now be set on :ref:`Interface Libraries`. The headers specified by those
  properties can be installed using the :command:`install(TARGETS)` command by
  passing the ``PUBLIC_HEADER`` and ``PRIVATE_HEADER`` arguments respectively.

* The :prop_tgt:`VS_PACKAGE_REFERENCES` target property was added to
  tell :ref:`Visual Studio Generators` to add references to ``nuget``
  packages.

* The :prop_tgt:`VS_PROJECT_IMPORT` target property was added to allow
  managed Visual Studio project files to import external ``.props`` files.

* The :prop_tgt:`VS_NO_SOLUTION_DEPLOY` target property was added to
  tell :ref:`Visual Studio Generators` whether to deploy an artifact
  to the WinCE or Windows Phone target device.

Modules
-------

* The :module:`FindBoost` module was reworked to expose a more consistent
  user experience between its "Config" and "Module" modes and with other
  find modules in general.

  * A new imported target ``Boost::headers`` is now defined (same
    as ``Boost::boost``).

  * New output variables ``Boost_VERSION_MACRO``,
    ``Boost_VERSION_MAJOR``, ``Boost_VERSION_MINOR``,
    ``Boost_VERSION_PATCH``, and ``Boost_VERSION_COUNT``
    were added.

  * The ``QUIET`` argument passed to :command:`find_package` is no
    longer ignored in config mode.  Note that the CMake package shipped with
    Boost ``1.70.0`` ignores the ``QUIET`` argument passed to
    :command:`find_package`.  This is fixed in the next Boost release.

  * The input switch ``Boost_DETAILED_FAILURE_MSG`` was removed.

  * ``Boost_VERSION`` now reports the version in ``x.y.z``
    format in module mode.  See policy :policy:`CMP0093`.

* The :module:`FindCups` module now provides imported targets.

* The :module:`FindEnvModules` module was added to use Lua- and TCL-based
  environment modules in :ref:`CTest Scripts <CTest Script>`.

* The :module:`FindGLEW` module now provides an interface more consistent
  with what upstream GLEW provides in its own CMake package files.

* The :module:`FindPkgConfig` now populates :prop_tgt:`INTERFACE_LINK_OPTIONS`
  property of imported targets with other (non-library) linker flags.

* The :module:`FindPostgreSQL` module learned to find debug and release
  variants separately.

* Modules :module:`FindPython3`, :module:`FindPython2` and :module:`FindPython`
  gained additional lookup strategies and controls, and a new default.
  See policy :policy:`CMP0094`.

* Modules :module:`FindPython`, :module:`FindPython2` and :module:`FindPython3`
  gain a new target (respectively ``Python::Module``, ``Python2::Module``
  and ``Python3::Module``) which can be used to develop Python modules.

* Modules :module:`FindPython3`, :module:`FindPython2` and :module:`FindPython`
  gain capability to control how virtual environments are handled.

* The :module:`UseSWIG` module learned to manage alternate library names
  by passing ``-interface <library_name>`` for ``python`` language or
  ``-dllimport <library_name>`` for ``CSharp`` language to the ``SWIG``
  compiler.

Generator Expressions
---------------------

* The generator expressions :genex:`$<C_COMPILER_ID>`,
  :genex:`$<CXX_COMPILER_ID>`, :genex:`$<CUDA_COMPILER_ID>`,
  :genex:`$<Fortran_COMPILER_ID>`, :genex:`$<COMPILE_LANGUAGE>`,
  :genex:`$<COMPILE_LANG_AND_ID>`, and :genex:`$<PLATFORM_ID>` learned to
  support matching one value from a comma-separated list.

* The :genex:`$<CUDA_COMPILER_ID:...>` and :genex:`$<CUDA_COMPILER_VERSION:...>`
  generator expressions were added.

* The :genex:`$<COMPILE_LANG_AND_ID:...>` generator expression was introduced to
  allow specification of compile options for target files based on the
  :variable:`CMAKE_<LANG>_COMPILER_ID` and :prop_sf:`LANGUAGE` of
  each source file.

* A :genex:`$<FILTER:list,INCLUDE|EXCLUDE,regex>` generator expression has
  been added.

* A :genex:`$<REMOVE_DUPLICATES:list>` generator expression has been added.

* The :genex:`$<SHELL_PATH:...>` generator expression gained support for a
  list of paths.

* New ``$<TARGET_FILE*>`` :manual:`generator expressions
  <cmake-generator-expressions(7)>` were added to retrieve the prefix, base
  name, and suffix of the file names of various artifacts:

  * :genex:`$<TARGET_FILE_PREFIX:...>`
  * :genex:`$<TARGET_FILE_BASE_NAME:...>`
  * :genex:`$<TARGET_FILE_SUFFIX:...>`
  * :genex:`$<TARGET_LINKER_FILE_PREFIX:...>`
  * :genex:`$<TARGET_LINKER_FILE_BASE_NAME:...>`
  * :genex:`$<TARGET_LINKER_FILE_SUFFIX:...>`
  * :genex:`$<TARGET_PDB_FILE_BASE_NAME:...>`

* The :genex:`$<TARGET_OBJECTS:...>` generator expression is now supported
  on ``SHARED``, ``STATIC``, ``MODULE`` libraries and executables.

CTest
-----

* The :command:`ctest_submit` command learned a new option: ``BUILD_ID``.
  This can be used to store the ID assigned to this build by CDash to a
  variable.

* The :command:`ctest_update` command learned to honor a new variable:
  :variable:`CTEST_UPDATE_VERSION_OVERRIDE`. This can be used to specify
  the current version of your source tree rather than using the update
  command to discover the current version that is checked out.

CPack
-----

* The :cpack_gen:`CPack IFW Generator` gained a new
  :variable:`CPACK_IFW_PACKAGE_STYLE_SHEET` variable to customize the
  installer stylesheet.

Deprecated and Removed Features
===============================

* The :manual:`cmake-server(7)` mode has been deprecated and will be
  removed from a future version of CMake.  Please port clients to use
  the :manual:`cmake-file-api(7)` instead.

* The :prop_dir:`ADDITIONAL_MAKE_CLEAN_FILES` directory property is now
  deprecated.  Use the :prop_dir:`ADDITIONAL_CLEAN_FILES` directory property
  instead.

* The variable :variable:`CMAKE_AUTOMOC_RELAXED_MODE` is considered
  deprecated.  Support still exists but will be removed in future versions.

* The :command:`export(PACKAGE)` command now does nothing unless
  enabled via :variable:`CMAKE_EXPORT_PACKAGE_REGISTRY`.
  See policy :policy:`CMP0090`.

* The :generator:`Xcode` generator now requires at least Xcode 5.

* An explicit deprecation diagnostic was added for policy ``CMP0066``
  (``CMP0065`` and below were already deprecated).
  The :manual:`cmake-policies(7)` manual explains that the OLD behaviors
  of all policies are deprecated and that projects should port to the
  NEW behaviors.

Other Changes
=============

* If a feature specified by :command:`target_compile_features` is available
  in the compiler's default standard level, CMake 3.14 and below incorrectly
  added unnecessary ``-std=`` flags that could lower the standard level.
  This bug has been fixed in CMake 3.15.  This behavior change may expose
  bugs in existing projects that were relying on undocumented implementation
  details.  Specifying compile features only ensures that the compiler runs
  in a mode that has those features, not that any specific standard level is
  used or explicit ``-std=`` flag passed.

* CMake learned how to compile C++14 with the IBM AIX XL compiler
  and the SunPro compiler and to compile C++20 with the AppleClang compiler.

* With MSVC-like compilers the value of :variable:`CMAKE_<LANG>_FLAGS`
  no longer contains warning flags like ``/W3`` by default.
  See policy :policy:`CMP0092`.

* IBM Clang-based XL compilers that define ``__ibmxl__`` now use the
  compiler id ``XLClang`` instead of ``XL``.  See policy :policy:`CMP0089`.

* The :command:`file(REMOVE)` and :command:`file(REMOVE_RECURSE)` commands
  were changed to ignore empty arguments with a warning instead of treating
  them as a relative path and removing the contents of the current directory.

Updates
=======

Changes made since CMake 3.15.0 include the following.

3.15.1
------

* In CMake 3.15.0 support for the GNU-like ``Clang`` compiler targeting the
  MSVC ABI implemented :variable:`CMAKE_CXX_STANDARD` values 98 and 11 using
  the corresponding ``-std=`` flags.  However, these modes do not work with
  the MSVC standard library.  Therefore CMake 3.15.1 passes C++14 standard
  flags even for C++98 and C++11.  This is consistent with MSVC itself which
  always runs in a mode aware of C++14.

* Preliminary Swift support added in 3.15.0 has been updated.

3.15.2
------

* In CMake 3.15.0 and 3.15.1 the :variable:`CMAKE_FIND_PACKAGE_PREFER_CONFIG`
  variable caused the :command:`find_package` command to fail on a missing
  package even without the ``REQUIRED`` option.  This has been fixed.

3.15.3
------

* ``CrayPrgEnv`` compiler wrapper support has been updated for the 19.06
  release of the Cray Programming Environment for which the default linking
  mode on XC Cray systems is now dynamic instead of static.

3.15.4
------

* In CMake 3.15.0 through 3.15.3, the :prop_dir:`EXCLUDE_FROM_ALL`
  directory property was regressed from pre-3.14 behavior and caused
  targets within the directory to be excluded even from its own "all".
  This has been fixed.
  The bug also existed in 3.14.0 through 3.14.6 and is fixed in 3.14.7.



/P/🚀 release/3.14.rst
====================================


CMake 3.14 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.13 include the following.

New Features
============

Generators
----------

* The :generator:`Visual Studio 16 2019` generator was added.  This is
  experimental and based on "Visual Studio 2019 Preview 4" because this
  version of VS has not been released.

  The VS 2019 generator differs from generators for earlier versions
  in that it does not provide variants that specify the target platform
  in the generator name.  Instead :variable:`CMAKE_GENERATOR_PLATFORM`
  must be used, e.g. through the ``-A`` command-line option.  Furthermore,
  the default target platform (architecture) is now based on the *host*
  platform.  The VS host toolset selection is now based on the host
  architecture as well.

* The :generator:`Green Hills MULTI` generator has been updated:

  * Now supports :ref:`Object Libraries`.

  * Now warns on unsupported project types such as shared libraries.

  * Now generates a top-level ``<PROJECT-NAME>.top.gpj`` for each directory
    calling the :command:`project` command.  The top-level project file
    ``default.gpj`` is no longer created.

  * Now honors target renaming and destination output control properties
    such as :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` and :prop_tgt:`OUTPUT_NAME`.
    This also fixes support for installation rules generated by
    :command:`install`.

  * Now honors source file properties :prop_sf:`INCLUDE_DIRECTORIES`,
    :prop_sf:`COMPILE_DEFINITIONS`, and :prop_sf:`COMPILE_OPTIONS`.

  * Now supports Dynamic Download Integrity Applications which did not include
    Integrate Files via :prop_tgt:`GHS_INTEGRITY_APP` and setting a target
    link flag of ``-dynamic``.

  * The contents of project files now sorts sources groups and files by name.
    Set the :prop_tgt:`GHS_NO_SOURCE_GROUP_FILE` target property to ``ON`` to
    generate a single project file for the target instead of a project file for
    each source group.  Set the :variable:`CMAKE_GHS_NO_SOURCE_GROUP_FILE`
    variable to enable this for all targets.

File-Based API
--------------

* A file-based api for clients to get semantic buildsystem information
  has been added.  See the :manual:`cmake-file-api(7)` manual.
  This is intended to replace the :manual:`cmake-server(7)` mode for IDEs.

Platforms
---------

* CMake now supports
  :ref:`Cross Compiling for iOS, tvOS, or watchOS <Cross Compiling for iOS, tvOS, visionOS, or watchOS>`
  using simple toolchain files.

Command-Line
------------

* The :manual:`cmake(1)` :ref:`Build Tool Mode <Build Tool Mode>`
  (``cmake --build``) gained ``--verbose`` and ``-v`` options to
  specify verbose build output. Some generators such as Xcode don't
  support this option currently.

* The :manual:`cmake(1)` ``-E compare_files`` command learned a new
  ``--ignore-eol`` option to specify that end-of-line differences
  (e.g. LF vs CRLF) should be ignored when comparing files.

* The :manual:`cmake-gui(1)` dialog gained new ``-S`` and ``-B`` arguments to
  explicitly specify source and build directories.

Commands
--------

* The :command:`file` command learned a new sub-command, ``CREATE_LINK``,
  which can be used to create hard or symbolic links.

* The :command:`file` command learned a new sub-command, ``READ_SYMLINK``,
  which can be used to determine the path that a symlink points to.

* The :command:`file` command gained a ``SIZE`` mode to get the size
  of a file on disk.

* The :command:`find_package` command learned to optionally resolve
  symbolic links in the paths to package configuration files.
  See the :variable:`CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS` variable.

* The :command:`get_filename_component` command gained new
  ``LAST_EXT`` and ``NAME_WLE`` variants to work with the
  extension after the last ``.`` in the name.

* The :command:`if` command gained support for checking if cache variables
  are defined with the  ``DEFINED CACHE{VAR}`` syntax.

* The :command:`install(CODE)` and :command:`install(SCRIPT)` commands
  learned to support generator expressions.  See policy :policy:`CMP0087`.

* The :command:`install(TARGETS)` command learned how to install to an
  appropriate default directory for a given target type, based on
  variables from the :module:`GNUInstallDirs` module and built-in defaults,
  in lieu of a ``DESTINATION`` argument.

* The :command:`install(FILES)` and :command:`install(DIRECTORY)` commands
  learned a new set of parameters for installing files as a file type,
  setting the destination based on the appropriate variables from
  :module:`GNUInstallDirs` and built-in defaults, in lieu of a
  ``DESTINATION`` argument.

* The :command:`list` operations ``REMOVE_ITEM``, ``REMOVE_DUPLICATES``,
  ``SORT``, ``REVERSE``, and ``FILTER`` all now accept a non-existent variable
  as the list since these operations on empty lists is also the empty list.

* The :command:`list` operation ``REMOVE_AT`` now indicates that the given
  indices are invalid for a non-existent variable or empty list.

* The :command:`try_compile` and :command:`try_run` commands gained a new
  ``LINK_OPTIONS`` option.

Variables
---------

* A :variable:`CMAKE_BUILD_RPATH_USE_ORIGIN` variable and corresponding
  :prop_tgt:`BUILD_RPATH_USE_ORIGIN` target property were added to
  enable use of relative runtime paths (RPATHs). This helps achieving
  relocatable and reproducible builds that are invariant of the build
  directory.

* A :variable:`CMAKE_VS_PLATFORM_NAME_DEFAULT` variable was added for
  :ref:`Visual Studio Generators` to report their default platform used
  when :variable:`CMAKE_GENERATOR_PLATFORM` is not set explicitly.

Properties
----------

* A :prop_gbl:`CMAKE_ROLE` global property was added to allow scripts to
  determine whether they're running in project mode, script mode,
  find-package mode, CTest, or CPack.

* The :prop_tgt:`CUDA_RESOLVE_DEVICE_SYMBOLS` target property is now supported
  on shared library, module library, and executable targets.  Previously it was
  only honored on static libraries.

* The :prop_tgt:`EXCLUDE_FROM_ALL` target property was created to override
  the setting of its directory. A target will now be built as part of "all"
  if its :prop_tgt:`EXCLUDE_FROM_ALL` property is set to ``OFF``, even if its
  containing directory is marked as :prop_dir:`EXCLUDE_FROM_ALL`.

* :prop_tgt:`INTERFACE_POSITION_INDEPENDENT_CODE` target property gains the
  support of :manual:`generator expressions <cmake-generator-expressions(7)>`.

Modules
-------

* The family of modules to check capabilities (like
  :module:`CheckCSourceCompiles`) gain capability to manage ``LINK_OPTIONS``.

* A :module:`CheckFortranSourceRuns` module was added to provide a
  :command:`check_fortran_source_runs` command to check if a Fortran
  source snippet compiles and runs.

* The :module:`CMakePackageConfigHelpers` module's
  :command:`write_basic_package_version_file` command gained a new
  ``ARCH_INDEPENDENT`` option for supporting architecture-independent
  packages.

* The :module:`ExternalProject` module :command:`ExternalProject_Add` command
  gained ``LOG_DIR`` and ``LOG_MERGED_STDOUTERR`` options to control logging.

* The :module:`ExternalProject` module :command:`ExternalProject_Add` command
  gained ``LOG_PATCH`` to optionally log the patch step.

* The :module:`ExternalProject` module :command:`ExternalProject_Add` command
  learned to apply ``SOURCE_SUBDIR`` when ``BUILD_IN_SOURCE`` is also used.
  The ``BUILD_COMMAND`` is run in the given ``SOURCE_SUBDIR`` of the
  ``SOURCE_DIR``.

* The :module:`FetchContent` module gained a new
  :command:`FetchContent_MakeAvailable` command.  It accepts a list of
  dependency names, which it then iterates over, populating and adding
  each one to the main build using the canonical pattern.  This
  significantly reduces the amount of boilerplate needed in a project.

* The :module:`FindBISON` module's ``BISON_TARGET`` command now runs ``bison``
  with :variable:`CMAKE_CURRENT_BINARY_DIR` as the working directory.
  See policy :policy:`CMP0088`.

* The :module:`FindCURL` module gained support for requesting
  protocols as package components.

* The :module:`FindFontconfig` module was added to find `fontconfig`_.

* The :module:`FindGDAL` module now provides imported targets.

* The :module:`FindGIF` module now provides imported targets.

* The :module:`FindGit` module now provides an imported target for the
  Git executable.

* The :module:`FindIce` module learned to find ``slice2confluence``
  and ``slice2matlab``.

* The :module:`FindLibinput` module was added to find `libinput`_.

* The :module:`FindLibLZMA` module now provides imported targets.

* The :module:`FindMatlab` module gained new options ``R2017b`` and
  ``R2018a`` to specify the MEX API version to use; these options
  mirror the new options to the ``mex`` command in MATLAB R2018a.
  The option ``MX_LIBRARY`` is no longer needed.

* The :module:`FindPostgreSQL` module now provides imported targets.

* The :module:`FindPython`, :module:`FindPython2`, and :module:`FindPython3`
  modules gained support for ``NumPy`` component.

* The :module:`FindPython2`, :module:`FindPython3`, and :module:`FindPython`
  modules now support running in script mode by skipping the creation of
  imported targets and helper functions.

* The :module:`FindSQLite3` module was added to find the SQLite v3.x library.

* The :module:`FindX11` had the following variables renamed in order to match
  their library names rather than header names. The old variables are provided
  for compatibility:

    - ``X11_Xxf86misc_INCLUDE_PATH`` instead of ``X11_xf86misc_INCLUDE_PATH``
    - ``X11_Xxf86misc_LIB`` instead of ``X11_xf86misc_LIB``
    - ``X11_Xxf86misc_FOUND`` instead of ``X11_xf86misc_FOUND``
    - ``X11_Xxf86vm_INCLUDE_PATH`` instead of ``X11_xf86vmode_INCLUDE_PATH``
    - ``X11_Xxf86vm_LIB`` instead of ``X11_xf86vmode_LIB``
    - ``X11_Xxf86vm_FOUND`` instead of ``X11_xf86vmode_FOUND``
    - ``X11_xkbfile_INCLUDE_PATH`` instead of ``X11_Xkbfile_INCLUDE_PATH``
    - ``X11_xkbfile_LIB`` instead of ``X11_Xkbfile_LIB``
    - ``X11_xkbfile_FOUND`` instead of ``X11_Xkbfile_FOUND``
    - ``X11_Xtst_INCLUDE_PATH`` instead of ``X11_XTest_INCLUDE_PATH``
    - ``X11_Xtst_LIB`` instead of ``X11_XTest_LIB``
    - ``X11_Xtst_FOUND`` instead of ``X11_XTest_FOUND``
    - ``X11_Xss_INCLUDE_PATH`` instead of ``X11_Xscreensaver_INCLUDE_PATH``
    - ``X11_Xss_LIB`` instead of ``X11_Xscreensaver_LIB``
    - ``X11_Xss_FOUND`` instead of ``X11_Xscreensaver_FOUND``

  The following variables are deprecated completely since they were
  essentially duplicates:

    - ``X11_Xinput_INCLUDE_PATH`` (use ``X11_Xi_INCLUDE_PATH``)
    - ``X11_Xinput_LIB`` (use ``X11_Xi_LIB``)
    - ``X11_Xinput_FOUND`` (use ``X11_Xi_FOUND``)

* The :module:`FindX11` now provides ``X11_Xext_INCLUDE_PATH``.

* The :module:`FindX11` now provides imported targets.

* The :module:`UseSWIG` module learned to pass ``-module <module_name>`` to
  the ``SWIG`` compiler if the file property ``SWIG_MODULE_NAME`` is defined.
  See policy :policy:`CMP0086`.

* The :module:`UseSWIG` module gained an option to specify
  ``SWIG`` source file extensions.

.. _`fontconfig`: https://www.freedesktop.org/wiki/Software/fontconfig/
.. _`libinput`: https://www.freedesktop.org/wiki/Software/libinput/

Generator Expressions
---------------------

* The ``$<Fortran_COMPILER_ID:...>`` and ``$<Fortran_COMPILER_VERSION:...>``
  :manual:`generator expressions <cmake-generator-expressions(7)>` were added.

* The ``$<IN_LIST:...>`` generator expression now correctly handles an
  empty argument. See :policy:`CMP0085` for details.

Autogen
-------

* The :prop_tgt:`AUTOMOC_EXECUTABLE`, :prop_tgt:`AUTORCC_EXECUTABLE`, and
  :prop_tgt:`AUTOUIC_EXECUTABLE` target properties were added.  They all
  take a path to an executable and force automoc/autorcc/autouic to use
  this executable.

  Setting these will also prevent the configure time testing for these
  executables. This is mainly useful when you build these tools yourself.

* The new variables :variable:`CMAKE_GLOBAL_AUTOGEN_TARGET`,
  :variable:`CMAKE_GLOBAL_AUTOGEN_TARGET_NAME`,
  :variable:`CMAKE_GLOBAL_AUTORCC_TARGET` and
  :variable:`CMAKE_GLOBAL_AUTORCC_TARGET_NAME` control the generation
  of global ``autogen`` and ``autorcc`` targets.

* A new :variable:`CMAKE_AUTOGEN_ORIGIN_DEPENDS` variable and
  :prop_tgt:`AUTOGEN_ORIGIN_DEPENDS` target property may be set to enable or
  disable forwarding of the origin target dependencies to the corresponding
  :ref:`<ORIGIN>_autogen` target.

CTest
-----

* :manual:`ctest(1)` gained a ``--show-only=json-v1`` option to show the
  list of tests in a machine-readable JSON format.
  See the :ref:`Show as JSON Object Model` section of the manual.

* The :command:`ctest_submit` command learned a new ``Done`` part that can be used
  to inform CDash that a build is complete and that no more parts will be uploaded.

* CTest learned to accept the dashboard server submission URL from a single
  variable.  See the ``SubmitURL`` setting in :manual:`ctest(1)`,
  the :variable:`CTEST_SUBMIT_URL` variable, and the ``SUBMIT_URL``
  argument of the :command:`ctest_submit` command.

Deprecated and Removed Features
===============================

* An explicit deprecation diagnostic was added for policies ``CMP0064``
  and ``CMP0065`` (``CMP0063`` and below were already deprecated).
  The :manual:`cmake-policies(7)` manual explains that the OLD behaviors
  of all policies are deprecated and that projects should port to the
  NEW behaviors.

* The :generator:`Xcode` generator deprecated support for Xcode
  versions prior to Xcode 5.  Support for those will be dropped in a
  future version of CMake.

* The :module:`FindQt` module is no longer used by the :command:`find_package`
  command as a find module.  This allows the Qt Project upstream to optionally
  provide its own ``QtConfig.cmake`` package configuration file and have
  applications use it via ``find_package(Qt)`` rather than
  ``find_package(Qt CONFIG)``.  See policy :policy:`CMP0084`.

* Support for running CMake on Windows XP and Windows Vista has been dropped.
  The precompiled Windows binaries provided on ``cmake.org`` now require
  Windows 7 or higher.

* CTest no longer supports submissions via ``ftp``, ``scp``, ``cp``, and
  ``xmlrpc``.  CDash is the only maintained testing dashboard for CTest,
  and it only supports submissions over ``http`` and ``https``.

Other Changes
=============

* Object library linking has been fixed to propagate private link libraries
  of object libraries to consuming targets.

* Install rules under :command:`add_subdirectory` now interleave with those in
  the calling directory. See policy :policy:`CMP0082` for details.

* CMake now imposes a maximum recursion limit to prevent a stack overflow on
  scripts that recurse infinitely. The limit can be adjusted at runtime with
  :variable:`CMAKE_MAXIMUM_RECURSION_DEPTH`.

* When using cppcheck via the :variable:`CMAKE_<LANG>_CPPCHECK` variable
  or :prop_tgt:`<LANG>_CPPCHECK` property, the build will now fail if
  ``cppcheck`` returns non-zero as configured by its command-line options.

* Required link options to manage Position Independent Executable are now
  added when :prop_tgt:`POSITION_INDEPENDENT_CODE` is set.  The project is
  responsible for using the :module:`CheckPIESupported` module to check for
  ``PIE`` support to ensure that the :prop_tgt:`POSITION_INDEPENDENT_CODE`
  target property will be honored at link time for executables.  This behavior
  is controlled by policy :policy:`CMP0083`.

* :ref:`Visual Studio Generators` for VS 2010 and above learned
  to support the ``VS_DEBUGGER_*`` properties on targets created
  via :command:`add_custom_target`.

* The :module:`CPack` module no longer defaults to the ``paxr`` value in the
  :variable:`CPACK_DEBIAN_ARCHIVE_TYPE` variable, because ``dpkg`` has
  never supported the PAX tar format. The ``paxr`` value will be mapped
  to ``gnutar`` and a deprecation message emitted.

* CMake no longer issues a warning if a target listed in an
  :command:`install(TARGETS)` command has its :prop_tgt:`EXCLUDE_FROM_ALL`
  property set to true.

Updates
=======

Changes made since CMake 3.14.0 include the following.

3.14.1
------

* The :module:`FindFontconfig` module added by 3.14.0 accidentally
  used uppercase ``FONTCONFIG_*`` variable names that do not match
  our conventions.  3.14.1 revises the module to use ``Fontconfig_*``
  variable names.  This is incompatible with 3.14.0 but since the
  module is new in the 3.14 series usage should not yet be widespread.

3.14.3
------

* The :variable:`CMAKE_VS_PLATFORM_NAME_DEFAULT` variable was added
  to help toolchain files work with the :generator:`Visual Studio 16 2019`
  generator where the default platform now depends on the host platform.

3.14.4
------

* In CMake 3.14.0 through 3.14.3, calling :command:`target_link_libraries`
  to add ``PRIVATE`` dependencies to a static library created in another
  directory (under policy :policy:`CMP0079` ``NEW`` behavior) would
  incorrectly propagate usage requirements of those dependencies to
  dependents that link the static library.  This has been fixed.
  The bug also existed in 3.13.0 through 3.13.4 and is fixed in 3.13.5.

3.14.5
------

* Entries of the ``CPATH`` environment variable are no longer excluded
  from explicit use via :command:`include_directories` and
  :command:`target_include_directories` as they were in CMake 3.14.0
  through 3.14.4.

3.14.6
------

* In CMake 3.14.0 through 3.14.5, the :module:`FindBISON` module
  policy :policy:`CMP0088` ``NEW`` behavior accidentally interpreted
  a relative path to the ``.y`` input as relative to the build tree
  directory instead of the source tree directory.  This has been fixed.

3.14.7
------

* In CMake 3.14.0 through 3.14.6, the :prop_dir:`EXCLUDE_FROM_ALL`
  directory property was regressed from pre-3.14 behavior and caused
  targets within the directory to be excluded even from its own "all".
  This has been fixed.



/P/🚀 release/3.13.rst
====================================


CMake 3.13 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.12 include the following.

New Features
============

Generators
----------

* The :ref:`Visual Studio Generators` for VS 2010 and above learned to
  support the :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` target property
  and supporting :module:`CheckIPOSupported` module.

* The :generator:`Xcode` generator learned to configure more Xcode Scheme
  fields.  See the :variable:`CMAKE_XCODE_GENERATE_SCHEME` variable.

* The :generator:`Green Hills MULTI` generator has been updated:

  - Added support for architecture selection through
    :variable:`CMAKE_GENERATOR_PLATFORM`:
    e.g. ``arm``, ``ppc``, and ``86``.

  - Added support for toolset selection through
    :variable:`CMAKE_GENERATOR_TOOLSET`,
    e.g. ``comp_201205``, ``comp_201510``, ``comp_201722_beta``.

  - Added support for platform selection through ``GHS_TARGET_PLATFORM``,
    e.g. ``integrity``, ``linux``, ``standalone``, etc.

  - No longer checks that ``arm`` based compilers are installed but ensures
    that the correct ``gbuild.exe`` exists.

  - No longer hard-codes ARM files, BSP, toolset, or OS locations.

Command-Line
------------

* The :manual:`cmake(1)` command gained the ``-S <source_dir>``
  command line option to specify the location of the source directory.
  This option can be used independently of ``-B``.

* The :manual:`cmake(1)` command gained the ``-B <build_dir>``
  command line option to specify the location of the build directory.
  This option can be used independently of ``-S``.

* The :manual:`cmake(1)` ``-E create_symlink`` command can now be used
  on Windows.

Commands
--------

* The :command:`add_custom_command` and :command:`add_custom_target` commands
  learned to support generator expressions in ``WORKING_DIRECTORY`` options.

* The :command:`add_link_options` command was created to add link
  options in the current directory.

* The :command:`install(TARGETS)` command learned to install targets
  created outside the current directory.

* The :command:`link_directories` command gained options to control
  insertion position.

* The :command:`list(SORT)` command gained options to control the
  comparison operation used to order the entries.

* The :command:`math` command gained options for hexadecimal.

* The :command:`target_link_directories` command was created to
  specify link directories for targets and their dependents.

* The :command:`target_link_options` command was created to
  specify link options for targets and their dependents.

* The :command:`target_link_libraries` command may now be called
  to modify targets created outside the current directory.
  See policy :policy:`CMP0079`.

Variables
---------

* A :variable:`CMAKE_AUTOGEN_VERBOSE` variable was added to optionally
  increase the verbosity of :prop_tgt:`AUTOMOC`, :prop_tgt:`AUTOUIC`
  and :prop_tgt:`AUTORCC` from within CMake project code.

* A :variable:`CMAKE_VS_GLOBALS` variable was added to initialize
  :prop_tgt:`VS_GLOBAL_<variable>` target properties on targets as
  they are created.

Properties
----------

* The :prop_tgt:`DEPLOYMENT_ADDITIONAL_FILES` target property was
  added to tell the :generator:`Visual Studio 9 2008` generator
  to specify additional files for deployment to WinCE devices
  for remote debugging.

* The :prop_tgt:`INTERFACE_LINK_DEPENDS` target property was created
  to specify transitive link dependencies on files.

* The :prop_tgt:`LINK_DEPENDS` target property learned to support
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

* :prop_tgt:`LINK_DIRECTORIES` and :prop_tgt:`INTERFACE_LINK_DIRECTORIES`
  target properties were added to collect link directories for a target
  and its dependents.  Use the :command:`target_link_directories` command
  to set them.

* :prop_tgt:`LINK_OPTIONS` and :prop_tgt:`INTERFACE_LINK_OPTIONS` target
  properties were added to collect link options for a target and its
  dependents.  Use the :command:`target_link_options` command to set them.

* A :prop_dir:`LINK_OPTIONS` directory property was added to collect
  link options for targets created under the current directory.
  Use the :command:`add_link_options` command to set it.

* A :prop_tgt:`STATIC_LIBRARY_OPTIONS` target property was created
  to specify archiver options to use when creating static libraries.

* A :prop_tgt:`VS_DEBUGGER_COMMAND_ARGUMENTS` target property was created to
  set the debugging command line arguments with
  :ref:`Visual Studio Generators` for VS 2010 and above.

* A :prop_tgt:`VS_DEBUGGER_ENVIRONMENT` target property was created to
  set the debugging environment with
  :ref:`Visual Studio Generators` for VS 2010 and above.

* The :prop_tgt:`VS_DEBUGGER_COMMAND` and
  :prop_tgt:`VS_DEBUGGER_WORKING_DIRECTORY` target properties
  now support generator expressions.

Modules
-------

* The :module:`FindBoost` module gained a ``Boost_ARCHITECTURE`` option
  to specify a Boost architecture-specific library filename fragment.

* The :module:`FindCURL` module learned to find debug and release variants
  separately.

* The :module:`FindMatlab` module gained new components ``ENGINE_LIBRARY`` and
  ``DATAARRAY_LIBRARY`` to request finding the Matlab C++ Engine and DataArray
  libraries respectively.

* The :module:`FindMatlab` module now explicitly exports mexFunction in Visual
  Studio.

* The :module:`FindMatlab` module gained a new ``MCC_COMPILER``
  component to request finding the Matlab Compiler add-on.

* The :module:`FindPkgConfig` module gained an option to create imported
  targets in global scope.

* The :module:`FindPkgConfig` module gained support for ``<`` and ``>``
  operators for version checks in addition to the already supported
  operators ``>=``, ``<=``, and ``=``.

* Modules :module:`FindPython3`, :module:`FindPython2` and :module:`FindPython`
  gain capability to control order of resource lookup on macOS (Framework) and
  Windows (Registry).

* The :module:`FindSubversion` module ``Subversion_WC_INFO`` command
  gained an ``IGNORE_SVN_FAILURE`` option to suppress failures,
  e.g. when the source tree is not under Subversion control.

* The :module:`UseSWIG` module learned to manage target property
  :prop_tgt:`INCLUDE_DIRECTORIES` for ``SWIG`` compilation.

CTest
-----

* :manual:`ctest(1)` gained a ``--progress`` option to enable a live
  test progress summary when output goes to a terminal.

CPack
-----

* The :cpack_gen:`CPack DEB Generator` learned to split debug symbols into
  a corresponding .ddeb package when ``CPACK_DEBIAN_DEBUGINFO_PACKAGE`` is
  set.

* The :cpack_gen:`CPack DEB Generator` learned to honor the ``SOURCE_DATE_EPOCH``
  environment variable when packaging files.  This is useful for generating
  reproducible packages.

* CPack gained a new :cpack_gen:`CPack External Generator` which is used to
  export the CPack metadata in a format that other software can understand. The
  intention of this generator is to allow external packaging software to take
  advantage of CPack's features when it may not be possible to use CPack for
  the entire packaging process.

Deprecated and Removed Features
===============================

* An explicit deprecation diagnostic was added for policies ``CMP0055``
  through ``CMP0063`` (``CMP0054`` and below were already deprecated).
  The :manual:`cmake-policies(7)` manual explains that the OLD behaviors
  of all policies are deprecated and that projects should port to the
  NEW behaviors.

Other Changes
=============

* The precompiled binaries provided on ``cmake.org`` now include
  qthelp-format documentation.

* The :command:`option` command now honors an existing normal variable
  of the same name and does nothing instead of possibly creating a cache
  entry (or setting its type) and removing the normal variable.
  See policy :policy:`CMP0077`.

* The :ref:`Makefile Generators` learned to remove custom command and
  custom target byproducts during ``make clean``.

* The :command:`target_sources` command now interprets relative source file
  paths as relative to the current source directory.  This simplifies
  incrementally building up a target's sources from subdirectories.  The
  :policy:`CMP0076` policy was added to provide backward compatibility with
  the old behavior where required.

* The :module:`BundleUtilities` module may no longer be included at configure
  time. This was always a bug anyway. See policy :policy:`CMP0080`.

* The :module:`UseSWIG` module has changed strategy for target naming.
  See policy :policy:`CMP0078`.

* The :prop_tgt:`LINK_DIRECTORIES` target property now expects absolute paths.
  See policy :policy:`CMP0081`.

* The CPack generators have been moved into their own separate section
  in the documentation, rather than having the documentation in their
  internal implementation modules.
  These internal implementation modules are also no longer available
  to scripts that may have been incorrectly including them, because
  they should never have been available in the first place.

Updates
=======

Changes made since CMake 3.13.0 include the following.

3.13.2
------

* CMake 3.13.0 included a change to pass compiler implicit include
  directories to the ``moc`` tool for :prop_tgt:`AUTOMOC`.  This has
  been reverted due to regressing existing builds and will need
  further investigation before being re-introduced in a later release.

3.13.3
------

* The :generator:`Visual Studio 15 2017` generator has been fixed to work
  when VS 2019 is installed.

* CMake now checks that at least one of the source or binary directory
  is specified when running CMake and issues an error if both are missing.
  This has always been a documented requirement, but the implementation
  previously accidentally accepted cases in which neither are specified
  so long as some other argument is given, and silently used the current
  working directory as the source and build tree.

3.13.4
------

* The error added by 3.13.3 in cases that neither a source or binary
  directory is specified has been downgraded to a warning.  While this
  was never intended, documented, nor supported behavior, some projects
  relied on it.  The error has been downgraded to a warning for the
  remainder of the 3.13.x release series to allow a transition period,
  but it may become a fatal error again in a later release.  Scripts
  relying on the old behavior can be trivially fixed by specifying
  the path to the source tree (even if just ``.``) explicitly and
  continue to work with all versions of CMake.

3.13.5
------

* In CMake 3.13.0 through 3.13.4, calling :command:`target_link_libraries`
  to add ``PRIVATE`` dependencies to a static library created in another
  directory (under policy :policy:`CMP0079` ``NEW`` behavior) would
  incorrectly propagate usage requirements of those dependencies to
  dependents that link the static library.  This has been fixed.



/P/🚀 release/3.12.rst
====================================


CMake 3.12 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.11 include the following.

New Features
============

Generators
----------

* The :ref:`Visual Studio Generators` for VS 2017 learned to support a
  ``version=14.##`` option in the :variable:`CMAKE_GENERATOR_TOOLSET`
  value (e.g. via the :manual:`cmake(1)` ``-T`` option) to specify a
  toolset version number.

Command-Line
------------

* The :manual:`cmake(1)` :ref:`Build Tool Mode` (``cmake --build``) gained
  ``--parallel [<jobs>]`` and ``-j [<jobs>]`` options to specify a parallel
  build level.  They map to corresponding options of the native build tool.

Commands
--------

* The :command:`add_compile_definitions` command was added to set preprocessor
  definitions at directory level.  This supersedes :command:`add_definitions`.

* The :command:`cmake_minimum_required` and :command:`cmake_policy(VERSION)`
  commands now accept a version range using the form ``<min>[...<max>]``.
  The ``<min>`` version is required but policies are set based on the
  older of the running CMake version and the version specified by
  ``<max>``.  This allows projects to specify a range of versions
  for which they have been updated and avoid explicit policy settings.

* The :command:`file(GLOB)` and :command:`file(GLOB_RECURSE)` commands
  learned a new flag ``CONFIGURE_DEPENDS`` which enables expression of
  build system dependency on globbed directory's contents.

* The :command:`file(TOUCH)` and :command:`file(TOUCH_NOCREATE)` commands
  were added to expose ``TOUCH`` functionality without having to use
  CMake's command-line tool mode with :command:`execute_process`.

* The :command:`find_package` command now searches prefixes specified by
  the :variable:`<PackageName>_ROOT` CMake variable and the
  :envvar:`<PackageName>_ROOT` environment variable.  Package roots are
  maintained as a stack so nested calls to all ``find_*`` commands inside
  find modules also search the roots as prefixes.
  See policy :policy:`CMP0074`.

* The :command:`install` command learned an optional ``NAMELINK_COMPONENT``
  parameter, which allows you to change the component for a shared library's
  namelink. If none is specified, the value of ``COMPONENT`` is used by
  default.

* The :command:`list` command learned a ``JOIN`` sub-command
  to concatenate list's elements separated by a glue string.

* The :command:`list` command learned a ``SUBLIST`` sub-command
  to get a sublist of the list.

* The :command:`list` command learned a ``TRANSFORM`` sub-command
  to apply various string transformation to list's elements.

* The :command:`project` command learned an optional ``HOMEPAGE_URL``
  parameter which has the effect of setting variables like
  :variable:`PROJECT_HOMEPAGE_URL`, :variable:`<PROJECT-NAME>_HOMEPAGE_URL`
  and :variable:`CMAKE_PROJECT_HOMEPAGE_URL`.

* The :command:`string` command learned a ``JOIN`` sub-command
  to concatenate input strings separated by a glue string.

* :command:`target_compile_options` and :command:`add_compile_options`
  commands gained a ``SHELL:`` prefix to specify a group of related
  options using shell-like quoting.

* The :command:`target_link_libraries` command now supports
  :ref:`Object Libraries`.  Linking to an object library uses its object
  files in direct dependents and also propagates usage requirements.

Variables
---------

* The :variable:`CMAKE_FOLDER` variable was added to initialize the
  :prop_tgt:`FOLDER` property on all targets.

* The :variable:`CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION` variable
  was defined to initialize all
  :prop_tgt:`DOTNET_TARGET_FRAMEWORK_VERSION` target properties.

* ``CMAKE_PROJECT_VERSION*`` variables have been introduced:

  - :variable:`CMAKE_PROJECT_VERSION`
  - :variable:`CMAKE_PROJECT_VERSION_MAJOR`
  - :variable:`CMAKE_PROJECT_VERSION_MINOR`
  - :variable:`CMAKE_PROJECT_VERSION_PATCH`
  - :variable:`CMAKE_PROJECT_VERSION_TWEAK`

* The :variable:`CMAKE_SUPPRESS_REGENERATION` variable was extended to
  support the :generator:`Ninja` and :ref:`Makefile Generators`.
  It is also now documented.

* ``CMAKE_VS_SDK_*_DIRECTORIES`` variables were defined to tell
  :ref:`Visual Studio Generators` for VS 2010 and above how to populate
  fields in ``.vcxproj`` files that specify SDK directories.  The
  variables are:

  - :variable:`CMAKE_VS_SDK_EXCLUDE_DIRECTORIES`
  - :variable:`CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES`
  - :variable:`CMAKE_VS_SDK_INCLUDE_DIRECTORIES`
  - :variable:`CMAKE_VS_SDK_LIBRARY_DIRECTORIES`
  - :variable:`CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES`
  - :variable:`CMAKE_VS_SDK_REFERENCE_DIRECTORIES`
  - :variable:`CMAKE_VS_SDK_SOURCE_DIRECTORIES`

* A :variable:`MSVC_TOOLSET_VERSION` variable was added to provide the
  MSVC toolset version associated with the current MSVC compiler version
  in :variable:`MSVC_VERSION`.

Properties
----------

* The :prop_tgt:`COMMON_LANGUAGE_RUNTIME` target property was introduced
  to configure the use of managed C++ for :ref:`Visual Studio Generators`
  for VS 2010 and above.
  A corresponding :prop_tgt:`IMPORTED_COMMON_LANGUAGE_RUNTIME` target
  property was added to support ``C++/CLI`` for imported targets.

* The :prop_tgt:`DOTNET_TARGET_FRAMEWORK_VERSION` target property
  was introduced as replacement for
  :prop_tgt:`VS_DOTNET_TARGET_FRAMEWORK_VERSION`, which is considered
  deprecated now.

* An :prop_tgt:`EXPORT_PROPERTIES` target property was added to specify a
  custom list of target properties to include in targets exported by the
  :command:`install(EXPORT)` and :command:`export` commands.

* The :prop_tgt:`PDB_OUTPUT_DIRECTORY` property learned to support
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

* A :prop_dir:`TESTS` directory property was added to hold the list of
  tests defined by the :command:`add_test` command.

* A :prop_tgt:`VS_DEBUGGER_COMMAND` target property was created to set the
  debugging command line with :ref:`Visual Studio Generators` for VS 2010
  and above.

* HLSL source file properties :prop_sf:`VS_SHADER_DISABLE_OPTIMIZATIONS`
  and :prop_sf:`VS_SHADER_ENABLE_DEBUG` gained support for generator
  expressions.

* HLSL source file property :prop_sf:`VS_SHADER_OBJECT_FILE_NAME` has been
  added to the :ref:`Visual Studio Generators` for VS 2010 and above.
  The property specifies the file name of the compiled shader object.

Modules
-------

* The :module:`FindALSA` module now provides imported targets.

* The :module:`FindCURL` module now provides imported targets.

* The :module:`FindJPEG` module now provides imported targets.

* The :module:`FindLibXml2` module now provides imported targets.

* The :module:`FindMatlab` module now supports the Matlab Runtime
  Compiler (MCR) for compiling and linking matlab extensions.

* A :module:`FindODBC` module was added to find an Open Database Connectivity
  (ODBC) library.

* The :module:`FindPkgConfig` module has learned to export the found
  libraries with full path for direct consumption with the
  :command:`target_link_libraries` command.

* New :module:`FindPython3` and :module:`FindPython2` modules, as well as
  a new :module:`FindPython` module, have been added to provide a new way
  to locate python environments.

* The :module:`UseSWIG` module gained a whole refresh and is now more
  consistent with standard CMake commands to generate libraries and is
  fully configurable through properties.

* The :module:`UseSWIG` module learned to manage multiple behaviors through
  ``UseSWIG_MODULE_VERSION`` variable to ensure legacy support as well as more
  robust handling of ``SWIG`` advanced features (like ``%template``).

* The :module:`UseSWIG` module learned to support CSHARP variant
  wrapper files.

* The :module:`WriteCompilerDetectionHeader` module gained a ``BARE_FEATURES``
  option to add a compatibility define for the exact keyword of a new language
  feature.

Generator Expressions
---------------------

* A new ``$<GENEX_EVAL:...>`` and ``$<TARGET_GENEX_EVAL:target,...>``
  :manual:`generator expression <cmake-generator-expressions(7)>`
  has been added to enable consumption of generator expressions whose
  evaluation results itself in generator expressions.

* A new ``$<IN_LIST:...>``
  :manual:`generator expression <cmake-generator-expressions(7)>`
  has been added.

* A new ``$<TARGET_EXISTS:...>``
  :manual:`generator expression <cmake-generator-expressions(7)>`
  has been added.

* A new ``$<TARGET_NAME_IF_EXISTS:...>``
  :manual:`generator expression <cmake-generator-expressions(7)>`
  has been added.

CTest
-----

* The :command:`ctest_start` command has been reworked so that you can simply
  call ``ctest_start(APPEND)`` and it will read all the needed information from
  the TAG file. The argument parsing has also been relaxed so that the order of
  the arguments is less significant.

* A :prop_test:`PROCESSOR_AFFINITY` test property was added to request
  that CTest run a test with CPU affinity for a set of processors
  disjoint from other concurrently running tests with the property set.

CPack
-----

* The :module:`CPack` module now uses variables
  :variable:`CMAKE_PROJECT_VERSION_MAJOR`,
  :variable:`CMAKE_PROJECT_VERSION_MINOR` and
  :variable:`CMAKE_PROJECT_VERSION_PATCH`
  to initialize corresponding CPack variables.

* A :cpack_gen:`CPack NuGet Generator` was was added with basic
  support for `NuGet`_.

.. _NuGet: https://learn.microsoft.com/en-us/nuget/what-is-nuget

Other
-----

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality
  is now aware of C++ 20.  No specific features are yet enumerated besides
  the ``cxx_std_20`` meta-feature.

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality
  is now aware of the availability of C features in MSVC since VS 2010.

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality
  is now aware of C language standards supported by Texas Instruments C
  compilers.

Deprecated and Removed Features
===============================

* The :generator:`Visual Studio 8 2005` generator has been removed.

* CMake no longer produces ``<tgt>_LIB_DEPENDS`` cache entries
  for library targets.  See policy :policy:`CMP0073`.

Other Changes
=============

* Include flags for directories marked as ``SYSTEM`` are now moved after
  non-system directories.  The ``-isystem`` flag does this automatically,
  so moving them explicitly to the end makes the behavior consistent on
  compilers that do not have any ``-isystem`` flag.

* Fortran dependency scanning now supports dependencies implied by
  `Fortran Submodules`_.

* The existence and functionality of the file
  ``${CMAKE_BINARY_DIR}/cmake_install.cmake`` has now been documented in the
  :command:`install` documentation so that external packaging software can take
  advantage of CPack-style component installs.

* The :module:`CheckIncludeFile` module ``check_include_file`` macro
  learned to honor the ``CMAKE_REQUIRED_LIBRARIES`` variable.
  See policy :policy:`CMP0075`.

* The :module:`CheckIncludeFileCXX` module ``check_include_file_cxx`` macro
  learned to honor the ``CMAKE_REQUIRED_LIBRARIES`` variable.
  See policy :policy:`CMP0075`.

* The :module:`CheckIncludeFiles` module ``check_include_files`` macro
  learned to honor the ``CMAKE_REQUIRED_LIBRARIES`` variable.
  See policy :policy:`CMP0075`.

* The :manual:`cmake(1)` ``-E copy_directory`` tool now fails when the
  source directory does not exist.  Previously it succeeded by creating
  an empty destination directory.

* The :module:`UseSWIG` module :command:`swig_add_library` command
  (and legacy ``swig_add_module`` command) now set the prefix of
  Java modules to ``""`` for MINGW, MSYS, and CYGWIN environments.

.. _Fortran Submodules: https://fortranwiki.org/fortran/show/Submodules



/P/🚀 release/3.11.rst
====================================


CMake 3.11 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.10 include the following.

New Features
============

Platforms
---------

* TI C/C++ compilers are now supported by the :generator:`Ninja` generator.

Generators
----------

* The :generator:`CodeBlocks` extra generator learned to check a
  :variable:`CMAKE_CODEBLOCKS_COMPILER_ID` variable for a custom
  compiler identification value to place in the project file.

* The :ref:`Makefile Generators` and the :generator:`Ninja` generator learned
  to add compiler launcher tools along with the compiler for the ``Fortran``
  language (``C``, ``CXX``, and ``CUDA`` were supported previously).
  See the :variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` variable and
  :prop_tgt:`<LANG>_COMPILER_LAUNCHER` target property for details.

* :ref:`Visual Studio Generators` learned to support the ``COMPILE_LANGUAGE``
  :manual:`generator expression <cmake-generator-expressions(7)>` in
  target-wide :prop_tgt:`COMPILE_DEFINITIONS`,
  :prop_tgt:`INCLUDE_DIRECTORIES`, :prop_tgt:`COMPILE_OPTIONS`, and
  :command:`file(GENERATE)`.  See generator expression documentation
  for caveats.

* The :generator:`Xcode` generator learned to support the ``COMPILE_LANGUAGE``
  :manual:`generator expression <cmake-generator-expressions(7)>` in
  target-wide :prop_tgt:`COMPILE_DEFINITIONS` and
  :prop_tgt:`INCLUDE_DIRECTORIES`.  It previously supported only
  :prop_tgt:`COMPILE_OPTIONS` and :command:`file(GENERATE)`.
  See generator expression documentation for caveats.

Commands
--------

* :command:`add_library` and :command:`add_executable` commands can now be
  called without any sources and will not complain as long as sources are
  added later via the :command:`target_sources` command.

* The :command:`file(DOWNLOAD)` and :command:`file(UPLOAD)` commands
  gained ``NETRC`` and ``NETRC_FILE`` options to specify use of a
  ``.netrc`` file.

* The :command:`target_compile_definitions` command learned to set the
  :prop_tgt:`INTERFACE_COMPILE_DEFINITIONS` property on
  :ref:`Imported Targets`.

* The :command:`target_compile_features` command learned to set the
  :prop_tgt:`INTERFACE_COMPILE_FEATURES` property on :ref:`Imported Targets`.

* The :command:`target_compile_options` command learned to set the
  :prop_tgt:`INTERFACE_COMPILE_OPTIONS` property on :ref:`Imported Targets`.

* The :command:`target_include_directories` command learned to set the
  :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` property on
  :ref:`Imported Targets`.

* The :command:`target_sources` command learned to set the
  :prop_tgt:`INTERFACE_SOURCES` property on :ref:`Imported Targets`.

* The :command:`target_link_libraries` command learned to set the
  :prop_tgt:`INTERFACE_LINK_LIBRARIES` property on :ref:`Imported Targets`.

Variables
---------

* A :variable:`CMAKE_GENERATOR_INSTANCE` variable was introduced
  to hold the selected instance of the generator's corresponding
  native tools if multiple are available.  This is used by the
  :generator:`Visual Studio 15 2017` generator to hold the
  selected instance of Visual Studio persistently.

* A :variable:`CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS` variable was added
  to enable setting of default permissions for directories created implicitly
  during installation of files by :command:`install` and
  :command:`file(INSTALL)`, e.g. during ``make install``.

* A :variable:`CMAKE_JOB_POOLS` variable was added specify a value to use for
  the :prop_gbl:`JOB_POOLS` property. This enables control over build
  parallelism with command line configuration parameters when using the Ninja
  generator.

* The :variable:`CMAKE_NETRC` and :variable:`CMAKE_NETRC_FILE` variables
  were added to specify use of a ``.netrc`` file by the
  :command:`file(DOWNLOAD)` and :command:`file(UPLOAD)` commands and
  the :module:`ExternalProject` module.

* A :variable:`CMAKE_CUDA_SEPARABLE_COMPILATION` variable was added to
  initialize the :prop_tgt:`CUDA_SEPARABLE_COMPILATION` target property
  on targets when they are created.

Properties
----------

* The :prop_sf:`COMPILE_DEFINITIONS` source file property learned to support
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

* A :prop_sf:`COMPILE_OPTIONS` source file property was added to manage list
  of options to pass to the compiler.

* An :prop_tgt:`IMPORTED_GLOBAL` target property was added to indicate
  whether an :ref:`IMPORTED target <Imported Targets>` is globally visible.
  It is automatically set to a true value for targets created with the
  ``GLOBAL`` option to :command:`add_library` or :command:`add_executable`.
  Additionally, project code may now *promote* a local imported target
  to be globally visible by setting this property to ``TRUE``.

* An :prop_sf:`INCLUDE_DIRECTORIES` source file property was added to specify
  list of preprocessor include file search directories.

* Source file properties :prop_sf:`VS_SHADER_DISABLE_OPTIMIZATIONS` and
  :prop_sf:`VS_SHADER_ENABLE_DEBUG` have been added to specify more
  details of ``.hlsl`` sources with :ref:`Visual Studio Generators`.

Modules
-------

* The :module:`CheckIncludeFiles` module :command:`CHECK_INCLUDE_FILES`
  command gained a ``LANGUAGE`` option to specify whether to check using the
  ``C`` or ``CXX`` compiler.

* The :module:`CMakePackageConfigHelpers` module
  :command:`write_basic_package_version_file` command learned a new
  ``SameMinorVersion`` mode for the ``COMPATIBILITY`` argument.

* The :module:`ExternalProject` module learned to substitute ``<DOWNLOAD_DIR>``
  in comments, commands, working directory and byproducts.

* The :module:`ExternalProject` module gained ``NETRC`` and ``NETRC_FILE``
  options to specify use of a ``.netrc`` file.

* A new :module:`FetchContent` module was added which supports populating
  content at configure time using any of the download/update methods
  supported by :command:`ExternalProject_Add`.  This allows the content
  to be used immediately during the configure stage, such as with
  :command:`add_subdirectory`, etc.  Hierarchical project structures are
  well supported, allowing parent projects to override the content details
  of child projects and ensuring content is not populated multiple times
  throughout the whole project tree.

* The :module:`FindBLAS` and :module:`FindLAPACK` modules learned to support
  `FLAME`_ ``blis`` and ``libflame``.

* The :module:`FindDoxygen` module :command:`doxygen_add_docs` function
  now supports a new ``DOXYGEN_VERBATIM_VARS`` list variable.  Any
  ``DOXYGEN_...`` variable contained in that list will bypass the automatic
  quoting logic, leaving its contents untouched when transferring them to the
  output ``Doxyfile``.

* A :module:`FindIconv` module was added to locate iconv support.

* The :module:`GenerateExportHeader` module ``GENERATE_EXPORT_HEADER`` command
  gained an ``INCLUDE_GUARD_NAME`` option to change the name of the include
  guard symbol written to the generated export header.
  Additionally, it now adds a comment after the closing ``#endif`` on the
  generated export header's include guard.

* The :module:`UseJava` module ``add_jar`` command gained a
  ``GENERATE_NATIVE_HEADERS`` option to generate native header files
  using ``javac -h`` for ``javac`` 1.8 or above.  This supersedes
  ``create_javah``, which no longer works with JDK 1.10 and above due
  to removal of the ``javah`` tool by `JEP 313`_.

.. _`FLAME`: https://github.com/flame
.. _`JEP 313`: https://openjdk.org/jeps/313

Autogen
-------

* When using :prop_tgt:`AUTOMOC` or :prop_tgt:`AUTOUIC`, CMake now starts
  multiple parallel ``moc`` or ``uic`` processes to reduce the build time.
  A new :variable:`CMAKE_AUTOGEN_PARALLEL` variable and
  :prop_tgt:`AUTOGEN_PARALLEL` target property may be set to specify the
  number of parallel ``moc`` or ``uic`` processes to start.  The default
  is derived from the number of CPUs on the host.

CTest
-----

* The :command:`ctest_start` command no longer sets
  :variable:`CTEST_RUN_CURRENT_SCRIPT` due to issues with scoping if it is
  called from inside a function. Instead, it sets an internal variable in
  CTest. However, setting :variable:`CTEST_RUN_CURRENT_SCRIPT` to 0 at the
  global scope still prevents the script from being re-run at the end.

CPack
-----

* :manual:`cpack(1)` gained ``--trace`` and ``--trace-expand`` options.

* The :cpack_gen:`CPack IFW Generator` gained new
  :variable:`CPACK_IFW_PACKAGE_REMOVE_TARGET_DIR` variable to control
  if the target directory should not be deleted when uninstalling.

* The :cpack_gen:`CPack RPM Generator` learned to enable enforcing of execute
  privileges on programs and shared libraries.
  See :variable:`CPACK_RPM_INSTALL_WITH_EXEC` variable.

* A :variable:`CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS` variable was added
  which serves the same purpose during packaging (e.g. ``make package``) as the
  :variable:`CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS` variable serves during
  installation (e.g. ``make install``).

Other
-----

* :ref:`Alias Targets` may now alias :ref:`Imported Targets` that are
  created with the ``GLOBAL`` option to :command:`add_library`.

* :ref:`Interface Libraries` may now have custom properties set on them if
  they start with either an underscore (``_``) or a lowercase ASCII character.
  The original intention was to only allow properties which made sense for
  ``INTERFACE`` libraries, but it also blocked usage of custom properties.

* The :manual:`cmake(1)` ``--open <dir>`` command-line option was added
  to open generated IDE projects like Visual Studio solutions or Xcode
  projects.

Deprecated and Removed Features
===============================

* An explicit deprecation diagnostic was added for policies ``CMP0037``
  through ``CMP0054`` (``CMP0036`` and below were already deprecated).
  The :manual:`cmake-policies(7)` manual explains that the OLD behaviors
  of all policies are deprecated and that projects should port to the
  NEW behaviors.

* The ``KDevelop3`` generator has been removed.

Other Changes
=============

* Policy :policy:`CMP0037` no longer reserves target names associated
  with optional features, such as ``test`` and ``package``, unless
  the corresponding feature is enabled.

* The :module:`FindOpenGL` module now prefers GLVND libraries if available.
  See policy :policy:`CMP0072`.

* The minimum deployment target set in the
  :variable:`CMAKE_OSX_DEPLOYMENT_TARGET` variable used to be only
  applied for macOS regardless of the selected SDK.  It is now properly
  set for the target platform selected by :variable:`CMAKE_OSX_SYSROOT`.
  For example, if the sysroot variable specifies an iOS SDK then the
  value in ``CMAKE_OSX_DEPLOYMENT_TARGET`` is interpreted as minimum
  iOS version.

* The :generator:`Xcode` generator behavior of generating one project
  file per :command:`project()` command may now be controlled with the
  :variable:`CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY` variable.
  This could be useful to speed up the CMake generation step for
  large projects and to work-around a bug in the ``ZERO_CHECK`` logic.

* Since the ``CMakeCache.txt`` format does not support newlines in values,
  values containing newlines are now truncated before writing to the file.
  In addition, a warning comment is written to the cache file, and a warning
  message is displayed to the user on the console.

Updates
=======

Changes made since CMake 3.11.0 include the following.

3.11.1
------

* The :module:`CheckIncludeFile` module ``check_include_file`` macro,
  :module:`CheckIncludeFileCXX` module ``check_include_file_cxx`` macro,
  and :module:`CheckIncludeFiles` module ``check_include_files`` macro
  were taught to honor the ``CMAKE_REQUIRED_LIBRARIES`` variable in
  CMake 3.11.0.  This has been reverted due to changing behavior of
  checks for existing projects.  It may be restored in the future
  with a policy for compatibility.

3.11.2
------

* Calling :command:`add_library` to create an alias of an imported
  target that is not globally visible now causes an error again as
  it did prior to 3.11.0.  This diagnostic was accidentally dropped
  from CMake 3.11.0 and 3.11.1 by the change to allow globally visible
  imported targets to be aliased.

* The :module:`FindQt4` module ``qt4_wrap_cpp``, ``qt4_wrap_ui`` and
  ``qt4_add_resources`` macros now set :prop_sf:`SKIP_AUTOMOC` and
  :prop_sf:`SKIP_AUTOUIC` on their generated files.  These files never
  need to be processed by moc or uic, and we must say so explicitly to
  account for policy :policy:`CMP0071`.

3.11.3
------

* CMake 3.11.0 introduced support for resolving symbolic links on
  Windows in code paths that typically do so on UNIX.  This has been
  reverted due to breakage on ``subst`` drives.



/P/🚀 release/3.10.rst
====================================


CMake 3.10 Release Notes
************************

.. only:: html

  .. contents::

Changes made since CMake 3.9 include the following.

New Features
============

Platforms
---------

* The `flang`_ Fortran compiler is now supported, with compiler id ``Flang``.

* A new minimal platform file for ``Midipix`` was added.

* Support for the MSVC ARM64 architecture was added.
  Visual Studio 2017 Update 4 and above offer an ARM64 toolchain.

* Support for the IAR ARM Compiler was improved.

.. _`flang`: https://github.com/flang-compiler/flang

Generators
----------

* The :ref:`Makefile Generators` and the :generator:`Ninja` generator learned
  to add compiler launcher tools like ccache along with the compiler for the
  ``CUDA`` language (``C`` and ``CXX`` were supported previously).  See the
  :variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` variable and
  :prop_tgt:`<LANG>_COMPILER_LAUNCHER` target property for details.

* The :generator:`CodeBlocks` extra generator learned to optionally exclude
  files from outside the project root directory from the generated project.
  See the :variable:`CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES` variable.

Commands
--------

* The :command:`cmake_host_system_information` command learned more keys
  to get information about the processor capabilities and the host OS
  version.

* The :command:`configure_file` command learned to support indented
  ``#  cmakedefine`` and ``#  cmakedefine01``. Spaces and/or tabs between
  the ``#`` character and the ``cmakedefine``/``cmakedefine01`` words
  are now understood and preserved in the output.

* The :command:`execute_process` command gained a ``RESULTS_VARIABLE``
  option to collect a list of results from all children in a pipeline
  of processes when multiple ``COMMAND`` arguments are given.

* The :command:`include_guard` command was introduced to allow guarding
  CMake scripts from being included more than once. The command supports
  ``DIRECTORY`` and ``GLOBAL`` options to adjust the corresponding include guard
  scope. If no options given, include guard is similar to basic variable-based
  check.

* The :command:`string` command learned a new ``PREPEND`` subcommand.

* The :command:`string(TIMESTAMP)` command now supports ``%A``
  for full weekday name and ``%B`` for full month name.

Variables
---------

* A :variable:`CMAKE_DIRECTORY_LABELS` variable was added to specify
  labels for all tests in a directory.

Properties
----------

* A :prop_tgt:`<LANG>_CPPCHECK` target property and supporting
  :variable:`CMAKE_<LANG>_CPPCHECK` variable were introduced to tell
  the :ref:`Makefile Generators` and the :generator:`Ninja` generator to
  run ``cppcheck`` with the compiler for ``C`` and ``CXX`` languages.

* A :prop_dir:`LABELS` directory property was added to specify labels
  for all targets and tests in a directory.

* A :prop_dir:`TEST_INCLUDE_FILES` directory property was added to
  list any number of files to be included when running tests with
  :manual:`ctest(1)`.  This generalizes the :prop_dir:`TEST_INCLUDE_FILE`
  property.

* The :prop_tgt:`VS_DOTNET_REFERENCEPROP_<refname>_TAG_<tagname>`
  target property was added to support custom XML tags for reference
  assemblies in C# targets.

* Source file properties :prop_sf:`VS_SHADER_OUTPUT_HEADER_FILE` and
  :prop_sf:`VS_SHADER_VARIABLE_NAME` have been added to specify more
  details of ``.hlsl`` sources with :ref:`Visual Studio Generators`.

Modules
-------

* The :module:`FindCurses` module gained a ``CURSES_NEED_WIDE`` option
  to request the wide-character variant.

* The :module:`FindEXPAT` module now provides imported targets.

* The :module:`FindFreetype` module now provides imported targets.

* :module:`FindMPI` gained a number of new features, including:

  * Language-specific components have been added to the module.
  * Many more MPI environments are now supported.
  * The environmental support for Fortran has been improved.
  * A user now has fine-grained control over the MPI selection process,
    including passing custom parameters to the MPI compiler.
  * The version of the implemented MPI standard is now being exposed.
  * MPI-2 C++ bindings can now be detected and also suppressed if so desired.
  * The available Fortran bindings are now being detected and verified.
  * Various MPI-3 information can be requested, including the library version
    and Fortran capabilities of the individual bindings.
  * Statically linked MPI implementations are supported.

* A :module:`FindOpenACC` module was added to detect compiler support
  for OpenACC.  Currently only supports PGI, GNU and Cray compilers.

* The :module:`FindOpenGL` module gained support for GLVND on Linux.

* The :module:`FindOpenMP` module gained support for
  language-specific components.

* A :module:`FindPatch` module was added to find the ``patch``
  command-line executable.

* The :module:`FindProtobuf` module :command:`protobuf_generate_cpp` command
  gained a ``DESCRIPTORS`` option to generate descriptor files.

* The :module:`GoogleTest` module gained a new command
  :command:`gtest_discover_tests` implementing dynamic (build-time) test
  discovery.  Unlike the source parsing approach, dynamic discovery executes
  the test (in 'list available tests' mode) at build time to discover tests.
  This is robust against unusual ways of labeling tests, provides much better
  support for advanced features such as parameterized tests, and does not
  require re-running CMake to discover added or removed tests within a test
  executable.  Note that a breaking change was made in CMake 3.10.3 to address
  an ambiguity of the ``TIMEOUT`` keyword (see :ref:`Release Notes 3.10.3`).

* The :module:`InstallRequiredSystemLibraries` module gained support
  for installing Intel compiler runtimes.

Autogen
-------

* When using :prop_tgt:`AUTOMOC` or :prop_tgt:`AUTOUIC` with a
  multi configuration generator (e.g. :generator:`Xcode`),
  included ``*.moc``,  ``moc_*.cpp`` and ``ui_*.h`` files are generated in
  ``<AUTOGEN_BUILD_DIR>/include_<CONFIG>`` instead of
  ``<AUTOGEN_BUILD_DIR>/include``.

* When using :prop_tgt:`AUTOMOC` or :prop_tgt:`AUTOUIC`,
  source files that are :prop_sf:`GENERATED` will be processed as well.
  They were ignored by :prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC`
  in earlier releases.
  See policy :policy:`CMP0071`.

* When using :prop_tgt:`AUTOMOC`, CMake searches for the strings ``Q_OBJECT``,
  ``Q_GADGET`` or ``Q_NAMESPACE`` in a source file to determine if it needs
  to be ``moc`` processed.  The new :variable:`CMAKE_AUTOMOC_MACRO_NAMES`
  variable and :prop_tgt:`AUTOMOC_MACRO_NAMES` target property may be set
  to register additional strings (macro names) to search for.

* When using :prop_tgt:`AUTOMOC`, the new
  :variable:`CMAKE_AUTOMOC_COMPILER_PREDEFINES` variable and
  :prop_tgt:`AUTOMOC_COMPILER_PREDEFINES` target property specify whether
  to enable or disable the generation of the compiler pre definitions file
  ``moc_predefs.h``.

CTest
-----

* A :variable:`CTEST_LABELS_FOR_SUBPROJECTS` CTest module variable and CTest
  script variable were added to specify a list of labels that should be
  treated as subprojects by CDash. To use this value in both the CTest module
  and the ctest command line :ref:`Dashboard Client` mode (e.g. ``ctest -S``)
  set it in the ``CTestConfig.cmake`` config file.

CPack
-----

* A :cpack_gen:`CPack FreeBSD Generator` was added for FreeBSD ``pkg(8)``.

* The :cpack_gen:`CPack DEB Generator` was enabled on Windows.  While not
  fully featured (due to the lack of external UNIX tools) this will allow
  building basic cross-platform Debian packages.

* The :cpack_gen:`CPack DEB Generator` learned to set package release
  version in ``Version`` info property.
  See the :variable:`CPACK_DEBIAN_PACKAGE_RELEASE` variable.

* The :cpack_gen:`CPack DEB Generator` learned more strict package
  version checking that complies with Debian rules.

* The :module:`CPackIFW` module :command:`cpack_ifw_configure_component` and
  :command:`cpack_ifw_configure_component_group` commands gained a new
  ``REPLACES`` and ``CHECKABLE`` options.

* The :cpack_gen:`CPack IFW Generator` gained new
  :variable:`CPACK_IFW_PACKAGE_FILE_EXTENSION` variable to customize
  target binary format.

* The :cpack_gen:`CPack IFW Generator` gained new
  :variable:`CPACK_IFW_REPOSITORIES_DIRECTORIES` variable to specify
  additional repositories dirs that will be used to resolve and
  repack dependent components. This feature is only available when
  using QtIFW 3.1 or later.

* The :cpack_gen:`CPack RPM Generator` and :cpack_gen:`CPack DEB Generator`
  learned to set the package epoch version.
  See :variable:`CPACK_RPM_PACKAGE_EPOCH` and
  :variable:`CPACK_DEBIAN_PACKAGE_EPOCH` variables.

Other
-----

* The :manual:`cmake(1)` ``-E`` mode gained support for ``sha1sum``,
  ``sha224sum``, ``sha256sum``, ``sha384sum``, and ``sha512sum``.

* The graphviz output now distinguishes among the different dependency types
  ``PUBLIC``, ``PRIVATE`` and ``INTERFACE`` and represents them in the output
  graph as solid, dashed and dotted edges.

Deprecated and Removed Features
===============================

* Support for building CMake itself with C++98 compilers was dropped.
  CMake is now implemented using C++11.

* Support for building CMake on HP-UX has been dropped pending better
  support for C++11 and a port of libuv.  See `CMake Issue 17137`_.
  Use CMake 3.9 or lower instead for HP-UX support.

.. _`CMake Issue 17137`: https://gitlab.kitware.com/cmake/cmake/-/issues/17137

Other Changes
=============

* On FreeBSD the C++ compiler named ``c++`` is now the preferred default.

* The :command:`file(GENERATE)` command now interprets relative paths
  given to its ``OUTPUT`` and ``INPUT`` arguments with respect to the
  caller's current binary and source directories, respectively.
  See policy :policy:`CMP0070`.

* The :command:`get_filename_component` ``PROGRAM`` mode semantics
  have been revised to not tolerate unquoted spaces in the path
  to the program while also accepting arguments.  While technically
  incompatible with the old behavior, it is expected that behavior
  under typical use cases with properly-quoted command-lines has
  not changed.

Updates
=======

Changes made since CMake 3.10.0 include the following.

3.10.1
------

* The :manual:`cmake-server(7)` ``codemodel`` response cross-references
  field added by 3.10.0 has been dropped due to excessive memory usage.
  Another approach will be needed to provide backtrace information.

.. _`Release Notes 3.10.3`:

3.10.3
------

* CMake 3.10.1 added a ``TIMEOUT`` option to :command:`gtest_discover_tests`
  from the :module:`GoogleTest` module.  That keyword clashed with the
  ``TIMEOUT`` test property, which is one of the common properties that
  would be set with the command's ``PROPERTIES`` keyword, usually leading
  to legal but unintended behavior.  The keyword was changed to
  ``DISCOVERY_TIMEOUT`` in CMake 3.10.3 to address this problem.  The
  ambiguous behavior of the :command:`gtest_discover_tests` command's
  ``TIMEOUT`` keyword in 3.10.1 and 3.10.2 has not been preserved.



/P/🚀 release/3.9.rst
===================================


CMake 3.9 Release Notes
***********************

.. only:: html

  .. contents::

Changes made since CMake 3.8 include the following.

New Features
============

Languages
---------

* ``CUDA`` is now supported by the :ref:`Visual Studio Generators`
  for VS 2010 and above.  This complements the existing support by the
  :ref:`Makefile Generators` and the :generator:`Ninja` generator.
  CUDA 8.0.61 or higher is recommended due to known bugs in the VS
  integration by earlier versions.

* CMake is now aware of the :prop_tgt:`C++ standards <CXX_STANDARD>` and
  :prop_tgt:`C standards <C_STANDARD>` and their associated meta-features for
  the following :variable:`compiler ids <CMAKE_<LANG>_COMPILER_ID>`: ``Cray``,
  ``PGI``, and ``XL``.

Generators
----------

* :ref:`Visual Studio Generators` for VS 2010 and above learned to support
  the ``ASM_NASM`` language when ``nasm`` is installed.

* The :generator:`Xcode` generator learned to create Xcode schema files.
  This is an experimental feature and can be activated by setting the
  :variable:`CMAKE_XCODE_GENERATE_SCHEME` variable to a ``TRUE`` value.

Commands
--------

* The :command:`add_library` command ``IMPORTED`` option learned to support
  :ref:`Object Libraries`.

* The :command:`find_library` command learned to search ``libx32`` paths
  when the build targets the ``x32`` ABI.  See the
  :prop_gbl:`FIND_LIBRARY_USE_LIBX32_PATHS` global property.

* The :command:`include_external_msproject` command learned to use
  the :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` target property
  to map current configurations to the external configurations.

* The :command:`install(TARGETS)` command learned a new ``OBJECTS`` option to
  specify where to install :ref:`Object Libraries`.

* The :command:`install(EXPORT)` command learned how to export
  :ref:`Object Libraries`.

* The :command:`project` command learned an optional ``DESCRIPTION``
  parameter to set the :variable:`PROJECT_DESCRIPTION` variable.

* The :command:`separate_arguments` command gained a ``NATIVE_COMMAND`` mode
  that performs argument separation depending on the host operating system.

Variables
---------

* A :variable:`CMAKE_ANDROID_NDK_DEPRECATED_HEADERS` variable was added
  for use when :ref:`Cross Compiling for Android with the NDK` to request
  use of the deprecated headers even when unified headers are available.
  The default is now to use unified headers if available.

* A :variable:`CMAKE_AUTOMOC_DEPEND_FILTERS` variable was introduced to
  allow :variable:`CMAKE_AUTOMOC` to extract additional dependency file names
  for ``moc`` from the contents of source files.

* A :variable:`CMAKE_AUTOUIC_SEARCH_PATHS` variable was introduced to
  allow :variable:`CMAKE_AUTOUIC` to search for ``foo.ui`` in more
  places than the vicinity of the file including ``ui_foo.h``.

* A :variable:`CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX` variable was added to
  tell the :command:`find_library` command to search in a ``lib<suffix>``
  directory before each ``lib`` directory that would normally be searched.

* A :variable:`CMAKE_INTERPROCEDURAL_OPTIMIZATION` variable was added to
  initialize the :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` property on all
  targets.

* A :variable:`CMAKE_<LANG>_COMPILER_AR` variable was added to hold
  the path to the GCC/Clang wrapper of ``ar``.

* A :variable:`CMAKE_<LANG>_COMPILER_RANLIB` variable was added to hold
  the path to the GCC/Clang wrapper of ``ranlib``.

* The :variable:`CMAKE_SYSROOT_COMPILE` and :variable:`CMAKE_SYSROOT_LINK`
  variables were added to use separate sysroots for compiling and linking.

Properties
----------

* A new :prop_tgt:`AUTOGEN_BUILD_DIR` target property was introduced to set
  a custom output directory for :prop_tgt:`AUTOMOC`, :prop_tgt:`AUTOUIC`,
  and :prop_tgt:`AUTORCC`.

* A new :prop_tgt:`AUTOMOC_DEPEND_FILTERS` target property was introduced to
  allow :prop_tgt:`AUTOMOC` to extract additional dependency file names
  for ``moc`` from the contents of source files.

* A new :prop_tgt:`AUTOUIC_SEARCH_PATHS` target property was introduced to
  allow :prop_tgt:`AUTOUIC` to search for ``foo.ui`` in more
  places than the vicinity of the file including ``ui_foo.h``.

* Global properties :prop_gbl:`AUTOGEN_SOURCE_GROUP`,
  :prop_gbl:`AUTOMOC_SOURCE_GROUP` and
  :prop_gbl:`AUTORCC_SOURCE_GROUP` were
  introduced to allow files generated by :prop_tgt:`AUTOMOC` or
  :prop_tgt:`AUTORCC` to be placed in a :command:`source_group`.

* A :prop_tgt:`BUILD_WITH_INSTALL_NAME_DIR` target property and corresponding
  :variable:`CMAKE_BUILD_WITH_INSTALL_NAME_DIR` variable were added to
  control whether to use the :prop_tgt:`INSTALL_NAME_DIR` target property
  value for binaries in the build tree.  This is for macOS ``install_name``
  as :prop_tgt:`BUILD_WITH_INSTALL_RPATH` is for ``RPATH``.

* A :prop_tgt:`CUDA_PTX_COMPILATION` target property was added to
  :ref:`Object Libraries` to support compiling to ``.ptx`` files
  instead of host object files.

* A :prop_gbl:`GENERATOR_IS_MULTI_CONFIG` global property was
  added to determine whether the current generator is a multi-configuration
  generator (such as :ref:`Visual Studio Generators` or :generator:`Xcode`).

* The :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` target property is now enforced
  when enabled.  CMake will add IPO flags unconditionally or produce an error
  if it does not know the flags for the current compiler.  The project is now
  responsible to use the :module:`CheckIPOSupported` module to check for IPO
  support before enabling the target property.  See policy :policy:`CMP0069`.

* The :prop_tgt:`WINDOWS_EXPORT_ALL_SYMBOLS` target property may now
  be used in combination with explicit ``.def`` files in order to
  export all symbols from the object files within a target plus
  an explicit list of symbols that the linker finds in dependencies
  (e.g. ``msvcrt.lib``).

Modules
-------

* A :module:`CheckIPOSupported` module was added to help projects
  check whether interprocedural optimization (IPO) is supported by
  the current toolchain and CMake version.

* The :module:`CMakeFindDependencyMacro` module ``find_dependency`` macro
  now forwards all arguments to the underlying :command:`find_package`
  call.  Existing uses will continue to function as before, but callers can
  now access the full suite of arguments that :command:`find_package` accepts.

* The :module:`FeatureSummary` module :command:`feature_summary` command now
  accepts the new ``DEFAULT_DESCRIPTION`` option that will print the default
  title for the selected package type.

* The :module:`FeatureSummary` module gained a new
  :variable:`FeatureSummary_<TYPE>_DESCRIPTION` variable that can be defined
  for each ``<TYPE>`` to replace the type name with the specified string
  whenever the package type is used in an output string by the module.

* The :module:`FindDoxygen` module learned to control Doxygen behavior using
  CMake variables and generate documentation via the newly added
  :command:`doxygen_add_docs` function. The Doxygen input file (``Doxyfile``)
  is automatically generated and doxygen is run as part of a custom target.
  Additional components can be specified to find optional tools: ``dot``,
  ``mscgen`` and ``dia``.

* The :module:`FindMPI` module now provides imported targets.

* The :module:`FindProtobuf` module :command:`protobuf_generate_cpp`
  command gained an ``EXPORT_MACRO`` option to specify the name of
  a DLL export markup macro.

* The :module:`FindProtobuf` module now supports usage of static libraries
  for Unix via a new ``Protobuf_USE_STATIC_LIBS`` input variable.

* The :module:`FindProtobuf` module now provides imported targets
  when the libraries are found.

* A new :module:`GoogleTest` module was added to provide the
  :command:`gtest_add_tests` function independently of the :module:`FindGTest`
  module. The function was also updated to support keyword arguments, with
  functionality expanded to allow a test name prefix and suffix to be
  specified, the dependency on the source files to be optional and the list of
  discovered test cases to be returned to the caller.

CTest
-----

* The :command:`ctest_submit` command gained a ``HTTPHEADER`` option
  to specify custom headers to send during submission.

* The :manual:`ctest(1)` executable gained new options which allow the
  developer to disable automatically adding tests to the test set to satisfy
  fixture dependencies. ``-FS`` prevents adding setup tests for fixtures
  matching the provided regular expression, ``-FC`` prevents adding cleanup
  tests for matching fixtures and ``-FA`` prevents adding any test for matching
  fixtures.

* A :prop_test:`DISABLED` test property was added to mark tests that
  are configured but explicitly disabled so they do not run.

CPack
-----

* The :cpack_gen:`CPack Archive Generator` learned to modify the filename
  per-component.  See the :variable:`CPACK_ARCHIVE_FILE_NAME` variable and
  its per-component version :variable:`CPACK_ARCHIVE_<component>_FILE_NAME`.

* The :module:`CPackComponent` module :command:`cpack_add_component` command
  gained a new ``PLIST <filename>`` option to specify the ``pkgbuild``
  ``--component-plist`` argument when using the
  :module:`productbuild <CPackProductBuild>` generator.

* The :module:`CPackIFW` module :command:`cpack_ifw_configure_component` and
  :command:`cpack_ifw_configure_component_group` commands gained
  internationalization support for ``DISPLAY_NAME`` and ``DESCRIPTION``
  options.

* The :cpack_gen:`CPack IFW Generator` learned the new hint
  :variable:`CPACK_IFW_ROOT` variable for finding the QtIFW tool suite
  installed in a non-standard place.

* The :cpack_gen:`CPack productbuild Generator` gained a new
  :variable:`CPACK_PRODUCTBUILD_RESOURCES_DIR` variable to
  specify resources to be copied into the ``Resources``
  directory.

* The :cpack_gen:`CPack RPM Generator` learned to modify the ``debuginfo``
  package name.  See the :variable:`CPACK_RPM_DEBUGINFO_FILE_NAME` variable.

* The :cpack_gen:`CPack WIX Generator` patching system now has the
  ability to set additional attributes.  This can be done by specifying
  attributes with the ``CPackWiXFragment`` XML tag after the ``Id`` attribute.
  See the :variable:`CPACK_WIX_PATCH_FILE` variable.

* The :cpack_gen:`CPack WIX Generator` implemented a new
  :variable:`CPACK_WIX_ROOT_FOLDER_ID` variable which allows
  using a custom root folder ID instead of the default
  ``ProgramFilesFolder`` / ``ProgramFiles64Folder``.

Other
-----

* Interprocedural optimization (IPO) is now supported for GNU and Clang
  compilers using link time optimization (LTO) flags.  See the
  :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` target property and
  :module:`CheckIPOSupported` module.

* The ``TARGET_OBJECTS``
  :manual:`generator expression <cmake-generator-expressions(7)>`
  is now supported by the :command:`add_custom_command` and
  :command:`file(GENERATE)` commands.

* Two new informational generator expressions to retrieve Apple Bundle
  directories have been added. The first one :genex:`$<TARGET_BUNDLE_DIR:tgt>`
  outputs the full path to the Bundle directory, the other one
  :genex:`$<TARGET_BUNDLE_CONTENT_DIR:tgt>` outputs the full path to the
  ``Contents`` directory of macOS Bundles and App Bundles. For all other
  bundle types and SDKs it is identical with :genex:`$<TARGET_BUNDLE_DIR:tgt>`.
  The new expressions are helpful to query Bundle locations independent of
  the different Bundle types and layouts on macOS and iOS.

Deprecated and Removed Features
===============================

* An explicit deprecation diagnostic was added for policies ``CMP0036``
  and below.  The :manual:`cmake-policies(7)` manual explains that the
  OLD behaviors of all policies are deprecated and that projects should
  always port to the NEW behaviors as soon as possible.

* The :generator:`Visual Studio 8 2005` generator is now deprecated
  and will be removed in a future version of CMake.

* The :generator:`Visual Studio 7 .NET 2003` generator has been removed.

* The :generator:`Xcode` generator dropped support for Xcode versions
  older than 3.

* The :module:`FindDoxygen` module has deprecated several variables.

* The version of curl bundled with CMake no longer accepts URLs of the form
  ``file://c:/...`` on Windows due to a change in upstream curl 7.52.  Use
  the form ``file:///c:/...`` instead to work on all versions.

Other Changes
=============

* When using :prop_tgt:`AUTOMOC`, CMake now scans for the presence of the
  ``Q_PLUGIN_METADATA`` macro and reruns moc when the file from the
  macro's ``FILE`` argument changes.

* When :prop_tgt:`AUTOMOC` detects an include statement of the form
  ``#include "moc_<basename>.cpp"`` the search for the respective header file
  now looks in the :prop_tgt:`INCLUDE_DIRECTORIES` of the target as well.

* When running tests, CTest learned to treat skipped tests (using the
  :prop_test:`SKIP_RETURN_CODE` property) the same as tests with the new
  :prop_test:`DISABLED` property. Due to this change, CTest will not indicate
  failure when all tests are either skipped or pass.

* The :generator:`Ninja` generator has loosened the dependencies of object
  compilation.  Object compilation now depends only on custom targets
  and custom commands associated with libraries on which the object's target
  depends and no longer depends on the libraries themselves.  Source files
  in dependent targets may now compile without waiting for their targets'
  dependencies to link.

* On macOS, ``RPATH`` settings such as :prop_tgt:`BUILD_WITH_INSTALL_RPATH`
  no longer affect the ``install_name`` field.  See policy :policy:`CMP0068`.

* The :generator:`Visual Studio 14 2015` generator has been taught about
  a change to the ``v140`` toolset made by a VS 2015 update.  VS changed
  the set of values it understands for the ``GenerateDebugInformation``
  linker setting that produces the ``-DEBUG`` linker flag variants.

Updates
=======

Changes made since CMake 3.9.0 include the following.

3.9.1
-----

* The ``find_`` command ``PACKAGE_ROOT`` search path group added by
  CMake 3.9.0 has been removed for the 3.9 series due to regressions
  caused by new use of ``<PackageName>_ROOT`` variables.  The behavior
  may be re-introduced in the future in a more-compatible way.

3.9.2
-----

* On macOS, the default application bundle ``Info.plist`` file no longer
  enables Hi-DPI support as it did in 3.9.0 and 3.9.1.  The change had
  to be reverted because it broke iOS applications.

* The Xcode generator no longer adds "outputPaths" to custom script
  build phases as it did in 3.9.0 and 3.9.1.  This was added in an
  attempt to support Xcode 9's new build system, but broke incremental
  rebuilds for both the old and new Xcode build systems.



/P/🚀 release/3.8.rst
===================================


CMake 3.8 Release Notes
***********************

.. only:: html

  .. contents::

Changes made since CMake 3.7 include the following.

New Features
============

Languages
---------

C#
^^

* CMake learned to support ``CSharp`` (C#) as a first-class language that
  can be enabled via the :command:`project` and :command:`enable_language`
  commands.  It is currently supported by the :ref:`Visual Studio Generators`
  for VS 2010 and above.

  C# assemblies and programs can be added just like common C++ targets using
  the :command:`add_library` and :command:`add_executable` commands.
  References between C# targets in the same source tree may be specified by
  :command:`target_link_libraries` like for C++.  References to system or
  3rd-party assemblies may be specified by the target properties
  :prop_tgt:`VS_DOTNET_REFERENCE_<refname>` and
  :prop_tgt:`VS_DOTNET_REFERENCES`.

* More fine tuning of C# targets may be done using target and source
  file properties.  Specifically the target properties related to
  Visual Studio (``VS_*``) are worth a look (for setting toolset
  versions, root namespaces, assembly icons, ...).

CUDA
^^^^

* CMake learned to support ``CUDA`` as a first-class language that can be
  enabled via the :command:`project` and :command:`enable_language` commands.

* ``CUDA`` is currently supported by the :ref:`Makefile Generators`
  and the :generator:`Ninja` generator on Linux, macOS, and Windows.
  Support for the Visual Studio IDE is under development but not
  included in this release.

* The NVIDIA CUDA Toolkit compiler (``nvcc``) is supported.

C & C++
^^^^^^^

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality
  now offers meta-features that request compiler modes for specific language
  standard levels (e.g. ``cxx_std_11``).  See
  :prop_gbl:`CMAKE_C_KNOWN_FEATURES` and :prop_gbl:`CMAKE_CXX_KNOWN_FEATURES`.

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality
  is now aware of C++ 17.  No specific features are yet enumerated besides
  the ``cxx_std_17`` meta-feature.

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality
  is now aware of the availability of C99 in gcc since version 3.4.

Platforms
---------

* A new minimal platform file for ``Fuchsia`` was added.

Generators
----------

* The :generator:`CodeBlocks` extra generator may now be used to
  generate with :generator:`NMake Makefiles JOM`.

* The :ref:`Visual Studio Generators` for VS 2013 and above learned to
  support a ``host=x64`` option in the :variable:`CMAKE_GENERATOR_TOOLSET`
  value (e.g.  via the :manual:`cmake(1)` ``-T`` option) to request use
  of a VS 64-bit toolchain on 64-bit hosts.

* The :ref:`Visual Studio Generators` learned to treat files passed to
  :command:`target_link_libraries` whose names end in ``.targets``
  as MSBuild "targets" files to be imported into generated project files.

Commands
--------

* The :command:`add_custom_command` and :command:`add_custom_target` commands
  learned the option ``COMMAND_EXPAND_LISTS`` which causes lists in the
  ``COMMAND`` argument to be expanded, including lists created by generator
  expressions.

* The :command:`execute_process` command gained an ``ENCODING`` option to
  specify on Windows which encoding is used for output from child process.

* The :command:`math(EXPR)` command gained support for unary
  ``+`` and ``-`` operators.

* The :command:`source_group` command gained ``TREE`` and ``PREFIX``
  options to add groups following source tree directory structure.

* The :command:`string(TIMESTAMP)` command learned to treat ``%%``
  as a way to encode plain ``%``.

* The :command:`string(TIMESTAMP)` command will now honor the
  ``SOURCE_DATE_EPOCH`` environment variable and use its value
  instead of the current time.

* The :command:`try_compile` command source file signature gained new options
  to specify the language standard to use in the generated test project.

* The :command:`try_compile` command source file signature now honors
  language standard variables like :variable:`CMAKE_CXX_STANDARD`.
  See policy :policy:`CMP0067`.

Variables
---------

* A :variable:`CMAKE_CODELITE_USE_TARGETS` variable was added to tell the
  :generator:`CodeLite` extra generator to change the generated project
  to have target-centric organization.
  The ``build``, ``rebuild``, and ``clean`` operations within ``CodeLite``
  then work on a selected target rather than the whole workspace.
  (Note that the :generator:`Ninja` clean operation on a target
  includes its dependencies, though.)

* The :variable:`CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS` variable was added to
  tell the :generator:`Sublime Text 2` extra generator to place specified
  environment variables in the generated ``.sublime-project``.

* The :variable:`CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE` variable was added
  to tell the :generator:`Sublime Text 2` extra generator whether to exclude
  the build tree from the ``.sublime-project`` when it is inside the source
  tree.

* A :variable:`CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD` variable was
  added to tell :ref:`Visual Studio Generators` for VS 2010 and above
  to include the ``PACKAGE`` target in the default build, similar to
  the existing :variable:`CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD`
  variable for the ``INSTALL`` target.

Properties
----------

* A :prop_tgt:`BUILD_RPATH` target property and corresponding
  :variable:`CMAKE_BUILD_RPATH` variable were added to support custom
  ``RPATH`` locations to be added to binaries in the build tree.

* The :prop_sf:`COMPILE_FLAGS` source file property learned to support
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

* The :prop_tgt:`FRAMEWORK` target property may now also be applied to
  static libraries on Apple targets.  It will result in a proper
  Framework but with a static library inside.

* :ref:`Imported <Imported Targets>` :ref:`Interface Libraries` learned new
  :prop_tgt:`IMPORTED_LIBNAME` and :prop_tgt:`IMPORTED_LIBNAME_<CONFIG>`
  target properties to specify a link library name since interface libraries
  do not build their own library files.

* A :prop_tgt:`<LANG>_CPPLINT` target property and supporting
  :variable:`CMAKE_<LANG>_CPPLINT` variable were introduced to tell
  the :ref:`Makefile Generators` and the :generator:`Ninja` generator to
  run the ``cpplint`` style checker along with the compiler for ``C`` and
  ``CXX`` languages.

* A :prop_tgt:`MANUALLY_ADDED_DEPENDENCIES` target property has been added.
  It provides a read-only list of dependencies that have been added with
  the :command:`add_dependencies` command.

* The :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` target property learned
  to interpret empty list elements as referring to the configuration-less
  imported location specified by :prop_tgt:`IMPORTED_LOCATION`.

* The :prop_tgt:`NO_SYSTEM_FROM_IMPORTED` target property is now supported
  on :ref:`Imported <Imported Targets>` :ref:`Interface Libraries`.

* New source file properties :prop_sf:`SKIP_AUTOMOC`, :prop_sf:`SKIP_AUTOUIC`,
  :prop_sf:`SKIP_AUTORCC`, and :prop_sf:`SKIP_AUTOGEN` were added to allow
  source files to be excluded from processing by :prop_tgt:`AUTOMOC`,
  :prop_tgt:`AUTOUIC`, and :prop_tgt:`AUTORCC` target properties.

* A :prop_sf:`VS_COPY_TO_OUT_DIR` source file property was added to
  tell :ref:`Visual Studio Generators` for VS 2010 and above whether
  or not a file should e copied to the output directory.

* A :prop_tgt:`VS_DEBUGGER_WORKING_DIRECTORY` target property was added
  to tell :ref:`Visual Studio Generators` for VS 2010 and above what
  debugger working directory should be set for the target.

* A :prop_tgt:`VS_DOTNET_REFERENCES_COPY_LOCAL` target property was added
  to specify whether to copy referenced assemblies to the output directory.

* A :prop_tgt:`VS_DOTNET_REFERENCE_<refname>` target property was added
  to tell :ref:`Visual Studio Generators` for VS 2010 and above to add
  a .NET reference with a given hint path.

* A :prop_sf:`VS_INCLUDE_IN_VSIX` source file property was added to
  tell :ref:`Visual Studio Generators` for VS 2010 and above whether
  to include the file in a Visual Studio extension package.

* A :prop_sf:`VS_RESOURCE_GENERATOR` source file property was added to
  give :ref:`Visual Studio Generators` for VS 2010 and above a setting
  for the resource generator (``C#`` only).

* A :prop_tgt:`VS_USER_PROPS` target property was added to tell
  :ref:`Visual Studio Generators` for VS 2010 and above to use a
  custom MSBuild user ``.props`` file.

* A :prop_gbl:`XCODE_EMIT_EFFECTIVE_PLATFORM_NAME` global property was
  added to tell the :generator:`Xcode` generator whether to emit the
  ``EFFECTIVE_PLATFORM_NAME`` variable.  This is useful when building
  with multiple SDKs like ``macosx`` and ``iphoneos`` in parallel.

* New :prop_tgt:`XCODE_PRODUCT_TYPE` and :prop_tgt:`XCODE_EXPLICIT_FILE_TYPE`
  target properties were created to tell the :generator:`Xcode` generator
  to use custom values of the corresponding attributes for a target in the
  generated Xcode project.

Modules
-------

* A :module:`CSharpUtilities` module was added to aid parameterization of
  Visual Studio C# targets.  It provides functions to allow automated
  setting of source file properties to support Windows Forms, WPF/XAML or
  other technologies as needed.

* The :module:`ExternalData` module learned to support multiple
  content links for one data file using different hashes, e.g.
  ``img.png.sha256`` and ``img.png.sha1``.  This allows objects
  to be fetched from sources indexed by different hash algorithms.

* The :module:`ExternalProject` module gained the ``GIT_PROGRESS`` option to
  force Git to show progress when cloning repositories.

* The :module:`ExternalProject` module gained a ``GIT_CONFIG`` option
  to pass ``--config`` options to Git when cloning repositories.

* The :module:`FeatureSummary` module :command:`feature_summary` command now
  accepts a new ``QUIET_ON_EMPTY`` option that suppresses the output when
  the list of packages that belong to the selected category is empty.

* The :module:`FeatureSummary` module :command:`add_feature_info` command
  now accepts lists of dependencies for deciding whether a feature is enabled
  or not.

* The package types accepted by the :module:`FeatureSummary` module can now
  be tweaked by changing the :variable:`FeatureSummary_PKG_TYPES`,
  :variable:`FeatureSummary_REQUIRED_PKG_TYPES` and
  :variable:`FeatureSummary_DEFAULT_PKG_TYPE` global properties.

* The :module:`FindOpenGL` module now provides imported targets
  ``OpenGL::GL`` and ``OpenGL::GLU`` when the libraries are found.

* The :module:`UseSWIG` module gained a ``swig_add_library`` command
  to give more flexibility over the old ``swig_add_module`` command.

* The :module:`UseSWIG` module ``swig_add_source_to_module`` command
  learned a new ``SWIG_OUTFILE_DIR`` option to control the output
  file location (``swig -o``).

* The :module:`WriteCompilerDetectionHeader` module gained the
  ``ALLOW_UNKNOWN_COMPILERS`` and ``ALLOW_UNKNOWN_COMPILER_VERSIONS`` options
  that allow creation of headers that will work also with unknown or old
  compilers by simply assuming they do not support any of the requested
  features.

CTest
-----

* The :command:`ctest_memcheck` command gained a ``DEFECT_COUNT <var>``
  option to capture the number of memory defects detected.

* The :command:`ctest_memcheck` command learned to read the location of
  suppressions files for sanitizers from the
  :variable:`CTEST_MEMORYCHECK_SUPPRESSIONS_FILE` variable.

* The :command:`ctest_memcheck` command learned to support ``LeakSanitizer``
  independently from ``AddressSanitizer``.

* The :command:`ctest_update` command ``CDASH_UPLOAD`` signature was taught
  to honor the ``RETRY_COUNT``, ``RETRY_DELAY``, and ``QUIET`` options.

CPack
-----

* The :module:`CPackIFWConfigureFile` module was added to define a new
  :command:`cpack_ifw_configure_file` command to configure file templates
  prepared in QtIFW/SDK/Creator style.

* The :module:`CPackIFW` module :command:`cpack_ifw_configure_component` and
  :command:`cpack_ifw_configure_component_group` commands gained a new
  ``DEFAULT``, ``VIRTUAL``, ``FORCED_INSTALLATION``, ``REQUIRES_ADMIN_RIGHTS``,
  ``DISPLAY_NAME``, ``UPDATE_TEXT``, ``DESCRIPTION``, ``RELEASE_DATE``,
  ``AUTO_DEPEND_ON`` and ``TRANSLATIONS`` options to more specific
  configuration.

* The :module:`CPackIFW` module :command:`cpack_ifw_configure_component`
  command gained a new ``DEPENDENCIES`` alias for ``DEPENDS`` option.

* The :module:`CPackIFW` module :command:`cpack_ifw_configure_component_group`
  command gained a new ``DEPENDS`` option. The ``DEPENDENCIES`` alias also
  added.

* The :module:`CPackIFW` module :command:`cpack_ifw_configure_component` and
  :command:`cpack_ifw_configure_component_group` commands ``PRIORITY``
  option now is deprecated and will be removed in a future version of CMake.
  Please use new ``SORTING_PRIORITY`` option instead.

* The :cpack_gen:`CPack IFW Generator` gained new
  :variable:`CPACK_IFW_PACKAGE_WATERMARK`,
  :variable:`CPACK_IFW_PACKAGE_BANNER`,
  :variable:`CPACK_IFW_PACKAGE_BACKGROUND`,
  :variable:`CPACK_IFW_PACKAGE_WIZARD_STYLE`,
  :variable:`CPACK_IFW_PACKAGE_WIZARD_DEFAULT_WIDTH`,
  :variable:`CPACK_IFW_PACKAGE_WIZARD_DEFAULT_HEIGHT`, and
  :variable:`CPACK_IFW_PACKAGE_TITLE_COLOR`
  variables to customize a QtIFW installer look.

* The :cpack_gen:`CPack productbuild Generator` gained options to sign packages.
  See the variables :variable:`CPACK_PRODUCTBUILD_IDENTITY_NAME`,
  :variable:`CPACK_PRODUCTBUILD_KEYCHAIN_PATH`,
  :variable:`CPACK_PKGBUILD_IDENTITY_NAME`, and
  :variable:`CPACK_PKGBUILD_KEYCHAIN_PATH`.

* The :cpack_gen:`CPack RPM Generator` learned to omit tags that are not
  supported by provided ``rpmbuild`` tool. If unsupported tags are set they
  are ignored and a developer warning is printed out.

* The :cpack_gen:`CPack RPM Generator` learned to generate main component
  package which forces generation of a rpm for defined component without
  component suffix in filename and package name.
  See :variable:`CPACK_RPM_MAIN_COMPONENT` variable.

* The :cpack_gen:`CPack RPM Generator` learned to generate a single
  ``debuginfo`` package on demand even if components packaging is used.
  See :variable:`CPACK_RPM_DEBUGINFO_SINGLE_PACKAGE` variable.

* The :cpack_gen:`CPack RPM Generator` learned to support
  multiple directives per file when using
  :variable:`CPACK_RPM_USER_FILELIST` variable.

Other
-----

* CMake functionality using cryptographic hashes now supports SHA-3 algorithms.

* A new generator expression ``$<IF:cond,true-value,false-value>`` was added.
  It resolves to the true-value if the condition is ``1`` and resolves to
  the false-value if the condition is ``0``.

Deprecated and Removed Features
===============================

* The :module:`FeatureSummary` module commands :command:`set_package_info`,
  :command:`set_feature_info`, :command:`print_enabled_features`, and
  :command:`print_disabled_features` are now deprecated.

* The :module:`UseSWIG` module ``swig_add_module`` command is now
  deprecated in favor of ``swig_add_library``.

Other Changes
=============

* If a command specified by the :prop_tgt:`<LANG>_CLANG_TIDY` target property
  returns non-zero at build time this is now treated as an error instead of
  silently ignored.

* The :command:`ctest_memcheck` command no longer automatically adds
  ``leak_check=1`` to the options used by ``AddressSanitizer``. The default
  behavior of ``AddressSanitizer`` is to run `LeakSanitizer` to check leaks
  unless ``leak_check=0``.

* The :command:`ctest_memcheck` command was fixed to correctly append extra
  sanitizer options read from the
  :variable:`CTEST_MEMORYCHECK_SANITIZER_OPTIONS` variable to the environment
  variables used internally by the sanitizers.

* The :module:`FeatureSummary` module :command:`set_package_properties`
  command no longer forces the package type to ``OPTIONAL`` when the type
  is not explicitly set.

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality
  is now aware of features supported by Intel C++ compilers versions 12.1
  through 17.0 on UNIX and Windows platforms.

* Calls to the :module:`FindPkgConfig` module :command:`pkg_check_modules`
  command following a successful call learned to re-evaluate the cached values
  for a given prefix after changes to the parameters to the command for that
  prefix.

* When using :prop_tgt:`AUTOMOC` or :prop_tgt:`AUTOUIC`, generated
  ``moc_*``, ``*.moc`` and ``ui_*`` are placed in the
  ``<CMAKE_CURRENT_BINARY_DIR>/<TARGETNAME>_autogen/include`` directory which
  is automatically added to the target's :prop_tgt:`INCLUDE_DIRECTORIES`.
  It is therefore not necessary anymore to have
  :variable:`CMAKE_CURRENT_BINARY_DIR` in the target's
  :prop_tgt:`INCLUDE_DIRECTORIES`.

* The :generator:`Sublime Text 2` generator no longer runs the native
  build command (e.g. ``ninja`` or ``make``) with verbose build output
  enabled.

* The :command:`try_compile` command source file signature now
  honors the :variable:`CMAKE_WARN_DEPRECATED` variable value
  in the generated test project.

* The :ref:`Visual Studio Generators` for VS 2010 and above now place
  per-source file flags after target-wide flags when they are classified
  as raw flags with no project file setting (``AdditionalOptions``).
  This behavior is more consistent with the ordering of flags produced
  by other generators, and allows flags on more-specific properties
  (per-source) to override those on more general ones (per-target).

* The precompiled Windows binary MSI package provided on ``cmake.org`` now
  records the installation directory in the Windows Registry under the key
  ``HKLM\Software\Kitware\CMake`` with a value named ``InstallDir``.



/P/🚀 release/3.7.rst
===================================


CMake 3.7 Release Notes
***********************

.. only:: html

  .. contents::

Changes made since CMake 3.6 include the following.

New Features
============

Platforms
---------

* CMake now supports :ref:`Cross Compiling for Android` with simple
  toolchain files.

* The Clang compiler is now supported on AIX.

Generators
----------

* The :generator:`Ninja` generator learned to conditionally support
  Fortran when using a ``ninja`` tool that has the necessary features.
  See generator documentation for details.

* The :generator:`Ninja` generator learned to produce phony targets
  of the form ``sub/dir/{test,install,package}`` to drive the build
  of a subdirectory installation, test or packaging target.
  This is equivalent to ``cd sub/dir; make {test,install,package}``
  with :ref:`Makefile Generators`.

* The :generator:`Visual Studio 15 2017` generator was added.  This is
  experimental and based on "Visual Studio 2017 RC" because this version
  of VS has not been released.

* :ref:`Visual Studio Generators` for VS 2010 and above learned to
  place ``.natvis`` source files into VS project files properly.

* The :generator:`Xcode` generator's rudimentary Swift language support
  learned to honor a new :variable:`CMAKE_Swift_LANGUAGE_VERSION` variable
  to tell Xcode what version of Swift is used by the source.

* The :generator:`CodeLite` generator gained a new
  :variable:`CMAKE_CODELITE_USE_TARGETS` option
  to change project creation from projects to targets.

Commands
--------

* The :command:`add_custom_command` command gained a new ``DEPFILE``
  option that works with the :generator:`Ninja` generator to provide
  implicit dependency information to the build tool.

* The :command:`cmake_parse_arguments` command gained a new ``PARSE_ARGV``
  mode to read arguments directly from ``ARGC`` and ``ARGV#``
  variables inside a :command:`function` body.

* The :command:`export` command gained an ``ANDROID_MK`` option
  to generate ``Android.mk`` files referencing CMake-built
  libraries as prebuilts for the Android NDK build system.

* The :command:`file(DOWNLOAD)` and :command:`file(UPLOAD)` commands gained
  ``HTTPHEADER <HTTP-header>`` and ``USERPWD <username>:<password>`` options.

* The :command:`find_library` and :command:`find_package` commands learned
  to search in ``lib32/`` directories when the build targets a 32-bit
  architecture.  See the :prop_gbl:`FIND_LIBRARY_USE_LIB32_PATHS` global
  property.

* The :command:`find_package` command gained the possibility of
  sorting compatible libraries by ``NAME`` or by ``NATURAL`` sorting by
  setting the two new variables :variable:`CMAKE_FIND_PACKAGE_SORT_ORDER`
  and :variable:`CMAKE_FIND_PACKAGE_SORT_DIRECTION`.

* The :command:`if` command gained new boolean comparison operations
  ``LESS_EQUAL``, ``GREATER_EQUAL``, ``STRLESS_EQUAL``, ``STRGREATER_EQUAL``,
  ``VERSION_LESS_EQUAL``, and ``VERSION_GREATER_EQUAL``.

* The :command:`install` command gained an ``EXPORT_ANDROID_MK``
  subcommand to install ``Android.mk`` files referencing installed
  libraries as prebuilts for the Android NDK build system.

* The :command:`string(TIMESTAMP)` and :command:`file(TIMESTAMP)`
  commands gained support for the ``%a`` and ``%b`` placeholders.
  These are the abbreviated weekday and month names.

* The :command:`try_compile` command source file signature now honors
  configuration-specific flags (e.g. :variable:`CMAKE_<LANG>_FLAGS_DEBUG`)
  in the generated test project.  Previously only the default such flags
  for the current toolchain were used.  See policy :policy:`CMP0066`.

Variables
---------

* Variable :variable:`CMAKE_FIND_PACKAGE_SORT_ORDER` was added to control
  the sorting mode of the :command:`find_package` command.

* Variable :variable:`CMAKE_FIND_PACKAGE_SORT_DIRECTION` was added to control
  the sorting direction the :command:`find_package` command.

* :variable:`Toolchain files <CMAKE_TOOLCHAIN_FILE>` may now set a
  :variable:`CMAKE_<LANG>_FLAGS_INIT` variable to initialize the
  :variable:`CMAKE_<LANG>_FLAGS` cache entry the first time a language is
  enabled in a build tree.

* :variable:`Toolchain files <CMAKE_TOOLCHAIN_FILE>` may now set
  :variable:`CMAKE_EXE_LINKER_FLAGS_INIT`,
  :variable:`CMAKE_SHARED_LINKER_FLAGS_INIT`, and
  :variable:`CMAKE_MODULE_LINKER_FLAGS_INIT` variables to initialize the
  :variable:`CMAKE_EXE_LINKER_FLAGS`,
  :variable:`CMAKE_SHARED_LINKER_FLAGS`, and
  :variable:`CMAKE_MODULE_LINKER_FLAGS` cache entries the first time
  a language is enabled in a build tree.

Properties
----------

* On Apple platforms the :prop_tgt:`BUNDLE_EXTENSION` target property
  now also applies to Frameworks and App Bundles.

* A :prop_dir:`BINARY_DIR` directory property was added to get the
  absolute path to the binary directory corresponding to the source
  directory on which the property is read.

* A :prop_dir:`BUILDSYSTEM_TARGETS` directory property was added to
  get the list of logical buildsystem target names added by the
  project in a directory.

* A :prop_tgt:`LINK_WHAT_YOU_USE` target property and supporting
  :variable:`CMAKE_LINK_WHAT_YOU_USE` variable were introduced
  to detect (on UNIX) shared libraries that are linked but not
  needed by running ``ldd -r -u``.

* A :prop_dir:`SOURCE_DIR` directory property was added to get the
  absolute path to the source directory associated with a directory.

* A :prop_dir:`SUBDIRECTORIES` directory property was added to
  get the list of subdirectories added by a project in a directory.

* A :prop_tgt:`VS_SDK_REFERENCES` target property was added to tell
  :ref:`Visual Studio Generators` to reference the named SDKs.

* A :prop_sf:`VS_TOOL_OVERRIDE` source file property was created to tell
  :ref:`Visual Studio Generators` what tool to use for a source file.

* The :prop_tgt:`WINDOWS_EXPORT_ALL_SYMBOLS` target property now applies
  to executable targets with the :prop_tgt:`ENABLE_EXPORTS` property set.

* A :prop_sf:`XCODE_FILE_ATTRIBUTES` source file property was
  added to tell the :generator:`Xcode` generator to generate
  custom content in the Xcode project attributes for the file.

Modules
-------

* An :module:`AndroidTestUtilities` module was added to manage transfer
  of test data to an Android device.

* The :module:`CheckFortranSourceCompiles` module macro
  ``CHECK_Fortran_SOURCE_COMPILES`` gained a ``SRC_EXT`` option
  to specify a custom test Fortran source file extension.

* The :module:`ExternalProject` module gained ``HTTP_USERNAME`` and
  ``HTTP_PASSWORD`` options to set http download credentials.

* The :module:`ExternalProject` module gained a ``HTTP_HEADER``
  option to add http download headers.

* The :module:`FindBISON` module ``BISON_TARGET`` macro learned a new
  ``REPORT_FILE`` option to specify the bison ``--report-file=`` option.

* The :module:`FindBZip2` module now provides imported targets.

* A :module:`FindICU` module was introduced to find the International
  Components for Unicode (ICU) libraries and programs.

* The :module:`FindMatlab` module learned to find the SIMULINK and MAT
  components.

* The :module:`FindMatlab` module :command:`matlab_add_mex` command learned
  to add executables and modules.

* The :module:`FindMatlab` module :command:`matlab_add_unit_test` command
  learned to support inline Matlab test code.

* The :module:`FindOpenCL` module now provides imported targets.

* The :module:`FindOpenMP` module learned to detect the OpenMP
  version (specification date) from the compiler.

* A :module:`FindVulkan` module was added.

* The :module:`GenerateExportHeader` module learned a new
  ``CUSTOM_CONTENT_FROM_VARIABLE`` option to specify a variable
  containing custom content for inclusion in the generated header.

* The :module:`GNUInstallDirs` module gained a new
  :command:`GNUInstallDirs_get_absolute_install_dir` command.

* The :module:`UseJava` module gained APIs to "export" jar targets
  for use by external CMake projects.  See the ``install_jar_exports``
  and ``export_jars`` functions.

CTest
-----

* CTest now supports test fixtures through the new :prop_test:`FIXTURES_SETUP`,
  :prop_test:`FIXTURES_CLEANUP` and :prop_test:`FIXTURES_REQUIRED` test
  properties. When using regular expressions or ``--rerun-failed`` to limit
  the tests to be run, a fixture's setup and cleanup tests will automatically
  be added to the execution set if any test requires that fixture.

* The :command:`ctest_configure`, :command:`ctest_build`,
  :command:`ctest_test`, :command:`ctest_coverage`, and :command:`ctest_upload`
  commands gained a new ``CAPTURE_CMAKE_ERROR`` option to capture any errors
  that occur as the commands run into a variable and avoid affecting the return
  code of the :manual:`ctest(1)` process.

CPack
-----

* CPack gained a :cpack_gen:`CPack productbuild Generator` on OS X.

* CPack gained a new :variable:`CPACK_PACKAGE_CHECKSUM` variable to
  enable generation of a checksum file for each package file.

* The :cpack_gen:`CPack DEB Generator` learned to support long file names
  when archive format is set to GNU tar.
  See :variable:`CPACK_DEBIAN_ARCHIVE_TYPE`

* The :module:`CPackIFW` module gained a new
  :command:`cpack_ifw_add_package_resources` command to include additional
  resources in the installer binary.

* The :module:`CPackIFW` module :command:`cpack_ifw_configure_component` and
  :command:`cpack_ifw_configure_component_group` commands gained a new
  ``USER_INTERFACES`` option to add a list of additional pages to the IFW
  installer.

* The :cpack_gen:`CPack RPM Generator` learned to generate debuginfo
  packages on demand. See :variable:`CPACK_RPM_DEBUGINFO_PACKAGE`
  and its per component version.

* The :cpack_gen:`CPack RPM Generator` learned to generate source rpm
  (SRPM) packages on demand. See :variable:`CPACK_RPM_PACKAGE_SOURCES`,
  :variable:`CPACK_RPM_SOURCE_PKG_BUILD_PARAMS` and
  :variable:`CPACK_RPM_SOURCE_PKG_PACKAGING_INSTALL_PREFIX`.

* The :cpack_gen:`CPack NSIS Generator` now supports
  :variable:`CPACK_NSIS_<compName>_INSTALL_DIRECTORY`.
  This can be used to set component specific installation directories.

* The :cpack_gen:`CPack WIX Generator` now supports
  :variable:`CPACK_WIX_SKIP_PROGRAM_FOLDER` to allow specification
  of a custom absolute installation prefix outside
  of the ProgramFiles folders.

* The :cpack_gen:`CPack WIX Generator` now supports
  :variable:`CPACK_COMPONENT_<compName>_DISABLED`.
  This can be used to deselect a component from being installed by default.

* The :cpack_gen:`CPack WIX Generator` now supports
  :variable:`CPACK_WIX_PATCH_FILE` fragments for Feature elements.

* The :cpack_gen:`CPack WIX Generator` now supports
  :variable:`CPACK_WIX_ROOT_FEATURE_TITLE` and
  :variable:`CPACK_WIX_ROOT_FEATURE_DESCRIPTION` to allow the specification
  of a custom title and description for the root feature element.

Other
-----

* :manual:`cmake(1)` gained a ``-E capabilities`` option to provide a
  machine-readable (JSON) description of the capabilities of the
  cmake tool (available generators, etc.).

* A new :manual:`cmake-server(7)` mode was added to provide semantic
  information about a CMake-generated buildsystem to clients through
  a JSON protocol.  Currently all protocols are experimental and subject
  to change.

* The :manual:`cmake(1)` command learned a ``--trace-source=<file>`` option.

* :manual:`ccmake(1)` learned to support vim-like navigation bindings.

* :manual:`cmake-gui(1)` gained a button to open the generated project file
  for :ref:`Visual Studio Generators` and the :generator:`Xcode` generator.

Deprecated and Removed Features
===============================

* We no longer provide Linux i386 binaries for download from ``cmake.org``
  for new versions of CMake.

* Vim support files ``cmake-indent.vim``, ``cmake-syntax.vim``, and
  ``cmake-help.vim`` have been removed in favor of the files now provided
  from the `vim-cmake-syntax`_ project.

* Support for building CMake itself with some compilers was dropped:

  * Visual Studio 7.1 and 2005 -- superseded by VS 2008 and above
  * MinGW.org mingw32 -- superseded by MSYS2 mingw32 and mingw64

  CMake still supports generating build systems for other projects using
  these compilers.

Other Changes
=============

* The Fortran dependency scanner learned to support the syntax of
  `Fortran Submodules`_.

* Vim support files ``indent/cmake.vim`` and ``syntax/cmake.vim``
  from the `vim-cmake-syntax`_ project are now distributed with CMake.

.. _`Fortran Submodules`: https://fortranwiki.org/fortran/show/Submodules
.. _`vim-cmake-syntax`: https://github.com/pboettch/vim-cmake-syntax



/P/🚀 release/3.6.rst
===================================


CMake 3.6 Release Notes
***********************

.. only:: html

  .. contents::

Changes made since CMake 3.5 include the following.

New Features
============

Generators
----------

* The :generator:`Ninja` generator learned to produce phony targets
  of the form ``sub/dir/all`` to drive the build of a subdirectory.
  This is equivalent to ``cd sub/dir; make all`` with
  :ref:`Makefile Generators`.

* The :generator:`Ninja` generator now includes system header files in build
  dependencies to ensure correct re-builds when system packages are updated.

* The :generator:`Visual Studio 14 2015` generator learned to support the
  Clang/C2 toolsets, e.g. with the ``-T v140_clang_3_7`` option.
  This feature is experimental.

Commands
--------

* The :command:`add_custom_command` and :command:`add_custom_target` commands
  learned how to use the :prop_tgt:`CROSSCOMPILING_EMULATOR` executable
  target property.

* The :command:`install` command learned a new ``EXCLUDE_FROM_ALL`` option
  to leave installation rules out of the default installation.

* The :command:`list` command gained a ``FILTER`` sub-command to filter
  list elements by regular expression.

* The :command:`string(TIMESTAMP)` and :command:`file(TIMESTAMP)`
  commands gained support for the ``%s`` placeholder.  This is
  the number of seconds since the UNIX Epoch.

Variables
---------

* A :variable:`CMAKE_DEPENDS_IN_PROJECT_ONLY` variable was introduced
  to tell :ref:`Makefile Generators` to limit dependency scanning only
  to files in the project source and build trees.

* A new :variable:`CMAKE_HOST_SOLARIS` variable was introduced to
  indicate when CMake is running on an Oracle Solaris host.

* A :variable:`CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES` variable was
  added for use by toolchain files to specify system include directories
  to be appended to all compiler command lines.

* The :variable:`CMAKE_<LANG>_STANDARD_LIBRARIES` variable is now documented.
  It is intended for use by toolchain files to specify system libraries to be
  added to all linker command lines.

* A :variable:`CMAKE_NINJA_OUTPUT_PATH_PREFIX` variable was introduced
  to tell the :generator:`Ninja` generator to configure the generated
  ``build.ninja`` file for use as a ``subninja``.

* A :variable:`CMAKE_TRY_COMPILE_PLATFORM_VARIABLES` variable was
  added for use by toolchain files to specify platform-specific
  variables that must be propagated by the :command:`try_compile`
  command into test projects.

* A :variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` variable was added
  to optionally tell the :command:`try_compile` command to build
  a static library instead of an executable.  This is useful for
  cross-compiling toolchains that cannot link binaries without
  custom flags or scripts.

Properties
----------

* A :prop_tgt:`DEPLOYMENT_REMOTE_DIRECTORY` target property was introduced
  to tell the :generator:`Visual Studio 9 2008` and
  :generator:`Visual Studio 8 2005` generators to generate the "remote
  directory" for WinCE project deployment and debugger settings.

* A :prop_tgt:`<LANG>_CLANG_TIDY` target property and supporting
  :variable:`CMAKE_<LANG>_CLANG_TIDY` variable were introduced to tell the
  :ref:`Makefile Generators` and the :generator:`Ninja` generator to run
  ``clang-tidy`` along with the compiler for ``C`` and ``CXX`` languages.

* A :prop_test:`TIMEOUT_AFTER_MATCH` test property was introduced to
  optionally tell CTest to enforce a secondary timeout after matching
  certain output from a test.

* A :prop_tgt:`VS_CONFIGURATION_TYPE` target property was introduced
  to specify a custom project file type for :ref:`Visual Studio Generators`
  supporting VS 2010 and above.

* A :prop_dir:`VS_STARTUP_PROJECT` directory property was introduced
  to specify for :ref:`Visual Studio Generators` the default startup
  project for generated solutions (``.sln`` files).

Modules
-------

* The :module:`CMakePushCheckState` module now pushes/pops/resets the variable
  ``CMAKE_EXTRA_INCLUDE_FILES`` used in :module:`CheckTypeSize`.

* The :module:`ExternalProject` module leared the ``GIT_SHALLOW 1``
  option to perform a shallow clone of a Git repository.

* The :module:`ExternalProject` module learned to initialize Git submodules
  recursively and also to initialize new submodules on updates.  Use the
  ``GIT_SUBMODULES`` option to restrict which submodules are initialized and
  updated.

* The :module:`ExternalProject` module leared the ``DOWNLOAD_NO_EXTRACT 1``
  argument to skip extracting the file that is downloaded (e.g., for
  self-extracting shell installers or ``.msi`` files).

* The :module:`ExternalProject` module now uses ``TLS_VERIFY`` when fetching
  from git repositories.

* The :module:`FindBLAS` and :module:`FindLAPACK` modules learned to
  support `OpenBLAS <https://www.openblas.net>`__.

* The :module:`FindCUDA` module learned to find the ``cublas_device`` library.

* The :module:`FindGTest` module ``gtest_add_tests`` function now causes
  CMake to automatically re-run when test sources change so that they
  can be re-scanned.

* The :module:`FindLTTngUST` module was introduced to find the LTTng-UST
  library.

* The :module:`FindPkgConfig` module learned to optionally create imported
  targets for the libraries it has found.

* The :module:`FindProtobuf` module learned to provide a ``Protobuf_VERSION``
  variable and check the version number requested in a :command:`find_package`
  call.

* The :module:`InstallRequiredSystemLibraries` module learned a new
  ``CMAKE_INSTALL_UCRT_LIBRARIES`` option to enable app-local deployment
  of the Windows Universal CRT libraries with Visual Studio 2015.

Platforms
---------

* The Clang compiler is now supported on CYGWIN.

* Support was added for the Bruce C Compiler with compiler id ``Bruce``.

CTest
-----

* The :command:`ctest_update` command now looks at the
  :variable:`CTEST_GIT_INIT_SUBMODULES` variable to determine whether
  submodules should be updated or not before updating.

* The :command:`ctest_update` command will now synchronize submodules on an
  update. Updates which add submodules or change a submodule's URL will now be
  pulled properly.

CPack
-----

* The :cpack_gen:`CPack DEB Generator` learned how to handle ``$ORIGIN``
  in ``CMAKE_INSTALL_RPATH`` when :variable:`CPACK_DEBIAN_PACKAGE_SHLIBDEPS`
  is used for dependency auto detection.

* The :cpack_gen:`CPack DEB Generator` learned how to generate
  ``DEBIAN/shlibs`` control file when package contains shared libraries.

* The :cpack_gen:`CPack DEB Generator` learned how to generate
  ``DEBIAN/postinst`` and ``DEBIAN/postrm`` files if the package installs
  libraries in ldconfig-controlled locations (e.g. ``/lib/``, ``/usr/lib/``).

* The :cpack_gen:`CPack DEB Generator` learned how to generate dependencies
  between Debian packages if multi-component setup is used and
  :variable:`CPACK_COMPONENT_<compName>_DEPENDS` variables are set.
  For backward compatibility this feature is disabled by default.
  See :variable:`CPACK_DEBIAN_ENABLE_COMPONENT_DEPENDS`.

* The :cpack_gen:`CPack DEB Generator` learned how to set custom package
  file names including how to generate properly-named Debian packages::

    <PackageName>_<VersionNumber>-<DebianRevisionNumber>_<DebianArchitecture>.deb

  For backward compatibility this feature is disabled by default. See
  :variable:`CPACK_DEBIAN_FILE_NAME` and
  :variable:`CPACK_DEBIAN_<COMPONENT>_FILE_NAME`.

* The :cpack_gen:`CPack DEB Generator` learned how to set the package
  release number (``DebianRevisionNumber`` in package file name when
  used in combination with ``DEB-DEFAULT`` value set by
  :variable:`CPACK_DEBIAN_FILE_NAME`).
  See :variable:`CPACK_DEBIAN_PACKAGE_RELEASE`.

* The :cpack_gen:`CPack DEB Generator` learned how to set the package
  architecture per-component.
  See :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_ARCHITECTURE`.

* The :cpack_gen:`CPack DragNDrop Generator` learned a new option to skip the
  ``/Applications`` symlink.
  See the :variable:`CPACK_DMG_DISABLE_APPLICATIONS_SYMLINK` variable.

* The :module:`CPackIFW` module gained a new
  :command:`cpack_ifw_update_repository` command to update a QtIFW-specific
  repository from a remote repository.

* The :cpack_gen:`CPack RPM Generator` learned how to set RPM ``dist`` tag
  as part of RPM ``Release:`` tag when enabled (mandatory on some Linux
  distributions for e.g. on Fedora).
  See :variable:`CPACK_RPM_PACKAGE_RELEASE_DIST`.

* The :cpack_gen:`CPack RPM Generator` learned how to set default values
  for owning user/group and file/directory permissions of package content.
  See :variable:`CPACK_RPM_DEFAULT_USER`, :variable:`CPACK_RPM_DEFAULT_GROUP`,
  :variable:`CPACK_RPM_DEFAULT_FILE_PERMISSIONS`,
  :variable:`CPACK_RPM_DEFAULT_DIR_PERMISSIONS` and their per component
  counterparts.

* The :cpack_gen:`CPack RPM Generator` learned how to set user defined
  package file names, how to specify that rpmbuild should decide on file
  name format as well as handling of multiple rpm packages generated by a
  single user defined spec file.
  See :variable:`CPACK_RPM_PACKAGE_NAME` and
  :variable:`CPACK_RPM_<component>_PACKAGE_NAME`.

* The :cpack_gen:`CPack RPM Generator` learned how to correctly handle symlinks
  that are pointing outside generated packages.

Other
-----

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality
  is now aware of features supported by Intel C++ compilers versions 12.1
  through 16.0 on UNIX platforms.

Deprecated and Removed Features
===============================

* The :module:`CMakeForceCompiler` module and its macros are now deprecated.
  See module documentation for an explanation.

* The :command:`find_library`, :command:`find_path`, and :command:`find_file`
  commands no longer search in installation prefixes derived from the ``PATH``
  environment variable on non-Windows platforms.  This behavior was added in
  CMake 3.3 to support Windows hosts but has proven problematic on UNIX hosts.
  Users that keep some ``<prefix>/bin`` directories in the ``PATH`` just for
  their tools do not necessarily want any supporting ``<prefix>/lib``
  directories searched.  One may set the ``CMAKE_PREFIX_PATH`` environment
  variable with a :ref:`semicolon-separated list <CMake Language Lists>` of prefixes that are
  to be searched.

* The :generator:`Visual Studio 7 .NET 2003` generator is now
  deprecated and will be removed in a future version of CMake.

* The :generator:`Visual Studio 7` generator (for VS .NET 2002) has been
  removed.  It had been deprecated since CMake 3.3.

* The :generator:`Visual Studio 6` generator has been removed.
  It had been deprecated since CMake 3.3.

Other Changes
=============

* The precompiled OS X binary provided on ``cmake.org`` now requires
  OS X 10.7 or newer.

* On Linux and FreeBSD platforms, when building CMake itself from source and
  not using a system-provided libcurl, OpenSSL is now used by default if it is
  found on the system.  This enables SSL/TLS support for commands supporting
  network communication via ``https``, such as :command:`file(DOWNLOAD)`,
  :command:`file(UPLOAD)`, and :command:`ctest_submit`.

* The :manual:`cmake(1)` ``--build`` command-line tool now rejects multiple
  ``--target`` options with an error instead of silently ignoring all but the
  last one.

* :prop_tgt:`AUTOMOC` now diagnoses name collisions when multiple source
  files in different directories use ``#include <moc_foo.cpp>`` with the
  same name (because the generated ``moc_foo.cpp`` files would collide).

* The :module:`FindBISON` module ``BISON_TARGET`` macro now supports
  special characters by passing the ``VERBATIM`` option to internal
  :command:`add_custom_command` calls.  This may break clients that
  added escaping manually to work around the bug.

* The :module:`FindFLEX` module ``FLEX_TARGET`` macro now supports
  special characters by passing the ``VERBATIM`` option to internal
  :command:`add_custom_command` calls.  This may break clients that
  added escaping manually to work around the bug.

* The :module:`FindProtobuf` module input and output variables were all renamed
  from ``PROTOBUF_`` to ``Protobuf_`` for consistency with other find modules.
  Input variables of the old case will be honored if provided, and output
  variables of the old case are always provided.

* The :cpack_gen:`CPack RPM Generator` now supports upper cased component
  names in per component CPackRPM specific variables.
  E.g. component named ``foo`` now expects component specific
  variable to be ``CPACK_RPM_FOO_PACKAGE_NAME`` while before
  it expected ``CPACK_RPM_foo_PACKAGE_NAME``.
  Upper cased component name part in variables is compatible
  with convention used for other CPack variables.
  For back compatibility old format of variables is still valid
  and preferred if both versions of variable are set, but the
  preferred future use is upper cased component names in variables.
  New variables that will be added to CPackRPM in later versions
  will only support upper cased component variable format.

* The CPack NSIS generator's configuration file template was fixed to
  quote the path to the uninstaller tool used by the
  :variable:`CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL` option.
  This avoids depending on an insecure Windows feature to run an
  uninstaller tool with a space in the path.



/P/🚀 release/3.5.rst
===================================


CMake 3.5 Release Notes
***********************

.. only:: html

  .. contents::

Changes made since CMake 3.4 include the following.

New Features
============

GUI
---

* The :manual:`cmake-gui(1)` gained options to control warnings about
  deprecated functionality.

* The :manual:`cmake-gui(1)` learned an option to set the toolset
  to be used with VS IDE and Xcode generators, much like the
  existing ``-T`` option to :manual:`cmake(1)`.

* The :manual:`cmake-gui(1)` gained a Regular Expression Explorer which
  may be used to create and evaluate regular expressions in real-time.
  The explorer window is available via the ``Tools`` menu.

Command-Line
------------

* The ``-Wdev`` and ``-Wno-dev`` :manual:`cmake(1)` options now also enable
  and suppress the deprecated warnings output by default.

* The suppression of developer warnings as errors can now be controlled with
  the new ``-Werror=dev`` and ``-Wno-error=dev`` :manual:`cmake(1)` options.

* The :manual:`cmake(1)` ``-E`` command-line tools ``copy``,
  ``copy_if_different``, ``copy_directory``, and ``make_directory``
  learned to support multiple input files or directories.

Commands
--------

* The :command:`cmake_parse_arguments` command is now implemented natively.
  The :module:`CMakeParseArguments` module remains as an empty placeholder
  for compatibility.

* The :command:`install(DIRECTORY)` command learned to support
  :manual:`generator expressions <cmake-generator-expressions(7)>`
  in the list of directories.

Variables
---------

* The :variable:`CMAKE_ERROR_DEPRECATED` variable can now be set using the
  ``-Werror=deprecated`` and ``-Wno-error=deprecated`` :manual:`cmake(1)`
  options.

* The :variable:`CMAKE_WARN_DEPRECATED` variable can now be set using the
  ``-Wdeprecated`` and ``-Wno-deprecated`` :manual:`cmake(1)` options.

Properties
----------

* The :prop_tgt:`VS_GLOBAL_<variable>` target property is now implemented
  for VS 2010 and above.  Previously it worked only in VS 2008 and below.

Modules
-------

* The :module:`ExternalProject` module learned a new ``GIT_REMOTE_NAME``
  option to control the ``git clone --origin`` value.

* The :module:`FindBoost` module now provides imported targets
  such as ``Boost::boost`` and ``Boost::filesystem``.

* The :module:`FindFLEX` module ``FLEX_TARGET`` macro learned a
  new ``DEFINES_FILE`` option to specify a custom output header
  to be generated.

* The :module:`FindGTest` module now provides imported targets.

* The :module:`FindGTK2` module, when ``GTK2_USE_IMPORTED_TARGETS`` is
  enabled, now sets ``GTK2_LIBRARIES`` to contain the list of imported
  targets instead of the paths to the libraries.  Moreover it now sets
  a new ``GTK2_TARGETS`` variable containing all the targets imported.

* The :module:`FindOpenMP` module learned to support Clang.

* The :module:`FindOpenSSL` module gained a new
  ``OPENSSL_MSVC_STATIC_RT`` option to search for libraries using
  the MSVC static runtime.

* The :module:`FindPNG` module now provides imported targets.

* The :module:`FindTIFF` module now provides imported targets.

* A :module:`FindXalanC` module was introduced to find the
  Apache Xalan-C++ XSL transform processing library.

* The :module:`FindXercesC` module now provides imported targets.

Platforms
---------

* Support was added for the ARM Compiler (arm.com) with compiler id ``ARMCC``.

* A new platform file for cross-compiling in the Cray Linux Environment to
  target compute nodes was added.  See
  :ref:`Cross Compiling for the Cray Linux Environment <Cray Cross-Compile>`
  for usage details.

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality
  is now aware of features supported by Clang compilers on Windows (MinGW).

* When building for embedded Apple platforms like iOS CMake learned to build and
  install combined targets which contain both a device and a simulator build.
  This behavior can be enabled by setting the :prop_tgt:`IOS_INSTALL_COMBINED`
  target property.

CPack
-----

* The :cpack_gen:`CPack DragNDrop Generator` learned new variable to
  specify AppleScript file run to customize appearance of ``DragNDrop``
  installer folder, including background image setting using supplied
  PNG or multi-resolution TIFF file.
  See the :variable:`CPACK_DMG_DS_STORE_SETUP_SCRIPT` and
  :variable:`CPACK_DMG_BACKGROUND_IMAGE` variables.

* The :cpack_gen:`CPack DEB Generator` learned to set the optional config
  file ``Source`` field using a monolithic or per-component variable.
  See :variable:`CPACK_DEBIAN_PACKAGE_SOURCE`.

* The :cpack_gen:`CPack DEB Generator` learned to set Package, Section
  and Priority control fields per-component.
  See variables :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_SECTION` and
  :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_PRIORITY`.

* The :cpack_gen:`CPack DragNDrop Generator` learned to add
  multi-lingual SLAs to a DMG which is presented to the user when they try to
  mount the DMG.  See the :variable:`CPACK_DMG_SLA_LANGUAGES` and
  :variable:`CPACK_DMG_SLA_DIR` variables for details.

* The :cpack_gen:`CPack NSIS Generator` learned new variables to
  add bitmaps to the installer.
  See the :variable:`CPACK_NSIS_MUI_WELCOMEFINISHPAGE_BITMAP`
  and :variable:`CPACK_NSIS_MUI_UNWELCOMEFINISHPAGE_BITMAP` variables.

* The :cpack_gen:`CPack RPM Generator` learned to set Name and Group
  control fields per-component.
  See :variable:`CPACK_RPM_<component>_PACKAGE_NAME`
  and :variable:`CPACK_RPM_<component>_PACKAGE_GROUP`.

Other
-----

* Warnings about deprecated functionality are now enabled by default.
  They may be suppressed with ``-Wno-deprecated`` or by setting the
  :variable:`CMAKE_WARN_DEPRECATED` variable to false.

Deprecated and Removed Features
===============================

* The :manual:`cmake(1)` ``-E time`` command now properly passes arguments
  with spaces or special characters through to the child process.  This
  may break scripts that worked around the bug with their own extra
  quoting or escaping.

* The :generator:`Xcode` generator was fixed to escape backslashes in
  strings consistently with other generators.  Projects that previously
  worked around the inconsistecy with an extra level of backslashes
  conditioned on the Xcode generator must be updated to remove the
  workaround for CMake 3.5 and greater.

Other Changes
=============

* The :generator:`Visual Studio 14 2015` generator learned to map the
  ``/debug:fastlink`` linker flag to the ``.vcxproj`` file property.

* The :module:`FindGTK2` module now configures the ``GTK2::sigc++`` imported
  target to enable c++11 on its dependents when using sigc++ 2.5.1 or higher.

* The precompiled Windows binary provided on ``cmake.org`` is now a
  ``.msi`` package instead of an installer executable.  One may need
  to manually uninstall CMake versions lower than 3.5 before installing
  the new package.



/P/🚀 release/3.4.rst
===================================


CMake 3.4 Release Notes
***********************

.. only:: html

  .. contents::

Changes made since CMake 3.3 include the following.

New Features
============

Generators
----------

* The :generator:`Visual Studio 14 2015` generator learned to select
  a Windows 10 SDK based on the value of the :variable:`CMAKE_SYSTEM_VERSION`
  variable and the SDKs available on the host.

* CMake learned rudimentary support for the Apple Swift language.  When using
  the :generator:`Xcode` generator with Xcode 6.1 or higher, one may enable
  the ``Swift`` language with the :command:`enable_language` command or the
  :command:`project` command (this is an error with other generators or when
  Xcode is too old).  Then one may list ``.swift`` source files in targets
  for compilation.

Commands
--------

* The :command:`find_program` command learned a ``NAMES_PER_DIR``
  option to consider all given ``NAMES`` in each directory before
  moving on to the next directory.

* The :command:`get_filename_component` command learned a new ``BASE_DIR``
  subcommand.  This is used to specify a base directory when calculating an
  absolute path from a relative path.

* The :command:`if` command learned a new ``TEST`` operator that evaluates
  to true if a given test name has been defined by the :command:`add_test`
  command.  See policy :policy:`CMP0064`.

* The :command:`install(DIRECTORY)` command ``DESTINATION`` option learned to
  support :manual:`generator expressions <cmake-generator-expressions(7)>`.

* The :command:`install(FILES)` command ``DESTINATION`` option learned to
  support :manual:`generator expressions <cmake-generator-expressions(7)>`.

* The :command:`string` command learned a new ``APPEND`` subcommand.

Variables
---------

* The :ref:`Makefile Generators` and the :generator:`Ninja` generator
  learned to add compiler launcher tools like distcc and ccache along
  with the compiler for ``C`` and ``CXX`` languages.  See the
  :variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` variable and
  :prop_tgt:`<LANG>_COMPILER_LAUNCHER` target property for details.

* New :variable:`CMAKE_LINK_SEARCH_START_STATIC` and
  :variable:`CMAKE_LINK_SEARCH_END_STATIC` variables were
  introduced to initialize the
  :prop_tgt:`LINK_SEARCH_START_STATIC` and
  :prop_tgt:`LINK_SEARCH_END_STATIC` target properties,
  respectively.

Properties
----------

* :ref:`Visual Studio Generators` learned to support additional
  target properties to customize projects for NVIDIA Nsight
  Tegra Visual Studio Edition:

  * :prop_tgt:`ANDROID_ANT_ADDITIONAL_OPTIONS`
  * :prop_tgt:`ANDROID_ARCH`
  * :prop_tgt:`ANDROID_ASSETS_DIRECTORIES`
  * :prop_tgt:`ANDROID_JAR_DEPENDENCIES`
  * :prop_tgt:`ANDROID_JAR_DIRECTORIES`
  * :prop_tgt:`ANDROID_JAVA_SOURCE_DIR`
  * :prop_tgt:`ANDROID_NATIVE_LIB_DEPENDENCIES`
  * :prop_tgt:`ANDROID_NATIVE_LIB_DIRECTORIES`
  * :prop_tgt:`ANDROID_PROCESS_MAX`
  * :prop_tgt:`ANDROID_PROGUARD`
  * :prop_tgt:`ANDROID_PROGUARD_CONFIG_PATH`
  * :prop_tgt:`ANDROID_SECURE_PROPS_PATH`
  * :prop_tgt:`ANDROID_SKIP_ANT_STEP`
  * :prop_tgt:`ANDROID_STL_TYPE`

* The :prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY`,
  :prop_tgt:`LIBRARY_OUTPUT_DIRECTORY`, and
  :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` target properties learned to
  support :manual:`generator expressions <cmake-generator-expressions(7)>`.

* The :prop_tgt:`SOURCE_DIR` and :prop_tgt:`BINARY_DIR` target properties
  were introduced to allow project code to query where a target is defined.

* The :prop_tgt:`OUTPUT_NAME` target property and its variants learned to
  support :manual:`generator expressions <cmake-generator-expressions(7)>`.

* A :prop_gbl:`TARGET_MESSAGES` global property was added to tell the
  :ref:`Makefile Generators` whether to generate commands to print output
  after each target is completed.

* On Windows with MS-compatible tools, CMake learned to optionally
  generate a module definition (``.def``) file for ``SHARED`` libraries.
  See the :prop_tgt:`WINDOWS_EXPORT_ALL_SYMBOLS` target property.

Modules
-------

* The :module:`ExternalProject` module :command:`ExternalProject_Add`
  function ``GIT_SUBMODULES`` option now also limits the set of
  submodules that are initialized in addition to the prior behavior
  of limiting the set of submodules that are updated.

* The :module:`ExternalProject` module learned new ``USES_TERMINAL``
  arguments for giving steps exclusive terminal access.  This is
  useful with the :generator:`Ninja` generator to monitor CMake
  superbuild progress and prevent CPU oversubscription.

* The :module:`FindBISON` module ``BISON_TARGET`` macro learned a
  new ``DEFINES_FILE`` option to specify a custom output header
  to be generated.

* The :module:`FindHDF5` module learend a new ``HDF5_PREFER_PARALLEL``
  option allowing users to specify that a parallel HDF5 tool is
  preferred if both are available.

* The :module:`FindIce` module now provides imported targets.

* The :module:`FindJava` module learned to optionally find
  the ``idlj`` and ``jarsigner`` tools.

* The :module:`FindOpenSSL` module now provides imported targets.

* The :module:`FindOpenSSL` module learned a new ``OPENSSL_USE_STATIC_LIBS``
  option to search only for static libraries.

* The :module:`FindPkgConfig` learned a new :command:`pkg_get_variable`
  command which may be used to query for arbitrary variables from a package
  (such as for related tools or data and plugin install paths).

* The :module:`FindProtobuf` module gained a new
  :command:`protobuf_generate_python` function to generate python
  sources from ``.proto`` files.

* The :module:`FindTIFF` module learned to search separately for
  debug and release variants.

* The :module:`FindwxWidgets` module learned to support version requests.

* The :module:`FindXercesC` module learned to search separately for
  debug and release variants.

* The :module:`FindZLIB` module learned to search separately for
  debug and release variants.

* The :module:`GNUInstallDirs` module learned special default values
  for certain installation prefixes according to the `GNU Coding
  Standards`_ and the `Filesystem Hierarchy Standard`_.

* The :module:`UseJava` module ``add_jar`` function learned
  to support response files (e.g. ``@srcs.txt``) for source
  specification.

* The :module:`UseJava` module ``install_jar`` function learned
  new ``DESTINATION`` and ``COMPONENT`` options to specify
  the corresponding :command:`install` command options.

* The :module:`UseJava` module gained a new ``create_javah``
  function to create C headers from Java classes.

.. _`GNU Coding Standards`: https://www.gnu.org/prep/standards/html_node/Directory-Variables.html
.. _`Filesystem Hierarchy Standard`: https://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html

Generator Expressions
---------------------

* A new ``$<SHELL_PATH:...>``
  :manual:`generator expression <cmake-generator-expressions(7)>`
  has been added.

CTest
-----

* CTest learned to optionally measure the CPU load during parallel
  testing and avoid starting tests that may cause the load to exceed
  a given threshold.  See the :manual:`ctest(1)` command ``--test-load``
  option, the ``TestLoad`` setting of the :ref:`CTest Test Step`,
  the :variable:`CTEST_TEST_LOAD` variable, and the ``TEST_LOAD``
  option of the :command:`ctest_test` command.

* :manual:`ctest(1)` learned options
  ``--test-output-size-passed`` and ``--test-output-size-failed``
  to customize the limit on test output size submitted when
  running as a :ref:`Dashboard Client`.

CPack
-----

* The :cpack_gen:`CPack DEB Generator` learned to set package dependencies
  per component.  See variables:

  * :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_BREAKS`
  * :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_CONFLICTS`
  * :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_ENHANCES`
  * :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_PREDEPENDS`
  * :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_PROVIDES`
  * :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_RECOMMENDS`
  * :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_REPLACES`
  * :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_SUGGESTS`

* The :module:`CPack` module learned to package empty directories.

* The :module:`CPack` module gained a new setting, ``CPACK_VERBATIM_VARIABLES``,
  which can be used to ensure the cpack program receives the settings' values
  exactly as they were set, even if they contain CMake-special characters.
  For compatibility, it's off by default.

Other
-----

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality
  is now aware of features supported by GNU C compilers on Windows.

* CMake learned to honor ``*.manifest`` source files with MSVC tools.
  Manifest files named as sources of ``.exe`` and ``.dll`` targets
  will be merged with linker-generated manifests and embedded in the
  binary.

* The Concurrent Fortran 77 compiler is now supported.
  Its :variable:`compiler id <CMAKE_<LANG>_COMPILER_ID>` is ``CCur``.

* :manual:`cmake(1)` gained a new ``--trace-expand`` command line option
  that is like ``--trace`` but expands variable references in the output.

Deprecated and Removed Features
===============================

* The :module:`CMakeExpandImportedTargets` module is now documented
  as deprecated.  See module documentation for an explanation.

* The :variable:`CMAKE_USE_RELATIVE_PATHS` variable no longer has any
  effect.  Previously it was partially implemented and unreliable.

Other Changes
=============

* The :module:`CheckFunctionExists`, :module:`CheckLibraryExists`,
  :module:`CheckSymbolExists`, and :module:`FindThreads` modules learned to
  work in environments where only CXX is enabled.

* The :cpack_gen:`CPack DEB Generator` now correctly excludes symlinks
  during package checksum calculation.

* The :cpack_gen:`CPack DEB Generator` no longer uses fakeroot and
  system tar program for packaging.

* The :module:`CPack` module no longer mangles settings with CMake-special
  characters when they're used as defaults for other settings. The macro
  ``cpack_set_if_not_set``, which was responsible for this, is now deprecated.

* CMake no longer links executables with flags to export symbols
  unless the :prop_tgt:`ENABLE_EXPORTS` target property is set.
  See policy :policy:`CMP0065`.

* The ``SONAME`` field is no longer set for ``MODULE`` libraries
  created with the :command:`add_library` command.  ``MODULE``
  libraries are meant for explicit dynamic loading at runtime.
  They cannot be linked so ``SONAME`` is not useful.

* The internal :variable:`CMAKE_<LANG>_COMPILE_OBJECT` rule variable now
  substitutes compiler include flags in a separate ``<INCLUDES>`` placeholder
  instead of the main ``<FLAGS>`` placeholder.



/P/🚀 release/3.3.rst
===================================


CMake 3.3 Release Notes
***********************

.. only:: html

  .. contents::

Changes made since CMake 3.2 include the following.

New Features
============

Generators
----------

* The :ref:`Makefile Generators` now add ``.DELETE_ON_ERROR`` to the
  makefiles that contain the actual build rules for files on disk.
  This tells GNU make to remove rule outputs when their recipe
  modifies an output but fails.

* The :ref:`Visual Studio Generators` learned to support ``.xaml``
  source files and automatically associate them with corresponding
  ``.h`` and ``.cpp`` sources.

* A new experimental :generator:`Green Hills MULTI` generator was
  added on Windows.  `Green Hills MULTI`_ is an IDE for embedded
  real-time systems.

.. _`Green Hills MULTI`: https://www.ghs.com/products/MULTI_IDE.html

Commands
--------

* The :command:`add_dependencies` command learned to allow dependencies
  to be added to :ref:`interface libraries <Interface Libraries>`.
  Dependencies added to an interface library are followed transitively
  in its place since the target itself does not build.

* The :command:`execute_process` command learned to support specifying
  the same file for ``OUTPUT_FILE`` and ``ERROR_FILE``.

* The :command:`file(GLOB)` and :command:`file(GLOB_RECURSE)` commands
  learned a new ``LIST_DIRECTORIES <bool>`` option to specify whether
  the glob result should include directories.

* The :command:`find_library`, :command:`find_path`, and :command:`find_file`
  commands now search in installation prefixes derived from the ``PATH``
  environment variable.

* The :command:`if` command learned a new ``IN_LIST`` operator that
  evaluates to true if a given element is contained in a named list.

* The :command:`install(EXPORT)` and :command:`export()` commands
  learned to export targets that populate the :prop_tgt:`INTERFACE_SOURCES`
  target property.

* The :command:`install(TARGETS)` command learned to support
  generator expressions in the ``DESTINATION`` value.

Variables
---------

* The version of some Fortran compilers is now detected and stored in the
  :variable:`CMAKE_Fortran_COMPILER_VERSION <CMAKE_<LANG>_COMPILER_VERSION>`
  variable.

* The :ref:`Visual Studio Generators` learned a new
  :variable:`CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD` option
  to put the ``INSTALL`` target in the default build of a
  solution (``.sln``) file.

Properties
----------

* A :prop_tgt:`CROSSCOMPILING_EMULATOR` target property and supporting
  :variable:`CMAKE_CROSSCOMPILING_EMULATOR` variable were introduced
  to allow target platform binaries to run on the host during cross
  compiling.

* A :prop_tgt:`<LANG>_INCLUDE_WHAT_YOU_USE` target property and supporting
  :variable:`CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE` variable were introduced
  to tell the :ref:`Makefile Generators` and the :generator:`Ninja` generator
  to run ``include-what-you-use`` along with the compiler for ``C`` and
  ``CXX`` languages.

* The :prop_tgt:`<LANG>_VISIBILITY_PRESET` and
  :prop_tgt:`VISIBILITY_INLINES_HIDDEN` target properties now
  affect compilation in sources of all target types.  See
  policy :policy:`CMP0063`.

* The :prop_tgt:`XCODE_ATTRIBUTE_<an-attribute>` target property learned
  to support generator expressions.

Modules
-------

* The :module:`CheckFortranCompilerFlag` module was introduced
  to check ``Fortran`` compiler flags, much like the
  :module:`CheckCCompilerFlag` module already does for ``C``.

* The :module:`ExternalData` module learned a new
  :variable:`ExternalData_NO_SYMLINKS` option to disable use of
  symbolic links to populate the real data files and use copies
  instead.

* The :module:`ExternalData` module learned a new ``RECURSE:``
  option in ``DATA{}`` references specifying directories.
  This allows an entire directory tree of associated files
  to be matched.

* The :module:`ExternalData` module learned a new URL template
  placeholder ``%(algo:<key>)`` to allow custom mapping from
  algorithm name to URL component through configuration of new
  :variable:`ExternalData_URL_ALGO_<algo>_<key>` variables.
  This allows more flexibility in remote URLs.

* The :module:`ExternalProject` module learned to replace tokens
  like ``<BINARY_DIR>`` in the ``BYPRODUCTS`` of each step.

* The :module:`ExternalProject` module APIs learned to support
  :manual:`generator expressions <cmake-generator-expressions(7)>`
  when using ``LOG_*`` options and in CMake initial cache options.

* The :module:`FindBoost` module now tracks the directories containing
  libraries separately for RELEASE and DEBUG configurations.

* The :module:`FindCUDA` module now defaults to using the static
  CUDA runtime library if it is available.  A new
  ``CUDA_USE_STATIC_CUDA_RUNTIME`` option is offered to control
  this behavior.

* The :module:`FindMatlab` module was completely rewritten.  It learned
  about versions and components and to find Matlab in a more precise and
  multiplatform way.  The module now offers APIs to create mex extensions,
  documentation, and unit tests.

* The :module:`FindPackageHandleStandardArgs` module
  ``FIND_PACKAGE_HANDLE_STANDARD_ARGS`` function now
  always populates both the ``<PackageName>_FOUND``
  and ``<UPPERCASE_NAME>_FOUND`` variables (the latter
  for backwards compatibility).  The ``FOUND_VAR``
  option is now ignored except to enforce its allowed
  values.

* The :module:`InstallRequiredSystemLibraries` module learned a new
  ``CMAKE_INSTALL_SYSTEM_RUNTIME_COMPONENT`` option to specify the
  installation component.

Generator Expressions
---------------------

* A new ``COMPILE_LANGUAGE`` generator expression was introduced to
  allow specification of compile options for target files based on the
  :prop_sf:`LANGUAGE` of each source file.  Due to limitations of the
  underlying native build tools, this feature has varying support across
  generators.  See the :manual:`cmake-generator-expressions(7)` manual
  for details.

CTest
-----

* The :manual:`ctest(1)` tool learned a new ``--repeat-until-fail <n>``
  option to help find sporadic test failures.

* The :module:`CTestCoverageCollectGCOV` module learned to support
  the same ``CTEST_CUSTOM_COVERAGE_EXCLUDE`` option as the
  :command:`ctest_coverage` command.

CPack
-----

* The :cpack_gen:`CPack IFW Generator` learned to support
  Qt Framework Installer 2.0 tools.

* The :cpack_gen:`CPack DEB Generator` learned a new
  :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_SHLIBDEPS`
  variable to specify per-component use of ``dpkg-shlibdeps``.

* The :cpack_gen:`CPack DEB Generator` learned a new
  :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_DEPENDS`
  option to specify per-component dependencies.

* The :cpack_gen:`CPack RPM Generator` learned to package symbolic links
  more cleanly and now supports directory symlinks with recent
  ``rpmbuild`` versions.

* The :cpack_gen:`CPack RPM Generator` learned a new
  :variable:`CPACK_RPM_ADDITIONAL_MAN_DIRS` variable to specify
  directories containing man pages for the brp-compress RPM macro.

* The :cpack_gen:`CPack RPM Generator` learned a new
  :variable:`CPACK_RPM_<component>_PACKAGE_ARCHITECTURE` variable
  to specify a component-specific package architecture.

* The CPack WIX generator learned the new
  :prop_inst:`CPACK_START_MENU_SHORTCUTS`,
  :prop_inst:`CPACK_DESKTOP_SHORTCUTS` and
  :prop_inst:`CPACK_STARTUP_SHORTCUTS` installed file properties which can
  be used to install shortcuts in the Start Menu, on the Desktop and
  in the Startup Folder respectively.

Other
-----

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality
  is now aware of features supported by GNU compilers on Windows, versions
  4.4 through 5.0.

* The :manual:`cmake(1)` ``-E tar`` command learned a new
  ``--format<format>`` option to specify the archive format to
  be written.

* On OS X, CMake learned to create XCTest bundles to test Frameworks
  and App Bundles within Xcode.  The :module:`FindXCTest` module
  provides convenience functions to handle :prop_tgt:`XCTEST` bundles.

Deprecated and Removed Features
===============================

* On OS X the :manual:`cmake-gui(1)` no longer has the
  ``Install For Command Line Use`` menu item.  Instead there
  is a ``How to Install For Command Line Use`` menu item
  that shows an informational dialog box explaining how to
  make the command line tools available.  For example::

    /Applications/CMake.app/Contents/bin/cmake-gui --install

* The :command:`ctest_build` and :command:`build_command` commands
  no longer tell ``make`` tools to ignore errors with the ``-i`` option.
  Previously this was done for :ref:`Makefile Generators` but not others.
  See policy :policy:`CMP0061`.

* The :generator:`Visual Studio 10 2010` generator no longer checks
  for running VS IDEs with the project open or asks them to reload.
  This was originally done for VS 10 because it had been done for
  VS 7 through 9 to avoid prompting for every project in a solution.
  Since VS >= 10 allow the whole solution to reload at once they
  do not need CMake to help them.

* The :generator:`Visual Studio 7` generator (.NET 2002) is now
  deprecated and will be removed in a future version of CMake.

* The :generator:`Visual Studio 6` generator is now deprecated
  and will be removed in a future version of CMake.

* The :command:`find_package` command no longer considers project
  build trees recently configured in a :manual:`cmake-gui(1)`.
  This was previously done only on Windows and is now never done.
  The ``NO_CMAKE_BUILDS_PATH`` option is now ignored if given
  and effectively always on.
  Projects may populate the :ref:`User Package Registry` to aid
  users building multiple dependent projects one after another.

* The :command:`add_definitions()` command no longer causes a
  :prop_dir:`DEFINITIONS` directory property to be populated. See policy
  :policy:`CMP0059`.

* With Visual Studio 7, 8, and 9 generators the value of the ``$(OutDir)``
  placeholder no longer evaluates to the configuration name.  Projects
  should use ``$(ConfigurationName)`` for that instead.

* Using the output of :command:`export()` with the :command:`install(FILES)`
  command is no longer allowed.  See policy :policy:`CMP0062` for details.

Other Changes
=============

* The :generator:`Ninja` generator now requires that calls to the
  :command:`add_custom_command` and :command:`add_custom_target`
  commands use the ``BYPRODUCTS`` option to explicitly specify any
  files generated by the custom commands that are not listed as
  outputs (perhaps because their timestamps are allowed to be older
  than the inputs).  See policy :policy:`CMP0058`.

* Build-time progress output of :ref:`Makefile Generators` has been improved.
  It no longer mixes progress and build rule messages during parallel builds.
  The link rule messages now have progress and are displayed as bold green
  instead of bold red (since red is often associated with an error message).

* The :variable:`CMAKE_CFG_INTDIR` variable value for Visual Studio
  7, 8, and 9 is now ``$(ConfigurationName)`` instead of ``$(OutDir)``.
  This should have no effect on the intended use cases of the variable.

* Linking to library files by a full path in an implicit linker search
  directory (e.g. ``/usr/lib/libfoo.a``) no longer asks the linker to
  search for the library (e.g. ``-lfoo``) and now links by full path.
  See policy :policy:`CMP0060`.



/P/🚀 release/3.2.rst
===================================


CMake 3.2 Release Notes
***********************

.. only:: html

  .. contents::

Changes made since CMake 3.1 include the following.

New Features
============

Syntax
------

* CMake learned to support unicode characters
  :ref:`encoded as UTF-8 <CMake Language Encoding>`
  on Windows.  This was already supported on platforms whose
  system APIs accept UTF-8 encoded strings.
  Unicode characters may now be used in CMake code, paths to
  source files, configured files such as ``.h.in`` files, and
  other files read and written by CMake.  Note that because CMake
  interoperates with many other tools, there may still be some
  limitations when using certain unicode characters.

Commands
--------

* The :command:`add_custom_command` and :command:`add_custom_target`
  commands learned a new ``BYPRODUCTS`` option to specify files
  produced as side effects of the custom commands.  These are not
  outputs because they do not always have to be newer than inputs.

* The :command:`add_custom_command` and :command:`add_custom_target`
  commands learned a new ``USES_TERMINAL`` option to request that
  the command be given direct access to the terminal if possible.
  The :generator:`Ninja` generator will places such commands in the
  ``console`` :prop_gbl:`pool <JOB_POOLS>`.  Build targets provided by CMake
  that are meant for individual interactive use, such as ``install``, are now
  placed in this pool.

* A new :command:`continue` command was added that can be called inside loop
  contexts to end the current iteration and start the next one at the top of
  the loop block.

* The :command:`file(LOCK)` subcommand was created to allow CMake
  processes to synchronize through file and directory locks.

* The :command:`file(STRINGS)` now supports UTF-16LE, UTF-16BE,
  UTF-32LE, UTF-32BE as ``ENCODING`` options.

* The :command:`install(EXPORT)` command now works with an absolute
  ``DESTINATION`` even if targets in the export set are installed
  with a destination or :ref:`usage requirements <Target Usage Requirements>`
  specified relative to the install prefix.  The value of the
  :variable:`CMAKE_INSTALL_PREFIX` variable is hard-coded into the installed
  export file as the base for relative references.

* The :command:`try_compile` command source file signature now honors
  link flags (e.g. :variable:`CMAKE_EXE_LINKER_FLAGS`) in the generated
  test project.  See policy :policy:`CMP0056`.

* The :command:`try_run` command learned to honor the ``LINK_LIBRARIES``
  option just as :command:`try_compile` already does.

* The :command:`file(GENERATE)` command now generates the output file with
  the same permissions as the input file if set.

* The :command:`file(GENERATE)` command can now generate files which are
  used as source files for buildsystem targets.  Generated files
  automatically get their :prop_sf:`GENERATED` property set to ``TRUE``.

Variables
---------

* The :variable:`CMAKE_MATCH_COUNT` variable was introduced to record the
  number of matches made in the last regular expression matched in an
  :command:`if` command or a :command:`string` command.

Properties
----------

* An :prop_tgt:`ANDROID_API_MIN` target property was introduced to
  specify the minimum version to be targeted by the toolchain.

* A :prop_sf:`VS_SHADER_FLAGS` source file property was added to specify
  additional shader flags to ``.hlsl`` files, for the Visual Studio
  generators.

Modules
-------

* The :module:`ExternalData` module learned to support
  :ref:`Custom Fetch Scripts <ExternalData Custom Fetch Scripts>`.
  This allows projects to specify custom ``.cmake`` scripts for
  fetching data objects during the build.

* The :module:`ExternalProject` module learned options to create
  independent external project step targets that do not depend
  on the builtin steps.

* The :module:`ExternalProject` module :command:`ExternalProject_Add`
  command learned a new ``CMAKE_CACHE_DEFAULT_ARGS`` option to
  initialize cache values in the external project without setting
  them on future builds.

* The :module:`ExternalProject` module :command:`ExternalProject_Add`
  command learned a new ``TEST_EXCLUDE_FROM_MAIN`` option to exclude
  tests from the main build.

* The :module:`ExternalProject` module :command:`ExternalProject_Add`
  command learned a new ``UPDATE_DISCONNECTED`` option to avoid
  automatically updating the source tree checkout from version control.

* The :module:`FindCUDA` module learned about the ``cusolver``
  library in CUDA 7.0.

* The :module:`FindGit` module learned to find the ``git`` command-line tool
  that comes with GitHub for Windows installed in user home directories.

* A :module:`FindGSL` module was introduced to find the
  GNU Scientific Library.

* A :module:`FindIntl` module was introduced to find the
  Gettext ``libintl`` library.

* The :module:`FindLATEX` module learned to support components.

* The :module:`FindMPI` module learned to find MS-MPI on Windows.

* The :module:`FindOpenSSL` module now reports ``crypto`` and ``ssl``
  libraries separately in ``OPENSSL_CRYPTO_LIBRARY`` and
  ``OPENSSL_SSL_LIBRARY``, respectively, to allow applications to
  link to one without the other.

* The :module:`WriteCompilerDetectionHeader` module learned to
  create a define for portability of the ``cxx_thread_local`` feature.
  The define expands to either the C++11 ``thread_local`` keyword, or a
  pre-standardization compiler-specific equivalent, as appropriate.

* The :module:`WriteCompilerDetectionHeader` module learned to create
  multiple output files per compiler and per language, instead of creating
  one large file.

CTest
-----

* The :command:`ctest_coverage` command learned to support Delphi coverage.

* The :command:`ctest_coverage` command learned to support Javascript coverage.

* The :module:`CTestCoverageCollectGCOV` module was introduced as an
  alternative to the :command:`ctest_coverage` command for collecting
  ``gcov`` results for submission to CDash.

CPack
-----

* The :cpack_gen:`CPack RPM Generator` learned options to set per-component
  descriptions and summaries.  See the
  :variable:`CPACK_RPM_<component>_PACKAGE_DESCRIPTION` and
  :variable:`CPACK_RPM_<component>_PACKAGE_SUMMARY` variables.

* The :cpack_gen:`CPack RPM Generator` learned options to specify
  requirements for pre- and post-install scripts.  See the
  :variable:`CPACK_RPM_PACKAGE_REQUIRES_PRE` and
  :variable:`CPACK_RPM_PACKAGE_REQUIRES_POST` variables.

* The :cpack_gen:`CPack RPM Generator` learned options to specify
  requirements for pre- and post-uninstall scripts.  See the
  :variable:`CPACK_RPM_PACKAGE_REQUIRES_PREUN` and
  :variable:`CPACK_RPM_PACKAGE_REQUIRES_POSTUN` variables.

* The :cpack_gen:`CPack RPM Generator` learned a new
  :variable:`CPACK_RPM_<COMPONENT>_PACKAGE_PREFIX` variable to
  specify a component-specific value to use instead of
  :variable:`CPACK_PACKAGING_INSTALL_PREFIX`.

* The :cpack_gen:`CPack RPM Generator` learned a new
  :variable:`CPACK_RPM_RELOCATION_PATHS` variable to
  specify multiple relocation prefixes for a single rpm package.

Other
-----

* The :manual:`cmake(1)` ``-E tar`` command now supports creating
  ``.xz``-compressed archives with the ``J`` flag.

* The :manual:`cmake(1)` ``-E tar`` command learned a new
  ``--files-from=<file>`` option to specify file names using
  lines in a file to overcome command-line length limits.

* The :manual:`cmake(1)` ``-E tar`` command learned a new
  ``--mtime=<date>`` option to specify the modification time
  recorded in tarball entries.

* The :manual:`Compile Features <cmake-compile-features(7)>` functionality
  is now aware of features supported by more compilers, including:

  * Apple Clang (``AppleClang``) for Xcode versions 4.4 though 6.1.
  * GNU compiler versions 4.4 through 5.0 on UNIX and Apple (``GNU``).
  * Microsoft Visual Studio (``MSVC``) for versions 2010 through 2015.
  * Oracle SolarisStudio (``SunPro``) version 12.4.

* The :ref:`Qt AUTORCC` feature now tracks files listed in ``.qrc`` files
  as dependencies. If an input file to the ``rcc`` tool is changed, the tool
  is automatically re-run.

New Diagnostics
===============

* The :command:`break` command now rejects calls outside of a loop
  context or that pass arguments to the command.
  See policy :policy:`CMP0055`.

Deprecated and Removed Features
===============================

* Files written in the :manual:`cmake-language(7)`, such as
  ``CMakeLists.txt`` or ``*.cmake`` files, are now expected to be
  encoded as UTF-8.  If files are already ASCII, they will be
  compatible.  If files were in a different encoding, including
  Latin 1, they will need to be converted.

* The :module:`FindOpenGL` module no longer explicitly searches
  for any dependency on X11 libraries with the :module:`FindX11`
  module.  Such dependencies should not need to be explicit.
  Applications using X11 APIs themselves should find and link
  to X11 libraries explicitly.

* The implementation of CMake now relies on some C++ compiler features which
  are not supported by some older compilers.  As a result, those old compilers
  can no longer be used to build CMake itself.  CMake continues to be able to
  generate Makefiles and project files for users of those old compilers
  however.  Compilers known to no longer be capable of building CMake are:

  * Visual Studio 6 and 7.0 -- superseded by VisualStudio 7.1 and newer.
  * GCC 2.95 -- superseded by GCC 3 and newer compilers.
  * Borland compilers -- superseded by other Windows compilers.
  * Compaq compilers -- superseded by other compilers.
  * SGI compilers -- IRIX was dropped as a host platform.

Other Changes
=============

* On Windows and OS X, commands supporting network communication
  via ``https``, such as :command:`file(DOWNLOAD)`,
  :command:`file(UPLOAD)`, and :command:`ctest_submit`, now support
  SSL/TLS even when CMake is not built against OpenSSL.
  The Windows or OS X native SSL/TLS implementation is used by default.
  OS-configured certificate authorities will be trusted automatically.

  On other platforms, when CMake is built with OpenSSL, these
  commands now search for OS-configured certificate authorities
  in a few ``/etc`` paths to be trusted automatically.

* On OS X with Makefile and Ninja generators, when a compiler is found
  in ``/usr/bin`` it is now mapped to the corresponding compiler inside
  the Xcode application folder, if any.  This allows such build
  trees to continue to work with their original compiler even when
  ``xcode-select`` switches to a different Xcode installation.

* The Visual Studio generators now write solution and project
  files in UTF-8 instead of Windows-1252.  Windows-1252 supported
  Latin 1 languages such as those found in North and South America
  and Western Europe.  With UTF-8, additional languages are now
  supported.

* The :generator:`Xcode` generator no longer requires a value for
  the :variable:`CMAKE_MAKE_PROGRAM` variable to be located up front.
  It now locates ``xcodebuild`` when needed at build time.

* When building CMake itself using SolarisStudio 12, the default ``libCStd``
  standard library is not sufficient to build CMake.  The SolarisStudio
  distribution supports compiler options to use ``STLPort4`` or ``libstdc++``.
  An appropriate option to select the standard library is now added
  automatically when building CMake with SolarisStudio compilers.



/P/🚀 release/3.1.rst
===================================


CMake 3.1 Release Notes
***********************

.. only:: html

  .. contents::

Changes made since CMake 3.0 include the following.

Documentation Changes
=====================

* A new :manual:`cmake-compile-features(7)` manual was added.

New Features
============

Generators
----------

* The :generator:`Visual Studio 14 2015` generator was added.

Windows Phone and Windows Store
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* Generators for Visual Studio 11 (2012) and above learned to generate
  projects for Windows Phone and Windows Store.  One may set the
  :variable:`CMAKE_SYSTEM_NAME` variable to ``WindowsPhone``
  or ``WindowsStore`` on the :manual:`cmake(1)` command-line
  or in a :variable:`CMAKE_TOOLCHAIN_FILE` to activate these platforms.
  Also set :variable:`CMAKE_SYSTEM_VERSION` to ``8.0`` or ``8.1`` to
  specify the version of Windows to be targeted.

NVIDIA Nsight Tegra
^^^^^^^^^^^^^^^^^^^

* Generators for Visual Studio 10 (2010) and above learned to generate
  projects for NVIDIA Nsight Tegra Visual Studio Edition.  One may set
  the :variable:`CMAKE_SYSTEM_NAME` variable to ``Android`` on the
  :manual:`cmake(1)` command-line or in a :variable:`CMAKE_TOOLCHAIN_FILE`
  to activate this platform.

Syntax
------

* The :manual:`cmake-language(7)` syntax for :ref:`Variable References` and
  :ref:`Escape Sequences` was simplified in order to allow a much faster
  implementation.  See policy :policy:`CMP0053`.

* The :command:`if` command no longer automatically dereferences
  variables named in quoted or bracket arguments.  See policy
  :policy:`CMP0054`.

Commands
--------

* The :command:`add_custom_command` command learned to interpret
  :manual:`cmake-generator-expressions(7)` in arguments to ``DEPENDS``.

* The :command:`export(PACKAGE)` command learned to check the
  :variable:`CMAKE_EXPORT_NO_PACKAGE_REGISTRY` variable to skip
  exporting the package.

* The :command:`file(STRINGS)` command gained a new ``ENCODING``
  option to enable extraction of ``UTF-8`` strings.

* The :command:`find_package` command learned to check the
  :variable:`CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY` and
  :variable:`CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY`
  variables to skip searching the package registries.

* The :command:`get_property` command learned a new ``INSTALL`` scope
  for properties.

* The :command:`install` command learned a ``MESSAGE_NEVER`` option
  to avoid output during installation.

* The :command:`set_property` command learned a new ``INSTALL`` scope
  for properties.

* The :command:`string` command learned a new ``GENEX_STRIP`` subcommand
  which removes
  :manual:`generator expression <cmake-generator-expressions(7)>`.

* The :command:`string` command learned a new ``UUID`` subcommand
  to generate a universally unique identifier.

* New :command:`target_compile_features` command allows populating the
  :prop_tgt:`COMPILE_FEATURES` target property, just like any other
  build variable.

* The :command:`target_sources` command was added to add to the
  :prop_tgt:`SOURCES` target property.

Variables
---------

* The Visual Studio generators for versions 8 (2005) and above
  learned to read the target platform name from a new
  :variable:`CMAKE_GENERATOR_PLATFORM` variable when it is
  not specified as part of the generator name.  The platform
  name may be specified on the :manual:`cmake(1)` command line
  with the ``-A`` option, e.g. ``-G "Visual Studio 12 2013" -A x64``.

* The :variable:`CMAKE_GENERATOR_TOOLSET` variable may now be
  initialized in a toolchain file specified by the
  :variable:`CMAKE_TOOLCHAIN_FILE` variable.  This is useful
  when cross-compiling with the Xcode or Visual Studio
  generators.

* The :variable:`CMAKE_INSTALL_MESSAGE` variable was introduced to
  optionally reduce output installation.

Properties
----------

* New :prop_tgt:`CXX_STANDARD` and :prop_tgt:`CXX_EXTENSIONS` target
  properties may specify values which CMake uses to compute required
  compile options such as ``-std=c++11`` or ``-std=gnu++11``. The
  :variable:`CMAKE_CXX_STANDARD` and :variable:`CMAKE_CXX_EXTENSIONS`
  variables may be set to initialize the target properties.

* New :prop_tgt:`C_STANDARD` and :prop_tgt:`C_EXTENSIONS` target
  properties may specify values which CMake uses to compute required
  compile options such as ``-std=c11`` or ``-std=gnu11``. The
  :variable:`CMAKE_C_STANDARD` and :variable:`CMAKE_C_EXTENSIONS`
  variables may be set to initialize the target properties.

* New :prop_tgt:`COMPILE_FEATURES` target property may contain a list
  of features required to compile a target.  CMake uses this
  information to ensure that the compiler in use is capable of building
  the target, and to add any necessary compile flags to support language
  features.

* New :prop_tgt:`COMPILE_PDB_NAME` and
  :prop_tgt:`COMPILE_PDB_OUTPUT_DIRECTORY` target properties
  were introduced to specify the MSVC compiler program database
  file location (``cl /Fd``).  This complements the existing
  :prop_tgt:`PDB_NAME` and :prop_tgt:`PDB_OUTPUT_DIRECTORY`
  target properties that specify the linker program database
  file location (``link /pdb``).

* The :prop_tgt:`INTERFACE_LINK_LIBRARIES` target property now supports
  a ``$<LINK_ONLY:...>``
  :manual:`generator expression <cmake-generator-expressions(7)>`.

* A new :prop_tgt:`INTERFACE_SOURCES` target property was introduced. This is
  consumed by dependent targets, which compile and link the listed sources.

* The :prop_tgt:`SOURCES` target property now contains
  :manual:`generator expression <cmake-generator-expressions(7)>`
  such as ``TARGET_OBJECTS`` when read at configure time, if
  policy :policy:`CMP0051` is ``NEW``.

* The :prop_tgt:`SOURCES` target property now generally supports
  :manual:`generator expression <cmake-generator-expressions(7)>`.  The
  generator expressions may be used in the :command:`add_library` and
  :command:`add_executable` commands.

* It is now possible to write and append to the :prop_tgt:`SOURCES` target
  property.  The :variable:`CMAKE_DEBUG_TARGET_PROPERTIES` variable may be
  used to trace the origin of sources.

* A :prop_sf:`VS_DEPLOYMENT_CONTENT` source file property was added
  to tell the Visual Studio generators to mark content for deployment
  in Windows Phone and Windows Store projects.

* A :prop_sf:`VS_DEPLOYMENT_LOCATION` source file property was added
  to tell the Visual Studio generators the relative location of content
  marked for deployment in Windows Phone and Windows Store projects.

* The :prop_tgt:`VS_WINRT_COMPONENT` target property was created to
  tell Visual Studio generators to compile a shared library as a
  Windows Runtime (WinRT) component.

* The :generator:`Xcode` generator learned to check source
  file properties  :prop_sf:`XCODE_EXPLICIT_FILE_TYPE` and
  :prop_sf:`XCODE_LAST_KNOWN_FILE_TYPE` for a custom Xcode
  file reference type.

Modules
-------

* The :module:`BundleUtilities` module learned to resolve and replace
  ``@rpath`` placeholders on OS X to correctly bundle applications
  using them.

* The :module:`CMakePackageConfigHelpers` module
  :command:`configure_package_config_file` command learned a new
  ``INSTALL_PREFIX`` option to generate package configuration files
  meant for a prefix other than :variable:`CMAKE_INSTALL_PREFIX`.

* The :module:`CheckFortranSourceCompiles` module was added to
  provide a ``CHECK_Fortran_SOURCE_COMPILES`` macro.

* The :module:`ExternalData` module learned to tolerate a ``DATA{}``
  reference to a missing source file with a warning instead of
  rejecting it with an error.  This helps developers write new
  ``DATA{}`` references to test reference outputs that have not
  yet been created.

* The :module:`ExternalProject` module learned to support lzma-compressed
  source tarballs with ``.7z``, ``.tar.xz``, and ``.txz`` extensions.

* The :module:`ExternalProject` module ``ExternalProject_Add`` command
  learned a new ``BUILD_ALWAYS`` option to cause the external project
  build step to run every time the host project is built.

* The :module:`ExternalProject` module ``ExternalProject_Add`` command
  learned a new ``EXCLUDE_FROM_ALL`` option to cause the external
  project target to have the :prop_tgt:`EXCLUDE_FROM_ALL` target
  property set.

* The :module:`ExternalProject` module ``ExternalProject_Add_Step`` command
  learned a new ``EXCLUDE_FROM_MAIN`` option to cause the step to not be
  a direct dependency of the main external project target.

* The :module:`ExternalProject` module ``ExternalProject_Add`` command
  learned a new ``DOWNLOAD_NO_PROGRESS`` option to disable progress
  output while downloading the source tarball.

* The :module:`FeatureSummary` module ``feature_summary`` API
  learned to accept multiple values for the ``WHAT`` option and
  combine them appropriately.

* The :module:`FindCUDA` module learned to support ``fatbin`` and ``cubin``
  modules.

* The :module:`FindGTest` module ``gtest_add_tests`` macro learned
  a new ``AUTO`` option to automatically read the :prop_tgt:`SOURCES`
  target property of the test executable and scan the source files
  for tests to be added.

* The :module:`FindGLEW` module now provides imported targets.

* The :module:`FindGLUT` module now provides imported targets.

* The :module:`FindHg` module gained a new ``Hg_WC_INFO`` macro to
  help run ``hg`` to extract information about a Mercurial work copy.

* The :module:`FindOpenCL` module was introduced.

* The :module:`FindOpenMP` module learned to support Fortran.

* The :module:`FindPkgConfig` module learned to use the ``PKG_CONFIG``
  environment variable value as the ``pkg-config`` executable, if set.

* The :module:`FindXercesC` module was introduced.

* The :module:`FindZLIB` module now provides imported targets.

* The :module:`GenerateExportHeader` module ``generate_export_header``
  function learned to allow use with :ref:`Object Libraries`.

* The :module:`InstallRequiredSystemLibraries` module gained a new
  ``CMAKE_INSTALL_OPENMP_LIBRARIES`` option to install MSVC OpenMP
  runtime libraries.

* The :module:`UseSWIG` module learned to detect the module name
  from ``.i`` source files if possible to avoid the need to set
  the ``SWIG_MODULE_NAME`` source file property explicitly.

* The :module:`WriteCompilerDetectionHeader` module was added to allow
  creation of a portable header file for compiler optional feature detection.

Generator Expressions
---------------------

* New ``COMPILE_FEATURES``
  :manual:`generator expression <cmake-generator-expressions(7)>` allows
  setting build properties based on available compiler features.

CTest
-----

* The :command:`ctest_coverage` command learned to read variable
  ``CTEST_COVERAGE_EXTRA_FLAGS`` to set ``CoverageExtraFlags``.

* The :command:`ctest_coverage` command learned to support
  Intel coverage files with the ``codecov`` tool.

* The :command:`ctest_memcheck` command learned to support sanitizer
  modes, including ``AddressSanitizer``, ``MemorySanitizer``,
  ``ThreadSanitizer``, and ``UndefinedBehaviorSanitizer``.
  Options may be set using the new
  :variable:`CTEST_MEMORYCHECK_SANITIZER_OPTIONS` variable.

CPack
-----

* :manual:`cpack(1)` gained an ``IFW`` generator to package using
  Qt Framework Installer tools.  See the :cpack_gen:`CPack IFW Generator`.

* :manual:`cpack(1)` gained ``7Z`` and ``TXZ`` generators supporting
  lzma-compressed archives.

* The :cpack_gen:`CPack DEB Generator` learned a new
  :variable:`CPACK_DEBIAN_COMPRESSION_TYPE` variable to set the
  tarball compression type.

* The :cpack_gen:`CPack WIX Generator` learned to support
  a :prop_inst:`CPACK_WIX_ACL` installed file property to
  specify an Access Control List.

Other
-----

* The :manual:`cmake(1)` ``-E`` option learned a new ``env`` command.

* The :manual:`cmake(1)` ``-E tar`` command learned to support
  lzma-compressed files.

* :ref:`Object Libraries` may now have extra sources that do not
  compile to object files so long as they would not affect linking
  of a normal library (e.g. ``.dat`` is okay but not ``.def``).

* Visual Studio generators for VS 8 and later learned to support
  the ``ASM_MASM`` language.

* The Visual Studio generators learned to treat ``.hlsl`` source
  files as High Level Shading Language sources (using ``FXCompile``
  in ``.vcxproj`` files).  Source file properties
  :prop_sf:`VS_SHADER_TYPE`, :prop_sf:`VS_SHADER_MODEL`, and
  :prop_sf:`VS_SHADER_ENTRYPOINT` were added added to specify the
  shader type, model, and entry point name.

New Diagnostics
===============

* Policy :policy:`CMP0052` introduced to control directories in the
  :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of exported targets.

Deprecated and Removed Features
===============================

* In CMake 3.0 the :command:`target_link_libraries` command
  accidentally began allowing unquoted arguments to use
  :manual:`generator expressions <cmake-generator-expressions(7)>`
  containing a (``;`` separated) list within them.  For example::

    set(libs B C)
    target_link_libraries(A PUBLIC $<BUILD_INTERFACE:${libs}>)

  This is equivalent to writing::

    target_link_libraries(A PUBLIC $<BUILD_INTERFACE:B C>)

  and was never intended to work.  It did not work in CMake 2.8.12.
  Such generator expressions should be in quoted arguments::

    set(libs B C)
    target_link_libraries(A PUBLIC "$<BUILD_INTERFACE:${libs}>")

  CMake 3.1 again requires the quotes for this to work correctly.

* Prior to CMake 3.1 the Makefile generators did not escape ``#``
  correctly inside make variable assignments used in generated
  makefiles, causing them to be treated as comments.  This made
  code like::

    add_compile_options(-Wno-#pragma-messages)

  not work in Makefile generators, but work in other generators.
  Now it is escaped correctly, making the behavior consistent
  across generators.  However, some projects may have tried to
  workaround the original bug with code like::

    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-\\#pragma-messages")

  This added the needed escape for Makefile generators but also
  caused other generators to pass ``-Wno-\#pragma-messages`` to
  the shell, which would work only in POSIX shells.
  Unfortunately the escaping fix could not be made in a compatible
  way so this platform- and generator-specific workaround no
  longer works.  Project code may test the :variable:`CMAKE_VERSION`
  variable value to make the workaround version-specific too.

* Callbacks established by the :command:`variable_watch` command will no
  longer receive the ``ALLOWED_UNKNOWN_READ_ACCESS`` access type when
  the undocumented ``CMAKE_ALLOW_UNKNOWN_VARIABLE_READ_ACCESS`` variable is
  set.  Uninitialized variable accesses will always be reported as
  ``UNKNOWN_READ_ACCESS``.

* The :module:`CMakeDetermineVSServicePack` module now warns that
  it is deprecated and should not longer be used.  Use the
  :variable:`CMAKE_<LANG>_COMPILER_VERSION` variable instead.

* The :module:`FindITK` module has been removed altogether.
  It was a thin-wrapper around ``find_package(ITK ... NO_MODULE)``.
  This produces much clearer error messages when ITK is not found.

* The :module:`FindVTK` module has been removed altogether.
  It was a thin-wrapper around ``find_package(VTK ... NO_MODULE)``.
  This produces much clearer error messages when VTK is not found.

  The module also provided compatibility support for finding VTK 4.0.
  This capability has been dropped.

Other Changes
=============

* The :manual:`cmake-gui(1)` learned to capture output from child
  processes started by the :command:`execute_process` command
  and display it in the output window.

* The :manual:`cmake-language(7)` internal implementation of generator
  expression and list expansion parsers have been optimized and shows
  non-trivial speedup on large projects.

* The Makefile generators learned to use response files with GNU tools
  on Windows to pass library directories and names to the linker.

* When generating linker command-lines, CMake now avoids repeating
  items corresponding to SHARED library targets.

* Support for the Open Watcom compiler has been overhauled.
  The :variable:`CMAKE_<LANG>_COMPILER_ID` is now ``OpenWatcom``,
  and the :variable:`CMAKE_<LANG>_COMPILER_VERSION` now uses
  the Open Watcom external version numbering.  The external
  version numbers are lower than the internal version number
  by 11.

* The ``cmake-mode.el`` major Emacs editing mode no longer
  treats ``_`` as part of words, making it more consistent
  with other major modes.



/P/🚀 release/3.0.rst
===================================


CMake 3.0 Release Notes
***********************

.. only:: html

  .. contents::

Changes made since CMake 2.8.12 include the following.

Documentation Changes
=====================

* The CMake documentation has been converted to reStructuredText and
  now transforms via Sphinx (`<https://www.sphinx-doc.org>`__) into man and
  html pages.  This allows the documentation to be properly indexed
  and to contain cross-references.

  Conversion from the old internal documentation format was done by
  an automatic process so some documents may still contain artifacts.
  They will be updated incrementally over time.

  A basic reStructuredText processor has been implemented to support
  ``cmake --help-command`` and similar command-line options.

* New manuals were added:

  - :manual:`cmake-buildsystem(7)`
  - :manual:`cmake-commands(7)`, replacing ``cmakecommands(1)``
    and ``cmakecompat(1)``
  - :manual:`cmake-developer(7)`
  - :manual:`cmake-generator-expressions(7)`
  - :manual:`cmake-generators(7)`
  - :manual:`cmake-language(7)`
  - :manual:`cmake-modules(7)`, replacing ``cmakemodules(1)``
  - :manual:`cmake-packages(7)`
  - :manual:`cmake-policies(7)`, replacing ``cmakepolicies(1)``
  - :manual:`cmake-properties(7)`, replacing ``cmakeprops(1)``
  - :manual:`cmake-qt(7)`
  - :manual:`cmake-toolchains(7)`
  - :manual:`cmake-variables(7)`, replacing ``cmakevars(1)``

* Release notes for CMake 3.0.0 and above will now be included with
  the html documentation.

New Features
============

Syntax
------

* The CMake language has been extended with
  :ref:`Bracket Argument` and  :ref:`Bracket Comment`
  syntax inspired by Lua long brackets::

    set(x [===[bracket argument]===] #[[bracket comment]])

  Content between equal-length open- and close-brackets is taken
  literally with no variable replacements.

  .. warning::
    This syntax change could not be made in a fully compatible
    way.  No policy is possible because syntax parsing occurs before
    any chance to set a policy.  Existing code using an unquoted
    argument that starts with an open bracket will be interpreted
    differently without any diagnostic.  Fortunately the syntax is
    obscure enough that this problem is unlikely in practice.

Generators
----------

* A new :generator:`CodeLite` extra generator is available
  for use with the Makefile or Ninja generators.

* A new :generator:`Kate` extra generator is available
  for use with the Makefile or Ninja generators.

* The :generator:`Ninja` generator learned to use ``ninja`` job pools
  when specified by a new :prop_gbl:`JOB_POOLS` global property.

Commands
--------

* The :command:`add_library` command learned a new ``INTERFACE``
  library type.  Interface libraries have no build rules but may
  have properties defining
  :manual:`usage requirements <cmake-buildsystem(7)>`
  and may be installed, exported, and imported.  This is useful to
  create header-only libraries that have concrete link dependencies
  on other libraries.

* The :command:`export()` command learned a new ``EXPORT`` mode that
  retrieves the list of targets to export from an export set configured
  by the :command:`install(TARGETS)` command ``EXPORT`` option.  This
  makes it easy to export from the build tree the same targets that
  are exported from the install tree.

* The :command:`export` command learned to work with multiple dependent
  export sets, thus allowing multiple packages to be built and exported
  from a single tree.  The feature requires CMake to wait until the
  generation step to write the output file.  This means one should not
  :command:`include` the generated targets file later during project
  configuration because it will not be available.
  Use :ref:`Alias Targets` instead.  See policy :policy:`CMP0024`.

* The :command:`install(FILES)` command learned to support
  :manual:`generator expressions <cmake-generator-expressions(7)>`
  in the list of files.

* The :command:`project` command learned to set some version variables
  to values specified by the new ``VERSION`` option or to empty strings.
  See policy :policy:`CMP0048`.

* The :command:`string` command learned a new ``CONCAT`` mode.
  It is particularly useful in combination with the new
  :ref:`Bracket Argument` syntax.

* The :command:`unset` command learned a ``PARENT_SCOPE`` option
  matching that of the :command:`set` command.

* The :command:`include_external_msproject` command learned
  to handle non-C++ projects like ``.vbproj`` or ``.csproj``.

* The :command:`ctest_update` command learned to update work trees
  managed by the Perforce (p4) version control tool.

* The :command:`message` command learned a ``DEPRECATION`` mode. Such
  messages are not issued by default, but may be issued as a warning if
  :variable:`CMAKE_WARN_DEPRECATED` is enabled, or as an error if
  :variable:`CMAKE_ERROR_DEPRECATED` is enabled.

* The :command:`target_link_libraries` command now allows repeated use of
  the ``LINK_PUBLIC`` and ``LINK_PRIVATE`` keywords.

Variables
---------

* Variable :variable:`CMAKE_FIND_NO_INSTALL_PREFIX` has been
  introduced to tell CMake not to add the value of
  :variable:`CMAKE_INSTALL_PREFIX` to the
  :variable:`CMAKE_SYSTEM_PREFIX_PATH` variable by default.
  This is useful when building a project that installs some
  of its own dependencies to avoid finding files it is about
  to replace.

* Variable :variable:`CMAKE_STAGING_PREFIX` was introduced for use
  when cross-compiling to specify an installation prefix on the
  host system that differs from a :variable:`CMAKE_INSTALL_PREFIX`
  value meant for the target system.

* Variable :variable:`CMAKE_SYSROOT` was introduced to specify the
  toolchain SDK installation prefix, typically for cross-compiling.
  This is used to pass a ``--sysroot`` option to the compiler and
  as a prefix searched by ``find_*`` commands.

* Variable :variable:`CMAKE_<LANG>_COMPILER_TARGET` was introduced
  for use when cross-compiling to specify the target platform in the
  :ref:`toolchain file <Cross Compiling Toolchain>` specified by the
  :variable:`CMAKE_TOOLCHAIN_FILE` variable.
  This is used to pass an option such as ``--target=<triple>`` to some
  cross-compiling compiler drivers.

* Variable :variable:`CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>` has been
  introduced to optionally initialize the
  :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` target property.

Properties
----------

* The :prop_dir:`ADDITIONAL_MAKE_CLEAN_FILES` directory property
  learned to support
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

* A new directory property :prop_dir:`CMAKE_CONFIGURE_DEPENDS`
  was introduced to allow projects to specify additional
  files on which the configuration process depends.  CMake will
  re-run at build time when one of these files is modified.
  Previously this was only possible to achieve by specifying
  such files as the input to a :command:`configure_file` command.

* A new :ref:`Qt AUTORCC` feature replaces the need to
  invoke ``qt4_add_resources()`` by allowing ``.qrc`` files to
  be listed as target sources.

* A new :ref:`Qt AUTOUIC` feature replaces the need to
  invoke ``qt4_wrap_ui()``.

* Test properties learned to support
  :manual:`generator expressions <cmake-generator-expressions(7)>`.
  This is useful to specify per-configuration values for test
  properties like :prop_test:`REQUIRED_FILES` and
  :prop_test:`WORKING_DIRECTORY`.

* A new :prop_test:`SKIP_RETURN_CODE` test property was introduced
  to tell :manual:`ctest(1)` to treat a particular test return code as
  if the test were not run.  This is useful for test drivers to report
  that certain test requirements were not available.

* New types of :ref:`Compatible Interface Properties` were introduced,
  namely the :prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MAX` and
  :prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MIN` for calculating numeric
  maximum and minimum values respectively.

Modules
-------

* The :module:`CheckTypeSize` module ``check_type_size`` macro and
  the :module:`CheckStructHasMember` module ``check_struct_has_member``
  macro learned a new ``LANGUAGE`` option to optionally check C++ types.

* The :module:`ExternalData` module learned to work with no
  URL templates if a local store is available.

* The :module:`ExternalProject` function ``ExternalProject_Add``
  learned a new ``GIT_SUBMODULES`` option to specify a subset
  of available submodules to checkout.

* A new :module:`FindBacktrace` module has been added to support
  :command:`find_package(Backtrace)` calls.

* A new :module:`FindLua` module has been added to support
  :command:`find_package(Lua)` calls.

* The :module:`FindBoost` module learned a new ``Boost_NAMESPACE``
  option to change the ``boost`` prefix on library names.

* The :module:`FindBoost` module learned to control search
  for libraries with the ``g`` tag (for MS debug runtime) with
  a new ``Boost_USE_DEBUG_RUNTIME`` option.  It is ``ON`` by
  default to preserve existing behavior.

* The :module:`FindJava` and :module:`FindJNI` modules learned
  to use a ``JAVA_HOME`` CMake variable or environment variable,
  and then try ``/usr/libexec/java_home`` on OS X.

* The :module:`UseJava` module ``add_jar`` function learned a new
  ``MANIFEST`` option to pass the ``-m`` option to ``jar``.

* A new :module:`CMakeFindDependencyMacro` module was introduced with
  a ``find_dependency`` macro to find transitive dependencies in
  a :manual:`package configuration file <cmake-packages(7)>`.  Such
  dependencies are omitted by the listing of the :module:`FeatureSummary`
  module.

* The :module:`FindQt4` module learned to create :ref:`Imported Targets`
  for Qt executables.  This helps disambiguate when using multiple
  :manual:`Qt versions <cmake-qt(7)>` in the same buildsystem.

* The :module:`FindRuby` module learned to search for Ruby 2.0 and 2.1.

Generator Expressions
---------------------

* New ``$<PLATFORM_ID>`` and ``$<PLATFORM_ID:...>``
  :manual:`generator expressions <cmake-generator-expressions(7)>`
  have been added.

* The ``$<CONFIG>``
  :manual:`generator expression <cmake-generator-expressions(7)>` now has
  a variant which takes no argument.  This is equivalent to the
  ``$<CONFIGURATION>`` expression.

* New ``$<UPPER_CASE:...>`` and ``$<LOWER_CASE:...>``
  :manual:`generator expressions <cmake-generator-expressions(7)>`
  generator expressions have been added.

* A new ``$<MAKE_C_IDENTIFIER:...>``
  :manual:`generator expression <cmake-generator-expressions(7)>` has
  been added.

Other
-----

* The :manual:`cmake(1)` ``-E`` option learned a new ``sleep`` command.

* The :manual:`ccmake(1)` dialog learned to honor the
  :prop_cache:`STRINGS` cache entry property to cycle through
  the enumerated list of possible values.

* The :manual:`cmake-gui(1)` dialog learned to remember window
  settings between sessions.

* The :manual:`cmake-gui(1)` dialog learned to remember the type
  of a cache entry for completion in the ``Add Entry`` dialog.

New Diagnostics
===============

* Directories named in the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`
  target property of imported targets linked conditionally by a
  :manual:`generator expression <cmake-generator-expressions(7)>`
  were not checked for existence.  Now they are checked.
  See policy :policy:`CMP0027`.

* Build target names must now match a validity pattern and may no longer
  conflict with CMake-defined targets.  See policy :policy:`CMP0037`.

* Build targets that specify themselves as a link dependency were
  silently accepted but are now diagnosed.  See :policy:`CMP0038`.

* The :command:`target_link_libraries` command used to silently ignore
  calls specifying as their first argument build targets created by
  :command:`add_custom_target` but now diagnoses this mistake.
  See policy :policy:`CMP0039`.

* The :command:`add_custom_command` command used to silently ignore
  calls specifying the ``TARGET`` option with a non-existent target
  but now diagnoses this mistake.  See policy :policy:`CMP0040`.

* Relative paths in the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`
  target property used to be silently accepted if they contained a
  :manual:`generator expression <cmake-generator-expressions(7)>`
  but are now rejected.  See policy :policy:`CMP0041`.

* The :command:`get_target_property` command learned to reject calls
  specifying a non-existent target.  See policy :policy:`CMP0045`.

* The :command:`add_dependencies` command learned to reject calls
  specifying a dependency on a non-existent target.
  See policy :policy:`CMP0046`.

* Link dependency analysis learned to assume names containing ``::``
  refer to :ref:`Alias Targets` or :ref:`Imported Targets`.  It will
  now produce an error if such a linked target is missing.  Previously
  in this case CMake generated a link line that failed at build time.
  See policy :policy:`CMP0028`.

* When the :command:`project` or :command:`enable_language` commands
  initialize support for a language, it is now an error if the full
  path to the compiler cannot be found and stored in the corresponding
  :variable:`CMAKE_<LANG>_COMPILER` variable.  This produces nicer error
  messages up front and stops processing when no working compiler
  is known to be available.

* Target sources specified with the :command:`add_library` or
  :command:`add_executable` command learned to reject items which
  require an undocumented extra layer of variable expansion.
  See policy :policy:`CMP0049`.

* Use of :command:`add_custom_command` undocumented ``SOURCE``
  signatures now results in an error.  See policy :policy:`CMP0050`.

Deprecated and Removed Features
===============================

* Compatibility options supporting code written for CMake versions
  prior to 2.4 have been removed.

* Several long-outdated commands that should no longer be called
  have been disallowed in new code by policies:

  - Policy :policy:`CMP0029` disallows :command:`subdir_depends`
  - Policy :policy:`CMP0030` disallows :command:`use_mangled_mesa`
  - Policy :policy:`CMP0031` disallows :command:`load_command`
  - Policy :policy:`CMP0032` disallows :command:`output_required_files`
  - Policy :policy:`CMP0033` disallows :command:`export_library_dependencies`
  - Policy :policy:`CMP0034` disallows :command:`utility_source`
  - Policy :policy:`CMP0035` disallows :command:`variable_requires`
  - Policy :policy:`CMP0036` disallows :command:`build_name`

* The :manual:`cmake(1)` ``-i`` wizard mode has been removed.
  Instead use an interactive dialog such as :manual:`ccmake(1)`
  or use the ``-D`` option to set cache values from the command line.

* The builtin documentation formatters that supported command-line
  options such as ``--help-man`` and ``--help-html`` have been removed
  in favor of the above-mentioned new documentation system.  These and
  other command-line options that used to generate man- and html-
  formatted pages no longer work.  The :manual:`cmake(1)`
  ``--help-custom-modules`` option now produces a warning at runtime
  and generates a minimal document that reports the limitation.

* The :prop_dir:`COMPILE_DEFINITIONS_<CONFIG>` directory properties and the
  :prop_tgt:`COMPILE_DEFINITIONS_<CONFIG>` target properties have been
  deprecated.  Instead set the corresponding :prop_dir:`COMPILE_DEFINITIONS`
  directory property or :prop_tgt:`COMPILE_DEFINITIONS` target property and
  use :manual:`generator expressions <cmake-generator-expressions(7)>` like
  ``$<CONFIG:...>`` to specify per-configuration definitions.
  See policy :policy:`CMP0043`.

* The :prop_tgt:`LOCATION` target property should no longer be read from
  non-IMPORTED targets.  It does not make sense in multi-configuration
  generators since the build configuration is not known while configuring
  the project.  It has been superseded by the ``$<TARGET_FILE>`` generator
  expression.  See policy :policy:`CMP0026`.

* The :prop_tgt:`COMPILE_FLAGS` target property is now documented
  as deprecated, though no warning is issued.  Use the
  :prop_tgt:`COMPILE_OPTIONS` target property or the
  :command:`target_compile_options` command instead.

* The :module:`GenerateExportHeader` module ``add_compiler_export_flags``
  function is now deprecated.  It has been superseded by the
  :prop_tgt:`<LANG>_VISIBILITY_PRESET` and
  :prop_tgt:`VISIBILITY_INLINES_HIDDEN` target properties.

Other Changes
=============

* The version scheme was changed to use only two components for
  the feature level instead of three.  The third component will
  now be used for bug-fix releases or the date of development versions.
  See the :variable:`CMAKE_VERSION` variable documentation for details.

* The default install locations of CMake itself on Windows and
  OS X no longer contain the CMake version number.  This allows
  for easy replacement without re-generating local build trees
  manually.

* Generators for Visual Studio 10 (2010) and later were renamed to
  include the product year like generators for older VS versions:

  - ``Visual Studio 10`` -> :generator:`Visual Studio 10 2010`
  - ``Visual Studio 11`` -> :generator:`Visual Studio 11 2012`
  - ``Visual Studio 12`` -> :generator:`Visual Studio 12 2013`

  This clarifies which generator goes with each Visual Studio
  version.  The old names are recognized for compatibility.

* The :variable:`CMAKE_<LANG>_COMPILER_ID` value for Apple-provided
  Clang is now ``AppleClang``.  It must be distinct from upstream
  Clang because the version numbers differ.
  See policy :policy:`CMP0025`.

* The :variable:`CMAKE_<LANG>_COMPILER_ID` value for ``qcc`` on QNX
  is now ``QCC``.  It must be distinct from ``GNU`` because the
  command-line options differ.  See policy :policy:`CMP0047`.

* On 64-bit OS X the :variable:`CMAKE_HOST_SYSTEM_PROCESSOR` value
  is now correctly detected as ``x86_64`` instead of ``i386``.

* On OS X, CMake learned to enable behavior specified by the
  :prop_tgt:`MACOSX_RPATH` target property by default.  This activates
  use of ``@rpath`` for runtime shared library searches.
  See policy :policy:`CMP0042`.

* The :command:`build_command` command now returns a :manual:`cmake(1)`
  ``--build`` command line instead of a direct invocation of the native
  build tool.  When using ``Visual Studio`` generators, CMake and CTest
  no longer require :variable:`CMAKE_MAKE_PROGRAM` to be located up front.
  Selection of the proper msbuild or devenv tool is now performed as
  late as possible when the solution (``.sln``) file is available so
  it can depend on project content.

* The :manual:`cmake(1)` ``--build`` command now shares its own stdout
  and stderr pipes with the native build tool by default.
  The ``--use-stderr`` option that once activated this is now ignored.

* The ``$<C_COMPILER_ID:...>`` and ``$<CXX_COMPILER_ID:...>``
  :manual:`generator expressions <cmake-generator-expressions(7)>`
  used to perform case-insensitive comparison but have now been
  corrected to perform case-sensitive comparison.
  See policy :policy:`CMP0044`.

* The builtin ``edit_cache`` target will no longer select
  :manual:`ccmake(1)` by default when no interactive terminal will
  be available (e.g. with :generator:`Ninja` or an IDE generator).
  Instead :manual:`cmake-gui(1)` will be preferred if available.

* The :module:`ExternalProject` download step learned to
  re-attempt download in certain cases to be more robust to
  temporary network failure.

* The :module:`FeatureSummary` no longer lists transitive
  dependencies since they were not directly requested by the
  current project.

* The ``cmake-mode.el`` major Emacs editing mode has been cleaned
  up and enhanced in several ways.

* Include directories specified in the
  :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of :ref:`Imported Targets`
  are treated as ``SYSTEM`` includes by default when handled as
  :ref:`usage requirements <Include Directories and Usage Requirements>`.



/P/🚀 manual/cpack-generators.7.rst
================================================


.. cmake-manual-description: CPack Generator Reference

cpack-generators(7)
*******************

Generators
==========

.. toctree::
   :maxdepth: 1

    Help/cpack_gen/archive
    Help/cpack_gen/bundle
    Help/cpack_gen/cygwin
    Help/cpack_gen/deb
    Help/cpack_gen/dmg
    Help/cpack_gen/external
    Help/cpack_gen/freebsd
    Help/cpack_gen/innosetup
    Help/cpack_gen/ifw
    Help/cpack_gen/nsis
    Help/cpack_gen/nuget
    Help/cpack_gen/packagemaker
    Help/cpack_gen/productbuild
    Help/cpack_gen/rpm
    Help/cpack_gen/wix



/P/🚀 cpack_gen/archive.rst
=========================================


CPack Archive Generator
-----------------------

CPack generator for packaging files into an archive, which can have
any of the following formats:

  - 7Z - 7zip - (``.7z``)
  - TBZ2 (``.tar.bz2``)
  - TGZ (``.tar.gz``)
  - TXZ (``.tar.xz``)
  - TZ (``.tar.Z``)
  - TZST (``.tar.zst``)
  - ZIP (``.zip``)

.. versionadded:: 3.1
  7Z and TXZ formats support.

.. versionadded:: 3.16
  TZST format support.

When this generator is called from ``CPackSourceConfig.cmake`` (or through
the ``package_source`` target), then the generated archive will contain all
files in the project directory, except those specified in
:variable:`CPACK_SOURCE_IGNORE_FILES`.  The following is one example of
packaging all source files of a project:

.. code-block:: cmake

  set(CPACK_SOURCE_GENERATOR "TGZ")
  set(CPACK_SOURCE_IGNORE_FILES
    \\.git/
    build/
    ".*~$"
  )
  set(CPACK_VERBATIM_VARIABLES YES)
  include(CPack)

When this generator is called from ``CPackConfig.cmake`` (or through the
``package`` target), then the generated archive will contain all files
that have been installed via CMake's :command:`install` command (and the
deprecated commands :command:`install_files`, :command:`install_programs`,
and :command:`install_targets`).

Variables specific to CPack Archive generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. variable:: CPACK_ARCHIVE_FILE_NAME
              CPACK_ARCHIVE_<component>_FILE_NAME

  Package file name without extension.

  :Default: The default is ``<CPACK_PACKAGE_FILE_NAME>[-<component>]``, with spaces
   replaced by '-'.

  The extension is determined from the archive format (see list above) and
  automatically appended to the file name. Note that ``<component>`` is all
  uppercase in the variable name.

  .. versionadded:: 3.9
    Per-component :variable:`!CPACK_ARCHIVE_<component>_FILE_NAME` variables.

.. variable:: CPACK_ARCHIVE_FILE_EXTENSION

  .. versionadded:: 3.25

  Package file extension.

  :Default: Default values are given in the list above.

.. variable:: CPACK_ARCHIVE_COMPONENT_INSTALL

  Enable component packaging.

  :Default: ``OFF``

  If enabled (``ON``) multiple packages are generated. By default a single package
  containing files of all components is generated.

Variables used by CPack Archive generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

These variables are used by the Archive generator, but are also available to
CPack generators which are essentially archives at their core. These include:

- :cpack_gen:`CPack Cygwin Generator`
- :cpack_gen:`CPack FreeBSD Generator`

.. variable:: CPACK_ARCHIVE_THREADS

  The number of threads to use when performing the compression.

  .. versionadded:: 3.18

  :Default: ``1``

  If set to ``0``, the number of available cores on the machine will be used instead.
  The default is ``1`` which limits compression to a single thread. Note that
  not all compression modes support threading in all environments. Currently,
  only the XZ compression may support it.

  See also the :variable:`CPACK_THREADS` variable.

  .. versionadded:: 3.21

    Official CMake binaries available on ``cmake.org`` now ship
    with a ``liblzma`` that supports parallel compression.
    Older versions did not.



/P/🚀 cpack_gen/bundle.rst
========================================


CPack Bundle Generator
----------------------

CPack Bundle generator (macOS) specific options

Variables specific to CPack Bundle generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Installers built on macOS using the Bundle generator use the
aforementioned DragNDrop (``CPACK_DMG_xxx``) variables, plus the following
Bundle-specific parameters (``CPACK_BUNDLE_xxx``).

.. variable:: CPACK_BUNDLE_NAME

 The name of the generated bundle. This appears in the macOS Finder as the
 bundle name. Required.

.. variable:: CPACK_BUNDLE_PLIST

 Path to an macOS Property List (``.plist``) file that will be used
 for the generated bundle. This
 assumes that the caller has generated or specified their own ``Info.plist``
 file. Required.

.. variable:: CPACK_BUNDLE_ICON

 Path to an macOS icon file that will be used as the icon for the generated
 bundle. This is the icon that appears in the macOS Finder for the bundle, and
 in the macOS dock when the bundle is opened. Required.

.. variable:: CPACK_BUNDLE_STARTUP_COMMAND

 Path to a startup script. This is a path to an executable or script that
 will be run whenever an end-user double-clicks the generated bundle in the
 macOS Finder. Optional.

.. variable:: CPACK_BUNDLE_APPLE_CERT_APP

 .. versionadded:: 3.2

 The name of your Apple supplied code signing certificate for the application.
 The name usually takes the form ``Developer ID Application: [Name]`` or
 ``3rd Party Mac Developer Application: [Name]``. If this variable is not set
 the application will not be signed.

.. variable:: CPACK_BUNDLE_APPLE_ENTITLEMENTS

 .. versionadded:: 3.2

 The name of the Property List (``.plist``) file that contains your Apple
 entitlements for sandboxing your application. This file is required
 for submission to the macOS App Store.

.. variable:: CPACK_BUNDLE_APPLE_CODESIGN_FILES

 .. versionadded:: 3.2

 A list of additional files that you wish to be signed. You do not need to
 list the main application folder, or the main executable. You should
 list any frameworks and plugins that are included in your app bundle.

.. variable:: CPACK_BUNDLE_APPLE_CODESIGN_PARAMETER

 .. versionadded:: 3.3

 Additional parameter that will passed to ``codesign``.
 Default value: ``--deep -f``

.. variable:: CPACK_COMMAND_CODESIGN

 .. versionadded:: 3.2

 Path to the ``codesign(1)`` command used to sign applications with an
 Apple cert. This variable can be used to override the automatically
 detected command (or specify its location if the auto-detection fails
 to find it).



/P/🚀 cpack_gen/cygwin.rst
========================================


CPack Cygwin Generator
----------------------

Cygwin CPack generator (Cygwin).

Variables affecting the CPack Cygwin generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- .. versionadded:: 3.18
    :variable:`CPACK_ARCHIVE_THREADS`


Variables specific to CPack Cygwin generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The
following variable is specific to installers build on and/or for
Cygwin:

.. variable:: CPACK_CYGWIN_PATCH_NUMBER

 The Cygwin patch number.  FIXME: This documentation is incomplete.

.. variable:: CPACK_CYGWIN_PATCH_FILE

 The Cygwin patch file.  FIXME: This documentation is incomplete.

.. variable:: CPACK_CYGWIN_BUILD_SCRIPT

 The Cygwin build script.  FIXME: This documentation is incomplete.



/P/🚀 cpack_gen/deb.rst
=====================================


CPack DEB Generator
-------------------

The built in (binary) CPack DEB generator (Unix only)

Variables specific to CPack Debian (DEB) generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The CPack DEB generator may be used to create DEB package using :module:`CPack`.
The CPack DEB generator is a :module:`CPack` generator thus it uses the
:variable:`!CPACK_XXX` variables used by :module:`CPack`.

The CPack DEB generator should work on any Linux host but it will produce
better deb package when Debian specific tools ``dpkg-xxx`` are usable on
the build system.

The CPack DEB generator has specific features which are controlled by the
specifics :variable:`!CPACK_DEBIAN_XXX` variables.

:variable:`!CPACK_DEBIAN_<COMPONENT>_XXXX` variables may be used in order to have
**component** specific values.  Note however that ``<COMPONENT>`` refers to
the **grouping name** written in upper case. It may be either a component name
or a component GROUP name.

Here are some CPack DEB generator wiki resources that are here for historic
reasons and are no longer maintained but may still prove useful:

 - https://gitlab.kitware.com/cmake/community/-/wikis/doc/cpack/Configuration
 - https://gitlab.kitware.com/cmake/community/-/wikis/doc/cpack/PackageGenerators#deb-unix-only

List of CPack DEB generator specific variables:

.. variable:: CPACK_DEB_COMPONENT_INSTALL

 Enable component packaging for CPackDEB

 :Mandatory: No
 :Default: ``OFF``

 If enabled (``ON``) multiple packages are generated. By default a single package
 containing files of all components is generated.

.. variable:: CPACK_DEBIAN_PACKAGE_NAME
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_NAME

 Set Package control field (variable is automatically transformed to lower
 case).

 :Mandatory: Yes
 :Default:

   - :variable:`CPACK_PACKAGE_NAME` for non-component based
     installations
   - :variable:`CPACK_DEBIAN_PACKAGE_NAME` suffixed with ``-<COMPONENT>``
     for component-based installations.

 .. versionadded:: 3.5
  Per-component :variable:`!CPACK_DEBIAN_<COMPONENT>_PACKAGE_NAME` variables.

 See https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-source

.. variable:: CPACK_DEBIAN_FILE_NAME
              CPACK_DEBIAN_<COMPONENT>_FILE_NAME

 .. versionadded:: 3.6

 Package file name.

 :Mandatory: Yes
 :Default: ``<CPACK_PACKAGE_FILE_NAME>[-<component>].deb``

 This may be set to:

 ``DEB-DEFAULT``
   Tell CPack to automatically generate the package file name in deb format::

     <PackageName>_<VersionNumber>-<DebianRevisionNumber>_<DebianArchitecture>.deb

   This setting recommended as the preferred behavior, but for backward
   compatibility with the CPack DEB generator in CMake prior to version 3.6,
   this is not the default.   Without this, duplicate names may occur.
   Duplicate files get overwritten and it is up to the packager to set
   the variables in a manner that will prevent such errors.

 ``<file-name>[.deb]``
   Use the given file name.

   .. versionchanged:: 3.29

     The ``.deb`` suffix will be automatically added if the file name does
     not end in ``.deb`` or ``.ipk``.  Previously the suffix was required.

 ``<file-name>.ipk``
   .. versionadded:: 3.10

   Use the given file name.
   The ``.ipk`` suffix is used by the OPKG packaging system.

.. variable:: CPACK_DEBIAN_PACKAGE_EPOCH

 .. versionadded:: 3.10

 The Debian package epoch

 :Mandatory: No
 :Default: None

 Optional number that should be incremented when changing versioning schemas
 or fixing mistakes in the version numbers of older packages.

.. variable:: CPACK_DEBIAN_PACKAGE_VERSION

 The Debian package version

 :Mandatory: Yes
 :Default: :variable:`CPACK_PACKAGE_VERSION`

 This variable may contain only alphanumerics (A-Za-z0-9) and the characters
 . + - ~ (full stop, plus, hyphen, tilde) and should start with a digit. If
 :variable:`CPACK_DEBIAN_PACKAGE_RELEASE` is not set then hyphens are not
 allowed.

 .. note::

   For backward compatibility with CMake 3.9 and lower a failed test of this
   variable's content is not a hard error when both
   :variable:`CPACK_DEBIAN_PACKAGE_RELEASE` and
   :variable:`CPACK_DEBIAN_PACKAGE_EPOCH` variables are not set. An author
   warning is reported instead.

.. variable:: CPACK_DEBIAN_PACKAGE_RELEASE

 .. versionadded:: 3.6

 The Debian package release - Debian revision number.

 :Mandatory: No
 :Default: None

 This is the numbering of the DEB package itself, i.e. the version of the
 packaging and not the version of the content (see
 :variable:`CPACK_DEBIAN_PACKAGE_VERSION`). One may change the default value
 if the previous packaging was buggy and/or you want to put here a fancy Linux
 distro specific numbering.

.. variable:: CPACK_DEBIAN_PACKAGE_ARCHITECTURE
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_ARCHITECTURE

 The Debian package architecture

 :Mandatory: Yes
 :Default: Output of ``dpkg --print-architecture`` (or ``i386``
   if ``dpkg`` is not found)

 .. versionadded:: 3.6
  Per-component :variable:`!CPACK_DEBIAN_<COMPONENT>_PACKAGE_ARCHITECTURE` variables.

.. variable:: CPACK_DEBIAN_PACKAGE_DEPENDS
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_DEPENDS

 Sets the Debian dependencies of this package.

 :Mandatory: No
 :Default:

   - An empty string for non-component based installations
   - :variable:`CPACK_DEBIAN_PACKAGE_DEPENDS` for component-based
     installations.


 .. versionadded:: 3.3
  Per-component :variable:`!CPACK_DEBIAN_<COMPONENT>_PACKAGE_DEPENDS` variables.

 .. note::

   If :variable:`CPACK_DEBIAN_PACKAGE_SHLIBDEPS` or
   more specifically :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_SHLIBDEPS`
   is set for this component, the discovered dependencies will be appended
   to :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_DEPENDS` instead of
   :variable:`CPACK_DEBIAN_PACKAGE_DEPENDS`. If
   :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_DEPENDS` is an empty string,
   only the automatically discovered dependencies will be set for this
   component.

 Example:

 .. code-block:: cmake

   set(CPACK_DEBIAN_PACKAGE_DEPENDS "libc6 (>= 2.3.1-6), libc6 (< 2.4)")

.. variable:: CPACK_DEBIAN_ENABLE_COMPONENT_DEPENDS

 .. versionadded:: 3.6

 Sets inter-component dependencies if listed with
 :variable:`CPACK_COMPONENT_<compName>_DEPENDS` variables.

 :Mandatory: No
 :Default: None

.. variable:: CPACK_DEBIAN_PACKAGE_MAINTAINER

 The Debian package maintainer

 :Mandatory: Yes
 :Default: :variable:`!CPACK_PACKAGE_CONTACT`

.. variable:: CPACK_DEBIAN_PACKAGE_DESCRIPTION
              CPACK_DEBIAN_<COMPONENT>_DESCRIPTION

 The Debian package description

 :Mandatory: Yes
 :Default:

   - :variable:`CPACK_DEBIAN_<COMPONENT>_DESCRIPTION` (component
     based installers only) if set, or :variable:`CPACK_DEBIAN_PACKAGE_DESCRIPTION` if set, or
   - :variable:`CPACK_COMPONENT_<compName>_DESCRIPTION` (component
     based installers only) if set, or :variable:`CPACK_PACKAGE_DESCRIPTION` if set, or
   - content of the file specified in :variable:`CPACK_PACKAGE_DESCRIPTION_FILE` if set

 If after that description is not set, :variable:`CPACK_PACKAGE_DESCRIPTION_SUMMARY` going to be
 used if set. Otherwise, :variable:`CPACK_PACKAGE_DESCRIPTION_SUMMARY` will be added as the first
 line of description as defined in `Debian Policy Manual`_.

 .. versionadded:: 3.3
  Per-component :variable:`!CPACK_COMPONENT_<compName>_DESCRIPTION` variables.

 .. versionadded:: 3.16
  Per-component :variable:`!CPACK_DEBIAN_<COMPONENT>_DESCRIPTION` variables.

 .. versionadded:: 3.16
  The :variable:`!CPACK_PACKAGE_DESCRIPTION_FILE` variable.

.. _Debian Policy Manual: https://www.debian.org/doc/debian-policy/ch-controlfields.html#description

.. variable:: CPACK_DEBIAN_PACKAGE_SECTION
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_SECTION

 Set Section control field e.g. admin, devel, doc, ...

 :Mandatory: Yes
 :Default: ``devel``

 .. versionadded:: 3.5
  Per-component :variable:`!CPACK_DEBIAN_<COMPONENT>_PACKAGE_SECTION` variables.

 See https://www.debian.org/doc/debian-policy/ch-archive.html#s-subsections

.. variable:: CPACK_DEBIAN_ARCHIVE_TYPE

 .. versionadded:: 3.7

 .. deprecated:: 3.14

 The archive format used for creating the Debian package.

 :Mandatory: Yes
 :Default: ``gnutar``

 Possible value is: ``gnutar``

 .. note::

   This variable previously defaulted to the ``paxr`` value, but ``dpkg``
   has never supported that tar format. For backwards compatibility the
   ``paxr`` value will be mapped to ``gnutar`` and a deprecation message
   will be emitted.

.. variable:: CPACK_DEBIAN_COMPRESSION_TYPE

 .. versionadded:: 3.1

 The compression used for creating the Debian package.

 :Mandatory: Yes
 :Default: ``gzip``

 Possible values are:

  ``lzma``
    Lempel–Ziv–Markov chain algorithm

  ``xz``
    XZ Utils compression

  ``bzip2``
    bzip2 Burrows–Wheeler algorithm

  ``gzip``
    GNU Gzip compression

  ``zstd``
    .. versionadded:: 3.22

    Zstandard compression


.. variable:: CPACK_DEBIAN_PACKAGE_PRIORITY
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_PRIORITY

 Set Priority control field e.g. required, important, standard, optional,
 extra

 :Mandatory: Yes
 :Default: ``optional``

 .. versionadded:: 3.5
  Per-component :variable:`!CPACK_DEBIAN_<COMPONENT>_PACKAGE_PRIORITY` variables.

 See https://www.debian.org/doc/debian-policy/ch-archive.html#s-priorities

.. variable:: CPACK_DEBIAN_PACKAGE_HOMEPAGE

 The URL of the web site for this package, preferably (when applicable) the
 site from which the original source can be obtained and any additional
 upstream documentation or information may be found.

 :Mandatory: No
 :Default: :variable:`CMAKE_PROJECT_HOMEPAGE_URL`

 .. versionadded:: 3.12
  The :variable:`!CMAKE_PROJECT_HOMEPAGE_URL` variable.

 .. note::

   The content of this field is a simple URL without any surrounding
   characters such as <>.

.. variable:: CPACK_DEBIAN_PACKAGE_SHLIBDEPS
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_SHLIBDEPS

 May be set to ON in order to use ``dpkg-shlibdeps`` to generate
 better package dependency list.

 :Mandatory: No
 :Default:

   - :variable:`CPACK_DEBIAN_PACKAGE_SHLIBDEPS` if set or
   - ``OFF``

 .. note::

   You may need set :variable:`CMAKE_INSTALL_RPATH` to an appropriate value
   if you use this feature, because if you don't ``dpkg-shlibdeps``
   may fail to find your own shared libs.
   See https://gitlab.kitware.com/cmake/community/-/wikis/doc/cmake/RPATH-handling

 .. note::

   You can also set :variable:`CPACK_DEBIAN_PACKAGE_SHLIBDEPS_PRIVATE_DIRS`
   to an appropriate value if you use this feature, in order to please
   ``dpkg-shlibdeps``. However, you should only do this for private
   shared libraries that could not get resolved otherwise.

 .. versionadded:: 3.3
  Per-component :variable:`!CPACK_DEBIAN_<COMPONENT>_PACKAGE_SHLIBDEPS` variables.

 .. versionadded:: 3.6
  Correct handling of ``$ORIGIN`` in :variable:`CMAKE_INSTALL_RPATH`.

.. variable:: CPACK_DEBIAN_PACKAGE_SHLIBDEPS_PRIVATE_DIRS

 .. versionadded:: 3.20

 May be set to a list of directories that will be given to ``dpkg-shlibdeps``
 via its ``-l`` option. These will be searched by ``dpkg-shlibdeps`` in order
 to find private shared library dependencies.

 :Mandatory: No
 :Default: None

 .. note::

   You should prefer to set :variable:`CMAKE_INSTALL_RPATH` to an appropriate
   value if you use ``dpkg-shlibdeps``. The current option is really only
   needed for private shared library dependencies.

.. variable:: CPACK_DEBIAN_PACKAGE_DEBUG

 May be set when invoking cpack in order to trace debug information
 during the CPack DEB generator run.

 :Mandatory: No
 :Default: None

.. variable:: CPACK_DEBIAN_PACKAGE_PREDEPENDS
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_PREDEPENDS

 Sets the `Pre-Depends` field of the Debian package.
 Like :variable:`Depends <CPACK_DEBIAN_PACKAGE_DEPENDS>`, except that it
 also forces ``dpkg`` to complete installation of the packages named
 before even starting the installation of the package which declares the
 pre-dependency.

 :Mandatory: No
 :Default:

   - An empty string for non-component based installations
   - :variable:`CPACK_DEBIAN_PACKAGE_PREDEPENDS` for component-based
     installations.

 .. versionadded:: 3.4
  Per-component :variable:`!CPACK_DEBIAN_<COMPONENT>_PACKAGE_PREDEPENDS` variables.

 See https://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps

.. variable:: CPACK_DEBIAN_PACKAGE_ENHANCES
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_ENHANCES

 Sets the ``Enhances`` field of the Debian package.
 Similar to :variable:`Suggests <CPACK_DEBIAN_PACKAGE_SUGGESTS>` but works
 in the opposite direction: declares that a package can enhance the
 functionality of another package.

 :Mandatory: No
 :Default:

   - An empty string for non-component based installations
   - :variable:`CPACK_DEBIAN_PACKAGE_ENHANCES` for component-based
     installations.

 .. versionadded:: 3.4
  Per-component :variable:`!CPACK_DEBIAN_<COMPONENT>_PACKAGE_ENHANCES` variables.

 See https://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps

.. variable:: CPACK_DEBIAN_PACKAGE_BREAKS
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_BREAKS

 Sets the ``Breaks`` field of the Debian package.
 When a binary package (P) declares that it breaks other packages (B),
 ``dpkg`` will not allow the package (P) which declares ``Breaks`` be
 **unpacked** unless the packages that will be broken (B) are deconfigured
 first.
 As long as the package (P) is configured, the previously deconfigured
 packages (B) cannot be reconfigured again.

 :Mandatory: No
 :Default:

   - An empty string for non-component based installations
   - :variable:`CPACK_DEBIAN_PACKAGE_BREAKS` for component-based
     installations.

 .. versionadded:: 3.4
  Per-component :variable:`!CPACK_DEBIAN_<COMPONENT>_PACKAGE_BREAKS` variables.

 See https://www.debian.org/doc/debian-policy/ch-relationships.html#s-breaks

.. variable:: CPACK_DEBIAN_PACKAGE_CONFLICTS
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_CONFLICTS

 Sets the `Conflicts` field of the Debian package.
 When one binary package declares a conflict with another using a `Conflicts`
 field, ``dpkg`` will not allow them to be unpacked on the system at
 the same time.

 :Mandatory: No
 :Default:

   - An empty string for non-component based installations
   - :variable:`CPACK_DEBIAN_PACKAGE_CONFLICTS` for component-based
     installations.

 .. versionadded:: 3.4
  Per-component :variable:`!CPACK_DEBIAN_<COMPONENT>_PACKAGE_CONFLICTS` variables.

 See https://www.debian.org/doc/debian-policy/ch-relationships.html#s-conflicts

 .. note::

   This is a stronger restriction than
   :variable:`Breaks <CPACK_DEBIAN_PACKAGE_BREAKS>`, which prevents the
   broken package from being configured while the breaking package is in
   the "Unpacked" state but allows both packages to be unpacked at the same
   time.

.. variable:: CPACK_DEBIAN_PACKAGE_PROVIDES
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_PROVIDES

 Sets the `Provides` field of the Debian package.
 A virtual package is one which appears in the `Provides` control field of
 another package.

 :Mandatory: No
 :Default:

   - An empty string for non-component based installations
   - :variable:`CPACK_DEBIAN_PACKAGE_PROVIDES` for component-based
     installations.

 .. versionadded:: 3.4
  Per-component :variable:`!CPACK_DEBIAN_<COMPONENT>_PACKAGE_PROVIDES` variables.

 See https://www.debian.org/doc/debian-policy/ch-relationships.html#s-virtual

.. variable:: CPACK_DEBIAN_PACKAGE_REPLACES
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_REPLACES

 Sets the `Replaces` field of the Debian package.
 Packages can declare in their control file that they should overwrite
 files in certain other packages, or completely replace other packages.

 :Mandatory: No
 :Default:

   - An empty string for non-component based installations
   - :variable:`CPACK_DEBIAN_PACKAGE_REPLACES` for component-based
     installations.

 .. versionadded:: 3.4
  Per-component :variable:`!CPACK_DEBIAN_<COMPONENT>_PACKAGE_REPLACES` variables.

 See https://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps

.. variable:: CPACK_DEBIAN_PACKAGE_RECOMMENDS
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_RECOMMENDS

 Sets the ``Recommends`` field of the Debian package.
 Allows packages to declare a strong, but not absolute, dependency on other
 packages.

 :Mandatory: No
 :Default:

   - An empty string for non-component based installations
   - :variable:`CPACK_DEBIAN_PACKAGE_RECOMMENDS` for component-based
     installations.

 .. versionadded:: 3.4
  Per-component :variable:`!CPACK_DEBIAN_<COMPONENT>_PACKAGE_RECOMMENDS` variables.

 See https://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps

.. variable:: CPACK_DEBIAN_PACKAGE_SUGGESTS
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_SUGGESTS

 Sets the `Suggests` field of the Debian package.
 Allows packages to declare a suggested package install grouping.

 :Mandatory: No
 :Default:

   - An empty string for non-component based installations
   - :variable:`CPACK_DEBIAN_PACKAGE_SUGGESTS` for component-based
     installations.

 .. versionadded:: 3.4
  Per-component :variable:`!CPACK_DEBIAN_<COMPONENT>_PACKAGE_SUGGESTS` variables.

 See https://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps

.. variable:: CPACK_DEBIAN_PACKAGE_GENERATE_SHLIBS

 .. versionadded:: 3.6

 :Mandatory: No
 :Default: ``OFF``

 Allows to generate shlibs control file automatically. Compatibility is defined by
 :variable:`CPACK_DEBIAN_PACKAGE_GENERATE_SHLIBS_POLICY` variable value.

 .. note::

   Libraries are only considered if they have both library name and version
   set. This can be done by setting SOVERSION property with
   :command:`set_target_properties` command.

.. variable:: CPACK_DEBIAN_PACKAGE_GENERATE_SHLIBS_POLICY

 .. versionadded:: 3.6

 Compatibility policy for auto-generated shlibs control file.

 :Mandatory: No
 :Default: ``=``

 Defines compatibility policy for auto-generated shlibs control file.
 Possible values: ``=``, ``>=``

 See https://www.debian.org/doc/debian-policy/ch-sharedlibs.html#s-sharedlibs-shlibdeps

.. variable:: CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_CONTROL_EXTRA

 This variable allow advanced user to add custom script to the
 control.tar.gz.
 Typical usage is for conffiles, postinst, postrm, prerm.

 :Mandatory: No
 :Default: None

 Usage:

 .. code-block:: cmake

  set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA
      "${CMAKE_CURRENT_SOURCE_DIR}/prerm;${CMAKE_CURRENT_SOURCE_DIR}/postrm")

 .. versionadded:: 3.4
  Per-component :variable:`!CPACK_DEBIAN_<COMPONENT>_PACKAGE_CONTROL_EXTRA` variables.

.. variable:: CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_CONTROL_STRICT_PERMISSION

 .. versionadded:: 3.4

 This variable indicates if the Debian policy on control files should be
 strictly followed.

 :Mandatory: No
 :Default: ``FALSE``

 Usage:

 .. code-block:: cmake

  set(CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION TRUE)

 This overrides the permissions on the original files, following the rules
 set by Debian policy
 https://www.debian.org/doc/debian-policy/ch-files.html#s-permissions-owners

 .. note::

  The original permissions of the files will be used in the final
  package unless this variable is set to ``TRUE``.
  In particular, the scripts should have the proper executable
  flag prior to the generation of the package.

.. variable:: CPACK_DEBIAN_PACKAGE_SOURCE
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_SOURCE

 .. versionadded:: 3.5

 Sets the ``Source`` field of the binary Debian package.
 When the binary package name is not the same as the source package name
 (in particular when several components/binaries are generated from one
 source) the source from which the binary has been generated should be
 indicated with the field ``Source``.

 :Mandatory: No
 :Default:

   - An empty string for non-component based installations
   - :variable:`CPACK_DEBIAN_PACKAGE_SOURCE` for component-based
     installations.

 See https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-source

 .. note::

   This value is not interpreted. It is possible to pass an optional
   revision number of the referenced source package as well.

Packaging of debug information
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.13

Dbgsym packages contain debug symbols for debugging packaged binaries.

Dbgsym packaging has its own set of variables:

.. variable:: CPACK_DEBIAN_DEBUGINFO_PACKAGE
              CPACK_DEBIAN_<component>_DEBUGINFO_PACKAGE

 Enable generation of dbgsym .ddeb package(s).

 :Mandatory: No
 :Default: ``OFF``

.. note::

 Setting this also strips the ELF files in the generated non-dbgsym package,
 which results in debuginfo only being available in the dbgsym package.

.. note::

 Binaries must contain debug symbols before packaging so use either ``Debug``
 or ``RelWithDebInfo`` for :variable:`CMAKE_BUILD_TYPE` variable value.

 Additionally, if :variable:`CPACK_STRIP_FILES` is set, the files will be stripped before
 they get to the DEB generator, so will not contain debug symbols and
 a dbgsym package will not get built. Do not use with :variable:`CPACK_STRIP_FILES`.

Building Debian packages on Windows
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.10

To communicate UNIX file permissions from the install stage
to the CPack DEB generator the ``cmake_mode_t`` NTFS
alternate data stream (ADT) is used.

When a filesystem without ADT support is used only owner read/write
permissions can be preserved.

Reproducible packages
^^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.13

The environment variable :envvar:`!SOURCE_DATE_EPOCH` may be set to a UNIX
timestamp, defined as the number of seconds, excluding leap seconds,
since 01 Jan 1970 00:00:00 UTC.  If set, the CPack DEB generator will
use its value for timestamps in the package.



/P/🚀 cpack_gen/dmg.rst
=====================================


CPack DragNDrop Generator
-------------------------

The DragNDrop CPack generator (macOS) creates a DMG image.

Variables specific to CPack DragNDrop generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following variables are specific to the DragNDrop installers built
on macOS:

.. variable:: CPACK_DMG_VOLUME_NAME

 The volume name of the generated disk image.

 :Default: :variable:`CPACK_PACKAGE_FILE_NAME`

.. variable:: CPACK_DMG_FORMAT

 The disk image format.

 :Default: ``UDZO``

 Common values are ``UDRO`` (UDIF read-only), ``UDZO`` (UDIF
 zlib-compressed) or ``UDBZ`` (UDIF bzip2-compressed). Refer to ``hdiutil(1)`` for
 more information on other available formats.

.. variable:: CPACK_DMG_DS_STORE

 Path to a custom ``.DS_Store`` file. This ``.DS_Store`` file can be used to
 specify the Finder window position/geometry and layout (such as hidden
 toolbars, placement of the icons etc.). This file has to be generated by
 the Finder (either manually or through AppleScript) using a normal folder
 from which the ``.DS_Store`` file can then be extracted.

.. variable:: CPACK_DMG_DS_STORE_SETUP_SCRIPT

 .. versionadded:: 3.5

 Path to a custom AppleScript file.  This AppleScript is used to generate
 a ``.DS_Store`` file which specifies the Finder window position/geometry and
 layout (such as hidden toolbars, placement of the icons etc.).
 By specifying a custom AppleScript there is no need to use
 ``CPACK_DMG_DS_STORE``, as the ``.DS_Store`` that is generated by the AppleScript
 will be packaged.

.. variable:: CPACK_DMG_BACKGROUND_IMAGE

 :Default:

 Path to an image file to be used as the background.  This file will be
 copied to ``.background``/``background.<ext>``, where ``<ext>`` is the original image file
 extension.  The background image is installed into the image before
 ``CPACK_DMG_DS_STORE_SETUP_SCRIPT`` is executed or ``CPACK_DMG_DS_STORE`` is
 installed.  By default no background image is set.

.. variable:: CPACK_DMG_DISABLE_APPLICATIONS_SYMLINK

 .. versionadded:: 3.6

 Default behavior is to include a symlink to ``/Applications`` in the DMG.
 Set this option to ``ON`` to avoid adding the symlink.

.. variable:: CPACK_DMG_SLA_USE_RESOURCE_FILE_LICENSE

 .. versionadded:: 3.23

 :Default: ``OFF``

 Control whether :variable:`CPACK_RESOURCE_FILE_LICENSE`, if set to a
 non-default value, is used as the license agreement provided when
 mounting the DMG.  If :variable:`!CPACK_DMG_SLA_USE_RESOURCE_FILE_LICENSE` is
 not set, :manual:`cpack(1)` defaults to off.

 In a CMake project that uses the :module:`CPack` module to generate
 ``CPackConfig.cmake``, :variable:`!CPACK_DMG_SLA_USE_RESOURCE_FILE_LICENSE`
 must be explicitly enabled by the project to activate the SLA.
 See policy :policy:`CMP0133`.

 .. note::

  This option was added in response to macOS 12.0's deprecation of
  the ``hdiutil udifrez`` command to make its use optional.
  CPack 3.22 and below always use :variable:`CPACK_RESOURCE_FILE_LICENSE`,
  if set to a non-default value, as the DMG license.

.. variable:: CPACK_DMG_SLA_DIR

  .. versionadded:: 3.5

  Directory where license and menu files for different languages are stored.
  Setting this causes CPack to look for a ``<language>.menu.txt`` and
  ``<language>.license.txt`` or ``<language>.license.rtf`` file for every
  language defined in :variable:`CPACK_DMG_SLA_LANGUAGES`.  If both this variable and
  :variable:`CPACK_RESOURCE_FILE_LICENSE` are set, CPack will only look for the menu
  files and use the same license file for all languages.  If both
  ``<language>.license.txt`` and ``<language>.license.rtf`` exist, the ``.txt``
  file will be used.

  .. versionadded:: 3.17
    RTF support.

.. variable:: CPACK_DMG_SLA_LANGUAGES

  .. versionadded:: 3.5

  Languages for which a license agreement is provided when mounting the
  generated DMG. A menu file consists of 9 lines of text. The first line is
  is the name of the language itself, uppercase, in English (e.g. German).
  The other lines are translations of the following strings:

  - Agree
  - Disagree
  - Print
  - Save...
  - You agree to the terms of the License Agreement when you click the
    "Agree" button.
  - Software License Agreement
  - This text cannot be saved. The disk may be full or locked, or the file
    may be locked.
  - Unable to print. Make sure you have selected a printer.

  For every language in this list, CPack will try to find files
  ``<language>.menu.txt`` and ``<language>.license.txt`` in the directory
  specified by the :variable:`CPACK_DMG_SLA_DIR` variable.

.. variable:: CPACK_DMG_<component>_FILE_NAME

 .. versionadded:: 3.17

 File name when packaging ``<component>`` as its own DMG
 (:variable:`CPACK_COMPONENTS_GROUPING` set to ``IGNORE``).

 :Default: ``CPACK_PACKAGE_FILE_NAME-<component>``

.. variable:: CPACK_DMG_FILESYSTEM

 .. versionadded:: 3.21

 :Default: ``HFS+``

 The filesystem format. Common values are ``APFS`` and ``HFS+``.
 See ``man hdiutil`` for a full list of supported formats.

.. variable:: CPACK_COMMAND_HDIUTIL

 Path to the ``hdiutil(1)`` command used to operate on disk image files on
 macOS. This variable can be used to override the automatically detected
 command (or specify its location if the auto-detection fails to find it).

.. variable:: CPACK_COMMAND_SETFILE

 Path to the ``SetFile(1)`` command used to set extended attributes on files and
 directories on macOS. This variable can be used to override the
 automatically detected command (or specify its location if the
 auto-detection fails to find it).

.. variable:: CPACK_COMMAND_REZ

 Path to the ``Rez(1)`` command used to compile resources on macOS. This
 variable can be used to override the automatically detected command (or
 specify its location if the auto-detection fails to find it).



/P/🚀 cpack_gen/external.rst
==========================================


CPack External Generator
------------------------

.. versionadded:: 3.13

CPack provides many generators to create packages for a variety of platforms
and packaging systems. The intention is for CMake/CPack to be a complete
end-to-end solution for building and packaging a software project. However, it
may not always be possible to use CPack for the entire packaging process, due
to either technical limitations or policies that require the use of certain
tools. For this reason, CPack provides the "External" generator, which allows
external packaging software to take advantage of some of the functionality
provided by CPack, such as component installation and the dependency graph.

Integration with External Packaging Tools
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The CPack External generator generates a ``.json`` file containing the
CPack internal metadata, which gives external software information
on how to package the software. External packaging software may itself
invoke CPack, consume the generated metadata,
install and package files as required.

Alternatively CPack can invoke an external packaging software
through an optional custom CMake script in
:variable:`CPACK_EXTERNAL_PACKAGE_SCRIPT` instead.

Staging of installation files may also optionally be
taken care of by the generator when enabled through the
:variable:`CPACK_EXTERNAL_ENABLE_STAGING` variable.

JSON Format
^^^^^^^^^^^

The JSON metadata file contains a list of CPack components and component groups,
the various options passed to :command:`cpack_add_component` and
:command:`cpack_add_component_group`, the dependencies between the components
and component groups, and various other options passed to CPack.

The JSON's root object will always provide two fields:
``formatVersionMajor`` and ``formatVersionMinor``, which are always integers
that describe the output format of the generator. Backwards-compatible changes
to the output format (for example, adding a new field that didn't exist before)
cause the minor version to be incremented, and backwards-incompatible changes
(for example, deleting a field or changing its meaning) cause the major version
to be incremented and the minor version reset to 0. The format version is
always of the format ``major.minor``. In other words, it always has exactly two
parts, separated by a period.

You can request one or more specific versions of the output format as described
below with :variable:`CPACK_EXTERNAL_REQUESTED_VERSIONS`. The output format will
have a major version that exactly matches the requested major version, and a
minor version that is greater than or equal to the requested minor version. If
no version is requested with :variable:`CPACK_EXTERNAL_REQUESTED_VERSIONS`, the
latest known major version is used by default. Currently, the only supported
format is 1.0, which is described below.

Version 1.0
***********

In addition to the standard format fields, format version 1.0 provides the
following fields in the root:

``components``
  The ``components`` field is an object with component names as the keys and
  objects describing the components as the values. The component objects have
  the following fields:

  ``name``
    The name of the component. This is always the same as the key in the
    ``components`` object.

  ``displayName``
    The value of the ``DISPLAY_NAME`` field passed to
    :command:`cpack_add_component`.

  ``description``
    The value of the ``DESCRIPTION`` field passed to
    :command:`cpack_add_component`.

  ``isHidden``
    True if ``HIDDEN`` was passed to :command:`cpack_add_component`, false if
    it was not.

  ``isRequired``
    True if ``REQUIRED`` was passed to :command:`cpack_add_component`, false if
    it was not.

  ``isDisabledByDefault``
    True if ``DISABLED`` was passed to :command:`cpack_add_component`, false if
    it was not.

  ``group``
    Only present if ``GROUP`` was passed to :command:`cpack_add_component`. If
    so, this field is a string value containing the component's group.

  ``dependencies``
    An array of components the component depends on. This contains the values
    in the ``DEPENDS`` argument passed to :command:`cpack_add_component`. If no
    ``DEPENDS`` argument was passed, this is an empty list.

  ``installationTypes``
    An array of installation types the component is part of. This contains the
    values in the ``INSTALL_TYPES`` argument passed to
    :command:`cpack_add_component`. If no ``INSTALL_TYPES`` argument was
    passed, this is an empty list.

  ``isDownloaded``
    True if ``DOWNLOADED`` was passed to :command:`cpack_add_component`, false
    if it was not.

  ``archiveFile``
    The name of the archive file passed with the ``ARCHIVE_FILE`` argument to
    :command:`cpack_add_component`. If no ``ARCHIVE_FILE`` argument was passed,
    this is an empty string.

``componentGroups``
  The ``componentGroups`` field is an object with component group names as the
  keys and objects describing the component groups as the values. The component
  group objects have the following fields:

  ``name``
    The name of the component group. This is always the same as the key in the
    ``componentGroups`` object.

  ``displayName``
    The value of the ``DISPLAY_NAME`` field passed to
    :command:`cpack_add_component_group`.

  ``description``
    The value of the ``DESCRIPTION`` field passed to
    :command:`cpack_add_component_group`.

  ``parentGroup``
    Only present if ``PARENT_GROUP`` was passed to
    :command:`cpack_add_component_group`. If so, this field is a string value
    containing the component group's parent group.

  ``isExpandedByDefault``
    True if ``EXPANDED`` was passed to :command:`cpack_add_component_group`,
    false if it was not.

  ``isBold``
    True if ``BOLD_TITLE`` was passed to :command:`cpack_add_component_group`,
    false if it was not.

  ``components``
    An array of names of components that are direct members of the group
    (components that have this group as their ``GROUP``). Components of
    subgroups are not included.

  ``subgroups``
    An array of names of component groups that are subgroups of the group
    (groups that have this group as their ``PARENT_GROUP``).

``installationTypes``
  The ``installationTypes`` field is an object with installation type names as
  the keys and objects describing the installation types as the values. The
  installation type objects have the following fields:

  ``name``
    The name of the installation type. This is always the same as the key in
    the ``installationTypes`` object.

  ``displayName``
    The value of the ``DISPLAY_NAME`` field passed to
    :command:`cpack_add_install_type`.

  ``index``
    The integer index of the installation type in the list.

``projects``
  The ``projects`` field is an array of objects describing CMake projects which
  comprise the CPack project. The values in this field are derived from
  :variable:`CPACK_INSTALL_CMAKE_PROJECTS`. In most cases, this will be only a
  single project. The project objects have the following fields:

  ``projectName``
    The project name passed to :variable:`CPACK_INSTALL_CMAKE_PROJECTS`.

  ``component``
    The name of the component or component set which comprises the project.

  ``directory``
    The build directory of the CMake project. This is the directory which
    contains the ``cmake_install.cmake`` script.

  ``subDirectory``
    The subdirectory to install the project into inside the CPack package.

``packageName``
  The package name given in :variable:`CPACK_PACKAGE_NAME`. Only present if
  this option is set.

``packageVersion``
  The package version given in :variable:`CPACK_PACKAGE_VERSION`. Only present
  if this option is set.

``packageDescriptionFile``
  The package description file given in
  :variable:`CPACK_PACKAGE_DESCRIPTION_FILE`. Only present if this option is
  set.

``packageDescriptionSummary``
  The package description summary given in
  :variable:`CPACK_PACKAGE_DESCRIPTION_SUMMARY`. Only present if this option is
  set.

``buildConfig``
  The build configuration given to CPack with the :option:`cpack -C` option.
  Only present if this option is set.

``defaultDirectoryPermissions``
  The default directory permissions given in
  :variable:`CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS`. Only present if this
  option is set.

``setDestdir``
  True if :variable:`CPACK_SET_DESTDIR` is true, false if it is not.

``packagingInstallPrefix``
  The install prefix given in :variable:`CPACK_PACKAGING_INSTALL_PREFIX`. Only
  present if :variable:`CPACK_SET_DESTDIR` is true.

``stripFiles``
  True if :variable:`CPACK_STRIP_FILES` is true, false if it is not.

``warnOnAbsoluteInstallDestination``
  True if :variable:`CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION` is true, false
  if it is not.

``errorOnAbsoluteInstallDestination``
  True if :variable:`CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION` is true,
  false if it is not.

Variables specific to CPack External generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. variable:: CPACK_EXTERNAL_REQUESTED_VERSIONS

  This variable is used to request a specific version of the CPack External
  generator. It is a list of ``major.minor`` values, separated by semicolons.

  If this variable is set to a non-empty value, the CPack External generator
  will iterate through each item in the list to search for a version that it
  knows how to generate. Requested versions should be listed in order of
  descending preference by the client software, as the first matching version
  in the list will be generated.

  The generator knows how to generate the version if it has a versioned
  generator whose major version exactly matches the requested major version,
  and whose minor version is greater than or equal to the requested minor
  version. For example, if ``CPACK_EXTERNAL_REQUESTED_VERSIONS`` contains 1.0, and
  the CPack External generator knows how to generate 1.1, it will generate 1.1.
  If the generator doesn't know how to generate a version in the list, it skips
  the version and looks at the next one. If it doesn't know how to generate any
  of the requested versions, an error is thrown.

  If this variable is not set, or is empty, the CPack External generator will
  generate the highest major and minor version that it knows how to generate.

  If an invalid version is encountered in ``CPACK_EXTERNAL_REQUESTED_VERSIONS`` (one
  that doesn't match ``major.minor``, where ``major`` and ``minor`` are
  integers), it is ignored.

.. variable:: CPACK_EXTERNAL_ENABLE_STAGING

  This variable can be set to true to enable optional installation
  into a temporary staging area which can then be picked up
  and packaged by an external packaging tool.
  The top level directory used by CPack for the current packaging
  task is contained in ``CPACK_TOPLEVEL_DIRECTORY``.
  It is automatically cleaned up on each run before packaging is initiated
  and can be used for custom temporary files required by
  the external packaging tool.
  It also contains the staging area ``CPACK_TEMPORARY_DIRECTORY``
  into which CPack performs the installation when staging is enabled.

.. variable:: CPACK_EXTERNAL_PACKAGE_SCRIPT

  This variable can optionally specify the full path to
  a CMake script file to be run as part of the CPack invocation.
  It is invoked after (optional) staging took place and may
  run an external packaging tool. The script has access to
  the variables defined by the CPack config file.

.. variable:: CPACK_EXTERNAL_BUILT_PACKAGES

  .. versionadded:: 3.19

  The ``CPACK_EXTERNAL_PACKAGE_SCRIPT`` script may set this list variable to the
  full paths of generated package files.  CPack will copy these files from the
  staging directory back to the top build directory and possibly produce
  checksum files if the :variable:`CPACK_PACKAGE_CHECKSUM` is set.



/P/🚀 cpack_gen/freebsd.rst
=========================================


CPack FreeBSD Generator
-----------------------

.. versionadded:: 3.10

The built in (binary) CPack FreeBSD (pkg) generator (Unix only)

Variables affecting the CPack FreeBSD (pkg) generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- .. versionadded:: 3.18
    :variable:`CPACK_ARCHIVE_THREADS`

Variables specific to CPack FreeBSD (pkg) generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The CPack FreeBSD generator may be used to create pkg(8) packages -- these may
be used on FreeBSD, DragonflyBSD, NetBSD, OpenBSD, but also on Linux or OSX,
depending on the installed package-management tools -- using :module:`CPack`.

The CPack FreeBSD generator is a :module:`CPack` generator and uses the
:variable:`!CPACK_XXX` variables used by :module:`CPack`. It tries to reuse packaging
information that may already be specified for Debian packages for the
:cpack_gen:`CPack DEB Generator`. It also tries to reuse RPM packaging
information when Debian does not specify.

The CPack FreeBSD generator should work on any host with libpkg installed. The
packages it produces are specific to the host architecture and ABI.

The CPack FreeBSD generator sets package-metadata through
:variable:`!CPACK_FREEBSD_XXX` variables. The CPack FreeBSD generator, unlike the
CPack Deb generator, does not specially support componentized packages; a
single package is created from all the software artifacts created through
CMake.

All of the variables can be set specifically for FreeBSD packaging in
the CPackConfig file or in CMakeLists.txt, but most of them have defaults
that use general settings (e.g. :variable:`CMAKE_PROJECT_NAME`) or Debian-specific
variables when those make sense (e.g. the homepage of an upstream project
is usually unchanged by the flavor of packaging). When there is no Debian
information to fall back on, but the RPM packaging has it, fall back to
the RPM information (e.g. package license).

.. variable:: CPACK_FREEBSD_PACKAGE_NAME

  Sets the package name (in the package manifest, but also affects the
  output filename).

  :Mandatory: Yes
  :Default:

    - :variable:`CPACK_PACKAGE_NAME` (this is always set by CPack itself,
      based on CMAKE_PROJECT_NAME).

.. variable:: CPACK_FREEBSD_PACKAGE_COMMENT

  Sets the package comment. This is the short description displayed by
  pkg(8) in standard "pkg info" output.

  :Mandatory: Yes
  :Default:

    - :variable:`CPACK_PACKAGE_DESCRIPTION_SUMMARY` (this is always set
      by CPack itself, if nothing else sets it explicitly).

.. variable:: CPACK_FREEBSD_PACKAGE_DESCRIPTION

  Sets the package description. This is the long description of the package,
  given by "pkg info" with a specific package as argument.

  :Mandatory: Yes
  :Default:

    - :variable:`CPACK_DEBIAN_PACKAGE_DESCRIPTION` (this may be set already
      for Debian packaging, so it is used as a fallback).
    - :variable:`CPACK_PACKAGE_DESCRIPTION_SUMMARY` (this is always set
      by CPack itself, if nothing else sets it explicitly).
    - :variable:`PROJECT_DESCRIPTION` (this can be set with the ``DESCRIPTION``
      parameter for :command:`project`).

.. variable:: CPACK_FREEBSD_PACKAGE_WWW

  The URL of the web site for this package, preferably (when applicable) the
  site from which the original source can be obtained and any additional
  upstream documentation or information may be found.

  :Mandatory: Yes
  :Default:

   - :variable:`CPACK_PACKAGE_HOMEPAGE_URL`, or if that is not set,
   - :variable:`CPACK_DEBIAN_PACKAGE_HOMEPAGE` (this may be set already
     for Debian packaging, so it is used as a fallback).

  .. versionadded:: 3.12
    The :variable:`!CPACK_PACKAGE_HOMEPAGE_URL` variable.

.. variable:: CPACK_FREEBSD_PACKAGE_LICENSE

  The license, or licenses, which apply to this software package. This must
  be one or more license-identifiers that pkg recognizes as acceptable license
  identifiers (e.g. "GPLv2").

  :Mandatory: Yes
  :Default:

    - :variable:`CPACK_RPM_PACKAGE_LICENSE`

.. variable:: CPACK_FREEBSD_PACKAGE_LICENSE_LOGIC

  This variable is only of importance if there is more than one license.
  The default is "single", which is only applicable to a single license.
  Other acceptable values are determined by pkg -- those are "dual" or "multi" --
  meaning choice (OR) or simultaneous (AND) application of the licenses.

  :Mandatory: No
  :Default: single

.. variable:: CPACK_FREEBSD_PACKAGE_MAINTAINER

  The FreeBSD maintainer (e.g. ``kde@freebsd.org``) of this package.

  :Mandatory: Yes
  :Default: none

.. variable:: CPACK_FREEBSD_PACKAGE_ORIGIN

  The origin (ports label) of this package; for packages built by CPack
  outside of the ports system this is of less importance. The default
  puts the package somewhere under ``misc/``, as a stopgap.

  :Mandatory: Yes
  :Default: ``misc/<package name>``

.. variable:: CPACK_FREEBSD_PACKAGE_CATEGORIES

  The ports categories where this package lives (if it were to be built
  from ports). If none is set a single category is determined based on
  the package origin.

  :Mandatory: Yes
  :Default: derived from ``ORIGIN``

.. variable:: CPACK_FREEBSD_PACKAGE_DEPS

  A list of package origins that should be added as package dependencies.
  These are in the form ``<category>/<packagename>``, e.g. ``x11/libkonq``.
  No version information needs to be provided (this is not included
  in the manifest).

  :Mandatory: No
  :Default: empty



/P/🚀 cpack_gen/innosetup.rst
===========================================


CPack Inno Setup Generator
--------------------------

.. versionadded:: 3.27

Inno Setup is a free installer for Windows programs by Jordan Russell and
Martijn Laan (https://jrsoftware.org/isinfo.php).

This documentation explains Inno Setup generator specific options.

The generator provides a lot of options like components. Unfortunately, not
all features (e.g. component dependencies) are currently supported by
Inno Setup and they're ignored by the generator for now.

CPack requires Inno Setup 6 or greater and only works on Windows.

Variables specific to CPack Inno Setup generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You can use the following variables to change the behavior of the CPack
``INNOSETUP`` generator:


General
"""""""

None of the following variables is required to be set for the Inno Setup
generator to work. If a variable is marked as mandatory below but not set,
its default value is taken.

The variables can also contain Inno Setup constants like ``{app}``. Please
refer to the documentation of Inno Setup for more information.

If you're asked to provide the path to any file, you can always give an
absolute path or in most cases the relative path from the top-level directory
where all files being installed by an :command:`install` instruction reside.

CPack tries to escape quotes and other special characters for you. However,
using special characters could cause problems.

The following variable simplifies the usage of Inno Setup in CMake:

.. variable:: CPACK_INNOSETUP_USE_CMAKE_BOOL_FORMAT

 Inno Setup only uses ``yes`` or ``no`` as boolean formats meanwhile CMake
 uses a lot of alternative formats like ``ON`` or ``OFF``. Having this option
 turned on enables an automatic conversion.

 Consider the following example:

 .. code-block:: cmake

  set(CMAKE_INNOSETUP_SETUP_AllowNoIcons OFF)

 If this option is turned on, the following line will be created in the output
 script: ``AllowNoIcons=no``.
 Else, the following erroneous line will be created: ``AllowNoIcons=OFF``

 The conversion is enabled in every Inno Setup specific variable.

 :Mandatory: Yes
 :Default: ``ON``


Setup Specific Variables
""""""""""""""""""""""""

.. variable:: CPACK_INNOSETUP_ARCHITECTURE

 One of ``x86``, ``x64``, ``arm64`` or ``ia64``. This variable specifies the
 target architecture of the installer. This also affects the Program Files
 folder or registry keys being used.

 CPack tries to determine the correct value with a try compile (see
 :variable:`CMAKE_SIZEOF_VOID_P`), but this option can be manually specified
 too (especially when using ``ia64`` or cross-platform compilation).

 :Mandatory: Yes
 :Default: Either ``x86`` or ``x64`` depending on the results of the try-compile

.. variable:: CPACK_INNOSETUP_INSTALL_ROOT

 If you don't want the installer to create the installation directory under
 Program Files, you've to specify the installation root here.

 The full directory of the installation will be:
 ``${CPACK_INNOSETUP_INSTALL_ROOT}/${CPACK_PACKAGE_INSTALL_DIRECTORY}``.

 :Mandatory: Yes
 :Default: ``{autopf}``

.. variable:: CPACK_INNOSETUP_ALLOW_CUSTOM_DIRECTORY

 If turned on, the installer allows the user to change the installation
 directory providing an extra wizard page.

 :Mandatory: Yes
 :Default: ``ON``

.. variable:: CPACK_INNOSETUP_PROGRAM_MENU_FOLDER

 The initial name of the start menu folder being created.

 If this variable is set to ``.``, then no separate folder is created,
 application shortcuts will appear in the top-level start menu folder.

 :Mandatory: Yes
 :Default: The value of :variable:`CPACK_PACKAGE_NAME`

.. variable:: CPACK_INNOSETUP_LANGUAGES

 A :ref:`semicolon-separated list <CMake Language Lists>` of languages you want
 Inno Setup to include.

 Currently available: ``armenian``, ``brazilianPortuguese``, ``bulgarian``,
 ``catalan``, ``corsican``, ``czech``, ``danish``, ``dutch``, ``english``,
 ``finnish``, ``french``, ``german``, ``hebrew``, ``icelandic``, ``italian``,
 ``japanese``, ``norwegian``, ``polish``, ``portuguese``, ``russian``,
 ``slovak``, ``slovenian``, ``spanish``, ``turkish`` and ``ukrainian``.
 This list might differ depending on the version of Inno Setup.

 :Mandatory: Yes
 :Default: ``english``

.. variable:: CPACK_INNOSETUP_IGNORE_LICENSE_PAGE

 If you don't specify a license file using
 :variable:`CPACK_RESOURCE_FILE_LICENSE`, CPack uses a file for demonstration
 purposes. If you want the installer to ignore license files at all, you can
 enable this option.

 :Mandatory: Yes
 :Default: ``OFF``

.. variable:: CPACK_INNOSETUP_IGNORE_README_PAGE

 If you don't specify a readme file using
 :variable:`CPACK_RESOURCE_FILE_README`, CPack uses a file for demonstration
 purposes. If you want the installer to ignore readme files at all, you can
 enable this option. Make sure the option is disabled when using
 a custom readme file.

 :Mandatory: Yes
 :Default: ``ON``

.. variable:: CPACK_INNOSETUP_PASSWORD

 Enables password protection and file encryption with the given password.

 :Mandatory: No

.. variable:: CPACK_INNOSETUP_USE_MODERN_WIZARD

 Enables the modern look and feel provided by Inno Setup. If this option is
 turned off, the classic style is used instead. Images and icon files are
 also affected.

 :Mandatory: Yes
 :Default: ``OFF`` because of compatibility reasons

.. variable:: CPACK_INNOSETUP_ICON_FILE

 The path to a custom installer ``.ico`` file.

 Use :variable:`CPACK_PACKAGE_ICON` to customize the bitmap file being shown
 in the wizard.

 :Mandatory: No

.. variable:: CPACK_INNOSETUP_SETUP_<directive>

 This group allows adapting any of the ``[Setup]`` section directives provided
 by Inno Setup where ``directive`` is its name.

 Here are some examples:

 .. code-block:: cmake

  set(CPACK_INNOSETUP_SETUP_WizardSmallImageFile "my_bitmap.bmp")
  set(CPACK_INNOSETUP_SETUP_AllowNoIcons OFF) # This requires CPACK_INNOSETUP_USE_CMAKE_BOOL_FORMAT to be on

 All of these variables have higher priority than the others.
 Consider the following example:

 .. code-block:: cmake

  set(CPACK_INNOSETUP_SETUP_Password "admin")
  set(CPACK_INNOSETUP_PASSWORD "secret")

 The password will be ``admin`` at the end because ``CPACK_INNOSETUP_PASSWORD``
 has less priority than ``CPACK_INNOSETUP_SETUP_Password``.

 :Mandatory: No


File Specific Variables
"""""""""""""""""""""""

Although all files being installed by an :command:`install` instruction are
automatically processed and added to the installer, there are some variables
to customize the installation process.

Before using executables (only ``.exe`` or ``.com``) in shortcuts
(e.g. :variable:`CPACK_CREATE_DESKTOP_LINKS`) or ``[Run]`` entries, you've to
add the raw file name (without path and extension) to
:variable:`CPACK_PACKAGE_EXECUTABLES` and create a start menu shortcut
for them.

If you have two files with the same raw name (e.g. ``a/executable.exe`` and
``b/executable.com``), an entry in the section is created twice. This will
result in undefined behavior and is not recommended.

.. variable:: CPACK_INNOSETUP_CUSTOM_INSTALL_INSTRUCTIONS

 This variable should contain a
 :ref:`semicolon-separated list <CMake Language Lists>` of pairs ``path``,
 ``instruction`` and can be used to customize the install command being
 automatically created for each file or directory.

 CPack creates the following Inno Setup instruction for every file...

 .. code-block::

  Source: "absolute\path\to\my_file.txt"; DestDir: "{app}"; Flags: ignoreversion

 ...and the following line for every directory:

 .. code-block::

  Name: "{app}\my_folder"

 You might want to change the destination directory or the flags of
 ``my_file.txt``. Since we can also provide a relative path, the line you'd
 like to have, is the following:

 .. code-block::

  Source: "my_file.txt"; DestDir: "{userdocs}"; Flags: ignoreversion uninsneveruninstall

 You would do this by using ``my_file.txt`` as ``path`` and
 ``Source: "my_file.txt"; DestDir: "{userdocs}"; Flags: ignoreversion uninsneveruninstall``
 as ``instruction``.

 You've to take care of the `escaping problem <https://cmake.org/cmake/help/book/mastering-cmake/chapter/Packaging%20With%20CPack.html#adding-custom-cpack-options>`_.
 So the CMake command would be:

 .. code-block:: cmake

  set(CPACK_INNOSETUP_CUSTOM_INSTALL_INSTRUCTIONS "my_file.txt;Source: \\\"my_file.txt\\\"\\; DestDir: \\\"{userdocs}\\\"\\; Flags: ignoreversion uninsneveruninstall")

 To improve readability, you should go around the escaping problem by using
 :variable:`CPACK_VERBATIM_VARIABLES` or by placing the instruction into a
 separate CPack project config file.

 If you customize the install instruction of a specific file, you lose the
 connection to its component. To go around, manually add
 ``Components: <component>``. You also need to add its shortcuts and ``[Run]``
 entries by yourself in a custom section, since the executable won't be found
 anymore by :variable:`CPACK_PACKAGE_EXECUTABLES`.

 Here's another example (Note: You've to go around the escaping problem for
 the example to work):

 .. code-block:: cmake

  set(CPACK_INNOSETUP_CUSTOM_INSTALL_INSTRUCTIONS
      "component1/my_folder" "Name: \"{userdocs}\\my_folder\"\; Components: component1"
      "component2/my_folder2/my_file.txt" "Source: \"component2\\my_folder2\\my_file.txt\"\; DestDir: \"{app}\\my_folder2\\my_file.txt\"\; Flags: ignoreversion uninsneveruninstall\; Components: component2")

 :Mandatory: No

.. variable:: CPACK_INNOSETUP_MENU_LINKS

 This variable should contain a
 :ref:`semicolon-separated list <CMake Language Lists>` of pairs ``link``,
 ``link name`` and can be used to add shortcuts into the start menu folder
 beside those of the executables (see :variable:`CPACK_PACKAGE_EXECUTABLES`).
 While ``link name`` is the label, ``link`` can be a URL or a path relative to
 the installation directory.

 Here's an example:

 .. code-block:: cmake

  set(CPACK_INNOSETUP_MENU_LINKS
      "doc/cmake-@CMake_VERSION_MAJOR@.@CMake_VERSION_MINOR@/cmake.html"
      "CMake Help" "https://cmake.org" "CMake Web Site")

 :Mandatory: No

.. variable:: CPACK_INNOSETUP_CREATE_UNINSTALL_LINK

 If this option is turned on, a shortcut to the application's uninstaller is
 automatically added to the start menu folder.

 :Mandatory: Yes
 :Default: ``OFF``

.. variable:: CPACK_INNOSETUP_RUN_EXECUTABLES

 A :ref:`semicolon-separated list <CMake Language Lists>` of executables being
 specified in :variable:`CPACK_PACKAGE_EXECUTABLES` which the user can run
 when the installer finishes.

 They're internally added to the ``[Run]`` section.

 :Mandatory: No


Components Specific Variables
"""""""""""""""""""""""""""""

The generator supports components and also downloaded components. However,
there are some features of components that aren't supported yet (especially
component dependencies). These variables are ignored for now.

CPack will change a component's name in Inno Setup if it has a parent group
for technical reasons. Consider using ``group\component`` as component name in
Inno Setup scripts if you have the component ``component`` and its parent
group ``group``.

Here are some additional variables for components:

.. variable::  CPACK_INNOSETUP_<compName>_INSTALL_DIRECTORY

 If you don't want the component ``compName`` to be installed under ``{app}``,
 you've to specify its installation directory here.

 :Mandatory: No

.. variable:: CPACK_INNOSETUP_VERIFY_DOWNLOADS

 This option only affects downloaded components.

 If this option is turned on, the hashes of the downloaded archives are
 calculated during compile and
 download time. The installer will only proceed if they match.

 :Mandatory: Yes
 :Default: ``ON``


Compilation and Scripting Specific Variables
""""""""""""""""""""""""""""""""""""""""""""

.. variable:: CPACK_INNOSETUP_EXECUTABLE

 The filename of the Inno Setup Script Compiler command.

 :Mandatory: Yes
 :Default: ``ISCC``

.. variable:: CPACK_INNOSETUP_EXECUTABLE_ARGUMENTS

 A :ref:`semicolon-separated list <CMake Language Lists>` of extra
 command-line options for the Inno Setup Script Compiler command.

 For example: ``/Qp;/Smysigntool=$p``

 Take care of the `escaping problem <https://cmake.org/cmake/help/book/mastering-cmake/chapter/Packaging%20With%20CPack.html#adding-custom-cpack-options>`_.

 :Mandatory: No

.. variable:: CPACK_INNOSETUP_DEFINE_<macro>

 This group allows to add custom define directives as command-line options to
 the Inno Setup Preprocessor command. Each entry emulates a
 ``#define public <macro>`` directive. Its macro is accessible from anywhere
 (``public``), so it can also be used in extra script files.

 Macro names must not contain any special characters. Refer to the Inno Setup
 Preprocessor documentation for the detailed rules.

 Consider the following example:

 .. code-block:: cmake

  # The following line emulates: #define public MyMacro "Hello, World!"
  set(CPACK_INNOSETUP_DEFINE_MyMacro "Hello, World!")

 At this point, you can use ``MyMacro`` anywhere. For example in the following
 extra script:

 .. code-block::

  AppComments={#emit "'My Macro' has the value: " + MyMacro}

 Take care of the `escaping problem <https://cmake.org/cmake/help/book/mastering-cmake/chapter/Packaging%20With%20CPack.html#adding-custom-cpack-options>`_.

 :Mandatory: No

.. variable:: CPACK_INNOSETUP_EXTRA_SCRIPTS

 A :ref:`semicolon-separated list <CMake Language Lists>` of paths to
 additional ``.iss`` script files to be processed.

 They're internally included at the top of the output script file using a
 ``#include`` directive.

 You can add any section in your file to extend the installer (e.g. adding
 additional tasks or registry keys). Prefer using
 :variable:`CPACK_INNOSETUP_SETUP_<directive>` when extending the
 ``[Setup]`` section.

 :Mandatory: No

.. variable:: CPACK_INNOSETUP_CODE_FILES

 A :ref:`semicolon-separated list <CMake Language Lists>` of paths to
 additional Pascal files to be processed.

 This variable is actually the same as
 :variable:`CPACK_INNOSETUP_EXTRA_SCRIPTS`, except you don't have to
 add ``[Code]`` at the top of your file. Never change the current section in
 a code file. This will result in undefined behavior! Treat them as normal
 Pascal scripts instead.

 Code files are included at the very bottom of the output script.

 :Mandatory: No



/P/🚀 cpack_gen/ifw.rst
=====================================


CPack IFW Generator
-------------------

.. versionadded:: 3.1

Configure and run the Qt Installer Framework to generate a Qt installer.

.. only:: html

  .. contents::

Overview
^^^^^^^^

This :manual:`cpack generator <cpack-generators(7)>` generates
configuration and meta information for the `Qt Installer Framework
<https://doc.qt.io/qtinstallerframework/index.html>`_ (QtIFW),
and runs QtIFW tools to generate a Qt installer.

QtIFW provides tools and utilities to create installers for
the platforms supported by `Qt <https://www.qt.io>`_: Linux,
Microsoft Windows, and macOS.

To make use of this generator, QtIFW needs to be installed.
The :module:`CPackIFW` module looks for the location of the
QtIFW command-line utilities, and defines several commands to
control the behavior of this generator. See `Hints for Finding QtIFW`_.

Variables
^^^^^^^^^

You can use the following variables to change the behavior of the CPack ``IFW``
generator.

Debug
"""""

.. variable:: CPACK_IFW_VERBOSE

 .. versionadded:: 3.3

 Set to ``ON`` to enable addition debug output.
 By default is ``OFF``.

Package
"""""""

.. variable:: CPACK_IFW_PACKAGE_TITLE

 Name of the installer as displayed on the title bar.
 If not specified, it defaults to :variable:`CPACK_PACKAGE_DESCRIPTION_SUMMARY`.

.. variable:: CPACK_IFW_PACKAGE_PUBLISHER

 Publisher of the software (as shown in the Windows Control Panel).
 If not specified, it defaults to :variable:`CPACK_PACKAGE_VENDOR`.

.. variable:: CPACK_IFW_PRODUCT_URL

 URL to a page that contains product information on your web site.

.. variable:: CPACK_IFW_PACKAGE_ICON

 Filename for a custom installer icon. It must be an absolute path.
 This should be a ``.icns`` file on macOS and a ``.ico`` file on Windows.
 It is ignored on other platforms.

.. variable:: CPACK_IFW_PACKAGE_WINDOW_ICON

 Filename for a custom window icon in PNG format for the Installer
 application. It must be an absolute path.

.. variable:: CPACK_IFW_PACKAGE_LOGO

 Filename for a logo image in PNG format, used as ``QWizard::LogoPixmap``.
 It must be an absolute path.

.. variable:: CPACK_IFW_PACKAGE_WATERMARK

 .. versionadded:: 3.8

 Filename for a watermark image in PNG format, used as
 ``QWizard::WatermarkPixmap``. It must be an absolute path.

.. variable:: CPACK_IFW_PACKAGE_BANNER

 .. versionadded:: 3.8

 Filename for a banner image in PNG format, used as ``QWizard::BannerPixmap``.
 It must be an absolute path.

.. variable:: CPACK_IFW_PACKAGE_BACKGROUND

 .. versionadded:: 3.8

 Filename for a background image in PNG format, used as
 ``QWizard::BackgroundPixmap`` (only used by ``MacStyle``). It must be an
 absolute path.

.. variable:: CPACK_IFW_PACKAGE_WIZARD_STYLE

 .. versionadded:: 3.8

 Wizard style to be used (``Modern``, ``Mac``, ``Aero`` or ``Classic``).

.. variable:: CPACK_IFW_PACKAGE_WIZARD_DEFAULT_WIDTH

 .. versionadded:: 3.8

 Default width of the wizard in pixels. Setting a banner image will override
 this.

.. variable:: CPACK_IFW_PACKAGE_WIZARD_DEFAULT_HEIGHT

 .. versionadded:: 3.8

 Default height of the wizard in pixels. Setting a watermark image will
 override this.

.. variable:: CPACK_IFW_PACKAGE_WIZARD_SHOW_PAGE_LIST

 .. versionadded:: 3.20

 Set to ``OFF`` if the widget listing installer pages on the left side of the
 wizard should not be shown.

 It is ``ON`` by default, but will only have an effect if using QtIFW 4.0 or
 later.

.. variable:: CPACK_IFW_PACKAGE_TITLE_COLOR

 .. versionadded:: 3.8

 Color of the titles and subtitles (takes an HTML color code, such as
 ``#88FF33``).

.. variable:: CPACK_IFW_PACKAGE_STYLE_SHEET

 .. versionadded:: 3.15

 Filename for a stylesheet. It must be an absolute path.

.. variable:: CPACK_IFW_TARGET_DIRECTORY

 Default target directory for installation.
 If :variable:`CPACK_PACKAGE_INSTALL_DIRECTORY` is set, this defaults to
 ``@ApplicationsDir@/${CPACK_PACKAGE_INSTALL_DIRECTORY}``. If that variable
 isn't set either, the default used is ``@RootDir@/usr/local``.
 Predefined variables of the form ``@...@`` are expanded by the
 `QtIFW scripting engine <https://doc.qt.io/qtinstallerframework/scripting.html>`_.

.. variable:: CPACK_IFW_ADMIN_TARGET_DIRECTORY

 Default target directory for installation with administrator rights.

 You can use predefined variables.

.. variable:: CPACK_IFW_PACKAGE_REMOVE_TARGET_DIR

 .. versionadded:: 3.11

 Set to ``OFF`` if the target directory should not be deleted when uninstalling.

 Is ``ON`` by default

.. variable:: CPACK_IFW_PACKAGE_GROUP

 The group, which will be used to configure the root package.

.. variable:: CPACK_IFW_PACKAGE_NAME

 The root package name, which will be used if the configuration group is not
 specified.

.. variable:: CPACK_IFW_PACKAGE_START_MENU_DIRECTORY

 .. versionadded:: 3.3

 Name of the default program group for the product in the Windows Start menu.
 If not specified, it defaults to :variable:`CPACK_IFW_PACKAGE_NAME`.

.. variable:: CPACK_IFW_PACKAGE_MAINTENANCE_TOOL_NAME

 .. versionadded:: 3.3

 Filename of the generated maintenance tool.
 The platform-specific executable file extension will be appended.

 If not specified, QtIFW provides a default name (``maintenancetool``).

.. variable:: CPACK_IFW_PACKAGE_MAINTENANCE_TOOL_INI_FILE

 .. versionadded:: 3.3

 Filename for the configuration of the generated maintenance tool.

 If not specified, QtIFW uses a default file name (``maintenancetool.ini``).

.. variable:: CPACK_IFW_PACKAGE_ALLOW_NON_ASCII_CHARACTERS

 .. versionadded:: 3.3

 Set to ``ON`` if the installation path can contain non-ASCII characters.
 Only supported for QtIFW 2.0 and later. Older QtIFW versions will always
 allow non-ASCII characters.

.. variable:: CPACK_IFW_PACKAGE_ALLOW_SPACE_IN_PATH

 .. versionadded:: 3.3

 Set to ``OFF`` if the installation path cannot contain space characters.

 Is ``ON`` for QtIFW less 2.0 tools.

.. variable:: CPACK_IFW_PACKAGE_DISABLE_COMMAND_LINE_INTERFACE

 .. versionadded:: 3.23

 Set to ``ON`` if command line interface features should be disabled.
 It is ``OFF`` by default and will only have an effect if using QtIFW 4.0 or
 later.

.. variable:: CPACK_IFW_PACKAGE_CONTROL_SCRIPT

 .. versionadded:: 3.3

 Filename for a custom installer control script.

.. variable:: CPACK_IFW_PACKAGE_RESOURCES

 .. versionadded:: 3.7

 List of additional resources (``.qrc`` files) to include in the installer
 binary. They should be specified as absolute paths and no two resource files
 can have the same file name.

 You can use the :command:`cpack_ifw_add_package_resources` command to resolve
 relative paths.

.. variable:: CPACK_IFW_PACKAGE_FILE_EXTENSION

 .. versionadded:: 3.10

 The target binary extension.

 On Linux, the name of the target binary is automatically extended with
 ``.run``, if you do not specify the extension.

 On Windows, the target is created as an application with the extension
 ``.exe``, which is automatically added, if not supplied.

 On Mac, the target is created as an DMG disk image with the extension
 ``.dmg``, which is automatically added, if not supplied.

.. variable:: CPACK_IFW_REPOSITORIES_ALL

 The list of remote repositories.

 The default value of this variable is computed by CPack and contains
 all repositories added with :command:`cpack_ifw_add_repository`
 or updated with :command:`cpack_ifw_update_repository`.

.. variable:: CPACK_IFW_DOWNLOAD_ALL

 If this is ``ON``, all components will be downloaded. If not set, the
 behavior is determined by whether :command:`cpack_configure_downloads` has
 been called with the ``ALL`` option or not.

.. variable:: CPACK_IFW_PACKAGE_PRODUCT_IMAGES

 .. versionadded:: 3.23

 A list of images to be shown on the ``PerformInstallationPage``. These
 must be absolute paths and the images must be in PNG format.

 This feature is available for QtIFW 4.0.0 and later.

.. variable:: CPACK_IFW_PACKAGE_RUN_PROGRAM

 .. versionadded:: 3.23

 Command executed after the installer is finished, if the user accepts the
 action. Provide the full path to the application, as found when installed.
 This typically means the path should begin with the QtIFW predefined variable
 ``@TargetDir@``.

 This feature is available for QtIFW 4.0.0 and later.

.. variable:: CPACK_IFW_PACKAGE_RUN_PROGRAM_ARGUMENTS

 .. versionadded:: 3.23

 List of arguments passed to the program specified in
 :variable:`CPACK_IFW_PACKAGE_RUN_PROGRAM`.

 This feature is available for QtIFW 4.0.0 and later.

.. variable:: CPACK_IFW_PACKAGE_RUN_PROGRAM_DESCRIPTION

 .. versionadded:: 3.23

 Text shown next to the check box for running the program after the
 installation. If :variable:`CPACK_IFW_PACKAGE_RUN_PROGRAM` is set but no
 description is provided, QtIFW will use a default message like
 ``Run <Name> now``.

 This feature is available for QtIFW 4.0.0 and later.

.. variable:: CPACK_IFW_PACKAGE_SIGNING_IDENTITY

 .. versionadded:: 3.23

 Allows specifying a code signing identity to be used for signing the generated
 app bundle. Only available on macOS, ignored on other platforms.

.. variable:: CPACK_IFW_ARCHIVE_FORMAT

 .. versionadded:: 3.23

 Set the format used when packaging new component data archives. If you omit
 this option, the ``7z`` format will be used as a default. Supported formats:

 * 7z
 * zip
 * tar.gz
 * tar.bz2
 * tar.xz

 .. note::

  If the Qt Installer Framework tools were built without libarchive support,
  only ``7z`` format is supported.

 This feature is available for QtIFW 4.2.0 and later.

.. variable:: CPACK_IFW_ARCHIVE_COMPRESSION

 .. versionadded:: 3.23

 Archive compression level. The allowable values are:

  * 0 (*No compression*)
  * 1 (*Fastest compression*)
  * 3 (*Fast compression*)
  * 5 (*Normal compression*)
  * 7 (*Maximum compression*)
  * 9 (*Ultra compression*)

 If this variable is not set, QtIFW will use a default compression level,
 which will typically be 5 (*Normal compression*).

 .. note::

  Some formats do not support all the possible values. For example ``zip``
  compression only supports values from 1 to 7.

 This feature is available for QtIFW 4.2.0 and later.

Components
""""""""""

.. variable:: CPACK_IFW_RESOLVE_DUPLICATE_NAMES

 Resolve duplicate names when installing components with groups.

.. variable:: CPACK_IFW_PACKAGES_DIRECTORIES

 Additional prepared packages directories that will be used to resolve
 dependent components.

.. variable:: CPACK_IFW_REPOSITORIES_DIRECTORIES

 .. versionadded:: 3.10

 Additional prepared repository directories that will be used to resolve and
 repack dependent components.

 This feature is available for QtIFW 3.1 and later.

QtIFW Tools
"""""""""""

.. variable:: CPACK_IFW_FRAMEWORK_VERSION

 .. versionadded:: 3.3

 The version of the QtIFW tools that will be used. This variable is set
 by the :module:`CPackIFW` module.

The following variables provide the locations of the QtIFW
command-line tools as discovered by the :module:`CPackIFW` module.
These variables are cached, and may be configured if needed.

.. variable:: CPACK_IFW_ARCHIVEGEN_EXECUTABLE

 .. versionadded:: 3.19

 The path to ``archivegen``.

.. variable:: CPACK_IFW_BINARYCREATOR_EXECUTABLE

 The path to ``binarycreator``.

.. variable:: CPACK_IFW_REPOGEN_EXECUTABLE

 The path to ``repogen``.

.. variable:: CPACK_IFW_INSTALLERBASE_EXECUTABLE

 The path to ``installerbase``.

.. variable:: CPACK_IFW_DEVTOOL_EXECUTABLE

 The path to ``devtool``.

Hints for Finding QtIFW
"""""""""""""""""""""""

Generally, the CPack ``IFW`` generator automatically finds QtIFW tools.
The following (in order of precedence) can also be set to augment the
locations normally searched by :command:`find_program`:

.. variable:: CPACK_IFW_ROOT

  .. versionadded:: 3.9

  CMake variable

.. envvar:: CPACK_IFW_ROOT

  .. versionadded:: 3.9

  Environment variable

.. variable:: QTIFWDIR

  CMake variable

.. envvar:: QTIFWDIR

  Environment variable

.. note::
  The specified path should not contain ``bin`` at the end
  (for example: ``D:\\DevTools\\QtIFW2.0.5``).

Other Settings
^^^^^^^^^^^^^^

Online installer
""""""""""""""""

By default, this generator generates an *offline installer*. This means
that all packaged files are fully contained in the installer executable.

In contrast, an *online installer* will download some or all components from
a remote server.

The ``DOWNLOADED`` option in the :command:`cpack_add_component` command
specifies that a component is to be downloaded. Alternatively, the ``ALL``
option in the :command:`cpack_configure_downloads` command specifies that
`all` components are to be be downloaded.

The :command:`cpack_ifw_add_repository` command and the
:variable:`CPACK_IFW_DOWNLOAD_ALL` variable allow for more specific
configuration.

When there are online components, CPack will write them to archive files.
The help page of the :module:`CPackComponent` module, especially the section
on the :command:`cpack_configure_downloads` function, explains how to make
these files accessible from a download URL.

Internationalization
""""""""""""""""""""

.. versionadded:: 3.9

Some variables and command arguments support internationalization via
CMake script. This is an optional feature.

Installers created by QtIFW tools have built-in support for
internationalization and many phrases are localized to many languages,
but this does not apply to the description of your components and groups.

Localization of the description of your components and groups is useful for
users of your installers.

A localized variable or argument can contain a single default value, and
after that a set of pairs with the name of the locale and the localized value.

For example:

.. code-block:: cmake

   set(LOCALIZABLE_VARIABLE "Default value"
     en "English value"
     en_US "American value"
     en_GB "Great Britain value"
     )

See Also
^^^^^^^^

Qt Installer Framework Manual:

* Index page:
  https://doc.qt.io/qtinstallerframework/index.html

* Component Scripting:
  https://doc.qt.io/qtinstallerframework/scripting.html

* Predefined Variables:
  https://doc.qt.io/qtinstallerframework/scripting.html#predefined-variables

* Promoting Updates:
  https://doc.qt.io/qtinstallerframework/ifw-updates.html

Download Qt Installer Framework for your platform from Qt site:
 https://download.qt.io/official_releases/qt-installer-framework



/P/🚀 cpack_gen/nsis.rst
======================================


CPack NSIS Generator
--------------------

CPack Nullsoft Scriptable Install System (NSIS) generator specific options.

.. versionchanged:: 3.22
 The NSIS generator requires NSIS 3.03 or newer.

Variables specific to CPack NSIS generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following variables are specific to the graphical installers built
on Windows Nullsoft Scriptable Install System.

.. variable:: CPACK_NSIS_INSTALL_ROOT

 The default installation directory presented to the end user by the NSIS
 installer is under this root dir. The full directory presented to the end
 user is: ``${CPACK_NSIS_INSTALL_ROOT}/${CPACK_PACKAGE_INSTALL_DIRECTORY}``

.. variable:: CPACK_NSIS_MUI_ICON

 An icon filename.  The name of a ``*.ico`` file used as the main icon for the
 generated install program.

.. variable:: CPACK_NSIS_MUI_UNIICON

 An icon filename.  The name of a ``*.ico`` file used as the main icon for the
 generated uninstall program.

.. variable:: CPACK_NSIS_INSTALLER_MUI_ICON_CODE

 undocumented.

.. variable:: CPACK_NSIS_MUI_WELCOMEFINISHPAGE_BITMAP

 .. versionadded:: 3.5

 The filename of a bitmap to use as the NSIS ``MUI_WELCOMEFINISHPAGE_BITMAP``.

.. variable:: CPACK_NSIS_MUI_UNWELCOMEFINISHPAGE_BITMAP

 .. versionadded:: 3.5

 The filename of a bitmap to use as the NSIS ``MUI_UNWELCOMEFINISHPAGE_BITMAP``.

.. variable:: CPACK_NSIS_EXTRA_PREINSTALL_COMMANDS

 Extra NSIS commands that will be added to the beginning of the install
 Section, before your install tree is available on the target system.

.. variable:: CPACK_NSIS_EXTRA_INSTALL_COMMANDS

 Extra NSIS commands that will be added to the end of the install Section,
 after your install tree is available on the target system.

.. variable:: CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS

 Extra NSIS commands that will be added to the uninstall Section, before
 your install tree is removed from the target system.

.. variable:: CPACK_NSIS_COMPRESSOR

 The arguments that will be passed to the NSIS `SetCompressor` command.

.. variable:: CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL

 Ask about uninstalling previous versions first.  If this is set to ``ON``,
 then an installer will look for previous installed versions and if one is
 found, ask the user whether to uninstall it before proceeding with the
 install.

.. variable:: CPACK_NSIS_MODIFY_PATH

 Modify ``PATH`` toggle.  If this is set to ``ON``, then an extra page will appear
 in the installer that will allow the user to choose whether the program
 directory should be added to the system ``PATH`` variable.

.. variable:: CPACK_NSIS_DISPLAY_NAME

 The display name string that appears in the Windows `Apps & features`
 in `Control Panel`

.. variable:: CPACK_NSIS_PACKAGE_NAME

 The title displayed at the top of the installer.

.. variable:: CPACK_NSIS_INSTALLED_ICON_NAME

 A path to the executable that contains the installer icon.

.. variable:: CPACK_NSIS_HELP_LINK

 URL to a web site providing assistance in installing your application.

.. variable:: CPACK_NSIS_URL_INFO_ABOUT

 URL to a web site providing more information about your application.

.. variable:: CPACK_NSIS_CONTACT

 Contact information for questions and comments about the installation
 process.

.. variable:: CPACK_NSIS_<compName>_INSTALL_DIRECTORY

 .. versionadded:: 3.7

 Custom install directory for the specified component ``<compName>`` instead
 of ``$INSTDIR``.

.. variable:: CPACK_NSIS_CREATE_ICONS_EXTRA

 Additional NSIS commands for creating `Start Menu` shortcuts.

.. variable:: CPACK_NSIS_DELETE_ICONS_EXTRA

 Additional NSIS commands to uninstall `Start Menu` shortcuts.

.. variable:: CPACK_NSIS_EXECUTABLES_DIRECTORY

 Creating NSIS `Start Menu` links assumes that they are in ``bin`` unless this
 variable is set.  For example, you would set this to ``exec`` if your
 executables are in an exec directory.

.. variable:: CPACK_NSIS_MUI_FINISHPAGE_RUN

 Specify an executable to add an option to run on the finish page of the
 NSIS installer.

.. variable:: CPACK_NSIS_MENU_LINKS

 Specify links in ``[application]`` menu.  This should contain a list of pair
 ``link`` ``link name``. The link may be a URL or a path relative to
 installation prefix.  Like::

  set(CPACK_NSIS_MENU_LINKS
      "doc/cmake-@CMake_VERSION_MAJOR@.@CMake_VERSION_MINOR@/cmake.html"
      "CMake Help" "https://cmake.org" "CMake Web Site")

.. variable:: CPACK_NSIS_UNINSTALL_NAME

 .. versionadded:: 3.17

 Specify the name of the program to uninstall the version.
 Default is ``Uninstall``.

.. variable:: CPACK_NSIS_WELCOME_TITLE

  .. versionadded:: 3.17

  The title to display on the top of the page for the welcome page.

.. variable:: CPACK_NSIS_WELCOME_TITLE_3LINES

 .. versionadded:: 3.17

 Display the title in the welcome page on 3 lines instead of 2.

.. variable:: CPACK_NSIS_FINISH_TITLE

 .. versionadded:: 3.17

 The title to display on the top of the page for the finish page.

.. variable:: CPACK_NSIS_FINISH_TITLE_3LINES

 .. versionadded:: 3.17

 Display the title in the finish page on 3 lines instead of 2.

.. variable:: CPACK_NSIS_MUI_HEADERIMAGE

 .. versionadded:: 3.17

 The image to display on the header of installers pages.

.. variable:: CPACK_NSIS_MANIFEST_DPI_AWARE

 .. versionadded:: 3.18

 If set, declares that the installer is DPI-aware.

.. variable:: CPACK_NSIS_BRANDING_TEXT

 .. versionadded:: 3.20

 If set, updates the text at the bottom of the install window.
 To set the string to blank, use a space (" ").

.. variable:: CPACK_NSIS_BRANDING_TEXT_TRIM_POSITION

 .. versionadded:: 3.20

 If set, trim down the size of the control to the size of the branding text string.
 Allowed values for this variable are ``LEFT``, ``CENTER`` or ``RIGHT``.
 If not specified, the default behavior is ``LEFT``.

.. variable:: CPACK_NSIS_EXECUTABLE

 .. versionadded:: 3.21

 If set, specify the name of the NSIS executable. Default is ``makensis``.

.. variable:: CPACK_NSIS_IGNORE_LICENSE_PAGE

 .. versionadded:: 3.22

 If set, do not display the page containing the license during installation.

.. variable:: CPACK_NSIS_EXECUTABLE_PRE_ARGUMENTS

 .. versionadded:: 3.25

 This variable is a :ref:`semicolon-separated list <CMake Language Lists>` of
 arguments to prepend to the nsis script to run.
 If the arguments do not start with a ``/`` or a ``-``, it will add one
 automatically to the corresponding arguments.
 The command that will be run is::

    makensis.exe <preArgs>... "nsisFileName.nsi" <postArgs>...

 where ``<preArgs>...`` is constructed from ``CPACK_NSIS_EXECUTABLE_PRE_ARGUMENTS``
 and ``<postArgs>...``  is constructed from ``CPACK_NSIS_EXECUTABLE_POST_ARGUMENTS``.


.. variable:: CPACK_NSIS_EXECUTABLE_POST_ARGUMENTS

 .. versionadded:: 3.25

 This variable is a :ref:`semicolon-separated list <CMake Language Lists>` of
 arguments to append to the nsis script to run.
 If the arguments do not start with a ``/`` or a ``-``, it will add one
 automatically to the corresponding arguments.
 The command that will be run is::

    makensis.exe <preArgs>... "nsisFileName.nsi" <postArgs>...

 where ``<preArgs>...`` is constructed from ``CPACK_NSIS_EXECUTABLE_PRE_ARGUMENTS``
 and ``<postArgs>...``  is constructed from ``CPACK_NSIS_EXECUTABLE_POST_ARGUMENTS``.



/P/🚀 cpack_gen/nuget.rst
=======================================


CPack NuGet Generator
---------------------

.. versionadded:: 3.12

When build a NuGet package there is no direct way to control an output
filename due a lack of the corresponding CLI option of NuGet, so there
is no :variable:`!CPACK_NUGET_PACKAGE_FILE_NAME` variable. To form the output filename
NuGet uses the package name and the version according to its built-in rules.

Also, be aware that including a top level directory
(:variable:`CPACK_INCLUDE_TOPLEVEL_DIRECTORY`) is ignored by this generator.


Variables specific to CPack NuGet generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The CPack NuGet generator may be used to create NuGet packages using
:module:`CPack`. The CPack NuGet generator is a :module:`CPack` generator thus
it uses the :variable:`!CPACK_XXX` variables used by :module:`CPack`.

The CPack NuGet generator has specific features which are controlled by the
specifics :variable:`!CPACK_NUGET_XXX` variables. In the "one per group" mode
(see :variable:`CPACK_COMPONENTS_GROUPING`), ``<compName>`` placeholder
in the variables below would contain a group name (uppercased and turned into
a "C" identifier).

List of CPack NuGet generator specific variables:

.. variable:: CPACK_NUGET_COMPONENT_INSTALL

 Enable component packaging for CPack NuGet generator

 :Mandatory: No
 :Default: ``OFF``

.. variable:: CPACK_NUGET_PACKAGE_NAME
              CPACK_NUGET_<compName>_PACKAGE_NAME

 The NUGET package name. ``CPACK_NUGET_PACKAGE_NAME`` is used as the
 package ``id`` on nuget.org_

 :Mandatory: Yes
 :Default: :variable:`CPACK_PACKAGE_NAME`

.. variable:: CPACK_NUGET_PACKAGE_VERSION
              CPACK_NUGET_<compName>_PACKAGE_VERSION

 The NuGet package version.

 :Mandatory: Yes
 :Default: :variable:`CPACK_PACKAGE_VERSION`

.. variable:: CPACK_NUGET_PACKAGE_DESCRIPTION
              CPACK_NUGET_<compName>_PACKAGE_DESCRIPTION

 A long description of the package for UI display.

 :Mandatory: Yes
 :Default:

    - :variable:`CPACK_COMPONENT_<compName>_DESCRIPTION`,
    - :variable:`!CPACK_COMPONENT_GROUP_<groupName>_DESCRIPTION`,
    - :variable:`CPACK_PACKAGE_DESCRIPTION`

.. variable:: CPACK_NUGET_PACKAGE_AUTHORS
              CPACK_NUGET_<compName>_PACKAGE_AUTHORS

 A comma-separated list of packages authors, matching the profile names
 on nuget.org_. These are displayed in the NuGet Gallery on
 nuget.org_ and are used to cross-reference packages by the same
 authors.

 :Mandatory: Yes
 :Default: :variable:`CPACK_PACKAGE_VENDOR`

.. variable:: CPACK_NUGET_PACKAGE_TITLE
              CPACK_NUGET_<compName>_PACKAGE_TITLE

 A human-friendly title of the package, typically used in UI displays
 as on nuget.org_ and the Package Manager in Visual Studio. If not
 specified, the package ID is used.

 :Mandatory: No
 :Default:

    - :variable:`CPACK_COMPONENT_<compName>_DISPLAY_NAME`,
    - :variable:`!CPACK_COMPONENT_GROUP_<groupName>_DISPLAY_NAME`

.. variable:: CPACK_NUGET_PACKAGE_OWNERS
              CPACK_NUGET_<compName>_PACKAGE_OWNERS

 A comma-separated list of the package creators using profile names
 on nuget.org_. This is often the same list as in authors,
 and is ignored when uploading the package to nuget.org_.

 :Mandatory: No
 :Default: None

.. variable:: CPACK_NUGET_PACKAGE_HOMEPAGE_URL
              CPACK_NUGET_<compName>_PACKAGE_HOMEPAGE_URL

 An URL for the package's home page, often shown in UI displays as well
 as nuget.org_.

 :Mandatory: No
 :Default: :variable:`CPACK_PACKAGE_HOMEPAGE_URL`

.. variable:: CPACK_NUGET_PACKAGE_LICENSEURL
              CPACK_NUGET_<compName>_PACKAGE_LICENSEURL

 .. deprecated:: 3.20
  Use a local license file
  (:variable:`CPACK_NUGET_PACKAGE_LICENSE_FILE_NAME`)
  or a `SPDX license identifier`_
  (:variable:`CPACK_NUGET_PACKAGE_LICENSE_EXPRESSION`) instead.

 An URL for the package's license, often shown in UI displays as well
 as on nuget.org_.

 :Mandatory: No
 :Default: None

.. variable:: CPACK_NUGET_PACKAGE_LICENSE_EXPRESSION
              CPACK_NUGET_<compName>_PACKAGE_LICENSE_EXPRESSION

 .. versionadded:: 3.20

 A Software Package Data Exchange `SPDX license identifier`_ such as
 ``MIT``, ``BSD-3-Clause``, or ``LGPL-3.0-or-later``. In the case of a
 choice of licenses or more complex restrictions, compound license
 expressions may be formed using boolean operators, for example
 ``MIT OR BSD-3-Clause``.  See the `SPDX specification`_ for guidance
 on forming complex license expressions.

 If :variable:`CPACK_NUGET_PACKAGE_LICENSE_FILE_NAME` is specified,
 :variable:`!CPACK_NUGET_PACKAGE_LICENSE_EXPRESSION` is ignored.

 :Mandatory: No
 :Default: None

.. variable:: CPACK_NUGET_PACKAGE_LICENSE_FILE_NAME
              CPACK_NUGET_<compName>_PACKAGE_LICENSE_FILE_NAME

 The package's license file in :file:`.txt` or :file:`.md` format.

 If :variable:`!CPACK_NUGET_PACKAGE_LICENSE_FILE_NAME` is specified,
 :variable:`!CPACK_NUGET_PACKAGE_LICENSE_EXPRESSION` is ignored.

 .. versionadded:: 3.20

 :Mandatory: No
 :Default: None

.. variable:: CPACK_NUGET_PACKAGE_ICONURL
              CPACK_NUGET_<compName>_PACKAGE_ICONURL

 .. deprecated:: 3.20
  Use a local icon file (:variable:`CPACK_NUGET_PACKAGE_ICON`) instead.

 An URL for a 64x64 image with transparency background to use as the
 icon for the package in UI display.

 :Mandatory: No
 :Default: None

.. variable:: CPACK_NUGET_PACKAGE_REQUIRE_LICENSE_ACCEPTANCE

 When set to a true value, the user will be prompted to accept the license
 before installing the package.

 :Mandatory: No
 :Default: None

.. variable:: CPACK_NUGET_PACKAGE_ICON
              CPACK_NUGET_<compName>_PACKAGE_ICON

 .. versionadded:: 3.20

 The filename of a 64x64 image with transparency background to use as the
 icon for the package in UI display.

 :Mandatory: No
 :Default: None

.. variable:: CPACK_NUGET_PACKAGE_DESCRIPTION_SUMMARY
              CPACK_NUGET_<compName>_PACKAGE_DESCRIPTION_SUMMARY

 A short description of the package for UI display. If omitted, a
 truncated version of description is used.

 :Mandatory: No
 :Default: :variable:`CPACK_PACKAGE_DESCRIPTION_SUMMARY`

.. variable:: CPACK_NUGET_PACKAGE_RELEASE_NOTES
              CPACK_NUGET_<compName>_PACKAGE_RELEASE_NOTES

 A description of the changes made in this release of the package,
 often used in UI like the Updates tab of the Visual Studio Package
 Manager in place of the package description.

 :Mandatory: No
 :Default: None

.. variable:: CPACK_NUGET_PACKAGE_COPYRIGHT
              CPACK_NUGET_<compName>_PACKAGE_COPYRIGHT

 Copyright details for the package.

 :Mandatory: No
 :Default: None

.. variable:: CPACK_NUGET_PACKAGE_LANGUAGE
              CPACK_NUGET_<compName>_PACKAGE_LANGUAGE

 .. versionadded:: 3.20

 Locale specifier for the package, for example ``en_CA``.

 :Mandatory: No
 :Default: None

.. variable:: CPACK_NUGET_PACKAGE_TAGS
              CPACK_NUGET_<compName>_PACKAGE_TAGS

 A space-delimited list of tags and keywords that describe the
 package and aid discoverability of packages through search and
 filtering.

 :Mandatory: No
 :Default: None

.. variable:: CPACK_NUGET_PACKAGE_DEPENDENCIES
              CPACK_NUGET_<compName>_PACKAGE_DEPENDENCIES

 A list of package dependencies.

 :Mandatory: No
 :Default: None

.. variable:: CPACK_NUGET_PACKAGE_DEPENDENCIES_<dependency>_VERSION
              CPACK_NUGET_<compName>_PACKAGE_DEPENDENCIES_<dependency>_VERSION

 A `version specification`_ for the particular dependency, where
 ``<dependency>`` is an item of the dependency list (see above)
 transformed with :command:`string(MAKE_C_IDENTIFIER)` command.

 :Mandatory: No
 :Default: None

.. variable:: CPACK_NUGET_PACKAGE_DEBUG

 Enable debug messages while executing CPack NuGet generator.

 :Mandatory: No
 :Default: ``OFF``


.. _nuget.org: https://www.nuget.org
.. _version specification: https://learn.microsoft.com/en-us/nuget/concepts/package-versioning#version-ranges
.. _SPDX license identifier: https://spdx.org/licenses
.. _SPDX specification: https://spdx.github.io/spdx-spec/v2.3/SPDX-license-expressions

.. NuGet spec docs https://docs.microsoft.com/en-us/nuget/reference/nuspec



/P/🚀 cpack_gen/packagemaker.rst
==============================================


CPack PackageMaker Generator
----------------------------

Removed.  This once generated PackageMaker installers, but the
generator has been removed since CMake 3.24.  Xcode no longer distributes
the PackageMaker tools.  Use the :cpack_gen:`CPack productbuild Generator`
instead.



/P/🚀 cpack_gen/productbuild.rst
==============================================


CPack productbuild Generator
----------------------------

.. versionadded:: 3.7

productbuild CPack generator (macOS).

Variables specific to CPack productbuild generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following variable is specific to installers built on Mac
macOS using ProductBuild:

.. variable:: CPACK_COMMAND_PRODUCTBUILD

 Path to the ``productbuild(1)`` command used to generate a product archive for
 the macOS Installer or Mac App Store.  This variable can be used to override
 the automatically detected command (or specify its location if the
 auto-detection fails to find it).

.. variable:: CPACK_PRODUCTBUILD_IDENTIFIER

 .. versionadded:: 3.23

 Set the unique (non-localized) product identifier to be associated with the
 product (i.e., ``com.kitware.cmake``). Any component product names will be
 appended to this value.

.. variable:: CPACK_PRODUCTBUILD_IDENTITY_NAME

 .. versionadded:: 3.8

 Adds a digital signature to the resulting package.


.. variable:: CPACK_PRODUCTBUILD_KEYCHAIN_PATH

 .. versionadded:: 3.8

 Specify a specific keychain to search for the signing identity.


.. variable:: CPACK_COMMAND_PKGBUILD

 Path to the ``pkgbuild(1)`` command used to generate an macOS component package
 on macOS.  This variable can be used to override the automatically detected
 command (or specify its location if the auto-detection fails to find it).


.. variable:: CPACK_PKGBUILD_IDENTITY_NAME

 .. versionadded:: 3.8

 Adds a digital signature to the resulting package.


.. variable:: CPACK_PKGBUILD_KEYCHAIN_PATH

 .. versionadded:: 3.8

 Specify a specific keychain to search for the signing identity.


.. variable:: CPACK_PREFLIGHT_<COMP>_SCRIPT

 Full path to a file that will be used as the ``preinstall`` script for the
 named ``<COMP>`` component's package, where ``<COMP>`` is the uppercased
 component name.  No ``preinstall`` script is added if this variable is not
 defined for a given component.


.. variable:: CPACK_POSTFLIGHT_<COMP>_SCRIPT

 Full path to a file that will be used as the ``postinstall`` script for the
 named ``<COMP>`` component's package, where ``<COMP>`` is the uppercased
 component name.  No ``postinstall`` script is added if this variable is not
 defined for a given component.

.. variable:: CPACK_PRODUCTBUILD_RESOURCES_DIR

 .. versionadded:: 3.9

 If specified the productbuild generator copies files from this directory
 (including subdirectories) to the ``Resources`` directory. This is done
 before the :variable:`CPACK_RESOURCE_FILE_WELCOME`,
 :variable:`CPACK_RESOURCE_FILE_README`, and
 :variable:`CPACK_RESOURCE_FILE_LICENSE` files are copied.

.. variable:: CPACK_PRODUCTBUILD_DOMAINS

 .. versionadded:: 3.23

 This option enables more granular control over where the product may be
 installed. When it is set to true (see policy :policy:`CMP0161`), a
 ``domains`` element of the following form will be added to the
 productbuild Distribution XML:

 .. code-block:: xml

    <domains enable_anywhere="true" enable_currentUserHome="false" enable_localSystem="true"/>

 The default values are as shown above, but can be overridden with
 :variable:`CPACK_PRODUCTBUILD_DOMAINS_ANYWHERE`,
 :variable:`CPACK_PRODUCTBUILD_DOMAINS_USER`, and
 :variable:`CPACK_PRODUCTBUILD_DOMAINS_ROOT`.

.. variable:: CPACK_PRODUCTBUILD_DOMAINS_ANYWHERE

 .. versionadded:: 3.23

 May be used to override the ``enable_anywhere`` attribute in the ``domains``
 element of the Distribution XML. When set to true, the product can be
 installed at the root of any volume, including non-system volumes.

 :variable:`CPACK_PRODUCTBUILD_DOMAINS` must be set to true for this variable
 to have any effect.

.. variable:: CPACK_PRODUCTBUILD_DOMAINS_USER

 .. versionadded:: 3.23

 May be used to override the ``enable_currentUserHome`` attribute in the
 ``domains`` element of the Distribution XML. When set to true, the product
 can be installed into the current user's home directory. Note that when
 installing into the user's home directory, the following additional
 requirements will apply:

 * The installer may not write outside the user's home directory.
 * The install will be performed as the current user rather than as ``root``.
   This may have ramifications for :variable:`CPACK_PREFLIGHT_<COMP>_SCRIPT`
   and :variable:`CPACK_POSTFLIGHT_<COMP>_SCRIPT`.
 * Administrative privileges will not be needed to perform the install.

 :variable:`CPACK_PRODUCTBUILD_DOMAINS` must be set to true for this variable
 to have any effect.

.. variable:: CPACK_PRODUCTBUILD_DOMAINS_ROOT

 .. versionadded:: 3.23

 May be used to override the ``enable_localSystem`` attribute in the
 ``domains`` element of the Distribution XML. When set to true, the product
 can be installed in the root directory. This should normally be set to true
 unless the product should only be installed to the user's home directory.

 :variable:`CPACK_PRODUCTBUILD_DOMAINS` must be set to true for this variable
 to have any effect.

Background Image
""""""""""""""""

.. versionadded:: 3.17

This group of variables controls the background image of the generated
installer.

.. variable:: CPACK_PRODUCTBUILD_BACKGROUND

 Adds a background to Distribution XML if specified. The value contains the
 path to image in ``Resources`` directory.

.. variable:: CPACK_PRODUCTBUILD_BACKGROUND_ALIGNMENT

 Adds an ``alignment`` attribute to the background in Distribution XML.
 Refer to Apple documentation for valid values.

.. variable:: CPACK_PRODUCTBUILD_BACKGROUND_SCALING

 Adds a ``scaling`` attribute to the background in Distribution XML.
 Refer to Apple documentation for valid values.

.. variable:: CPACK_PRODUCTBUILD_BACKGROUND_MIME_TYPE

 Adds a ``mime-type`` attribute to the background in Distribution XML.
 The option contains MIME type of an image.

.. variable:: CPACK_PRODUCTBUILD_BACKGROUND_UTI

 Adds an ``uti`` attribute to the background in Distribution XML.
 The option contains UTI type of an image.

.. variable:: CPACK_PRODUCTBUILD_BACKGROUND_DARKAQUA

 Adds a background for the Dark Aqua theme to Distribution XML if
 specified. The value contains the path to image in ``Resources``
 directory.

.. variable:: CPACK_PRODUCTBUILD_BACKGROUND_DARKAQUA_ALIGNMENT

 Does the same as :variable:`CPACK_PRODUCTBUILD_BACKGROUND_ALIGNMENT` option,
 but for the dark theme.

.. variable:: CPACK_PRODUCTBUILD_BACKGROUND_DARKAQUA_SCALING

 Does the same as :variable:`CPACK_PRODUCTBUILD_BACKGROUND_SCALING` option,
 but for the dark theme.

.. variable:: CPACK_PRODUCTBUILD_BACKGROUND_DARKAQUA_MIME_TYPE

 Does the same as :variable:`CPACK_PRODUCTBUILD_BACKGROUND_MIME_TYPE` option,
 but for the dark theme.

.. variable:: CPACK_PRODUCTBUILD_BACKGROUND_DARKAQUA_UTI

 Does the same as :variable:`CPACK_PRODUCTBUILD_BACKGROUND_UTI` option,
 but for the dark theme.

Distribution XML Template
^^^^^^^^^^^^^^^^^^^^^^^^^

CPack uses a template file to generate the ``distribution.dist`` file used
internally by this package generator. Ordinarily, CMake provides the template
file, but projects may supply their own by placing a file called
``CPack.distribution.dist.in`` in one of the directories listed in the
:variable:`CMAKE_MODULE_PATH` variable. CPack will then pick up the project's
template file instead of using its own.

The ``distribution.dist`` file is generated by performing substitutions
similar to the :command:`configure_file` command. Any variable set when
CPack runs will be available for substitution using the usual ``@...@``
form. The following variables are also set internally and made available for
substitution:

``CPACK_RESOURCE_FILE_LICENSE_NOPATH``
  Same as :variable:`CPACK_RESOURCE_FILE_LICENSE` except without the path.
  The named file will be available in the same directory as the generated
  ``distribution.dist`` file.

``CPACK_RESOURCE_FILE_README_NOPATH``
  Same as :variable:`CPACK_RESOURCE_FILE_README` except without the path.
  The named file will be available in the same directory as the generated
  ``distribution.dist`` file.

``CPACK_RESOURCE_FILE_WELCOME_NOPATH``
  Same as :variable:`CPACK_RESOURCE_FILE_WELCOME` except without the path.
  The named file will be available in the same directory as the generated
  ``distribution.dist`` file.

``CPACK_APPLE_PKG_INSTALLER_CONTENT``
  .. versionadded:: 3.23

  This contains all the XML elements that specify installer-wide options
  (including domain details), default backgrounds and the choices outline.

``CPACK_PACKAGEMAKER_CHOICES``
  .. deprecated:: 3.23

  This contains only the XML elements that specify the default backgrounds
  and the choices outline. It does not include the installer-wide options or
  any domain details. Use ``CPACK_APPLE_PKG_INSTALLER_CONTENT`` instead.



/P/🚀 cpack_gen/rpm.rst
=====================================


CPack RPM Generator
-------------------

The built in (binary) CPack RPM generator (Unix only)

Variables specific to CPack RPM generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The CPack RPM generator may be used to create RPM packages using :module:`CPack`.
The CPack RPM generator is a :module:`CPack` generator thus it uses the
:variable:`!CPACK_XXX` variables used by :module:`CPack`.

The CPack RPM generator has specific features which are controlled by the specifics
:variable:`!CPACK_RPM_XXX` variables.

:variable:`!CPACK_RPM_<COMPONENT>_XXXX` variables may be used in order to have
**component-specific** values.  Note however that ``<COMPONENT>`` refers to the
**grouping name** written in upper case. It may be either a component name or
a component GROUP name. Usually, those variables correspond to RPM spec file
entities. One may find information about spec files here
https://rpm.org/documentation.

.. versionchanged:: 3.6

 `<COMPONENT>` part of variables is preferred to be in upper case (e.g. if
 component is named ``foo`` then use :variable:`!CPACK_RPM_FOO_XXXX` variable
 name format) as is with other :variable:`!CPACK_<COMPONENT>_XXXX` variables.
 For the purposes of back compatibility (CMake/CPack version 3.5 and lower)
 support for same cased component (e.g. ``fOo`` would be used as
 :variable:`!CPACK_RPM_fOo_XXXX`) is still supported for variables defined in
 older versions of CMake/CPack but is not guaranteed for variables that
 will be added in the future. For the sake of back compatibility same cased
 component variables also override upper cased versions where both are
 present.

Here are some CPack RPM generator wiki resources that are here for historic
reasons and are no longer maintained but may still prove useful:

 - https://gitlab.kitware.com/cmake/community/-/wikis/doc/cpack/Configuration
 - https://gitlab.kitware.com/cmake/community/-/wikis/doc/cpack/PackageGenerators#rpm-unix-only

List of CPack RPM generator specific variables:

.. variable:: CPACK_RPM_COMPONENT_INSTALL

 Enable component packaging for CPack RPM generator

 :Mandatory: No
 :Default: ``OFF``

 If enabled (``ON``) multiple packages are generated. By default
 a single package containing files of all components is generated.

.. variable:: CPACK_RPM_PACKAGE_SUMMARY
              CPACK_RPM_<component>_PACKAGE_SUMMARY

 The RPM package summary.

 :Mandatory: Yes
 :Default: :variable:`CPACK_PACKAGE_DESCRIPTION_SUMMARY`

 .. versionadded:: 3.2
  Per-component :variable:`!CPACK_RPM_<component>_PACKAGE_SUMMARY` variables.

.. variable:: CPACK_RPM_PACKAGE_NAME
              CPACK_RPM_<component>_PACKAGE_NAME

 The RPM package name.

 :Mandatory: Yes
 :Default: :variable:`CPACK_PACKAGE_NAME`

 .. versionadded:: 3.5
  Per-component :variable:`!CPACK_RPM_<component>_PACKAGE_NAME` variables.

.. variable:: CPACK_RPM_FILE_NAME
              CPACK_RPM_<component>_FILE_NAME

 .. versionadded:: 3.6

 Package file name.

 :Mandatory: Yes
 :Default: ``<CPACK_PACKAGE_FILE_NAME>[-<component>].rpm`` with spaces
               replaced by '-'

 This may be set to:

 ``RPM-DEFAULT``
    Tell ``rpmbuild`` to automatically generate the package file name.

 ``<file-name>[.rpm]``
   Use the given file name.

   .. versionchanged:: 3.29

     The ``.rpm`` suffix will be automatically added if missing.
     Previously the suffix was required.

 .. note::

   By using user provided spec file, rpm macro extensions such as for
   generating ``debuginfo`` packages or by simply using multiple components more
   than one rpm file may be generated, either from a single spec file or from
   multiple spec files (each component execution produces its own spec file).
   In such cases duplicate file names may occur as a result of this variable
   setting or spec file content structure. Duplicate files get overwritten
   and it is up to the packager to set the variables in a manner that will
   prevent such errors.

.. variable:: CPACK_RPM_MAIN_COMPONENT

 .. versionadded:: 3.8

 Main component that is packaged without component suffix.

 :Mandatory: No
 :Default:

 This variable can be set to any component or group name so that component or
 group rpm package is generated without component suffix in filename and
 package name.

.. variable:: CPACK_RPM_PACKAGE_EPOCH

 .. versionadded:: 3.10

 The RPM package epoch

 :Mandatory: No
 :Default:

 Optional number that should be incremented when changing versioning schemas
 or fixing mistakes in the version numbers of older packages.

.. variable:: CPACK_RPM_PACKAGE_VERSION

 The RPM package version.

 :Mandatory: Yes
 :Default: :variable:`CPACK_PACKAGE_VERSION`

.. variable:: CPACK_RPM_PACKAGE_ARCHITECTURE
              CPACK_RPM_<component>_PACKAGE_ARCHITECTURE

 The RPM package architecture.

 :Mandatory: Yes
 :Default: Native architecture output by ``uname -m``

 This may be set to ``noarch`` if you know you are building a ``noarch`` package.

 .. versionadded:: 3.3
  Per-component :variable:`!CPACK_RPM_<component>_PACKAGE_ARCHITECTURE` variables.

.. variable:: CPACK_RPM_PACKAGE_RELEASE

 The RPM package release.

 :Mandatory: Yes
 :Default: 1

 This is the numbering of the RPM package itself, i.e. the version of the
 packaging and not the version of the content (see
 :variable:`CPACK_RPM_PACKAGE_VERSION`). One may change the default value if
 the previous packaging was buggy and/or you want to put here a fancy Linux
 distro specific numbering.

.. note::

 This is the string that goes into the RPM ``Release:`` field. Some distros
 (e.g. Fedora, CentOS) require ``1%{?dist}`` format and not just a number.
 ``%{?dist}`` part can be added by setting :variable:`CPACK_RPM_PACKAGE_RELEASE_DIST`.

.. variable:: CPACK_RPM_PACKAGE_RELEASE_DIST

 .. versionadded:: 3.6

 The dist tag that is added  RPM ``Release:`` field.

 :Mandatory: No
 :Default: ``OFF``

 This is the reported ``%{dist}`` tag from the current distribution or empty
 ``%{dist}`` if RPM macro is not set. If this variable is set then RPM
 ``Release:`` field value is set to ``${CPACK_RPM_PACKAGE_RELEASE}%{?dist}``.

.. variable:: CPACK_RPM_PACKAGE_LICENSE

 The RPM package license policy.

 :Mandatory: Yes
 :Default: "unknown"

.. variable:: CPACK_RPM_PACKAGE_GROUP
              CPACK_RPM_<component>_PACKAGE_GROUP

 The RPM package group.

 :Mandatory: Yes
 :Default: "unknown"

 .. versionadded:: 3.5
  Per-component :variable:`!CPACK_RPM_<component>_PACKAGE_GROUP` variables.

.. variable:: CPACK_RPM_PACKAGE_VENDOR

 The RPM package vendor.

 :Mandatory: Yes
 :Default: CPACK_PACKAGE_VENDOR if set or "unknown"

.. variable:: CPACK_RPM_PACKAGE_URL
              CPACK_RPM_<component>_PACKAGE_URL

 The projects URL.

 :Mandatory: No
 :Default: :variable:`CMAKE_PROJECT_HOMEPAGE_URL`

 .. versionadded:: 3.12
  The :variable:`!CMAKE_PROJECT_HOMEPAGE_URL` variable.

.. variable:: CPACK_RPM_PACKAGE_DESCRIPTION
              CPACK_RPM_<component>_PACKAGE_DESCRIPTION

 RPM package description.

 :Mandatory: Yes
 :Default:

   - :variable:`CPACK_COMPONENT_<compName>_DESCRIPTION`
     (component based installers only) if set,
   - :variable:`CPACK_PACKAGE_DESCRIPTION_FILE`
     if set, or
   - ``no package description available``

 .. versionadded:: 3.2
  Per-component :variable:`!CPACK_RPM_<component>_PACKAGE_DESCRIPTION` variables.

.. variable:: CPACK_RPM_COMPRESSION_TYPE

 RPM compression type.

 :Mandatory: No
 :Default: (system default)

 May be used to override RPM compression type to be used to build the
 RPM. For example some Linux distribution now default to ``lzma`` or ``xz``
 compression whereas older cannot use such RPM. Using this one can enforce
 compression type to be used.

 Possible values are:

  ``lzma``
    Lempel–Ziv–Markov chain algorithm

  ``xz``
    XZ Utils compression

  ``bzip2``
    bzip2 Burrows–Wheeler algorithm

  ``gzip``
    GNU Gzip compression

.. variable:: CPACK_RPM_PACKAGE_AUTOREQ
              CPACK_RPM_<component>_PACKAGE_AUTOREQ

 RPM spec autoreq field.

 :Mandatory: No
 :Default:

 May be used to enable (``1``, ``yes``) or disable (``0``, ``no``) automatic
 shared libraries dependency detection. Dependencies are added to requires list.

 .. note::

   By default automatic dependency detection is enabled by rpm generator.

.. variable:: CPACK_RPM_PACKAGE_AUTOPROV
              CPACK_RPM_<component>_PACKAGE_AUTOPROV

 RPM spec autoprov field.

 :Mandatory: No
 :Default:

 May be used to enable (``1``, ``yes``) or disable (``0``, ``no``)
 automatic listing of shared libraries that are provided by the package.
 Shared libraries are added to provides list.

 .. note::

   By default automatic provides detection is enabled by rpm generator.

.. variable:: CPACK_RPM_PACKAGE_AUTOREQPROV
              CPACK_RPM_<component>_PACKAGE_AUTOREQPROV

 RPM spec autoreqprov field.

 :Mandatory: No
 :Default:

 Variable enables/disables autoreq and autoprov at the same time.
 See :variable:`CPACK_RPM_PACKAGE_AUTOREQ` and
 :variable:`CPACK_RPM_PACKAGE_AUTOPROV` for more details.

 .. note::

   By default automatic detection feature is enabled by rpm.

.. variable:: CPACK_RPM_PACKAGE_REQUIRES
              CPACK_RPM_<component>_PACKAGE_REQUIRES

 RPM spec requires field.

 :Mandatory: No
 :Default:

 May be used to set RPM dependencies (requires). Note that you must enclose
 the complete requires string between quotes, for example:

 .. code-block:: cmake

  set(CPACK_RPM_PACKAGE_REQUIRES "python >= 2.5.0, cmake >= 2.8")

 The required package list of an RPM file could be printed with::

  rpm -qp --requires file.rpm

.. variable:: CPACK_RPM_PACKAGE_CONFLICTS
              CPACK_RPM_<component>_PACKAGE_CONFLICTS

 RPM spec conflicts field.

 :Mandatory: No
 :Default:

 May be used to set negative RPM dependencies (conflicts). Note that you must
 enclose the complete requires string between quotes, for example:

 .. code-block:: cmake

  set(CPACK_RPM_PACKAGE_CONFLICTS "libxml2")

 The conflicting package list of an RPM file could be printed with::

  rpm -qp --conflicts file.rpm

.. variable:: CPACK_RPM_PACKAGE_REQUIRES_PRE
              CPACK_RPM_<component>_PACKAGE_REQUIRES_PRE

 .. versionadded:: 3.2

 RPM spec requires(pre) field.

 :Mandatory: No
 :Default:

 May be used to set RPM preinstall dependencies (requires(pre)). Note that
 you must enclose the complete requires string between quotes, for example:

 .. code-block:: cmake

  set(CPACK_RPM_PACKAGE_REQUIRES_PRE "shadow-utils, initscripts")

.. variable:: CPACK_RPM_PACKAGE_REQUIRES_POST
              CPACK_RPM_<component>_PACKAGE_REQUIRES_POST

 .. versionadded:: 3.2

 RPM spec requires(post) field.

 :Mandatory: No
 :Default:

 May be used to set RPM postinstall dependencies (requires(post)). Note that
 you must enclose the complete requires string between quotes, for example:

 .. code-block:: cmake

  set(CPACK_RPM_PACKAGE_REQUIRES_POST "shadow-utils, initscripts")

.. variable:: CPACK_RPM_PACKAGE_REQUIRES_POSTUN
              CPACK_RPM_<component>_PACKAGE_REQUIRES_POSTUN

 .. versionadded:: 3.2

 RPM spec requires(postun) field.

 :Mandatory: No
 :Default:

 May be used to set RPM postuninstall dependencies (requires(postun)). Note
 that you must enclose the complete requires string between quotes, for
 example:

 .. code-block:: cmake

  set(CPACK_RPM_PACKAGE_REQUIRES_POSTUN "shadow-utils, initscripts")

.. variable:: CPACK_RPM_PACKAGE_REQUIRES_PREUN
              CPACK_RPM_<component>_PACKAGE_REQUIRES_PREUN

 .. versionadded:: 3.2

 RPM spec requires(preun) field.

 :Mandatory: No
 :Default:

 May be used to set RPM preuninstall dependencies (requires(preun)). Note that
 you must enclose the complete requires string between quotes, for example:

 .. code-block:: cmake

  set(CPACK_RPM_PACKAGE_REQUIRES_PREUN "shadow-utils, initscripts")

.. variable:: CPACK_RPM_PACKAGE_SUGGESTS
              CPACK_RPM_<component>_PACKAGE_SUGGESTS

 RPM spec suggest field.

 :Mandatory: No
 :Default:

 May be used to set weak RPM dependencies (suggests). If ``rpmbuild`` doesn't
 support the ``Suggests`` tag, CPack will emit a warning and ignore this
 variable. Note that you must enclose the complete requires string between
 quotes.

.. variable:: CPACK_RPM_PACKAGE_PROVIDES
              CPACK_RPM_<component>_PACKAGE_PROVIDES

 RPM spec provides field.

 :Mandatory: No
 :Default:

 May be used to set RPM dependencies (provides). The provided package list
 of an RPM file could be printed with::

  rpm -qp --provides file.rpm

.. variable:: CPACK_RPM_PACKAGE_OBSOLETES
              CPACK_RPM_<component>_PACKAGE_OBSOLETES

 RPM spec obsoletes field.

 :Mandatory: No
 :Default:

 May be used to set RPM packages that are obsoleted by this one.

.. variable:: CPACK_RPM_PACKAGE_RELOCATABLE

 build a relocatable RPM.

 :Mandatory: No
 :Default: CPACK_PACKAGE_RELOCATABLE

 If this variable is set to TRUE or ON, the CPack RPM generator will try
 to build a relocatable RPM package. A relocatable RPM may
 be installed using::

  rpm --prefix or --relocate

 in order to install it at an alternate place see rpm(8). Note that
 currently this may fail if :variable:`CPACK_SET_DESTDIR` is set to ``ON``. If
 :variable:`CPACK_SET_DESTDIR` is set then you will get a warning message but
 if there is file installed with absolute path you'll get unexpected behavior.

.. variable:: CPACK_RPM_SPEC_INSTALL_POST

 .. deprecated:: 2.8.12 Use :variable:`CPACK_RPM_SPEC_MORE_DEFINE` instead.

 :Mandatory: No
 :Default:

 May be used to override the ``__spec_install_post`` section within the
 generated spec file.  This affects the install step during package creation,
 not during package installation.  For adding operations to be performed
 during package installation, use
 :variable:`CPACK_RPM_POST_INSTALL_SCRIPT_FILE` instead.

.. variable:: CPACK_RPM_SPEC_MORE_DEFINE

 RPM extended spec definitions lines.

 :Mandatory: No
 :Default:

 May be used to add any ``%define`` lines to the generated spec file.  An
 example of its use is to prevent stripping of executables (but note that
 this may also disable other default post install processing):

 .. code-block:: cmake

   set(CPACK_RPM_SPEC_MORE_DEFINE "%define __spec_install_post /bin/true")

.. variable:: CPACK_RPM_PACKAGE_DEBUG

 Toggle CPack RPM generator debug output.

 :Mandatory: No
 :Default:

 May be set when invoking cpack in order to trace debug information
 during CPack RPM run. For example you may launch CPack like this::

  cpack -D CPACK_RPM_PACKAGE_DEBUG=1 -G RPM

.. variable:: CPACK_RPM_USER_BINARY_SPECFILE
              CPACK_RPM_<componentName>_USER_BINARY_SPECFILE

 A user provided spec file.

 :Mandatory: No
 :Default:

 May be set by the user in order to specify a USER binary spec file
 to be used by the CPack RPM generator instead of generating the file.
 The specified file will be processed by configure_file( @ONLY).

.. variable:: CPACK_RPM_GENERATE_USER_BINARY_SPECFILE_TEMPLATE

 Spec file template.

 :Mandatory: No
 :Default:

 If set CPack will generate a template for USER specified binary
 spec file and stop with an error. For example launch CPack like this::

  cpack -D CPACK_RPM_GENERATE_USER_BINARY_SPECFILE_TEMPLATE=1 -G RPM

 The user may then use this file in order to hand-craft is own
 binary spec file which may be used with
 :variable:`CPACK_RPM_USER_BINARY_SPECFILE`.

.. variable:: CPACK_RPM_PRE_INSTALL_SCRIPT_FILE
              CPACK_RPM_PRE_UNINSTALL_SCRIPT_FILE
              CPACK_RPM_PRE_TRANS_SCRIPT_FILE

 Path to file containing pre install/uninstall/transaction script.

 :Mandatory: No
 :Default:

 May be used to embed a pre installation/uninstallation/transaction script in the spec file.
 The referred script file (or both) will be read and directly
 put after the ``%pre`` or ``%preun`` section
 If :variable:`CPACK_RPM_COMPONENT_INSTALL` is set to ON the install/uninstall/transaction
 script for each component can be overridden with
 :variable:`!CPACK_RPM_<COMPONENT>_PRE_INSTALL_SCRIPT_FILE`,
 :variable:`!CPACK_RPM_<COMPONENT>_PRE_UNINSTALL_SCRIPT_FILE`, and
 :variable:`!CPACK_RPM_<COMPONENT>_PRE_TRANS_SCRIPT_FILE`
 One may verify which scriptlet has been included with::

  rpm -qp --scripts  package.rpm

 .. versionadded:: 3.18
  The :variable:`!CPACK_RPM_PRE_TRANS_SCRIPT_FILE` variable.

.. variable:: CPACK_RPM_POST_INSTALL_SCRIPT_FILE
              CPACK_RPM_POST_UNINSTALL_SCRIPT_FILE
              CPACK_RPM_POST_TRANS_SCRIPT_FILE

 Path to file containing post install/uninstall/transaction script.

 :Mandatory: No
 :Default:

 May be used to embed a post installation/uninstallation/transaction script in the spec file.
 The referred script file (or both) will be read and directly
 put after the ``%post`` or ``%postun`` section.
 If :variable:`CPACK_RPM_COMPONENT_INSTALL` is set to ON the install/uninstall/transaction
 script for each component can be overridden with
 :variable:`!CPACK_RPM_<COMPONENT>_POST_INSTALL_SCRIPT_FILE`,
 :variable:`!CPACK_RPM_<COMPONENT>_POST_UNINSTALL_SCRIPT_FILE`, and
 :variable:`!CPACK_RPM_<COMPONENT>_POST_TRANS_SCRIPT_FILE`
 One may verify which scriptlet has been included with::

  rpm -qp --scripts  package.rpm

 .. versionadded:: 3.18
  The :variable:`!CPACK_RPM_POST_TRANS_SCRIPT_FILE` variable.

.. variable:: CPACK_RPM_USER_FILELIST
              CPACK_RPM_<COMPONENT>_USER_FILELIST

 :Mandatory: No
 :Default:

 May be used to explicitly specify ``%(<directive>)`` file line
 in the spec file. Like ``%config(noreplace)`` or any other directive
 that be found in the ``%files`` section. Since
 the CPack RPM generator is generating the list of files (and directories) the
 user specified files of the :variable:`!CPACK_RPM_<COMPONENT>_USER_FILELIST` list will
 be removed from the generated list. If referring to directories do
 not add a trailing slash.

 .. versionadded:: 3.8
  You can have multiple directives per line, as in
  ``%attr(600,root,root) %config(noreplace)``.

.. variable:: CPACK_RPM_CHANGELOG_FILE

 RPM changelog file.

 :Mandatory: No
 :Default:

 May be used to embed a changelog in the spec file.
 The referred file will be read and directly put after the ``%changelog``
 section.

.. variable:: CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST

 list of path to be excluded.

 :Mandatory: No
 :Default:
  The following paths are excluded by default:
    - ``/etc``
    - ``/etc/init.d``
    - ``/usr``
    - ``/usr/bin``
    - ``/usr/include``
    - ``/usr/lib``
    - ``/usr/libx32``
    - ``/usr/lib64``
    - ``/usr/share``
    - ``/usr/share/aclocal``
    - ``/usr/share/doc``

 May be used to exclude path (directories or files) from the auto-generated
 list of paths discovered by CPack RPM. The default value contains a
 reasonable set of values if the variable is not defined by the user. If the
 variable is defined by the user then the CPack RPM generator will NOT any of
 the default path. If you want to add some path to the default list then you
 can use :variable:`CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION` variable.

 .. versionadded:: 3.10
  Added ``/usr/share/aclocal`` to the default list of excludes.

.. variable:: CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION

 additional list of path to be excluded.

 :Mandatory: No
 :Default:

 May be used to add more exclude path (directories or files) from the initial
 default list of excluded paths. See
 :variable:`CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST`.

.. variable:: CPACK_RPM_RELOCATION_PATHS

 .. versionadded:: 3.2

 Packages relocation paths list.

 :Mandatory: No
 :Default:

 May be used to specify more than one relocation path per relocatable RPM.
 Variable contains a list of relocation paths that if relative are prefixed
 by the value of :variable:`CPACK_RPM_<COMPONENT>_PACKAGE_PREFIX` or by the
 value of :variable:`CPACK_PACKAGING_INSTALL_PREFIX` if the component version
 is not provided.
 Variable is not component based as its content can be used to set a different
 path prefix for e.g. binary dir and documentation dir at the same time.
 Only prefixes that are required by a certain component are added to that
 component - component must contain at least one file/directory/symbolic link
 with :variable:`CPACK_RPM_RELOCATION_PATHS` prefix for a certain relocation
 path to be added. Package will not contain any relocation paths if there are
 no files/directories/symbolic links on any of the provided prefix locations.
 Packages that either do not contain any relocation paths or contain
 files/directories/symbolic links that are outside relocation paths print
 out an :command:`AUTHOR_WARNING <message>` that RPM will be partially relocatable.

.. variable:: CPACK_RPM_<COMPONENT>_PACKAGE_PREFIX

 .. versionadded:: 3.2

 Per component relocation path install prefix.

 :Mandatory: No
 :Default: :variable:`CPACK_PACKAGING_INSTALL_PREFIX`

 May be used to set per component :variable:`CPACK_PACKAGING_INSTALL_PREFIX`
 for relocatable RPM packages.

.. variable:: CPACK_RPM_NO_INSTALL_PREFIX_RELOCATION
              CPACK_RPM_NO_<COMPONENT>_INSTALL_PREFIX_RELOCATION

 .. versionadded:: 3.3

 Removal of default install prefix from relocation paths list.

 :Mandatory: No
 :Default: :variable:`CPACK_PACKAGING_INSTALL_PREFIX` or
    :variable:`CPACK_RPM_<COMPONENT>_PACKAGE_PREFIX`
    are treated as one of relocation paths

 May be used to remove :variable:`CPACK_PACKAGING_INSTALL_PREFIX` and
 :variable:`CPACK_RPM_<COMPONENT>_PACKAGE_PREFIX`
 from relocatable RPM prefix paths.

.. variable:: CPACK_RPM_ADDITIONAL_MAN_DIRS

 .. versionadded:: 3.3

 :Mandatory: No
 :Default:
  Regular expressions that are added by default were taken from ``brp-compress`` RPM macro:
    - ``/usr/man/man.*``
    - ``/usr/man/.*/man.*``
    - ``/usr/info.*``
    - ``/usr/share/man/man.*``
    - ``/usr/share/man/.*/man.*``
    - ``/usr/share/info.*``
    - ``/usr/kerberos/man.*``
    - ``/usr/X11R6/man/man.*``
    - ``/usr/lib/perl5/man/man.*``
    - ``/usr/share/doc/.*/man/man.*``
    - ``/usr/lib/.*/man/man.*``

 May be used to set additional man dirs that could potentially be compressed
 by brp-compress RPM macro. Variable content must be a list of regular
 expressions that point to directories containing man files or to man files
 directly. Note that in order to compress man pages a path must also be
 present in brp-compress RPM script and that brp-compress script must be
 added to RPM configuration by the operating system.

.. variable:: CPACK_RPM_DEFAULT_USER
              CPACK_RPM_<compName>_DEFAULT_USER

 .. versionadded:: 3.6

 default user ownership of RPM content

 :Mandatory: No
 :Default: ``root``

 Value should be user name and not UID.
 Note that ``<compName>`` must be in upper-case.

.. variable:: CPACK_RPM_DEFAULT_GROUP
              CPACK_RPM_<compName>_DEFAULT_GROUP

 .. versionadded:: 3.6

 default group ownership of RPM content

 :Mandatory: No
 :Default: root

 Value should be group name and not GID.
 Note that ``<compName>`` must be in upper-case.

.. variable:: CPACK_RPM_DEFAULT_FILE_PERMISSIONS
              CPACK_RPM_<compName>_DEFAULT_FILE_PERMISSIONS

 .. versionadded:: 3.6

 default permissions used for packaged files

 :Mandatory: No
 :Default: (system default)

 Accepted values are lists with PERMISSIONS. Valid permissions
 are:

 - ``OWNER_READ``
 - ``OWNER_WRITE``
 - ``OWNER_EXECUTE``
 - ``GROUP_READ``
 - ``GROUP_WRITE``
 - ``GROUP_EXECUTE``
 - ``WORLD_READ``
 - ``WORLD_WRITE``
 - ``WORLD_EXECUTE``

 Note that ``<compName>`` must be in upper-case.

.. variable:: CPACK_RPM_DEFAULT_DIR_PERMISSIONS
              CPACK_RPM_<compName>_DEFAULT_DIR_PERMISSIONS

 .. versionadded:: 3.6

 default permissions used for packaged directories

 :Mandatory: No
 :Default: (system default)

 Accepted values are lists with PERMISSIONS. Valid permissions
 are the same as for :variable:`CPACK_RPM_DEFAULT_FILE_PERMISSIONS`.
 Note that ``<compName>`` must be in upper-case.

.. variable:: CPACK_RPM_INSTALL_WITH_EXEC

 .. versionadded:: 3.11

 force execute permissions on programs and shared libraries

 :Mandatory: No
 :Default: (system default)

 Force set owner, group and world execute permissions on programs and shared
 libraries. This can be used for creating valid rpm packages on systems such
 as Debian where shared libraries do not have execute permissions set.

.. note::

 Programs and shared libraries without execute permissions are ignored during
 separation of debug symbols from the binary for debuginfo packages.

Packaging of Symbolic Links
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.3

The CPack RPM generator supports packaging of symbolic links:

.. code-block:: cmake

  execute_process(COMMAND ${CMAKE_COMMAND}
    -E create_symlink <relative_path_location> <symlink_name>)
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/<symlink_name>
    DESTINATION <symlink_location> COMPONENT libraries)

Symbolic links will be optimized (paths will be shortened if possible)
before being added to the package or if multiple relocation paths are
detected, a post install symlink relocation script will be generated.

Symbolic links may point to locations that are not packaged by the same
package (either a different component or even not packaged at all) but
those locations will be treated as if they were a part of the package
while determining if symlink should be either created or present in a
post install script - depending on relocation paths.

.. versionchanged:: 3.6
 Symbolic links that point to locations outside packaging path produce a
 warning and are treated as non relocatable permanent symbolic links.
 Previous versions of CMake produced an error in this case.

Currently there are a few limitations though:

* For component based packaging component interdependency is not checked
  when processing symbolic links. Symbolic links pointing to content of
  a different component are treated the same way as if pointing to location
  that will not be packaged.

* Symbolic links pointing to a location through one or more intermediate
  symbolic links will not be handled differently - if the intermediate
  symbolic link(s) is also on a relocatable path, relocating it during
  package installation may cause initial symbolic link to point to an
  invalid location.

Packaging of debug information
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.7

Debuginfo packages contain debug symbols and sources for debugging packaged
binaries.

Debuginfo RPM packaging has its own set of variables:

.. variable:: CPACK_RPM_DEBUGINFO_PACKAGE
              CPACK_RPM_<component>_DEBUGINFO_PACKAGE

 Enable generation of debuginfo RPM package(s).

 :Mandatory: No
 :Default: ``OFF``

.. note::

 Binaries must contain debug symbols before packaging so use either ``Debug``
 or ``RelWithDebInfo`` for :variable:`CMAKE_BUILD_TYPE` variable value.

 Additionally, if :variable:`CPACK_STRIP_FILES` is set, the files will be stripped before
 they get to the RPM generator, so will not contain debug symbols and
 a debuginfo package will not get built. Do not use with :variable:`CPACK_STRIP_FILES`.

.. note::

 Packages generated from packages without binary files, with binary files but
 without execute permissions or without debug symbols will cause packaging
 termination.

.. variable:: CPACK_BUILD_SOURCE_DIRS

 Provides locations of root directories of source files from which binaries
 were built.

 :Mandatory: Yes if :variable:`CPACK_RPM_DEBUGINFO_PACKAGE` is set
 :Default:

.. note::

 For CMake project :variable:`CPACK_BUILD_SOURCE_DIRS` is set by default to
 point to :variable:`CMAKE_SOURCE_DIR` and :variable:`CMAKE_BINARY_DIR` paths.

.. note::

 Sources with path prefixes that do not fall under any location provided with
 :variable:`CPACK_BUILD_SOURCE_DIRS` will not be present in debuginfo package.

.. variable:: CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX
              CPACK_RPM_<component>_BUILD_SOURCE_DIRS_PREFIX

 Prefix of location where sources will be placed during package installation.

 :Mandatory: Yes if :variable:`CPACK_RPM_DEBUGINFO_PACKAGE` is set
 :Default: ``/usr/src/debug/${CPACK_PACKAGE_FILE_NAME}`` and
    for component packaging ``/usr/src/debug/${CPACK_PACKAGE_FILE_NAME}-<component>``

.. note::

 Each source path prefix is additionally suffixed by ``src_<index>`` where
 index is index of the path used from :variable:`CPACK_BUILD_SOURCE_DIRS`
 variable. This produces ``${CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX}/src_<index>``
 replacement path.
 Limitation is that replaced path part must be shorter or of equal
 length than the length of its replacement. If that is not the case either
 :variable:`CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX` variable has to be set to
 a shorter path or source directories must be placed on a longer path.

.. variable:: CPACK_RPM_DEBUGINFO_EXCLUDE_DIRS

 Directories containing sources that should be excluded from debuginfo packages.

 :Mandatory: No
 :Default:
  The following paths are excluded by default:
    - ``/usr``
    - ``/usr/src``
    - ``/usr/src/debug``

 Listed paths are owned by other RPM packages and should therefore not be
 deleted on debuginfo package uninstallation.

.. variable:: CPACK_RPM_DEBUGINFO_EXCLUDE_DIRS_ADDITION

 Paths that should be appended to :variable:`CPACK_RPM_DEBUGINFO_EXCLUDE_DIRS`
 for exclusion.

 :Mandatory: No
 :Default:

.. variable:: CPACK_RPM_DEBUGINFO_SINGLE_PACKAGE

 .. versionadded:: 3.8

 Create a single debuginfo package even if components packaging is set.

 :Mandatory: No
 :Default: ``OFF``

 When this variable is enabled it produces a single debuginfo package even if
 component packaging is enabled.

 When using this feature in combination with components packaging and there is
 more than one component this variable requires :variable:`CPACK_RPM_MAIN_COMPONENT`
 to be set.

.. note::

 If none of the :variable:`CPACK_RPM_<component>_DEBUGINFO_PACKAGE` variables
 is set then :variable:`CPACK_RPM_DEBUGINFO_PACKAGE` is automatically set to
 ``ON`` when :variable:`CPACK_RPM_DEBUGINFO_SINGLE_PACKAGE` is set.

.. variable:: CPACK_RPM_DEBUGINFO_FILE_NAME
              CPACK_RPM_<component>_DEBUGINFO_FILE_NAME

 .. versionadded:: 3.9

 Debuginfo package file name.

 :Mandatory: No
 :Default: rpmbuild tool generated package file name

 Alternatively provided debuginfo package file name must end with ``.rpm``
 suffix and should differ from file names of other generated packages.

 Variable may contain ``@cpack_component@`` placeholder which will be
 replaced by component name if component packaging is enabled otherwise it
 deletes the placeholder.

 Setting the variable to ``RPM-DEFAULT`` may be used to explicitly set
 filename generation to default.

.. note::

 :variable:`CPACK_RPM_FILE_NAME` also supports rpmbuild tool generated package
 file name - disabled by default but can be enabled by setting the variable to
 ``RPM-DEFAULT``.

Packaging of sources (SRPM)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.7

SRPM packaging is enabled by setting :variable:`CPACK_RPM_PACKAGE_SOURCES`
variable while usually using :variable:`CPACK_INSTALLED_DIRECTORIES` variable
to provide directory containing CMakeLists.txt and source files.

For CMake projects SRPM package would be produced by executing::

  cpack -G RPM --config ./CPackSourceConfig.cmake

.. note::

 Produced SRPM package is expected to be built with :manual:`cmake(1)` executable
 and packaged with :manual:`cpack(1)` executable so CMakeLists.txt has to be
 located in root source directory and must be able to generate binary rpm
 packages by executing :option:`cpack -G` command. The two executables as well as
 rpmbuild must also be present when generating binary rpm packages from the
 produced SRPM package.

Once the SRPM package is generated it can be used to generate binary packages
by creating a directory structure for rpm generation and executing rpmbuild
tool::

  mkdir -p build_dir/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
  rpmbuild --define "_topdir <path_to_build_dir>" --rebuild <SRPM_file_name>

Generated packages will be located in build_dir/RPMS directory or its sub
directories.

.. note::

 SRPM package internally uses CPack/RPM generator to generate binary packages
 so CMakeScripts.txt can decide during the SRPM to binary rpm generation step
 what content the package(s) should have as well as how they should be packaged
 (monolithic or components). CMake can decide this for e.g. by reading environment
 variables set by the package manager before starting the process of generating
 binary rpm packages. This way a single SRPM package can be used to produce
 different binary rpm packages on different platforms depending on the platform's
 packaging rules.

Source RPM packaging has its own set of variables:

.. variable:: CPACK_RPM_PACKAGE_SOURCES

 Should the content be packaged as a source rpm (default is binary rpm).

 :Mandatory: No
 :Default: ``OFF``

.. note::

 For cmake projects :variable:`CPACK_RPM_PACKAGE_SOURCES` variable is set
 to ``OFF`` in CPackConfig.cmake and ``ON`` in CPackSourceConfig.cmake
 generated files.

.. variable:: CPACK_RPM_SOURCE_PKG_BUILD_PARAMS

 Additional command-line parameters provided to :manual:`cmake(1)` executable.

 :Mandatory: No
 :Default:

.. variable:: CPACK_RPM_SOURCE_PKG_PACKAGING_INSTALL_PREFIX

 Packaging install prefix that would be provided in :variable:`CPACK_PACKAGING_INSTALL_PREFIX`
 variable for producing binary RPM packages.

 :Mandatory: Yes
 :Default: ``/``

.. variable:: CPACK_RPM_BUILDREQUIRES

 List of source rpm build dependencies.

 :Mandatory: No
 :Default:

 May be used to set source RPM build dependencies (BuildRequires). Note that
 you must enclose the complete build requirements string between quotes, for
 example:

 .. code-block:: cmake

  set(CPACK_RPM_BUILDREQUIRES "python >= 2.5.0, cmake >= 2.8")

.. variable:: CPACK_RPM_REQUIRES_EXCLUDE_FROM

 .. versionadded:: 3.22

 :Mandatory: No
 :Default:

 May be used to keep the dependency generator from scanning specific files
 or directories for dependencies.  Note that you can use a regular
 expression that matches all of the directories or files, for example:

 .. code-block:: cmake

  set(CPACK_RPM_REQUIRES_EXCLUDE_FROM "bin/libqsqloci.*\\.so.*")



/P/🚀 cpack_gen/wix.rst
=====================================


CPack WIX Generator
-------------------

CPack WIX generator specific options

.. versionadded:: 3.7
  Support :variable:`CPACK_COMPONENT_<compName>_DISABLED` variable.

Variables specific to CPack WIX generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following variables are specific to the installers built on
Windows using WiX.

.. variable:: CPACK_WIX_UPGRADE_GUID

 Upgrade GUID (``Product/@UpgradeCode``)

 Will be automatically generated unless explicitly provided.

 It should be explicitly set to a constant generated globally unique
 identifier (GUID) to allow your installers to replace existing
 installations that use the same GUID.

 You may for example explicitly set this variable in your
 CMakeLists.txt to the value that has been generated per default.  You
 should not use GUIDs that you did not generate yourself or which may
 belong to other projects.

 A GUID shall have the following fixed length syntax::

  XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX

 (each X represents an uppercase hexadecimal digit)

.. variable:: CPACK_WIX_PRODUCT_GUID

 Product GUID (``Product/@Id``)

 Will be automatically generated unless explicitly provided.

 If explicitly provided this will set the Product Id of your installer.

 The installer will abort if it detects a pre-existing installation that
 uses the same GUID.

 The GUID shall use the syntax described for CPACK_WIX_UPGRADE_GUID.

.. variable:: CPACK_WIX_LICENSE_RTF

 RTF License File

 If CPACK_RESOURCE_FILE_LICENSE has an .rtf extension it is used as-is.

 If CPACK_RESOURCE_FILE_LICENSE has an .txt extension it is implicitly
 converted to RTF by the WIX Generator.
 The expected encoding of the .txt file is UTF-8.

 With CPACK_WIX_LICENSE_RTF you can override the license file used by the
 WIX Generator in case CPACK_RESOURCE_FILE_LICENSE is in an unsupported
 format or the .txt -> .rtf conversion does not work as expected.

.. variable:: CPACK_WIX_PRODUCT_ICON

 The Icon shown next to the program name in Add/Remove programs.

 If set, this icon is used in place of the default icon.

.. variable:: CPACK_WIX_UI_REF

 This variable allows you to override the Id of the ``<UIRef>`` element
 in the WiX template.

 The default is ``WixUI_InstallDir`` in case no CPack components have
 been defined and ``WixUI_FeatureTree`` otherwise.

.. variable:: CPACK_WIX_UI_BANNER

 The bitmap will appear at the top of all installer pages other than the
 welcome and completion dialogs.

 If set, this image will replace the default banner image.

 This image must be 493 by 58 pixels.

.. variable:: CPACK_WIX_UI_DIALOG

 Background bitmap used on the welcome and completion dialogs.

 If this variable is set, the installer will replace the default dialog
 image.

 This image must be 493 by 312 pixels.

.. variable:: CPACK_WIX_PROGRAM_MENU_FOLDER

 Start menu folder name for launcher.

 If this variable is not set, it will be initialized with CPACK_PACKAGE_NAME

 .. versionadded:: 3.16
  If this variable is set to ``.``, then application shortcuts will be
  created directly in the start menu and the uninstaller shortcut will be
  omitted.

.. variable:: CPACK_WIX_CULTURES

 Language(s) of the installer

 Languages are compiled into the WixUI extension library.  To use them,
 simply provide the name of the culture.  If you specify more than one
 culture identifier in a comma or semicolon delimited list, the first one
 that is found will be used.  You can find a list of supported languages at:
 https://wixtoolset.org/docs/v3/wixui/wixui_localization/

.. variable:: CPACK_WIX_TEMPLATE

 Template file for WiX generation

 If this variable is set, the specified template will be used to generate
 the WiX wxs file.  This should be used if further customization of the
 output is required. The template contents will override the effect of most
 ``CPACK_WIX_`` variables.

 If this variable is not set, the default MSI template included with CMake
 will be used.

.. variable:: CPACK_WIX_PATCH_FILE

 Optional list of XML files with fragments to be inserted into
 generated WiX sources.

 .. versionadded:: 3.5
  Support listing multiple patch files.

 This optional variable can be used to specify an XML file that the
 WIX generator will use to inject fragments into its generated
 source files.

 Patch files understood by the CPack WIX generator
 roughly follow this RELAX NG compact schema:

 .. code-block:: none

    start = CPackWiXPatch

    CPackWiXPatch = element CPackWiXPatch { CPackWiXFragment* }

    CPackWiXFragment = element CPackWiXFragment
    {
        attribute Id { string },
        fragmentContent*
    }

    fragmentContent = element * - CPackWiXFragment
    {
        (attribute * { text } | text | fragmentContent)*
    }

 Currently fragments can be injected into most
 Component, File, Directory and Feature elements.

 .. versionadded:: 3.3
  The following additional special Ids can be used:

  * ``#PRODUCT`` for the ``<Product>`` element.
  * ``#PRODUCTFEATURE`` for the root ``<Feature>`` element.

 .. versionadded:: 3.7
  Support patching arbitrary ``<Feature>`` elements.

 .. versionadded:: 3.9
  Allow setting additional attributes.

 The following example illustrates how this works.

 Given that the WIX generator creates the following XML element:

 .. code-block:: xml

    <Component Id="CM_CP_applications.bin.my_libapp.exe" Guid="*"/>

 The following XML patch file may be used to inject an Environment element
 into it:

 .. code-block:: xml

    <CPackWiXPatch>
      <CPackWiXFragment Id="CM_CP_applications.bin.my_libapp.exe">
        <Environment Id="MyEnvironment" Action="set"
          Name="MyVariableName" Value="MyVariableValue"/>
      </CPackWiXFragment>
    </CPackWiXPatch>

.. variable:: CPACK_WIX_EXTRA_SOURCES

 Extra WiX source files

 This variable provides an optional list of extra WiX source files (.wxs)
 that should be compiled and linked.  The full path to source files is
 required.

.. variable:: CPACK_WIX_EXTRA_OBJECTS

 Extra WiX object files or libraries

 This variable provides an optional list of extra WiX object (.wixobj)
 and/or WiX library (.wixlib) files.  The full path to objects and libraries
 is required.

.. variable:: CPACK_WIX_EXTENSIONS

 This variable provides a list of additional extensions for the WiX
 tools light and candle.

.. variable:: CPACK_WIX_<TOOL>_EXTENSIONS

 This is the tool specific version of CPACK_WIX_EXTENSIONS.
 ``<TOOL>`` can be either LIGHT or CANDLE.

.. variable:: CPACK_WIX_<TOOL>_EXTRA_FLAGS

 This list variable allows you to pass additional
 flags to the WiX tool ``<TOOL>``.

 Use it at your own risk.
 Future versions of CPack may generate flags which may be in conflict
 with your own flags.

 ``<TOOL>`` can be either LIGHT or CANDLE.

.. variable:: CPACK_WIX_CMAKE_PACKAGE_REGISTRY

 If this variable is set the generated installer will create
 an entry in the windows registry key
 ``HKEY_LOCAL_MACHINE\Software\Kitware\CMake\Packages\<PackageName>``
 The value for ``<PackageName>`` is provided by this variable.

 Assuming you also install a CMake configuration file this will
 allow other CMake projects to find your package with
 the :command:`find_package` command.

.. variable:: CPACK_WIX_PROPERTY_<PROPERTY>

 .. versionadded:: 3.1

 This variable can be used to provide a value for
 the Windows Installer property ``<PROPERTY>``

 The following list contains some example properties that can be used to
 customize information under
 "Programs and Features" (also known as "Add or Remove Programs")

 * ARPCOMMENTS - Comments
 * ARPHELPLINK - Help and support information URL
 * ARPURLINFOABOUT - General information URL
 * ARPURLUPDATEINFO - Update information URL
 * ARPHELPTELEPHONE - Help and support telephone number
 * ARPSIZE - Size (in kilobytes) of the application

.. variable:: CPACK_WIX_ROOT_FEATURE_TITLE

 .. versionadded:: 3.7

 Sets the name of the root install feature in the WIX installer. Same as
 CPACK_COMPONENT_<compName>_DISPLAY_NAME for components.

.. variable:: CPACK_WIX_ROOT_FEATURE_DESCRIPTION

 .. versionadded:: 3.7

 Sets the description of the root install feature in the WIX installer. Same as
 CPACK_COMPONENT_<compName>_DESCRIPTION for components.

.. variable:: CPACK_WIX_SKIP_PROGRAM_FOLDER

 .. versionadded:: 3.7

 If this variable is set to true, the default install location
 of the generated package will be CPACK_PACKAGE_INSTALL_DIRECTORY directly.
 The install location will not be located relatively below
 ProgramFiles or ProgramFiles64.

  .. note::
    Installers created with this feature do not take differences
    between the system on which the installer is created
    and the system on which the installer might be used into account.

    It is therefore possible that the installer e.g. might try to install
    onto a drive that is unavailable or unintended or a path that does not
    follow the localization or convention of the system on which the
    installation is performed.

.. variable:: CPACK_WIX_ROOT_FOLDER_ID

 .. versionadded:: 3.9

 This variable allows specification of a custom root folder ID.
 The generator specific ``<64>`` token can be used for
 folder IDs that come in 32-bit and 64-bit variants.
 In 32-bit builds the token will expand empty while in 64-bit builds
 it will expand to ``64``.

 When unset generated installers will default installing to
 ``ProgramFiles<64>Folder``.

.. variable:: CPACK_WIX_ROOT

 This variable can optionally be set to the root directory
 of a custom WiX Toolset installation.

 When unspecified CPack will try to locate a WiX Toolset
 installation via the ``WIX`` environment variable instead.

.. variable:: CPACK_WIX_CUSTOM_XMLNS

 .. versionadded:: 3.19

 This variable provides a list of custom namespace declarations that are necessary
 for using WiX extensions. Each declaration should be in the form name=url, where
 name is the plain namespace without the usual xmlns: prefix and url is an unquoted
 namespace url. A list of commonly known WiX schemata can be found here:
 https://wixtoolset.org/docs/v3/xsd/

.. variable:: CPACK_WIX_SKIP_WIX_UI_EXTENSION

 .. versionadded:: 3.23

 If this variable is set then the inclusion of WixUIExtensions is skipped,
 i.e. the ``-ext "WixUIExtension"`` command line is not included during
 the execution of the WiX light tool.

.. variable:: CPACK_WIX_ARCHITECTURE

 .. versionadded:: 3.24

 This variable can be optionally set to specify the target architecture
 of the installer. May for example be set to ``x64`` or ``arm64``.

 When unspecified, CPack will default to ``x64`` or ``x86``.

.. variable:: CPACK_WIX_INSTALL_SCOPE

 .. versionadded:: 3.29

 This variable can be optionally set to specify the ``InstallScope``
 of the installer:

 ``perMachine`` (default)
   Create an installer that installs for all users and requires
   administrative privileges.  Start menu entries created by the
   installer are visible to all users.

 ``perUser``
   Not yet supported. This is reserved for future use.

 ``NONE``
   Create an installer without any ``InstallScope`` attribute.

   .. deprecated:: 3.29

     This value is only for compatibility with the inconsistent behavior used
     by CPack 3.28 and older.  The resulting installer requires administrative
     privileges and installs into the system-wide ``ProgramFiles`` directory,
     but the start menu entry and uninstaller registration are created only
     for the current user.

 See https://wixtoolset.org/docs/v3/xsd/wix/package/



/P/🚀 manual/cmake-commands.7.rst
==============================================


.. cmake-manual-description: CMake Language Command Reference

cmake-commands(7)
*****************

Scripting Commands
==================

These commands are always available.

.. toctree::
   :maxdepth: 1

    Help/command/block
    Help/command/break
    Help/command/cmake_host_system_information
    Help/command/cmake_language
    Help/command/cmake_minimum_required
    Help/command/cmake_parse_arguments
    Help/command/cmake_path
    Help/command/cmake_policy
    Help/command/configure_file
    Help/command/continue
    Help/command/else
    Help/command/elseif
    Help/command/endblock
    Help/command/endforeach
    Help/command/endfunction
    Help/command/endif
    Help/command/endmacro
    Help/command/endwhile
    Help/command/execute_process
    Help/command/file
    Help/command/find_file
    Help/command/find_library
    Help/command/find_package
    Help/command/find_path
    Help/command/find_program
    Help/command/foreach
    Help/command/function
    Help/command/get_cmake_property
    Help/command/get_directory_property
    Help/command/get_filename_component
    Help/command/get_property
    Help/command/if
    Help/command/include
    Help/command/include_guard
    Help/command/list
    Help/command/macro
    Help/command/mark_as_advanced
    Help/command/math
    Help/command/message
    Help/command/option
    Help/command/return
    Help/command/separate_arguments
    Help/command/set
    Help/command/set_directory_properties
    Help/command/set_property
    Help/command/site_name
    Help/command/string
    Help/command/unset
    Help/command/variable_watch
    Help/command/while

Project Commands
================

These commands are available only in CMake projects.

.. toctree::
   :maxdepth: 1

    Help/command/add_compile_definitions
    Help/command/add_compile_options
    Help/command/add_custom_command
    Help/command/add_custom_target
    Help/command/add_definitions
    Help/command/add_dependencies
    Help/command/add_executable
    Help/command/add_library
    Help/command/add_link_options
    Help/command/add_subdirectory
    Help/command/add_test
    Help/command/aux_source_directory
    Help/command/build_command
    Help/command/cmake_file_api
    Help/command/create_test_sourcelist
    Help/command/define_property
    Help/command/enable_language
    Help/command/enable_testing
    Help/command/export
    Help/command/fltk_wrap_ui
    Help/command/get_source_file_property
    Help/command/get_target_property
    Help/command/get_test_property
    Help/command/include_directories
    Help/command/include_external_msproject
    Help/command/include_regular_expression
    Help/command/install
    Help/command/link_directories
    Help/command/link_libraries
    Help/command/load_cache
    Help/command/project
    Help/command/remove_definitions
    Help/command/set_source_files_properties
    Help/command/set_target_properties
    Help/command/set_tests_properties
    Help/command/source_group
    Help/command/target_compile_definitions
    Help/command/target_compile_features
    Help/command/target_compile_options
    Help/command/target_include_directories
    Help/command/target_link_directories
    Help/command/target_link_libraries
    Help/command/target_link_options
    Help/command/target_precompile_headers
    Help/command/target_sources
    Help/command/try_compile
    Help/command/try_run

.. _`CTest Commands`:

CTest Commands
==============

These commands are available only in CTest scripts.

.. toctree::
   :maxdepth: 1

    Help/command/ctest_build
    Help/command/ctest_configure
    Help/command/ctest_coverage
    Help/command/ctest_empty_binary_directory
    Help/command/ctest_memcheck
    Help/command/ctest_read_custom_files
    Help/command/ctest_run_script
    Help/command/ctest_sleep
    Help/command/ctest_start
    Help/command/ctest_submit
    Help/command/ctest_test
    Help/command/ctest_update
    Help/command/ctest_upload

Deprecated Commands
===================

These commands are deprecated and are only made available to maintain
backward compatibility.  The documentation of each command states the
CMake version in which it was deprecated.  Do not use these commands
in new code.

.. toctree::
   :maxdepth: 1

    Help/command/build_name
    Help/command/exec_program
    Help/command/export_library_dependencies
    Help/command/install_files
    Help/command/install_programs
    Help/command/install_targets
    Help/command/load_command
    Help/command/make_directory
    Help/command/output_required_files
    Help/command/qt_wrap_cpp
    Help/command/qt_wrap_ui
    Help/command/remove
    Help/command/subdir_depends
    Help/command/subdirs
    Help/command/use_mangled_mesa
    Help/command/utility_source
    Help/command/variable_requires
    Help/command/write_file



/P/🚀 command/block.rst
=====================================


block
-----

.. versionadded:: 3.25

Evaluate a group of commands with a dedicated variable and/or policy scope.

.. code-block:: cmake

  block([SCOPE_FOR [POLICIES] [VARIABLES] ] [PROPAGATE <var-name>...])
    <commands>
  endblock()

All commands between ``block()`` and the matching :command:`endblock` are
recorded without being invoked.  Once the :command:`endblock` is evaluated, the
recorded list of commands is invoked inside the requested scopes, then the
scopes created by the ``block()`` command are removed.

``SCOPE_FOR``
  Specify which scopes must be created.

  ``POLICIES``
    Create a new policy scope. This is equivalent to
    :command:`cmake_policy(PUSH)` with an automatic
    :command:`cmake_policy(POP)` when leaving the block scope.

  ``VARIABLES``
    Create a new variable scope.

  If ``SCOPE_FOR`` is not specified, this is equivalent to:

  .. code-block:: cmake

    block(SCOPE_FOR VARIABLES POLICIES)

``PROPAGATE``
  When a variable scope is created by the :command:`block` command, this
  option sets or unsets the specified variables in the parent scope. This is
  equivalent to :command:`set(PARENT_SCOPE)` or :command:`unset(PARENT_SCOPE)`
  commands.

  .. code-block:: cmake

    set(var1 "INIT1")
    set(var2 "INIT2")

    block(PROPAGATE var1 var2)
      set(var1 "VALUE1")
      unset(var2)
    endblock()

    # Now var1 holds VALUE1, and var2 is unset

  This option is only allowed when a variable scope is created. An error will
  be raised in the other cases.

When the ``block()`` is inside a :command:`foreach` or :command:`while`
command, the :command:`break` and :command:`continue` commands can be used
inside the block.

.. code-block:: cmake

  while(TRUE)
    block()
       ...
       # the break() command will terminate the while() command
       break()
    endblock()
  endwhile()


See Also
^^^^^^^^

* :command:`endblock`
* :command:`return`
* :command:`cmake_policy`



/P/🚀 command/break.rst
=====================================


break
-----

Break from an enclosing foreach or while loop.

.. code-block:: cmake

  break()

Breaks from an enclosing :command:`foreach` or :command:`while` loop.

See also the :command:`continue` command.



/P/🚀 command/cmake_host_system_information.rst
=============================================================


cmake_host_system_information
-----------------------------

Query various host system information.

Synopsis
^^^^^^^^

.. parsed-literal::

  `Query host system specific information`_
    cmake_host_system_information(RESULT <variable> QUERY <key> ...)

  `Query Windows registry`_
    cmake_host_system_information(RESULT <variable> QUERY WINDOWS_REGISTRY <key> ...)

Query host system specific information
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cmake

  cmake_host_system_information(RESULT <variable> QUERY <key> ...)

Queries system information of the host system on which cmake runs.
One or more ``<key>`` can be provided to select the information to be
queried.  The list of queried values is stored in ``<variable>``.

``<key>`` can be one of the following values:

``NUMBER_OF_LOGICAL_CORES``
  Number of logical cores

``NUMBER_OF_PHYSICAL_CORES``
  Number of physical cores

``HOSTNAME``
  Hostname

``FQDN``
  Fully qualified domain name

``TOTAL_VIRTUAL_MEMORY``
  Total virtual memory in MiB [#mebibytes]_

``AVAILABLE_VIRTUAL_MEMORY``
  Available virtual memory in MiB [#mebibytes]_

``TOTAL_PHYSICAL_MEMORY``
  Total physical memory in MiB [#mebibytes]_

``AVAILABLE_PHYSICAL_MEMORY``
  Available physical memory in MiB [#mebibytes]_

``IS_64BIT``
  .. versionadded:: 3.10

  One if processor is 64Bit

``HAS_FPU``
  .. versionadded:: 3.10

  One if processor has floating point unit

``HAS_MMX``
  .. versionadded:: 3.10

  One if processor supports MMX instructions

``HAS_MMX_PLUS``
  .. versionadded:: 3.10

  One if processor supports Ext. MMX instructions

``HAS_SSE``
  .. versionadded:: 3.10

  One if processor supports SSE instructions

``HAS_SSE2``
  .. versionadded:: 3.10

  One if processor supports SSE2 instructions

``HAS_SSE_FP``
  .. versionadded:: 3.10

  One if processor supports SSE FP instructions

``HAS_SSE_MMX``
  .. versionadded:: 3.10

  One if processor supports SSE MMX instructions

``HAS_AMD_3DNOW``
  .. versionadded:: 3.10

  One if processor supports 3DNow instructions

``HAS_AMD_3DNOW_PLUS``
  .. versionadded:: 3.10

  One if processor supports 3DNow+ instructions

``HAS_IA64``
  .. versionadded:: 3.10

  One if IA64 processor emulating x86

``HAS_SERIAL_NUMBER``
  .. versionadded:: 3.10

  One if processor has serial number

``PROCESSOR_SERIAL_NUMBER``
  .. versionadded:: 3.10

  Processor serial number

``PROCESSOR_NAME``
  .. versionadded:: 3.10

  Human readable processor name

``PROCESSOR_DESCRIPTION``
  .. versionadded:: 3.10

  Human readable full processor description

``OS_NAME``
  .. versionadded:: 3.10

  See :variable:`CMAKE_HOST_SYSTEM_NAME`

``OS_RELEASE``
  .. versionadded:: 3.10

  The OS sub-type e.g. on Windows ``Professional``

``OS_VERSION``
  .. versionadded:: 3.10

  The OS build ID

``OS_PLATFORM``
  .. versionadded:: 3.10

  See :variable:`CMAKE_HOST_SYSTEM_PROCESSOR`

``MSYSTEM_PREFIX``
  .. versionadded:: 3.28

  Available only on Windows hosts.  In a MSYS or MinGW development
  environment that sets the ``MSYSTEM`` environment variable, this
  is its installation prefix.  Otherwise, this is the empty string.

``DISTRIB_INFO``
  .. versionadded:: 3.22

  Read :file:`/etc/os-release` file and define the given ``<variable>``
  into a list of read variables

``DISTRIB_<name>``
  .. versionadded:: 3.22

  Get the ``<name>`` variable (see `man 5 os-release`_) if it exists in the
  :file:`/etc/os-release` file

  Example:

  .. code-block:: cmake

      cmake_host_system_information(RESULT PRETTY_NAME QUERY DISTRIB_PRETTY_NAME)
      message(STATUS "${PRETTY_NAME}")

      cmake_host_system_information(RESULT DISTRO QUERY DISTRIB_INFO)

      foreach(VAR IN LISTS DISTRO)
        message(STATUS "${VAR}=`${${VAR}}`")
      endforeach()


  Output::

    -- Ubuntu 20.04.2 LTS
    -- DISTRO_BUG_REPORT_URL=`https://bugs.launchpad.net/ubuntu/`
    -- DISTRO_HOME_URL=`https://www.ubuntu.com/`
    -- DISTRO_ID=`ubuntu`
    -- DISTRO_ID_LIKE=`debian`
    -- DISTRO_NAME=`Ubuntu`
    -- DISTRO_PRETTY_NAME=`Ubuntu 20.04.2 LTS`
    -- DISTRO_PRIVACY_POLICY_URL=`https://www.ubuntu.com/legal/terms-and-policies/privacy-policy`
    -- DISTRO_SUPPORT_URL=`https://help.ubuntu.com/`
    -- DISTRO_UBUNTU_CODENAME=`focal`
    -- DISTRO_VERSION=`20.04.2 LTS (Focal Fossa)`
    -- DISTRO_VERSION_CODENAME=`focal`
    -- DISTRO_VERSION_ID=`20.04`

If :file:`/etc/os-release` file is not found, the command tries to gather OS
identification via fallback scripts.  The fallback script can use `various
distribution-specific files`_ to collect OS identification data and map it
into `man 5 os-release`_ variables.

Fallback Interface Variables
""""""""""""""""""""""""""""

.. variable:: CMAKE_GET_OS_RELEASE_FALLBACK_SCRIPTS

  In addition to the scripts shipped with CMake, a user may append full
  paths to his script(s) to the this list.  The script filename has the
  following format: ``NNN-<name>.cmake``, where ``NNN`` is three digits
  used to apply collected scripts in a specific order.

.. variable:: CMAKE_GET_OS_RELEASE_FALLBACK_RESULT_<varname>

  Variables collected by the user provided fallback script
  ought to be assigned to CMake variables using this naming
  convention.  Example, the ``ID`` variable from the manual becomes
  ``CMAKE_GET_OS_RELEASE_FALLBACK_RESULT_ID``.

.. variable:: CMAKE_GET_OS_RELEASE_FALLBACK_RESULT

  The fallback script ought to store names of all assigned
  ``CMAKE_GET_OS_RELEASE_FALLBACK_RESULT_<varname>`` variables in this list.

Example:

.. code-block:: cmake

  # Try to detect some old distribution
  # See also
  # - http://linuxmafia.com/faq/Admin/release-files.html
  #
  if(NOT EXISTS "${CMAKE_SYSROOT}/etc/foobar-release")
    return()
  endif()
  # Get the first string only
  file(
      STRINGS "${CMAKE_SYSROOT}/etc/foobar-release" CMAKE_GET_OS_RELEASE_FALLBACK_CONTENT
      LIMIT_COUNT 1
    )
  #
  # Example:
  #
  #   Foobar distribution release 1.2.3 (server)
  #
  if(CMAKE_GET_OS_RELEASE_FALLBACK_CONTENT MATCHES "Foobar distribution release ([0-9\.]+) .*")
    set(CMAKE_GET_OS_RELEASE_FALLBACK_RESULT_NAME Foobar)
    set(CMAKE_GET_OS_RELEASE_FALLBACK_RESULT_PRETTY_NAME "${CMAKE_GET_OS_RELEASE_FALLBACK_CONTENT}")
    set(CMAKE_GET_OS_RELEASE_FALLBACK_RESULT_ID foobar)
    set(CMAKE_GET_OS_RELEASE_FALLBACK_RESULT_VERSION ${CMAKE_MATCH_1})
    set(CMAKE_GET_OS_RELEASE_FALLBACK_RESULT_VERSION_ID ${CMAKE_MATCH_1})
    list(
        APPEND CMAKE_GET_OS_RELEASE_FALLBACK_RESULT
        CMAKE_GET_OS_RELEASE_FALLBACK_RESULT_NAME
        CMAKE_GET_OS_RELEASE_FALLBACK_RESULT_PRETTY_NAME
        CMAKE_GET_OS_RELEASE_FALLBACK_RESULT_ID
        CMAKE_GET_OS_RELEASE_FALLBACK_RESULT_VERSION
        CMAKE_GET_OS_RELEASE_FALLBACK_RESULT_VERSION_ID
      )
  endif()
  unset(CMAKE_GET_OS_RELEASE_FALLBACK_CONTENT)


.. rubric:: Footnotes

.. [#mebibytes] One MiB (mebibyte) is equal to 1024x1024 bytes.

.. _man 5 os-release: https://www.freedesktop.org/software/systemd/man/latest/os-release.html
.. _various distribution-specific files: http://linuxmafia.com/faq/Admin/release-files.html

.. _Query Windows registry:

Query Windows registry
^^^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.24

::

  cmake_host_system_information(RESULT <variable>
                                QUERY WINDOWS_REGISTRY <key> [VALUE_NAMES|SUBKEYS|VALUE <name>]
                                [VIEW (64|32|64_32|32_64|HOST|TARGET|BOTH)]
                                [SEPARATOR <separator>]
                                [ERROR_VARIABLE <result>])

Performs query operations on local computer registry subkey. Returns a list of
subkeys or value names that are located under the specified subkey in the
registry or the data of the specified value name. The result of the queried
entity is stored in ``<variable>``.

.. note::

  Querying registry for any other platforms than ``Windows``, including
  ``CYGWIN``, will always returns an empty string and sets an error message in
  the variable specified with sub-option ``ERROR_VARIABLE``.

``<key>`` specify the full path of a subkey on the local computer. The
``<key>`` must include a valid root key. Valid root keys for the local computer
are:

* ``HKLM`` or ``HKEY_LOCAL_MACHINE``
* ``HKCU`` or ``HKEY_CURRENT_USER``
* ``HKCR`` or ``HKEY_CLASSES_ROOT``
* ``HKU`` or ``HKEY_USERS``
* ``HKCC`` or ``HKEY_CURRENT_CONFIG``

And, optionally, the path to a subkey under the specified root key. The path
separator can be the slash or the backslash. ``<key>`` is not case sensitive.
For example:

.. code-block:: cmake

  cmake_host_system_information(RESULT result QUERY WINDOWS_REGISTRY "HKLM")
  cmake_host_system_information(RESULT result QUERY WINDOWS_REGISTRY "HKLM/SOFTWARE/Kitware")
  cmake_host_system_information(RESULT result QUERY WINDOWS_REGISTRY "HKCU\\SOFTWARE\\Kitware")

``VALUE_NAMES``
  Request the list of value names defined under ``<key>``. If a default value
  is defined, it will be identified with the special name ``(default)``.

``SUBKEYS``
  Request the list of subkeys defined under ``<key>``.

``VALUE <name>``
  Request the data stored in value named ``<name>``. If ``VALUE`` is not
  specified or argument is the special name ``(default)``, the content of the
  default value, if any, will be returned.

  .. code-block:: cmake

     # query default value for HKLM/SOFTWARE/Kitware key
     cmake_host_system_information(RESULT result
                                   QUERY WINDOWS_REGISTRY "HKLM/SOFTWARE/Kitware")

     # query default value for HKLM/SOFTWARE/Kitware key using special value name
     cmake_host_system_information(RESULT result
                                   QUERY WINDOWS_REGISTRY "HKLM/SOFTWARE/Kitware"
                                   VALUE "(default)")

  Supported types are:

  * ``REG_SZ``.
  * ``REG_EXPAND_SZ``. The returned data is expanded.
  * ``REG_MULTI_SZ``. The returned is expressed as a CMake list. See also
    ``SEPARATOR`` sub-option.
  * ``REG_DWORD``.
  * ``REG_QWORD``.

  For all other types, an empty string is returned.

``VIEW``
  Specify which registry views must be queried. When not specified, ``BOTH``
  view is used.

  ``64``
    Query the 64bit registry. On ``32bit Windows``, returns always an empty
    string.

  ``32``
    Query the 32bit registry.

  ``64_32``
    For ``VALUE`` sub-option or default value, query the registry using view
    ``64``, and if the request failed, query the registry using view ``32``.
    For ``VALUE_NAMES`` and ``SUBKEYS`` sub-options, query both views (``64``
    and ``32``) and merge the results (sorted and duplicates removed).

  ``32_64``
    For ``VALUE`` sub-option or default value, query the registry using view
    ``32``, and if the request failed, query the registry using view ``64``.
    For ``VALUE_NAMES`` and ``SUBKEYS`` sub-options, query both views (``32``
    and ``64``) and merge the results (sorted and duplicates removed).

  ``HOST``
    Query the registry matching the architecture of the host: ``64`` on ``64bit
    Windows`` and ``32`` on ``32bit Windows``.

  ``TARGET``
    Query the registry matching the architecture specified by
    :variable:`CMAKE_SIZEOF_VOID_P` variable. If not defined, fallback to
    ``HOST`` view.

  ``BOTH``
    Query both views (``32`` and ``64``). The order depends of the following
    rules: If :variable:`CMAKE_SIZEOF_VOID_P` variable is defined. Use the
    following view depending of the content of this variable:

    * ``8``: ``64_32``
    * ``4``: ``32_64``

    If :variable:`CMAKE_SIZEOF_VOID_P` variable is not defined, rely on
    architecture of the host:

    * ``64bit``: ``64_32``
    * ``32bit``: ``32``

``SEPARATOR``
  Specify the separator character for ``REG_MULTI_SZ`` type. When not
  specified, the character ``\0`` is used.

``ERROR_VARIABLE <result>``
  Returns any error raised during query operation. In case of success, the
  variable holds an empty string.



/P/🚀 command/cmake_language.rst
==============================================


cmake_language
--------------

.. versionadded:: 3.18

Call meta-operations on CMake commands.

Synopsis
^^^^^^^^

.. parsed-literal::

  cmake_language(`CALL`_ <command> [<arg>...])
  cmake_language(`EVAL`_ CODE <code>...)
  cmake_language(`DEFER`_ <options>... CALL <command> [<arg>...])
  cmake_language(`SET_DEPENDENCY_PROVIDER`_ <command> SUPPORTED_METHODS <methods>...)
  cmake_language(`GET_MESSAGE_LOG_LEVEL`_ <out-var>)
  cmake_language(`EXIT`_ <exit-code>)

Introduction
^^^^^^^^^^^^

This command will call meta-operations on built-in CMake commands or
those created via the :command:`macro` or :command:`function` commands.

``cmake_language`` does not introduce a new variable or policy scope.

Calling Commands
^^^^^^^^^^^^^^^^

.. signature::
  cmake_language(CALL <command> [<arg>...])

  Calls the named ``<command>`` with the given arguments (if any).
  For example, the code:

  .. code-block:: cmake

    set(message_command "message")
    cmake_language(CALL ${message_command} STATUS "Hello World!")

  is equivalent to

  .. code-block:: cmake

    message(STATUS "Hello World!")

  .. note::
    To ensure consistency of the code, the following commands are not allowed:

    * ``if`` / ``elseif`` / ``else`` / ``endif``
    * ``block`` / ``endblock``
    * ``while`` / ``endwhile``
    * ``foreach`` / ``endforeach``
    * ``function`` / ``endfunction``
    * ``macro`` / ``endmacro``

Evaluating Code
^^^^^^^^^^^^^^^

.. signature::
  cmake_language(EVAL CODE <code>...)
  :target: EVAL

  Evaluates the ``<code>...`` as CMake code.

  For example, the code:

  .. code-block:: cmake

    set(A TRUE)
    set(B TRUE)
    set(C TRUE)
    set(condition "(A AND B) OR C")

    cmake_language(EVAL CODE "
      if (${condition})
        message(STATUS TRUE)
      else()
        message(STATUS FALSE)
      endif()"
    )

  is equivalent to

  .. code-block:: cmake

    set(A TRUE)
    set(B TRUE)
    set(C TRUE)
    set(condition "(A AND B) OR C")

    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/eval.cmake "
      if (${condition})
        message(STATUS TRUE)
      else()
        message(STATUS FALSE)
      endif()"
    )

    include(${CMAKE_CURRENT_BINARY_DIR}/eval.cmake)

Deferring Calls
^^^^^^^^^^^^^^^

.. versionadded:: 3.19

.. signature::
  cmake_language(DEFER <options>... CALL <command> [<arg>...])

  Schedules a call to the named ``<command>`` with the given arguments (if any)
  to occur at a later time.  By default, deferred calls are executed as if
  written at the end of the current directory's ``CMakeLists.txt`` file,
  except that they run even after a :command:`return` call.  Variable
  references in arguments are evaluated at the time the deferred call is
  executed.

  The options are:

  ``DIRECTORY <dir>``
    Schedule the call for the end of the given directory instead of the
    current directory.  The ``<dir>`` may reference either a source
    directory or its corresponding binary directory.  Relative paths are
    treated as relative to the current source directory.

    The given directory must be known to CMake, being either the top-level
    directory or one added by :command:`add_subdirectory`.  Furthermore,
    the given directory must not yet be finished processing.  This means
    it can be the current directory or one of its ancestors.

  ``ID <id>``
    Specify an identification for the deferred call.
    The ``<id>`` may not be empty and may not begin with a capital letter ``A-Z``.
    The ``<id>`` may begin with an underscore (``_``) only if it was generated
    automatically by an earlier call that used ``ID_VAR`` to get the id.

  ``ID_VAR <var>``
    Specify a variable in which to store the identification for the
    deferred call.  If ``ID <id>`` is not given, a new identification
    will be generated and the generated id will start with an underscore (``_``).

  The currently scheduled list of deferred calls may be retrieved:

  .. code-block:: cmake

    cmake_language(DEFER [DIRECTORY <dir>] GET_CALL_IDS <var>)

  This will store in ``<var>`` a :ref:`semicolon-separated list <CMake Language
  Lists>` of deferred call ids.  The ids are for the directory scope in which
  the calls have been deferred to (i.e. where they will be executed), which can
  be different to the scope in which they were created.  The ``DIRECTORY``
  option can be used to specify the scope for which to retrieve the call ids.
  If that option is not given, the call ids for the current directory scope
  will be returned.

  Details of a specific call may be retrieved from its id:

  .. code-block:: cmake

    cmake_language(DEFER [DIRECTORY <dir>] GET_CALL <id> <var>)

  This will store in ``<var>`` a :ref:`semicolon-separated list <CMake Language
  Lists>` in which the first element is the name of the command to be
  called, and the remaining elements are its unevaluated arguments (any
  contained ``;`` characters are included literally and cannot be distinguished
  from multiple arguments).  If multiple calls are scheduled with the same id,
  this retrieves the first one.  If no call is scheduled with the given id in
  the specified ``DIRECTORY`` scope (or the current directory scope if no
  ``DIRECTORY`` option is given), this stores an empty string in the variable.

  Deferred calls may be canceled by their id:

  .. code-block:: cmake

    cmake_language(DEFER [DIRECTORY <dir>] CANCEL_CALL <id>...)

  This cancels all deferred calls matching any of the given ids in the specified
  ``DIRECTORY`` scope (or the current directory scope if no ``DIRECTORY`` option
  is given).  Unknown ids are silently ignored.

Deferred Call Examples
""""""""""""""""""""""

For example, the code:

.. code-block:: cmake

  cmake_language(DEFER CALL message "${deferred_message}")
  cmake_language(DEFER ID_VAR id CALL message "Canceled Message")
  cmake_language(DEFER CANCEL_CALL ${id})
  message("Immediate Message")
  set(deferred_message "Deferred Message")

prints::

  Immediate Message
  Deferred Message

The ``Canceled Message`` is never printed because its command is
canceled.  The ``deferred_message`` variable reference is not evaluated
until the call site, so it can be set after the deferred call is scheduled.

In order to evaluate variable references immediately when scheduling a
deferred call, wrap it using ``cmake_language(EVAL)``.  However, note that
arguments will be re-evaluated in the deferred call, though that can be
avoided by using bracket arguments.  For example:

.. code-block:: cmake

  set(deferred_message "Deferred Message 1")
  set(re_evaluated [[${deferred_message}]])
  cmake_language(EVAL CODE "
    cmake_language(DEFER CALL message [[${deferred_message}]])
    cmake_language(DEFER CALL message \"${re_evaluated}\")
  ")
  message("Immediate Message")
  set(deferred_message "Deferred Message 2")

also prints::

  Immediate Message
  Deferred Message 1
  Deferred Message 2

.. _dependency_providers:

Dependency Providers
^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.24

.. note:: A high-level introduction to this feature can be found in the
          :ref:`Using Dependencies Guide <dependency_providers_overview>`.

.. signature::
  cmake_language(SET_DEPENDENCY_PROVIDER <command>
                 SUPPORTED_METHODS <methods>...)

  When a call is made to :command:`find_package` or
  :command:`FetchContent_MakeAvailable`, the call may be forwarded to a
  dependency provider which then has the opportunity to fulfill the request.
  If the request is for one of the ``<methods>`` specified when the provider
  was set, CMake calls the provider's ``<command>`` with a set of
  method-specific arguments.  If the provider does not fulfill the request,
  or if the provider doesn't support the request's method, or no provider
  is set, the built-in :command:`find_package` or
  :command:`FetchContent_MakeAvailable` implementation is used to fulfill
  the request in the usual way.

  One or more of the following values can be specified for the ``<methods>``
  when setting the provider:

  ``FIND_PACKAGE``
    The provider command accepts :command:`find_package` requests.

  ``FETCHCONTENT_MAKEAVAILABLE_SERIAL``
    The provider command accepts :command:`FetchContent_MakeAvailable`
    requests.  It expects each dependency to be fed to the provider command
    one at a time, not the whole list in one go.

  Only one provider can be set at any point in time.  If a provider is already
  set when ``cmake_language(SET_DEPENDENCY_PROVIDER)`` is called, the new
  provider replaces the previously set one.  The specified ``<command>`` must
  already exist when ``cmake_language(SET_DEPENDENCY_PROVIDER)`` is called.
  As a special case, providing an empty string for the ``<command>`` and no
  ``<methods>`` will discard any previously set provider.

  The dependency provider can only be set while processing one of the files
  specified by the :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` variable.
  Thus, dependency providers can only be set as part of the first call to
  :command:`project`.  Calling ``cmake_language(SET_DEPENDENCY_PROVIDER)``
  outside of that context will result in an error.

  .. note::
    The choice of dependency provider should always be under the user's control.
    As a convenience, a project may choose to provide a file that users can
    list in their :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` variable, but
    the use of such a file should always be the user's choice.

Provider commands
"""""""""""""""""

Providers define a single ``<command>`` to accept requests.  The name of
the command should be specific to that provider, not something overly
generic that another provider might also use.  This enables users to compose
different providers in their own custom provider.  The recommended form is
``xxx_provide_dependency()``, where ``xxx`` is the provider-specific part
(e.g. ``vcpkg_provide_dependency()``, ``conan_provide_dependency()``,
``ourcompany_provide_dependency()``, and so on).

.. code-block:: cmake

  xxx_provide_dependency(<method> [<method-specific-args>...])

Because some methods expect certain variables to be set in the calling scope,
the provider command should typically be implemented as a macro rather than a
function.  This ensures it does not introduce a new variable scope.

The arguments CMake passes to the dependency provider depend on the type of
request.  The first argument is always the method, and it will only ever
be one of the ``<methods>`` that was specified when setting the provider.

``FIND_PACKAGE``
  The ``<method-specific-args>`` will be everything passed to the
  :command:`find_package` call that requested the dependency.  The first of
  these ``<method-specific-args>`` will therefore always be the name of the
  dependency.  Dependency names are case-sensitive for this method because
  :command:`find_package` treats them case-sensitively too.

  If the provider command fulfills the request, it must set the same variable
  that :command:`find_package` expects to be set.  For a dependency named
  ``depName``, the provider must set ``depName_FOUND`` to true if it fulfilled
  the request.  If the provider returns without setting this variable, CMake
  will assume the request was not fulfilled and will fall back to the
  built-in implementation.

  If the provider needs to call the built-in :command:`find_package`
  implementation as part of its processing, it can do so by including the
  ``BYPASS_PROVIDER`` keyword as one of the arguments.

``FETCHCONTENT_MAKEAVAILABLE_SERIAL``
  The ``<method-specific-args>`` will be everything passed to the
  :command:`FetchContent_Declare` call that corresponds to the requested
  dependency, with the following exceptions:

  * If ``SOURCE_DIR`` or ``BINARY_DIR`` were not part of the original
    declared arguments, they will be added with their default values.
  * If :variable:`FETCHCONTENT_TRY_FIND_PACKAGE_MODE` is set to ``NEVER``,
    any ``FIND_PACKAGE_ARGS`` will be omitted.
  * The ``OVERRIDE_FIND_PACKAGE`` keyword is always omitted.

  The first of the ``<method-specific-args>`` will always be the name of the
  dependency.  Dependency names are case-insensitive for this method because
  :module:`FetchContent` also treats them case-insensitively.

  If the provider fulfills the request, it should call
  :command:`FetchContent_SetPopulated`, passing the name of the dependency as
  the first argument.  The ``SOURCE_DIR`` and ``BINARY_DIR`` arguments to that
  command should only be given if the provider makes the dependency's source
  and build directories available in exactly the same way as the built-in
  :command:`FetchContent_MakeAvailable` command.

  If the provider returns without calling :command:`FetchContent_SetPopulated`
  for the named dependency, CMake will assume the request was not fulfilled
  and will fall back to the built-in implementation.

  Note that empty arguments may be significant for this method (e.g. an empty
  string following a ``GIT_SUBMODULES`` keyword).  Therefore, if forwarding
  these arguments on to another command, extra care must be taken to avoid such
  arguments being silently dropped.

  If ``FETCHCONTENT_SOURCE_DIR_<uppercaseDepName>`` is set, then the
  dependency provider will never see requests for the ``<depName>`` dependency
  for this method. When the user sets such a variable, they are explicitly
  overriding where to get that dependency from and are taking on the
  responsibility that their overriding version meets any requirements for that
  dependency and is compatible with whatever else in the project uses it.
  Depending on the value of :variable:`FETCHCONTENT_TRY_FIND_PACKAGE_MODE`
  and whether the ``OVERRIDE_FIND_PACKAGE`` option was given to
  :command:`FetchContent_Declare`, having
  ``FETCHCONTENT_SOURCE_DIR_<uppercaseDepName>`` set may also prevent the
  dependency provider from seeing requests for a ``find_package(depName)``
  call too.

Provider Examples
"""""""""""""""""

This first example only intercepts :command:`find_package` calls.  The
provider command runs an external tool which copies the relevant artifacts
into a provider-specific directory, if that tool knows about the dependency.
It then relies on the built-in implementation to then find those artifacts.
:command:`FetchContent_MakeAvailable` calls would not go through the provider.

.. code-block:: cmake
  :caption: mycomp_provider.cmake

  # Always ensure we have the policy settings this provider expects
  cmake_minimum_required(VERSION 3.24)

  set(MYCOMP_PROVIDER_INSTALL_DIR ${CMAKE_BINARY_DIR}/mycomp_packages
    CACHE PATH "The directory this provider installs packages to"
  )
  # Tell the built-in implementation to look in our area first, unless
  # the find_package() call uses NO_..._PATH options to exclude it
  list(APPEND CMAKE_MODULE_PATH ${MYCOMP_PROVIDER_INSTALL_DIR}/cmake)
  list(APPEND CMAKE_PREFIX_PATH ${MYCOMP_PROVIDER_INSTALL_DIR})

  macro(mycomp_provide_dependency method package_name)
    execute_process(
      COMMAND some_tool ${package_name} --installdir ${MYCOMP_PROVIDER_INSTALL_DIR}
      COMMAND_ERROR_IS_FATAL ANY
    )
  endmacro()

  cmake_language(
    SET_DEPENDENCY_PROVIDER mycomp_provide_dependency
    SUPPORTED_METHODS FIND_PACKAGE
  )

The user would then typically use the above file like so::

  cmake -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=/path/to/mycomp_provider.cmake ...

The next example demonstrates a provider that accepts both methods, but
only handles one specific dependency.  It enforces providing Google Test
using :module:`FetchContent`, but leaves all other dependencies to be
fulfilled by CMake's built-in implementation.  It accepts a few different
names, which demonstrates one way of working around projects that hard-code
an unusual or undesirable way of adding this particular dependency to the
build.  The example also demonstrates how to use the :command:`list` command
to preserve variables that may be overwritten by a call to
:command:`FetchContent_MakeAvailable`.

.. code-block:: cmake
  :caption: mycomp_provider.cmake

  cmake_minimum_required(VERSION 3.24)

  # Because we declare this very early, it will take precedence over any
  # details the project might declare later for the same thing
  include(FetchContent)
  FetchContent_Declare(
    googletest
    GIT_REPOSITORY https://github.com/google/googletest.git
    GIT_TAG        e2239ee6043f73722e7aa812a459f54a28552929 # release-1.11.0
  )

  # Both FIND_PACKAGE and FETCHCONTENT_MAKEAVAILABLE_SERIAL methods provide
  # the package or dependency name as the first method-specific argument.
  macro(mycomp_provide_dependency method dep_name)
    if("${dep_name}" MATCHES "^(gtest|googletest)$")
      # Save our current command arguments in case we are called recursively
      list(APPEND mycomp_provider_args ${method} ${dep_name})

      # This will forward to the built-in FetchContent implementation,
      # which detects a recursive call for the same thing and avoids calling
      # the provider again if dep_name is the same as the current call.
      FetchContent_MakeAvailable(googletest)

      # Restore our command arguments
      list(POP_BACK mycomp_provider_args dep_name method)

      # Tell the caller we fulfilled the request
      if("${method}" STREQUAL "FIND_PACKAGE")
        # We need to set this if we got here from a find_package() call
        # since we used a different method to fulfill the request.
        # This example assumes projects only use the gtest targets,
        # not any of the variables the FindGTest module may define.
        set(${dep_name}_FOUND TRUE)
      elseif(NOT "${dep_name}" STREQUAL "googletest")
        # We used the same method, but were given a different name to the
        # one we populated with. Tell the caller about the name it used.
        FetchContent_SetPopulated(${dep_name}
          SOURCE_DIR "${googletest_SOURCE_DIR}"
          BINARY_DIR "${googletest_BINARY_DIR}"
        )
      endif()
    endif()
  endmacro()

  cmake_language(
    SET_DEPENDENCY_PROVIDER mycomp_provide_dependency
    SUPPORTED_METHODS
      FIND_PACKAGE
      FETCHCONTENT_MAKEAVAILABLE_SERIAL
  )

The final example demonstrates how to modify arguments to a
:command:`find_package` call.  It forces all such calls to have the
``QUIET`` keyword.  It uses the ``BYPASS_PROVIDER`` keyword to prevent
calling the provider command recursively for the same dependency.

.. code-block:: cmake
  :caption: mycomp_provider.cmake

  cmake_minimum_required(VERSION 3.24)

  macro(mycomp_provide_dependency method)
    find_package(${ARGN} BYPASS_PROVIDER QUIET)
  endmacro()

  cmake_language(
    SET_DEPENDENCY_PROVIDER mycomp_provide_dependency
    SUPPORTED_METHODS FIND_PACKAGE
  )

Getting current message log level
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.25

.. _query_message_log_level:

.. signature::
  cmake_language(GET_MESSAGE_LOG_LEVEL <output_variable>)

  Writes the current :command:`message` logging level
  into the given ``<output_variable>``.

  See :command:`message` for the possible logging levels.

  The current message logging level can be set either using the
  :option:`--log-level <cmake --log-level>`
  command line option of the :manual:`cmake(1)` program or using
  the :variable:`CMAKE_MESSAGE_LOG_LEVEL` variable.

  If both the command line option and the variable are set, the command line
  option takes precedence. If neither are set, the default logging level
  is returned.

Terminating Scripts
^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.29

.. signature::
  cmake_language(EXIT <exit-code>)

  Terminate the current :option:`cmake -P` script and exit with ``<exit-code>``.

  This command works only in :ref:`script mode <Script Processing Mode>`.
  If used outside of that context, it will cause a fatal error.

  The ``<exit-code>`` should be non-negative.
  If ``<exit-code>`` is negative, then the behavior
  is unspecified (e.g., on Windows the error code -1
  becomes ``0xffffffff``, and on Linux it becomes 255).
  Exit codes above 255 may not be supported by the underlying
  shell or platform, and some shells may interpret values
  above 125 specially.  Therefore, it is advisable to only
  specify an ``<exit-code>`` in the range 0 to 125.



/P/🚀 command/cmake_minimum_required.rst
======================================================


cmake_minimum_required
----------------------

Require a minimum version of cmake.

.. code-block:: cmake

  cmake_minimum_required(VERSION <min>[...<policy_max>] [FATAL_ERROR])

.. versionadded:: 3.12
  The optional ``<policy_max>`` version.

Sets the minimum required version of cmake for a project.
Also updates the policy settings as explained below.

``<min>`` and the optional ``<policy_max>`` are each CMake versions of the
form ``major.minor[.patch[.tweak]]``, and the ``...`` is literal.

If the running version of CMake is lower than the ``<min>`` required
version it will stop processing the project and report an error.
The optional ``<policy_max>`` version, if specified, must be at least the
``<min>`` version and affects policy settings as described in `Policy Settings`_.
If the running version of CMake is older than 3.12, the extra ``...``
dots will be seen as version component separators, resulting in the
``...<max>`` part being ignored and preserving the pre-3.12 behavior
of basing policies on ``<min>``.

This command will set the value of the
:variable:`CMAKE_MINIMUM_REQUIRED_VERSION` variable to ``<min>``.

The ``FATAL_ERROR`` option is accepted but ignored by CMake 2.6 and
higher.  It should be specified so CMake versions 2.4 and lower fail
with an error instead of just a warning.

.. note::
  Call the ``cmake_minimum_required()`` command at the beginning of
  the top-level ``CMakeLists.txt`` file even before calling the
  :command:`project` command.  It is important to establish version
  and policy settings before invoking other commands whose behavior
  they may affect.  See also policy :policy:`CMP0000`.

  Calling ``cmake_minimum_required()`` inside a :command:`function`
  limits some effects to the function scope when invoked.  For example,
  the :variable:`CMAKE_MINIMUM_REQUIRED_VERSION` variable won't be set
  in the calling scope.  Functions do not introduce their own policy
  scope though, so policy settings of the caller *will* be affected
  (see below).  Due to this mix of things that do and do not affect the
  calling scope, calling ``cmake_minimum_required()`` inside a function
  is generally discouraged.

.. _`Policy Settings`:

Policy Settings
^^^^^^^^^^^^^^^

The ``cmake_minimum_required(VERSION)`` command implicitly invokes the
:command:`cmake_policy(VERSION)` command to specify that the current
project code is written for the given range of CMake versions.
All policies known to the running version of CMake and introduced
in the ``<min>`` (or ``<max>``, if specified) version or earlier will
be set to use ``NEW`` behavior.  All policies introduced in later
versions will be unset.  This effectively requests behavior preferred
as of a given CMake version and tells newer CMake versions to warn
about their new policies.

When a ``<min>`` version higher than 2.4 is specified the command
implicitly invokes

.. code-block:: cmake

  cmake_policy(VERSION <min>[...<max>])

which sets CMake policies based on the range of versions specified.
When a ``<min>`` version 2.4 or lower is given the command implicitly
invokes

.. code-block:: cmake

  cmake_policy(VERSION 2.4[...<max>])

which enables compatibility features for CMake 2.4 and lower.

.. include:: DEPRECATED_POLICY_VERSIONS.txt

See Also
^^^^^^^^

* :command:`cmake_policy`



/P/🚀 command/cmake_parse_arguments.rst
=====================================================


cmake_parse_arguments
---------------------

Parse function or macro arguments.

.. code-block:: cmake

  cmake_parse_arguments(<prefix> <options> <one_value_keywords>
                        <multi_value_keywords> <args>...)

  cmake_parse_arguments(PARSE_ARGV <N> <prefix> <options>
                        <one_value_keywords> <multi_value_keywords>)

.. versionadded:: 3.5
  This command is implemented natively.  Previously, it has been defined in the
  module :module:`CMakeParseArguments`.

This command is for use in macros or functions.
It processes the arguments given to that macro or function,
and defines a set of variables which hold the values of the
respective options.

The first signature reads processes arguments passed in the ``<args>...``.
This may be used in either a :command:`macro` or a :command:`function`.

.. versionadded:: 3.7
  The ``PARSE_ARGV`` signature is only for use in a :command:`function`
  body.  In this case the arguments that are parsed come from the
  ``ARGV#`` variables of the calling function.  The parsing starts with
  the ``<N>``-th argument, where ``<N>`` is an unsigned integer.
  This allows for the values to have special characters like ``;`` in them.

The ``<options>`` argument contains all options for the respective macro,
i.e.  keywords which can be used when calling the macro without any value
following, like e.g.  the ``OPTIONAL`` keyword of the :command:`install`
command.

The ``<one_value_keywords>`` argument contains all keywords for this macro
which are followed by one value, like e.g. ``DESTINATION`` keyword of the
:command:`install` command.

The ``<multi_value_keywords>`` argument contains all keywords for this
macro which can be followed by more than one value, like e.g. the
``TARGETS`` or ``FILES`` keywords of the :command:`install` command.

.. versionchanged:: 3.5
  All keywords shall be unique. I.e. every keyword shall only be specified
  once in either ``<options>``, ``<one_value_keywords>`` or
  ``<multi_value_keywords>``. A warning will be emitted if uniqueness is
  violated.

When done, ``cmake_parse_arguments`` will consider for each of the
keywords listed in ``<options>``, ``<one_value_keywords>`` and
``<multi_value_keywords>`` a variable composed of the given ``<prefix>``
followed by ``"_"`` and the name of the respective keyword.  These
variables will then hold the respective value from the argument list
or be undefined if the associated option could not be found.
For the ``<options>`` keywords, these will always be defined,
to ``TRUE`` or ``FALSE``, whether the option is in the argument list or not.

All remaining arguments are collected in a variable
``<prefix>_UNPARSED_ARGUMENTS`` that will be undefined if all arguments
were recognized. This can be checked afterwards to see
whether your macro was called with unrecognized parameters.

.. versionadded:: 3.15
   ``<one_value_keywords>`` and ``<multi_value_keywords>`` that were given no
   values at all are collected in a variable
   ``<prefix>_KEYWORDS_MISSING_VALUES`` that will be undefined if all keywords
   received values. This can be checked to see if there were keywords without
   any values given.

Consider the following example macro, ``my_install()``, which takes similar
arguments to the real :command:`install` command:

.. code-block:: cmake

   macro(my_install)
       set(options OPTIONAL FAST)
       set(oneValueArgs DESTINATION RENAME)
       set(multiValueArgs TARGETS CONFIGURATIONS)
       cmake_parse_arguments(MY_INSTALL "${options}" "${oneValueArgs}"
                             "${multiValueArgs}" ${ARGN} )

       # ...

Assume ``my_install()`` has been called like this:

.. code-block:: cmake

   my_install(TARGETS foo bar DESTINATION bin OPTIONAL blub CONFIGURATIONS)

After the ``cmake_parse_arguments`` call the macro will have set or undefined
the following variables::

   MY_INSTALL_OPTIONAL = TRUE
   MY_INSTALL_FAST = FALSE # was not used in call to my_install
   MY_INSTALL_DESTINATION = "bin"
   MY_INSTALL_RENAME <UNDEFINED> # was not used
   MY_INSTALL_TARGETS = "foo;bar"
   MY_INSTALL_CONFIGURATIONS <UNDEFINED> # was not used
   MY_INSTALL_UNPARSED_ARGUMENTS = "blub" # nothing expected after "OPTIONAL"
   MY_INSTALL_KEYWORDS_MISSING_VALUES = "CONFIGURATIONS"
            # No value for "CONFIGURATIONS" given

You can then continue and process these variables.

Keywords terminate lists of values, e.g. if directly after a
``one_value_keyword`` another recognized keyword follows, this is
interpreted as the beginning of the new option.  E.g.
``my_install(TARGETS foo DESTINATION OPTIONAL)`` would result in
``MY_INSTALL_DESTINATION`` set to ``"OPTIONAL"``, but as ``OPTIONAL``
is a keyword itself ``MY_INSTALL_DESTINATION`` will be empty (but added
to ``MY_INSTALL_KEYWORDS_MISSING_VALUES``) and ``MY_INSTALL_OPTIONAL`` will
therefore be set to ``TRUE``.

See Also
^^^^^^^^

* :command:`function`
* :command:`macro`



/P/🚀 command/cmake_path.rst
==========================================


cmake_path
----------

.. versionadded:: 3.20

This command is for the manipulation of paths.  Only syntactic aspects of
paths are handled, there is no interaction of any kind with any underlying
file system.  The path may represent a non-existing path or even one that
is not allowed to exist on the current file system or platform.
For operations that do interact with the filesystem, see the :command:`file`
command.

.. note::

  The ``cmake_path`` command handles paths in the format of the build system
  (i.e. the host platform), not the target system.  When cross-compiling,
  if the path contains elements that are not representable on the host
  platform (e.g. a drive letter when the host is not Windows), the results
  will be unpredictable.

Synopsis
^^^^^^^^

.. parsed-literal::

  `Conventions`_

  `Path Structure And Terminology`_

  `Normalization`_

  `Decomposition`_
    cmake_path(`GET`_ <path-var> :ref:`ROOT_NAME <GET_ROOT_NAME>` <out-var>)
    cmake_path(`GET`_ <path-var> :ref:`ROOT_DIRECTORY <GET_ROOT_DIRECTORY>` <out-var>)
    cmake_path(`GET`_ <path-var> :ref:`ROOT_PATH <GET_ROOT_PATH>` <out-var>)
    cmake_path(`GET`_ <path-var> :ref:`FILENAME <GET_FILENAME>` <out-var>)
    cmake_path(`GET`_ <path-var> :ref:`EXTENSION <GET_EXTENSION>` [LAST_ONLY] <out-var>)
    cmake_path(`GET`_ <path-var> :ref:`STEM <GET_STEM>` [LAST_ONLY] <out-var>)
    cmake_path(`GET`_ <path-var> :ref:`RELATIVE_PART <GET_RELATIVE_PART>` <out-var>)
    cmake_path(`GET`_ <path-var> :ref:`PARENT_PATH <GET_PARENT_PATH>` <out-var>)

  `Query`_
    cmake_path(`HAS_ROOT_NAME`_ <path-var> <out-var>)
    cmake_path(`HAS_ROOT_DIRECTORY`_ <path-var> <out-var>)
    cmake_path(`HAS_ROOT_PATH`_ <path-var> <out-var>)
    cmake_path(`HAS_FILENAME`_ <path-var> <out-var>)
    cmake_path(`HAS_EXTENSION`_ <path-var> <out-var>)
    cmake_path(`HAS_STEM`_ <path-var> <out-var>)
    cmake_path(`HAS_RELATIVE_PART`_ <path-var> <out-var>)
    cmake_path(`HAS_PARENT_PATH`_ <path-var> <out-var>)
    cmake_path(`IS_ABSOLUTE`_ <path-var> <out-var>)
    cmake_path(`IS_RELATIVE`_ <path-var> <out-var>)
    cmake_path(`IS_PREFIX`_ <path-var> <input> [NORMALIZE] <out-var>)
    cmake_path(`COMPARE`_ <input1> <OP> <input2> <out-var>)

  `Modification`_
    cmake_path(:ref:`SET <cmake_path-SET>` <path-var> [NORMALIZE] <input>)
    cmake_path(`APPEND`_ <path-var> [<input>...] [OUTPUT_VARIABLE <out-var>])
    cmake_path(`APPEND_STRING`_ <path-var> [<input>...] [OUTPUT_VARIABLE <out-var>])
    cmake_path(`REMOVE_FILENAME`_ <path-var> [OUTPUT_VARIABLE <out-var>])
    cmake_path(`REPLACE_FILENAME`_ <path-var> <input> [OUTPUT_VARIABLE <out-var>])
    cmake_path(`REMOVE_EXTENSION`_ <path-var> [LAST_ONLY] [OUTPUT_VARIABLE <out-var>])
    cmake_path(`REPLACE_EXTENSION`_ <path-var> [LAST_ONLY] <input> [OUTPUT_VARIABLE <out-var>])

  `Generation`_
    cmake_path(`NORMAL_PATH`_ <path-var> [OUTPUT_VARIABLE <out-var>])
    cmake_path(`RELATIVE_PATH`_ <path-var> [BASE_DIRECTORY <input>] [OUTPUT_VARIABLE <out-var>])
    cmake_path(`ABSOLUTE_PATH`_ <path-var> [BASE_DIRECTORY <input>] [NORMALIZE] [OUTPUT_VARIABLE <out-var>])

  `Native Conversion`_
    cmake_path(`NATIVE_PATH`_ <path-var> [NORMALIZE] <out-var>)
    cmake_path(`CONVERT`_ <input> `TO_CMAKE_PATH_LIST`_ <out-var> [NORMALIZE])
    cmake_path(`CONVERT`_ <input> `TO_NATIVE_PATH_LIST`_ <out-var> [NORMALIZE])

  `Hashing`_
    cmake_path(`HASH`_ <path-var> <out-var>)

Conventions
^^^^^^^^^^^

The following conventions are used in this command's documentation:

``<path-var>``
  Always the name of a variable.  For commands that expect a ``<path-var>``
  as input, the variable must exist and it is expected to hold a single path.

``<input>``
  A string literal which may contain a path, path fragment, or multiple paths
  with a special separator depending on the command.  See the description of
  each command to see how this is interpreted.

``<input>...``
  Zero or more string literal arguments.

``<out-var>``
  The name of a variable into which the result of a command will be written.


.. _Path Structure And Terminology:

Path Structure And Terminology
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A path has the following structure (all components are optional, with some
constraints):

::

  root-name root-directory-separator (item-name directory-separator)* filename

``root-name``
  Identifies the root on a filesystem with multiple roots (such as ``"C:"``
  or ``"//myserver"``). It is optional.

``root-directory-separator``
  A directory separator that, if present, indicates that this path is
  absolute.  If it is missing and the first element other than the
  ``root-name`` is an ``item-name``, then the path is relative.

``item-name``
  A sequence of characters that aren't directory separators.  This name may
  identify a file, a hard link, a symbolic link, or a directory.  Two special
  cases are recognized:

    * The item name consisting of a single dot character ``.`` is a
      directory name that refers to the current directory.

    * The item name consisting of two dot characters ``..`` is a
      directory name that refers to the parent directory.

  The ``(...)*`` pattern shown above is to indicate that there can be zero
  or more item names, with multiple items separated by a
  ``directory-separator``.  The ``()*`` characters are not part of the path.

``directory-separator``
  The only recognized directory separator is a forward slash character ``/``.
  If this character is repeated, it is treated as a single directory
  separator.  In other words, ``/usr///////lib`` is the same as ``/usr/lib``.

.. _FILENAME_DEF:
.. _EXTENSION_DEF:
.. _STEM_DEF:

``filename``
  A path has a ``filename`` if it does not end with a ``directory-separator``.
  The ``filename`` is effectively the last ``item-name`` of the path, so it
  can also be a hard link, symbolic link or a directory.

  A ``filename`` can have an *extension*.  By default, the extension is
  defined as the sub-string beginning at the left-most period (including
  the period) and until the end of the ``filename``.  In commands that
  accept a ``LAST_ONLY`` keyword, ``LAST_ONLY`` changes the interpretation
  to the sub-string beginning at the right-most period.

  The following exceptions apply to the above interpretation:

    * If the first character in the ``filename`` is a period, that period is
      ignored (i.e. a ``filename`` like ``".profile"`` is treated as having
      no extension).

    * If the ``filename`` is either ``.`` or ``..``, it has no extension.

  The *stem* is the part of the ``filename`` before the extension.

Some commands refer to a ``root-path``.  This is the concatenation of
``root-name`` and ``root-directory-separator``, either or both of which can
be empty.  A ``relative-part`` refers to the full path with any ``root-path``
removed.


Creating A Path Variable
^^^^^^^^^^^^^^^^^^^^^^^^

While a path can be created with care using an ordinary :command:`set`
command, it is recommended to use :ref:`cmake_path(SET) <cmake_path-SET>`
instead, as it automatically converts the path to the required form where
required.  The :ref:`cmake_path(APPEND) <APPEND>` subcommand may
be another suitable alternative where a path needs to be constructed by
joining fragments.  The following example compares the three methods for
constructing the same path:

.. code-block:: cmake

  set(path1 "${CMAKE_CURRENT_SOURCE_DIR}/data")

  cmake_path(SET path2 "${CMAKE_CURRENT_SOURCE_DIR}/data")

  cmake_path(APPEND path3 "${CMAKE_CURRENT_SOURCE_DIR}" "data")

`Modification`_ and `Generation`_ sub-commands can either store the result
in-place, or in a separate variable named after an ``OUTPUT_VARIABLE``
keyword.  All other sub-commands store the result in a mandatory ``<out-var>``
variable.

.. _Normalization:

Normalization
^^^^^^^^^^^^^

Some sub-commands support *normalizing* a path.  The algorithm used to
normalize a path is as follows:

1. If the path is empty, stop (the normalized form of an empty path is
   also an empty path).
2. Replace each ``directory-separator``, which may consist of multiple
   separators, with a single ``/`` (``/a///b  --> /a/b``).
3. Remove each solitary period (``.``) and any immediately following
   ``directory-separator`` (``/a/./b/. --> /a/b``).
4. Remove each ``item-name`` (other than ``..``) that is immediately
   followed by a ``directory-separator`` and a ``..``, along with any
   immediately following ``directory-separator`` (``/a/b/../c --> a/c``).
5. If there is a ``root-directory``, remove any ``..`` and any
   ``directory-separators`` immediately following them.  The parent of the
   root directory is treated as still the root directory (``/../a --> /a``).
6. If the last ``item-name`` is ``..``, remove any trailing
   ``directory-separator`` (``../ --> ..``).
7. If the path is empty by this stage, add a ``dot`` (normal form of ``./``
   is ``.``).


.. _Path Decomposition:

Decomposition
^^^^^^^^^^^^^

.. _GET:
.. _GET_ROOT_NAME:
.. _GET_ROOT_DIRECTORY:
.. _GET_ROOT_PATH:
.. _GET_FILENAME:
.. _GET_EXTENSION:
.. _GET_STEM:
.. _GET_RELATIVE_PART:
.. _GET_PARENT_PATH:

The following forms of the ``GET`` subcommand each retrieve a different
component or group of components from a path.  See
`Path Structure And Terminology`_ for the meaning of each path component.

.. code-block:: cmake

  cmake_path(GET <path-var> ROOT_NAME <out-var>)
  cmake_path(GET <path-var> ROOT_DIRECTORY <out-var>)
  cmake_path(GET <path-var> ROOT_PATH <out-var>)
  cmake_path(GET <path-var> FILENAME <out-var>)
  cmake_path(GET <path-var> EXTENSION [LAST_ONLY] <out-var>)
  cmake_path(GET <path-var> STEM [LAST_ONLY] <out-var>)
  cmake_path(GET <path-var> RELATIVE_PART <out-var>)
  cmake_path(GET <path-var> PARENT_PATH <out-var>)

If a requested component is not present in the path, an empty string will be
stored in ``<out-var>``.  For example, only Windows systems have the concept
of a ``root-name``, so when the host machine is non-Windows, the ``ROOT_NAME``
subcommand will always return an empty string.

For ``PARENT_PATH``, if the `HAS_RELATIVE_PART`_ subcommand returns false,
the result is a copy of ``<path-var>``.  Note that this implies that a root
directory is considered to have a parent, with that parent being itself.
Where `HAS_RELATIVE_PART`_ returns true, the result will essentially be
``<path-var>`` with one less element.

Root examples
"""""""""""""

.. code-block:: cmake

  set(path "c:/a")

  cmake_path(GET path ROOT_NAME rootName)
  cmake_path(GET path ROOT_DIRECTORY rootDir)
  cmake_path(GET path ROOT_PATH rootPath)

  message("Root name is \"${rootName}\"")
  message("Root directory is \"${rootDir}\"")
  message("Root path is \"${rootPath}\"")

::

  Root name is "c:"
  Root directory is "/"
  Root path is "c:/"

Filename examples
"""""""""""""""""

.. code-block:: cmake

  set(path "/a/b")
  cmake_path(GET path FILENAME filename)
  message("First filename is \"${filename}\"")

  # Trailing slash means filename is empty
  set(path "/a/b/")
  cmake_path(GET path FILENAME filename)
  message("Second filename is \"${filename}\"")

::

  First filename is "b"
  Second filename is ""

Extension and stem examples
"""""""""""""""""""""""""""

.. code-block:: cmake

  set(path "name.ext1.ext2")

  cmake_path(GET path EXTENSION fullExt)
  cmake_path(GET path STEM fullStem)
  message("Full extension is \"${fullExt}\"")
  message("Full stem is \"${fullStem}\"")

  # Effect of LAST_ONLY
  cmake_path(GET path EXTENSION LAST_ONLY lastExt)
  cmake_path(GET path STEM LAST_ONLY lastStem)
  message("Last extension is \"${lastExt}\"")
  message("Last stem is \"${lastStem}\"")

  # Special cases
  set(dotPath "/a/.")
  set(dotDotPath "/a/..")
  set(someMorePath "/a/.some.more")
  cmake_path(GET dotPath EXTENSION dotExt)
  cmake_path(GET dotPath STEM dotStem)
  cmake_path(GET dotDotPath EXTENSION dotDotExt)
  cmake_path(GET dotDotPath STEM dotDotStem)
  cmake_path(GET dotMorePath EXTENSION someMoreExt)
  cmake_path(GET dotMorePath STEM someMoreStem)
  message("Dot extension is \"${dotExt}\"")
  message("Dot stem is \"${dotStem}\"")
  message("Dot-dot extension is \"${dotDotExt}\"")
  message("Dot-dot stem is \"${dotDotStem}\"")
  message(".some.more extension is \"${someMoreExt}\"")
  message(".some.more stem is \"${someMoreStem}\"")

::

  Full extension is ".ext1.ext2"
  Full stem is "name"
  Last extension is ".ext2"
  Last stem is "name.ext1"
  Dot extension is ""
  Dot stem is "."
  Dot-dot extension is ""
  Dot-dot stem is ".."
  .some.more extension is ".more"
  .some.more stem is ".some"

Relative part examples
""""""""""""""""""""""

.. code-block:: cmake

  set(path "c:/a/b")
  cmake_path(GET path RELATIVE_PART result)
  message("Relative part is \"${result}\"")

  set(path "c/d")
  cmake_path(GET path RELATIVE_PART result)
  message("Relative part is \"${result}\"")

  set(path "/")
  cmake_path(GET path RELATIVE_PART result)
  message("Relative part is \"${result}\"")

::

  Relative part is "a/b"
  Relative part is "c/d"
  Relative part is ""

Path traversal examples
"""""""""""""""""""""""

.. code-block:: cmake

  set(path "c:/a/b")
  cmake_path(GET path PARENT_PATH result)
  message("Parent path is \"${result}\"")

  set(path "c:/")
  cmake_path(GET path PARENT_PATH result)
  message("Parent path is \"${result}\"")

::

  Parent path is "c:/a"
  Parent path is "c:/"


.. _Path Query:

Query
^^^^^

Each of the ``GET`` subcommands has a corresponding ``HAS_...``
subcommand which can be used to discover whether a particular path
component is present.  See `Path Structure And Terminology`_ for the
meaning of each path component.

.. _HAS_ROOT_NAME:
.. _HAS_ROOT_DIRECTORY:
.. _HAS_ROOT_PATH:
.. _HAS_FILENAME:
.. _HAS_EXTENSION:
.. _HAS_STEM:
.. _HAS_RELATIVE_PART:
.. _HAS_PARENT_PATH:

.. code-block:: cmake

  cmake_path(HAS_ROOT_NAME <path-var> <out-var>)
  cmake_path(HAS_ROOT_DIRECTORY <path-var> <out-var>)
  cmake_path(HAS_ROOT_PATH <path-var> <out-var>)
  cmake_path(HAS_FILENAME <path-var> <out-var>)
  cmake_path(HAS_EXTENSION <path-var> <out-var>)
  cmake_path(HAS_STEM <path-var> <out-var>)
  cmake_path(HAS_RELATIVE_PART <path-var> <out-var>)
  cmake_path(HAS_PARENT_PATH <path-var> <out-var>)

Each of the above follows the predictable pattern of setting ``<out-var>``
to true if the path has the associated component, or false otherwise.
Note the following special cases:

* For ``HAS_ROOT_PATH``, a true result will only be returned if at least one
  of ``root-name`` or ``root-directory`` is non-empty.

* For ``HAS_PARENT_PATH``, the root directory is also considered to have a
  parent, which will be itself.  The result is true except if the path
  consists of just a :ref:`filename <FILENAME_DEF>`.

.. _IS_ABSOLUTE:

.. code-block:: cmake

  cmake_path(IS_ABSOLUTE <path-var> <out-var>)

Sets ``<out-var>`` to true if ``<path-var>`` is absolute.  An absolute path
is a path that unambiguously identifies the location of a file without
reference to an additional starting location.  On Windows, this means the
path must have both a ``root-name`` and a ``root-directory-separator`` to be
considered absolute.  On other platforms, just a ``root-directory-separator``
is sufficient.  Note that this means on Windows, ``IS_ABSOLUTE`` can be
false while ``HAS_ROOT_DIRECTORY`` can be true.

.. _IS_RELATIVE:

.. code-block:: cmake

  cmake_path(IS_RELATIVE <path-var> <out-var>)

This will store the opposite of ``IS_ABSOLUTE`` in ``<out-var>``.

.. _IS_PREFIX:

.. code-block:: cmake

  cmake_path(IS_PREFIX <path-var> <input> [NORMALIZE] <out-var>)

Checks if ``<path-var>`` is the prefix of ``<input>``.

When the ``NORMALIZE`` option is specified, ``<path-var>`` and ``<input>``
are :ref:`normalized <Normalization>` before the check.

.. code-block:: cmake

  set(path "/a/b/c")
  cmake_path(IS_PREFIX path "/a/b/c/d" result) # result = true
  cmake_path(IS_PREFIX path "/a/b" result)     # result = false
  cmake_path(IS_PREFIX path "/x/y/z" result)   # result = false

  set(path "/a/b")
  cmake_path(IS_PREFIX path "/a/c/../b" NORMALIZE result)   # result = true

.. _Path COMPARE:
.. _COMPARE:

.. code-block:: cmake

  cmake_path(COMPARE <input1> EQUAL <input2> <out-var>)
  cmake_path(COMPARE <input1> NOT_EQUAL <input2> <out-var>)

Compares the lexical representations of two paths provided as string literals.
No normalization is performed on either path, except multiple consecutive
directory separators are effectively collapsed into a single separator.
Equality is determined according to the following pseudo-code logic:

::

  if(NOT <input1>.root_name() STREQUAL <input2>.root_name())
    return FALSE

  if(<input1>.has_root_directory() XOR <input2>.has_root_directory())
    return FALSE

  Return FALSE if a relative portion of <input1> is not lexicographically
  equal to the relative portion of <input2>. This comparison is performed path
  component-wise. If all of the components compare equal, then return TRUE.

.. note::
  Unlike most other ``cmake_path()`` subcommands, the ``COMPARE`` subcommand
  takes literal strings as input, not the names of variables.


.. _Path Modification:

Modification
^^^^^^^^^^^^

.. _cmake_path-SET:

.. code-block:: cmake

  cmake_path(SET <path-var> [NORMALIZE] <input>)

Assign the ``<input>`` path to ``<path-var>``.  If ``<input>`` is a native
path, it is converted into a cmake-style path with forward-slashes
(``/``). On Windows, the long filename marker is taken into account.

When the ``NORMALIZE`` option is specified, the path is :ref:`normalized
<Normalization>` after the conversion.

For example:

.. code-block:: cmake

  set(native_path "c:\\a\\b/..\\c")
  cmake_path(SET path "${native_path}")
  message("CMake path is \"${path}\"")

  cmake_path(SET path NORMALIZE "${native_path}")
  message("Normalized CMake path is \"${path}\"")

Output::

  CMake path is "c:/a/b/../c"
  Normalized CMake path is "c:/a/c"

.. _APPEND:

.. code-block:: cmake

  cmake_path(APPEND <path-var> [<input>...] [OUTPUT_VARIABLE <out-var>])

Append all the ``<input>`` arguments to the ``<path-var>`` using ``/`` as
the ``directory-separator``.  Depending on the ``<input>``, the previous
contents of ``<path-var>`` may be discarded.  For each ``<input>`` argument,
the following algorithm (pseudo-code) applies:

::

  # <path> is the contents of <path-var>

  if(<input>.is_absolute() OR
     (<input>.has_root_name() AND
      NOT <input>.root_name() STREQUAL <path>.root_name()))
    replace <path> with <input>
    return()
  endif()

  if(<input>.has_root_directory())
    remove any root-directory and the entire relative path from <path>
  elseif(<path>.has_filename() OR
         (NOT <path-var>.has_root_directory() OR <path>.is_absolute()))
    append directory-separator to <path>
  endif()

  append <input> omitting any root-name to <path>

.. _APPEND_STRING:

.. code-block:: cmake

  cmake_path(APPEND_STRING <path-var> [<input>...] [OUTPUT_VARIABLE <out-var>])

Append all the ``<input>`` arguments to the ``<path-var>`` without adding any
``directory-separator``.

.. _REMOVE_FILENAME:

.. code-block:: cmake

  cmake_path(REMOVE_FILENAME <path-var> [OUTPUT_VARIABLE <out-var>])

Removes the :ref:`filename <FILENAME_DEF>` component (as returned by
:ref:`GET ... FILENAME <GET_FILENAME>`) from ``<path-var>``.  After removal,
any trailing ``directory-separator`` is left alone, if present.

If ``OUTPUT_VARIABLE`` is not given, then after this function returns,
`HAS_FILENAME`_ returns false for ``<path-var>``.

For example:

.. code-block:: cmake

  set(path "/a/b")
  cmake_path(REMOVE_FILENAME path)
  message("First path is \"${path}\"")

  # filename is now already empty, the following removes nothing
  cmake_path(REMOVE_FILENAME path)
  message("Second path is \"${result}\"")

Output::

  First path is "/a/"
  Second path is "/a/"

.. _REPLACE_FILENAME:

.. code-block:: cmake

  cmake_path(REPLACE_FILENAME <path-var> <input> [OUTPUT_VARIABLE <out-var>])

Replaces the :ref:`filename <FILENAME_DEF>` component from ``<path-var>``
with ``<input>``.  If ``<path-var>`` has no filename component (i.e.
`HAS_FILENAME`_ returns false), the path is unchanged.  The operation is
equivalent to the following:

.. code-block:: cmake

  cmake_path(HAS_FILENAME path has_filename)
  if(has_filename)
    cmake_path(REMOVE_FILENAME path)
    cmake_path(APPEND path input);
  endif()

.. _REMOVE_EXTENSION:

.. code-block:: cmake

  cmake_path(REMOVE_EXTENSION <path-var> [LAST_ONLY]
                                         [OUTPUT_VARIABLE <out-var>])

Removes the :ref:`extension <EXTENSION_DEF>`, if any, from ``<path-var>``.

.. _REPLACE_EXTENSION:

.. code-block:: cmake

  cmake_path(REPLACE_EXTENSION <path-var> [LAST_ONLY] <input>
                               [OUTPUT_VARIABLE <out-var>])

Replaces the :ref:`extension <EXTENSION_DEF>` with ``<input>``.  Its effect
is equivalent to the following:

.. code-block:: cmake

  cmake_path(REMOVE_EXTENSION path)
  if(NOT "input" MATCHES "^\\.")
    cmake_path(APPEND_STRING path ".")
  endif()
  cmake_path(APPEND_STRING path "input")


.. _Path Generation:

Generation
^^^^^^^^^^

.. _NORMAL_PATH:

.. code-block:: cmake

  cmake_path(NORMAL_PATH <path-var> [OUTPUT_VARIABLE <out-var>])

Normalize ``<path-var>`` according the steps described in :ref:`Normalization`.

.. _cmake_path-RELATIVE_PATH:
.. _RELATIVE_PATH:

.. code-block:: cmake

  cmake_path(RELATIVE_PATH <path-var> [BASE_DIRECTORY <input>]
                                      [OUTPUT_VARIABLE <out-var>])

Modifies ``<path-var>`` to make it relative to the ``BASE_DIRECTORY`` argument.
If ``BASE_DIRECTORY`` is not specified, the default base directory will be
:variable:`CMAKE_CURRENT_SOURCE_DIR`.

For reference, the algorithm used to compute the relative path is the same
as that used by C++
`std::filesystem::path::lexically_relative
<https://en.cppreference.com/w/cpp/filesystem/path/lexically_normal>`_.

.. _ABSOLUTE_PATH:

.. code-block:: cmake

  cmake_path(ABSOLUTE_PATH <path-var> [BASE_DIRECTORY <input>] [NORMALIZE]
                                      [OUTPUT_VARIABLE <out-var>])

If ``<path-var>`` is a relative path (`IS_RELATIVE`_ is true), it is evaluated
relative to the given base directory specified by ``BASE_DIRECTORY`` option.
If ``BASE_DIRECTORY`` is not specified, the default base directory will be
:variable:`CMAKE_CURRENT_SOURCE_DIR`.

When the ``NORMALIZE`` option is specified, the path is :ref:`normalized
<Normalization>` after the path computation.

Because ``cmake_path()`` does not access the filesystem, symbolic links are
not resolved and any leading tilde is not expanded.  To compute a real path
with symbolic links resolved and leading tildes expanded, use the
:command:`file(REAL_PATH)` command instead.

Native Conversion
^^^^^^^^^^^^^^^^^

For commands in this section, *native* refers to the host platform, not the
target platform when cross-compiling.

.. _cmake_path-NATIVE_PATH:
.. _NATIVE_PATH:

.. code-block:: cmake

  cmake_path(NATIVE_PATH <path-var> [NORMALIZE] <out-var>)

Converts a cmake-style ``<path-var>`` into a native path with
platform-specific slashes (``\`` on Windows hosts and ``/`` elsewhere).

When the ``NORMALIZE`` option is specified, the path is :ref:`normalized
<Normalization>` before the conversion.

.. _CONVERT:
.. _cmake_path-TO_CMAKE_PATH_LIST:
.. _TO_CMAKE_PATH_LIST:

.. code-block:: cmake

  cmake_path(CONVERT <input> TO_CMAKE_PATH_LIST <out-var> [NORMALIZE])

Converts a native ``<input>`` path into a cmake-style path with forward
slashes (``/``).  On Windows hosts, the long filename marker is taken into
account.  The input can be a single path or a system search path like
``$ENV{PATH}``.  A search path will be converted to a cmake-style list
separated by ``;`` characters (on non-Windows platforms, this essentially
means ``:`` separators are replaced with ``;``).  The result of the
conversion is stored in the ``<out-var>`` variable.

When the ``NORMALIZE`` option is specified, the path is :ref:`normalized
<Normalization>` before the conversion.

.. note::
  Unlike most other ``cmake_path()`` subcommands, the ``CONVERT`` subcommand
  takes a literal string as input, not the name of a variable.

.. _cmake_path-TO_NATIVE_PATH_LIST:
.. _TO_NATIVE_PATH_LIST:

.. code-block:: cmake

  cmake_path(CONVERT <input> TO_NATIVE_PATH_LIST <out-var> [NORMALIZE])

Converts a cmake-style ``<input>`` path into a native path with
platform-specific slashes (``\`` on Windows hosts and ``/`` elsewhere).
The input can be a single path or a cmake-style list.  A list will be
converted into a native search path (``;``-separated on Windows,
``:``-separated on other platforms).  The result of the conversion is
stored in the ``<out-var>`` variable.

When the ``NORMALIZE`` option is specified, the path is :ref:`normalized
<Normalization>` before the conversion.

.. note::
  Unlike most other ``cmake_path()`` subcommands, the ``CONVERT`` subcommand
  takes a literal string as input, not the name of a variable.

For example:

.. code-block:: cmake

  set(paths "/a/b/c" "/x/y/z")
  cmake_path(CONVERT "${paths}" TO_NATIVE_PATH_LIST native_paths)
  message("Native path list is \"${native_paths}\"")

Output on Windows::

  Native path list is "\a\b\c;\x\y\z"

Output on all other platforms::

  Native path list is "/a/b/c:/x/y/z"

Hashing
^^^^^^^

.. _HASH:

.. code-block:: cmake

    cmake_path(HASH <path-var> <out-var>)

Compute a hash value of ``<path-var>`` such that for two paths ``p1`` and
``p2`` that compare equal (:ref:`COMPARE ... EQUAL <COMPARE>`), the hash
value of ``p1`` is equal to the hash value of ``p2``.  The path is always
:ref:`normalized <Normalization>` before the hash is computed.



/P/🚀 command/cmake_policy.rst
============================================


cmake_policy
------------

Manage CMake Policy settings.  See the :manual:`cmake-policies(7)`
manual for defined policies.

As CMake evolves it is sometimes necessary to change existing behavior
in order to fix bugs or improve implementations of existing features.
The CMake Policy mechanism is designed to help keep existing projects
building as new versions of CMake introduce changes in behavior.  Each
new policy (behavioral change) is given an identifier of the form
``CMP<NNNN>`` where ``<NNNN>`` is an integer index.  Documentation
associated with each policy describes the ``OLD`` and ``NEW`` behavior
and the reason the policy was introduced.  Projects may set each policy
to select the desired behavior.  When CMake needs to know which behavior
to use it checks for a setting specified by the project.  If no
setting is available the ``OLD`` behavior is assumed and a warning is
produced requesting that the policy be set.

Setting Policies by CMake Version
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ``cmake_policy`` command is used to set policies to ``OLD`` or ``NEW``
behavior.  While setting policies individually is supported, we
encourage projects to set policies based on CMake versions:

.. signature:: cmake_policy(VERSION <min>[...<max>])
  :target: VERSION

.. versionadded:: 3.12
  The optional ``<max>`` version.

``<min>`` and the optional ``<max>`` are each CMake versions of the form
``major.minor[.patch[.tweak]]``, and the ``...`` is literal.  The ``<min>``
version must be at least ``2.4`` and at most the running version of CMake.
The ``<max>`` version, if specified, must be at least the ``<min>`` version
but may exceed the running version of CMake.  If the running version of
CMake is older than 3.12, the extra ``...`` dots will be seen as version
component separators, resulting in the ``...<max>`` part being ignored and
preserving the pre-3.12 behavior of basing policies on ``<min>``.

This specifies that the current CMake code is written for the given
range of CMake versions.  All policies known to the running version of CMake
and introduced in the ``<min>`` (or ``<max>``, if specified) version
or earlier will be set to use ``NEW`` behavior.  All policies
introduced in later versions will be unset (unless the
:variable:`CMAKE_POLICY_DEFAULT_CMP<NNNN>` variable sets a default).
This effectively requests behavior preferred as of a given CMake
version and tells newer CMake versions to warn about their new policies.

Note that the :command:`cmake_minimum_required(VERSION)`
command implicitly calls ``cmake_policy(VERSION)`` too.

.. include:: DEPRECATED_POLICY_VERSIONS.txt

Setting Policies Explicitly
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. signature:: cmake_policy(SET CMP<NNNN> NEW|OLD)
  :target: SET

Tell CMake to use the ``OLD`` or ``NEW`` behavior for a given policy.
Projects depending on the old behavior of a given policy may silence a
policy warning by setting the policy state to ``OLD``.  Alternatively
one may fix the project to work with the new behavior and set the
policy state to ``NEW``.

.. include:: ../policy/DEPRECATED.txt

Checking Policy Settings
^^^^^^^^^^^^^^^^^^^^^^^^

.. signature:: cmake_policy(GET CMP<NNNN> <variable>)
  :target: GET

Check whether a given policy is set to ``OLD`` or ``NEW`` behavior.
The output ``<variable>`` value will be ``OLD`` or ``NEW`` if the
policy is set, and empty otherwise.

CMake Policy Stack
^^^^^^^^^^^^^^^^^^

CMake keeps policy settings on a stack, so changes made by the
``cmake_policy`` command affect only the top of the stack.  A new entry on
the policy stack is managed automatically for each subdirectory to
protect its parents and siblings.  CMake also manages a new entry for
scripts loaded by :command:`include` and :command:`find_package` commands
except when invoked with the ``NO_POLICY_SCOPE`` option
(see also policy :policy:`CMP0011`).
The ``cmake_policy`` command provides an interface to manage custom
entries on the policy stack:

.. signature:: cmake_policy(PUSH)
  :target: PUSH

  Create a new entry on the policy stack.

.. signature:: cmake_policy(POP)
  :target: POP

  Remove the last policy stack entry created with ``cmake_policy(PUSH)``.

Each ``PUSH`` must have a matching ``POP`` to erase any changes.
This is useful to make temporary changes to policy settings.
Calls to the :command:`cmake_minimum_required(VERSION)`,
:command:`cmake_policy(VERSION)`, or :command:`cmake_policy(SET)` commands
influence only the current top of the policy stack.

.. versionadded:: 3.25
  The :command:`block(SCOPE_FOR POLICIES)` command offers a more flexible
  and more secure way to manage the policy stack. The pop action is done
  automatically when leaving the block scope, so there is no need to
  precede each :command:`return` with a call to :command:`cmake_policy(POP)`.

  .. code-block:: cmake

    # stack management with cmake_policy()
    function(my_func)
      cmake_policy(PUSH)
      cmake_policy(SET ...)
      if (<cond1>)
        ...
        cmake_policy(POP)
        return()
      elseif(<cond2>)
        ...
        cmake_policy(POP)
        return()
      endif()
      ...
      cmake_policy(POP)
    endfunction()

    # stack management with block()/endblock()
    function(my_func)
      block(SCOPE_FOR POLICIES)
        cmake_policy(SET ...)
        if (<cond1>)
          ...
          return()
        elseif(<cond2>)
          ...
          return()
        endif()
        ...
      endblock()
    endfunction()

Commands created by the :command:`function` and :command:`macro`
commands record policy settings when they are created and
use the pre-record policies when they are invoked.  If the function or
macro implementation sets policies, the changes automatically
propagate up through callers until they reach the closest nested
policy stack entry.

See Also
^^^^^^^^

* :command:`cmake_minimum_required`



/P/🚀 command/configure_file.rst
==============================================


configure_file
--------------

Copy a file to another location and modify its contents.

.. code-block:: cmake

  configure_file(<input> <output>
                 [NO_SOURCE_PERMISSIONS | USE_SOURCE_PERMISSIONS |
                  FILE_PERMISSIONS <permissions>...]
                 [COPYONLY] [ESCAPE_QUOTES] [@ONLY]
                 [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])

Copies an ``<input>`` file to an ``<output>`` file while performing
`transformations`_ of the input file content.

If the input file is modified the build system will re-run CMake to
re-configure the file and generate the build system again.
The generated file is modified and its timestamp updated on subsequent
cmake runs only if its content is changed.

Options
^^^^^^^

The options are:

``<input>``
  Path to the input file.  A relative path is treated with respect to
  the value of :variable:`CMAKE_CURRENT_SOURCE_DIR`.  The input path
  must be a file, not a directory.

``<output>``
  Path to the output file or directory.  A relative path is treated
  with respect to the value of :variable:`CMAKE_CURRENT_BINARY_DIR`.
  If the path names an existing directory the output file is placed
  in that directory with the same file name as the input file.
  If the path contains non-existent directories, they are created.

``NO_SOURCE_PERMISSIONS``
  .. versionadded:: 3.19

  Do not transfer the permissions of the input file to the output file.
  The copied file permissions default to the standard 644 value
  (-rw-r--r--).

``USE_SOURCE_PERMISSIONS``
  .. versionadded:: 3.20

  Transfer the permissions of the input file to the output file.
  This is already the default behavior if none of the three permissions-related
  keywords are given (``NO_SOURCE_PERMISSIONS``, ``USE_SOURCE_PERMISSIONS``
  or ``FILE_PERMISSIONS``).  The ``USE_SOURCE_PERMISSIONS`` keyword mostly
  serves as a way of making the intended behavior clearer at the call site.

``FILE_PERMISSIONS <permissions>...``
  .. versionadded:: 3.20

  Ignore the input file's permissions and use the specified ``<permissions>``
  for the output file instead.

``COPYONLY``
  Copy the file without replacing any variable references or other
  content.  This option may not be used with ``NEWLINE_STYLE``.

``ESCAPE_QUOTES``
  Escape any substituted quotes with backslashes (C-style).

``@ONLY``
  Restrict variable replacement to references of the form ``@VAR@``.
  This is useful for configuring scripts that use ``${VAR}`` syntax.

``NEWLINE_STYLE <style>``
  Specify the newline style for the output file.  Specify
  ``UNIX`` or ``LF`` for ``\n`` newlines, or specify
  ``DOS``, ``WIN32``, or ``CRLF`` for ``\r\n`` newlines.
  This option may not be used with ``COPYONLY``.

Transformations
^^^^^^^^^^^^^^^

:ref:`Variables <CMake Language Variables>` referenced in the input
file content as ``@VAR@``, ``${VAR}``, ``$CACHE{VAR}``, and
:ref:`environment variables <CMake Language Environment Variables>`
referenced as ``$ENV{VAR}``, will each be replaced with the current value
of the variable, or the empty string if the variable is not defined.
Furthermore, input lines of the form

.. code-block:: c

  #cmakedefine VAR ...

will be replaced with either

.. code-block:: c

  #define VAR ...

or

.. code-block:: c

  /* #undef VAR */

depending on whether ``VAR`` is set in CMake to any value not considered
a false constant by the :command:`if` command.  The "..." content on the
line after the variable name, if any, is processed as above.

Unlike lines of the form ``#cmakedefine VAR ...``, in lines of the form
``#cmakedefine01 VAR``, ``VAR`` itself will expand to ``VAR 0`` or ``VAR 1``
rather than being assigned the value ``...``. Therefore, input lines of the form

.. code-block:: c

  #cmakedefine01 VAR

will be replaced with either

.. code-block:: c

  #define VAR 0

or

.. code-block:: c

  #define VAR 1

Input lines of the form ``#cmakedefine01 VAR ...`` will expand
as ``#cmakedefine01 VAR ... 0`` or ``#cmakedefine01 VAR ... 1``,
which may lead to undefined behavior.

.. versionadded:: 3.10
  The result lines (with the exception of the ``#undef`` comments) can be
  indented using spaces and/or tabs between the ``#`` character
  and the ``cmakedefine`` or ``cmakedefine01`` words. This whitespace
  indentation will be preserved in the output lines:

  .. code-block:: c

    #  cmakedefine VAR
    #  cmakedefine01 VAR

  will be replaced, if ``VAR`` is defined, with

  .. code-block:: c

    #  define VAR
    #  define VAR 1

Example
^^^^^^^

Consider a source tree containing a ``foo.h.in`` file:

.. code-block:: c

  #cmakedefine FOO_ENABLE
  #cmakedefine FOO_STRING "@FOO_STRING@"

An adjacent ``CMakeLists.txt`` may use ``configure_file`` to
configure the header:

.. code-block:: cmake

  option(FOO_ENABLE "Enable Foo" ON)
  if(FOO_ENABLE)
    set(FOO_STRING "foo")
  endif()
  configure_file(foo.h.in foo.h @ONLY)

This creates a ``foo.h`` in the build directory corresponding to
this source directory.  If the ``FOO_ENABLE`` option is on, the
configured file will contain:

.. code-block:: c

  #define FOO_ENABLE
  #define FOO_STRING "foo"

Otherwise it will contain:

.. code-block:: c

  /* #undef FOO_ENABLE */
  /* #undef FOO_STRING */

One may then use the :command:`target_include_directories` command to
specify the output directory as an include directory:

.. code-block:: cmake

  target_include_directories(<target> [SYSTEM] <INTERFACE|PUBLIC|PRIVATE> "${CMAKE_CURRENT_BINARY_DIR}")

so that sources may include the header as ``#include <foo.h>``.

See Also
^^^^^^^^

* :command:`file(GENERATE)`



/P/🚀 command/continue.rst
========================================


continue
--------

.. versionadded:: 3.2

Continue to the top of enclosing foreach or while loop.

.. code-block:: cmake

  continue()

The ``continue()`` command allows a cmake script to abort the rest of the
current iteration of a :command:`foreach` or :command:`while` loop, and start
at the top of the next iteration.

See also the :command:`break` command.



/P/🚀 command/else.rst
====================================


else
----

Starts the else portion of an if block.

.. code-block:: cmake

  else([<condition>])

See the :command:`if` command.



/P/🚀 command/elseif.rst
======================================


elseif
------

Starts an elseif portion of an if block.

.. code-block:: cmake

  elseif(<condition>)

See the :command:`if` command, especially for the syntax and logic
of the ``<condition>``.



/P/🚀 command/endblock.rst
========================================


endblock
--------

.. versionadded:: 3.25

Ends a list of commands in a :command:`block` and removes the scopes
created by the :command:`block` command.

.. code-block:: cmake

  endblock()



/P/🚀 command/endforeach.rst
==========================================


endforeach
----------

Ends a list of commands in a foreach block.

.. code-block:: cmake

  endforeach([<loop_var>])

See the :command:`foreach` command.

The optional ``<loop_var>`` argument is supported for backward compatibility
only. If used it must be a verbatim repeat of the ``<loop_var>`` argument of
the opening ``foreach`` clause.



/P/🚀 command/endfunction.rst
===========================================


endfunction
-----------

Ends a list of commands in a function block.

.. code-block:: cmake

  endfunction([<name>])

See the :command:`function` command.

The optional ``<name>`` argument is supported for backward compatibility
only. If used it must be a verbatim repeat of the ``<name>`` argument
of the opening ``function`` command.



/P/🚀 command/endif.rst
=====================================


endif
-----

Ends a list of commands in an if block.

.. code-block:: cmake

  endif([<condition>])

See the :command:`if` command.

The optional ``<condition>`` argument is supported for backward compatibility
only. If used it must be a verbatim repeat of the argument of the opening
``if`` clause.



/P/🚀 command/endmacro.rst
========================================


endmacro
--------

Ends a list of commands in a macro block.

.. code-block:: cmake

  endmacro([<name>])

See the :command:`macro` command.

The optional ``<name>`` argument is supported for backward compatibility
only. If used it must be a verbatim repeat of the ``<name>`` argument
of the opening ``macro`` command.



/P/🚀 command/endwhile.rst
========================================


endwhile
--------

Ends a list of commands in a while block.

.. code-block:: cmake

  endwhile([<condition>])

See the :command:`while` command.

The optional ``<condition>`` argument is supported for backward compatibility
only. If used it must be a verbatim repeat of the argument of the opening
``while`` clause.



/P/🚀 command/execute_process.rst
===============================================


execute_process
---------------

Execute one or more child processes.

.. code-block:: cmake

  execute_process(COMMAND <cmd1> [<arguments>]
                  [COMMAND <cmd2> [<arguments>]]...
                  [WORKING_DIRECTORY <directory>]
                  [TIMEOUT <seconds>]
                  [RESULT_VARIABLE <variable>]
                  [RESULTS_VARIABLE <variable>]
                  [OUTPUT_VARIABLE <variable>]
                  [ERROR_VARIABLE <variable>]
                  [INPUT_FILE <file>]
                  [OUTPUT_FILE <file>]
                  [ERROR_FILE <file>]
                  [OUTPUT_QUIET]
                  [ERROR_QUIET]
                  [COMMAND_ECHO <where>]
                  [OUTPUT_STRIP_TRAILING_WHITESPACE]
                  [ERROR_STRIP_TRAILING_WHITESPACE]
                  [ENCODING <name>]
                  [ECHO_OUTPUT_VARIABLE]
                  [ECHO_ERROR_VARIABLE]
                  [COMMAND_ERROR_IS_FATAL <ANY|LAST>])

Runs the given sequence of one or more commands.

Commands are executed concurrently as a pipeline, with the standard
output of each process piped to the standard input of the next.
A single standard error pipe is used for all processes.

``execute_process`` runs commands while CMake is configuring the project,
prior to build system generation.  Use the :command:`add_custom_target` and
:command:`add_custom_command` commands to create custom commands that run
at build time.

Options:

``COMMAND``
 A child process command line.

 CMake executes the child process using operating system APIs directly:

 * On POSIX platforms, the command line is passed to the
   child process in an ``argv[]`` style array.

 * On Windows platforms, the command line is encoded as a string such
   that child processes using ``CommandLineToArgvW`` will decode the
   original arguments.

 No intermediate shell is used, so shell operators such as ``>``
 are treated as normal arguments.
 (Use the ``INPUT_*``, ``OUTPUT_*``, and ``ERROR_*`` options to
 redirect stdin, stdout, and stderr.)

 For **sequential execution** of multiple commands use multiple
 ``execute_process`` calls each with a single ``COMMAND`` argument.

``WORKING_DIRECTORY``
 The named directory will be set as the current working directory of
 the child processes.

``TIMEOUT``
 After the specified number of seconds (fractions allowed), all unfinished
 child processes will be terminated, and the ``RESULT_VARIABLE`` will be
 set to a string mentioning the "timeout".

``RESULT_VARIABLE``
 The variable will be set to contain the result of last child process.
 This will be an integer return code from the last child or a string
 describing an error condition.

``RESULTS_VARIABLE <variable>``
 .. versionadded:: 3.10

 The variable will be set to contain the result of all processes as a
 :ref:`semicolon-separated list <CMake Language Lists>`, in order of the
 given ``COMMAND`` arguments.  Each entry will be an integer return code
 from the corresponding child or a string describing an error condition.

``INPUT_FILE <file>``
 ``<file>`` is attached to the standard input pipe of the *first* ``COMMAND``
 process.

``OUTPUT_FILE <file>``
 ``<file>`` is attached to the standard output pipe of the *last* ``COMMAND``
 process.

``ERROR_FILE <file>``
 ``<file>`` is attached to the standard error pipe of *all* ``COMMAND``
 processes.

.. versionadded:: 3.3
  If the same ``<file>`` is named for both ``OUTPUT_FILE`` and ``ERROR_FILE``
  then it will be used for both standard output and standard error pipes.

``OUTPUT_QUIET``, ``ERROR_QUIET``
 The standard output on ``OUTPUT_VARIABLE`` or standard error on
 ``ERROR_VARIABLE`` are not connected (no variable content).
 The  ``*_FILE`` and ``ECHO_*_VARIABLE`` options are not affected.

``OUTPUT_VARIABLE``, ``ERROR_VARIABLE``
 The variable named will be set with the contents of the standard output
 and standard error pipes, respectively.  If the same variable is named
 for both pipes their output will be merged in the order produced.

``ECHO_OUTPUT_VARIABLE``, ``ECHO_ERROR_VARIABLE``
  .. versionadded:: 3.18

  The standard output or standard error will not be exclusively redirected to
  the specified variables.

  The output will be duplicated into the specified variables and also onto
  standard output or standard error analogous to the ``tee`` Unix command.

.. note::
  If more than one ``OUTPUT_*`` or ``ERROR_*`` option is given for the
  same pipe the precedence is *not specified*.
  If no ``OUTPUT_*`` or ``ERROR_*`` options are given the output will
  be shared with the corresponding pipes of the CMake process itself.

``COMMAND_ECHO <where>``
 .. versionadded:: 3.15

 The command being run will be echo'ed to ``<where>`` with ``<where>``
 being set to one of ``STDERR``, ``STDOUT`` or ``NONE``.
 See the :variable:`CMAKE_EXECUTE_PROCESS_COMMAND_ECHO` variable for a way
 to control the default behavior when this option is not present.

``ENCODING <name>``
 .. versionadded:: 3.8

 On Windows, the encoding that is used to decode output from the process.
 Ignored on other platforms.
 Valid encoding names are:

 ``NONE``
   Perform no decoding.  This assumes that the process output is encoded
   in the same way as CMake's internal encoding (UTF-8).
   This is the default.
 ``AUTO``
   Use the current active console's codepage or if that isn't
   available then use ANSI.
 ``ANSI``
   Use the ANSI codepage.
 ``OEM``
   Use the original equipment manufacturer (OEM) code page.
 ``UTF8`` or ``UTF-8``
   Use the UTF-8 codepage.

   .. versionadded:: 3.11
     Accept ``UTF-8`` spelling for consistency with the
     `UTF-8 RFC <https://www.ietf.org/rfc/rfc3629>`_ naming convention.

``COMMAND_ERROR_IS_FATAL <ANY|LAST>``
  .. versionadded:: 3.19

  The option following ``COMMAND_ERROR_IS_FATAL`` determines the behavior when
  an error is encountered:

    ``ANY``
    If any of the commands in the list of commands fail, the
    ``execute_process()`` command halts with an error.

    ``LAST``
    If the last command in the list of commands fails, the
    ``execute_process()`` command halts with an error.  Commands earlier in the
    list will not cause a fatal error.



/P/🚀 command/file.rst
====================================


file
----

File manipulation command.

This command is dedicated to file and path manipulation requiring access to the
filesystem.

For other path manipulation, handling only syntactic aspects, have a look at
:command:`cmake_path` command.

.. note::

  The sub-commands `RELATIVE_PATH`_, `TO_CMAKE_PATH`_ and `TO_NATIVE_PATH`_ has
  been superseded, respectively, by sub-commands
  :ref:`RELATIVE_PATH <cmake_path-RELATIVE_PATH>`,
  :ref:`CONVERT ... TO_CMAKE_PATH_LIST <cmake_path-TO_CMAKE_PATH_LIST>` and
  :ref:`CONVERT ... TO_NATIVE_PATH_LIST <cmake_path-TO_NATIVE_PATH_LIST>` of
  :command:`cmake_path` command.

Synopsis
^^^^^^^^

.. parsed-literal::

  `Reading`_
    file(`READ`_ <filename> <out-var> [...])
    file(`STRINGS`_ <filename> <out-var> [...])
    file(`\<HASH\>`_ <filename> <out-var>)
    file(`TIMESTAMP`_ <filename> <out-var> [...])
    file(`GET_RUNTIME_DEPENDENCIES`_ [...])

  `Writing`_
    file({`WRITE`_ | `APPEND`_} <filename> <content>...)
    file({`TOUCH`_ | `TOUCH_NOCREATE`_} <file>...)
    file(`GENERATE`_ OUTPUT <output-file> [...])
    file(`CONFIGURE`_ OUTPUT <output-file> CONTENT <content> [...])

  `Filesystem`_
    file({`GLOB`_ | `GLOB_RECURSE`_} <out-var> [...] <globbing-expr>...)
    file(`MAKE_DIRECTORY`_ <directories>...)
    file({`REMOVE`_ | `REMOVE_RECURSE`_ } <files>...)
    file(`RENAME`_ <oldname> <newname> [...])
    file(`COPY_FILE`_ <oldname> <newname> [...])
    file({`COPY`_ | `INSTALL`_} <file>... DESTINATION <dir> [...])
    file(`SIZE`_ <filename> <out-var>)
    file(`READ_SYMLINK`_ <linkname> <out-var>)
    file(`CREATE_LINK`_ <original> <linkname> [...])
    file(`CHMOD`_ <files>... <directories>... PERMISSIONS <permissions>... [...])
    file(`CHMOD_RECURSE`_ <files>... <directories>... PERMISSIONS <permissions>... [...])

  `Path Conversion`_
    file(`REAL_PATH`_ <path> <out-var> [BASE_DIRECTORY <dir>] [EXPAND_TILDE])
    file(`RELATIVE_PATH`_ <out-var> <directory> <file>)
    file({`TO_CMAKE_PATH`_ | `TO_NATIVE_PATH`_} <path> <out-var>)

  `Transfer`_
    file(`DOWNLOAD`_ <url> [<file>] [...])
    file(`UPLOAD`_ <file> <url> [...])

  `Locking`_
    file(`LOCK`_ <path> [...])

  `Archiving`_
    file(`ARCHIVE_CREATE`_ OUTPUT <archive> PATHS <paths>... [...])
    file(`ARCHIVE_EXTRACT`_ INPUT <archive> [...])

Reading
^^^^^^^

.. signature::
  file(READ <filename> <variable>
       [OFFSET <offset>] [LIMIT <max-in>] [HEX])

  Read content from a file called ``<filename>`` and store it in a
  ``<variable>``.  Optionally start from the given ``<offset>`` and
  read at most ``<max-in>`` bytes.  The ``HEX`` option causes data to
  be converted to a hexadecimal representation (useful for binary data).
  If the ``HEX`` option is specified, letters in the output
  (``a`` through ``f``) are in lowercase.

.. signature::
  file(STRINGS <filename> <variable> <options>...)

  Parse a list of ASCII strings from ``<filename>`` and store it in
  ``<variable>``.  Binary data in the file are ignored.  Carriage return
  (``\r``, CR) characters are ignored.  The options are:

    ``LENGTH_MAXIMUM <max-len>``
      Consider only strings of at most a given length.

    ``LENGTH_MINIMUM <min-len>``
      Consider only strings of at least a given length.

    ``LIMIT_COUNT <max-num>``
      Limit the number of distinct strings to be extracted.

    ``LIMIT_INPUT <max-in>``
      Limit the number of input bytes to read from the file.

    ``LIMIT_OUTPUT <max-out>``
      Limit the number of total bytes to store in the ``<variable>``.

    ``NEWLINE_CONSUME``
      Treat newline characters (``\n``, LF) as part of string content
      instead of terminating at them.

    ``NO_HEX_CONVERSION``
      Intel Hex and Motorola S-record files are automatically converted to
      binary while reading unless this option is given.

    ``REGEX <regex>``
      Consider only strings that match the given regular expression,
      as described under :ref:`string(REGEX) <Regex Specification>`.

      .. versionchanged:: 3.29
        Capture groups from the last match in the file are stored in
        :variable:`CMAKE_MATCH_<n>`, similar to
        :command:`string(REGEX MATCHALL)`.  See policy :policy:`CMP0159`.

    ``ENCODING <encoding-type>``
      .. versionadded:: 3.1

      Consider strings of a given encoding.  Currently supported encodings are:
      ``UTF-8``, ``UTF-16LE``, ``UTF-16BE``, ``UTF-32LE``, ``UTF-32BE``.
      If the ``ENCODING`` option is not provided and the file
      has a Byte Order Mark, the ``ENCODING`` option will be defaulted
      to respect the Byte Order Mark.

  .. versionadded:: 3.2
    Added the ``UTF-16LE``, ``UTF-16BE``, ``UTF-32LE``, ``UTF-32BE`` encodings.

  For example, the code

  .. code-block:: cmake

    file(STRINGS myfile.txt myfile)

  stores a list in the variable ``myfile`` in which each item is a line
  from the input file.

.. signature::
  file(<HASH> <filename> <variable>)
  :target: <HASH>

  Compute a cryptographic hash of the content of ``<filename>`` and
  store it in a ``<variable>``.  The supported ``<HASH>`` algorithm names
  are those listed by the :command:`string(<HASH>)` command.

.. signature::
  file(TIMESTAMP <filename> <variable> [<format>] [UTC])

  Compute a string representation of the modification time of ``<filename>``
  and store it in ``<variable>``.  Should the command be unable to obtain a
  timestamp variable will be set to the empty string ("").

  See the :command:`string(TIMESTAMP)` command for documentation of
  the ``<format>`` and ``UTC`` options.

.. signature::
  file(GET_RUNTIME_DEPENDENCIES [...])

  .. versionadded:: 3.16

  Recursively get the list of libraries depended on by the given files:

  .. code-block:: cmake

    file(GET_RUNTIME_DEPENDENCIES
      [RESOLVED_DEPENDENCIES_VAR <deps_var>]
      [UNRESOLVED_DEPENDENCIES_VAR <unresolved_deps_var>]
      [CONFLICTING_DEPENDENCIES_PREFIX <conflicting_deps_prefix>]
      [EXECUTABLES <executable_files>...]
      [LIBRARIES <library_files>...]
      [MODULES <module_files>...]
      [DIRECTORIES <directories>...]
      [BUNDLE_EXECUTABLE <bundle_executable_file>]
      [PRE_INCLUDE_REGEXES <regexes>...]
      [PRE_EXCLUDE_REGEXES <regexes>...]
      [POST_INCLUDE_REGEXES <regexes>...]
      [POST_EXCLUDE_REGEXES <regexes>...]
      [POST_INCLUDE_FILES <files>...]
      [POST_EXCLUDE_FILES <files>...]
      )

  Please note that this sub-command is not intended to be used in project mode.
  It is intended for use at install time, either from code generated by the
  :command:`install(RUNTIME_DEPENDENCY_SET)` command, or from code provided by
  the project via :command:`install(CODE)` or :command:`install(SCRIPT)`.
  For example:

  .. code-block:: cmake

    install(CODE [[
      file(GET_RUNTIME_DEPENDENCIES
        # ...
        )
      ]])

  The arguments are as follows:

    ``RESOLVED_DEPENDENCIES_VAR <deps_var>``
      Name of the variable in which to store the list of resolved dependencies.

    ``UNRESOLVED_DEPENDENCIES_VAR <unresolved_deps_var>``
      Name of the variable in which to store the list of unresolved
      dependencies. If this variable is not specified, and there are any
      unresolved dependencies, an error is issued.

    ``CONFLICTING_DEPENDENCIES_PREFIX <conflicting_deps_prefix>``
      Variable prefix in which to store conflicting dependency information.
      Dependencies are conflicting if two files with the same name are found in
      two different directories. The list of filenames that conflict are stored
      in ``<conflicting_deps_prefix>_FILENAMES``. For each filename, the list
      of paths that were found for that filename are stored in
      ``<conflicting_deps_prefix>_<filename>``.

    ``EXECUTABLES <executable_files>...``
      List of executable files to read for dependencies. These are executables
      that are typically created with :command:`add_executable`, but they do
      not have to be created by CMake. On Apple platforms, the paths to these
      files determine the value of ``@executable_path`` when recursively
      resolving the libraries. Specifying any kind of library (``STATIC``,
      ``MODULE``, or ``SHARED``) here will result in undefined behavior.

    ``LIBRARIES <library_files>...``
      List of library files to read for dependencies. These are libraries that
      are typically created with :command:`add_library(SHARED)`, but they do
      not have to be created by CMake. Specifying ``STATIC`` libraries,
      ``MODULE`` libraries, or executables here will result in undefined
      behavior.

    ``MODULES <module_files>...``
      List of loadable module files to read for dependencies. These are modules
      that are typically created with :command:`add_library(MODULE)`, but they
      do not have to be created by CMake. They are typically used by calling
      ``dlopen()`` at runtime rather than linked at link time with ``ld -l``.
      Specifying ``STATIC`` libraries, ``SHARED`` libraries, or executables
      here will result in undefined behavior.

    ``DIRECTORIES <directories>...``
      List of additional directories to search for dependencies. On Linux
      platforms, these directories are searched if the dependency is not found
      in any of the other usual paths. If it is found in such a directory, a
      warning is issued, because it means that the file is incomplete (it does
      not list all of the directories that contain its dependencies).
      On Windows platforms, these directories are searched if the dependency
      is not found in any of the other search paths, but no warning is issued,
      because searching other paths is a normal part of Windows dependency
      resolution. On Apple platforms, this argument has no effect.

    ``BUNDLE_EXECUTABLE <bundle_executable_file>``
      Executable to treat as the "bundle executable" when resolving libraries.
      On Apple platforms, this argument determines the value of
      ``@executable_path`` when recursively resolving libraries for
      ``LIBRARIES`` and ``MODULES`` files. It has no effect on ``EXECUTABLES``
      files. On other platforms, it has no effect. This is typically (but not
      always) one of the executables in the ``EXECUTABLES`` argument which
      designates the "main" executable of the package.

  The following arguments specify filters for including or excluding libraries
  to be resolved. See below for a full description of how they work.

    ``PRE_INCLUDE_REGEXES <regexes>...``
      List of pre-include regexes through which to filter the names of
      not-yet-resolved dependencies.

    ``PRE_EXCLUDE_REGEXES <regexes>...``
      List of pre-exclude regexes through which to filter the names of
      not-yet-resolved dependencies.

    ``POST_INCLUDE_REGEXES <regexes>...``
      List of post-include regexes through which to filter the names of
      resolved dependencies.

    ``POST_EXCLUDE_REGEXES <regexes>...``
      List of post-exclude regexes through which to filter the names of
      resolved dependencies.

    ``POST_INCLUDE_FILES <files>...``
      .. versionadded:: 3.21

      List of post-include filenames through which to filter the names of
      resolved dependencies. Symlinks are resolved when attempting to match
      these filenames.

    ``POST_EXCLUDE_FILES <files>...``
      .. versionadded:: 3.21

      List of post-exclude filenames through which to filter the names of
      resolved dependencies. Symlinks are resolved when attempting to match
      these filenames.

  These arguments can be used to exclude unwanted system libraries when
  resolving the dependencies, or to include libraries from a specific
  directory. The filtering works as follows:

  1. If the not-yet-resolved dependency matches any of the
     ``PRE_INCLUDE_REGEXES``, steps 2 and 3 are skipped, and the dependency
     resolution proceeds to step 4.

  2. If the not-yet-resolved dependency matches any of the
     ``PRE_EXCLUDE_REGEXES``, dependency resolution stops for that dependency.

  3. Otherwise, dependency resolution proceeds.

  4. ``file(GET_RUNTIME_DEPENDENCIES)`` searches for the dependency according
     to the linking rules of the platform (see below).

  5. If the dependency is found, and its full path matches one of the
     ``POST_INCLUDE_REGEXES`` or ``POST_INCLUDE_FILES``, the full path is added
     to the resolved dependencies, and ``file(GET_RUNTIME_DEPENDENCIES)``
     recursively resolves that library's own dependencies. Otherwise, resolution
     proceeds to step 6.

  6. If the dependency is found, but its full path matches one of the
     ``POST_EXCLUDE_REGEXES`` or ``POST_EXCLUDE_FILES``, it is not added to the
     resolved dependencies, and dependency resolution stops for that dependency.

  7. If the dependency is found, and its full path does not match either
     ``POST_INCLUDE_REGEXES``, ``POST_INCLUDE_FILES``, ``POST_EXCLUDE_REGEXES``,
     or ``POST_EXCLUDE_FILES``, the full path is added to the resolved
     dependencies, and ``file(GET_RUNTIME_DEPENDENCIES)``  recursively resolves
     that library's own dependencies.

  Different platforms have different rules for how dependencies are resolved.
  These specifics are described here.

  On Linux platforms, library resolution works as follows:

  1. If the depending file does not have any ``RUNPATH`` entries, and the
     library exists in one of the depending file's ``RPATH`` entries, or its
     parents', in that order, the dependency is resolved to that file.
  2. Otherwise, if the depending file has any ``RUNPATH`` entries, and the
     library exists in one of those entries, the dependency is resolved to that
     file.
  3. Otherwise, if the library exists in one of the directories listed by
     ``ldconfig``, the dependency is resolved to that file.
  4. Otherwise, if the library exists in one of the ``DIRECTORIES`` entries,
     the dependency is resolved to that file. In this case, a warning is
     issued, because finding a file in one of the ``DIRECTORIES`` means that
     the depending file is not complete (it does not list all the directories
     from which it pulls dependencies).

  5. Otherwise, the dependency is unresolved.

  On Windows platforms, library resolution works as follows:

  1. DLL dependency names are converted to lowercase for matching filters.
     Windows DLL names are case-insensitive, and some linkers mangle the
     case of the DLL dependency names.  However, this makes it more difficult
     for ``PRE_INCLUDE_REGEXES``, ``PRE_EXCLUDE_REGEXES``,
     ``POST_INCLUDE_REGEXES``, and ``POST_EXCLUDE_REGEXES`` to properly
     filter DLL names - every regex would have to check for both uppercase
     and lowercase letters.  For example:

     .. code-block:: cmake

       file(GET_RUNTIME_DEPENDENCIES
         # ...
         PRE_INCLUDE_REGEXES "^[Mm][Yy][Ll][Ii][Bb][Rr][Aa][Rr][Yy]\\.[Dd][Ll][Ll]$"
         )

     Converting the DLL name to lowercase allows the regexes to only match
     lowercase names, thus simplifying the regex. For example:

     .. code-block:: cmake

       file(GET_RUNTIME_DEPENDENCIES
         # ...
         PRE_INCLUDE_REGEXES "^mylibrary\\.dll$"
         )

     This regex will match ``mylibrary.dll`` regardless of how it is cased,
     either on disk or in the depending file. (For example, it will match
     ``mylibrary.dll``, ``MyLibrary.dll``, and ``MYLIBRARY.DLL``.)

     .. versionchanged:: 3.27

       The conversion to lowercase only applies while matching filters.
       Results reported after filtering case-preserve each DLL name as it is
       found on disk, if resolved, and otherwise as it is referenced by the
       dependent binary.

       Prior to CMake 3.27, the results were reported with lowercase DLL
       file names, but the directory portion retained its casing.

  2. (**Not yet implemented**) If the depending file is a Windows Store app,
     and the dependency is listed as a dependency in the application's package
     manifest, the dependency is resolved to that file.

  3. Otherwise, if the library exists in the same directory as the depending
     file, the dependency is resolved to that file.

  4. Otherwise, if the library exists in either the operating system's
     ``system32`` directory or the ``Windows`` directory, in that order, the
     dependency is resolved to that file.

  5. Otherwise, if the library exists in one of the directories specified by
     ``DIRECTORIES``, in the order they are listed, the dependency is resolved
     to that file. In this case, a warning is not issued, because searching
     other directories is a normal part of Windows library resolution.

  6. Otherwise, the dependency is unresolved.

  On Apple platforms, library resolution works as follows:

  1. If the dependency starts with ``@executable_path/``, and an
     ``EXECUTABLES`` argument is in the process of being resolved, and
     replacing ``@executable_path/`` with the directory of the executable
     yields an existing file, the dependency is resolved to that file.

  2. Otherwise, if the dependency starts with ``@executable_path/``, and there
     is a ``BUNDLE_EXECUTABLE`` argument, and replacing ``@executable_path/``
     with the directory of the bundle executable yields an existing file, the
     dependency is resolved to that file.

  3. Otherwise, if the dependency starts with ``@loader_path/``, and replacing
     ``@loader_path/`` with the directory of the depending file yields an
     existing file, the dependency is resolved to that file.

  4. Otherwise, if the dependency starts with ``@rpath/``, and replacing
     ``@rpath/`` with one of the ``RPATH`` entries of the depending file
     yields an existing file, the dependency is resolved to that file.
     Note that ``RPATH`` entries that start with ``@executable_path/`` or
     ``@loader_path/`` also have these items replaced with the appropriate
     path.

  5. Otherwise, if the dependency is an absolute file that exists,
     the dependency is resolved to that file.

  6. Otherwise, the dependency is unresolved.

  This function accepts several variables that determine which tool is used for
  dependency resolution:

  .. variable:: CMAKE_GET_RUNTIME_DEPENDENCIES_PLATFORM

    Determines which operating system and executable format the files are built
    for. This could be one of several values:

    * ``linux+elf``
    * ``windows+pe``
    * ``macos+macho``

    If this variable is not specified, it is determined automatically by system
    introspection.

  .. variable:: CMAKE_GET_RUNTIME_DEPENDENCIES_TOOL

    Determines the tool to use for dependency resolution. It could be one of
    several values, depending on the value of
    :variable:`CMAKE_GET_RUNTIME_DEPENDENCIES_PLATFORM`:

    ================================================= =============================================
       ``CMAKE_GET_RUNTIME_DEPENDENCIES_PLATFORM``       ``CMAKE_GET_RUNTIME_DEPENDENCIES_TOOL``
    ================================================= =============================================
    ``linux+elf``                                     ``objdump``
    ``windows+pe``                                    ``objdump`` or ``dumpbin``
    ``macos+macho``                                   ``otool``
    ================================================= =============================================

    If this variable is not specified, it is determined automatically by system
    introspection.

  .. variable:: CMAKE_GET_RUNTIME_DEPENDENCIES_COMMAND

    Determines the path to the tool to use for dependency resolution. This is
    the actual path to ``objdump``, ``dumpbin``, or ``otool``.

    If this variable is not specified, it is determined by the value of
    ``CMAKE_OBJDUMP`` if set, else by system introspection.

    .. versionadded:: 3.18
      Use ``CMAKE_OBJDUMP`` if set.

Writing
^^^^^^^

.. signature::
  file(WRITE <filename> <content>...)
  file(APPEND <filename> <content>...)

  Write ``<content>`` into a file called ``<filename>``.  If the file does
  not exist, it will be created.  If the file already exists, ``WRITE``
  mode will overwrite it and ``APPEND`` mode will append to the end.
  Any directories in the path specified by ``<filename>`` that do not
  exist will be created.

  If the file is a build input, use the :command:`configure_file` command
  to update the file only when its content changes.

.. signature::
  file(TOUCH <files>...)
  file(TOUCH_NOCREATE <files>...)

  .. versionadded:: 3.12

  Create a file with no content if it does not yet exist. If the file already
  exists, its access and/or modification will be updated to the time when the
  function call is executed.

  Use ``TOUCH_NOCREATE`` to touch a file if it exists but not create it.
  If a file does not exist it will be silently ignored.

  With ``TOUCH`` and ``TOUCH_NOCREATE``, the contents of an existing file
  will not be modified.

.. signature::
  file(GENERATE [...])

  Generate an output file for each build configuration supported by the current
  :manual:`CMake Generator <cmake-generators(7)>`.  Evaluate
  :manual:`generator expressions <cmake-generator-expressions(7)>`
  from the input content to produce the output content.

  .. code-block:: cmake

    file(GENERATE OUTPUT <output-file>
         <INPUT <input-file>|CONTENT <content>>
         [CONDITION <expression>] [TARGET <target>]
         [NO_SOURCE_PERMISSIONS | USE_SOURCE_PERMISSIONS |
          FILE_PERMISSIONS <permissions>...]
         [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])

  The options are:

    ``CONDITION <condition>``
      Generate the output file for a particular configuration only if
      the condition is true.  The condition must be either ``0`` or ``1``
      after evaluating generator expressions.

    ``CONTENT <content>``
      Use the content given explicitly as input.

    ``INPUT <input-file>``
      Use the content from a given file as input.

      .. versionchanged:: 3.10
        A relative path is treated with respect to the value of
        :variable:`CMAKE_CURRENT_SOURCE_DIR`.  See policy :policy:`CMP0070`.

    ``OUTPUT <output-file>``
      Specify the output file name to generate.  Use generator expressions
      such as :genex:`$<CONFIG>` to specify a configuration-specific
      output file name.  Multiple configurations may generate the same output
      file only if the generated content is identical.  Otherwise, the
      ``<output-file>`` must evaluate to an unique name for each configuration.

      .. versionchanged:: 3.10
        A relative path (after evaluating generator expressions) is treated
        with respect to the value of :variable:`CMAKE_CURRENT_BINARY_DIR`.
        See policy :policy:`CMP0070`.

    ``TARGET <target>``
      .. versionadded:: 3.19

      Specify which target to use when evaluating generator expressions that
      require a target for evaluation (e.g.
      :genex:`$<COMPILE_FEATURES:...>`,
      :genex:`$<TARGET_PROPERTY:prop>`).

    ``NO_SOURCE_PERMISSIONS``
      .. versionadded:: 3.20

      The generated file permissions default to the standard 644 value
      (-rw-r--r--).

    ``USE_SOURCE_PERMISSIONS``
      .. versionadded:: 3.20

      Transfer the file permissions of the ``INPUT`` file to the generated
      file. This is already the default behavior if none of the three
      permissions-related keywords are given (``NO_SOURCE_PERMISSIONS``,
      ``USE_SOURCE_PERMISSIONS`` or ``FILE_PERMISSIONS``).  The
      ``USE_SOURCE_PERMISSIONS`` keyword mostly serves as a way of making
      the intended behavior clearer at the call site. It is an error to
      specify this option without ``INPUT``.

    ``FILE_PERMISSIONS <permissions>...``
      .. versionadded:: 3.20

      Use the specified permissions for the generated file.

    ``NEWLINE_STYLE <style>``
      .. versionadded:: 3.20

      Specify the newline style for the generated file.  Specify
      ``UNIX`` or ``LF`` for ``\n`` newlines, or specify
      ``DOS``, ``WIN32``, or ``CRLF`` for ``\r\n`` newlines.

  Exactly one ``CONTENT`` or ``INPUT`` option must be given.  A specific
  ``OUTPUT`` file may be named by at most one invocation of ``file(GENERATE)``.
  Generated files are modified and their timestamp updated on subsequent cmake
  runs only if their content is changed.

  Note also that ``file(GENERATE)`` does not create the output file until the
  generation phase. The output file will not yet have been written when the
  ``file(GENERATE)`` command returns, it is written only after processing all
  of a project's ``CMakeLists.txt`` files.

.. signature::
  file(CONFIGURE OUTPUT <output-file>
       CONTENT <content>
       [ESCAPE_QUOTES] [@ONLY]
       [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])
  :target: CONFIGURE

  .. versionadded:: 3.18

  Generate an output file using the input given by ``CONTENT`` and substitute
  variable values referenced as ``@VAR@`` or ``${VAR}`` contained therein. The
  substitution rules behave the same as the :command:`configure_file` command.
  In order to match :command:`configure_file`'s behavior, generator expressions
  are not supported for both ``OUTPUT`` and ``CONTENT``.

  The arguments are:

    ``OUTPUT <output-file>``
      Specify the output file name to generate. A relative path is treated with
      respect to the value of :variable:`CMAKE_CURRENT_BINARY_DIR`.
      ``<output-file>`` does not support generator expressions.

    ``CONTENT <content>``
      Use the content given explicitly as input.
      ``<content>`` does not support generator expressions.

    ``ESCAPE_QUOTES``
      Escape any substituted quotes with backslashes (C-style).

    ``@ONLY``
      Restrict variable replacement to references of the form ``@VAR@``.
      This is useful for configuring scripts that use ``${VAR}`` syntax.

    ``NEWLINE_STYLE <style>``
      Specify the newline style for the output file.  Specify
      ``UNIX`` or ``LF`` for ``\n`` newlines, or specify
      ``DOS``, ``WIN32``, or ``CRLF`` for ``\r\n`` newlines.

Filesystem
^^^^^^^^^^

.. signature::
  file(GLOB <variable>
       [LIST_DIRECTORIES true|false] [RELATIVE <path>] [CONFIGURE_DEPENDS]
       <globbing-expressions>...)
  file(GLOB_RECURSE <variable> [FOLLOW_SYMLINKS]
       [LIST_DIRECTORIES true|false] [RELATIVE <path>] [CONFIGURE_DEPENDS]
       <globbing-expressions>...)

  Generate a list of files that match the ``<globbing-expressions>`` and
  store it into the ``<variable>``.  Globbing expressions are similar to
  regular expressions, but much simpler.  If ``RELATIVE`` flag is
  specified, the results will be returned as relative paths to the given
  path.

  .. versionchanged:: 3.6
    The results will be ordered lexicographically.

  On Windows and macOS, globbing is case-insensitive even if the underlying
  filesystem is case-sensitive (both filenames and globbing expressions are
  converted to lowercase before matching).  On other platforms, globbing is
  case-sensitive.

  .. versionadded:: 3.3
    By default ``GLOB`` lists directories. Directories are omitted in the
    result if ``LIST_DIRECTORIES`` is set to false.

  .. versionadded:: 3.12
    If the ``CONFIGURE_DEPENDS`` flag is specified, CMake will add logic
    to the main build system check target to rerun the flagged ``GLOB``
    commands at build time. If any of the outputs change, CMake will regenerate
    the build system.

  .. note::
    We do not recommend using GLOB to collect a list of source files from
    your source tree.  If no CMakeLists.txt file changes when a source is
    added or removed then the generated build system cannot know when to
    ask CMake to regenerate.
    The ``CONFIGURE_DEPENDS`` flag may not work reliably on all generators, or
    if a new generator is added in the future that cannot support it, projects
    using it will be stuck. Even if ``CONFIGURE_DEPENDS`` works reliably, there
    is still a cost to perform the check on every rebuild.

  Examples of globbing expressions include:

  ============== ======================================================
  ``*.cxx``      match all files with extension ``cxx``
  ``*.vt?``      match all files with extension ``vta``, ..., ``vtz``
  ``f[3-5].txt`` match files ``f3.txt``, ``f4.txt``, ``f5.txt``
  ============== ======================================================

  The ``GLOB_RECURSE`` mode will traverse all the subdirectories of the
  matched directory and match the files.  Subdirectories that are symlinks
  are only traversed if ``FOLLOW_SYMLINKS`` is given or policy
  :policy:`CMP0009` is not set to ``NEW``.

  .. versionadded:: 3.3
    By default ``GLOB_RECURSE`` omits directories from result list. Setting
    ``LIST_DIRECTORIES`` to true adds directories to result list.
    If ``FOLLOW_SYMLINKS`` is given or policy :policy:`CMP0009` is not set to
    ``NEW`` then ``LIST_DIRECTORIES`` treats symlinks as directories.

  Examples of recursive globbing include:

  ============== ======================================================
  ``/dir/*.py``  match all python files in ``/dir`` and subdirectories
  ============== ======================================================

.. signature::
  file(MAKE_DIRECTORY <directories>...)

  Create the given directories and their parents as needed.

.. signature::
  file(REMOVE <files>...)
  file(REMOVE_RECURSE <files>...)

  Remove the given files.  The ``REMOVE_RECURSE`` mode will remove the given
  files and directories, including non-empty directories. No error is emitted
  if a given file does not exist.  Relative input paths are evaluated with
  respect to the current source directory.

  .. versionchanged:: 3.15
    Empty input paths are ignored with a warning.  Previous versions of CMake
    interpreted empty strings as a relative path with respect to the current
    directory and removed its contents.

.. signature::
  file(RENAME <oldname> <newname> [RESULT <result>] [NO_REPLACE])

  Move a file or directory within a filesystem from ``<oldname>`` to
  ``<newname>``, replacing the destination atomically.

  The options are:

    ``RESULT <result>``
      .. versionadded:: 3.21

      Set ``<result>`` variable to ``0`` on success or an error message
      otherwise. If ``RESULT`` is not specified and the operation fails,
      an error is emitted.

    ``NO_REPLACE``
      .. versionadded:: 3.21

      If the ``<newname>`` path already exists, do not replace it.
      If ``RESULT <result>`` is used, the result variable will be
      set to ``NO_REPLACE``.  Otherwise, an error is emitted.

.. signature::
  file(COPY_FILE <oldname> <newname>
       [RESULT <result>]
       [ONLY_IF_DIFFERENT]
       [INPUT_MAY_BE_RECENT])

  .. versionadded:: 3.21

  Copy a file from ``<oldname>`` to ``<newname>``. Directories are not
  supported. Symlinks are ignored and ``<oldfile>``'s content is read and
  written to ``<newname>`` as a new file.

  The options are:

    ``RESULT <result>``
      Set ``<result>`` variable to ``0`` on success or an error message
      otherwise.  If ``RESULT`` is not specified and the operation fails,
      an error is emitted.

    ``ONLY_IF_DIFFERENT``
      If the ``<newname>`` path already exists, do not replace it if the file's
      contents are already the same as ``<oldname>`` (this avoids updating
      ``<newname>``'s timestamp).

    ``INPUT_MAY_BE_RECENT``
      .. versionadded:: 3.26

      Tell CMake that the input file may have been recently created.  This is
      meaningful only on Windows, where files may be inaccessible for a short
      time after they are created.  With this option, if permission is denied,
      CMake will retry reading the input a few times.

  This sub-command has some similarities to :command:`configure_file`
  with the ``COPYONLY`` option.  An important difference is that
  :command:`configure_file` creates a dependency on the source file,
  so CMake will be re-run if it changes. The ``file(COPY_FILE)``
  sub-command does not create such a dependency.

  See also the :command:`file(COPY)` sub-command just below which provides
  further file-copying capabilities.

.. signature::
  file(COPY [...])
  file(INSTALL [...])

  The ``COPY`` signature copies files, directories, and symlinks to a
  destination folder.  Relative input paths are evaluated with respect
  to the current source directory, and a relative destination is
  evaluated with respect to the current build directory.  Copying
  preserves input file timestamps, and optimizes out a file if it exists
  at the destination with the same timestamp.  Copying preserves input
  permissions unless explicit permissions or ``NO_SOURCE_PERMISSIONS``
  are given (default is ``USE_SOURCE_PERMISSIONS``).

  .. code-block:: cmake

    file(<COPY|INSTALL> <files>... DESTINATION <dir>
         [NO_SOURCE_PERMISSIONS | USE_SOURCE_PERMISSIONS]
         [FILE_PERMISSIONS <permissions>...]
         [DIRECTORY_PERMISSIONS <permissions>...]
         [FOLLOW_SYMLINK_CHAIN]
         [FILES_MATCHING]
         [[PATTERN <pattern> | REGEX <regex>]
          [EXCLUDE] [PERMISSIONS <permissions>...]] [...])

  .. note::

    For a simple file copying operation, the :command:`file(COPY_FILE)`
    sub-command just above may be easier to use.

  .. versionadded:: 3.15
    If ``FOLLOW_SYMLINK_CHAIN`` is specified, ``COPY`` will recursively resolve
    the symlinks at the paths given until a real file is found, and install
    a corresponding symlink in the destination for each symlink encountered.
    For each symlink that is installed, the resolution is stripped of the
    directory, leaving only the filename, meaning that the new symlink points
    to a file in the same directory as the symlink. This feature is useful on
    some Unix systems, where libraries are installed as a chain of symlinks
    with version numbers, with less specific versions pointing to more specific
    versions. ``FOLLOW_SYMLINK_CHAIN`` will install all of these symlinks and
    the library itself into the destination directory. For example, if you have
    the following directory structure:

      * ``/opt/foo/lib/libfoo.so.1.2.3``
      * ``/opt/foo/lib/libfoo.so.1.2 -> libfoo.so.1.2.3``
      * ``/opt/foo/lib/libfoo.so.1 -> libfoo.so.1.2``
      * ``/opt/foo/lib/libfoo.so -> libfoo.so.1``

    and you do:

    .. code-block:: cmake

      file(COPY /opt/foo/lib/libfoo.so DESTINATION lib FOLLOW_SYMLINK_CHAIN)

    This will install all of the symlinks and ``libfoo.so.1.2.3`` itself into
    ``lib``.

  See the :command:`install(DIRECTORY)` command for documentation of
  permissions, ``FILES_MATCHING``, ``PATTERN``, ``REGEX``, and
  ``EXCLUDE`` options.  Copying directories preserves the structure
  of their content even if options are used to select a subset of
  files.

  The ``INSTALL`` signature differs slightly from ``COPY``: it prints
  status messages, and ``NO_SOURCE_PERMISSIONS`` is default. Installation
  scripts generated by the :command:`install` command use this signature
  (with some undocumented options for internal use).

  .. versionchanged:: 3.22

    The environment variable :envvar:`CMAKE_INSTALL_MODE` can override the
    default copying behavior of :command:`file(INSTALL)`.

.. signature::
  file(SIZE <filename> <variable>)

  .. versionadded:: 3.14

  Determine the file size of the ``<filename>`` and put the result in
  ``<variable>`` variable. Requires that ``<filename>`` is a valid path
  pointing to a file and is readable.

.. signature::
  file(READ_SYMLINK <linkname> <variable>)

  .. versionadded:: 3.14

  Query the symlink ``<linkname>`` and stores the path it points to
  in the result ``<variable>``.  If ``<linkname>`` does not exist
  or is not a symlink, CMake issues a fatal error.

  Note that this command returns the raw symlink path and does not resolve
  a relative path.  The following is an example of how to ensure that an
  absolute path is obtained:

  .. code-block:: cmake

    set(linkname "/path/to/foo.sym")
    file(READ_SYMLINK "${linkname}" result)
    if(NOT IS_ABSOLUTE "${result}")
      get_filename_component(dir "${linkname}" DIRECTORY)
      set(result "${dir}/${result}")
    endif()

.. signature::
  file(CREATE_LINK <original> <linkname>
       [RESULT <result>] [COPY_ON_ERROR] [SYMBOLIC])

  .. versionadded:: 3.14

  Create a link ``<linkname>`` that points to ``<original>``.
  It will be a hard link by default, but providing the ``SYMBOLIC`` option
  results in a symbolic link instead.  Hard links require that ``original``
  exists and is a file, not a directory.  If ``<linkname>`` already exists,
  it will be overwritten.

  The ``<result>`` variable, if specified, receives the status of the
  operation.  It is set to ``0`` upon success or an error message otherwise.
  If ``RESULT`` is not specified and the operation fails, a fatal error is
  emitted.

  Specifying ``COPY_ON_ERROR`` enables copying the file as a fallback if
  creating the link fails.  It can be useful for handling situations such as
  ``<original>`` and ``<linkname>`` being on different drives or mount points,
  which would make them unable to support a hard link.

.. signature::
  file(CHMOD <files>... <directories>...
       [PERMISSIONS <permissions>...]
       [FILE_PERMISSIONS <permissions>...]
       [DIRECTORY_PERMISSIONS <permissions>...])

  .. versionadded:: 3.19

  Set the permissions for the ``<files>...`` and ``<directories>...``
  specified. Valid permissions are  ``OWNER_READ``, ``OWNER_WRITE``,
  ``OWNER_EXECUTE``, ``GROUP_READ``, ``GROUP_WRITE``, ``GROUP_EXECUTE``,
  ``WORLD_READ``, ``WORLD_WRITE``, ``WORLD_EXECUTE``, ``SETUID``, ``SETGID``.

  Valid combination of keywords are:

    ``PERMISSIONS``
      All items are changed.

    ``FILE_PERMISSIONS``
      Only files are changed.

    ``DIRECTORY_PERMISSIONS``
      Only directories are changed.

    ``PERMISSIONS`` and ``FILE_PERMISSIONS``
      ``FILE_PERMISSIONS`` overrides ``PERMISSIONS`` for files.

    ``PERMISSIONS`` and ``DIRECTORY_PERMISSIONS``
      ``DIRECTORY_PERMISSIONS`` overrides ``PERMISSIONS`` for directories.

    ``FILE_PERMISSIONS`` and ``DIRECTORY_PERMISSIONS``
      Use ``FILE_PERMISSIONS`` for files and ``DIRECTORY_PERMISSIONS`` for
      directories.

.. signature::
  file(CHMOD_RECURSE <files>... <directories>...
       [PERMISSIONS <permissions>...]
       [FILE_PERMISSIONS <permissions>...]
       [DIRECTORY_PERMISSIONS <permissions>...])

  .. versionadded:: 3.19

  Same as :cref:`CHMOD`, but change the permissions of files and directories
  present in the ``<directories>...`` recursively.


Path Conversion
^^^^^^^^^^^^^^^

.. signature::
  file(REAL_PATH <path> <out-var> [BASE_DIRECTORY <dir>] [EXPAND_TILDE])

  .. versionadded:: 3.19

  Compute the absolute path to an existing file or directory with symlinks
  resolved.  The options are:

    ``BASE_DIRECTORY <dir>``
      If the provided ``<path>`` is a relative path, it is evaluated relative
      to the given base directory ``<dir>``. If no base directory is provided,
      the default base directory will be :variable:`CMAKE_CURRENT_SOURCE_DIR`.

    ``EXPAND_TILDE``
      .. versionadded:: 3.21

      If the ``<path>`` is ``~`` or starts with ``~/``, the ``~`` is replaced
      by the user's home directory.  The path to the home directory is obtained
      from environment variables.  On Windows, the ``USERPROFILE`` environment
      variable is used, falling back to the ``HOME`` environment variable
      if ``USERPROFILE`` is not defined.  On all other platforms, only ``HOME``
      is used.

  .. versionchanged:: 3.28

    All symlinks are resolved before collapsing ``../`` components.
    See policy :policy:`CMP0152`.

.. signature::
  file(RELATIVE_PATH <variable> <directory> <file>)

  Compute the relative path from a ``<directory>`` to a ``<file>`` and
  store it in the ``<variable>``.

.. signature::
  file(TO_CMAKE_PATH "<path>" <variable>)
  file(TO_NATIVE_PATH "<path>" <variable>)

  The ``TO_CMAKE_PATH`` mode converts a native ``<path>`` into a cmake-style
  path with forward-slashes (``/``).  The input can be a single path or a
  system search path like ``$ENV{PATH}``.  A search path will be converted
  to a cmake-style list separated by ``;`` characters.

  The ``TO_NATIVE_PATH`` mode converts a cmake-style ``<path>`` into a native
  path with platform-specific slashes (``\`` on Windows hosts and ``/``
  elsewhere).

  Always use double quotes around the ``<path>`` to be sure it is treated
  as a single argument to this command.

Transfer
^^^^^^^^

.. signature::
  file(DOWNLOAD <url> [<file>] <options>...)
  file(UPLOAD <file> <url> <options>...)

  The ``DOWNLOAD`` subcommand downloads the given ``<url>`` to a local
  ``<file>``.  The ``UPLOAD`` mode uploads a local ``<file>`` to a given
  ``<url>``.

  .. versionadded:: 3.19
    If ``<file>`` is not specified for ``file(DOWNLOAD)``, the file is not
    saved. This can be useful if you want to know if a file can be downloaded
    (for example, to check that it exists) without actually saving it anywhere.

  Options to both ``DOWNLOAD`` and ``UPLOAD`` are:

    ``INACTIVITY_TIMEOUT <seconds>``
      Terminate the operation after a period of inactivity.

    ``LOG <variable>``
      Store a human-readable log of the operation in a variable.

    ``SHOW_PROGRESS``
      Print progress information as status messages until the operation is
      complete.

    ``STATUS <variable>``
      Store the resulting status of the operation in a variable.
      The status is a ``;`` separated list of length 2.
      The first element is the numeric return value for the operation,
      and the second element is a string value for the error.
      A ``0`` numeric error means no error in the operation.

    ``TIMEOUT <seconds>``
      Terminate the operation after a given total time has elapsed.

    ``USERPWD <username>:<password>``
      .. versionadded:: 3.7

      Set username and password for operation.

    ``HTTPHEADER <HTTP-header>``
      .. versionadded:: 3.7

      HTTP header for ``DOWNLOAD`` and ``UPLOAD`` operations. ``HTTPHEADER``
      can be repeated for multiple options:

      .. code-block:: cmake

        file(DOWNLOAD <url>
             HTTPHEADER "Authorization: Bearer <auth-token>"
             HTTPHEADER "UserAgent: Mozilla/5.0")

    ``NETRC <level>``
      .. versionadded:: 3.11

      Specify whether the .netrc file is to be used for operation.  If this
      option is not specified, the value of the :variable:`CMAKE_NETRC`
      variable will be used instead.

      Valid levels are:

        ``IGNORED``
          The .netrc file is ignored.
          This is the default.

        ``OPTIONAL``
          The .netrc file is optional, and information in the URL is preferred.
          The file will be scanned to find which ever information is not
          specified in the URL.

        ``REQUIRED``
          The .netrc file is required, and information in the URL is ignored.

    ``NETRC_FILE <file>``
      .. versionadded:: 3.11

      Specify an alternative .netrc file to the one in your home directory,
      if the ``NETRC`` level is ``OPTIONAL`` or ``REQUIRED``. If this option
      is not specified, the value of the :variable:`CMAKE_NETRC_FILE` variable
      will be used instead.

    ``TLS_VERIFY <ON|OFF>``
      Specify whether to verify the server certificate for ``https://`` URLs.
      The default is to *not* verify. If this option is not specified, the
      value of the :variable:`CMAKE_TLS_VERIFY` variable will be used instead.

      .. versionadded:: 3.18
        Added support to ``file(UPLOAD)``.

    ``TLS_CAINFO <file>``
      Specify a custom Certificate Authority file for ``https://`` URLs.
      If this option is not specified, the value of the
      :variable:`CMAKE_TLS_CAINFO` variable will be used instead.

      .. versionadded:: 3.18
        Added support to ``file(UPLOAD)``.

  For ``https://`` URLs CMake must be built with OpenSSL support.  ``TLS/SSL``
  certificates are not checked by default.  Set ``TLS_VERIFY`` to ``ON`` to
  check certificates.

  Additional options to ``DOWNLOAD`` are:

    ``EXPECTED_HASH <algorithm>=<value>``
      Verify that the downloaded content hash matches the expected value, where
      ``<algorithm>`` is one of the algorithms supported by :cref:`<HASH>`.
      If the file already exists and matches the hash, the download is skipped.
      If the file already exists and does not match the hash, the file is
      downloaded again. If after download the file does not match the hash, the
      operation fails with an error. It is an error to specify this option if
      ``DOWNLOAD`` is not given a ``<file>``.

    ``EXPECTED_MD5 <value>``
      Historical short-hand for ``EXPECTED_HASH MD5=<value>``. It is an error
      to specify this if ``DOWNLOAD`` is not given a ``<file>``.

    ``RANGE_START <value>``
      .. versionadded:: 3.24

      Offset of the start of the range in file in bytes. Could be omitted to
      download up to the specified ``RANGE_END``.

    ``RANGE_END <value>``
      .. versionadded:: 3.24

      Offset of the end of the range in file in bytes. Could be omitted to
      download everything from the specified ``RANGE_START`` to the end of
      file.

Locking
^^^^^^^

.. signature::
  file(LOCK <path> [DIRECTORY] [RELEASE]
       [GUARD <FUNCTION|FILE|PROCESS>]
       [RESULT_VARIABLE <variable>]
       [TIMEOUT <seconds>])

  .. versionadded:: 3.2

  Lock a file specified by ``<path>`` if no ``DIRECTORY`` option present and
  file ``<path>/cmake.lock`` otherwise.  The file will be locked for the scope
  defined by the ``GUARD`` option (default value is ``PROCESS``).  The
  ``RELEASE`` option can be used to unlock the file explicitly.  If the
  ``TIMEOUT`` option is not specified, CMake will wait until the lock succeeds
  or until a fatal error occurs.  If ``TIMEOUT`` is set to ``0``, locking will
  be tried once and the result will be reported immediately.  If ``TIMEOUT``
  is not ``0``, CMake will try to lock the file for the period specified by
  the ``TIMEOUT <seconds>`` value.  Any errors will be interpreted as fatal if
  there is no ``RESULT_VARIABLE`` option.  Otherwise, the result will be stored
  in ``<variable>`` and will be ``0`` on success or an error message on
  failure.

  Note that lock is advisory; there is no guarantee that other processes will
  respect this lock, i.e. lock synchronize two or more CMake instances sharing
  some modifiable resources. Similar logic applies to the ``DIRECTORY`` option;
  locking a parent directory doesn't prevent other ``LOCK`` commands from
  locking any child directory or file.

  Trying to lock the same file twice is not allowed.  Any intermediate
  directories and the file itself will be created if they not exist.  The
  ``GUARD`` and ``TIMEOUT`` options are ignored on the ``RELEASE`` operation.

Archiving
^^^^^^^^^

.. signature::
  file(ARCHIVE_CREATE OUTPUT <archive>
    PATHS <paths>...
    [FORMAT <format>]
    [COMPRESSION <compression>
     [COMPRESSION_LEVEL <compression-level>]]
    [MTIME <mtime>]
    [VERBOSE])
  :target: ARCHIVE_CREATE
  :break: verbatim

  .. versionadded:: 3.18

  Creates the specified ``<archive>`` file with the files and directories
  listed in ``<paths>``.  Note that ``<paths>`` must list actual files or
  directories; wildcards are not supported.

  Use the ``FORMAT`` option to specify the archive format.  Supported values
  for ``<format>`` are ``7zip``, ``gnutar``, ``pax``, ``paxr``, ``raw`` and
  ``zip``.  If ``FORMAT`` is not given, the default format is ``paxr``.

  Some archive formats allow the type of compression to be specified.
  The ``7zip`` and ``zip`` archive formats already imply a specific type of
  compression.  The other formats use no compression by default, but can be
  directed to do so with the ``COMPRESSION`` option.  Valid values for
  ``<compression>`` are ``None``, ``BZip2``, ``GZip``, ``XZ``, and ``Zstd``.

  .. versionadded:: 3.19
    The compression level can be specified with the ``COMPRESSION_LEVEL``
    option.  The ``<compression-level>`` should be between 0-9, with the
    default being 0.  The ``COMPRESSION`` option must be present when
    ``COMPRESSION_LEVEL`` is given.

  .. versionadded:: 3.26
    The ``<compression-level>`` of the ``Zstd`` algorithm can be set
    between 0-19.

  .. note::
    With ``FORMAT`` set to ``raw``, only one file will be compressed with the
    compression type specified by ``COMPRESSION``.

  The ``VERBOSE`` option enables verbose output for the archive operation.

  To specify the modification time recorded in tarball entries, use
  the ``MTIME`` option.

.. signature::
  file(ARCHIVE_EXTRACT
    INPUT <archive>
    [DESTINATION <dir>]
    [PATTERNS <patterns>...]
    [LIST_ONLY]
    [VERBOSE]
    [TOUCH])
  :target: ARCHIVE_EXTRACT

  .. versionadded:: 3.18

  Extracts or lists the content of the specified ``<archive>``.

  The directory where the content of the archive will be extracted to can
  be specified using the ``DESTINATION`` option.  If the directory does not
  exist, it will be created.  If ``DESTINATION`` is not given, the current
  binary directory will be used.

  If required, you may select which files and directories to list or extract
  from the archive using the specified ``<patterns>``.  Wildcards are
  supported.  If the ``PATTERNS`` option is not given, the entire archive will
  be listed or extracted.

  ``LIST_ONLY`` will list the files in the archive rather than extract them.

  .. note::
    The working directory for this subcommand is the ``DESTINATION`` directory
    (provided or computed) except when ``LIST_ONLY`` is specified. Therefore,
    outside of script mode, it may be best to provide absolute paths to
    ``INPUT`` archives as they are unlikely to be extracted where a relative
    path works.

  .. versionadded:: 3.24
    The ``TOUCH`` option gives extracted files a current local
    timestamp instead of extracting file timestamps from the archive.

  With ``VERBOSE``, the command will produce verbose output.



/P/🚀 command/find_file.rst
=========================================


find_file
---------

.. |FIND_XXX| replace:: find_file
.. |NAMES| replace:: NAMES name1 [name2 ...]
.. |SEARCH_XXX| replace:: full path to a file
.. |SEARCH_XXX_DESC| replace:: full path to named file
.. |prefix_XXX_SUBDIR| replace:: ``<prefix>/include``
.. |entry_XXX_SUBDIR| replace:: ``<entry>/include``

.. |FIND_XXX_REGISTRY_VIEW_DEFAULT| replace:: ``TARGET``

.. |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX| replace::
   ``<prefix>/include/<arch>`` if :variable:`CMAKE_LIBRARY_ARCHITECTURE`
   is set, and |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX_SUBDIR|
.. |CMAKE_PREFIX_PATH_XXX| replace::
   ``<prefix>/include/<arch>`` if :variable:`CMAKE_LIBRARY_ARCHITECTURE`
   is set, and |CMAKE_PREFIX_PATH_XXX_SUBDIR|
.. |CMAKE_XXX_PATH| replace:: :variable:`CMAKE_INCLUDE_PATH`
.. |CMAKE_XXX_MAC_PATH| replace:: :variable:`CMAKE_FRAMEWORK_PATH`

.. |ENV_CMAKE_PREFIX_PATH_XXX| replace::
   ``<prefix>/include/<arch>`` if :variable:`CMAKE_LIBRARY_ARCHITECTURE` is set,
   and |ENV_CMAKE_PREFIX_PATH_XXX_SUBDIR|
.. |ENV_CMAKE_XXX_PATH| replace:: :envvar:`CMAKE_INCLUDE_PATH`
.. |ENV_CMAKE_XXX_MAC_PATH| replace:: :envvar:`CMAKE_FRAMEWORK_PATH`


.. |SYSTEM_ENVIRONMENT_PATH_XXX| replace:: The directories in ``INCLUDE``
   and ``PATH``.
.. |SYSTEM_ENVIRONMENT_PATH_WINDOWS_XXX| replace::
   On Windows hosts, CMake 3.3 through 3.27 searched additional paths:
   ``<prefix>/include/<arch>`` if :variable:`CMAKE_LIBRARY_ARCHITECTURE`
   is set, and |SYSTEM_ENVIRONMENT_PREFIX_PATH_XXX_SUBDIR|.
   This behavior was removed by CMake 3.28.

.. |CMAKE_SYSTEM_PREFIX_PATH_XXX| replace::
   ``<prefix>/include/<arch>`` if :variable:`CMAKE_LIBRARY_ARCHITECTURE`
   is set, and |CMAKE_SYSTEM_PREFIX_PATH_XXX_SUBDIR|
.. |CMAKE_SYSTEM_XXX_PATH| replace::
   :variable:`CMAKE_SYSTEM_INCLUDE_PATH`
.. |CMAKE_SYSTEM_XXX_MAC_PATH| replace::
   :variable:`CMAKE_SYSTEM_FRAMEWORK_PATH`

.. |CMAKE_FIND_ROOT_PATH_MODE_XXX| replace::
   :variable:`CMAKE_FIND_ROOT_PATH_MODE_INCLUDE`

.. include:: FIND_XXX.txt



/P/🚀 command/find_library.rst
============================================


find_library
------------

.. |FIND_XXX| replace:: find_library
.. |NAMES| replace:: NAMES name1 [name2 ...] [NAMES_PER_DIR]
.. |SEARCH_XXX| replace:: library
.. |SEARCH_XXX_DESC| replace:: library
.. |prefix_XXX_SUBDIR| replace:: ``<prefix>/lib``
.. |entry_XXX_SUBDIR| replace:: ``<entry>/lib``

.. |FIND_XXX_REGISTRY_VIEW_DEFAULT| replace:: ``TARGET``

.. |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX| replace::
   ``<prefix>/lib/<arch>`` if :variable:`CMAKE_LIBRARY_ARCHITECTURE` is set,
   and |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX_SUBDIR|
.. |CMAKE_PREFIX_PATH_XXX| replace::
   ``<prefix>/lib/<arch>`` if :variable:`CMAKE_LIBRARY_ARCHITECTURE` is set,
   and |CMAKE_PREFIX_PATH_XXX_SUBDIR|
.. |CMAKE_XXX_PATH| replace:: :variable:`CMAKE_LIBRARY_PATH`
.. |CMAKE_XXX_MAC_PATH| replace:: :variable:`CMAKE_FRAMEWORK_PATH`

.. |ENV_CMAKE_PREFIX_PATH_XXX| replace::
   ``<prefix>/lib/<arch>`` if :variable:`CMAKE_LIBRARY_ARCHITECTURE` is set,
   and |ENV_CMAKE_PREFIX_PATH_XXX_SUBDIR|
.. |ENV_CMAKE_XXX_PATH| replace:: :envvar:`CMAKE_LIBRARY_PATH`
.. |ENV_CMAKE_XXX_MAC_PATH| replace:: :envvar:`CMAKE_FRAMEWORK_PATH`

.. |SYSTEM_ENVIRONMENT_PATH_XXX| replace:: The directories in ``LIB``
   and ``PATH``.
.. |SYSTEM_ENVIRONMENT_PATH_WINDOWS_XXX| replace::
   On Windows hosts, CMake 3.3 through 3.27 searched additional paths:
   ``<prefix>/lib/<arch>`` if :variable:`CMAKE_LIBRARY_ARCHITECTURE`
   is set, and |SYSTEM_ENVIRONMENT_PREFIX_PATH_XXX_SUBDIR|.
   This behavior was removed by CMake 3.28.

.. |CMAKE_SYSTEM_PREFIX_PATH_XXX| replace::
   ``<prefix>/lib/<arch>`` if :variable:`CMAKE_LIBRARY_ARCHITECTURE` is set,
   and |CMAKE_SYSTEM_PREFIX_PATH_XXX_SUBDIR|
.. |CMAKE_SYSTEM_XXX_PATH| replace::
   :variable:`CMAKE_SYSTEM_LIBRARY_PATH`
.. |CMAKE_SYSTEM_XXX_MAC_PATH| replace::
   :variable:`CMAKE_SYSTEM_FRAMEWORK_PATH`

.. |CMAKE_FIND_ROOT_PATH_MODE_XXX| replace::
   :variable:`CMAKE_FIND_ROOT_PATH_MODE_LIBRARY`

.. include:: FIND_XXX.txt

When more than one value is given to the ``NAMES`` option this command by
default will consider one name at a time and search every directory
for it.  The ``NAMES_PER_DIR`` option tells this command to consider one
directory at a time and search for all names in it.

Each library name given to the ``NAMES`` option is first considered
as a library file name and then considered with platform-specific
prefixes (e.g. ``lib``) and suffixes (e.g. ``.so``).  Therefore one
may specify library file names such as ``libfoo.a`` directly.
This can be used to locate static libraries on UNIX-like systems.

If the library found is a framework, then ``<VAR>`` will be set to the full
path to the framework ``<fullPath>/A.framework``.  When a full path to a
framework is used as a library, CMake will use a ``-framework A``, and a
``-F<fullPath>`` to link the framework to the target.

.. versionadded:: 3.28

  The library found can now be a ``.xcframework`` folder.

If the :variable:`CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX` variable is set all
search paths will be tested as normal, with the suffix appended, and with
all matches of ``lib/`` replaced with
``lib${CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX}/``.  This variable overrides
the :prop_gbl:`FIND_LIBRARY_USE_LIB32_PATHS`,
:prop_gbl:`FIND_LIBRARY_USE_LIBX32_PATHS`,
and :prop_gbl:`FIND_LIBRARY_USE_LIB64_PATHS` global properties.

If the :prop_gbl:`FIND_LIBRARY_USE_LIB32_PATHS` global property is set
all search paths will be tested as normal, with ``32/`` appended, and
with all matches of ``lib/`` replaced with ``lib32/``.  This property is
automatically set for the platforms that are known to need it if at
least one of the languages supported by the :command:`project` command
is enabled.

If the :prop_gbl:`FIND_LIBRARY_USE_LIBX32_PATHS` global property is set
all search paths will be tested as normal, with ``x32/`` appended, and
with all matches of ``lib/`` replaced with ``libx32/``.  This property is
automatically set for the platforms that are known to need it if at
least one of the languages supported by the :command:`project` command
is enabled.

If the :prop_gbl:`FIND_LIBRARY_USE_LIB64_PATHS` global property is set
all search paths will be tested as normal, with ``64/`` appended, and
with all matches of ``lib/`` replaced with ``lib64/``.  This property is
automatically set for the platforms that are known to need it if at
least one of the languages supported by the :command:`project` command
is enabled.



/P/🚀 command/find_package.rst
============================================


find_package
------------

.. |FIND_XXX| replace:: find_package
.. |FIND_ARGS_XXX| replace:: <PackageName>
.. |FIND_XXX_REGISTRY_VIEW_DEFAULT| replace:: ``TARGET``
.. |CMAKE_FIND_ROOT_PATH_MODE_XXX| replace::
   :variable:`CMAKE_FIND_ROOT_PATH_MODE_PACKAGE`

.. note:: The :guide:`Using Dependencies Guide` provides a high-level
  introduction to this general topic. It provides a broader overview of
  where the ``find_package()`` command fits into the bigger picture,
  including its relationship to the :module:`FetchContent` module.
  The guide is recommended pre-reading before moving on to the details below.

Find a package (usually provided by something external to the project),
and load its package-specific details.  Calls to this command can also
be intercepted by :ref:`dependency providers <dependency_providers>`.

Search Modes
^^^^^^^^^^^^

The command has a few modes by which it searches for packages:

**Module mode**
  In this mode, CMake searches for a file called ``Find<PackageName>.cmake``,
  looking first in the locations listed in the :variable:`CMAKE_MODULE_PATH`,
  then among the :ref:`Find Modules` provided by the CMake installation.
  If the file is found, it is read and processed by CMake.  It is responsible
  for finding the package, checking the version, and producing any needed
  messages.  Some Find modules provide limited or no support for versioning;
  check the Find module's documentation.

  The ``Find<PackageName>.cmake`` file is not typically provided by the
  package itself.  Rather, it is normally provided by something external to
  the package, such as the operating system, CMake itself, or even the project
  from which the ``find_package()`` command was called.  Being externally
  provided, :ref:`Find Modules` tend to be heuristic in nature and are
  susceptible to becoming out-of-date.  They typically search for certain
  libraries, files and other package artifacts.

  Module mode is only supported by the
  :ref:`basic command signature <Basic Signature>`.

**Config mode**
  In this mode, CMake searches for a file called
  ``<lowercasePackageName>-config.cmake`` or ``<PackageName>Config.cmake``.
  It will also look for ``<lowercasePackageName>-config-version.cmake`` or
  ``<PackageName>ConfigVersion.cmake`` if version details were specified
  (see :ref:`version selection` for an explanation of how these separate
  version files are used).

  In config mode, the command can be given a list of names to search for
  as package names.  The locations where CMake searches for the config and
  version files is considerably more complicated than for Module mode
  (see :ref:`search procedure`).

  The config and version files are typically installed as part of the
  package, so they tend to be more reliable than Find modules.  They usually
  contain direct knowledge of the package contents, so no searching or
  heuristics are needed within the config or version files themselves.

  Config mode is supported by both the :ref:`basic <Basic Signature>` and
  :ref:`full <Full Signature>` command signatures.

**FetchContent redirection mode**
  .. versionadded:: 3.24
    A call to ``find_package()`` can be redirected internally to a package
    provided by the :module:`FetchContent` module.  To the caller, the behavior
    will appear similar to Config mode, except that the search logic is
    by-passed and the component information is not used.  See
    :command:`FetchContent_Declare` and :command:`FetchContent_MakeAvailable`
    for further details.

When not redirected to a package provided by :module:`FetchContent`, the
command arguments determine whether Module or Config mode is used.  When the
`basic signature`_ is used, the command searches in Module mode first.
If the package is not found, the search falls back to Config mode.
A user may set the :variable:`CMAKE_FIND_PACKAGE_PREFER_CONFIG` variable
to true to reverse the priority and direct CMake to search using Config mode
first before falling back to Module mode.  The basic signature can also be
forced to use only Module mode with a ``MODULE`` keyword.  If the
`full signature`_ is used, the command only searches in Config mode.

Where possible, user code should generally look for packages using the
`basic signature`_, since that allows the package to be found with any mode.
Project maintainers wishing to provide a config package should understand
the bigger picture, as explained in :ref:`Full Signature` and all subsequent
sections on this page.

.. _`basic signature`:

Basic Signature
^^^^^^^^^^^^^^^

.. parsed-literal::

  find_package(<PackageName> [version] [EXACT] [QUIET] [MODULE]
               [REQUIRED] [[COMPONENTS] [components...]]
               [OPTIONAL_COMPONENTS components...]
               [REGISTRY_VIEW  (64|32|64_32|32_64|HOST|TARGET|BOTH)]
               [GLOBAL]
               [NO_POLICY_SCOPE]
               [BYPASS_PROVIDER])

The basic signature is supported by both Module and Config modes.
The ``MODULE`` keyword implies that only Module mode can be used to find
the package, with no fallback to Config mode.

Regardless of the mode used, a ``<PackageName>_FOUND`` variable will be
set to indicate whether the package was found.  When the package is found,
package-specific information may be provided through other variables and
:ref:`Imported Targets` documented by the package itself.  The
``QUIET`` option disables informational messages, including those indicating
that the package cannot be found if it is not ``REQUIRED``.  The ``REQUIRED``
option stops processing with an error message if the package cannot be found.

A package-specific list of required components may be listed after the
``COMPONENTS`` keyword.  If any of these components are not able to be
satisfied, the package overall is considered to be not found.  If the
``REQUIRED`` option is also present, this is treated as a fatal error,
otherwise execution still continues.  As a form of shorthand, if the
``REQUIRED`` option is present, the ``COMPONENTS`` keyword can be omitted
and the required components can be listed directly after ``REQUIRED``.

Additional optional components may be listed after
``OPTIONAL_COMPONENTS``.  If these cannot be satisfied, the package overall
can still be considered found, as long as all required components are
satisfied.

The set of available components and their meaning are defined by the
target package.  Formally, it is up to the target package how to
interpret the component information given to it, but it should follow
the expectations stated above.  For calls where no components are specified,
there is no single expected behavior and target packages should clearly
define what occurs in such cases.  Common arrangements include assuming it
should find all components, no components or some well-defined subset of the
available components.

.. versionadded:: 3.24
  The ``REGISTRY_VIEW`` keyword specifies which registry views should be
  queried. This keyword is only meaningful on ``Windows`` platforms and will
  be ignored on all others. Formally, it is up to the target package how to
  interpret the registry view information given to it.

.. versionadded:: 3.24
  Specifying the ``GLOBAL`` keyword will promote all imported targets to
  a global scope in the importing project. Alternatively, this functionality
  can be enabled by setting the :variable:`CMAKE_FIND_PACKAGE_TARGETS_GLOBAL`
  variable.

.. _FIND_PACKAGE_VERSION_FORMAT:

The ``[version]`` argument requests a version with which the package found
should be compatible. There are two possible forms in which it may be
specified:

  * A single version with the format ``major[.minor[.patch[.tweak]]]``, where
    each component is a numeric value.
  * A version range with the format ``versionMin...[<]versionMax`` where
    ``versionMin`` and ``versionMax`` have the same format and constraints
    on components being integers as the single version.  By default, both end
    points are included.  By specifying ``<``, the upper end point will be
    excluded. Version ranges are only supported with CMake 3.19 or later.

The ``EXACT`` option requests that the version be matched exactly. This option
is incompatible with the specification of a version range.

If no ``[version]`` and/or component list is given to a recursive invocation
inside a find-module, the corresponding arguments are forwarded
automatically from the outer call (including the ``EXACT`` flag for
``[version]``).  Version support is currently provided only on a
package-by-package basis (see the `Version Selection`_ section below).
When a version range is specified but the package is only designed to expect
a single version, the package will ignore the upper end point of the range and
only take the single version at the lower end of the range into account.

See the :command:`cmake_policy` command documentation for discussion
of the ``NO_POLICY_SCOPE`` option.

.. versionadded:: 3.24
  The ``BYPASS_PROVIDER`` keyword is only allowed when ``find_package()`` is
  being called by a :ref:`dependency provider <dependency_providers>`.
  It can be used by providers to call the built-in ``find_package()``
  implementation directly and prevent that call from being re-routed back to
  itself.  Future versions of CMake may detect attempts to use this keyword
  from places other than a dependency provider and halt with a fatal error.

.. _`full signature`:

Full Signature
^^^^^^^^^^^^^^

.. parsed-literal::

  find_package(<PackageName> [version] [EXACT] [QUIET]
               [REQUIRED] [[COMPONENTS] [components...]]
               [OPTIONAL_COMPONENTS components...]
               [CONFIG|NO_MODULE]
               [GLOBAL]
               [NO_POLICY_SCOPE]
               [BYPASS_PROVIDER]
               [NAMES name1 [name2 ...]]
               [CONFIGS config1 [config2 ...]]
               [HINTS path1 [path2 ... ]]
               [PATHS path1 [path2 ... ]]
               [REGISTRY_VIEW  (64|32|64_32|32_64|HOST|TARGET|BOTH)]
               [PATH_SUFFIXES suffix1 [suffix2 ...]]
               [NO_DEFAULT_PATH]
               [NO_PACKAGE_ROOT_PATH]
               [NO_CMAKE_PATH]
               [NO_CMAKE_ENVIRONMENT_PATH]
               [NO_SYSTEM_ENVIRONMENT_PATH]
               [NO_CMAKE_PACKAGE_REGISTRY]
               [NO_CMAKE_BUILDS_PATH] # Deprecated; does nothing.
               [NO_CMAKE_SYSTEM_PATH]
               [NO_CMAKE_INSTALL_PREFIX]
               [NO_CMAKE_SYSTEM_PACKAGE_REGISTRY]
               [CMAKE_FIND_ROOT_PATH_BOTH |
                ONLY_CMAKE_FIND_ROOT_PATH |
                NO_CMAKE_FIND_ROOT_PATH])

The ``CONFIG`` option, the synonymous ``NO_MODULE`` option, or the use
of options not specified in the `basic signature`_ all enforce pure Config
mode.  In pure Config mode, the command skips Module mode search and
proceeds at once with Config mode search.

Config mode search attempts to locate a configuration file provided by the
package to be found.  A cache entry called ``<PackageName>_DIR`` is created to
hold the directory containing the file.  By default, the command searches for
a package with the name ``<PackageName>``.  If the ``NAMES`` option is given,
the names following it are used instead of ``<PackageName>``.  The names are
also considered when determining whether to redirect the call to a package
provided by :module:`FetchContent`.

The command searches for a file called ``<PackageName>Config.cmake`` or
``<lowercasePackageName>-config.cmake`` for each name specified.
A replacement set of possible configuration file names may be given
using the ``CONFIGS`` option.  The :ref:`search procedure` is specified below.
Once found, any :ref:`version constraint <version selection>` is checked,
and if satisfied, the configuration file is read and processed by CMake.
Since the file is provided by the package it already knows the
location of package contents.  The full path to the configuration file
is stored in the cmake variable ``<PackageName>_CONFIG``.

All configuration files which have been considered by CMake while
searching for the package with an appropriate version are stored in the
``<PackageName>_CONSIDERED_CONFIGS`` variable, and the associated versions
in the ``<PackageName>_CONSIDERED_VERSIONS`` variable.

If the package configuration file cannot be found CMake will generate
an error describing the problem unless the ``QUIET`` argument is
specified.  If ``REQUIRED`` is specified and the package is not found a
fatal error is generated and the configure step stops executing.  If
``<PackageName>_DIR`` has been set to a directory not containing a
configuration file CMake will ignore it and search from scratch.

Package maintainers providing CMake package configuration files are
encouraged to name and install them such that the :ref:`search procedure`
outlined below will find them without requiring use of additional options.

.. _`search procedure`:

Config Mode Search Procedure
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note::
  When Config mode is used, this search procedure is applied regardless of
  whether the :ref:`full <full signature>` or :ref:`basic <basic signature>`
  signature was given.

.. versionadded:: 3.24
  All calls to ``find_package()`` (even in Module mode) first look for a config
  package file in the :variable:`CMAKE_FIND_PACKAGE_REDIRECTS_DIR` directory.
  The :module:`FetchContent` module, or even the project itself, may write files
  to that location to redirect ``find_package()`` calls to content already
  provided by the project.  If no config package file is found in that location,
  the search proceeds with the logic described below.

CMake constructs a set of possible installation prefixes for the
package.  Under each prefix several directories are searched for a
configuration file.  The tables below show the directories searched.
Each entry is meant for installation trees following Windows (``W``), UNIX
(``U``), or Apple (``A``) conventions:

==================================================================== ==========
 Entry                                                               Convention
==================================================================== ==========
 ``<prefix>/``                                                          W
 ``<prefix>/(cmake|CMake)/``                                            W
 ``<prefix>/<name>*/``                                                  W
 ``<prefix>/<name>*/(cmake|CMake)/``                                    W
 ``<prefix>/<name>*/(cmake|CMake)/<name>*/`` [#]_                       W
 ``<prefix>/(lib/<arch>|lib*|share)/cmake/<name>*/``                    U
 ``<prefix>/(lib/<arch>|lib*|share)/<name>*/``                          U
 ``<prefix>/(lib/<arch>|lib*|share)/<name>*/(cmake|CMake)/``            U
 ``<prefix>/<name>*/(lib/<arch>|lib*|share)/cmake/<name>*/``            W/U
 ``<prefix>/<name>*/(lib/<arch>|lib*|share)/<name>*/``                  W/U
 ``<prefix>/<name>*/(lib/<arch>|lib*|share)/<name>*/(cmake|CMake)/``    W/U
==================================================================== ==========

.. [#] .. versionadded:: 3.25

On systems supporting macOS :prop_tgt:`FRAMEWORK` and :prop_tgt:`BUNDLE`, the
following directories are searched for Frameworks or Application Bundles
containing a configuration file:

=========================================================== ==========
 Entry                                                      Convention
=========================================================== ==========
 ``<prefix>/<name>.framework/Resources/``                      A
 ``<prefix>/<name>.framework/Resources/CMake/``                A
 ``<prefix>/<name>.framework/Versions/*/Resources/``           A
 ``<prefix>/<name>.framework/Versions/*/Resources/CMake/``     A
 ``<prefix>/<name>.app/Contents/Resources/``                   A
 ``<prefix>/<name>.app/Contents/Resources/CMake/``             A
=========================================================== ==========

In all cases the ``<name>`` is treated as case-insensitive and corresponds
to any of the names specified (``<PackageName>`` or names given by ``NAMES``).

If at least one compiled language has been enabled, the architecture-specific
``lib/<arch>`` and ``lib*`` directories may be searched based on the compiler's
target architecture, in the following order:

``lib/<arch>``
  Searched if the :variable:`CMAKE_LIBRARY_ARCHITECTURE` variable is set.

``lib64``
  Searched on 64 bit platforms (:variable:`CMAKE_SIZEOF_VOID_P` is 8) and the
  :prop_gbl:`FIND_LIBRARY_USE_LIB64_PATHS` property is set to ``TRUE``.

``lib32``
  Searched on 32 bit platforms (:variable:`CMAKE_SIZEOF_VOID_P` is 4) and the
  :prop_gbl:`FIND_LIBRARY_USE_LIB32_PATHS` property is set to ``TRUE``.

``libx32``
  Searched on platforms using the x32 ABI
  if the :prop_gbl:`FIND_LIBRARY_USE_LIBX32_PATHS` property is set to ``TRUE``.

``lib``
  Always searched.

.. versionchanged:: 3.24
  On ``Windows`` platform, it is possible to include registry queries as part
  of the directories specified through ``HINTS`` and ``PATHS`` keywords, using
  a :ref:`dedicated syntax <Find Using Windows Registry>`. Such specifications
  will be ignored on all other platforms.

.. versionadded:: 3.24
  ``REGISTRY_VIEW`` can be specified to manage ``Windows`` registry queries
  specified as part of ``PATHS`` and ``HINTS``.

  .. include:: FIND_XXX_REGISTRY_VIEW.txt

If ``PATH_SUFFIXES`` is specified, the suffixes are appended to each
(``W``) or (``U``) directory entry one-by-one.

This set of directories is intended to work in cooperation with
projects that provide configuration files in their installation trees.
Directories above marked with (``W``) are intended for installations on
Windows where the prefix may point at the top of an application's
installation directory.  Those marked with (``U``) are intended for
installations on UNIX platforms where the prefix is shared by multiple
packages.  This is merely a convention, so all (``W``) and (``U``) directories
are still searched on all platforms.  Directories marked with (``A``) are
intended for installations on Apple platforms.  The
:variable:`CMAKE_FIND_FRAMEWORK` and :variable:`CMAKE_FIND_APPBUNDLE`
variables determine the order of preference.

The set of installation prefixes is constructed using the following
steps.  If ``NO_DEFAULT_PATH`` is specified all ``NO_*`` options are
enabled.

1. Search prefixes unique to the current ``<PackageName>`` being found.
   See policy :policy:`CMP0074`.

   .. versionadded:: 3.12

   Specifically, search prefixes specified by the following variables,
   in order:

   a. :variable:`<PackageName>_ROOT` CMake variable,
      where ``<PackageName>`` is the case-preserved package name.

   b. :variable:`<PACKAGENAME>_ROOT` CMake variable,
      where ``<PACKAGENAME>`` is the upper-cased package name.
      See policy :policy:`CMP0144`.

      .. versionadded:: 3.27

   c. :envvar:`<PackageName>_ROOT` environment variable,
      where ``<PackageName>`` is the case-preserved package name.

   d. :envvar:`<PACKAGENAME>_ROOT` environment variable,
      where ``<PACKAGENAME>`` is the upper-cased package name.
      See policy :policy:`CMP0144`.

      .. versionadded:: 3.27

   The package root variables are maintained as a stack so if
   called from within a find module, root paths from the parent's find
   module will also be searched after paths for the current package.
   This can be skipped if ``NO_PACKAGE_ROOT_PATH`` is passed or by setting
   the :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` to ``FALSE``.

2. Search paths specified in cmake-specific cache variables.  These
   are intended to be used on the command line with a :option:`-DVAR=VALUE <cmake -D>`.
   The values are interpreted as :ref:`semicolon-separated lists <CMake Language Lists>`.
   This can be skipped if ``NO_CMAKE_PATH`` is passed or by setting the
   :variable:`CMAKE_FIND_USE_CMAKE_PATH` to ``FALSE``:

   * :variable:`CMAKE_PREFIX_PATH`
   * :variable:`CMAKE_FRAMEWORK_PATH`
   * :variable:`CMAKE_APPBUNDLE_PATH`

3. Search paths specified in cmake-specific environment variables.
   These are intended to be set in the user's shell configuration,
   and therefore use the host's native path separator
   (``;`` on Windows and ``:`` on UNIX).
   This can be skipped if ``NO_CMAKE_ENVIRONMENT_PATH`` is passed or by setting
   the :variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH` to ``FALSE``:

   * ``<PackageName>_DIR``
   * :envvar:`CMAKE_PREFIX_PATH`
   * :envvar:`CMAKE_FRAMEWORK_PATH`
   * :envvar:`CMAKE_APPBUNDLE_PATH`

4. Search paths specified by the ``HINTS`` option.  These should be paths
   computed by system introspection, such as a hint provided by the
   location of another item already found.  Hard-coded guesses should
   be specified with the ``PATHS`` option.

5. Search the standard system environment variables.  This can be
   skipped if ``NO_SYSTEM_ENVIRONMENT_PATH`` is passed  or by setting the
   :variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH` to ``FALSE``. Path entries
   ending in ``/bin`` or ``/sbin`` are automatically converted to their
   parent directories:

   * ``PATH``

6. Search paths stored in the CMake :ref:`User Package Registry`.
   This can be skipped if ``NO_CMAKE_PACKAGE_REGISTRY`` is passed or by
   setting the variable :variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY`
   to ``FALSE`` or the deprecated variable
   :variable:`CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY` to ``TRUE``.

   See the :manual:`cmake-packages(7)` manual for details on the user
   package registry.

7. Search cmake variables defined in the Platform files for the
   current system. The searching of :variable:`CMAKE_INSTALL_PREFIX` and
   :variable:`CMAKE_STAGING_PREFIX` can be
   skipped if ``NO_CMAKE_INSTALL_PREFIX`` is passed or by setting the
   :variable:`CMAKE_FIND_USE_INSTALL_PREFIX` to ``FALSE``. All these locations
   can be skipped if ``NO_CMAKE_SYSTEM_PATH`` is passed or by setting the
   :variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH` to ``FALSE``:

   * :variable:`CMAKE_SYSTEM_PREFIX_PATH`
   * :variable:`CMAKE_SYSTEM_FRAMEWORK_PATH`
   * :variable:`CMAKE_SYSTEM_APPBUNDLE_PATH`

   The platform paths that these variables contain are locations that
   typically include installed software. An example being ``/usr/local`` for
   UNIX based platforms.

8. Search paths stored in the CMake :ref:`System Package Registry`.
   This can be skipped if ``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY`` is passed
   or by setting the :variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`
   variable to ``FALSE`` or the deprecated variable
   :variable:`CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY` to ``TRUE``.

   See the :manual:`cmake-packages(7)` manual for details on the system
   package registry.

9. Search paths specified by the ``PATHS`` option.  These are typically
   hard-coded guesses.

The :variable:`CMAKE_IGNORE_PATH`, :variable:`CMAKE_IGNORE_PREFIX_PATH`,
:variable:`CMAKE_SYSTEM_IGNORE_PATH` and
:variable:`CMAKE_SYSTEM_IGNORE_PREFIX_PATH` variables can also cause some
of the above locations to be ignored.

.. versionadded:: 3.16
   Added the ``CMAKE_FIND_USE_<CATEGORY>`` variables to globally disable
   various search locations.

.. include:: FIND_XXX_ROOT.txt
.. include:: FIND_XXX_ORDER.txt

By default the value stored in the result variable will be the path at
which the file is found.  The :variable:`CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS`
variable may be set to ``TRUE`` before calling ``find_package`` in order
to resolve symbolic links and store the real path to the file.

Every non-REQUIRED ``find_package`` call can be disabled or made REQUIRED:

* Setting the :variable:`CMAKE_DISABLE_FIND_PACKAGE_<PackageName>` variable
  to ``TRUE`` disables the package.  This also disables redirection to a
  package provided by :module:`FetchContent`.

* Setting the :variable:`CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>` variable
  to ``TRUE`` makes the package REQUIRED.

Setting both variables to ``TRUE`` simultaneously is an error.

.. _`version selection`:

Config Mode Version Selection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note::
  When Config mode is used, this version selection process is applied
  regardless of whether the :ref:`full <full signature>` or
  :ref:`basic <basic signature>` signature was given.

When the ``[version]`` argument is given, Config mode will only find a
version of the package that claims compatibility with the requested
version (see :ref:`format specification <FIND_PACKAGE_VERSION_FORMAT>`). If the
``EXACT`` option is given, only a version of the package claiming an exact match
of the requested version may be found.  CMake does not establish any
convention for the meaning of version numbers.  Package version
numbers are checked by "version" files provided by the packages themselves
or by :module:`FetchContent`.  For a candidate package configuration file
``<config-file>.cmake`` the corresponding version file is located next
to it and named either ``<config-file>-version.cmake`` or
``<config-file>Version.cmake``.  If no such version file is available
then the configuration file is assumed to not be compatible with any
requested version.  A basic version file containing generic version
matching code can be created using the
:module:`CMakePackageConfigHelpers` module.  When a version file
is found it is loaded to check the requested version number.  The
version file is loaded in a nested scope in which the following
variables have been defined:

``PACKAGE_FIND_NAME``
  The ``<PackageName>``
``PACKAGE_FIND_VERSION``
  Full requested version string
``PACKAGE_FIND_VERSION_MAJOR``
  Major version if requested, else 0
``PACKAGE_FIND_VERSION_MINOR``
  Minor version if requested, else 0
``PACKAGE_FIND_VERSION_PATCH``
  Patch version if requested, else 0
``PACKAGE_FIND_VERSION_TWEAK``
  Tweak version if requested, else 0
``PACKAGE_FIND_VERSION_COUNT``
  Number of version components, 0 to 4

When a version range is specified, the above version variables will hold
values based on the lower end of the version range.  This is to preserve
compatibility with packages that have not been implemented to expect version
ranges.  In addition, the version range will be described by the following
variables:

``PACKAGE_FIND_VERSION_RANGE``
  Full requested version range string
``PACKAGE_FIND_VERSION_RANGE_MIN``
  This specifies whether the lower end point of the version range should be
  included or excluded.  Currently, the only supported value for this variable
  is ``INCLUDE``.
``PACKAGE_FIND_VERSION_RANGE_MAX``
  This specifies whether the upper end point of the version range should be
  included or excluded.  The supported values for this variable are
  ``INCLUDE`` and ``EXCLUDE``.

``PACKAGE_FIND_VERSION_MIN``
  Full requested version string of the lower end point of the range
``PACKAGE_FIND_VERSION_MIN_MAJOR``
  Major version of the lower end point if requested, else 0
``PACKAGE_FIND_VERSION_MIN_MINOR``
  Minor version of the lower end point if requested, else 0
``PACKAGE_FIND_VERSION_MIN_PATCH``
  Patch version of the lower end point if requested, else 0
``PACKAGE_FIND_VERSION_MIN_TWEAK``
  Tweak version of the lower end point if requested, else 0
``PACKAGE_FIND_VERSION_MIN_COUNT``
  Number of version components of the lower end point, 0 to 4

``PACKAGE_FIND_VERSION_MAX``
  Full requested version string of the upper end point of the range
``PACKAGE_FIND_VERSION_MAX_MAJOR``
  Major version of the upper end point if requested, else 0
``PACKAGE_FIND_VERSION_MAX_MINOR``
  Minor version of the upper end point if requested, else 0
``PACKAGE_FIND_VERSION_MAX_PATCH``
  Patch version of the upper end point if requested, else 0
``PACKAGE_FIND_VERSION_MAX_TWEAK``
  Tweak version of the upper end point if requested, else 0
``PACKAGE_FIND_VERSION_MAX_COUNT``
  Number of version components of the upper end point, 0 to 4

Regardless of whether a single version or a version range is specified, the
variable ``PACKAGE_FIND_VERSION_COMPLETE`` will be defined and will hold
the full requested version string as specified.

The version file checks whether it satisfies the requested version and
sets these variables:

``PACKAGE_VERSION``
  Full provided version string
``PACKAGE_VERSION_EXACT``
  True if version is exact match
``PACKAGE_VERSION_COMPATIBLE``
  True if version is compatible
``PACKAGE_VERSION_UNSUITABLE``
  True if unsuitable as any version

These variables are checked by the ``find_package`` command to determine
whether the configuration file provides an acceptable version.  They
are not available after the ``find_package`` call returns.  If the version
is acceptable the following variables are set:

``<PackageName>_VERSION``
  Full provided version string
``<PackageName>_VERSION_MAJOR``
  Major version if provided, else 0
``<PackageName>_VERSION_MINOR``
  Minor version if provided, else 0
``<PackageName>_VERSION_PATCH``
  Patch version if provided, else 0
``<PackageName>_VERSION_TWEAK``
  Tweak version if provided, else 0
``<PackageName>_VERSION_COUNT``
  Number of version components, 0 to 4

and the corresponding package configuration file is loaded.
When multiple package configuration files are available whose version files
claim compatibility with the version requested it is unspecified which
one is chosen: unless the variable :variable:`CMAKE_FIND_PACKAGE_SORT_ORDER`
is set no attempt is made to choose a highest or closest version number.

To control the order in which ``find_package`` checks for compatibility use
the two variables :variable:`CMAKE_FIND_PACKAGE_SORT_ORDER` and
:variable:`CMAKE_FIND_PACKAGE_SORT_DIRECTION`.
For instance in order to select the highest version one can set

.. code-block:: cmake

  SET(CMAKE_FIND_PACKAGE_SORT_ORDER NATURAL)
  SET(CMAKE_FIND_PACKAGE_SORT_DIRECTION DEC)

before calling ``find_package``.

Package File Interface Variables
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When loading a find module or package configuration file ``find_package``
defines variables to provide information about the call arguments (and
restores their original state before returning):

``CMAKE_FIND_PACKAGE_NAME``
  The ``<PackageName>`` which is searched for
``<PackageName>_FIND_REQUIRED``
  True if ``REQUIRED`` option was given
``<PackageName>_FIND_QUIETLY``
  True if ``QUIET`` option was given
``<PackageName>_FIND_REGISTRY_VIEW``
  The requested view if ``REGISTRY_VIEW`` option was given
``<PackageName>_FIND_VERSION``
  Full requested version string
``<PackageName>_FIND_VERSION_MAJOR``
  Major version if requested, else 0
``<PackageName>_FIND_VERSION_MINOR``
  Minor version if requested, else 0
``<PackageName>_FIND_VERSION_PATCH``
  Patch version if requested, else 0
``<PackageName>_FIND_VERSION_TWEAK``
  Tweak version if requested, else 0
``<PackageName>_FIND_VERSION_COUNT``
  Number of version components, 0 to 4
``<PackageName>_FIND_VERSION_EXACT``
  True if ``EXACT`` option was given
``<PackageName>_FIND_COMPONENTS``
  List of specified components (required and optional)
``<PackageName>_FIND_REQUIRED_<c>``
  True if component ``<c>`` is required,
  false if component ``<c>`` is optional

When a version range is specified, the above version variables will hold
values based on the lower end of the version range.  This is to preserve
compatibility with packages that have not been implemented to expect version
ranges.  In addition, the version range will be described by the following
variables:

``<PackageName>_FIND_VERSION_RANGE``
  Full requested version range string
``<PackageName>_FIND_VERSION_RANGE_MIN``
  This specifies whether the lower end point of the version range is
  included or excluded.  Currently, ``INCLUDE`` is the only supported value.
``<PackageName>_FIND_VERSION_RANGE_MAX``
  This specifies whether the upper end point of the version range is
  included or excluded.  The possible values for this variable are
  ``INCLUDE`` or ``EXCLUDE``.

``<PackageName>_FIND_VERSION_MIN``
  Full requested version string of the lower end point of the range
``<PackageName>_FIND_VERSION_MIN_MAJOR``
  Major version of the lower end point if requested, else 0
``<PackageName>_FIND_VERSION_MIN_MINOR``
  Minor version of the lower end point if requested, else 0
``<PackageName>_FIND_VERSION_MIN_PATCH``
  Patch version of the lower end point if requested, else 0
``<PackageName>_FIND_VERSION_MIN_TWEAK``
  Tweak version of the lower end point if requested, else 0
``<PackageName>_FIND_VERSION_MIN_COUNT``
  Number of version components of the lower end point, 0 to 4

``<PackageName>_FIND_VERSION_MAX``
  Full requested version string of the upper end point of the range
``<PackageName>_FIND_VERSION_MAX_MAJOR``
  Major version of the upper end point if requested, else 0
``<PackageName>_FIND_VERSION_MAX_MINOR``
  Minor version of the upper end point if requested, else 0
``<PackageName>_FIND_VERSION_MAX_PATCH``
  Patch version of the upper end point if requested, else 0
``<PackageName>_FIND_VERSION_MAX_TWEAK``
  Tweak version of the upper end point if requested, else 0
``<PackageName>_FIND_VERSION_MAX_COUNT``
  Number of version components of the upper end point, 0 to 4

Regardless of whether a single version or a version range is specified, the
variable ``<PackageName>_FIND_VERSION_COMPLETE`` will be defined and will hold
the full requested version string as specified.

In Module mode the loaded find module is responsible to honor the
request detailed by these variables; see the find module for details.
In Config mode ``find_package`` handles ``REQUIRED``, ``QUIET``, and
``[version]`` options automatically but leaves it to the package
configuration file to handle components in a way that makes sense
for the package.  The package configuration file may set
``<PackageName>_FOUND`` to false to tell ``find_package`` that component
requirements are not satisfied.



/P/🚀 command/find_path.rst
=========================================


find_path
---------

.. |FIND_XXX| replace:: find_path
.. |NAMES| replace:: NAMES name1 [name2 ...]
.. |SEARCH_XXX| replace:: file in a directory
.. |SEARCH_XXX_DESC| replace:: directory containing the named file
.. |prefix_XXX_SUBDIR| replace:: ``<prefix>/include``
.. |entry_XXX_SUBDIR| replace:: ``<entry>/include``

.. |FIND_XXX_REGISTRY_VIEW_DEFAULT| replace:: ``TARGET``

.. |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX| replace::
   ``<prefix>/include/<arch>`` if :variable:`CMAKE_LIBRARY_ARCHITECTURE`
   is set, and |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX_SUBDIR|
.. |CMAKE_PREFIX_PATH_XXX| replace::
   ``<prefix>/include/<arch>`` if :variable:`CMAKE_LIBRARY_ARCHITECTURE`
   is set, and |CMAKE_PREFIX_PATH_XXX_SUBDIR|
.. |CMAKE_XXX_PATH| replace:: :variable:`CMAKE_INCLUDE_PATH`
.. |CMAKE_XXX_MAC_PATH| replace:: :variable:`CMAKE_FRAMEWORK_PATH`

.. |ENV_CMAKE_PREFIX_PATH_XXX| replace::
   ``<prefix>/include/<arch>`` if :variable:`CMAKE_LIBRARY_ARCHITECTURE` is set,
   and |ENV_CMAKE_PREFIX_PATH_XXX_SUBDIR|
.. |ENV_CMAKE_XXX_PATH| replace:: :envvar:`CMAKE_INCLUDE_PATH`
.. |ENV_CMAKE_XXX_MAC_PATH| replace:: :envvar:`CMAKE_FRAMEWORK_PATH`

.. |SYSTEM_ENVIRONMENT_PATH_XXX| replace:: The directories in ``INCLUDE``
   and ``PATH``.
.. |SYSTEM_ENVIRONMENT_PATH_WINDOWS_XXX| replace::
   On Windows hosts, CMake 3.3 through 3.27 searched additional paths:
   ``<prefix>/include/<arch>`` if :variable:`CMAKE_LIBRARY_ARCHITECTURE`
   is set, and |SYSTEM_ENVIRONMENT_PREFIX_PATH_XXX_SUBDIR|.
   This behavior was removed by CMake 3.28.

.. |CMAKE_SYSTEM_PREFIX_PATH_XXX| replace::
   ``<prefix>/include/<arch>`` if :variable:`CMAKE_LIBRARY_ARCHITECTURE`
   is set, and |CMAKE_SYSTEM_PREFIX_PATH_XXX_SUBDIR|
.. |CMAKE_SYSTEM_XXX_PATH| replace::
   :variable:`CMAKE_SYSTEM_INCLUDE_PATH`
.. |CMAKE_SYSTEM_XXX_MAC_PATH| replace::
   :variable:`CMAKE_SYSTEM_FRAMEWORK_PATH`

.. |CMAKE_FIND_ROOT_PATH_MODE_XXX| replace::
   :variable:`CMAKE_FIND_ROOT_PATH_MODE_INCLUDE`

.. include:: FIND_XXX.txt

When searching for frameworks, if the file is specified as ``A/b.h``, then
the framework search will look for ``A.framework/Headers/b.h``.  If that
is found the path will be set to the path to the framework.  CMake
will convert this to the correct ``-F`` option to include the file.



/P/🚀 command/find_program.rst
============================================


find_program
------------

.. |FIND_XXX| replace:: find_program
.. |NAMES| replace:: NAMES name1 [name2 ...] [NAMES_PER_DIR]
.. |SEARCH_XXX| replace:: program
.. |SEARCH_XXX_DESC| replace:: program
.. |prefix_XXX_SUBDIR| replace:: ``<prefix>/[s]bin``
.. |entry_XXX_SUBDIR| replace:: ``<entry>/[s]bin``

.. |FIND_XXX_REGISTRY_VIEW_DEFAULT| replace:: ``BOTH``

.. |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX| replace::
   |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX_SUBDIR|
.. |CMAKE_PREFIX_PATH_XXX| replace::
   |CMAKE_PREFIX_PATH_XXX_SUBDIR|
.. |CMAKE_XXX_PATH| replace:: :variable:`CMAKE_PROGRAM_PATH`
.. |CMAKE_XXX_MAC_PATH| replace:: :variable:`CMAKE_APPBUNDLE_PATH`

.. |ENV_CMAKE_PREFIX_PATH_XXX| replace::
   |ENV_CMAKE_PREFIX_PATH_XXX_SUBDIR|
.. |ENV_CMAKE_XXX_PATH| replace:: :envvar:`CMAKE_PROGRAM_PATH`
.. |ENV_CMAKE_XXX_MAC_PATH| replace:: :envvar:`CMAKE_APPBUNDLE_PATH`

.. |SYSTEM_ENVIRONMENT_PATH_XXX| replace:: The directories in ``PATH`` itself.
.. |SYSTEM_ENVIRONMENT_PATH_WINDOWS_XXX| replace:: \

.. |CMAKE_SYSTEM_PREFIX_PATH_XXX| replace::
   |CMAKE_SYSTEM_PREFIX_PATH_XXX_SUBDIR|
.. |CMAKE_SYSTEM_XXX_PATH| replace::
   :variable:`CMAKE_SYSTEM_PROGRAM_PATH`
.. |CMAKE_SYSTEM_XXX_MAC_PATH| replace::
   :variable:`CMAKE_SYSTEM_APPBUNDLE_PATH`

.. |CMAKE_FIND_ROOT_PATH_MODE_XXX| replace::
   :variable:`CMAKE_FIND_ROOT_PATH_MODE_PROGRAM`

.. include:: FIND_XXX.txt

When more than one value is given to the ``NAMES`` option this command by
default will consider one name at a time and search every directory
for it.  The ``NAMES_PER_DIR`` option tells this command to consider one
directory at a time and search for all names in it.



/P/🚀 command/foreach.rst
=======================================


foreach
-------

Evaluate a group of commands for each value in a list.

.. code-block:: cmake

  foreach(<loop_var> <items>)
    <commands>
  endforeach()

where ``<items>`` is a list of items that are separated by
semicolon or whitespace.
All commands between ``foreach`` and the matching ``endforeach`` are recorded
without being invoked.  Once the ``endforeach`` is evaluated, the recorded
list of commands is invoked once for each item in ``<items>``.
At the beginning of each iteration the variable ``<loop_var>`` will be set
to the value of the current item.

The scope of ``<loop_var>`` is restricted to the loop scope. See policy
:policy:`CMP0124` for details.

The commands :command:`break` and :command:`continue` provide means to
escape from the normal control flow.

Per legacy, the :command:`endforeach` command admits
an optional ``<loop_var>`` argument.
If used, it must be a verbatim
repeat of the argument of the opening
``foreach`` command.

.. code-block:: cmake

  foreach(<loop_var> RANGE <stop>)

In this variant, ``foreach`` iterates over the numbers
0, 1, ... up to (and including) the nonnegative integer ``<stop>``.

.. code-block:: cmake

  foreach(<loop_var> RANGE <start> <stop> [<step>])

In this variant, ``foreach`` iterates over the numbers from
``<start>`` up to at most ``<stop>`` in steps of ``<step>``.
If ``<step>`` is not specified, then the step size is 1.
The three arguments ``<start>`` ``<stop>`` ``<step>`` must
all be nonnegative integers, and ``<stop>`` must not be
smaller than ``<start>``; otherwise you enter the danger zone
of undocumented behavior that may change in future releases.

.. code-block:: cmake

  foreach(<loop_var> IN [LISTS [<lists>]] [ITEMS [<items>]])

In this variant, ``<lists>`` is a whitespace or semicolon
separated list of list-valued variables. The ``foreach``
command iterates over each item in each given list.
The ``<items>`` following the ``ITEMS`` keyword are processed
as in the first variant of the ``foreach`` command.
The forms ``LISTS A`` and ``ITEMS ${A}`` are
equivalent.

The following example shows how the ``LISTS`` option is
processed:

.. code-block:: cmake

  set(A 0;1)
  set(B 2 3)
  set(C "4 5")
  set(D 6;7 8)
  set(E "")
  foreach(X IN LISTS A B C D E)
      message(STATUS "X=${X}")
  endforeach()

yields::

  -- X=0
  -- X=1
  -- X=2
  -- X=3
  -- X=4 5
  -- X=6
  -- X=7
  -- X=8


.. code-block:: cmake

  foreach(<loop_var>... IN ZIP_LISTS <lists>)

.. versionadded:: 3.17

In this variant, ``<lists>`` is a whitespace or semicolon
separated list of list-valued variables. The ``foreach``
command iterates over each list simultaneously setting the
iteration variables as follows:

- if the only ``loop_var`` given, then it sets a series of
  ``loop_var_N`` variables to the current item from the
  corresponding list;
- if multiple variable names passed, their count should match
  the lists variables count;
- if any of the lists are shorter, the corresponding iteration
  variable is not defined for the current iteration.

.. code-block:: cmake

  list(APPEND English one two three four)
  list(APPEND Bahasa satu dua tiga)

  foreach(num IN ZIP_LISTS English Bahasa)
      message(STATUS "num_0=${num_0}, num_1=${num_1}")
  endforeach()

  foreach(en ba IN ZIP_LISTS English Bahasa)
      message(STATUS "en=${en}, ba=${ba}")
  endforeach()

yields::

  -- num_0=one, num_1=satu
  -- num_0=two, num_1=dua
  -- num_0=three, num_1=tiga
  -- num_0=four, num_1=
  -- en=one, ba=satu
  -- en=two, ba=dua
  -- en=three, ba=tiga
  -- en=four, ba=

See Also
^^^^^^^^

* :command:`break`
* :command:`continue`
* :command:`endforeach`
* :command:`while`



/P/🚀 command/function.rst
========================================


function
--------

Start recording a function for later invocation as a command.

.. code-block:: cmake

  function(<name> [<arg1> ...])
    <commands>
  endfunction()

Defines a function named ``<name>`` that takes arguments named
``<arg1>``, ...  The ``<commands>`` in the function definition
are recorded; they are not executed until the function is invoked.

Per legacy, the :command:`endfunction` command admits an optional
``<name>`` argument. If used, it must be a verbatim repeat of the
argument of the opening ``function`` command.

A function opens a new scope: see :command:`set(var PARENT_SCOPE)` for
details.

See the :command:`cmake_policy()` command documentation for the behavior
of policies inside functions.

See the :command:`macro()` command documentation for differences
between CMake functions and macros.

Invocation
^^^^^^^^^^

The function invocation is case-insensitive. A function defined as

.. code-block:: cmake

  function(foo)
    <commands>
  endfunction()

can be invoked through any of

.. code-block:: cmake

  foo()
  Foo()
  FOO()
  cmake_language(CALL foo)

and so on. However, it is strongly recommended to stay with the
case chosen in the function definition. Typically functions use
all-lowercase names.

.. versionadded:: 3.18
  The :command:`cmake_language(CALL ...)` command can also be used to
  invoke the function.

Arguments
^^^^^^^^^

When the function is invoked, the recorded ``<commands>`` are first
modified by replacing formal parameters (``${arg1}``, ...) with the
arguments passed, and then invoked as normal commands.

In addition to referencing the formal parameters you can reference the
``ARGC`` variable which will be set to the number of arguments passed
into the function as well as ``ARGV0``, ``ARGV1``, ``ARGV2``, ...  which
will have the actual values of the arguments passed in.  This facilitates
creating functions with optional arguments.

Furthermore, ``ARGV`` holds the list of all arguments given to the
function and ``ARGN`` holds the list of arguments past the last expected
argument.  Referencing to ``ARGV#`` arguments beyond ``ARGC`` have
undefined behavior.  Checking that ``ARGC`` is greater than ``#`` is
the only way to ensure that ``ARGV#`` was passed to the function as an
extra argument.

See Also
^^^^^^^^

* :command:`cmake_parse_arguments`
* :command:`endfunction`
* :command:`return`



/P/🚀 command/get_cmake_property.rst
==================================================


get_cmake_property
------------------

Get a global property of the CMake instance.

.. code-block:: cmake

  get_cmake_property(<variable> <property>)

Gets a global property from the CMake instance.  The value of
the ``<property>`` is stored in the specified ``<variable>``.
If the property is not found, ``<variable>`` will be set to ``NOTFOUND``.
See the :manual:`cmake-properties(7)` manual for available properties.

In addition to global properties, this command (for historical reasons)
also supports the :prop_dir:`VARIABLES` and :prop_dir:`MACROS` directory
properties.  It also supports a special ``COMPONENTS`` global property that
lists the components given to the :command:`install` command.

See Also
^^^^^^^^

* the :command:`get_property` command ``GLOBAL`` option



/P/🚀 command/get_directory_property.rst
======================================================


get_directory_property
----------------------

Get a property of ``DIRECTORY`` scope.

.. code-block:: cmake

  get_directory_property(<variable> [DIRECTORY <dir>] <prop-name>)

Stores a property of directory scope in the named ``<variable>``.

The ``DIRECTORY`` argument specifies another directory from which
to retrieve the property value instead of the current directory.
Relative paths are treated as relative to the
current source directory.  CMake must already know about the directory,
either by having added it through a call to :command:`add_subdirectory`
or being the top level directory.

.. versionadded:: 3.19
  ``<dir>`` may reference a binary directory.

If the property is not defined for the nominated directory scope,
an empty string is returned.  In the case of ``INHERITED`` properties,
if the property is not found for the nominated directory scope,
the search will chain to a parent scope as described for the
:command:`define_property` command.

.. code-block:: cmake

  get_directory_property(<variable> [DIRECTORY <dir>]
                         DEFINITION <var-name>)

Get a variable definition from a directory.  This form is useful to
get a variable definition from another directory.


See Also
^^^^^^^^

* :command:`define_property`
* the more general :command:`get_property` command



/P/🚀 command/get_filename_component.rst
======================================================


get_filename_component
----------------------

Get a specific component of a full filename.

.. versionchanged:: 3.20
  This command has been superseded by the :command:`cmake_path` command, except
  for ``REALPATH``, which is now offered by :command:`file(REAL_PATH)`, and
  ``PROGRAM``, now available in :command:`separate_arguments(PROGRAM)`.

.. versionchanged:: 3.24
  The undocumented feature offering the capability to query the ``Windows``
  registry is superseded by
  :ref:`cmake_host_system_information(QUERY WINDOWS_REGISTRY)<Query Windows registry>`
  command.

.. code-block:: cmake

  get_filename_component(<var> <FileName> <mode> [CACHE])

Sets ``<var>`` to a component of ``<FileName>``, where ``<mode>`` is one of:

::

 DIRECTORY = Directory without file name
 NAME      = File name without directory
 EXT       = File name longest extension (.b.c from d/a.b.c)
 NAME_WE   = File name with neither the directory nor the longest extension
 LAST_EXT  = File name last extension (.c from d/a.b.c)
 NAME_WLE  = File name with neither the directory nor the last extension
 PATH      = Legacy alias for DIRECTORY (use for CMake <= 2.8.11)

.. versionadded:: 3.14
  Added the ``LAST_EXT`` and ``NAME_WLE`` modes.

Paths are returned with forward slashes and have no trailing slashes.
If the optional ``CACHE`` argument is specified, the result variable is
added to the cache.

.. code-block:: cmake

  get_filename_component(<var> <FileName> <mode> [BASE_DIR <dir>] [CACHE])

.. versionadded:: 3.4

Sets ``<var>`` to the absolute path of ``<FileName>``, where ``<mode>`` is one
of:

::

 ABSOLUTE  = Full path to file
 REALPATH  = Full path to existing file with symlinks resolved

If the provided ``<FileName>`` is a relative path, it is evaluated relative
to the given base directory ``<dir>``.  If no base directory is
provided, the default base directory will be
:variable:`CMAKE_CURRENT_SOURCE_DIR`.

Paths are returned with forward slashes and have no trailing slashes.  If the
optional ``CACHE`` argument is specified, the result variable is added to the
cache.

.. code-block:: cmake

  get_filename_component(<var> <FileName> PROGRAM [PROGRAM_ARGS <arg_var>] [CACHE])

The program in ``<FileName>`` will be found in the system search path or
left as a full path.  If ``PROGRAM_ARGS`` is present with ``PROGRAM``, then
any command-line arguments present in the ``<FileName>`` string are split
from the program name and stored in ``<arg_var>``.  This is used to
separate a program name from its arguments in a command line string.

See Also
^^^^^^^^

* :command:`cmake_path`



/P/🚀 command/get_property.rst
============================================


get_property
------------

Get a property.

.. code-block:: cmake

  get_property(<variable>
               <GLOBAL             |
                DIRECTORY [<dir>]  |
                TARGET    <target> |
                SOURCE    <source>
                          [DIRECTORY <dir> | TARGET_DIRECTORY <target>] |
                INSTALL   <file>   |
                TEST      <test>
                          [DIRECTORY <dir>] |
                CACHE     <entry>  |
                VARIABLE           >
               PROPERTY <name>
               [SET | DEFINED | BRIEF_DOCS | FULL_DOCS])

Gets one property from one object in a scope.

The first argument specifies the variable in which to store the result.
The second argument determines the scope from which to get the property.
It must be one of the following:

``GLOBAL``
  Scope is unique and does not accept a name.

``DIRECTORY``
  Scope defaults to the current directory but another
  directory (already processed by CMake) may be named by the
  full or relative path ``<dir>``.
  Relative paths are treated as relative to the current source directory.
  See also the :command:`get_directory_property` command.

  .. versionadded:: 3.19
    ``<dir>`` may reference a binary directory.

``TARGET``
  Scope must name one existing target.
  See also the :command:`get_target_property` command.

``SOURCE``
  Scope must name one source file.  By default, the source file's property
  will be read from the current source directory's scope.

  .. versionadded:: 3.18
    Directory scope can be overridden with one of the following sub-options:

    ``DIRECTORY <dir>``
      The source file property will be read from the ``<dir>`` directory's
      scope.  CMake must already know about
      the directory, either by having added it through a call
      to :command:`add_subdirectory` or ``<dir>`` being the top level directory.
      Relative paths are treated as relative to the current source directory.

      .. versionadded:: 3.19
        ``<dir>`` may reference a binary directory.

    ``TARGET_DIRECTORY <target>``
      The source file property will be read from the directory scope in which
      ``<target>`` was created (``<target>`` must therefore already exist).

  See also the :command:`get_source_file_property` command.

``INSTALL``
  .. versionadded:: 3.1

  Scope must name one installed file path.

``TEST``
  Scope must name one existing test.
  See also the :command:`get_test_property` command.

  .. versionadded:: 3.28
    Directory scope can be overridden with the following sub-option:

    ``DIRECTORY <dir>``
      The test property will be read from the ``<dir>`` directory's
      scope.  CMake must already know about the directory, either by having added
      it through a call to :command:`add_subdirectory` or ``<dir>`` being the top
      level directory. Relative paths are treated as relative to the current
      source directory. ``<dir>`` may reference a binary directory.

``CACHE``
  Scope must name one cache entry.

``VARIABLE``
  Scope is unique and does not accept a name.

The required ``PROPERTY`` option is immediately followed by the name of
the property to get.  If the property is not set an empty value is
returned, although some properties support inheriting from a parent scope
if defined to behave that way (see :command:`define_property`).

If the ``SET`` option is given the variable is set to a boolean
value indicating whether the property has been set.  If the ``DEFINED``
option is given the variable is set to a boolean value indicating
whether the property has been defined such as with the
:command:`define_property` command.

If ``BRIEF_DOCS`` or ``FULL_DOCS`` is given then the variable is set to a
string containing documentation for the requested property.  If
documentation is requested for a property that has not been defined
``NOTFOUND`` is returned.

.. note::

  The :prop_sf:`GENERATED` source file property may be globally visible.
  See its documentation for details.

See Also
^^^^^^^^

* :command:`define_property`
* :command:`set_property`



/P/🚀 command/if.rst
==================================


if
--

Conditionally execute a group of commands.

Synopsis
^^^^^^^^

.. code-block:: cmake

  if(<condition>)
    <commands>
  elseif(<condition>) # optional block, can be repeated
    <commands>
  else()              # optional block
    <commands>
  endif()

Evaluates the ``condition`` argument of the ``if`` clause according to the
`Condition syntax`_ described below. If the result is true, then the
``commands`` in the ``if`` block are executed.
Otherwise, optional ``elseif`` blocks are processed in the same way.
Finally, if no ``condition`` is true, ``commands`` in the optional ``else``
block are executed.

Per legacy, the :command:`else` and :command:`endif` commands admit
an optional ``<condition>`` argument.
If used, it must be a verbatim
repeat of the argument of the opening
``if`` command.

.. _`Condition Syntax`:

Condition Syntax
^^^^^^^^^^^^^^^^

The following syntax applies to the ``condition`` argument of
the ``if``, ``elseif`` and :command:`while` clauses.

Compound conditions are evaluated in the following order of precedence:

1. `Parentheses`_.

2. Unary tests such as `EXISTS`_, `COMMAND`_, and `DEFINED`_.

3. Binary tests such as `EQUAL`_, `LESS`_, `LESS_EQUAL`_, `GREATER`_,
   `GREATER_EQUAL`_, `STREQUAL`_, `STRLESS`_, `STRLESS_EQUAL`_,
   `STRGREATER`_, `STRGREATER_EQUAL`_, `VERSION_EQUAL`_, `VERSION_LESS`_,
   `VERSION_LESS_EQUAL`_, `VERSION_GREATER`_, `VERSION_GREATER_EQUAL`_,
   `PATH_EQUAL`_, and `MATCHES`_.

4. Unary logical operator `NOT`_.

5. Binary logical operators `AND`_ and `OR`_, from left to right,
   without any short-circuit.

Basic Expressions
"""""""""""""""""

.. signature:: if(<constant>)
  :target: constant

  True if the constant is ``1``, ``ON``, ``YES``, ``TRUE``, ``Y``,
  or a non-zero number (including floating point numbers).
  False if the constant is ``0``, ``OFF``,
  ``NO``, ``FALSE``, ``N``, ``IGNORE``, ``NOTFOUND``, the empty string,
  or ends in the suffix ``-NOTFOUND``.  Named boolean constants are
  case-insensitive.  If the argument is not one of these specific
  constants, it is treated as a variable or string (see `Variable Expansion`_
  further below) and one of the following two forms applies.

.. signature:: if(<variable>)
  :target: variable

  True if given a variable that is defined to a value that is not a false
  constant.  False otherwise, including if the variable is undefined.
  Note that macro arguments are not variables.
  :ref:`Environment Variables <CMake Language Environment Variables>` also
  cannot be tested this way, e.g. ``if(ENV{some_var})`` will always evaluate
  to false.

.. signature:: if(<string>)
  :target: string

  A quoted string always evaluates to false unless:

  * The string's value is one of the true constants, or
  * Policy :policy:`CMP0054` is not set to ``NEW`` and the string's value
    happens to be a variable name that is affected by :policy:`CMP0054`'s
    behavior.

Logic Operators
"""""""""""""""

.. signature:: if(NOT <condition>)

  True if the condition is not true.

.. signature:: if(<cond1> AND <cond2>)
  :target: AND

  True if both conditions would be considered true individually.

.. signature:: if(<cond1> OR <cond2>)
  :target: OR

  True if either condition would be considered true individually.

.. signature:: if((condition) AND (condition OR (condition)))
  :target: parentheses

  The conditions inside the parenthesis are evaluated first and then
  the remaining condition is evaluated as in the other examples.
  Where there are nested parenthesis the innermost are evaluated as part
  of evaluating the condition that contains them.

Existence Checks
""""""""""""""""

.. signature:: if(COMMAND <command-name>)

  True if the given name is a command, macro or function that can be
  invoked.

.. signature:: if(POLICY <policy-id>)

  True if the given name is an existing policy (of the form ``CMP<NNNN>``).

.. signature:: if(TARGET <target-name>)

  True if the given name is an existing logical target name created
  by a call to the :command:`add_executable`, :command:`add_library`,
  or :command:`add_custom_target` command that has already been invoked
  (in any directory).

.. signature:: if(TEST <test-name>)

  .. versionadded:: 3.3

  True if the given name is an existing test name created by the
  :command:`add_test` command.

.. signature:: if(DEFINED <name>|CACHE{<name>}|ENV{<name>})

  True if a variable, cache variable or environment variable
  with given ``<name>`` is defined. The value of the variable
  does not matter. Note the following caveats:

  * Macro arguments are not variables.
  * It is not possible to test directly whether a `<name>` is a non-cache
    variable.  The expression ``if(DEFINED someName)`` will evaluate to true
    if either a cache or non-cache variable ``someName`` exists.  In
    comparison, the expression ``if(DEFINED CACHE{someName})`` will only
    evaluate to true if a cache variable ``someName`` exists.  Both expressions
    need to be tested if you need to know whether a non-cache variable exists:
    ``if(DEFINED someName AND NOT DEFINED CACHE{someName})``.

 .. versionadded:: 3.14
  Added support for ``CACHE{<name>}`` variables.

.. signature:: if(<variable|string> IN_LIST <variable>)
  :target: IN_LIST

  .. versionadded:: 3.3

  True if the given element is contained in the named list variable.

File Operations
"""""""""""""""

.. signature:: if(EXISTS <path-to-file-or-directory>)

  True if the named file or directory exists and is readable.  Behavior
  is well-defined only for explicit full paths (a leading ``~/`` is not
  expanded as a home directory and is considered a relative path).
  Resolves symbolic links, i.e. if the named file or directory is a
  symbolic link, returns true if the target of the symbolic link exists.

  False if the given path is an empty string.

  .. note::
    Prefer ``if(IS_READABLE)`` to check file readability.  ``if(EXISTS)``
    may be changed in the future to only check file existence.

.. signature:: if(IS_READABLE <path-to-file-or-directory>)

  .. versionadded:: 3.29

  True if the named file or directory is readable.  Behavior
  is well-defined only for explicit full paths (a leading ``~/`` is not
  expanded as a home directory and is considered a relative path).
  Resolves symbolic links, i.e. if the named file or directory is a
  symbolic link, returns true if the target of the symbolic link is readable.

  False if the given path is an empty string.

.. signature:: if(IS_WRITABLE <path-to-file-or-directory>)

  .. versionadded:: 3.29

  True if the named file or directory is writable.  Behavior
  is well-defined only for explicit full paths (a leading ``~/`` is not
  expanded as a home directory and is considered a relative path).
  Resolves symbolic links, i.e. if the named file or directory is a
  symbolic link, returns true if the target of the symbolic link is writable.

  False if the given path is an empty string.

.. signature:: if(IS_EXECUTABLE <path-to-file-or-directory>)

  .. versionadded:: 3.29

  True if the named file or directory is executable.  Behavior
  is well-defined only for explicit full paths (a leading ``~/`` is not
  expanded as a home directory and is considered a relative path).
  Resolves symbolic links, i.e. if the named file or directory is a
  symbolic link, returns true if the target of the symbolic link is executable.

  False if the given path is an empty string.

.. signature:: if(<file1> IS_NEWER_THAN <file2>)
  :target: IS_NEWER_THAN

  True if ``file1`` is newer than ``file2`` or if one of the two files doesn't
  exist.  Behavior is well-defined only for full paths.  If the file
  time stamps are exactly the same, an ``IS_NEWER_THAN`` comparison returns
  true, so that any dependent build operations will occur in the event
  of a tie.  This includes the case of passing the same file name for
  both file1 and file2.

.. signature:: if(IS_DIRECTORY <path>)

  True if ``path`` is a directory.  Behavior is well-defined only
  for full paths.

  False if the given path is an empty string.

.. signature:: if(IS_SYMLINK <path>)

  True if the given path is a symbolic link.  Behavior is well-defined
  only for full paths.

.. signature:: if(IS_ABSOLUTE <path>)

  True if the given path is an absolute path.  Note the following special
  cases:

  * An empty ``path`` evaluates to false.
  * On Windows hosts, any ``path`` that begins with a drive letter and colon
    (e.g. ``C:``), a forward slash or a backslash will evaluate to true.
    This means a path like ``C:no\base\dir`` will evaluate to true, even
    though the non-drive part of the path is relative.
  * On non-Windows hosts, any ``path`` that begins with a tilde (``~``)
    evaluates to true.

Comparisons
"""""""""""

.. signature:: if(<variable|string> MATCHES <regex>)
  :target: MATCHES

  True if the given string or variable's value matches the given regular
  expression.  See :ref:`Regex Specification` for regex format.

  .. versionadded:: 3.9
   ``()`` groups are captured in :variable:`CMAKE_MATCH_<n>` variables.

.. signature:: if(<variable|string> LESS <variable|string>)
  :target: LESS

  True if the given string or variable's value parses as a real number
  (like a C ``double``) and less than that on the right.

.. signature:: if(<variable|string> GREATER <variable|string>)
  :target: GREATER

  True if the given string or variable's value parses as a real number
  (like a C ``double``) and greater than that on the right.

.. signature:: if(<variable|string> EQUAL <variable|string>)
  :target: EQUAL

  True if the given string or variable's value parses as a real number
  (like a C ``double``) and equal to that on the right.

.. signature:: if(<variable|string> LESS_EQUAL <variable|string>)
  :target: LESS_EQUAL

  .. versionadded:: 3.7

  True if the given string or variable's value parses as a real number
  (like a C ``double``) and less than or equal to that on the right.

.. signature:: if(<variable|string> GREATER_EQUAL <variable|string>)
  :target: GREATER_EQUAL

  .. versionadded:: 3.7

  True if the given string or variable's value parses as a real number
  (like a C ``double``) and greater than or equal to that on the right.

.. signature:: if(<variable|string> STRLESS <variable|string>)
  :target: STRLESS

  True if the given string or variable's value is lexicographically less
  than the string or variable on the right.

.. signature:: if(<variable|string> STRGREATER <variable|string>)
  :target: STRGREATER

  True if the given string or variable's value is lexicographically greater
  than the string or variable on the right.

.. signature:: if(<variable|string> STREQUAL <variable|string>)
  :target: STREQUAL

  True if the given string or variable's value is lexicographically equal
  to the string or variable on the right.

.. signature:: if(<variable|string> STRLESS_EQUAL <variable|string>)
  :target: STRLESS_EQUAL

  .. versionadded:: 3.7

  True if the given string or variable's value is lexicographically less
  than or equal to the string or variable on the right.

.. signature:: if(<variable|string> STRGREATER_EQUAL <variable|string>)
  :target: STRGREATER_EQUAL

  .. versionadded:: 3.7

  True if the given string or variable's value is lexicographically greater
  than or equal to the string or variable on the right.

Version Comparisons
"""""""""""""""""""

.. signature:: if(<variable|string> VERSION_LESS <variable|string>)
  :target: VERSION_LESS

  Component-wise integer version number comparison (version format is
  ``major[.minor[.patch[.tweak]]]``, omitted components are treated as zero).
  Any non-integer version component or non-integer trailing part of a version
  component effectively truncates the string at that point.

.. signature:: if(<variable|string> VERSION_GREATER <variable|string>)
  :target: VERSION_GREATER

  Component-wise integer version number comparison (version format is
  ``major[.minor[.patch[.tweak]]]``, omitted components are treated as zero).
  Any non-integer version component or non-integer trailing part of a version
  component effectively truncates the string at that point.

.. signature:: if(<variable|string> VERSION_EQUAL <variable|string>)
  :target: VERSION_EQUAL

  Component-wise integer version number comparison (version format is
  ``major[.minor[.patch[.tweak]]]``, omitted components are treated as zero).
  Any non-integer version component or non-integer trailing part of a version
  component effectively truncates the string at that point.

.. signature:: if(<variable|string> VERSION_LESS_EQUAL <variable|string>)
  :target: VERSION_LESS_EQUAL

  .. versionadded:: 3.7

  Component-wise integer version number comparison (version format is
  ``major[.minor[.patch[.tweak]]]``, omitted components are treated as zero).
  Any non-integer version component or non-integer trailing part of a version
  component effectively truncates the string at that point.

.. signature:: if(<variable|string> VERSION_GREATER_EQUAL <variable|string>)
  :target: VERSION_GREATER_EQUAL

  .. versionadded:: 3.7

  Component-wise integer version number comparison (version format is
  ``major[.minor[.patch[.tweak]]]``, omitted components are treated as zero).
  Any non-integer version component or non-integer trailing part of a version
  component effectively truncates the string at that point.

Path Comparisons
""""""""""""""""

.. signature:: if(<variable|string> PATH_EQUAL <variable|string>)
  :target: PATH_EQUAL

  .. versionadded:: 3.24

  Compares the two paths component-by-component.  Only if every component of
  both paths match will the two paths compare equal.  Multiple path separators
  are effectively collapsed into a single separator, but note that backslashes
  are not converted to forward slashes.  No other
  :ref:`path normalization <Normalization>` is performed.

  Component-wise comparison is superior to string-based comparison due to the
  handling of multiple path separators.  In the following example, the
  expression evaluates to true using ``PATH_EQUAL``, but false with
  ``STREQUAL``:

  .. code-block:: cmake

    # comparison is TRUE
    if ("/a//b/c" PATH_EQUAL "/a/b/c")
       ...
    endif()

    # comparison is FALSE
    if ("/a//b/c" STREQUAL "/a/b/c")
       ...
    endif()

  See :ref:`cmake_path(COMPARE) <Path COMPARE>` for more details.

Variable Expansion
^^^^^^^^^^^^^^^^^^

The if command was written very early in CMake's history, predating
the ``${}`` variable evaluation syntax, and for convenience evaluates
variables named by its arguments as shown in the above signatures.
Note that normal variable evaluation with ``${}`` applies before the if
command even receives the arguments.  Therefore code like

.. code-block:: cmake

 set(var1 OFF)
 set(var2 "var1")
 if(${var2})

appears to the if command as

.. code-block:: cmake

  if(var1)

and is evaluated according to the ``if(<variable>)`` case documented
above.  The result is ``OFF`` which is false.  However, if we remove the
``${}`` from the example then the command sees

.. code-block:: cmake

  if(var2)

which is true because ``var2`` is defined to ``var1`` which is not a false
constant.

Automatic evaluation applies in the other cases whenever the
above-documented condition syntax accepts ``<variable|string>``:

* The left hand argument to `MATCHES`_ is first checked to see if it is
  a defined variable.  If so, the variable's value is used, otherwise the
  original value is used.

* If the left hand argument to `MATCHES`_ is missing it returns false
  without error

* Both left and right hand arguments to `LESS`_, `GREATER`_, `EQUAL`_,
  `LESS_EQUAL`_, and `GREATER_EQUAL`_, are independently tested to see if
  they are defined variables.  If so, their defined values are used otherwise
  the original value is used.

* Both left and right hand arguments to `STRLESS`_, `STRGREATER`_,
  `STREQUAL`_, `STRLESS_EQUAL`_, and `STRGREATER_EQUAL`_ are independently
  tested to see if they are defined variables.  If so, their defined values are
  used otherwise the original value is used.

* Both left and right hand arguments to `VERSION_LESS`_,
  `VERSION_GREATER`_, `VERSION_EQUAL`_, `VERSION_LESS_EQUAL`_, and
  `VERSION_GREATER_EQUAL`_ are independently tested to see if they are defined
  variables.  If so, their defined values are used otherwise the original value
  is used.

* The right hand argument to `NOT`_ is tested to see if it is a boolean
  constant.  If so, the value is used, otherwise it is assumed to be a
  variable and it is dereferenced.

* The left and right hand arguments to `AND`_ and `OR`_ are independently
  tested to see if they are boolean constants.  If so, they are used as
  such, otherwise they are assumed to be variables and are dereferenced.

.. versionchanged:: 3.1
  To prevent ambiguity, potential variable or keyword names can be
  specified in a :ref:`Quoted Argument` or a :ref:`Bracket Argument`.
  A quoted or bracketed variable or keyword will be interpreted as a
  string and not dereferenced or interpreted.
  See policy :policy:`CMP0054`.

There is no automatic evaluation for environment or cache
:ref:`Variable References`.  Their values must be referenced as
``$ENV{<name>}`` or ``$CACHE{<name>}`` wherever the above-documented
condition syntax accepts ``<variable|string>``.

See also
^^^^^^^^

* :command:`else`
* :command:`elseif`
* :command:`endif`



/P/🚀 command/include.rst
=======================================


include
-------

Load and run CMake code from a file or module.

.. code-block:: cmake

  include(<file|module> [OPTIONAL] [RESULT_VARIABLE <var>]
                        [NO_POLICY_SCOPE])

Loads and runs CMake code from the file given.  Variable reads and
writes access the scope of the caller (dynamic scoping).  If ``OPTIONAL``
is present, then no error is raised if the file does not exist.  If
``RESULT_VARIABLE`` is given the variable ``<var>`` will be set to the
full filename which has been included or ``NOTFOUND`` if it failed.

If a module is specified instead of a file, the file with name
``<modulename>.cmake`` is searched first in :variable:`CMAKE_MODULE_PATH`,
then in the CMake module directory.  There is one exception to this: if
the file which calls ``include()`` is located itself in the CMake builtin
module directory, then first the CMake builtin module directory is searched and
:variable:`CMAKE_MODULE_PATH` afterwards.  See also policy :policy:`CMP0017`.

See the :command:`cmake_policy` command documentation for discussion of the
``NO_POLICY_SCOPE`` option.



/P/🚀 command/include_guard.rst
=============================================


include_guard
-------------

.. versionadded:: 3.10

Provides an include guard for the file currently being processed by CMake.

.. code-block:: cmake

  include_guard([DIRECTORY|GLOBAL])

Sets up an include guard for the current CMake file (see the
:variable:`CMAKE_CURRENT_LIST_FILE` variable documentation).

CMake will end its processing of the current file at the location of the
``include_guard`` command if the current file has already been
processed for the applicable scope (see below). This provides functionality
similar to the include guards commonly used in source headers or to the
``#pragma once`` directive. If the current file has been processed previously
for the applicable scope, the effect is as though :command:`return` had been
called. Do not call this command from inside a function being defined within
the current file.

An optional argument specifying the scope of the guard may be provided.
Possible values for the option are:

``DIRECTORY``
  The include guard applies within the current directory and below. The file
  will only be included once within this directory scope, but may be included
  again by other files outside of this directory (i.e. a parent directory or
  another directory not pulled in by :command:`add_subdirectory` or
  :command:`include` from the current file or its children).

``GLOBAL``
  The include guard applies globally to the whole build. The current file
  will only be included once regardless of the scope.

If no arguments given, ``include_guard`` has the same scope as a variable,
meaning that the include guard effect is isolated by the most recent
function scope or current directory if no inner function scopes exist.
In this case the command behavior is the same as:

.. code-block:: cmake

  if(__CURRENT_FILE_VAR__)
    return()
  endif()
  set(__CURRENT_FILE_VAR__ TRUE)



/P/🚀 command/list.rst
====================================


list
----

Operations on :ref:`semicolon-separated lists <CMake Language Lists>`.

Synopsis
^^^^^^^^

.. parsed-literal::

  `Reading`_
    list(`LENGTH`_ <list> <out-var>)
    list(`GET`_ <list> <element index> [<index> ...] <out-var>)
    list(`JOIN`_ <list> <glue> <out-var>)
    list(`SUBLIST`_ <list> <begin> <length> <out-var>)

  `Search`_
    list(`FIND`_ <list> <value> <out-var>)

  `Modification`_
    list(`APPEND`_ <list> [<element>...])
    list(`FILTER`_ <list> {INCLUDE | EXCLUDE} REGEX <regex>)
    list(`INSERT`_ <list> <index> [<element>...])
    list(`POP_BACK`_ <list> [<out-var>...])
    list(`POP_FRONT`_ <list> [<out-var>...])
    list(`PREPEND`_ <list> [<element>...])
    list(`REMOVE_ITEM`_ <list> <value>...)
    list(`REMOVE_AT`_ <list> <index>...)
    list(`REMOVE_DUPLICATES`_ <list>)
    list(`TRANSFORM`_ <list> <ACTION> [...])

  `Ordering`_
    list(`REVERSE`_ <list>)
    list(`SORT`_ <list> [...])

Introduction
^^^^^^^^^^^^

The list subcommands :cref:`APPEND`, :cref:`INSERT`, :cref:`FILTER`,
:cref:`PREPEND`, :cref:`POP_BACK`, :cref:`POP_FRONT`, :cref:`REMOVE_AT`,
:cref:`REMOVE_ITEM`, :cref:`REMOVE_DUPLICATES`, :cref:`REVERSE` and
:cref:`SORT` may create new values for the list within the current CMake
variable scope.  Similar to the :command:`set` command, the ``list`` command
creates new variable values in the current scope, even if the list itself is
actually defined in a parent scope.  To propagate the results of these
operations upwards, use :command:`set` with ``PARENT_SCOPE``,
:command:`set` with ``CACHE INTERNAL``, or some other means of value
propagation.

.. note::

  A list in cmake is a ``;`` separated group of strings.  To create a
  list, the :command:`set` command can be used.  For example,
  ``set(var a b c d e)`` creates a list with ``a;b;c;d;e``, and
  ``set(var "a b c d e")`` creates a string or a list with one item in it.
  (Note that macro arguments are not variables, and therefore cannot be used
  in ``LIST`` commands.)

  Individual elements may not contain an unequal number of ``[`` and ``]``
  characters, and may not end in a backslash (``\``).
  See :ref:`semicolon-separated lists <CMake Language Lists>` for details.

.. note::

  When specifying index values, if ``<element index>`` is 0 or greater, it
  is indexed from the beginning of the list, with 0 representing the
  first list element.  If ``<element index>`` is -1 or lesser, it is indexed
  from the end of the list, with -1 representing the last list element.
  Be careful when counting with negative indices: they do not start from
  0.  -0 is equivalent to 0, the first list element.

Reading
^^^^^^^

.. signature::
  list(LENGTH <list> <output variable>)

  Returns the list's length.

.. signature::
  list(GET <list> <element index> [<element index> ...] <output variable>)

  Returns the list of elements specified by indices from the list.

.. signature:: list(JOIN <list> <glue> <output variable>)

  .. versionadded:: 3.12

  Returns a string joining all list's elements using the glue string.
  To join multiple strings, which are not part of a list,
  use :command:`string(JOIN)`.

.. signature::
  list(SUBLIST <list> <begin> <length> <output variable>)

  .. versionadded:: 3.12

  Returns a sublist of the given list.
  If ``<length>`` is 0, an empty list will be returned.
  If ``<length>`` is -1 or the list is smaller than ``<begin>+<length>`` then
  the remaining elements of the list starting at ``<begin>`` will be returned.

Search
^^^^^^

.. signature::
  list(FIND <list> <value> <output variable>)

  Returns the index of the element specified in the list
  or ``-1`` if it wasn't found.

Modification
^^^^^^^^^^^^

.. signature::
  list(APPEND <list> [<element> ...])

  Appends elements to the list. If no variable named ``<list>`` exists in the
  current scope its value is treated as empty and the elements are appended to
  that empty list.

.. signature::
  list(FILTER <list> <INCLUDE|EXCLUDE> REGEX <regular_expression>)

.. versionadded:: 3.6

Includes or removes items from the list that match the mode's pattern.
In ``REGEX`` mode, items will be matched against the given regular expression.

For more information on regular expressions look under
:ref:`string(REGEX) <Regex Specification>`.

.. signature::
  list(INSERT <list> <element_index> <element> [<element> ...])

  Inserts elements to the list to the specified index. It is an
  error to specify an out-of-range index. Valid indexes are 0 to `N`
  where `N` is the length of the list, inclusive. An empty list
  has length 0. If no variable named ``<list>`` exists in the
  current scope its value is treated as empty and the elements are
  inserted in that empty list.

.. signature::
  list(POP_BACK <list> [<out-var>...])

  .. versionadded:: 3.15

  If no variable name is given, removes exactly one element. Otherwise,
  with `N` variable names provided, assign the last `N` elements' values
  to the given variables and then remove the last `N` values from
  ``<list>``.

.. signature::
  list(POP_FRONT <list> [<out-var>...])

  .. versionadded:: 3.15

  If no variable name is given, removes exactly one element. Otherwise,
  with `N` variable names provided, assign the first `N` elements' values
  to the given variables and then remove the first `N` values from
  ``<list>``.

.. signature::
  list(PREPEND <list> [<element> ...])

  .. versionadded:: 3.15

  Insert elements to the 0th position in the list. If no variable named
  ``<list>`` exists in the current scope its value is treated as empty and
  the elements are prepended to that empty list.

.. signature::
  list(REMOVE_ITEM <list> <value> [<value> ...])

  Removes all instances of the given items from the list.

.. signature::
  list(REMOVE_AT <list> <index> [<index> ...])

  Removes items at given indices from the list.

.. signature::
  list(REMOVE_DUPLICATES <list>)

  Removes duplicated items in the list. The relative order of items
  is preserved, but if duplicates are encountered,
  only the first instance is preserved.

.. signature::
  list(TRANSFORM <list> <ACTION> [<SELECTOR>]
       [OUTPUT_VARIABLE <output variable>])

  .. versionadded:: 3.12

  Transforms the list by applying an ``<ACTION>`` to all or, by specifying a
  ``<SELECTOR>``, to the selected elements of the list, storing the result
  in-place or in the specified output variable.

  .. note::

    The ``TRANSFORM`` sub-command does not change the number of elements in the
    list. If a ``<SELECTOR>`` is specified, only some elements will be changed,
    the other ones will remain the same as before the transformation.

  ``<ACTION>`` specifies the action to apply to the elements of the list.
  The actions have exactly the same semantics as sub-commands of the
  :command:`string` command.  ``<ACTION>`` must be one of the following:

    :command:`APPEND <string(APPEND)>`, :command:`PREPEND <string(PREPEND)>`
      Append, prepend specified value to each element of the list.

      .. signature::
        list(TRANSFORM <list> (APPEND|PREPEND) <value> ...)
        :target: TRANSFORM_APPEND

    :command:`TOLOWER <string(TOLOWER)>`, :command:`TOUPPER <string(TOUPPER)>`
      Convert each element of the list to lower, upper characters.

      .. signature::
        list(TRANSFORM <list> (TOLOWER|TOUPPER) ...)
        :target: TRANSFORM_TOLOWER

    :command:`STRIP <string(STRIP)>`
      Remove leading and trailing spaces from each element of the list.

      .. signature::
        list(TRANSFORM <list> STRIP ...)
        :target: TRANSFORM_STRIP

    :command:`GENEX_STRIP <string(GENEX_STRIP)>`
      Strip any
      :manual:`generator expressions <cmake-generator-expressions(7)>`
      from each element of the list.

      .. signature::
        list(TRANSFORM <list> GENEX_STRIP ...)
        :target: TRANSFORM_GENEX_STRIP

    :command:`REPLACE <string(REGEX REPLACE)>`:
      Match the regular expression as many times as possible and substitute
      the replacement expression for the match for each element of the list
      (same semantic as :command:`string(REGEX REPLACE)`).

      .. signature::
        list(TRANSFORM <list> REPLACE <regular_expression>
                                      <replace_expression> ...)
        :target: TRANSFORM_REPLACE

  ``<SELECTOR>`` determines which elements of the list will be transformed.
  Only one type of selector can be specified at a time.
  When given, ``<SELECTOR>`` must be one of the following:

    ``AT``
      Specify a list of indexes.

      .. code-block:: cmake

        list(TRANSFORM <list> <ACTION> AT <index> [<index> ...] ...)

    ``FOR``
      Specify a range with, optionally,
      an increment used to iterate over the range.

      .. code-block:: cmake

        list(TRANSFORM <list> <ACTION> FOR <start> <stop> [<step>] ...)

    ``REGEX``
      Specify a regular expression.
      Only elements matching the regular expression will be transformed.

      .. code-block:: cmake

        list(TRANSFORM <list> <ACTION> REGEX <regular_expression> ...)


Ordering
^^^^^^^^

.. signature::
  list(REVERSE <list>)

  Reverses the contents of the list in-place.

.. signature::
  list(SORT <list> [COMPARE <compare>] [CASE <case>] [ORDER <order>])

  Sorts the list in-place alphabetically.

  .. versionadded:: 3.13
    Added the ``COMPARE``, ``CASE``, and ``ORDER`` options.

  .. versionadded:: 3.18
    Added the ``COMPARE NATURAL`` option.

  Use the ``COMPARE`` keyword to select the comparison method for sorting.
  The ``<compare>`` option should be one of:

    ``STRING``
      Sorts a list of strings alphabetically.
      This is the default behavior if the ``COMPARE`` option is not given.

    ``FILE_BASENAME``
      Sorts a list of pathnames of files by their basenames.

    ``NATURAL``
      Sorts a list of strings using natural order
      (see ``strverscmp(3)`` manual), i.e. such that contiguous digits
      are compared as whole numbers.
      For example: the following list `10.0 1.1 2.1 8.0 2.0 3.1`
      will be sorted as `1.1 2.0 2.1 3.1 8.0 10.0` if the ``NATURAL``
      comparison is selected where it will be sorted as
      `1.1 10.0 2.0 2.1 3.1 8.0` with the ``STRING`` comparison.

  Use the ``CASE`` keyword to select a case sensitive or case insensitive
  sort mode.  The ``<case>`` option should be one of:

    ``SENSITIVE``
      List items are sorted in a case-sensitive manner.
      This is the default behavior if the ``CASE`` option is not given.

    ``INSENSITIVE``
      List items are sorted case insensitively.  The order of
      items which differ only by upper/lowercase is not specified.

  To control the sort order, the ``ORDER`` keyword can be given.
  The ``<order>`` option should be one of:

    ``ASCENDING``
      Sorts the list in ascending order.
      This is the default behavior when the ``ORDER`` option is not given.

    ``DESCENDING``
      Sorts the list in descending order.



/P/🚀 command/macro.rst
=====================================


macro
-----

Start recording a macro for later invocation as a command

.. code-block:: cmake

  macro(<name> [<arg1> ...])
    <commands>
  endmacro()

Defines a macro named ``<name>`` that takes arguments named
``<arg1>``, ... Commands listed after macro, but before the
matching :command:`endmacro()`, are not executed until the macro
is invoked.

Per legacy, the :command:`endmacro` command admits an optional
``<name>`` argument. If used, it must be a verbatim repeat of the
argument of the opening ``macro`` command.

See the :command:`cmake_policy()` command documentation for the behavior
of policies inside macros.

See the :ref:`Macro vs Function` section below for differences
between CMake macros and :command:`functions <function>`.

Invocation
^^^^^^^^^^

The macro invocation is case-insensitive. A macro defined as

.. code-block:: cmake

  macro(foo)
    <commands>
  endmacro()

can be invoked through any of

.. code-block:: cmake

  foo()
  Foo()
  FOO()
  cmake_language(CALL foo)

and so on. However, it is strongly recommended to stay with the
case chosen in the macro definition.  Typically macros use
all-lowercase names.

.. versionadded:: 3.18
  The :command:`cmake_language(CALL ...)` command can also be used to
  invoke the macro.

Arguments
^^^^^^^^^

When a macro is invoked, the commands recorded in the macro are
first modified by replacing formal parameters (``${arg1}``, ...)
with the arguments passed, and then invoked as normal commands.

In addition to referencing the formal parameters you can reference the
values ``${ARGC}`` which will be set to the number of arguments passed
into the function as well as ``${ARGV0}``, ``${ARGV1}``, ``${ARGV2}``,
...  which will have the actual values of the arguments passed in.
This facilitates creating macros with optional arguments.

Furthermore, ``${ARGV}`` holds the list of all arguments given to the
macro and ``${ARGN}`` holds the list of arguments past the last expected
argument.
Referencing to ``${ARGV#}`` arguments beyond ``${ARGC}`` have undefined
behavior. Checking that ``${ARGC}`` is greater than ``#`` is the only
way to ensure that ``${ARGV#}`` was passed to the function as an extra
argument.

.. _`Macro vs Function`:

Macro vs Function
^^^^^^^^^^^^^^^^^

The ``macro`` command is very similar to the :command:`function` command.
Nonetheless, there are a few important differences.

In a function, ``ARGN``, ``ARGC``, ``ARGV`` and ``ARGV0``, ``ARGV1``, ...
are true variables in the usual CMake sense.  In a macro, they are not,
they are string replacements much like the C preprocessor would do
with a macro.  This has a number of consequences, as explained in
the :ref:`Argument Caveats` section below.

Another difference between macros and functions is the control flow.
A function is executed by transferring control from the calling
statement to the function body.  A macro is executed as if the macro
body were pasted in place of the calling statement.  This has the
consequence that a :command:`return()` in a macro body does not
just terminate execution of the macro; rather, control is returned
from the scope of the macro call.  To avoid confusion, it is recommended
to avoid :command:`return()` in macros altogether.

Unlike a function, the :variable:`CMAKE_CURRENT_FUNCTION`,
:variable:`CMAKE_CURRENT_FUNCTION_LIST_DIR`,
:variable:`CMAKE_CURRENT_FUNCTION_LIST_FILE`,
:variable:`CMAKE_CURRENT_FUNCTION_LIST_LINE` variables are not
set for a macro.

.. _`Argument Caveats`:

Argument Caveats
^^^^^^^^^^^^^^^^

Since ``ARGN``, ``ARGC``, ``ARGV``, ``ARGV0`` etc. are not variables,
you will NOT be able to use commands like

.. code-block:: cmake

 if(ARGV1) # ARGV1 is not a variable
 if(DEFINED ARGV2) # ARGV2 is not a variable
 if(ARGC GREATER 2) # ARGC is not a variable
 foreach(loop_var IN LISTS ARGN) # ARGN is not a variable

In the first case, you can use ``if(${ARGV1})``.  In the second and
third case, the proper way to check if an optional variable was
passed to the macro is to use ``if(${ARGC} GREATER 2)``.  In the
last case, you can use ``foreach(loop_var ${ARGN})`` but this will
skip empty arguments.  If you need to include them, you can use

.. code-block:: cmake

 set(list_var "${ARGN}")
 foreach(loop_var IN LISTS list_var)

Note that if you have a variable with the same name in the scope from
which the macro is called, using unreferenced names will use the
existing variable instead of the arguments. For example:

.. code-block:: cmake

 macro(bar)
   foreach(arg IN LISTS ARGN)
     <commands>
   endforeach()
 endmacro()

 function(foo)
   bar(x y z)
 endfunction()

 foo(a b c)

Will loop over ``a;b;c`` and not over ``x;y;z`` as one might have expected.
If you want true CMake variables and/or better CMake scope control you
should look at the function command.

See Also
^^^^^^^^

* :command:`cmake_parse_arguments`
* :command:`endmacro`



/P/🚀 command/mark_as_advanced.rst
================================================


mark_as_advanced
----------------

Mark cmake cached variables as advanced.

.. code-block:: cmake

  mark_as_advanced([CLEAR|FORCE] <var1> ...)

Sets the advanced/non-advanced state of the named
cached variables.

An advanced variable will not be displayed in any
of the cmake GUIs unless the ``show advanced`` option is on.
In script mode, the advanced/non-advanced state has no effect.

If the keyword ``CLEAR`` is given
then advanced variables are changed back to unadvanced.
If the keyword ``FORCE`` is given
then the variables are made advanced.
If neither ``FORCE`` nor ``CLEAR`` is specified,
new values will be marked as advanced, but if a
variable already has an advanced/non-advanced state,
it will not be changed.

.. versionchanged:: 3.17
  Variables passed to this command which are not already in the cache
  are ignored. See policy :policy:`CMP0102`.



/P/🚀 command/math.rst
====================================


math
----

Evaluate a mathematical expression.

.. code-block:: cmake

  math(EXPR <variable> "<expression>" [OUTPUT_FORMAT <format>])

Evaluates a mathematical ``<expression>`` and sets ``<variable>`` to the
resulting value.  The result of the expression must be representable as a
64-bit signed integer. Floating point inputs are invalid e.g. ``1.1 * 10``.
Non-integer results e.g. ``3 / 2`` are truncated.

The mathematical expression must be given as a string (i.e. enclosed in
double quotation marks). An example is ``"5 * (10 + 13)"``.
Supported operators are ``+``, ``-``, ``*``, ``/``, ``%``, ``|``, ``&``,
``^``, ``~``, ``<<``, ``>>``, and ``(...)``; they have the same meaning
as in C code.

.. versionadded:: 3.13
  Hexadecimal numbers are recognized when prefixed with ``0x``, as in C code.

.. versionadded:: 3.13
  The result is formatted according to the option ``OUTPUT_FORMAT``,
  where ``<format>`` is one of

  ``HEXADECIMAL``
    Hexadecimal notation as in C code, i. e. starting with "0x".
  ``DECIMAL``
    Decimal notation. Which is also used if no ``OUTPUT_FORMAT`` option
    is specified.

For example

.. code-block:: cmake

  math(EXPR value "100 * 0xA" OUTPUT_FORMAT DECIMAL)      # value is set to "1000"
  math(EXPR value "100 * 0xA" OUTPUT_FORMAT HEXADECIMAL)  # value is set to "0x3e8"



/P/🚀 command/message.rst
=======================================


message
-------

Log a message.

Synopsis
^^^^^^^^

.. parsed-literal::

  `General messages`_
    message([<mode>] "message text" ...)

  `Reporting checks`_
    message(<checkState> "message text" ...)

  `Configure Log`_
    message(CONFIGURE_LOG <text>...)

General messages
^^^^^^^^^^^^^^^^

.. code-block:: cmake

  message([<mode>] "message text" ...)

Record the specified message text in the log.  If more than one message
string is given, they are concatenated into a single message with no
separator between the strings.

The optional ``<mode>`` keyword determines the type of message, which
influences the way the message is handled:

``FATAL_ERROR``
  CMake Error, stop processing and generation.

  The :manual:`cmake(1)` executable will return a non-zero
  :ref:`exit code <CMake Exit Code>`.

``SEND_ERROR``
  CMake Error, continue processing, but skip generation.

``WARNING``
  CMake Warning, continue processing.

``AUTHOR_WARNING``
  CMake Warning (dev), continue processing.

``DEPRECATION``
  CMake Deprecation Error or Warning if variable
  :variable:`CMAKE_ERROR_DEPRECATED` or :variable:`CMAKE_WARN_DEPRECATED`
  is enabled, respectively, else no message.

(none) or ``NOTICE``
  Important message printed to stderr to attract user's attention.

``STATUS``
  The main interesting messages that project users might be interested in.
  Ideally these should be concise, no more than a single line, but still
  informative.

``VERBOSE``
  Detailed informational messages intended for project users.  These messages
  should provide additional details that won't be of interest in most cases,
  but which may be useful to those building the project when they want deeper
  insight into what's happening.

``DEBUG``
  Detailed informational messages intended for developers working on the
  project itself as opposed to users who just want to build it.  These messages
  will not typically be of interest to other users building the project and
  will often be closely related to internal implementation details.

``TRACE``
  Fine-grained messages with very low-level implementation details.  Messages
  using this log level would normally only be temporary and would expect to be
  removed before releasing the project, packaging up the files, etc.

.. versionadded:: 3.15
  Added the ``NOTICE``, ``VERBOSE``, ``DEBUG``, and ``TRACE`` levels.

The CMake command-line tool displays ``STATUS`` to ``TRACE`` messages on stdout
with the message preceded by two hyphens and a space.  All other message types
are sent to stderr and are not prefixed with hyphens.  The
:manual:`CMake GUI <cmake-gui(1)>` displays all messages in its log area.
The :manual:`curses interface <ccmake(1)>` shows ``STATUS`` to ``TRACE``
messages one at a time on a status line and other messages in an
interactive pop-up box.  The :option:`--log-level <cmake --log-level>`
command-line option to each of these tools can be used to control which
messages will be shown.

.. versionadded:: 3.17
  To make a log level persist between CMake runs, the
  :variable:`CMAKE_MESSAGE_LOG_LEVEL` variable can be set instead.
  Note that the command line option takes precedence over the cache variable.

.. versionadded:: 3.16
  Messages of log levels ``NOTICE`` and below will have each line preceded
  by the content of the :variable:`CMAKE_MESSAGE_INDENT` variable (converted to
  a single string by concatenating its list items).  For ``STATUS`` to ``TRACE``
  messages, this indenting content will be inserted after the hyphens.

.. versionadded:: 3.17
  Messages of log levels ``NOTICE`` and below can also have each line preceded
  with context of the form ``[some.context.example]``.  The content between the
  square brackets is obtained by converting the :variable:`CMAKE_MESSAGE_CONTEXT`
  list variable to a dot-separated string.  The message context will always
  appear before any indenting content but after any automatically added leading
  hyphens. By default, message context is not shown, it has to be explicitly
  enabled by giving the :option:`cmake --log-context`
  command-line option or by setting the :variable:`CMAKE_MESSAGE_CONTEXT_SHOW`
  variable to true.  See the :variable:`CMAKE_MESSAGE_CONTEXT` documentation for
  usage examples.

CMake Warning and Error message text displays using a simple markup
language.  Non-indented text is formatted in line-wrapped paragraphs
delimited by newlines.  Indented text is considered pre-formatted.


Reporting checks
^^^^^^^^^^^^^^^^

.. versionadded:: 3.17

A common pattern in CMake output is a message indicating the start of some
sort of check, followed by another message reporting the result of that check.
For example:

.. code-block:: cmake

  message(STATUS "Looking for someheader.h")
  #... do the checks, set checkSuccess with the result
  if(checkSuccess)
    message(STATUS "Looking for someheader.h - found")
  else()
    message(STATUS "Looking for someheader.h - not found")
  endif()

This can be more robustly and conveniently expressed using the ``CHECK_...``
keyword form of the ``message()`` command:

.. code-block:: cmake

  message(<checkState> "message" ...)

where ``<checkState>`` must be one of the following:

  ``CHECK_START``
    Record a concise message about the check about to be performed.

  ``CHECK_PASS``
    Record a successful result for a check.

  ``CHECK_FAIL``
    Record an unsuccessful result for a check.

When recording a check result, the command repeats the message from the most
recently started check for which no result has yet been reported, then some
separator characters and then the message text provided after the
``CHECK_PASS`` or ``CHECK_FAIL`` keyword.  Check messages are always reported
at ``STATUS`` log level.

Checks may be nested and every ``CHECK_START`` should have exactly one
matching ``CHECK_PASS`` or ``CHECK_FAIL``.
The :variable:`CMAKE_MESSAGE_INDENT` variable can also be used to add
indenting to nested checks if desired.  For example:

.. code-block:: cmake

  message(CHECK_START "Finding my things")
  list(APPEND CMAKE_MESSAGE_INDENT "  ")
  unset(missingComponents)

  message(CHECK_START "Finding partA")
  # ... do check, assume we find A
  message(CHECK_PASS "found")

  message(CHECK_START "Finding partB")
  # ... do check, assume we don't find B
  list(APPEND missingComponents B)
  message(CHECK_FAIL "not found")

  list(POP_BACK CMAKE_MESSAGE_INDENT)
  if(missingComponents)
    message(CHECK_FAIL "missing components: ${missingComponents}")
  else()
    message(CHECK_PASS "all components found")
  endif()

Output from the above would appear something like the following::

  -- Finding my things
  --   Finding partA
  --   Finding partA - found
  --   Finding partB
  --   Finding partB - not found
  -- Finding my things - missing components: B

Configure Log
^^^^^^^^^^^^^

.. versionadded:: 3.26

.. code-block:: cmake

  message(CONFIGURE_LOG <text>...)

Record a :ref:`configure-log message event <message configure-log event>`
with the specified ``<text>``.  By convention, if the text contains more
than one line, the first line should be a summary of the event.

This mode is intended to record the details of a system inspection check
or other one-time operation guarded by a cache entry, but that is not
performed using :command:`try_compile` or :command:`try_run`, which
automatically log their details.  Projects should avoid calling it every
time CMake runs.  For example:

.. code-block:: cmake

  if (NOT DEFINED MY_CHECK_RESULT)
    # Print check summary in configure output.
    message(CHECK_START "My Check")

    # ... perform system inspection, e.g., with execute_process ...

    # Cache the result so we do not run the check again.
    set(MY_CHECK_RESULT "${MY_CHECK_RESULT}" CACHE INTERNAL "My Check")

    # Record the check details in the cmake-configure-log.
    message(CONFIGURE_LOG
      "My Check Result: ${MY_CHECK_RESULT}\n"
      "${details}"
    )

    # Print check result in configure output.
    if(MY_CHECK_RESULT)
      message(CHECK_PASS "passed")
    else()
      message(CHECK_FAIL "failed")
    endif()
  endif()

If no project is currently being configured, such as in
:ref:`cmake -P <Script Processing Mode>` script mode,
this command does nothing.

See Also
^^^^^^^^

* :command:`cmake_language(GET_MESSAGE_LOG_LEVEL)`



/P/🚀 command/option.rst
======================================


option
------

Provide a boolean option that the user can optionally select.

.. code-block:: cmake

  option(<variable> "<help_text>" [value])

If no initial ``<value>`` is provided, boolean ``OFF`` is the default value.
If ``<variable>`` is already set as a normal or cache variable,
then the command does nothing (see policy :policy:`CMP0077`).

For options that depend on the values of other options, see
the module help for :module:`CMakeDependentOption`.

In CMake project mode, a boolean cache variable is created with the option
value. In CMake script mode, a boolean variable is set with the option value.



/P/🚀 command/return.rst
======================================


return
------

Return from a file, directory or function.

.. code-block:: cmake

  return([PROPAGATE <var-name>...])

When this command is encountered in an included file (via :command:`include` or
:command:`find_package`), it causes processing of the current file to stop
and control is returned to the including file.  If it is encountered in a
file which is not included by another file, e.g. a ``CMakeLists.txt``,
deferred calls scheduled by :command:`cmake_language(DEFER)` are invoked and
control is returned to the parent directory if there is one.

If ``return()`` is called in a function, control is returned to the caller
of that function.  Note that a :command:`macro`, unlike a :command:`function`,
is expanded in place and therefore cannot handle ``return()``.

Policy :policy:`CMP0140` controls the behavior regarding the arguments of the
command.  All arguments are ignored unless that policy is set to ``NEW``.

``PROPAGATE``
  .. versionadded:: 3.25

  This option sets or unsets the specified variables in the parent directory or
  function caller scope. This is equivalent to :command:`set(PARENT_SCOPE)` or
  :command:`unset(PARENT_SCOPE)` commands, except for the way it interacts
  with the :command:`block` command, as described below.

  The ``PROPAGATE`` option can be very useful in conjunction with the
  :command:`block` command.  A ``return`` will propagate the
  specified variables through any enclosing block scopes created by the
  :command:`block` commands.  Inside a function, this ensures the variables
  are propagated to the function's caller, regardless of any blocks within
  the function.  If not inside a function, it ensures the variables are
  propagated to the parent file or directory scope. For example:

  .. code-block:: cmake
    :caption: CMakeLists.txt

    cmake_minimum_required(VERSION 3.25)
    project(example)

    set(var1 "top-value")

    block(SCOPE_FOR VARIABLES)
      add_subdirectory(subDir)
      # var1 has the value "block-nested"
    endblock()

    # var1 has the value "top-value"

  .. code-block:: cmake
    :caption: subDir/CMakeLists.txt

    function(multi_scopes result_var1 result_var2)
      block(SCOPE_FOR VARIABLES)
        # This would only propagate out of the immediate block, not to
        # the caller of the function.
        #set(${result_var1} "new-value" PARENT_SCOPE)
        #unset(${result_var2} PARENT_SCOPE)

        # This propagates the variables through the enclosing block and
        # out to the caller of the function.
        set(${result_var1} "new-value")
        unset(${result_var2})
        return(PROPAGATE ${result_var1} ${result_var2})
      endblock()
    endfunction()

    set(var1 "some-value")
    set(var2 "another-value")

    multi_scopes(var1 var2)
    # Now var1 will hold "new-value" and var2 will be unset

    block(SCOPE_FOR VARIABLES)
      # This return() will set var1 in the directory scope that included us
      # via add_subdirectory(). The surrounding block() here does not limit
      # propagation to the current file, but the block() in the parent
      # directory scope does prevent propagation going any further.
      set(var1 "block-nested")
      return(PROPAGATE var1)
    endblock()

See Also
^^^^^^^^

* :command:`block`
* :command:`function`



/P/🚀 command/separate_arguments.rst
==================================================


separate_arguments
------------------

Parse command-line arguments into a semicolon-separated list.

.. code-block:: cmake

  separate_arguments(<variable> <mode> [PROGRAM [SEPARATE_ARGS]] <args>)

Parses a space-separated string ``<args>`` into a list of items,
and stores this list in semicolon-separated standard form in ``<variable>``.

This function is intended for parsing command-line arguments.
The entire command line must be passed as one string in the
argument ``<args>``.

The exact parsing rules depend on the operating system.
They are specified by the ``<mode>`` argument which must
be one of the following keywords:

``UNIX_COMMAND``
  Arguments are separated by unquoted whitespace.
  Both single-quote and double-quote pairs are respected.
  A backslash escapes the next literal character (``\"`` is ``"``);
  there are no special escapes (``\n`` is just ``n``).

``WINDOWS_COMMAND``
  A Windows command-line is parsed using the same
  syntax the runtime library uses to construct argv at startup.  It
  separates arguments by whitespace that is not double-quoted.
  Backslashes are literal unless they precede double-quotes.  See the
  MSDN article `Parsing C Command-Line Arguments`_ for details.

``NATIVE_COMMAND``
  .. versionadded:: 3.9

  Proceeds as in ``WINDOWS_COMMAND`` mode if the host system is Windows.
  Otherwise proceeds as in ``UNIX_COMMAND`` mode.

``PROGRAM``
  .. versionadded:: 3.19

  The first item in ``<args>`` is assumed to be an executable and will be
  searched in the system search path or left as a full path. If not found,
  ``<variable>`` will be empty. Otherwise, ``<variable>`` is a list of 2
  elements:

    0. Absolute path of the program
    1. Any command-line arguments present in ``<args>`` as a string

  For example:

  .. code-block:: cmake

    separate_arguments (out UNIX_COMMAND PROGRAM "cc -c main.c")

  * First element of the list: ``/path/to/cc``
  * Second element of the list: ``" -c main.c"``

``SEPARATE_ARGS``
  When this sub-option of ``PROGRAM`` option is specified, command-line
  arguments will be split as well and stored in ``<variable>``.

  For example:

  .. code-block:: cmake

    separate_arguments (out UNIX_COMMAND PROGRAM SEPARATE_ARGS "cc -c main.c")

  The contents of ``out`` will be: ``/path/to/cc;-c;main.c``

.. _`Parsing C Command-Line Arguments`: https://learn.microsoft.com/en-us/cpp/c-language/parsing-c-command-line-arguments

.. code-block:: cmake

  separate_arguments(<var>)

Convert the value of ``<var>`` to a semi-colon separated list.  All
spaces are replaced with ';'.  This helps with generating command
lines.



/P/🚀 command/set.rst
===================================


set
---

Set a normal, cache, or environment variable to a given value.
See the :ref:`cmake-language(7) variables <CMake Language Variables>`
documentation for the scopes and interaction of normal variables
and cache entries.

Signatures of this command that specify a ``<value>...`` placeholder
expect zero or more arguments.  Multiple arguments will be joined as
a :ref:`semicolon-separated list <CMake Language Lists>` to form the
actual variable value to be set.

Set Normal Variable
^^^^^^^^^^^^^^^^^^^

.. signature::
  set(<variable> <value>... [PARENT_SCOPE])
  :target: normal

  Set or unset ``<variable>`` in the current function or directory scope:

  * If at least one ``<value>...`` is given, set the variable to that value.
  * If no value is given, unset the variable.  This is equivalent to
    :command:`unset(<variable>) <unset>`.

  If the ``PARENT_SCOPE`` option is given the variable will be set in
  the scope above the current scope.  Each new directory or :command:`function`
  command creates a new scope.  A scope can also be created with the
  :command:`block` command. ``set(PARENT_SCOPE)`` will set the value
  of a variable into the parent directory, calling function, or
  encompassing scope (whichever is applicable to the case at hand).
  The previous state of the variable's value stays the same in the
  current scope (e.g., if it was undefined before, it is still undefined
  and if it had a value, it is still that value).

  The :command:`block(PROPAGATE)` and :command:`return(PROPAGATE)` commands
  can be used as an alternate method to the :command:`set(PARENT_SCOPE)`
  and :command:`unset(PARENT_SCOPE)` commands to update the parent scope.

.. include:: UNSET_NOTE.txt

Set Cache Entry
^^^^^^^^^^^^^^^

.. signature::
  set(<variable> <value>... CACHE <type> <docstring> [FORCE])
  :target: CACHE

  Sets the given cache ``<variable>`` (cache entry).  Since cache entries
  are meant to provide user-settable values this does not overwrite
  existing cache entries by default.  Use the ``FORCE`` option to
  overwrite existing entries.

  The ``<type>`` must be specified as one of:

    ``BOOL``
      Boolean ``ON/OFF`` value.
      :manual:`cmake-gui(1)` offers a checkbox.

    ``FILEPATH``
      Path to a file on disk.
      :manual:`cmake-gui(1)` offers a file dialog.

    ``PATH``
      Path to a directory on disk.
      :manual:`cmake-gui(1)` offers a file dialog.

    ``STRING``
      A line of text.
      :manual:`cmake-gui(1)` offers a text field or a drop-down selection
      if the :prop_cache:`STRINGS` cache entry property is set.

    ``INTERNAL``
      A line of text.
      :manual:`cmake-gui(1)` does not show internal entries.
      They may be used to store variables persistently across runs.
      Use of this type implies ``FORCE``.

  The ``<docstring>`` must be specified as a line of text
  providing a quick summary of the option
  for presentation to :manual:`cmake-gui(1)` users.

  If the cache entry does not exist prior to the call or the ``FORCE``
  option is given then the cache entry will be set to the given value.

  .. note::

    The content of the cache variable will not be directly accessible
    if a normal variable of the same name already exists
    (see :ref:`rules of variable evaluation <CMake Language Variables>`).
    If policy :policy:`CMP0126` is set to ``OLD``, any normal variable
    binding in the current scope will be removed.

  It is possible for the cache entry to exist prior to the call but
  have no type set if it was created on the :manual:`cmake(1)` command
  line by a user through the :option:`-D\<var\>=\<value\> <cmake -D>` option
  without specifying a type.  In this case the ``set`` command will add the
  type.  Furthermore, if the ``<type>`` is ``PATH`` or ``FILEPATH``
  and the ``<value>`` provided on the command line is a relative path,
  then the ``set`` command will treat the path as relative to the
  current working directory and convert it to an absolute path.

Set Environment Variable
^^^^^^^^^^^^^^^^^^^^^^^^

.. signature::
  set(ENV{<variable>} [<value>])
  :target: ENV

  Sets an :manual:`Environment Variable <cmake-env-variables(7)>`
  to the given value.
  Subsequent calls of ``$ENV{<variable>}`` will return this new value.

  This command affects only the current CMake process, not the process
  from which CMake was called, nor the system environment at large,
  nor the environment of subsequent build or test processes.

  If no argument is given after ``ENV{<variable>}`` or if ``<value>`` is
  an empty string, then this command will clear any existing value of the
  environment variable.

  Arguments after ``<value>`` are ignored. If extra arguments are found,
  then an author warning is issued.

See Also
^^^^^^^^

* :command:`unset`



/P/🚀 command/set_directory_properties.rst
========================================================


set_directory_properties
------------------------

Set properties of the current directory and subdirectories.

.. code-block:: cmake

  set_directory_properties(PROPERTIES <prop1> <value1> [<prop2> <value2>] ...)

Sets properties of the current directory and its subdirectories in key-value
pairs.

See also the :command:`set_property(DIRECTORY)` command.

See :ref:`Directory Properties` for the list of properties known to CMake
and their individual documentation for the behavior of each property.

See Also
^^^^^^^^

* :command:`define_property`
* :command:`get_directory_property`
* the more general :command:`set_property` command



/P/🚀 command/set_property.rst
============================================


set_property
------------

Set a named property in a given scope.

.. code-block:: cmake

  set_property(<GLOBAL                      |
                DIRECTORY [<dir>]           |
                TARGET    [<target1> ...]   |
                SOURCE    [<src1> ...]
                          [DIRECTORY <dirs> ...]
                          [TARGET_DIRECTORY <targets> ...] |
                INSTALL   [<file1> ...]     |
                TEST      [<test1> ...]
                          [DIRECTORY <dir>] |
                CACHE     [<entry1> ...]    >
               [APPEND] [APPEND_STRING]
               PROPERTY <name> [<value1> ...])

Sets one property on zero or more objects of a scope.

The first argument determines the scope in which the property is set.
It must be one of the following:

``GLOBAL``
  Scope is unique and does not accept a name.

``DIRECTORY``
  Scope defaults to the current directory but other directories
  (already processed by CMake) may be named by full or relative path.
  Relative paths are treated as relative to the current source directory.
  See also the :command:`set_directory_properties` command.

  .. versionadded:: 3.19
    ``<dir>`` may reference a binary directory.

``TARGET``
  Scope may name zero or more existing targets.
  See also the :command:`set_target_properties` command.

  :ref:`Alias Targets` do not support setting target properties.

``SOURCE``
  Scope may name zero or more source files.  By default, source file properties
  are only visible to targets added in the same directory (``CMakeLists.txt``).

  .. versionadded:: 3.18
    Visibility can be set in other directory scopes using one or both of the
    following sub-options:

    ``DIRECTORY <dirs>...``
      The source file property will be set in each of the ``<dirs>``
      directories' scopes.  CMake must already know about
      each of these directories, either by having added them through a call to
      :command:`add_subdirectory` or it being the top level source directory.
      Relative paths are treated as relative to the current source directory.

      .. versionadded:: 3.19
        ``<dirs>`` may reference a binary directory.

    ``TARGET_DIRECTORY <targets>...``
      The source file property will be set in each of the directory scopes
      where any of the specified ``<targets>`` were created (the ``<targets>``
      must therefore already exist).

  See also the :command:`set_source_files_properties` command.

``INSTALL``
  .. versionadded:: 3.1

  Scope may name zero or more installed file paths.
  These are made available to CPack to influence deployment.

  Both the property key and value may use generator expressions.
  Specific properties may apply to installed files and/or directories.

  Path components have to be separated by forward slashes,
  must be normalized and are case sensitive.

  To reference the installation prefix itself with a relative path use ``.``.

  Currently installed file properties are only defined for
  the WIX generator where the given paths are relative
  to the installation prefix.

``TEST``
  Scope is limited to the directory the command is called in. It may name zero
  or more existing tests. See also command :command:`set_tests_properties`.

  Test property values may be specified using
  :manual:`generator expressions <cmake-generator-expressions(7)>`
  for tests created by the :command:`add_test(NAME)` signature.

  .. versionadded:: 3.28

    Visibility can be set in other directory scopes using the following sub-option:

    ``DIRECTORY <dir>``
      The test property will be set in the ``<dir>`` directory's scope. CMake must
      already know about this directory, either by having added it through a call
      to :command:`add_subdirectory` or it being the top level source directory.
      Relative paths are treated as relative to the current source directory.
      ``<dir>`` may reference a binary directory.

``CACHE``
  Scope must name zero or more existing cache entries.

The required ``PROPERTY`` option is immediately followed by the name of
the property to set.  Remaining arguments are used to compose the
property value in the form of a semicolon-separated list.

If the ``APPEND`` option is given the list is appended to any existing
property value (except that empty values are ignored and not appended).
If the ``APPEND_STRING`` option is given the string is
appended to any existing property value as string, i.e. it results in a
longer string and not a list of strings.  When using ``APPEND`` or
``APPEND_STRING`` with a property defined to support ``INHERITED``
behavior (see :command:`define_property`), no inheriting occurs when
finding the initial value to append to.  If the property is not already
directly set in the nominated scope, the command will behave as though
``APPEND`` or ``APPEND_STRING`` had not been given.

.. note::

  The :prop_sf:`GENERATED` source file property may be globally visible.
  See its documentation for details.

See Also
^^^^^^^^

* :command:`define_property`
* :command:`get_property`
* The :manual:`cmake-properties(7)` manual for a list of properties
  in each scope.



/P/🚀 command/site_name.rst
=========================================


site_name
---------

Set the given variable to the name of the computer.

.. code-block:: cmake

  site_name(variable)

On UNIX-like platforms, if the variable ``HOSTNAME`` is set, its value
will be executed as a command expected to print out the host name,
much like the ``hostname`` command-line tool.



/P/🚀 command/string.rst
======================================


string
------

String operations.

Synopsis
^^^^^^^^

.. parsed-literal::

  `Search and Replace`_
    string(`FIND`_ <string> <substring> <out-var> [...])
    string(`REPLACE`_ <match-string> <replace-string> <out-var> <input>...)
    string(`REGEX MATCH`_ <match-regex> <out-var> <input>...)
    string(`REGEX MATCHALL`_ <match-regex> <out-var> <input>...)
    string(`REGEX REPLACE`_ <match-regex> <replace-expr> <out-var> <input>...)

  `Manipulation`_
    string(`APPEND`_ <string-var> [<input>...])
    string(`PREPEND`_ <string-var> [<input>...])
    string(`CONCAT`_ <out-var> [<input>...])
    string(`JOIN`_ <glue> <out-var> [<input>...])
    string(`TOLOWER`_ <string> <out-var>)
    string(`TOUPPER`_ <string> <out-var>)
    string(`LENGTH <LENGTH_>`_ <string> <out-var>)
    string(`SUBSTRING`_ <string> <begin> <length> <out-var>)
    string(`STRIP`_ <string> <out-var>)
    string(`GENEX_STRIP`_ <string> <out-var>)
    string(`REPEAT`_ <string> <count> <out-var>)

  `Comparison`_
    string(`COMPARE`_ <op> <string1> <string2> <out-var>)

  `Hashing`_
    string(`\<HASH\>`_ <out-var> <input>)

  `Generation`_
    string(`ASCII`_ <number>... <out-var>)
    string(`HEX`_ <string> <out-var>)
    string(`CONFIGURE`_ <string> <out-var> [...])
    string(`MAKE_C_IDENTIFIER`_ <string> <out-var>)
    string(`RANDOM`_ [<option>...] <out-var>)
    string(`TIMESTAMP`_ <out-var> [<format string>] [UTC])
    string(`UUID`_ <out-var> ...)

  `JSON`_
    string(JSON <out-var> [ERROR_VARIABLE <error-var>]
           {`GET <JSON GET_>`_ | `TYPE <JSON TYPE_>`_ | `LENGTH <JSON LENGTH_>`_ | `REMOVE <JSON REMOVE_>`_}
           <json-string> <member|index> [<member|index> ...])
    string(JSON <out-var> [ERROR_VARIABLE <error-var>]
           `MEMBER <JSON MEMBER_>`_ <json-string>
           [<member|index> ...] <index>)
    string(JSON <out-var> [ERROR_VARIABLE <error-var>]
           `SET <JSON SET_>`_ <json-string>
           <member|index> [<member|index> ...] <value>)
    string(JSON <out-var> [ERROR_VARIABLE <error-var>]
           `EQUAL <JSON EQUAL_>`_ <json-string1> <json-string2>)

Search and Replace
^^^^^^^^^^^^^^^^^^

Search and Replace With Plain Strings
"""""""""""""""""""""""""""""""""""""

.. signature::
  string(FIND <string> <substring> <output_variable> [REVERSE])

  Return the position where the given ``<substring>`` was found in
  the supplied ``<string>``.  If the ``REVERSE`` flag was used, the command
  will search for the position of the last occurrence of the specified
  ``<substring>``.  If the ``<substring>`` is not found, a position of -1 is
  returned.

  The ``string(FIND)`` subcommand treats all strings as ASCII-only characters.
  The index stored in ``<output_variable>`` will also be counted in bytes,
  so strings containing multi-byte characters may lead to unexpected results.

.. signature::
  string(REPLACE <match_string>
         <replace_string> <output_variable>
         <input> [<input>...])

  Replace all occurrences of ``<match_string>`` in the ``<input>``
  with ``<replace_string>`` and store the result in the ``<output_variable>``.

Search and Replace With Regular Expressions
"""""""""""""""""""""""""""""""""""""""""""

.. signature::
  string(REGEX MATCH <regular_expression>
         <output_variable> <input> [<input>...])

  Match the ``<regular_expression>`` once and store the match in the
  ``<output_variable>``.
  All ``<input>`` arguments are concatenated before matching.
  Regular expressions are specified in the subsection just below.

.. signature::
  string(REGEX MATCHALL <regular_expression>
         <output_variable> <input> [<input>...])

  Match the ``<regular_expression>`` as many times as possible and store the
  matches in the ``<output_variable>`` as a list.
  All ``<input>`` arguments are concatenated before matching.

.. signature::
  string(REGEX REPLACE <regular_expression>
         <replacement_expression> <output_variable>
         <input> [<input>...])

  Match the ``<regular_expression>`` as many times as possible and substitute
  the ``<replacement_expression>`` for the match in the output.
  All ``<input>`` arguments are concatenated before matching.

  The ``<replacement_expression>`` may refer to parenthesis-delimited
  subexpressions of the match using ``\1``, ``\2``, ..., ``\9``.  Note that
  two backslashes (``\\1``) are required in CMake code to get a backslash
  through argument parsing.

.. _`Regex Specification`:

Regex Specification
"""""""""""""""""""

The following characters have special meaning in regular expressions:

``^``
  Matches at beginning of input
``$``
  Matches at end of input
``.``
  Matches any single character
``\<char>``
  Matches the single character specified by ``<char>``.  Use this to
  match special regex characters, e.g. ``\.`` for a literal ``.``
  or ``\\`` for a literal backslash ``\``.  Escaping a non-special
  character is unnecessary but allowed, e.g. ``\a`` matches ``a``.
``[ ]``
  Matches any character(s) inside the brackets
``[^ ]``
  Matches any character(s) not inside the brackets
``-``
  Inside brackets, specifies an inclusive range between
  characters on either side e.g. ``[a-f]`` is ``[abcdef]``
  To match a literal ``-`` using brackets, make it the first
  or the last character e.g. ``[+*/-]`` matches basic
  mathematical operators.
``*``
  Matches preceding pattern zero or more times
``+``
  Matches preceding pattern one or more times
``?``
  Matches preceding pattern zero or once only
``|``
  Matches a pattern on either side of the ``|``
``()``
  Saves a matched subexpression, which can be referenced
  in the ``REGEX REPLACE`` operation.

  .. versionadded:: 3.9
    All regular expression-related commands, including e.g.
    :command:`if(MATCHES)`, save subgroup matches in the variables
    :variable:`CMAKE_MATCH_<n>` for ``<n>`` 0..9.

``*``, ``+`` and ``?`` have higher precedence than concatenation.  ``|``
has lower precedence than concatenation.  This means that the regular
expression ``^ab+d$`` matches ``abbd`` but not ``ababd``, and the regular
expression ``^(ab|cd)$`` matches ``ab`` but not ``abd``.

CMake language :ref:`Escape Sequences` such as ``\t``, ``\r``, ``\n``,
and ``\\`` may be used to construct literal tabs, carriage returns,
newlines, and backslashes (respectively) to pass in a regex.  For example:

* The quoted argument ``"[ \t\r\n]"`` specifies a regex that matches
  any single whitespace character.
* The quoted argument ``"[/\\]"`` specifies a regex that matches
  a single forward slash ``/`` or backslash ``\``.
* The quoted argument ``"[A-Za-z0-9_]"`` specifies a regex that matches
  any single "word" character in the C locale.
* The quoted argument ``"\\(\\a\\+b\\)"`` specifies a regex that matches
  the exact string ``(a+b)``.  Each ``\\`` is parsed in a quoted argument
  as just ``\``, so the regex itself is actually ``\(\a\+\b\)``.  This
  can alternatively be specified in a :ref:`bracket argument` without
  having to escape the backslashes, e.g. ``[[\(\a\+\b\)]]``.

Manipulation
^^^^^^^^^^^^

.. signature::
  string(APPEND <string_variable> [<input>...])

  .. versionadded:: 3.4

  Append all the ``<input>`` arguments to the string.

.. signature::
  string(PREPEND <string_variable> [<input>...])

  .. versionadded:: 3.10

  Prepend all the ``<input>`` arguments to the string.

.. signature::
  string(CONCAT <output_variable> [<input>...])

  Concatenate all the ``<input>`` arguments together and store
  the result in the named ``<output_variable>``.

.. signature::
  string(JOIN <glue> <output_variable> [<input>...])

  .. versionadded:: 3.12

  Join all the ``<input>`` arguments together using the ``<glue>``
  string and store the result in the named ``<output_variable>``.

  To join a list's elements, prefer to use the ``JOIN`` operator
  from the :command:`list` command.  This allows for the elements to have
  special characters like ``;`` in them.

.. signature::
  string(TOLOWER <string> <output_variable>)

  Convert ``<string>`` to lower characters.

.. signature::
  string(TOUPPER <string> <output_variable>)

  Convert ``<string>`` to upper characters.

.. signature::
  string(LENGTH <string> <output_variable>)

  Store in an ``<output_variable>`` a given string's length in bytes.
  Note that this means if ``<string>`` contains multi-byte characters,
  the result stored in ``<output_variable>`` will *not* be
  the number of characters.

.. signature::
  string(SUBSTRING <string> <begin> <length> <output_variable>)

  Store in an ``<output_variable>`` a substring of a given ``<string>``.  If
  ``<length>`` is ``-1`` the remainder of the string starting at ``<begin>``
  will be returned.

  .. versionchanged:: 3.2
    If ``<string>`` is shorter than ``<length>``
    then the end of the string is used instead.
    Previous versions of CMake reported an error in this case.

  Both ``<begin>`` and ``<length>`` are counted in bytes, so care must
  be exercised if ``<string>`` could contain multi-byte characters.

.. signature::
  string(STRIP <string> <output_variable>)

  Store in an ``<output_variable>`` a substring of a given ``<string>``
  with leading and trailing spaces removed.

.. signature::
  string(GENEX_STRIP <string> <output_variable>)

  .. versionadded:: 3.1

  Strip any :manual:`generator expressions <cmake-generator-expressions(7)>`
  from the input ``<string>`` and store the result
  in the ``<output_variable>``.

.. signature::
  string(REPEAT <string> <count> <output_variable>)

  .. versionadded:: 3.15

  Produce the output string as the input ``<string>``
  repeated ``<count>`` times.

Comparison
^^^^^^^^^^

.. _COMPARE:

.. signature::
  string(COMPARE LESS <string1> <string2> <output_variable>)
  string(COMPARE GREATER <string1> <string2> <output_variable>)
  string(COMPARE EQUAL <string1> <string2> <output_variable>)
  string(COMPARE NOTEQUAL <string1> <string2> <output_variable>)
  string(COMPARE LESS_EQUAL <string1> <string2> <output_variable>)
  string(COMPARE GREATER_EQUAL <string1> <string2> <output_variable>)

  Compare the strings and store true or false in the ``<output_variable>``.

  .. versionadded:: 3.7
    Added the ``LESS_EQUAL`` and ``GREATER_EQUAL`` options.

.. _`Supported Hash Algorithms`:

Hashing
^^^^^^^

.. signature::
  string(<HASH> <output_variable> <input>)
  :target: <HASH>

  Compute a cryptographic hash of the ``<input>`` string.
  The supported ``<HASH>`` algorithm names are:

  ``MD5``
    Message-Digest Algorithm 5, RFC 1321.
  ``SHA1``
    US Secure Hash Algorithm 1, RFC 3174.
  ``SHA224``
    US Secure Hash Algorithms, RFC 4634.
  ``SHA256``
    US Secure Hash Algorithms, RFC 4634.
  ``SHA384``
    US Secure Hash Algorithms, RFC 4634.
  ``SHA512``
    US Secure Hash Algorithms, RFC 4634.
  ``SHA3_224``
    Keccak SHA-3.
  ``SHA3_256``
    Keccak SHA-3.
  ``SHA3_384``
    Keccak SHA-3.
  ``SHA3_512``
    Keccak SHA-3.

  .. versionadded:: 3.8
    Added the ``SHA3_*`` hash algorithms.

Generation
^^^^^^^^^^

.. signature::
  string(ASCII <number> [<number> ...] <output_variable>)

  Convert all numbers into corresponding ASCII characters.

.. signature::
  string(HEX <string> <output_variable>)

  .. versionadded:: 3.18

  Convert each byte in the input ``<string>`` to its hexadecimal representation
  and store the concatenated hex digits in the ``<output_variable>``.
  Letters in the output (``a`` through ``f``) are in lowercase.

.. signature::
  string(CONFIGURE <string> <output_variable>
         [@ONLY] [ESCAPE_QUOTES])

  Transform a ``<string>`` like :command:`configure_file` transforms a file.

.. signature::
  string(MAKE_C_IDENTIFIER <string> <output_variable>)

  Convert each non-alphanumeric character in the input ``<string>`` to an
  underscore and store the result in the ``<output_variable>``.  If the first
  character of the ``<string>`` is a digit, an underscore will also be
  prepended to the result.

.. signature::
  string(RANDOM [LENGTH <length>] [ALPHABET <alphabet>]
         [RANDOM_SEED <seed>] <output_variable>)

  Return a random string of given ``<length>`` consisting of
  characters from the given ``<alphabet>``.  Default length is 5 characters
  and default alphabet is all numbers and upper and lower case letters.
  If an integer ``RANDOM_SEED`` is given, its value will be used to seed the
  random number generator.

.. signature::
  string(TIMESTAMP <output_variable> [<format_string>] [UTC])

  Write a string representation of the current date
  and/or time to the ``<output_variable>``.

  If the command is unable to obtain a timestamp, the ``<output_variable>``
  will be set to the empty string ``""``.

  The optional ``UTC`` flag requests the current date/time representation to
  be in Coordinated Universal Time (UTC) rather than local time.

  The optional ``<format_string>`` may contain the following format
  specifiers:

  ``%%``
    .. versionadded:: 3.8

    A literal percent sign (%).

  ``%d``
    The day of the current month (01-31).

  ``%H``
    The hour on a 24-hour clock (00-23).

  ``%I``
    The hour on a 12-hour clock (01-12).

  ``%j``
    The day of the current year (001-366).

  ``%m``
    The month of the current year (01-12).

  ``%b``
    .. versionadded:: 3.7

    Abbreviated month name (e.g. Oct).

  ``%B``
    .. versionadded:: 3.10

    Full month name (e.g. October).

  ``%M``
    The minute of the current hour (00-59).

  ``%s``
    .. versionadded:: 3.6

    Seconds since midnight (UTC) 1-Jan-1970 (UNIX time).

  ``%S``
    The second of the current minute.  60 represents a leap second. (00-60)

  ``%f``
    .. versionadded:: 3.23

    The microsecond of the current second (000000-999999).

  ``%U``
    The week number of the current year (00-53).

  ``%V``
    .. versionadded:: 3.22

    The ISO 8601 week number of the current year (01-53).

  ``%w``
    The day of the current week. 0 is Sunday. (0-6)

  ``%a``
    .. versionadded:: 3.7

    Abbreviated weekday name (e.g. Fri).

  ``%A``
    .. versionadded:: 3.10

    Full weekday name (e.g. Friday).

  ``%y``
    The last two digits of the current year (00-99).

  ``%Y``
    The current year.

  ``%z``
    .. versionadded:: 3.26

    The offset of the time zone from UTC, in hours and minutes,
    with format ``+hhmm`` or ``-hhmm``.

  ``%Z``
    .. versionadded:: 3.26

    The time zone name.

  Unknown format specifiers will be ignored and copied to the output
  as-is.

  If no explicit ``<format_string>`` is given, it will default to:

  ::

    %Y-%m-%dT%H:%M:%S    for local time.
    %Y-%m-%dT%H:%M:%SZ   for UTC.

  .. versionadded:: 3.8
    If the ``SOURCE_DATE_EPOCH`` environment variable is set,
    its value will be used instead of the current time.
    See https://reproducible-builds.org/specs/source-date-epoch/ for details.

.. signature::
  string(UUID <output_variable> NAMESPACE <namespace> NAME <name>
         TYPE <MD5|SHA1> [UPPER])

  .. versionadded:: 3.1

  Create a universally unique identifier (aka GUID) as per RFC4122
  based on the hash of the combined values of ``<namespace>``
  (which itself has to be a valid UUID) and ``<name>``.
  The hash algorithm can be either ``MD5`` (Version 3 UUID) or
  ``SHA1`` (Version 5 UUID).
  A UUID has the format ``xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx``
  where each ``x`` represents a lower case hexadecimal character.
  Where required, an uppercase representation can be requested
  with the optional ``UPPER`` flag.

.. _JSON:

JSON
^^^^

.. versionadded:: 3.19

Functionality for querying a JSON string.

.. note::
  In each of the following JSON-related subcommands, if the optional
  ``ERROR_VARIABLE`` argument is given, errors will be reported in
  ``<error-variable>`` and the ``<out-var>`` will be set to
  ``<member|index>-[<member|index>...]-NOTFOUND`` with the path elements
  up to the point where the error occurred, or just ``NOTFOUND`` if there
  is no relevant path.  If an error occurs but the ``ERROR_VARIABLE``
  option is not present, a fatal error message is generated.  If no error
  occurs, the ``<error-variable>`` will be set to ``NOTFOUND``.

.. signature::
  string(JSON <out-var> [ERROR_VARIABLE <error-variable>]
         GET <json-string> <member|index> [<member|index> ...])
  :target: JSON GET

  Get an element from ``<json-string>`` at the location given
  by the list of ``<member|index>`` arguments.
  Array and object elements will be returned as a JSON string.
  Boolean elements will be returned as ``ON`` or ``OFF``.
  Null elements will be returned as an empty string.
  Number and string types will be returned as strings.

.. signature::
  string(JSON <out-var> [ERROR_VARIABLE <error-variable>]
         TYPE <json-string> <member|index> [<member|index> ...])
  :target: JSON TYPE

  Get the type of an element in ``<json-string>`` at the location
  given by the list of ``<member|index>`` arguments. The ``<out-var>``
  will be set to one of ``NULL``, ``NUMBER``, ``STRING``, ``BOOLEAN``,
  ``ARRAY``, or ``OBJECT``.

.. signature::
  string(JSON <out-var> [ERROR_VARIABLE <error-var>]
         MEMBER <json-string>
         [<member|index> ...] <index>)
  :target: JSON MEMBER

  Get the name of the ``<index>``-th member in ``<json-string>``
  at the location given by the list of ``<member|index>`` arguments.
  Requires an element of object type.

.. signature::
  string(JSON <out-var> [ERROR_VARIABLE <error-variable>]
         LENGTH <json-string> [<member|index> ...])
  :target: JSON LENGTH

  Get the length of an element in ``<json-string>`` at the location
  given by the list of ``<member|index>`` arguments.
  Requires an element of array or object type.

.. signature::
  string(JSON <out-var> [ERROR_VARIABLE <error-variable>]
         REMOVE <json-string> <member|index> [<member|index> ...])
  :target: JSON REMOVE

  Remove an element from ``<json-string>`` at the location
  given by the list of ``<member|index>`` arguments. The JSON string
  without the removed element will be stored in ``<out-var>``.

.. signature::
  string(JSON <out-var> [ERROR_VARIABLE <error-variable>]
         SET <json-string> <member|index> [<member|index> ...] <value>)
  :target: JSON SET

  Set an element in ``<json-string>`` at the location
  given by the list of ``<member|index>`` arguments to ``<value>``.
  The contents of ``<value>`` should be valid JSON.
  If ``<json-string>`` is an array, ``<value>`` can be appended to the end of
  the array by using a number greater or equal to the array length as the
  ``<member|index>`` argument.

.. signature::
  string(JSON <out-var> [ERROR_VARIABLE <error-var>]
         EQUAL <json-string1> <json-string2>)
  :target: JSON EQUAL

  Compare the two JSON objects given by ``<json-string1>``
  and ``<json-string2>`` for equality.  The contents of ``<json-string1>``
  and ``<json-string2>`` should be valid JSON.  The ``<out-var>``
  will be set to a true value if the JSON objects are considered equal,
  or a false value otherwise.



/P/🚀 command/unset.rst
=====================================


unset
-----

Unset a variable, cache variable, or environment variable.

Unset Normal Variable or Cache Entry
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cmake

  unset(<variable> [CACHE | PARENT_SCOPE])

Removes a normal variable from the current scope, causing it
to become undefined.  If ``CACHE`` is present, then a cache variable
is removed instead of a normal variable.

If ``PARENT_SCOPE`` is present then the variable is removed from the scope
above the current scope.  See the same option in the :command:`set` command
for further details.

.. include:: UNSET_NOTE.txt

Unset Environment Variable
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cmake

  unset(ENV{<variable>})

Removes ``<variable>`` from the currently available
:manual:`Environment Variables <cmake-env-variables(7)>`.
Subsequent calls of ``$ENV{<variable>}`` will return the empty string.

This command affects only the current CMake process, not the process
from which CMake was called, nor the system environment at large,
nor the environment of subsequent build or test processes.

See Also
^^^^^^^^

* :command:`set`



/P/🚀 command/variable_watch.rst
==============================================


variable_watch
--------------

Watch the CMake variable for change.

.. code-block:: cmake

  variable_watch(<variable> [<command>])

If the specified ``<variable>`` changes and no ``<command>`` is given,
a message will be printed to inform about the change.

If ``<command>`` is given, this command will be executed instead.
The command will receive the following arguments:
``COMMAND(<variable> <access> <value> <current_list_file> <stack>)``

``<variable>``
 Name of the variable being accessed.

``<access>``
 One of ``READ_ACCESS``, ``UNKNOWN_READ_ACCESS``, ``MODIFIED_ACCESS``,
 ``UNKNOWN_MODIFIED_ACCESS``, or ``REMOVED_ACCESS``.  The ``UNKNOWN_``
 values are only used when the variable has never been set.  Once set,
 they are never used again during the same CMake run, even if the
 variable is later unset.

``<value>``
 The value of the variable.  On a modification, this is the new
 (modified) value of the variable.  On removal, the value is empty.

``<current_list_file>``
 Full path to the file doing the access.

``<stack>``
 List of absolute paths of all files currently on the stack of file
 inclusion, with the bottom-most file first and the currently
 processed file (that is, ``current_list_file``) last.

Note that for some accesses such as :command:`list(APPEND)`, the watcher
is executed twice, first with a read access and then with a write one.
Also note that an :command:`if(DEFINED)` query on the variable does not
register as an access and the watcher is not executed.

Only non-cache variables can be watched using this command.  Access to
cache variables is never watched.  However, the existence of a cache
variable ``var`` causes accesses to the non-cache variable ``var`` to
not use the ``UNKNOWN_`` prefix, even if a non-cache variable ``var``
has never existed.



/P/🚀 command/while.rst
=====================================


while
-----

Evaluate a group of commands while a condition is true

.. code-block:: cmake

  while(<condition>)
    <commands>
  endwhile()

All commands between while and the matching :command:`endwhile` are recorded
without being invoked.  Once the :command:`endwhile` is evaluated, the
recorded list of commands is invoked as long as the ``<condition>`` is true.

The ``<condition>`` has the same syntax and is evaluated using the same logic
as described at length for the :command:`if` command.

The commands :command:`break` and :command:`continue` provide means to
escape from the normal control flow.

Per legacy, the :command:`endwhile` command admits
an optional ``<condition>`` argument.
If used, it must be a verbatim repeat of the argument of the opening
``while`` command.

See Also
^^^^^^^^

* :command:`break`
* :command:`continue`
* :command:`foreach`
* :command:`endwhile`



/P/🚀 command/add_compile_definitions.rst
=======================================================


add_compile_definitions
-----------------------

.. versionadded:: 3.12

Add preprocessor definitions to the compilation of source files.

.. code-block:: cmake

  add_compile_definitions(<definition> ...)

Adds preprocessor definitions to the compiler command line.

The preprocessor definitions are added to the :prop_dir:`COMPILE_DEFINITIONS`
directory property for the current ``CMakeLists`` file. They are also added to
the :prop_tgt:`COMPILE_DEFINITIONS` target property for each target in the
current ``CMakeLists`` file.

Definitions are specified using the syntax ``VAR`` or ``VAR=value``.
Function-style definitions are not supported. CMake will automatically
escape the value correctly for the native build system (note that CMake
language syntax may require escapes to specify some values).

.. versionadded:: 3.26
  Any leading ``-D`` on an item will be removed.

.. |command_name| replace:: ``add_compile_definitions``
.. include:: GENEX_NOTE.txt

See Also
^^^^^^^^

* The command :command:`target_compile_definitions` adds target-specific definitions.



/P/🚀 command/add_compile_options.rst
===================================================


add_compile_options
-------------------

Add options to the compilation of source files.

.. code-block:: cmake

  add_compile_options(<option> ...)

Adds options to the :prop_dir:`COMPILE_OPTIONS` directory property.
These options are used when compiling targets from the current
directory and below.

.. note::

  These options are not used when linking.
  See the :command:`add_link_options` command for that.

Arguments
^^^^^^^^^

.. |command_name| replace:: ``add_compile_options``
.. include:: GENEX_NOTE.txt

.. include:: OPTIONS_SHELL.txt

Example
^^^^^^^

Since different compilers support different options, a typical use of
this command is in a compiler-specific conditional clause:

.. code-block:: cmake

  if (MSVC)
      # warning level 4
      add_compile_options(/W4)
  else()
      # additional warnings
      add_compile_options(-Wall -Wextra -Wpedantic)
  endif()

To set per-language options, use the :genex:`$<COMPILE_LANGUAGE>`
or :genex:`$<COMPILE_LANGUAGE:languages>` generator expressions.

See Also
^^^^^^^^

* This command can be used to add any options. However, for
  adding preprocessor definitions and include directories it is recommended
  to use the more specific commands :command:`add_compile_definitions`
  and :command:`include_directories`.

* The command :command:`target_compile_options` adds target-specific options.

* This command adds compile options for all languages.
  Use the :genex:`COMPILE_LANGUAGE` generator expression to specify
  per-language compile options.

* The source file property :prop_sf:`COMPILE_OPTIONS` adds options to one
  source file.

* :command:`add_link_options` adds options for linking.

* :variable:`CMAKE_<LANG>_FLAGS` and :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>`
  add language-wide flags passed to all invocations of the compiler.
  This includes invocations that drive compiling and those that drive linking.



/P/🚀 command/add_custom_command.rst
==================================================


add_custom_command
------------------

Add a custom build rule to the generated build system.

There are two main signatures for ``add_custom_command``.

Generating Files
^^^^^^^^^^^^^^^^

The first signature is for adding a custom command to produce an output:

.. code-block:: cmake

  add_custom_command(OUTPUT output1 [output2 ...]
                     COMMAND command1 [ARGS] [args1...]
                     [COMMAND command2 [ARGS] [args2...] ...]
                     [MAIN_DEPENDENCY depend]
                     [DEPENDS [depends...]]
                     [BYPRODUCTS [files...]]
                     [IMPLICIT_DEPENDS <lang1> depend1
                                      [<lang2> depend2] ...]
                     [WORKING_DIRECTORY dir]
                     [COMMENT comment]
                     [DEPFILE depfile]
                     [JOB_POOL job_pool]
                     [JOB_SERVER_AWARE <bool>]
                     [VERBATIM] [APPEND] [USES_TERMINAL]
                     [COMMAND_EXPAND_LISTS]
                     [DEPENDS_EXPLICIT_ONLY])

This defines a command to generate specified ``OUTPUT`` file(s).
A target created in the same directory (``CMakeLists.txt`` file)
that specifies any output of the custom command as a source file
is given a rule to generate the file using the command at build time.

Do not list the output in more than one independent target that
may build in parallel or the instances of the rule may conflict.
Instead, use the :command:`add_custom_target` command to drive the
command and make the other targets depend on that one.  See the
`Example: Generating Files for Multiple Targets`_ below.

The options are:

``APPEND``
  Append the ``COMMAND`` and ``DEPENDS`` option values to the custom
  command for the first output specified.  There must have already
  been a previous call to this command with the same output.

  If the previous call specified the output via a generator expression,
  the output specified by the current call must match in at least one
  configuration after evaluating generator expressions.  In this case,
  the appended commands and dependencies apply to all configurations.

  The ``COMMENT``, ``MAIN_DEPENDENCY``, and ``WORKING_DIRECTORY``
  options are currently ignored when APPEND is given, but may be
  used in the future.

``BYPRODUCTS``
  .. versionadded:: 3.2

  Specify the files the command is expected to produce but whose
  modification time may or may not be newer than the dependencies.
  If a byproduct name is a relative path it will be interpreted
  relative to the build tree directory corresponding to the
  current source directory.
  Each byproduct file will be marked with the :prop_sf:`GENERATED`
  source file property automatically.

  *See policy* :policy:`CMP0058` *for the motivation behind this feature.*

  Explicit specification of byproducts is supported by the
  :generator:`Ninja` generator to tell the ``ninja`` build tool
  how to regenerate byproducts when they are missing.  It is
  also useful when other build rules (e.g. custom commands)
  depend on the byproducts.  Ninja requires a build rule for any
  generated file on which another rule depends even if there are
  order-only dependencies to ensure the byproducts will be
  available before their dependents build.

  The :ref:`Makefile Generators` will remove ``BYPRODUCTS`` and other
  :prop_sf:`GENERATED` files during ``make clean``.

  .. versionadded:: 3.20
    Arguments to ``BYPRODUCTS`` may use a restricted set of
    :manual:`generator expressions <cmake-generator-expressions(7)>`.
    :ref:`Target-dependent expressions <Target-Dependent Queries>` are not
    permitted.

  .. versionchanged:: 3.28
    In targets using :ref:`file sets`, custom command byproducts are now
    considered private unless they are listed in a non-private file set.
    See policy :policy:`CMP0154`.

``COMMAND``
  Specify the command-line(s) to execute at build time.
  If more than one ``COMMAND`` is specified they will be executed in order,
  but *not* necessarily composed into a stateful shell or batch script.
  (To run a full script, use the :command:`configure_file` command or the
  :command:`file(GENERATE)` command to create it, and then specify
  a ``COMMAND`` to launch it.)
  The optional ``ARGS`` argument is for backward compatibility and
  will be ignored.

  If ``COMMAND`` specifies an executable target name (created by the
  :command:`add_executable` command), it will automatically be replaced
  by the location of the executable created at build time if either of
  the following is true:

  * The target is not being cross-compiled (i.e. the
    :variable:`CMAKE_CROSSCOMPILING` variable is not set to true).
  * .. versionadded:: 3.6
      The target is being cross-compiled and an emulator is provided (i.e.
      its :prop_tgt:`CROSSCOMPILING_EMULATOR` target property is set).
      In this case, the contents of :prop_tgt:`CROSSCOMPILING_EMULATOR` will be
      prepended to the command before the location of the target executable.

  If neither of the above conditions are met, it is assumed that the
  command name is a program to be found on the ``PATH`` at build time.

  Arguments to ``COMMAND`` may use
  :manual:`generator expressions <cmake-generator-expressions(7)>`.
  Use the :genex:`TARGET_FILE` generator expression to refer to the location
  of a target later in the command line (i.e. as a command argument rather
  than as the command to execute).

  Whenever one of the following target based generator expressions are used as
  a command to execute or is mentioned in a command argument, a target-level
  dependency will be added automatically so that the mentioned target will be
  built before any target using this custom command
  (see policy :policy:`CMP0112`).

    * ``TARGET_FILE``
    * ``TARGET_LINKER_FILE``
    * ``TARGET_SONAME_FILE``
    * ``TARGET_PDB_FILE``

  This target-level dependency does NOT add a file-level dependency that would
  cause the custom command to re-run whenever the executable is recompiled.
  List target names with the ``DEPENDS`` option to add such file-level
  dependencies.


``COMMENT``
  Display the given message before the commands are executed at
  build time.

  .. versionadded:: 3.26
    Arguments to ``COMMENT`` may use
    :manual:`generator expressions <cmake-generator-expressions(7)>`.

``DEPENDS``
  Specify files on which the command depends.  Each argument is converted
  to a dependency as follows:

  1. If the argument is the name of a target (created by the
     :command:`add_custom_target`, :command:`add_executable`, or
     :command:`add_library` command) a target-level dependency is
     created to make sure the target is built before any target
     using this custom command.  Additionally, if the target is an
     executable or library, a file-level dependency is created to
     cause the custom command to re-run whenever the target is
     recompiled.

  2. If the argument is an absolute path, a file-level dependency
     is created on that path.

  3. If the argument is the name of a source file that has been
     added to a target or on which a source file property has been set,
     a file-level dependency is created on that source file.

  4. If the argument is a relative path and it exists in the current
     source directory, a file-level dependency is created on that
     file in the current source directory.

  5. Otherwise, a file-level dependency is created on that path relative
     to the current binary directory.

  If any dependency is an ``OUTPUT`` of another custom command in the same
  directory (``CMakeLists.txt`` file), CMake automatically brings the other
  custom command into the target in which this command is built.

  .. versionadded:: 3.16
    A target-level dependency is added if any dependency is listed as
    ``BYPRODUCTS`` of a target or any of its build events in the same
    directory to ensure the byproducts will be available.

  If ``DEPENDS`` is not specified, the command will run whenever
  the ``OUTPUT`` is missing; if the command does not actually
  create the ``OUTPUT``, the rule will always run.

  .. versionadded:: 3.1
    Arguments to ``DEPENDS`` may use
    :manual:`generator expressions <cmake-generator-expressions(7)>`.

``COMMAND_EXPAND_LISTS``
  .. versionadded:: 3.8

  Lists in ``COMMAND`` arguments will be expanded, including those
  created with
  :manual:`generator expressions <cmake-generator-expressions(7)>`,
  allowing ``COMMAND`` arguments such as
  ``${CC} "-I$<JOIN:$<TARGET_PROPERTY:foo,INCLUDE_DIRECTORIES>,;-I>" foo.cc``
  to be properly expanded.

``IMPLICIT_DEPENDS``
  Request scanning of implicit dependencies of an input file.
  The language given specifies the programming language whose
  corresponding dependency scanner should be used.
  Currently only ``C`` and ``CXX`` language scanners are supported.
  The language has to be specified for every file in the
  ``IMPLICIT_DEPENDS`` list.  Dependencies discovered from the
  scanning are added to those of the custom command at build time.
  Note that the ``IMPLICIT_DEPENDS`` option is currently supported
  only for Makefile generators and will be ignored by other generators.

  .. note::

    This option cannot be specified at the same time as ``DEPFILE`` option.

``JOB_POOL``
  .. versionadded:: 3.15

  Specify a :prop_gbl:`pool <JOB_POOLS>` for the :generator:`Ninja`
  generator. Incompatible with ``USES_TERMINAL``, which implies
  the ``console`` pool.
  Using a pool that is not defined by :prop_gbl:`JOB_POOLS` causes
  an error by ninja at build time.

``JOB_SERVER_AWARE``
  .. versionadded:: 3.28

  Specify that the command is GNU Make job server aware.

  For the :generator:`Unix Makefiles`, :generator:`MSYS Makefiles`, and
  :generator:`MinGW Makefiles` generators this will add the ``+`` prefix to the
  recipe line. See the `GNU Make Documentation`_ for more information.

  This option is silently ignored by other generators.

.. _`GNU Make Documentation`: https://www.gnu.org/software/make/manual/html_node/MAKE-Variable.html

``MAIN_DEPENDENCY``
  Specify the primary input source file to the command.  This is
  treated just like any value given to the ``DEPENDS`` option
  but also suggests to Visual Studio generators where to hang
  the custom command. Each source file may have at most one command
  specifying it as its main dependency. A compile command (i.e. for a
  library or an executable) counts as an implicit main dependency which
  gets silently overwritten by a custom command specification.

``OUTPUT``
  Specify the output files the command is expected to produce.
  Each output file will be marked with the :prop_sf:`GENERATED`
  source file property automatically.
  If the output of the custom command is not actually created
  as a file on disk it should be marked with the :prop_sf:`SYMBOLIC`
  source file property.

  If an output file name is a relative path, its absolute path is
  determined by interpreting it relative to:

  1. the build directory corresponding to the current source directory
     (:variable:`CMAKE_CURRENT_BINARY_DIR`), or

  2. the current source directory (:variable:`CMAKE_CURRENT_SOURCE_DIR`).

  The path in the build directory is preferred unless the path in the
  source tree is mentioned as an absolute source file path elsewhere
  in the current directory.

  .. versionadded:: 3.20
    Arguments to ``OUTPUT`` may use a restricted set of
    :manual:`generator expressions <cmake-generator-expressions(7)>`.
    :ref:`Target-dependent expressions <Target-Dependent Queries>` are not
    permitted.

  .. versionchanged:: 3.28
    In targets using :ref:`file sets`, custom command outputs are now
    considered private unless they are listed in a non-private file set.
    See policy :policy:`CMP0154`.

``USES_TERMINAL``
  .. versionadded:: 3.2

  The command will be given direct access to the terminal if possible.
  With the :generator:`Ninja` generator, this places the command in
  the ``console`` :prop_gbl:`pool <JOB_POOLS>`.

``VERBATIM``
  All arguments to the commands will be escaped properly for the
  build tool so that the invoked command receives each argument
  unchanged.  Note that one level of escapes is still used by the
  CMake language processor before add_custom_command even sees the
  arguments.  Use of ``VERBATIM`` is recommended as it enables
  correct behavior.  When ``VERBATIM`` is not given the behavior
  is platform specific because there is no protection of
  tool-specific special characters.

``WORKING_DIRECTORY``
  Execute the command with the given current working directory.
  If it is a relative path it will be interpreted relative to the
  build tree directory corresponding to the current source directory.

  .. versionadded:: 3.13
    Arguments to ``WORKING_DIRECTORY`` may use
    :manual:`generator expressions <cmake-generator-expressions(7)>`.

``DEPFILE``
  .. versionadded:: 3.7

  Specify a depfile which holds dependencies for the custom command. It is
  usually emitted by the custom command itself.  This keyword may only be used
  if the generator supports it, as detailed below.

  The expected format, compatible with what is generated by ``gcc`` with the
  option ``-M``, is independent of the generator or platform.

  The formal syntax, as specified using
  `BNF <https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form>`_ notation with
  the regular extensions, is the following:

  .. raw:: latex

    \begin{small}

  .. productionlist:: depfile
    depfile: `rule`*
    rule: `targets` (':' (`separator` `dependencies`?)?)? `eol`
    targets: `target` (`separator` `target`)* `separator`*
    target: `pathname`
    dependencies: `dependency` (`separator` `dependency`)* `separator`*
    dependency: `pathname`
    separator: (`space` | `line_continue`)+
    line_continue: '\' `eol`
    space: ' ' | '\t'
    pathname: `character`+
    character: `std_character` | `dollar` | `hash` | `whitespace`
    std_character: <any character except '$', '#' or ' '>
    dollar: '$$'
    hash: '\#'
    whitespace: '\ '
    eol: '\r'? '\n'

  .. raw:: latex

    \end{small}

  .. note::

    As part of ``pathname``, any slash and backslash is interpreted as
    a directory separator.

  .. versionadded:: 3.7
    The :generator:`Ninja` generator supports ``DEPFILE`` since the keyword
    was first added.

  .. versionadded:: 3.17
    Added the :generator:`Ninja Multi-Config` generator, which included
    support for the ``DEPFILE`` keyword.

  .. versionadded:: 3.20
    Added support for :ref:`Makefile Generators`.

    .. note::

      ``DEPFILE`` cannot be specified at the same time as the
      ``IMPLICIT_DEPENDS`` option for :ref:`Makefile Generators`.

  .. versionadded:: 3.21
    Added support for :ref:`Visual Studio Generators` with VS 2012 and above,
    and for the :generator:`Xcode` generator.  Support for
    :manual:`generator expressions <cmake-generator-expressions(7)>` was also
    added.

  .. versionadded:: 3.29
    The :ref:`Ninja Generators` will now incorporate the dependencies into its
    "deps log" database if the file is not listed in ``OUTPUTS`` or
    ``BYPRODUCTS``.

  Using ``DEPFILE`` with generators other than those listed above is an error.

  If the ``DEPFILE`` argument is relative, it should be relative to
  :variable:`CMAKE_CURRENT_BINARY_DIR`, and any relative paths inside the
  ``DEPFILE`` should also be relative to :variable:`CMAKE_CURRENT_BINARY_DIR`.
  See policy :policy:`CMP0116`, which is always ``NEW`` for
  :ref:`Makefile Generators`, :ref:`Visual Studio Generators`,
  and the :generator:`Xcode` generator.

``DEPENDS_EXPLICIT_ONLY``

  .. versionadded:: 3.27

  Indicates that the command's ``DEPENDS`` argument represents all files
  required by the command and implicit dependencies are not required.

  Without this option, if any target uses the output of the custom command,
  CMake will consider that target's dependencies as implicit dependencies for
  the custom command in case this custom command requires files implicitly
  created by those targets.

  This option can be enabled on all custom commands by setting
  :variable:`CMAKE_ADD_CUSTOM_COMMAND_DEPENDS_EXPLICIT_ONLY` to ``ON``.

  Only the :ref:`Ninja Generators` actually use this information to remove
  unnecessary implicit dependencies.

  See also the :prop_tgt:`OPTIMIZE_DEPENDENCIES` target property, which may
  provide another way for reducing the impact of target dependencies in some
  scenarios.

Examples: Generating Files
^^^^^^^^^^^^^^^^^^^^^^^^^^

Custom commands may be used to generate source files.
For example, the code:

.. code-block:: cmake

  add_custom_command(
    OUTPUT out.c
    COMMAND someTool -i ${CMAKE_CURRENT_SOURCE_DIR}/in.txt
                     -o out.c
    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/in.txt
    VERBATIM)
  add_library(myLib out.c)

adds a custom command to run ``someTool`` to generate ``out.c`` and then
compile the generated source as part of a library.  The generation rule
will re-run whenever ``in.txt`` changes.

.. versionadded:: 3.20
  One may use generator expressions to specify per-configuration outputs.
  For example, the code:

  .. code-block:: cmake

    add_custom_command(
      OUTPUT "out-$<CONFIG>.c"
      COMMAND someTool -i ${CMAKE_CURRENT_SOURCE_DIR}/in.txt
                       -o "out-$<CONFIG>.c"
                       -c "$<CONFIG>"
      DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/in.txt
      VERBATIM)
    add_library(myLib "out-$<CONFIG>.c")

  adds a custom command to run ``someTool`` to generate ``out-<config>.c``,
  where ``<config>`` is the build configuration, and then compile the generated
  source as part of a library.

Example: Generating Files for Multiple Targets
""""""""""""""""""""""""""""""""""""""""""""""

If multiple independent targets need the same custom command output,
it must be attached to a single custom target on which they all depend.
Consider the following example:

.. code-block:: cmake

  add_custom_command(
    OUTPUT table.csv
    COMMAND makeTable -i ${CMAKE_CURRENT_SOURCE_DIR}/input.dat
                      -o table.csv
    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/input.dat
    VERBATIM)
  add_custom_target(generate_table_csv DEPENDS table.csv)

  add_custom_command(
    OUTPUT foo.cxx
    COMMAND genFromTable -i table.csv -case foo -o foo.cxx
    DEPENDS table.csv           # file-level dependency
            generate_table_csv  # target-level dependency
    VERBATIM)
  add_library(foo foo.cxx)

  add_custom_command(
    OUTPUT bar.cxx
    COMMAND genFromTable -i table.csv -case bar -o bar.cxx
    DEPENDS table.csv           # file-level dependency
            generate_table_csv  # target-level dependency
    VERBATIM)
  add_library(bar bar.cxx)

Output ``foo.cxx`` is needed only by target ``foo`` and output ``bar.cxx``
is needed only by target ``bar``, but *both* targets need ``table.csv``,
transitively.  Since ``foo`` and ``bar`` are independent targets that may
build concurrently, we prevent them from racing to generate ``table.csv``
by placing its custom command in a separate target, ``generate_table_csv``.
The custom commands generating ``foo.cxx`` and ``bar.cxx`` each specify a
target-level dependency on ``generate_table_csv``, so the targets using them,
``foo`` and ``bar``, will not build until after target ``generate_table_csv``
is built.

.. _`add_custom_command(TARGET)`:

Build Events
^^^^^^^^^^^^

The second signature adds a custom command to a target such as a
library or executable.  This is useful for performing an operation
before or after building the target.  The command becomes part of the
target and will only execute when the target itself is built.  If the
target is already built, the command will not execute.

.. code-block:: cmake

  add_custom_command(TARGET <target>
                     PRE_BUILD | PRE_LINK | POST_BUILD
                     COMMAND command1 [ARGS] [args1...]
                     [COMMAND command2 [ARGS] [args2...] ...]
                     [BYPRODUCTS [files...]]
                     [WORKING_DIRECTORY dir]
                     [COMMENT comment]
                     [VERBATIM]
                     [COMMAND_EXPAND_LISTS])

This defines a new command that will be associated with building the
specified ``<target>``.  The ``<target>`` must be defined in the current
directory; targets defined in other directories may not be specified.

When the command will happen is determined by which
of the following is specified:

``PRE_BUILD``
  This option has unique behavior for the :ref:`Visual Studio Generators`.
  When using one of the Visual Studio generators, the command will run before
  any other rules are executed within the target.  With all other generators,
  this option behaves the same as ``PRE_LINK`` instead.  Because of this,
  it is recommended to avoid using ``PRE_BUILD`` except when it is known that
  a Visual Studio generator is being used.
``PRE_LINK``
  Run after sources have been compiled but before linking the binary
  or running the librarian or archiver tool of a static library.
  This is not defined for targets created by the
  :command:`add_custom_target` command.
``POST_BUILD``
  Run after all other rules within the target have been executed.

Projects should always specify one of the above three keywords when using
the ``TARGET`` form.  For backward compatibility reasons, ``POST_BUILD`` is
assumed if no such keyword is given, but projects should explicitly provide
one of the keywords to make clear the behavior they expect.

.. note::
  Because generator expressions can be used in custom commands,
  it is possible to define ``COMMAND`` lines or whole custom commands
  which evaluate to empty strings for certain configurations.
  For **Visual Studio 12 2013 (and newer)** generators these command
  lines or custom commands will be omitted for the specific
  configuration and no "empty-string-command" will be added.

  This allows adding individual build events for every configuration.

.. versionadded:: 3.21
  Support for target-dependent generator expressions.

.. versionadded:: 3.29
  The ``<target>`` may be an :ref:`ALIAS target <Alias Targets>`.

Examples: Build Events
^^^^^^^^^^^^^^^^^^^^^^

A ``POST_BUILD`` event may be used to post-process a binary after linking.
For example, the code:

.. code-block:: cmake

  add_executable(myExe myExe.c)
  add_custom_command(
    TARGET myExe POST_BUILD
    COMMAND someHasher -i "$<TARGET_FILE:myExe>"
                       -o "$<TARGET_FILE:myExe>.hash"
    VERBATIM)

will run ``someHasher`` to produce a ``.hash`` file next to the executable
after linking.

.. versionadded:: 3.20
  One may use generator expressions to specify per-configuration byproducts.
  For example, the code:

  .. code-block:: cmake

    add_library(myPlugin MODULE myPlugin.c)
    add_custom_command(
      TARGET myPlugin POST_BUILD
      COMMAND someHasher -i "$<TARGET_FILE:myPlugin>"
                         --as-code "myPlugin-hash-$<CONFIG>.c"
      BYPRODUCTS "myPlugin-hash-$<CONFIG>.c"
      VERBATIM)
    add_executable(myExe myExe.c "myPlugin-hash-$<CONFIG>.c")

  will run ``someHasher`` after linking ``myPlugin``, e.g. to produce a ``.c``
  file containing code to check the hash of ``myPlugin`` that the ``myExe``
  executable can use to verify it before loading.

Ninja Multi-Config
^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.20

  ``add_custom_command`` supports the :generator:`Ninja Multi-Config`
  generator's cross-config capabilities. See the generator documentation
  for more information.

See Also
^^^^^^^^

* :command:`add_custom_target`



/P/🚀 command/add_custom_target.rst
=================================================


add_custom_target
-----------------

Add a target with no output so it will always be built.

.. code-block:: cmake

  add_custom_target(Name [ALL] [command1 [args1...]]
                    [COMMAND command2 [args2...] ...]
                    [DEPENDS depend depend depend ... ]
                    [BYPRODUCTS [files...]]
                    [WORKING_DIRECTORY dir]
                    [COMMENT comment]
                    [JOB_POOL job_pool]
                    [JOB_SERVER_AWARE <bool>]
                    [VERBATIM] [USES_TERMINAL]
                    [COMMAND_EXPAND_LISTS]
                    [SOURCES src1 [src2...]])

Adds a target with the given name that executes the given commands.
The target has no output file and is *always considered out of date*
even if the commands try to create a file with the name of the target.
Use the :command:`add_custom_command` command to generate a file with
dependencies.  By default nothing depends on the custom target.  Use
the :command:`add_dependencies` command to add dependencies to or
from other targets.

The options are:

``ALL``
  Indicate that this target should be added to the default build
  target so that it will be run every time (the command cannot be
  called ``ALL``).

``BYPRODUCTS``
  .. versionadded:: 3.2

  Specify the files the command is expected to produce but whose
  modification time may or may not be updated on subsequent builds.
  If a byproduct name is a relative path it will be interpreted
  relative to the build tree directory corresponding to the
  current source directory.
  Each byproduct file will be marked with the :prop_sf:`GENERATED`
  source file property automatically.

  *See policy* :policy:`CMP0058` *for the motivation behind this feature.*

  Explicit specification of byproducts is supported by the
  :generator:`Ninja` generator to tell the ``ninja`` build tool
  how to regenerate byproducts when they are missing.  It is
  also useful when other build rules (e.g. custom commands)
  depend on the byproducts.  Ninja requires a build rule for any
  generated file on which another rule depends even if there are
  order-only dependencies to ensure the byproducts will be
  available before their dependents build.

  The :ref:`Makefile Generators` will remove ``BYPRODUCTS`` and other
  :prop_sf:`GENERATED` files during ``make clean``.

  .. versionadded:: 3.20
    Arguments to ``BYPRODUCTS`` may use a restricted set of
    :manual:`generator expressions <cmake-generator-expressions(7)>`.
    :ref:`Target-dependent expressions <Target-Dependent Queries>` are not
    permitted.

  .. versionchanged:: 3.28
    In custom targets using :ref:`file sets`, byproducts are now
    considered private unless they are listed in a non-private file set.
    See policy :policy:`CMP0154`.

``COMMAND``
  Specify the command-line(s) to execute at build time.
  If more than one ``COMMAND`` is specified they will be executed in order,
  but *not* necessarily composed into a stateful shell or batch script.
  (To run a full script, use the :command:`configure_file` command or the
  :command:`file(GENERATE)` command to create it, and then specify
  a ``COMMAND`` to launch it.)

  If ``COMMAND`` specifies an executable target name (created by the
  :command:`add_executable` command), it will automatically be replaced
  by the location of the executable created at build time if either of
  the following is true:

  * The target is not being cross-compiled (i.e. the
    :variable:`CMAKE_CROSSCOMPILING` variable is not set to true).
  * .. versionadded:: 3.6
      The target is being cross-compiled and an emulator is provided (i.e.
      its :prop_tgt:`CROSSCOMPILING_EMULATOR` target property is set).
      In this case, the contents of :prop_tgt:`CROSSCOMPILING_EMULATOR` will be
      prepended to the command before the location of the target executable.

  If neither of the above conditions are met, it is assumed that the
  command name is a program to be found on the ``PATH`` at build time.

  Arguments to ``COMMAND`` may use
  :manual:`generator expressions <cmake-generator-expressions(7)>`.
  Use the :genex:`TARGET_FILE` generator expression to refer to the location
  of a target later in the command line (i.e. as a command argument rather
  than as the command to execute).

  Whenever one of the following target based generator expressions are used as
  a command to execute or is mentioned in a command argument, a target-level
  dependency will be added automatically so that the mentioned target will be
  built before this custom target (see policy :policy:`CMP0112`).

    * ``TARGET_FILE``
    * ``TARGET_LINKER_FILE``
    * ``TARGET_SONAME_FILE``
    * ``TARGET_PDB_FILE``

  The command and arguments are optional and if not specified an empty
  target will be created.

``COMMENT``
  Display the given message before the commands are executed at
  build time.

  .. versionadded:: 3.26
    Arguments to ``COMMENT`` may use
    :manual:`generator expressions <cmake-generator-expressions(7)>`.

``DEPENDS``
  Reference files and outputs of custom commands created with
  :command:`add_custom_command` command calls in the same directory
  (``CMakeLists.txt`` file).  They will be brought up to date when
  the target is built.

  .. versionchanged:: 3.16
    A target-level dependency is added if any dependency is a byproduct
    of a target or any of its build events in the same directory to ensure
    the byproducts will be available before this target is built.

  Use the :command:`add_dependencies` command to add dependencies
  on other targets.

``COMMAND_EXPAND_LISTS``
  .. versionadded:: 3.8

  Lists in ``COMMAND`` arguments will be expanded, including those
  created with
  :manual:`generator expressions <cmake-generator-expressions(7)>`,
  allowing ``COMMAND`` arguments such as
  ``${CC} "-I$<JOIN:$<TARGET_PROPERTY:foo,INCLUDE_DIRECTORIES>,;-I>" foo.cc``
  to be properly expanded.

``JOB_POOL``
  .. versionadded:: 3.15

  Specify a :prop_gbl:`pool <JOB_POOLS>` for the :generator:`Ninja`
  generator. Incompatible with ``USES_TERMINAL``, which implies
  the ``console`` pool.
  Using a pool that is not defined by :prop_gbl:`JOB_POOLS` causes
  an error by ninja at build time.

``JOB_SERVER_AWARE``
  .. versionadded:: 3.28

  Specify that the command is GNU Make job server aware.

  For the :generator:`Unix Makefiles`, :generator:`MSYS Makefiles`, and
  :generator:`MinGW Makefiles` generators this will add the ``+`` prefix to the
  recipe line. See the `GNU Make Documentation`_ for more information.

  This option is silently ignored by other generators.

.. _`GNU Make Documentation`: https://www.gnu.org/software/make/manual/html_node/MAKE-Variable.html

``SOURCES``
  Specify additional source files to be included in the custom target.
  Specified source files will be added to IDE project files for
  convenience in editing even if they have no build rules.

``VERBATIM``
  All arguments to the commands will be escaped properly for the
  build tool so that the invoked command receives each argument
  unchanged.  Note that one level of escapes is still used by the
  CMake language processor before ``add_custom_target`` even sees
  the arguments.  Use of ``VERBATIM`` is recommended as it enables
  correct behavior.  When ``VERBATIM`` is not given the behavior
  is platform specific because there is no protection of
  tool-specific special characters.

``USES_TERMINAL``
  .. versionadded:: 3.2

  The command will be given direct access to the terminal if possible.
  With the :generator:`Ninja` generator, this places the command in
  the ``console`` :prop_gbl:`pool <JOB_POOLS>`.

``WORKING_DIRECTORY``
  Execute the command with the given current working directory.
  If it is a relative path it will be interpreted relative to the
  build tree directory corresponding to the current source directory.

  .. versionadded:: 3.13
    Arguments to ``WORKING_DIRECTORY`` may use
    :manual:`generator expressions <cmake-generator-expressions(7)>`.

Ninja Multi-Config
^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.20

  ``add_custom_target`` supports the :generator:`Ninja Multi-Config`
  generator's cross-config capabilities. See the generator documentation
  for more information.

See Also
^^^^^^^^

* :command:`add_custom_command`



/P/🚀 command/add_definitions.rst
===============================================


add_definitions
---------------

Add ``-D`` define flags to the compilation of source files.

.. code-block:: cmake

  add_definitions(-DFOO -DBAR ...)

Adds definitions to the compiler command line for targets in the current
directory, whether added before or after this command is invoked, and for
the ones in sub-directories added after. This command can be used to add any
flags, but it is intended to add preprocessor definitions.

.. note::

  This command has been superseded by alternatives:

  * Use :command:`add_compile_definitions` to add preprocessor definitions.
  * Use :command:`include_directories` to add include directories.
  * Use :command:`add_compile_options` to add other options.

Flags beginning in ``-D`` or ``/D`` that look like preprocessor definitions are
automatically added to the :prop_dir:`COMPILE_DEFINITIONS` directory
property for the current directory.  Definitions with non-trivial values
may be left in the set of flags instead of being converted for reasons of
backwards compatibility.  See documentation of the
:prop_dir:`directory <COMPILE_DEFINITIONS>`,
:prop_tgt:`target <COMPILE_DEFINITIONS>`,
:prop_sf:`source file <COMPILE_DEFINITIONS>` ``COMPILE_DEFINITIONS``
properties for details on adding preprocessor definitions to specific
scopes and configurations.

See Also
^^^^^^^^

* The :manual:`cmake-buildsystem(7)` manual for more on defining
  buildsystem properties.



/P/🚀 command/add_dependencies.rst
================================================


add_dependencies
----------------

Add a dependency between top-level targets.

.. code-block:: cmake

  add_dependencies(<target> [<target-dependency>]...)

Makes a top-level ``<target>`` depend on other top-level targets to
ensure that they build before ``<target>`` does.  A top-level target
is one created by one of the :command:`add_executable`,
:command:`add_library`, or :command:`add_custom_target` commands
(but not targets generated by CMake like ``install``).

Dependencies added to an :ref:`imported target <Imported Targets>`
or an :ref:`interface library <Interface Libraries>` are followed
transitively in its place since the target itself does not build.

.. versionadded:: 3.3
  Allow adding dependencies to interface libraries.

See Also
^^^^^^^^

* The ``DEPENDS`` option of :command:`add_custom_target` and
  :command:`add_custom_command` commands for adding file-level
  dependencies in custom rules.

* The :prop_sf:`OBJECT_DEPENDS` source file property to add
  file-level dependencies to object files.



/P/🚀 command/add_executable.rst
==============================================


add_executable
--------------

.. only:: html

  .. contents::

Add an executable to the project using the specified source files.

Normal Executables
^^^^^^^^^^^^^^^^^^

.. signature::
  add_executable(<name> <options>... <sources>...)
  :target: normal

  Add an executable target called ``<name>`` to be built from the source
  files listed in the command invocation.

  The options are:

  ``WIN32``
    Set the :prop_tgt:`WIN32_EXECUTABLE` target property automatically.
    See documentation of that target property for details.

  ``MACOSX_BUNDLE``
    Set the :prop_tgt:`MACOSX_BUNDLE` target property automatically.
    See documentation of that target property for details.

  ``EXCLUDE_FROM_ALL``
    Set the :prop_tgt:`EXCLUDE_FROM_ALL` target property automatically.
    See documentation of that target property for details.

The ``<name>`` corresponds to the logical target name and must be globally
unique within a project.  The actual file name of the executable built is
constructed based on conventions of the native platform (such as
``<name>.exe`` or just ``<name>``).

.. versionadded:: 3.1
  Source arguments to ``add_executable`` may use "generator expressions" with
  the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
  manual for available expressions.

.. versionadded:: 3.11
  The source files can be omitted if they are added later using
  :command:`target_sources`.

By default the executable file will be created in the build tree
directory corresponding to the source tree directory in which the
command was invoked.  See documentation of the
:prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` target property to change this
location.  See documentation of the :prop_tgt:`OUTPUT_NAME` target property
to change the ``<name>`` part of the final file name.

See the :manual:`cmake-buildsystem(7)` manual for more on defining
buildsystem properties.

See also :prop_sf:`HEADER_FILE_ONLY` on what to do if some sources are
pre-processed, and you want to have the original sources reachable from
within IDE.

Imported Executables
^^^^^^^^^^^^^^^^^^^^

.. signature::
  add_executable(<name> IMPORTED [GLOBAL])
  :target: IMPORTED

  Add an :ref:`IMPORTED executable target <Imported Targets>` to reference
  an executable file located outside the project.  The target name may be
  referenced like any target built within the project, except that by
  default it is visible only in the directory in which it is created,
  and below.

  The options are:

  ``GLOBAL``
    Make the target name globally visible.

No rules are generated to build imported targets, and the :prop_tgt:`IMPORTED`
target property is ``True``.  Imported executables are useful for convenient
reference from commands like :command:`add_custom_command`.

Details about the imported executable are specified by setting properties
whose names begin in ``IMPORTED_``.  The most important such property is
:prop_tgt:`IMPORTED_LOCATION` (and its per-configuration version
:prop_tgt:`IMPORTED_LOCATION_<CONFIG>`) which specifies the location of
the main executable file on disk.  See documentation of the ``IMPORTED_*``
properties for more information.

Alias Executables
^^^^^^^^^^^^^^^^^

.. signature::
  add_executable(<name> ALIAS <target>)
  :target: ALIAS

  Creates an :ref:`Alias Target <Alias Targets>`, such that ``<name>`` can
  be used to refer to ``<target>`` in subsequent commands.  The ``<name>``
  does not appear in the generated buildsystem as a make target.  The
  ``<target>`` may not be an ``ALIAS``.

.. versionadded:: 3.11
  An ``ALIAS`` can target a ``GLOBAL`` :ref:`Imported Target <Imported Targets>`

.. versionadded:: 3.18
  An ``ALIAS`` can target a non-``GLOBAL`` Imported Target. Such alias is
  scoped to the directory in which it is created and subdirectories.
  The :prop_tgt:`ALIAS_GLOBAL` target property can be used to check if the
  alias is global or not.

``ALIAS`` targets can be used as targets to read properties
from, executables for custom commands and custom targets.  They can also be
tested for existence with the regular :command:`if(TARGET)` subcommand.
The ``<name>`` may not be used to modify properties of ``<target>``, that
is, it may not be used as the operand of :command:`set_property`,
:command:`set_target_properties`, :command:`target_link_libraries` etc.
An ``ALIAS`` target may not be installed or exported.

See Also
^^^^^^^^

* :command:`add_library`



/P/🚀 command/add_library.rst
===========================================


add_library
-----------

Add a library to the project using the specified source files.

Normal Libraries
^^^^^^^^^^^^^^^^

.. signature::
  add_library(<name> [<type>] [EXCLUDE_FROM_ALL] <sources>...)
  :target: normal

  Add a library target called ``<name>`` to be built from the source files
  listed in the command invocation.

  The optional ``<type>`` specifies the type of library to be created:

  ``STATIC``
    An archive of object files for use when linking other targets.

  ``SHARED``
    A dynamic library that may be linked by other targets and loaded
    at runtime.

  ``MODULE``
    A plugin that may not be linked by other targets, but may be
    dynamically loaded at runtime using dlopen-like functionality.

  If no ``<type>`` is given the default is ``STATIC`` or ``SHARED``
  based on the value of the :variable:`BUILD_SHARED_LIBS` variable.

  The options are:

  ``EXCLUDE_FROM_ALL``
    Set the :prop_tgt:`EXCLUDE_FROM_ALL` target property automatically.
    See documentation of that target property for details.

The ``<name>`` corresponds to the logical target name and must be globally
unique within a project.  The actual file name of the library built is
constructed based on conventions of the native platform (such as
``lib<name>.a`` or ``<name>.lib``).

.. versionadded:: 3.1
  Source arguments to ``add_library`` may use "generator expressions" with
  the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
  manual for available expressions.

.. versionadded:: 3.11
  The source files can be omitted if they are added later using
  :command:`target_sources`.

For ``SHARED`` and ``MODULE`` libraries the
:prop_tgt:`POSITION_INDEPENDENT_CODE` target
property is set to ``ON`` automatically.
A ``SHARED`` library may be marked with the :prop_tgt:`FRAMEWORK`
target property to create an macOS Framework.

.. versionadded:: 3.8
  A ``STATIC`` library may be marked with the :prop_tgt:`FRAMEWORK`
  target property to create a static Framework.

If a library does not export any symbols, it must not be declared as a
``SHARED`` library.  For example, a Windows resource DLL or a managed C++/CLI
DLL that exports no unmanaged symbols would need to be a ``MODULE`` library.
This is because CMake expects a ``SHARED`` library to always have an
associated import library on Windows.

By default the library file will be created in the build tree directory
corresponding to the source tree directory in which the command was
invoked.  See documentation of the :prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY`,
:prop_tgt:`LIBRARY_OUTPUT_DIRECTORY`, and
:prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` target properties to change this
location.  See documentation of the :prop_tgt:`OUTPUT_NAME` target
property to change the ``<name>`` part of the final file name.

See the :manual:`cmake-buildsystem(7)` manual for more on defining
buildsystem properties.

See also :prop_sf:`HEADER_FILE_ONLY` on what to do if some sources are
pre-processed, and you want to have the original sources reachable from
within IDE.

Object Libraries
^^^^^^^^^^^^^^^^

.. signature::
  add_library(<name> OBJECT <sources>...)
  :target: OBJECT

  Add an :ref:`Object Library <Object Libraries>` to compile source files
  without archiving or linking their object files into a library.

Other targets created by ``add_library`` or :command:`add_executable`
may reference the objects using an expression of the
form :genex:`$\<TARGET_OBJECTS:objlib\> <TARGET_OBJECTS>` as a source, where
``objlib`` is the object library name.  For example:

.. code-block:: cmake

  add_library(... $<TARGET_OBJECTS:objlib> ...)
  add_executable(... $<TARGET_OBJECTS:objlib> ...)

will include objlib's object files in a library and an executable
along with those compiled from their own sources.  Object libraries
may contain only sources that compile, header files, and other files
that would not affect linking of a normal library (e.g. ``.txt``).
They may contain custom commands generating such sources, but not
``PRE_BUILD``, ``PRE_LINK``, or ``POST_BUILD`` commands.  Some native build
systems (such as Xcode) may not like targets that have only object files, so
consider adding at least one real source file to any target that references
:genex:`$\<TARGET_OBJECTS:objlib\> <TARGET_OBJECTS>`.

.. versionadded:: 3.12
  Object libraries can be linked to with :command:`target_link_libraries`.

Interface Libraries
^^^^^^^^^^^^^^^^^^^

.. signature::
  add_library(<name> INTERFACE)
  :target: INTERFACE

  Add an :ref:`Interface Library <Interface Libraries>` target that may
  specify usage requirements for dependents but does not compile sources
  and does not produce a library artifact on disk.

  An interface library with no source files is not included as a target
  in the generated buildsystem.  However, it may have
  properties set on it and it may be installed and exported.
  Typically, ``INTERFACE_*`` properties are populated on an interface
  target using the commands:

  * :command:`set_property`,
  * :command:`target_link_libraries(INTERFACE)`,
  * :command:`target_link_options(INTERFACE)`,
  * :command:`target_include_directories(INTERFACE)`,
  * :command:`target_compile_options(INTERFACE)`,
  * :command:`target_compile_definitions(INTERFACE)`, and
  * :command:`target_sources(INTERFACE)`,

  and then it is used as an argument to :command:`target_link_libraries`
  like any other target.

  .. versionadded:: 3.15
    An interface library can have :prop_tgt:`PUBLIC_HEADER` and
    :prop_tgt:`PRIVATE_HEADER` properties.  The headers specified by those
    properties can be installed using the :command:`install(TARGETS)` command.

.. signature::
  add_library(<name> INTERFACE [EXCLUDE_FROM_ALL] <sources>...)
  :target: INTERFACE-with-sources

  .. versionadded:: 3.19

  Add an :ref:`Interface Library <Interface Libraries>` target with
  source files (in addition to usage requirements and properties as
  documented by the :command:`above signature <add_library(INTERFACE)>`).
  Source files may be listed directly in the ``add_library`` call
  or added later by calls to :command:`target_sources` with the
  ``PRIVATE`` or ``PUBLIC`` keywords.

  If an interface library has source files (i.e. the :prop_tgt:`SOURCES`
  target property is set), or header sets (i.e. the :prop_tgt:`HEADER_SETS`
  target property is set), it will appear in the generated buildsystem
  as a build target much like a target defined by the
  :command:`add_custom_target` command.  It does not compile any sources,
  but does contain build rules for custom commands created by the
  :command:`add_custom_command` command.

  The options are:

  ``EXCLUDE_FROM_ALL``
    Set the :prop_tgt:`EXCLUDE_FROM_ALL` target property automatically.
    See documentation of that target property for details.

  .. note::
    In most command signatures where the ``INTERFACE`` keyword appears,
    the items listed after it only become part of that target's usage
    requirements and are not part of the target's own settings.  However,
    in this signature of ``add_library``, the ``INTERFACE`` keyword refers
    to the library type only.  Sources listed after it in the ``add_library``
    call are ``PRIVATE`` to the interface library and do not appear in its
    :prop_tgt:`INTERFACE_SOURCES` target property.

.. _`add_library imported libraries`:

Imported Libraries
^^^^^^^^^^^^^^^^^^

.. signature::
  add_library(<name> <type> IMPORTED [GLOBAL])
  :target: IMPORTED

  Add an :ref:`IMPORTED library target <Imported Targets>` called ``<name>``.
  The target name may be referenced like any target built within the project,
  except that by default it is visible only in the directory in which it is
  created, and below.

  The ``<type>`` must be one of:

  ``STATIC``, ``SHARED``, ``MODULE``, ``UNKNOWN``
    References a library file located outside the project.  The
    :prop_tgt:`IMPORTED_LOCATION` target property (or its per-configuration
    variant :prop_tgt:`IMPORTED_LOCATION_<CONFIG>`) specifies the
    location of the main library file on disk:

    * For a ``SHARED`` library on most non-Windows platforms, the main library
      file is the ``.so`` or ``.dylib`` file used by both linkers and dynamic
      loaders.  If the referenced library file has a ``SONAME`` (or on macOS,
      has a ``LC_ID_DYLIB`` starting in ``@rpath/``), the value of that field
      should be set in the :prop_tgt:`IMPORTED_SONAME` target property.
      If the referenced library file does not have a ``SONAME``, but the
      platform supports it, then  the :prop_tgt:`IMPORTED_NO_SONAME` target
      property should be set.

    * For a ``SHARED`` library on Windows, the :prop_tgt:`IMPORTED_IMPLIB`
      target property (or its per-configuration variant
      :prop_tgt:`IMPORTED_IMPLIB_<CONFIG>`) specifies the location of the
      DLL import library file (``.lib`` or ``.dll.a``) on disk, and the
      ``IMPORTED_LOCATION`` is the location of the ``.dll`` runtime
      library (and is optional, but needed by the :genex:`TARGET_RUNTIME_DLLS`
      generator expression).

    Additional usage requirements may be specified in ``INTERFACE_*``
    properties.

    An ``UNKNOWN`` library type is typically only used in the implementation
    of :ref:`Find Modules`.  It allows the path to an imported library
    (often found using the :command:`find_library` command) to be used
    without having to know what type of library it is.  This is especially
    useful on Windows where a static library and a DLL's import library
    both have the same file extension.

  ``OBJECT``
    References a set of object files located outside the project.
    The :prop_tgt:`IMPORTED_OBJECTS` target property (or its per-configuration
    variant :prop_tgt:`IMPORTED_OBJECTS_<CONFIG>`) specifies the locations of
    object files on disk.
    Additional usage requirements may be specified in ``INTERFACE_*``
    properties.

  ``INTERFACE``
    Does not reference any library or object files on disk, but may
    specify usage requirements in ``INTERFACE_*`` properties.

  The options are:

  ``GLOBAL``
    Make the target name globally visible.

No rules are generated to build imported targets, and the :prop_tgt:`IMPORTED`
target property is ``True``.  Imported libraries are useful for convenient
reference from commands like :command:`target_link_libraries`.

Details about the imported library are specified by setting properties whose
names begin in ``IMPORTED_`` and ``INTERFACE_``.  See documentation of
such properties for more information.

Alias Libraries
^^^^^^^^^^^^^^^

.. signature::
  add_library(<name> ALIAS <target>)
  :target: ALIAS

  Creates an :ref:`Alias Target <Alias Targets>`, such that ``<name>`` can be
  used to refer to ``<target>`` in subsequent commands.  The ``<name>`` does
  not appear in the generated buildsystem as a make target.  The ``<target>``
  may not be an ``ALIAS``.

.. versionadded:: 3.11
  An ``ALIAS`` can target a ``GLOBAL`` :ref:`Imported Target <Imported Targets>`

.. versionadded:: 3.18
  An ``ALIAS`` can target a non-``GLOBAL`` Imported Target. Such alias is
  scoped to the directory in which it is created and below.
  The :prop_tgt:`ALIAS_GLOBAL` target property can be used to check if the
  alias is global or not.

``ALIAS`` targets can be used as linkable targets and as targets to
read properties from.  They can also be tested for existence with the
regular :command:`if(TARGET)` subcommand.  The ``<name>`` may not be used
to modify properties of ``<target>``, that is, it may not be used as the
operand of :command:`set_property`, :command:`set_target_properties`,
:command:`target_link_libraries` etc.  An ``ALIAS`` target may not be
installed or exported.

See Also
^^^^^^^^

* :command:`add_executable`



/P/🚀 command/add_link_options.rst
================================================


add_link_options
----------------

.. versionadded:: 3.13

Add options to the link step for executable, shared library or module
library targets in the current directory and below that are added after
this command is invoked.

.. code-block:: cmake

  add_link_options(<option> ...)

This command can be used to add any link options, but alternative commands
exist to add libraries (:command:`target_link_libraries` or
:command:`link_libraries`).  See documentation of the
:prop_dir:`directory <LINK_OPTIONS>` and
:prop_tgt:`target <LINK_OPTIONS>` ``LINK_OPTIONS`` properties.

.. note::

  This command cannot be used to add options for static library targets,
  since they do not use a linker.  To add archiver or MSVC librarian flags,
  see the :prop_tgt:`STATIC_LIBRARY_OPTIONS` target property.

.. |command_name| replace:: ``add_link_options``
.. include:: GENEX_NOTE.txt

.. include:: DEVICE_LINK_OPTIONS.txt

.. include:: OPTIONS_SHELL.txt

.. include:: LINK_OPTIONS_LINKER.txt

See Also
^^^^^^^^

* :command:`link_libraries`
* :command:`target_link_libraries`
* :command:`target_link_options`

* :variable:`CMAKE_<LANG>_FLAGS` and :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>`
  add language-wide flags passed to all invocations of the compiler.
  This includes invocations that drive compiling and those that drive linking.



/P/🚀 command/add_subdirectory.rst
================================================


add_subdirectory
----------------

Add a subdirectory to the build.

.. code-block:: cmake

  add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL] [SYSTEM])

Adds a subdirectory to the build.  The ``source_dir`` specifies the
directory in which the source ``CMakeLists.txt`` and code files are
located.  If it is a relative path, it will be evaluated with respect
to the current directory (the typical usage), but it may also be an
absolute path.  The ``binary_dir`` specifies the directory in which to
place the output files.  If it is a relative path, it will be evaluated
with respect to the current output directory, but it may also be an
absolute path.  If ``binary_dir`` is not specified, the value of
``source_dir``, before expanding any relative path, will be used (the
typical usage).  The ``CMakeLists.txt`` file in the specified source
directory will be processed immediately by CMake before processing in
the current input file continues beyond this command.

If the ``EXCLUDE_FROM_ALL`` argument is provided then targets in the
subdirectory will not be included in the ``ALL`` target of the parent
directory by default, and will be excluded from IDE project files.
Users must explicitly build targets in the subdirectory.  This is
meant for use when the subdirectory contains a separate part of the
project that is useful but not necessary, such as a set of examples.
Typically the subdirectory should contain its own :command:`project`
command invocation so that a full build system will be generated in the
subdirectory (such as a Visual Studio IDE solution file).  Note that
inter-target dependencies supersede this exclusion.  If a target built by
the parent project depends on a target in the subdirectory, the dependee
target will be included in the parent project build system to satisfy
the dependency.

.. versionadded:: 3.25
  If the ``SYSTEM`` argument is provided, the :prop_dir:`SYSTEM` directory
  property of the subdirectory will be set to true.  This property is
  used to initialize the :prop_tgt:`SYSTEM` property of each non-imported
  target created in that subdirectory.



/P/🚀 command/add_test.rst
========================================


add_test
--------

Add a test to the project to be run by :manual:`ctest(1)`.

.. code-block:: cmake

  add_test(NAME <name> COMMAND <command> [<arg>...]
           [CONFIGURATIONS <config>...]
           [WORKING_DIRECTORY <dir>]
           [COMMAND_EXPAND_LISTS])

Adds a test called ``<name>``.  The test name may contain arbitrary
characters, expressed as a :ref:`Quoted Argument` or :ref:`Bracket Argument`
if necessary.  See policy :policy:`CMP0110`.

CMake only generates tests if the :command:`enable_testing` command has been
invoked.  The :module:`CTest` module invokes ``enable_testing`` automatically
unless ``BUILD_TESTING`` is set to ``OFF``.

Tests added with the ``add_test(NAME)`` signature support using
:manual:`generator expressions <cmake-generator-expressions(7)>`
in test properties set by :command:`set_property(TEST)` or
:command:`set_tests_properties`. Test properties may only be set in the
directory the test is created in.

``add_test`` options are:

``COMMAND``
  Specify the test command-line.

  If ``<command>`` specifies an executable target created by
  :command:`add_executable`:

  * It will automatically be replaced by the location of the executable
    created at build time.

  * .. versionadded:: 3.3

      The target's :prop_tgt:`CROSSCOMPILING_EMULATOR`, if set, will be
      used to run the command on the host::

        <emulator> <command>

      .. versionchanged:: 3.29

        The emulator is used only when
        :variable:`cross-compiling <CMAKE_CROSSCOMPILING>`.
        See policy :policy:`CMP0158`.

  * .. versionadded:: 3.29

      The target's :prop_tgt:`TEST_LAUNCHER`, if set, will be
      used to launch the command::

        <launcher> <command>

      If the :prop_tgt:`CROSSCOMPILING_EMULATOR` is also set, both are used::

        <launcher> <emulator> <command>

  The command may be specified using
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

``CONFIGURATIONS``
  Restrict execution of the test only to the named configurations.

``WORKING_DIRECTORY``
  Set the test property :prop_test:`WORKING_DIRECTORY` in which to execute the
  test. If not specified, the test will be run in
  :variable:`CMAKE_CURRENT_BINARY_DIR`. The working directory may be specified
  using :manual:`generator expressions <cmake-generator-expressions(7)>`.

``COMMAND_EXPAND_LISTS``
  .. versionadded:: 3.16

  Lists in ``COMMAND`` arguments will be expanded, including those created with
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

If the test command exits with code ``0`` the test passes. Non-zero exit code
is a "failed" test. The test property :prop_test:`WILL_FAIL` inverts this
logic. Note that system-level test failures such as segmentation faults or
heap errors will still fail the test even if ``WILL_FALL`` is true. Output
written to stdout or stderr is captured by :manual:`ctest(1)` and only
affects the pass/fail status via the :prop_test:`PASS_REGULAR_EXPRESSION`,
:prop_test:`FAIL_REGULAR_EXPRESSION`, or :prop_test:`SKIP_REGULAR_EXPRESSION`
test properties.

.. versionadded:: 3.16
  Added :prop_test:`SKIP_REGULAR_EXPRESSION` property.

Example usage:

.. code-block:: cmake

  add_test(NAME mytest
           COMMAND testDriver --config $<CONFIG>
                              --exe $<TARGET_FILE:myexe>)

This creates a test ``mytest`` whose command runs a ``testDriver`` tool
passing the configuration name and the full path to the executable
file produced by target ``myexe``.

---------------------------------------------------------------------

The command syntax above is recommended over the older, less flexible form:

.. code-block:: cmake

  add_test(<name> <command> [<arg>...])

Add a test called ``<name>`` with the given command-line.

Unlike the above ``NAME`` signature, target names are not supported
in the command-line.  Furthermore, tests added with this signature do not
support :manual:`generator expressions <cmake-generator-expressions(7)>`
in the command-line or test properties.



/P/🚀 command/aux_source_directory.rst
====================================================


aux_source_directory
--------------------

Find all source files in a directory.

.. code-block:: cmake

  aux_source_directory(<dir> <variable>)

Collects the names of all the source files in the specified directory
and stores the list in the ``<variable>`` provided.  This command is
intended to be used by projects that use explicit template
instantiation.  Template instantiation files can be stored in a
``Templates`` subdirectory and collected automatically using this
command to avoid manually listing all instantiations.

It is tempting to use this command to avoid writing the list of source
files for a library or executable target.  While this seems to work,
there is no way for CMake to generate a build system that knows when a
new source file has been added.  Normally the generated build system
knows when it needs to rerun CMake because the ``CMakeLists.txt`` file is
modified to add a new source.  When the source is just added to the
directory without modifying this file, one would have to manually
rerun CMake to generate a build system incorporating the new file.



/P/🚀 command/build_command.rst
=============================================


build_command
-------------

Get a command line to build the current project.
This is mainly intended for internal use by the :module:`CTest` module.

.. code-block:: cmake

  build_command(<variable>
                [CONFIGURATION <config>]
                [PARALLEL_LEVEL <parallel>]
                [TARGET <target>]
                [PROJECT_NAME <projname>] # legacy, causes warning
               )

Sets the given ``<variable>`` to a command-line string of the form::

 <cmake> --build . [--config <config>] [--parallel <parallel>] [--target <target>...] [-- -i]

where ``<cmake>`` is the location of the :manual:`cmake(1)` command-line
tool, and ``<config>``, ``<parallel>`` and ``<target>`` are the values
provided to the ``CONFIGURATION``, ``PARALLEL_LEVEL`` and ``TARGET``
options, if any.  The trailing ``-- -i`` option is added for
:ref:`Makefile Generators` if policy :policy:`CMP0061` is not set to
``NEW``.

When invoked, this :option:`cmake --build` command line will launch the
underlying build system tool.

.. versionadded:: 3.21
  The ``PARALLEL_LEVEL`` argument can be used to set the
  :option:`--parallel <cmake--build --parallel>` flag.

.. code-block:: cmake

  build_command(<cachevariable> <makecommand>)

This second signature is deprecated, but still available for backwards
compatibility.  Use the first signature instead.

It sets the given ``<cachevariable>`` to a command-line string as
above but without the :option:`--target <cmake--build --target>` option.
The ``<makecommand>`` is ignored but should be the full path to
devenv, nmake, make or one of the end user build tools
for legacy invocations.

.. note::
 In CMake versions prior to 3.0 this command returned a command
 line that directly invokes the native build tool for the current
 generator.  Their implementation of the ``PROJECT_NAME`` option
 had no useful effects, so CMake now warns on use of the option.



/P/🚀 command/cmake_file_api.rst
==============================================


cmake_file_api
--------------

.. versionadded:: 3.27

Enables interacting with the :manual:`CMake file API <cmake-file-api(7)>`.

.. signature::
  cmake_file_api(QUERY ...)

  The ``QUERY`` subcommand adds a file API query for the current CMake
  invocation.

  .. code-block:: cmake

    cmake_file_api(
      QUERY
      API_VERSION <version>
      [CODEMODEL <versions>...]
      [CACHE <versions>...]
      [CMAKEFILES <versions>...]
      [TOOLCHAINS <versions>...]
    )

  The ``API_VERSION`` must always be given.  Currently, the only supported
  value for ``<version>`` is 1.  See :ref:`file-api v1` for details of the
  reply content and location.

  Each of the optional keywords ``CODEMODEL``, ``CACHE``, ``CMAKEFILES`` and
  ``TOOLCHAINS`` correspond to one of the object kinds that can be requested
  by the project.  The ``configureLog`` object kind cannot be set with this
  command, since it must be set before CMake starts reading the top level
  ``CMakeLists.txt`` file.

  For each of the optional keywords, the ``<versions>`` list must contain one
  or more version values of the form ``major`` or ``major.minor``, where
  ``major`` and ``minor`` are integers.  Projects should list the versions they
  accept in their preferred order, as only the first supported value from the
  list will be selected.  The command will ignore versions with a ``major``
  version higher than any major version it supports for that object kind.
  It will raise an error if it encounters an invalid version number, or if none
  of the requested versions is supported.

  For each type of object kind requested, a query equivalent to a shared,
  stateless query will be added internally.  No query file will be created in
  the file system.  The reply *will* be written to the file system at
  generation time.

  It is not an error to add a query for the same thing more than once, whether
  from query files or from multiple calls to ``cmake_file_api(QUERY)``.
  The final set of queries will be a merged combination of all queries
  specified on disk and queries submitted by the project.

Example
^^^^^^^

A project may want to use replies from the file API at build time to implement
some form of verification task.  Instead of relying on something outside of
CMake to create a query file, the project can use ``cmake_file_api(QUERY)``
to request the required information for the current run.  It can then create
a custom command to run at build time, knowing that the requested information
should always be available.

.. code-block:: cmake

  cmake_file_api(
    QUERY
    API_VERSION 1
    CODEMODEL 2.3
    TOOLCHAINS 1
  )

  add_custom_target(verify_project
    COMMAND ${CMAKE_COMMAND}
      -D BUILD_DIR=${CMAKE_BINARY_DIR}
      -D CONFIG=$<CONFIG>
      -P ${CMAKE_CURRENT_SOURCE_DIR}/verify_project.cmake
  )



/P/🚀 command/create_test_sourcelist.rst
======================================================


create_test_sourcelist
----------------------

Create a test driver program that links together many small tests into a
single executable.  This is useful when building static executables with
large libraries to shrink the total required size.

.. signature::
  create_test_sourcelist(<sourceListName> <driverName> <test>... <options>...)
  :target: original

  Generate a test driver source file from a list of individual test sources
  and provide a combined list of sources that can be built as an executable.

  The options are:

  ``<sourceListName>``
    The name of a variable in which to store the list of source files needed
    to build the test driver.  The list will contain the ``<test>...`` sources
    and the generated ``<driverName>`` source.

    .. versionchanged:: 3.29

      The test driver source is listed by absolute path in the build tree.
      Previously it was listed only as ``<driverName>``.

  ``<driverName>``
    Name of the test driver source file to be generated into the build tree.
    The source file will contain a ``main()`` program entry point that
    dispatches to whatever test is named on the command line.

  ``<test>...``
    Test source files to be added to the driver binary.  Each test source
    file must have a function in it that is the same name as the file with the
    extension removed.  For example, a ``foo.cxx`` test source might contain:

    .. code-block:: c++

      int foo(int argc, char** argv)

  ``EXTRA_INCLUDE <header>``
    Specify a header file to ``#include`` in the generated test driver source.

  ``FUNCTION <function>``
    Specify a function to be called with pointers to ``argc`` and ``argv``.
    The function may be provided in the ``EXTRA_INCLUDE`` header:

    .. code-block:: c++

      void function(int* pargc, char*** pargv)

    This can be used to add extra command line processing to each test.

Additionally, some CMake variables affect test driver generation:

.. variable:: CMAKE_TESTDRIVER_BEFORE_TESTMAIN

  Code to be placed directly before calling each test's function.

.. variable:: CMAKE_TESTDRIVER_AFTER_TESTMAIN

  Code to be placed directly after the call to each test's function.



/P/🚀 command/define_property.rst
===============================================


define_property
---------------

Define and document custom properties.

.. code-block:: cmake

  define_property(<GLOBAL | DIRECTORY | TARGET | SOURCE |
                   TEST | VARIABLE | CACHED_VARIABLE>
                   PROPERTY <name> [INHERITED]
                   [BRIEF_DOCS <brief-doc> [docs...]]
                   [FULL_DOCS <full-doc> [docs...]]
                   [INITIALIZE_FROM_VARIABLE <variable>])

Defines one property in a scope for use with the :command:`set_property` and
:command:`get_property` commands. It is mainly useful for defining the way
a property is initialized or inherited. Historically, the command also
associated documentation with a property, but that is no longer considered a
primary use case.

The first argument determines the kind of scope in which the property should
be used.  It must be one of the following:

::

  GLOBAL    = associated with the global namespace
  DIRECTORY = associated with one directory
  TARGET    = associated with one target
  SOURCE    = associated with one source file
  TEST      = associated with a test named with add_test
  VARIABLE  = documents a CMake language variable
  CACHED_VARIABLE = documents a CMake cache variable

Note that unlike :command:`set_property` and :command:`get_property` no
actual scope needs to be given; only the kind of scope is important.

The required ``PROPERTY`` option is immediately followed by the name of
the property being defined.

If the ``INHERITED`` option is given, then the :command:`get_property` command
will chain up to the next higher scope when the requested property is not set
in the scope given to the command.

* ``DIRECTORY`` scope chains to its parent directory's scope, continuing the
  walk up parent directories until a directory has the property set or there
  are no more parents.  If still not found at the top level directory, it
  chains to the ``GLOBAL`` scope.
* ``TARGET``, ``SOURCE`` and ``TEST`` properties chain to ``DIRECTORY`` scope,
  including further chaining up the directories, etc. as needed.

Note that this scope chaining behavior only applies to calls to
:command:`get_property`, :command:`get_directory_property`,
:command:`get_target_property`, :command:`get_source_file_property` and
:command:`get_test_property`.  There is no inheriting behavior when *setting*
properties, so using ``APPEND`` or ``APPEND_STRING`` with the
:command:`set_property` command will not consider inherited values when working
out the contents to append to.

The ``BRIEF_DOCS`` and ``FULL_DOCS`` options are followed by strings to be
associated with the property as its brief and full documentation.
CMake does not use this documentation other than making it available to the
project via corresponding options to the :command:`get_property` command.

.. versionchanged:: 3.23

  The ``BRIEF_DOCS`` and ``FULL_DOCS`` options are optional.

.. versionadded:: 3.23

  The ``INITIALIZE_FROM_VARIABLE`` option specifies a variable from which the
  property should be initialized. It can only be used with target properties.
  The ``<variable>`` name must end with the property name and must not begin
  with ``CMAKE_`` or ``_CMAKE_``. The property name must contain at least one
  underscore. It is recommended that the property name have a prefix specific
  to the project.

Property Redefinition
^^^^^^^^^^^^^^^^^^^^^

Once a property is defined for a particular type of scope, it cannot be
redefined. Attempts to redefine an existing property by calling
:command:`define_property` with the same scope type and property name
will be silently ignored. Defining the same property name for two different
kinds of scope is valid.

:command:`get_property` can be used to determine whether a property is
already defined for a particular kind of scope, and if so, to examine its
definition. For example:

.. code-block:: cmake

  # Initial definition
  define_property(TARGET PROPERTY MY_NEW_PROP
    BRIEF_DOCS "My new custom property"
  )

  # Later examination
  get_property(my_new_prop_exists
    TARGET NONE
    PROPERTY MY_NEW_PROP
    DEFINED
  )

  if(my_new_prop_exists)
    get_property(my_new_prop_docs
      TARGET NONE
      PROPERTY MY_NEW_PROP
      BRIEF_DOCS
    )
    # ${my_new_prop_docs} is now set to "My new custom property"
  endif()

See Also
^^^^^^^^

* :command:`get_property`
* :command:`set_property`



/P/🚀 command/enable_language.rst
===============================================


enable_language
---------------

Enable languages (CXX/C/OBJC/OBJCXX/Fortran/etc)

.. code-block:: cmake

  enable_language(<lang>... [OPTIONAL])

Enables support for the named languages in CMake.  This is the same as
the :command:`project` command but does not create any of the extra
variables that are created by the project command.

.. include:: SUPPORTED_LANGUAGES.txt

This command must be called in file scope, not in a function call.
Furthermore, it must be called in the highest directory common to all
targets using the named language directly for compiling sources or
indirectly through link dependencies.  It is simplest to enable all
needed languages in the top-level directory of a project.

The ``OPTIONAL`` keyword is a placeholder for future implementation and
does not currently work. Instead you can use the :module:`CheckLanguage`
module to verify support before enabling.



/P/🚀 command/enable_testing.rst
==============================================


enable_testing
--------------

Enable testing for current directory and below.

.. code-block:: cmake

  enable_testing()

Enables testing for this directory and below.

This command should be in the source directory root
because ctest expects to find a test file in the build
directory root.

This command is automatically invoked when the :module:`CTest`
module is included, except if the ``BUILD_TESTING`` option is
turned off.

See also the :command:`add_test` command.



/P/🚀 command/export.rst
======================================


export
------

Export targets or packages for outside projects to use them directly
from the current project's build tree, without installation.

See the :command:`install(EXPORT)` command to export targets from an
install tree.

Synopsis
^^^^^^^^

.. parsed-literal::

  export(`TARGETS`_ <target>... [...])
  export(`EXPORT`_ <export-name> [...])
  export(`PACKAGE`_ <PackageName>)
  export(`SETUP`_ <export-name> [...])

Exporting Targets
^^^^^^^^^^^^^^^^^

.. signature::
  export(TARGETS <target>... [...])

.. code-block:: cmake

  export(TARGETS <target>... [NAMESPACE <namespace>]
         [APPEND] FILE <filename> [EXPORT_LINK_INTERFACE_LIBRARIES]
         [CXX_MODULES_DIRECTORY <directory>])

Creates a file ``<filename>`` that may be included by outside projects to
import targets named by ``<target>...`` from the current project's build tree.
This is useful during cross-compiling to build utility executables that can
run on the host platform in one project and then import them into another
project being compiled for the target platform.

The file created by this command is specific to the build tree and
should never be installed.  See the :command:`install(EXPORT)` command to
export targets from an install tree.

The options are:

``NAMESPACE <namespace>``
  Prepend the ``<namespace>`` string to all target names written to the file.

``APPEND``
  Append to the file instead of overwriting it.  This can be used to
  incrementally export multiple targets to the same file.

``EXPORT_LINK_INTERFACE_LIBRARIES``
  Include the contents of the properties named with the pattern
  ``(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_<CONFIG>)?``
  in the export, even when policy :policy:`CMP0022` is NEW.  This is useful
  to support consumers using CMake versions older than 2.8.12.

``CXX_MODULES_DIRECTORY <directory>``
  .. versionadded:: 3.28

  Export C++ module properties to files under the given directory. Each file
  will be named according to the target's export name (without any namespace).
  These files will automatically be included from the export file.

This signature requires all targets to be listed explicitly.  If a library
target is included in the export, but a target to which it links is not
included, the behavior is unspecified.  See the :command:`export(EXPORT)` signature
to automatically export the same targets from the build tree as
:command:`install(EXPORT)` would from an install tree.

.. note::

  :ref:`Object Libraries` under :generator:`Xcode` have special handling if
  multiple architectures are listed in :variable:`CMAKE_OSX_ARCHITECTURES`.
  In this case they will be exported as :ref:`Interface Libraries` with
  no object files available to clients.  This is sufficient to satisfy
  transitive usage requirements of other targets that link to the
  object libraries in their implementation.

This command exports all :ref:`build configurations` from the build tree.
See the :variable:`CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>` variable to map
configurations of dependent projects to the exported configurations.

Exporting Targets to Android.mk
"""""""""""""""""""""""""""""""

.. code-block:: cmake

  export(TARGETS <target>... ANDROID_MK <filename>)

.. versionadded:: 3.7

This signature exports cmake built targets to the android ndk build system
by creating an ``Android.mk`` file that references the prebuilt targets. The
Android NDK supports the use of prebuilt libraries, both static and shared.
This allows cmake to build the libraries of a project and make them available
to an ndk build system complete with transitive dependencies, include flags
and defines required to use the libraries. The signature takes a list of
targets and puts them in the ``Android.mk`` file specified by the
``<filename>`` given. This signature can only be used if policy
:policy:`CMP0022` is NEW for all targets given. A error will be issued if
that policy is set to OLD for one of the targets.

Exporting Targets matching install(EXPORT)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. signature::
  export(EXPORT <export-name> [...])

.. code-block:: cmake

  export(EXPORT <export-name> [NAMESPACE <namespace>] [FILE <filename>]
         [CXX_MODULES_DIRECTORY <directory>] [EXPORT_PACKAGE_DEPENDENCIES])

Creates a file ``<filename>`` that may be included by outside projects to
import targets from the current project's build tree.  This is the same
as the :command:`export(TARGETS)` signature, except that the targets are not
explicitly listed.  Instead, it exports the targets associated with
the installation export ``<export-name>``.  Target installations may be
associated with the export ``<export-name>`` using the ``EXPORT`` option
of the :command:`install(TARGETS)` command.

``EXPORT_PACKAGE_DEPENDENCIES``
  .. note::

    Experimental. Gated by ``CMAKE_EXPERIMENTAL_EXPORT_PACKAGE_DEPENDENCIES``.

  Specify that :command:`find_dependency` calls should be exported. See
  :command:`install(EXPORT)` for details on how this works.

Exporting Packages
^^^^^^^^^^^^^^^^^^

.. signature::
  export(PACKAGE <PackageName>)

.. code-block:: cmake

  export(PACKAGE <PackageName>)

Store the current build directory in the CMake user package registry
for package ``<PackageName>``.  The :command:`find_package` command may consider the
directory while searching for package ``<PackageName>``.  This helps dependent
projects find and use a package from the current project's build tree
without help from the user.  Note that the entry in the package
registry that this command creates works only in conjunction with a
package configuration file (``<PackageName>Config.cmake``) that works with the
build tree. In some cases, for example for packaging and for system
wide installations, it is not desirable to write the user package
registry.

.. versionchanged:: 3.1
  If the :variable:`CMAKE_EXPORT_NO_PACKAGE_REGISTRY` variable
  is enabled, the ``export(PACKAGE)`` command will do nothing.

.. versionchanged:: 3.15
  By default the ``export(PACKAGE)`` command does nothing (see policy
  :policy:`CMP0090`) because populating the user package registry has effects
  outside the source and build trees.  Set the
  :variable:`CMAKE_EXPORT_PACKAGE_REGISTRY` variable to add build directories
  to the CMake user package registry.

Configuring Exports
^^^^^^^^^^^^^^^^^^^

.. signature::
  export(SETUP <export-name> [...])

.. code-block:: cmake

  export(SETUP <export-name>
         [PACKAGE_DEPENDENCY <dep>
          [ENABLED (<bool-true>|<bool-false>|AUTO)]
          [EXTRA_ARGS <args>...]
         ] [...]
         [TARGET <target>
          [XCFRAMEWORK_LOCATION <location>]
         ] [...]
         )

.. versionadded:: 3.29

Configure the parameters of an export. The arguments are as follows:

``PACKAGE_DEPENDENCY <dep>``
  .. note::

    Experimental. Gated by ``CMAKE_EXPERIMENTAL_EXPORT_PACKAGE_DEPENDENCIES``.

  Specify a package dependency to configure. This changes how
  :command:`find_dependency` calls are written during
  :command:`export(EXPORT)` and :command:`install(EXPORT)`. ``<dep>`` is the
  name of a package to export. This argument accepts the following additional
  arguments:

  ``ENABLED``
    Manually control whether or not the dependency is exported. This accepts
    the following values:

    ``<bool-true>``
      Any value that CMake recognizes as "true". Always export the dependency,
      even if no exported targets depend on it. This can be used to manually
      add :command:`find_dependency` calls to the export.

    ``<bool-false>``
      Any value that CMake recognizes as "false". Never export the dependency,
      even if an exported target depends on it.

    ``AUTO``
      Only export the dependency if an exported target depends on it.

  ``EXTRA_ARGS <args>``
    Specify additional arguments to pass to :command:`find_dependency` after
    the ``REQUIRED`` argument.

``TARGET <target>``
  Specify a target to configure in this export. This argument accepts the
  following additional arguments:

  ``XCFRAMEWORK_LOCATION``
    Specify the location of an ``.xcframework`` which contains the library from
    this target. If specified, the generated code will check to see if the
    ``.xcframework`` exists, and if it does, it will use the ``.xcframework``
    as its imported location instead of the installed library.



/P/🚀 command/fltk_wrap_ui.rst
============================================


fltk_wrap_ui
------------

Create FLTK user interfaces Wrappers.

.. code-block:: cmake

  fltk_wrap_ui(resultingLibraryName source1
               source2 ... sourceN )

Produce .h and .cxx files for all the .fl and .fld files listed.  The
resulting .h and .cxx files will be added to a variable named
``resultingLibraryName_FLTK_UI_SRCS`` which should be added to your
library.



/P/🚀 command/get_source_file_property.rst
========================================================


get_source_file_property
------------------------

Get a property for a source file.

.. code-block:: cmake

  get_source_file_property(<variable> <file>
                           [DIRECTORY <dir> | TARGET_DIRECTORY <target>]
                           <property>)

Gets a property from a source file.  The value of the property is stored in
the specified ``<variable>``.  If the ``<file>`` is not a source file, or the
source property is not found, ``<variable>`` will be set to ``NOTFOUND``.
If the source property was defined to be an ``INHERITED`` property (see
:command:`define_property`), the search will include the relevant parent
scopes, as described for the :command:`define_property` command.

By default, the source file's property will be read from the current source
directory's scope.

.. versionadded:: 3.18
  Directory scope can be overridden with one of the following sub-options:

  ``DIRECTORY <dir>``
    The source file property will be read from the ``<dir>`` directory's
    scope.  CMake must already know about that source directory, either by
    having added it through a call to :command:`add_subdirectory` or ``<dir>``
    being the top level source directory.  Relative paths are treated as
    relative to the current source directory.

  ``TARGET_DIRECTORY <target>``
    The source file property will be read from the directory scope in which
    ``<target>`` was created (``<target>`` must therefore already exist).

Use :command:`set_source_files_properties` to set property values.  Source
file properties usually control how the file is built. One property that is
always there is :prop_sf:`LOCATION`.

.. note::

  The :prop_sf:`GENERATED` source file property may be globally visible.
  See its documentation for details.

See Also
^^^^^^^^

* :command:`define_property`
* the more general :command:`get_property` command
* :command:`set_source_files_properties`



/P/🚀 command/get_target_property.rst
===================================================


get_target_property
-------------------

Get a property from a target.

.. code-block:: cmake

  get_target_property(<variable> <target> <property>)

Get a property from a target.  The value of the property is stored in the
specified ``<variable>``.  If the target property is not found, ``<variable>``
will be set to ``<variable>-NOTFOUND``.  If the target property was defined to
be an ``INHERITED`` property (see :command:`define_property`), the search will
include the relevant parent scopes, as described for the
:command:`define_property` command.

Use :command:`set_target_properties` to set target property values.
Properties are usually used to control how a target is built, but some
query the target instead.  This command can get properties for any
target so far created.  The targets do not need to be in the current
``CMakeLists.txt`` file.

See Also
^^^^^^^^

* :command:`define_property`
* the more general :command:`get_property` command
* :command:`set_target_properties`
* :ref:`Target Properties` for the list of properties known to CMake



/P/🚀 command/get_test_property.rst
=================================================


get_test_property
-----------------

Get a property of the test.

.. code-block:: cmake

  get_test_property(<test> <property> [DIRECTORY <dir>] <variable>)

Get a property from the test.  The value of the property is stored in
the specified ``<variable>``.  If the ``<test>`` is not defined, or the
test property is not found, ``<variable>`` will be set to ``NOTFOUND``.
If the test property was defined to be an ``INHERITED`` property (see
:command:`define_property`), the search will include the relevant parent
scopes, as described for the :command:`define_property` command.

For a list of standard properties you can type
:option:`cmake --help-property-list`.

.. versionadded:: 3.28
  Directory scope can be overridden with the following sub-option:

  ``DIRECTORY <dir>``
    The test property will be read from the ``<dir>`` directory's
    scope.  CMake must already know about that source directory, either by
    having added it through a call to :command:`add_subdirectory` or ``<dir>``
    being the top level source directory.  Relative paths are treated as
    relative to the current source directory. ``<dir>`` may reference a binary
    directory.

See Also
^^^^^^^^

* :command:`define_property`
* the more general :command:`get_property` command



/P/🚀 command/include_directories.rst
===================================================


include_directories
-------------------

Add include directories to the build.

.. code-block:: cmake

  include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])

Add the given directories to those the compiler uses to search for
include files.  Relative paths are interpreted as relative to the
current source directory.

The include directories are added to the :prop_dir:`INCLUDE_DIRECTORIES`
directory property for the current ``CMakeLists`` file.  They are also
added to the :prop_tgt:`INCLUDE_DIRECTORIES` target property for each
target in the current ``CMakeLists`` file.  The target property values
are the ones used by the generators.

By default the directories specified are appended onto the current list of
directories.  This default behavior can be changed by setting
:variable:`CMAKE_INCLUDE_DIRECTORIES_BEFORE` to ``ON``.  By using
``AFTER`` or ``BEFORE`` explicitly, you can select between appending and
prepending, independent of the default.

If the ``SYSTEM`` option is given, the compiler will be told the
directories are meant as system include directories on some platforms.
Signaling this setting might achieve effects such as the compiler
skipping warnings, or these fixed-install system files not being
considered in dependency calculations - see compiler docs.

.. |command_name| replace:: ``include_directories``
.. include:: GENEX_NOTE.txt

.. note::

  Prefer the :command:`target_include_directories` command to add include
  directories to individual targets and optionally propagate/export them
  to dependents.

See Also
^^^^^^^^

* :command:`target_include_directories`



/P/🚀 command/include_external_msproject.rst
==========================================================


include_external_msproject
--------------------------

Include an external Microsoft project file in a workspace.

.. code-block:: cmake

  include_external_msproject(projectname location
                             [TYPE projectTypeGUID]
                             [GUID projectGUID]
                             [PLATFORM platformName]
                             dep1 dep2 ...)

Includes an external Microsoft project in the generated workspace
file.  Currently does nothing on UNIX.  This will create a target
named ``[projectname]``.  This can be used in the :command:`add_dependencies`
command to make things depend on the external project.

``TYPE``, ``GUID`` and ``PLATFORM`` are optional parameters that allow one to
specify the type of project, id (``GUID``) of the project and the name of
the target platform.  This is useful for projects requiring values
other than the default (e.g.  WIX projects).

.. versionadded:: 3.9
  If the imported project has different configuration names than the
  current project, set the :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>`
  target property to specify the mapping.



/P/🚀 command/include_regular_expression.rst
==========================================================


include_regular_expression
--------------------------

Set the regular expression used for dependency checking.

.. code-block:: cmake

  include_regular_expression(regex_match [regex_complain])

Sets the regular expressions used in dependency checking.  Only files
matching ``regex_match`` will be traced as dependencies.  Only files
matching ``regex_complain`` will generate warnings if they cannot be found
(standard header paths are not searched).  The defaults are:

::

  regex_match    = "^.*$" (match everything)
  regex_complain = "^$" (match empty string only)



/P/🚀 command/install.rst
=======================================


install
-------

Specify rules to run at install time.

Synopsis
^^^^^^^^

.. parsed-literal::

  install(`TARGETS`_ <target>... [...])
  install(`IMPORTED_RUNTIME_ARTIFACTS`_ <target>... [...])
  install({`FILES`_ | `PROGRAMS`_} <file>... [...])
  install(`DIRECTORY`_ <dir>... [...])
  install(`SCRIPT`_ <file> [...])
  install(`CODE`_ <code> [...])
  install(`EXPORT`_ <export-name> [...])
  install(`RUNTIME_DEPENDENCY_SET`_ <set-name> [...])

Introduction
^^^^^^^^^^^^

This command generates installation rules for a project.  Install rules
specified by calls to the ``install()`` command within a source directory
are executed in order during installation.

.. versionchanged:: 3.14
  Install rules in subdirectories
  added by calls to the :command:`add_subdirectory` command are interleaved
  with those in the parent directory to run in the order declared (see
  policy :policy:`CMP0082`).

.. versionchanged:: 3.22
  The environment variable :envvar:`CMAKE_INSTALL_MODE` can override the
  default copying behavior of ``install()``.

.. _`common options`:

There are multiple signatures for this command.  Some of them define
installation options for files and targets.  Options common to
multiple signatures are covered here but they are valid only for
signatures that specify them.  The common options are:

``DESTINATION <dir>``
  Specify the directory on disk to which a file will be installed.
  ``<dir>`` should be a relative path.  An absolute path is allowed,
  but not recommended.

  When a relative path is given it is interpreted relative to the value
  of the :variable:`CMAKE_INSTALL_PREFIX` variable.
  The prefix can be relocated at install time using the ``DESTDIR``
  mechanism explained in the :variable:`CMAKE_INSTALL_PREFIX` variable
  documentation.

  As absolute paths do not work with the ``cmake --install`` command's
  :option:`--prefix <cmake--install --prefix>` option, or with the
  :manual:`cpack <cpack(1)>` installer generators, it is strongly recommended
  to use relative paths throughout for best support by package maintainers.
  In particular, there is no need to make paths absolute by prepending
  :variable:`CMAKE_INSTALL_PREFIX`; this prefix is used by default if
  the DESTINATION is a relative path.

  If an absolute path (with a leading slash or drive letter) is given
  it is used verbatim.

``PERMISSIONS <permission>...``
  Specify permissions for installed files.  Valid permissions are
  ``OWNER_READ``, ``OWNER_WRITE``, ``OWNER_EXECUTE``, ``GROUP_READ``,
  ``GROUP_WRITE``, ``GROUP_EXECUTE``, ``WORLD_READ``, ``WORLD_WRITE``,
  ``WORLD_EXECUTE``, ``SETUID``, and ``SETGID``.  Permissions that do
  not make sense on certain platforms are ignored on those platforms.

  If this option is used multiple times in a single call, its list
  of permissions accumulates.  If an :command:`install(TARGETS)` call
  uses `<artifact-kind>`_ arguments, a separate list of permissions
  is accumulated for each kind of artifact.

``CONFIGURATIONS <config>...``
  Specify a list of build configurations for which the install rule
  applies (Debug, Release, etc.).

  If this option is used multiple times in a single call, its list
  of configurations accumulates.  If an :command:`install(TARGETS)`
  call uses `<artifact-kind>`_ arguments, a separate list of
  configurations is accumulated for each kind of artifact.

``COMPONENT <component>``
  Specify an installation component name with which the install rule
  is associated, such as ``Runtime`` or ``Development``.  During
  component-specific installation only install rules associated with
  the given component name will be executed.  During a full installation
  all components are installed unless marked with ``EXCLUDE_FROM_ALL``.
  If ``COMPONENT`` is not provided a default component "Unspecified" is
  created.  The default component name may be controlled with the
  :variable:`CMAKE_INSTALL_DEFAULT_COMPONENT_NAME` variable.

``EXCLUDE_FROM_ALL``
  .. versionadded:: 3.6

  Specify that the file is excluded from a full installation and only
  installed as part of a component-specific installation

``RENAME <name>``
  Specify a name for an installed file that may be different from the
  original file.  Renaming is allowed only when a single file is
  installed by the command.

``OPTIONAL``
  Specify that it is not an error if the file to be installed does
  not exist.

.. versionadded:: 3.1
  Command signatures that install files may print messages during
  installation.  Use the :variable:`CMAKE_INSTALL_MESSAGE` variable
  to control which messages are printed.

.. versionadded:: 3.11
  Many of the ``install()`` variants implicitly create the directories
  containing the installed files. If
  :variable:`CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS` is set, these
  directories will be created with the permissions specified. Otherwise,
  they will be created according to the uname rules on Unix-like platforms.
  Windows platforms are unaffected.

Signatures
^^^^^^^^^^

.. signature::
  install(TARGETS <target>... [...])

  Install target :ref:`Output Artifacts` and associated files:

  .. code-block:: cmake

    install(TARGETS <target>... [EXPORT <export-name>]
            [RUNTIME_DEPENDENCIES <arg>...|RUNTIME_DEPENDENCY_SET <set-name>]
            [<artifact-option>...]
            [<artifact-kind> <artifact-option>...]...
            [INCLUDES DESTINATION [<dir> ...]]
            )

  where ``<artifact-option>...`` group may contain:

  .. code-block:: cmake

    [DESTINATION <dir>]
    [PERMISSIONS <permission>...]
    [CONFIGURATIONS <config>...]
    [COMPONENT <component>]
    [NAMELINK_COMPONENT <component>]
    [OPTIONAL] [EXCLUDE_FROM_ALL]
    [NAMELINK_ONLY|NAMELINK_SKIP]

  The first ``<artifact-option>...`` group applies to target
  :ref:`Output Artifacts` that do not have a dedicated group specified
  later in the same call.

  .. _`<artifact-kind>`:

  Each ``<artifact-kind> <artifact-option>...`` group applies to
  :ref:`Output Artifacts` of the specified artifact kind:

  ``ARCHIVE``
    Target artifacts of this kind include:

    * *Static libraries*
      (except on macOS when marked as ``FRAMEWORK``, see below);
    * *DLL import libraries*
      (on all Windows-based systems including Cygwin; they have extension
      ``.lib``, in contrast to the ``.dll`` libraries that go to ``RUNTIME``);
    * On AIX, the *linker import file* created for executables with
      :prop_tgt:`ENABLE_EXPORTS` enabled.
    * On macOS, the *linker import file* created for shared libraries with
      :prop_tgt:`ENABLE_EXPORTS` enabled (except when marked as ``FRAMEWORK``,
      see below).

  ``LIBRARY``
    Target artifacts of this kind include:

    * *Shared libraries*, except

      - DLLs (these go to ``RUNTIME``, see below),
      - on macOS when marked as ``FRAMEWORK`` (see below).

  ``RUNTIME``
    Target artifacts of this kind include:

    * *Executables*
      (except on macOS when marked as ``MACOSX_BUNDLE``, see ``BUNDLE`` below);
    * DLLs (on all Windows-based systems including Cygwin; note that the
      accompanying import libraries are of kind ``ARCHIVE``).

  ``OBJECTS``
    .. versionadded:: 3.9

    Object files associated with *object libraries*.

  ``FRAMEWORK``
    Both static and shared libraries marked with the ``FRAMEWORK``
    property are treated as ``FRAMEWORK`` targets on macOS.

  ``BUNDLE``
    Executables marked with the :prop_tgt:`MACOSX_BUNDLE` property are treated as
    ``BUNDLE`` targets on macOS.

  ``PUBLIC_HEADER``
    Any :prop_tgt:`PUBLIC_HEADER` files associated with a library are installed in
    the destination specified by the ``PUBLIC_HEADER`` argument on non-Apple
    platforms. Rules defined by this argument are ignored for :prop_tgt:`FRAMEWORK`
    libraries on Apple platforms because the associated files are installed
    into the appropriate locations inside the framework folder. See
    :prop_tgt:`PUBLIC_HEADER` for details.

  ``PRIVATE_HEADER``
    Similar to ``PUBLIC_HEADER``, but for ``PRIVATE_HEADER`` files. See
    :prop_tgt:`PRIVATE_HEADER` for details.

  ``RESOURCE``
    Similar to ``PUBLIC_HEADER`` and ``PRIVATE_HEADER``, but for
    ``RESOURCE`` files. See :prop_tgt:`RESOURCE` for details.

  ``FILE_SET <set-name>``
    .. versionadded:: 3.23

    File sets are defined by the :command:`target_sources(FILE_SET)` command.
    If the file set ``<set-name>`` exists and is ``PUBLIC`` or ``INTERFACE``,
    any files in the set are installed under the destination (see below).
    The directory structure relative to the file set's base directories is
    preserved. For example, a file added to the file set as
    ``/blah/include/myproj/here.h`` with a base directory ``/blah/include``
    would be installed to ``myproj/here.h`` below the destination.

  ``CXX_MODULES_BMI``
    .. versionadded:: 3.28

    Any module files from C++ modules from ``PUBLIC`` sources in a file set of
    type ``CXX_MODULES`` will be installed to the given ``DESTINATION``. All
    modules are placed directly in the destination as no directory structure is
    derived from the names of the modules. An empty ``DESTINATION`` may be used
    to suppress installing these files (for use in generic code).

  For regular executables, static libraries and shared libraries, the
  ``DESTINATION`` argument is not required.  For these target types, when
  ``DESTINATION`` is omitted, a default destination will be taken from the
  appropriate variable from :module:`GNUInstallDirs`, or set to a built-in
  default value if that variable is not defined.  The same is true for file
  sets, and the public and private headers associated with the installed
  targets through the :prop_tgt:`PUBLIC_HEADER` and :prop_tgt:`PRIVATE_HEADER`
  target properties. A destination must always be provided for module libraries,
  Apple bundles and frameworks.  A destination can be omitted for interface and
  object libraries, but they are handled differently (see the discussion of this
  topic toward the end of this section).

  For shared libraries on DLL platforms, if neither ``RUNTIME`` nor ``ARCHIVE``
  destinations are specified, both the ``RUNTIME`` and ``ARCHIVE`` components are
  installed to their default destinations. If either a ``RUNTIME`` or ``ARCHIVE``
  destination is specified, the component is installed to that destination, and
  the other component is not installed. If both ``RUNTIME`` and ``ARCHIVE``
  destinations are specified, then both components are installed to their
  respective destinations.

  The following table shows the target types with their associated variables and
  built-in defaults that apply when no destination is given:

  =============================== =============================== ======================
     Target Type                      GNUInstallDirs Variable        Built-In Default
  =============================== =============================== ======================
  ``RUNTIME``                     ``${CMAKE_INSTALL_BINDIR}``     ``bin``
  ``LIBRARY``                     ``${CMAKE_INSTALL_LIBDIR}``     ``lib``
  ``ARCHIVE``                     ``${CMAKE_INSTALL_LIBDIR}``     ``lib``
  ``PRIVATE_HEADER``              ``${CMAKE_INSTALL_INCLUDEDIR}`` ``include``
  ``PUBLIC_HEADER``               ``${CMAKE_INSTALL_INCLUDEDIR}`` ``include``
  ``FILE_SET`` (type ``HEADERS``) ``${CMAKE_INSTALL_INCLUDEDIR}`` ``include``
  =============================== =============================== ======================

  Projects wishing to follow the common practice of installing headers into a
  project-specific subdirectory may prefer using file sets with appropriate
  paths and base directories. Otherwise, they must provide a ``DESTINATION``
  instead of being able to rely on the above (see next example below).

  To make packages compliant with distribution filesystem layout policies, if
  projects must specify a ``DESTINATION``, it is strongly recommended that they use
  a path that begins with the appropriate relative :module:`GNUInstallDirs` variable.
  This allows package maintainers to control the install destination by setting
  the appropriate cache variables.  The following example shows a static library
  being installed to the default destination provided by
  :module:`GNUInstallDirs`, but with its headers installed to a project-specific
  subdirectory without using file sets:

  .. code-block:: cmake

    add_library(mylib STATIC ...)
    set_target_properties(mylib PROPERTIES PUBLIC_HEADER mylib.h)
    include(GNUInstallDirs)
    install(TARGETS mylib
            PUBLIC_HEADER
              DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/myproj
    )

  In addition to the `common options`_ listed above, each target can accept
  the following additional arguments:

  ``NAMELINK_COMPONENT``
    .. versionadded:: 3.12

    On some platforms a versioned shared library has a symbolic link such
    as::

      lib<name>.so -> lib<name>.so.1

    where ``lib<name>.so.1`` is the soname of the library and ``lib<name>.so``
    is a "namelink" allowing linkers to find the library when given
    ``-l<name>``. The ``NAMELINK_COMPONENT`` option is similar to the
    ``COMPONENT`` option, but it changes the installation component of a shared
    library namelink if one is generated. If not specified, this defaults to the
    value of ``COMPONENT``. It is an error to use this parameter outside of a
    ``LIBRARY`` block.

    .. versionchanged:: 3.27
      This parameter is also usable for an ``ARCHIVE`` block to manage
      the linker import file created, on macOS, for shared libraries with
      :prop_tgt:`ENABLE_EXPORTS` enabled.

    See the `Example: Install Targets with Per-Artifact Components`_
    for an example using ``NAMELINK_COMPONENT``.

    This option is typically used for package managers that have separate
    runtime and development packages. For example, on Debian systems, the
    library is expected to be in the runtime package, and the headers and
    namelink are expected to be in the development package.

    See the :prop_tgt:`VERSION` and :prop_tgt:`SOVERSION` target properties for
    details on creating versioned shared libraries.

  ``NAMELINK_ONLY``
    This option causes the installation of only the namelink when a library
    target is installed. On platforms where versioned shared libraries do not
    have namelinks or when a library is not versioned, the ``NAMELINK_ONLY``
    option installs nothing. It is an error to use this parameter outside of a
    ``LIBRARY`` block.

    .. versionchanged:: 3.27
      This parameter is also usable for an ``ARCHIVE`` block to manage
      the linker import file created, on macOS, for shared libraries with
      :prop_tgt:`ENABLE_EXPORTS` enabled.

    When ``NAMELINK_ONLY`` is given, either ``NAMELINK_COMPONENT`` or
    ``COMPONENT`` may be used to specify the installation component of the
    namelink, but ``COMPONENT`` should generally be preferred.

  ``NAMELINK_SKIP``
    Similar to ``NAMELINK_ONLY``, but it has the opposite effect: it causes the
    installation of library files other than the namelink when a library target
    is installed. When neither ``NAMELINK_ONLY`` or ``NAMELINK_SKIP`` are given,
    both portions are installed. On platforms where versioned shared libraries
    do not have symlinks or when a library is not versioned, ``NAMELINK_SKIP``
    installs the library. It is an error to use this parameter outside of a
    ``LIBRARY`` block.

    .. versionchanged:: 3.27
      This parameter is also usable for an ``ARCHIVE`` block to manage
      the linker import file created, on macOS, for shared libraries with
      :prop_tgt:`ENABLE_EXPORTS` enabled.

    If ``NAMELINK_SKIP`` is specified, ``NAMELINK_COMPONENT`` has no effect. It
    is not recommended to use ``NAMELINK_SKIP`` in conjunction with
    ``NAMELINK_COMPONENT``.

  The :command:`install(TARGETS)` command can also accept the following
  options at the top level:

  ``EXPORT``
    This option associates the installed target files with an export called
    ``<export-name>``.  It must appear before any target options.
    To actually install the export file itself, call
    :command:`install(EXPORT)`, documented below.
    See documentation of the :prop_tgt:`EXPORT_NAME` target property to change
    the name of the exported target.

    If ``EXPORT`` is used and the targets include ``PUBLIC`` or ``INTERFACE``
    file sets, all of them must be specified with ``FILE_SET`` arguments. All
    ``PUBLIC`` or ``INTERFACE`` file sets associated with a target are included
    in the export.

  ``INCLUDES DESTINATION``
    This option specifies a list of directories which will be added to the
    :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` target property of the
    ``<targets>`` when exported by the :command:`install(EXPORT)` command.
    If a relative path is specified, it is treated as relative to the
    :genex:`$<INSTALL_PREFIX>`.

  ``RUNTIME_DEPENDENCY_SET <set-name>``
    .. versionadded:: 3.21

    This option causes all runtime dependencies of installed executable, shared
    library, and module targets to be added to the specified runtime dependency
    set. This set can then be installed with an
    :command:`install(RUNTIME_DEPENDENCY_SET)` command.

    This keyword and the ``RUNTIME_DEPENDENCIES`` keyword are mutually
    exclusive.

  ``RUNTIME_DEPENDENCIES <arg>...``
    .. versionadded:: 3.21

    This option causes all runtime dependencies of installed executable, shared
    library, and module targets to be installed along with the targets
    themselves. The ``RUNTIME``, ``LIBRARY``, ``FRAMEWORK``, and generic
    arguments are used to determine the properties (``DESTINATION``,
    ``COMPONENT``, etc.) of the installation of these dependencies.

    ``RUNTIME_DEPENDENCIES`` is semantically equivalent to the following pair
    of calls:

    .. code-block:: cmake

      install(TARGETS ... RUNTIME_DEPENDENCY_SET <set-name>)
      install(RUNTIME_DEPENDENCY_SET <set-name> <arg>...)

    where ``<set-name>`` will be a randomly generated set name.
    ``<arg>...`` may include any of the following keywords supported by
    the :command:`install(RUNTIME_DEPENDENCY_SET)` command:

    * ``DIRECTORIES``
    * ``PRE_INCLUDE_REGEXES``
    * ``PRE_EXCLUDE_REGEXES``
    * ``POST_INCLUDE_REGEXES``
    * ``POST_EXCLUDE_REGEXES``
    * ``POST_INCLUDE_FILES``
    * ``POST_EXCLUDE_FILES``

    The ``RUNTIME_DEPENDENCIES`` and ``RUNTIME_DEPENDENCY_SET`` keywords are
    mutually exclusive.

  :ref:`Interface Libraries` may be listed among the targets to install.
  They install no artifacts but will be included in an associated ``EXPORT``.
  If :ref:`Object Libraries` are listed but given no destination for their
  object files, they will be exported as :ref:`Interface Libraries`.
  This is sufficient to satisfy transitive usage requirements of other
  targets that link to the object libraries in their implementation.

  Installing a target with the :prop_tgt:`EXCLUDE_FROM_ALL` target property
  set to ``TRUE`` has undefined behavior.

  .. versionadded:: 3.3
    An install destination given as a ``DESTINATION`` argument may
    use "generator expressions" with the syntax ``$<...>``.  See the
    :manual:`cmake-generator-expressions(7)` manual for available expressions.

  .. versionadded:: 3.13
    :command:`install(TARGETS)` can install targets that were created in
    other directories.  When using such cross-directory install rules, running
    ``make install`` (or similar) from a subdirectory will not guarantee that
    targets from other directories are up-to-date.  You can use
    :command:`target_link_libraries` or :command:`add_dependencies`
    to ensure that such out-of-directory targets are built before the
    subdirectory-specific install rules are run.

.. signature::
  install(IMPORTED_RUNTIME_ARTIFACTS <target>... [...])

  .. versionadded:: 3.21

  Install runtime artifacts of imported targets:

  .. code-block:: cmake

    install(IMPORTED_RUNTIME_ARTIFACTS <target>...
            [RUNTIME_DEPENDENCY_SET <set-name>]
            [[LIBRARY|RUNTIME|FRAMEWORK|BUNDLE]
             [DESTINATION <dir>]
             [PERMISSIONS <permission>...]
             [CONFIGURATIONS <config>...]
             [COMPONENT <component>]
             [OPTIONAL] [EXCLUDE_FROM_ALL]
            ] [...]
            )

  The ``IMPORTED_RUNTIME_ARTIFACTS`` form specifies rules for installing the
  runtime artifacts of imported targets. Projects may do this if they want to
  bundle outside executables or modules inside their installation. The
  ``LIBRARY``, ``RUNTIME``, ``FRAMEWORK``, and ``BUNDLE`` arguments have the
  same semantics that they do in the `TARGETS`_ mode. Only the runtime artifacts
  of imported targets are installed (except in the case of :prop_tgt:`FRAMEWORK`
  libraries, :prop_tgt:`MACOSX_BUNDLE` executables, and :prop_tgt:`BUNDLE`
  CFBundles.) For example, headers and import libraries associated with DLLs are
  not installed. In the case of :prop_tgt:`FRAMEWORK` libraries,
  :prop_tgt:`MACOSX_BUNDLE` executables, and :prop_tgt:`BUNDLE` CFBundles, the
  entire directory is installed.

  The ``RUNTIME_DEPENDENCY_SET`` option causes the runtime artifacts of the
  imported executable, shared library, and module library ``targets`` to be
  added to the ``<set-name>`` runtime dependency set. This set can then be
  installed with an :command:`install(RUNTIME_DEPENDENCY_SET)` command.

.. signature::
  install(FILES <file>... [...])
  install(PROGRAMS <program>... [...])

  .. note::

    If installing header files, consider using file sets defined by
    :command:`target_sources(FILE_SET)` instead. File sets associate
    headers with a target and they install as part of the target.

  Install files or programs:

  .. code-block:: cmake

    install(<FILES|PROGRAMS> <file>...
            TYPE <type> | DESTINATION <dir>
            [PERMISSIONS <permission>...]
            [CONFIGURATIONS <config>...]
            [COMPONENT <component>]
            [RENAME <name>] [OPTIONAL] [EXCLUDE_FROM_ALL])

  The ``FILES`` form specifies rules for installing files for a project.
  File names given as relative paths are interpreted with respect to the
  current source directory.  Files installed by this form are by default
  given permissions ``OWNER_WRITE``, ``OWNER_READ``, ``GROUP_READ``, and
  ``WORLD_READ`` if no ``PERMISSIONS`` argument is given.

  The ``PROGRAMS`` form is identical to the ``FILES`` form except that the
  default permissions for the installed file also include ``OWNER_EXECUTE``,
  ``GROUP_EXECUTE``, and ``WORLD_EXECUTE``.  This form is intended to install
  programs that are not targets, such as shell scripts.  Use the ``TARGETS``
  form to install targets built within the project.

  The list of ``files...`` given to ``FILES`` or ``PROGRAMS`` may use
  "generator expressions" with the syntax ``$<...>``.  See the
  :manual:`cmake-generator-expressions(7)` manual for available expressions.
  However, if any item begins in a generator expression it must evaluate
  to a full path.

  Either a ``TYPE`` or a ``DESTINATION`` must be provided, but not both.
  A ``TYPE`` argument specifies the generic file type of the files being
  installed.  A destination will then be set automatically by taking the
  corresponding variable from :module:`GNUInstallDirs`, or by using a
  built-in default if that variable is not defined.  See the table below for
  the supported file types and their corresponding variables and built-in
  defaults.  Projects can provide a ``DESTINATION`` argument instead of a
  file type if they wish to explicitly define the install destination.

  ======================= ================================== =========================
     ``TYPE`` Argument         GNUInstallDirs Variable           Built-In Default
  ======================= ================================== =========================
  ``BIN``                 ``${CMAKE_INSTALL_BINDIR}``        ``bin``
  ``SBIN``                ``${CMAKE_INSTALL_SBINDIR}``       ``sbin``
  ``LIB``                 ``${CMAKE_INSTALL_LIBDIR}``        ``lib``
  ``INCLUDE``             ``${CMAKE_INSTALL_INCLUDEDIR}``    ``include``
  ``SYSCONF``             ``${CMAKE_INSTALL_SYSCONFDIR}``    ``etc``
  ``SHAREDSTATE``         ``${CMAKE_INSTALL_SHARESTATEDIR}`` ``com``
  ``LOCALSTATE``          ``${CMAKE_INSTALL_LOCALSTATEDIR}`` ``var``
  ``RUNSTATE``            ``${CMAKE_INSTALL_RUNSTATEDIR}``   ``<LOCALSTATE dir>/run``
  ``DATA``                ``${CMAKE_INSTALL_DATADIR}``       ``<DATAROOT dir>``
  ``INFO``                ``${CMAKE_INSTALL_INFODIR}``       ``<DATAROOT dir>/info``
  ``LOCALE``              ``${CMAKE_INSTALL_LOCALEDIR}``     ``<DATAROOT dir>/locale``
  ``MAN``                 ``${CMAKE_INSTALL_MANDIR}``        ``<DATAROOT dir>/man``
  ``DOC``                 ``${CMAKE_INSTALL_DOCDIR}``        ``<DATAROOT dir>/doc``
  ======================= ================================== =========================

  Projects wishing to follow the common practice of installing headers into a
  project-specific subdirectory will need to provide a destination rather than
  rely on the above. Using file sets for headers instead of ``install(FILES)``
  would be even better (see :command:`target_sources(FILE_SET)`).

  Note that some of the types' built-in defaults use the ``DATAROOT`` directory as
  a prefix. The ``DATAROOT`` prefix is calculated similarly to the types, with
  ``CMAKE_INSTALL_DATAROOTDIR`` as the variable and ``share`` as the built-in
  default. You cannot use ``DATAROOT`` as a ``TYPE`` parameter; please use
  ``DATA`` instead.

  To make packages compliant with distribution filesystem layout policies, if
  projects must specify a ``DESTINATION``, it is strongly recommended that they use
  a path that begins with the appropriate relative :module:`GNUInstallDirs` variable.
  This allows package maintainers to control the install destination by setting
  the appropriate cache variables.  The following example shows how to follow
  this advice while installing an image to a project-specific documentation
  subdirectory:

  .. code-block:: cmake

    include(GNUInstallDirs)
    install(FILES logo.png
            DESTINATION ${CMAKE_INSTALL_DOCDIR}/myproj
    )

  .. versionadded:: 3.4
    An install destination given as a ``DESTINATION`` argument may
    use "generator expressions" with the syntax ``$<...>``.  See the
    :manual:`cmake-generator-expressions(7)` manual for available expressions.

  .. versionadded:: 3.20
    An install rename given as a ``RENAME`` argument may
    use "generator expressions" with the syntax ``$<...>``.  See the
    :manual:`cmake-generator-expressions(7)` manual for available expressions.

.. signature::
  install(DIRECTORY <dir>... [...])

  .. note::

    To install a directory sub-tree of headers, consider using file sets
    defined by :command:`target_sources(FILE_SET)` instead. File sets not only
    preserve directory structure, they also associate headers with a target
    and install as part of the target.

  Install the contents of one or more directories:

  .. code-block:: cmake

    install(DIRECTORY dirs...
            TYPE <type> | DESTINATION <dir>
            [FILE_PERMISSIONS <permission>...]
            [DIRECTORY_PERMISSIONS <permission>...]
            [USE_SOURCE_PERMISSIONS] [OPTIONAL] [MESSAGE_NEVER]
            [CONFIGURATIONS <config>...]
            [COMPONENT <component>] [EXCLUDE_FROM_ALL]
            [FILES_MATCHING]
            [[PATTERN <pattern> | REGEX <regex>]
             [EXCLUDE] [PERMISSIONS <permission>...]] [...])

  The ``DIRECTORY`` form installs contents of one or more directories to a
  given destination.  The directory structure is copied verbatim to the
  destination.  The last component of each directory name is appended to
  the destination directory but a trailing slash may be used to avoid
  this because it leaves the last component empty.  Directory names
  given as relative paths are interpreted with respect to the current
  source directory.  If no input directory names are given the
  destination directory will be created but nothing will be installed
  into it.  The ``FILE_PERMISSIONS`` and ``DIRECTORY_PERMISSIONS`` options
  specify permissions given to files and directories in the destination.
  If ``USE_SOURCE_PERMISSIONS`` is specified and ``FILE_PERMISSIONS`` is not,
  file permissions will be copied from the source directory structure.
  If no permissions are specified files will be given the default
  permissions specified in the ``FILES`` form of the command, and the
  directories will be given the default permissions specified in the
  ``PROGRAMS`` form of the command.

  .. versionadded:: 3.1
    The ``MESSAGE_NEVER`` option disables file installation status output.

  Installation of directories may be controlled with fine granularity
  using the ``PATTERN`` or ``REGEX`` options.  These "match" options specify a
  globbing pattern or regular expression to match directories or files
  encountered within input directories.  They may be used to apply
  certain options (see below) to a subset of the files and directories
  encountered.  The full path to each input file or directory (with
  forward slashes) is matched against the expression.  A ``PATTERN`` will
  match only complete file names: the portion of the full path matching
  the pattern must occur at the end of the file name and be preceded by
  a slash.  A ``REGEX`` will match any portion of the full path but it may
  use ``/`` and ``$`` to simulate the ``PATTERN`` behavior.  By default all
  files and directories are installed whether or not they are matched.
  The ``FILES_MATCHING`` option may be given before the first match option
  to disable installation of files (but not directories) not matched by
  any expression.  For example, the code

  .. code-block:: cmake

    install(DIRECTORY src/ DESTINATION doc/myproj
            FILES_MATCHING PATTERN "*.png")

  will extract and install images from a source tree.

  Some options may follow a ``PATTERN`` or ``REGEX`` expression as described
  under :ref:`string(REGEX) <Regex Specification>` and are applied
  only to files or directories matching them.  The ``EXCLUDE`` option will
  skip the matched file or directory.  The ``PERMISSIONS`` option overrides
  the permissions setting for the matched file or directory.  For
  example the code

  .. code-block:: cmake

    install(DIRECTORY icons scripts/ DESTINATION share/myproj
            PATTERN "CVS" EXCLUDE
            PATTERN "scripts/*"
            PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ
                        GROUP_EXECUTE GROUP_READ)

  will install the ``icons`` directory to ``share/myproj/icons`` and the
  ``scripts`` directory to ``share/myproj``.  The icons will get default
  file permissions, the scripts will be given specific permissions, and any
  ``CVS`` directories will be excluded.

  Either a ``TYPE`` or a ``DESTINATION`` must be provided, but not both.
  A ``TYPE`` argument specifies the generic file type of the files within the
  listed directories being installed.  A destination will then be set
  automatically by taking the corresponding variable from
  :module:`GNUInstallDirs`, or by using a built-in default if that variable
  is not defined.  See the table below for the supported file types and their
  corresponding variables and built-in defaults.  Projects can provide a
  ``DESTINATION`` argument instead of a file type if they wish to explicitly
  define the install destination.

  ======================= ================================== =========================
     ``TYPE`` Argument         GNUInstallDirs Variable           Built-In Default
  ======================= ================================== =========================
  ``BIN``                 ``${CMAKE_INSTALL_BINDIR}``        ``bin``
  ``SBIN``                ``${CMAKE_INSTALL_SBINDIR}``       ``sbin``
  ``LIB``                 ``${CMAKE_INSTALL_LIBDIR}``        ``lib``
  ``INCLUDE``             ``${CMAKE_INSTALL_INCLUDEDIR}``    ``include``
  ``SYSCONF``             ``${CMAKE_INSTALL_SYSCONFDIR}``    ``etc``
  ``SHAREDSTATE``         ``${CMAKE_INSTALL_SHARESTATEDIR}`` ``com``
  ``LOCALSTATE``          ``${CMAKE_INSTALL_LOCALSTATEDIR}`` ``var``
  ``RUNSTATE``            ``${CMAKE_INSTALL_RUNSTATEDIR}``   ``<LOCALSTATE dir>/run``
  ``DATA``                ``${CMAKE_INSTALL_DATADIR}``       ``<DATAROOT dir>``
  ``INFO``                ``${CMAKE_INSTALL_INFODIR}``       ``<DATAROOT dir>/info``
  ``LOCALE``              ``${CMAKE_INSTALL_LOCALEDIR}``     ``<DATAROOT dir>/locale``
  ``MAN``                 ``${CMAKE_INSTALL_MANDIR}``        ``<DATAROOT dir>/man``
  ``DOC``                 ``${CMAKE_INSTALL_DOCDIR}``        ``<DATAROOT dir>/doc``
  ======================= ================================== =========================

  Note that some of the types' built-in defaults use the ``DATAROOT`` directory as
  a prefix. The ``DATAROOT`` prefix is calculated similarly to the types, with
  ``CMAKE_INSTALL_DATAROOTDIR`` as the variable and ``share`` as the built-in
  default. You cannot use ``DATAROOT`` as a ``TYPE`` parameter; please use
  ``DATA`` instead.

  To make packages compliant with distribution filesystem layout policies, if
  projects must specify a ``DESTINATION``, it is strongly recommended that they use
  a path that begins with the appropriate relative :module:`GNUInstallDirs` variable.
  This allows package maintainers to control the install destination by setting
  the appropriate cache variables.

  .. versionadded:: 3.4
    An install destination given as a ``DESTINATION`` argument may
    use "generator expressions" with the syntax ``$<...>``.  See the
    :manual:`cmake-generator-expressions(7)` manual for available expressions.

  .. versionadded:: 3.5
    The list of ``dirs...`` given to ``DIRECTORY`` may use
    "generator expressions" too.

.. signature::
  install(SCRIPT <file> [...])
  install(CODE <code> [...])

  Invoke CMake scripts or code during installation:

  .. code-block:: cmake

    install([[SCRIPT <file>] [CODE <code>]]
            [ALL_COMPONENTS | COMPONENT <component>]
            [EXCLUDE_FROM_ALL] [...])

  The ``SCRIPT`` form will invoke the given CMake script files during
  installation.  If the script file name is a relative path it will be
  interpreted with respect to the current source directory.  The ``CODE``
  form will invoke the given CMake code during installation.  Code is
  specified as a single argument inside a double-quoted string.  For
  example, the code

  .. code-block:: cmake

    install(CODE "MESSAGE(\"Sample install message.\")")

  will print a message during installation.

  .. versionadded:: 3.21
    When the ``ALL_COMPONENTS`` option is given, the custom installation
    script code will be executed for every component of a component-specific
    installation.  This option is mutually exclusive with the ``COMPONENT``
    option.

  .. versionadded:: 3.14
    ``<file>`` or ``<code>`` may use "generator expressions" with the syntax
    ``$<...>`` (in the case of ``<file>``, this refers to their use in the file
    name, not the file's contents).  See the
    :manual:`cmake-generator-expressions(7)` manual for available expressions.

.. signature::
  install(EXPORT <export-name> [...])

  Install a CMake file exporting targets for dependent projects:

  .. code-block:: cmake

    install(EXPORT <export-name> DESTINATION <dir>
            [NAMESPACE <namespace>] [FILE <name>.cmake]
            [PERMISSIONS <permission>...]
            [CONFIGURATIONS <config>...]
            [CXX_MODULES_DIRECTORY <directory>]
            [EXPORT_LINK_INTERFACE_LIBRARIES]
            [COMPONENT <component>]
            [EXCLUDE_FROM_ALL]
            [EXPORT_PACKAGE_DEPENDENCIES])
    install(EXPORT_ANDROID_MK <export-name> DESTINATION <dir> [...])

  The ``EXPORT`` form generates and installs a CMake file containing code to
  import targets from the installation tree into another project.
  Target installations are associated with the export ``<export-name>``
  using the ``EXPORT`` option of the :command:`install(TARGETS)` signature
  documented above.  The ``NAMESPACE`` option will prepend ``<namespace>`` to
  the target names as they are written to the import file.  By default
  the generated file will be called ``<export-name>.cmake`` but the ``FILE``
  option may be used to specify a different name.  The value given to
  the ``FILE`` option must be a file name with the ``.cmake`` extension.
  If a ``CONFIGURATIONS`` option is given then the file will only be installed
  when one of the named configurations is installed.  Additionally, the
  generated import file will reference only the matching target
  configurations.  See the :variable:`CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>`
  variable to map configurations of dependent projects to the installed
  configurations.  The ``EXPORT_LINK_INTERFACE_LIBRARIES`` keyword, if
  present, causes the contents of the properties matching
  ``(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_<CONFIG>)?`` to be exported, when
  policy :policy:`CMP0022` is ``NEW``.

  .. note::
    The installed ``<export-name>.cmake`` file may come with additional
    per-configuration ``<export-name>-*.cmake`` files to be loaded by
    globbing.  Do not use an export name that is the same as the package
    name in combination with installing a ``<package-name>-config.cmake``
    file or the latter may be incorrectly matched by the glob and loaded.

  When a ``COMPONENT`` option is given, the listed ``<component>`` implicitly
  depends on all components mentioned in the export set. The exported
  ``<name>.cmake`` file will require each of the exported components to be
  present in order for dependent projects to build properly. For example, a
  project may define components ``Runtime`` and ``Development``, with shared
  libraries going into the ``Runtime`` component and static libraries and
  headers going into the ``Development`` component. The export set would also
  typically be part of the ``Development`` component, but it would export
  targets from both the ``Runtime`` and ``Development`` components. Therefore,
  the ``Runtime`` component would need to be installed if the ``Development``
  component was installed, but not vice versa. If the ``Development`` component
  was installed without the ``Runtime`` component, dependent projects that try
  to link against it would have build errors. Package managers, such as APT and
  RPM, typically handle this by listing the ``Runtime`` component as a dependency
  of the ``Development`` component in the package metadata, ensuring that the
  library is always installed if the headers and CMake export file are present.

  .. versionadded:: 3.7
    In addition to cmake language files, the ``EXPORT_ANDROID_MK`` mode may be
    used to specify an export to the android ndk build system.  This mode
    accepts the same options as the normal export mode.  The Android
    NDK supports the use of prebuilt libraries, both static and shared. This
    allows cmake to build the libraries of a project and make them available
    to an ndk build system complete with transitive dependencies, include flags
    and defines required to use the libraries.

  ``CXX_MODULES_DIRECTORY``
    .. versionadded:: 3.28

    Specify a subdirectory to store C++ module information for targets in the
    export set. This directory will be populated with files which add the
    necessary target property information to the relevant targets. Note that
    without this information, none of the C++ modules which are part of the
    targets in the export set will support being imported in consuming targets.

  ``EXPORT_PACKAGE_DEPENDENCIES``
    .. note::

      Experimental. Gated by ``CMAKE_EXPERIMENTAL_EXPORT_PACKAGE_DEPENDENCIES``.

    Specify that :command:`find_dependency` calls should be exported. If this
    argument is specified, CMake examines all targets in the export set and
    gathers their ``INTERFACE`` link targets. If any such targets either were
    found with :command:`find_package` or have the
    :prop_tgt:`EXPORT_FIND_PACKAGE_NAME` property set, and such package
    dependency was not disabled by passing ``ENABLED OFF`` to
    :command:`export(SETUP)`, then a :command:`find_dependency` call is
    written with the target's corresponding package name, a ``REQUIRED``
    argument, and any additional arguments specified by the ``EXTRA_ARGS``
    argument of :command:`export(SETUP)`. Any package dependencies that were
    manually specified by passing ``ENABLED ON`` to :command:`export(SETUP)`
    are also added, even if the exported targets don't depend on any targets
    from them.

    The :command:`find_dependency` calls are written in the following order:

    1. Any package dependencies that were listed in :command:`export(SETUP)`
       are written in the order they were first specified, regardless of
       whether or not they contain ``INTERFACE`` dependencies of the
       exported targets.
    2. Any package dependencies that contain ``INTERFACE`` link dependencies
       of the exported targets and that were never specified in
       :command:`export(SETUP)` are written in the order they were first
       found.

  The ``EXPORT`` form is useful to help outside projects use targets built
  and installed by the current project.  For example, the code

  .. code-block:: cmake

    install(TARGETS myexe EXPORT myproj DESTINATION bin)
    install(EXPORT myproj NAMESPACE mp_ DESTINATION lib/myproj)
    install(EXPORT_ANDROID_MK myproj DESTINATION share/ndk-modules)

  will install the executable ``myexe`` to ``<prefix>/bin`` and code to import
  it in the file ``<prefix>/lib/myproj/myproj.cmake`` and
  ``<prefix>/share/ndk-modules/Android.mk``.  An outside project
  may load this file with the include command and reference the ``myexe``
  executable from the installation tree using the imported target name
  ``mp_myexe`` as if the target were built in its own tree.

  .. note::
    This command supersedes the :command:`install_targets` command and
    the :prop_tgt:`PRE_INSTALL_SCRIPT` and :prop_tgt:`POST_INSTALL_SCRIPT`
    target properties.  It also replaces the ``FILES`` forms of the
    :command:`install_files` and :command:`install_programs` commands.
    The processing order of these install rules relative to
    those generated by :command:`install_targets`,
    :command:`install_files`, and :command:`install_programs` commands
    is not defined.

.. signature::
  install(RUNTIME_DEPENDENCY_SET <set-name> [...])

  .. versionadded:: 3.21

  Installs a runtime dependency set:

  .. code-block:: cmake

    install(RUNTIME_DEPENDENCY_SET <set-name>
            [[LIBRARY|RUNTIME|FRAMEWORK]
             [DESTINATION <dir>]
             [PERMISSIONS <permission>...]
             [CONFIGURATIONS <config>...]
             [COMPONENT <component>]
             [NAMELINK_COMPONENT <component>]
             [OPTIONAL] [EXCLUDE_FROM_ALL]
            ] [...]
            [PRE_INCLUDE_REGEXES <regex>...]
            [PRE_EXCLUDE_REGEXES <regex>...]
            [POST_INCLUDE_REGEXES <regex>...]
            [POST_EXCLUDE_REGEXES <regex>...]
            [POST_INCLUDE_FILES <file>...]
            [POST_EXCLUDE_FILES <file>...]
            [DIRECTORIES <dir>...]
            )

  Installs a runtime dependency set previously created by one or more
  :command:`install(TARGETS)` or :command:`install(IMPORTED_RUNTIME_ARTIFACTS)`
  commands.  The dependencies of targets belonging to a runtime dependency set
  are installed in the ``RUNTIME`` destination and component on DLL platforms,
  and in the ``LIBRARY`` destination and component on non-DLL platforms.
  macOS frameworks are installed in the ``FRAMEWORK`` destination and component.
  Targets built within the build tree will never be installed as runtime
  dependencies, nor will their own dependencies, unless the targets themselves
  are installed with :command:`install(TARGETS)`.

  The generated install script calls :command:`file(GET_RUNTIME_DEPENDENCIES)`
  on the build-tree files to calculate the runtime dependencies. The build-tree
  executable files are passed as the ``EXECUTABLES`` argument, the build-tree
  shared libraries as the ``LIBRARIES`` argument, and the build-tree modules as
  the ``MODULES`` argument. On macOS, if one of the executables is a
  :prop_tgt:`MACOSX_BUNDLE`, that executable is passed as the
  ``BUNDLE_EXECUTABLE`` argument. At most one such bundle executable may be in
  the runtime dependency set on macOS. The :prop_tgt:`MACOSX_BUNDLE` property
  has no effect on other platforms. Note that
  :command:`file(GET_RUNTIME_DEPENDENCIES)` only supports collecting the runtime
  dependencies for Windows, Linux and macOS platforms, so
  ``install(RUNTIME_DEPENDENCY_SET)`` has the same limitation.

  The following sub-arguments are forwarded through as the corresponding
  arguments to :command:`file(GET_RUNTIME_DEPENDENCIES)` (for those that provide
  a non-empty list of directories, regular expressions or files).  They all
  support :manual:`generator expressions <cmake-generator-expressions(7)>`.

  * ``DIRECTORIES <dir>...``
  * ``PRE_INCLUDE_REGEXES <regex>...``
  * ``PRE_EXCLUDE_REGEXES <regex>...``
  * ``POST_INCLUDE_REGEXES <regex>...``
  * ``POST_EXCLUDE_REGEXES <regex>...``
  * ``POST_INCLUDE_FILES <file>...``
  * ``POST_EXCLUDE_FILES <file>...``

Examples
^^^^^^^^

Example: Install Targets with Per-Artifact Components
"""""""""""""""""""""""""""""""""""""""""""""""""""""

Consider a project that defines targets with different artifact kinds:

.. code-block:: cmake

  add_executable(myExe myExe.c)
  add_library(myStaticLib STATIC myStaticLib.c)
  target_sources(myStaticLib PUBLIC FILE_SET HEADERS FILES myStaticLib.h)
  add_library(mySharedLib SHARED mySharedLib.c)
  target_sources(mySharedLib PUBLIC FILE_SET HEADERS FILES mySharedLib.h)
  set_property(TARGET mySharedLib PROPERTY SOVERSION 1)

We may call :command:`install(TARGETS)` with `<artifact-kind>`_ arguments
to specify different options for each kind of artifact:

.. code-block:: cmake

  install(TARGETS
            myExe
            mySharedLib
            myStaticLib
          RUNTIME           # Following options apply to runtime artifacts.
            COMPONENT Runtime
          LIBRARY           # Following options apply to library artifacts.
            COMPONENT Runtime
            NAMELINK_COMPONENT Development
          ARCHIVE           # Following options apply to archive artifacts.
            COMPONENT Development
            DESTINATION lib/static
          FILE_SET HEADERS  # Following options apply to file set HEADERS.
            COMPONENT Development
          )

This will:

* Install ``myExe`` to ``<prefix>/bin``, the default RUNTIME artifact
  destination, as part of the ``Runtime`` component.

* On non-DLL platforms:

  * Install ``libmySharedLib.so.1`` to ``<prefix>/lib``, the default
    LIBRARY artifact destination, as part of the ``Runtime`` component.

  * Install the ``libmySharedLib.so`` "namelink" (symbolic link) to
    ``<prefix>/lib``, the default LIBRARY artifact destination, as part
    of the ``Development`` component.

* On DLL platforms:

  * Install ``mySharedLib.dll`` to ``<prefix>/bin``, the default RUNTIME
    artifact destination, as part of the ``Runtime`` component.

  * Install ``mySharedLib.lib`` to ``<prefix>/lib/static``, the specified
    ARCHIVE artifact destination, as part of the ``Development`` component.

* Install ``myStaticLib`` to ``<prefix>/lib/static``, the specified
  ARCHIVE artifact destination, as part of the ``Development`` component.

* Install ``mySharedLib.h`` and ``myStaticLib.h`` to ``<prefix>/include``,
  the default destination for a file set of type HEADERS, as part of the
  ``Development`` component.

Example: Install Targets to Per-Config Destinations
"""""""""""""""""""""""""""""""""""""""""""""""""""

Each :command:`install(TARGETS)` call installs a given target
:ref:`output artifact <Output Artifacts>` to at most one ``DESTINATION``,
but the install rule itself may be filtered by the ``CONFIGURATIONS`` option.
In order to install to a different destination for each configuration, one
call per configuration is needed.  For example, the code:

.. code-block:: cmake

  install(TARGETS myExe
          CONFIGURATIONS Debug
          RUNTIME
            DESTINATION Debug/bin
          )
  install(TARGETS myExe
          CONFIGURATIONS Release
          RUNTIME
            DESTINATION Release/bin
          )

will install ``myExe`` to ``<prefix>/Debug/bin`` in the Debug configuration,
and to ``<prefix>/Release/bin`` in the Release configuration.

Generated Installation Script
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note::

  Use of this feature is not recommended. Please consider using the
  :option:`cmake --install` instead.

The ``install()`` command generates a file, ``cmake_install.cmake``, inside
the build directory, which is used internally by the generated install target
and by CPack. You can also invoke this script manually with
:option:`cmake -P`. This script accepts several variables:

``COMPONENT``
  Set this variable to install only a single CPack component as opposed to all
  of them. For example, if you only want to install the ``Development``
  component, run ``cmake -DCOMPONENT=Development -P cmake_install.cmake``.

``BUILD_TYPE``
  Set this variable to change the build type if you are using a multi-config
  generator. For example, to install with the ``Debug`` configuration, run
  ``cmake -DBUILD_TYPE=Debug -P cmake_install.cmake``.

``DESTDIR``
  This is an environment variable rather than a CMake variable. It allows you
  to change the installation prefix on UNIX systems. See :envvar:`DESTDIR` for
  details.



/P/🚀 command/link_directories.rst
================================================


link_directories
----------------

Add directories in which the linker will look for libraries.

.. code-block:: cmake

  link_directories([AFTER|BEFORE] directory1 [directory2 ...])

Adds the paths in which the linker should search for libraries.
Relative paths given to this command are interpreted as relative to
the current source directory, see :policy:`CMP0015`.

The command will apply only to targets created after it is called.

.. versionadded:: 3.13
  The directories are added to the :prop_dir:`LINK_DIRECTORIES` directory
  property for the current ``CMakeLists.txt`` file, converting relative
  paths to absolute as needed.  See the :manual:`cmake-buildsystem(7)`
  manual for more on defining buildsystem properties.

.. versionadded:: 3.13
  By default the directories specified are appended onto the current list of
  directories.  This default behavior can be changed by setting
  :variable:`CMAKE_LINK_DIRECTORIES_BEFORE` to ``ON``.  By using
  ``AFTER`` or ``BEFORE`` explicitly, you can select between appending and
  prepending, independent of the default.

.. versionadded:: 3.13
  Arguments to ``link_directories`` may use "generator expressions" with
  the syntax "$<...>".  See the :manual:`cmake-generator-expressions(7)`
  manual for available expressions.

.. note::

  This command is rarely necessary and should be avoided where there are
  other choices.  Prefer to pass full absolute paths to libraries where
  possible, since this ensures the correct library will always be linked.
  The :command:`find_library` command provides the full path, which can
  generally be used directly in calls to :command:`target_link_libraries`.
  Situations where a library search path may be needed include:

  - Project generators like Xcode where the user can switch target
    architecture at build time, but a full path to a library cannot
    be used because it only provides one architecture (i.e. it is not
    a universal binary).
  - Libraries may themselves have other private library dependencies
    that expect to be found via ``RPATH`` mechanisms, but some linkers
    are not able to fully decode those paths (e.g. due to the presence
    of things like ``$ORIGIN``).

  If a library search path must be provided, prefer to localize the effect
  where possible by using the :command:`target_link_directories` command
  rather than ``link_directories()``.  The target-specific command can also
  control how the search directories propagate to other dependent targets.

See Also
^^^^^^^^

* :command:`target_link_directories`
* :command:`target_link_libraries`



/P/🚀 command/link_libraries.rst
==============================================


link_libraries
--------------

Link libraries to all targets added later.

.. code-block:: cmake

  link_libraries([item1 [item2 [...]]]
                 [[debug|optimized|general] <item>] ...)

Specify libraries or flags to use when linking any targets created later in
the current directory or below by commands such as :command:`add_executable`
or :command:`add_library`.  See the :command:`target_link_libraries` command
for meaning of arguments.

.. note::
  The :command:`target_link_libraries` command should be preferred whenever
  possible.  Library dependencies are chained automatically, so directory-wide
  specification of link libraries is rarely needed.



/P/🚀 command/load_cache.rst
==========================================


load_cache
----------

Load in the values from another project's CMake cache.

.. code-block:: cmake

  load_cache(pathToBuildDirectory READ_WITH_PREFIX prefix entry1...)

Reads the cache and store the requested entries in variables with their
name prefixed with the given prefix.  This only reads the values, and
does not create entries in the local project's cache.

.. code-block:: cmake

  load_cache(pathToBuildDirectory [EXCLUDE entry1...]
             [INCLUDE_INTERNALS entry1...])

Loads in the values from another cache and store them in the local
project's cache as internal entries.  This is useful for a project
that depends on another project built in a different tree.  ``EXCLUDE``
option can be used to provide a list of entries to be excluded.
``INCLUDE_INTERNALS`` can be used to provide a list of internal entries to
be included.  Normally, no internal entries are brought in.  Use of
this form of the command is strongly discouraged, but it is provided
for backward compatibility.



/P/🚀 command/project.rst
=======================================


project
-------

Set the name of the project.

Synopsis
^^^^^^^^

.. code-block:: cmake

 project(<PROJECT-NAME> [<language-name>...])
 project(<PROJECT-NAME>
         [VERSION <major>[.<minor>[.<patch>[.<tweak>]]]]
         [DESCRIPTION <project-description-string>]
         [HOMEPAGE_URL <url-string>]
         [LANGUAGES <language-name>...])

Sets the name of the project, and stores it in the variable
:variable:`PROJECT_NAME`. When called from the top-level
``CMakeLists.txt`` also stores the project name in the
variable :variable:`CMAKE_PROJECT_NAME`.

Also sets the variables:

:variable:`PROJECT_SOURCE_DIR`, :variable:`<PROJECT-NAME>_SOURCE_DIR`
  Absolute path to the source directory for the project.

:variable:`PROJECT_BINARY_DIR`, :variable:`<PROJECT-NAME>_BINARY_DIR`
  Absolute path to the binary directory for the project.

:variable:`PROJECT_IS_TOP_LEVEL`, :variable:`<PROJECT-NAME>_IS_TOP_LEVEL`
  .. versionadded:: 3.21

  Boolean value indicating whether the project is top-level.

Further variables are set by the optional arguments described in the following.
If any of these arguments is not used, then the corresponding variables are
set to the empty string.

Options
^^^^^^^

The options are:

``VERSION <version>``
  Optional; may not be used unless policy :policy:`CMP0048` is
  set to ``NEW``.

  Takes a ``<version>`` argument composed of non-negative integer components,
  i.e. ``<major>[.<minor>[.<patch>[.<tweak>]]]``,
  and sets the variables

  * :variable:`PROJECT_VERSION`,
    :variable:`<PROJECT-NAME>_VERSION`
  * :variable:`PROJECT_VERSION_MAJOR`,
    :variable:`<PROJECT-NAME>_VERSION_MAJOR`
  * :variable:`PROJECT_VERSION_MINOR`,
    :variable:`<PROJECT-NAME>_VERSION_MINOR`
  * :variable:`PROJECT_VERSION_PATCH`,
    :variable:`<PROJECT-NAME>_VERSION_PATCH`
  * :variable:`PROJECT_VERSION_TWEAK`,
    :variable:`<PROJECT-NAME>_VERSION_TWEAK`.

  .. versionadded:: 3.12
    When the ``project()`` command is called from the top-level
    ``CMakeLists.txt``, then the version is also stored in the variable
    :variable:`CMAKE_PROJECT_VERSION`.

``DESCRIPTION <project-description-string>``
  .. versionadded:: 3.9

  Optional.
  Sets the variables

  * :variable:`PROJECT_DESCRIPTION`, :variable:`<PROJECT-NAME>_DESCRIPTION`

  to ``<project-description-string>``.
  It is recommended that this description is a relatively short string,
  usually no more than a few words.

  When the ``project()`` command is called from the top-level ``CMakeLists.txt``,
  then the description is also stored in the variable :variable:`CMAKE_PROJECT_DESCRIPTION`.

  .. versionadded:: 3.12
    Added the ``<PROJECT-NAME>_DESCRIPTION`` variable.

``HOMEPAGE_URL <url-string>``
  .. versionadded:: 3.12

  Optional.
  Sets the variables

  * :variable:`PROJECT_HOMEPAGE_URL`, :variable:`<PROJECT-NAME>_HOMEPAGE_URL`

  to ``<url-string>``, which should be the canonical home URL for the project.

  When the ``project()`` command is called from the top-level ``CMakeLists.txt``,
  then the URL also is stored in the variable :variable:`CMAKE_PROJECT_HOMEPAGE_URL`.

``LANGUAGES <language-name>...``
  Optional.
  Can also be specified without ``LANGUAGES`` keyword per the first, short signature.

  Selects which programming languages are needed to build the project.

.. include:: SUPPORTED_LANGUAGES.txt

By default ``C`` and ``CXX`` are enabled if no language options are given.
Specify language ``NONE``, or use the ``LANGUAGES`` keyword and list no languages,
to skip enabling any languages.

The variables set through the ``VERSION``, ``DESCRIPTION`` and ``HOMEPAGE_URL``
options are intended for use as default values in package metadata and documentation.

.. _`Code Injection`:

Code Injection
^^^^^^^^^^^^^^

A number of variables can be defined by the user to specify files to include
at different points during the execution of the ``project()`` command.
The following outlines the steps performed during a ``project()`` call:

* .. versionadded:: 3.15
    For every ``project()`` call regardless of the project
    name, include the file(s) and module(s) named by
    :variable:`CMAKE_PROJECT_INCLUDE_BEFORE`, if set.

* .. versionadded:: 3.17
    If the ``project()`` command specifies ``<PROJECT-NAME>`` as its project
    name, include the file(s) and module(s) named by
    :variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE`, if set.

* Set the various project-specific variables detailed in the `Synopsis`_
  and `Options`_ sections above.

* For the very first ``project()`` call only:

  * If :variable:`CMAKE_TOOLCHAIN_FILE` is set, read it at least once.
    It may be read multiple times and it may also be read again when
    enabling languages later (see below).

  * Set the variables describing the host and target platforms.
    Language-specific variables might or might not be set at this point.
    On the first run, the only language-specific variables that might be
    defined are those a toolchain file may have set. On subsequent runs,
    language-specific variables cached from a previous run may be set.

  * .. versionadded:: 3.24
      Include each file listed in :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES`,
      if set. The variable is ignored by CMake thereafter.

* Enable any languages specified in the call, or the default languages if
  none were provided. The toolchain file may be re-read when enabling a
  language for the first time.

* .. versionadded:: 3.15
    For every ``project()`` call regardless of the project
    name, include the file(s) and module(s) named by
    :variable:`CMAKE_PROJECT_INCLUDE`, if set.

* If the ``project()`` command specifies ``<PROJECT-NAME>`` as its project
  name, include the file(s) and module(s) named by
  :variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE`, if set.

Usage
^^^^^

The top-level ``CMakeLists.txt`` file for a project must contain a
literal, direct call to the ``project()`` command; loading one
through the :command:`include` command is not sufficient.  If no such
call exists, CMake will issue a warning and pretend there is a
``project(Project)`` at the top to enable the default languages
(``C`` and ``CXX``).

.. note::
  Call the ``project()`` command near the top of the top-level
  ``CMakeLists.txt``, but *after* calling :command:`cmake_minimum_required`.
  It is important to establish version and policy settings before invoking
  other commands whose behavior they may affect and for this reason the
  ``project()`` command will issue a warning if this order is not kept.
  See also policy :policy:`CMP0000`.



/P/🚀 command/remove_definitions.rst
==================================================


remove_definitions
------------------

Remove -D define flags added by :command:`add_definitions`.

.. code-block:: cmake

  remove_definitions(-DFOO -DBAR ...)

Removes flags (added by :command:`add_definitions`) from the compiler
command line for sources in the current directory and below.



/P/🚀 command/set_source_files_properties.rst
===========================================================


set_source_files_properties
---------------------------

Source files can have properties that affect how they are built.

.. code-block:: cmake

  set_source_files_properties(<files> ...
                              [DIRECTORY <dirs> ...]
                              [TARGET_DIRECTORY <targets> ...]
                              PROPERTIES <prop1> <value1>
                              [<prop2> <value2>] ...)

Sets properties associated with source files using a key/value paired
list.

.. versionadded:: 3.18
  By default, source file properties are only visible to targets added in the
  same directory (``CMakeLists.txt``).  Visibility can be set in other directory
  scopes using one or both of the following options:

``DIRECTORY <dirs>...``
  The source file properties will be set in each of the ``<dirs>``
  directories' scopes.  CMake must already know about each of these
  source directories, either by having added them through a call to
  :command:`add_subdirectory` or it being the top level source directory.
  Relative paths are treated as relative to the current source directory.

``TARGET_DIRECTORY <targets>...``
  The source file properties will be set in each of the directory scopes
  where any of the specified ``<targets>`` were created (the ``<targets>``
  must therefore already exist).

Use :command:`get_source_file_property` to get property values.
See also the :command:`set_property(SOURCE)` command.

.. note::

  The :prop_sf:`GENERATED` source file property may be globally visible.
  See its documentation for details.

See Also
^^^^^^^^

* :command:`define_property`
* :command:`get_source_file_property`
* :ref:`Source File Properties` for the list of properties known
  to CMake



/P/🚀 command/set_target_properties.rst
=====================================================


set_target_properties
---------------------

Targets can have properties that affect how they are built.

.. code-block:: cmake

  set_target_properties(<targets> ...
                        PROPERTIES <prop1> <value1>
                        [<prop2> <value2>] ...)

Sets properties on targets.  The syntax for the command is to list all
the targets you want to change, and then provide the values you want to
set next.  You can use any prop value pair you want and extract it
later with the :command:`get_property` or :command:`get_target_property`
command.

:ref:`Alias Targets` do not support setting target properties.

See Also
^^^^^^^^

* :command:`define_property`
* :command:`get_target_property`
* the more general :command:`set_property` command
* :ref:`Target Properties` for the list of properties known to CMake



/P/🚀 command/set_tests_properties.rst
====================================================


set_tests_properties
--------------------

Set a property of the tests.

.. code-block:: cmake

  set_tests_properties(<tests>...
                       [DIRECTORY <dir>]
                       PROPERTIES <prop1> <value1>
                       [<prop2> <value2>]...)

Sets a property for the tests.  If the test is not found, CMake
will report an error.

Test property values may be specified using
:manual:`generator expressions <cmake-generator-expressions(7)>`
for tests created by the :command:`add_test(NAME)` signature.

.. versionadded:: 3.28
  Visibility can be set in other directory scopes using the following option:

  ``DIRECTORY <dir>``
    The test properties will be set in the ``<dir>`` directory's scope.
    CMake must already know about this directory, either by having added it
    through a call to :command:`add_subdirectory` or it being the top level
    source directory. Relative paths are treated as relative to the current
    source directory. ``<dir>`` may reference a binary directory.

See Also
^^^^^^^^

* :command:`add_test`
* :command:`define_property`
* the more general :command:`set_property` command
* :ref:`Test Properties` for the list of properties known to CMake



/P/🚀 command/source_group.rst
============================================


source_group
------------

Define a grouping for source files in IDE project generation.
There are two different signatures to create source groups.

.. code-block:: cmake

  source_group(<name> [FILES <src>...] [REGULAR_EXPRESSION <regex>])
  source_group(TREE <root> [PREFIX <prefix>] [FILES <src>...])

Defines a group into which sources will be placed in project files.
This is intended to set up file tabs in Visual Studio.
The group is scoped in the directory where the command is called,
and applies to sources in targets created in that directory.

The options are:

``TREE``
 .. versionadded:: 3.8

 CMake will automatically detect, from ``<src>`` files paths, source groups
 it needs to create, to keep structure of source groups analogically to the
 actual files and directories structure in the project. Paths of ``<src>``
 files will be cut to be relative to ``<root>``. The command fails if the
 paths within ``src`` do not start with ``root``.

``PREFIX``
 .. versionadded:: 3.8

 Source group and files located directly in ``<root>`` path, will be placed
 in ``<prefix>`` source groups.

``FILES``
 Any source file specified explicitly will be placed in group
 ``<name>``.  Relative paths are interpreted with respect to the
 current source directory.

``REGULAR_EXPRESSION``
 Any source file whose name matches the regular expression will
 be placed in group ``<name>``.

If a source file matches multiple groups, the *last* group that
explicitly lists the file with ``FILES`` will be favored, if any.
If no group explicitly lists the file, the *last* group whose
regular expression matches the file will be favored.

The ``<name>`` of the group and ``<prefix>`` argument may contain forward
slashes or backslashes to specify subgroups.  Backslashes need to be escaped
appropriately:

.. code-block:: cmake

  source_group(base/subdir ...)
  source_group(outer\\inner ...)
  source_group(TREE <root> PREFIX sources\\inc ...)

.. versionadded:: 3.18
  Allow using forward slashes (``/``) to specify subgroups.

For backwards compatibility, the short-hand signature

.. code-block:: cmake

  source_group(<name> <regex>)

is equivalent to

.. code-block:: cmake

  source_group(<name> REGULAR_EXPRESSION <regex>)



/P/🚀 command/target_compile_definitions.rst
==========================================================


target_compile_definitions
--------------------------

Add compile definitions to a target.

.. code-block:: cmake

  target_compile_definitions(<target>
    <INTERFACE|PUBLIC|PRIVATE> [items1...]
    [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])

Specifies compile definitions to use when compiling a given ``<target>``.  The
named ``<target>`` must have been created by a command such as
:command:`add_executable` or :command:`add_library` and must not be an
:ref:`ALIAS target <Alias Targets>`.

The ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to
specify the :ref:`scope <Target Usage Requirements>` of the following arguments.
``PRIVATE`` and ``PUBLIC`` items will populate the :prop_tgt:`COMPILE_DEFINITIONS`
property of ``<target>``. ``PUBLIC`` and ``INTERFACE`` items will populate the
:prop_tgt:`INTERFACE_COMPILE_DEFINITIONS` property of ``<target>``.
The following arguments specify compile definitions.  Repeated calls for the
same ``<target>`` append items in the order called.

.. versionadded:: 3.11
  Allow setting ``INTERFACE`` items on :ref:`IMPORTED targets <Imported Targets>`.

.. |command_name| replace:: ``target_compile_definitions``
.. include:: GENEX_NOTE.txt

Any leading ``-D`` on an item will be removed.  Empty items are ignored.
For example, the following are all equivalent:

.. code-block:: cmake

  target_compile_definitions(foo PUBLIC FOO)
  target_compile_definitions(foo PUBLIC -DFOO)  # -D removed
  target_compile_definitions(foo PUBLIC "" FOO) # "" ignored
  target_compile_definitions(foo PUBLIC -D FOO) # -D becomes "", then ignored

Definitions may optionally have values:

.. code-block:: cmake

  target_compile_definitions(foo PUBLIC FOO=1)

Note that many compilers treat ``-DFOO`` as equivalent to ``-DFOO=1``, but
other tools may not recognize this in all circumstances (e.g. IntelliSense).

See Also
^^^^^^^^

* :command:`add_compile_definitions`
* :command:`target_compile_features`
* :command:`target_compile_options`
* :command:`target_include_directories`
* :command:`target_link_libraries`
* :command:`target_link_directories`
* :command:`target_link_options`
* :command:`target_precompile_headers`
* :command:`target_sources`



/P/🚀 command/target_compile_features.rst
=======================================================


target_compile_features
-----------------------

.. versionadded:: 3.1

Add expected compiler features to a target.

.. code-block:: cmake

  target_compile_features(<target> <PRIVATE|PUBLIC|INTERFACE> <feature> [...])

Specifies compiler features required when compiling a given target.  If the
feature is not listed in the :variable:`CMAKE_C_COMPILE_FEATURES`,
:variable:`CMAKE_CUDA_COMPILE_FEATURES`, or :variable:`CMAKE_CXX_COMPILE_FEATURES`
variables, then an error will be reported by CMake.  If the use of the feature requires
an additional compiler flag, such as ``-std=gnu++11``, the flag will be added
automatically.

The ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to
specify the scope of the features.  ``PRIVATE`` and ``PUBLIC`` items will
populate the :prop_tgt:`COMPILE_FEATURES` property of ``<target>``.
``PUBLIC`` and ``INTERFACE`` items will populate the
:prop_tgt:`INTERFACE_COMPILE_FEATURES` property of ``<target>``.
Repeated calls for the same ``<target>`` append items.

.. versionadded:: 3.11
  Allow setting ``INTERFACE`` items on :ref:`IMPORTED targets <Imported Targets>`.

The named ``<target>`` must have been created by a command such as
:command:`add_executable` or :command:`add_library` and must not be an
:ref:`ALIAS target <Alias Targets>`.

.. |command_name| replace:: ``target_compile_features``
.. |more_see_also| replace:: See the :manual:`cmake-compile-features(7)`
   manual for information on compile features and a list of supported compilers.
.. include:: GENEX_NOTE.txt
   :start-line: 1

See Also
^^^^^^^^

* :command:`target_compile_definitions`
* :command:`target_compile_options`
* :command:`target_include_directories`
* :command:`target_link_libraries`
* :command:`target_link_directories`
* :command:`target_link_options`
* :command:`target_precompile_headers`
* :command:`target_sources`



/P/🚀 command/target_compile_options.rst
======================================================


target_compile_options
----------------------

Add compile options to a target.

.. code-block:: cmake

  target_compile_options(<target> [BEFORE]
    <INTERFACE|PUBLIC|PRIVATE> [items1...]
    [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])

Adds options to the :prop_tgt:`COMPILE_OPTIONS` or
:prop_tgt:`INTERFACE_COMPILE_OPTIONS` target properties. These options
are used when compiling the given ``<target>``, which must have been
created by a command such as :command:`add_executable` or
:command:`add_library` and must not be an :ref:`ALIAS target <Alias Targets>`.

.. note::

  These options are not used when linking the target.
  See the :command:`target_link_options` command for that.

Arguments
^^^^^^^^^

If ``BEFORE`` is specified, the content will be prepended to the property
instead of being appended.  See policy :policy:`CMP0101` which affects
whether ``BEFORE`` will be ignored in certain cases.

The ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to
specify the :ref:`scope <Target Usage Requirements>` of the following arguments.
``PRIVATE`` and ``PUBLIC`` items will populate the :prop_tgt:`COMPILE_OPTIONS`
property of ``<target>``.  ``PUBLIC`` and ``INTERFACE`` items will populate the
:prop_tgt:`INTERFACE_COMPILE_OPTIONS` property of ``<target>``.
The following arguments specify compile options.  Repeated calls for the same
``<target>`` append items in the order called.

.. versionadded:: 3.11
  Allow setting ``INTERFACE`` items on :ref:`IMPORTED targets <Imported Targets>`.

.. |command_name| replace:: ``target_compile_options``
.. include:: GENEX_NOTE.txt

.. include:: OPTIONS_SHELL.txt

See Also
^^^^^^^^

* This command can be used to add any options. However, for adding
  preprocessor definitions and include directories it is recommended
  to use the more specific commands :command:`target_compile_definitions`
  and :command:`target_include_directories`.

* For directory-wide settings, there is the command :command:`add_compile_options`.

* For file-specific settings, there is the source file property :prop_sf:`COMPILE_OPTIONS`.

* This command adds compile options for all languages in a target.
  Use the :genex:`COMPILE_LANGUAGE` generator expression to specify
  per-language compile options.

* :command:`target_compile_features`
* :command:`target_link_libraries`
* :command:`target_link_directories`
* :command:`target_link_options`
* :command:`target_precompile_headers`
* :command:`target_sources`

* :variable:`CMAKE_<LANG>_FLAGS` and :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>`
  add language-wide flags passed to all invocations of the compiler.
  This includes invocations that drive compiling and those that drive linking.



/P/🚀 command/target_include_directories.rst
==========================================================


target_include_directories
--------------------------

Add include directories to a target.

.. code-block:: cmake

  target_include_directories(<target> [SYSTEM] [AFTER|BEFORE]
    <INTERFACE|PUBLIC|PRIVATE> [items1...]
    [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])

Specifies include directories to use when compiling a given target.
The named ``<target>`` must have been created by a command such
as :command:`add_executable` or :command:`add_library` and must not be an
:ref:`ALIAS target <Alias Targets>`.

By using ``AFTER`` or ``BEFORE`` explicitly, you can select between appending
and prepending, independent of the default.

The ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to specify
the :ref:`scope <Target Usage Requirements>` of the following arguments.
``PRIVATE`` and ``PUBLIC`` items will populate the :prop_tgt:`INCLUDE_DIRECTORIES`
property of ``<target>``. ``PUBLIC`` and ``INTERFACE`` items will populate the
:prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` property of ``<target>``.
The following arguments specify include directories.

.. versionadded:: 3.11
  Allow setting ``INTERFACE`` items on :ref:`IMPORTED targets <Imported Targets>`.

Repeated calls for the same ``<target>`` append items in the order called.

If ``SYSTEM`` is specified, the compiler will be told the directories
are meant as system include directories on some platforms.  This may
have effects such as suppressing warnings or skipping the contained
headers in dependency calculations (see compiler documentation).
Additionally, system include directories are searched after normal
include directories regardless of the order specified.

If ``SYSTEM`` is used together with ``PUBLIC`` or ``INTERFACE``, the
:prop_tgt:`INTERFACE_SYSTEM_INCLUDE_DIRECTORIES` target property will be
populated with the specified directories.

.. |command_name| replace:: ``target_include_directories``
.. include:: GENEX_NOTE.txt

Specified include directories may be absolute paths or relative paths.
A relative path will be interpreted as relative to the current source
directory (i.e. :variable:`CMAKE_CURRENT_SOURCE_DIR`) and converted to an
absolute path before storing it in the associated target property.
If the path starts with a generator expression, it will always be assumed
to be an absolute path (with one exception noted below) and will be used
unmodified.

Include directories usage requirements commonly differ between the build-tree
and the install-tree.  The :genex:`BUILD_INTERFACE` and
:genex:`INSTALL_INTERFACE` generator expressions can be used to describe
separate usage requirements based on the usage location.  Relative paths
are allowed within the :genex:`INSTALL_INTERFACE` expression and are
interpreted as relative to the installation prefix.  Relative paths should not
be used in :genex:`BUILD_INTERFACE` expressions because they will not be
converted to absolute.  For example:

.. code-block:: cmake

  target_include_directories(mylib PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/mylib>
    $<INSTALL_INTERFACE:include/mylib>  # <prefix>/include/mylib
  )

Creating Relocatable Packages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. |INTERFACE_PROPERTY_LINK| replace:: :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`
.. include:: /include/INTERFACE_INCLUDE_DIRECTORIES_WARNING.txt

See Also
^^^^^^^^

* :command:`include_directories`
* :command:`target_compile_definitions`
* :command:`target_compile_features`
* :command:`target_compile_options`
* :command:`target_link_libraries`
* :command:`target_link_directories`
* :command:`target_link_options`
* :command:`target_precompile_headers`
* :command:`target_sources`



/P/🚀 command/target_link_directories.rst
=======================================================


target_link_directories
-----------------------

.. versionadded:: 3.13

Add link directories to a target.

.. code-block:: cmake

  target_link_directories(<target> [BEFORE]
    <INTERFACE|PUBLIC|PRIVATE> [items1...]
    [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])

Specifies the paths in which the linker should search for libraries when
linking a given target.  Each item can be an absolute or relative path,
with the latter being interpreted as relative to the current source
directory.  These items will be added to the link command.

The named ``<target>`` must have been created by a command such as
:command:`add_executable` or :command:`add_library` and must not be an
:ref:`ALIAS target <Alias Targets>`.

The ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to
specify the :ref:`scope <Target Usage Requirements>` of the items that follow
them. ``PRIVATE`` and ``PUBLIC`` items will populate the
:prop_tgt:`LINK_DIRECTORIES` property of ``<target>``.  ``PUBLIC`` and
``INTERFACE`` items will populate the :prop_tgt:`INTERFACE_LINK_DIRECTORIES`
property of ``<target>`` (:ref:`IMPORTED targets <Imported Targets>` only
support ``INTERFACE`` items).
Each item specifies a link directory and will be converted to an absolute
path if necessary before adding it to the relevant property.  Repeated
calls for the same ``<target>`` append items in the order called.

If ``BEFORE`` is specified, the content will be prepended to the relevant
property instead of being appended.

.. |command_name| replace:: ``target_link_directories``
.. include:: GENEX_NOTE.txt

.. note::

  This command is rarely necessary and should be avoided where there are
  other choices.  Prefer to pass full absolute paths to libraries where
  possible, since this ensures the correct library will always be linked.
  The :command:`find_library` command provides the full path, which can
  generally be used directly in calls to :command:`target_link_libraries`.
  Situations where a library search path may be needed include:

  - Project generators like Xcode where the user can switch target
    architecture at build time, but a full path to a library cannot
    be used because it only provides one architecture (i.e. it is not
    a universal binary).
  - Libraries may themselves have other private library dependencies
    that expect to be found via ``RPATH`` mechanisms, but some linkers
    are not able to fully decode those paths (e.g. due to the presence
    of things like ``$ORIGIN``).

See Also
^^^^^^^^

* :command:`link_directories`
* :command:`target_compile_definitions`
* :command:`target_compile_features`
* :command:`target_compile_options`
* :command:`target_include_directories`
* :command:`target_link_libraries`
* :command:`target_link_options`
* :command:`target_precompile_headers`
* :command:`target_sources`



/P/🚀 command/target_link_libraries.rst
=====================================================


target_link_libraries
---------------------

Specify libraries or flags to use when linking a given target and/or
its dependents.  :ref:`Usage requirements <Target Usage Requirements>`
from linked library targets will be propagated.  Usage requirements
of a target's dependencies affect compilation of its own sources.

Overview
^^^^^^^^

This command has several signatures as detailed in subsections below.
All of them have the general form

.. code-block:: cmake

  target_link_libraries(<target> ... <item>... ...)

The named ``<target>`` must have been created by a command such as
:command:`add_executable` or :command:`add_library` and must not be an
:ref:`ALIAS target <Alias Targets>`.  If policy :policy:`CMP0079` is not
set to ``NEW`` then the target must have been created in the current
directory.  Repeated calls for the same ``<target>`` append items in
the order called.

.. versionadded:: 3.13
  The ``<target>`` doesn't have to be defined in the same directory as the
  ``target_link_libraries`` call.

Each ``<item>`` may be:

* **A library target name**: The generated link line will have the
  full path to the linkable library file associated with the target.
  The buildsystem will have a dependency to re-link ``<target>`` if
  the library file changes.

  The named target must be created by :command:`add_library` within
  the project or as an :ref:`IMPORTED library <Imported Targets>`.
  If it is created within the project an ordering dependency will
  automatically be added in the build system to make sure the named
  library target is up-to-date before the ``<target>`` links.

  If an imported library has the :prop_tgt:`IMPORTED_NO_SONAME`
  target property set, CMake may ask the linker to search for
  the library instead of using the full path
  (e.g. ``/usr/lib/libfoo.so`` becomes ``-lfoo``).

  The full path to the target's artifact will be quoted/escaped for
  the shell automatically.

* **A full path to a library file**: The generated link line will
  normally preserve the full path to the file. The buildsystem will
  have a dependency to re-link ``<target>`` if the library file changes.

  There are some cases where CMake may ask the linker to search for
  the library (e.g. ``/usr/lib/libfoo.so`` becomes ``-lfoo``), such
  as when a shared library is detected to have no ``SONAME`` field.
  See policy :policy:`CMP0060` for discussion of another case.

  If the library file is in a macOS framework, the ``Headers`` directory
  of the framework will also be processed as a
  :ref:`usage requirement <Target Usage Requirements>`.  This has the same
  effect as passing the framework directory as an include directory.

  .. versionadded:: 3.28

    The library file may point to a ``.xcframework`` folder on Apple platforms.
    If it does, the target will get the selected library's ``Headers``
    directory as a usage requirement.

  .. versionadded:: 3.8
    On :ref:`Visual Studio Generators` for VS 2010 and above, library files
    ending in ``.targets`` will be treated as MSBuild targets files and
    imported into generated project files.  This is not supported by other
    generators.

  The full path to the library file will be quoted/escaped for
  the shell automatically.

* **A plain library name**: The generated link line will ask the linker
  to search for the library (e.g. ``foo`` becomes ``-lfoo`` or ``foo.lib``).

  The library name/flag is treated as a command-line string fragment and
  will be used with no extra quoting or escaping.

* **A link flag**: Item names starting with ``-``, but not ``-l`` or
  ``-framework``, are treated as linker flags.  Note that such flags will
  be treated like any other library link item for purposes of transitive
  dependencies, so they are generally safe to specify only as private link
  items that will not propagate to dependents.

  Link flags specified here are inserted into the link command in the same
  place as the link libraries. This might not be correct, depending on
  the linker. Use the :prop_tgt:`LINK_OPTIONS` target property or
  :command:`target_link_options` command to add link
  flags explicitly. The flags will then be placed at the toolchain-defined
  flag position in the link command.

  .. versionadded:: 3.13
    :prop_tgt:`LINK_OPTIONS` target property and :command:`target_link_options`
    command.  For earlier versions of CMake, use :prop_tgt:`LINK_FLAGS`
    property instead.

  The link flag is treated as a command-line string fragment and
  will be used with no extra quoting or escaping.

* **A generator expression**: A ``$<...>`` :manual:`generator expression
  <cmake-generator-expressions(7)>` may evaluate to any of the above
  items or to a :ref:`semicolon-separated list <CMake Language Lists>` of them.
  If the ``...`` contains any ``;`` characters, e.g. after evaluation
  of a ``${list}`` variable, be sure to use an explicitly quoted
  argument ``"$<...>"`` so that this command receives it as a
  single ``<item>``.

  Additionally, a generator expression may be used as a fragment of
  any of the above items, e.g. ``foo$<1:_d>``.

  Note that generator expressions will not be used in OLD handling of
  policy :policy:`CMP0003` or policy :policy:`CMP0004`.

* A ``debug``, ``optimized``, or ``general`` keyword immediately followed
  by another ``<item>``.  The item following such a keyword will be used
  only for the corresponding build configuration.  The ``debug`` keyword
  corresponds to the ``Debug`` configuration (or to configurations named
  in the :prop_gbl:`DEBUG_CONFIGURATIONS` global property if it is set).
  The ``optimized`` keyword corresponds to all other configurations.  The
  ``general`` keyword corresponds to all configurations, and is purely
  optional.  Higher granularity may be achieved for per-configuration
  rules by creating and linking to
  :ref:`IMPORTED library targets <Imported Targets>`.
  These keywords are interpreted immediately by this command and therefore
  have no special meaning when produced by a generator expression.

Items containing ``::``, such as ``Foo::Bar``, are assumed to be
:ref:`IMPORTED <Imported Targets>` or :ref:`ALIAS <Alias Targets>` library
target names and will cause an error if no such target exists.
See policy :policy:`CMP0028`.

See the :manual:`cmake-buildsystem(7)` manual for more on defining
buildsystem properties.

Libraries for a Target and/or its Dependents
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cmake

  target_link_libraries(<target>
                        <PRIVATE|PUBLIC|INTERFACE> <item>...
                       [<PRIVATE|PUBLIC|INTERFACE> <item>...]...)

The ``PUBLIC``, ``PRIVATE`` and ``INTERFACE``
:ref:`scope <Target Usage Requirements>` keywords can be used to
specify both the link dependencies and the link interface in one command.

Libraries and targets following ``PUBLIC`` are linked to, and are made
part of the link interface.  Libraries and targets following ``PRIVATE``
are linked to, but are not made part of the link interface.  Libraries
following ``INTERFACE`` are appended to the link interface and are not
used for linking ``<target>``.

Libraries for both a Target and its Dependents
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cmake

  target_link_libraries(<target> <item>...)

Library dependencies are transitive by default with this signature.
When this target is linked into another target then the libraries
linked to this target will appear on the link line for the other
target too.  This transitive "link interface" is stored in the
:prop_tgt:`INTERFACE_LINK_LIBRARIES` target property and may be overridden
by setting the property directly.  When :policy:`CMP0022` is not set to
``NEW``, transitive linking is built in but may be overridden by the
:prop_tgt:`LINK_INTERFACE_LIBRARIES` property.  Calls to other signatures
of this command may set the property making any libraries linked
exclusively by this signature private.

Libraries for a Target and/or its Dependents (Legacy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cmake

  target_link_libraries(<target>
                        <LINK_PRIVATE|LINK_PUBLIC> <lib>...
                       [<LINK_PRIVATE|LINK_PUBLIC> <lib>...]...)

The ``LINK_PUBLIC`` and ``LINK_PRIVATE`` modes can be used to specify both
the link dependencies and the link interface in one command.

This signature is for compatibility only.  Prefer the ``PUBLIC`` or
``PRIVATE`` keywords instead.

Libraries and targets following ``LINK_PUBLIC`` are linked to, and are
made part of the :prop_tgt:`INTERFACE_LINK_LIBRARIES`.  If policy
:policy:`CMP0022` is not ``NEW``, they are also made part of the
:prop_tgt:`LINK_INTERFACE_LIBRARIES`.  Libraries and targets following
``LINK_PRIVATE`` are linked to, but are not made part of the
:prop_tgt:`INTERFACE_LINK_LIBRARIES` (or :prop_tgt:`LINK_INTERFACE_LIBRARIES`).

Libraries for Dependents Only (Legacy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cmake

  target_link_libraries(<target> LINK_INTERFACE_LIBRARIES <item>...)

The ``LINK_INTERFACE_LIBRARIES`` mode appends the libraries to the
:prop_tgt:`INTERFACE_LINK_LIBRARIES` target property instead of using them
for linking.  If policy :policy:`CMP0022` is not ``NEW``, then this mode
also appends libraries to the :prop_tgt:`LINK_INTERFACE_LIBRARIES` and its
per-configuration equivalent.

This signature is for compatibility only.  Prefer the ``INTERFACE`` mode
instead.

Libraries specified as ``debug`` are wrapped in a generator expression to
correspond to debug builds.  If policy :policy:`CMP0022` is
not ``NEW``, the libraries are also appended to the
:prop_tgt:`LINK_INTERFACE_LIBRARIES_DEBUG <LINK_INTERFACE_LIBRARIES_<CONFIG>>`
property (or to the properties corresponding to configurations listed in
the :prop_gbl:`DEBUG_CONFIGURATIONS` global property if it is set).
Libraries specified as ``optimized`` are appended to the
:prop_tgt:`INTERFACE_LINK_LIBRARIES` property.  If policy :policy:`CMP0022`
is not ``NEW``, they are also appended to the
:prop_tgt:`LINK_INTERFACE_LIBRARIES` property.  Libraries specified as
``general`` (or without any keyword) are treated as if specified for both
``debug`` and ``optimized``.

Linking Object Libraries
^^^^^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.12

:ref:`Object Libraries` may be used as the ``<target>`` (first) argument
of ``target_link_libraries`` to specify dependencies of their sources
on other libraries.  For example, the code

.. code-block:: cmake

  add_library(A SHARED a.c)
  target_compile_definitions(A PUBLIC A)

  add_library(obj OBJECT obj.c)
  target_compile_definitions(obj PUBLIC OBJ)
  target_link_libraries(obj PUBLIC A)

compiles ``obj.c`` with ``-DA -DOBJ`` and establishes usage requirements
for ``obj`` that propagate to its dependents.

Normal libraries and executables may link to :ref:`Object Libraries`
to get their objects and usage requirements.  Continuing the above
example, the code

.. code-block:: cmake

  add_library(B SHARED b.c)
  target_link_libraries(B PUBLIC obj)

compiles ``b.c`` with ``-DA -DOBJ``, creates shared library ``B``
with object files from ``b.c`` and ``obj.c``, and links ``B`` to ``A``.
Furthermore, the code

.. code-block:: cmake

  add_executable(main main.c)
  target_link_libraries(main B)

compiles ``main.c`` with ``-DA -DOBJ`` and links executable ``main``
to ``B`` and ``A``.  The object library's usage requirements are
propagated transitively through ``B``, but its object files are not.

:ref:`Object Libraries` may "link" to other object libraries to get
usage requirements, but since they do not have a link step nothing
is done with their object files.  Continuing from the above example,
the code:

.. code-block:: cmake

  add_library(obj2 OBJECT obj2.c)
  target_link_libraries(obj2 PUBLIC obj)

  add_executable(main2 main2.c)
  target_link_libraries(main2 obj2)

compiles ``obj2.c`` with ``-DA -DOBJ``, creates executable ``main2``
with object files from ``main2.c`` and ``obj2.c``, and links ``main2``
to ``A``.

In other words, when :ref:`Object Libraries` appear in a target's
:prop_tgt:`INTERFACE_LINK_LIBRARIES` property they will be
treated as :ref:`Interface Libraries`, but when they appear in
a target's :prop_tgt:`LINK_LIBRARIES` property their object files
will be included in the link too.

.. _`Linking Object Libraries via $<TARGET_OBJECTS>`:

Linking Object Libraries via ``$<TARGET_OBJECTS>``
""""""""""""""""""""""""""""""""""""""""""""""""""

.. versionadded:: 3.21

The object files associated with an object library may be referenced
by the :genex:`$<TARGET_OBJECTS>` generator expression.  Such object
files are placed on the link line *before* all libraries, regardless
of their relative order.  Additionally, an ordering dependency will be
added to the build system to make sure the object library is up-to-date
before the dependent target links.  For example, the code

.. code-block:: cmake

  add_library(obj3 OBJECT obj3.c)
  target_compile_definitions(obj3 PUBLIC OBJ3)

  add_executable(main3 main3.c)
  target_link_libraries(main3 PRIVATE a3 $<TARGET_OBJECTS:obj3> b3)

links executable ``main3`` with object files from ``main3.c``
and ``obj3.c`` followed by the ``a3`` and ``b3`` libraries.
``main3.c`` is *not* compiled with usage requirements from ``obj3``,
such as ``-DOBJ3``.

This approach can be used to achieve transitive inclusion of object
files in link lines as usage requirements.  Continuing the above
example, the code

.. code-block:: cmake

  add_library(iface_obj3 INTERFACE)
  target_link_libraries(iface_obj3 INTERFACE obj3 $<TARGET_OBJECTS:obj3>)

creates an interface library ``iface_obj3`` that forwards the ``obj3``
usage requirements and adds the ``obj3`` object files to dependents'
link lines.  The code

.. code-block:: cmake

  add_executable(use_obj3 use_obj3.c)
  target_link_libraries(use_obj3 PRIVATE iface_obj3)

compiles ``use_obj3.c`` with ``-DOBJ3`` and links executable ``use_obj3``
with object files from ``use_obj3.c`` and ``obj3.c``.

This also works transitively through a static library.  Since a static
library does not link, it does not consume the object files from
object libraries referenced this way.  Instead, the object files
become transitive link dependencies of the static library.
Continuing the above example, the code

.. code-block:: cmake

  add_library(static3 STATIC static3.c)
  target_link_libraries(static3 PRIVATE iface_obj3)

  add_executable(use_static3 use_static3.c)
  target_link_libraries(use_static3 PRIVATE static3)

compiles ``static3.c`` with ``-DOBJ3`` and creates ``libstatic3.a``
using only its own object file.  ``use_static3.c`` is compiled *without*
``-DOBJ3`` because the usage requirement is not transitive through
the private dependency of ``static3``.  However, the link dependencies
of ``static3`` are propagated, including the ``iface_obj3`` reference
to ``$<TARGET_OBJECTS:obj3>``.  The ``use_static3`` executable is
created with object files from ``use_static3.c`` and ``obj3.c``, and
linked to library ``libstatic3.a``.

When using this approach, it is the project's responsibility to avoid
linking multiple dependent binaries to ``iface_obj3``, because they will
all get the ``obj3`` object files on their link lines.

.. note::

  Referencing :genex:`$<TARGET_OBJECTS>` in ``target_link_libraries``
  calls worked in versions of CMake prior to 3.21 for some cases,
  but was not fully supported:

  * It did not place the object files before libraries on link lines.
  * It did not add an ordering dependency on the object library.
  * It did not work in Xcode with multiple architectures.

Cyclic Dependencies of Static Libraries
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The library dependency graph is normally acyclic (a DAG), but in the case
of mutually-dependent ``STATIC`` libraries CMake allows the graph to
contain cycles (strongly connected components).  When another target links
to one of the libraries, CMake repeats the entire connected component.
For example, the code

.. code-block:: cmake

  add_library(A STATIC a.c)
  add_library(B STATIC b.c)
  target_link_libraries(A B)
  target_link_libraries(B A)
  add_executable(main main.c)
  target_link_libraries(main A)

links ``main`` to ``A B A B``.  While one repetition is usually
sufficient, pathological object file and symbol arrangements can require
more.  One may handle such cases by using the
:prop_tgt:`LINK_INTERFACE_MULTIPLICITY` target property or by manually
repeating the component in the last ``target_link_libraries`` call.
However, if two archives are really so interdependent they should probably
be combined into a single archive, perhaps by using :ref:`Object Libraries`.

Creating Relocatable Packages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. |INTERFACE_PROPERTY_LINK| replace:: :prop_tgt:`INTERFACE_LINK_LIBRARIES`
.. include:: /include/INTERFACE_LINK_LIBRARIES_WARNING.txt

See Also
^^^^^^^^

* :command:`target_compile_definitions`
* :command:`target_compile_features`
* :command:`target_compile_options`
* :command:`target_include_directories`
* :command:`target_link_directories`
* :command:`target_link_options`
* :command:`target_precompile_headers`
* :command:`target_sources`



/P/🚀 command/target_link_options.rst
===================================================


target_link_options
-------------------

.. versionadded:: 3.13

Add options to the link step for an executable, shared library or module
library target.

.. code-block:: cmake

  target_link_options(<target> [BEFORE]
    <INTERFACE|PUBLIC|PRIVATE> [items1...]
    [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])

The named ``<target>`` must have been created by a command such as
:command:`add_executable` or :command:`add_library` and must not be an
:ref:`ALIAS target <Alias Targets>`.

This command can be used to add any link options, but alternative commands
exist to add libraries (:command:`target_link_libraries` or
:command:`link_libraries`).  See documentation of the
:prop_dir:`directory <LINK_OPTIONS>` and
:prop_tgt:`target <LINK_OPTIONS>` ``LINK_OPTIONS`` properties.

.. note::

  This command cannot be used to add options for static library targets,
  since they do not use a linker.  To add archiver or MSVC librarian flags,
  see the :prop_tgt:`STATIC_LIBRARY_OPTIONS` target property.

If ``BEFORE`` is specified, the content will be prepended to the property
instead of being appended.

The ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to
specify the :ref:`scope <Target Usage Requirements>` of the following arguments.
``PRIVATE`` and ``PUBLIC`` items will populate the :prop_tgt:`LINK_OPTIONS`
property of ``<target>``.  ``PUBLIC`` and ``INTERFACE`` items will populate the
:prop_tgt:`INTERFACE_LINK_OPTIONS` property of ``<target>``.
The following arguments specify link options.  Repeated calls for the same
``<target>`` append items in the order called.

.. note::
  :ref:`IMPORTED targets <Imported Targets>` only support ``INTERFACE`` items.

.. |command_name| replace:: ``target_link_options``
.. include:: GENEX_NOTE.txt

.. include:: DEVICE_LINK_OPTIONS.txt

.. include:: OPTIONS_SHELL.txt

.. include:: LINK_OPTIONS_LINKER.txt

See Also
^^^^^^^^

* :command:`target_compile_definitions`
* :command:`target_compile_features`
* :command:`target_compile_options`
* :command:`target_include_directories`
* :command:`target_link_libraries`
* :command:`target_link_directories`
* :command:`target_precompile_headers`
* :command:`target_sources`

* :variable:`CMAKE_<LANG>_FLAGS` and :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>`
  add language-wide flags passed to all invocations of the compiler.
  This includes invocations that drive compiling and those that drive linking.



/P/🚀 command/target_precompile_headers.rst
=========================================================


target_precompile_headers
-------------------------

.. versionadded:: 3.16

Add a list of header files to precompile.

Precompiling header files can speed up compilation by creating a partially
processed version of some header files, and then using that version during
compilations rather than repeatedly parsing the original headers.

Main Form
^^^^^^^^^

.. code-block:: cmake

  target_precompile_headers(<target>
    <INTERFACE|PUBLIC|PRIVATE> [header1...]
    [<INTERFACE|PUBLIC|PRIVATE> [header2...] ...])

The command adds header files to the :prop_tgt:`PRECOMPILE_HEADERS` and/or
:prop_tgt:`INTERFACE_PRECOMPILE_HEADERS` target properties of ``<target>``.
The named ``<target>`` must have been created by a command such as
:command:`add_executable` or :command:`add_library` and must not be an
:ref:`ALIAS target <Alias Targets>`.

The ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to
specify the :ref:`scope <Target Usage Requirements>` of the following arguments.
``PRIVATE`` and ``PUBLIC`` items will populate the :prop_tgt:`PRECOMPILE_HEADERS`
property of ``<target>``.  ``PUBLIC`` and ``INTERFACE`` items will populate the
:prop_tgt:`INTERFACE_PRECOMPILE_HEADERS` property of ``<target>``
(:ref:`IMPORTED targets <Imported Targets>` only support ``INTERFACE`` items).
Repeated calls for the same ``<target>`` will append items in the order called.

Projects should generally avoid using ``PUBLIC`` or ``INTERFACE`` for targets
that will be :command:`exported <install(EXPORT)>`, or they should at least use
the :genex:`$<BUILD_INTERFACE:...>` generator expression to prevent precompile
headers from appearing in an installed exported target.  Consumers of a target
should typically be in control of what precompile headers they use, not have
precompile headers forced on them by the targets being consumed (since
precompile headers are not typically usage requirements).  A notable exception
to this is where an :ref:`interface library <Interface Libraries>` is created
to define a commonly used set of precompile headers in one place and then other
targets link to that interface library privately.  In this case, the interface
library exists specifically to propagate the precompile headers to its
consumers and the consumer is effectively still in control, since it decides
whether to link to the interface library or not.

The list of header files is used to generate a header file named
``cmake_pch.h|xx`` which is used to generate the precompiled header file
(``.pch``, ``.gch``, ``.pchi``) artifact.  The ``cmake_pch.h|xx`` header
file will be force included (``-include`` for GCC, ``/FI`` for MSVC) to
all source files, so sources do not need to have ``#include "pch.h"``.

Header file names specified with angle brackets (e.g. ``<unordered_map>``) or
explicit double quotes (escaped for the :manual:`cmake-language(7)`,
e.g. ``[["other_header.h"]]``) will be treated as is, and include directories
must be available for the compiler to find them.  Other header file names
(e.g. ``project_header.h``) are interpreted as being relative to the current
source directory (e.g. :variable:`CMAKE_CURRENT_SOURCE_DIR`) and will be
included by absolute path.  For example:

.. code-block:: cmake

  target_precompile_headers(myTarget
    PUBLIC
      project_header.h
    PRIVATE
      [["other_header.h"]]
      <unordered_map>
  )

.. |command_name| replace:: ``target_precompile_headers``
.. |more_see_also| replace:: The :genex:`$<COMPILE_LANGUAGE:...>` generator
   expression is particularly useful for specifying a language-specific header
   to precompile for only one language (e.g. ``CXX`` and not ``C``).  In this
   case, header file names that are not explicitly in double quotes or angle
   brackets must be specified by absolute path.  Also, when specifying angle
   brackets inside a generator expression, be sure to encode the closing
   ``>`` as :genex:`$<ANGLE-R>`.  For example:
.. include:: GENEX_NOTE.txt
   :start-line: 1

.. code-block:: cmake

  target_precompile_headers(mylib PRIVATE
    "$<$<COMPILE_LANGUAGE:CXX>:${CMAKE_CURRENT_SOURCE_DIR}/cxx_only.h>"
    "$<$<COMPILE_LANGUAGE:C>:<stddef.h$<ANGLE-R>>"
    "$<$<COMPILE_LANGUAGE:CXX>:<cstddef$<ANGLE-R>>"
  )


Reusing Precompile Headers
^^^^^^^^^^^^^^^^^^^^^^^^^^

The command also supports a second signature which can be used to specify that
one target reuses a precompiled header file artifact from another target
instead of generating its own:

.. code-block:: cmake

  target_precompile_headers(<target> REUSE_FROM <other_target>)

This form sets the :prop_tgt:`PRECOMPILE_HEADERS_REUSE_FROM` property to
``<other_target>`` and adds a dependency such that ``<target>`` will depend
on ``<other_target>``.  CMake will halt with an error if the
:prop_tgt:`PRECOMPILE_HEADERS` property of ``<target>`` is already set when
the ``REUSE_FROM`` form is used.

.. note::

  The ``REUSE_FROM`` form requires the same set of compiler options,
  compiler flags and compiler definitions for both ``<target>`` and
  ``<other_target>``.  Some compilers (e.g. GCC) may issue a warning if the
  precompiled header file cannot be used (``-Winvalid-pch``).

See Also
^^^^^^^^

* To disable precompile headers for specific targets, see the
  :prop_tgt:`DISABLE_PRECOMPILE_HEADERS` target property.

* To prevent precompile headers from being used when compiling a specific
  source file, see the :prop_sf:`SKIP_PRECOMPILE_HEADERS` source file property.

* :command:`target_compile_definitions`
* :command:`target_compile_features`
* :command:`target_compile_options`
* :command:`target_include_directories`
* :command:`target_link_libraries`
* :command:`target_link_directories`
* :command:`target_link_options`
* :command:`target_sources`



/P/🚀 command/target_sources.rst
==============================================


target_sources
--------------

.. versionadded:: 3.1

Add sources to a target.

.. code-block:: cmake

  target_sources(<target>
    <INTERFACE|PUBLIC|PRIVATE> [items1...]
    [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])

Specifies sources to use when building a target and/or its dependents.
The named ``<target>`` must have been created by a command such as
:command:`add_executable` or :command:`add_library` or
:command:`add_custom_target` and must not be an
:ref:`ALIAS target <Alias Targets>`.  The ``<items>`` may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.

.. versionadded:: 3.20
  ``<target>`` can be a custom target.

The ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to
specify the :ref:`scope <Target Usage Requirements>` of the source file paths
(``<items>``) that follow them.  ``PRIVATE`` and ``PUBLIC`` items will
populate the :prop_tgt:`SOURCES` property of ``<target>``, which are used when
building the target itself. ``PUBLIC`` and ``INTERFACE`` items will populate the
:prop_tgt:`INTERFACE_SOURCES` property of ``<target>``, which are used
when building dependents.  A target created by :command:`add_custom_target`
can only have ``PRIVATE`` scope.

Repeated calls for the same ``<target>`` append items in the order called.

.. versionadded:: 3.3
  Allow exporting targets with :prop_tgt:`INTERFACE_SOURCES`.

.. versionadded:: 3.11
  Allow setting ``INTERFACE`` items on
  :ref:`IMPORTED targets <Imported Targets>`.

.. versionchanged:: 3.13
  Relative source file paths are interpreted as being relative to the current
  source directory (i.e. :variable:`CMAKE_CURRENT_SOURCE_DIR`).
  See policy :policy:`CMP0076`.

A path that begins with a generator expression is left unmodified.
When a target's :prop_tgt:`SOURCE_DIR` property differs from
:variable:`CMAKE_CURRENT_SOURCE_DIR`, use absolute paths in generator
expressions to ensure the sources are correctly assigned to the target.

.. code-block:: cmake

  # WRONG: starts with generator expression, but relative path used
  target_sources(MyTarget PRIVATE "$<$<CONFIG:Debug>:dbgsrc.cpp>")

  # CORRECT: absolute path used inside the generator expression
  target_sources(MyTarget PRIVATE "$<$<CONFIG:Debug>:${CMAKE_CURRENT_SOURCE_DIR}/dbgsrc.cpp>")

See the :manual:`cmake-buildsystem(7)` manual for more on defining
buildsystem properties.

.. _`File Sets`:

File Sets
^^^^^^^^^

.. versionadded:: 3.23

.. code-block:: cmake

  target_sources(<target>
    [<INTERFACE|PUBLIC|PRIVATE>
     [FILE_SET <set> [TYPE <type>] [BASE_DIRS <dirs>...] [FILES <files>...]]...
    ]...)

Adds a file set to a target, or adds files to an existing file set. Targets
have zero or more named file sets. Each file set has a name, a type, a scope of
``INTERFACE``, ``PUBLIC``, or ``PRIVATE``, one or more base directories, and
files within those directories. The acceptable types include:

``HEADERS``

  Sources intended to be used via a language's ``#include`` mechanism.

``CXX_MODULES``
  .. versionadded:: 3.28

  Sources which contain C++ interface module or partition units (i.e., those
  using the ``export`` keyword). This file set type may not have an
  ``INTERFACE`` scope except on ``IMPORTED`` targets.

The optional default file sets are named after their type. The target may not
be a custom target or :prop_tgt:`FRAMEWORK` target.

Files in a ``PRIVATE`` or ``PUBLIC`` file set are marked as source files for
the purposes of IDE integration. Additionally, files in ``HEADERS`` file sets
have their :prop_sf:`HEADER_FILE_ONLY` property set to ``TRUE``. Files in an
``INTERFACE`` or ``PUBLIC`` file set can be installed with the
:command:`install(TARGETS)` command, and exported with the
:command:`install(EXPORT)` and :command:`export` commands.

Each ``target_sources(FILE_SET)`` entry starts with ``INTERFACE``, ``PUBLIC``, or
``PRIVATE`` and accepts the following arguments:

``FILE_SET <set>``

  The name of the file set to create or add to. It must contain only letters,
  numbers and underscores. Names starting with a capital letter are reserved
  for built-in file sets predefined by CMake. The only predefined set names
  are those matching the acceptable types. All other set names must not start
  with a capital letter or
  underscore.

``TYPE <type>``

  Every file set is associated with a particular type of file. Only types
  specified above may be used and it is an error to specify anything else. As
  a special case, if the name of the file set is one of the types, the type
  does not need to be specified and the ``TYPE <type>`` arguments can be
  omitted. For all other file set names, ``TYPE`` is required.

``BASE_DIRS <dirs>...``

  An optional list of base directories of the file set. Any relative path
  is treated as relative to the current source directory
  (i.e. :variable:`CMAKE_CURRENT_SOURCE_DIR`). If no ``BASE_DIRS`` are
  specified when the file set is first created, the value of
  :variable:`CMAKE_CURRENT_SOURCE_DIR` is added. This argument supports
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

  No two base directories for a file set may be sub-directories of each other.
  This requirement must be met across all base directories added to a file set,
  not just those within a single call to ``target_sources()``.

``FILES <files>...``

  An optional list of files to add to the file set. Each file must be in
  one of the base directories, or a subdirectory of one of the base
  directories. This argument supports
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

  If relative paths are specified, they are considered relative to
  :variable:`CMAKE_CURRENT_SOURCE_DIR` at the time ``target_sources()`` is
  called. An exception to this is a path starting with ``$<``. Such paths
  are treated as relative to the target's source directory after evaluation
  of generator expressions.

The following target properties are set by ``target_sources(FILE_SET)``,
but they should not generally be manipulated directly:

For file sets of type ``HEADERS``:

* :prop_tgt:`HEADER_SETS`
* :prop_tgt:`INTERFACE_HEADER_SETS`
* :prop_tgt:`HEADER_SET`
* :prop_tgt:`HEADER_SET_<NAME>`
* :prop_tgt:`HEADER_DIRS`
* :prop_tgt:`HEADER_DIRS_<NAME>`

For file sets of type ``CXX_MODULES``:

* :prop_tgt:`CXX_MODULE_SETS`
* :prop_tgt:`INTERFACE_CXX_MODULE_SETS`
* :prop_tgt:`CXX_MODULE_SET`
* :prop_tgt:`CXX_MODULE_SET_<NAME>`
* :prop_tgt:`CXX_MODULE_DIRS`
* :prop_tgt:`CXX_MODULE_DIRS_<NAME>`

Target properties related to include directories are also modified by
``target_sources(FILE_SET)`` as follows:

:prop_tgt:`INCLUDE_DIRECTORIES`

  If the ``TYPE`` is ``HEADERS``, and the scope of the file set is ``PRIVATE``
  or ``PUBLIC``, all of the ``BASE_DIRS`` of the file set are wrapped in
  :genex:`$<BUILD_INTERFACE>` and appended to this property.

:prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`

  If the ``TYPE`` is ``HEADERS``, and the scope of the file set is
  ``INTERFACE`` or ``PUBLIC``, all of the ``BASE_DIRS`` of the file set are
  wrapped in :genex:`$<BUILD_INTERFACE>` and appended to this property.

See Also
^^^^^^^^

* :command:`add_executable`
* :command:`add_library`
* :command:`target_compile_definitions`
* :command:`target_compile_features`
* :command:`target_compile_options`
* :command:`target_include_directories`
* :command:`target_link_libraries`
* :command:`target_link_directories`
* :command:`target_link_options`
* :command:`target_precompile_headers`



/P/🚀 command/try_compile.rst
===========================================


try_compile
-----------

Try building some code.

.. _`Try Compiling Whole Projects`:

Try Compiling Whole Projects
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cmake

  try_compile(<compileResultVar> PROJECT <projectName>
              SOURCE_DIR <srcdir>
              [BINARY_DIR <bindir>]
              [TARGET <targetName>]
              [LOG_DESCRIPTION <text>]
              [NO_CACHE]
              [NO_LOG]
              [CMAKE_FLAGS <flags>...]
              [OUTPUT_VARIABLE <var>])

.. versionadded:: 3.25

Try building a project.  Build success returns ``TRUE`` and build failure
returns ``FALSE`` in ``<compileResultVar>``.

In this form, ``<srcdir>`` should contain a complete CMake project with a
``CMakeLists.txt`` file and all sources.  The ``<bindir>`` and ``<srcdir>``
will not be deleted after this command is run.  Specify ``<targetName>`` to
build a specific target instead of the ``all`` or ``ALL_BUILD`` target.  See
below for the meaning of other options.

.. versionchanged:: 3.24
  CMake variables describing platform settings, and those listed by the
  :variable:`CMAKE_TRY_COMPILE_PLATFORM_VARIABLES` variable, are propagated
  into the project's build configuration.  See policy :policy:`CMP0137`.
  Previously this was only done by the
  :ref:`source file <Try Compiling Source Files>` signature.

.. versionadded:: 3.26
  This command records a
  :ref:`configure-log try_compile event <try_compile configure-log event>`
  if the ``NO_LOG`` option is not specified.

This command supports an alternate signature for CMake older than 3.25.
The signature above is recommended for clarity.

.. code-block:: cmake

  try_compile(<compileResultVar> <bindir> <srcdir>
              <projectName> [<targetName>]
              [CMAKE_FLAGS <flags>...]
              [OUTPUT_VARIABLE <var>])

.. _`Try Compiling Source Files`:

Try Compiling Source Files
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cmake

  try_compile(<compileResultVar>
              [SOURCES_TYPE <type>]
              <SOURCES <srcfile...>                 |
               SOURCE_FROM_CONTENT <name> <content> |
               SOURCE_FROM_VAR <name> <var>         |
               SOURCE_FROM_FILE <name> <path>       >...
              [LOG_DESCRIPTION <text>]
              [NO_CACHE]
              [NO_LOG]
              [CMAKE_FLAGS <flags>...]
              [COMPILE_DEFINITIONS <defs>...]
              [LINK_OPTIONS <options>...]
              [LINK_LIBRARIES <libs>...]
              [LINKER_LANGUAGE <lang>]
              [OUTPUT_VARIABLE <var>]
              [COPY_FILE <fileName> [COPY_FILE_ERROR <var>]]
              [<LANG>_STANDARD <std>]
              [<LANG>_STANDARD_REQUIRED <bool>]
              [<LANG>_EXTENSIONS <bool>]
              )

.. versionadded:: 3.25

Try building an executable or static library from one or more source files
(which one is determined by the :variable:`CMAKE_TRY_COMPILE_TARGET_TYPE`
variable). Build success returns ``TRUE`` and build failure returns ``FALSE``
in ``<compileResultVar>``.

In this form, one or more source files must be provided. Additionally, one of
``SOURCES`` and/or ``SOURCE_FROM_*`` must precede other keywords.

If :variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` is unset or is set to
``EXECUTABLE``, the sources must include a definition for ``main`` and CMake
will create a ``CMakeLists.txt`` file to build the source(s) as an executable.
If :variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` is set to ``STATIC_LIBRARY``,
a static library will be built instead and no definition for ``main`` is
required.  For an executable, the generated ``CMakeLists.txt`` file would
contain something like the following:

.. code-block:: cmake

  add_definitions(<expanded COMPILE_DEFINITIONS from caller>)
  include_directories(${INCLUDE_DIRECTORIES})
  link_directories(${LINK_DIRECTORIES})
  add_executable(cmTryCompileExec <srcfile>...)
  target_link_options(cmTryCompileExec PRIVATE <LINK_OPTIONS from caller>)
  target_link_libraries(cmTryCompileExec ${LINK_LIBRARIES})

CMake automatically generates, for each ``try_compile`` operation, a
unique directory under ``${CMAKE_BINARY_DIR}/CMakeFiles/CMakeScratch``
with an unspecified name.  These directories are cleaned automatically unless
:option:`--debug-trycompile <cmake --debug-trycompile>` is passed to :program:`cmake`.
Such directories from previous runs are also unconditionally cleaned at the
beginning of any :program:`cmake` execution.

This command supports an alternate signature for CMake older than 3.25.
The signature above is recommended for clarity.

.. code-block:: cmake

  try_compile(<compileResultVar> <bindir> <srcfile|SOURCES srcfile...>
              [CMAKE_FLAGS <flags>...]
              [COMPILE_DEFINITIONS <defs>...]
              [LINK_OPTIONS <options>...]
              [LINK_LIBRARIES <libs>...]
              [OUTPUT_VARIABLE <var>]
              [COPY_FILE <fileName> [COPY_FILE_ERROR <var>]]
              [<LANG>_STANDARD <std>]
              [<LANG>_STANDARD_REQUIRED <bool>]
              [<LANG>_EXTENSIONS <bool>]
              )

In this version, ``try_compile`` will use ``<bindir>/CMakeFiles/CMakeTmp`` for
its operation, and all such files will be cleaned automatically.
For debugging, :option:`--debug-trycompile <cmake --debug-trycompile>` can be
passed to :program:`cmake` to avoid this clean.  However, multiple sequential
``try_compile`` operations, if given the same ``<bindir>``, will reuse this
single output directory, such that you can only debug one such ``try_compile``
call at a time.  Use of the newer signature is recommended to simplify
debugging of multiple ``try_compile`` operations.

.. _`try_compile Options`:

Options
^^^^^^^

The options for the above signatures are:

``CMAKE_FLAGS <flags>...``
  Specify flags of the form :option:`-DVAR:TYPE=VALUE <cmake -D>` to be passed
  to the :manual:`cmake(1)` command-line used to drive the test build.
  The above example shows how values for variables
  ``INCLUDE_DIRECTORIES``, ``LINK_DIRECTORIES``, and ``LINK_LIBRARIES``
  are used.

``COMPILE_DEFINITIONS <defs>...``
  Specify ``-Ddefinition`` arguments to pass to :command:`add_definitions`
  in the generated test project.

``COPY_FILE <fileName>``
  Copy the built executable or static library to the given ``<fileName>``.

``COPY_FILE_ERROR <var>``
  Use after ``COPY_FILE`` to capture into variable ``<var>`` any error
  message encountered while trying to copy the file.

``LINK_LIBRARIES <libs>...``
  Specify libraries to be linked in the generated project.
  The list of libraries may refer to system libraries and to
  :ref:`Imported Targets <Imported Targets>` from the calling project.

  If this option is specified, any ``-DLINK_LIBRARIES=...`` value
  given to the ``CMAKE_FLAGS`` option will be ignored.

  .. versionadded:: 3.29
    Alias targets to imported libraries are also supported.

``LINK_OPTIONS <options>...``
  .. versionadded:: 3.14

  Specify link step options to pass to :command:`target_link_options` or to
  set the :prop_tgt:`STATIC_LIBRARY_OPTIONS` target property in the generated
  project, depending on the :variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` variable.

``LINKER_LANGUAGE <lang>```
  .. versionadded:: 3.29

  Specify the :prop_tgt:`LINKER_LANGUAGE` target property of the generated
  project.  When using multiple source files with different languages, set
  this to the language of the source file containing the program entry point,
  e.g., ``main``.

``LOG_DESCRIPTION <text>``
  .. versionadded:: 3.26

  Specify a non-empty text description of the purpose of the check.
  This is recorded in the :manual:`cmake-configure-log(7)` entry.

``NO_CACHE``
  .. versionadded:: 3.25

  The result will be stored in a normal variable rather than a cache entry.

  The result variable is normally cached so that a simple pattern can be used
  to avoid repeating the test on subsequent executions of CMake:

  .. code-block:: cmake

    if(NOT DEFINED RESULTVAR)
      # ...(check-specific setup code)...
      try_compile(RESULTVAR ...)
      # ...(check-specific logging and cleanup code)...
    endif()

  If the guard variable and result variable are not the same (for example, if
  the test is part of a larger inspection), ``NO_CACHE`` may be useful to avoid
  leaking the intermediate result variable into the cache.

``NO_LOG``
  .. versionadded:: 3.26

  Do not record a :manual:`cmake-configure-log(7)` entry for this call.

``OUTPUT_VARIABLE <var>``
  Store the output from the build process in the given variable.

``SOURCE_FROM_CONTENT <name> <content>``
  .. versionadded:: 3.25

  Write ``<content>`` to a file named ``<name>`` in the operation directory.
  This can be used to bypass the need to separately write a source file when
  the contents of the file are dynamically specified. The specified ``<name>``
  is not allowed to contain path components.

  ``SOURCE_FROM_CONTENT`` may be specified multiple times.

``SOURCE_FROM_FILE <name> <path>``
  .. versionadded:: 3.25

  Copy ``<path>`` to a file named ``<name>`` in the operation directory. This
  can be used to consolidate files into the operation directory, which may be
  useful if a source which already exists (i.e. as a stand-alone file in a
  project's source repository) needs to refer to other file(s) created by
  ``SOURCE_FROM_*``. (Otherwise, ``SOURCES`` is usually more convenient.) The
  specified ``<name>`` is not allowed to contain path components.

``SOURCE_FROM_VAR <name> <var>``
  .. versionadded:: 3.25

  Write the contents of ``<var>`` to a file named ``<name>`` in the operation
  directory. This is the same as ``SOURCE_FROM_CONTENT``, but takes the
  contents from the specified CMake variable, rather than directly, which may
  be useful when passing arguments through a function which wraps
  ``try_compile``. The specified ``<name>`` is not allowed to contain path
  components.

  ``SOURCE_FROM_VAR`` may be specified multiple times.

``SOURCES_TYPE <type>``
  .. versionadded:: 3.28

  Sources may be classified using the ``SOURCES_TYPE`` argument. Once
  specified, all subsequent sources specified will be treated as that type
  until another ``SOURCES_TYPE`` is given. Available types are:

  ``NORMAL``
    Sources are not added to any ``FILE_SET`` in the generated project.

  ``CXX_MODULE``
    .. versionadded:: 3.28

    Sources are added to a ``FILE_SET`` of type ``CXX_MODULES`` in the
    generated project.

  The default type of sources is ``NORMAL``.

``<LANG>_STANDARD <std>``
  .. versionadded:: 3.8

  Specify the :prop_tgt:`C_STANDARD`, :prop_tgt:`CXX_STANDARD`,
  :prop_tgt:`OBJC_STANDARD`, :prop_tgt:`OBJCXX_STANDARD`,
  or :prop_tgt:`CUDA_STANDARD` target property of the generated project.

``<LANG>_STANDARD_REQUIRED <bool>``
  .. versionadded:: 3.8

  Specify the :prop_tgt:`C_STANDARD_REQUIRED`,
  :prop_tgt:`CXX_STANDARD_REQUIRED`, :prop_tgt:`OBJC_STANDARD_REQUIRED`,
  :prop_tgt:`OBJCXX_STANDARD_REQUIRED`,or :prop_tgt:`CUDA_STANDARD_REQUIRED`
  target property of the generated project.

``<LANG>_EXTENSIONS <bool>``
  .. versionadded:: 3.8

  Specify the :prop_tgt:`C_EXTENSIONS`, :prop_tgt:`CXX_EXTENSIONS`,
  :prop_tgt:`OBJC_EXTENSIONS`, :prop_tgt:`OBJCXX_EXTENSIONS`,
  or :prop_tgt:`CUDA_EXTENSIONS` target property of the generated project.

Other Behavior Settings
^^^^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.4
  If set, the following variables are passed in to the generated
  try_compile CMakeLists.txt to initialize compile target properties with
  default values:

  * :variable:`CMAKE_CUDA_RUNTIME_LIBRARY`
  * :variable:`CMAKE_ENABLE_EXPORTS`
  * :variable:`CMAKE_LINK_SEARCH_START_STATIC`
  * :variable:`CMAKE_LINK_SEARCH_END_STATIC`
  * :variable:`CMAKE_MSVC_RUNTIME_LIBRARY`
  * :variable:`CMAKE_POSITION_INDEPENDENT_CODE`
  * :variable:`CMAKE_WATCOM_RUNTIME_LIBRARY`

  If :policy:`CMP0056` is set to ``NEW``, then
  :variable:`CMAKE_EXE_LINKER_FLAGS` is passed in as well.

.. versionchanged:: 3.14
  If :policy:`CMP0083` is set to ``NEW``, then in order to obtain correct
  behavior at link time, the ``check_pie_supported()`` command from the
  :module:`CheckPIESupported` module must be called before using the
  ``try_compile`` command.

The current settings of :policy:`CMP0065` and :policy:`CMP0083` are propagated
through to the generated test project.

Set variable :variable:`CMAKE_TRY_COMPILE_CONFIGURATION` to choose a build
configuration:

* For multi-config generators, this selects which configuration to build.

* For single-config generators, this sets :variable:`CMAKE_BUILD_TYPE` in
  the test project.

.. versionadded:: 3.6
  Set the :variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` variable to specify
  the type of target used for the source file signature.

.. versionadded:: 3.6
  Set the :variable:`CMAKE_TRY_COMPILE_PLATFORM_VARIABLES` variable to specify
  variables that must be propagated into the test project.  This variable is
  meant for use only in toolchain files and is only honored by the
  ``try_compile()`` command for the source files form, not when given a whole
  project.

.. versionchanged:: 3.8
  If :policy:`CMP0067` is set to ``NEW``, or any of the ``<LANG>_STANDARD``,
  ``<LANG>_STANDARD_REQUIRED``, or ``<LANG>_EXTENSIONS`` options are used,
  then the language standard variables are honored:

  * :variable:`CMAKE_C_STANDARD`
  * :variable:`CMAKE_C_STANDARD_REQUIRED`
  * :variable:`CMAKE_C_EXTENSIONS`
  * :variable:`CMAKE_CXX_STANDARD`
  * :variable:`CMAKE_CXX_STANDARD_REQUIRED`
  * :variable:`CMAKE_CXX_EXTENSIONS`
  * :variable:`CMAKE_OBJC_STANDARD`
  * :variable:`CMAKE_OBJC_STANDARD_REQUIRED`
  * :variable:`CMAKE_OBJC_EXTENSIONS`
  * :variable:`CMAKE_OBJCXX_STANDARD`
  * :variable:`CMAKE_OBJCXX_STANDARD_REQUIRED`
  * :variable:`CMAKE_OBJCXX_EXTENSIONS`
  * :variable:`CMAKE_CUDA_STANDARD`
  * :variable:`CMAKE_CUDA_STANDARD_REQUIRED`
  * :variable:`CMAKE_CUDA_EXTENSIONS`

  Their values are used to set the corresponding target properties in
  the generated project (unless overridden by an explicit option).

.. versionchanged:: 3.14
  For the :generator:`Green Hills MULTI` generator, the GHS toolset and target
  system customization cache variables are also propagated into the test
  project.

.. versionadded:: 3.24
  The :variable:`CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES` variable may be
  set to disable passing platform variables into the test project.

.. versionadded:: 3.25
  If :policy:`CMP0141` is set to ``NEW``, one can use
  :variable:`CMAKE_MSVC_DEBUG_INFORMATION_FORMAT` to specify the MSVC debug
  information format.

See Also
^^^^^^^^

* :command:`try_run`



/P/🚀 command/try_run.rst
=======================================


try_run
-------

Try compiling and then running some code.

Try Compiling and Running Source Files
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cmake

  try_run(<runResultVar> <compileResultVar>
          [SOURCES_TYPE <type>]
          <SOURCES <srcfile...>                 |
           SOURCE_FROM_CONTENT <name> <content> |
           SOURCE_FROM_VAR <name> <var>         |
           SOURCE_FROM_FILE <name> <path>       >...
          [LOG_DESCRIPTION <text>]
          [NO_CACHE]
          [NO_LOG]
          [CMAKE_FLAGS <flags>...]
          [COMPILE_DEFINITIONS <defs>...]
          [LINK_OPTIONS <options>...]
          [LINK_LIBRARIES <libs>...]
          [COMPILE_OUTPUT_VARIABLE <var>]
          [COPY_FILE <fileName> [COPY_FILE_ERROR <var>]]
          [<LANG>_STANDARD <std>]
          [<LANG>_STANDARD_REQUIRED <bool>]
          [<LANG>_EXTENSIONS <bool>]
          [RUN_OUTPUT_VARIABLE <var>]
          [RUN_OUTPUT_STDOUT_VARIABLE <var>]
          [RUN_OUTPUT_STDERR_VARIABLE <var>]
          [WORKING_DIRECTORY <var>]
          [ARGS <args>...]
          )

.. versionadded:: 3.25

Try building an executable from one or more source files.  Build success
returns ``TRUE`` and build failure returns ``FALSE`` in ``<compileResultVar>``.
If the build succeeds, this runs the executable and stores the exit code in
``<runResultVar>``.  If the executable was built, but failed to run, then
``<runResultVar>`` will be set to ``FAILED_TO_RUN``.  See command
:command:`try_compile` for documentation of options common to both commands,
and for information on how the test project is constructed to build the source
file.

One or more source files must be provided. Additionally, one of ``SOURCES``
and/or ``SOURCE_FROM_*`` must precede other keywords.

.. versionadded:: 3.26
  This command records a
  :ref:`configure-log try_run event <try_run configure-log event>`
  if the ``NO_LOG`` option is not specified.

This command supports an alternate signature for CMake older than 3.25.
The signature above is recommended for clarity.

.. code-block:: cmake

  try_run(<runResultVar> <compileResultVar>
          <bindir> <srcfile|SOURCES srcfile...>
          [CMAKE_FLAGS <flags>...]
          [COMPILE_DEFINITIONS <defs>...]
          [LINK_OPTIONS <options>...]
          [LINK_LIBRARIES <libs>...]
          [LINKER_LANGUAGE <lang>]
          [COMPILE_OUTPUT_VARIABLE <var>]
          [COPY_FILE <fileName> [COPY_FILE_ERROR <var>]]
          [<LANG>_STANDARD <std>]
          [<LANG>_STANDARD_REQUIRED <bool>]
          [<LANG>_EXTENSIONS <bool>]
          [RUN_OUTPUT_VARIABLE <var>]
          [OUTPUT_VARIABLE <var>]
          [WORKING_DIRECTORY <var>]
          [ARGS <args>...]
          )

.. _`try_run Options`:

Options
^^^^^^^

The options specific to ``try_run`` are:

``COMPILE_OUTPUT_VARIABLE <var>``
  Report the compile step build output in a given variable.

``OUTPUT_VARIABLE <var>``
  Report the compile build output and the output from running the executable
  in the given variable.  This option exists for legacy reasons and is only
  supported by the old ``try_run`` signature.
  Prefer ``COMPILE_OUTPUT_VARIABLE`` and ``RUN_OUTPUT_VARIABLE`` instead.

``RUN_OUTPUT_VARIABLE <var>``
  Report the output from running the executable in a given variable.

``RUN_OUTPUT_STDOUT_VARIABLE <var>``
  .. versionadded:: 3.25

  Report the output of stdout from running the executable in a given variable.

``RUN_OUTPUT_STDERR_VARIABLE <var>``
  .. versionadded:: 3.25

  Report the output of stderr from running the executable in a given variable.

``WORKING_DIRECTORY <var>``
  .. versionadded:: 3.20

  Run the executable in the given directory. If no ``WORKING_DIRECTORY`` is
  specified, the executable will run in ``<bindir>`` or the current build
  directory.

``ARGS <args>...``
  Additional arguments to pass to the executable when running it.

Other Behavior Settings
^^^^^^^^^^^^^^^^^^^^^^^

Set variable :variable:`CMAKE_TRY_COMPILE_CONFIGURATION` to choose a build
configuration:

* For multi-config generators, this selects which configuration to build.

* For single-config generators, this sets :variable:`CMAKE_BUILD_TYPE` in
  the test project.

Behavior when Cross Compiling
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.3
  Use ``CMAKE_CROSSCOMPILING_EMULATOR`` when running cross-compiled binaries.

When cross compiling, the executable compiled in the first step
usually cannot be run on the build host.  The ``try_run`` command checks
the :variable:`CMAKE_CROSSCOMPILING` variable to detect whether CMake is in
cross-compiling mode.  If that is the case, it will still try to compile
the executable, but it will not try to run the executable unless the
:variable:`CMAKE_CROSSCOMPILING_EMULATOR` variable is set.  Instead it
will create cache variables which must be filled by the user or by
presetting them in some CMake script file to the values the executable
would have produced if it had been run on its actual target platform.
These cache entries are:

``<runResultVar>``
  Exit code if the executable were to be run on the target platform.

``<runResultVar>__TRYRUN_OUTPUT``
  Output from stdout and stderr if the executable were to be run on
  the target platform.  This is created only if the
  ``RUN_OUTPUT_VARIABLE`` or ``OUTPUT_VARIABLE`` option was used.

In order to make cross compiling your project easier, use ``try_run``
only if really required.  If you use ``try_run``, use the
``RUN_OUTPUT_STDOUT_VARIABLE``, ``RUN_OUTPUT_STDERR_VARIABLE``,
``RUN_OUTPUT_VARIABLE`` or ``OUTPUT_VARIABLE`` options only if really
required.  Using them will require that when cross-compiling, the cache
variables will have to be set manually to the output of the executable.
You can also "guard" the calls to ``try_run`` with an :command:`if`
block checking the :variable:`CMAKE_CROSSCOMPILING` variable and
provide an easy-to-preset alternative for this case.



/P/🚀 command/ctest_build.rst
===========================================


ctest_build
-----------

Perform the :ref:`CTest Build Step` as a :ref:`Dashboard Client`.

.. code-block:: cmake

  ctest_build([BUILD <build-dir>] [APPEND]
              [CONFIGURATION <config>]
              [PARALLEL_LEVEL <parallel>]
              [FLAGS <flags>]
              [PROJECT_NAME <project-name>]
              [TARGET <target-name>]
              [NUMBER_ERRORS <num-err-var>]
              [NUMBER_WARNINGS <num-warn-var>]
              [RETURN_VALUE <result-var>]
              [CAPTURE_CMAKE_ERROR <result-var>]
              )

Build the project and store results in ``Build.xml``
for submission with the :command:`ctest_submit` command.

The :variable:`CTEST_BUILD_COMMAND` variable may be set to explicitly
specify the build command line.  Otherwise the build command line is
computed automatically based on the options given.

The options are:

``BUILD <build-dir>``
  Specify the top-level build directory.  If not given, the
  :variable:`CTEST_BINARY_DIRECTORY` variable is used.

``APPEND``
  Mark ``Build.xml`` for append to results previously submitted to a
  dashboard server since the last :command:`ctest_start` call.
  Append semantics are defined by the dashboard server in use.
  This does *not* cause results to be appended to a ``.xml`` file
  produced by a previous call to this command.

``CONFIGURATION <config>``
  Specify the build configuration (e.g. ``Debug``).  If not
  specified the ``CTEST_BUILD_CONFIGURATION`` variable will be checked.
  Otherwise the :option:`-C \<cfg\> <ctest -C>` option given to the
  :manual:`ctest(1)` command will be used, if any.

``PARALLEL_LEVEL <parallel>``
  .. versionadded:: 3.21

  Specify the parallel level of the underlying build system.  If not
  specified, the :envvar:`CMAKE_BUILD_PARALLEL_LEVEL` environment
  variable will be checked.

``FLAGS <flags>``
  Pass additional arguments to the underlying build command.
  If not specified the ``CTEST_BUILD_FLAGS`` variable will be checked.
  This can, e.g., be used to trigger a parallel build using the
  ``-j`` option of ``make``. See the :module:`ProcessorCount` module
  for an example.

``PROJECT_NAME <project-name>``
  Ignored since CMake 3.0.

  .. versionchanged:: 3.14
    This value is no longer required.

``TARGET <target-name>``
  Specify the name of a target to build.  If not specified the
  ``CTEST_BUILD_TARGET`` variable will be checked.  Otherwise the
  default target will be built.  This is the "all" target
  (called ``ALL_BUILD`` in :ref:`Visual Studio Generators`).

``NUMBER_ERRORS <num-err-var>``
  Store the number of build errors detected in the given variable.

``NUMBER_WARNINGS <num-warn-var>``
  Store the number of build warnings detected in the given variable.

``RETURN_VALUE <result-var>``
  Store the return value of the native build tool in the given variable.

``CAPTURE_CMAKE_ERROR <result-var>``
  .. versionadded:: 3.7

  Store in the ``<result-var>`` variable -1 if there are any errors running
  the command and prevent ctest from returning non-zero if an error occurs.

``QUIET``
  .. versionadded:: 3.3

  Suppress any CTest-specific non-error output that would have been
  printed to the console otherwise.  The summary of warnings / errors,
  as well as the output from the native build tool is unaffected by
  this option.



/P/🚀 command/ctest_configure.rst
===============================================


ctest_configure
---------------

Perform the :ref:`CTest Configure Step` as a :ref:`Dashboard Client`.

.. code-block:: cmake

  ctest_configure([BUILD <build-dir>] [SOURCE <source-dir>] [APPEND]
                  [OPTIONS <options>] [RETURN_VALUE <result-var>] [QUIET]
                  [CAPTURE_CMAKE_ERROR <result-var>])

Configure the project build tree and record results in ``Configure.xml``
for submission with the :command:`ctest_submit` command.

The options are:

``BUILD <build-dir>``
  Specify the top-level build directory.  If not given, the
  :variable:`CTEST_BINARY_DIRECTORY` variable is used.

``SOURCE <source-dir>``
  Specify the source directory.  If not given, the
  :variable:`CTEST_SOURCE_DIRECTORY` variable is used.

``APPEND``
  Mark ``Configure.xml`` for append to results previously submitted to a
  dashboard server since the last :command:`ctest_start` call.
  Append semantics are defined by the dashboard server in use.
  This does *not* cause results to be appended to a ``.xml`` file
  produced by a previous call to this command.

``OPTIONS <options>``
  Specify command-line arguments to pass to the configuration tool.

``RETURN_VALUE <result-var>``
  Store in the ``<result-var>`` variable the return value of the native
  configuration tool.

``CAPTURE_CMAKE_ERROR <result-var>``
  .. versionadded:: 3.7

  Store in the ``<result-var>`` variable -1 if there are any errors running
  the command and prevent ctest from returning non-zero if an error occurs.

``QUIET``
  .. versionadded:: 3.3

  Suppress any CTest-specific non-error messages that would have
  otherwise been printed to the console.  Output from the underlying
  configure command is not affected.



/P/🚀 command/ctest_coverage.rst
==============================================


ctest_coverage
--------------

Perform the :ref:`CTest Coverage Step` as a :ref:`Dashboard Client`.

.. code-block:: cmake

  ctest_coverage([BUILD <build-dir>] [APPEND]
                 [LABELS <label>...]
                 [RETURN_VALUE <result-var>]
                 [CAPTURE_CMAKE_ERROR <result-var>]
                 [QUIET]
                 )

Collect coverage tool results and stores them in ``Coverage.xml``
for submission with the :command:`ctest_submit` command.

The options are:

``BUILD <build-dir>``
  Specify the top-level build directory.  If not given, the
  :variable:`CTEST_BINARY_DIRECTORY` variable is used.

``APPEND``
  Mark ``Coverage.xml`` for append to results previously submitted to a
  dashboard server since the last :command:`ctest_start` call.
  Append semantics are defined by the dashboard server in use.
  This does *not* cause results to be appended to a ``.xml`` file
  produced by a previous call to this command.

``LABELS``
  Filter the coverage report to include only source files labeled
  with at least one of the labels specified.

``RETURN_VALUE <result-var>``
  Store in the ``<result-var>`` variable ``0`` if coverage tools
  ran without error and non-zero otherwise.

``CAPTURE_CMAKE_ERROR <result-var>``
  .. versionadded:: 3.7

  Store in the ``<result-var>`` variable -1 if there are any errors running
  the command and prevent ctest from returning non-zero if an error occurs.

``QUIET``
  .. versionadded:: 3.3

  Suppress any CTest-specific non-error output that would have been
  printed to the console otherwise.  The summary indicating how many
  lines of code were covered is unaffected by this option.



/P/🚀 command/ctest_empty_binary_directory.rst
============================================================


ctest_empty_binary_directory
----------------------------

empties the binary directory

.. code-block:: cmake

  ctest_empty_binary_directory(<directory>)

Removes a binary directory.  This command will perform some checks
prior to deleting the directory in an attempt to avoid malicious or
accidental directory deletion.



/P/🚀 command/ctest_memcheck.rst
==============================================


ctest_memcheck
--------------

Perform the :ref:`CTest MemCheck Step` as a :ref:`Dashboard Client`.

.. code-block:: cmake

  ctest_memcheck([BUILD <build-dir>] [APPEND]
                 [START <start-number>]
                 [END <end-number>]
                 [STRIDE <stride-number>]
                 [EXCLUDE <exclude-regex>]
                 [INCLUDE <include-regex>]
                 [EXCLUDE_LABEL <label-exclude-regex>]
                 [INCLUDE_LABEL <label-include-regex>]
                 [EXCLUDE_FIXTURE <regex>]
                 [EXCLUDE_FIXTURE_SETUP <regex>]
                 [EXCLUDE_FIXTURE_CLEANUP <regex>]
                 [PARALLEL_LEVEL <level>]
                 [RESOURCE_SPEC_FILE <file>]
                 [TEST_LOAD <threshold>]
                 [SCHEDULE_RANDOM <ON|OFF>]
                 [STOP_ON_FAILURE]
                 [STOP_TIME <time-of-day>]
                 [RETURN_VALUE <result-var>]
                 [CAPTURE_CMAKE_ERROR <result-var>]
                 [REPEAT <mode>:<n>]
                 [OUTPUT_JUNIT <file>]
                 [DEFECT_COUNT <defect-count-var>]
                 [QUIET]
                 )


Run tests with a dynamic analysis tool and store results in
``MemCheck.xml`` for submission with the :command:`ctest_submit`
command.

Most options are the same as those for the :command:`ctest_test` command.

The options unique to this command are:

``DEFECT_COUNT <defect-count-var>``
  .. versionadded:: 3.8

  Store in the ``<defect-count-var>`` the number of defects found.



/P/🚀 command/ctest_read_custom_files.rst
=======================================================


ctest_read_custom_files
-----------------------

read CTestCustom files.

.. code-block:: cmake

  ctest_read_custom_files(<directory>...)

Read all the CTestCustom.ctest or CTestCustom.cmake files from the
given directory.

By default, invoking :manual:`ctest(1)` without a script will read custom
files from the binary directory.



/P/🚀 command/ctest_run_script.rst
================================================


ctest_run_script
----------------

runs a :option:`ctest -S` script

.. code-block:: cmake

  ctest_run_script([NEW_PROCESS] script_file_name script_file_name1
              script_file_name2 ... [RETURN_VALUE var])

Runs a script or scripts much like if it was run from :option:`ctest -S`.
If no argument is provided then the current script is run using the current
settings of the variables.  If ``NEW_PROCESS`` is specified then each
script will be run in a separate process.If ``RETURN_VALUE`` is specified
the return value of the last script run will be put into ``var``.



/P/🚀 command/ctest_sleep.rst
===========================================


ctest_sleep
-----------

sleeps for some amount of time

.. code-block:: cmake

  ctest_sleep(<seconds>)

Sleep for given number of seconds.

.. code-block:: cmake

  ctest_sleep(<time1> <duration> <time2>)

Sleep for t=(time1 + duration - time2) seconds if t > 0.



/P/🚀 command/ctest_start.rst
===========================================


ctest_start
-----------

Starts the testing for a given model

.. code-block:: cmake

  ctest_start(<model> [<source> [<binary>]] [GROUP <group>] [QUIET])

  ctest_start([<model> [<source> [<binary>]]] [GROUP <group>] APPEND [QUIET])

Starts the testing for a given model.  The command should be called
after the binary directory is initialized.

The parameters are as follows:

``<model>``
  Set the dashboard model. Must be one of ``Experimental``, ``Continuous``, or
  ``Nightly``. This parameter is required unless ``APPEND`` is specified.

``<source>``
  Set the source directory. If not specified, the value of
  :variable:`CTEST_SOURCE_DIRECTORY` is used instead.

``<binary>``
  Set the binary directory. If not specified, the value of
  :variable:`CTEST_BINARY_DIRECTORY` is used instead.

``GROUP <group>``
  If ``GROUP`` is used, the submissions will go to the specified group on the
  CDash server. If no ``GROUP`` is specified, the name of the model is used by
  default.

  .. versionchanged:: 3.16
    This replaces the deprecated option ``TRACK``. Despite the name
    change its behavior is unchanged.

``APPEND``
  If ``APPEND`` is used, the existing ``TAG`` is used rather than creating a new
  one based on the current time stamp. If you use ``APPEND``, you can omit the
  ``<model>`` and ``GROUP <group>`` parameters, because they will be read from
  the generated ``TAG`` file. For example:

  .. code-block:: cmake

    ctest_start(Experimental GROUP GroupExperimental)

  Later, in another :option:`ctest -S` script:

  .. code-block:: cmake

    ctest_start(APPEND)

  When the second script runs ``ctest_start(APPEND)``, it will read the
  ``Experimental`` model and ``GroupExperimental`` group from the ``TAG`` file
  generated by the first ``ctest_start()`` command. Please note that if you
  call ``ctest_start(APPEND)`` and specify a different model or group than
  in the first ``ctest_start()`` command, a warning will be issued, and the
  new model and group will be used.

``QUIET``
  .. versionadded:: 3.3

  If ``QUIET`` is used, CTest will suppress any non-error messages that it
  otherwise would have printed to the console.

The parameters for ``ctest_start()`` can be issued in any order, with the
exception that ``<model>``, ``<source>``, and ``<binary>`` have to appear
in that order with respect to each other. The following are all valid and
equivalent:

.. code-block:: cmake

  ctest_start(Experimental path/to/source path/to/binary GROUP SomeGroup QUIET APPEND)

  ctest_start(GROUP SomeGroup Experimental QUIET path/to/source APPEND path/to/binary)

  ctest_start(APPEND QUIET Experimental path/to/source GROUP SomeGroup path/to/binary)

However, for the sake of readability, it is recommended that you order your
parameters in the order listed at the top of this page.

If the :variable:`CTEST_CHECKOUT_COMMAND` variable (or the
:variable:`CTEST_CVS_CHECKOUT` variable) is set, its content is treated as
command-line.  The command is invoked with the current working directory set
to the parent of the source directory, even if the source directory already
exists.  This can be used to create the source tree from a version control
repository.



/P/🚀 command/ctest_submit.rst
============================================


ctest_submit
------------

Perform the :ref:`CTest Submit Step` as a :ref:`Dashboard Client`.

.. code-block:: cmake

  ctest_submit([PARTS <part>...] [FILES <file>...]
               [SUBMIT_URL <url>]
               [BUILD_ID <result-var>]
               [HTTPHEADER <header>]
               [RETRY_COUNT <count>]
               [RETRY_DELAY <delay>]
               [RETURN_VALUE <result-var>]
               [CAPTURE_CMAKE_ERROR <result-var>]
               [QUIET]
               )

Submit results to a dashboard server.
By default all available parts are submitted.

The options are:

``PARTS <part>...``
  Specify a subset of parts to submit.  Valid part names are::

    Start      = nothing
    Update     = ctest_update results, in Update.xml
    Configure  = ctest_configure results, in Configure.xml
    Build      = ctest_build results, in Build.xml
    Test       = ctest_test results, in Test.xml
    Coverage   = ctest_coverage results, in Coverage.xml
    MemCheck   = ctest_memcheck results, in DynamicAnalysis.xml and
                 DynamicAnalysis-Test.xml
    Notes      = Files listed by CTEST_NOTES_FILES, in Notes.xml
    ExtraFiles = Files listed by CTEST_EXTRA_SUBMIT_FILES
    Upload     = Files prepared for upload by ctest_upload(), in Upload.xml
    Submit     = nothing
    Done       = Build is complete, in Done.xml

``FILES <file>...``
  Specify an explicit list of specific files to be submitted.
  Each individual file must exist at the time of the call.

``SUBMIT_URL <url>``
  .. versionadded:: 3.14

  The ``http`` or ``https`` URL of the dashboard server to send the submission
  to.  If not given, the :variable:`CTEST_SUBMIT_URL` variable is used.

``BUILD_ID <result-var>``
  .. versionadded:: 3.15

  Store in the ``<result-var>`` variable the ID assigned to this build by
  CDash.

``HTTPHEADER <HTTP-header>``
  .. versionadded:: 3.9

  Specify HTTP header to be included in the request to CDash during submission.
  For example, CDash can be configured to only accept submissions from
  authenticated clients. In this case, you should provide a bearer token in your
  header:

  .. code-block:: cmake

    ctest_submit(HTTPHEADER "Authorization: Bearer <auth-token>")

  This suboption can be repeated several times for multiple headers.

``RETRY_COUNT <count>``
  Specify how many times to retry a timed-out submission.

``RETRY_DELAY <delay>``
  Specify how long (in seconds) to wait after a timed-out submission
  before attempting to re-submit.

``RETURN_VALUE <result-var>``
  Store in the ``<result-var>`` variable ``0`` for success and
  non-zero on failure.

``CAPTURE_CMAKE_ERROR <result-var>``
  .. versionadded:: 3.13

  Store in the ``<result-var>`` variable -1 if there are any errors running
  the command and prevent ctest from returning non-zero if an error occurs.

``QUIET``
  .. versionadded:: 3.3

  Suppress all non-error messages that would have otherwise been
  printed to the console.

Submit to CDash Upload API
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.2

.. code-block:: cmake

  ctest_submit(CDASH_UPLOAD <file> [CDASH_UPLOAD_TYPE <type>]
               [SUBMIT_URL <url>]
               [BUILD_ID <result-var>]
               [HTTPHEADER <header>]
               [RETRY_COUNT <count>]
               [RETRY_DELAY <delay>]
               [RETURN_VALUE <result-var>]
               [QUIET])

This second signature is used to upload files to CDash via the CDash
file upload API. The API first sends a request to upload to CDash along
with a content hash of the file. If CDash does not already have the file,
then it is uploaded. Along with the file, a CDash type string is specified
to tell CDash which handler to use to process the data.

This signature interprets options in the same way as the first one.

.. versionadded:: 3.8
  Added the ``RETRY_COUNT``, ``RETRY_DELAY``, ``QUIET`` options.

.. versionadded:: 3.9
  Added the ``HTTPHEADER`` option.

.. versionadded:: 3.13
  Added the ``RETURN_VALUE`` option.

.. versionadded:: 3.14
  Added the ``SUBMIT_URL`` option.

.. versionadded:: 3.15
  Added the ``BUILD_ID`` option.



/P/🚀 command/ctest_test.rst
==========================================


ctest_test
----------

Perform the :ref:`CTest Test Step` as a :ref:`Dashboard Client`.

.. code-block:: cmake

  ctest_test([BUILD <build-dir>] [APPEND]
             [START <start-number>]
             [END <end-number>]
             [STRIDE <stride-number>]
             [EXCLUDE <exclude-regex>]
             [INCLUDE <include-regex>]
             [EXCLUDE_LABEL <label-exclude-regex>]
             [INCLUDE_LABEL <label-include-regex>]
             [EXCLUDE_FROM_FILE <filename>]
             [INCLUDE_FROM_FILE <filename>]
             [EXCLUDE_FIXTURE <regex>]
             [EXCLUDE_FIXTURE_SETUP <regex>]
             [EXCLUDE_FIXTURE_CLEANUP <regex>]
             [PARALLEL_LEVEL [<level>]]
             [RESOURCE_SPEC_FILE <file>]
             [TEST_LOAD <threshold>]
             [SCHEDULE_RANDOM <ON|OFF>]
             [STOP_ON_FAILURE]
             [STOP_TIME <time-of-day>]
             [RETURN_VALUE <result-var>]
             [CAPTURE_CMAKE_ERROR <result-var>]
             [REPEAT <mode>:<n>]
             [OUTPUT_JUNIT <file>]
             [QUIET]
             )

.. 
   NOTE If updating the argument list here, please also update the argument
   list documentation for :command:`ctest_memcheck` as well.

Run tests in the project build tree and store results in
``Test.xml`` for submission with the :command:`ctest_submit` command.

The options are:

``BUILD <build-dir>``
  Specify the top-level build directory.  If not given, the
  :variable:`CTEST_BINARY_DIRECTORY` variable is used.

``APPEND``
  Mark ``Test.xml`` for append to results previously submitted to a
  dashboard server since the last :command:`ctest_start` call.
  Append semantics are defined by the dashboard server in use.
  This does *not* cause results to be appended to a ``.xml`` file
  produced by a previous call to this command.

``START <start-number>``
  Specify the beginning of a range of test numbers.

``END <end-number>``
  Specify the end of a range of test numbers.

``STRIDE <stride-number>``
  Specify the stride by which to step across a range of test numbers.

``EXCLUDE <exclude-regex>``
  Specify a regular expression matching test names to exclude.

``INCLUDE <include-regex>``
  Specify a regular expression matching test names to include.
  Tests not matching this expression are excluded.

``EXCLUDE_LABEL <label-exclude-regex>``
  Specify a regular expression matching test labels to exclude.

``INCLUDE_LABEL <label-include-regex>``
  Specify a regular expression matching test labels to include.
  Tests not matching this expression are excluded.

``EXCLUDE_FROM_FILE <filename>``
  .. versionadded:: 3.29

  Do NOT run tests listed with their exact name in the given file.

``INCLUDE_FROM_FILE <filename>``
  .. versionadded:: 3.29

  Only run the tests listed with their exact name in the given file.

``EXCLUDE_FIXTURE <regex>``
  .. versionadded:: 3.7

  If a test in the set of tests to be executed requires a particular fixture,
  that fixture's setup and cleanup tests would normally be added to the test
  set automatically. This option prevents adding setup or cleanup tests for
  fixtures matching the ``<regex>``. Note that all other fixture behavior is
  retained, including test dependencies and skipping tests that have fixture
  setup tests that fail.

``EXCLUDE_FIXTURE_SETUP <regex>``
  .. versionadded:: 3.7

  Same as ``EXCLUDE_FIXTURE`` except only matching setup tests are excluded.

``EXCLUDE_FIXTURE_CLEANUP <regex>``
  .. versionadded:: 3.7

  Same as ``EXCLUDE_FIXTURE`` except only matching cleanup tests are excluded.

``PARALLEL_LEVEL [<level>]``
  Run tests in parallel, limited to a given level of parallelism.

  .. versionadded:: 3.29

    The ``<level>`` may be omitted, or ``0``, to let ctest use a default
    level of parallelism, or unbounded parallelism, respectively, as
    documented by the :option:`ctest --parallel` option.

``RESOURCE_SPEC_FILE <file>``
  .. versionadded:: 3.16

  Specify a
  :ref:`resource specification file <ctest-resource-specification-file>`. See
  :ref:`ctest-resource-allocation` for more information.

``TEST_LOAD <threshold>``
  .. versionadded:: 3.4

  While running tests in parallel, try not to start tests when they
  may cause the CPU load to pass above a given threshold.  If not
  specified the :variable:`CTEST_TEST_LOAD` variable will be checked,
  and then the :option:`--test-load <ctest --test-load>` command-line
  argument to :manual:`ctest(1)`. See also the ``TestLoad`` setting
  in the :ref:`CTest Test Step`.

``REPEAT <mode>:<n>``
  .. versionadded:: 3.17

  Run tests repeatedly based on the given ``<mode>`` up to ``<n>`` times.
  The modes are:

  ``UNTIL_FAIL``
    Require each test to run ``<n>`` times without failing in order to pass.
    This is useful in finding sporadic failures in test cases.

  ``UNTIL_PASS``
    Allow each test to run up to ``<n>`` times in order to pass.
    Repeats tests if they fail for any reason.
    This is useful in tolerating sporadic failures in test cases.

  ``AFTER_TIMEOUT``
    Allow each test to run up to ``<n>`` times in order to pass.
    Repeats tests only if they timeout.
    This is useful in tolerating sporadic timeouts in test cases
    on busy machines.

``SCHEDULE_RANDOM <ON|OFF>``
  Launch tests in a random order.  This may be useful for detecting
  implicit test dependencies.

``STOP_ON_FAILURE``
  .. versionadded:: 3.18

  Stop the execution of the tests once one has failed.

``STOP_TIME <time-of-day>``
  Specify a time of day at which the tests should all stop running.

``RETURN_VALUE <result-var>``
  Store in the ``<result-var>`` variable ``0`` if all tests passed.
  Store non-zero if anything went wrong.

``CAPTURE_CMAKE_ERROR <result-var>``
  .. versionadded:: 3.7

  Store in the ``<result-var>`` variable -1 if there are any errors running
  the command and prevent ctest from returning non-zero if an error occurs.

``OUTPUT_JUNIT <file>``
  .. versionadded:: 3.21

  Write test results to ``<file>`` in JUnit XML format. If ``<file>`` is a
  relative path, it will be placed in the build directory. If ``<file>``
  already exists, it will be overwritten. Note that the resulting JUnit XML
  file is **not** uploaded to CDash because it would be redundant with
  CTest's ``Test.xml`` file.

``QUIET``
  .. versionadded:: 3.3

  Suppress any CTest-specific non-error messages that would have otherwise
  been printed to the console.  Output from the underlying test command is not
  affected.  Summary info detailing the percentage of passing tests is also
  unaffected by the ``QUIET`` option.

See also the :variable:`CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE`,
:variable:`CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE` and
:variable:`CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION` variables, along with their
corresponding :manual:`ctest(1)` command line options
:option:`--test-output-size-passed <ctest --test-output-size-passed>`,
:option:`--test-output-size-failed <ctest --test-output-size-failed>`, and
:option:`--test-output-truncation <ctest --test-output-truncation>`.

.. _`Additional Test Measurements`:

Additional Test Measurements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CTest can parse the output of your tests for extra measurements to report
to CDash.

When run as a :ref:`Dashboard Client`, CTest will include these custom
measurements in the ``Test.xml`` file that gets uploaded to CDash.

Check the `CDash test measurement documentation
<https://github.com/Kitware/CDash/blob/master/docs/test_measurements.md>`_
for more information on the types of test measurements that CDash recognizes.

.. versionadded: 3.22
  CTest can parse custom measurements from tags named
  ``<CTestMeasurement>`` or ``<CTestMeasurementFile>``. The older names
  ``<DartMeasurement>`` and ``<DartMeasurementFile>`` are still supported.

The following example demonstrates how to output a variety of custom test
measurements.

.. code-block:: c++

   std::cout <<
     "<CTestMeasurement type=\"numeric/double\" name=\"score\">28.3</CTestMeasurement>"
     << std::endl;

   std::cout <<
     "<CTestMeasurement type=\"text/string\" name=\"color\">red</CTestMeasurement>"
     << std::endl;

   std::cout <<
     "<CTestMeasurement type=\"text/link\" name=\"CMake URL\">https://cmake.org</CTestMeasurement>"
     << std::endl;

   std::cout <<
     "<CTestMeasurement type=\"text/preformatted\" name=\"Console Output\">" <<
     "line 1.\n" <<
     "  \033[31;1m line 2. Bold red, and indented!\033[0;0ml\n" <<
     "line 3. Not bold or indented...\n" <<
     "</CTestMeasurement>" << std::endl;

Image Measurements
""""""""""""""""""

The following example demonstrates how to upload test images to CDash.

.. code-block:: c++

   std::cout <<
     "<CTestMeasurementFile type=\"image/jpg\" name=\"TestImage\">" <<
     "/dir/to/test_img.jpg</CTestMeasurementFile>" << std::endl;

   std::cout <<
     "<CTestMeasurementFile type=\"image/gif\" name=\"ValidImage\">" <<
     "/dir/to/valid_img.gif</CTestMeasurementFile>" << std::endl;

   std::cout <<
     "<CTestMeasurementFile type=\"image/png\" name=\"AlgoResult\">" <<
     "/dir/to/img.png</CTestMeasurementFile>"
     << std::endl;

Images will be displayed together in an interactive comparison mode on CDash
if they are provided with two or more of the following names.

* ``TestImage``
* ``ValidImage``
* ``BaselineImage``
* ``DifferenceImage2``

By convention, ``TestImage`` is the image generated by your test, and
``ValidImage`` (or ``BaselineImage``) is basis of comparison used to determine
if the test passed or failed.

If another image name is used it will be displayed by CDash as a static image
separate from the interactive comparison UI.

Attached Files
""""""""""""""

.. versionadded:: 3.21

The following example demonstrates how to upload non-image files to CDash.

.. code-block:: c++

   std::cout <<
     "<CTestMeasurementFile type=\"file\" name=\"TestInputData1\">" <<
     "/dir/to/data1.csv</CTestMeasurementFile>\n"                   <<
     "<CTestMeasurementFile type=\"file\" name=\"TestInputData2\">" <<
     "/dir/to/data2.csv</CTestMeasurementFile>"                     << std::endl;

If the name of the file to upload is known at configure time, you can use the
:prop_test:`ATTACHED_FILES` or :prop_test:`ATTACHED_FILES_ON_FAIL` test
properties instead.

Custom Details
""""""""""""""

.. versionadded:: 3.21

The following example demonstrates how to specify a custom value for the
``Test Details`` field displayed on CDash.

.. code-block:: c++

   std::cout <<
     "<CTestDetails>My Custom Details Value</CTestDetails>" << std::endl;

.. _`Additional Labels`:

Additional Labels
"""""""""""""""""

.. versionadded:: 3.22

The following example demonstrates how to add additional labels to a test
at runtime.

.. code-block:: c++

   std::cout <<
     "<CTestLabel>Custom Label 1</CTestLabel>\n" <<
     "<CTestLabel>Custom Label 2</CTestLabel>"   << std::endl;

Use the :prop_test:`LABELS` test property instead for labels that can be
determined at configure time.



/P/🚀 command/ctest_update.rst
============================================


ctest_update
------------

Perform the :ref:`CTest Update Step` as a :ref:`Dashboard Client`.

.. code-block:: cmake

  ctest_update([SOURCE <source-dir>]
               [RETURN_VALUE <result-var>]
               [CAPTURE_CMAKE_ERROR <result-var>]
               [QUIET])

Update the source tree from version control and record results in
``Update.xml`` for submission with the :command:`ctest_submit` command.

The options are:

``SOURCE <source-dir>``
  Specify the source directory.  If not given, the
  :variable:`CTEST_SOURCE_DIRECTORY` variable is used.

``RETURN_VALUE <result-var>``
  Store in the ``<result-var>`` variable the number of files
  updated or ``-1`` on error.

``CAPTURE_CMAKE_ERROR <result-var>``
  .. versionadded:: 3.13

  Store in the ``<result-var>`` variable -1 if there are any errors running
  the command and prevent ctest from returning non-zero if an error occurs.

``QUIET``
  .. versionadded:: 3.3

  Tell CTest to suppress most non-error messages that it would
  have otherwise printed to the console.  CTest will still report
  the new revision of the repository and any conflicting files
  that were found.

The update always follows the version control branch currently checked
out in the source directory.  See the :ref:`CTest Update Step`
documentation for information about variables that change the behavior
of ``ctest_update()``.



/P/🚀 command/ctest_upload.rst
============================================


ctest_upload
------------

Upload files to a dashboard server as a :ref:`Dashboard Client`.

.. code-block:: cmake

  ctest_upload(FILES <file>... [QUIET] [CAPTURE_CMAKE_ERROR <result-var>])

The options are:

``FILES <file>...``
  Specify a list of files to be sent along with the build results to the
  dashboard server.

``QUIET``
  .. versionadded:: 3.3

  Suppress any CTest-specific non-error output that would have been
  printed to the console otherwise.

``CAPTURE_CMAKE_ERROR <result-var>``
  .. versionadded:: 3.7

  Store in the ``<result-var>`` variable -1 if there are any errors running
  the command and prevent ctest from returning non-zero if an error occurs.



/P/🚀 command/build_name.rst
==========================================


build_name
----------

Disallowed since version 3.0.  See CMake Policy :policy:`CMP0036`.

Use ``${CMAKE_SYSTEM}`` and ``${CMAKE_CXX_COMPILER}`` instead.

.. code-block:: cmake

  build_name(variable)

Sets the specified variable to a string representing the platform and
compiler settings.  These values are now available through the
:variable:`CMAKE_SYSTEM` and
:variable:`CMAKE_CXX_COMPILER <CMAKE_<LANG>_COMPILER>` variables.



/P/🚀 command/exec_program.rst
============================================


exec_program
------------

.. versionchanged:: 3.28
  This command is available only if policy :policy:`CMP0153` is not set to ``NEW``.
  Port projects to the :command:`execute_process` command.

.. deprecated:: 3.0

  Use the :command:`execute_process` command instead.

Run an executable program during the processing of the CMakeList.txt
file.

.. code-block:: cmake

  exec_program(Executable [directory in which to run]
               [ARGS <arguments to executable>]
               [OUTPUT_VARIABLE <var>]
               [RETURN_VALUE <var>])

The executable is run in the optionally specified directory.  The
executable can include arguments if it is double quoted, but it is
better to use the optional ``ARGS`` argument to specify arguments to the
program.  This is because cmake will then be able to escape spaces in
the executable path.  An optional argument ``OUTPUT_VARIABLE`` specifies a
variable in which to store the output.  To capture the return value of
the execution, provide a ``RETURN_VALUE``.  If ``OUTPUT_VARIABLE`` is
specified, then no output will go to the stdout/stderr of the console
running cmake.



/P/🚀 command/export_library_dependencies.rst
===========================================================


export_library_dependencies
---------------------------

Disallowed since version 3.0.  See CMake Policy :policy:`CMP0033`.

Use :command:`install(EXPORT)` or :command:`export` command.

This command generates an old-style library dependencies file.
Projects requiring CMake 2.6 or later should not use the command.  Use
instead the :command:`install(EXPORT)` command to help export targets from an
installation tree and the :command:`export` command to export targets from a
build tree.

The old-style library dependencies file does not take into account
per-configuration names of libraries or the
:prop_tgt:`LINK_INTERFACE_LIBRARIES` target property.

.. code-block:: cmake

  export_library_dependencies(<file> [APPEND])

Create a file named ``<file>`` that can be included into a CMake listfile
with the INCLUDE command.  The file will contain a number of SET
commands that will set all the variables needed for library dependency
information.  This should be the last command in the top level
CMakeLists.txt file of the project.  If the ``APPEND`` option is
specified, the SET commands will be appended to the given file instead
of replacing it.



/P/🚀 command/install_files.rst
=============================================


install_files
-------------

.. deprecated:: 3.0

  Use the :command:`install(FILES)` command instead.

This command has been superseded by the :command:`install` command.  It is
provided for compatibility with older CMake code.  The ``FILES`` form is
directly replaced by the ``FILES`` form of the :command:`install`
command.  The regexp form can be expressed more clearly using the ``GLOB``
form of the :command:`file` command.

.. code-block:: cmake

  install_files(<dir> extension file file ...)

Create rules to install the listed files with the given extension into
the given directory.  Only files existing in the current source tree
or its corresponding location in the binary tree may be listed.  If a
file specified already has an extension, that extension will be
removed first.  This is useful for providing lists of source files
such as foo.cxx when you want the corresponding foo.h to be installed.
A typical extension is ``.h``.

.. code-block:: cmake

  install_files(<dir> regexp)

Any files in the current source directory that match the regular
expression will be installed.

.. code-block:: cmake

  install_files(<dir> FILES file file ...)

Any files listed after the ``FILES`` keyword will be installed explicitly
from the names given.  Full paths are allowed in this form.

The directory ``<dir>`` is relative to the installation prefix, which is
stored in the variable :variable:`CMAKE_INSTALL_PREFIX`.



/P/🚀 command/install_programs.rst
================================================


install_programs
----------------

.. deprecated:: 3.0

  Use the :command:`install(PROGRAMS)` command instead.

This command has been superseded by the :command:`install` command.  It is
provided for compatibility with older CMake code.  The ``FILES`` form is
directly replaced by the ``PROGRAMS`` form of the :command:`install`
command.  The regexp form can be expressed more clearly using the ``GLOB``
form of the :command:`file` command.

.. code-block:: cmake

  install_programs(<dir> file1 file2 [file3 ...])
  install_programs(<dir> FILES file1 [file2 ...])

Create rules to install the listed programs into the given directory.
Use the ``FILES`` argument to guarantee that the file list version of the
command will be used even when there is only one argument.

.. code-block:: cmake

  install_programs(<dir> regexp)

In the second form any program in the current source directory that
matches the regular expression will be installed.

This command is intended to install programs that are not built by
cmake, such as shell scripts.  See the ``TARGETS`` form of the
:command:`install` command to create installation rules for targets built
by cmake.

The directory ``<dir>`` is relative to the installation prefix, which is
stored in the variable :variable:`CMAKE_INSTALL_PREFIX`.



/P/🚀 command/install_targets.rst
===============================================


install_targets
---------------

.. deprecated:: 3.0

  Use the :command:`install(TARGETS)` command instead.

This command has been superseded by the :command:`install` command.  It is
provided for compatibility with older CMake code.

.. code-block:: cmake

  install_targets(<dir> [RUNTIME_DIRECTORY dir] target target)

Create rules to install the listed targets into the given directory.
The directory ``<dir>`` is relative to the installation prefix, which is
stored in the variable :variable:`CMAKE_INSTALL_PREFIX`.  If
``RUNTIME_DIRECTORY`` is specified, then on systems with special runtime
files (Windows DLL), the files will be copied to that directory.



/P/🚀 command/load_command.rst
============================================


load_command
------------

Disallowed since version 3.0.  See CMake Policy :policy:`CMP0031`.

Load a command into a running CMake.

.. code-block:: cmake

  load_command(COMMAND_NAME <loc1> [loc2 ...])

The given locations are searched for a library whose name is
cmCOMMAND_NAME.  If found, it is loaded as a module and the command is
added to the set of available CMake commands.  Usually,
:command:`try_compile` is used before this command to compile the
module.  If the command is successfully loaded a variable named

.. code-block:: cmake

  CMAKE_LOADED_COMMAND_<COMMAND_NAME>

will be set to the full path of the module that was loaded.  Otherwise
the variable will not be set.



/P/🚀 command/make_directory.rst
==============================================


make_directory
--------------

.. deprecated:: 3.0

  Use the :command:`file(MAKE_DIRECTORY)` command instead.

.. code-block:: cmake

  make_directory(directory)

Creates the specified directory.  Full paths should be given.  Any
parent directories that do not exist will also be created.  Use with
care.



/P/🚀 command/output_required_files.rst
=====================================================


output_required_files
---------------------

Disallowed since version 3.0.  See CMake Policy :policy:`CMP0032`.

Approximate C preprocessor dependency scanning.

This command exists only because ancient CMake versions provided it.
CMake handles preprocessor dependency scanning automatically using a
more advanced scanner.

.. code-block:: cmake

  output_required_files(srcfile outputfile)

Outputs a list of all the source files that are required by the
specified ``srcfile``.  This list is written into ``outputfile``.  This is
similar to writing out the dependencies for ``srcfile`` except that it
jumps from ``.h`` files into ``.cxx``, ``.c`` and ``.cpp`` files if possible.



/P/🚀 command/qt_wrap_cpp.rst
===========================================


qt_wrap_cpp
-----------

.. deprecated:: 3.14

  This command was originally added to support Qt 3 before the
  :command:`add_custom_command()` command was sufficiently mature.  The
  :module:`FindQt4` module provides the ``qt4_wrap_cpp()`` macro, which
  should be used instead for Qt 4 projects.  For projects using Qt 5 or
  later, use the equivalent macro provided by Qt itself (e.g. Qt 5 provides
  `qt5_wrap_cpp() <https://doc.qt.io/qt-5/qtcore-cmake-qt5-wrap-cpp.html>`_).

Manually create Qt Wrappers.

.. code-block:: cmake

  qt_wrap_cpp(resultingLibraryName DestName SourceLists ...)

Produces moc files for all the .h files listed in the SourceLists.  The
moc files will be added to the library using the ``DestName`` source list.

Consider updating the project to use the :prop_tgt:`AUTOMOC` target property
instead for a more automated way of invoking the ``moc`` tool.



/P/🚀 command/qt_wrap_ui.rst
==========================================


qt_wrap_ui
----------

.. deprecated:: 3.14

  This command was originally added to support Qt 3 before the
  :command:`add_custom_command()` command was sufficiently mature.  The
  :module:`FindQt4` module provides the ``qt4_wrap_ui()`` macro, which
  should be used instead for Qt 4 projects.  For projects using Qt 5 or
  later, use the equivalent macro provided by Qt itself (e.g. Qt 5 provides
  ``qt5_wrap_ui()``).

Manually create Qt user interfaces Wrappers.

.. code-block:: cmake

  qt_wrap_ui(resultingLibraryName HeadersDestName
             SourcesDestName SourceLists ...)

Produces .h and .cxx files for all the .ui files listed in the
``SourceLists``.  The .h files will be added to the library using the
``HeadersDestNamesource`` list.  The .cxx files will be added to the
library using the ``SourcesDestNamesource`` list.

Consider updating the project to use the :prop_tgt:`AUTOUIC` target property
instead for a more automated way of invoking the ``uic`` tool.



/P/🚀 command/remove.rst
======================================


remove
------

.. deprecated:: 3.0

  Use the :command:`list(REMOVE_ITEM)` command instead.

.. code-block:: cmake

  remove(VAR VALUE VALUE ...)

Removes ``VALUE`` from the variable ``VAR``.  This is typically used to
remove entries from a vector (e.g.  semicolon separated list).  ``VALUE``
is expanded.



/P/🚀 command/subdir_depends.rst
==============================================


subdir_depends
--------------

Disallowed since version 3.0.  See CMake Policy :policy:`CMP0029`.

Does nothing.

.. code-block:: cmake

  subdir_depends(subdir dep1 dep2 ...)

Does not do anything.  This command used to help projects order
parallel builds correctly.  This functionality is now automatic.



/P/🚀 command/subdirs.rst
=======================================


subdirs
-------

.. deprecated:: 3.0

  Use the :command:`add_subdirectory` command instead.

Add a list of subdirectories to the build.

.. code-block:: cmake

  subdirs(dir1 dir2 ...[EXCLUDE_FROM_ALL exclude_dir1 exclude_dir2 ...]
          [PREORDER] )

Add a list of subdirectories to the build.  The :command:`add_subdirectory`
command should be used instead of ``subdirs`` although ``subdirs`` will still
work.  This will cause any CMakeLists.txt files in the sub directories
to be processed by CMake.  Any directories after the ``PREORDER`` flag are
traversed first by makefile builds, the ``PREORDER`` flag has no effect on
IDE projects.  Any directories after the ``EXCLUDE_FROM_ALL`` marker will
not be included in the top level makefile or project file.  This is
useful for having CMake create makefiles or projects for a set of
examples in a project.  You would want CMake to generate makefiles or
project files for all the examples at the same time, but you would not
want them to show up in the top level project or be built each time
make is run from the top.



/P/🚀 command/use_mangled_mesa.rst
================================================


use_mangled_mesa
----------------

Disallowed since version 3.0.  See CMake Policy :policy:`CMP0030`.

Copy mesa headers for use in combination with system GL.

.. code-block:: cmake

  use_mangled_mesa(PATH_TO_MESA OUTPUT_DIRECTORY)

The path to mesa includes, should contain ``gl_mangle.h``.  The mesa
headers are copied to the specified output directory.  This allows
mangled mesa headers to override other GL headers by being added to
the include directory path earlier.



/P/🚀 command/utility_source.rst
==============================================


utility_source
--------------

Disallowed since version 3.0.  See CMake Policy :policy:`CMP0034`.

Specify the source tree of a third-party utility.

.. code-block:: cmake

  utility_source(cache_entry executable_name
                 path_to_source [file1 file2 ...])

When a third-party utility's source is included in the distribution,
this command specifies its location and name.  The cache entry will
not be set unless the ``path_to_source`` and all listed files exist.  It
is assumed that the source tree of the utility will have been built
before it is needed.

When cross compiling CMake will print a warning if a ``utility_source()``
command is executed, because in many cases it is used to build an
executable which is executed later on.  This doesn't work when cross
compiling, since the executable can run only on their target platform.
So in this case the cache entry has to be adjusted manually so it
points to an executable which is runnable on the build host.



/P/🚀 command/variable_requires.rst
=================================================


variable_requires
-----------------

Disallowed since version 3.0.  See CMake Policy :policy:`CMP0035`.

Use the :command:`if` command instead.

Assert satisfaction of an option's required variables.

.. code-block:: cmake

  variable_requires(TEST_VARIABLE RESULT_VARIABLE
                    REQUIRED_VARIABLE1
                    REQUIRED_VARIABLE2 ...)

The first argument (``TEST_VARIABLE``) is the name of the variable to be
tested, if that variable is false nothing else is done.  If
``TEST_VARIABLE`` is true, then the next argument (``RESULT_VARIABLE``)
is a variable that is set to true if all the required variables are set.
The rest of the arguments are variables that must be true or not set
to ``NOTFOUND`` to avoid an error.  If any are not true, an error is
reported.



/P/🚀 command/write_file.rst
==========================================


write_file
----------

.. deprecated:: 3.0

  Use the :command:`file(WRITE)` command instead.

.. code-block:: cmake

  write_file(filename "message to write"... [APPEND])

The first argument is the file name, the rest of the arguments are
messages to write.  If the argument ``APPEND`` is specified, then the
message will be appended.

NOTE 1: :command:`file(WRITE)`  and :command:`file(APPEND)`  do exactly
the same as this one but add some more functionality.

NOTE 2: When using ``write_file`` the produced file cannot be used as an
input to CMake (CONFIGURE_FILE, source file ...) because it will lead
to an infinite loop.  Use :command:`configure_file` if you want to
generate input files to CMake.



/P/🚀 manual/cmake-env-variables.7.rst
===================================================


.. cmake-manual-description: CMake Environment Variables Reference

cmake-env-variables(7)
**********************

This page lists environment variables that have special
meaning to CMake.

For general information on environment variables, see the
:ref:`Environment Variables <CMake Language Environment Variables>`
section in the cmake-language manual.

Environment Variables that Change Behavior
==========================================

.. toctree::
   :maxdepth: 1

    Help/envvar/CMAKE_APPBUNDLE_PATH
    Help/envvar/CMAKE_FRAMEWORK_PATH
    Help/envvar/CMAKE_INCLUDE_PATH
    Help/envvar/CMAKE_LIBRARY_PATH
    Help/envvar/CMAKE_MAXIMUM_RECURSION_DEPTH
    Help/envvar/CMAKE_PREFIX_PATH
    Help/envvar/CMAKE_PROGRAM_PATH
    Help/envvar/SSL_CERT_DIR
    Help/envvar/SSL_CERT_FILE

Environment Variables that Control the Build
============================================

.. toctree::
   :maxdepth: 1

    Help/envvar/ADSP_ROOT
    Help/envvar/CMAKE_APPLE_SILICON_PROCESSOR
    Help/envvar/CMAKE_BUILD_PARALLEL_LEVEL
    Help/envvar/CMAKE_BUILD_TYPE
    Help/envvar/CMAKE_COLOR_DIAGNOSTICS
    Help/envvar/CMAKE_CONFIGURATION_TYPES
    Help/envvar/CMAKE_CONFIG_TYPE
    Help/envvar/CMAKE_CROSSCOMPILING_EMULATOR
    Help/envvar/CMAKE_EXPORT_COMPILE_COMMANDS
    Help/envvar/CMAKE_GENERATOR
    Help/envvar/CMAKE_GENERATOR_INSTANCE
    Help/envvar/CMAKE_GENERATOR_PLATFORM
    Help/envvar/CMAKE_GENERATOR_TOOLSET
    Help/envvar/CMAKE_INSTALL_MODE
    Help/envvar/CMAKE_INSTALL_PREFIX
    Help/envvar/CMAKE_LANG_COMPILER_LAUNCHER
    Help/envvar/CMAKE_LANG_IMPLICIT_LINK_DIRECTORIES_EXCLUDE
    Help/envvar/CMAKE_LANG_LINKER_LAUNCHER
    Help/envvar/CMAKE_MSVCIDE_RUN_PATH
    Help/envvar/CMAKE_NO_VERBOSE
    Help/envvar/CMAKE_OSX_ARCHITECTURES
    Help/envvar/CMAKE_TEST_LAUNCHER
    Help/envvar/CMAKE_TOOLCHAIN_FILE
    Help/envvar/DESTDIR
    Help/envvar/LDFLAGS
    Help/envvar/MACOSX_DEPLOYMENT_TARGET
    Help/envvar/PackageName_ROOT
    Help/envvar/VERBOSE

Environment Variables for Languages
===================================

.. toctree::
   :maxdepth: 1

    Help/envvar/ASM_DIALECT
    Help/envvar/ASM_DIALECTFLAGS
    Help/envvar/CC
    Help/envvar/CFLAGS
    Help/envvar/CSFLAGS
    Help/envvar/CUDAARCHS
    Help/envvar/CUDACXX
    Help/envvar/CUDAFLAGS
    Help/envvar/CUDAHOSTCXX
    Help/envvar/CXX
    Help/envvar/CXXFLAGS
    Help/envvar/FC
    Help/envvar/FFLAGS
    Help/envvar/HIPCXX
    Help/envvar/HIPFLAGS
    Help/envvar/HIPHOSTCXX
    Help/envvar/ISPC
    Help/envvar/ISPCFLAGS
    Help/envvar/OBJC
    Help/envvar/OBJCXX
    Help/envvar/RC
    Help/envvar/RCFLAGS
    Help/envvar/SWIFTC

Environment Variables for CTest
===============================

.. toctree::
   :maxdepth: 1

    Help/envvar/CMAKE_CONFIG_TYPE
    Help/envvar/CTEST_INTERACTIVE_DEBUG_MODE
    Help/envvar/CTEST_NO_TESTS_ACTION
    Help/envvar/CTEST_OUTPUT_ON_FAILURE
    Help/envvar/CTEST_PARALLEL_LEVEL
    Help/envvar/CTEST_PROGRESS_OUTPUT
    Help/envvar/CTEST_USE_LAUNCHERS_DEFAULT
    Help/envvar/DASHBOARD_TEST_FROM_CTEST

Environment Variables for the CMake curses interface
====================================================

.. toctree::
   :maxdepth: 1

    Help/envvar/CCMAKE_COLORS



/P/🚀 envvar/CMAKE_APPBUNDLE_PATH.rst
===================================================


CMAKE_APPBUNDLE_PATH
--------------------

.. include:: ENV_VAR.txt

The ``CMAKE_APPBUNDLE_PATH`` environment variable may be set to a list of
directories to be searched for macOS application bundles
by the :command:`find_program` and :command:`find_package` commands.

This variable may hold a single directory or a list of directories separated
by ``:`` on UNIX or ``;`` on Windows (the same as the ``PATH`` environment
variable convention on those platforms).

See also the :variable:`CMAKE_APPBUNDLE_PATH` CMake variable.



/P/🚀 envvar/CMAKE_FRAMEWORK_PATH.rst
===================================================


CMAKE_FRAMEWORK_PATH
--------------------

.. include:: ENV_VAR.txt

The ``CMAKE_FRAMEWORK_PATH`` environment variable may be set to a list of
directories to be searched for macOS frameworks by the :command:`find_library`,
:command:`find_package`, :command:`find_path` and :command:`find_file` commands.


This variable may hold a single directory or a list of directories separated
by ``:`` on UNIX or ``;`` on Windows (the same as the ``PATH`` environment
variable convention on those platforms).

See also the :variable:`CMAKE_FRAMEWORK_PATH` CMake variable.



/P/🚀 envvar/CMAKE_INCLUDE_PATH.rst
=================================================


CMAKE_INCLUDE_PATH
------------------

.. include:: ENV_VAR.txt

The ``CMAKE_INCLUDE_PATH`` environment variable may be set to a list of
directories to be searched by the :command:`find_file` and :command:`find_path` commands.

This variable may hold a single directory or a list of directories separated
by ``:`` on UNIX or ``;`` on Windows (the same as the ``PATH`` environment
variable convention on those platforms).

See also the :variable:`CMAKE_INCLUDE_PATH` CMake variable.



/P/🚀 envvar/CMAKE_LIBRARY_PATH.rst
=================================================


CMAKE_LIBRARY_PATH
------------------

.. include:: ENV_VAR.txt

The ``CMAKE_LIBRARY_PATH`` environment variable may be set to a list of
directories to be searched by the :command:`find_library` command.

This variable may hold a single directory or a list of directories separated
by ``:`` on UNIX or ``;`` on Windows (the same as the ``PATH`` environment
variable convention on those platforms).

See also the :variable:`CMAKE_LIBRARY_PATH` CMake variable.



/P/🚀 envvar/CMAKE_MAXIMUM_RECURSION_DEPTH.rst
============================================================


CMAKE_MAXIMUM_RECURSION_DEPTH
-----------------------------

.. versionadded:: 3.27

.. include:: ENV_VAR.txt

Maximum recursion depth for CMake scripts.  This environment variable is
used if the :variable:`CMAKE_MAXIMUM_RECURSION_DEPTH` variable is not set.
See that variable's documentation for details.



/P/🚀 envvar/CMAKE_PREFIX_PATH.rst
================================================


CMAKE_PREFIX_PATH
-----------------

.. include:: ENV_VAR.txt

The ``CMAKE_PREFIX_PATH`` environment variable may be set to a list of
directories specifying installation *prefixes* to be searched by the
:command:`find_package`, :command:`find_program`, :command:`find_library`,
:command:`find_file`, and :command:`find_path` commands.  Each command will
add appropriate subdirectories (like ``bin``, ``lib``, or ``include``)
as specified in its own documentation.

This variable may hold a single prefix or a list of prefixes separated
by ``:`` on UNIX or ``;`` on Windows (the same as the ``PATH`` environment
variable convention on those platforms).

See also the :variable:`CMAKE_PREFIX_PATH` CMake variable.



/P/🚀 envvar/CMAKE_PROGRAM_PATH.rst
=================================================


CMAKE_PROGRAM_PATH
------------------

.. include:: ENV_VAR.txt

The ``CMAKE_PROGRAM_PATH`` environment variable may be set to a list of
directories to be searched by the :command:`find_program` command.

This variable may hold a single directory or a list of directories separated
by ``:`` on UNIX or ``;`` on Windows (the same as the ``PATH`` environment
variable convention on those platforms).

See also the :variable:`CMAKE_PROGRAM_PATH` CMake variable.



/P/🚀 envvar/SSL_CERT_DIR.rst
===========================================


SSL_CERT_DIR
------------

.. versionadded:: 3.25

.. include:: ENV_VAR.txt

Specify default directory containing CA certificates.  It overrides
the default CA directory used.



/P/🚀 envvar/SSL_CERT_FILE.rst
============================================


SSL_CERT_FILE
-------------

.. versionadded:: 3.25

.. include:: ENV_VAR.txt

Specify the file name containing CA certificates.  It overrides the
default, os-specific CA file used.



/P/🚀 envvar/ADSP_ROOT.rst
========================================


ADSP_ROOT
---------

.. versionadded:: 3.24

.. include:: ENV_VAR.txt

The ``ADSP_ROOT`` environment variable specifies a default value
for the :variable:`CMAKE_ADSP_ROOT` variable when there is no explicit
configuration given on the first run while creating a new build tree.



/P/🚀 envvar/CMAKE_APPLE_SILICON_PROCESSOR.rst
============================================================


CMAKE_APPLE_SILICON_PROCESSOR
-----------------------------

.. versionadded:: 3.19.2

.. include:: ENV_VAR.txt

On Apple Silicon hosts running macOS, set this environment variable to tell
CMake what architecture to use for :variable:`CMAKE_HOST_SYSTEM_PROCESSOR`.
The value must be either ``arm64`` or ``x86_64``.

The :variable:`CMAKE_APPLE_SILICON_PROCESSOR` normal variable, if set,
overrides this environment variable.



/P/🚀 envvar/CMAKE_BUILD_PARALLEL_LEVEL.rst
=========================================================


CMAKE_BUILD_PARALLEL_LEVEL
--------------------------

.. versionadded:: 3.12

.. include:: ENV_VAR.txt

Specifies the maximum number of concurrent processes to use when building
using the ``cmake --build`` command line
:ref:`Build Tool Mode <Build Tool Mode>`.
For example, if ``CMAKE_BUILD_PARALLEL_LEVEL`` is set to 8, the
underlying build tool will execute up to 8 jobs concurrently as if
``cmake --build`` were invoked with the
:option:`--parallel 8 <cmake--build --parallel>` option.

If this variable is defined empty the native build tool's default number is
used.



/P/🚀 envvar/CMAKE_BUILD_TYPE.rst
===============================================


CMAKE_BUILD_TYPE
----------------

.. versionadded:: 3.22

.. include:: ENV_VAR.txt

The ``CMAKE_BUILD_TYPE`` environment variable specifies a default value
for the :variable:`CMAKE_BUILD_TYPE` variable when there is no explicit
configuration given on the first run while creating a new build tree.



/P/🚀 envvar/CMAKE_COLOR_DIAGNOSTICS.rst
======================================================


CMAKE_COLOR_DIAGNOSTICS
-----------------------

.. versionadded:: 3.24

.. include:: ENV_VAR.txt

Specifies a default value for the :variable:`CMAKE_COLOR_DIAGNOSTICS` variable
when there is no explicit value given on the first run.



/P/🚀 envvar/CMAKE_CONFIGURATION_TYPES.rst
========================================================


CMAKE_CONFIGURATION_TYPES
-------------------------

.. versionadded:: 3.22

.. include:: ENV_VAR.txt

The ``CMAKE_CONFIGURATION_TYPES`` environment variable specifies a
default value for the :variable:`CMAKE_CONFIGURATION_TYPES` variable
when there is no explicit configuration given on the first run while
creating a new build tree.



/P/🚀 envvar/CMAKE_CONFIG_TYPE.rst
================================================


CMAKE_CONFIG_TYPE
-----------------

.. include:: ENV_VAR.txt

The default build configuration for :ref:`Build Tool Mode` and
``ctest`` build handler when there is no explicit configuration given.



/P/🚀 envvar/CMAKE_CROSSCOMPILING_EMULATOR.rst
============================================================


CMAKE_CROSSCOMPILING_EMULATOR
-----------------------------

.. versionadded:: 3.28

.. include:: ENV_VAR.txt

The default value for :variable:`CMAKE_CROSSCOMPILING_EMULATOR` when there
is no explicit configuration given on the first run while creating a new
build tree.  On later runs in an existing build tree the value persists in
the cache as :variable:`CMAKE_CROSSCOMPILING_EMULATOR`.



/P/🚀 envvar/CMAKE_EXPORT_COMPILE_COMMANDS.rst
============================================================


CMAKE_EXPORT_COMPILE_COMMANDS
-----------------------------

.. versionadded:: 3.17

.. include:: ENV_VAR.txt

The default value for :variable:`CMAKE_EXPORT_COMPILE_COMMANDS` when there
is no explicit configuration given on the first run while creating a new
build tree.  On later runs in an existing build tree the value persists in
the cache as :variable:`CMAKE_EXPORT_COMPILE_COMMANDS`.



/P/🚀 envvar/CMAKE_GENERATOR.rst
==============================================


CMAKE_GENERATOR
---------------

.. versionadded:: 3.15

.. include:: ENV_VAR.txt

Specifies the CMake default generator to use when no generator is supplied
with :option:`-G <cmake -G>`. If the provided value doesn't name a generator
known by CMake, the internal default is used.  Either way the resulting
generator selection is stored in the :variable:`CMAKE_GENERATOR` variable.

Some generators may be additionally configured using the environment
variables:

* :envvar:`CMAKE_GENERATOR_PLATFORM`
* :envvar:`CMAKE_GENERATOR_TOOLSET`
* :envvar:`CMAKE_GENERATOR_INSTANCE`



/P/🚀 envvar/CMAKE_GENERATOR_INSTANCE.rst
=======================================================


CMAKE_GENERATOR_INSTANCE
------------------------

.. versionadded:: 3.15

.. include:: ENV_VAR.txt

Default value for :variable:`CMAKE_GENERATOR_INSTANCE` if no Cache entry is
present. This value is only applied if :envvar:`CMAKE_GENERATOR` is set.



/P/🚀 envvar/CMAKE_GENERATOR_PLATFORM.rst
=======================================================


CMAKE_GENERATOR_PLATFORM
------------------------

.. versionadded:: 3.15

.. include:: ENV_VAR.txt

Default value for :variable:`CMAKE_GENERATOR_PLATFORM` if no Cache entry
is present and no value is specified by :option:`cmake -A` option.
This value is only applied if :envvar:`CMAKE_GENERATOR` is set.



/P/🚀 envvar/CMAKE_GENERATOR_TOOLSET.rst
======================================================


CMAKE_GENERATOR_TOOLSET
-----------------------

.. versionadded:: 3.15

.. include:: ENV_VAR.txt

Default value for :variable:`CMAKE_GENERATOR_TOOLSET` if no Cache entry
is present and no value is specified by :option:`cmake -T` option.
This value is only applied if :envvar:`CMAKE_GENERATOR` is set.



/P/🚀 envvar/CMAKE_INSTALL_MODE.rst
=================================================


CMAKE_INSTALL_MODE
------------------

.. versionadded:: 3.22

.. include:: ENV_VAR.txt

The ``CMAKE_INSTALL_MODE`` environment variable allows users to operate
CMake in an alternate mode of :command:`file(INSTALL)` and :command:`install()`.

The default behavior for an installation is to copy a source file from a
source directory into a destination directory. This environment variable
however allows the user to override this behavior, causing CMake to create
symbolic links instead.

Usage Scenarios
^^^^^^^^^^^^^^^

Installing symbolic links rather than copying files can help in the following
ways:

* Conserving storage space because files do not have to be duplicated on disk.
* Changes to the source of the symbolic link are seen at the install
  destination without having to re-run the install step.
* Editing through the link at the install destination will modify the source
  of the link. This may be useful when dealing with CMake project hierarchies,
  i.e. using :module:`ExternalProject` and consistent source navigation and
  refactoring is desired across projects.

Allowed Values
^^^^^^^^^^^^^^

The following values are allowed for ``CMAKE_INSTALL_MODE``:

``COPY``, empty or unset
  Duplicate the file at its destination.  This is the default behavior.

``ABS_SYMLINK``
  Create an *absolute* symbolic link to the source file at the destination.
  Halt with an error if the link cannot be created.

``ABS_SYMLINK_OR_COPY``
  Like ``ABS_SYMLINK`` but fall back to silently copying if the symlink
  couldn't be created.

``REL_SYMLINK``
  Create a *relative* symbolic link to the source file at the destination.
  Halt with an error if the link cannot be created.

``REL_SYMLINK_OR_COPY``
  Like ``REL_SYMLINK`` but fall back to silently copying if the symlink
  couldn't be created.

``SYMLINK``
  Try as if through ``REL_SYMLINK`` and fall back to ``ABS_SYMLINK`` if the
  referenced file cannot be expressed using a relative path.
  Halt with an error if the link cannot be created.

``SYMLINK_OR_COPY``
  Like ``SYMLINK`` but fall back to silently copying if the symlink couldn't
  be created.

.. note::
  A symbolic link consists of a reference file path rather than contents of its
  own, hence there are two ways to express the relation, either by a *relative*
  or an *absolute* path.

When To Set The Environment Variable
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For the environment variable to take effect, it must be set during the correct
build phase(s).

* If the project calls :command:`file(INSTALL)` directly, the environment
  variable must be set during the configuration phase.
* In order to apply to :command:`install()`, the environment variable must be
  set during installation.  This could be during a build if using the
  ``install`` or ``package`` build targets, or separate from the build when
  invoking an install or running :manual:`cpack <cpack(1)>` from the command
  line.
* When using :module:`ExternalProject`, it might be required during the build
  phase, since the external project's own configure, build and install steps
  will execute during the main project's build phase.

Given the above, it is recommended to set the environment variable consistently
across all phases (configure, build and install).

Caveats
^^^^^^^

Use this environment variable with caution. The following highlights some
points to be considered:

* ``CMAKE_INSTALL_MODE`` only affects files, not directories.

* Symbolic links are not available on all platforms.

* The way this environment variable interacts with the install step of
  :module:`ExternalProject` is more complex. For further details, see that
  module's documentation.

* A symbolic link ties the destination to the source in a persistent way.
  Writing to either of the two affects both file system objects.
  This is in contrast to normal install behavior which only copies files as
  they were at the time the install was performed, with no enduring
  relationship between the source and destination of the install.

* Combining ``CMAKE_INSTALL_MODE`` with :prop_tgt:`IOS_INSTALL_COMBINED` is
  not supported.

* Changing ``CMAKE_INSTALL_MODE`` from what it was on a previous run can lead
  to unexpected results.  Moving from a non-symlinking mode to a symlinking
  mode will discard any previous file at the destination, but the reverse is
  not true.  Once a symlink exists at the destination, even if you switch to a
  non-symlink mode, the symlink will continue to exist at the destination and
  will not be replaced by an actual file.



/P/🚀 envvar/CMAKE_INSTALL_PREFIX.rst
===================================================


CMAKE_INSTALL_PREFIX
--------------------

.. versionadded:: 3.29

.. include:: ENV_VAR.txt

The ``CMAKE_INSTALL_PREFIX`` environment variable specifies a custom default
value for the :variable:`CMAKE_INSTALL_PREFIX` variable in place of the
default values specified by CMake itself. The value specified must be an
absolute path to a directory.



/P/🚀 envvar/CMAKE_LANG_COMPILER_LAUNCHER.rst
===========================================================


CMAKE_<LANG>_COMPILER_LAUNCHER
------------------------------

.. versionadded:: 3.17

.. include:: ENV_VAR.txt

Default compiler launcher to use for the specified language. Will only be used
by CMake to initialize the variable on the first configuration. Afterwards, it
is available through the cache setting of the variable of the same name. For
any configuration run (including the first), the environment variable will be
ignored if the :variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` variable is defined.



/P/🚀 envvar/CMAKE_LANG_IMPLICIT_LINK_DIRECTORIES_EXCLUDE.rst
===========================================================================


CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES_EXCLUDE
----------------------------------------------

.. versionadded:: 3.27

.. include:: ENV_VAR.txt

A :ref:`semicolon-separated list <CMake Language Lists>` of directories
to exclude from the :variable:`CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES`
variable when it is automatically detected from the ``<LANG>`` compiler.

This may be used to work around misconfigured compiler drivers that pass
extraneous implicit link directories to their linker.



/P/🚀 envvar/CMAKE_LANG_LINKER_LAUNCHER.rst
=========================================================


CMAKE_<LANG>_LINKER_LAUNCHER
----------------------------

.. versionadded:: 3.21

.. include:: ENV_VAR.txt

Default launcher to use when linking a target of the specified language. Will
only be used by CMake to initialize the variable on the first configuration.
Afterwards, it is available through the cache setting of the variable of the
same name. For any configuration run (including the first), the environment
variable will be ignored if the :variable:`CMAKE_<LANG>_LINKER_LAUNCHER`
variable is defined.



/P/🚀 envvar/CMAKE_MSVCIDE_RUN_PATH.rst
=====================================================


CMAKE_MSVCIDE_RUN_PATH
----------------------

.. include:: ENV_VAR.txt

Extra PATH locations for custom commands when using
:generator:`Visual Studio 9 2008` (or above) generators.

The ``CMAKE_MSVCIDE_RUN_PATH`` environment variable sets the default value for
the :variable:`CMAKE_MSVCIDE_RUN_PATH` variable if not already explicitly set.



/P/🚀 envvar/CMAKE_NO_VERBOSE.rst
===============================================


CMAKE_NO_VERBOSE
----------------

.. versionadded:: 3.14

Disables verbose output from CMake when :envvar:`VERBOSE` environment variable
is set.

Only your build tool of choice will still print verbose output when you start
to actually build your project.



/P/🚀 envvar/CMAKE_OSX_ARCHITECTURES.rst
======================================================


CMAKE_OSX_ARCHITECTURES
-----------------------

.. include:: ENV_VAR.txt

Target specific architectures for macOS.

The ``CMAKE_OSX_ARCHITECTURES`` environment variable sets the default value for
the :variable:`CMAKE_OSX_ARCHITECTURES` variable. See
:prop_tgt:`OSX_ARCHITECTURES` for more information.



/P/🚀 envvar/CMAKE_TEST_LAUNCHER.rst
==================================================


CMAKE_TEST_LAUNCHER
-------------------

.. versionadded:: 3.29

.. include:: ENV_VAR.txt

The default value for the :variable:`CMAKE_TEST_LAUNCHER` variable when there
is no explicit configuration given on the first run while creating a new
build tree.  On later runs in an existing build tree the value persists in
the cache as :variable:`CMAKE_TEST_LAUNCHER`.



/P/🚀 envvar/CMAKE_TOOLCHAIN_FILE.rst
===================================================


CMAKE_TOOLCHAIN_FILE
--------------------

.. versionadded:: 3.21

.. include:: ENV_VAR.txt

The ``CMAKE_TOOLCHAIN_FILE`` environment variable specifies a default value
for the :variable:`CMAKE_TOOLCHAIN_FILE` variable when there is no explicit
configuration given on the first run while creating a new build tree.
On later runs in an existing build tree the value persists in the cache
as :variable:`CMAKE_TOOLCHAIN_FILE`.



/P/🚀 envvar/DESTDIR.rst
======================================


DESTDIR
-------

.. include:: ENV_VAR.txt

On UNIX one can use the ``DESTDIR`` mechanism in order to relocate the
whole installation.  ``DESTDIR`` means DESTination DIRectory.  It is
commonly used by packagers to install software in a staging directory.

For example, running

.. code-block:: shell

  make DESTDIR=/package/stage install

will install the software using the installation prefix, e.g. ``/usr/local``,
prepended with the ``DESTDIR`` value which gives ``/package/stage/usr/local``.
The packaging tool may then construct the package from the content of the
``/package/stage`` directory.

See the :variable:`CMAKE_INSTALL_PREFIX` variable to control the
installation prefix when configuring a build tree.  Or, when using
the :manual:`cmake(1)` command-line tool's :option:`--install <cmake --install>`
mode, one may specify a different prefix using the
:option:`--prefix <cmake--install --prefix>` option.

.. note::

  ``DESTDIR`` may not be used on Windows because installation
  prefix usually contains a drive letter like in ``C:/Program Files``
  which cannot be prepended with some other prefix.



/P/🚀 envvar/LDFLAGS.rst
======================================


LDFLAGS
-------

.. include:: ENV_VAR.txt

Will only be used by CMake on the first configuration to determine the default
linker flags, after which the value for ``LDFLAGS`` is stored in the cache
as :variable:`CMAKE_EXE_LINKER_FLAGS_INIT`,
:variable:`CMAKE_SHARED_LINKER_FLAGS_INIT`, and
:variable:`CMAKE_MODULE_LINKER_FLAGS_INIT`. For any configuration run
(including the first), the environment variable will be ignored if the
equivalent  ``CMAKE_<TYPE>_LINKER_FLAGS_INIT`` variable is defined.



/P/🚀 envvar/MACOSX_DEPLOYMENT_TARGET.rst
=======================================================


MACOSX_DEPLOYMENT_TARGET
------------------------

.. include:: ENV_VAR.txt

Specify the minimum version of macOS on which the target binaries are
to be deployed.

The ``MACOSX_DEPLOYMENT_TARGET`` environment variable sets the default value for
the :variable:`CMAKE_OSX_DEPLOYMENT_TARGET` variable.



/P/🚀 envvar/PackageName_ROOT.rst
===============================================


<PackageName>_ROOT
------------------

.. versionadded:: 3.12

.. include:: ENV_VAR.txt

Calls to :command:`find_package(<PackageName>)` will search in prefixes
specified by the ``<PackageName>_ROOT`` environment variable, where
``<PackageName>`` is the (case-preserved) name given to the
:command:`find_package` call and ``_ROOT`` is literal.
For example, ``find_package(Foo)`` will search prefixes specified in the
``Foo_ROOT`` environment variable (if set).  See policy :policy:`CMP0074`.

This variable may hold a single prefix or a list of prefixes separated
by ``:`` on UNIX or ``;`` on Windows (the same as the ``PATH`` environment
variable convention on those platforms).

See also the :variable:`<PackageName>_ROOT` CMake variable.

.. envvar:: <PACKAGENAME>_ROOT

  .. versionadded:: 3.27

  Calls to :command:`find_package(<PackageName>)` will also search in
  prefixes specified by the upper-case ``<PACKAGENAME>_ROOT`` environment
  variable.  See policy :policy:`CMP0144`.

.. note::

  Note that the ``<PackageName>_ROOT`` and ``<PACKAGENAME>_ROOT``
  environment variables are distinct only on platforms that have
  case-sensitive environments.



/P/🚀 envvar/VERBOSE.rst
======================================


VERBOSE
-------

.. versionadded:: 3.14

Activates verbose output from CMake and your build tools of choice when
you start to actually build your project.

Note that any given value is ignored. It's just checked for existence.

See also :ref:`Build Tool Mode <Build Tool Mode>` and
:envvar:`CMAKE_NO_VERBOSE` environment variable



/P/🚀 envvar/ASM_DIALECT.rst
==========================================


ASM<DIALECT>
------------

.. include:: ENV_VAR.txt

Preferred executable for compiling a specific dialect of assembly language
files. ``ASM<DIALECT>`` can be one of:

* ``ASM``
* ``ASM_NASM`` (Netwide Assembler)
* ``ASM_MASM`` (Microsoft Assembler)
* ``ASM_MARMASM`` (Microsoft ARM Assembler)
* ``ASM-ATT`` (Assembler AT&T)

Will only be used by CMake on the first configuration to determine
``ASM<DIALECT>`` compiler, after which the value for ``ASM<DIALECT>`` is stored
in the cache as
:variable:`CMAKE_ASM<DIALECT>_COMPILER <CMAKE_<LANG>_COMPILER>`. For subsequent
configuration runs, the environment variable will be ignored in favor of
:variable:`CMAKE_ASM<DIALECT>_COMPILER <CMAKE_<LANG>_COMPILER>`.

.. note::
  Options that are required to make the compiler work correctly can be included;
  they can not be changed.

.. code-block:: console

  $ export ASM="custom-compiler --arg1 --arg2"



/P/🚀 envvar/ASM_DIALECTFLAGS.rst
===============================================


ASM<DIALECT>FLAGS
-----------------

.. include:: ENV_VAR.txt

Add default compilation flags to be used when compiling a specific dialect
of an assembly language.  ``ASM<DIALECT>FLAGS`` can be one of:

* ``ASMFLAGS``
* ``ASM_NASMFLAGS``
* ``ASM_MASMFLAGS``
* ``ASM_MARMASMFLAGS``
* ``ASM-ATTFLAGS``

.. |CMAKE_LANG_FLAGS| replace:: :variable:`CMAKE_ASM<DIALECT>_FLAGS <CMAKE_<LANG>_FLAGS>`
.. |LANG| replace:: ``ASM<DIALECT>``
.. include:: LANG_FLAGS.txt

See also :variable:`CMAKE_ASM<DIALECT>_FLAGS_INIT <CMAKE_<LANG>_FLAGS_INIT>`.



/P/🚀 envvar/CC.rst
=================================


CC
--

.. include:: ENV_VAR.txt

Preferred executable for compiling ``C`` language files. Will only be used by
CMake on the first configuration to determine ``C`` compiler, after which the
value for ``CC`` is stored in the cache as
:variable:`CMAKE_C_COMPILER <CMAKE_<LANG>_COMPILER>`. For any configuration run
(including the first), the environment variable will be ignored if the
:variable:`CMAKE_C_COMPILER <CMAKE_<LANG>_COMPILER>` variable is defined.

.. note::
  Options that are required to make the compiler work correctly can be included;
  they can not be changed.

.. code-block:: console

  $ export CC="custom-compiler --arg1 --arg2"



/P/🚀 envvar/CFLAGS.rst
=====================================


CFLAGS
------

.. include:: ENV_VAR.txt

Add default compilation flags to be used when compiling ``C`` files.

.. |CMAKE_LANG_FLAGS| replace:: :variable:`CMAKE_C_FLAGS <CMAKE_<LANG>_FLAGS>`
.. |LANG| replace:: ``C``
.. include:: LANG_FLAGS.txt

See also :variable:`CMAKE_C_FLAGS_INIT <CMAKE_<LANG>_FLAGS_INIT>`.



/P/🚀 envvar/CSFLAGS.rst
======================================


CSFLAGS
-------

.. versionadded:: 3.9.2

.. include:: ENV_VAR.txt

Add default compilation flags to be used when compiling ``CSharp`` files.

.. |CMAKE_LANG_FLAGS| replace:: :variable:`CMAKE_CSharp_FLAGS <CMAKE_<LANG>_FLAGS>`
.. |LANG| replace:: ``CSharp``
.. include:: LANG_FLAGS.txt

See also :variable:`CMAKE_CSharp_FLAGS_INIT <CMAKE_<LANG>_FLAGS_INIT>`.



/P/🚀 envvar/CUDAARCHS.rst
========================================


CUDAARCHS
---------

.. versionadded:: 3.20

.. include:: ENV_VAR.txt

Value used to initialize :variable:`CMAKE_CUDA_ARCHITECTURES` on the first
configuration. Subsequent runs will use the value stored in the cache.

This is a semicolon-separated list of architectures as described in
:prop_tgt:`CUDA_ARCHITECTURES`.



/P/🚀 envvar/CUDACXX.rst
======================================


CUDACXX
-------

.. versionadded:: 3.8

.. include:: ENV_VAR.txt

Preferred executable for compiling ``CUDA`` language files. Will only be used by
CMake on the first configuration to determine ``CUDA`` compiler, after which the
value for ``CUDA`` is stored in the cache as
:variable:`CMAKE_CUDA_COMPILER <CMAKE_<LANG>_COMPILER>`. For any configuration
run (including the first), the environment variable will be ignored if the
:variable:`CMAKE_CUDA_COMPILER <CMAKE_<LANG>_COMPILER>` variable is defined.

.. note::
  Options that are required to make the compiler work correctly can be included;
  they can not be changed.

.. code-block:: console

  $ export CUDACXX="custom-compiler --arg1 --arg2"



/P/🚀 envvar/CUDAFLAGS.rst
========================================


CUDAFLAGS
---------

.. versionadded:: 3.8

.. include:: ENV_VAR.txt

Add default compilation flags to be used when compiling ``CUDA`` files.

.. |CMAKE_LANG_FLAGS| replace:: :variable:`CMAKE_CUDA_FLAGS <CMAKE_<LANG>_FLAGS>`
.. |LANG| replace:: ``CUDA``
.. include:: LANG_FLAGS.txt

See also :variable:`CMAKE_CUDA_FLAGS_INIT <CMAKE_<LANG>_FLAGS_INIT>`.



/P/🚀 envvar/CUDAHOSTCXX.rst
==========================================


CUDAHOSTCXX
-----------

.. versionadded:: 3.8

.. include:: ENV_VAR.txt

Preferred executable for compiling host code when compiling ``CUDA``
language files. Will only be used by CMake on the first configuration to
determine ``CUDA`` host compiler, after which the value for ``CUDAHOSTCXX`` is
stored in the cache as
:variable:`CMAKE_CUDA_HOST_COMPILER <CMAKE_<LANG>_HOST_COMPILER>`.
This environment variable is preferred over
:variable:`CMAKE_CUDA_HOST_COMPILER <CMAKE_<LANG>_HOST_COMPILER>`.

This environment variable is primarily meant for use with projects that
enable ``CUDA`` as a first-class language.

.. note::

  Ignored when using :ref:`Visual Studio Generators`.

.. versionadded:: 3.13
  The :module:`FindCUDA`
  module will use this variable to initialize its ``CUDA_HOST_COMPILER`` setting.



/P/🚀 envvar/CXX.rst
==================================


CXX
---

.. include:: ENV_VAR.txt

Preferred executable for compiling ``CXX`` language files. Will only be used by
CMake on the first configuration to determine ``CXX`` compiler, after which the
value for ``CXX`` is stored in the cache as
:variable:`CMAKE_CXX_COMPILER <CMAKE_<LANG>_COMPILER>`. For any configuration
run (including the first), the environment variable will be ignored if the
:variable:`CMAKE_CXX_COMPILER <CMAKE_<LANG>_COMPILER>` variable is defined.

.. note::
  Options that are required to make the compiler work correctly can be included;
  they can not be changed.

.. code-block:: console

  $ export CXX="custom-compiler --arg1 --arg2"



/P/🚀 envvar/CXXFLAGS.rst
=======================================


CXXFLAGS
--------

.. include:: ENV_VAR.txt

Add default compilation flags to be used when compiling ``CXX`` (C++) files.

.. |CMAKE_LANG_FLAGS| replace:: :variable:`CMAKE_CXX_FLAGS <CMAKE_<LANG>_FLAGS>`
.. |LANG| replace:: ``CXX``
.. include:: LANG_FLAGS.txt

See also :variable:`CMAKE_CXX_FLAGS_INIT <CMAKE_<LANG>_FLAGS_INIT>`.



/P/🚀 envvar/FC.rst
=================================


FC
--

.. include:: ENV_VAR.txt

Preferred executable for compiling ``Fortran`` language files. Will only be used
by CMake on the first configuration to determine ``Fortran`` compiler, after
which the value for ``Fortran`` is stored in the cache as
:variable:`CMAKE_Fortran_COMPILER <CMAKE_<LANG>_COMPILER>`. For any
configuration run (including the first), the environment variable will be
ignored if the :variable:`CMAKE_Fortran_COMPILER <CMAKE_<LANG>_COMPILER>`
variable is defined.

.. note::
  Options that are required to make the compiler work correctly can be included;
  they can not be changed.

.. code-block:: console

  $ export FC="custom-compiler --arg1 --arg2"



/P/🚀 envvar/FFLAGS.rst
=====================================


FFLAGS
------

.. include:: ENV_VAR.txt

Add default compilation flags to be used when compiling ``Fortran`` files.

.. |CMAKE_LANG_FLAGS| replace:: :variable:`CMAKE_Fortran_FLAGS <CMAKE_<LANG>_FLAGS>`
.. |LANG| replace:: ``Fortran``
.. include:: LANG_FLAGS.txt

See also :variable:`CMAKE_Fortran_FLAGS_INIT <CMAKE_<LANG>_FLAGS_INIT>`.



/P/🚀 envvar/HIPCXX.rst
=====================================


HIPCXX
------

.. versionadded:: 3.21

.. include:: ENV_VAR.txt

Preferred executable for compiling ``HIP`` language files. Will only be used by
CMake on the first configuration to determine ``HIP`` compiler, after which the
value for ``HIP`` is stored in the cache as
:variable:`CMAKE_HIP_COMPILER <CMAKE_<LANG>_COMPILER>`. For any configuration
run (including the first), the environment variable will be ignored if the
:variable:`CMAKE_HIP_COMPILER <CMAKE_<LANG>_COMPILER>` variable is defined.



/P/🚀 envvar/HIPFLAGS.rst
=======================================


HIPFLAGS
--------

.. versionadded:: 3.21

.. include:: ENV_VAR.txt

Add default compilation flags to be used when compiling ``HIP`` files.

.. |CMAKE_LANG_FLAGS| replace:: :variable:`CMAKE_HIP_FLAGS <CMAKE_<LANG>_FLAGS>`
.. |LANG| replace:: ``HIP``
.. include:: LANG_FLAGS.txt

See also :variable:`CMAKE_HIP_FLAGS_INIT <CMAKE_<LANG>_FLAGS_INIT>`.



/P/🚀 envvar/HIPHOSTCXX.rst
=========================================


HIPHOSTCXX
-----------

.. versionadded:: 3.28

.. include:: ENV_VAR.txt

Preferred executable for compiling host code when compiling ``HIP``
language files with the NVIDIA CUDA Compiler. Will only be used by CMake
on the first configuration to determine ``HIP`` host compiler, after which
the value for ``HIPHOSTCXX`` is stored in the cache as
:variable:`CMAKE_HIP_HOST_COMPILER <CMAKE_<LANG>_HOST_COMPILER>`.

This environment variable is primarily meant for use with projects that
enable ``HIP`` as a first-class language.

.. note::

  Ignored when using :ref:`Visual Studio Generators`.



/P/🚀 envvar/ISPC.rst
===================================


ISPC
-------

.. versionadded:: 3.19

.. include:: ENV_VAR.txt

Preferred executable for compiling ``ISPC`` language files. Will only be used by
CMake on the first configuration to determine ``ISPC`` compiler, after which the
value for ``ISPC`` is stored in the cache as
:variable:`CMAKE_ISPC_COMPILER <CMAKE_<LANG>_COMPILER>`. For any configuration
run (including the first), the environment variable will be ignored if the
:variable:`CMAKE_ISPC_COMPILER <CMAKE_<LANG>_COMPILER>` variable is defined.



/P/🚀 envvar/ISPCFLAGS.rst
========================================


ISPCFLAGS
---------

.. versionadded:: 3.19

.. include:: ENV_VAR.txt

Add default compilation flags to be used when compiling ``ISPC`` files.

.. |CMAKE_LANG_FLAGS| replace:: :variable:`CMAKE_ISPC_FLAGS <CMAKE_<LANG>_FLAGS>`
.. |LANG| replace:: ``ISPC``
.. include:: LANG_FLAGS.txt

See also :variable:`CMAKE_ISPC_FLAGS_INIT <CMAKE_<LANG>_FLAGS_INIT>`.



/P/🚀 envvar/OBJC.rst
===================================


OBJC
----

.. versionadded:: 3.16.7

.. include:: ENV_VAR.txt

Preferred executable for compiling ``OBJC`` language files. Will only be used
by CMake on the first configuration to determine ``OBJC`` compiler, after
which the value for ``OBJC`` is stored in the cache as
:variable:`CMAKE_OBJC_COMPILER <CMAKE_<LANG>_COMPILER>`. For any configuration
run (including the first), the environment variable will be ignored if the
:variable:`CMAKE_OBJC_COMPILER <CMAKE_<LANG>_COMPILER>` variable is defined.

If ``OBJC`` is not defined, the :envvar:`CC` environment variable will
be checked instead.



/P/🚀 envvar/OBJCXX.rst
=====================================


OBJCXX
------

.. versionadded:: 3.16.7

.. include:: ENV_VAR.txt

Preferred executable for compiling ``OBJCXX`` language files. Will only be used
by CMake on the first configuration to determine ``OBJCXX`` compiler, after
which the value for ``OBJCXX`` is stored in the cache as
:variable:`CMAKE_OBJCXX_COMPILER <CMAKE_<LANG>_COMPILER>`. For any configuration
run (including the first), the environment variable will be ignored if the
:variable:`CMAKE_OBJCXX_COMPILER <CMAKE_<LANG>_COMPILER>` variable is defined.

If ``OBJCXX`` is not defined, the :envvar:`CXX` environment variable will
be checked instead.



/P/🚀 envvar/RC.rst
=================================


RC
--

.. include:: ENV_VAR.txt

Preferred executable for compiling ``resource`` files. Will only be used by CMake
on the first configuration to determine ``resource`` compiler, after which the
value for ``RC`` is stored in the cache as
:variable:`CMAKE_RC_COMPILER <CMAKE_<LANG>_COMPILER>`. For any configuration run
(including the first), the environment variable will be ignored if the
:variable:`CMAKE_RC_COMPILER <CMAKE_<LANG>_COMPILER>` variable is defined.

.. note::
  Options that are required to make the compiler work correctly can be included;
  they can not be changed.

.. code-block:: console

  $ export RC="custom-compiler --arg1 --arg2"



/P/🚀 envvar/RCFLAGS.rst
======================================


RCFLAGS
-------

.. include:: ENV_VAR.txt

Add default compilation flags to be used when compiling ``RC`` (resource) files.

.. |CMAKE_LANG_FLAGS| replace:: :variable:`CMAKE_RC_FLAGS <CMAKE_<LANG>_FLAGS>`
.. |LANG| replace:: ``RC``
.. include:: LANG_FLAGS.txt

See also :variable:`CMAKE_RC_FLAGS_INIT <CMAKE_<LANG>_FLAGS_INIT>`.



/P/🚀 envvar/SWIFTC.rst
=====================================


SWIFTC
------

.. versionadded:: 3.15

.. include:: ENV_VAR.txt

Preferred executable for compiling ``Swift`` language files. Will only be used by
CMake on the first configuration to determine ``Swift`` compiler, after which the
value for ``SWIFTC`` is stored in the cache as
:variable:`CMAKE_Swift_COMPILER <CMAKE_<LANG>_COMPILER>`. For any configuration run
(including the first), the environment variable will be ignored if the
:variable:`CMAKE_Swift_COMPILER <CMAKE_<LANG>_COMPILER>` variable is defined.

.. note::
  Options that are required to make the compiler work correctly can be included;
  they can not be changed.

.. code-block:: console

  $ export SWIFTC="custom-compiler --arg1 --arg2"



/P/🚀 envvar/CMAKE_CONFIG_TYPE.rst
================================================


CMAKE_CONFIG_TYPE
-----------------

.. include:: ENV_VAR.txt

The default build configuration for :ref:`Build Tool Mode` and
``ctest`` build handler when there is no explicit configuration given.



/P/🚀 envvar/CTEST_INTERACTIVE_DEBUG_MODE.rst
===========================================================


CTEST_INTERACTIVE_DEBUG_MODE
----------------------------

.. include:: ENV_VAR.txt

Environment variable that will exist and be set to ``1`` when a test executed
by :manual:`ctest(1)` is run in interactive mode.



/P/🚀 envvar/CTEST_NO_TESTS_ACTION.rst
====================================================


CTEST_NO_TESTS_ACTION
---------------------

.. versionadded:: 3.26

.. include:: ENV_VAR.txt

Environment variable that controls how :manual:`ctest <ctest(1)>` handles
cases when there are no tests to run. Possible values are: ``error``,
``ignore``, empty or unset.

The :option:`--no-tests=\<action\> <ctest --no-tests>` option to
:manual:`ctest <ctest(1)>` overrides this environment variable if both
are given.



/P/🚀 envvar/CTEST_OUTPUT_ON_FAILURE.rst
======================================================


CTEST_OUTPUT_ON_FAILURE
-----------------------

.. include:: ENV_VAR.txt

Boolean environment variable that controls if the output should be logged for
failed tests. Set the value to ``1``, ``True``, or ``ON`` to enable output on failure.
See :manual:`ctest(1)` for more information on controlling output of failed
tests.



/P/🚀 envvar/CTEST_PARALLEL_LEVEL.rst
===================================================


CTEST_PARALLEL_LEVEL
--------------------

.. include:: ENV_VAR.txt

Specify the number of tests for CTest to run in parallel.
For example, if ``CTEST_PARALLEL_LEVEL`` is set to 8, CTest will run
up to 8 tests concurrently as if ``ctest`` were invoked with the
:option:`--parallel 8 <ctest --parallel>` option.

.. versionchanged:: 3.29

  The value may be empty, or ``0``, to let ctest use a default level of
  parallelism, or unbounded parallelism, respectively, as documented by
  the :option:`ctest --parallel` option.

  On Windows, environment variables cannot be set to an empty string.
  CTest will interpret a whitespace-only string as empty.

  In CMake 3.28 and earlier, an empty or ``0`` value was equivalent to ``1``.

See :manual:`ctest(1)` for more information on parallel test execution.



/P/🚀 envvar/CTEST_PROGRESS_OUTPUT.rst
====================================================


CTEST_PROGRESS_OUTPUT
---------------------

.. versionadded:: 3.13

.. include:: ENV_VAR.txt

Boolean environment variable that affects how :manual:`ctest <ctest(1)>`
command output reports overall progress.  When set to ``1``, ``TRUE``, ``ON`` or anything
else that evaluates to boolean true, progress is reported by repeatedly
updating the same line.  This greatly reduces the overall verbosity, but is
only supported when output is sent directly to a terminal.  If the environment
variable is not set or has a value that evaluates to false, output is reported
normally with each test having its own start and end lines logged to the
output.

The :option:`--progress <ctest --progress>` option to :manual:`ctest <ctest(1)>`
overrides this environment variable if both are given.



/P/🚀 envvar/CTEST_USE_LAUNCHERS_DEFAULT.rst
==========================================================


CTEST_USE_LAUNCHERS_DEFAULT
---------------------------

.. include:: ENV_VAR.txt

Initializes the :variable:`CTEST_USE_LAUNCHERS` variable if not already defined.



/P/🚀 envvar/DASHBOARD_TEST_FROM_CTEST.rst
========================================================


DASHBOARD_TEST_FROM_CTEST
-------------------------

.. include:: ENV_VAR.txt

Environment variable that will exist when a test executed by :manual:`ctest(1)`
is run in non-interactive mode.  The value will be equal to
:variable:`CMAKE_VERSION`.



/P/🚀 envvar/CCMAKE_COLORS.rst
============================================


CCMAKE_COLORS
-------------

.. versionadded:: 3.18

Determines what colors are used by the CMake curses interface,
when run on a terminal that supports colors.
The syntax follows the same conventions as ``LS_COLORS``;
that is, a list of key/value pairs separated by ``:``.

Keys are a single letter corresponding to a CMake cache variable type:

- ``s``: A ``STRING``.
- ``p``: A ``FILEPATH``.
- ``c``: A value which has an associated list of choices.
- ``y``: A ``BOOL`` which has a true-like value (e.g. ``ON``, ``YES``).
- ``n``: A ``BOOL`` which has a false-like value (e.g. ``OFF``, ``NO``).

Values are an integer number that specifies what color to use.
``0`` is black (you probably don't want to use that).
Others are determined by your terminal's color support.
Most (color) terminals will support at least 8 or 16 colors.
Some will support up to 256 colors. The colors will likely match
`this chart <https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg>`_,
although the first 16 colors may match the original
`CGA color palette <https://en.wikipedia.org/wiki/Color_Graphics_Adapter#Color_palette>`_.
(Many modern terminal emulators also allow their color palette,
at least for the first 16 colors, to be configured by the user.)

Note that fairly minimal checking is done for bad colors
(although a value higher than what curses believes your terminal supports
will be silently ignored) or bad syntax.

For example::

  CCMAKE_COLORS='s=39:p=220:c=207:n=196:y=46'



/P/🚀 manual/cmake-generators.7.rst
================================================


.. cmake-manual-description: CMake Generators Reference

cmake-generators(7)
*******************

Introduction
============

A *CMake Generator* is responsible for writing the input files for
a native build system.  Exactly one of the `CMake Generators`_ must be
selected for a build tree to determine what native build system is to
be used.  Optionally one of the `Extra Generators`_ may be selected
as a variant of some of the `Command-Line Build Tool Generators`_ to
produce project files for an auxiliary IDE.

CMake Generators are platform-specific so each may be available only
on certain platforms.  The :manual:`cmake(1)` command-line tool
:option:`--help <cmake --help>` output lists available generators on the
current platform.  Use its :option:`-G <cmake -G>` option to specify the
generator for a new build tree. The :manual:`cmake-gui(1)` offers
interactive selection of a generator when creating a new build tree.

CMake Generators
================

.. _`Command-Line Build Tool Generators`:

Command-Line Build Tool Generators
----------------------------------

These generators support command-line build tools.  In order to use them,
one must launch CMake from a command-line prompt whose environment is
already configured for the chosen compiler and build tool.

.. _`Makefile Generators`:

Makefile Generators
^^^^^^^^^^^^^^^^^^^

.. toctree::
   :maxdepth: 1

    Help/generator/Borland Makefiles
    Help/generator/MSYS Makefiles
    Help/generator/MinGW Makefiles
    Help/generator/NMake Makefiles
    Help/generator/NMake Makefiles JOM
    Help/generator/Unix Makefiles
    Help/generator/Watcom WMake

.. _`Ninja Generators`:

Ninja Generators
^^^^^^^^^^^^^^^^

.. toctree::
   :maxdepth: 1

    Help/generator/Ninja
    Help/generator/Ninja Multi-Config

.. _`IDE Build Tool Generators`:

IDE Build Tool Generators
-------------------------

These generators support Integrated Development Environment (IDE)
project files.  Since the IDEs configure their own environment
one may launch CMake from any environment.

.. _`Visual Studio Generators`:

Visual Studio Generators
^^^^^^^^^^^^^^^^^^^^^^^^

.. toctree::
   :maxdepth: 1

    Help/generator/Visual Studio 6
    Help/generator/Visual Studio 7
    Help/generator/Visual Studio 7 .NET 2003
    Help/generator/Visual Studio 8 2005
    Help/generator/Visual Studio 9 2008
    Help/generator/Visual Studio 10 2010
    Help/generator/Visual Studio 11 2012
    Help/generator/Visual Studio 12 2013
    Help/generator/Visual Studio 14 2015
    Help/generator/Visual Studio 15 2017
    Help/generator/Visual Studio 16 2019
    Help/generator/Visual Studio 17 2022

Other Generators
^^^^^^^^^^^^^^^^

.. toctree::
   :maxdepth: 1

    Help/generator/Green Hills MULTI
    Help/generator/Xcode

.. _`Extra Generators`:

Extra Generators
================

.. deprecated:: 3.27

  Support for "Extra Generators" is deprecated and will be removed from
  a future version of CMake.  IDEs may use the :manual:`cmake-file-api(7)`
  to view CMake-generated project build trees.

Some of the `CMake Generators`_ listed in the :manual:`cmake(1)`
command-line tool :option:`--help <cmake --help>` output may have
variants that specify an extra generator for an auxiliary IDE tool.
Such generator names have the form ``<extra-generator> - <main-generator>``.
The following extra generators are known to CMake.

.. toctree::
   :maxdepth: 1

    Help/generator/CodeBlocks
    Help/generator/CodeLite
    Help/generator/Eclipse CDT4
    Help/generator/Kate
    Help/generator/Sublime Text 2



/P/🚀 generator/Borland Makefiles.rst
===================================================


Borland Makefiles
-----------------

Generates Borland makefiles.



/P/🚀 generator/MSYS Makefiles.rst
================================================


MSYS Makefiles
--------------

Generates makefiles for use with MSYS (Minimal SYStem)
``make`` under the MSYS shell.

Use this generator in a MSYS shell prompt and using ``make`` as the build
tool.  The generated makefiles use ``/bin/sh`` as the shell to launch build
rules.  They are not compatible with a Windows command prompt.

To build under a Windows command prompt, use the
:generator:`MinGW Makefiles` generator.



/P/🚀 generator/MinGW Makefiles.rst
=================================================


MinGW Makefiles
---------------

Generates makefiles for use with ``mingw32-make`` under a Windows command
prompt.

Use this generator under a Windows command prompt with
MinGW (Minimalist GNU for Windows) in the ``PATH``
and using ``mingw32-make`` as the build tool.  The generated makefiles use
``cmd.exe`` as the shell to launch build rules.  They are not compatible with
MSYS or a unix shell.

To build under the MSYS shell, use the :generator:`MSYS Makefiles` generator.



/P/🚀 generator/NMake Makefiles.rst
=================================================


NMake Makefiles
---------------

Generates NMake makefiles.



/P/🚀 generator/NMake Makefiles JOM.rst
=====================================================


NMake Makefiles JOM
-------------------

Generates JOM makefiles.

.. versionadded:: 3.8
  :generator:`CodeBlocks` generator can be used as an extra generator.



/P/🚀 generator/Unix Makefiles.rst
================================================


Unix Makefiles
--------------

Generates standard UNIX makefiles.

A hierarchy of UNIX makefiles is generated into the build tree.  Use
any standard UNIX-style make program to build the project through
the ``all`` target and install the project through the ``install``
(or ``install/strip``) target.

For each subdirectory ``sub/dir`` of the project a UNIX makefile will
be created, containing the following targets:

``all``
  Depends on all targets required by the subdirectory.

``install``
  Runs the install step in the subdirectory, if any.

``install/strip``
  Runs the install step in the subdirectory followed by a ``CMAKE_STRIP`` command,
  if any.

  The ``CMAKE_STRIP`` variable will contain the platform's ``strip`` utility, which
  removes symbols information from generated binaries.

``test``
  Runs the test step in the subdirectory, if any.

``package``
  Runs the package step in the subdirectory, if any.



/P/🚀 generator/Watcom WMake.rst
==============================================


Watcom WMake
------------

Generates Watcom WMake makefiles.



/P/🚀 generator/Ninja.rst
=======================================


Ninja
-----

Generates ``build.ninja`` files.

A ``build.ninja`` file is generated into the build tree.  Use the ninja
program to build the project through the ``all`` target and install the
project through the ``install`` (or ``install/strip``) target.

For each subdirectory ``sub/dir`` of the project, additional targets
are generated:

``sub/dir/all``

  .. versionadded:: 3.6

    Depends on all targets required by the subdirectory.

``sub/dir/install``

  .. versionadded:: 3.7

    Runs the install step in the subdirectory, if any.

``sub/dir/install/strip``

  .. versionadded:: 3.7
    Runs the install step in the subdirectory followed by a ``CMAKE_STRIP`` command,
    if any.

    The ``CMAKE_STRIP`` variable will contain the platform's ``strip`` utility, which
    removes symbols information from generated binaries.

``sub/dir/test``

  .. versionadded:: 3.7

    Runs the test step in the subdirectory, if any.

``sub/dir/package``

  .. versionadded:: 3.7

    Runs the package step in the subdirectory, if any.

Fortran Support
^^^^^^^^^^^^^^^

.. versionadded:: 3.7

The ``Ninja`` generator conditionally supports Fortran when the ``ninja``
tool is at least version 1.10 (which has the required features).

Swift Support
^^^^^^^^^^^^^

.. versionadded:: 3.15

The Swift support is experimental, not considered stable, and may change
in future releases of CMake.

See Also
^^^^^^^^

.. versionadded:: 3.17
  The :generator:`Ninja Multi-Config` generator is similar to the ``Ninja``
  generator, but generates multiple configurations at once.



/P/🚀 generator/Ninja Multi-Config.rst
====================================================


Ninja Multi-Config
------------------

.. versionadded:: 3.17

Generates multiple ``build-<Config>.ninja`` files.

This generator is very much like the :generator:`Ninja` generator, but with
some key differences. Only these differences will be discussed in this
document.

Unlike the :generator:`Ninja` generator, ``Ninja Multi-Config`` generates
multiple configurations at once with :variable:`CMAKE_CONFIGURATION_TYPES`
instead of only one configuration with :variable:`CMAKE_BUILD_TYPE`. One
``build-<Config>.ninja`` file will be generated for each of these
configurations (with ``<Config>`` being the configuration name.) These files
are intended to be run with ``ninja -f build-<Config>.ninja``. A
``build.ninja`` file is also generated, using the configuration from either
:variable:`CMAKE_DEFAULT_BUILD_TYPE` or the first item from
:variable:`CMAKE_CONFIGURATION_TYPES`.

``cmake --build . --config <Config>`` will always use ``build-<Config>.ninja``
to build. If no :option:`--config <cmake--build --config>` argument is
specified, :option:`cmake --build . <cmake --build>` will use ``build.ninja``.

Each ``build-<Config>.ninja`` file contains ``<target>`` targets as well as
``<target>:<Config>`` targets, where ``<Config>`` is the same as the
configuration specified in ``build-<Config>.ninja`` Additionally, if
cross-config mode is enabled, ``build-<Config>.ninja`` may contain
``<target>:<OtherConfig>`` targets, where ``<OtherConfig>`` is a cross-config,
as well as ``<target>:all``, which builds the target in all cross-configs. See
below for how to enable cross-config mode.

The ``Ninja Multi-Config`` generator recognizes the following variables:

:variable:`CMAKE_CONFIGURATION_TYPES`
  Specifies the total set of configurations to build. Unlike with other
  multi-config generators, this variable has a value of
  ``Debug;Release;RelWithDebInfo`` by default.

:variable:`CMAKE_CROSS_CONFIGS`
  Specifies a :ref:`semicolon-separated list <CMake Language Lists>` of
  configurations available from all ``build-<Config>.ninja`` files.

:variable:`CMAKE_DEFAULT_BUILD_TYPE`
  Specifies the configuration to use by default in a ``build.ninja`` file.

:variable:`CMAKE_DEFAULT_CONFIGS`
  Specifies a :ref:`semicolon-separated list <CMake Language Lists>` of
  configurations to build for a target in ``build.ninja``
  if no ``:<Config>`` suffix is specified.

Consider the following example:

.. code-block:: cmake

  cmake_minimum_required(VERSION 3.16)
  project(MultiConfigNinja C)

  add_executable(generator generator.c)
  add_custom_command(OUTPUT generated.c COMMAND generator generated.c)
  add_library(generated ${CMAKE_BINARY_DIR}/generated.c)

Now assume you configure the project with ``Ninja Multi-Config`` and run one of
the following commands:

.. code-block:: shell

  ninja -f build-Debug.ninja generated
  # OR
  cmake --build . --config Debug --target generated

This would build the ``Debug`` configuration of ``generator``, which would be
used to generate ``generated.c``, which would be used to build the ``Debug``
configuration of ``generated``.

But if :variable:`CMAKE_CROSS_CONFIGS` is set to ``all``, and you run the
following instead:

.. code-block:: shell

  ninja -f build-Release.ninja generated:Debug
  # OR
  cmake --build . --config Release --target generated:Debug

This would build the ``Release`` configuration of ``generator``, which would be
used to generate ``generated.c``, which would be used to build the ``Debug``
configuration of ``generated``. This is useful for running a release-optimized
version of a generator utility while still building the debug version of the
targets built with the generated code.

Custom Commands
^^^^^^^^^^^^^^^

.. versionadded:: 3.20

The ``Ninja Multi-Config`` generator adds extra capabilities to
:command:`add_custom_command` and :command:`add_custom_target` through its
cross-config mode. The ``COMMAND``, ``DEPENDS``, and ``WORKING_DIRECTORY``
arguments can be evaluated in the context of either the "command config" (the
"native" configuration of the ``build-<Config>.ninja`` file in use) or the
"output config" (the configuration used to evaluate the ``OUTPUT`` and
``BYPRODUCTS``).

If either ``OUTPUT`` or ``BYPRODUCTS`` names a path that is common to
more than one configuration (e.g. it does not use any generator expressions),
all arguments are evaluated in the command config by default.
If all ``OUTPUT`` and ``BYPRODUCTS`` paths are unique to each configuration
(e.g. by using the :genex:`$<CONFIG>` generator expression), the first argument of
``COMMAND`` is still evaluated in the command config by default, while all
subsequent arguments, as well as the arguments to ``DEPENDS`` and
``WORKING_DIRECTORY``, are evaluated in the output config. These defaults can
be overridden with the :genex:`$<OUTPUT_CONFIG:...>` and :genex:`$<COMMAND_CONFIG:...>`
generator-expressions. Note that if a target is specified by its name in
``DEPENDS``, or as the first argument of ``COMMAND``, it is always evaluated
in the command config, even if it is wrapped in :genex:`$<OUTPUT_CONFIG:...>`
(because its plain name is not a generator expression).

As an example, consider the following:

.. code-block:: cmake

  add_custom_command(
    OUTPUT "$<CONFIG>.txt"
    COMMAND
      generator "$<CONFIG>.txt"
                "$<OUTPUT_CONFIG:$<CONFIG>>"
                "$<COMMAND_CONFIG:$<CONFIG>>"
    DEPENDS
      tgt1
      "$<TARGET_FILE:tgt2>"
      "$<OUTPUT_CONFIG:$<TARGET_FILE:tgt3>>"
      "$<COMMAND_CONFIG:$<TARGET_FILE:tgt4>>"
    )

Assume that ``generator``, ``tgt1``, ``tgt2``, ``tgt3``, and ``tgt4`` are all
executable targets, and assume that ``$<CONFIG>.txt`` is built in the ``Debug``
output config using the ``Release`` command config. The ``Release`` build of
the ``generator`` target is called with ``Debug.txt Debug Release`` as
arguments. The command depends on the ``Release`` builds of ``tgt1`` and
``tgt4``, and the ``Debug`` builds of ``tgt2`` and ``tgt3``.

``PRE_BUILD``, ``PRE_LINK``, and ``POST_BUILD`` custom commands for targets
only get run in their "native" configuration (the ``Release`` configuration in
the ``build-Release.ninja`` file) unless they have no ``BYPRODUCTS`` or their
``BYPRODUCTS`` are unique per config. Consider the following example:

.. code-block:: cmake

  add_executable(exe main.c)
  add_custom_command(
    TARGET exe
    POST_BUILD
    COMMAND
      ${CMAKE_COMMAND} -E echo "Running no-byproduct command"
    )
  add_custom_command(
    TARGET exe
    POST_BUILD
    COMMAND
      ${CMAKE_COMMAND} -E echo
      "Running separate-byproduct command for $<CONFIG>"
    BYPRODUCTS $<CONFIG>.txt
    )
  add_custom_command(
    TARGET exe
    POST_BUILD
    COMMAND
      ${CMAKE_COMMAND} -E echo
      "Running common-byproduct command for $<CONFIG>"
    BYPRODUCTS exe.txt
    )

In this example, if you build ``exe:Debug`` in ``build-Release.ninja``, the
first and second custom commands get run, since their byproducts are unique
per-config, but the last custom command does not. However, if you build
``exe:Release`` in ``build-Release.ninja``, all three custom commands get run.



/P/🚀 generator/Visual Studio 6.rst
=================================================


Visual Studio 6
---------------

Removed.  This once generated Visual Studio 6 project files, but the
generator has been removed since CMake 3.6.  It is still possible to
build with VS 6 tools using the :generator:`NMake Makefiles` generator.



/P/🚀 generator/Visual Studio 7.rst
=================================================


Visual Studio 7
---------------

Removed.  This once generated Visual Studio .NET 2002 project files, but
the generator has been removed since CMake 3.6.  It is still possible to
build with VS 7.0 tools using the :generator:`NMake Makefiles` generator.



/P/🚀 generator/Visual Studio 7 .NET 2003.rst
===========================================================


Visual Studio 7 .NET 2003
-------------------------

Removed.  This once generated Visual Studio .NET 2003 project files, but
the generator has been removed since CMake 3.9.  It is still possible to
build with VS 7.1 tools using the :generator:`NMake Makefiles` generator.



/P/🚀 generator/Visual Studio 8 2005.rst
======================================================


Visual Studio 8 2005
--------------------

Removed.  This once generated Visual Studio 8 2005 project files, but
the generator has been removed since CMake 3.12.  It is still possible to
build with VS 2005 tools using the :generator:`NMake Makefiles` generator.



/P/🚀 generator/Visual Studio 9 2008.rst
======================================================


Visual Studio 9 2008
--------------------

Deprecated.  Generates Visual Studio 9 2008 project files.

.. note::
  This generator is deprecated and will be removed in a future version
  of CMake.  It will still be possible to build with VS 9 2008 tools
  using the :generator:`Visual Studio 14 2015` generator (or above,
  and with VS 10 2010 also installed) with
  :variable:`CMAKE_GENERATOR_TOOLSET` set to ``v90``,
  or by using the :generator:`NMake Makefiles` generator.

Platform Selection
^^^^^^^^^^^^^^^^^^

The default target platform name (architecture) is ``Win32``.

.. versionadded:: 3.1
  The :variable:`CMAKE_GENERATOR_PLATFORM` variable may be set, perhaps
  via the :option:`cmake -A` option, to specify a target platform
  name (architecture).  For example:

  * ``cmake -G "Visual Studio 9 2008" -A Win32``
  * ``cmake -G "Visual Studio 9 2008" -A x64``
  * ``cmake -G "Visual Studio 9 2008" -A Itanium``
  * ``cmake -G "Visual Studio 9 2008" -A <WinCE-SDK>``
    (Specify a target platform matching a Windows CE SDK name.)

For compatibility with CMake versions prior to 3.1, one may specify
a target platform name optionally at the end of the generator name.
This is supported only for:

``Visual Studio 9 2008 Win64``
  Specify target platform ``x64``.

``Visual Studio 9 2008 IA64``
  Specify target platform ``Itanium``.

``Visual Studio 9 2008 <WinCE-SDK>``
  Specify target platform matching a Windows CE SDK name.



/P/🚀 generator/Visual Studio 10 2010.rst
=======================================================


Visual Studio 10 2010
---------------------

Removed.  This once generated Visual Studio 10 2010 project files, but
the generator has been removed since CMake 3.25.  It is still possible
to build with VS 10 2010 tools using the :generator:`Visual Studio 14 2015`
(or above) generator with :variable:`CMAKE_GENERATOR_TOOLSET` set to
``v100``, or by using the :generator:`NMake Makefiles` generator.



/P/🚀 generator/Visual Studio 11 2012.rst
=======================================================


Visual Studio 11 2012
---------------------

Removed.  This once generated Visual Studio 11 2012 project files, but
the generator has been removed since CMake 3.28.  It is still possible
to build with VS 11 2012 tools using the :generator:`Visual Studio 14 2015`
(or above) generator with :variable:`CMAKE_GENERATOR_TOOLSET` set to ``v110``,
or by using the :generator:`NMake Makefiles` generator.



/P/🚀 generator/Visual Studio 12 2013.rst
=======================================================


Visual Studio 12 2013
---------------------

Deprecated.  Generates Visual Studio 12 (VS 2013) project files.

.. note::
  This generator is deprecated and will be removed in a future version
  of CMake.  It will still be possible to build with VS 12 2013 tools
  using the :generator:`Visual Studio 14 2015` (or above) generator
  with :variable:`CMAKE_GENERATOR_TOOLSET` set to ``v120``, or by
  using the :generator:`NMake Makefiles` generator.

For compatibility with CMake versions prior to 3.0, one may specify this
generator using the name "Visual Studio 12" without the year component.

Project Types
^^^^^^^^^^^^^

Only Visual C++ and C# projects may be generated (and Fortran with
Intel compiler integration).  Other types of projects (JavaScript,
Powershell, Python, etc.) are not supported.

Platform Selection
^^^^^^^^^^^^^^^^^^

The default target platform name (architecture) is ``Win32``.

.. versionadded:: 3.1
  The :variable:`CMAKE_GENERATOR_PLATFORM` variable may be set, perhaps
  via the :option:`cmake -A` option, to specify a target platform
  name (architecture).  For example:

  * ``cmake -G "Visual Studio 12 2013" -A Win32``
  * ``cmake -G "Visual Studio 12 2013" -A x64``
  * ``cmake -G "Visual Studio 12 2013" -A ARM``

For compatibility with CMake versions prior to 3.1, one may specify
a target platform name optionally at the end of the generator name.
This is supported only for:

``Visual Studio 12 2013 Win64``
  Specify target platform ``x64``.

``Visual Studio 12 2013 ARM``
  Specify target platform ``ARM``.

Toolset Selection
^^^^^^^^^^^^^^^^^

The ``v120`` toolset that comes with Visual Studio 12 2013 is selected by
default.  The :variable:`CMAKE_GENERATOR_TOOLSET` option may be set, perhaps
via the :option:`cmake -T` option, to specify another toolset.

.. |VS_TOOLSET_HOST_ARCH_DEFAULT| replace::
   By default this generator uses the 32-bit variant even on a 64-bit host.

.. include:: VS_TOOLSET_HOST_ARCH_LEGACY.txt



/P/🚀 generator/Visual Studio 14 2015.rst
=======================================================


Visual Studio 14 2015
---------------------

.. versionadded:: 3.1

Generates Visual Studio 14 (VS 2015) project files.

Project Types
^^^^^^^^^^^^^

Only Visual C++ and C# projects may be generated (and Fortran with
Intel compiler integration).  Other types of projects (JavaScript,
Powershell, Python, etc.) are not supported.

Platform Selection
^^^^^^^^^^^^^^^^^^

The default target platform name (architecture) is ``Win32``.

The :variable:`CMAKE_GENERATOR_PLATFORM` variable may be set, perhaps
via the :option:`cmake -A` option, to specify a target platform
name (architecture).  For example:

* ``cmake -G "Visual Studio 14 2015" -A Win32``
* ``cmake -G "Visual Studio 14 2015" -A x64``
* ``cmake -G "Visual Studio 14 2015" -A ARM``

For compatibility with CMake versions prior to 3.1, one may specify
a target platform name optionally at the end of the generator name.
This is supported only for:

``Visual Studio 14 2015 Win64``
  Specify target platform ``x64``.

``Visual Studio 14 2015 ARM``
  Specify target platform ``ARM``.

Toolset Selection
^^^^^^^^^^^^^^^^^

The ``v140`` toolset that comes with Visual Studio 14 2015 is selected by
default.  The :variable:`CMAKE_GENERATOR_TOOLSET` option may be set, perhaps
via the :option:`cmake -T` option, to specify another toolset.

.. |VS_TOOLSET_HOST_ARCH_DEFAULT| replace::
   By default this generator uses the 32-bit variant even on a 64-bit host.

.. include:: VS_TOOLSET_HOST_ARCH_LEGACY.txt

.. _`Windows 10 SDK Maximum Version for VS 2015`:

Windows 10 SDK Maximum Version for VS 2015
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.19

Microsoft stated in a "Windows 10 October 2018 Update" blog post that Windows
10 SDK versions (15063, 16299, 17134, 17763) are not supported by VS 2015 and
are only supported by VS 2017 and later.  Therefore by default CMake
automatically ignores Windows 10 SDKs beyond ``10.0.14393.0``.

However, there are other recommendations for certain driver/Win32 builds that
indicate otherwise.  A user can override this behavior by either setting the
:variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM` to a false value
or setting the :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM` to
the string value of the required maximum (e.g. ``10.0.15063.0``).



/P/🚀 generator/Visual Studio 15 2017.rst
=======================================================


Visual Studio 15 2017
---------------------

.. versionadded:: 3.7.1

Generates Visual Studio 15 (VS 2017) project files.

Project Types
^^^^^^^^^^^^^

Only Visual C++ and C# projects may be generated (and Fortran with
Intel compiler integration).  Other types of projects (JavaScript,
Powershell, Python, etc.) are not supported.

Instance Selection
^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.11

VS 2017 supports multiple installations on the same machine.  The
:variable:`CMAKE_GENERATOR_INSTANCE` variable may be used to select one.

Platform Selection
^^^^^^^^^^^^^^^^^^

The default target platform name (architecture) is ``Win32``.

The :variable:`CMAKE_GENERATOR_PLATFORM` variable may be set, perhaps
via the :option:`cmake -A` option, to specify a target platform
name (architecture).  For example:

* ``cmake -G "Visual Studio 15 2017" -A Win32``
* ``cmake -G "Visual Studio 15 2017" -A x64``
* ``cmake -G "Visual Studio 15 2017" -A ARM``
* ``cmake -G "Visual Studio 15 2017" -A ARM64``

For compatibility with CMake versions prior to 3.1, one may specify
a target platform name optionally at the end of the generator name.
This is supported only for:

``Visual Studio 15 2017 Win64``
  Specify target platform ``x64``.

``Visual Studio 15 2017 ARM``
  Specify target platform ``ARM``.

Toolset Selection
^^^^^^^^^^^^^^^^^

The ``v141`` toolset that comes with Visual Studio 15 2017 is selected by
default.  The :variable:`CMAKE_GENERATOR_TOOLSET` option may be set, perhaps
via the :option:`cmake -T` option, to specify another toolset.

.. |VS_TOOLSET_HOST_ARCH_DEFAULT| replace::
   By default this generator uses the 32-bit variant even on a 64-bit host.

.. include:: VS_TOOLSET_HOST_ARCH_LEGACY.txt



/P/🚀 generator/Visual Studio 16 2019.rst
=======================================================


Visual Studio 16 2019
---------------------

.. versionadded:: 3.14

Generates Visual Studio 16 (VS 2019) project files.

Project Types
^^^^^^^^^^^^^

Only Visual C++ and C# projects may be generated (and Fortran with
Intel compiler integration).  Other types of projects (JavaScript,
Powershell, Python, etc.) are not supported.

Instance Selection
^^^^^^^^^^^^^^^^^^

VS 2019 supports multiple installations on the same machine.  The
:variable:`CMAKE_GENERATOR_INSTANCE` variable may be used to select one.

Platform Selection
^^^^^^^^^^^^^^^^^^

The default target platform name (architecture) is that of the host
and is provided in the :variable:`CMAKE_VS_PLATFORM_NAME_DEFAULT` variable.

The :variable:`CMAKE_GENERATOR_PLATFORM` variable may be set, perhaps
via the :option:`cmake -A` option, to specify a target platform
name (architecture).  For example:

* ``cmake -G "Visual Studio 16 2019" -A Win32``
* ``cmake -G "Visual Studio 16 2019" -A x64``
* ``cmake -G "Visual Studio 16 2019" -A ARM``
* ``cmake -G "Visual Studio 16 2019" -A ARM64``

Toolset Selection
^^^^^^^^^^^^^^^^^

The ``v142`` toolset that comes with Visual Studio 16 2019 is selected by
default.  The :variable:`CMAKE_GENERATOR_TOOLSET` option may be set, perhaps
via the :option:`cmake -T` option, to specify another toolset.

.. |VS_TOOLSET_HOST_ARCH_DEFAULT| replace::
   By default this generator uses the 64-bit variant on x64 hosts and
   the 32-bit variant otherwise.

.. include:: VS_TOOLSET_HOST_ARCH.txt



/P/🚀 generator/Visual Studio 17 2022.rst
=======================================================


Visual Studio 17 2022
---------------------

.. versionadded:: 3.21

Generates Visual Studio 17 (VS 2022) project files.

Project Types
^^^^^^^^^^^^^

Only Visual C++ and C# projects may be generated (and Fortran with
Intel compiler integration).  Other types of projects (JavaScript,
Powershell, Python, etc.) are not supported.

Instance Selection
^^^^^^^^^^^^^^^^^^

VS 2022 supports multiple installations on the same machine.  The
:variable:`CMAKE_GENERATOR_INSTANCE` variable may be used to select one.

Platform Selection
^^^^^^^^^^^^^^^^^^

The default target platform name (architecture) is that of the host
and is provided in the :variable:`CMAKE_VS_PLATFORM_NAME_DEFAULT` variable.

The :variable:`CMAKE_GENERATOR_PLATFORM` variable may be set, perhaps
via the :option:`cmake -A` option, to specify a target platform
name (architecture).  For example:

* ``cmake -G "Visual Studio 17 2022" -A Win32``
* ``cmake -G "Visual Studio 17 2022" -A x64``
* ``cmake -G "Visual Studio 17 2022" -A ARM``
* ``cmake -G "Visual Studio 17 2022" -A ARM64``

Toolset Selection
^^^^^^^^^^^^^^^^^

The ``v143`` toolset that comes with VS 17 2022 is selected by default.
The :variable:`CMAKE_GENERATOR_TOOLSET` option may be set, perhaps
via the :option:`cmake -T` option, to specify another toolset.

.. |VS_TOOLSET_HOST_ARCH_DEFAULT| replace::
   By default this generator uses the 64-bit variant on x64 hosts and
   the 32-bit variant otherwise.

.. include:: VS_TOOLSET_HOST_ARCH.txt



/P/🚀 generator/Green Hills MULTI.rst
===================================================


Green Hills MULTI
-----------------

.. versionadded:: 3.3

.. versionadded:: 3.15
  Linux support.

Generates Green Hills MULTI project files (experimental, work-in-progress).

  The buildsystem has predetermined build-configuration settings that can be controlled
  via the :variable:`CMAKE_BUILD_TYPE` variable.

Platform Selection
^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.13

The variable ``GHS_PRIMARY_TARGET`` can be used to select the target platform.

  | Sets ``primaryTarget`` entry in project file.

For example:

* ``cmake -G "Green Hills MULTI" -D GHS_PRIMARY_TARGET=ppc_integrity.tgt``

Otherwise the ``primaryTarget`` will be composed from the values of :variable:`CMAKE_GENERATOR_PLATFORM`
and ``GHS_TARGET_PLATFORM``. Defaulting to the value of ``arm_integrity.tgt``

* The :variable:`CMAKE_GENERATOR_PLATFORM` variable may be set, perhaps
  via the :option:`cmake -A` option.

  | Typical values of ``arm``, ``ppc``, ``86``, etcetera, are used.

* The variable ``GHS_TARGET_PLATFORM`` may be set, perhaps via the :option:`cmake -D`
  option.

  | Defaults to ``integrity``.
  | Usual values are ``integrity``, ``threadx``, ``uvelosity``, ``velosity``,
    ``vxworks``, ``standalone``.

For example:

* ``cmake -G "Green Hills MULTI"`` for ``arm_integrity.tgt``.
* ``cmake -G "Green Hills MULTI" -A 86`` for ``86_integrity.tgt``.
* ``cmake -G "Green Hills MULTI" -D GHS_TARGET_PLATFORM=standalone`` for ``arm_standalone.tgt``.
* ``cmake -G "Green Hills MULTI" -A ppc -D GHS_TARGET_PLATFORM=standalone`` for ``ppc_standalone.tgt``.

Toolset Selection
^^^^^^^^^^^^^^^^^

.. versionadded:: 3.13

The generator searches for the latest compiler or can be given a location to use.
``GHS_TOOLSET_ROOT`` is the directory that is checked for the latest compiler.

* The :variable:`CMAKE_GENERATOR_TOOLSET` option may be set, perhaps
  via the :option:`cmake -T` option, to specify the location of the toolset.
  Both absolute and relative paths are valid. Paths are relative to ``GHS_TOOLSET_ROOT``.

* The variable ``GHS_TOOLSET_ROOT`` may be set, perhaps via the :option:`cmake -D`
  option.

  | Root path for toolset searches and relative paths.
  | Defaults to ``C:/ghs`` in Windows or ``/usr/ghs`` in Linux.

For example, setting a specific compiler:

* ``cmake -G "Green Hills MULTI" -T comp_201754`` for ``/usr/ghs/comp_201754``.
* ``cmake -G "Green Hills MULTI" -T comp_201754 -D GHS_TOOLSET_ROOT=/opt/ghs`` for ``/opt/ghs/comp_201754``.
* ``cmake -G "Green Hills MULTI" -T /usr/ghs/comp_201554``
* ``cmake -G "Green Hills MULTI" -T C:/ghs/comp_201754``

For example, searching for latest compiler:

* ``cmake -G "Green Hills MULTI"`` for searching ``/usr/ghs``.
* ``cmake -G "Green Hills MULTI -D GHS_TOOLSET_ROOT=/opt/ghs"`` for searching ``/opt/ghs``.

.. note::
  The :variable:`CMAKE_GENERATOR_TOOLSET` should use CMake style paths.

OS and BSP Selection
^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.3

Certain target platforms, like Integrity, require an OS.  The RTOS directory path
can be explicitly set using ``GHS_OS_DIR``.  Otherwise ``GHS_OS_ROOT`` will be
searched for the latest Integrity RTOS.

If the target platform, like Integrity, requires a BSP name then it can be set via
the ``GHS_BSP_NAME`` variable.

* ``GHS_OS_DIR`` and ``GHS_OS_DIR_OPTION``

  | Sets ``-os_dir`` entry in project file.

  | ``GHS_OS_DIR_OPTION`` default value is ``-os_dir``.

  .. versionadded:: 3.15
    The ``GHS_OS_DIR_OPTION`` variable.

  For example:

  * ``cmake -G "Green Hills MULTI" -D GHS_OS_DIR=/usr/ghs/int1144``

* ``GHS_OS_ROOT``

  | Root path for RTOS searches.
  | Defaults to ``C:/ghs`` in Windows or ``/usr/ghs`` in Linux.

  For example:

  * ``cmake -G "Green Hills MULTI" -D GHS_OS_ROOT=/opt/ghs``

* ``GHS_BSP_NAME``

  | Sets ``-bsp`` entry in project file.
  | Defaults to ``sim<arch>`` for ``integrity`` platforms.

  For example:

  * ``cmake -G "Green Hills MULTI"`` for ``simarm`` on ``arm_integrity.tgt``.
  * ``cmake -G "Green Hills MULTI" -A 86`` for ``sim86`` on ``86_integrity.tgt``.
  * ``cmake -G "Green Hills MULTI" -A ppc -D GHS_BSP_NAME=sim800`` for ``sim800``
    on ``ppc_integrity.tgt``.
  * ``cmake -G "Green Hills MULTI" -D GHS_PRIMARY_TARGET=ppc_integrity.tgt -D GHS_BSP_NAME=fsl-t1040``
    for ``fsl-t1040`` on ``ppc_integrity.tgt``.

Target Properties
^^^^^^^^^^^^^^^^^

.. versionadded:: 3.14

The following properties are available:

* :prop_tgt:`GHS_INTEGRITY_APP`
* :prop_tgt:`GHS_NO_SOURCE_GROUP_FILE`

MULTI Project Variables
^^^^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.3

Adding a Customization file and macros are available through the use of the following
variables:

* ``GHS_CUSTOMIZATION`` - CMake path name to Customization File.
* ``GHS_GPJ_MACROS`` - CMake list of Macros.

.. note::
  This generator is deemed experimental as of CMake |release|
  and is still a work in progress.  Future versions of CMake
  may make breaking changes as the generator matures.



/P/🚀 generator/Xcode.rst
=======================================


Xcode
-----

Generate Xcode project files.

.. versionchanged:: 3.15
  This generator supports Xcode 5.0 and above.

.. _`Xcode Build System Selection`:

Toolset and Build System Selection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

By default Xcode is allowed to select its own default toolchain.
The :variable:`CMAKE_GENERATOR_TOOLSET` option may be set, perhaps
via the :option:`cmake -T` option, to specify another toolset.

.. versionadded:: 3.19
  This generator supports toolset specification using one of these forms:

* ``toolset``
* ``toolset[,key=value]*``
* ``key=value[,key=value]*``

The ``toolset`` specifies the toolset name.  The selected toolset name
is provided in the :variable:`CMAKE_XCODE_PLATFORM_TOOLSET` variable.

The ``key=value`` pairs form a comma-separated list of options to
specify generator-specific details of the toolset selection.
Supported pairs are:

``buildsystem=<variant>``
  Specify the buildsystem variant to use.
  See the :variable:`CMAKE_XCODE_BUILD_SYSTEM` variable for allowed values.

  For example, to select the original build system under Xcode 12,
  run :manual:`cmake(1)` with the option :option:`-T buildsystem=1 <cmake -T>`.

Swift Support
^^^^^^^^^^^^^

.. versionadded:: 3.4

When using the ``Xcode`` generator with Xcode 6.1 or higher,
one may enable the ``Swift`` language with the :command:`enable_language`
command or the :command:`project`.

Limitations
^^^^^^^^^^^

The Xcode generator does not support per-configuration sources.
Code like the following will result in a generation error:

.. code-block:: cmake

  add_executable(MyApp mymain-$<CONFIG>.cpp)



/P/🚀 generator/CodeBlocks.rst
============================================


CodeBlocks
----------

.. deprecated:: 3.27

  Support for :ref:`Extra Generators` is deprecated and will be removed from
  a future version of CMake.  IDEs may use the :manual:`cmake-file-api(7)`
  to view CMake-generated project build trees.

Generates CodeBlocks project files.

Project files for CodeBlocks will be created in the top directory and
in every subdirectory which features a ``CMakeLists.txt`` file containing
a :command:`project` call.  Additionally a hierarchy of makefiles is generated
into the build tree.
The appropriate make program can build the
project through the default ``all`` target.  An ``install`` target is
also provided.

.. versionadded:: 3.10
 The :variable:`CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES` variable may
 be set to ``ON`` to exclude any files which are located outside of
 the project root directory.

This "extra" generator may be specified as:

``CodeBlocks - MinGW Makefiles``
 Generate with :generator:`MinGW Makefiles`.

``CodeBlocks - NMake Makefiles``
 Generate with :generator:`NMake Makefiles`.

``CodeBlocks - NMake Makefiles JOM``
 .. versionadded:: 3.8
  Generate with :generator:`NMake Makefiles JOM`.

``CodeBlocks - Ninja``
 Generate with :generator:`Ninja`.

``CodeBlocks - Unix Makefiles``
 Generate with :generator:`Unix Makefiles`.



/P/🚀 generator/CodeLite.rst
==========================================


CodeLite
----------

.. deprecated:: 3.27

  Support for :ref:`Extra Generators` is deprecated and will be removed from
  a future version of CMake.  IDEs may use the :manual:`cmake-file-api(7)`
  to view CMake-generated project build trees.

Generates CodeLite project files.

Project files for CodeLite will be created in the top directory and
in every subdirectory which features a CMakeLists.txt file containing
a :command:`project` call.
The appropriate make program can build the
project through the default ``all`` target.  An ``install`` target
is also provided.

.. versionadded:: 3.7
 The :variable:`CMAKE_CODELITE_USE_TARGETS` variable may be set to ``ON``
 to change the default behavior from projects to targets as the basis
 for project files.

This "extra" generator may be specified as:

``CodeLite - MinGW Makefiles``
 Generate with :generator:`MinGW Makefiles`.

``CodeLite - NMake Makefiles``
 Generate with :generator:`NMake Makefiles`.

``CodeLite - Ninja``
 Generate with :generator:`Ninja`.

``CodeLite - Unix Makefiles``
 Generate with :generator:`Unix Makefiles`.



/P/🚀 generator/Eclipse CDT4.rst
==============================================


Eclipse CDT4
------------

.. deprecated:: 3.27

  Support for :ref:`Extra Generators` is deprecated and will be removed from
  a future version of CMake.  IDEs may use the :manual:`cmake-file-api(7)`
  to view CMake-generated project build trees.

Generates Eclipse CDT 4.0 project files.

Project files for Eclipse will be created in the top directory.  In
out of source builds, a linked resource to the top level source
directory will be created.  Additionally a hierarchy of makefiles is
generated into the build tree.  The appropriate make program can build
the project through the default ``all`` target.  An ``install`` target
is also provided.

This "extra" generator may be specified as:

``Eclipse CDT4 - MinGW Makefiles``
 Generate with :generator:`MinGW Makefiles`.

``Eclipse CDT4 - NMake Makefiles``
 Generate with :generator:`NMake Makefiles`.

``Eclipse CDT4 - Ninja``
 Generate with :generator:`Ninja`.

``Eclipse CDT4 - Unix Makefiles``
 Generate with :generator:`Unix Makefiles`.



/P/🚀 generator/Kate.rst
======================================


Kate
----

.. deprecated:: 3.27

  Support for :ref:`Extra Generators` is deprecated and will be removed from
  a future version of CMake.  IDEs may use the :manual:`cmake-file-api(7)`
  to view CMake-generated project build trees.

Generates Kate project files.

A project file for Kate will be created in the top directory in the top level
build directory.
To use it in Kate, the Project plugin must be enabled.
The project file is loaded in Kate by opening the
``ProjectName.kateproject`` file in the editor.
If the Kate Build-plugin is enabled, all targets generated by CMake are
available for building.

This "extra" generator may be specified as:

``Kate - MinGW Makefiles``
 Generate with :generator:`MinGW Makefiles`.

``Kate - NMake Makefiles``
 Generate with :generator:`NMake Makefiles`.

``Kate - Ninja``
 Generate with :generator:`Ninja`.

``Kate - Ninja Multi-Config``
 Generate with :generator:`Ninja Multi-Config`.

``Kate - Unix Makefiles``
 Generate with :generator:`Unix Makefiles`.



/P/🚀 generator/Sublime Text 2.rst
================================================


Sublime Text 2
--------------

.. deprecated:: 3.27

  Support for :ref:`Extra Generators` is deprecated and will be removed from
  a future version of CMake.  IDEs may use the :manual:`cmake-file-api(7)`
  to view CMake-generated project build trees.

Generates Sublime Text 2 project files.

Project files for Sublime Text 2 will be created in the top directory
and in every subdirectory which features a ``CMakeLists.txt`` file
containing a :command:`project` call.  Additionally ``Makefiles``
(or ``build.ninja`` files) are generated into the build tree.
The appropriate make program can build the project through the default ``all``
target.  An ``install`` target is also provided.

This "extra" generator may be specified as:

``Sublime Text 2 - MinGW Makefiles``
 Generate with :generator:`MinGW Makefiles`.

``Sublime Text 2 - NMake Makefiles``
 Generate with :generator:`NMake Makefiles`.

``Sublime Text 2 - Ninja``
 Generate with :generator:`Ninja`.

``Sublime Text 2 - Unix Makefiles``
 Generate with :generator:`Unix Makefiles`.



/P/🚀 manual/cmake-policies.7.rst
==============================================


.. cmake-manual-description: CMake Policies Reference

cmake-policies(7)
*****************

Introduction
============

Policies in CMake are used to preserve backward compatible behavior
across multiple releases.  When a new policy is introduced, newer CMake
versions will begin to warn about the backward compatible behavior.  It
is possible to disable the warning by explicitly requesting the OLD, or
backward compatible behavior using the :command:`cmake_policy` command.
It is also possible to request ``NEW``, or non-backward compatible behavior
for a policy, also avoiding the warning.  Each policy can also be set to
either ``NEW`` or ``OLD`` behavior explicitly on the command line with the
:variable:`CMAKE_POLICY_DEFAULT_CMP<NNNN>` variable.

A policy is a deprecation mechanism and not a reliable feature toggle.
A policy should almost never be set to ``OLD``, except to silence warnings
in an otherwise frozen or stable codebase, or temporarily as part of a
larger migration path. The ``OLD`` behavior of each policy is undesirable
and will be replaced with an error condition in a future release.

The :command:`cmake_minimum_required` command does more than report an
error if a too-old version of CMake is used to build a project.  It
also sets all policies introduced in that CMake version or earlier to
``NEW`` behavior.  To manage policies without increasing the minimum required
CMake version, the :command:`if(POLICY)` command may be used:

.. code-block:: cmake

  if(POLICY CMP0990)
    cmake_policy(SET CMP0990 NEW)
  endif()

This has the effect of using the ``NEW`` behavior with newer CMake releases which
users may be using and not issuing a compatibility warning.

The setting of a policy is confined in some cases to not propagate to the
parent scope.  For example, if the files read by the :command:`include` command
or the :command:`find_package` command contain a use of :command:`cmake_policy`,
that policy setting will not affect the caller by default.  Both commands accept
an optional ``NO_POLICY_SCOPE`` keyword to control this behavior.

The :variable:`CMAKE_MINIMUM_REQUIRED_VERSION` variable may also be used
to determine whether to report an error on use of deprecated macros or
functions.

Policies Introduced by CMake 3.29
=================================

.. toctree::
   :maxdepth: 1

   CMP0161: CPACK_PRODUCTBUILD_DOMAINS defaults to true. </policy/CMP0161>
   CMP0160: More read-only target properties now error when trying to set them. </policy/CMP0160>
   CMP0159: file(STRINGS) with REGEX updates CMAKE_MATCH_<n>. </policy/CMP0159>
   CMP0158: add_test() honors CMAKE_CROSSCOMPILING_EMULATOR only when cross-compiling. </policy/CMP0158>
   CMP0157: Swift compilation mode is selected by an abstraction. </policy/CMP0157>
   CMP0156: De-duplicate libraries on link lines based on linker capabilities. </policy/CMP0156>

Policies Introduced by CMake 3.28
=================================

.. toctree::
   :maxdepth: 1

   CMP0155: C++ sources in targets with at least C++20 are scanned for imports when supported. </policy/CMP0155>
   CMP0154: Generated files are private by default in targets using file sets. </policy/CMP0154>
   CMP0153: The exec_program command should not be called. </policy/CMP0153>
   CMP0152: file(REAL_PATH) resolves symlinks before collapsing ../ components.  </policy/CMP0152>

Policies Introduced by CMake 3.27
=================================

.. toctree::
   :maxdepth: 1

   CMP0151: AUTOMOC include directory is a system include directory by default. </policy/CMP0151>
   CMP0150: ExternalProject_Add and FetchContent_Declare treat relative git repository paths as being relative to parent project's remote. </policy/CMP0150>
   CMP0149: Visual Studio generators select latest Windows SDK by default. </policy/CMP0149>
   CMP0148: The FindPythonInterp and FindPythonLibs modules are removed. </policy/CMP0148>
   CMP0147: Visual Studio generators build custom commands in parallel. </policy/CMP0147>
   CMP0146: The FindCUDA module is removed. </policy/CMP0146>
   CMP0145: The Dart and FindDart modules are removed. </policy/CMP0145>
   CMP0144: find_package uses upper-case PACKAGENAME_ROOT variables. </policy/CMP0144>

Policies Introduced by CMake 3.26
=================================

.. toctree::
   :maxdepth: 1

   CMP0143: USE_FOLDERS global property is treated as ON by default. </policy/CMP0143>

Policies Introduced by CMake 3.25
=================================

.. toctree::
   :maxdepth: 1

   CMP0142: The Xcode generator does not append per-config suffixes to library search paths. </policy/CMP0142>
   CMP0141: MSVC debug information format flags are selected by an abstraction. </policy/CMP0141>
   CMP0140: The return() command checks its arguments. </policy/CMP0140>

Policies Introduced by CMake 3.24
=================================

.. toctree::
   :maxdepth: 1

   CMP0139: The if() command supports path comparisons using PATH_EQUAL operator. </policy/CMP0139>
   CMP0138: CheckIPOSupported uses flags from calling project. </policy/CMP0138>
   CMP0137: try_compile() passes platform variables in project mode. </policy/CMP0137>
   CMP0136: Watcom runtime library flags are selected by an abstraction. </policy/CMP0136>
   CMP0135: ExternalProject ignores timestamps in archives by default for the URL download method. </policy/CMP0135>
   CMP0134: Fallback to "HOST" Windows registry view when "TARGET" view is not usable. </policy/CMP0134>
   CMP0133: The CPack module disables SLA by default in the CPack DragNDrop Generator. </policy/CMP0133>
   CMP0132: Do not set compiler environment variables on first run. </policy/CMP0132>
   CMP0131: LINK_LIBRARIES supports the LINK_ONLY generator expression. </policy/CMP0131>
   CMP0130: while() diagnoses condition evaluation errors. </policy/CMP0130>

Policies Introduced by CMake 3.23
=================================

.. toctree::
   :maxdepth: 1

   CMP0129: Compiler id for MCST LCC compilers is now LCC, not GNU. </policy/CMP0129>

Policies Introduced by CMake 3.22
=================================

.. toctree::
   :maxdepth: 1

   CMP0128: Selection of language standard and extension flags improved. </policy/CMP0128>
   CMP0127: cmake_dependent_option() supports full Condition Syntax. </policy/CMP0127>

Policies Introduced by CMake 3.21
=================================

.. toctree::
   :maxdepth: 1

   CMP0126: set(CACHE) does not remove a normal variable of the same name. </policy/CMP0126>
   CMP0125: find_(path|file|library|program) have consistent behavior for cache variables. </policy/CMP0125>
   CMP0124: foreach() loop variables are only available in the loop scope. </policy/CMP0124>
   CMP0123: ARMClang cpu/arch compile and link flags must be set explicitly. </policy/CMP0123>
   CMP0122: UseSWIG use standard library name conventions for csharp language. </policy/CMP0122>
   CMP0121: The list command detects invalid indices. </policy/CMP0121>

Policies Introduced by CMake 3.20
=================================

.. toctree::
   :maxdepth: 1

   CMP0120: The WriteCompilerDetectionHeader module is removed. </policy/CMP0120>
   CMP0119: LANGUAGE source file property explicitly compiles as language. </policy/CMP0119>
   CMP0118: The GENERATED source file property is now visible in all directories. </policy/CMP0118>
   CMP0117: MSVC RTTI flag /GR is not added to CMAKE_CXX_FLAGS by default. </policy/CMP0117>
   CMP0116: Ninja generators transform DEPFILEs from add_custom_command(). </policy/CMP0116>
   CMP0115: Source file extensions must be explicit. </policy/CMP0115>

Policies Introduced by CMake 3.19
=================================

.. toctree::
   :maxdepth: 1

   CMP0114: ExternalProject step targets fully adopt their steps. </policy/CMP0114>
   CMP0113: Makefile generators do not repeat custom commands from target dependencies. </policy/CMP0113>
   CMP0112: Target file component generator expressions do not add target dependencies. </policy/CMP0112>
   CMP0111: An imported target missing its location property fails during generation. </policy/CMP0111>
   CMP0110: add_test() supports arbitrary characters in test names. </policy/CMP0110>
   CMP0109: find_program() requires permission to execute but not to read. </policy/CMP0109>

Policies Introduced by CMake 3.18
=================================

.. toctree::
   :maxdepth: 1

   CMP0108: A target cannot link to itself through an alias. </policy/CMP0108>
   CMP0107: An ALIAS target cannot overwrite another target. </policy/CMP0107>
   CMP0106: The Documentation module is removed. </policy/CMP0106>
   CMP0105: Device link step uses the link options. </policy/CMP0105>
   CMP0104: CMAKE_CUDA_ARCHITECTURES now detected for NVCC, empty CUDA_ARCHITECTURES not allowed. </policy/CMP0104>
   CMP0103: Multiple export() with same FILE without APPEND is not allowed. </policy/CMP0103>

Policies Introduced by CMake 3.17
=================================

.. toctree::
   :maxdepth: 1

   CMP0102: mark_as_advanced() does nothing if a cache entry does not exist. </policy/CMP0102>
   CMP0101: target_compile_options honors BEFORE keyword in all scopes. </policy/CMP0101>
   CMP0100: Let AUTOMOC and AUTOUIC process .hh header files. </policy/CMP0100>
   CMP0099: Link properties are transitive over private dependency on static libraries. </policy/CMP0099>
   CMP0098: FindFLEX runs flex in CMAKE_CURRENT_BINARY_DIR when executing. </policy/CMP0098>

Policies Introduced by CMake 3.16
=================================

.. toctree::
   :maxdepth: 1

   CMP0097: ExternalProject_Add with GIT_SUBMODULES "" initializes no submodules. </policy/CMP0097>
   CMP0096: project() preserves leading zeros in version components. </policy/CMP0096>
   CMP0095: RPATH entries are properly escaped in the intermediary CMake install script. </policy/CMP0095>

Policies Introduced by CMake 3.15
=================================

.. toctree::
   :maxdepth: 1

   CMP0094: FindPython3, FindPython2 and FindPython use LOCATION for lookup strategy. </policy/CMP0094>
   CMP0093: FindBoost reports Boost_VERSION in x.y.z format. </policy/CMP0093>
   CMP0092: MSVC warning flags are not in CMAKE_{C,CXX}_FLAGS by default. </policy/CMP0092>
   CMP0091: MSVC runtime library flags are selected by an abstraction. </policy/CMP0091>
   CMP0090: export(PACKAGE) does not populate package registry by default. </policy/CMP0090>
   CMP0089: Compiler id for IBM Clang-based XL compilers is now XLClang. </policy/CMP0089>

Policies Introduced by CMake 3.14
=================================

.. toctree::
   :maxdepth: 1

   CMP0088: FindBISON runs bison in CMAKE_CURRENT_BINARY_DIR when executing. </policy/CMP0088>
   CMP0087: install(SCRIPT | CODE) supports generator expressions. </policy/CMP0087>
   CMP0086: UseSWIG honors SWIG_MODULE_NAME via -module flag. </policy/CMP0086>
   CMP0085: IN_LIST generator expression handles empty list items. </policy/CMP0085>
   CMP0084: The FindQt module does not exist for find_package(). </policy/CMP0084>
   CMP0083: Add PIE options when linking executable. </policy/CMP0083>
   CMP0082: Install rules from add_subdirectory() are interleaved with those in caller. </policy/CMP0082>


Policies Introduced by CMake 3.13
=================================

.. toctree::
   :maxdepth: 1

   CMP0081: Relative paths not allowed in LINK_DIRECTORIES target property. </policy/CMP0081>
   CMP0080: BundleUtilities cannot be included at configure time. </policy/CMP0080>
   CMP0079: target_link_libraries allows use with targets in other directories. </policy/CMP0079>
   CMP0078: UseSWIG generates standard target names. </policy/CMP0078>
   CMP0077: option() honors normal variables. </policy/CMP0077>
   CMP0076: target_sources() command converts relative paths to absolute. </policy/CMP0076>

Policies Introduced by CMake 3.12
=================================

.. toctree::
   :maxdepth: 1

   CMP0075: Include file check macros honor CMAKE_REQUIRED_LIBRARIES. </policy/CMP0075>
   CMP0074: find_package uses PackageName_ROOT variables. </policy/CMP0074>
   CMP0073: Do not produce legacy _LIB_DEPENDS cache entries. </policy/CMP0073>

Policies Introduced by CMake 3.11
=================================

.. toctree::
   :maxdepth: 1

   CMP0072: FindOpenGL prefers GLVND by default when available. </policy/CMP0072>

Policies Introduced by CMake 3.10
=================================

.. toctree::
   :maxdepth: 1

   CMP0071: Let AUTOMOC and AUTOUIC process GENERATED files. </policy/CMP0071>
   CMP0070: Define file(GENERATE) behavior for relative paths. </policy/CMP0070>

Policies Introduced by CMake 3.9
================================

.. toctree::
   :maxdepth: 1

   CMP0069: INTERPROCEDURAL_OPTIMIZATION is enforced when enabled. </policy/CMP0069>
   CMP0068: RPATH settings on macOS do not affect install_name. </policy/CMP0068>

Policies Introduced by CMake 3.8
================================

.. toctree::
   :maxdepth: 1

   CMP0067: Honor language standard in try_compile() source-file signature. </policy/CMP0067>

Policies Introduced by CMake 3.7
================================

.. toctree::
   :maxdepth: 1

   CMP0066: Honor per-config flags in try_compile() source-file signature. </policy/CMP0066>

Policies Introduced by CMake 3.4
================================

.. toctree::
   :maxdepth: 1

   CMP0065: Do not add flags to export symbols from executables without the ENABLE_EXPORTS target property. </policy/CMP0065>
   CMP0064: Support new TEST if() operator. </policy/CMP0064>

Policies Introduced by CMake 3.3
================================

.. toctree::
   :maxdepth: 1

   CMP0063: Honor visibility properties for all target types. </policy/CMP0063>
   CMP0062: Disallow install() of export() result. </policy/CMP0062>
   CMP0061: CTest does not by default tell make to ignore errors (-i). </policy/CMP0061>
   CMP0060: Link libraries by full path even in implicit directories. </policy/CMP0060>
   CMP0059: Do not treat DEFINITIONS as a built-in directory property. </policy/CMP0059>
   CMP0058: Ninja requires custom command byproducts to be explicit. </policy/CMP0058>
   CMP0057: Support new IN_LIST if() operator. </policy/CMP0057>

Policies Introduced by CMake 3.2
================================

.. toctree::
   :maxdepth: 1

   CMP0056: Honor link flags in try_compile() source-file signature. </policy/CMP0056>
   CMP0055: Strict checking for break() command. </policy/CMP0055>

Policies Introduced by CMake 3.1
================================

.. toctree::
   :maxdepth: 1

   CMP0054: Only interpret if() arguments as variables or keywords when unquoted. </policy/CMP0054>
   CMP0053: Simplify variable reference and escape sequence evaluation. </policy/CMP0053>
   CMP0052: Reject source and build dirs in installed INTERFACE_INCLUDE_DIRECTORIES. </policy/CMP0052>
   CMP0051: List TARGET_OBJECTS in SOURCES target property. </policy/CMP0051>

Policies Introduced by CMake 3.0
================================

.. toctree::
   :maxdepth: 1

   CMP0050: Disallow add_custom_command SOURCE signatures. </policy/CMP0050>
   CMP0049: Do not expand variables in target source entries. </policy/CMP0049>
   CMP0048: project() command manages VERSION variables. </policy/CMP0048>
   CMP0047: Use QCC compiler id for the qcc drivers on QNX. </policy/CMP0047>
   CMP0046: Error on non-existent dependency in add_dependencies. </policy/CMP0046>
   CMP0045: Error on non-existent target in get_target_property. </policy/CMP0045>
   CMP0044: Case sensitive Lang_COMPILER_ID generator expressions. </policy/CMP0044>
   CMP0043: Ignore COMPILE_DEFINITIONS_Config properties. </policy/CMP0043>
   CMP0042: MACOSX_RPATH is enabled by default. </policy/CMP0042>
   CMP0041: Error on relative include with generator expression. </policy/CMP0041>
   CMP0040: The target in the TARGET signature of add_custom_command() must exist. </policy/CMP0040>
   CMP0039: Utility targets may not have link dependencies. </policy/CMP0039>
   CMP0038: Targets may not link directly to themselves. </policy/CMP0038>
   CMP0037: Target names should not be reserved and should match a validity pattern. </policy/CMP0037>
   CMP0036: The build_name command should not be called. </policy/CMP0036>
   CMP0035: The variable_requires command should not be called. </policy/CMP0035>
   CMP0034: The utility_source command should not be called. </policy/CMP0034>
   CMP0033: The export_library_dependencies command should not be called. </policy/CMP0033>
   CMP0032: The output_required_files command should not be called. </policy/CMP0032>
   CMP0031: The load_command command should not be called. </policy/CMP0031>
   CMP0030: The use_mangled_mesa command should not be called. </policy/CMP0030>
   CMP0029: The subdir_depends command should not be called. </policy/CMP0029>
   CMP0028: Double colon in target name means ALIAS or IMPORTED target. </policy/CMP0028>
   CMP0027: Conditionally linked imported targets with missing include directories. </policy/CMP0027>
   CMP0026: Disallow use of the LOCATION target property. </policy/CMP0026>
   CMP0025: Compiler id for Apple Clang is now AppleClang. </policy/CMP0025>
   CMP0024: Disallow include export result. </policy/CMP0024>

Policies Introduced by CMake 2.8
================================

.. toctree::
   :maxdepth: 1

   CMP0023: Plain and keyword target_link_libraries signatures cannot be mixed. </policy/CMP0023>
   CMP0022: INTERFACE_LINK_LIBRARIES defines the link interface. </policy/CMP0022>
   CMP0021: Fatal error on relative paths in INCLUDE_DIRECTORIES target property. </policy/CMP0021>
   CMP0020: Automatically link Qt executables to qtmain target on Windows. </policy/CMP0020>
   CMP0019: Do not re-expand variables in include and link information. </policy/CMP0019>
   CMP0018: Ignore CMAKE_SHARED_LIBRARY_Lang_FLAGS variable. </policy/CMP0018>
   CMP0017: Prefer files from the CMake module directory when including from there. </policy/CMP0017>
   CMP0016: target_link_libraries() reports error if its only argument is not a target. </policy/CMP0016>
   CMP0015: link_directories() treats paths relative to the source dir. </policy/CMP0015>
   CMP0014: Input directories must have CMakeLists.txt. </policy/CMP0014>
   CMP0013: Duplicate binary directories are not allowed. </policy/CMP0013>
   CMP0012: if() recognizes numbers and boolean constants. </policy/CMP0012>

Policies Introduced by CMake 2.6
================================

.. toctree::
   :maxdepth: 1

   CMP0011: Included scripts do automatic cmake_policy PUSH and POP. </policy/CMP0011>
   CMP0010: Bad variable reference syntax is an error. </policy/CMP0010>
   CMP0009: FILE GLOB_RECURSE calls should not follow symlinks by default. </policy/CMP0009>
   CMP0008: Libraries linked by full-path must have a valid library file name. </policy/CMP0008>
   CMP0007: list command no longer ignores empty elements. </policy/CMP0007>
   CMP0006: Installing MACOSX_BUNDLE targets requires a BUNDLE DESTINATION. </policy/CMP0006>
   CMP0005: Preprocessor definition values are now escaped automatically. </policy/CMP0005>
   CMP0004: Libraries linked may not have leading or trailing whitespace. </policy/CMP0004>
   CMP0003: Libraries linked via full path no longer produce linker search paths. </policy/CMP0003>
   CMP0002: Logical target names must be globally unique. </policy/CMP0002>
   CMP0001: CMAKE_BACKWARDS_COMPATIBILITY should no longer be used. </policy/CMP0001>
   CMP0000: A minimum required CMake version must be specified. </policy/CMP0000>



/P/🚀 manual/cmake-properties.7.rst
================================================


.. cmake-manual-description: CMake Properties Reference

cmake-properties(7)
*******************

.. _`Global Properties`:

Properties of Global Scope
==========================

.. toctree::
   :maxdepth: 1

    Help/prop_gbl/ALLOW_DUPLICATE_CUSTOM_TARGETS
    Help/prop_gbl/AUTOGEN_SOURCE_GROUP
    Help/prop_gbl/AUTOGEN_TARGETS_FOLDER
    Help/prop_gbl/AUTOMOC_SOURCE_GROUP
    Help/prop_gbl/AUTOMOC_TARGETS_FOLDER
    Help/prop_gbl/AUTORCC_SOURCE_GROUP
    Help/prop_gbl/AUTOUIC_SOURCE_GROUP
    Help/prop_gbl/CMAKE_C_KNOWN_FEATURES
    Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES
    Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES
    Help/prop_gbl/CMAKE_ROLE
    Help/prop_gbl/DEBUG_CONFIGURATIONS
    Help/prop_gbl/DISABLED_FEATURES
    Help/prop_gbl/ECLIPSE_EXTRA_CPROJECT_CONTENTS
    Help/prop_gbl/ECLIPSE_EXTRA_NATURES
    Help/prop_gbl/ENABLED_FEATURES
    Help/prop_gbl/ENABLED_LANGUAGES
    Help/prop_gbl/FIND_LIBRARY_USE_LIB32_PATHS
    Help/prop_gbl/FIND_LIBRARY_USE_LIB64_PATHS
    Help/prop_gbl/FIND_LIBRARY_USE_LIBX32_PATHS
    Help/prop_gbl/FIND_LIBRARY_USE_OPENBSD_VERSIONING
    Help/prop_gbl/GENERATOR_IS_MULTI_CONFIG
    Help/prop_gbl/GLOBAL_DEPENDS_DEBUG_MODE
    Help/prop_gbl/GLOBAL_DEPENDS_NO_CYCLES
    Help/prop_gbl/IN_TRY_COMPILE
    Help/prop_gbl/JOB_POOLS
    Help/prop_gbl/PACKAGES_FOUND
    Help/prop_gbl/PACKAGES_NOT_FOUND
    Help/prop_gbl/PREDEFINED_TARGETS_FOLDER
    Help/prop_gbl/REPORT_UNDEFINED_PROPERTIES
    Help/prop_gbl/RULE_LAUNCH_COMPILE
    Help/prop_gbl/RULE_LAUNCH_CUSTOM
    Help/prop_gbl/RULE_LAUNCH_LINK
    Help/prop_gbl/RULE_MESSAGES
    Help/prop_gbl/TARGET_ARCHIVES_MAY_BE_SHARED_LIBS
    Help/prop_gbl/TARGET_MESSAGES
    Help/prop_gbl/TARGET_SUPPORTS_SHARED_LIBS
    Help/prop_gbl/USE_FOLDERS
    Help/prop_gbl/XCODE_EMIT_EFFECTIVE_PLATFORM_NAME

.. _`Directory Properties`:

Properties on Directories
=========================

.. toctree::
   :maxdepth: 1

    prop_dir/ADDITIONAL_CLEAN_FILES
    prop_dir/BINARY_DIR
    prop_dir/BUILDSYSTEM_TARGETS
    prop_dir/CACHE_VARIABLES
    prop_dir/CLEAN_NO_CUSTOM
    prop_dir/CMAKE_CONFIGURE_DEPENDS
    prop_dir/COMPILE_DEFINITIONS
    prop_dir/COMPILE_OPTIONS
    prop_dir/DEFINITIONS
    prop_dir/EXCLUDE_FROM_ALL
    prop_dir/IMPLICIT_DEPENDS_INCLUDE_TRANSFORM
    prop_dir/IMPORTED_TARGETS
    prop_dir/INCLUDE_DIRECTORIES
    prop_dir/INCLUDE_REGULAR_EXPRESSION
    prop_dir/LABELS
    prop_dir/LINK_DIRECTORIES
    prop_dir/LINK_OPTIONS
    prop_dir/LISTFILE_STACK
    prop_dir/MACROS
    prop_dir/PARENT_DIRECTORY
    prop_dir/RULE_LAUNCH_COMPILE
    prop_dir/RULE_LAUNCH_CUSTOM
    prop_dir/RULE_LAUNCH_LINK
    prop_dir/SOURCE_DIR
    prop_dir/SUBDIRECTORIES
    prop_dir/SYSTEM
    prop_dir/TESTS
    prop_dir/TEST_INCLUDE_FILES
    prop_dir/VARIABLES
    prop_dir/VS_GLOBAL_SECTION_POST_section
    prop_dir/VS_GLOBAL_SECTION_PRE_section
    prop_dir/VS_STARTUP_PROJECT

.. _`Target Properties`:

Properties on Targets
=====================

.. toctree::
   :maxdepth: 1

    prop_tgt/ADDITIONAL_CLEAN_FILES
    prop_tgt/AIX_EXPORT_ALL_SYMBOLS
    prop_tgt/ALIAS_GLOBAL
    prop_tgt/ALIASED_TARGET
    prop_tgt/ANDROID_ANT_ADDITIONAL_OPTIONS
    prop_tgt/ANDROID_API
    prop_tgt/ANDROID_API_MIN
    prop_tgt/ANDROID_ARCH
    prop_tgt/ANDROID_ASSETS_DIRECTORIES
    prop_tgt/ANDROID_GUI
    prop_tgt/ANDROID_JAR_DEPENDENCIES
    prop_tgt/ANDROID_JAR_DIRECTORIES
    prop_tgt/ANDROID_JAVA_SOURCE_DIR
    prop_tgt/ANDROID_NATIVE_LIB_DEPENDENCIES
    prop_tgt/ANDROID_NATIVE_LIB_DIRECTORIES
    prop_tgt/ANDROID_PROCESS_MAX
    prop_tgt/ANDROID_PROGUARD
    prop_tgt/ANDROID_PROGUARD_CONFIG_PATH
    prop_tgt/ANDROID_SECURE_PROPS_PATH
    prop_tgt/ANDROID_SKIP_ANT_STEP
    prop_tgt/ANDROID_STL_TYPE
    prop_tgt/ARCHIVE_OUTPUT_DIRECTORY
    prop_tgt/ARCHIVE_OUTPUT_DIRECTORY_CONFIG
    prop_tgt/ARCHIVE_OUTPUT_NAME
    prop_tgt/ARCHIVE_OUTPUT_NAME_CONFIG
    prop_tgt/AUTOGEN_BETTER_GRAPH_MULTI_CONFIG
    prop_tgt/AUTOGEN_BUILD_DIR
    prop_tgt/AUTOGEN_COMMAND_LINE_LENGTH_MAX
    prop_tgt/AUTOGEN_ORIGIN_DEPENDS
    prop_tgt/AUTOGEN_PARALLEL
    prop_tgt/AUTOGEN_TARGET_DEPENDS
    prop_tgt/AUTOGEN_USE_SYSTEM_INCLUDE
    prop_tgt/AUTOMOC
    prop_tgt/AUTOMOC_COMPILER_PREDEFINES
    prop_tgt/AUTOMOC_DEPEND_FILTERS
    prop_tgt/AUTOMOC_EXECUTABLE
    prop_tgt/AUTOMOC_MACRO_NAMES
    prop_tgt/AUTOMOC_MOC_OPTIONS
    prop_tgt/AUTOMOC_PATH_PREFIX
    prop_tgt/AUTORCC
    prop_tgt/AUTORCC_EXECUTABLE
    prop_tgt/AUTORCC_OPTIONS
    prop_tgt/AUTOUIC
    prop_tgt/AUTOUIC_EXECUTABLE
    prop_tgt/AUTOUIC_OPTIONS
    prop_tgt/AUTOUIC_SEARCH_PATHS
    prop_tgt/BINARY_DIR
    prop_tgt/BUILD_RPATH
    prop_tgt/BUILD_RPATH_USE_ORIGIN
    prop_tgt/BUILD_WITH_INSTALL_NAME_DIR
    prop_tgt/BUILD_WITH_INSTALL_RPATH
    prop_tgt/BUNDLE
    prop_tgt/BUNDLE_EXTENSION
    prop_tgt/C_EXTENSIONS
    prop_tgt/C_STANDARD
    prop_tgt/C_STANDARD_REQUIRED
    prop_tgt/COMMON_LANGUAGE_RUNTIME
    prop_tgt/COMPATIBLE_INTERFACE_BOOL
    prop_tgt/COMPATIBLE_INTERFACE_NUMBER_MAX
    prop_tgt/COMPATIBLE_INTERFACE_NUMBER_MIN
    prop_tgt/COMPATIBLE_INTERFACE_STRING
    prop_tgt/COMPILE_DEFINITIONS
    prop_tgt/COMPILE_FEATURES
    prop_tgt/COMPILE_FLAGS
    prop_tgt/COMPILE_OPTIONS
    prop_tgt/COMPILE_PDB_NAME
    prop_tgt/COMPILE_PDB_NAME_CONFIG
    prop_tgt/COMPILE_PDB_OUTPUT_DIRECTORY
    prop_tgt/COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG
    prop_tgt/COMPILE_WARNING_AS_ERROR
    prop_tgt/CONFIG_OUTPUT_NAME
    prop_tgt/CONFIG_POSTFIX
    prop_tgt/CROSSCOMPILING_EMULATOR
    prop_tgt/CUDA_ARCHITECTURES
    prop_tgt/CUDA_CUBIN_COMPILATION
    prop_tgt/CUDA_EXTENSIONS
    prop_tgt/CUDA_FATBIN_COMPILATION
    prop_tgt/CUDA_OPTIX_COMPILATION
    prop_tgt/CUDA_PTX_COMPILATION
    prop_tgt/CUDA_RESOLVE_DEVICE_SYMBOLS
    prop_tgt/CUDA_RUNTIME_LIBRARY
    prop_tgt/CUDA_SEPARABLE_COMPILATION
    prop_tgt/CUDA_STANDARD
    prop_tgt/CUDA_STANDARD_REQUIRED
    prop_tgt/CXX_EXTENSIONS
    prop_tgt/CXX_MODULE_DIRS
    prop_tgt/CXX_MODULE_DIRS_NAME
    prop_tgt/CXX_MODULE_SET
    prop_tgt/CXX_MODULE_SET_NAME
    prop_tgt/CXX_MODULE_SETS
    prop_tgt/CXX_SCAN_FOR_MODULES
    prop_tgt/CXX_STANDARD
    prop_tgt/CXX_STANDARD_REQUIRED
    prop_tgt/DEBUG_POSTFIX
    prop_tgt/DEFINE_SYMBOL
    prop_tgt/DEPLOYMENT_ADDITIONAL_FILES
    prop_tgt/DEPLOYMENT_REMOTE_DIRECTORY
    prop_tgt/DEPRECATION
    prop_tgt/DISABLE_PRECOMPILE_HEADERS
    prop_tgt/DLL_NAME_WITH_SOVERSION
    prop_tgt/DOTNET_SDK
    prop_tgt/DOTNET_TARGET_FRAMEWORK
    prop_tgt/DOTNET_TARGET_FRAMEWORK_VERSION
    prop_tgt/EchoString
    prop_tgt/ENABLE_EXPORTS
    prop_tgt/EXCLUDE_FROM_ALL
    prop_tgt/EXCLUDE_FROM_DEFAULT_BUILD
    prop_tgt/EXCLUDE_FROM_DEFAULT_BUILD_CONFIG
    prop_tgt/EXPORT_COMPILE_COMMANDS
    prop_tgt/EXPORT_FIND_PACKAGE_NAME
    prop_tgt/EXPORT_NAME
    prop_tgt/EXPORT_NO_SYSTEM
    prop_tgt/EXPORT_PROPERTIES
    prop_tgt/FOLDER
    prop_tgt/Fortran_BUILDING_INSTRINSIC_MODULES
    prop_tgt/Fortran_FORMAT
    prop_tgt/Fortran_MODULE_DIRECTORY
    prop_tgt/Fortran_PREPROCESS
    prop_tgt/FRAMEWORK
    prop_tgt/FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG
    prop_tgt/FRAMEWORK_VERSION
    prop_tgt/GENERATOR_FILE_NAME
    prop_tgt/GHS_INTEGRITY_APP
    prop_tgt/GHS_NO_SOURCE_GROUP_FILE
    prop_tgt/GNUtoMS
    prop_tgt/HAS_CXX
    prop_tgt/HEADER_DIRS
    prop_tgt/HEADER_DIRS_NAME
    prop_tgt/HEADER_SET
    prop_tgt/HEADER_SET_NAME
    prop_tgt/HEADER_SETS
    prop_tgt/HIP_ARCHITECTURES
    prop_tgt/HIP_EXTENSIONS
    prop_tgt/HIP_STANDARD
    prop_tgt/HIP_STANDARD_REQUIRED
    prop_tgt/IMPLICIT_DEPENDS_INCLUDE_TRANSFORM
    prop_tgt/IMPORTED
    prop_tgt/IMPORTED_COMMON_LANGUAGE_RUNTIME
    prop_tgt/IMPORTED_CONFIGURATIONS
    prop_tgt/IMPORTED_CXX_MODULES_COMPILE_DEFINITIONS
    prop_tgt/IMPORTED_CXX_MODULES_COMPILE_FEATURES
    prop_tgt/IMPORTED_CXX_MODULES_COMPILE_OPTIONS
    prop_tgt/IMPORTED_CXX_MODULES_INCLUDE_DIRECTORIES
    prop_tgt/IMPORTED_CXX_MODULES_LINK_LIBRARIES
    prop_tgt/IMPORTED_GLOBAL
    prop_tgt/IMPORTED_IMPLIB
    prop_tgt/IMPORTED_IMPLIB_CONFIG
    prop_tgt/IMPORTED_LIBNAME
    prop_tgt/IMPORTED_LIBNAME_CONFIG
    prop_tgt/IMPORTED_LINK_DEPENDENT_LIBRARIES
    prop_tgt/IMPORTED_LINK_DEPENDENT_LIBRARIES_CONFIG
    prop_tgt/IMPORTED_LINK_INTERFACE_LANGUAGES
    prop_tgt/IMPORTED_LINK_INTERFACE_LANGUAGES_CONFIG
    prop_tgt/IMPORTED_LINK_INTERFACE_LIBRARIES
    prop_tgt/IMPORTED_LINK_INTERFACE_LIBRARIES_CONFIG
    prop_tgt/IMPORTED_LINK_INTERFACE_MULTIPLICITY
    prop_tgt/IMPORTED_LINK_INTERFACE_MULTIPLICITY_CONFIG
    prop_tgt/IMPORTED_LOCATION
    prop_tgt/IMPORTED_LOCATION_CONFIG
    prop_tgt/IMPORTED_NO_SONAME
    prop_tgt/IMPORTED_NO_SONAME_CONFIG
    prop_tgt/IMPORTED_OBJECTS
    prop_tgt/IMPORTED_OBJECTS_CONFIG
    prop_tgt/IMPORTED_SONAME
    prop_tgt/IMPORTED_SONAME_CONFIG
    prop_tgt/IMPORT_PREFIX
    prop_tgt/IMPORT_SUFFIX
    prop_tgt/INCLUDE_DIRECTORIES
    prop_tgt/INSTALL_NAME_DIR
    prop_tgt/INSTALL_REMOVE_ENVIRONMENT_RPATH
    prop_tgt/INSTALL_RPATH
    prop_tgt/INSTALL_RPATH_USE_LINK_PATH
    prop_tgt/INTERFACE_AUTOMOC_MACRO_NAMES
    prop_tgt/INTERFACE_AUTOUIC_OPTIONS
    prop_tgt/INTERFACE_COMPILE_DEFINITIONS
    prop_tgt/INTERFACE_COMPILE_FEATURES
    prop_tgt/INTERFACE_COMPILE_OPTIONS
    prop_tgt/INTERFACE_CXX_MODULE_SETS
    prop_tgt/INTERFACE_HEADER_SETS
    prop_tgt/INTERFACE_HEADER_SETS_TO_VERIFY
    prop_tgt/INTERFACE_INCLUDE_DIRECTORIES
    prop_tgt/INTERFACE_LINK_DEPENDS
    prop_tgt/INTERFACE_LINK_DIRECTORIES
    prop_tgt/INTERFACE_LINK_LIBRARIES
    prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT
    prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE
    prop_tgt/INTERFACE_LINK_OPTIONS
    prop_tgt/INTERFACE_POSITION_INDEPENDENT_CODE
    prop_tgt/INTERFACE_PRECOMPILE_HEADERS
    prop_tgt/INTERFACE_SOURCES
    prop_tgt/INTERFACE_SYSTEM_INCLUDE_DIRECTORIES
    prop_tgt/INTERPROCEDURAL_OPTIMIZATION
    prop_tgt/INTERPROCEDURAL_OPTIMIZATION_CONFIG
    prop_tgt/ISPC_HEADER_DIRECTORY
    prop_tgt/ISPC_HEADER_SUFFIX
    prop_tgt/ISPC_INSTRUCTION_SETS
    prop_tgt/JOB_POOL_COMPILE
    prop_tgt/JOB_POOL_LINK
    prop_tgt/JOB_POOL_PRECOMPILE_HEADER
    prop_tgt/LABELS
    prop_tgt/LANG_CLANG_TIDY
    prop_tgt/LANG_CLANG_TIDY_EXPORT_FIXES_DIR
    prop_tgt/LANG_COMPILER_LAUNCHER
    prop_tgt/LANG_CPPCHECK
    prop_tgt/LANG_CPPLINT
    prop_tgt/LANG_EXTENSIONS
    prop_tgt/LANG_INCLUDE_WHAT_YOU_USE
    prop_tgt/LANG_LINKER_LAUNCHER
    prop_tgt/LANG_STANDARD
    prop_tgt/LANG_STANDARD_REQUIRED
    prop_tgt/LANG_VISIBILITY_PRESET
    prop_tgt/LIBRARY_OUTPUT_DIRECTORY
    prop_tgt/LIBRARY_OUTPUT_DIRECTORY_CONFIG
    prop_tgt/LIBRARY_OUTPUT_NAME
    prop_tgt/LIBRARY_OUTPUT_NAME_CONFIG
    prop_tgt/LINK_DEPENDS
    prop_tgt/LINK_DEPENDS_NO_SHARED
    prop_tgt/LINK_DIRECTORIES
    prop_tgt/LINK_FLAGS
    prop_tgt/LINK_FLAGS_CONFIG
    prop_tgt/LINK_INTERFACE_LIBRARIES
    prop_tgt/LINK_INTERFACE_LIBRARIES_CONFIG
    prop_tgt/LINK_INTERFACE_MULTIPLICITY
    prop_tgt/LINK_INTERFACE_MULTIPLICITY_CONFIG
    prop_tgt/LINK_LIBRARIES
    prop_tgt/LINK_LIBRARIES_ONLY_TARGETS
    prop_tgt/LINK_LIBRARY_OVERRIDE
    prop_tgt/LINK_LIBRARY_OVERRIDE_LIBRARY
    prop_tgt/LINK_OPTIONS
    prop_tgt/LINK_SEARCH_END_STATIC
    prop_tgt/LINK_SEARCH_START_STATIC
    prop_tgt/LINK_WHAT_YOU_USE
    prop_tgt/LINKER_LANGUAGE
    prop_tgt/LINKER_TYPE
    prop_tgt/LOCATION
    prop_tgt/LOCATION_CONFIG
    prop_tgt/MACHO_COMPATIBILITY_VERSION
    prop_tgt/MACHO_CURRENT_VERSION
    prop_tgt/MACOSX_BUNDLE
    prop_tgt/MACOSX_BUNDLE_INFO_PLIST
    prop_tgt/MACOSX_FRAMEWORK_INFO_PLIST
    prop_tgt/MACOSX_RPATH
    prop_tgt/MANUALLY_ADDED_DEPENDENCIES
    prop_tgt/MAP_IMPORTED_CONFIG_CONFIG
    prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT
    prop_tgt/MSVC_RUNTIME_LIBRARY
    prop_tgt/NAME
    prop_tgt/NO_SONAME
    prop_tgt/NO_SYSTEM_FROM_IMPORTED
    prop_tgt/OBJC_EXTENSIONS
    prop_tgt/OBJC_STANDARD
    prop_tgt/OBJC_STANDARD_REQUIRED
    prop_tgt/OBJCXX_EXTENSIONS
    prop_tgt/OBJCXX_STANDARD
    prop_tgt/OBJCXX_STANDARD_REQUIRED
    prop_tgt/OPTIMIZE_DEPENDENCIES
    prop_tgt/OSX_ARCHITECTURES
    prop_tgt/OSX_ARCHITECTURES_CONFIG
    prop_tgt/OUTPUT_NAME
    prop_tgt/OUTPUT_NAME_CONFIG
    prop_tgt/PCH_INSTANTIATE_TEMPLATES
    prop_tgt/PCH_WARN_INVALID
    prop_tgt/PDB_NAME
    prop_tgt/PDB_NAME_CONFIG
    prop_tgt/PDB_OUTPUT_DIRECTORY
    prop_tgt/PDB_OUTPUT_DIRECTORY_CONFIG
    prop_tgt/POSITION_INDEPENDENT_CODE
    prop_tgt/PRECOMPILE_HEADERS
    prop_tgt/PRECOMPILE_HEADERS_REUSE_FROM
    prop_tgt/PREFIX
    prop_tgt/PRIVATE_HEADER
    prop_tgt/PROJECT_LABEL
    prop_tgt/PUBLIC_HEADER
    prop_tgt/RESOURCE
    prop_tgt/RULE_LAUNCH_COMPILE
    prop_tgt/RULE_LAUNCH_CUSTOM
    prop_tgt/RULE_LAUNCH_LINK
    prop_tgt/RUNTIME_OUTPUT_DIRECTORY
    prop_tgt/RUNTIME_OUTPUT_DIRECTORY_CONFIG
    prop_tgt/RUNTIME_OUTPUT_NAME
    prop_tgt/RUNTIME_OUTPUT_NAME_CONFIG
    prop_tgt/SKIP_BUILD_RPATH
    prop_tgt/SOURCE_DIR
    prop_tgt/SOURCES
    prop_tgt/SOVERSION
    prop_tgt/STATIC_LIBRARY_FLAGS
    prop_tgt/STATIC_LIBRARY_FLAGS_CONFIG
    prop_tgt/STATIC_LIBRARY_OPTIONS
    prop_tgt/SUFFIX
    prop_tgt/Swift_COMPILATION_MODE
    prop_tgt/Swift_DEPENDENCIES_FILE
    prop_tgt/Swift_LANGUAGE_VERSION
    prop_tgt/Swift_MODULE_DIRECTORY
    prop_tgt/Swift_MODULE_NAME
    prop_tgt/SYSTEM
    prop_tgt/TEST_LAUNCHER
    prop_tgt/TYPE
    prop_tgt/UNITY_BUILD
    prop_tgt/UNITY_BUILD_BATCH_SIZE
    prop_tgt/UNITY_BUILD_CODE_AFTER_INCLUDE
    prop_tgt/UNITY_BUILD_CODE_BEFORE_INCLUDE
    prop_tgt/UNITY_BUILD_MODE
    prop_tgt/UNITY_BUILD_UNIQUE_ID
    prop_tgt/VERIFY_INTERFACE_HEADER_SETS
    prop_tgt/VERSION
    prop_tgt/VISIBILITY_INLINES_HIDDEN
    prop_tgt/VS_CONFIGURATION_TYPE
    prop_tgt/VS_DEBUGGER_COMMAND
    prop_tgt/VS_DEBUGGER_COMMAND_ARGUMENTS
    prop_tgt/VS_DEBUGGER_ENVIRONMENT
    prop_tgt/VS_DEBUGGER_WORKING_DIRECTORY
    prop_tgt/VS_DESKTOP_EXTENSIONS_VERSION
    prop_tgt/VS_DOTNET_DOCUMENTATION_FILE
    prop_tgt/VS_DOTNET_REFERENCE_refname
    prop_tgt/VS_DOTNET_REFERENCEPROP_refname_TAG_tagname
    prop_tgt/VS_DOTNET_REFERENCES
    prop_tgt/VS_DOTNET_REFERENCES_COPY_LOCAL
    prop_tgt/VS_DOTNET_STARTUP_OBJECT
    prop_tgt/VS_DOTNET_TARGET_FRAMEWORK_VERSION
    prop_tgt/VS_DPI_AWARE
    prop_tgt/VS_GLOBAL_KEYWORD
    prop_tgt/VS_GLOBAL_PROJECT_TYPES
    prop_tgt/VS_GLOBAL_ROOTNAMESPACE
    prop_tgt/VS_GLOBAL_variable
    prop_tgt/VS_IOT_EXTENSIONS_VERSION
    prop_tgt/VS_IOT_STARTUP_TASK
    prop_tgt/VS_JUST_MY_CODE_DEBUGGING
    prop_tgt/VS_KEYWORD
    prop_tgt/VS_MOBILE_EXTENSIONS_VERSION
    prop_tgt/VS_NO_COMPILE_BATCHING
    prop_tgt/VS_NO_SOLUTION_DEPLOY
    prop_tgt/VS_PACKAGE_REFERENCES
    prop_tgt/VS_PLATFORM_TOOLSET
    prop_tgt/VS_PROJECT_IMPORT
    prop_tgt/VS_SCC_AUXPATH
    prop_tgt/VS_SCC_LOCALPATH
    prop_tgt/VS_SCC_PROJECTNAME
    prop_tgt/VS_SCC_PROVIDER
    prop_tgt/VS_SDK_REFERENCES
    prop_tgt/VS_SOLUTION_DEPLOY
    prop_tgt/VS_SOURCE_SETTINGS_tool
    prop_tgt/VS_USER_PROPS
    prop_tgt/VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION
    prop_tgt/VS_WINRT_COMPONENT
    prop_tgt/VS_WINRT_REFERENCES
    prop_tgt/WATCOM_RUNTIME_LIBRARY
    prop_tgt/WIN32_EXECUTABLE
    prop_tgt/WINDOWS_EXPORT_ALL_SYMBOLS
    prop_tgt/XCODE_ATTRIBUTE_an-attribute
    prop_tgt/XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY
    prop_tgt/XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY
    prop_tgt/XCODE_EMBED_type
    prop_tgt/XCODE_EMBED_type_CODE_SIGN_ON_COPY
    prop_tgt/XCODE_EMBED_type_PATH
    prop_tgt/XCODE_EMBED_type_REMOVE_HEADERS_ON_COPY
    prop_tgt/XCODE_EXPLICIT_FILE_TYPE
    prop_tgt/XCODE_GENERATE_SCHEME
    prop_tgt/XCODE_LINK_BUILD_PHASE_MODE
    prop_tgt/XCODE_PRODUCT_TYPE
    prop_tgt/XCODE_SCHEME_ADDRESS_SANITIZER
    prop_tgt/XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN
    prop_tgt/XCODE_SCHEME_ARGUMENTS
    prop_tgt/XCODE_SCHEME_DEBUG_AS_ROOT
    prop_tgt/XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING
    prop_tgt/XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER
    prop_tgt/XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS
    prop_tgt/XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE
    prop_tgt/XCODE_SCHEME_ENABLE_GPU_API_VALIDATION
    prop_tgt/XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE
    prop_tgt/XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION
    prop_tgt/XCODE_SCHEME_ENVIRONMENT
    prop_tgt/XCODE_SCHEME_EXECUTABLE
    prop_tgt/XCODE_SCHEME_GUARD_MALLOC
    prop_tgt/XCODE_SCHEME_LAUNCH_CONFIGURATION
    prop_tgt/XCODE_SCHEME_LAUNCH_MODE
    prop_tgt/XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP
    prop_tgt/XCODE_SCHEME_MALLOC_GUARD_EDGES
    prop_tgt/XCODE_SCHEME_MALLOC_SCRIBBLE
    prop_tgt/XCODE_SCHEME_MALLOC_STACK
    prop_tgt/XCODE_SCHEME_THREAD_SANITIZER
    prop_tgt/XCODE_SCHEME_THREAD_SANITIZER_STOP
    prop_tgt/XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER
    prop_tgt/XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP
    prop_tgt/XCODE_SCHEME_WORKING_DIRECTORY
    prop_tgt/XCODE_SCHEME_ZOMBIE_OBJECTS
    prop_tgt/XCODE_XCCONFIG
    prop_tgt/XCTEST

.. _`Test Properties`:

Properties on Tests
===================

.. toctree::
   :maxdepth: 1

    Help/prop_test/ATTACHED_FILES
    Help/prop_test/ATTACHED_FILES_ON_FAIL
    Help/prop_test/COST
    Help/prop_test/DEPENDS
    Help/prop_test/DISABLED
    Help/prop_test/ENVIRONMENT
    Help/prop_test/ENVIRONMENT_MODIFICATION
    Help/prop_test/FAIL_REGULAR_EXPRESSION
    Help/prop_test/FIXTURES_CLEANUP
    Help/prop_test/FIXTURES_REQUIRED
    Help/prop_test/FIXTURES_SETUP
    Help/prop_test/GENERATED_RESOURCE_SPEC_FILE
    Help/prop_test/LABELS
    Help/prop_test/MEASUREMENT
    Help/prop_test/PASS_REGULAR_EXPRESSION
    Help/prop_test/PROCESSOR_AFFINITY
    Help/prop_test/PROCESSORS
    Help/prop_test/REQUIRED_FILES
    Help/prop_test/RESOURCE_GROUPS
    Help/prop_test/RESOURCE_LOCK
    Help/prop_test/RUN_SERIAL
    Help/prop_test/SKIP_REGULAR_EXPRESSION
    Help/prop_test/SKIP_RETURN_CODE
    Help/prop_test/TIMEOUT
    Help/prop_test/TIMEOUT_AFTER_MATCH
    Help/prop_test/TIMEOUT_SIGNAL_GRACE_PERIOD
    Help/prop_test/TIMEOUT_SIGNAL_NAME
    Help/prop_test/WILL_FAIL
    Help/prop_test/WORKING_DIRECTORY

.. _`Source File Properties`:

Properties on Source Files
==========================

.. toctree::
   :maxdepth: 1

    Help/prop_sf/ABSTRACT
    Help/prop_sf/AUTORCC_OPTIONS
    Help/prop_sf/AUTOUIC_OPTIONS
    Help/prop_sf/COMPILE_DEFINITIONS
    Help/prop_sf/COMPILE_FLAGS
    Help/prop_sf/COMPILE_OPTIONS
    Help/prop_sf/CXX_SCAN_FOR_MODULES
    Help/prop_sf/EXTERNAL_OBJECT
    Help/prop_sf/Fortran_FORMAT
    Help/prop_sf/Fortran_PREPROCESS
    Help/prop_sf/GENERATED
    Help/prop_sf/HEADER_FILE_ONLY
    Help/prop_sf/INCLUDE_DIRECTORIES
    Help/prop_sf/KEEP_EXTENSION
    Help/prop_sf/LABELS
    Help/prop_sf/LANGUAGE
    Help/prop_sf/LOCATION
    Help/prop_sf/MACOSX_PACKAGE_LOCATION
    Help/prop_sf/OBJECT_DEPENDS
    Help/prop_sf/OBJECT_OUTPUTS
    Help/prop_sf/SKIP_AUTOGEN
    Help/prop_sf/SKIP_AUTOMOC
    Help/prop_sf/SKIP_AUTORCC
    Help/prop_sf/SKIP_AUTOUIC
    Help/prop_sf/SKIP_LINTING
    Help/prop_sf/SKIP_PRECOMPILE_HEADERS
    Help/prop_sf/SKIP_UNITY_BUILD_INCLUSION
    Help/prop_sf/Swift_DEPENDENCIES_FILE
    Help/prop_sf/Swift_DIAGNOSTICS_FILE
    Help/prop_sf/SYMBOLIC
    Help/prop_sf/UNITY_GROUP
    Help/prop_sf/VS_COPY_TO_OUT_DIR
    Help/prop_sf/VS_CSHARP_tagname
    Help/prop_sf/VS_DEPLOYMENT_CONTENT
    Help/prop_sf/VS_DEPLOYMENT_LOCATION
    Help/prop_sf/VS_INCLUDE_IN_VSIX
    Help/prop_sf/VS_RESOURCE_GENERATOR
    Help/prop_sf/VS_SETTINGS
    Help/prop_sf/VS_SHADER_DISABLE_OPTIMIZATIONS
    Help/prop_sf/VS_SHADER_ENABLE_DEBUG
    Help/prop_sf/VS_SHADER_ENTRYPOINT
    Help/prop_sf/VS_SHADER_FLAGS
    Help/prop_sf/VS_SHADER_MODEL
    Help/prop_sf/VS_SHADER_OBJECT_FILE_NAME
    Help/prop_sf/VS_SHADER_OUTPUT_HEADER_FILE
    Help/prop_sf/VS_SHADER_TYPE
    Help/prop_sf/VS_SHADER_VARIABLE_NAME
    Help/prop_sf/VS_TOOL_OVERRIDE.rst
    Help/prop_sf/VS_XAML_TYPE
    Help/prop_sf/WRAP_EXCLUDE
    Help/prop_sf/XCODE_EXPLICIT_FILE_TYPE
    Help/prop_sf/XCODE_FILE_ATTRIBUTES
    Help/prop_sf/XCODE_LAST_KNOWN_FILE_TYPE

.. _`Cache Entry Properties`:

Properties on Cache Entries
===========================

.. toctree::
   :maxdepth: 1

    Help/prop_cache/ADVANCED
    Help/prop_cache/HELPSTRING
    Help/prop_cache/MODIFIED
    Help/prop_cache/STRINGS
    Help/prop_cache/TYPE
    Help/prop_cache/VALUE

.. _`Installed File Properties`:

Properties on Installed Files
=============================

.. toctree::
   :maxdepth: 1

    Help/prop_inst/CPACK_DESKTOP_SHORTCUTS.rst
    Help/prop_inst/CPACK_NEVER_OVERWRITE.rst
    Help/prop_inst/CPACK_PERMANENT.rst
    Help/prop_inst/CPACK_START_MENU_SHORTCUTS.rst
    Help/prop_inst/CPACK_STARTUP_SHORTCUTS.rst
    Help/prop_inst/CPACK_WIX_ACL.rst


Deprecated Properties on Directories
====================================

.. toctree::
   :maxdepth: 1

    prop_dir/ADDITIONAL_MAKE_CLEAN_FILES
    prop_dir/COMPILE_DEFINITIONS_CONFIG
    prop_dir/INTERPROCEDURAL_OPTIMIZATION
    prop_dir/INTERPROCEDURAL_OPTIMIZATION_CONFIG
    prop_dir/TEST_INCLUDE_FILE


Deprecated Properties on Targets
================================

.. toctree::
   :maxdepth: 1

    prop_tgt/COMPILE_DEFINITIONS_CONFIG
    prop_tgt/IMPORTED_NO_SYSTEM
    prop_tgt/IOS_INSTALL_COMBINED
    prop_tgt/POST_INSTALL_SCRIPT
    prop_tgt/PRE_INSTALL_SCRIPT
    prop_tgt/VS_WINRT_EXTENSIONS


Deprecated Properties on Source Files
=====================================

.. toctree::
   :maxdepth: 1

    Help/prop_sf/COMPILE_DEFINITIONS_CONFIG



/P/🚀 prop_gbl/ALLOW_DUPLICATE_CUSTOM_TARGETS.rst
===============================================================


ALLOW_DUPLICATE_CUSTOM_TARGETS
------------------------------

Allow duplicate custom targets to be created.

Normally CMake requires that all targets built in a project have
globally unique logical names (see policy :policy:`CMP0002`).
This is necessary to generate meaningful project file names in
:generator:`Xcode` and :ref:`Visual Studio Generators` IDE
generators.  It also allows the target names to be referenced
unambiguously.

Makefile generators are capable of supporting duplicate :command:`add_custom_target`
names.  For projects that care only about :ref:`Makefile Generators` and do
not wish to support :generator:`Xcode` or :ref:`Visual Studio Generators` IDE
generators, one may set this property to ``True``
to allow duplicate custom targets.  The property
allows multiple :command:`add_custom_target` command calls in different
directories to specify the same target name.  However, setting this
property will cause non-Makefile generators to produce an error and
refuse to generate the project.



/P/🚀 prop_gbl/AUTOGEN_SOURCE_GROUP.rst
=====================================================


AUTOGEN_SOURCE_GROUP
--------------------

.. versionadded:: 3.9

Name of the  :command:`source_group` for :prop_tgt:`AUTOMOC`,
:prop_tgt:`AUTORCC` and :prop_tgt:`AUTOUIC` generated files.

Files generated by :prop_tgt:`AUTOMOC`, :prop_tgt:`AUTORCC` and
:prop_tgt:`AUTOUIC` are not always known at configure time and therefore can't
be passed to :command:`source_group`.
``AUTOGEN_SOURCE_GROUP`` can be used instead to generate or select
a source group for :prop_tgt:`AUTOMOC`, :prop_tgt:`AUTORCC` and
:prop_tgt:`AUTOUIC` generated files.

For :prop_tgt:`AUTOMOC`, :prop_tgt:`AUTORCC` and :prop_tgt:`AUTOUIC` specific
overrides see :prop_gbl:`AUTOMOC_SOURCE_GROUP`, :prop_gbl:`AUTORCC_SOURCE_GROUP`
and :prop_gbl:`AUTOUIC_SOURCE_GROUP` respectively.



/P/🚀 prop_gbl/AUTOGEN_TARGETS_FOLDER.rst
=======================================================


AUTOGEN_TARGETS_FOLDER
----------------------

Name of :prop_tgt:`FOLDER` for ``*_autogen`` targets that are added
automatically by CMake for targets for which :prop_tgt:`AUTOMOC` is enabled.

If not set, CMake uses the :prop_tgt:`FOLDER` property of the parent target as a
default value for this property.  See also the documentation for the
:prop_tgt:`FOLDER` target property and the :prop_tgt:`AUTOMOC` target property.



/P/🚀 prop_gbl/AUTOMOC_SOURCE_GROUP.rst
=====================================================


AUTOMOC_SOURCE_GROUP
--------------------

.. versionadded:: 3.9

Name of the  :command:`source_group` for :prop_tgt:`AUTOMOC` generated files.

When set this is used instead of :prop_gbl:`AUTOGEN_SOURCE_GROUP` for
files generated by :prop_tgt:`AUTOMOC`.



/P/🚀 prop_gbl/AUTOMOC_TARGETS_FOLDER.rst
=======================================================


AUTOMOC_TARGETS_FOLDER
----------------------

Name of :prop_tgt:`FOLDER` for ``*_autogen`` targets that are added automatically by
CMake for targets for which :prop_tgt:`AUTOMOC` is enabled.

This property is obsolete.  Use :prop_gbl:`AUTOGEN_TARGETS_FOLDER` instead.

If not set, CMake uses the :prop_tgt:`FOLDER` property of the parent target as a
default value for this property.  See also the documentation for the
:prop_tgt:`FOLDER` target property and the :prop_tgt:`AUTOMOC` target property.



/P/🚀 prop_gbl/AUTORCC_SOURCE_GROUP.rst
=====================================================


AUTORCC_SOURCE_GROUP
--------------------

.. versionadded:: 3.9

Name of the  :command:`source_group` for :prop_tgt:`AUTORCC` generated files.

When set this is used instead of :prop_gbl:`AUTOGEN_SOURCE_GROUP` for
files generated by :prop_tgt:`AUTORCC`.



/P/🚀 prop_gbl/AUTOUIC_SOURCE_GROUP.rst
=====================================================


AUTOUIC_SOURCE_GROUP
--------------------

.. versionadded:: 3.21

Name of the  :command:`source_group` for :prop_tgt:`AUTOUIC` generated files.

When set this is used instead of :prop_gbl:`AUTOGEN_SOURCE_GROUP` for
files generated by :prop_tgt:`AUTOUIC`.



/P/🚀 prop_gbl/CMAKE_C_KNOWN_FEATURES.rst
=======================================================


CMAKE_C_KNOWN_FEATURES
----------------------

.. versionadded:: 3.1

List of C features known to this version of CMake.

The features listed in this global property may be known to be available to the
C compiler.  If the feature is available with the C compiler, it will
be listed in the :variable:`CMAKE_C_COMPILE_FEATURES` variable.

The features listed here may be used with the :command:`target_compile_features`
command.  See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

The features known to this version of CMake are listed below.

High level meta features indicating C standard support
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.8

``c_std_90``
  Compiler mode is at least C 90.

``c_std_99``
  Compiler mode is at least C 99.

``c_std_11``
  Compiler mode is at least C 11.

``c_std_17``
  .. versionadded:: 3.21

  Compiler mode is at least C 17.

``c_std_23``
  .. versionadded:: 3.21

  Compiler mode is at least C 23.

.. include:: CMAKE_LANG_STD_FLAGS.txt

Low level individual compile features
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``c_function_prototypes``
  Function prototypes, as defined in ``ISO/IEC 9899:1990``.

``c_restrict``
  ``restrict`` keyword, as defined in ``ISO/IEC 9899:1999``.

``c_static_assert``
  Static assert, as defined in ``ISO/IEC 9899:2011``.

``c_variadic_macros``
  Variadic macros, as defined in ``ISO/IEC 9899:1999``.



/P/🚀 prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst
==========================================================


CMAKE_CUDA_KNOWN_FEATURES
-------------------------

.. versionadded:: 3.17

List of CUDA features known to this version of CMake.

The features listed in this global property may be known to be available to the
CUDA compiler.  If the feature is available with the C++ compiler, it will
be listed in the :variable:`CMAKE_CUDA_COMPILE_FEATURES` variable.

The features listed here may be used with the :command:`target_compile_features`
command.  See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.


The features known to this version of CMake are:

``cuda_std_03``
  Compiler mode is at least CUDA/C++ 03.

``cuda_std_11``
  Compiler mode is at least CUDA/C++ 11.

``cuda_std_14``
  Compiler mode is at least CUDA/C++ 14.

``cuda_std_17``
  Compiler mode is at least CUDA/C++ 17.

``cuda_std_20``
  Compiler mode is at least CUDA/C++ 20.

``cuda_std_23``
  .. versionadded:: 3.20

  Compiler mode is at least CUDA/C++ 23.

``cuda_std_26``
  .. versionadded:: 3.25

  Compiler mode is at least CUDA/C++ 26.

.. include:: CMAKE_LANG_STD_FLAGS.txt



/P/🚀 prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst
=========================================================


CMAKE_CXX_KNOWN_FEATURES
------------------------

.. versionadded:: 3.1

List of C++ features known to this version of CMake.

The features listed in this global property may be known to be available to the
C++ compiler.  If the feature is available with the C++ compiler, it will
be listed in the :variable:`CMAKE_CXX_COMPILE_FEATURES` variable.

The features listed here may be used with the :command:`target_compile_features`
command.  See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

The features known to this version of CMake are listed below.

High level meta features indicating C++ standard support
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.8

The following meta features indicate general support for the associated
language standard.  It reflects the language support claimed by the compiler,
but it does not necessarily imply complete conformance to that standard.

``cxx_std_98``
  Compiler mode is at least C++ 98.

``cxx_std_11``
  Compiler mode is at least C++ 11.

``cxx_std_14``
  Compiler mode is at least C++ 14.

``cxx_std_17``
  Compiler mode is at least C++ 17.

``cxx_std_20``
  .. versionadded:: 3.12

  Compiler mode is at least C++ 20.

``cxx_std_23``
  .. versionadded:: 3.20

  Compiler mode is at least C++ 23.

``cxx_std_26``
  .. versionadded:: 3.25

  Compiler mode is at least C++ 26.

.. include:: CMAKE_LANG_STD_FLAGS.txt

Low level individual compile features
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For C++ 11 and C++ 14, compilers were sometimes slow to implement certain
language features.  CMake provided some individual compile features to help
projects determine whether specific features were available.  These individual
features are now less relevant and projects should generally prefer to use the
high level meta features instead.  Individual compile features are not provided
for C++ 17 or later.

See the :manual:`cmake-compile-features(7)` manual for further discussion of
the use of individual compile features.

Individual features from C++ 98
"""""""""""""""""""""""""""""""

``cxx_template_template_parameters``
  Template template parameters, as defined in ``ISO/IEC 14882:1998``.


Individual features from C++ 11
"""""""""""""""""""""""""""""""

``cxx_alias_templates``
  Template aliases, as defined in N2258_.

  .. _N2258: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2258.pdf

``cxx_alignas``
  Alignment control ``alignas``, as defined in N2341_.

  .. _N2341: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf

``cxx_alignof``
  Alignment control ``alignof``, as defined in N2341_.

  .. _N2341: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf

``cxx_attributes``
  Generic attributes, as defined in N2761_.

  .. _N2761: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2761.pdf

``cxx_auto_type``
  Automatic type deduction, as defined in N1984_.

  .. _N1984: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1984.pdf

``cxx_constexpr``
  Constant expressions, as defined in N2235_.

  .. _N2235: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2235.pdf


``cxx_decltype_incomplete_return_types``
  Decltype on incomplete return types, as defined in N3276_.

  .. _N3276 : https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3276.pdf

``cxx_decltype``
  Decltype, as defined in N2343_.

  .. _N2343: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2343.pdf

``cxx_default_function_template_args``
  Default template arguments for function templates, as defined in DR226_

  .. _DR226: https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#226

``cxx_defaulted_functions``
  Defaulted functions, as defined in N2346_.

  .. _N2346: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2346.htm

``cxx_defaulted_move_initializers``
  Defaulted move initializers, as defined in N3053_.

  .. _N3053: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3053.html

``cxx_delegating_constructors``
  Delegating constructors, as defined in N1986_.

  .. _N1986: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1986.pdf

``cxx_deleted_functions``
  Deleted functions, as defined in N2346_.

  .. _N2346: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2346.htm

``cxx_enum_forward_declarations``
  Enum forward declarations, as defined in N2764_.

  .. _N2764: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2764.pdf

``cxx_explicit_conversions``
  Explicit conversion operators, as defined in N2437_.

  .. _N2437: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2437.pdf

``cxx_extended_friend_declarations``
  Extended friend declarations, as defined in N1791_.

  .. _N1791: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1791.pdf

``cxx_extern_templates``
  Extern templates, as defined in N1987_.

  .. _N1987: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1987.htm

``cxx_final``
  Override control ``final`` keyword, as defined in N2928_, N3206_ and N3272_.

  .. _N2928: https://www.open-std.org/JTC1/SC22/WG21/docs/papers/2009/n2928.htm
  .. _N3206: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3206.htm
  .. _N3272: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm

``cxx_func_identifier``
  Predefined ``__func__`` identifier, as defined in N2340_.

  .. _N2340: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2340.htm

``cxx_generalized_initializers``
  Initializer lists, as defined in N2672_.

  .. _N2672: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2672.htm

``cxx_inheriting_constructors``
  Inheriting constructors, as defined in N2540_.

  .. _N2540: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2540.htm

``cxx_inline_namespaces``
  Inline namespaces, as defined in N2535_.

  .. _N2535: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2535.htm

``cxx_lambdas``
  Lambda functions, as defined in N2927_.

  .. _N2927: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2927.pdf

``cxx_local_type_template_args``
  Local and unnamed types as template arguments, as defined in N2657_.

  .. _N2657: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2657.htm

``cxx_long_long_type``
  ``long long`` type, as defined in N1811_.

  .. _N1811: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1811.pdf

``cxx_noexcept``
  Exception specifications, as defined in N3050_.

  .. _N3050: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3050.html

``cxx_nonstatic_member_init``
  Non-static data member initialization, as defined in N2756_.

  .. _N2756: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2756.htm

``cxx_nullptr``
  Null pointer, as defined in N2431_.

  .. _N2431: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2431.pdf

``cxx_override``
  Override control ``override`` keyword, as defined in N2928_, N3206_
  and N3272_.

  .. _N2928: https://www.open-std.org/JTC1/SC22/WG21/docs/papers/2009/n2928.htm
  .. _N3206: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3206.htm
  .. _N3272: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm

``cxx_range_for``
  Range-based for, as defined in N2930_.

  .. _N2930: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2930.html

``cxx_raw_string_literals``
  Raw string literals, as defined in N2442_.

  .. _N2442: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2442.htm

``cxx_reference_qualified_functions``
  Reference qualified functions, as defined in N2439_.

  .. _N2439: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2439.htm

``cxx_right_angle_brackets``
  Right angle bracket parsing, as defined in N1757_.

  .. _N1757: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1757.html

``cxx_rvalue_references``
  R-value references, as defined in N2118_.

  .. _N2118: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2118.html

``cxx_sizeof_member``
  Size of non-static data members, as defined in N2253_.

  .. _N2253: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2253.html

``cxx_static_assert``
  Static assert, as defined in N1720_.

  .. _N1720: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1720.html

``cxx_strong_enums``
  Strongly typed enums, as defined in N2347_.

  .. _N2347: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2347.pdf

``cxx_thread_local``
  Thread-local variables, as defined in N2659_.

  .. _N2659: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2659.htm

``cxx_trailing_return_types``
  Automatic function return type, as defined in N2541_.

  .. _N2541: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2541.htm

``cxx_unicode_literals``
  Unicode string literals, as defined in N2442_.

  .. _N2442: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2442.htm

``cxx_uniform_initialization``
  Uniform initialization, as defined in N2640_.

  .. _N2640: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2640.pdf

``cxx_unrestricted_unions``
  Unrestricted unions, as defined in N2544_.

  .. _N2544: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2544.pdf

``cxx_user_literals``
  User-defined literals, as defined in N2765_.

  .. _N2765: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2765.pdf

``cxx_variadic_macros``
  Variadic macros, as defined in N1653_.

  .. _N1653: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm

``cxx_variadic_templates``
  Variadic templates, as defined in N2242_.

  .. _N2242: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2242.pdf


Individual features from C++ 14
"""""""""""""""""""""""""""""""

``cxx_aggregate_default_initializers``
  Aggregate default initializers, as defined in N3605_.

  .. _N3605: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3605.html

``cxx_attribute_deprecated``
  ``[[deprecated]]`` attribute, as defined in N3760_.

  .. _N3760: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3760.html

``cxx_binary_literals``
  Binary literals, as defined in N3472_.

  .. _N3472: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3472.pdf

``cxx_contextual_conversions``
  Contextual conversions, as defined in N3323_.

  .. _N3323: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3323.pdf

``cxx_decltype_auto``
  ``decltype(auto)`` semantics, as defined in N3638_.

  .. _N3638: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3638.html

``cxx_digit_separators``
  Digit separators, as defined in N3781_.

  .. _N3781: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3781.pdf

``cxx_generic_lambdas``
  Generic lambdas, as defined in N3649_.

  .. _N3649: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3649.html

``cxx_lambda_init_captures``
  Initialized lambda captures, as defined in N3648_.

  .. _N3648: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3648.html

``cxx_relaxed_constexpr``
  Relaxed constexpr, as defined in N3652_.

  .. _N3652: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3652.html

``cxx_return_type_deduction``
  Return type deduction on normal functions, as defined in N3386_.

  .. _N3386: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3386.html

``cxx_variable_templates``
  Variable templates, as defined in N3651_.

  .. _N3651: https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3651.pdf



/P/🚀 prop_gbl/CMAKE_ROLE.rst
===========================================


CMAKE_ROLE
----------

.. versionadded:: 3.14

Tells what mode the current running script is in. Could be one of several
values:

``PROJECT``
  Running in project mode (processing a ``CMakeLists.txt`` file).

``SCRIPT``
  Running in ``-P`` script mode.

``FIND_PACKAGE``
  Running in ``--find-package`` mode.

``CTEST``
  Running in CTest script mode.

``CPACK``
  Running in CPack.



/P/🚀 prop_gbl/DEBUG_CONFIGURATIONS.rst
=====================================================


DEBUG_CONFIGURATIONS
--------------------

Specify which configurations are for debugging.

The value must be a semi-colon separated list of configuration names.
Currently this property is used only by the :command:`target_link_libraries`
command.  Additional uses may be defined in the future.

This property must be set at the top level of the project and before
the first :command:`target_link_libraries` command invocation.  If any entry in
the list does not match a valid configuration for the project the
behavior is undefined.



/P/🚀 prop_gbl/DISABLED_FEATURES.rst
==================================================


DISABLED_FEATURES
-----------------

List of features which are disabled during the CMake run.

List of features which are disabled during the CMake run.  By default
it contains the names of all packages which were not found.  This is
determined using the ``<NAME>_FOUND`` variables.  Packages which are
searched ``QUIET`` are not listed.  A project can add its own features to
this list.  This property is used by the macros in
``FeatureSummary.cmake``.



/P/🚀 prop_gbl/ECLIPSE_EXTRA_CPROJECT_CONTENTS.rst
================================================================


ECLIPSE_EXTRA_CPROJECT_CONTENTS
-------------------------------

.. versionadded:: 3.12

Additional contents to be inserted into the generated Eclipse cproject file.

The cproject file defines the CDT specific information. Some third party IDE's
are based on Eclipse with the addition of other information specific to that IDE.
Through this property, it is possible to add this additional contents to
the generated project.
It is expected to contain valid XML.

Also see the :prop_gbl:`ECLIPSE_EXTRA_NATURES` property.



/P/🚀 prop_gbl/ECLIPSE_EXTRA_NATURES.rst
======================================================


ECLIPSE_EXTRA_NATURES
---------------------

List of natures to add to the generated Eclipse project file.

Eclipse projects specify language plugins by using natures. This property
should be set to the unique identifier for a nature (which looks like a Java
package name).

Also see the :prop_gbl:`ECLIPSE_EXTRA_CPROJECT_CONTENTS` property.



/P/🚀 prop_gbl/ENABLED_FEATURES.rst
=================================================


ENABLED_FEATURES
----------------

List of features which are enabled during the CMake run.

List of features which are enabled during the CMake run.  By default
it contains the names of all packages which were found.  This is
determined using the ``<NAME>_FOUND`` variables.  Packages which are
searched ``QUIET`` are not listed.  A project can add its own features to
this list.  This property is used by the macros in
``FeatureSummary.cmake``.



/P/🚀 prop_gbl/ENABLED_LANGUAGES.rst
==================================================


ENABLED_LANGUAGES
-----------------

Read-only property that contains the list of currently enabled languages

Set to list of currently enabled languages.



/P/🚀 prop_gbl/FIND_LIBRARY_USE_LIB32_PATHS.rst
=============================================================


FIND_LIBRARY_USE_LIB32_PATHS
----------------------------

.. versionadded:: 3.7

Whether the :command:`find_library` command should automatically search
``lib32`` directories.

``FIND_LIBRARY_USE_LIB32_PATHS`` is a boolean specifying whether the
:command:`find_library` command should automatically search the ``lib32``
variant of directories called ``lib`` in the search path when building 32-bit
binaries.

See also the :variable:`CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX` variable.



/P/🚀 prop_gbl/FIND_LIBRARY_USE_LIB64_PATHS.rst
=============================================================


FIND_LIBRARY_USE_LIB64_PATHS
----------------------------

Whether :command:`find_library` should automatically search lib64
directories.

FIND_LIBRARY_USE_LIB64_PATHS is a boolean specifying whether the
:command:`find_library` command should automatically search the lib64
variant of directories called lib in the search path when building
64-bit binaries.

See also the :variable:`CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX` variable.



/P/🚀 prop_gbl/FIND_LIBRARY_USE_LIBX32_PATHS.rst
==============================================================


FIND_LIBRARY_USE_LIBX32_PATHS
-----------------------------

.. versionadded:: 3.9

Whether the :command:`find_library` command should automatically search
``libx32`` directories.

``FIND_LIBRARY_USE_LIBX32_PATHS`` is a boolean specifying whether the
:command:`find_library` command should automatically search the ``libx32``
variant of directories called ``lib`` in the search path when building
x32-abi binaries.

See also the :variable:`CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX` variable.



/P/🚀 prop_gbl/FIND_LIBRARY_USE_OPENBSD_VERSIONING.rst
====================================================================


FIND_LIBRARY_USE_OPENBSD_VERSIONING
-----------------------------------

Whether :command:`find_library` should find OpenBSD-style shared
libraries.

This property is a boolean specifying whether the
:command:`find_library` command should find shared libraries with
OpenBSD-style versioned extension: ".so.<major>.<minor>".  The
property is set to true on OpenBSD and false on other platforms.



/P/🚀 prop_gbl/GENERATOR_IS_MULTI_CONFIG.rst
==========================================================


GENERATOR_IS_MULTI_CONFIG
-------------------------

.. versionadded:: 3.9

Read-only property that is true on multi-configuration generators.

True when using a multi-configuration generator such as:

* :generator:`Ninja Multi-Config`
* :ref:`Visual Studio Generators`
* :generator:`Xcode`

Multi-config generators use :variable:`CMAKE_CONFIGURATION_TYPES`
as the set of configurations and ignore :variable:`CMAKE_BUILD_TYPE`.



/P/🚀 prop_gbl/GLOBAL_DEPENDS_DEBUG_MODE.rst
==========================================================


GLOBAL_DEPENDS_DEBUG_MODE
-------------------------

Enable global target dependency graph debug mode.

CMake automatically analyzes the global inter-target dependency graph
at the beginning of native build system generation.  This property
causes it to display details of its analysis to stderr.



/P/🚀 prop_gbl/GLOBAL_DEPENDS_NO_CYCLES.rst
=========================================================


GLOBAL_DEPENDS_NO_CYCLES
------------------------

Disallow global target dependency graph cycles.

CMake automatically analyzes the global inter-target dependency graph
at the beginning of native build system generation.  It reports an
error if the dependency graph contains a cycle that does not consist
of all STATIC library targets.  This property tells CMake to disallow
all cycles completely, even among static libraries.



/P/🚀 prop_gbl/IN_TRY_COMPILE.rst
===============================================


IN_TRY_COMPILE
--------------

Read-only property that is true during a try-compile configuration.

True when building a project inside a :command:`try_compile` or
:command:`try_run` command.



/P/🚀 prop_gbl/JOB_POOLS.rst
==========================================


JOB_POOLS
---------

Ninja only: List of available pools.

A pool is a named integer property and defines the maximum number
of concurrent jobs which can be started by a rule assigned to the pool.
The ``JOB_POOLS`` property is a semicolon-separated list of
pairs using the syntax ``NAME=integer`` (without a space after the equality sign).

For instance:

.. code-block:: cmake

  set_property(GLOBAL PROPERTY JOB_POOLS two_jobs=2 ten_jobs=10)

Defined pools could be used globally by setting
:variable:`CMAKE_JOB_POOL_COMPILE` and :variable:`CMAKE_JOB_POOL_LINK`
or per target by setting the target properties
:prop_tgt:`JOB_POOL_COMPILE` and :prop_tgt:`JOB_POOL_LINK`.
:command:`Custom commands <add_custom_command>` and
:command:`custom targets <add_custom_target>` can specify pools using the
option ``JOB_POOL``.
Using a pool that is not defined by ``JOB_POOLS`` causes
an error by ninja at build time.

If not set, this property uses the value of the :variable:`CMAKE_JOB_POOLS`
variable.

Build targets provided by CMake that are meant for individual interactive
use, such as ``install``, are placed in the ``console`` pool automatically.



/P/🚀 prop_gbl/PACKAGES_FOUND.rst
===============================================


PACKAGES_FOUND
--------------

List of packages which were found during the CMake run.

List of packages which were found during the CMake run.  Whether a
package has been found is determined using the <NAME>_FOUND variables.



/P/🚀 prop_gbl/PACKAGES_NOT_FOUND.rst
===================================================


PACKAGES_NOT_FOUND
------------------

List of packages which were not found during the CMake run.

List of packages which were not found during the CMake run.  Whether a
package has been found is determined using the <NAME>_FOUND variables.



/P/🚀 prop_gbl/PREDEFINED_TARGETS_FOLDER.rst
==========================================================


PREDEFINED_TARGETS_FOLDER
-------------------------

Name of FOLDER for targets that are added automatically by CMake.

If not set, CMake uses "CMakePredefinedTargets" as a default value for
this property.  Targets such as INSTALL, PACKAGE and RUN_TESTS will be
organized into this FOLDER.  See also the documentation for the
:prop_tgt:`FOLDER` target property.



/P/🚀 prop_gbl/REPORT_UNDEFINED_PROPERTIES.rst
============================================================


REPORT_UNDEFINED_PROPERTIES
---------------------------

If set, report any undefined properties to this file.

If this property is set to a filename then when CMake runs it will
report any properties or variables that were accessed but not defined
into the filename specified in this property.



/P/🚀 prop_gbl/RULE_LAUNCH_COMPILE.rst
====================================================


RULE_LAUNCH_COMPILE
-------------------

Specify a launcher for compile rules.

.. note::
  This property is intended for internal use by :manual:`ctest(1)`.  Projects
  and developers should use the :prop_tgt:`<LANG>_COMPILER_LAUNCHER` target
  properties or the associated :variable:`CMAKE_<LANG>_COMPILER_LAUNCHER`
  variables instead.

:ref:`Makefile Generators` and the :generator:`Ninja` generator prefix
compiler commands with the given launcher command line.
This is intended to allow launchers to intercept build problems
with high granularity.  Other generators ignore this property
because their underlying build systems provide no hook to wrap
individual commands with a launcher.



/P/🚀 prop_gbl/RULE_LAUNCH_CUSTOM.rst
===================================================


RULE_LAUNCH_CUSTOM
------------------

Specify a launcher for custom rules.

:ref:`Makefile Generators` and the :generator:`Ninja` generator prefix
custom commands with the given launcher command line.
This is intended to allow launchers to intercept build problems
with high granularity.  Other generators ignore this property
because their underlying build systems provide no hook to wrap
individual commands with a launcher.



/P/🚀 prop_gbl/RULE_LAUNCH_LINK.rst
=================================================


RULE_LAUNCH_LINK
----------------

Specify a launcher for link rules.

.. note::
  This property is intended for internal use by :manual:`ctest(1)`.  Projects
  and developers should use the :prop_tgt:`<LANG>_LINKER_LAUNCHER` target
  properties or the associated :variable:`CMAKE_<LANG>_LINKER_LAUNCHER`
  variables instead.

:ref:`Makefile Generators` and the :generator:`Ninja` generator prefix
link and archive commands with the given launcher command line.
This is intended to allow launchers to intercept build problems
with high granularity.  Other generators ignore this property
because their underlying build systems provide no hook to wrap
individual commands with a launcher.



/P/🚀 prop_gbl/RULE_MESSAGES.rst
==============================================


RULE_MESSAGES
-------------

Specify whether to report a message for each make rule.

This property specifies whether Makefile generators should add a
progress message describing what each build rule does.  If the
property is not set the default is ON.  Set the property to OFF to
disable granular messages and report only as each target completes.
This is intended to allow scripted builds to avoid the build time cost
of detailed reports.  If a :variable:`CMAKE_RULE_MESSAGES` cache entry exists
its value initializes the value of this property.  Non-Makefile
generators currently ignore this property.



/P/🚀 prop_gbl/TARGET_ARCHIVES_MAY_BE_SHARED_LIBS.rst
===================================================================


TARGET_ARCHIVES_MAY_BE_SHARED_LIBS
----------------------------------

Set if shared libraries may be named like archives.

On AIX shared libraries may be named "lib<name>.a".  This property is
set to true on such platforms.



/P/🚀 prop_gbl/TARGET_MESSAGES.rst
================================================


TARGET_MESSAGES
---------------

.. versionadded:: 3.4

Specify whether to report the completion of each target.

This property specifies whether :ref:`Makefile Generators` should
add a progress message describing that each target has been completed.
If the property is not set the default is ``ON``.  Set the property
to ``OFF`` to disable target completion messages.

This option is intended to reduce build output when little or no
work needs to be done to bring the build tree up to date.

If a ``CMAKE_TARGET_MESSAGES`` cache entry exists its value
initializes the value of this property.

Non-Makefile generators currently ignore this property.

See the counterpart property :prop_gbl:`RULE_MESSAGES` to disable
everything except for target completion messages.



/P/🚀 prop_gbl/TARGET_SUPPORTS_SHARED_LIBS.rst
============================================================


TARGET_SUPPORTS_SHARED_LIBS
---------------------------

Does the target platform support shared libraries.

TARGET_SUPPORTS_SHARED_LIBS is a boolean specifying whether the target
platform supports shared libraries.  Basically all current general
general purpose OS do so, the exception are usually embedded systems
with no or special OSs.



/P/🚀 prop_gbl/USE_FOLDERS.rst
============================================


USE_FOLDERS
-----------

Controls whether to use the :prop_tgt:`FOLDER` target property to organize
targets into folders.  The value of ``USE_FOLDERS`` at the end of the top level
``CMakeLists.txt`` file is what determines the behavior.

.. versionchanged:: 3.26

  CMake treats this property as ``ON`` by default.
  See policy :policy:`CMP0143`.

Not all CMake generators support recording folder details for targets.
The :generator:`Xcode` and :ref:`Visual Studio <Visual Studio Generators>`
generators are examples of generators that do.  Similarly, not all IDEs
support presenting targets using folder hierarchies, even if the CMake
generator used provides the necessary information.



/P/🚀 prop_gbl/XCODE_EMIT_EFFECTIVE_PLATFORM_NAME.rst
===================================================================


XCODE_EMIT_EFFECTIVE_PLATFORM_NAME
----------------------------------

.. versionadded:: 3.8

Control emission of ``EFFECTIVE_PLATFORM_NAME`` by the :generator:`Xcode`
generator.

It is required for building the same target with multiple SDKs. A
common use case is the parallel use of ``iphoneos`` and
``iphonesimulator`` SDKs.

Three different states possible that control when the :generator:`Xcode`
generator emits the ``EFFECTIVE_PLATFORM_NAME`` variable:

- If set to ``ON`` it will always be emitted
- If set to ``OFF`` it will never be emitted
- If unset (the default) it will only be emitted when the project was
  configured for an embedded Xcode SDK like iOS, tvOS, visionOS, watchOS
  or any of the simulators.

.. note::

  When this behavior is enable for generated Xcode projects, the
  ``EFFECTIVE_PLATFORM_NAME`` variable will leak into
  :manual:`Generator expressions <cmake-generator-expressions(7)>`
  like ``TARGET_FILE`` and will render those mostly unusable.



/P/🚀 prop_dir/ADDITIONAL_CLEAN_FILES.rst
=======================================================


ADDITIONAL_CLEAN_FILES
----------------------

.. versionadded:: 3.15

A :ref:`;-list <CMake Language Lists>` of files or directories that will be
removed as a part of the global ``clean`` target.  It is useful for
specifying generated files or directories that are used by multiple targets
or by CMake itself, or that are generated in ways which cannot be captured as
outputs or byproducts of custom commands.

If an additional clean file is specific to a single target only, then the
:prop_tgt:`ADDITIONAL_CLEAN_FILES` target property would usually be a better
choice than this directory property.

Relative paths are allowed and are interpreted relative to the
current binary directory.

Contents of ``ADDITIONAL_CLEAN_FILES`` may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.

This property only works for the :generator:`Ninja` and the Makefile
generators.  It is ignored by other generators.



/P/🚀 prop_dir/BINARY_DIR.rst
===========================================


BINARY_DIR
----------

.. versionadded:: 3.7

This read-only directory property reports absolute path to the binary
directory corresponding to the source on which it is read.



/P/🚀 prop_dir/BUILDSYSTEM_TARGETS.rst
====================================================


BUILDSYSTEM_TARGETS
-------------------

.. versionadded:: 3.7

This read-only directory property contains a
:ref:`semicolon-separated list <CMake Language Lists>` of buildsystem targets added in the
directory by calls to the :command:`add_library`, :command:`add_executable`,
and :command:`add_custom_target` commands.  The list does not include any
:ref:`Imported Targets` or :ref:`Alias Targets`, but does include
:ref:`Interface Libraries`.  Each entry in the list is the logical name
of a target, suitable to pass to the :command:`get_property` command
``TARGET`` option.

See also the :prop_dir:`IMPORTED_TARGETS` directory property.



/P/🚀 prop_dir/CACHE_VARIABLES.rst
================================================


CACHE_VARIABLES
---------------

List of cache variables available in the current directory.

This read-only property specifies the list of CMake cache variables
currently defined.  It is intended for debugging purposes.



/P/🚀 prop_dir/CLEAN_NO_CUSTOM.rst
================================================


CLEAN_NO_CUSTOM
---------------

Set to true to tell :ref:`Makefile Generators` not to remove the outputs of
custom commands for this directory during the ``make clean`` operation.
This is ignored on other generators because it is not possible to implement.



/P/🚀 prop_dir/CMAKE_CONFIGURE_DEPENDS.rst
========================================================


CMAKE_CONFIGURE_DEPENDS
-----------------------

Tell CMake about additional input files to the configuration process.
If any named file is modified the build system will re-run CMake to
re-configure the file and generate the build system again.

Specify files as a semicolon-separated list of paths.  Relative paths
are interpreted as relative to the current source directory.



/P/🚀 prop_dir/COMPILE_DEFINITIONS.rst
====================================================


COMPILE_DEFINITIONS
-------------------

Preprocessor definitions for compiling a directory's sources.

This property specifies the list of options given so far to the
:command:`add_compile_definitions` (or :command:`add_definitions`) command.

The ``COMPILE_DEFINITIONS`` property may be set to a semicolon-separated
list of preprocessor definitions using the syntax ``VAR`` or ``VAR=value``.
Function-style definitions are not supported.  CMake will
automatically escape the value correctly for the native build system
(note that CMake language syntax may require escapes to specify some
values).

This property will be initialized in each directory by its value in the
directory's parent.

CMake will automatically drop some definitions that are not supported
by the native build tool.

.. versionadded:: 3.26
  Any leading ``-D`` on an item will be removed.

.. include:: /include/COMPILE_DEFINITIONS_DISCLAIMER.txt

Contents of ``COMPILE_DEFINITIONS`` may use "generator expressions" with
the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
manual for available expressions.  See the :manual:`cmake-buildsystem(7)`
manual for more on defining buildsystem properties.

The corresponding :prop_dir:`COMPILE_DEFINITIONS_<CONFIG>` property may
be set to specify per-configuration definitions.  Generator expressions
should be preferred instead of setting the alternative property.



/P/🚀 prop_dir/COMPILE_OPTIONS.rst
================================================


COMPILE_OPTIONS
---------------

List of options to pass to the compiler.

This property holds a :ref:`semicolon-separated list <CMake Language Lists>` of options
given so far to the :command:`add_compile_options` command.

This property is used to initialize the :prop_tgt:`COMPILE_OPTIONS` target
property when a target is created, which is used by the generators to set
the options for the compiler.

Contents of ``COMPILE_OPTIONS`` may use "generator expressions" with the
syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` manual
for available expressions.  See the :manual:`cmake-buildsystem(7)` manual
for more on defining buildsystem properties.



/P/🚀 prop_dir/DEFINITIONS.rst
============================================


DEFINITIONS
-----------

For CMake 2.4 compatibility only.  Use :prop_dir:`COMPILE_DEFINITIONS`
instead.

This read-only property specifies the list of flags given so far to
the :command:`add_definitions` command.  It is intended for debugging
purposes.  Use the :prop_dir:`COMPILE_DEFINITIONS` directory property
instead.

This built-in read-only property does not exist if policy
:policy:`CMP0059` is set to ``NEW``.



/P/🚀 prop_dir/EXCLUDE_FROM_ALL.rst
=================================================


EXCLUDE_FROM_ALL
----------------

Set this directory property to a true value on a subdirectory to exclude
its targets from the "all" target of its ancestors.  If excluded, running
e.g. ``make`` in the parent directory will not build targets the
subdirectory by default.  This does not affect the "all" target of the
subdirectory itself.  Running e.g. ``make`` inside the subdirectory will
still build its targets.

If the :prop_tgt:`EXCLUDE_FROM_ALL` target property is set on a target
then its value determines whether the target is included in the "all"
target of this directory and its ancestors.



/P/🚀 prop_dir/IMPLICIT_DEPENDS_INCLUDE_TRANSFORM.rst
===================================================================


IMPLICIT_DEPENDS_INCLUDE_TRANSFORM
----------------------------------

Specify ``#include`` line transforms for dependencies in a directory.

This property specifies rules to transform macro-like ``#include`` lines
during implicit dependency scanning of C and C++ source files.  The
list of rules must be semicolon-separated with each entry of the form
``A_MACRO(%)=value-with-%`` (the ``%`` must be literal).  During dependency
scanning occurrences of ``A_MACRO(...)`` on ``#include`` lines will be
replaced by the value given with the macro argument substituted for
``%``.  For example, the entry

::

  MYDIR(%)=<mydir/%>

will convert lines of the form

::

  #include MYDIR(myheader.h)

to

::

  #include <mydir/myheader.h>

allowing the dependency to be followed.

This property applies to sources in all targets within a directory.
The property value is initialized in each directory by its value in
the directory's parent.



/P/🚀 prop_dir/IMPORTED_TARGETS.rst
=================================================


IMPORTED_TARGETS
----------------

.. versionadded:: 3.21

This read-only directory property contains a
:ref:`semicolon-separated list <CMake Language Lists>` of
:ref:`Imported Targets` added in the directory by calls to the
:command:`add_library` and :command:`add_executable` commands.
Each entry in the list is the logical name of a target, suitable
to pass to the :command:`get_property` command ``TARGET`` option
when called in the same directory.

See also the :prop_dir:`BUILDSYSTEM_TARGETS` directory property.



/P/🚀 prop_dir/INCLUDE_DIRECTORIES.rst
====================================================


INCLUDE_DIRECTORIES
-------------------

List of preprocessor include file search directories.

This property specifies the list of directories given so far to the
:command:`include_directories` command.

This property is used to populate the :prop_tgt:`INCLUDE_DIRECTORIES`
target property, which is used by the generators to set the include
directories for the compiler.

In addition to accepting values from that command, values may be set
directly on any directory using the :command:`set_property` command, and can be
set on the current directory using the :command:`set_directory_properties`
command.  A directory gets its initial value from its parent directory if it has
one.  The initial value of the :prop_tgt:`INCLUDE_DIRECTORIES` target property
comes from the value of this property.  Both directory and target property
values are adjusted by calls to the :command:`include_directories` command.
Calls to :command:`set_property` or :command:`set_directory_properties`,
however, will update the directory property value without updating target
property values.  Therefore direct property updates must be made before
calls to :command:`add_executable` or :command:`add_library` for targets
they are meant to affect.

The target property values are used by the generators to set the
include paths for the compiler.

Contents of ``INCLUDE_DIRECTORIES`` may use "generator expressions" with
the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
manual for available expressions.  See the :manual:`cmake-buildsystem(7)`
manual for more on defining buildsystem properties.



/P/🚀 prop_dir/INCLUDE_REGULAR_EXPRESSION.rst
===========================================================


INCLUDE_REGULAR_EXPRESSION
--------------------------

Include file scanning regular expression.

This property specifies the regular expression used during
dependency scanning to match include files that should be followed.
See the :command:`include_regular_expression` command for a high-level
interface to set this property.



/P/🚀 prop_dir/LABELS.rst
=======================================


LABELS
------

.. versionadded:: 3.10

Specify a list of text labels associated with a directory and all of its
subdirectories. This is equivalent to setting the :prop_tgt:`LABELS` target
property and the :prop_test:`LABELS` test property on all targets and tests in
the current directory and subdirectories. Note: Launchers must enabled to
propagate labels to targets.

The :variable:`CMAKE_DIRECTORY_LABELS` variable can be used to initialize this
property.

The list is reported in dashboard submissions.



/P/🚀 prop_dir/LINK_DIRECTORIES.rst
=================================================


LINK_DIRECTORIES
----------------

List of linker search directories.

This property holds a :ref:`semicolon-separated list <CMake Language Lists>` of directories
and is typically populated using the :command:`link_directories` command.
It gets its initial value from its parent directory, if it has one.

The directory property is used to initialize the :prop_tgt:`LINK_DIRECTORIES`
target property when a target is created.  That target property is used
by the generators to set the library search directories for the linker.

Contents of ``LINK_DIRECTORIES`` may use "generator expressions" with
the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
manual for available expressions.  See the :manual:`cmake-buildsystem(7)`
manual for more on defining buildsystem properties.



/P/🚀 prop_dir/LINK_OPTIONS.rst
=============================================


LINK_OPTIONS
------------

.. versionadded:: 3.13

List of options to use for the link step of shared library, module
and executable targets as well as the device link step.

This property holds a :ref:`semicolon-separated list <CMake Language Lists>` of options
given so far to the :command:`add_link_options` command.

This property is used to initialize the :prop_tgt:`LINK_OPTIONS` target
property when a target is created, which is used by the generators to set
the options for the compiler.

Contents of ``LINK_OPTIONS`` may use "generator expressions" with the
syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` manual
for available expressions.  See the :manual:`cmake-buildsystem(7)` manual
for more on defining buildsystem properties.



/P/🚀 prop_dir/LISTFILE_STACK.rst
===============================================


LISTFILE_STACK
--------------

The current stack of listfiles being processed.

This property is mainly useful when trying to debug errors in your
CMake scripts.  It returns a list of what list files are currently
being processed, in order.  So if one listfile does an
:command:`include` command then that is effectively pushing the
included listfile onto the stack.



/P/🚀 prop_dir/MACROS.rst
=======================================


MACROS
------

List of macro commands available in the current directory.

This read-only property specifies the list of CMake macros currently
defined.  It is intended for debugging purposes.  See the :command:`macro`
command.



/P/🚀 prop_dir/PARENT_DIRECTORY.rst
=================================================


PARENT_DIRECTORY
----------------

Source directory that added current subdirectory.

This read-only property specifies the source directory that added the
current source directory as a subdirectory of the build.  In the
top-level directory the value is the empty-string.



/P/🚀 prop_dir/RULE_LAUNCH_COMPILE.rst
====================================================


RULE_LAUNCH_COMPILE
-------------------

Specify a launcher for compile rules.

.. note::
  This property is intended for internal use by :manual:`ctest(1)`.  Projects
  and developers should use the :prop_tgt:`<LANG>_COMPILER_LAUNCHER` target
  properties or the associated :variable:`CMAKE_<LANG>_COMPILER_LAUNCHER`
  variables instead.

See the :prop_gbl:`global property <RULE_LAUNCH_COMPILE>` of the same name
for details.  This overrides the global property for a directory.



/P/🚀 prop_dir/RULE_LAUNCH_CUSTOM.rst
===================================================


RULE_LAUNCH_CUSTOM
------------------

Specify a launcher for custom rules.

See the global property of the same name for details.  This overrides
the global property for a directory.



/P/🚀 prop_dir/RULE_LAUNCH_LINK.rst
=================================================


RULE_LAUNCH_LINK
----------------

Specify a launcher for link rules.

.. note::
  This property is intended for internal use by :manual:`ctest(1)`.  Projects
  and developers should use the :prop_tgt:`<LANG>_LINKER_LAUNCHER` target
  properties or the associated :variable:`CMAKE_<LANG>_LINKER_LAUNCHER`
  variables instead.

See the :prop_gbl:`global property <RULE_LAUNCH_LINK>` of the same name for
details.  This overrides the global property for a directory.



/P/🚀 prop_dir/SOURCE_DIR.rst
===========================================


SOURCE_DIR
----------

.. versionadded:: 3.7

This read-only directory property reports absolute path to the source
directory on which it is read.



/P/🚀 prop_dir/SUBDIRECTORIES.rst
===============================================


SUBDIRECTORIES
--------------

.. versionadded:: 3.7

This read-only directory property contains a
:ref:`semicolon-separated list <CMake Language Lists>` of subdirectories processed so far by
the :command:`add_subdirectory` or :command:`subdirs` commands.  Each entry is
the absolute path to the source directory (containing the ``CMakeLists.txt``
file).  This is suitable to pass to the :command:`get_property` command
``DIRECTORY`` option.

.. note::

  The :command:`subdirs` command does not process its arguments until
  after the calling directory is fully processed.  Therefore looking
  up this property in the current directory will not see them.



/P/🚀 prop_dir/SYSTEM.rst
=======================================


SYSTEM
------

.. versionadded:: 3.25

This directory property is used to initialize the :prop_tgt:`SYSTEM`
target property for non-imported targets created in that directory.
It is set to true by :command:`add_subdirectory` and
:command:`FetchContent_Declare` when the ``SYSTEM`` option is given
as an argument to those commands.



/P/🚀 prop_dir/TESTS.rst
======================================


TESTS
-----

.. versionadded:: 3.12

List of tests.

This read-only property holds a
:ref:`semicolon-separated list <CMake Language Lists>` of tests
defined so far, in the current directory, by the :command:`add_test` command.



/P/🚀 prop_dir/TEST_INCLUDE_FILES.rst
===================================================


TEST_INCLUDE_FILES
------------------

.. versionadded:: 3.10

A list of cmake files that will be included when ctest is run.

If you specify ``TEST_INCLUDE_FILES``, those files will be included and
processed when ctest is run on the directory.


/P/🚀 prop_tgt/COMPILE_DEFINITIONS_CONFIG
===================================================


/P/🚀 prop_tgt/IMPORTED_NO_SYSTEM
===================================================


/P/🚀 prop_tgt/IOS_INSTALL_COMBINED
===================================================


/P/🚀 prop_tgt/POST_INSTALL_SCRIPT
===================================================


/P/🚀 prop_tgt/PRE_INSTALL_SCRIPT
===================================================


/P/🚀 prop_tgt/VS_WINRT_EXTENSIONS
===================================================


/P/🚀 prop_dir/VARIABLES.rst
==========================================


VARIABLES
---------

List of variables defined in the current directory.

This read-only property specifies the list of CMake variables
currently defined.  It is intended for debugging purposes.



/P/🚀 prop_dir/VS_GLOBAL_SECTION_POST_section.rst
===============================================================


VS_GLOBAL_SECTION_POST_<section>
--------------------------------

Specify a postSolution global section in Visual Studio.

Setting a property like this generates an entry of the following form
in the solution file:

::

  GlobalSection(<section>) = postSolution
    <contents based on property value>
  EndGlobalSection

The property must be set to a semicolon-separated list of ``key=value``
pairs.  Each such pair will be transformed into an entry in the
solution global section.  Whitespace around key and value is ignored.
List elements which do not contain an equal sign are skipped.

This property only works for Visual Studio 9 and above; it is ignored
on other generators.  The property only applies when set on a
directory whose ``CMakeLists.txt`` contains a :command:`project` command.

Note that CMake generates postSolution sections ``ExtensibilityGlobals``
and ``ExtensibilityAddIns`` by default.  If you set the corresponding
property, it will override the default section.  For example, setting
``VS_GLOBAL_SECTION_POST_ExtensibilityGlobals`` will override the default
contents of the ``ExtensibilityGlobals`` section, while keeping
ExtensibilityAddIns on its default.  However, CMake will always
add a ``SolutionGuid`` to the ``ExtensibilityGlobals`` section
if it is not specified explicitly.



/P/🚀 prop_dir/VS_GLOBAL_SECTION_PRE_section.rst
==============================================================


VS_GLOBAL_SECTION_PRE_<section>
-------------------------------

Specify a preSolution global section in Visual Studio.

Setting a property like this generates an entry of the following form
in the solution file:

::

  GlobalSection(<section>) = preSolution
    <contents based on property value>
  EndGlobalSection

The property must be set to a semicolon-separated list of ``key=value``
pairs.  Each such pair will be transformed into an entry in the
solution global section.  Whitespace around key and value is ignored.
List elements which do not contain an equal sign are skipped.

This property only works for Visual Studio 9 and above; it is ignored
on other generators.  The property only applies when set on a
directory whose ``CMakeLists.txt`` contains a :command:`project` command.



/P/🚀 prop_dir/VS_STARTUP_PROJECT.rst
===================================================


VS_STARTUP_PROJECT
------------------

.. versionadded:: 3.6

Specify the default startup project in a Visual Studio solution.

The :ref:`Visual Studio Generators` create a ``.sln`` file for each directory
whose ``CMakeLists.txt`` file calls the :command:`project` command.  Set this
property in the same directory as a :command:`project` command call (e.g. in
the top-level ``CMakeLists.txt`` file) to specify the default startup project
for the corresponding solution file.

The property must be set to the name of an existing target.  This
will cause that project to be listed first in the generated solution
file causing Visual Studio to make it the startup project if the
solution has never been opened before.

If this property is not specified, then the ``ALL_BUILD`` project
will be the default.



/P/🚀 prop_tgt/ADDITIONAL_CLEAN_FILES.rst
=======================================================


ADDITIONAL_CLEAN_FILES
----------------------

.. versionadded:: 3.15

A :ref:`;-list <CMake Language Lists>` of files or directories that will be
removed as a part of the global ``clean`` target.  It can be used to specify
files and directories that are generated as part of building the target or
that are directly associated with the target in some way (e.g. created as a
result of running the target).

For custom targets, if such files can be captured as outputs or byproducts
instead, then that should be preferred over adding them to this property.
If an additional clean file is used by multiple targets or isn't
target-specific, then the :prop_dir:`ADDITIONAL_CLEAN_FILES` directory
property may be the more appropriate property to use.

Relative paths are allowed and are interpreted relative to the
current binary directory.

Contents of ``ADDITIONAL_CLEAN_FILES`` may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.

This property only works for the :generator:`Ninja` and the Makefile
generators.  It is ignored by other generators.



/P/🚀 prop_tgt/AIX_EXPORT_ALL_SYMBOLS.rst
=======================================================


AIX_EXPORT_ALL_SYMBOLS
----------------------

.. versionadded:: 3.17

On AIX, CMake automatically exports all symbols from shared libraries, and
from executables with the :prop_tgt:`ENABLE_EXPORTS` target property set.
Explicitly disable this boolean property to suppress the behavior and
export no symbols by default.  In this case it is expected that the project
will use other means to export some symbols.

This property is initialized by the value of
the :variable:`CMAKE_AIX_EXPORT_ALL_SYMBOLS` variable if it is set
when a target is created.



/P/🚀 prop_tgt/ALIAS_GLOBAL.rst
=============================================


ALIAS_GLOBAL
------------

.. versionadded:: 3.18

Read-only property indicating of whether an :ref:`ALIAS target <Alias Targets>`
is globally visible.

The boolean value of this property is ``TRUE`` for aliases to
:ref:`IMPORTED targets <Imported Targets>` created
with the ``GLOBAL`` options to :command:`add_executable()` or
:command:`add_library()`, ``FALSE`` otherwise. It is undefined for
targets built within the project.

.. note::

  Promoting an :ref:`IMPORTED target <Imported Targets>` from ``LOCAL``
  to ``GLOBAL`` scope by changing the value or :prop_tgt:`IMPORTED_GLOBAL`
  target property do not change the scope of local aliases.



/P/🚀 prop_tgt/ALIASED_TARGET.rst
===============================================


ALIASED_TARGET
--------------

Name of target aliased by this target.

If this is an :ref:`Alias Target <Alias Targets>`, this property contains
the name of the target aliased.



/P/🚀 prop_tgt/ANDROID_ANT_ADDITIONAL_OPTIONS.rst
===============================================================


ANDROID_ANT_ADDITIONAL_OPTIONS
------------------------------

.. versionadded:: 3.4

Set the additional options for Android Ant build system. This is
a string value containing all command line options for the Ant build.
This property is initialized by the value of the
:variable:`CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS` variable if it is
set when a target is created.



/P/🚀 prop_tgt/ANDROID_API.rst
============================================


ANDROID_API
-----------

.. versionadded:: 3.1

When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio
Edition`, this property sets the Android target API version (e.g. ``15``).
The version number must be a positive decimal integer.  This property is
initialized by the value of the :variable:`CMAKE_ANDROID_API` variable if
it is set when a target is created.



/P/🚀 prop_tgt/ANDROID_API_MIN.rst
================================================


ANDROID_API_MIN
---------------

.. versionadded:: 3.2

Set the Android MIN API version (e.g. ``9``).  The version number
must be a positive decimal integer.  This property is initialized by
the value of the :variable:`CMAKE_ANDROID_API_MIN` variable if it is set
when a target is created.  Native code builds using this API version.



/P/🚀 prop_tgt/ANDROID_ARCH.rst
=============================================


ANDROID_ARCH
------------

.. versionadded:: 3.4

When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio
Edition`, this property sets the Android target architecture.

This is a string property that could be set to the one of
the following values:

* ``armv7-a``: "ARMv7-A (armv7-a)"
* ``armv7-a-hard``: "ARMv7-A, hard-float ABI (armv7-a)"
* ``arm64-v8a``: "ARMv8-A, 64bit (arm64-v8a)"
* ``x86``: "x86 (x86)"
* ``x86_64``: "x86_64 (x86_64)"

This property is initialized by the value of the
:variable:`CMAKE_ANDROID_ARCH` variable if it is set
when a target is created.



/P/🚀 prop_tgt/ANDROID_ASSETS_DIRECTORIES.rst
===========================================================


ANDROID_ASSETS_DIRECTORIES
--------------------------

.. versionadded:: 3.4

Set the Android assets directories to copy into the main assets
folder before build. This a string property that contains the
directory paths separated by semicolon.
This property is initialized by the value of the
:variable:`CMAKE_ANDROID_ASSETS_DIRECTORIES` variable if it is set when
a target is created.



/P/🚀 prop_tgt/ANDROID_GUI.rst
============================================


ANDROID_GUI
-----------

.. versionadded:: 3.1

When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio
Edition`, this property specifies whether to build an executable as an
application package on Android.

When this property is set to true the executable when built for Android
will be created as an application package.  This property is initialized
by the value of the :variable:`CMAKE_ANDROID_GUI` variable if it is set
when a target is created.

Add the ``AndroidManifest.xml`` source file explicitly to the
target :command:`add_executable` command invocation to specify the
root directory of the application package source.



/P/🚀 prop_tgt/ANDROID_JAR_DEPENDENCIES.rst
=========================================================


ANDROID_JAR_DEPENDENCIES
------------------------

.. versionadded:: 3.4

Set the Android property that specifies JAR dependencies.
This is a string value property. This property is initialized
by the value of the :variable:`CMAKE_ANDROID_JAR_DEPENDENCIES`
variable if it is set when a target is created.



/P/🚀 prop_tgt/ANDROID_JAR_DIRECTORIES.rst
========================================================


ANDROID_JAR_DIRECTORIES
-----------------------

.. versionadded:: 3.4

Set the Android property that specifies directories to search for
the JAR libraries.

This a string property that contains the directory paths separated by
semicolons. This property is initialized by the value of the
:variable:`CMAKE_ANDROID_JAR_DIRECTORIES` variable if it is set when
a target is created.

Contents of ``ANDROID_JAR_DIRECTORIES`` may use "generator expressions"
with the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
manual for available expressions.



/P/🚀 prop_tgt/ANDROID_JAVA_SOURCE_DIR.rst
========================================================


ANDROID_JAVA_SOURCE_DIR
-----------------------

.. versionadded:: 3.4

Set the Android property that defines the Java source code root directories.
This a string property that contains the directory paths separated by semicolon.
This property is initialized by the value of the
:variable:`CMAKE_ANDROID_JAVA_SOURCE_DIR` variable if it is set
when a target is created.



/P/🚀 prop_tgt/ANDROID_NATIVE_LIB_DEPENDENCIES.rst
================================================================


ANDROID_NATIVE_LIB_DEPENDENCIES
-------------------------------

.. versionadded:: 3.4

Set the Android property that specifies the .so dependencies.
This is a string property.

This property is initialized by the value of the
:variable:`CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES` variable if it is set
when a target is created.

Contents of ``ANDROID_NATIVE_LIB_DEPENDENCIES`` may use
"generator expressions" with the syntax ``$<...>``. See the
:manual:`cmake-generator-expressions(7)` manual for
available expressions.



/P/🚀 prop_tgt/ANDROID_NATIVE_LIB_DIRECTORIES.rst
===============================================================


ANDROID_NATIVE_LIB_DIRECTORIES
------------------------------

.. versionadded:: 3.4

Set the Android property that specifies directories to search for the ``.so``
libraries.

This a string property that contains the directory paths separated
by semicolons.

This property is initialized by the value of the
:variable:`CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES` variable if it is set when a
target is created.

Contents of ``ANDROID_NATIVE_LIB_DIRECTORIES`` may use "generator expressions"
with the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
manual for available expressions.



/P/🚀 prop_tgt/ANDROID_PROCESS_MAX.rst
====================================================


ANDROID_PROCESS_MAX
-------------------

.. versionadded:: 3.4

Set the Android property that defines the maximum number of a
parallel Android NDK compiler processes (e.g. ``4``).
This property is initialized by the value of the
:variable:`CMAKE_ANDROID_PROCESS_MAX` variable if it is set
when a target is created.



/P/🚀 prop_tgt/ANDROID_PROGUARD.rst
=================================================


ANDROID_PROGUARD
----------------

.. versionadded:: 3.4

When this property is set to true that enables the ProGuard tool to shrink,
optimize, and obfuscate the code by removing unused code and renaming
classes, fields, and methods with semantically obscure names.
This property is initialized by the value of the
:variable:`CMAKE_ANDROID_PROGUARD` variable if it is set
when a target is created.



/P/🚀 prop_tgt/ANDROID_PROGUARD_CONFIG_PATH.rst
=============================================================


ANDROID_PROGUARD_CONFIG_PATH
----------------------------

.. versionadded:: 3.4

Set the Android property that specifies the location of the ProGuard
config file. Leave empty to use the default one.
This a string property that contains the path to ProGuard config file.
This property is initialized by the value of the
:variable:`CMAKE_ANDROID_PROGUARD_CONFIG_PATH` variable if it is set
when a target is created.



/P/🚀 prop_tgt/ANDROID_SECURE_PROPS_PATH.rst
==========================================================


ANDROID_SECURE_PROPS_PATH
-------------------------

.. versionadded:: 3.4

Set the Android property that states the location of the secure properties file.
This is a string property that contains the file path.
This property is initialized by the value of the
:variable:`CMAKE_ANDROID_SECURE_PROPS_PATH` variable
if it is set when a target is created.



/P/🚀 prop_tgt/ANDROID_SKIP_ANT_STEP.rst
======================================================


ANDROID_SKIP_ANT_STEP
---------------------

.. versionadded:: 3.4

Set the Android property that defines whether or not to skip the Ant build step.
This is a boolean property initialized by the value of the
:variable:`CMAKE_ANDROID_SKIP_ANT_STEP` variable if it is set when a target is created.



/P/🚀 prop_tgt/ANDROID_STL_TYPE.rst
=================================================


ANDROID_STL_TYPE
----------------

.. versionadded:: 3.4

When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio
Edition`, this property specifies the type of STL support for the project.
This is a string property that could set to the one of the following values:

``none``
  No C++ Support
``system``
  Minimal C++ without STL
``gabi++_static``
  GAbi++ Static
``gabi++_shared``
  GAbi++ Shared
``gnustl_static``
  GNU libstdc++ Static
``gnustl_shared``
  GNU libstdc++ Shared
``stlport_static``
  STLport Static
``stlport_shared``
  STLport Shared

This property is initialized by the value of the
:variable:`CMAKE_ANDROID_STL_TYPE` variable if it is set when a target is
created.



/P/🚀 prop_tgt/ARCHIVE_OUTPUT_DIRECTORY.rst
=========================================================


ARCHIVE_OUTPUT_DIRECTORY
------------------------

.. |XXX| replace:: :ref:`ARCHIVE <Archive Output Artifacts>`
.. |xxx| replace:: archive
.. |CMAKE_XXX_OUTPUT_DIRECTORY| replace:: :variable:`CMAKE_ARCHIVE_OUTPUT_DIRECTORY`
.. include:: XXX_OUTPUT_DIRECTORY.txt

.. |IDEM| replace:: in the same directory
.. include:: MACOS_IMPORT_FILES.txt

See also the :prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>` target property.



/P/🚀 prop_tgt/ARCHIVE_OUTPUT_DIRECTORY_CONFIG.rst
================================================================


ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>
---------------------------------

Per-configuration output directory for
:ref:`ARCHIVE <Archive Output Artifacts>` target files.

This is a per-configuration version of the
:prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY` target property, but
multi-configuration generators (VS, Xcode) do NOT append a
per-configuration subdirectory to the specified directory.  This
property is initialized by the value of the
:variable:`CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>` variable if
it is set when a target is created.

Contents of ``ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>`` may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.



/P/🚀 prop_tgt/ARCHIVE_OUTPUT_NAME.rst
====================================================


ARCHIVE_OUTPUT_NAME
-------------------

.. |XXX| replace:: :ref:`ARCHIVE <Archive Output Artifacts>`
.. |xxx| replace:: archive
.. include:: XXX_OUTPUT_NAME.txt

.. |IDEM| replace:: with the same name
.. include:: MACOS_IMPORT_FILES.txt

See also the :prop_tgt:`ARCHIVE_OUTPUT_NAME_<CONFIG>` target property.



/P/🚀 prop_tgt/ARCHIVE_OUTPUT_NAME_CONFIG.rst
===========================================================


ARCHIVE_OUTPUT_NAME_<CONFIG>
----------------------------

Per-configuration output name for
:ref:`ARCHIVE <Archive Output Artifacts>` target files.

This is the configuration-specific version of the
:prop_tgt:`ARCHIVE_OUTPUT_NAME` target property.



/P/🚀 prop_tgt/AUTOGEN_BETTER_GRAPH_MULTI_CONFIG.rst
==================================================================


AUTOGEN_BETTER_GRAPH_MULTI_CONFIG
---------------------------------

.. versionadded:: 3.29

``AUTOGEN_BETTER_GRAPH_MULTI_CONFIG`` is a boolean property that can be set
on a target to have better dependency graph for multi-configuration generators.
When this property is enabled, ``CMake`` will generate more per-config targets.
Thus, the dependency graph will be more accurate for multi-configuration
generators and some recompilations will be avoided.

If the Qt version is 6.8 or newer, this property is enabled by default.
If the Qt version is older than 6.8, this property is disabled by default.
Consult the Qt documentation to check if the property can be enabled for older
Qt versions.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.

This property is initialized by the
:variable:`CMAKE_AUTOGEN_BETTER_GRAPH_MULTI_CONFIG` variable if it is set when
a target is created.



/P/🚀 prop_tgt/AUTOGEN_BUILD_DIR.rst
==================================================


AUTOGEN_BUILD_DIR
-----------------

.. versionadded:: 3.9

Directory where :prop_tgt:`AUTOMOC`, :prop_tgt:`AUTOUIC` and :prop_tgt:`AUTORCC`
generate files for the target.

The directory is created on demand and automatically added to the
:prop_tgt:`ADDITIONAL_CLEAN_FILES` target property.

When unset or empty the directory ``<dir>/<target-name>_autogen`` is used where
``<dir>`` is :variable:`CMAKE_CURRENT_BINARY_DIR` and ``<target-name>``
is :prop_tgt:`NAME`.

By default ``AUTOGEN_BUILD_DIR`` is unset.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.



/P/🚀 prop_tgt/AUTOGEN_COMMAND_LINE_LENGTH_MAX.rst
================================================================


AUTOGEN_COMMAND_LINE_LENGTH_MAX
-------------------------------

.. versionadded:: 3.29

Command line length limit for autogen targets, i.e. ``moc`` or ``uic``,
that triggers the use of response files on Windows instead of passing all
arguments to the command line.

- An empty (or unset) value sets the limit to 32000
- A positive non zero integer value sets the exact command line length
  limit.

By default ``AUTOGEN_COMMAND_LINE_LENGTH_MAX`` is initialized from
:variable:`CMAKE_AUTOGEN_COMMAND_LINE_LENGTH_MAX`.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.



/P/🚀 prop_tgt/AUTOGEN_ORIGIN_DEPENDS.rst
=======================================================


AUTOGEN_ORIGIN_DEPENDS
----------------------

.. versionadded:: 3.14

Switch for forwarding origin target dependencies to the corresponding
:ref:`<ORIGIN>_autogen` target.

  .. note::

    If Qt 5.15 or later is used and the generator is either :generator:`Ninja`
    or :ref:`Makefile Generators`, origin target dependencies are forwarded to
    the :ref:`<ORIGIN>_autogen_timestamp_deps` target instead of
    :ref:`<ORIGIN>_autogen`


Targets which have their :prop_tgt:`AUTOMOC` or :prop_tgt:`AUTOUIC` property
``ON`` have a corresponding :ref:`<ORIGIN>_autogen` target which generates
``moc`` and ``uic`` files.  As this :ref:`<ORIGIN>_autogen` target is created at
generate-time, it is not possible to define dependencies of it using
e.g.  :command:`add_dependencies`.  Instead the ``AUTOGEN_ORIGIN_DEPENDS``
target property decides whether the origin target dependencies should be
forwarded to the :ref:`<ORIGIN>_autogen` target or not.

By default ``AUTOGEN_ORIGIN_DEPENDS`` is initialized from
:variable:`CMAKE_AUTOGEN_ORIGIN_DEPENDS` which is ``ON`` by default.

In total the dependencies of the :ref:`<ORIGIN>_autogen` target are composed
from

- forwarded origin target dependencies
  (enabled by default via ``AUTOGEN_ORIGIN_DEPENDS``)
- additional user defined dependencies from :prop_tgt:`AUTOGEN_TARGET_DEPENDS`

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.

.. note::

    Disabling ``AUTOGEN_ORIGIN_DEPENDS`` is useful to avoid building of
    origin target dependencies when building the :ref:`<ORIGIN>_autogen` target
    only. This is especially interesting when a
    :variable:`global autogen target <CMAKE_GLOBAL_AUTOGEN_TARGET>` is enabled.

    When the :ref:`<ORIGIN>_autogen` target doesn't require all the origin target's
    dependencies, and ``AUTOGEN_ORIGIN_DEPENDS`` is disabled, it might be
    necessary to extend :prop_tgt:`AUTOGEN_TARGET_DEPENDS` to add missing
    dependencies.



/P/🚀 prop_tgt/AUTOGEN_PARALLEL.rst
=================================================


AUTOGEN_PARALLEL
----------------

.. versionadded:: 3.11

Number of parallel ``moc`` or ``uic`` processes to start when using
:prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC`.

The custom :ref:`<ORIGIN>_autogen` target starts a number of threads of which
each one parses a source file and on demand starts a ``moc`` or ``uic``
process. ``AUTOGEN_PARALLEL`` controls how many parallel threads
(and therefore ``moc`` or ``uic`` processes) are started.

- An empty (or unset) value or the string ``AUTO`` sets the number of
  threads/processes to the number of physical CPUs on the host system.
- A positive non zero integer value sets the exact thread/process count.
- Otherwise a single thread/process is started.

By default ``AUTOGEN_PARALLEL`` is initialized from
:variable:`CMAKE_AUTOGEN_PARALLEL`.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.



/P/🚀 prop_tgt/AUTOGEN_TARGET_DEPENDS.rst
=======================================================


AUTOGEN_TARGET_DEPENDS
----------------------

Additional target dependencies of the corresponding :ref:`<ORIGIN>_autogen`
target.

  .. note::

    If Qt 5.15 or later is used and the generator is either :generator:`Ninja`
    or :ref:`Makefile Generators`, additional target dependencies are added to
    the :ref:`<ORIGIN>_autogen_timestamp_deps` target instead of the
    :ref:`<ORIGIN>_autogen` target.


Targets which have their :prop_tgt:`AUTOMOC` or :prop_tgt:`AUTOUIC` property
``ON`` have a corresponding :ref:`<ORIGIN>_autogen`  target which generates
``moc`` and ``uic`` files.  As this :ref:`<ORIGIN>_autogen`  target is created
at generate-time, it is not possible to define dependencies of it using e.g.
:command:`add_dependencies`.  Instead the ``AUTOGEN_TARGET_DEPENDS`` target
property can be set to a :ref:`;-list <CMake Language Lists>` of additional
dependencies for the :ref:`<ORIGIN>_autogen`  target. Dependencies can be target
names or file names.

In total the dependencies of the :ref:`<ORIGIN>_autogen`  target are composed
from

- forwarded origin target dependencies
  (enabled by default via :prop_tgt:`AUTOGEN_ORIGIN_DEPENDS`)
- additional user defined dependencies from ``AUTOGEN_TARGET_DEPENDS``

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.

Use cases
^^^^^^^^^

If :prop_tgt:`AUTOMOC` or :prop_tgt:`AUTOUIC` depends on a file that is either

- a :prop_sf:`GENERATED` non C++ file (e.g. a :prop_sf:`GENERATED` ``.json``
  or ``.ui`` file) or
- a :prop_sf:`GENERATED` C++ file that isn't recognized by :prop_tgt:`AUTOMOC`
  and :prop_tgt:`AUTOUIC` because it's skipped by :prop_sf:`SKIP_AUTOMOC`,
  :prop_sf:`SKIP_AUTOUIC`, :prop_sf:`SKIP_AUTOGEN` or :policy:`CMP0071` or
- a file that isn't in the origin target's sources

it must be added to ``AUTOGEN_TARGET_DEPENDS``.



/P/🚀 prop_tgt/AUTOGEN_USE_SYSTEM_INCLUDE.rst
===========================================================


AUTOGEN_USE_SYSTEM_INCLUDE
--------------------------

.. versionadded:: 3.27

``AUTOGEN_USE_SYSTEM_INCLUDE`` is a boolean property that can be set
on a target to indicate that the autogen target include directory should
be added as a system include directory or normal include directory to the
target.

If this property is not set, the autogen target include directory is added
as a system include directory by default.  See policy :policy:`CMP0151`.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.

This property is initialized by the
:variable:`CMAKE_AUTOGEN_USE_SYSTEM_INCLUDE` variable if it is set when
a target is created.



/P/🚀 prop_tgt/AUTOMOC.rst
========================================


AUTOMOC
-------

Should the target be processed with auto-moc (for Qt projects).

``AUTOMOC`` is a boolean specifying whether CMake will handle the Qt ``moc``
preprocessor automatically, i.e.  without having to use commands like
:module:`QT4_WRAP_CPP() <FindQt4>`, `qt5_wrap_cpp()`_, etc.
Currently, Qt versions 4 to 6 are supported.

.. _qt5_wrap_cpp(): https://doc.qt.io/qt-5/qtcore-cmake-qt5-wrap-cpp.html

This property is initialized by the value of the :variable:`CMAKE_AUTOMOC`
variable if it is set when a target is created.

When this property is set ``ON``, CMake will scan the header and
source files at build time and invoke ``moc`` accordingly.


Header file processing
^^^^^^^^^^^^^^^^^^^^^^

At configuration time, a list of header files that should be scanned by
``AUTOMOC`` is computed from the target's sources.

- All header files in the target's sources are added to the scan list.
- For all C++ source files ``<source_base>.<source_extension>`` in the
  target's sources, CMake searches for

  - a regular header with the same base name
    (``<source_base>.<header_extention>``) and
  - a private header with the same base name and a ``_p`` suffix
    (``<source_base>_p.<header_extention>``)

  and adds these to the scan list.

At build time, CMake scans each unknown or modified header file from the
list and searches for

- a Qt macro from :prop_tgt:`AUTOMOC_MACRO_NAMES`,
- additional file dependencies from the ``FILE`` argument of a
  ``Q_PLUGIN_METADATA`` macro and
- additional file dependencies detected by filters defined in
  :prop_tgt:`AUTOMOC_DEPEND_FILTERS`.

If a Qt macro is found, then the header will be compiled by the ``moc`` to the
output file ``moc_<base_name>.cpp``.  The complete output file path is
described in the section `Output file location`_.

The header will be ``moc`` compiled again if a file from the additional file
dependencies changes.

Header ``moc`` output files ``moc_<base_name>.cpp`` can be included in source
files.  In the section `Including header moc files in sources`_ there is more
information on that topic.


Source file processing
^^^^^^^^^^^^^^^^^^^^^^

At build time, CMake scans each unknown or modified C++ source file from the
target's sources for

- a Qt macro from :prop_tgt:`AUTOMOC_MACRO_NAMES`,
- includes of header ``moc`` files
  (see `Including header moc files in sources`_),
- additional file dependencies from the ``FILE`` argument of a
  ``Q_PLUGIN_METADATA`` macro and
- additional file dependencies detected by filters defined in
  :prop_tgt:`AUTOMOC_DEPEND_FILTERS`.

If a Qt macro is found, then the C++ source file
``<base>.<source_extension>`` is expected to as well contain an include
statement

.. code-block:: c++

  #include <<base>.moc> // or
  #include "<base>.moc"

The source file then will be compiled by the ``moc`` to the output file
``<base>.moc``.  A description of the complete output file path is in section
`Output file location`_.

The source will be ``moc`` compiled again if a file from the additional file
dependencies changes.

Including header moc files in sources
"""""""""""""""""""""""""""""""""""""

A source file can include the ``moc`` output file of a header
``<header_base>.<header_extension>`` by using an include statement of
the form

.. code-block:: c++

  #include <moc_<header_base>.cpp> // or
  #include "moc_<header_base>.cpp"

If the ``moc`` output file of a header is included by a source, it will
be generated in a different location than if it was not included.  This is
described in the section `Output file location`_.


Output file location
^^^^^^^^^^^^^^^^^^^^

Included moc output files
"""""""""""""""""""""""""

``moc`` output files that are included by a source file will be generated in

- ``<AUTOGEN_BUILD_DIR>/include``
  for single configuration generators or in
- ``<AUTOGEN_BUILD_DIR>/include_<CONFIG>``
  for :prop_gbl:`multi configuration <GENERATOR_IS_MULTI_CONFIG>` generators.

Where ``<AUTOGEN_BUILD_DIR>`` is the value of the target property
:prop_tgt:`AUTOGEN_BUILD_DIR`.

The include directory is automatically added to the target's
:prop_tgt:`INCLUDE_DIRECTORIES`.

Not included moc output files
"""""""""""""""""""""""""""""

``moc`` output files that are not included in a source file will be generated
in

- ``<AUTOGEN_BUILD_DIR>/<SOURCE_DIR_CHECKSUM>``
  for single configuration generators or in,
- ``<AUTOGEN_BUILD_DIR>/include_<CONFIG>/<SOURCE_DIR_CHECKSUM>``
  for :prop_gbl:`multi configuration <GENERATOR_IS_MULTI_CONFIG>` generators.

Where ``<SOURCE_DIR_CHECKSUM>`` is a checksum computed from the relative
parent directory path of the ``moc`` input file.  This scheme allows to have
``moc`` input files with the same name in different directories.

All not included ``moc`` output files will be included automatically by the
CMake generated file

- ``<AUTOGEN_BUILD_DIR>/mocs_compilation.cpp``, or
- ``<AUTOGEN_BUILD_DIR>/mocs_compilation_$<CONFIG>.cpp``,

which is added to the target's sources.


Qt version detection
^^^^^^^^^^^^^^^^^^^^

``AUTOMOC`` enabled targets need to know the Qt major and minor
version they're working with.  The major version usually is provided by the
``INTERFACE_QT_MAJOR_VERSION`` property of the ``Qt[456]Core`` library,
that the target links to.  To find the minor version, CMake builds a list of
available Qt versions from

- ``Qt6Core_VERSION_MAJOR`` and ``Qt6Core_VERSION_MINOR`` variables
  (usually set by ``find_package(Qt6...)``)
- ``Qt6Core_VERSION_MAJOR`` and ``Qt6Core_VERSION_MINOR`` directory properties
- ``Qt5Core_VERSION_MAJOR`` and ``Qt5Core_VERSION_MINOR`` variables
  (usually set by ``find_package(Qt5...)``)
- ``Qt5Core_VERSION_MAJOR`` and ``Qt5Core_VERSION_MINOR`` directory properties
- ``QT_VERSION_MAJOR`` and ``QT_VERSION_MINOR``  variables
  (usually set by ``find_package(Qt4...)``)
- ``QT_VERSION_MAJOR`` and ``QT_VERSION_MINOR``  directory properties

in the context of the :command:`add_executable` or :command:`add_library` call.

Assumed  ``INTERFACE_QT_MAJOR_VERSION`` is a valid number, the first
entry in the list with a matching major version is taken.  If no matching major
version was found, an error is generated.
If  ``INTERFACE_QT_MAJOR_VERSION`` is not a valid number, the first
entry in the list is taken.

A ``find_package(Qt[456]...)`` call sets the ``QT/Qt[56]Core_VERSION_MAJOR/MINOR``
variables.  If the call is in a different context than the
:command:`add_executable` or :command:`add_library` call, e.g. in a function,
then the version variables might not be available to the ``AUTOMOC``
enabled target.
In that case the version variables can be forwarded from the
``find_package(Qt[456]...)`` calling context to the :command:`add_executable`
or :command:`add_library` calling context as directory properties.
The following Qt5 example demonstrates the procedure.

.. code-block:: cmake

  function (add_qt5_client)
    find_package(Qt5 REQUIRED QUIET COMPONENTS Core Widgets)
    ...
    set_property(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
      PROPERTY Qt5Core_VERSION_MAJOR "${Qt5Core_VERSION_MAJOR}")
    set_property(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
      PROPERTY Qt5Core_VERSION_MINOR "${Qt5Core_VERSION_MAJOR}")
    ...
  endfunction ()
  ...
  add_qt5_client()
  add_executable(myTarget main.cpp)
  target_link_libraries(myTarget Qt5::QtWidgets)
  set_property(TARGET myTarget PROPERTY AUTOMOC ON)


Modifiers
^^^^^^^^^

:prop_tgt:`AUTOMOC_EXECUTABLE`:
The ``moc`` executable will be detected automatically, but can be forced to
a certain binary using this target property.

:prop_tgt:`AUTOMOC_MOC_OPTIONS`:
Additional command line options for ``moc`` can be set in this target property.

:prop_tgt:`AUTOMOC_MACRO_NAMES`:
This list of Qt macro names can be extended to search for additional macros in
headers and sources.

:prop_tgt:`AUTOMOC_DEPEND_FILTERS`:
``moc`` dependency file names can be extracted from headers or sources by
defining file name filters in this target property.

:prop_tgt:`AUTOMOC_COMPILER_PREDEFINES`:
Compiler pre definitions for ``moc`` are written to the ``moc_predefs.h`` file.
The generation of this file can be enabled or disabled in this target property.

:prop_sf:`SKIP_AUTOMOC`:
Sources and headers can be excluded from ``AUTOMOC`` processing by
setting this source file property.

:prop_sf:`SKIP_AUTOGEN`:
Source files can be excluded from ``AUTOMOC``,
:prop_tgt:`AUTOUIC` and :prop_tgt:`AUTORCC` processing by
setting this source file property.

:prop_gbl:`AUTOGEN_SOURCE_GROUP`:
This global property can be used to group files generated by
``AUTOMOC`` or :prop_tgt:`AUTORCC` together in an IDE, e.g.  in MSVS.

:prop_gbl:`AUTOGEN_TARGETS_FOLDER`:
This global property can be used to group ``AUTOMOC``,
:prop_tgt:`AUTOUIC` and :prop_tgt:`AUTORCC` targets together in an IDE,
e.g.  in MSVS.

:variable:`CMAKE_GLOBAL_AUTOGEN_TARGET`:
A global ``autogen`` target, that depends on all ``AUTOMOC`` or
:prop_tgt:`AUTOUIC` generated :ref:`<ORIGIN>_autogen` targets in the project,
will be generated when this variable is ``ON``.

:prop_tgt:`AUTOGEN_PARALLEL`:
This target property controls the number of ``moc`` or ``uic`` processes to
start in parallel during builds.

:prop_tgt:`AUTOGEN_COMMAND_LINE_LENGTH_MAX`:
This target property controls the limit when to use response files for
``moc`` or ``uic`` processes on Windows.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.



/P/🚀 prop_tgt/AUTOMOC_COMPILER_PREDEFINES.rst
============================================================


AUTOMOC_COMPILER_PREDEFINES
---------------------------

.. versionadded:: 3.10

Boolean value used by :prop_tgt:`AUTOMOC` to determine if the
compiler pre definitions file ``moc_predefs.h`` should be generated.

CMake generates a ``moc_predefs.h`` file with compiler pre definitions
from the output of the command defined in
:variable:`CMAKE_CXX_COMPILER_PREDEFINES_COMMAND <CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND>`
when

- :prop_tgt:`AUTOMOC` is enabled,
- ``AUTOMOC_COMPILER_PREDEFINES`` is enabled,
- :variable:`CMAKE_CXX_COMPILER_PREDEFINES_COMMAND <CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND>` isn't empty and
- the Qt version is greater or equal 5.8.

The ``moc_predefs.h`` file, which is generated in :prop_tgt:`AUTOGEN_BUILD_DIR`,
is passed to ``moc`` as the argument to the ``--include`` option.

By default ``AUTOMOC_COMPILER_PREDEFINES`` is initialized from
:variable:`CMAKE_AUTOMOC_COMPILER_PREDEFINES`, which is ON by default.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.



/P/🚀 prop_tgt/AUTOMOC_DEPEND_FILTERS.rst
=======================================================


AUTOMOC_DEPEND_FILTERS
----------------------

.. versionadded:: 3.9

Filter definitions used by :prop_tgt:`AUTOMOC` to extract file names from a
source file that are registered as additional dependencies for the
``moc`` file of the source file.

Filters are defined as ``KEYWORD;REGULAR_EXPRESSION`` pairs. First the file
content is searched for ``KEYWORD``. If it is found at least once, then file
names are extracted by successively searching for ``REGULAR_EXPRESSION`` and
taking the first match group.

The file name found in the first match group is searched for

- first in the vicinity of the source file
- and afterwards in the target's :prop_tgt:`INCLUDE_DIRECTORIES`.

If any of the extracted files changes, then the ``moc`` file for the source
file gets rebuilt even when the source file itself doesn't change.

If any of the extracted files is :prop_sf:`GENERATED` or if it is not in the
target's sources, then it might be necessary to add it to the
:ref:`<ORIGIN>_autogen` target  dependencies.
See :prop_tgt:`AUTOGEN_TARGET_DEPENDS` for reference.

By default ``AUTOMOC_DEPEND_FILTERS`` is initialized from
:variable:`CMAKE_AUTOMOC_DEPEND_FILTERS`, which is empty by default.

From Qt 5.15.0 on this variable is ignored as ``moc`` is able to output the
correct dependencies.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.


Example 1
^^^^^^^^^

A header file ``my_class.hpp`` uses a custom macro ``JSON_FILE_MACRO`` which
is defined in an other header ``macros.hpp``.
We want the ``moc`` file of ``my_class.hpp`` to depend on the file name
argument of ``JSON_FILE_MACRO``::

  // my_class.hpp
  class My_Class : public QObject
  {
    Q_OBJECT
    JSON_FILE_MACRO ( "info.json" )
  ...
  };

In ``CMakeLists.txt`` we add a filter to
:variable:`CMAKE_AUTOMOC_DEPEND_FILTERS` like this::

  list( APPEND CMAKE_AUTOMOC_DEPEND_FILTERS
    "JSON_FILE_MACRO"
    "[\n][ \t]*JSON_FILE_MACRO[ \t]*\\([ \t]*\"([^\"]+)\""
  )

We assume ``info.json`` is a plain (not :prop_sf:`GENERATED`) file that is
listed in the target's source.  Therefore we do not need to add it to
:prop_tgt:`AUTOGEN_TARGET_DEPENDS`.

Example 2
^^^^^^^^^

In the target ``my_target`` a header file ``complex_class.hpp`` uses a
custom macro ``JSON_BASED_CLASS`` which is defined in an other header
``macros.hpp``::

  // macros.hpp
  ...
  #define JSON_BASED_CLASS(name, json) \
  class name : public QObject \
  { \
    Q_OBJECT \
    Q_PLUGIN_METADATA(IID "demo" FILE json) \
    name() {} \
  };
  ...

::

  // complex_class.hpp
  #pragma once
  JSON_BASED_CLASS(Complex_Class, "meta.json")
  // end of file

Since ``complex_class.hpp`` doesn't contain a ``Q_OBJECT`` macro it would be
ignored by :prop_tgt:`AUTOMOC`.  We change this by adding ``JSON_BASED_CLASS``
to :variable:`CMAKE_AUTOMOC_MACRO_NAMES`::

  list(APPEND CMAKE_AUTOMOC_MACRO_NAMES "JSON_BASED_CLASS")

We want the ``moc`` file of ``complex_class.hpp`` to depend on
``meta.json``.  So we add a filter to
:variable:`CMAKE_AUTOMOC_DEPEND_FILTERS`::

  list(APPEND CMAKE_AUTOMOC_DEPEND_FILTERS
    "JSON_BASED_CLASS"
    "[\n^][ \t]*JSON_BASED_CLASS[ \t]*\\([^,]*,[ \t]*\"([^\"]+)\""
  )

Additionally we assume ``meta.json`` is :prop_sf:`GENERATED` which is
why we have to add it to :prop_tgt:`AUTOGEN_TARGET_DEPENDS`::

  set_property(TARGET my_target APPEND PROPERTY AUTOGEN_TARGET_DEPENDS "meta.json")



/P/🚀 prop_tgt/AUTOMOC_EXECUTABLE.rst
===================================================


AUTOMOC_EXECUTABLE
------------------

.. versionadded:: 3.14

``AUTOMOC_EXECUTABLE`` is file path pointing to the ``moc``
executable to use for :prop_tgt:`AUTOMOC` enabled files. Setting
this property will make CMake skip the automatic detection of the
``moc`` binary as well as the sanity-tests normally run to ensure
that the binary is available and working as expected.

Usually this property does not need to be set. Only consider this
property if auto-detection of ``moc`` can not work -- e.g. because
you are building the ``moc`` binary as part of your project.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.



/P/🚀 prop_tgt/AUTOMOC_MACRO_NAMES.rst
====================================================


AUTOMOC_MACRO_NAMES
-------------------

.. versionadded:: 3.10

A :ref:`semicolon-separated list <CMake Language Lists>` of macro names used by
:prop_tgt:`AUTOMOC` to determine if a C++ file needs to be processed by ``moc``.

This property is only used if the :prop_tgt:`AUTOMOC` property is ``ON``
for this target.

When running :prop_tgt:`AUTOMOC`, CMake searches for the strings listed in
``AUTOMOC_MACRO_NAMES`` in C++ source and header files.
If any of the strings is found

- as the first non space string on a new line or
- as the first non space string after a ``{`` on a new line,

then the file will be processed by ``moc``.

By default ``AUTOMOC_MACRO_NAMES`` is initialized from
:variable:`CMAKE_AUTOMOC_MACRO_NAMES`.

See also the :prop_tgt:`INTERFACE_AUTOMOC_MACRO_NAMES` target property.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.

Example
^^^^^^^

In this case the ``Q_OBJECT`` macro is hidden inside another macro
called ``CUSTOM_MACRO``.  To let CMake know that source files that contain
``CUSTOM_MACRO`` need to be ``moc`` processed, we call:

.. code-block:: cmake

  set_property(TARGET tgt APPEND PROPERTY AUTOMOC_MACRO_NAMES "CUSTOM_MACRO")



/P/🚀 prop_tgt/AUTOMOC_MOC_OPTIONS.rst
====================================================


AUTOMOC_MOC_OPTIONS
-------------------

Additional options for ``moc`` when using :prop_tgt:`AUTOMOC`

This property is only used if the :prop_tgt:`AUTOMOC` property is ``ON``
for this target.  In this case, it holds additional command line
options which will be used when ``moc`` is executed during the build, i.e.
it is equivalent to the optional ``OPTIONS`` argument of the
:module:`qt4_wrap_cpp() <FindQt4>` macro.

This property is initialized by the value of the
:variable:`CMAKE_AUTOMOC_MOC_OPTIONS` variable if it is set when a target
is created, or an empty string otherwise.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.

EXAMPLE
^^^^^^^

In this example, the ``moc`` tool is invoked with the ``-D_EXTRA_DEFINE``
option when generating the moc file for ``object.cpp``.

``CMakeLists.txt``
  .. code-block:: cmake

    add_executable(mocOptions object.cpp main.cpp)
    set_property(TARGET mocOptions PROPERTY AUTOMOC ON)
    target_compile_options(mocOptions PRIVATE "-D_EXTRA_DEFINE")
    set_property(TARGET mocOptions PROPERTY AUTOMOC_MOC_OPTIONS "-D_EXTRA_DEFINE")
    target_link_libraries(mocOptions Qt6::Core)

``object.hpp``
  .. code-block:: c++

    #ifndef Object_HPP
    #define Object_HPP

    #include <QObject>

    #ifdef _EXTRA_DEFINE
    class Object : public QObject
    {
    Q_OBJECT
    public:

      Object();

    };
    #endif

    #endif



/P/🚀 prop_tgt/AUTOMOC_PATH_PREFIX.rst
====================================================


AUTOMOC_PATH_PREFIX
-------------------

.. versionadded:: 3.16

When this property is ``ON``, CMake will generate the ``-p`` path prefix
option for ``moc`` on :prop_tgt:`AUTOMOC` enabled Qt targets.

To generate the path prefix, CMake tests if the header compiled by ``moc``
is in any of the target
:command:`include directories <target_include_directories>`.  If so, CMake will
compute the relative path accordingly.  If the header is not in the
:command:`include directories <target_include_directories>`, CMake will omit
the ``-p`` path prefix option.  ``moc`` usually generates a
relative include path in that case.

``AUTOMOC_PATH_PREFIX`` is initialized from the variable
:variable:`CMAKE_AUTOMOC_PATH_PREFIX`, which is ``OFF`` by default.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.

Reproducible builds
^^^^^^^^^^^^^^^^^^^

For reproducible builds it is recommended to keep headers that are ``moc``
compiled in one of the target
:command:`include directories <target_include_directories>` and set
``AUTOMOC_PATH_PREFIX`` to ``ON``.  This ensures that:

- ``moc`` output files are identical on different build setups,
- ``moc`` output files will compile correctly when the source and/or
  build directory is a symbolic link.



/P/🚀 prop_tgt/AUTORCC.rst
========================================


AUTORCC
-------

Should the target be processed with auto-rcc (for Qt projects).

``AUTORCC`` is a boolean specifying whether CMake will handle
the Qt ``rcc`` code generator automatically, i.e. without having to use
commands like :module:`QT4_ADD_RESOURCES() <FindQt4>`, `qt5_add_resources()`_,
etc.  Currently, Qt versions 4 to 6 are supported.

.. _`qt5_add_resources()`: https://doc.qt.io/qt-5/qtcore-cmake-qt5-add-resources.html

When this property is ``ON``, CMake will handle ``.qrc`` files added
as target sources at build time and invoke ``rcc`` accordingly.
This property is initialized by the value of the :variable:`CMAKE_AUTORCC`
variable if it is set when a target is created.

By default ``AUTORCC`` is processed by a
:command:`custom command <add_custom_command>`.
If the ``.qrc`` file is :prop_sf:`GENERATED`, a
:command:`custom target <add_custom_target>` is used instead.

When there are multiple ``.qrc`` files with the same name, CMake will
generate unspecified unique output file names for ``rcc``.  Therefore, if
``Q_INIT_RESOURCE()`` or ``Q_CLEANUP_RESOURCE()`` need to be used, the
``.qrc`` file name must be unique.


Modifiers
^^^^^^^^^

:prop_tgt:`AUTORCC_EXECUTABLE`:
The ``rcc`` executable will be detected automatically, but can be forced to
a certain binary by setting this target property.

:prop_tgt:`AUTORCC_OPTIONS`:
Additional command line options for ``rcc`` can be set via this target
property.  The corresponding :prop_sf:`AUTORCC_OPTIONS` source file property
can be used to specify options to be applied only to a specific ``.qrc`` file.

:prop_sf:`SKIP_AUTORCC`:
``.qrc`` files can be excluded from ``AUTORCC`` processing by
setting this source file property.

:prop_sf:`SKIP_AUTOGEN`:
Source files can be excluded from :prop_tgt:`AUTOMOC`,
:prop_tgt:`AUTOUIC` and ``AUTORCC`` processing by
setting this source file property.

:prop_gbl:`AUTOGEN_SOURCE_GROUP`:
This global property can be used to group files generated by
:prop_tgt:`AUTOMOC` or ``AUTORCC`` together in an IDE, e.g.  in MSVS.

:prop_gbl:`AUTOGEN_TARGETS_FOLDER`:
This global property can be used to group :prop_tgt:`AUTOMOC`,
:prop_tgt:`AUTOUIC` and ``AUTORCC`` targets together in an IDE,
e.g.  in MSVS.

:variable:`CMAKE_GLOBAL_AUTORCC_TARGET`:
A global ``autorcc`` target that depends on all ``AUTORCC`` targets
in the project will be generated when this variable is ``ON``.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.



/P/🚀 prop_tgt/AUTORCC_EXECUTABLE.rst
===================================================


AUTORCC_EXECUTABLE
------------------

.. versionadded:: 3.14

``AUTORCC_EXECUTABLE`` is file path pointing to the ``rcc``
executable to use for :prop_tgt:`AUTORCC` enabled files. Setting
this property will make CMake skip the automatic detection of the
``rcc`` binary as well as the sanity-tests normally run to ensure
that the binary is available and working as expected.

Usually this property does not need to be set. Only consider this
property if auto-detection of ``rcc`` can not work -- e.g. because
you are building the ``rcc`` binary as part of your project.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.



/P/🚀 prop_tgt/AUTORCC_OPTIONS.rst
================================================


AUTORCC_OPTIONS
---------------

Additional options for ``rcc`` when using :prop_tgt:`AUTORCC`

This property holds additional command line options which will be used
when ``rcc`` is executed during the build via :prop_tgt:`AUTORCC`,
i.e. it is equivalent to the optional ``OPTIONS`` argument of the
:module:`qt4_add_resources() <FindQt4>` macro.

This property is initialized by the value of the
:variable:`CMAKE_AUTORCC_OPTIONS` variable if it is set when a target is
created, or an empty string otherwise.

The options set on the target may be overridden by :prop_sf:`AUTORCC_OPTIONS`
set on the ``.qrc`` source file.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.

EXAMPLE
^^^^^^^

.. code-block:: cmake

  # ...
  set_property(TARGET tgt PROPERTY AUTORCC_OPTIONS "--compress;9")
  # ...



/P/🚀 prop_tgt/AUTOUIC.rst
========================================


AUTOUIC
-------

Should the target be processed with auto-uic (for Qt projects).

``AUTOUIC`` is a boolean specifying whether CMake will handle
the Qt ``uic`` code generator automatically, i.e. without having to use
commands like :module:`QT4_WRAP_UI() <FindQt4>`, `qt5_wrap_ui()`_, etc.
Currently, Qt versions 4 to 6 are supported.

.. _`qt5_wrap_ui()`: https://doc.qt.io/qt-5/qtwidgets-cmake-qt5-wrap-ui.html

This property is initialized by the value of the :variable:`CMAKE_AUTOUIC`
variable if it is set when a target is created.

When this property is ``ON``, CMake will scan the header and source files at
build time and invoke ``uic`` accordingly.


Header and source file processing
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

At build time, CMake scans each header and source file from the
target's sources for include statements of the form

.. code-block:: c++

  #include "ui_<ui_base>.h"

Once such an include statement is found in a file, CMake searches for the
``uic`` input file ``<ui_base>.ui``

- in the vicinity of the file and
- in the :prop_tgt:`AUTOUIC_SEARCH_PATHS` of the target.

If the ``<ui_base>.ui`` file was found, ``uic`` is called on it to generate
``ui_<ui_base>.h`` in the directory

- ``<AUTOGEN_BUILD_DIR>/include`` for single configuration generators or in
- ``<AUTOGEN_BUILD_DIR>/include_<CONFIG>`` for
  :prop_gbl:`multi configuration <GENERATOR_IS_MULTI_CONFIG>` generators.

Where ``<AUTOGEN_BUILD_DIR>`` is the value of the target property
:prop_tgt:`AUTOGEN_BUILD_DIR`.

The include directory is automatically added to the target's
:prop_tgt:`INCLUDE_DIRECTORIES`.


Modifiers
^^^^^^^^^

:prop_tgt:`AUTOUIC_EXECUTABLE`:
The ``uic`` executable will be detected automatically, but can be forced to
a certain binary using this target property.

:prop_tgt:`AUTOUIC_OPTIONS`:
Additional command line options for ``uic`` can be set via this target
property.  The corresponding :prop_sf:`AUTOUIC_OPTIONS` source file property
can be used to specify options to be applied only to a specific
``<base_name>.ui`` file.

:prop_sf:`SKIP_AUTOUIC`:
Source files can be excluded from ``AUTOUIC`` processing by setting
this source file property.

:prop_sf:`SKIP_AUTOGEN`:
Source files can be excluded from :prop_tgt:`AUTOMOC`,
``AUTOUIC`` and :prop_tgt:`AUTORCC` processing by
setting this source file property.

:prop_gbl:`AUTOGEN_TARGETS_FOLDER`:
This global property can be used to group :prop_tgt:`AUTOMOC`,
``AUTOUIC`` and :prop_tgt:`AUTORCC` targets together in an IDE,
e.g.  in MSVS.

:variable:`CMAKE_GLOBAL_AUTOGEN_TARGET`:
A global ``autogen`` target, that depends on all :prop_tgt:`AUTOMOC` or
``AUTOUIC`` generated :ref:`<ORIGIN>_autogen` targets in the project,
will be generated when this variable is ``ON``.

:prop_tgt:`AUTOGEN_PARALLEL`:
This target property controls the number of ``moc`` or ``uic`` processes to
start in parallel during builds.

:prop_tgt:`AUTOGEN_COMMAND_LINE_LENGTH_MAX`:
This target property controls the limit when to use response files for
``moc`` or ``uic`` processes on Windows.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.



/P/🚀 prop_tgt/AUTOUIC_EXECUTABLE.rst
===================================================


AUTOUIC_EXECUTABLE
------------------

.. versionadded:: 3.14

``AUTOUIC_EXECUTABLE`` is file path pointing to the ``uic``
executable to use for :prop_tgt:`AUTOUIC` enabled files. Setting
this property will make CMake skip the automatic detection of the
``uic`` binary as well as the sanity-tests normally run to ensure
that the binary is available and working as expected.

Usually this property does not need to be set. Only consider this
property if auto-detection of ``uic`` can not work -- e.g. because
you are building the ``uic`` binary as part of your project.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.



/P/🚀 prop_tgt/AUTOUIC_OPTIONS.rst
================================================


AUTOUIC_OPTIONS
---------------

Additional options for ``uic`` when using :prop_tgt:`AUTOUIC`

This property holds additional command line options which will be used when
``uic`` is executed during the build via :prop_tgt:`AUTOUIC`, i.e. it is
equivalent to the optional ``OPTIONS`` argument of the
:module:`qt4_wrap_ui() <FindQt4>` macro.

This property is initialized by the value of the
:variable:`CMAKE_AUTOUIC_OPTIONS` variable if it is set when a target is
created, or an empty string otherwise.

The options set on the target may be overridden by :prop_sf:`AUTOUIC_OPTIONS`
set on the ``.ui`` source file.

This property may use "generator expressions" with the syntax ``$<...>``.
See the :manual:`cmake-generator-expressions(7)` manual for available
expressions.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.

EXAMPLE
^^^^^^^

.. code-block:: cmake

  # ...
  set_property(TARGET tgt PROPERTY AUTOUIC_OPTIONS "--no-protection")
  # ...



/P/🚀 prop_tgt/AUTOUIC_SEARCH_PATHS.rst
=====================================================


AUTOUIC_SEARCH_PATHS
--------------------

.. versionadded:: 3.9

Search path list used by :prop_tgt:`AUTOUIC` to find included
``.ui`` files.

This property is initialized by the value of the
:variable:`CMAKE_AUTOUIC_SEARCH_PATHS` variable if it is set
when a target is created. Otherwise it is empty.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.



/P/🚀 prop_tgt/BINARY_DIR.rst
===========================================


BINARY_DIR
----------

.. versionadded:: 3.4

This read-only property reports the value of the
:variable:`CMAKE_CURRENT_BINARY_DIR` variable in the directory in which
the target was defined.



/P/🚀 prop_tgt/BUILD_RPATH.rst
============================================


BUILD_RPATH
-----------

.. versionadded:: 3.8

A :ref:`semicolon-separated list <CMake Language Lists>` specifying
runtime path (``RPATH``) entries to add to binaries linked in the
build tree (for platforms that support it).  By default, CMake sets
the runtime path of binaries in the build tree to contain search
paths it knows are needed to find the shared libraries they link.
Projects may set ``BUILD_RPATH`` to specify additional search paths.

The build-tree runtime path will *not* be used for binaries in the
install tree.  It will be replaced with the install-tree runtime path
during the installation step.  See also the :prop_tgt:`INSTALL_RPATH`
target property.

This property is initialized by the value of the variable
:variable:`CMAKE_BUILD_RPATH` if it is set when a target is created.

This property supports
:manual:`generator expressions <cmake-generator-expressions(7)>`.

Other settings that affect the build-tree runtime path include:

* The :variable:`CMAKE_SKIP_RPATH` variable completely disables runtime
  paths in both the build tree and install tree.

* The :prop_tgt:`SKIP_BUILD_RPATH` target property disables setting any
  runtime path in the build tree.

* The :prop_tgt:`BUILD_RPATH_USE_ORIGIN` target property causes the
  automatically-generated runtime path to use entries relative to ``$ORIGIN``.

* The :prop_tgt:`BUILD_WITH_INSTALL_RPATH` target property causes binaries
  in the build tree to be built with the install-tree runtime path.



/P/🚀 prop_tgt/BUILD_RPATH_USE_ORIGIN.rst
=======================================================


BUILD_RPATH_USE_ORIGIN
----------------------

.. versionadded:: 3.14

Whether to use relative paths for the build ``RPATH``.

This property is initialized by the value of the variable
:variable:`CMAKE_BUILD_RPATH_USE_ORIGIN`.

On platforms that support runtime paths (``RPATH``) with the
``$ORIGIN`` token, setting this property to ``TRUE`` enables relative
paths in the build ``RPATH`` for executables and shared libraries that
point to shared libraries in the same build tree.

Normally the build ``RPATH`` of a binary contains absolute paths
to the directory of each shared library it links to.  The ``RPATH``
entries for directories contained within the build tree can be made
relative to enable relocatable builds and to help achieve reproducible
builds by omitting the build directory from the build environment.

This property has no effect on platforms that do not support the
``$ORIGIN`` token in ``RPATH``, or when the :variable:`CMAKE_SKIP_RPATH`
variable is set. The runtime path set through the
:prop_tgt:`BUILD_RPATH` target property is also unaffected by this
property.



/P/🚀 prop_tgt/BUILD_WITH_INSTALL_NAME_DIR.rst
============================================================


BUILD_WITH_INSTALL_NAME_DIR
---------------------------

.. versionadded:: 3.9

``BUILD_WITH_INSTALL_NAME_DIR`` is a boolean specifying whether the macOS
``install_name`` of a target in the build tree uses the directory given by
:prop_tgt:`INSTALL_NAME_DIR`.  This setting only applies to targets on macOS.

This property is initialized by the value of the variable
:variable:`CMAKE_BUILD_WITH_INSTALL_NAME_DIR` if it is set when a target is
created.

If this property is not set and policy :policy:`CMP0068` is not ``NEW``, the
value of :prop_tgt:`BUILD_WITH_INSTALL_RPATH` is used in its place.



/P/🚀 prop_tgt/BUILD_WITH_INSTALL_RPATH.rst
=========================================================


BUILD_WITH_INSTALL_RPATH
------------------------

``BUILD_WITH_INSTALL_RPATH`` is a boolean specifying whether to link the target
in the build tree with the :prop_tgt:`INSTALL_RPATH`.  This takes precedence
over :prop_tgt:`SKIP_BUILD_RPATH` and avoids the need for relinking before
installation.

This property is initialized by the value of the
:variable:`CMAKE_BUILD_WITH_INSTALL_RPATH` variable if it is set when a target
is created.

If policy :policy:`CMP0068` is not ``NEW``, this property also controls use of
:prop_tgt:`INSTALL_NAME_DIR` in the build tree on macOS.  Either way, the
:prop_tgt:`BUILD_WITH_INSTALL_NAME_DIR` target property takes precedence.



/P/🚀 prop_tgt/BUNDLE.rst
=======================================


BUNDLE
------

This target is a ``CFBundle`` on the macOS.

If a module library target has this property set to true it will be
built as a ``CFBundle`` when built on the mac.  It will have the directory
structure required for a ``CFBundle`` and will be suitable to be used for
creating Browser Plugins or other application resources.



/P/🚀 prop_tgt/BUNDLE_EXTENSION.rst
=================================================


BUNDLE_EXTENSION
----------------

The file extension used to name a :prop_tgt:`BUNDLE`, a :prop_tgt:`FRAMEWORK`,
or a :prop_tgt:`MACOSX_BUNDLE` target on the macOS and iOS.

The default value is ``bundle``, ``framework``, or ``app`` for the respective
target types.



/P/🚀 prop_tgt/C_EXTENSIONS.rst
=============================================


C_EXTENSIONS
------------

.. versionadded:: 3.1

Boolean specifying whether compiler specific extensions are requested.

This property specifies whether compiler specific extensions should be
used.  For some compilers, this results in adding a flag such
as ``-std=gnu11`` instead of ``-std=c11`` to the compile line.  This
property is ``ON`` by default. The basic C standard level is
controlled by the :prop_tgt:`C_STANDARD` target property.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the :variable:`CMAKE_C_EXTENSIONS` variable if set when a target is created and
otherwise by the value of
:variable:`CMAKE_C_EXTENSIONS_DEFAULT <CMAKE_<LANG>_EXTENSIONS_DEFAULT>` (see
:policy:`CMP0128`).



/P/🚀 prop_tgt/C_STANDARD.rst
===========================================


C_STANDARD
----------

.. versionadded:: 3.1

The C standard whose features are requested to build this target.

This property specifies the C standard whose features are requested
to build this target.  For some compilers, this results in adding a
flag such as ``-std=gnu11`` to the compile line.  For compilers that
have no notion of a C standard level, such as Microsoft Visual C++ before
VS 16.7, this property has no effect.

Supported values are:

``90``
  C89/C90

``99``
  C99

``11``
  C11

``17``
  .. versionadded:: 3.21

  C17

``23``
  .. versionadded:: 3.21

  C23

If the value requested does not result in a compile flag being added for
the compiler in use, a previous standard flag will be added instead.  This
means that using:

.. code-block:: cmake

  set_property(TARGET tgt PROPERTY C_STANDARD 11)

with a compiler which does not support ``-std=gnu11`` or an equivalent
flag will not result in an error or warning, but will instead add the
``-std=gnu99`` or ``-std=gnu90`` flag if supported.  This "decay" behavior may
be controlled with the :prop_tgt:`C_STANDARD_REQUIRED` target property.
Additionally, the :prop_tgt:`C_EXTENSIONS` target property may be used to
control whether compiler-specific extensions are enabled on a per-target basis.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the :variable:`CMAKE_C_STANDARD` variable if it is set when a target
is created.



/P/🚀 prop_tgt/C_STANDARD_REQUIRED.rst
====================================================


C_STANDARD_REQUIRED
-------------------

.. versionadded:: 3.1

Boolean describing whether the value of :prop_tgt:`C_STANDARD` is a requirement.

If this property is set to ``ON``, then the value of the
:prop_tgt:`C_STANDARD` target property is treated as a requirement.  If this
property is ``OFF`` or unset, the :prop_tgt:`C_STANDARD` target property is
treated as optional and may "decay" to a previous standard if the requested is
not available.  For compilers that have no notion of a C standard level, such
as Microsoft Visual C++ before VS 16.7, this property has no effect.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the :variable:`CMAKE_C_STANDARD_REQUIRED` variable if it is set when a
target is created.



/P/🚀 prop_tgt/COMMON_LANGUAGE_RUNTIME.rst
========================================================


COMMON_LANGUAGE_RUNTIME
-----------------------

.. versionadded:: 3.12

By setting this target property, the target is configured to build with
``C++/CLI`` support.

The Visual Studio generator defines the ``clr`` parameter depending on
the value of the ``COMMON_LANGUAGE_RUNTIME`` target property:

Not Set (default)

  Native C++.

``""`` (set but empty)

  Mixed unmanaged/managed C++ using .NET Framework.

``netcore``
  .. versionadded:: 3.26

  Mixed unmanaged/managed C++ using .NET Core.

  This required VS 2019's v142 toolset or higher.

``pure``

  Managed C++.

``safe``

  Managed C++.

This property is only evaluated :ref:`Visual Studio Generators` for
VS 2010 and above.

To be able to build managed C++ targets with VS 2017 and above the component
``C++/CLI support`` must be installed, which may not be done by default.

See also :prop_tgt:`IMPORTED_COMMON_LANGUAGE_RUNTIME`



/P/🚀 prop_tgt/COMPATIBLE_INTERFACE_BOOL.rst
==========================================================


COMPATIBLE_INTERFACE_BOOL
-------------------------

Properties which must be compatible with their link interface

The ``COMPATIBLE_INTERFACE_BOOL`` property may contain a list of
properties for this target which must be consistent when evaluated as a
boolean with the ``INTERFACE`` variant of the property in all linked
dependees.  For example, if a property ``FOO`` appears in the list, then
for each dependee, the ``INTERFACE_FOO`` property content in all of its
dependencies must be consistent with each other, and with the ``FOO``
property in the depender.

Consistency in this sense has the meaning that if the property is set,
then it must have the same boolean value as all others, and if the
property is not set, then it is ignored.

Note that for each dependee, the set of properties specified in this
property must not intersect with the set specified in any of the other
:ref:`Compatible Interface Properties`.



/P/🚀 prop_tgt/COMPATIBLE_INTERFACE_NUMBER_MAX.rst
================================================================


COMPATIBLE_INTERFACE_NUMBER_MAX
-------------------------------

Properties whose maximum value from the link interface will be used.

The ``COMPATIBLE_INTERFACE_NUMBER_MAX`` property may contain a list of
properties for this target whose maximum value may be read at generate
time when evaluated in the ``INTERFACE`` variant of the property in all
linked dependees.  For example, if a property ``FOO`` appears in the list,
then for each dependee, the ``INTERFACE_FOO`` property content in all of
its dependencies will be compared with each other and with the ``FOO``
property in the depender.  When reading the ``FOO`` property at generate
time, the maximum value will be returned. If the property is not set,
then it is ignored.

Note that for each dependee, the set of properties specified in this
property must not intersect with the set specified in any of the other
:ref:`Compatible Interface Properties`.



/P/🚀 prop_tgt/COMPATIBLE_INTERFACE_NUMBER_MIN.rst
================================================================


COMPATIBLE_INTERFACE_NUMBER_MIN
-------------------------------

Properties whose minimum value from the link interface will be used.

The ``COMPATIBLE_INTERFACE_NUMBER_MIN`` property may contain a list of
properties for this target whose minimum value may be read at generate
time when evaluated in the ``INTERFACE`` variant of the property of all
linked dependees.  For example, if a
property ``FOO`` appears in the list, then for each dependee, the
``INTERFACE_FOO`` property content in all of its dependencies will be
compared with each other and with the ``FOO`` property in the depender.
When reading the ``FOO`` property at generate time, the minimum value
will be returned.  If the property is not set, then it is ignored.

Note that for each dependee, the set of properties specified in this
property must not intersect with the set specified in any of the other
:ref:`Compatible Interface Properties`.



/P/🚀 prop_tgt/COMPATIBLE_INTERFACE_STRING.rst
============================================================


COMPATIBLE_INTERFACE_STRING
---------------------------

Properties which must be string-compatible with their link interface

The ``COMPATIBLE_INTERFACE_STRING`` property may contain a list of
properties for this target which must be the same when evaluated as a
string in the ``INTERFACE`` variant of the property all linked dependees.
For example, if a property ``FOO`` appears in the list, then for each
dependee, the ``INTERFACE_FOO`` property content in all of its
dependencies must be equal with each other, and with the ``FOO`` property
in the depender.  If the property is not set, then it is ignored.

Note that for each dependee, the set of properties specified in this
property must not intersect with the set specified in any of the other
:ref:`Compatible Interface Properties`.



/P/🚀 prop_tgt/COMPILE_DEFINITIONS.rst
====================================================


COMPILE_DEFINITIONS
-------------------

Preprocessor definitions for compiling a target's sources.

The ``COMPILE_DEFINITIONS`` property may be set to a semicolon-separated
list of preprocessor definitions using the syntax ``VAR`` or ``VAR=value``.
Function-style definitions are not supported.  CMake will
automatically escape the value correctly for the native build system
(note that CMake language syntax may require escapes to specify some
values).

CMake will automatically drop some definitions that are not supported
by the native build tool.

.. versionadded:: 3.26
  Any leading ``-D`` on an item will be removed.

.. include:: /include/COMPILE_DEFINITIONS_DISCLAIMER.txt

Contents of ``COMPILE_DEFINITIONS`` may use "generator expressions" with the
syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` manual
for available expressions.  See the :manual:`cmake-buildsystem(7)` manual
for more on defining buildsystem properties.

The corresponding :prop_tgt:`COMPILE_DEFINITIONS_<CONFIG>` property may
be set to specify per-configuration definitions.  Generator expressions
should be preferred instead of setting the alternative property.



/P/🚀 prop_tgt/COMPILE_FEATURES.rst
=================================================


COMPILE_FEATURES
----------------

.. versionadded:: 3.1

Compiler features enabled for this target.

The list of features in this property are a subset of the features listed
in the :variable:`CMAKE_C_COMPILE_FEATURES`, :variable:`CMAKE_CUDA_COMPILE_FEATURES`, and
:variable:`CMAKE_CXX_COMPILE_FEATURES` variables.

Contents of ``COMPILE_FEATURES`` may use "generator expressions" with the
syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` manual for
available expressions.  See the :manual:`cmake-compile-features(7)` manual
for information on compile features and a list of supported compilers.



/P/🚀 prop_tgt/COMPILE_FLAGS.rst
===========================================


COMPILE_FLAGS
-------------

Additional flags to use when compiling this target's sources.

The ``COMPILE_FLAGS`` property sets additional compiler flags used to
build sources within the target.  Use :prop_tgt:`COMPILE_DEFINITIONS`
to pass additional preprocessor definitions.

This property is deprecated.  Use the :prop_tgt:`COMPILE_OPTIONS`
property or the :command:`target_compile_options` command instead.



/P/🚀 prop_tgt/COMPILE_OPTIONS.rst
=============================================


COMPILE_OPTIONS
---------------

List of options to pass to the compiler.

This property holds a :ref:`semicolon-separated list <CMake Language Lists>`
of options specified so far for its target.  Use the
:command:`target_compile_options` command to append more options.
The options will be added after flags in the
:variable:`CMAKE_<LANG>_FLAGS` and :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>`
variables, but before those propagated from dependencies by the
:prop_tgt:`INTERFACE_COMPILE_OPTIONS` property.

This property adds compile options for all languages in a target.
Use the :genex:`COMPILE_LANGUAGE` generator expression to specify
per-language compile options.

This property is initialized by the :prop_dir:`COMPILE_OPTIONS` directory
property when a target is created, and is used by the generators to set
the options for the compiler.

Contents of ``COMPILE_OPTIONS`` may use "generator expressions" with the
syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` manual
for available expressions.  See the :manual:`cmake-buildsystem(7)` manual
for more on defining buildsystem properties.

.. include:: ../command/OPTIONS_SHELL.txt



/P/🚀 prop_tgt/COMPILE_PDB_NAME.rst
==============================================


COMPILE_PDB_NAME
----------------

.. versionadded:: 3.1

Output name for the MS debug symbol ``.pdb`` file generated by the
compiler while building source files.

This property specifies the base name for the debug symbols file.
If not set, the default is unspecified.

.. |PDB_XXX| replace:: :prop_tgt:`PDB_NAME`
.. include:: COMPILE_PDB_NOTE.txt



/P/🚀 prop_tgt/COMPILE_PDB_NAME_CONFIG.rst
=====================================================


COMPILE_PDB_NAME_<CONFIG>
-------------------------

.. versionadded:: 3.1

Per-configuration output name for the MS debug symbol ``.pdb`` file
generated by the compiler while building source files.

This is the configuration-specific version of :prop_tgt:`COMPILE_PDB_NAME`.

.. |PDB_XXX| replace:: :prop_tgt:`PDB_NAME_<CONFIG>`
.. include:: COMPILE_PDB_NOTE.txt



/P/🚀 prop_tgt/COMPILE_PDB_OUTPUT_DIRECTORY.rst
==========================================================


COMPILE_PDB_OUTPUT_DIRECTORY
----------------------------

.. versionadded:: 3.1

Output directory for the MS debug symbol ``.pdb`` file
generated by the compiler while building source files.

This property specifies the directory into which the MS debug symbols
will be placed by the compiler.  This property is initialized by the
value of the :variable:`CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY` variable
if it is set when a target is created.

.. |PDB_XXX| replace:: :prop_tgt:`PDB_OUTPUT_DIRECTORY`
.. include:: COMPILE_PDB_NOTE.txt



/P/🚀 prop_tgt/COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG.rst
=================================================================


COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>
-------------------------------------

.. versionadded:: 3.1

Per-configuration output directory for the MS debug symbol ``.pdb`` file
generated by the compiler while building source files.

This is a per-configuration version of
:prop_tgt:`COMPILE_PDB_OUTPUT_DIRECTORY`,
but multi-configuration generators (Visual Studio, Xcode) do NOT append a
per-configuration subdirectory to the specified directory.  This
property is initialized by the value of the
:variable:`CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>` variable
if it is set when a target is created.

.. |PDB_XXX| replace:: :prop_tgt:`PDB_OUTPUT_DIRECTORY_<CONFIG>`
.. include:: COMPILE_PDB_NOTE.txt



/P/🚀 prop_tgt/COMPILE_WARNING_AS_ERROR.rst
======================================================


COMPILE_WARNING_AS_ERROR
------------------------

.. versionadded:: 3.24

Specify whether to treat warnings on compile as errors.
If enabled, adds a flag to treat warnings on compile as errors.
If the :option:`cmake --compile-no-warning-as-error` option is given
on the :manual:`cmake(1)` command line, this property is ignored.

This property is not implemented for all compilers.  It is silently ignored
if there is no implementation for the compiler being used.  The currently
implemented :variable:`compiler IDs <CMAKE_<LANG>_COMPILER_ID>` are:

* ``GNU``
* ``Clang``
* ``AppleClang``
* ``Fujitsu``
* ``FujitsuClang``
* ``IBMClang``
* ``Intel``
* ``IntelLLVM``
* ``LCC``
* ``MSVC``
* ``NVHPC``
* ``NVIDIA`` (CUDA)
* ``QCC``
* ``SunPro``
* ``Tasking``
* ``TI``
* ``VisualAge``
* ``XL``
* ``XLClang``

This property is initialized by the value of the variable
:variable:`CMAKE_COMPILE_WARNING_AS_ERROR` if it is set when a target is
created.



/P/🚀 prop_tgt/CONFIG_OUTPUT_NAME.rst
================================================


<CONFIG>_OUTPUT_NAME
--------------------

Old per-configuration target file base name.
Use :prop_tgt:`OUTPUT_NAME_<CONFIG>` instead.

This is a configuration-specific version of the :prop_tgt:`OUTPUT_NAME`
target property.



/P/🚀 prop_tgt/CONFIG_POSTFIX.rst
============================================


<CONFIG>_POSTFIX
----------------

Postfix to append to the target file name for configuration ``<CONFIG>``.

When building with configuration ``<CONFIG>`` the value of this property
is appended to the target file name built on disk.  For non-executable
targets, this property is initialized by the value of the
:variable:`CMAKE_<CONFIG>_POSTFIX` variable if it is set when a target is
created.  This property is ignored on macOS for Frameworks and App Bundles.

For macOS see also the :prop_tgt:`FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>`
target property.



/P/🚀 prop_tgt/CROSSCOMPILING_EMULATOR.rst
=====================================================


CROSSCOMPILING_EMULATOR
-----------------------

.. versionadded:: 3.3

Use the given emulator to run executables created when crosscompiling.
This command will be added as a prefix to :command:`add_test`,
:command:`add_custom_command`, and :command:`add_custom_target` commands
for built target system executables.

.. versionadded:: 3.15
  If this property contains a :ref:`semicolon-separated list <CMake Language
  Lists>`, then the first value is the command and remaining values are its
  arguments.

.. versionadded:: 3.29
  Contents of ``CROSSCOMPILING_EMULATOR`` may use
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

This property is initialized by the value of the
:variable:`CMAKE_CROSSCOMPILING_EMULATOR` variable if it is set when a target
is created.



/P/🚀 prop_tgt/CUDA_ARCHITECTURES.rst
================================================


CUDA_ARCHITECTURES
------------------

.. versionadded:: 3.18

List of architectures to generate device code for.

An architecture can be suffixed by either ``-real`` or ``-virtual`` to specify
the kind of architecture to generate code for.
If no suffix is given then code is generated for both real and virtual
architectures.

A non-empty false value (e.g. ``OFF``) disables adding architectures.
This is intended to support packagers and rare cases where full control
over the passed flags is required.

This property is initialized by the value of the :variable:`CMAKE_CUDA_ARCHITECTURES`
variable if it is set when a target is created.

The ``CUDA_ARCHITECTURES`` target property must be set to a non-empty value on targets
that compile CUDA sources, or it is an error.  See policy :policy:`CMP0104`.

The ``CUDA_ARCHITECTURES`` may be set to one of the following special values:

``all``
  .. versionadded:: 3.23

  Compile for all supported major and minor real architectures,
  and the highest major virtual architecture.

``all-major``
  .. versionadded:: 3.23

  Compile for all supported major real architectures, and the highest
  major virtual architecture.

``native``
  .. versionadded:: 3.24

  Compile for the architecture(s) of the host's GPU(s).

Examples
^^^^^^^^

.. code-block:: cmake

  set_target_properties(tgt PROPERTIES CUDA_ARCHITECTURES "35;50;72")

Generates code for real and virtual architectures ``30``, ``50`` and ``72``.

.. code-block:: cmake

  set_property(TARGET tgt PROPERTY CUDA_ARCHITECTURES 70-real 72-virtual)

Generates code for real architecture ``70`` and virtual architecture ``72``.

.. code-block:: cmake

  set_property(TARGET tgt PROPERTY CUDA_ARCHITECTURES OFF)

CMake will not pass any architecture flags to the compiler.



/P/🚀 prop_tgt/CUDA_CUBIN_COMPILATION.rst
====================================================


CUDA_CUBIN_COMPILATION
----------------------

.. versionadded:: 3.27

Compile CUDA sources to ``.cubin`` files instead of ``.obj`` files
within :ref:`Object Libraries`.

For example:

.. code-block:: cmake

  add_library(mycubin OBJECT a.cu b.cu)
  set_property(TARGET mycubin PROPERTY CUDA_CUBIN_COMPILATION ON)



/P/🚀 prop_tgt/CUDA_EXTENSIONS.rst
=============================================


CUDA_EXTENSIONS
---------------

.. versionadded:: 3.8

Boolean specifying whether compiler specific extensions are requested.

This property specifies whether compiler specific extensions should be
used.  For some compilers, this results in adding a flag such
as ``-std=gnu++11`` instead of ``-std=c++11`` to the compile line.  This
property is ``ON`` by default. The basic CUDA/C++ standard level is
controlled by the :prop_tgt:`CUDA_STANDARD` target property.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the :variable:`CMAKE_CUDA_EXTENSIONS` variable if set when a target is created
and otherwise by the value of
:variable:`CMAKE_CUDA_EXTENSIONS_DEFAULT <CMAKE_<LANG>_EXTENSIONS_DEFAULT>`
(see :policy:`CMP0128`).



/P/🚀 prop_tgt/CUDA_FATBIN_COMPILATION.rst
=====================================================


CUDA_FATBIN_COMPILATION
-----------------------

.. versionadded:: 3.27

Compile CUDA sources to ``.fatbin`` files instead of ``.obj`` files
within :ref:`Object Libraries`.

For example:

.. code-block:: cmake

  add_library(myfbins OBJECT a.cu b.cu)
  set_property(TARGET myfbins PROPERTY CUDA_FATBIN_COMPILATION ON)



/P/🚀 prop_tgt/CUDA_OPTIX_COMPILATION.rst
====================================================


CUDA_OPTIX_COMPILATION
----------------------

.. versionadded:: 3.27

Compile CUDA sources to ``.optixir`` files instead of ``.obj`` files
within :ref:`Object Libraries`.

For example:

.. code-block:: cmake

  add_library(myoptix OBJECT a.cu b.cu)
  set_property(TARGET myoptix PROPERTY CUDA_OPTIX_COMPILATION ON)



/P/🚀 prop_tgt/CUDA_PTX_COMPILATION.rst
==================================================


CUDA_PTX_COMPILATION
--------------------

.. versionadded:: 3.9

Compile CUDA sources to ``.ptx`` files instead of ``.obj`` files
within :ref:`Object Libraries`.

For example:

.. code-block:: cmake

  add_library(myptx OBJECT a.cu b.cu)
  set_property(TARGET myptx PROPERTY CUDA_PTX_COMPILATION ON)



/P/🚀 prop_tgt/CUDA_RESOLVE_DEVICE_SYMBOLS.rst
=========================================================


CUDA_RESOLVE_DEVICE_SYMBOLS
---------------------------

.. versionadded:: 3.9

CUDA only: Enables device linking for the specific library target where
required.

If set, this will tell the required compilers to enable device linking
on the library target. Device linking is an additional link step
required by some CUDA compilers when :prop_tgt:`CUDA_SEPARABLE_COMPILATION` is
enabled. Normally device linking is deferred until a shared library or
executable is generated, allowing for multiple static libraries to resolve
device symbols at the same time when they are used by a shared library or
executable.

If this property or :variable:`CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS` is unset,
static libraries are treated as if it is disabled while shared, module,
and executable targets behave as if it is on.

If :variable:`CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS` has been defined,
this property is initialized to the value the variable and overriding
the default behavior.

Note that device linking is not supported for :ref:`Object Libraries`.


For instance:

.. code-block:: cmake

  set_property(TARGET mystaticlib PROPERTY CUDA_RESOLVE_DEVICE_SYMBOLS ON)



/P/🚀 prop_tgt/CUDA_RUNTIME_LIBRARY.rst
==================================================


CUDA_RUNTIME_LIBRARY
--------------------

.. versionadded:: 3.17

Select the CUDA runtime library for use by compilers targeting the CUDA language.

The allowed case insensitive values are:

.. include:: CUDA_RUNTIME_LIBRARY-VALUES.txt

Contents of ``CUDA_RUNTIME_LIBRARY`` may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.

If that property is not set then CMake uses an appropriate default
value based on the compiler to select the CUDA runtime library.

.. note::

  This property has effect only when the ``CUDA`` language is enabled. To
  control the CUDA runtime linking when only using the CUDA SDK with the
  ``C`` or ``C++`` language we recommend using the :module:`FindCUDAToolkit`
  module.



/P/🚀 prop_tgt/CUDA_SEPARABLE_COMPILATION.rst
========================================================


CUDA_SEPARABLE_COMPILATION
--------------------------

.. versionadded:: 3.8

CUDA only: Enables separate compilation of device code

If set this will enable separable compilation for all CUDA files for
the given target.

For instance:

.. code-block:: cmake

  set_property(TARGET myexe PROPERTY CUDA_SEPARABLE_COMPILATION ON)

This property is initialized by the value of the
:variable:`CMAKE_CUDA_SEPARABLE_COMPILATION` variable if it is set when a
target is created.



/P/🚀 prop_tgt/CUDA_STANDARD.rst
===========================================


CUDA_STANDARD
-------------

.. versionadded:: 3.8

The CUDA/C++ standard whose features are requested to build this target.

This property specifies the CUDA/C++ standard whose features are requested
to build this target.  For some compilers, this results in adding a
flag such as ``-std=gnu++11`` to the compile line.

Supported values are:

``98``
  CUDA C++98. Note that this maps to the same as ``03`` internally.

``03``
  CUDA C++03

``11``
  CUDA C++11

``14``
  CUDA C++14. While CMake 3.8 and later *recognize* ``14`` as a valid value,
  CMake 3.9 was the first version to include support for any compiler.

``17``
  CUDA C++17. While CMake 3.8 and later *recognize* ``17`` as a valid value,
  CMake 3.18 was the first version to include support for any compiler.

``20``
  .. versionadded:: 3.12

  CUDA C++20. While CMake 3.12 and later *recognize* ``20`` as a valid value,
  CMake 3.18 was the first version to include support for any compiler.

``23``
  .. versionadded:: 3.20

  CUDA C++23

``26``
  .. versionadded:: 3.25

  CUDA C++26. CMake 3.25 and later *recognize* ``26`` as a valid value,
  no version has support for any compiler.

If the value requested does not result in a compile flag being added for
the compiler in use, a previous standard flag will be added instead.  This
means that using:

.. code-block:: cmake

  set_property(TARGET tgt PROPERTY CUDA_STANDARD 11)

with a compiler which does not support ``-std=gnu++11`` or an equivalent
flag will not result in an error or warning, but will instead add the
``-std=gnu++03`` flag if supported.  This "decay" behavior may be controlled
with the :prop_tgt:`CUDA_STANDARD_REQUIRED` target property.
Additionally, the :prop_tgt:`CUDA_EXTENSIONS` target property may be used to
control whether compiler-specific extensions are enabled on a per-target basis.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the :variable:`CMAKE_CUDA_STANDARD` variable if it is set when a target
is created.



/P/🚀 prop_tgt/CUDA_STANDARD_REQUIRED.rst
====================================================


CUDA_STANDARD_REQUIRED
----------------------

.. versionadded:: 3.8

Boolean describing whether the value of :prop_tgt:`CUDA_STANDARD` is a requirement.

If this property is set to ``ON``, then the value of the
:prop_tgt:`CUDA_STANDARD` target property is treated as a requirement.  If this
property is ``OFF`` or unset, the :prop_tgt:`CUDA_STANDARD` target property is
treated as optional and may "decay" to a previous standard if the requested is
not available.  For compilers that have no notion of a standard level, such as
MSVC 1800 (Visual Studio 2013) and lower, this has no effect.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the :variable:`CMAKE_CUDA_STANDARD_REQUIRED` variable if it is set when a
target is created.



/P/🚀 prop_tgt/CXX_EXTENSIONS.rst
============================================


CXX_EXTENSIONS
--------------

.. versionadded:: 3.1

Boolean specifying whether compiler specific extensions are requested.

This property specifies whether compiler specific extensions should be
used.  For some compilers, this results in adding a flag such
as ``-std=gnu++11`` instead of ``-std=c++11`` to the compile line.  This
property is ``ON`` by default. The basic C++ standard level is
controlled by the :prop_tgt:`CXX_STANDARD` target property.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the :variable:`CMAKE_CXX_EXTENSIONS` variable if set when a target is created
and otherwise by the value of
:variable:`CMAKE_CXX_EXTENSIONS_DEFAULT <CMAKE_<LANG>_EXTENSIONS_DEFAULT>` (see
:policy:`CMP0128`).



/P/🚀 prop_tgt/CXX_MODULE_DIRS.rst
=============================================


CXX_MODULE_DIRS
---------------

.. versionadded:: 3.28

Semicolon-separated list of base directories of the target's default
C++ module set (i.e. the file set with name and type ``CXX_MODULES``). The
property supports
:manual:`generator expressions <cmake-generator-expressions(7)>`.

This property is normally only set by :command:`target_sources(FILE_SET)`
rather than being manipulated directly.

See :prop_tgt:`CXX_MODULE_DIRS_<NAME>` for the list of base directories in
other C++ module sets.



/P/🚀 prop_tgt/CXX_MODULE_DIRS_NAME.rst
==================================================


CXX_MODULE_DIRS_<NAME>
----------------------

.. versionadded:: 3.28

Semicolon-separated list of base directories of the target's ``<NAME>`` C++
module set, which has the set type ``CXX_MODULES``. The property supports
:manual:`generator expressions <cmake-generator-expressions(7)>`.

This property is normally only set by :command:`target_sources(FILE_SET)`
rather than being manipulated directly.

See :prop_tgt:`CXX_MODULE_DIRS` for the list of base directories in the
default C++ module set. See :prop_tgt:`CXX_MODULE_SETS` for the file set names
of all C++ module sets.



/P/🚀 prop_tgt/CXX_MODULE_SET.rst
============================================


CXX_MODULE_SET
--------------

.. versionadded:: 3.28

Semicolon-separated list of files in the target's default C++ module set,
(i.e. the file set with name and type ``CXX_MODULES``). If any of the paths
are relative, they are computed relative to the target's source directory. The
property supports
:manual:`generator expressions <cmake-generator-expressions(7)>`.

This property is normally only set by :command:`target_sources(FILE_SET)`
rather than being manipulated directly.

See :prop_tgt:`CXX_MODULE_SET_<NAME>` for the list of files in other C++
module sets.



/P/🚀 prop_tgt/CXX_MODULE_SET_NAME.rst
=================================================


CXX_MODULE_SET_<NAME>
---------------------

.. versionadded:: 3.28

Semicolon-separated list of files in the target's ``<NAME>`` C++ module set,
which has the set type ``CXX_MODULES``. If any of the paths are relative, they
are computed relative to the target's source directory. The property supports
:manual:`generator expressions <cmake-generator-expressions(7)>`.

This property is normally only set by :command:`target_sources(FILE_SET)`
rather than being manipulated directly.

See :prop_tgt:`CXX_MODULE_SET` for the list of files in the default C++ module
set. See :prop_tgt:`CXX_MODULE_SETS` for the file set names of all C++ module
sets.



/P/🚀 prop_tgt/CXX_MODULE_SETS.rst
=============================================


CXX_MODULE_SETS
---------------

.. versionadded:: 3.28

Read-only list of the target's ``PRIVATE`` and ``PUBLIC`` C++ module sets (i.e.
all file sets with the type ``CXX_MODULES``). Files listed in these file sets
are treated as source files for the purpose of IDE integration.

C++ module sets may be defined using the :command:`target_sources` command
``FILE_SET`` option with type ``CXX_MODULES``.

See also :prop_tgt:`CXX_MODULE_SET_<NAME>`, :prop_tgt:`CXX_MODULE_SET` and
:prop_tgt:`INTERFACE_CXX_MODULE_SETS`.



/P/🚀 prop_tgt/CXX_SCAN_FOR_MODULES.rst
==================================================


CXX_SCAN_FOR_MODULES
--------------------

.. versionadded:: 3.28

``CXX_SCAN_FOR_MODULES`` is a boolean specifying whether CMake will scan C++
sources in the target for module dependencies.  See also the
:prop_sf:`CXX_SCAN_FOR_MODULES` for per-source settings which, if set,
overrides the target-wide settings.

This property is initialized by the value of the
:variable:`CMAKE_CXX_SCAN_FOR_MODULES` variable if it is set when a target is
created.

When this property is set ``ON`` or unset, CMake will scan the target's
``CXX`` sources at build time and add module dependency information to the
compile line as necessary.  When this property is set ``OFF``, CMake will not
scan the target's ``CXX`` sources at build time.

Note that scanning is only performed if C++20 or higher is enabled for the
target.  Scanning for modules in the target's sources belonging to file sets
of type ``CXX_MODULES`` is always performed.



/P/🚀 prop_tgt/CXX_STANDARD.rst
==========================================


CXX_STANDARD
------------

.. versionadded:: 3.1

The C++ standard whose features are requested to build this target.

This property specifies the C++ standard whose features are requested
to build this target.  For some compilers, this results in adding a
flag such as ``-std=gnu++11`` to the compile line.  For compilers that
have no notion of a standard level, such as Microsoft Visual C++ before
2015 Update 3, this has no effect.

Supported values are:

``98``
  C++98

``11``
  C++11

``14``
  C++14

``17``
  .. versionadded:: 3.8

  C++17

``20``
  .. versionadded:: 3.12

  C++20

``23``
  .. versionadded:: 3.20

  C++23

``26``
  .. versionadded:: 3.25

  C++26. CMake 3.25 and later *recognize* ``26`` as a valid value,
  no version has support for any compiler.

If the value requested does not result in a compile flag being added for
the compiler in use, a previous standard flag will be added instead.  This
means that using:

.. code-block:: cmake

  set_property(TARGET tgt PROPERTY CXX_STANDARD 11)

with a compiler which does not support ``-std=gnu++11`` or an equivalent
flag will not result in an error or warning, but will instead add the
``-std=gnu++98`` flag if supported.  This "decay" behavior may be controlled
with the :prop_tgt:`CXX_STANDARD_REQUIRED` target property.
Additionally, the :prop_tgt:`CXX_EXTENSIONS` target property may be used to
control whether compiler-specific extensions are enabled on a per-target basis.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the :variable:`CMAKE_CXX_STANDARD` variable if it is set when a target
is created.



/P/🚀 prop_tgt/CXX_STANDARD_REQUIRED.rst
===================================================


CXX_STANDARD_REQUIRED
---------------------

.. versionadded:: 3.1

Boolean describing whether the value of :prop_tgt:`CXX_STANDARD` is a requirement.

If this property is set to ``ON``, then the value of the
:prop_tgt:`CXX_STANDARD` target property is treated as a requirement.  If this
property is ``OFF`` or unset, the :prop_tgt:`CXX_STANDARD` target property is
treated as optional and may "decay" to a previous standard if the requested is
not available.  For compilers that have no notion of a standard level, such as
MSVC 1800 (Visual Studio 2013) and lower, this has no effect.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the :variable:`CMAKE_CXX_STANDARD_REQUIRED` variable if it is set when a
target is created.



/P/🚀 prop_tgt/DEBUG_POSTFIX.rst
===========================================


DEBUG_POSTFIX
-------------

See target property :prop_tgt:`<CONFIG>_POSTFIX`.

This property is a special case of the more-general :prop_tgt:`<CONFIG>_POSTFIX`
property for the ``DEBUG`` configuration.



/P/🚀 prop_tgt/DEFINE_SYMBOL.rst
===========================================


DEFINE_SYMBOL
-------------

Define a symbol when compiling this target's sources.

``DEFINE_SYMBOL`` sets the name of the preprocessor symbol defined when
compiling sources in a shared library.  If not set here then it is set
to ``target_EXPORTS`` by default (with some substitutions if the target is
not a valid C identifier).  This is useful for headers to know whether
they are being included from inside their library or outside to
properly setup dllexport/dllimport decorations on Windows.

On POSIX platforms, this can optionally be used to control the visibility
of symbols.

CMake provides support for such decorations with the :module:`GenerateExportHeader`
module.



/P/🚀 prop_tgt/DEPLOYMENT_ADDITIONAL_FILES.rst
=========================================================


DEPLOYMENT_ADDITIONAL_FILES
---------------------------

.. versionadded:: 3.13

Set the WinCE project ``AdditionalFiles`` in ``DeploymentTool`` in ``.vcproj``
files generated by the :generator:`Visual Studio 9 2008` generator.
This is useful when you want to debug on remote WinCE device.
Specify additional files that will be copied to the device.
For example:

.. code-block:: cmake

  set_property(TARGET ${TARGET} PROPERTY
    DEPLOYMENT_ADDITIONAL_FILES "english.lng|local_folder|remote_folder|0"
    "german.lng|local_folder|remote_folder|0")

produces::

  <DeploymentTool AdditionalFiles="english.lng|local_folder|remote_folder|0;german.lng|local_folder|remote_folder|0" ... />



/P/🚀 prop_tgt/DEPLOYMENT_REMOTE_DIRECTORY.rst
=========================================================


DEPLOYMENT_REMOTE_DIRECTORY
---------------------------

.. versionadded:: 3.6

Set the WinCE project ``RemoteDirectory`` in ``DeploymentTool`` and
``RemoteExecutable`` in ``DebuggerTool`` in ``.vcproj`` files generated
by the :generator:`Visual Studio 9 2008` generator.
This is useful when you want to debug on remote WinCE device.
For example:

.. code-block:: cmake

  set_property(TARGET ${TARGET} PROPERTY
    DEPLOYMENT_REMOTE_DIRECTORY "\\FlashStorage")

produces::

  <DeploymentTool RemoteDirectory="\FlashStorage" ... />
  <DebuggerTool RemoteExecutable="\FlashStorage\target_file" ... />



/P/🚀 prop_tgt/DEPRECATION.rst
=========================================


DEPRECATION
-----------

.. versionadded:: 3.17

Deprecation message from imported target's developer.

``DEPRECATION`` is the message regarding a deprecation status to be displayed
to downstream users of a target.

The message is formatted as follows:

* Lines that do not start in whitespace are wrapped as paragraph text.
* Lines that start in whitespace are preserved as preformatted text.



/P/🚀 prop_tgt/DISABLE_PRECOMPILE_HEADERS.rst
========================================================


DISABLE_PRECOMPILE_HEADERS
--------------------------

.. versionadded:: 3.16

Disables the precompilation of header files specified by
:prop_tgt:`PRECOMPILE_HEADERS` property.

If the property is not set, CMake will use the value provided
by :variable:`CMAKE_DISABLE_PRECOMPILE_HEADERS`.



/P/🚀 prop_tgt/DLL_NAME_WITH_SOVERSION.rst
=====================================================


DLL_NAME_WITH_SOVERSION
-----------------------

.. versionadded:: 3.27

This property controls whether the :prop_tgt:`SOVERSION` target
property is added to the filename of generated DLL filenames
for the Windows platform, which is selected when the
:variable:`WIN32` variable is set.

The value of the listed property is appended to the
basename of the runtime component of the shared library
target as ``-<SOVERSION>``.

Please note that setting this property has no effect
if versioned filenames are globally disabled with the
:variable:`CMAKE_PLATFORM_NO_VERSIONED_SONAME` variable.



/P/🚀 prop_tgt/DOTNET_SDK.rst
========================================


DOTNET_SDK
----------

.. versionadded:: 3.23

Specify the .NET SDK for C# projects.  For example: ``Microsoft.NET.Sdk``.

This property tells :ref:`Visual Studio Generators` for VS 2019 and
above to generate a .NET SDK-style project using the specified SDK.
The property is meaningful only to these generators, and only in C#
targets.  It is ignored for C++ projects, even if they are managed
(e.g. using :prop_tgt:`COMMON_LANGUAGE_RUNTIME`).

This property must be a non-empty string to generate .NET SDK-style projects.
CMake does not perform any validations for the value of the property.

This property may be initialized for all targets using the
:variable:`CMAKE_DOTNET_SDK` variable.

.. note::

  The :ref:`Visual Studio Generators` in this version of CMake have not
  yet learned to support :command:`add_custom_command` in .NET SDK-style
  projects.  It is currently an error to attach a custom command to a
  target with the ``DOTNET_SDK`` property set.



/P/🚀 prop_tgt/DOTNET_TARGET_FRAMEWORK.rst
=====================================================


DOTNET_TARGET_FRAMEWORK
-----------------------

.. versionadded:: 3.17

Specify the .NET target framework.

Used to specify the .NET target framework for C++/CLI and C#.  For
example: ``netcoreapp2.1``.

This property is only evaluated for :ref:`Visual Studio Generators`
VS 2010 and above.

Can be initialized for all targets using the variable
:variable:`CMAKE_DOTNET_TARGET_FRAMEWORK`.



/P/🚀 prop_tgt/DOTNET_TARGET_FRAMEWORK_VERSION.rst
=============================================================


DOTNET_TARGET_FRAMEWORK_VERSION
-------------------------------

.. versionadded:: 3.12

Specify the .NET target framework version.

Used to specify the .NET target framework version for C++/CLI and C#.
For example: ``v4.5``.

This property is only evaluated for :ref:`Visual Studio Generators`
VS 2010 and above.

To initialize this variable for all targets set
:variable:`CMAKE_DOTNET_TARGET_FRAMEWORK` or
:variable:`CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION`. If both are set,
the latter is ignored.



/P/🚀 prop_tgt/EchoString.rst
========================================


EchoString
----------

A message to be displayed when the target is built.

A message to display on some generators (such as :ref:`Makefile Generators`)
when the target is built.



/P/🚀 prop_tgt/ENABLE_EXPORTS.rst
============================================


ENABLE_EXPORTS
--------------

Specify whether an executable or a shared library exports symbols.

Normally an executable does not export any symbols because it is the
final program.  It is possible for an executable to export symbols to
be used by loadable modules.  When this property is set to true CMake
will allow other targets to "link" to the executable with the
:command:`target_link_libraries` command.  On all platforms a target-level
dependency on the executable is created for targets that link to it.
Handling of the executable on the link lines of the loadable modules
varies by platform:

* On Windows-based systems (including Cygwin) an "import library" is
  created along with the executable to list the exported symbols.
  Loadable modules link to the import library to get the symbols.

* On macOS, loadable modules link to the executable itself using the
  ``-bundle_loader`` flag.

* On AIX, a linker "import file" is created along with the executable
  to list the exported symbols for import when linking other targets.
  Loadable modules link to the import file to get the symbols.

* On other platforms, loadable modules are simply linked without
  referencing the executable since the dynamic loader will
  automatically bind symbols when the module is loaded.

This property is initialized by the value of the
:variable:`CMAKE_EXECUTABLE_ENABLE_EXPORTS` variable, if it is set when an
executable target is created.  If :variable:`CMAKE_EXECUTABLE_ENABLE_EXPORTS`
is not set, the :variable:`CMAKE_ENABLE_EXPORTS` variable is used to initialize
the property instead for backward compatibility reasons.
See below for alternative initialization behavior for shared library targets.

.. versionadded:: 3.27
  To link with a shared library on macOS, or to a shared framework on any Apple
  platform, a linker import file can be used instead of the actual shared
  library. These linker import files are also known as text-based stubs, and
  they have a ``.tbd`` file extension.

  The generation of these linker import files, as well as their consumption, is
  controlled by this property. When this property is set to true on a shared
  library target, CMake will generate a ``.tbd`` file for the library.
  Other targets that link to the shared library target will then use this
  ``.tbd`` file when linking rather than linking to the shared library binary.

  .. note::

    For backward compatibility reasons, this property will be ignored if the
    :prop_tgt:`XCODE_ATTRIBUTE_GENERATE_TEXT_BASED_STUBS <XCODE_ATTRIBUTE_<an-attribute>>`
    target property or the
    :variable:`CMAKE_XCODE_ATTRIBUTE_GENERATE_TEXT_BASED_STUBS <CMAKE_XCODE_ATTRIBUTE_<an-attribute>>`
    variable is set to false.

  For shared library targets, this property is initialized by the value of the
  :variable:`CMAKE_SHARED_LIBRARY_ENABLE_EXPORTS` variable, if it is set when
  the target is created.



/P/🚀 prop_tgt/EXCLUDE_FROM_ALL.rst
==============================================


EXCLUDE_FROM_ALL
----------------

Set this target property to a true (or false) value to exclude (or include)
the target from the "all" target of the containing directory and its
ancestors.  If excluded, running e.g. ``make`` in the containing directory
or its ancestors will not build the target by default.

If this target property is not set then the target will be included in
the "all" target of the containing directory.  Furthermore, it will be
included in the "all" target of its ancestor directories unless the
:prop_dir:`EXCLUDE_FROM_ALL` directory property is set.

With ``EXCLUDE_FROM_ALL`` set to false or not set at all, the target
will be brought up to date as part of doing a ``make install`` or its
equivalent for the CMake generator being used.

If a target has ``EXCLUDE_FROM_ALL`` set to true, it may still be listed
in an :command:`install(TARGETS)` command, but the user is responsible for
ensuring that the target's build artifacts are not missing or outdated when
an install is performed.

This property may use "generator expressions" with the syntax ``$<...>``. See
the :manual:`cmake-generator-expressions(7)` manual for available expressions.

Only the "Ninja Multi-Config" generator supports a property value that varies by
configuration.  For all other generators the value of this property must be the
same for all configurations.



/P/🚀 prop_tgt/EXCLUDE_FROM_DEFAULT_BUILD.rst
========================================================


EXCLUDE_FROM_DEFAULT_BUILD
--------------------------

Exclude target from ``Build Solution``.

This property is only used by Visual Studio generators.
When set to ``TRUE``, the target will not be built when you press
``Build Solution``.



/P/🚀 prop_tgt/EXCLUDE_FROM_DEFAULT_BUILD_CONFIG.rst
===============================================================


EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>
-----------------------------------

Per-configuration version of target exclusion from ``Build Solution``.

This is the configuration-specific version of
:prop_tgt:`EXCLUDE_FROM_DEFAULT_BUILD`.  If the generic
:prop_tgt:`EXCLUDE_FROM_DEFAULT_BUILD` is also set on a target,
``EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>`` takes
precedence in configurations for which it has a value.



/P/🚀 prop_tgt/EXPORT_COMPILE_COMMANDS.rst
=====================================================


EXPORT_COMPILE_COMMANDS
-----------------------

.. versionadded:: 3.20

Enable/Disable output of compile commands during generation for a target.

This property is initialized by the value of the variable
:variable:`CMAKE_EXPORT_COMPILE_COMMANDS` if it is set when a target is created.



/P/🚀 prop_tgt/EXPORT_FIND_PACKAGE_NAME.rst
======================================================


EXPORT_FIND_PACKAGE_NAME
------------------------

.. note::

  Experimental. Gated by ``CMAKE_EXPERIMENTAL_EXPORT_PACKAGE_DEPENDENCIES``.

Control the package name associated with a dependency target when exporting a
:command:`find_dependency` call in :command:`install(EXPORT)` or
:command:`export(EXPORT)`. This can be used to assign a package name to a
package that is built by CMake and exported, or to override the package in the
:command:`find_package` call that created the target.

This property is initialized by :variable:`CMAKE_EXPORT_FIND_PACKAGE_NAME`.



/P/🚀 prop_tgt/EXPORT_NAME.rst
=========================================


EXPORT_NAME
-----------

Exported name for target files.

This sets the name for the ``IMPORTED`` target generated by the
:command:`install(EXPORT)` and :command:`export` commands.
If not set, the logical target name is used by default.



/P/🚀 prop_tgt/EXPORT_NO_SYSTEM.rst
==============================================


EXPORT_NO_SYSTEM
----------------

.. versionadded:: 3.25

This property affects the behavior of the :command:`install(EXPORT)` and
:command:`export` commands when they install or export the target respectively.
When ``EXPORT_NO_SYSTEM`` is set to true, those commands generate an imported
target with :prop_tgt:`SYSTEM` property set to false.

See the :prop_tgt:`NO_SYSTEM_FROM_IMPORTED` target property to set this
behavior on the target *consuming* the include directories rather than the
one *providing* them.



/P/🚀 prop_tgt/EXPORT_PROPERTIES.rst
===============================================


EXPORT_PROPERTIES
-----------------

.. versionadded:: 3.12

List additional properties to export for a target.

This property contains a list of property names that should be exported by
the :command:`install(EXPORT)` and :command:`export` commands.  By default
only a limited number of properties are exported. This property can be used
to additionally export other properties as well.

Properties starting with ``INTERFACE_`` or ``IMPORTED_`` are not allowed as
they are reserved for internal CMake use.

Properties containing generator expressions are also not allowed.

.. note::

  Since CMake 3.19, :ref:`Interface Libraries` may have arbitrary
  target properties.  If a project exports an interface library
  with custom properties, the resulting package may not work with
  dependents configured by older versions of CMake that reject the
  custom properties.



/P/🚀 prop_tgt/FOLDER.rst
====================================


FOLDER
------

For IDEs that present targets using a folder hierarchy, this property
specifies the name of the folder to place the target under.
To nest folders, use ``FOLDER`` values such as ``GUI/Dialogs`` with ``/``
characters separating folder levels.  Targets with no ``FOLDER`` property
will appear as top level entities.  Targets with the same ``FOLDER``
property value will appear in the same folder as siblings.

Only some CMake generators honor the ``FOLDER`` property
(e.g. :generator:`Xcode` or any of the
:ref:`Visual Studio <Visual Studio Generators>` generators).
Those generators that don't will simply ignore it.

This property is initialized by the value of the variable
:variable:`CMAKE_FOLDER` if it is set when a target is created.

The global property :prop_gbl:`USE_FOLDERS` must be set to true, otherwise
the ``FOLDER`` property is ignored.



/P/🚀 prop_tgt/Fortran_BUILDING_INSTRINSIC_MODULES.rst
=================================================================


Fortran_BUILDING_INSTRINSIC_MODULES
-----------------------------------

.. versionadded:: 3.22

Instructs the CMake Fortran preprocessor that the target is building
Fortran intrinsics for building a Fortran compiler.

This property is off by default and should be turned only on projects
that build a Fortran compiler. It should not be turned on for projects
that use a Fortran compiler.

Turning this property on will correctly add dependencies for building
Fortran intrinsic modules whereas turning the property off will ignore
Fortran intrinsic modules in the dependency graph as they are supplied
by the compiler itself.



/P/🚀 prop_tgt/Fortran_FORMAT.rst
============================================


Fortran_FORMAT
--------------

Set to ``FIXED`` or ``FREE`` to indicate the Fortran source layout.

This property tells CMake whether the Fortran source files in a target
use fixed-format or free-format.  CMake will pass the corresponding
format flag to the compiler.  Use the source-specific ``Fortran_FORMAT``
property to change the format of a specific source file.  If the
variable :variable:`CMAKE_Fortran_FORMAT` is set when a target is created its
value is used to initialize this property.



/P/🚀 prop_tgt/Fortran_MODULE_DIRECTORY.rst
======================================================


Fortran_MODULE_DIRECTORY
------------------------

Specify output directory for Fortran modules provided by the target.

If the target contains Fortran source files that provide modules and
the compiler supports a module output directory this specifies the
directory in which the modules will be placed.  When this property is
not set the modules will be placed in the build directory
corresponding to the target's source directory.  If the variable
:variable:`CMAKE_Fortran_MODULE_DIRECTORY` is set when a target is created its
value is used to initialize this property.

When using one of the :ref:`Visual Studio Generators` with the Intel Fortran
plugin installed in Visual Studio, a subdirectory named after the
configuration will be appended to the path where modules are created.
For example, if ``Fortran_MODULE_DIRECTORY`` is set to ``C:/some/path``,
modules will end up in ``C:/some/path/Debug`` (or
``C:/some/path/Release`` etc.) when an Intel Fortran ``.vfproj`` file is
generated, and in ``C:/some/path`` when any other generator is used.

Note that some compilers will automatically search the module output
directory for modules USEd during compilation but others will not.  If
your sources USE modules their location must be specified by
:prop_tgt:`INCLUDE_DIRECTORIES` regardless of this property.



/P/🚀 prop_tgt/Fortran_PREPROCESS.rst
================================================


Fortran_PREPROCESS
------------------

.. versionadded:: 3.18

Control whether the Fortran source file should be unconditionally
preprocessed.

If unset or empty, rely on the compiler to determine whether the file
should be preprocessed. If explicitly set to ``OFF`` then the file does not
need to be preprocessed. If explicitly set to ``ON``, then the file does
need to be preprocessed as part of the compilation step.

When using the :generator:`Ninja` generator, all source files are
first preprocessed in order to generate module dependency
information. Setting this property to ``OFF`` will make ``Ninja``
skip this step.

Use the source-specific :prop_sf:`Fortran_PREPROCESS` property if a single
file needs to be preprocessed. If the variable
:variable:`CMAKE_Fortran_PREPROCESS` is set when a target is created its
value is used to initialize this property.

.. note:: For some compilers, ``NAG``, ``PGI`` and ``Solaris Studio``,
          setting this to ``OFF`` will have no effect.



/P/🚀 prop_tgt/FRAMEWORK.rst
=======================================


FRAMEWORK
---------

Build ``SHARED`` or ``STATIC`` library as Framework Bundle on the macOS and iOS.

If such a library target has this property set to ``TRUE`` it will be
built as a framework when built on the macOS and iOS.  It will have the
directory structure required for a framework and will be suitable to
be used with the ``-framework`` option.  This property is initialized by the
value of the :variable:`CMAKE_FRAMEWORK` variable if it is set when a target is
created.

To customize ``Info.plist`` file in the framework, use
:prop_tgt:`MACOSX_FRAMEWORK_INFO_PLIST` target property.

For macOS see also the :prop_tgt:`FRAMEWORK_VERSION` target property.

Example of creation ``dynamicFramework``:

.. code-block:: cmake

  add_library(dynamicFramework SHARED
              dynamicFramework.c
              dynamicFramework.h
  )
  set_target_properties(dynamicFramework PROPERTIES
    FRAMEWORK TRUE
    FRAMEWORK_VERSION C
    MACOSX_FRAMEWORK_IDENTIFIER com.cmake.dynamicFramework
    MACOSX_FRAMEWORK_INFO_PLIST Info.plist
    # "current version" in semantic format in Mach-O binary file
    VERSION 16.4.0
    # "compatibility version" in semantic format in Mach-O binary file
    SOVERSION 1.0.0
    PUBLIC_HEADER dynamicFramework.h
    XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY "iPhone Developer"
  )



/P/🚀 prop_tgt/FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG.rst
===================================================================


FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>
---------------------------------------

.. versionadded:: 3.18

Postfix to append to the framework file name for configuration ``<CONFIG>``,
when using a multi-config generator (like Xcode and Ninja Multi-Config).

When building with configuration ``<CONFIG>`` the value of this property
is appended to the framework file name built on disk.

For example, given a framework called ``my_fw``, a value of ``_debug``
for the ``FRAMEWORK_MULTI_CONFIG_POSTFIX_DEBUG`` property, and
``Debug;Release`` in :variable:`CMAKE_CONFIGURATION_TYPES`, the following
relevant files would be created for the ``Debug`` and ``Release``
configurations:

- ``Release/my_fw.framework/my_fw``
- ``Release/my_fw.framework/Versions/A/my_fw``
- ``Debug/my_fw.framework/my_fw_debug``
- ``Debug/my_fw.framework/Versions/A/my_fw_debug``

For framework targets, this property is initialized by the value of the
:variable:`CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>` variable if it
is set when a target is created.

This property is ignored for non-framework targets, and when using single
config generators.



/P/🚀 prop_tgt/FRAMEWORK_VERSION.rst
===============================================


FRAMEWORK_VERSION
-----------------

.. versionadded:: 3.4

Version of a framework created using the :prop_tgt:`FRAMEWORK` target
property (e.g. ``A``).

This property only affects macOS, as iOS doesn't have versioned
directory structure.



/P/🚀 prop_tgt/GENERATOR_FILE_NAME.rst
=================================================


GENERATOR_FILE_NAME
-------------------

Generator's file for this target.

An internal property used by some generators to record the name of the
project or dsp file associated with this target.  Note that at
configure time, this property is only set for targets created by
:command:`include_external_msproject`.



/P/🚀 prop_tgt/GHS_INTEGRITY_APP.rst
===============================================


GHS_INTEGRITY_APP
-----------------

.. versionadded:: 3.14

``ON`` / ``OFF`` boolean to determine if an executable target should
be treated as an `Integrity Application`.

If no value is set and if a ``.int`` file is added as a source file to the
executable target it will be treated as an `Integrity Application`.

Supported on :generator:`Green Hills MULTI`.



/P/🚀 prop_tgt/GHS_NO_SOURCE_GROUP_FILE.rst
======================================================


GHS_NO_SOURCE_GROUP_FILE
------------------------

.. versionadded:: 3.14

``ON`` / ``OFF`` boolean to control if the project file for a target should
be one single file or multiple files.

The default behavior or when the property is ``OFF`` is to generate a project
file for the target and then a sub-project file for each source group.

When this property is ``ON`` or if :variable:`CMAKE_GHS_NO_SOURCE_GROUP_FILE`
is ``ON`` then only a single project file is generated for the target.

Supported on :generator:`Green Hills MULTI`.



/P/🚀 prop_tgt/GNUtoMS.rst
=====================================


GNUtoMS
-------

Convert GNU import library (``.dll.a``) to MS format (``.lib``).

When linking a shared library or executable that exports symbols using
GNU tools on Windows (MinGW/MSYS) with Visual Studio installed convert
the import library (``.dll.a``) from GNU to MS format (``.lib``).  Both import
libraries will be installed by :command:`install(TARGETS)` and exported by
:command:`install(EXPORT)` and  :command:`export` to be linked
by applications with either GNU- or MS-compatible tools.

If the variable ``CMAKE_GNUtoMS`` is set when a target is created its
value is used to initialize this property.  The variable must be set
prior to the first command that enables a language such as :command:`project`
or :command:`enable_language`.  CMake provides the variable as an option to the
user automatically when configuring on Windows with GNU tools.



/P/🚀 prop_tgt/HAS_CXX.rst
=====================================


HAS_CXX
-------

Link the target using the C++ linker tool (obsolete).

This is equivalent to setting the :prop_tgt:`LINKER_LANGUAGE`
property to ``CXX``.



/P/🚀 prop_tgt/HEADER_DIRS.rst
=========================================


HEADER_DIRS
-----------

.. versionadded:: 3.23

Semicolon-separated list of base directories of the target's default
header set (i.e. the file set with name and type ``HEADERS``). The property
supports :manual:`generator expressions <cmake-generator-expressions(7)>`.

This property is normally only set by :command:`target_sources(FILE_SET)`
rather than being manipulated directly.

See :prop_tgt:`HEADER_DIRS_<NAME>` for the list of base directories in
other header sets.



/P/🚀 prop_tgt/HEADER_DIRS_NAME.rst
==============================================


HEADER_DIRS_<NAME>
------------------

.. versionadded:: 3.23

Semicolon-separated list of base directories of the target's ``<NAME>``
header set, which has the set type ``HEADERS``. The property supports
:manual:`generator expressions <cmake-generator-expressions(7)>`.

This property is normally only set by :command:`target_sources(FILE_SET)`
rather than being manipulated directly.

See :prop_tgt:`HEADER_DIRS` for the list of base directories in the
default header set. See :prop_tgt:`HEADER_SETS` for the file set names of all
header sets.



/P/🚀 prop_tgt/HEADER_SET.rst
========================================


HEADER_SET
----------

.. versionadded:: 3.23

Semicolon-separated list of files in the target's default header set,
(i.e. the file set with name and type ``HEADERS``). If any of the paths
are relative, they are computed relative to the target's source directory.
The property supports
:manual:`generator expressions <cmake-generator-expressions(7)>`.

This property is normally only set by :command:`target_sources(FILE_SET)`
rather than being manipulated directly.

See :prop_tgt:`HEADER_SET_<NAME>` for the list of files in other header sets.



/P/🚀 prop_tgt/HEADER_SET_NAME.rst
=============================================


HEADER_SET_<NAME>
-----------------

.. versionadded:: 3.23

Semicolon-separated list of files in the target's ``<NAME>`` header set,
which has the set type ``HEADERS``. If any of the paths are relative,
they are computed relative to the target's source directory. The property
supports :manual:`generator expressions <cmake-generator-expressions(7)>`.

This property is normally only set by :command:`target_sources(FILE_SET)`
rather than being manipulated directly.

See :prop_tgt:`HEADER_SET` for the list of files in the default header set.
See :prop_tgt:`HEADER_SETS` for the file set names of all header sets.



/P/🚀 prop_tgt/HEADER_SETS.rst
=========================================


HEADER_SETS
-----------

.. versionadded:: 3.23

Read-only list of the target's ``PRIVATE`` and ``PUBLIC`` header sets (i.e.
all file sets with the type ``HEADERS``). Files listed in these file sets are
treated as source files for the purpose of IDE integration. The files also
have their :prop_sf:`HEADER_FILE_ONLY` property set to ``TRUE``.

Header sets may be defined using the :command:`target_sources` command
``FILE_SET`` option with type ``HEADERS``.

See also :prop_tgt:`HEADER_SET_<NAME>`, :prop_tgt:`HEADER_SET` and
:prop_tgt:`INTERFACE_HEADER_SETS`.



/P/🚀 prop_tgt/HIP_ARCHITECTURES.rst
===============================================


HIP_ARCHITECTURES
-----------------

.. versionadded:: 3.21

List of GPU architectures to for which to generate device code.
Architecture names are interpreted based on :variable:`CMAKE_HIP_PLATFORM`.

A non-empty false value (e.g. ``OFF``) disables adding architectures.
This is intended to support packagers and rare cases where full control
over the passed flags is required.

This property is initialized by the value of the :variable:`CMAKE_HIP_ARCHITECTURES`
variable if it is set when a target is created.

The HIP compilation model has two modes: whole and separable. Whole compilation
generates device code at compile time. Separable compilation generates device
code at link time. Therefore the ``HIP_ARCHITECTURES`` target property should
be set on targets that compile or link with any HIP sources.

Examples
^^^^^^^^

.. code-block:: cmake

  set_property(TARGET tgt PROPERTY HIP_ARCHITECTURES gfx801 gfx900)

Generates code for both ``gfx801`` and ``gfx900``.



/P/🚀 prop_tgt/HIP_EXTENSIONS.rst
============================================


HIP_EXTENSIONS
--------------

.. versionadded:: 3.21

Boolean specifying whether compiler specific extensions are requested.

This property specifies whether compiler specific extensions should be
used.  For some compilers, this results in adding a flag such
as ``-std=gnu++11`` instead of ``-std=c++11`` to the compile line.  This
property is ``ON`` by default. The basic HIP/C++ standard level is
controlled by the :prop_tgt:`HIP_STANDARD` target property.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the :variable:`CMAKE_HIP_EXTENSIONS` variable if set when a target is created
and otherwise by the value of
:variable:`CMAKE_HIP_EXTENSIONS_DEFAULT <CMAKE_<LANG>_EXTENSIONS_DEFAULT>` (see
:policy:`CMP0128`).



/P/🚀 prop_tgt/HIP_STANDARD.rst
==========================================


HIP_STANDARD
------------

.. versionadded:: 3.21

The HIP/C++ standard requested to build this target.

Supported values are:

``98``
  HIP C++98

``11``
  HIP C++11

``14``
  HIP C++14

``17``
  HIP C++17

``20``
  HIP C++20

``23``
  HIP C++23

``26``
  .. versionadded:: 3.25

  HIP C++26. CMake 3.25 and later *recognize* ``26`` as a valid value,
  no version has support for any compiler.

If the value requested does not result in a compile flag being added for
the compiler in use, a previous standard flag will be added instead.  This
means that using:

.. code-block:: cmake

  set_property(TARGET tgt PROPERTY HIP_STANDARD 11)

with a compiler which does not support ``-std=gnu++11`` or an equivalent
flag will not result in an error or warning, but will instead add the
``-std=gnu++98`` flag if supported.  This "decay" behavior may be controlled
with the :prop_tgt:`HIP_STANDARD_REQUIRED` target property.
Additionally, the :prop_tgt:`HIP_EXTENSIONS` target property may be used to
control whether compiler-specific extensions are enabled on a per-target basis.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the :variable:`CMAKE_HIP_STANDARD` variable if it is set when a target
is created.



/P/🚀 prop_tgt/HIP_STANDARD_REQUIRED.rst
===================================================


HIP_STANDARD_REQUIRED
---------------------

.. versionadded:: 3.21

Boolean describing whether the value of :prop_tgt:`HIP_STANDARD` is a requirement.

If this property is set to ``ON``, then the value of the
:prop_tgt:`HIP_STANDARD` target property is treated as a requirement.  If this
property is ``OFF`` or unset, the :prop_tgt:`HIP_STANDARD` target property is
treated as optional and may "decay" to a previous standard if the requested is
not available.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the :variable:`CMAKE_HIP_STANDARD_REQUIRED` variable if it is set when a
target is created.



/P/🚀 prop_tgt/IMPLICIT_DEPENDS_INCLUDE_TRANSFORM.rst
================================================================


IMPLICIT_DEPENDS_INCLUDE_TRANSFORM
----------------------------------

Specify ``#include`` line transforms for dependencies in a target.

This property specifies rules to transform macro-like ``#include`` lines
during implicit dependency scanning of C and C++ source files.  The
list of rules must be semicolon-separated with each entry of the form
``A_MACRO(%)=value-with-%`` (the ``%`` must be literal).  During dependency
scanning occurrences of ``A_MACRO(...)`` on ``#include`` lines will be
replaced by the value given with the macro argument substituted for
``%``.  For example, the entry

::

  MYDIR(%)=<mydir/%>

will convert lines of the form

::

  #include MYDIR(myheader.h)

to

::

  #include <mydir/myheader.h>

allowing the dependency to be followed.

This property applies to sources in the target on which it is set.



/P/🚀 prop_tgt/IMPORTED.rst
======================================


IMPORTED
--------

Read-only indication of whether a target is ``IMPORTED``.

The boolean value of this property is ``True`` for targets created with
the ``IMPORTED`` option to :command:`add_executable` or :command:`add_library`.
It is ``False`` for targets built within the project.



/P/🚀 prop_tgt/IMPORTED_COMMON_LANGUAGE_RUNTIME.rst
==============================================================


IMPORTED_COMMON_LANGUAGE_RUNTIME
--------------------------------

.. versionadded:: 3.12

Property to define if the target uses ``C++/CLI``.

Ignored for non-imported targets.

See also the :prop_tgt:`COMMON_LANGUAGE_RUNTIME` target property.



/P/🚀 prop_tgt/IMPORTED_CONFIGURATIONS.rst
=====================================================


IMPORTED_CONFIGURATIONS
-----------------------

Configurations provided for an :ref:`imported target <Imported targets>`.

Set this to the list of configuration names available for an imported
target.  For each configuration named, the imported target's artifacts
must be specified in other target properties:

* :prop_tgt:`IMPORTED_LOCATION_<CONFIG>`, or
* :prop_tgt:`IMPORTED_IMPLIB_<CONFIG>` (on DLL platforms, on AIX for
  :ref:`Executables <Binary Executables>` or on Apple for
  :ref:`Shared Libraries <Normal Libraries>`), or
* :prop_tgt:`IMPORTED_OBJECTS_<CONFIG>` (for :ref:`Object Libraries`), or
* :prop_tgt:`IMPORTED_LIBNAME_<CONFIG>` (for :ref:`Interface Libraries`).

The configuration names correspond to those defined in the project from
which the target is imported.  If the importing project uses a different
set of configurations, the names may be mapped using the
:prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` target property.

The ``IMPORTED_CONFIGURATIONS`` property is ignored for non-imported targets.



/P/🚀 prop_tgt/IMPORTED_CXX_MODULES_COMPILE_DEFINITIONS.rst
======================================================================


IMPORTED_CXX_MODULES_COMPILE_DEFINITIONS
----------------------------------------

.. versionadded:: 3.28

Preprocessor definitions for compiling an ``IMPORTED`` target's C++ module
sources.

CMake will automatically drop some definitions that are not supported
by the native build tool.



/P/🚀 prop_tgt/IMPORTED_CXX_MODULES_COMPILE_FEATURES.rst
===================================================================


IMPORTED_CXX_MODULES_COMPILE_FEATURES
-------------------------------------

.. versionadded:: 3.28

Compiler features enabled for this ``IMPORTED`` target's C++ modules.

The value of this property is used by the generators to set the include
paths for the compiler.



/P/🚀 prop_tgt/IMPORTED_CXX_MODULES_COMPILE_OPTIONS.rst
==================================================================


IMPORTED_CXX_MODULES_COMPILE_OPTIONS
------------------------------------

.. versionadded:: 3.28

List of options to pass to the compiler for this ``IMPORTED`` target's C++
modules.

.. include:: ../command/OPTIONS_SHELL.txt



/P/🚀 prop_tgt/IMPORTED_CXX_MODULES_INCLUDE_DIRECTORIES.rst
======================================================================


IMPORTED_CXX_MODULES_INCLUDE_DIRECTORIES
----------------------------------------

.. versionadded:: 3.28

List of preprocessor include file search directories when compiling C++
modules for ``IMPORTED`` targets.

The value of this property is used by the generators to set the include
paths for the compiler.



/P/🚀 prop_tgt/IMPORTED_CXX_MODULES_LINK_LIBRARIES.rst
=================================================================


IMPORTED_CXX_MODULES_LINK_LIBRARIES
-----------------------------------

.. versionadded:: 3.28

List of direct dependencies to use for usage requirements for C++ modules in
the target's C++ modules.



/P/🚀 prop_tgt/IMPORTED_GLOBAL.rst
=============================================


IMPORTED_GLOBAL
---------------

.. versionadded:: 3.11

Indication of whether an :ref:`IMPORTED target <Imported Targets>` is
globally visible.

The boolean value of this property is True for targets created with the
``IMPORTED`` ``GLOBAL`` options to :command:`add_executable()` or
:command:`add_library()`. It is always False for targets built within the
project.

For targets created with the ``IMPORTED`` option to
:command:`add_executable()` or :command:`add_library()` but without the
additional option ``GLOBAL`` this is False, too. However, setting this
property for such a locally ``IMPORTED`` target to True promotes that
target to global scope. This promotion can only be done in the same
directory where that ``IMPORTED`` target was created in the first place.

.. note::

  Once an imported target has been made global, it cannot be changed back to
  non-global. Therefore, if a project sets this property, it may only
  provide a value of True. CMake will issue an error if the project tries to
  set the property to a non-True value, even if the value was already False.

.. note::

  Local :ref:`ALIAS targets <Alias Targets>` created before promoting an
  :ref:`IMPORTED target <Imported Targets>` from ``LOCAL`` to ``GLOBAL``, keep
  their initial scope (see :prop_tgt:`ALIAS_GLOBAL` target property).



/P/🚀 prop_tgt/IMPORTED_IMPLIB.rst
=============================================


IMPORTED_IMPLIB
---------------

Full path to the import library for an ``IMPORTED`` target.

This property may be set:

* On DLL platforms, to the location of the ``.lib`` part of the DLL.
* .. versionadded:: 3.16
    On AIX, to an import file (e.g. ``.imp``) created for executables that
    export symbols (see the :prop_tgt:`ENABLE_EXPORTS` target property).
* .. versionadded:: 3.27
    On Apple platforms, to an import file (e.g. ``.tbd``) created for shared
    libraries or frameworks (see the :prop_tgt:`ENABLE_EXPORTS` target
    property).  For frameworks, this is the location of the ``.tbd`` file
    symlink just inside the framework folder.
* .. versionadded:: 3.28
    On non-DLL platforms, to the location of a shared library.
    When set without also specifying an :prop_tgt:`IMPORTED_LOCATION`,
    the library is considered to be a stub, and its location will not
    be added as a runtime search path to dependents that link it.

.. versionchanged:: 3.28
  If an imported target is an Apple framework or XCFramework, the preferred
  arrangement is to set :prop_tgt:`IMPORTED_LOCATION` to the ``.framework``
  or ``.xcframework`` directory.  CMake will then find the relevant ``.tbd``
  file inside that framework or XCFramework automatically without requiring
  ``IMPORTED_IMPLIB`` to be set.

The ``IMPORTED_IMPLIB`` target property may be overridden for a
given configuration ``<CONFIG>`` by the configuration-specific
:prop_tgt:`IMPORTED_IMPLIB_<CONFIG>` target property.  Furthermore,
the :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` target property may be
used to map between a project's configurations and those of an imported
target.  If none of these is set then the name of any other configuration
listed in the :prop_tgt:`IMPORTED_CONFIGURATIONS` target property may be
selected and its :prop_tgt:`IMPORTED_IMPLIB_<CONFIG>` value used.

This property is ignored for non-imported targets.



/P/🚀 prop_tgt/IMPORTED_IMPLIB_CONFIG.rst
====================================================


IMPORTED_IMPLIB_<CONFIG>
------------------------

<CONFIG>-specific version of :prop_tgt:`IMPORTED_IMPLIB` property.

Configuration names correspond to those provided by the project from
which the target is imported.



/P/🚀 prop_tgt/IMPORTED_LIBNAME.rst
==============================================


IMPORTED_LIBNAME
----------------

.. versionadded:: 3.8

Specify the link library name for an :ref:`imported <Imported Targets>`
:ref:`Interface Library <Interface Libraries>`.

An interface library builds no library file itself but does specify
usage requirements for its consumers.  The ``IMPORTED_LIBNAME``
property may be set to specify a single library name to be placed
on the link line in place of the interface library target name as
a requirement for using the interface.

This property is intended for use in naming libraries provided by
a platform SDK for which the full path to a library file may not
be known.  The value may be a plain library name such as ``foo``
but may *not* be a path (e.g. ``/usr/lib/libfoo.so``) or a flag
(e.g. ``-Wl,...``).  The name is never treated as a library target
name even if it happens to name one.

The ``IMPORTED_LIBNAME`` property is allowed only on
:ref:`imported <Imported Targets>` :ref:`Interface Libraries`
and is rejected on targets of other types (for which
the :prop_tgt:`IMPORTED_LOCATION` target property may be used).



/P/🚀 prop_tgt/IMPORTED_LIBNAME_CONFIG.rst
=====================================================


IMPORTED_LIBNAME_<CONFIG>
-------------------------

.. versionadded:: 3.8

<CONFIG>-specific version of :prop_tgt:`IMPORTED_LIBNAME` property.

Configuration names correspond to those provided by the project from
which the target is imported.



/P/🚀 prop_tgt/IMPORTED_LINK_DEPENDENT_LIBRARIES.rst
===============================================================


IMPORTED_LINK_DEPENDENT_LIBRARIES
---------------------------------

Dependent shared libraries of an imported shared library.

Shared libraries may be linked to other shared libraries as part of
their implementation.  On some platforms the linker searches for the
dependent libraries of shared libraries they are including in the
link.  Set this property to the list of dependent shared libraries of
an imported library.  The list should be disjoint from the list of
interface libraries in the :prop_tgt:`INTERFACE_LINK_LIBRARIES` property.  On
platforms requiring dependent shared libraries to be found at link
time CMake uses this list to add appropriate files or paths to the
link command line.  Ignored for non-imported targets.



/P/🚀 prop_tgt/IMPORTED_LINK_DEPENDENT_LIBRARIES_CONFIG.rst
======================================================================


IMPORTED_LINK_DEPENDENT_LIBRARIES_<CONFIG>
------------------------------------------

<CONFIG>-specific version of :prop_tgt:`IMPORTED_LINK_DEPENDENT_LIBRARIES`.

Configuration names correspond to those provided by the project from
which the target is imported.  If set, this property completely
overrides the generic property for the named configuration.



/P/🚀 prop_tgt/IMPORTED_LINK_INTERFACE_LANGUAGES.rst
===============================================================


IMPORTED_LINK_INTERFACE_LANGUAGES
---------------------------------

Languages compiled into an ``IMPORTED`` static library.

Set this to the list of languages of source files compiled to produce
a ``STATIC IMPORTED`` library (such as ``C`` or ``CXX``).  CMake accounts for
these languages when computing how to link a target to the imported
library.  For example, when a C executable links to an imported C++
static library CMake chooses the C++ linker to satisfy language
runtime dependencies of the static library.

This property is ignored for targets that are not ``STATIC`` libraries.
This property is ignored for non-imported targets.



/P/🚀 prop_tgt/IMPORTED_LINK_INTERFACE_LANGUAGES_CONFIG.rst
======================================================================


IMPORTED_LINK_INTERFACE_LANGUAGES_<CONFIG>
------------------------------------------

<CONFIG>-specific version of :prop_tgt:`IMPORTED_LINK_INTERFACE_LANGUAGES`.

Configuration names correspond to those provided by the project from
which the target is imported.  If set, this property completely
overrides the generic property for the named configuration.



/P/🚀 prop_tgt/IMPORTED_LINK_INTERFACE_LIBRARIES.rst
===============================================================


IMPORTED_LINK_INTERFACE_LIBRARIES
---------------------------------

Transitive link interface of an ``IMPORTED`` target.

Set this to the list of libraries whose interface is included when an
``IMPORTED`` library target is linked to another target.  The libraries
will be included on the link line for the target.  Unlike the
:prop_tgt:`LINK_INTERFACE_LIBRARIES` property, this property applies to all
imported target types, including ``STATIC`` libraries.  This property is
ignored for non-imported targets.

This property is ignored if the target also has a non-empty
:prop_tgt:`INTERFACE_LINK_LIBRARIES` property.

This property is deprecated.  Use :prop_tgt:`INTERFACE_LINK_LIBRARIES` instead.



/P/🚀 prop_tgt/IMPORTED_LINK_INTERFACE_LIBRARIES_CONFIG.rst
======================================================================


IMPORTED_LINK_INTERFACE_LIBRARIES_<CONFIG>
------------------------------------------

<CONFIG>-specific version of :prop_tgt:`IMPORTED_LINK_INTERFACE_LIBRARIES`.

Configuration names correspond to those provided by the project from
which the target is imported.  If set, this property completely
overrides the generic property for the named configuration.

This property is ignored if the target also has a non-empty
:prop_tgt:`INTERFACE_LINK_LIBRARIES` property.

This property is deprecated.  Use :prop_tgt:`INTERFACE_LINK_LIBRARIES` instead.



/P/🚀 prop_tgt/IMPORTED_LINK_INTERFACE_MULTIPLICITY.rst
==================================================================


IMPORTED_LINK_INTERFACE_MULTIPLICITY
------------------------------------

Repetition count for cycles of ``IMPORTED`` static libraries.

This is :prop_tgt:`LINK_INTERFACE_MULTIPLICITY` for ``IMPORTED`` targets.



/P/🚀 prop_tgt/IMPORTED_LINK_INTERFACE_MULTIPLICITY_CONFIG.rst
=========================================================================


IMPORTED_LINK_INTERFACE_MULTIPLICITY_<CONFIG>
---------------------------------------------

<CONFIG>-specific version of :prop_tgt:`IMPORTED_LINK_INTERFACE_MULTIPLICITY`.

If set, this property completely overrides the generic property for
the named configuration.



/P/🚀 prop_tgt/IMPORTED_LOCATION.rst
===============================================


IMPORTED_LOCATION
-----------------

Full path to the main file on disk for an ``IMPORTED`` target.

Set this to the location of an ``IMPORTED`` target file on disk.  For
executables this is the location of the executable file.  For ``STATIC``
libraries and modules this is the location of the library or module.
For ``SHARED`` libraries on non-DLL platforms this is the location of the
shared library.  For application bundles on macOS this is the location of
the executable file inside ``Contents/MacOS`` within the bundle folder.
For frameworks on macOS this is the location of the
library file symlink just inside the framework folder.  For DLLs this
is the location of the ``.dll`` part of the library.  For ``UNKNOWN``
libraries this is the location of the file to be linked.  Ignored for
non-imported targets.

.. versionadded:: 3.28

  For ordinary frameworks on Apple platforms, this may be the location of the
  ``.framework`` folder itself.  For XCFrameworks, it may be the location of
  the ``.xcframework`` folder, in which case any target that links against it
  will get the selected library's ``Headers`` directory as a usage requirement.

The ``IMPORTED_LOCATION`` target property may be overridden for a
given configuration ``<CONFIG>`` by the configuration-specific
:prop_tgt:`IMPORTED_LOCATION_<CONFIG>` target property.  Furthermore,
the :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` target property may be
used to map between a project's configurations and those of an imported
target.  If none of these is set then the name of any other configuration
listed in the :prop_tgt:`IMPORTED_CONFIGURATIONS` target property may be
selected and its :prop_tgt:`IMPORTED_LOCATION_<CONFIG>` value used.

To get the location of an imported target read one of the :prop_tgt:`LOCATION`
or :prop_tgt:`LOCATION_<CONFIG>` properties.

For platforms with import libraries (e.g. Windows, AIX or Apple) see also
:prop_tgt:`IMPORTED_IMPLIB`.



/P/🚀 prop_tgt/IMPORTED_LOCATION_CONFIG.rst
======================================================


IMPORTED_LOCATION_<CONFIG>
--------------------------

<CONFIG>-specific version of :prop_tgt:`IMPORTED_LOCATION` property.

Configuration names correspond to those provided by the project from
which the target is imported.



/P/🚀 prop_tgt/IMPORTED_NO_SONAME.rst
================================================


IMPORTED_NO_SONAME
------------------

Specifies that an ``IMPORTED`` shared library target has no ``soname``.

Set this property to true for an imported shared library file that has
no ``soname`` field.  CMake may adjust generated link commands for some
platforms to prevent the linker from using the path to the library in
place of its missing ``soname``.  Ignored for non-imported targets.



/P/🚀 prop_tgt/IMPORTED_NO_SONAME_CONFIG.rst
=======================================================


IMPORTED_NO_SONAME_<CONFIG>
---------------------------

<CONFIG>-specific version of :prop_tgt:`IMPORTED_NO_SONAME` property.

Configuration names correspond to those provided by the project from
which the target is imported.



/P/🚀 prop_tgt/IMPORTED_OBJECTS.rst
==============================================


IMPORTED_OBJECTS
----------------

.. versionadded:: 3.9

A :ref:`semicolon-separated list <CMake Language Lists>` of absolute paths
to the object files on disk for an :ref:`imported <Imported targets>`
:ref:`object library <object libraries>`.

Ignored for non-imported targets.

Projects may skip ``IMPORTED_OBJECTS`` if the configuration-specific
property :prop_tgt:`IMPORTED_OBJECTS_<CONFIG>` is set instead, except in
situations as noted in the section below.


Xcode Generator Considerations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.20

For Apple platforms, a project may be built for more than one architecture.
This is controlled by the :variable:`CMAKE_OSX_ARCHITECTURES` variable.
For all but the :generator:`Xcode` generator, CMake invokes compilers once
per source file and passes multiple ``-arch`` flags, leading to a single
object file which will be a universal binary.  Such object files work well
when listed in the ``IMPORTED_OBJECTS`` of a separate CMake build, even for
the :generator:`Xcode` generator.  But producing such object files with the
:generator:`Xcode` generator is more difficult, since it invokes the compiler
once per architecture for each source file.  Unlike the other generators,
it does not generate universal object file binaries.

A further complication with the :generator:`Xcode` generator is that when
targeting device platforms (iOS, tvOS, visionOS or watchOS), the :generator:`Xcode`
generator has the ability to use either the device or simulator SDK without
needing CMake to be re-run.  The SDK can be selected at build time.
But since some architectures can be supported by both the device and the
simulator SDKs (e.g. ``arm64`` with Xcode 12 or later), not all combinations
can be represented in a single universal binary.  The only solution in this
case is to have multiple object files.

``IMPORTED_OBJECTS`` doesn't support generator expressions, so every file
it lists needs to be valid for every architecture and SDK.  If incorporating
object files that are not universal binaries, the path and/or file name of
each object file has to somehow encapsulate the different architectures and
SDKs.  With the :generator:`Xcode` generator, Xcode variables of the form
``$(...)`` can be used to represent these aspects and Xcode will substitute
the appropriate values at build time.  CMake doesn't interpret these
variables and embeds them unchanged in the Xcode project file.
``$(CURRENT_ARCH)`` can be used to represent the architecture, while
``$(EFFECTIVE_PLATFORM_NAME)`` can be used to differentiate between SDKs.

The following shows one example of how these two variables can be used to
refer to an object file whose location depends on both the SDK and the
architecture:

.. code-block:: cmake

  add_library(someObjs OBJECT IMPORTED)

  set_property(TARGET someObjs PROPERTY IMPORTED_OBJECTS
    # Quotes are required because of the ()
    "/path/to/somewhere/objects$(EFFECTIVE_PLATFORM_NAME)/$(CURRENT_ARCH)/func.o"
  )

  # Example paths:
  #   /path/to/somewhere/objects-iphoneos/arm64/func.o
  #   /path/to/somewhere/objects-iphonesimulator/x86_64/func.o

In some cases, you may want to have configuration-specific object files
as well.  The ``$(CONFIGURATION)`` Xcode variable is often used for this and
can be used in conjunction with the others mentioned above:

.. code-block:: cmake

  add_library(someObjs OBJECT IMPORTED)
  set_property(TARGET someObjs PROPERTY IMPORTED_OBJECTS
    "/path/to/somewhere/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)/$(CURRENT_ARCH)/func.o"
  )

  # Example paths:
  #   /path/to/somewhere/Release-iphoneos/arm64/func.o
  #   /path/to/somewhere/Debug-iphonesimulator/x86_64/func.o

When any Xcode variable is used, CMake is not able to fully evaluate the
path(s) at configure time.  One consequence of this is that the
configuration-specific :prop_tgt:`IMPORTED_OBJECTS_<CONFIG>` properties cannot
be used, since CMake cannot determine whether an object file exists at a
particular ``<CONFIG>`` location.  The ``IMPORTED_OBJECTS`` property must be
used for these situations and the configuration-specific aspects of the path
should be handled by the ``$(CONFIGURATION)`` Xcode variable.



/P/🚀 prop_tgt/IMPORTED_OBJECTS_CONFIG.rst
=====================================================


IMPORTED_OBJECTS_<CONFIG>
-------------------------

.. versionadded:: 3.9

``<CONFIG>``-specific version of :prop_tgt:`IMPORTED_OBJECTS` property.

Configuration names correspond to those provided by the project from
which the target is imported.


Xcode Generator Considerations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Do not use this ``<CONFIG>``-specific property if you need to use Xcode
variables like ``$(CURRENT_ARCH)`` or ``$(EFFECTIVE_PLATFORM_NAME)`` in
the value.  The ``<CONFIG>``-specific properties will be ignored in such
cases because CMake cannot determine whether a file exists at the
configuration-specific path at configuration time.  For such cases, use
:prop_tgt:`IMPORTED_OBJECTS` instead.



/P/🚀 prop_tgt/IMPORTED_SONAME.rst
=============================================


IMPORTED_SONAME
---------------

The ``soname`` of an ``IMPORTED`` target of shared library type.

Set this to the ``soname`` embedded in an imported shared library.  This
is meaningful only on platforms supporting the feature.  Ignored for
non-imported targets.



/P/🚀 prop_tgt/IMPORTED_SONAME_CONFIG.rst
====================================================


IMPORTED_SONAME_<CONFIG>
------------------------

<CONFIG>-specific version of :prop_tgt:`IMPORTED_SONAME` property.

Configuration names correspond to those provided by the project from
which the target is imported.



/P/🚀 prop_tgt/IMPORT_PREFIX.rst
===========================================


IMPORT_PREFIX
-------------

What comes before the import library name.

Similar to the target property :prop_tgt:`PREFIX`, but used for import libraries
(typically corresponding to a ``DLL``) instead of regular libraries.  A
target property that can be set to override the prefix (such as ``lib``)
on an import library name.



/P/🚀 prop_tgt/IMPORT_SUFFIX.rst
===========================================


IMPORT_SUFFIX
-------------

What comes after the import library name.

Similar to the target property :prop_tgt:`SUFFIX`, but used
for import libraries (typically corresponding to a ``DLL``) instead of
regular libraries.  A target property that can be set to override
the suffix (such as ``.lib``) on an import library name.



/P/🚀 prop_tgt/INCLUDE_DIRECTORIES.rst
=================================================


INCLUDE_DIRECTORIES
-------------------

List of preprocessor include file search directories.

This property specifies the list of directories given so far to the
:command:`target_include_directories` command.  In addition to accepting
values from that command, values may be set directly on any
target using the :command:`set_property` command.  A target gets its
initial value for this property from the value of the
:prop_dir:`INCLUDE_DIRECTORIES` directory property.  Both directory and
target property values are adjusted by calls to the
:command:`include_directories` command.

The value of this property is used by the generators to set the include
paths for the compiler.

Relative paths should not be added to this property directly. Use one of
the commands above instead to handle relative paths.

Contents of ``INCLUDE_DIRECTORIES`` may use :manual:`cmake-generator-expressions(7)` with
the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
manual for available expressions.  See the :manual:`cmake-buildsystem(7)`
manual for more on defining buildsystem properties.



/P/🚀 prop_tgt/INSTALL_NAME_DIR.rst
==============================================


INSTALL_NAME_DIR
----------------

Directory name for installed targets on Apple platforms.

``INSTALL_NAME_DIR`` is a string specifying the directory portion of the
"install_name" field of shared libraries on Apple platforms for
installed targets.  When not set, the default directory used is determined
by :prop_tgt:`MACOSX_RPATH`.  If the :prop_tgt:`BUILD_WITH_INSTALL_NAME_DIR`
property is set, this will be used already in the build tree.
Policies :policy:`CMP0068` and :policy:`CMP0042` are also relevant.

This property is initialized by the value of the variable
:variable:`CMAKE_INSTALL_NAME_DIR` if it is set when a target is
created.

This property supports :manual:`generator expressions <cmake-generator-expressions(7)>`.
In particular, the :genex:`$<INSTALL_PREFIX>` generator expression can be
used to set the directory relative to the install-time prefix.

On platforms that support runtime paths (``RPATH``), refer to the
:prop_tgt:`INSTALL_RPATH` target property.
Under Windows, the :genex:`TARGET_RUNTIME_DLLS` generator expression is related.



/P/🚀 prop_tgt/INSTALL_REMOVE_ENVIRONMENT_RPATH.rst
==============================================================


INSTALL_REMOVE_ENVIRONMENT_RPATH
--------------------------------

.. versionadded:: 3.16

Controls whether toolchain-defined rpaths should be removed during installation.

When a target is being installed, CMake may need to rewrite its rpath
information.  This occurs when the install rpath (as specified by the
:prop_tgt:`INSTALL_RPATH` target property) has different contents to the rpath
that the target was built with.  Some toolchains insert their own rpath
contents into the binary as part of the build.  By default, CMake will
preserve those extra inserted contents in the install rpath.  For those
scenarios where such toolchain-inserted entries need to be discarded during
install, set the ``INSTALL_REMOVE_ENVIRONMENT_RPATH`` target property to true.

This property is initialized by the value of
:variable:`CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH` when the target is created.



/P/🚀 prop_tgt/INSTALL_RPATH.rst
===========================================


INSTALL_RPATH
-------------

The rpath to use for installed targets.

By default, the install rpath is empty. It can be set using this property,
which is a semicolon-separated list specifying the rpath to use in installed
targets (for platforms that support it).  This property is initialized
by the value of the variable :variable:`CMAKE_INSTALL_RPATH` if it is set
when a target is created.
Beside setting the install rpath manually, using the
:prop_tgt:`INSTALL_RPATH_USE_LINK_PATH` target property it can also be
generated automatically by CMake.

Normally CMake uses the build tree for the RPATH when building executables
etc on systems that use RPATH, see the :prop_tgt:`BUILD_RPATH` target
property. When the software is installed
the targets are edited (or relinked) by CMake (see
:variable:`CMAKE_NO_BUILTIN_CHRPATH`) to have the install RPATH.
This editing during installation can be avoided via
the :prop_tgt:`BUILD_WITH_INSTALL_RPATH` target property.

For handling toolchain-dependent RPATH entries the
:prop_tgt:`INSTALL_REMOVE_ENVIRONMENT_RPATH` can be used.
Runtime paths can be disabled completely via the :variable:`CMAKE_SKIP_RPATH`
variable.

Because the rpath may contain ``${ORIGIN}``, which coincides with CMake syntax,
the contents of ``INSTALL_RPATH`` are properly escaped in the
``cmake_install.cmake`` script (see policy :policy:`CMP0095`.)

This property supports
:manual:`generator expressions <cmake-generator-expressions(7)>`.

On Apple platforms, refer to the :prop_tgt:`INSTALL_NAME_DIR` target property.
Under Windows, the :genex:`TARGET_RUNTIME_DLLS` generator expression is related.



/P/🚀 prop_tgt/INSTALL_RPATH_USE_LINK_PATH.rst
=========================================================


INSTALL_RPATH_USE_LINK_PATH
---------------------------

Add paths to linker search and installed rpath.

``INSTALL_RPATH_USE_LINK_PATH`` is a boolean that if set to ``TRUE``
will append to the runtime search path (rpath) of installed binaries
any directories outside the project that are in the linker search path or
contain linked library files.  The directories are appended after the
value of the :prop_tgt:`INSTALL_RPATH` target property.

This property is initialized by the value of the variable
:variable:`CMAKE_INSTALL_RPATH_USE_LINK_PATH` if it is set when a target is
created.



/P/🚀 prop_tgt/INTERFACE_AUTOMOC_MACRO_NAMES.rst
===========================================================


INTERFACE_AUTOMOC_MACRO_NAMES
-----------------------------

.. versionadded:: 3.27

A :ref:`semicolon-separated list <CMake Language Lists>` of macro names for
:prop_tgt:`AUTOMOC` to be propagated to consumers.

When a target with :prop_tgt:`AUTOMOC` enabled links to a library that sets
``INTERFACE_AUTOMOC_MACRO_NAMES``, the target inherits the listed macro names
and merges them with those specified in its own :prop_tgt:`AUTOMOC_MACRO_NAMES`
property.  The target will then automatically generate MOC files for source
files that contain the inherited macro names too, not just the macro names
specified in its own :prop_tgt:`AUTOMOC_MACRO_NAMES` property.

By default ``INTERFACE_AUTOMOC_MACRO_NAMES`` is empty.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.

Example 1
^^^^^^^^^

In this example, ``myapp`` inherits the macro names ``STATIC_LIB_1`` and
``STATIC_LIB_2`` from ``static_lib``.  The ``moc`` tool will then automatically
be run on any of the ``myapp`` sources which contain ``STATIC_LIB_1`` or
``STATIC_LIB_2``.

.. code-block:: cmake

  set(AUTOMOC ON)
  add_executable(myapp main.cpp)
  target_link_libraries(myapp PRIVATE static_lib)

  add_library(static_lib STATIC static.cpp)
  set_property(TARGET static_lib PROPERTY
    INTERFACE_AUTOMOC_MACRO_NAMES "STATIC_LIB_1;STATIC_LIB_2"
  )

Example 2
^^^^^^^^^

In this example, the ``INTERFACE_AUTOMOC_MACRO_NAMES`` target property of the
various ``*_deep_lib`` libraries will propagate to ``shared_lib``,
``static_lib`` and ``interface_lib``.  Because the linking relationships are
specified as ``PUBLIC`` and ``INTERFACE``, those macro names will also further
propagate transitively up to ``app``.

.. code-block:: cmake

  set(AUTOMOC ON)

  add_library(shared_deep_lib SHARED deep_lib.cpp)
  add_library(static_deep_lib STATIC deep_lib.cpp)
  add_library(interface_deep_lib INTERFACE)

  set_property(TARGET shared_deep_lib PROPERTY
    INTERFACE_AUTOMOC_MACRO_NAMES "SHARED_LINK_LIB"
  )
  set_property(TARGET static_deep_lib PROPERTY
    INTERFACE_AUTOMOC_MACRO_NAMES "STATIC_LINK_LIB"
  )
  set_property(TARGET interface_deep_lib PROPERTY
    INTERFACE_AUTOMOC_MACRO_NAMES "INTERFACE_LINK_LIB"
  )

  add_library(shared_lib SHARED lib.cpp)
  add_library(static_lib STATIC lib.cpp)
  add_library(interface_lib INTERFACE)

  # PUBLIC and INTERFACE here ensure the macro names propagate to any
  # consumers of shared_lib, static_lib or interface_lib too
  target_link_libraries(shared_lib PUBLIC shared_deep_lib)
  target_link_libraries(static_lib PUBLIC static_deep_lib)
  target_link_libraries(interface_lib INTERFACE interface_deep_lib)

  # This consumer will receive all three of the above custom macro names as
  # transitive usage requirements
  add_executable(app main.cpp)
  target_link_libraries(app PRIVATE shared_lib static_lib interface_lib)

In the above:

* ``shared_lib`` sources will be processed by ``moc`` if they contain
  ``SHARED_LINK_LIB``.
* ``static_lib`` sources will be processed by ``moc`` if they contain
  ``STATIC_LINK_LIB``.
* ``app`` sources will be processed by ``moc`` if they contain
  ``SHARED_LINK_LIB``, ``STATIC_LINK_LIB`` or ``INTERFACE_LINK_LIB``.



/P/🚀 prop_tgt/INTERFACE_AUTOUIC_OPTIONS.rst
=======================================================


INTERFACE_AUTOUIC_OPTIONS
-------------------------

List of interface options to pass to uic.

Targets may populate this property to publish the options
required to use when invoking ``uic``.  Consuming targets can add entries to their
own :prop_tgt:`AUTOUIC_OPTIONS` property such as
``$<TARGET_PROPERTY:foo,INTERFACE_AUTOUIC_OPTIONS>`` to use the uic options
specified in the interface of ``foo``. This is done automatically by
the :command:`target_link_libraries` command.

This property supports generator expressions.  See the
:manual:`cmake-generator-expressions(7)` manual for available expressions.



/P/🚀 prop_tgt/INTERFACE_COMPILE_DEFINITIONS.rst
===========================================================


INTERFACE_COMPILE_DEFINITIONS
-----------------------------

.. |property_name| replace:: compile definitions
.. |command_name| replace:: :command:`target_compile_definitions`
.. |PROPERTY_INTERFACE_NAME| replace:: ``INTERFACE_COMPILE_DEFINITIONS``
.. |PROPERTY_LINK| replace:: :prop_tgt:`COMPILE_DEFINITIONS`
.. include:: INTERFACE_BUILD_PROPERTY.txt



/P/🚀 prop_tgt/INTERFACE_COMPILE_FEATURES.rst
========================================================


INTERFACE_COMPILE_FEATURES
--------------------------

.. versionadded:: 3.1

.. |property_name| replace:: compile features
.. |command_name| replace:: :command:`target_compile_features`
.. |PROPERTY_INTERFACE_NAME| replace:: ``INTERFACE_COMPILE_FEATURES``
.. |PROPERTY_LINK| replace:: :prop_tgt:`COMPILE_FEATURES`
.. include:: INTERFACE_BUILD_PROPERTY.txt

See the :manual:`cmake-compile-features(7)` manual for information on compile
features and a list of supported compilers.



/P/🚀 prop_tgt/INTERFACE_COMPILE_OPTIONS.rst
=======================================================


INTERFACE_COMPILE_OPTIONS
-------------------------

.. |property_name| replace:: compile options
.. |command_name| replace:: :command:`target_compile_options`
.. |PROPERTY_INTERFACE_NAME| replace:: ``INTERFACE_COMPILE_OPTIONS``
.. |PROPERTY_LINK| replace:: :prop_tgt:`COMPILE_OPTIONS`
.. include:: INTERFACE_BUILD_PROPERTY.txt



/P/🚀 prop_tgt/INTERFACE_CXX_MODULE_SETS.rst
=======================================================


INTERFACE_CXX_MODULE_SETS
-------------------------

.. versionadded:: 3.28

Read-only list of the target's ``PUBLIC`` C++ module sets (i.e. all file sets
with the type ``CXX_MODULES``). Files listed in these C++ module sets can be
installed with :command:`install(TARGETS)` and exported with
:command:`install(EXPORT)` and :command:`export`.

C++ module sets may be defined using the :command:`target_sources` command
``FILE_SET`` option with type ``CXX_MODULES``.

See also :prop_tgt:`CXX_MODULE_SETS`.



/P/🚀 prop_tgt/INTERFACE_HEADER_SETS.rst
===================================================


INTERFACE_HEADER_SETS
---------------------

.. versionadded:: 3.23

Read-only list of the target's ``INTERFACE`` and ``PUBLIC`` header sets (i.e.
all file sets with the type ``HEADERS``). Files listed in these header sets
can be installed with :command:`install(TARGETS)` and exported with
:command:`install(EXPORT)` and :command:`export`.

Header sets may be defined using the :command:`target_sources` command
``FILE_SET`` option with type ``HEADERS``.

See also :prop_tgt:`HEADER_SETS`.



/P/🚀 prop_tgt/INTERFACE_HEADER_SETS_TO_VERIFY.rst
=============================================================


INTERFACE_HEADER_SETS_TO_VERIFY
-------------------------------

.. versionadded:: 3.24

Used to specify which ``PUBLIC`` and ``INTERFACE`` header sets of a target
should be verified.

This property contains a semicolon-separated list of header sets which
should be verified if :prop_tgt:`VERIFY_INTERFACE_HEADER_SETS` is set to
``TRUE``. If the list is empty, all ``PUBLIC`` and ``INTERFACE`` header sets
are verified. (If the project does not want to verify any header sets on the
target, simply set :prop_tgt:`VERIFY_INTERFACE_HEADER_SETS` to ``FALSE``.)



/P/🚀 prop_tgt/INTERFACE_INCLUDE_DIRECTORIES.rst
===========================================================


INTERFACE_INCLUDE_DIRECTORIES
-----------------------------

.. |property_name| replace:: include directories
.. |command_name| replace:: :command:`target_include_directories`
.. |PROPERTY_INTERFACE_NAME| replace:: ``INTERFACE_INCLUDE_DIRECTORIES``
.. |PROPERTY_LINK| replace:: :prop_tgt:`INCLUDE_DIRECTORIES`
.. include:: INTERFACE_BUILD_PROPERTY.txt

Include directories usage requirements commonly differ between the build-tree
and the install-tree.  The ``BUILD_INTERFACE`` and ``INSTALL_INTERFACE``
generator expressions can be used to describe separate usage requirements
based on the usage location.  Relative paths are allowed within the
``INSTALL_INTERFACE`` expression and are interpreted relative to the
installation prefix.  For example:

.. code-block:: cmake

  target_include_directories(mylib INTERFACE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/mylib>
    $<INSTALL_INTERFACE:include/mylib>  # <prefix>/include/mylib
  )

Creating Relocatable Packages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. |INTERFACE_PROPERTY_LINK| replace:: ``INTERFACE_INCLUDE_DIRECTORIES``
.. include:: /include/INTERFACE_INCLUDE_DIRECTORIES_WARNING.txt



/P/🚀 prop_tgt/INTERFACE_LINK_DEPENDS.rst
====================================================


INTERFACE_LINK_DEPENDS
----------------------

.. versionadded:: 3.13

Additional public interface files on which a target binary depends for linking.

This property is supported only by :generator:`Ninja` and
:ref:`Makefile Generators`.
It is intended to specify dependencies on "linker scripts" for
custom Makefile link rules.

When target dependencies are specified using :command:`target_link_libraries`,
CMake will read this property from all target dependencies to determine the
build properties of the consumer.

Contents of ``INTERFACE_LINK_DEPENDS`` may use "generator expressions"
with the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
manual for available expressions.  See the :manual:`cmake-buildsystem(7)`
-manual for more on defining buildsystem properties.

Link dependency files usage requirements commonly differ between the build-tree
and the install-tree.  The ``BUILD_INTERFACE`` and ``INSTALL_INTERFACE``
generator expressions can be used to describe separate usage requirements
based on the usage location.  Relative paths are allowed within the
``INSTALL_INTERFACE`` expression and are interpreted relative to the
installation prefix.  For example:

.. code-block:: cmake

  set_property(TARGET mylib PROPERTY INTERFACE_LINK_DEPENDS
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/mylinkscript>
    $<INSTALL_INTERFACE:mylinkscript>  # <prefix>/mylinkscript
  )



/P/🚀 prop_tgt/INTERFACE_LINK_DIRECTORIES.rst
========================================================


INTERFACE_LINK_DIRECTORIES
--------------------------

.. versionadded:: 3.13

.. |property_name| replace:: link directories
.. |command_name| replace:: :command:`target_link_directories`
.. |PROPERTY_INTERFACE_NAME| replace:: ``INTERFACE_LINK_DIRECTORIES``
.. |PROPERTY_LINK| replace:: :prop_tgt:`LINK_DIRECTORIES`
.. include:: INTERFACE_BUILD_PROPERTY.txt



/P/🚀 prop_tgt/INTERFACE_LINK_LIBRARIES.rst
======================================================


INTERFACE_LINK_LIBRARIES
------------------------

List public interface libraries for a library.

This property contains the list of transitive link dependencies.  When
the target is linked into another target using the
:command:`target_link_libraries` command, the libraries listed (and
recursively their link interface libraries) will be provided to the
other target also.  This property is overridden by the
:prop_tgt:`LINK_INTERFACE_LIBRARIES` or
:prop_tgt:`LINK_INTERFACE_LIBRARIES_<CONFIG>` property if policy
:policy:`CMP0022` is ``OLD`` or unset.

The value of this property is used by the generators when constructing
the link rule for a dependent target.  A dependent target's direct
link dependencies, specified by its :prop_tgt:`LINK_LIBRARIES` target
property, are linked first, followed by indirect dependencies from the
transitive closure of the direct dependencies'
``INTERFACE_LINK_LIBRARIES`` properties.  See policy :policy:`CMP0022`.

Contents of ``INTERFACE_LINK_LIBRARIES`` may use "generator expressions"
with the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
manual for available expressions.  See the :manual:`cmake-buildsystem(7)`
manual for more on defining buildsystem properties.

.. include:: LINK_LIBRARIES_INDIRECTION.txt

``INTERFACE_LINK_LIBRARIES`` adds transitive link dependencies for a
target's dependents.  In advanced use cases, one may update the
direct link dependencies of a target's dependents by using the
:prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` and
:prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE` target properties.

Creating Relocatable Packages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. |INTERFACE_PROPERTY_LINK| replace:: ``INTERFACE_LINK_LIBRARIES``
.. include:: /include/INTERFACE_LINK_LIBRARIES_WARNING.txt



/P/🚀 prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst
=============================================================


INTERFACE_LINK_LIBRARIES_DIRECT
-------------------------------

.. versionadded:: 3.24

List of libraries that consumers of this library should treat
as direct link dependencies.

This target property may be set to *include* items in a dependent
target's final set of direct link dependencies.  See the
:prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE` target property
to exclude items.

The initial set of a dependent target's direct link dependencies is
specified by its :prop_tgt:`LINK_LIBRARIES` target property.  Indirect
link dependencies are specified by the transitive closure of the direct
link dependencies' :prop_tgt:`INTERFACE_LINK_LIBRARIES` properties.
Any link dependency may specify additional direct link dependencies
using the ``INTERFACE_LINK_LIBRARIES_DIRECT`` target property.
The set of direct link dependencies is then filtered to exclude items named
by any dependency's :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`
target property.

.. |INTERFACE_PROPERTY_LINK_DIRECT| replace:: ``INTERFACE_LINK_LIBRARIES_DIRECT``
.. include:: INTERFACE_LINK_LIBRARIES_DIRECT.txt

Direct Link Dependencies as Usage Requirements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ``INTERFACE_LINK_LIBRARIES_DIRECT`` and
``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` target properties
are :ref:`usage requirements <Target Usage Requirements>`.
Their effects propagate to dependent targets transitively, and can
therefore affect the direct link dependencies of every target in a
chain of dependent libraries.  Whenever some library target ``X`` links
to another library target ``Y`` whose direct or transitive usage
requirements contain ``INTERFACE_LINK_LIBRARIES_DIRECT`` or
``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``, the properties may affect
``X``'s list of direct link dependencies:

* If ``X`` is a shared library or executable, its dependencies are linked.
  They also affect the usage requirements with which ``X``'s sources are
  compiled.

* If ``X`` is a static library or object library, it does not actually
  link, so its dependencies at most affect the usage requirements with
  which ``X``'s sources are compiled.

The properties may also affect the list of direct link dependencies
on ``X``'s dependents:

* If ``X`` links ``Y`` publicly:

  .. code-block:: cmake

    target_link_libraries(X PUBLIC Y)

  then ``Y`` is placed in ``X``'s :prop_tgt:`INTERFACE_LINK_LIBRARIES`,
  so ``Y``'s usage requirements, including ``INTERFACE_LINK_LIBRARIES_DIRECT``,
  ``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``, and the usage requirements
  declared by the direct link dependencies they add, are propagated to
  ``X``'s dependents.

* If ``X`` is a static library or object library, and links ``Y`` privately:

  .. code-block:: cmake

    target_link_libraries(X PRIVATE Y)

  then ``$<LINK_ONLY:Y>`` is placed in ``X``'s
  :prop_tgt:`INTERFACE_LINK_LIBRARIES`.  ``Y``'s linking requirements,
  including ``INTERFACE_LINK_LIBRARIES_DIRECT``,
  ``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``, and the transitive link
  dependencies declared by the direct link dependencies they add, are
  propagated to ``X``'s dependents.  However, ``Y``'s non-linking
  usage requirements are blocked by the :genex:`LINK_ONLY` generator
  expression, and are not propagated to ``X``'s dependents.

* If ``X`` is a shared library or executable, and links ``Y`` privately:

  .. code-block:: cmake

    target_link_libraries(X PRIVATE Y)

  then ``Y`` is not placed in ``X``'s :prop_tgt:`INTERFACE_LINK_LIBRARIES`,
  so ``Y``'s usage requirements, even ``INTERFACE_LINK_LIBRARIES_DIRECT``
  and ``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``, are not propagated to
  ``X``'s dependents.

* In all cases, the content of ``X``'s :prop_tgt:`INTERFACE_LINK_LIBRARIES`
  is not affected by ``Y``'s ``INTERFACE_LINK_LIBRARIES_DIRECT`` or
  ``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``.

One may limit the effects of ``INTERFACE_LINK_LIBRARIES_DIRECT`` and
``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` to a subset of dependent
targets by using the :genex:`TARGET_PROPERTY` generator expression.
For example, to limit the effects to executable targets, use an
entry of the form::

  "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:...>"

Similarly, to limit the effects to specific targets, use an entry
of the form::

  "$<$<BOOL:$<TARGET_PROPERTY:USE_IT>>:...>"

This entry will only affect targets that set their ``USE_IT``
target property to a true value.

Direct Link Dependency Ordering
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The list of direct link dependencies for a target is computed from an
initial ordered list in its :prop_tgt:`LINK_LIBRARIES` target property.
For each item, additional direct link dependencies are discovered from
its direct and transitive ``INTERFACE_LINK_LIBRARIES_DIRECT`` usage
requirements.  Each discovered item is injected before the item that
specified it.  However, a discovered item is added at most once,
and only if it did not appear anywhere in the initial list.
This gives :prop_tgt:`LINK_LIBRARIES` control over ordering of
those direct link dependencies that it explicitly specifies.

Once all direct link dependencies have been collected, items named by
all of their :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`
usage requirements are removed from the final list.  This does not
affect the order of the items that remain.

Example: Static Plugins
^^^^^^^^^^^^^^^^^^^^^^^

Consider a static library ``Foo`` that provides a static plugin
``FooPlugin`` to consuming application executables, where the
implementation of the plugin depends on ``Foo`` and other things.
In this case, the application should link to ``FooPlugin`` directly,
before ``Foo``.  However, the application author only knows about ``Foo``.
We can express this as follows:

.. code-block:: cmake

  # Core library used by other components.
  add_library(Core STATIC core.cpp)

  # Foo is a static library for use by applications.
  # Implementation of Foo depends on Core.
  add_library(Foo STATIC foo.cpp foo_plugin_helper.cpp)
  target_link_libraries(Foo PRIVATE Core)

  # Extra parts of Foo for use by its static plugins.
  # Implementation of Foo's extra parts depends on both Core and Foo.
  add_library(FooExtras STATIC foo_extras.cpp)
  target_link_libraries(FooExtras PRIVATE Core Foo)

  # The Foo library has an associated static plugin
  # that should be linked into the final executable.
  # Implementation of the plugin depends on Core, Foo, and FooExtras.
  add_library(FooPlugin STATIC foo_plugin.cpp)
  target_link_libraries(FooPlugin PRIVATE Core Foo FooExtras)

  # An app that links Foo should link Foo's plugin directly.
  set_property(TARGET Foo PROPERTY INTERFACE_LINK_LIBRARIES_DIRECT FooPlugin)

  # An app does not need to link Foo directly because the plugin links it.
  set_property(TARGET Foo PROPERTY INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE Foo)

An application ``app`` only needs to specify that it links to ``Foo``:

.. code-block:: cmake

  add_executable(app main.cpp)
  target_link_libraries(app PRIVATE Foo)

The ``INTERFACE_LINK_LIBRARIES_DIRECT`` target property on ``Foo`` tells
CMake to pretend that ``app`` also links directly to ``FooPlugin``.
The ``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` target property on ``Foo``
tells CMake to pretend that ``app`` did *not* link directly to ``Foo``.
Instead, ``Foo`` will be linked as a dependency of ``FooPlugin``.  The
final link line for ``app`` will link the libraries in the following
order:

* ``FooPlugin`` as a direct link dependency of ``app``
  (via ``Foo``'s usage requirements).
* ``FooExtras`` as a dependency of ``FooPlugin``.
* ``Foo`` as a dependency of ``FooPlugin`` and ``FooExtras``.
* ``Core`` as a dependency of ``FooPlugin``, ``FooExtras``, and ``Foo``.

Note that without the ``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` target
property, ``Foo`` would be linked twice: once as a direct dependency
of ``app``, and once as a dependency of ``FooPlugin``.

Example: Opt-In Static Plugins
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In the above `Example: Static Plugins`_, the ``app`` executable specifies
that it links directly to ``Foo``.  In a real application, there might
be an intermediate library:

.. code-block:: cmake

  add_library(app_impl STATIC app_impl.cpp)
  target_link_libraries(app_impl PRIVATE Foo)

  add_executable(app main.cpp)
  target_link_libraries(app PRIVATE app_impl)

In this case we do not want ``Foo``'s ``INTERFACE_LINK_LIBRARIES_DIRECT``
and ``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` target properties to affect
the direct dependencies of ``app_impl``.  To avoid this, we can revise
the property values to make their effects opt-in:

.. code-block:: cmake

  # An app that links Foo should link Foo's plugin directly.
  set_property(TARGET Foo PROPERTY INTERFACE_LINK_LIBRARIES_DIRECT
    "$<$<BOOL:$<TARGET_PROPERTY:FOO_STATIC_PLUGINS>>:FooPlugin>"
  )

  # An app does not need to link Foo directly because the plugin links it.
  set_property(TARGET Foo PROPERTY INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE
    "$<$<BOOL:$<TARGET_PROPERTY:FOO_STATIC_PLUGINS>>:Foo>"
  )

Now, the ``app`` executable can opt-in to get ``Foo``'s plugin(s):

.. code-block:: cmake

  set_property(TARGET app PROPERTY FOO_STATIC_PLUGINS 1)

The final link line for ``app`` will now link the libraries in the following
order:

* ``FooPlugin`` as a direct link dependency of ``app``
  (via ``Foo``'s usage requirements).
* ``app_impl`` as a direct link dependency of ``app``.
* ``FooExtras`` as a dependency of ``FooPlugin``.
* ``Foo`` as a dependency of ``app_impl``, ``FooPlugin``, and ``FooExtras``.
* ``Core`` as a dependency of ``FooPlugin``, ``FooExtras``, and ``Foo``.



/P/🚀 prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE.rst
=====================================================================


INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE
---------------------------------------

.. versionadded:: 3.24

List of libraries that consumers of this library should *not* treat
as direct link dependencies.

This target property may be set to *exclude* items from a dependent
target's final set of direct link dependencies.  This property is
processed after the :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT`
target property of all other dependencies of the dependent target, so
exclusion from direct link dependence takes priority over inclusion.

The initial set of a dependent target's direct link dependencies is
specified by its :prop_tgt:`LINK_LIBRARIES` target property.  Indirect
link dependencies are specified by the transitive closure of the direct
link dependencies' :prop_tgt:`INTERFACE_LINK_LIBRARIES` properties.
Any link dependency may specify additional direct link dependencies
using the :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` target property.
The set of direct link dependencies is then filtered to exclude items named
by any dependency's ``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` target
property.

Excluding an item from a dependent target's direct link dependencies
does not mean the dependent target won't link the item.  The item
may still be linked as an indirect link dependency via the
:prop_tgt:`INTERFACE_LINK_LIBRARIES` property on other dependencies.

.. |INTERFACE_PROPERTY_LINK_DIRECT| replace:: ``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``
.. include:: INTERFACE_LINK_LIBRARIES_DIRECT.txt

See the :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` target property
documentation for more details and examples.



/P/🚀 prop_tgt/INTERFACE_LINK_OPTIONS.rst
====================================================


INTERFACE_LINK_OPTIONS
----------------------

.. versionadded:: 3.13

.. |property_name| replace:: link options
.. |command_name| replace:: :command:`target_link_options`
.. |PROPERTY_INTERFACE_NAME| replace:: ``INTERFACE_LINK_OPTIONS``
.. |PROPERTY_LINK| replace:: :prop_tgt:`LINK_OPTIONS`
.. include:: INTERFACE_BUILD_PROPERTY.txt



/P/🚀 prop_tgt/INTERFACE_POSITION_INDEPENDENT_CODE.rst
=================================================================


INTERFACE_POSITION_INDEPENDENT_CODE
-----------------------------------

Whether consumers need to create a position-independent target

The ``INTERFACE_POSITION_INDEPENDENT_CODE`` property informs consumers of
this target whether they must set their
:prop_tgt:`POSITION_INDEPENDENT_CODE` property to ``ON``.  If this
property is set to ``ON``, then the :prop_tgt:`POSITION_INDEPENDENT_CODE`
property on  all consumers will be set to ``ON``. Similarly, if this
property is set to ``OFF``, then the :prop_tgt:`POSITION_INDEPENDENT_CODE`
property on all consumers will be set to ``OFF``.  If this property is
undefined, then consumers will determine their
:prop_tgt:`POSITION_INDEPENDENT_CODE` property by other means.  Consumers
must ensure that the targets that they link to have a consistent
requirement for their ``INTERFACE_POSITION_INDEPENDENT_CODE`` property.

Contents of ``INTERFACE_POSITION_INDEPENDENT_CODE`` may use
"generator expressions" with the syntax ``$<...>``.  See the
:manual:`cmake-generator-expressions(7)` manual for available expressions.
See the :manual:`cmake-buildsystem(7)` manual for more on defining buildsystem
properties.



/P/🚀 prop_tgt/INTERFACE_PRECOMPILE_HEADERS.rst
==========================================================


INTERFACE_PRECOMPILE_HEADERS
----------------------------

.. versionadded:: 3.16

List of interface header files to precompile into consuming targets.

Targets may populate this property to publish the header files
for consuming targets to precompile.  The :command:`target_precompile_headers`
command populates this property with values given to the ``PUBLIC`` and
``INTERFACE`` keywords.  Projects may also get and set the property directly.
See the discussion in :command:`target_precompile_headers` for guidance on
appropriate use of this property for installed or exported targets.

Contents of ``INTERFACE_PRECOMPILE_HEADERS`` may use "generator expressions"
with the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
manual for available expressions.  See the :manual:`cmake-buildsystem(7)`
manual for more on defining buildsystem properties.



/P/🚀 prop_tgt/INTERFACE_SOURCES.rst
===============================================


INTERFACE_SOURCES
-----------------

.. versionadded:: 3.1

List of interface sources to compile into consuming targets.

Targets may populate this property to publish the sources
for consuming targets to compile.  The :command:`target_sources` command
populates this property with values given to the ``PUBLIC`` and
``INTERFACE`` keywords.  Projects may also get and set the property directly.

When target dependencies are specified using :command:`target_link_libraries`,
CMake will read this property from all target dependencies to determine the
sources of the consumer.

Contents of ``INTERFACE_SOURCES`` may use "generator expressions"
with the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
manual for available expressions.  See the :manual:`cmake-buildsystem(7)`
manual for more on defining buildsystem properties.



/P/🚀 prop_tgt/INTERFACE_SYSTEM_INCLUDE_DIRECTORIES.rst
==================================================================


INTERFACE_SYSTEM_INCLUDE_DIRECTORIES
------------------------------------

List of public system include directories for a library.

Targets may populate this property to publish the include directories
which contain system headers, and therefore should not result in
compiler warnings.  Additionally, system include directories are searched
after normal include directories regardless of the order specified.

When the :command:`target_include_directories` command is given the
``SYSTEM`` keyword, it populates this property with values provided after the
``PUBLIC`` and ``INTERFACE`` keywords.

Projects may also get and set the property directly, but must be aware that
adding directories to this property does not make those directories used
during compilation.  Adding directories to this property marks directories
as system directories which otherwise would be used in a non-system manner.
This can appear similar to duplication, so prefer the high-level
:command:`target_include_directories` command with the ``SYSTEM`` keyword
and avoid setting the property directly.

When target dependencies are specified using :command:`target_link_libraries`,
CMake will read this property from all target dependencies to mark the
same include directories as containing system headers.

Contents of ``INTERFACE_SYSTEM_INCLUDE_DIRECTORIES`` may use "generator
expressions" with the syntax ``$<...>``.  See the
:manual:`cmake-generator-expressions(7)` manual for available expressions.
See the :manual:`cmake-buildsystem(7)` manual for more on defining
buildsystem properties.



/P/🚀 prop_tgt/INTERPROCEDURAL_OPTIMIZATION.rst
==========================================================


INTERPROCEDURAL_OPTIMIZATION
----------------------------

Enable interprocedural optimization for a target.

If set to true, enables interprocedural optimizations if they are
known :module:`to be supported <CheckIPOSupported>` by the compiler. Depending
on value of policy :policy:`CMP0069`, the error will be reported or ignored,
if interprocedural optimization is enabled but not supported.

This property is initialized by the
:variable:`CMAKE_INTERPROCEDURAL_OPTIMIZATION` variable if it is set when a
target is created.

There is also the per-configuration :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION_<CONFIG>`
target property, which overrides :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION`
if it is set.



/P/🚀 prop_tgt/INTERPROCEDURAL_OPTIMIZATION_CONFIG.rst
=================================================================


INTERPROCEDURAL_OPTIMIZATION_<CONFIG>
-------------------------------------

Per-configuration interprocedural optimization for a target.

This is a per-configuration version of :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION`.
If set, this property overrides the generic property for the named
configuration.

This property is initialized by the
:variable:`CMAKE_INTERPROCEDURAL_OPTIMIZATION_<CONFIG>` variable if it is set
when a target is created.



/P/🚀 prop_tgt/ISPC_HEADER_DIRECTORY.rst
===================================================


ISPC_HEADER_DIRECTORY
---------------------

.. versionadded:: 3.19

Specify relative output directory for ISPC headers provided by the target.

If the target contains ISPC source files, this specifies the directory in which
the generated headers will be placed. Relative paths are treated with respect to
the value of :variable:`CMAKE_CURRENT_BINARY_DIR`. When this property is not set, the
headers will be placed a generator defined build directory. If the variable
:variable:`CMAKE_ISPC_HEADER_DIRECTORY` is set when a target is created
its value is used to initialize this property.



/P/🚀 prop_tgt/ISPC_HEADER_SUFFIX.rst
================================================


ISPC_HEADER_SUFFIX
------------------

.. versionadded:: 3.19.2

Specify output suffix to be used for ISPC generated headers provided by the target.

This property is initialized by the value of the :variable:`CMAKE_ISPC_HEADER_SUFFIX`
variable if it is set when a target  is created.

If the target contains ISPC source files, this specifies the header suffix to
be used for the generated headers.

The default value is ``_ispc.h``.



/P/🚀 prop_tgt/ISPC_INSTRUCTION_SETS.rst
===================================================


ISPC_INSTRUCTION_SETS
---------------------

.. versionadded:: 3.19

List of instruction set architectures to generate code for.

This property is initialized by the value of the :variable:`CMAKE_ISPC_INSTRUCTION_SETS`
variable if it is set when a target is created.

The ``ISPC_INSTRUCTION_SETS`` target property must be used when generating for multiple
instruction sets so that CMake can track what object files will be generated.

Examples
^^^^^^^^

.. code-block:: cmake

  set_property(TARGET tgt PROPERTY ISPC_INSTRUCTION_SETS avx2-i32x4 avx512skx-i32x835)

Generates code for avx2 and avx512skx target architectures.



/P/🚀 prop_tgt/JOB_POOL_COMPILE.rst
==============================================


JOB_POOL_COMPILE
----------------

Ninja only: Pool used for compiling.

The number of parallel compile processes could be limited by defining
pools with the global :prop_gbl:`JOB_POOLS`
property and then specifying here the pool name.

For instance:

.. code-block:: cmake

  set_property(TARGET myexe PROPERTY JOB_POOL_COMPILE ten_jobs)

This property is initialized by the value of
:variable:`CMAKE_JOB_POOL_COMPILE`.



/P/🚀 prop_tgt/JOB_POOL_LINK.rst
===========================================


JOB_POOL_LINK
-------------

Ninja only: Pool used for linking.

The number of parallel link processes could be limited by defining
pools with the global :prop_gbl:`JOB_POOLS`
property and then specifying here the pool name.

For instance:

.. code-block:: cmake

  set_property(TARGET myexe PROPERTY JOB_POOL_LINK two_jobs)

This property is initialized by the value of :variable:`CMAKE_JOB_POOL_LINK`.



/P/🚀 prop_tgt/JOB_POOL_PRECOMPILE_HEADER.rst
========================================================


JOB_POOL_PRECOMPILE_HEADER
--------------------------

.. versionadded:: 3.17

Ninja only: Pool used for generating pre-compiled headers.

The number of parallel compile processes could be limited by defining
pools with the global :prop_gbl:`JOB_POOLS`
property and then specifying here the pool name.

For instance:

.. code-block:: cmake

  set_property(TARGET myexe PROPERTY JOB_POOL_PRECOMPILE_HEADER two_jobs)

This property is initialized by the value of
:variable:`CMAKE_JOB_POOL_PRECOMPILE_HEADER`.

If neither ``JOB_POOL_PRECOMPILE_HEADER`` nor
:variable:`CMAKE_JOB_POOL_PRECOMPILE_HEADER` are set then
:prop_tgt:`JOB_POOL_COMPILE` will be used for this task.



/P/🚀 prop_tgt/LABELS.rst
====================================


LABELS
------

Specify a list of text labels associated with a target.

Target label semantics are currently unspecified.



/P/🚀 prop_tgt/LANG_CLANG_TIDY.rst
=============================================


<LANG>_CLANG_TIDY
-----------------

.. versionadded:: 3.6

This property is implemented only when ``<LANG>`` is ``C``, ``CXX``, ``OBJC``
or ``OBJCXX``.

Specify a :ref:`semicolon-separated list <CMake Language Lists>` containing
a command line for the ``clang-tidy`` tool.  The :ref:`Makefile Generators`
and the :generator:`Ninja` generator will run this tool along with the
compiler and report a warning if the tool reports any problems.

The specified ``clang-tidy`` command line will be invoked with additional
arguments specifying the source file and, after ``--``, the full compiler
command line.

.. versionchanged:: 3.25

  If the specified ``clang-tidy`` command line includes the ``-p`` option,
  it will be invoked without ``--`` and the full compiler command line.
  ``clang-tidy`` will look up the source file in the specified compiler
  commands database.

This property is initialized by the value of
the :variable:`CMAKE_<LANG>_CLANG_TIDY` variable if it is set
when a target is created.

.. versionadded:: 3.27

  This property supports
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

.. versionadded:: 3.27

  :prop_sf:`SKIP_LINTING` can be set on individual source files to exclude
  them from the linting tools defined by :prop_tgt:`<LANG>_CPPLINT`,
  ``<LANG>_CLANG_TIDY``, :prop_tgt:`<LANG>_CPPCHECK`, and
  :prop_tgt:`<LANG>_INCLUDE_WHAT_YOU_USE`.  When :prop_sf:`SKIP_LINTING` is
  set to true on a source file, those tools will not be run on that specific
  file.



/P/🚀 prop_tgt/LANG_CLANG_TIDY_EXPORT_FIXES_DIR.rst
==============================================================


<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR
----------------------------------

.. versionadded:: 3.26

This property is implemented only when ``<LANG>`` is ``C``, ``CXX``, ``OBJC``
or ``OBJCXX``, and only has an effect when :prop_tgt:`<LANG>_CLANG_TIDY` is
set.

Specify a directory for the ``clang-tidy`` tool to put ``.yaml`` files
containing its suggested changes in. This can be used for automated mass
refactoring by ``clang-tidy``. Each object file that gets compiled will have a
corresponding ``.yaml`` file in this directory. After the build is completed,
you can run ``clang-apply-replacements`` on this directory to simultaneously
apply all suggested changes to the code base. If this property is not an
absolute directory, it is assumed to be relative to the target's binary
directory. This property should be preferred over adding an ``--export-fixes``
or ``--fix`` argument directly to the :prop_tgt:`<LANG>_CLANG_TIDY` property.

When this property is set, CMake takes ownership of the specified directory,
and may create, modify, or delete files and directories within the directory
at any time during configure or build time. Users should use a dedicated
directory for exporting clang-tidy fixes to avoid having files deleted or
overwritten by CMake. Users should not create, modify, or delete files in this
directory.

This property is initialized by the value of
the :variable:`CMAKE_<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR` variable if it is set
when a target is created.



/P/🚀 prop_tgt/LANG_COMPILER_LAUNCHER.rst
====================================================


<LANG>_COMPILER_LAUNCHER
------------------------

.. versionadded:: 3.4

This property is implemented only when ``<LANG>`` is ``C``, ``CXX``,
``Fortran``, ``HIP``, ``ISPC``, ``OBJC``, ``OBJCXX``, or ``CUDA``.

Specify a :ref:`semicolon-separated list <CMake Language Lists>` containing a command line
for a compiler launching tool. The :ref:`Makefile Generators` and the
:generator:`Ninja` generator will run this tool and pass the compiler and
its arguments to the tool. Some example tools are distcc and ccache.

This property is initialized by the value of
the :variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` variable if it is set
when a target is created.

.. versionadded:: 3.25

  The property value may use
  :manual:`generator expressions <cmake-generator-expressions(7)>`.



/P/🚀 prop_tgt/LANG_CPPCHECK.rst
===========================================


<LANG>_CPPCHECK
---------------

.. versionadded:: 3.10

This property is supported only when ``<LANG>`` is ``C`` or ``CXX``.

Specify a :ref:`semicolon-separated list <CMake Language Lists>` containing a command line
for the ``cppcheck`` static analysis tool.  The :ref:`Makefile Generators`
and the :generator:`Ninja` generator will run ``cppcheck`` along with the
compiler and report any problems.  If the command-line specifies the
exit code options to ``cppcheck`` then the build  will fail if the
tool returns non-zero.

This property is initialized by the value of the
:variable:`CMAKE_<LANG>_CPPCHECK` variable if it is set when a target is
created.

.. versionadded:: 3.27

  This property supports
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

.. versionadded:: 3.27

  :prop_sf:`SKIP_LINTING` can be set on individual source files to exclude
  them from the linting tools defined by :prop_tgt:`<LANG>_CPPLINT`,
  :prop_tgt:`<LANG>_CLANG_TIDY`, ``<LANG>_CPPCHECK``, and
  :prop_tgt:`<LANG>_INCLUDE_WHAT_YOU_USE`.  When :prop_sf:`SKIP_LINTING` is
  set to true on a source file, those tools will not be run on that specific
  file.



/P/🚀 prop_tgt/LANG_CPPLINT.rst
==========================================


<LANG>_CPPLINT
--------------

.. versionadded:: 3.8

This property is supported only when ``<LANG>`` is ``C`` or ``CXX``.

Specify a :ref:`semicolon-separated list <CMake Language Lists>` containing a command line
for the ``cpplint`` style checker.  The :ref:`Makefile Generators` and the
:generator:`Ninja` generator will run ``cpplint`` along with the compiler
and report any problems.

This property is initialized by the value of the
:variable:`CMAKE_<LANG>_CPPLINT` variable if it is set when a target is
created.

.. versionadded:: 3.27

  This property supports
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

.. versionadded:: 3.27

  :prop_sf:`SKIP_LINTING` can be set on individual source files to exclude
  them from the linting tools defined by ``<LANG>_CPPLINT``,
  :prop_tgt:`<LANG>_CLANG_TIDY`, :prop_tgt:`<LANG>_CPPCHECK`, and
  :prop_tgt:`<LANG>_INCLUDE_WHAT_YOU_USE`.  When :prop_sf:`SKIP_LINTING` is
  set to true on a source file, those tools will not be run on that specific
  file.



/P/🚀 prop_tgt/LANG_EXTENSIONS.rst
=============================================


<LANG>_EXTENSIONS
-----------------

The variations are:

* :prop_tgt:`C_EXTENSIONS`
* :prop_tgt:`CXX_EXTENSIONS`
* :prop_tgt:`CUDA_EXTENSIONS`
* :prop_tgt:`HIP_EXTENSIONS`
* :prop_tgt:`OBJC_EXTENSIONS`
* :prop_tgt:`OBJCXX_EXTENSIONS`

These properties specify whether compiler-specific extensions are requested.

These properties are initialized by the value of the
:variable:`CMAKE_<LANG>_EXTENSIONS` variable if it is set when a target is
created and otherwise by the value of
:variable:`CMAKE_<LANG>_EXTENSIONS_DEFAULT` (see :policy:`CMP0128`).

For supported CMake versions see the respective pages.
To control language standard versions see :prop_tgt:`<LANG>_STANDARD`.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 prop_tgt/LANG_INCLUDE_WHAT_YOU_USE.rst
=======================================================


<LANG>_INCLUDE_WHAT_YOU_USE
---------------------------

.. versionadded:: 3.3

This property is implemented only when ``<LANG>`` is ``C`` or ``CXX``.

Specify a :ref:`semicolon-separated list <CMake Language Lists>` containing a command
line for the ``include-what-you-use`` tool.  The :ref:`Makefile Generators`
and the :generator:`Ninja` generator will run this tool along with the
compiler and report a warning if the tool reports any problems.

This property is initialized by the value of
the :variable:`CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE` variable if it is set
when a target is created.

.. versionadded:: 3.27

  This property supports
  :manual:`generator expressions <cmake-generator-expressions(7)>`.

.. versionadded:: 3.27

  :prop_sf:`SKIP_LINTING` can be set on individual source files to exclude
  them from the linting tools defined by :prop_tgt:`<LANG>_CPPLINT`,
  :prop_tgt:`<LANG>_CLANG_TIDY`, :prop_tgt:`<LANG>_CPPCHECK`, and
  ``<LANG>_INCLUDE_WHAT_YOU_USE``.  When :prop_sf:`SKIP_LINTING` is
  set to true on a source file, those tools will not be run on that specific
  file.



/P/🚀 prop_tgt/LANG_LINKER_LAUNCHER.rst
==================================================


<LANG>_LINKER_LAUNCHER
----------------------

.. versionadded:: 3.21

This property is implemented only when ``<LANG>`` is ``C``, ``CXX``,
``OBJC``, or ``OBJCXX``

Specify a :ref:`semicolon-separated list <CMake Language Lists>` containing a
command line for a linker launching tool. The :ref:`Makefile Generators` and the
:generator:`Ninja` generator will run this tool and pass the linker and its
arguments to the tool. This is useful for tools such as static analyzers.

This property is initialized by the value of the
:variable:`CMAKE_<LANG>_LINKER_LAUNCHER` variable if it is set when a target is
created.

.. versionadded:: 3.27

  The property value may use
  :manual:`generator expressions <cmake-generator-expressions(7)>`.



/P/🚀 prop_tgt/LANG_STANDARD.rst
===========================================


<LANG>_STANDARD
---------------

The variations are:

* :prop_tgt:`C_STANDARD`
* :prop_tgt:`CXX_STANDARD`
* :prop_tgt:`CUDA_STANDARD`
* :prop_tgt:`HIP_STANDARD`
* :prop_tgt:`OBJC_STANDARD`
* :prop_tgt:`OBJCXX_STANDARD`

These properties specify language standard versions which are requested. When a
newer standard is specified than is supported by the compiler, then it will
fallback to the latest supported standard. This "decay" behavior may be
controlled with the :prop_tgt:`<LANG>_STANDARD_REQUIRED` target property.

Note that the actual language standard used may be higher than that specified
by ``<LANG>_STANDARD``, regardless of the value of
:prop_tgt:`<LANG>_STANDARD_REQUIRED`.  In particular,
:ref:`transitive usage requirements <Target Usage Requirements>` or the use of
:manual:`compile features <cmake-compile-features(7)>` can raise the required
language standard above what ``<LANG>_STANDARD`` specifies.

These properties are initialized by the value of the
:variable:`CMAKE_<LANG>_STANDARD` variable if it is set when a target is
created.

For supported values and CMake versions see the respective pages.
To control compiler-specific extensions see :prop_tgt:`<LANG>_EXTENSIONS`.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 prop_tgt/LANG_STANDARD_REQUIRED.rst
====================================================


<LANG>_STANDARD_REQUIRED
------------------------

The variations are:

* :prop_tgt:`C_STANDARD_REQUIRED`
* :prop_tgt:`CXX_STANDARD_REQUIRED`
* :prop_tgt:`CUDA_STANDARD_REQUIRED`
* :prop_tgt:`HIP_STANDARD_REQUIRED`
* :prop_tgt:`OBJC_STANDARD_REQUIRED`
* :prop_tgt:`OBJCXX_STANDARD_REQUIRED`

These properties specify whether the value of :prop_tgt:`<LANG>_STANDARD` is a
requirement.  When false or unset, the :prop_tgt:`<LANG>_STANDARD` target
property is treated as optional and may "decay" to a previous standard if the
requested standard is not available.  When ``<LANG>_STANDARD_REQUIRED`` is set
to true, :prop_tgt:`<LANG>_STANDARD` becomes a hard requirement and a fatal
error will be issued if that requirement cannot be met.

Note that the actual language standard used may be higher than that specified
by :prop_tgt:`<LANG>_STANDARD`, regardless of the value of
``<LANG>_STANDARD_REQUIRED``.  In particular,
:ref:`transitive usage requirements <Target Usage Requirements>` or the use of
:manual:`compile features <cmake-compile-features(7)>` can raise the required
language standard above what :prop_tgt:`<LANG>_STANDARD` specifies.

These properties are initialized by the value of the
:variable:`CMAKE_<LANG>_STANDARD_REQUIRED` variable if it is set when a target
is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 prop_tgt/LANG_VISIBILITY_PRESET.rst
====================================================


<LANG>_VISIBILITY_PRESET
------------------------

Value for symbol visibility compile flags

The ``<LANG>_VISIBILITY_PRESET`` property determines the value passed in a
visibility related compile option, such as ``-fvisibility=`` for ``<LANG>``.
This property affects compilation in sources of all types of targets
(subject to policy :policy:`CMP0063`).

This property is initialized by the value of the
:variable:`CMAKE_<LANG>_VISIBILITY_PRESET` variable if it is set when a
target is created.



/P/🚀 prop_tgt/LIBRARY_OUTPUT_DIRECTORY.rst
======================================================


LIBRARY_OUTPUT_DIRECTORY
------------------------

.. |XXX| replace:: :ref:`LIBRARY <Library Output Artifacts>`
.. |xxx| replace:: library
.. |CMAKE_XXX_OUTPUT_DIRECTORY| replace:: :variable:`CMAKE_LIBRARY_OUTPUT_DIRECTORY`
.. include:: XXX_OUTPUT_DIRECTORY.txt

See also the :prop_tgt:`LIBRARY_OUTPUT_DIRECTORY_<CONFIG>` target property.



/P/🚀 prop_tgt/LIBRARY_OUTPUT_DIRECTORY_CONFIG.rst
=============================================================


LIBRARY_OUTPUT_DIRECTORY_<CONFIG>
---------------------------------

Per-configuration output directory for
:ref:`LIBRARY <Library Output Artifacts>` target files.

This is a per-configuration version of the
:prop_tgt:`LIBRARY_OUTPUT_DIRECTORY` target property, but
multi-configuration generators (:ref:`Visual Studio Generators`,
:generator:`Xcode`) do NOT append a
per-configuration subdirectory to the specified directory.  This
property is initialized by the value of the
:variable:`CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>` variable if
it is set when a target is created.

Contents of ``LIBRARY_OUTPUT_DIRECTORY_<CONFIG>`` may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.



/P/🚀 prop_tgt/LIBRARY_OUTPUT_NAME.rst
=================================================


LIBRARY_OUTPUT_NAME
-------------------

.. |XXX| replace:: :ref:`LIBRARY <Library Output Artifacts>`
.. |xxx| replace:: library
.. include:: XXX_OUTPUT_NAME.txt

See also the :prop_tgt:`LIBRARY_OUTPUT_NAME_<CONFIG>` target property.



/P/🚀 prop_tgt/LIBRARY_OUTPUT_NAME_CONFIG.rst
========================================================


LIBRARY_OUTPUT_NAME_<CONFIG>
----------------------------

Per-configuration output name for
:ref:`LIBRARY <Library Output Artifacts>` target files.

This is the configuration-specific version of the
:prop_tgt:`LIBRARY_OUTPUT_NAME` target property.



/P/🚀 prop_tgt/LINK_DEPENDS.rst
==========================================


LINK_DEPENDS
------------

Additional files on which a target binary depends for linking.

Specifies a semicolon-separated list of full-paths to files on which
the link rule for this target depends.  The target binary will be
linked if any of the named files is newer than it.

This property is supported only by :generator:`Ninja` and
:ref:`Makefile Generators`.  It is
intended to specify dependencies on "linker scripts" for custom Makefile link
rules.

Contents of ``LINK_DEPENDS`` may use "generator expressions" with
the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
manual for available expressions.  See the :manual:`cmake-buildsystem(7)`
manual for more on defining buildsystem properties.



/P/🚀 prop_tgt/LINK_DEPENDS_NO_SHARED.rst
====================================================


LINK_DEPENDS_NO_SHARED
----------------------

Do not depend on linked shared library files.

Set this property to true to tell CMake generators not to add
file-level dependencies on the shared library files linked by this
target.  Modification to the shared libraries will not be sufficient
to re-link this target.  Logical target-level dependencies will not be
affected so the linked shared libraries will still be brought up to
date before this target is built.

This property is initialized by the value of the
:variable:`CMAKE_LINK_DEPENDS_NO_SHARED` variable if it is set when a
target is created.



/P/🚀 prop_tgt/LINK_DIRECTORIES.rst
==============================================


LINK_DIRECTORIES
----------------

.. versionadded:: 3.13

List of directories to use for the link step of shared library, module
and executable targets.

This property holds a :ref:`semicolon-separated list <CMake Language Lists>` of directories
specified so far for its target.  Use the :command:`target_link_directories`
command to append more search directories.

This property is initialized by the :prop_dir:`LINK_DIRECTORIES` directory
property when a target is created, and is used by the generators to set
the search directories for the linker.

Contents of ``LINK_DIRECTORIES`` may use "generator expressions" with the
syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` manual
for available expressions.  See the :manual:`cmake-buildsystem(7)` manual
for more on defining buildsystem properties.



/P/🚀 prop_tgt/LINK_FLAGS.rst
========================================


LINK_FLAGS
----------

Additional flags to use when linking this target if it is a shared library,
module library, or an executable. Static libraries need to use
:prop_tgt:`STATIC_LIBRARY_OPTIONS` or :prop_tgt:`STATIC_LIBRARY_FLAGS`
properties.

The ``LINK_FLAGS`` property, managed as a string, can be used to add extra
flags to the link step of a target.  :prop_tgt:`LINK_FLAGS_<CONFIG>` will add
to the configuration ``<CONFIG>``, for example, ``DEBUG``, ``RELEASE``,
``MINSIZEREL``, ``RELWITHDEBINFO``, ...

.. note::

  This property has been superseded by :prop_tgt:`LINK_OPTIONS` property.



/P/🚀 prop_tgt/LINK_FLAGS_CONFIG.rst
===============================================


LINK_FLAGS_<CONFIG>
-------------------

Per-configuration linker flags for a ``SHARED`` library, ``MODULE`` or
``EXECUTABLE`` target.

This is the configuration-specific version of :prop_tgt:`LINK_FLAGS`.

.. note::

  This property has been superseded by :prop_tgt:`LINK_OPTIONS` property.



/P/🚀 prop_tgt/LINK_INTERFACE_LIBRARIES.rst
======================================================


LINK_INTERFACE_LIBRARIES
------------------------

List public interface libraries for a shared library or executable.

By default linking to a shared library target transitively links to
targets with which the library itself was linked.  For an executable
with exports (see the :prop_tgt:`ENABLE_EXPORTS` target property) no
default transitive link dependencies are used.  This property replaces the default
transitive link dependencies with an explicit list.  When the target
is linked into another target using the :command:`target_link_libraries`
command, the libraries listed (and recursively
their link interface libraries) will be provided to the other target
also.  If the list is empty then no transitive link dependencies will
be incorporated when this target is linked into another target even if
the default set is non-empty.  This property is initialized by the
value of the :variable:`CMAKE_LINK_INTERFACE_LIBRARIES` variable if it is
set when a target is created.  This property is ignored for ``STATIC``
libraries.

This property is overridden by the :prop_tgt:`INTERFACE_LINK_LIBRARIES`
property if policy :policy:`CMP0022` is ``NEW``.

This property is deprecated.  Use :prop_tgt:`INTERFACE_LINK_LIBRARIES`
instead.

Creating Relocatable Packages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. |INTERFACE_PROPERTY_LINK| replace:: ``LINK_INTERFACE_LIBRARIES``
.. include:: /include/INTERFACE_LINK_LIBRARIES_WARNING.txt



/P/🚀 prop_tgt/LINK_INTERFACE_LIBRARIES_CONFIG.rst
=============================================================


LINK_INTERFACE_LIBRARIES_<CONFIG>
---------------------------------

Per-configuration list of public interface libraries for a target.

This is the configuration-specific version of
:prop_tgt:`LINK_INTERFACE_LIBRARIES`.  If set, this property completely
overrides the generic property for the named configuration.

This property is overridden by the :prop_tgt:`INTERFACE_LINK_LIBRARIES`
property if policy :policy:`CMP0022` is ``NEW``.

This property is deprecated.  Use :prop_tgt:`INTERFACE_LINK_LIBRARIES`
instead.

Creating Relocatable Packages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. |INTERFACE_PROPERTY_LINK| replace:: ``LINK_INTERFACE_LIBRARIES_<CONFIG>``
.. include:: /include/INTERFACE_LINK_LIBRARIES_WARNING.txt



/P/🚀 prop_tgt/LINK_INTERFACE_MULTIPLICITY.rst
=========================================================


LINK_INTERFACE_MULTIPLICITY
---------------------------

Repetition count for ``STATIC`` libraries with cyclic dependencies.

When linking to a ``STATIC`` library target with cyclic dependencies the
linker may need to scan more than once through the archives in the
strongly connected component of the dependency graph.  CMake by
default constructs the link line so that the linker will scan through
the component at least twice.  This property specifies the minimum
number of scans if it is larger than the default.  CMake uses the
largest value specified by any target in a component.



/P/🚀 prop_tgt/LINK_INTERFACE_MULTIPLICITY_CONFIG.rst
================================================================


LINK_INTERFACE_MULTIPLICITY_<CONFIG>
------------------------------------

Per-configuration repetition count for cycles of ``STATIC`` libraries.

This is the configuration-specific version of
:prop_tgt:`LINK_INTERFACE_MULTIPLICITY`.  If set, this property completely
overrides the generic property for the named configuration.



/P/🚀 prop_tgt/LINK_LIBRARIES.rst
============================================


LINK_LIBRARIES
--------------

List of direct link dependencies.

This property specifies the list of libraries or targets which will be
used for linking.  In addition to accepting values from the
:command:`target_link_libraries` command, values may be set directly on
any target using the :command:`set_property` command.

The value of this property is used by the generators to construct the
link rule for the target.  The direct link dependencies are linked first,
followed by indirect dependencies from the transitive closure of the
direct dependencies' :prop_tgt:`INTERFACE_LINK_LIBRARIES` properties.
See policy :policy:`CMP0022`.

Contents of ``LINK_LIBRARIES`` may use
:manual:`generator expressions <cmake-generator-expressions(7)>` with the
syntax ``$<...>``.  Policy :policy:`CMP0131` affects the behavior of the
:genex:`LINK_ONLY` generator expression for this property.

See the :manual:`cmake-buildsystem(7)` manual for more on defining
buildsystem properties.

.. include:: LINK_LIBRARIES_INDIRECTION.txt

In advanced use cases, the list of direct link dependencies specified
by this property may be updated by usage requirements from dependencies.
See the :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` and
:prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE` target properties.



/P/🚀 prop_tgt/LINK_LIBRARIES_ONLY_TARGETS.rst
=========================================================


LINK_LIBRARIES_ONLY_TARGETS
---------------------------

.. versionadded:: 3.23

Enforce that link items that can be target names are actually existing targets.

Set this property to a true value to enable additional checks on the contents
of the :prop_tgt:`LINK_LIBRARIES` and :prop_tgt:`INTERFACE_LINK_LIBRARIES`
target properties, typically populated by :command:`target_link_libraries`.
Checks are also applied to libraries added to a target through the
:prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` properties of its dependencies.
CMake will verify that link items that might be target names actually name
existing targets.  An item is considered a possible target name if:

* it does not contain a ``/`` or ``\``, and
* it does not start in ``-``, and
* (for historical reasons) it does not start in ``$`` or `````.

This property is initialized by the value of the
:variable:`CMAKE_LINK_LIBRARIES_ONLY_TARGETS` variable when a non-imported
target is created.  The property may be explicitly enabled on an imported
target to check its link interface.

In the following example, CMake will halt with an error at configure time
because ``miLib`` is not a target:

.. code-block:: cmake

  set(CMAKE_LINK_LIBRARIES_ONLY_TARGETS ON)
  add_library(myLib STATIC myLib.c)
  add_executable(myExe myExe.c)
  target_link_libraries(myExe PRIVATE miLib) # typo for myLib

In order to link toolchain-provided libraries by name while still
enforcing ``LINK_LIBRARIES_ONLY_TARGETS``, use an
:ref:`imported <Imported Targets>`
:ref:`Interface Library <Interface Libraries>` with the
:prop_tgt:`IMPORTED_LIBNAME` target property:

.. code-block:: cmake

  add_library(toolchain::m INTERFACE IMPORTED)
  set_property(TARGET toolchain::m PROPERTY IMPORTED_LIBNAME "m")
  target_link_libraries(myExe PRIVATE toolchain::m)

See also policy :policy:`CMP0028`.

.. note::

  If :prop_tgt:`INTERFACE_LINK_LIBRARIES` contains generator expressions,
  its actual list of link items may depend on the type and properties of
  the consuming target.  In such cases CMake may not always detect names
  of missing targets that only appear for specific consumers.
  A future version of CMake with improved heuristics may start triggering
  errors on projects accepted by previous versions of CMake.



/P/🚀 prop_tgt/LINK_LIBRARY_OVERRIDE.rst
===================================================


LINK_LIBRARY_OVERRIDE
---------------------

.. versionadded:: 3.24

Override the library features associated with libraries from
:genex:`LINK_LIBRARY` generator expressions.  This can be used to resolve
incompatible library features that result from specifying different features
for the same library in different :genex:`LINK_LIBRARY` generator expressions.

This property supports overriding multiple libraries and features. It expects
a :ref:`semicolon-separated list <CMake Language Lists>`, where each list item
has the following form::

  feature[,link-item]*

For each comma-separated ``link-item``, any existing library feature associated
with it will be ignored for the target this property is set on.  The item
will instead be associated with the specified ``feature``.  Each ``link-item``
can be anything that would be accepted as part of a ``library-list`` in a
:genex:`LINK_LIBRARY` generator expression.

.. code-block:: cmake

  add_library(lib1 ...)
  add_library(lib2 ...)
  add_library(lib3 ...)

  target_link_libraries(lib1 PUBLIC "$<LINK_LIBRARY:feature1,external>")
  target_link_libraries(lib2 PUBLIC "$<LINK_LIBRARY:feature2,lib1>")
  target_link_libraries(lib3 PRIVATE lib1 lib2)

  # lib1 is associated with both feature2 and no feature. Without any override,
  # this would result in a fatal error at generation time for lib3.
  # Define an override to resolve the incompatible feature associations.
  set_property(TARGET lib3 PROPERTY LINK_LIBRARY_OVERRIDE "feature2,lib1,external")

  # lib1 and external will now be associated with feature2 instead when linking lib3

It is also possible to override any feature with the pre-defined ``DEFAULT``
library feature.  This effectively discards any feature for that link item,
for that target only (``lib3`` in this example):

.. code-block:: cmake

  # When linking lib3, discard any library feature for lib1, and use feature2 for external
  set_property(TARGET lib3 PROPERTY LINK_LIBRARY_OVERRIDE
    "DEFAULT,lib1"
    "feature2,external"
  )

The above example also demonstrates how to specify different feature overrides
for different link items.  See the :prop_tgt:`LINK_LIBRARY_OVERRIDE_<LIBRARY>`
target property for an alternative way of overriding library features for
individual libraries, which may be simpler in some cases.  If both properties
are defined and specify an override for the same link item,
:prop_tgt:`LINK_LIBRARY_OVERRIDE_<LIBRARY>` takes precedence over
``LINK_LIBRARY_OVERRIDE``.

Contents of ``LINK_LIBRARY_OVERRIDE`` may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.

For more information about library features, see the
:variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>` and
:variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>` variables.



/P/🚀 prop_tgt/LINK_LIBRARY_OVERRIDE_LIBRARY.rst
===========================================================


LINK_LIBRARY_OVERRIDE_<LIBRARY>
-------------------------------

.. versionadded:: 3.24

Override the library feature associated with ``<LIBRARY>`` from
:genex:`LINK_LIBRARY` generator expressions.  This can be used to resolve
incompatible library features that result from specifying different features
for ``<LIBRARY>`` in different :genex:`LINK_LIBRARY` generator expressions.

When set on a target, this property holds a single library feature name, which
will be applied to ``<LIBRARY>`` when linking that target.

.. code-block:: cmake

  add_library(lib1 ...)
  add_library(lib2 ...)
  add_library(lib3 ...)

  target_link_libraries(lib1 PUBLIC "$<LINK_LIBRARY:feature1,external>")
  target_link_libraries(lib2 PUBLIC "$<LINK_LIBRARY:feature2,lib1>")
  target_link_libraries(lib3 PRIVATE lib1 lib2)

  # lib1 is associated with both feature2 and no feature. Without any override,
  # this would result in a fatal error at generation time for lib3.
  # Define an override to resolve the incompatible feature associations.
  set_property(TARGET lib3 PROPERTY LINK_LIBRARY_OVERRIDE_lib1 feature2)

  # lib1 will now be associated with feature2 instead when linking lib3

It is also possible to override any feature with the pre-defined ``DEFAULT``
library feature.  This effectively discards any feature for that link item,
for that target only (``lib3`` in this example):

.. code-block:: cmake

  # When linking lib3, discard any library feature for lib1
  set_property(TARGET lib3 PROPERTY LINK_LIBRARY_OVERRIDE_lib1 DEFAULT)

See the :prop_tgt:`LINK_LIBRARY_OVERRIDE` target property for an alternative
way of overriding library features for multiple libraries at once.  If both
properties are defined and specify an override for the same link item,
``LINK_LIBRARY_OVERRIDE_<LIBRARY>`` takes precedence over
:prop_tgt:`LINK_LIBRARY_OVERRIDE`.

Contents of ``LINK_LIBRARY_OVERRIDE_<LIBRARY>`` may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.

For more information about library features, see the
:variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>` and
:variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>` variables.



/P/🚀 prop_tgt/LINK_OPTIONS.rst
==========================================


LINK_OPTIONS
------------

.. versionadded:: 3.13

List of options to use for the link step of shared library, module
and executable targets as well as the device link step. Targets that are static
libraries need to use the :prop_tgt:`STATIC_LIBRARY_OPTIONS` target property.

These options are used for both normal linking and device linking
(see policy :policy:`CMP0105`). To control link options for normal and device
link steps, :genex:`$<HOST_LINK>` and :genex:`$<DEVICE_LINK>` generator
expressions can be used.

This property holds a :ref:`semicolon-separated list <CMake Language Lists>` of
options specified so far for its target.  Use the :command:`target_link_options`
command to append more options.

This property is initialized by the :prop_dir:`LINK_OPTIONS` directory
property when a target is created, and is used by the generators to set
the options for the compiler.

Contents of ``LINK_OPTIONS`` may use "generator expressions" with the
syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` manual
for available expressions.  See the :manual:`cmake-buildsystem(7)` manual
for more on defining buildsystem properties.

.. note::

  This property must be used in preference to :prop_tgt:`LINK_FLAGS` property.

.. include:: ../command/DEVICE_LINK_OPTIONS.txt

.. include:: ../command/OPTIONS_SHELL.txt

.. include:: ../command/LINK_OPTIONS_LINKER.txt



/P/🚀 prop_tgt/LINK_SEARCH_END_STATIC.rst
====================================================


LINK_SEARCH_END_STATIC
----------------------

End a link line such that static system libraries are used.

Some linkers support switches such as ``-Bstatic`` and ``-Bdynamic`` to
determine whether to use static or shared libraries for ``-lXXX`` options.
CMake uses these options to set the link type for libraries whose full
paths are not known or (in some cases) are in implicit link
directories for the platform.  By default CMake adds an option at the
end of the library list (if necessary) to set the linker search type
back to its starting type.  This property switches the final linker
search type to ``-Bstatic`` regardless of how it started.

This property is initialized by the value of the variable
:variable:`CMAKE_LINK_SEARCH_END_STATIC` if it is set
when a target is created.

See also :prop_tgt:`LINK_SEARCH_START_STATIC`.



/P/🚀 prop_tgt/LINK_SEARCH_START_STATIC.rst
======================================================


LINK_SEARCH_START_STATIC
------------------------

Assume the linker looks for static libraries by default.

Some linkers support switches such as ``-Bstatic`` and ``-Bdynamic`` to
determine whether to use static or shared libraries for ``-lXXX`` options.
CMake uses these options to set the link type for libraries whose full
paths are not known or (in some cases) are in implicit link
directories for the platform.  By default the linker search type is
assumed to be ``-Bdynamic`` at the beginning of the library list.  This
property switches the assumption to ``-Bstatic``.  It is intended for use
when linking an executable statically (e.g. with the GNU ``-static``
option).

This property is initialized by the value of the variable
 :variable:`CMAKE_LINK_SEARCH_START_STATIC` if it is set
 when a target is created.

See also :prop_tgt:`LINK_SEARCH_END_STATIC`.



/P/🚀 prop_tgt/LINK_WHAT_YOU_USE.rst
===============================================


LINK_WHAT_YOU_USE
-----------------

.. versionadded:: 3.7

This is a boolean option that, when set to ``TRUE``, will automatically run
contents of variable :variable:`CMAKE_LINK_WHAT_YOU_USE_CHECK` on the target
after it is linked. In addition, the linker flag specified by variable
:variable:`CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG`  will be passed to the target
with the link command so that all libraries specified on the command line will
be linked into the target. This will result in the link producing a list of
libraries that provide no symbols used by this target but are being linked to
it.

.. note::

  For now, it is only supported for ``ELF`` platforms and is only applicable to
  executable and shared or module library targets. This property will be
  ignored for any other targets and configurations.

This property is initialized by the value of
the :variable:`CMAKE_LINK_WHAT_YOU_USE` variable if it is set
when a target is created.



/P/🚀 prop_tgt/LINKER_LANGUAGE.rst
=============================================


LINKER_LANGUAGE
---------------

Specifies language whose compiler will invoke the linker.

For executables, shared libraries, and modules, this sets the language
whose compiler is used to link the target (such as "C" or "CXX").  A
typical value for an executable is the language of the source file
providing the program entry point (main).  If not set, the language
with the highest linker preference value is the default.  Details of
the linker preferences are considered internal, but some limited
discussion can be found under the internal
:variable:`CMAKE_<LANG>_LINKER_PREFERENCE` variables.

If this property is not set by the user, it will be calculated at
generate-time by CMake.



/P/🚀 prop_tgt/LINKER_TYPE.rst
=========================================


LINKER_TYPE
-----------

.. versionadded:: 3.29

Specify which linker will be used for the link step. The property value may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.

.. code-block:: cmake

  add_library(lib1 SHARED ...)
  set_property(TARGET lib1 PROPERTY LINKER_TYPE LLD)

This specifies that ``lib1`` should use linker type ``LLD`` for the link step.
The implementation details will be provided by the variable
:variable:`CMAKE_<LANG>_USING_LINKER_<TYPE>` with ``<TYPE>`` having the value
``LLD``.

This property is not supported on :generator:`Green Hills MULTI` and
:generator:`Visual Studio 9 2008` generators.

.. note::
  It is assumed that the linker specified is fully compatible with the standard
  one. CMake will not do any options translation.

.. include:: ../variable/LINKER_PREDEFINED_TYPES.txt



/P/🚀 prop_tgt/LOCATION.rst
======================================


LOCATION
--------

Read-only location of a target on disk.

For an imported target, this read-only property returns the value of
the ``LOCATION_<CONFIG>`` property for an unspecified configuration
``<CONFIG>`` provided by the target.

For a non-imported target, this property is provided for compatibility
with CMake 2.4 and below.  It was meant to get the location of an
executable target's output file for use in :command:`add_custom_command`.  The
path may contain a build-system-specific portion that is replaced at
build time with the configuration getting built (such as
``$(ConfigurationName)`` in VS).  In CMake 2.6 and above
:command:`add_custom_command` automatically recognizes a target name in its
``COMMAND`` and ``DEPENDS`` options and computes the target location.  In
CMake 2.8.4 and above :command:`add_custom_command` recognizes
:manual:`generator expressions <cmake-generator-expressions(7)>`
to refer to target locations anywhere in the command.
Therefore this property is not needed for creating custom commands.

Do not set properties that affect the location of a target after
reading this property.  These include properties whose names match
``(RUNTIME|LIBRARY|ARCHIVE)_OUTPUT_(NAME|DIRECTORY)(_<CONFIG>)?``,
``(IMPLIB_)?(PREFIX|SUFFIX)``, or "LINKER_LANGUAGE".  Failure to follow
this rule is not diagnosed and leaves the location of the target
undefined.



/P/🚀 prop_tgt/LOCATION_CONFIG.rst
=============================================


LOCATION_<CONFIG>
-----------------

Read-only property providing a target location on disk.

A read-only property that indicates where a target's main file is
located on disk for the configuration ``<CONFIG>``.  The property is
defined only for library and executable targets.  An imported target
may provide a set of configurations different from that of the
importing project.  By default CMake looks for an exact-match but
otherwise uses an arbitrary available configuration.  Use the
:prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` property to map imported
configurations explicitly.

Do not set properties that affect the location of a target after
reading this property.  These include properties whose names match
``(RUNTIME|LIBRARY|ARCHIVE)_OUTPUT_(NAME|DIRECTORY)(_<CONFIG>)?``,
``(IMPLIB_)?(PREFIX|SUFFIX)``, or  :prop_tgt:`LINKER_LANGUAGE`.
Failure to follow this rule is not diagnosed and leaves
the location of the target undefined.



/P/🚀 prop_tgt/MACHO_COMPATIBILITY_VERSION.rst
=========================================================


MACHO_COMPATIBILITY_VERSION
---------------------------

.. versionadded:: 3.17

What compatibility version number is this target for Mach-O binaries.

For shared libraries on Mach-O systems (e.g. macOS, iOS)
the ``MACHO_COMPATIBILITY_VERSION`` property corresponds to the
*compatibility version* and :prop_tgt:`MACHO_CURRENT_VERSION` corresponds to
the *current version*.  These are both embedded in the shared library binary
and can be checked with the ``otool -L <binary>`` command.

It should be noted that the :prop_tgt:`MACHO_CURRENT_VERSION` and
``MACHO_COMPATIBILITY_VERSION`` properties do not affect the file
names or version-related symlinks that CMake generates for the library.
The :prop_tgt:`VERSION` and :prop_tgt:`SOVERSION` target properties still
control the file and symlink names.  The ``install_name`` is also still
controlled by :prop_tgt:`SOVERSION`.

When :prop_tgt:`MACHO_CURRENT_VERSION` and ``MACHO_COMPATIBILITY_VERSION``
are not given, :prop_tgt:`VERSION` and :prop_tgt:`SOVERSION` are used for
the version details to be embedded in the binaries respectively.
The :prop_tgt:`MACHO_CURRENT_VERSION` and ``MACHO_COMPATIBILITY_VERSION``
properties only need to be given if the project needs to decouple the file
and symlink naming from the version details embedded in the binaries
(e.g. to match libtool conventions).



/P/🚀 prop_tgt/MACHO_CURRENT_VERSION.rst
===================================================


MACHO_CURRENT_VERSION
---------------------

.. versionadded:: 3.17

What current version number is this target for Mach-O binaries.

For shared libraries on Mach-O systems (e.g. macOS, iOS)
the :prop_tgt:`MACHO_COMPATIBILITY_VERSION` property corresponds to the
*compatibility version* and ``MACHO_CURRENT_VERSION`` corresponds to the
*current version*.  These are both embedded in the shared library binary
and can be checked with the ``otool -L <binary>`` command.

It should be noted that the ``MACHO_CURRENT_VERSION`` and
:prop_tgt:`MACHO_COMPATIBILITY_VERSION` properties do not affect the file
names or version-related symlinks that CMake generates for the library.
The :prop_tgt:`VERSION` and :prop_tgt:`SOVERSION` target properties still
control the file and symlink names.  The ``install_name`` is also still
controlled by :prop_tgt:`SOVERSION`.

When ``MACHO_CURRENT_VERSION`` and :prop_tgt:`MACHO_COMPATIBILITY_VERSION`
are not given, :prop_tgt:`VERSION` and :prop_tgt:`SOVERSION` are used for
the version details to be embedded in the binaries respectively.
The ``MACHO_CURRENT_VERSION`` and :prop_tgt:`MACHO_COMPATIBILITY_VERSION`
properties only need to be given if the project needs to decouple the file
and symlink naming from the version details embedded in the binaries
(e.g. to match libtool conventions).



/P/🚀 prop_tgt/MACOSX_BUNDLE.rst
===========================================


MACOSX_BUNDLE
-------------

Build an executable as an Application Bundle on macOS or iOS.

When this property is set to ``TRUE`` the executable when built on macOS
or iOS will be created as an application bundle.  This makes it
a GUI executable that can be launched from the Finder.  See the
:prop_tgt:`MACOSX_BUNDLE_INFO_PLIST` target property for information about
creation of the ``Info.plist`` file for the application bundle.
This property is initialized by the value of the variable
:variable:`CMAKE_MACOSX_BUNDLE` if it is set when a target is created.



/P/🚀 prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst
======================================================


MACOSX_BUNDLE_INFO_PLIST
------------------------

Specify a custom ``Info.plist`` template for a macOS and iOS Application Bundle.

An executable target with :prop_tgt:`MACOSX_BUNDLE` enabled will be built as an
application bundle on macOS.  By default its ``Info.plist`` file is created
by configuring a template called ``MacOSXBundleInfo.plist.in`` located in the
:variable:`CMAKE_MODULE_PATH`.  This property specifies an alternative template
file name which may be a full path.

The following target properties may be set to specify content to be
configured into the file:

``MACOSX_BUNDLE_BUNDLE_NAME``
  Sets ``CFBundleName``.
``MACOSX_BUNDLE_BUNDLE_VERSION``
  Sets ``CFBundleVersion``.
``MACOSX_BUNDLE_COPYRIGHT``
  Sets ``NSHumanReadableCopyright``.
``MACOSX_BUNDLE_GUI_IDENTIFIER``
  Sets ``CFBundleIdentifier``.
``MACOSX_BUNDLE_ICON_FILE``
  Sets ``CFBundleIconFile``.
``MACOSX_BUNDLE_INFO_STRING``
  Sets ``CFBundleGetInfoString``.
``MACOSX_BUNDLE_LONG_VERSION_STRING``
  Sets ``CFBundleLongVersionString``.
``MACOSX_BUNDLE_SHORT_VERSION_STRING``
  Sets ``CFBundleShortVersionString``.

CMake variables of the same name may be set to affect all targets in a
directory that do not have each specific property set.  If a custom
``Info.plist`` is specified by this property it may of course hard-code
all the settings instead of using the target properties.



/P/🚀 prop_tgt/MACOSX_FRAMEWORK_INFO_PLIST.rst
=========================================================


MACOSX_FRAMEWORK_INFO_PLIST
---------------------------

Specify a custom ``Info.plist`` template for a macOS and iOS Framework.

A library target with :prop_tgt:`FRAMEWORK` enabled will be built as a
framework on macOS.  By default its ``Info.plist`` file is created by
configuring a template called ``MacOSXFrameworkInfo.plist.in`` located in the
:variable:`CMAKE_MODULE_PATH`.  This property specifies an alternative template
file name which may be a full path.

The following target properties may be set to specify content to be
configured into the file:

``MACOSX_FRAMEWORK_BUNDLE_VERSION``
  Sets ``CFBundleVersion``.
``MACOSX_FRAMEWORK_ICON_FILE``
  Sets ``CFBundleIconFile``.
``MACOSX_FRAMEWORK_IDENTIFIER``
  Sets ``CFBundleIdentifier``.
``MACOSX_FRAMEWORK_SHORT_VERSION_STRING``
  Sets ``CFBundleShortVersionString``.

CMake variables of the same name may be set to affect all targets in a
directory that do not have each specific property set.  If a custom
``Info.plist`` is specified by this property it may of course hard-code
all the settings instead of using the target properties.



/P/🚀 prop_tgt/MACOSX_RPATH.rst
==========================================


MACOSX_RPATH
------------

Whether this target on macOS or iOS is located at runtime using rpaths.

When this property is set to ``TRUE``, the directory portion of
the ``install_name`` field of this shared library will be ``@rpath``
unless overridden by :prop_tgt:`INSTALL_NAME_DIR`.  This indicates
the shared library is to be found at runtime using runtime
paths (rpaths).

This property is initialized by the value of the variable
:variable:`CMAKE_MACOSX_RPATH` if it is set when a target is
created.

Runtime paths will also be embedded in binaries using this target and
can be controlled by the :prop_tgt:`INSTALL_RPATH` target property on
the target linking to this target.

Policy :policy:`CMP0042` was introduced to change the default value of
``MACOSX_RPATH`` to ``TRUE``.  This is because use of ``@rpath`` is a
more flexible and powerful alternative to ``@executable_path`` and
``@loader_path``.



/P/🚀 prop_tgt/MANUALLY_ADDED_DEPENDENCIES.rst
=========================================================


MANUALLY_ADDED_DEPENDENCIES
---------------------------

.. versionadded:: 3.8

Get manually added dependencies to other top-level targets.

This read-only property can be used to query all dependencies that
were added for this target with the :command:`add_dependencies`
command.



/P/🚀 prop_tgt/MAP_IMPORTED_CONFIG_CONFIG.rst
========================================================


MAP_IMPORTED_CONFIG_<CONFIG>
----------------------------

Map from project configuration to
:ref:`imported target <IMPORTED targets>`'s configuration.

Set this to the list of configurations of an imported target that may
be used for the current project's ``<CONFIG>`` configuration.  Targets
imported from another project may not provide the same set of
configuration names available in the current project.  Setting this
property tells CMake what imported configurations are suitable for use
when building the ``<CONFIG>`` configuration.  The first configuration in
the list found to be provided by the imported target (i.e. via
:prop_tgt:`IMPORTED_LOCATION_<CONFIG>` for the mapped-to ``<CONFIG>``)
is selected.  As a special case, an empty list element refers to the
configuration-less imported target location
(i.e. :prop_tgt:`IMPORTED_LOCATION`).

If this property is set and no matching configurations are available,
then the imported target is considered to be not found.  This property
is ignored for non-imported targets.

This property is initialized by the value of the
:variable:`CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>` variable if it is set when a
target is created.

Example
^^^^^^^

For example creating imported C++ library ``foo``:

.. code-block:: cmake

  add_library(foo STATIC IMPORTED)

Use ``foo_debug`` path for ``Debug`` build type:

.. code-block:: cmake

  set_property(
    TARGET foo APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG
    )

  set_target_properties(foo PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "CXX"
    IMPORTED_LOCATION_DEBUG "${foo_debug}"
    )

Use ``foo_release`` path for ``Release`` build type:

.. code-block:: cmake

  set_property(
    TARGET foo APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE
    )

  set_target_properties(foo PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"
    IMPORTED_LOCATION_RELEASE "${foo_release}"
    )

Use ``Release`` version of library for ``MinSizeRel`` and ``RelWithDebInfo``
build types:

.. code-block:: cmake

  set_target_properties(foo PROPERTIES
    MAP_IMPORTED_CONFIG_MINSIZEREL Release
    MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release
    )



/P/🚀 prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT.rst
===========================================================


MSVC_DEBUG_INFORMATION_FORMAT
-----------------------------

.. versionadded:: 3.25

Select debug information format when targeting the MSVC ABI.

The allowed values are:

.. include:: MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt

Use :manual:`generator expressions <cmake-generator-expressions(7)>` to
support per-configuration specification.  For example, the code:

.. code-block:: cmake

  add_executable(foo foo.c)
  set_property(TARGET foo PROPERTY
    MSVC_DEBUG_INFORMATION_FORMAT "$<$<CONFIG:Debug,RelWithDebInfo>:ProgramDatabase>")

selects for the target ``foo`` the program database debug information format
for the Debug configuration.

This property is initialized from the value of the
:variable:`CMAKE_MSVC_DEBUG_INFORMATION_FORMAT` variable, if it is set.
If this property is not set, CMake selects a debug information format using
the default value ``$<$<CONFIG:Debug,RelWithDebInfo>:ProgramDatabase>``, if
supported by the compiler, and otherwise
``$<$<CONFIG:Debug,RelWithDebInfo>:Embedded>``.

.. note::

  This property has effect only when policy :policy:`CMP0141` is set to ``NEW``
  prior to the first :command:`project` or :command:`enable_language` command
  that enables a language using a compiler targeting the MSVC ABI.



/P/🚀 prop_tgt/MSVC_RUNTIME_LIBRARY.rst
==================================================


MSVC_RUNTIME_LIBRARY
--------------------

.. versionadded:: 3.15

Select the MSVC runtime library for use by compilers targeting the MSVC ABI.

The allowed values are:

.. include:: MSVC_RUNTIME_LIBRARY-VALUES.txt

Use :manual:`generator expressions <cmake-generator-expressions(7)>` to
support per-configuration specification.  For example, the code:

.. code-block:: cmake

  add_executable(foo foo.c)
  set_property(TARGET foo PROPERTY
    MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

selects for the target ``foo`` a multi-threaded statically-linked runtime
library with or without debug information depending on the configuration.

The property is initialized from the value of the
:variable:`CMAKE_MSVC_RUNTIME_LIBRARY` variable, if it is set.
If the property is not set, then CMake uses the default value
``MultiThreaded$<$<CONFIG:Debug>:Debug>DLL`` to select a MSVC runtime library.

.. note::

  This property has effect only when policy :policy:`CMP0091` is set to ``NEW``
  prior to the first :command:`project` or :command:`enable_language` command
  that enables a language using a compiler targeting the MSVC ABI.



/P/🚀 prop_tgt/NAME.rst
==================================


NAME
----

Logical name for the target.

Read-only logical name for the target as used by CMake.



/P/🚀 prop_tgt/NO_SONAME.rst
=======================================


NO_SONAME
---------

Whether to set ``soname`` when linking a shared library.

Enable this boolean property if a generated ``SHARED`` library
should not have ``soname`` set.  Default is to set ``soname`` on all
shared libraries as long as the platform supports it.
Generally, use this property only for leaf private libraries or
plugins.  If you use it on normal shared libraries which other targets
link against, on some platforms a linker will insert a full path to
the library (as specified at link time) into the dynamic section of
the dependent binary.  Therefore, once installed, dynamic loader may
eventually fail to locate the library for the binary.



/P/🚀 prop_tgt/NO_SYSTEM_FROM_IMPORTED.rst
=====================================================


NO_SYSTEM_FROM_IMPORTED
-----------------------

Do not treat include directories from the interfaces of consumed
:ref:`imported targets` as system directories.

When the consumed target's :prop_tgt:`SYSTEM` property is set to true, the
contents of the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` target property are
treated as system includes or, on Apple platforms, when the target is a
framework, it will be treated as system.  By default, :prop_tgt:`SYSTEM` is
true for imported targets and false for other target types.  If the
``NO_SYSTEM_FROM_IMPORTED`` property is set to true on a *consuming* target,
compilation of sources in that consuming target will not treat the contents of
the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of consumed imported targets as
system includes, even if that imported target's :prop_tgt:`SYSTEM` property
is false.

Directories listed in the :prop_tgt:`INTERFACE_SYSTEM_INCLUDE_DIRECTORIES`
property of consumed targets are not affected by ``NO_SYSTEM_FROM_IMPORTED``.
Those directories will always be treated as system include directories by
consumers.

This property is initialized by the value of the
:variable:`CMAKE_NO_SYSTEM_FROM_IMPORTED` variable if it is set when a target
is created.

See the :prop_tgt:`EXPORT_NO_SYSTEM` target property to set this behavior
on the target providing the include directories rather than the target
consuming them.



/P/🚀 prop_tgt/OBJC_EXTENSIONS.rst
=============================================


OBJC_EXTENSIONS
---------------

.. versionadded:: 3.16

Boolean specifying whether compiler specific extensions are requested.

This property specifies whether compiler specific extensions should be
used.  For some compilers, this results in adding a flag such
as ``-std=gnu11`` instead of ``-std=c11`` to the compile line.  This
property is ``ON`` by default. The basic OBJC standard level is
controlled by the :prop_tgt:`OBJC_STANDARD` target property.

If the property is not set, and the project has set the :prop_tgt:`C_EXTENSIONS`,
the value of :prop_tgt:`C_EXTENSIONS` is set for ``OBJC_EXTENSIONS``.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the :variable:`CMAKE_OBJC_EXTENSIONS` variable if set when a target is created
and otherwise by the value of
:variable:`CMAKE_OBJC_EXTENSIONS_DEFAULT <CMAKE_<LANG>_EXTENSIONS_DEFAULT>`
(see :policy:`CMP0128`).



/P/🚀 prop_tgt/OBJC_STANDARD.rst
===========================================


OBJC_STANDARD
-------------

.. versionadded:: 3.16

The OBJC standard whose features are requested to build this target.

This property specifies the OBJC standard whose features are requested
to build this target.  For some compilers, this results in adding a
flag such as ``-std=gnu11`` to the compile line.

Supported values are:

``90``
  Objective C89/C90

``99``
  Objective C99

``11``
  Objective C11

If the value requested does not result in a compile flag being added for
the compiler in use, a previous standard flag will be added instead.  This
means that using:

.. code-block:: cmake

  set_property(TARGET tgt PROPERTY OBJC_STANDARD 11)

with a compiler which does not support ``-std=gnu11`` or an equivalent
flag will not result in an error or warning, but will instead add the
``-std=gnu99`` or ``-std=gnu90`` flag if supported.  This "decay" behavior may
be controlled with the :prop_tgt:`OBJC_STANDARD_REQUIRED` target property.
Additionally, the :prop_tgt:`OBJC_EXTENSIONS` target property may be used to
control whether compiler-specific extensions are enabled on a per-target basis.

If the property is not set, and the project has set the :prop_tgt:`C_STANDARD`,
the value of :prop_tgt:`C_STANDARD` is set for ``OBJC_STANDARD``.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the :variable:`CMAKE_OBJC_STANDARD` variable if it is set when a target
is created.



/P/🚀 prop_tgt/OBJC_STANDARD_REQUIRED.rst
====================================================


OBJC_STANDARD_REQUIRED
----------------------

.. versionadded:: 3.16

Boolean describing whether the value of :prop_tgt:`OBJC_STANDARD` is a requirement.

If this property is set to ``ON``, then the value of the
:prop_tgt:`OBJC_STANDARD` target property is treated as a requirement.  If this
property is ``OFF`` or unset, the :prop_tgt:`OBJC_STANDARD` target property is
treated as optional and may "decay" to a previous standard if the requested is
not available.

If the property is not set, and the project has set the :prop_tgt:`C_STANDARD_REQUIRED`,
the value of :prop_tgt:`C_STANDARD_REQUIRED` is set for ``OBJC_STANDARD_REQUIRED``.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the :variable:`CMAKE_OBJC_STANDARD_REQUIRED` variable if it is set when a
target is created.



/P/🚀 prop_tgt/OBJCXX_EXTENSIONS.rst
===============================================


OBJCXX_EXTENSIONS
-----------------

.. versionadded:: 3.16

Boolean specifying whether compiler specific extensions are requested.

This property specifies whether compiler specific extensions should be
used.  For some compilers, this results in adding a flag such
as ``-std=gnu++11`` instead of ``-std=c++11`` to the compile line.  This
property is ``ON`` by default. The basic ObjC++ standard level is
controlled by the :prop_tgt:`OBJCXX_STANDARD` target property.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

If the property is not set, and the project has set the :prop_tgt:`CXX_EXTENSIONS`,
the value of :prop_tgt:`CXX_EXTENSIONS` is set for ``OBJCXX_EXTENSIONS``.

This property is initialized by the value of
the :variable:`CMAKE_OBJCXX_EXTENSIONS` variable if set when a target is
created and otherwise by the value of
:variable:`CMAKE_OBJCXX_EXTENSIONS_DEFAULT <CMAKE_<LANG>_EXTENSIONS_DEFAULT>`
(see :policy:`CMP0128`).



/P/🚀 prop_tgt/OBJCXX_STANDARD.rst
=============================================


OBJCXX_STANDARD
---------------

.. versionadded:: 3.16

The ObjC++ standard whose features are requested to build this target.

This property specifies the ObjC++ standard whose features are requested
to build this target.  For some compilers, this results in adding a
flag such as ``-std=gnu++11`` to the compile line.

Supported values are:

``98``
  Objective C++98

``11``
  Objective C++11

``14``
  Objective C++14

``17``
  Objective C++17

``20``
  Objective C++20

``23``
  .. versionadded:: 3.20

  Objective C++23

``26``
  .. versionadded:: 3.25

  Objective C++26. CMake 3.25 and later *recognize* ``26`` as a valid value,
  no version has support for any compiler.

If the value requested does not result in a compile flag being added for
the compiler in use, a previous standard flag will be added instead.  This
means that using:

.. code-block:: cmake

  set_property(TARGET tgt PROPERTY OBJCXX_STANDARD 11)

with a compiler which does not support ``-std=gnu++11`` or an equivalent
flag will not result in an error or warning, but will instead add the
``-std=gnu++98`` flag if supported.  This "decay" behavior may be controlled
with the :prop_tgt:`OBJCXX_STANDARD_REQUIRED` target property.
Additionally, the :prop_tgt:`OBJCXX_EXTENSIONS` target property may be used to
control whether compiler-specific extensions are enabled on a per-target basis.

If the property is not set, and the project has set the :prop_tgt:`CXX_STANDARD`,
the value of :prop_tgt:`CXX_STANDARD` is set for ``OBJCXX_STANDARD``.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the :variable:`CMAKE_OBJCXX_STANDARD` variable if it is set when a target
is created.



/P/🚀 prop_tgt/OBJCXX_STANDARD_REQUIRED.rst
======================================================


OBJCXX_STANDARD_REQUIRED
------------------------

.. versionadded:: 3.16

Boolean describing whether the value of :prop_tgt:`OBJCXX_STANDARD` is a requirement.

If this property is set to ``ON``, then the value of the
:prop_tgt:`OBJCXX_STANDARD` target property is treated as a requirement.  If this
property is ``OFF`` or unset, the :prop_tgt:`OBJCXX_STANDARD` target property is
treated as optional and may "decay" to a previous standard if the requested is
not available.

If the property is not set, and the project has set the :prop_tgt:`CXX_STANDARD_REQUIRED`,
the value of :prop_tgt:`CXX_STANDARD_REQUIRED` is set for ``OBJCXX_STANDARD_REQUIRED``.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the :variable:`CMAKE_OBJCXX_STANDARD_REQUIRED` variable if it is set when a
target is created.



/P/🚀 prop_tgt/OPTIMIZE_DEPENDENCIES.rst
===================================================


OPTIMIZE_DEPENDENCIES
---------------------

.. versionadded:: 3.19

Activates dependency optimization of static and object libraries.

When this property is set to true, some dependencies for a static or object
library may be removed at generation time if they are not necessary to build
the library, since static and object libraries don't actually link against
anything.

If a static or object library has dependency optimization enabled, it first
discards all dependencies. Then, it looks through all of the direct and
indirect dependencies that it initially had, and adds them back if they meet
any of the following criteria:

* The dependency was added to the library by :command:`add_dependencies`.
* The dependency was added to the library through a source file in the library
  generated by a custom command that uses the dependency.
* The dependency has any ``PRE_BUILD``, ``PRE_LINK``, or ``POST_BUILD`` custom
  commands associated with it.
* The dependency contains any source files that were generated by a custom
  command.
* The dependency contains any languages which produce side effects that are
  relevant to the library. Currently, all languages except C, C++, Objective-C,
  Objective-C++, assembly, and CUDA are assumed to produce side effects.
  However, side effects from one language are assumed not to be relevant to
  another (for example, a Fortran library is assumed to not have any side
  effects that are relevant for a Swift library.)

As an example, assume you have a static Fortran library which depends on a
static C library, which in turn depends on a static Fortran library. The
top-level Fortran library has optimization enabled, but the middle C library
does not. If you build the top Fortran library, the bottom Fortran library will
also build, but not the middle C library, since the C library does not have any
side effects that are relevant for the Fortran library. However, if you build
the middle C library, the bottom Fortran library will also build, even though
it does not have any side effects that are relevant to the C library, since the
C library does not have optimization enabled.

This property is initialized by the value of the
:variable:`CMAKE_OPTIMIZE_DEPENDENCIES` variable when the target is created.



/P/🚀 prop_tgt/OSX_ARCHITECTURES.rst
===============================================


OSX_ARCHITECTURES
-----------------

Target specific architectures for macOS.

The ``OSX_ARCHITECTURES`` property sets the target binary architecture for
targets on macOS (``-arch``).  This property is initialized by the value of the
variable :variable:`CMAKE_OSX_ARCHITECTURES` if it is set when a target is
created.  Use :prop_tgt:`OSX_ARCHITECTURES_<CONFIG>` to set the binary
architectures on a per-configuration basis, where ``<CONFIG>`` is an
upper-case name (e.g. ``OSX_ARCHITECTURES_DEBUG``).



/P/🚀 prop_tgt/OSX_ARCHITECTURES_CONFIG.rst
======================================================


OSX_ARCHITECTURES_<CONFIG>
--------------------------

Per-configuration macOS and iOS binary architectures for a target.

This property is the configuration-specific version of
:prop_tgt:`OSX_ARCHITECTURES`.



/P/🚀 prop_tgt/OUTPUT_NAME.rst
=========================================


OUTPUT_NAME
-----------

Output name for target files.

This sets the base name for output files created for an executable or
library target.  If not set, the logical target name is used by
default during generation. The value is not set by default during
configuration.

Contents of ``OUTPUT_NAME`` and the variants listed below may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.

See also the variants:

* :prop_tgt:`OUTPUT_NAME_<CONFIG>`
* :prop_tgt:`ARCHIVE_OUTPUT_NAME_<CONFIG>`
* :prop_tgt:`ARCHIVE_OUTPUT_NAME`
* :prop_tgt:`LIBRARY_OUTPUT_NAME_<CONFIG>`
* :prop_tgt:`LIBRARY_OUTPUT_NAME`
* :prop_tgt:`RUNTIME_OUTPUT_NAME_<CONFIG>`
* :prop_tgt:`RUNTIME_OUTPUT_NAME`



/P/🚀 prop_tgt/OUTPUT_NAME_CONFIG.rst
================================================


OUTPUT_NAME_<CONFIG>
--------------------

Per-configuration target file base name.

This is the configuration-specific version of the :prop_tgt:`OUTPUT_NAME`
target property.



/P/🚀 prop_tgt/PCH_INSTANTIATE_TEMPLATES.rst
=======================================================


PCH_INSTANTIATE_TEMPLATES
-------------------------

.. versionadded:: 3.19

When this property is set to true, the precompiled header compiler options
will contain a flag to instantiate templates during the generation of the PCH
if supported. This can significantly improve compile times. Supported in Clang
since version 11.

This property is initialized by the value of the
:variable:`CMAKE_PCH_INSTANTIATE_TEMPLATES` variable if it is set when a target
is created.  If that variable is not set, the property defaults to ``ON``.



/P/🚀 prop_tgt/PCH_WARN_INVALID.rst
==============================================


PCH_WARN_INVALID
----------------

.. versionadded:: 3.18

When this property is set to true, the precompile header compiler options
will contain a compiler flag which should warn about invalid precompiled
headers e.g. ``-Winvalid-pch`` for GNU compiler.

This property is initialized by the value of the
:variable:`CMAKE_PCH_WARN_INVALID` variable if it is set when a target is
created.  If that variable is not set, the property defaults to ``ON``.



/P/🚀 prop_tgt/PDB_NAME.rst
======================================


PDB_NAME
--------

Output name for the MS debug symbol ``.pdb`` file generated by the
linker for an executable or shared library target.

This property specifies the base name for the debug symbols file.
If not set, the :prop_tgt:`OUTPUT_NAME` target property value or
logical target name is used by default.

.. |COMPILE_PDB_XXX| replace:: :prop_tgt:`COMPILE_PDB_NAME`
.. include:: PDB_NOTE.txt



/P/🚀 prop_tgt/PDB_NAME_CONFIG.rst
=============================================


PDB_NAME_<CONFIG>
-----------------

Per-configuration output name for the MS debug symbol ``.pdb`` file
generated by the linker for an executable or shared library target.

This is the configuration-specific version of :prop_tgt:`PDB_NAME`.

.. |COMPILE_PDB_XXX| replace:: :prop_tgt:`COMPILE_PDB_NAME_<CONFIG>`
.. include:: PDB_NOTE.txt



/P/🚀 prop_tgt/PDB_OUTPUT_DIRECTORY.rst
==================================================


PDB_OUTPUT_DIRECTORY
--------------------

Output directory for the MS debug symbols ``.pdb`` file
generated by the linker for an executable or shared library target.

This property specifies the directory into which the MS debug symbols
will be placed by the linker. The property value may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.
Multi-configuration generators append a per-configuration
subdirectory to the specified directory unless a generator expression
is used.

This property is initialized by the value of the
:variable:`CMAKE_PDB_OUTPUT_DIRECTORY` variable if it is
set when a target is created.

.. |COMPILE_PDB_XXX| replace:: :prop_tgt:`COMPILE_PDB_OUTPUT_DIRECTORY`
.. include:: PDB_NOTE.txt



/P/🚀 prop_tgt/PDB_OUTPUT_DIRECTORY_CONFIG.rst
=========================================================


PDB_OUTPUT_DIRECTORY_<CONFIG>
-----------------------------

Per-configuration output directory for the MS debug symbol ``.pdb`` file
generated by the linker for an executable or shared library target.

This is a per-configuration version of :prop_tgt:`PDB_OUTPUT_DIRECTORY`,
but multi-configuration generators (:ref:`Visual Studio Generators`,
:generator:`Xcode`) do NOT append a
per-configuration subdirectory to the specified directory.  This
property is initialized by the value of the
:variable:`CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>` variable if it is
set when a target is created.

Contents of ``PDB_OUTPUT_DIRECTORY_<CONFIG>`` may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.

.. |COMPILE_PDB_XXX| replace:: :prop_tgt:`COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>`
.. include:: PDB_NOTE.txt



/P/🚀 prop_tgt/POSITION_INDEPENDENT_CODE.rst
=======================================================


POSITION_INDEPENDENT_CODE
-------------------------

Whether to create a position-independent target

The ``POSITION_INDEPENDENT_CODE`` property determines whether position
independent executables or shared libraries will be created.  This
property is ``True`` by default for ``SHARED`` and ``MODULE`` library
targets and ``False`` otherwise.  This property is initialized by the value
of the :variable:`CMAKE_POSITION_INDEPENDENT_CODE` variable  if it is set
when a target is created.

.. note::

  For executable targets, the link step is controlled by the :policy:`CMP0083`
  policy and the :module:`CheckPIESupported` module.



/P/🚀 prop_tgt/PRECOMPILE_HEADERS.rst
================================================


PRECOMPILE_HEADERS
------------------

.. versionadded:: 3.16

List of header files to precompile.

This property holds a :ref:`semicolon-separated list <CMake Language Lists>`
of header files to precompile specified so far for its target.
Use the :command:`target_precompile_headers` command to append more header
files.

This property supports
:manual:`generator expressions <cmake-generator-expressions(7)>`.



/P/🚀 prop_tgt/PRECOMPILE_HEADERS_REUSE_FROM.rst
===========================================================


PRECOMPILE_HEADERS_REUSE_FROM
-----------------------------

.. versionadded:: 3.16

Target from which to reuse the precompiled headers build artifact.

See the second signature of :command:`target_precompile_headers` command
for more detailed information.



/P/🚀 prop_tgt/PREFIX.rst
====================================


PREFIX
------

What comes before the library name.

A target property that can be set to override the prefix (such as
``lib``) on a library name.



/P/🚀 prop_tgt/PRIVATE_HEADER.rst
============================================


PRIVATE_HEADER
--------------

Specify private header files in a :prop_tgt:`FRAMEWORK` shared library target.

Shared library targets marked with the :prop_tgt:`FRAMEWORK` property generate
frameworks on macOS, iOS and normal shared libraries on other platforms.
This property may be set to a list of header files to be placed in the
PrivateHeaders directory inside the framework folder.  On non-Apple
platforms these headers may be installed using the ``PRIVATE_HEADER``
option to the :command:`install(TARGETS)` command.



/P/🚀 prop_tgt/PROJECT_LABEL.rst
===========================================


PROJECT_LABEL
-------------

Change the name of a target in an IDE.

Can be used to change the name of the target in an IDE like Visual
Studio.



/P/🚀 prop_tgt/PUBLIC_HEADER.rst
===========================================


PUBLIC_HEADER
-------------

Specify public header files in a :prop_tgt:`FRAMEWORK` shared library target.

Shared library targets marked with the :prop_tgt:`FRAMEWORK` property generate
frameworks on macOS, iOS and normal shared libraries on other platforms.
This property may be set to a list of header files to be placed in the
``Headers`` directory inside the framework folder.  On non-Apple platforms
these headers may be installed using the ``PUBLIC_HEADER`` option to the
:command:`install(TARGETS)` command.



/P/🚀 prop_tgt/RESOURCE.rst
======================================


RESOURCE
--------

Specify resource files in a :prop_tgt:`FRAMEWORK` or :prop_tgt:`BUNDLE`.

Target marked with the :prop_tgt:`FRAMEWORK` or :prop_tgt:`BUNDLE` property
generate framework or application bundle (both macOS and iOS is supported)
or normal shared libraries on other platforms.
This property may be set to a list of files to be placed in the corresponding
directory (eg. ``Resources`` directory for macOS) inside the bundle.
On non-Apple platforms these files may be installed using the ``RESOURCE``
option to the :command:`install(TARGETS)` command.

Following example of Application Bundle:

.. code-block:: cmake

  add_executable(ExecutableTarget
    addDemo.c
    resourcefile.txt
    appresourcedir/appres.txt)

  target_link_libraries(ExecutableTarget heymath mul)

  set(RESOURCE_FILES
    resourcefile.txt
    appresourcedir/appres.txt)

  set_target_properties(ExecutableTarget PROPERTIES
    MACOSX_BUNDLE TRUE
    MACOSX_FRAMEWORK_IDENTIFIER org.cmake.ExecutableTarget
    RESOURCE "${RESOURCE_FILES}")

will produce flat structure for iOS systems::

  ExecutableTarget.app
    appres.txt
    ExecutableTarget
    Info.plist
    resourcefile.txt

For macOS systems it will produce following directory structure::

  ExecutableTarget.app/
    Contents
      Info.plist
      MacOS
        ExecutableTarget
      Resources
        appres.txt
        resourcefile.txt

For Linux, such CMake script produce following files::

  ExecutableTarget
  Resources
    appres.txt
    resourcefile.txt



/P/🚀 prop_tgt/RULE_LAUNCH_COMPILE.rst
=================================================


RULE_LAUNCH_COMPILE
-------------------

Specify a launcher for compile rules.

.. note::
  This property is intended for internal use by :manual:`ctest(1)`.  Projects
  and developers should use the :prop_tgt:`<LANG>_COMPILER_LAUNCHER` target
  properties or the associated :variable:`CMAKE_<LANG>_COMPILER_LAUNCHER`
  variables instead.

See the :prop_gbl:`global property <RULE_LAUNCH_COMPILE>` of the same name
for details.  This overrides the global and directory property for a target.



/P/🚀 prop_tgt/RULE_LAUNCH_CUSTOM.rst
================================================


RULE_LAUNCH_CUSTOM
------------------

Specify a launcher for custom rules.

See the global property of the same name for details.  This overrides
the global and directory property for a target.



/P/🚀 prop_tgt/RULE_LAUNCH_LINK.rst
==============================================


RULE_LAUNCH_LINK
----------------

Specify a launcher for link rules.

.. note::
  This property is intended for internal use by :manual:`ctest(1)`.  Projects
  and developers should use the :prop_tgt:`<LANG>_LINKER_LAUNCHER` target
  properties or the associated :variable:`CMAKE_<LANG>_LINKER_LAUNCHER`
  variables instead.

See the :prop_gbl:`global property <RULE_LAUNCH_LINK>` of the same name for
details.  This overrides the global and directory property for a target.



/P/🚀 prop_tgt/RUNTIME_OUTPUT_DIRECTORY.rst
======================================================


RUNTIME_OUTPUT_DIRECTORY
------------------------

.. |XXX| replace:: :ref:`RUNTIME <Runtime Output Artifacts>`
.. |xxx| replace:: runtime
.. |CMAKE_XXX_OUTPUT_DIRECTORY| replace:: :variable:`CMAKE_RUNTIME_OUTPUT_DIRECTORY`
.. include:: XXX_OUTPUT_DIRECTORY.txt

See also the :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY_<CONFIG>` target property.



/P/🚀 prop_tgt/RUNTIME_OUTPUT_DIRECTORY_CONFIG.rst
=============================================================


RUNTIME_OUTPUT_DIRECTORY_<CONFIG>
---------------------------------

Per-configuration output directory for
:ref:`RUNTIME <Runtime Output Artifacts>` target files.

This is a per-configuration version of the
:prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` target property, but
multi-configuration generators (:ref:`Visual Studio Generators`,
:generator:`Xcode`) do NOT append a
per-configuration subdirectory to the specified directory.  This
property is initialized by the value of the
:variable:`CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>` variable if
it is set when a target is created.

Contents of ``RUNTIME_OUTPUT_DIRECTORY_<CONFIG>`` may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.



/P/🚀 prop_tgt/RUNTIME_OUTPUT_NAME.rst
=================================================


RUNTIME_OUTPUT_NAME
-------------------

.. |XXX| replace:: :ref:`RUNTIME <Runtime Output Artifacts>`
.. |xxx| replace:: runtime
.. include:: XXX_OUTPUT_NAME.txt

See also the :prop_tgt:`RUNTIME_OUTPUT_NAME_<CONFIG>` target property.



/P/🚀 prop_tgt/RUNTIME_OUTPUT_NAME_CONFIG.rst
========================================================


RUNTIME_OUTPUT_NAME_<CONFIG>
----------------------------

Per-configuration output name for
:ref:`RUNTIME <Runtime Output Artifacts>` target files.

This is the configuration-specific version of the
:prop_tgt:`RUNTIME_OUTPUT_NAME` target property.



/P/🚀 prop_tgt/SKIP_BUILD_RPATH.rst
==============================================


SKIP_BUILD_RPATH
----------------

Should rpaths be used for the build tree.

``SKIP_BUILD_RPATH`` is a boolean specifying whether to skip automatic
generation of an rpath allowing the target to run from the build tree,
see also the :prop_tgt:`BUILD_RPATH` target property.
This property is initialized by the value of the variable
:variable:`CMAKE_SKIP_BUILD_RPATH` if it is set when a target is created.



/P/🚀 prop_tgt/SOURCE_DIR.rst
========================================


SOURCE_DIR
----------

.. versionadded:: 3.4

This read-only property reports the value of the
:variable:`CMAKE_CURRENT_SOURCE_DIR` variable in the directory in which
the target was defined.



/P/🚀 prop_tgt/SOURCES.rst
=====================================


SOURCES
-------

This specifies the list of paths to source files for the target.
The following commands all set or add to the ``SOURCES`` target property
and are the usual way to manipulate it:

* :command:`add_executable`
* :command:`add_library`
* :command:`add_custom_target`
* :command:`target_sources`

Contents of ``SOURCES`` may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.
If a path starts with a generator expression, it is expected to
evaluate to an absolute path. Not doing so is considered undefined behavior.

Paths that are for files generated by the build will be treated
as relative to the build directory of the target, if the path is not
already specified as an absolute path.  Note that whether a file is seen as
generated may be affected by policy :policy:`CMP0118`.

If a path does not start with a generator expression, is not an
absolute path and is not a generated file, it will be treated as relative to
the location selected by the first of the following that matches:

* If a file by the specified path exists relative to the target's source
  directory, use that file.
* If policy :policy:`CMP0115` is not set to ``NEW``, try appending each
  known source file extension to the path and check if that exists
  relative to the target's source directory.
* Repeat the above two steps, this time relative to the target's binary
  directory instead.

Note that the above decisions are made at generation time, not build time.

See the :manual:`cmake-buildsystem(7)` manual for more on defining
buildsystem properties.



/P/🚀 prop_tgt/SOVERSION.rst
=======================================


SOVERSION
---------

ABI version number of a shared library target.

For shared libraries :prop_tgt:`VERSION` and ``SOVERSION`` can be used to
specify the build version and ABI version respectively.  When building or
installing appropriate symlinks are created if the platform supports
symlinks and the linker supports so-names.  If only one of both is
specified the missing is assumed to have the same version number.
``SOVERSION`` is ignored if :prop_tgt:`NO_SONAME` property is set.

.. include:: VERSION_SOVERSION_EXAMPLE.txt

Windows Versions
^^^^^^^^^^^^^^^^

For shared libraries and executables on Windows the :prop_tgt:`VERSION`
attribute is parsed to extract a ``<major>.<minor>`` version number.
These numbers are used as the image version of the binary.

Mach-O Versions
^^^^^^^^^^^^^^^

For shared libraries and executables on Mach-O systems (e.g. macOS, iOS),
the ``SOVERSION`` property corresponds to the *compatibility version* and
:prop_tgt:`VERSION` corresponds to the *current version* (unless Mach-O
specific overrides are provided, as discussed below).
See the :prop_tgt:`FRAMEWORK` target property for an example.

For shared libraries, the :prop_tgt:`MACHO_COMPATIBILITY_VERSION` and
:prop_tgt:`MACHO_CURRENT_VERSION` properties can be used to
override the *compatibility version* and *current version* respectively.
Note that ``SOVERSION`` will still be used to form the ``install_name``
and both ``SOVERSION`` and :prop_tgt:`VERSION` may also affect the file
and symlink names.

Versions of Mach-O binaries may be checked with the ``otool -L <binary>``
command.



/P/🚀 prop_tgt/STATIC_LIBRARY_FLAGS.rst
==================================================


STATIC_LIBRARY_FLAGS
--------------------

Archiver (or MSVC librarian) flags for a static library target.
Targets that are shared libraries, modules, or executables need to use
the :prop_tgt:`LINK_OPTIONS` or :prop_tgt:`LINK_FLAGS` target properties.

The ``STATIC_LIBRARY_FLAGS`` property, managed as a string, can be used to add
extra flags to the link step of a static library target.
:prop_tgt:`STATIC_LIBRARY_FLAGS_<CONFIG>` will add to the configuration
``<CONFIG>``, for example, ``DEBUG``, ``RELEASE``, ``MINSIZEREL``,
``RELWITHDEBINFO``, ...

.. note::

  This property has been superseded by :prop_tgt:`STATIC_LIBRARY_OPTIONS`
  property.



/P/🚀 prop_tgt/STATIC_LIBRARY_FLAGS_CONFIG.rst
=========================================================


STATIC_LIBRARY_FLAGS_<CONFIG>
-----------------------------

Per-configuration archiver (or MSVC librarian) flags for a static library
target.

This is the configuration-specific version of :prop_tgt:`STATIC_LIBRARY_FLAGS`.

.. note::

  This property has been superseded by :prop_tgt:`STATIC_LIBRARY_OPTIONS`
  property.



/P/🚀 prop_tgt/STATIC_LIBRARY_OPTIONS.rst
====================================================


STATIC_LIBRARY_OPTIONS
----------------------

.. versionadded:: 3.13

Archiver (or MSVC librarian) flags for a static library target.
Targets that are shared libraries, modules, or executables need to use
the :prop_tgt:`LINK_OPTIONS` target property.

This property holds a :ref:`semicolon-separated list <CMake Language Lists>` of options
specified so far for its target.  Use :command:`set_target_properties` or
:command:`set_property` commands to set its content.

Contents of ``STATIC_LIBRARY_OPTIONS`` may use "generator expressions" with the
syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` manual
for available expressions.  See the :manual:`cmake-buildsystem(7)` manual
for more on defining buildsystem properties.

.. note::

  This property must be used in preference to :prop_tgt:`STATIC_LIBRARY_FLAGS`
  property.

.. include:: ../command/OPTIONS_SHELL.txt



/P/🚀 prop_tgt/SUFFIX.rst
====================================


SUFFIX
------

What comes after the target name.

A target property that can be set to override the suffix (such as
``.so`` or ``.exe``) on the name of a library, module or executable.



/P/🚀 prop_tgt/Swift_COMPILATION_MODE.rst
====================================================


Swift_COMPILATION_MODE
----------------------

.. versionadded:: 3.29

Specify how Swift compiles a target.

The allowed values are:

.. include:: Swift_COMPILATION_MODE-VALUES.txt

Use :manual:`generator expressions <cmake-generator-expressions(7)>` to support
per-configuration specification. For example, the code:

.. code-block:: cmake

  add_library(foo foo.swift)
  set_property(TARGET foo PROPERTY
    Swift_COMPILATION_MODE "$<IF:$<CONFIG:Release>,wholemodule,incremental>")

sets the Swift compilation mode to wholemodule mode in the release configuration
and sets the property to incremental mode in other configurations.

The property is initialized from the value of the
:variable:`CMAKE_Swift_COMPILATION_MODE` variable, if it is set. If the property
is not set or is empty, then CMake uses the default value ``incremental`` to
specify the swift compilation mode.

.. note::

   This property only has effect when policy :policy:`CMP0157` is set to ``NEW``
   prior to the first :command:`project` or :command:`enable_language` command
   that enables the Swift language.



/P/🚀 prop_tgt/Swift_DEPENDENCIES_FILE.rst
=====================================================


Swift_DEPENDENCIES_FILE
-----------------------

.. versionadded:: 3.15

This property sets the path for the Swift dependency file (swiftdep) for the
target.  If one is not specified, it will default to ``<TARGET>.swiftdeps``.



/P/🚀 prop_tgt/Swift_LANGUAGE_VERSION.rst
====================================================


Swift_LANGUAGE_VERSION
----------------------

.. versionadded:: 3.16

This property sets the language version for the Swift sources in the target.  If
one is not specified, it will default to
:variable:`CMAKE_Swift_LANGUAGE_VERSION` if specified, otherwise it is the
latest version supported by the compiler.



/P/🚀 prop_tgt/Swift_MODULE_DIRECTORY.rst
====================================================


Swift_MODULE_DIRECTORY
----------------------

.. versionadded:: 3.15

Specify output directory for Swift modules provided by the target.

If the target contains Swift source files, this specifies the directory in which
the modules will be placed.  When this property is not set, the modules will be
placed in the build directory corresponding to the target's source directory.
If the variable :variable:`CMAKE_Swift_MODULE_DIRECTORY` is set when a target is
created its value is used to initialize this property.



/P/🚀 prop_tgt/Swift_MODULE_NAME.rst
===============================================


Swift_MODULE_NAME
-----------------

.. versionadded:: 3.15

This property specifies the name of the Swift module.  It is defaulted to the
name of the target.



/P/🚀 prop_tgt/SYSTEM.rst
====================================


SYSTEM
------

.. versionadded:: 3.25

Specifies that a target is a system target.  This has the following
effects:

* Entries of :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` are treated as
  system include directories when compiling consumers.
  Entries of :prop_tgt:`INTERFACE_SYSTEM_INCLUDE_DIRECTORIES` are not
  affected, and will always be treated as system include directories.
* On Apple platforms, If the :prop_tgt:`FRAMEWORK` target property is true,
  the frameworks directory is treated as system.

For imported targets, this property defaults to true, which means
that their :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` and, if the
:prop_tgt:`FRAMEWORK` target property is true, frameworks directory are
treated as system directories by default.  If their ``SYSTEM`` property is
false, then their :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` as well as
frameworks will not be treated as system.  Use the :prop_tgt:`EXPORT_NO_SYSTEM`
property to change how a target's ``SYSTEM`` property is set when it is
installed.

For non-imported targets, this target property is initialized from
the :prop_dir:`SYSTEM` directory property when the target is created.



/P/🚀 prop_tgt/TEST_LAUNCHER.rst
===========================================


TEST_LAUNCHER
-------------

.. versionadded:: 3.29

Use the given launcher to run executables.
This command will be added as a prefix to :command:`add_test` commands
for build target system executables and is meant to be run on the host
machine.

It effectively acts as a run script for tests in a similar way
to how :variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` works for compilation.

If this property contains a :ref:`semicolon-separated list <CMake Language
Lists>`, then the first value is the command and remaining values are its
arguments.

Contents of ``TEST_LAUNCHER`` may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.

This property is initialized by the value of the
:variable:`CMAKE_TEST_LAUNCHER` variable if it is set when a target
is created.



/P/🚀 prop_tgt/TYPE.rst
==================================


TYPE
----

The type of the target.

This read-only property can be used to test the type of the given
target.  It will be one of ``STATIC_LIBRARY``, ``MODULE_LIBRARY``,
``SHARED_LIBRARY``, ``OBJECT_LIBRARY``, ``INTERFACE_LIBRARY``, ``EXECUTABLE``
or one of the internal target types.



/P/🚀 prop_tgt/UNITY_BUILD.rst
=========================================


UNITY_BUILD
-----------

.. versionadded:: 3.16

When this property is set to true, the target source files will be combined
into batches for faster compilation.  This is done by creating a (set of)
unity sources which ``#include`` the original sources, then compiling these
unity sources instead of the originals.  This is known as a *Unity* or *Jumbo*
build.

CMake provides different algorithms for selecting which sources are grouped
together into a *bucket*. Algorithm selection is decided by the
:prop_tgt:`UNITY_BUILD_MODE` target property, which has the following acceptable
values:

* ``BATCH``
  When in this mode CMake determines which files are grouped together.
  The :prop_tgt:`UNITY_BUILD_BATCH_SIZE` property controls the upper limit on
  how many sources can be combined per unity source file.

* ``GROUP``
  When in this mode each target explicitly specifies how to group
  source files. Each source file that has the same
  :prop_sf:`UNITY_GROUP` value will be grouped together. Any sources
  that don't have this property will be compiled individually. The
  :prop_tgt:`UNITY_BUILD_BATCH_SIZE` property is ignored when using
  this mode.

If no explicit :prop_tgt:`UNITY_BUILD_MODE` has been specified, CMake will
default to ``BATCH``.

Unity builds are supported for the following languages:

``C``
  .. versionadded:: 3.16

``CXX``
  .. versionadded:: 3.16

``OBJC``
  .. versionadded:: 3.29

``OBJCXX``
  .. versionadded:: 3.29

For targets that mix source files from more than one language, CMake
separates the languages such that each generated unity source file only
contains sources for a single language.

This property is initialized by the value of the :variable:`CMAKE_UNITY_BUILD`
variable when a target is created.

.. note::

  Projects should not directly set the ``UNITY_BUILD`` property or its
  associated :variable:`CMAKE_UNITY_BUILD` variable to true.  Depending
  on the capabilities of the build machine and compiler used, it might or
  might not be appropriate to enable unity builds.  Therefore, this feature
  should be under developer control, which would normally be through the
  developer choosing whether or not to set the :variable:`CMAKE_UNITY_BUILD`
  variable on the :manual:`cmake(1)` command line or some other equivalent
  method.  However, it IS recommended to set the ``UNITY_BUILD`` target
  property to false if it is known that enabling unity builds for the
  target can lead to problems.

ODR (One definition rule) errors
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When multiple source files are included into one source file, as is done
for unity builds, it can potentially lead to ODR errors.  CMake provides
a number of measures to help address such problems:

* Any source file that has a non-empty :prop_sf:`COMPILE_OPTIONS`,
  :prop_sf:`COMPILE_DEFINITIONS`, :prop_sf:`COMPILE_FLAGS`, or
  :prop_sf:`INCLUDE_DIRECTORIES` source property will not be combined
  into a unity source.

* Any source file which is scanned for C++ module sources via
  :prop_tgt:`CXX_SCAN_FOR_MODULES`, :prop_sf:`CXX_SCAN_FOR_MODULES`, or
  membership of a ``CXX_MODULES`` file set will not be combined into a unity
  source.  See :manual:`cmake-cxxmodules(7)` for details.

* Projects can prevent an individual source file from being combined into
  a unity source by setting its :prop_sf:`SKIP_UNITY_BUILD_INCLUSION`
  source property to true.  This can be a more effective way to prevent
  problems with specific files than disabling unity builds for an entire
  target.

* Projects can set :prop_tgt:`UNITY_BUILD_UNIQUE_ID` to cause a valid
  C-identifier to be generated which is unique per file in a unity
  build.  This can be used to avoid problems with anonymous namespaces
  in unity builds.

* The :prop_tgt:`UNITY_BUILD_CODE_BEFORE_INCLUDE` and
  :prop_tgt:`UNITY_BUILD_CODE_AFTER_INCLUDE` target properties can be used
  to inject code into the unity source files before and after every
  ``#include`` statement.

* The order of source files added to the target via commands like
  :command:`add_library`, :command:`add_executable` or
  :command:`target_sources` will be preserved in the generated unity source
  files.  This can be used to manually enforce a specific grouping based on
  the :prop_tgt:`UNITY_BUILD_BATCH_SIZE` target property.



/P/🚀 prop_tgt/UNITY_BUILD_BATCH_SIZE.rst
====================================================


UNITY_BUILD_BATCH_SIZE
----------------------

.. versionadded:: 3.16

Specifies the maximum number of source files that can be combined into any one
unity source file when unity builds are enabled by the :prop_tgt:`UNITY_BUILD`
target property.  The original source files will be distributed across as many
unity source files as necessary to honor this limit.

The initial value for this property is taken from the
:variable:`CMAKE_UNITY_BUILD_BATCH_SIZE` variable when the target is created.
If that variable has not been set, the initial value will be 8.

The batch size needs to be selected carefully.  If set too high, the size of
the combined source files could result in the compiler using excessive memory
or hitting other similar limits.  In extreme cases, this can even result in
build failure.  On the other hand, if the batch size is too low, there will be
little gain in build performance.

Although strongly discouraged, the batch size may be set to a value of 0 to
combine all the sources for the target into a single unity file, regardless of
how many sources are involved.  This runs the risk of creating an excessively
large unity source file and negatively impacting the build performance, so
a value of 0 is not generally recommended.



/P/🚀 prop_tgt/UNITY_BUILD_CODE_AFTER_INCLUDE.rst
============================================================


UNITY_BUILD_CODE_AFTER_INCLUDE
------------------------------

.. versionadded:: 3.16

Code snippet which is included verbatim by the :prop_tgt:`UNITY_BUILD`
feature just after every ``#include`` statement in the generated unity
source files.  For example:

.. code-block:: cmake

  set(after [[
  #if defined(NOMINMAX)
  #undef NOMINMAX
  #endif
  ]])
  set_target_properties(myTarget PROPERTIES
    UNITY_BUILD_CODE_AFTER_INCLUDE "${after}"
  )

See also :prop_tgt:`UNITY_BUILD_CODE_BEFORE_INCLUDE`.



/P/🚀 prop_tgt/UNITY_BUILD_CODE_BEFORE_INCLUDE.rst
=============================================================


UNITY_BUILD_CODE_BEFORE_INCLUDE
-------------------------------

.. versionadded:: 3.16

Code snippet which is included verbatim by the :prop_tgt:`UNITY_BUILD`
feature just before every ``#include`` statement in the generated unity
source files.  For example:

.. code-block:: cmake

  set(before [[
  #if !defined(NOMINMAX)
  #define NOMINMAX
  #endif
  ]])
  set_target_properties(myTarget PROPERTIES
    UNITY_BUILD_CODE_BEFORE_INCLUDE "${before}"
  )

See also :prop_tgt:`UNITY_BUILD_CODE_AFTER_INCLUDE`.



/P/🚀 prop_tgt/UNITY_BUILD_MODE.rst
==============================================


UNITY_BUILD_MODE
----------------

.. versionadded:: 3.18

CMake provides different algorithms for selecting which sources are grouped
together into a *bucket*. Selection is decided by this property,
which has the following acceptable values:

``BATCH``
  When in this mode CMake determines which files are grouped together.
  The :prop_tgt:`UNITY_BUILD_BATCH_SIZE` property controls the upper limit on
  how many sources can be combined per unity source file.

  Example usage:

  .. code-block:: cmake

    add_library(example_library
                source1.cxx
                source2.cxx
                source3.cxx
                source4.cxx)

    set_target_properties(example_library PROPERTIES
                          UNITY_BUILD_MODE BATCH
                          UNITY_BUILD_BATCH_SIZE 2
                          )

``GROUP``
  When in this mode each target explicitly specifies how to group
  source files. Each source file that has the same
  :prop_sf:`UNITY_GROUP` value will be grouped together. Any sources
  that don't have this property will be compiled individually. The
  :prop_tgt:`UNITY_BUILD_BATCH_SIZE` property is ignored when using
  this mode.

  Example usage:

  .. code-block:: cmake

    add_library(example_library
                source1.cxx
                source2.cxx
                source3.cxx
                source4.cxx)

    set_target_properties(example_library PROPERTIES
                          UNITY_BUILD_MODE GROUP
                          )

    set_source_files_properties(source1.cxx source2.cxx source3.cxx
                                PROPERTIES UNITY_GROUP "bucket1"
                                )
    set_source_files_properties(source4.cxx
                                PROPERTIES UNITY_GROUP "bucket2"
                                )

If no explicit ``UNITY_BUILD_MODE`` has been specified, CMake will
default to ``BATCH``.



/P/🚀 prop_tgt/UNITY_BUILD_UNIQUE_ID.rst
===================================================


UNITY_BUILD_UNIQUE_ID
---------------------

.. versionadded:: 3.20

The name of a valid C-identifier which is set to a unique per-file
value during unity builds.

When this property is populated and when :prop_tgt:`UNITY_BUILD`
is true, the property value is used to define a compiler definition
of the specified name. The value of the defined symbol is unspecified,
but it is unique per file path.

Given:

.. code-block:: cmake

  set_target_properties(myTarget PROPERTIES
    UNITY_BUILD "ON"
    UNITY_BUILD_UNIQUE_ID "MY_UNITY_ID"
  )

the ``MY_UNITY_ID`` symbol is defined to a unique per-file value.

One known use case for this identifier is to disambiguate the
variables in an anonymous namespace in a limited scope.
Anonymous namespaces present a problem for unity builds because
they are used to ensure that certain variables and declarations
are scoped to a translation unit which is approximated by a
single source file.  When source files are combined in a unity
build file, those variables in different files are combined in
a single translation unit and the names clash.  This property can
be used to avoid that with code like the following:

.. code-block:: cpp

  // Needed for when unity builds are disabled
  #ifndef MY_UNITY_ID
  #define MY_UNITY_ID
  #endif

  namespace { namespace MY_UNITY_ID {
    // The name 'i' clashes (or could clash) with other
    // variables in other anonymous namespaces
    int i = 42;
  }}

  int use_var()
  {
    return MY_UNITY_ID::i;
  }

The pseudonymous namespace is used within a truly anonymous namespace.
On many platforms, this maintains the invariant that the symbols within
do not get external linkage when performing a unity build.



/P/🚀 prop_tgt/VERIFY_INTERFACE_HEADER_SETS.rst
==========================================================


VERIFY_INTERFACE_HEADER_SETS
----------------------------

.. versionadded:: 3.24

Used to verify that all headers in a target's ``PUBLIC`` and ``INTERFACE``
header sets can be included on their own.

When this property is set to true, and the target is an object library, static
library, shared library, interface library, or executable with exports enabled,
and the target has one or more ``PUBLIC`` or ``INTERFACE`` header sets, an
object library target named ``<target_name>_verify_interface_header_sets`` is
created. This verification target has one source file per header in the
``PUBLIC`` and ``INTERFACE`` header sets. Each source file only includes its
associated header file. The verification target links against the original
target to get all of its usage requirements. The verification target has its
:prop_tgt:`EXCLUDE_FROM_ALL` and :prop_tgt:`DISABLE_PRECOMPILE_HEADERS`
properties set to true, and its :prop_tgt:`AUTOMOC`, :prop_tgt:`AUTORCC`,
:prop_tgt:`AUTOUIC`, and :prop_tgt:`UNITY_BUILD` properties set to false.

If the header's :prop_sf:`LANGUAGE` property is set, the value of that property
is used to determine the language with which to compile the header file.
Otherwise, if the target has any C++ sources, the header is compiled as C++.
Otherwise, if the target has any C sources, the header is compiled as C.
Otherwise, if C++ is enabled globally, the header is compiled as C++.
Otherwise, if C is enabled globally, the header is compiled as C. Otherwise,
the header file is not compiled.

If the header's :prop_sf:`SKIP_LINTING` property is set to true, the file is
not compiled.

If any verification targets are created, a top-level target called
``all_verify_interface_header_sets`` is created which depends on all
verification targets.

This property is initialized by the value of the
:variable:`CMAKE_VERIFY_INTERFACE_HEADER_SETS` variable if it is set when
a target is created.

If the project wishes to control which header sets are verified by this
property, it can set :prop_tgt:`INTERFACE_HEADER_SETS_TO_VERIFY`.



/P/🚀 prop_tgt/VERSION.rst
=====================================


VERSION
-------

Version number of a shared library target.

For shared libraries ``VERSION`` and :prop_tgt:`SOVERSION` can be used
to specify the build version and ABI version respectively.  When building or
installing appropriate symlinks are created if the platform supports
symlinks and the linker supports so-names.  If only one of both is
specified the missing is assumed to have the same version number.  For
executables ``VERSION`` can be used to specify the build version.  When
building or installing appropriate symlinks are created if the
platform supports symlinks.

.. include:: VERSION_SOVERSION_EXAMPLE.txt

Windows Versions
^^^^^^^^^^^^^^^^

For shared libraries and executables on Windows the ``VERSION``
attribute is parsed to extract a ``<major>.<minor>`` version number.
These numbers are used as the image version of the binary.

Mach-O Versions
^^^^^^^^^^^^^^^

For shared libraries and executables on Mach-O systems (e.g. macOS, iOS),
the :prop_tgt:`SOVERSION` property corresponds to the *compatibility version*
and ``VERSION`` corresponds to the *current version* (unless Mach-O specific
overrides are provided, as discussed below).
See the :prop_tgt:`FRAMEWORK` target property for an example.

For shared libraries, the :prop_tgt:`MACHO_COMPATIBILITY_VERSION` and
:prop_tgt:`MACHO_CURRENT_VERSION` properties can be used to
override the *compatibility version* and *current version* respectively.
Note that :prop_tgt:`SOVERSION` will still be used to form the
``install_name`` and both :prop_tgt:`SOVERSION` and ``VERSION`` may also
affect the file and symlink names.

Versions of Mach-O binaries may be checked with the ``otool -L <binary>``
command.



/P/🚀 prop_tgt/VISIBILITY_INLINES_HIDDEN.rst
=======================================================


VISIBILITY_INLINES_HIDDEN
-------------------------

Whether to add a compile flag to hide symbols of inline functions

The ``VISIBILITY_INLINES_HIDDEN`` property determines whether a flag for
hiding symbols for inline functions, such as ``-fvisibility-inlines-hidden``,
should be used when invoking the compiler.  This property affects compilation
in sources of all types of targets (subject to policy :policy:`CMP0063`).

This property is initialized by
the value of the :variable:`CMAKE_VISIBILITY_INLINES_HIDDEN` variable if it
is set when a target is created.



/P/🚀 prop_tgt/VS_CONFIGURATION_TYPE.rst
===================================================


VS_CONFIGURATION_TYPE
---------------------

.. versionadded:: 3.6

Visual Studio project configuration type.

Sets the ``ConfigurationType`` attribute for a generated Visual Studio project.
The property value may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.
If this property is set, it overrides the default setting that is based on the
target type (e.g. ``StaticLibrary``, ``Application``, ...).

Supported on :ref:`Visual Studio Generators` for VS 2010 and higher.



/P/🚀 prop_tgt/VS_DEBUGGER_COMMAND.rst
=================================================


VS_DEBUGGER_COMMAND
-------------------

.. versionadded:: 3.12

Sets the local debugger command for Visual Studio C++ targets.
The property value may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.
This is defined in ``<LocalDebuggerCommand>`` in the Visual Studio
project file.  This property is initialized by the value of the variable
:variable:`CMAKE_VS_DEBUGGER_COMMAND` if it is set when a target is
created.

This property only works for Visual Studio 12 2013 and above;
it is ignored on other generators.



/P/🚀 prop_tgt/VS_DEBUGGER_COMMAND_ARGUMENTS.rst
===========================================================


VS_DEBUGGER_COMMAND_ARGUMENTS
-----------------------------

.. versionadded:: 3.13

Sets the local debugger command line arguments for Visual Studio C++ targets.
The property value may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.
This is defined in ``<LocalDebuggerCommandArguments>`` in the Visual Studio
project file.  This property is initialized by the value of the variable
:variable:`CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS` if it is set when a target is
created.

This property only works for Visual Studio 12 2013 and above;
it is ignored on other generators.



/P/🚀 prop_tgt/VS_DEBUGGER_ENVIRONMENT.rst
=====================================================


VS_DEBUGGER_ENVIRONMENT
-----------------------

.. versionadded:: 3.13

Sets the local debugger environment for Visual Studio C++ targets.
The property value may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.
This is defined in ``<LocalDebuggerEnvironment>`` in the Visual Studio
project file.  This property is initialized by the value of the variable
:variable:`CMAKE_VS_DEBUGGER_ENVIRONMENT` if it is set when a target is
created.

This property only works for Visual Studio 12 2013 and above;
it is ignored on other generators.



/P/🚀 prop_tgt/VS_DEBUGGER_WORKING_DIRECTORY.rst
===========================================================


VS_DEBUGGER_WORKING_DIRECTORY
-----------------------------

.. versionadded:: 3.8

Sets the local debugger working directory for Visual Studio C++ targets.
The property value may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.
This is defined in ``<LocalDebuggerWorkingDirectory>`` in the Visual Studio
project file.  This property is initialized by the value of the variable
:variable:`CMAKE_VS_DEBUGGER_WORKING_DIRECTORY` if it is set when a target is
created.

This property only works for Visual Studio 12 2013 and above;
it is ignored on other generators.



/P/🚀 prop_tgt/VS_DESKTOP_EXTENSIONS_VERSION.rst
===========================================================


VS_DESKTOP_EXTENSIONS_VERSION
-----------------------------

.. versionadded:: 3.4

Visual Studio Windows 10 Desktop Extensions Version

Specifies the version of the Desktop Extensions that should be included in the
target. For example ``10.0.10240.0``. If the value is not specified, the Desktop
Extensions will not be included. To use the same version of the extensions as
the Windows 10 SDK that is being used, you can use the
:variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION` variable.



/P/🚀 prop_tgt/VS_DOTNET_DOCUMENTATION_FILE.rst
==========================================================


VS_DOTNET_DOCUMENTATION_FILE
----------------------------

.. versionadded:: 3.17

Visual Studio managed project .NET documentation output

Sets the target XML documentation file output.



/P/🚀 prop_tgt/VS_DOTNET_REFERENCE_refname.rst
=========================================================


VS_DOTNET_REFERENCE_<refname>
-----------------------------

.. versionadded:: 3.8

Visual Studio managed project .NET reference with name ``<refname>``
and hint path.

Adds one .NET reference to generated Visual Studio project. The
reference will have the name ``<refname>`` and will point to the
assembly given as value of the property.

See also :prop_tgt:`VS_DOTNET_REFERENCES` and
:prop_tgt:`VS_DOTNET_REFERENCES_COPY_LOCAL`



/P/🚀 prop_tgt/VS_DOTNET_REFERENCEPROP_refname_TAG_tagname.rst
=========================================================================


VS_DOTNET_REFERENCEPROP_<refname>_TAG_<tagname>
-----------------------------------------------

.. versionadded:: 3.10

Defines an XML property ``<tagname>`` for a .NET reference
``<refname>``.

Reference properties can be set for .NET references which are
defined by the target properties :prop_tgt:`VS_DOTNET_REFERENCES`,
:prop_tgt:`VS_DOTNET_REFERENCE_<refname>`
and also for project references to other C# targets which are
established by :command:`target_link_libraries()`.

This property is only applicable to C# targets and Visual Studio
generators 2010 and later.



/P/🚀 prop_tgt/VS_DOTNET_REFERENCES.rst
==================================================


VS_DOTNET_REFERENCES
--------------------

Visual Studio managed project .NET references

Adds one or more semicolon-delimited .NET references to a generated
Visual Studio project.  For example, "System;System.Windows.Forms".



/P/🚀 prop_tgt/VS_DOTNET_REFERENCES_COPY_LOCAL.rst
=============================================================


VS_DOTNET_REFERENCES_COPY_LOCAL
-------------------------------

.. versionadded:: 3.8

Sets the **Copy Local** property for all .NET hint references in the target

Boolean property to enable/disable copying of .NET hint references to
output directory. The default is ``ON``.



/P/🚀 prop_tgt/VS_DOTNET_STARTUP_OBJECT.rst
======================================================


VS_DOTNET_STARTUP_OBJECT
------------------------

.. versionadded:: 3.24

Sets the startup object property in Visual Studio .NET targets.
The property value defines a full qualified class name (including package
name), for example: ``MyCompany.Package.MyStarterClass``.

If the property is unset, Visual Studio uses the first matching
``static void Main(string[])`` function signature by default. When more
than one ``Main()`` method is available in the current project, the property
becomes mandatory for building the project.

This property only works for Visual Studio 12 2013 and above;
it is ignored on other generators.

.. code-block:: cmake

  set_property(TARGET ${TARGET_NAME} PROPERTY
    VS_DOTNET_STARTUP_OBJECT "MyCompany.Package.MyStarterClass")



/P/🚀 prop_tgt/VS_DOTNET_TARGET_FRAMEWORK_VERSION.rst
================================================================


VS_DOTNET_TARGET_FRAMEWORK_VERSION
----------------------------------

Specify the .NET target framework version.

Used to specify the .NET target framework version for C++/CLI. For
example, "v4.5".

This property is deprecated and should not be used anymore. Use
:prop_tgt:`DOTNET_TARGET_FRAMEWORK` or
:prop_tgt:`DOTNET_TARGET_FRAMEWORK_VERSION` instead.



/P/🚀 prop_tgt/VS_DPI_AWARE.rst
==========================================


VS_DPI_AWARE
------------

.. versionadded:: 3.16

Set the Manifest Tool -> Input and Output -> DPI Awareness in the Visual Studio
target project properties.

Valid values are ``PerMonitor``, ``ON``, or ``OFF``.

For example:

.. code-block:: cmake

  add_executable(myproject myproject.cpp)
  set_property(TARGET myproject PROPERTY VS_DPI_AWARE "PerMonitor")



/P/🚀 prop_tgt/VS_GLOBAL_KEYWORD.rst
===============================================


VS_GLOBAL_KEYWORD
-----------------

Visual Studio project keyword for VS 10 (2010) and newer.

Sets the "keyword" attribute for a generated Visual Studio project.
Defaults to "Win32Proj".  You may wish to override this value with
"ManagedCProj", for example, in a Visual Studio managed C++ unit test
project.

Use the :prop_tgt:`VS_KEYWORD` target property to set the
keyword for Visual Studio 9 (2008) and older.



/P/🚀 prop_tgt/VS_GLOBAL_PROJECT_TYPES.rst
=====================================================


VS_GLOBAL_PROJECT_TYPES
-----------------------

Visual Studio project type(s).

Can be set to one or more UUIDs recognized by Visual Studio to
indicate the type of project.  This value is copied verbatim into the
generated project file.  Example for a managed C++ unit testing
project:

::

 {3AC096D0-A1C2-E12C-1390-A8335801FDAB};{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}

UUIDs are semicolon-delimited.



/P/🚀 prop_tgt/VS_GLOBAL_ROOTNAMESPACE.rst
=====================================================


VS_GLOBAL_ROOTNAMESPACE
-----------------------

Visual Studio project root namespace.

Sets the "RootNamespace" attribute for a generated Visual Studio
project.  The attribute will be generated only if this is set.



/P/🚀 prop_tgt/VS_GLOBAL_variable.rst
================================================


VS_GLOBAL_<variable>
--------------------

Visual Studio project-specific global variable.

Tell the Visual Studio generator to set the global variable
'<variable>' to a given value in the generated Visual Studio project.
Ignored on other generators.  Qt integration works better if
VS_GLOBAL_QtVersion is set to the version FindQt4.cmake found.  For
example, "4.7.3"



/P/🚀 prop_tgt/VS_IOT_EXTENSIONS_VERSION.rst
=======================================================


VS_IOT_EXTENSIONS_VERSION
-------------------------

.. versionadded:: 3.4

Visual Studio Windows 10 IoT Extensions Version

Specifies the version of the IoT Extensions that should be included in the
target. For example ``10.0.10240.0``. If the value is not specified, the IoT
Extensions will not be included. To use the same version of the extensions as
the Windows 10 SDK that is being used, you can use the
:variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION` variable.



/P/🚀 prop_tgt/VS_IOT_STARTUP_TASK.rst
=================================================


VS_IOT_STARTUP_TASK
-------------------

.. versionadded:: 3.4

Visual Studio Windows 10 IoT Continuous Background Task

Specifies that the target should be compiled as a Continuous Background Task library.



/P/🚀 prop_tgt/VS_JUST_MY_CODE_DEBUGGING.rst
=======================================================


VS_JUST_MY_CODE_DEBUGGING
-------------------------

.. versionadded:: 3.15

Enable Just My Code with Visual Studio debugger.

Supported on :ref:`Visual Studio Generators` for VS 2010 and higher,
:ref:`Makefile Generators` and the :generator:`Ninja` generators.

This property is initialized by the :variable:`CMAKE_VS_JUST_MY_CODE_DEBUGGING`
variable if it is set when a target is created.



/P/🚀 prop_tgt/VS_KEYWORD.rst
========================================


VS_KEYWORD
----------

Visual Studio project keyword for VS 9 (2008) and older.

Can be set to change the visual studio keyword, for example Qt
integration works better if this is set to Qt4VSv1.0.

Use the :prop_tgt:`VS_GLOBAL_KEYWORD` target property to set the
keyword for Visual Studio 12 (2013) and newer.



/P/🚀 prop_tgt/VS_MOBILE_EXTENSIONS_VERSION.rst
==========================================================


VS_MOBILE_EXTENSIONS_VERSION
----------------------------

.. versionadded:: 3.4

Visual Studio Windows 10 Mobile Extensions Version

Specifies the version of the Mobile Extensions that should be included in the
target. For example ``10.0.10240.0``. If the value is not specified, the Mobile
Extensions will not be included. To use the same version of the extensions as
the Windows 10 SDK that is being used, you can use the
:variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION` variable.



/P/🚀 prop_tgt/VS_NO_COMPILE_BATCHING.rst
====================================================


VS_NO_COMPILE_BATCHING
----------------------

.. versionadded:: 3.24

Turn off compile batching for the target. Usually MSBuild calls the compiler
with multiple c/cpp files and compiler starts subprocesses for each file to
make the build parallel. If you want compiler to be invoked with one file at
a time set ``VS_NO_COMPILE_BATCHING`` to ON. If this flag is set MSBuild will
call compiler with one c/cpp file at a time. Useful when you want to use tool
that replaces the compiler, for example some build caching tool.

This property is initialized by the :variable:`CMAKE_VS_NO_COMPILE_BATCHING`
variable if it is set when a target is created.

Example
^^^^^^^

This shows setting the property for the target ``foo``.

.. code-block:: cmake

  add_library(foo SHARED foo.cpp)
  set_property(TARGET foo PROPERTY VS_NO_COMPILE_BATCHING ON)



/P/🚀 prop_tgt/VS_NO_SOLUTION_DEPLOY.rst
===================================================


VS_NO_SOLUTION_DEPLOY
---------------------

.. versionadded:: 3.15

Specify that the target should not be marked for deployment to a Windows CE
or Windows Phone device in the generated Visual Studio solution.

Be default, all EXE and shared library (DLL) targets are marked to deploy to
the target device in the generated Visual Studio solution.

Generator expressions are supported.

There are reasons one might want to exclude a target / generated project from
deployment:

- The library or executable may not be necessary in the primary deploy/debug
  scenario, and excluding from deployment saves time in the
  develop/download/debug cycle.
- There may be insufficient space on the target device to accommodate all of
  the build products.
- Visual Studio 2013 requires a target device IP address be entered for each
  target marked for deployment.  For large numbers of targets, this can be
  tedious.
  NOTE: Visual Studio *will* deploy all project dependencies of a project
  tagged for deployment to the IP address configured for that project even
  if those dependencies are not tagged for deployment.


Example 1
^^^^^^^^^

This shows setting the variable for the target foo.

.. code-block:: cmake

  add_library(foo SHARED foo.cpp)
  set_property(TARGET foo PROPERTY VS_NO_SOLUTION_DEPLOY ON)

Example 2
^^^^^^^^^

This shows setting the variable for the Release configuration only.

.. code-block:: cmake

  add_library(foo SHARED foo.cpp)
  set_property(TARGET foo PROPERTY VS_NO_SOLUTION_DEPLOY "$<CONFIG:Release>")



/P/🚀 prop_tgt/VS_PACKAGE_REFERENCES.rst
===================================================


VS_PACKAGE_REFERENCES
---------------------

.. versionadded:: 3.15

Visual Studio package references for nuget.

Adds one or more semicolon-delimited package references to a generated
Visual Studio project. The version of the package will be
underscore delimited. For example, ``boost_1.7.0;nunit_3.12.*``.

.. code-block:: cmake

  set_property(TARGET ${TARGET_NAME} PROPERTY
    VS_PACKAGE_REFERENCES "boost_1.7.0")



/P/🚀 prop_tgt/VS_PLATFORM_TOOLSET.rst
=================================================


VS_PLATFORM_TOOLSET
-------------------

.. versionadded:: 3.18

Overrides the platform toolset used to build a target.

Only supported when the compiler used by the given toolset is the
same as the compiler used to build the whole source tree.

This is especially useful to create driver projects with the toolsets
"WindowsUserModeDriver10.0" or "WindowsKernelModeDriver10.0".



/P/🚀 prop_tgt/VS_PROJECT_IMPORT.rst
===============================================


VS_PROJECT_IMPORT
-----------------

.. versionadded:: 3.15

Visual Studio managed project imports

Adds to a generated Visual Studio project one or more semicolon-delimited paths
to .props files needed when building projects from some NuGet packages.
For example, ``my_packages_path/MyPackage.1.0.0/build/MyPackage.props``.



/P/🚀 prop_tgt/VS_SCC_AUXPATH.rst
============================================


VS_SCC_AUXPATH
--------------

Visual Studio Source Code Control Aux Path.

Can be set to change the visual studio source code control auxpath
property.



/P/🚀 prop_tgt/VS_SCC_LOCALPATH.rst
==============================================


VS_SCC_LOCALPATH
----------------

Visual Studio Source Code Control Local Path.

Can be set to change the visual studio source code control local path
property.



/P/🚀 prop_tgt/VS_SCC_PROJECTNAME.rst
================================================


VS_SCC_PROJECTNAME
------------------

Visual Studio Source Code Control Project.

Can be set to change the visual studio source code control project
name property.



/P/🚀 prop_tgt/VS_SCC_PROVIDER.rst
=============================================


VS_SCC_PROVIDER
---------------

Visual Studio Source Code Control Provider.

Can be set to change the visual studio source code control provider
property.



/P/🚀 prop_tgt/VS_SDK_REFERENCES.rst
===============================================


VS_SDK_REFERENCES
-----------------

.. versionadded:: 3.7

Visual Studio project SDK references.
Specify a :ref:`semicolon-separated list <CMake Language Lists>` of SDK references
to be added to a generated Visual Studio project, e.g.
``Microsoft.AdMediatorWindows81, Version=1.0``.



/P/🚀 prop_tgt/VS_SOLUTION_DEPLOY.rst
================================================


VS_SOLUTION_DEPLOY
------------------

.. versionadded:: 3.18

Specify that the target should be marked for deployment when not targeting
Windows CE, Windows Phone or a Windows Store application.

If the target platform doesn't support deployment, this property won't have
any effect.

:manual:`Generator expressions <cmake-generator-expressions(7)>` are supported.

Examples
^^^^^^^^

Always deploy target ``foo``:

.. code-block:: cmake

  add_executable(foo SHARED foo.cpp)
  set_property(TARGET foo PROPERTY VS_SOLUTION_DEPLOY ON)

Deploy target ``foo`` for all configurations except ``Release``:

.. code-block:: cmake

  add_executable(foo SHARED foo.cpp)
  set_property(TARGET foo PROPERTY VS_SOLUTION_DEPLOY "$<NOT:$<CONFIG:Release>>")



/P/🚀 prop_tgt/VS_SOURCE_SETTINGS_tool.rst
=====================================================


VS_SOURCE_SETTINGS_<tool>
-------------------------

.. versionadded:: 3.18

Set any item metadata on all non-built files that use <tool>.

Takes a list of ``Key=Value`` pairs. Tells the Visual Studio generator
to set ``Key`` to ``Value`` as item metadata on all non-built files
that use ``<tool>``.

For example:

.. code-block:: cmake

  set_property(TARGET main PROPERTY VS_SOURCE_SETTINGS_FXCompile "Key=Value" "Key2=Value2")

will set ``Key`` to ``Value`` and ``Key2`` to ``Value2`` for all
non-built files that use ``FXCompile``.

:manual:`Generator expressions <cmake-generator-expressions(7)>` are supported.



/P/🚀 prop_tgt/VS_USER_PROPS.rst
===========================================


VS_USER_PROPS
-------------

.. versionadded:: 3.8

Sets the user props file to be included in the visual studio
C++ project file. The standard path is
``$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props``, which is
in most cases the same as
``%LOCALAPPDATA%\\Microsoft\\MSBuild\\v4.0\\Microsoft.Cpp.Win32.user.props``
or ``%LOCALAPPDATA%\\Microsoft\\MSBuild\\v4.0\\Microsoft.Cpp.x64.user.props``.

The ``*.user.props`` files can be used for Visual Studio wide
configuration which is independent from cmake.



/P/🚀 prop_tgt/VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION.rst
====================================================================


VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION
--------------------------------------

.. versionadded:: 3.4

Visual Studio Windows Target Platform Minimum Version

For Windows 10. Specifies the minimum version of the OS that is being
targeted. For example ``10.0.10240.0``. If the value is not specified, the
value of the :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION` variable
will be used on WindowsStore projects.  Otherwise the target platform
minimum version will not be specified for the project.

.. versionadded:: 3.27
  This property is initialized by the value of the
  :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION` variable
  if it is set when a target is created.



/P/🚀 prop_tgt/VS_WINRT_COMPONENT.rst
================================================


VS_WINRT_COMPONENT
------------------

.. versionadded:: 3.1

Mark a target as a Windows Runtime component for the Visual Studio generator.
Compile the target with ``C++/CX`` language extensions for Windows Runtime.
For ``SHARED`` and ``MODULE`` libraries, this also defines the
``_WINRT_DLL`` preprocessor macro.

.. note::
  Currently this is implemented only by Visual Studio generators.
  Support may be added to other generators in the future.



/P/🚀 prop_tgt/VS_WINRT_REFERENCES.rst
=================================================


VS_WINRT_REFERENCES
-------------------

Visual Studio project Windows Runtime Metadata references

Adds one or more semicolon-delimited WinRT references to a generated
Visual Studio project.  For example, "Windows;Windows.UI.Core".



/P/🚀 prop_tgt/WATCOM_RUNTIME_LIBRARY.rst
====================================================


WATCOM_RUNTIME_LIBRARY
----------------------

.. versionadded:: 3.24

Select the Watcom runtime library for use by compilers targeting the Watcom ABI.

The allowed values are:

.. include:: WATCOM_RUNTIME_LIBRARY-VALUES.txt

Use :manual:`generator expressions <cmake-generator-expressions(7)>` to
support per-configuration specification.

For example, the code:

.. code-block:: cmake

  add_executable(foo foo.c)
  set_property(TARGET foo PROPERTY
    WATCOM_RUNTIME_LIBRARY "MultiThreaded")

selects for the target ``foo`` a multi-threaded statically-linked runtime
library.

If this property is not set then CMake uses the default value
``MultiThreadedDLL`` on Windows and ``SingleThreaded`` on other
platforms to select a Watcom runtime library.

.. note::

  This property has effect only when policy :policy:`CMP0136` is set to ``NEW``
  prior to the first :command:`project` or :command:`enable_language` command
  that enables a language using a compiler targeting the Watcom ABI.



/P/🚀 prop_tgt/WIN32_EXECUTABLE.rst
==============================================


WIN32_EXECUTABLE
----------------

Build an executable with a WinMain entry point on windows.

When this property is set to true the executable when linked on
Windows will be created with a WinMain() entry point instead of just
main().  This makes it a GUI executable instead of a console application.
See the :variable:`CMAKE_MFC_FLAG` variable documentation to
configure use of the Microsoft Foundation Classes (MFC) for WinMain
executables.  This property is initialized by the value of the
:variable:`CMAKE_WIN32_EXECUTABLE` variable if it is set when
a target is created.

This property supports
:manual:`generator expressions <cmake-generator-expressions(7)>`, except if the
target is managed (contains C# code.)



/P/🚀 prop_tgt/WINDOWS_EXPORT_ALL_SYMBOLS.rst
========================================================


WINDOWS_EXPORT_ALL_SYMBOLS
--------------------------

.. versionadded:: 3.4

This property is implemented only for MS-compatible tools on Windows.

Enable this boolean property to automatically create a module definition
(``.def``) file with all global symbols found in the input ``.obj`` files
for a ``SHARED`` library (or executable with :prop_tgt:`ENABLE_EXPORTS`)
on Windows.  The module definition file will be passed to the linker
causing all symbols to be exported from the ``.dll``.
For global *data* symbols, ``__declspec(dllimport)`` must still be used when
compiling against the code in the ``.dll``.  All other function symbols will
be automatically exported and imported by callers.  This simplifies porting
projects to Windows by reducing the need for explicit ``dllexport`` markup,
even in ``C++`` classes.

When this property is enabled, zero or more ``.def`` files may also be
specified as source files of the target.  The exports named by these files
will be merged with those detected from the object files to generate a
single module definition file to be passed to the linker.  This can be
used to export symbols from a ``.dll`` that are not in any of its object
files but are added by the linker from dependencies (e.g. ``msvcrt.lib``).

This property is initialized by the value of
the :variable:`CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS` variable if it is set
when a target is created.



/P/🚀 prop_tgt/XCODE_ATTRIBUTE_an-attribute.rst
==========================================================


XCODE_ATTRIBUTE_<an-attribute>
------------------------------

Set Xcode target attributes directly.

Tell the :generator:`Xcode` generator to set ``<an-attribute>`` to a given
value in the generated Xcode project.  Ignored on other generators.

This offers low-level control over the generated Xcode project file.
It is meant as a last resort for specifying settings that CMake does
not otherwise have a way to control.  Although this can override a
setting CMake normally produces on its own, doing so bypasses CMake's
model of the project and can break things.

See the :variable:`CMAKE_XCODE_ATTRIBUTE_<an-attribute>` variable
to set attributes on all targets in a directory tree.

Contents of ``XCODE_ATTRIBUTE_<an-attribute>`` may use
"generator expressions" with the syntax ``$<...>``.  See the
:manual:`cmake-generator-expressions(7)` manual for available
expressions.  See the :manual:`cmake-buildsystem(7)` manual
for more on defining buildsystem properties.



/P/🚀 prop_tgt/XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY.rst
======================================================================


XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY
----------------------------------------

.. versionadded:: 3.20

Tell the :generator:`Xcode` generator to perform code signing for all the
frameworks and libraries that are embedded using the
:prop_tgt:`XCODE_EMBED_FRAMEWORKS <XCODE_EMBED_<type>>` property.

.. versionadded:: 3.21

This property was generalized to other types of embedded items.  See
:prop_tgt:`XCODE_EMBED_<type>_CODE_SIGN_ON_COPY` for the more general form.



/P/🚀 prop_tgt/XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY.rst
===========================================================================


XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY
---------------------------------------------

.. versionadded:: 3.20

Tell the :generator:`Xcode` generator to remove headers from all the
frameworks that are embedded using the
:prop_tgt:`XCODE_EMBED_FRAMEWORKS <XCODE_EMBED_<type>>` property.

.. versionadded:: 3.21

This property was generalized to other types of embedded items.  See
:prop_tgt:`XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY` for the more
general form.



/P/🚀 prop_tgt/XCODE_EMBED_type.rst
==============================================


XCODE_EMBED_<type>
------------------

.. versionadded:: 3.20

Tell the :generator:`Xcode` generator to embed the specified list of items into
the target bundle.  ``<type>`` specifies the embed build phase to use.
See the Xcode documentation for the base location of each ``<type>``.

The supported values for ``<type>`` are:

``FRAMEWORKS``
  The specified items will be added to the ``Embed Frameworks`` build phase.
  The items can be CMake target names or paths to frameworks or libraries.

``APP_EXTENSIONS``
  .. versionadded:: 3.21

  The specified items will be added to the ``Embed App Extensions`` build
  phase, with ``Destination`` set to ``PlugIns and Foundation Extensions``
  They must be CMake target names.

``EXTENSIONKIT_EXTENSIONS``
  .. versionadded:: 3.26

  The specified items will be added to the ``Embed App Extensions`` build
  phase, with ``Destination`` set to ``ExtensionKit Extensions``
  They must be CMake target names, and should likely have the
  ``XCODE_PRODUCT_TYPE`` target property set to
  ``com.apple.product-type.extensionkit-extension``
  as well as the  ``XCODE_EXPLICIT_FILE_TYPE`` to
  ``wrapper.extensionkit-extension``

``PLUGINS``
  .. versionadded:: 3.23

  The specified items will be added to the ``Embed PlugIns`` build phase.
  They must be CMake target names.

``RESOURCES``
  .. versionadded:: 3.28

  The specified items will be added to the ``Embed Resources`` build phase.
  They must be CMake target names or folder paths.

``XPC_SERVICES``
  .. versionadded:: 3.29

  The specified items will be added to the ``Embed XPC Services`` build phase.
  They must be CMake target names.

When listing a target as any of the things to embed, Xcode must see that target
as part of the same Xcode project, or a sub-project of the one defining the
bundle.  In order to satisfy this constraint, the CMake project must ensure
at least one of the following:

* The :variable:`CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY` variable is set
  to true in the top level ``CMakeLists.txt`` file.  This is the simplest and
  most robust approach.
* Define the target-to-embed in a subdirectory of the one that defines the
  target being embedded into.
* If the target-to-embed and the target being embedded into are in separate,
  unrelated directories (i.e. they are siblings, not one a parent of the
  other), ensure they have a common :command:`project` call in a parent
  directory and no other :command:`project` calls between themselves and that
  common :command:`project` call.

See also :prop_tgt:`XCODE_EMBED_<type>_PATH`,
:prop_tgt:`XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY` and
:prop_tgt:`XCODE_EMBED_<type>_CODE_SIGN_ON_COPY`.



/P/🚀 prop_tgt/XCODE_EMBED_type_CODE_SIGN_ON_COPY.rst
================================================================


XCODE_EMBED_<type>_CODE_SIGN_ON_COPY
------------------------------------

.. versionadded:: 3.20

Boolean property used only by the :generator:`Xcode` generator.  It specifies
whether to perform code signing for the items that are embedded using the
:prop_tgt:`XCODE_EMBED_<type>` property.

The supported values for ``<type>`` are:

``FRAMEWORKS``

``APP_EXTENSIONS``
  .. versionadded:: 3.21

``EXTENSIONKIT_EXTENSIONS``
  .. versionadded:: 3.26

``PLUGINS``
  .. versionadded:: 3.23

If a ``XCODE_EMBED_<type>_CODE_SIGN_ON_COPY`` property is not defined on the
target, no code signing on copy will be performed for that ``<type>``.



/P/🚀 prop_tgt/XCODE_EMBED_type_PATH.rst
===================================================


XCODE_EMBED_<type>_PATH
-----------------------

.. versionadded:: 3.20

This property is used only by the :generator:`Xcode` generator.  When defined,
it specifies the relative path to use when embedding the items specified by
:prop_tgt:`XCODE_EMBED_<type>`.  The path is relative
to the base location of the ``Embed XXX`` build phase associated with
``<type>``.  See the Xcode documentation for the base location of each
``<type>``.

The supported values for ``<type>`` are:

``FRAMEWORKS``

``APP_EXTENSIONS``
  .. versionadded:: 3.21

``EXTENSIONKIT_EXTENSIONS``
  .. versionadded:: 3.26

``PLUGINS``
  .. versionadded:: 3.23

``RESOURCES``
  .. versionadded:: 3.28

``XPC_SERVICES``
  .. versionadded:: 3.29



/P/🚀 prop_tgt/XCODE_EMBED_type_REMOVE_HEADERS_ON_COPY.rst
=====================================================================


XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY
-----------------------------------------

.. versionadded:: 3.20

Boolean property used only by the :generator:`Xcode` generator.  It specifies
whether to remove headers from all the frameworks that are embedded using the
:prop_tgt:`XCODE_EMBED_<type>` property.

The supported values for ``<type>`` are:

``FRAMEWORKS``
  If the ``XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY`` property is not
  defined, headers will not be removed on copy by default.

``APP_EXTENSIONS``
  .. versionadded:: 3.21

  If the ``XCODE_EMBED_APP_EXTENSIONS_REMOVE_HEADERS_ON_COPY`` property is not
  defined, headers WILL be removed on copy by default.

``EXTENSIONKIT_EXTENSIONS``
  .. versionadded:: 3.26

  If the ``XCODE_EMBED_APP_EXTENSIONS_REMOVE_HEADERS_ON_COPY`` property is not
  defined, headers WILL be removed on copy by default.

``PLUGINS``
  .. versionadded:: 3.23



/P/🚀 prop_tgt/XCODE_EXPLICIT_FILE_TYPE.rst
======================================================


XCODE_EXPLICIT_FILE_TYPE
------------------------

.. versionadded:: 3.8

Set the Xcode ``explicitFileType`` attribute on its reference to a
target.  CMake computes a default based on target type but
can be told explicitly with this property.

See also :prop_tgt:`XCODE_PRODUCT_TYPE`.



/P/🚀 prop_tgt/XCODE_GENERATE_SCHEME.rst
===================================================


XCODE_GENERATE_SCHEME
---------------------

.. versionadded:: 3.15

If enabled, the :generator:`Xcode` generator will generate schema files.  These
are useful to invoke analyze, archive, build-for-testing and test
actions from the command line.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_GENERATE_SCHEME` if it is set when a target
is created.

The following target properties overwrite the default of the
corresponding settings on the "Diagnostic" tab for each schema file.
Each of those is initialized by the respective ``CMAKE_`` variable
at target creation time.

- :prop_tgt:`XCODE_SCHEME_ADDRESS_SANITIZER`
- :prop_tgt:`XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN`
- :prop_tgt:`XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER`
- :prop_tgt:`XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS`
- :prop_tgt:`XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE`
- :prop_tgt:`XCODE_SCHEME_GUARD_MALLOC`
- :prop_tgt:`XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP`
- :prop_tgt:`XCODE_SCHEME_MALLOC_GUARD_EDGES`
- :prop_tgt:`XCODE_SCHEME_MALLOC_SCRIBBLE`
- :prop_tgt:`XCODE_SCHEME_MALLOC_STACK`
- :prop_tgt:`XCODE_SCHEME_THREAD_SANITIZER`
- :prop_tgt:`XCODE_SCHEME_THREAD_SANITIZER_STOP`
- :prop_tgt:`XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER`
- :prop_tgt:`XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP`
- :prop_tgt:`XCODE_SCHEME_LAUNCH_CONFIGURATION`
- :prop_tgt:`XCODE_SCHEME_ENABLE_GPU_API_VALIDATION`
- :prop_tgt:`XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION`
- :prop_tgt:`XCODE_SCHEME_ZOMBIE_OBJECTS`

The following target properties will be applied on the
"Info", "Arguments", and "Options" tab:

- :prop_tgt:`XCODE_SCHEME_ARGUMENTS`
- :prop_tgt:`XCODE_SCHEME_DEBUG_AS_ROOT`
- :prop_tgt:`XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING`
- :prop_tgt:`XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE`
- :prop_tgt:`XCODE_SCHEME_ENVIRONMENT`
- :prop_tgt:`XCODE_SCHEME_EXECUTABLE`
- :prop_tgt:`XCODE_SCHEME_LAUNCH_MODE`
- :prop_tgt:`XCODE_SCHEME_WORKING_DIRECTORY`



/P/🚀 prop_tgt/XCODE_LINK_BUILD_PHASE_MODE.rst
=========================================================


XCODE_LINK_BUILD_PHASE_MODE
---------------------------

.. versionadded:: 3.19

When using the :generator:`Xcode` generator, libraries to be linked will be
specified in the Xcode project file using either the "Link Binary With
Libraries" build phase or directly as linker flags.  The former allows Xcode
to manage build paths, which may be necessary when creating Xcode archives
because it may use different build paths to a regular build.

This property controls usage of "Link Binary With Libraries" build phase for
a target that is an app bundle, executable, shared library, shared framework
or a module library.

Possible values are:

* ``NONE``
  The libraries will be linked by specifying the linker flags directly.

* ``BUILT_ONLY``
  The "Link Binary With Libraries" build phase will be used to link to another
  target under the following conditions:

  - The target to be linked to is a regular non-imported, non-interface library
    target.
  - The output directory of the target being built has not been changed from
    its default (see :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` and
    :prop_tgt:`LIBRARY_OUTPUT_DIRECTORY`).

* ``KNOWN_LOCATION``
  The "Link Binary With Libraries" build phase will be used to link to another
  target under the same conditions as with ``BUILT_ONLY`` and also:

  - Imported library targets except those of type ``UNKNOWN``.
  - Any non-target library specified directly with a path.

For all other cases, the libraries will be linked by specifying the linker
flags directly.

.. warning::
  Libraries linked using "Link Binary With Libraries" are linked after the
  ones linked through regular linker flags.  This order should be taken into
  account when different static libraries contain symbols with the same name,
  as the former ones will take precedence over the latter.

.. warning::
  If two or more directories contain libraries with identical file names and
  some libraries are linked from those directories, the library search path
  lookup will end up linking libraries from the first directory.  This is a
  known limitation of Xcode.

This property is initialized by the value of the
:variable:`CMAKE_XCODE_LINK_BUILD_PHASE_MODE` variable if it is set when a
target is created.



/P/🚀 prop_tgt/XCODE_PRODUCT_TYPE.rst
================================================


XCODE_PRODUCT_TYPE
------------------

.. versionadded:: 3.8

Set the Xcode ``productType`` attribute on its reference to a
target.  CMake computes a default based on target type but
can be told explicitly with this property.

See also :prop_tgt:`XCODE_EXPLICIT_FILE_TYPE`.



/P/🚀 prop_tgt/XCODE_SCHEME_ADDRESS_SANITIZER.rst
============================================================


XCODE_SCHEME_ADDRESS_SANITIZER
------------------------------

.. versionadded:: 3.13

Whether to enable ``Address Sanitizer`` in the Diagnostics
section of the generated Xcode scheme.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER` if it is set
when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN.rst
=============================================================================


XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN
-----------------------------------------------

.. versionadded:: 3.13

Whether to enable ``Detect use of stack after return``
in the Diagnostics section of the generated Xcode scheme.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN`
if it is set when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_ARGUMENTS.rst
====================================================


XCODE_SCHEME_ARGUMENTS
----------------------

.. versionadded:: 3.13

Specify command line arguments that should be added to the Arguments
section of the generated Xcode scheme.

If set to a list of arguments those will be added to the scheme.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_DEBUG_AS_ROOT.rst
========================================================


XCODE_SCHEME_DEBUG_AS_ROOT
--------------------------

.. versionadded:: 3.15

Whether to debug the target as 'root'.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING.rst
====================================================================


XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING
--------------------------------------

.. versionadded:: 3.16

Whether to enable
``Allow debugging when using document Versions Browser``
in the Options section of the generated Xcode scheme.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING`
if it is set when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER.rst
======================================================================


XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER
----------------------------------------

.. versionadded:: 3.13

Whether to disable the ``Main Thread Checker``
in the Diagnostics section of the generated Xcode scheme.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER`
if it is set when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS.rst
================================================================


XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS
----------------------------------

.. versionadded:: 3.13

Whether to enable ``Dynamic Library Loads``
in the Diagnostics section of the generated Xcode scheme.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS` if it is set
when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE.rst
===================================================================


XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE
-------------------------------------

.. versionadded:: 3.13

Whether to enable ``Dynamic Linker API usage``
in the Diagnostics section of the generated Xcode scheme.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE` if it is set
when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_ENABLE_GPU_API_VALIDATION.rst
====================================================================


XCODE_SCHEME_ENABLE_GPU_API_VALIDATION
--------------------------------------

.. versionadded:: 3.25

Property value for ``Metal: API Validation`` in the Options section of
the generated Xcode scheme.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION`
if it is set when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE.rst
========================================================================


XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE
------------------------------------------

.. versionadded:: 3.23

Property value for ``GPU Frame Capture`` in the Options section of
the generated Xcode scheme. Example values are `Metal` and
`Disabled`.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE`
if it is set when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION.rst
=======================================================================


XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION
-----------------------------------------

.. versionadded:: 3.25

Property value for ``Metal: Shader Validation`` in the Options section of
the generated Xcode scheme.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION`
if it is set when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_ENVIRONMENT.rst
======================================================


XCODE_SCHEME_ENVIRONMENT
------------------------

.. versionadded:: 3.13

Specify environment variables that should be added to the Arguments
section of the generated Xcode scheme.

If set to a list of environment variables and values of the form
``MYVAR=value`` those environment variables will be added to the
scheme.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_EXECUTABLE.rst
=====================================================


XCODE_SCHEME_EXECUTABLE
-----------------------

.. versionadded:: 3.13

Specify path to executable in the Info section of the generated
Xcode scheme. If not set the schema generator will select the
current target if it is actually executable.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_GUARD_MALLOC.rst
=======================================================


XCODE_SCHEME_GUARD_MALLOC
------------------------------

.. versionadded:: 3.13

Whether to enable ``Guard Malloc``
in the Diagnostics section of the generated Xcode scheme.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_GUARD_MALLOC` if it is set
when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_LAUNCH_CONFIGURATION.rst
===============================================================


XCODE_SCHEME_LAUNCH_CONFIGURATION
---------------------------------

.. versionadded:: 3.25

Set the build configuration to run the target.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION`
if it is set when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_LAUNCH_MODE.rst
======================================================


XCODE_SCHEME_LAUNCH_MODE
------------------------

.. versionadded:: 3.25

Property value for ``Launch`` in the Info section of the generated Xcode
scheme.

Possible values are:

``AUTO``
  Launch automatically. This is the default.

``WAIT``
  Wait for the executable to be launched.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_LAUNCH_MODE` if it is set when a target is
created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP.rst
===================================================================


XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP
-------------------------------------

.. versionadded:: 3.13

Whether to enable the ``Main Thread Checker`` option
``Pause on issues``
in the Diagnostics section of the generated Xcode scheme.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP` if it is set
when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_MALLOC_GUARD_EDGES.rst
=============================================================


XCODE_SCHEME_MALLOC_GUARD_EDGES
-------------------------------

.. versionadded:: 3.13

Whether to enable ``Malloc Guard Edges``
in the Diagnostics section of the generated Xcode scheme.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES` if it is set
when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_MALLOC_SCRIBBLE.rst
==========================================================


XCODE_SCHEME_MALLOC_SCRIBBLE
------------------------------

.. versionadded:: 3.13

Whether to enable ``Malloc Scribble``
in the Diagnostics section of the generated Xcode scheme.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE` if it is set
when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_MALLOC_STACK.rst
=======================================================


XCODE_SCHEME_MALLOC_STACK
-------------------------

.. versionadded:: 3.13

Whether to enable ``Malloc Stack`` in the Diagnostics
section of the generated Xcode scheme.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_MALLOC_STACK` if it is set
when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_THREAD_SANITIZER.rst
===========================================================


XCODE_SCHEME_THREAD_SANITIZER
-----------------------------

.. versionadded:: 3.13

Whether to enable ``Thread Sanitizer`` in the Diagnostics
section of the generated Xcode scheme.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_THREAD_SANITIZER` if it is set
when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_THREAD_SANITIZER_STOP.rst
================================================================


XCODE_SCHEME_THREAD_SANITIZER_STOP
----------------------------------

.. versionadded:: 3.13

Whether to enable ``Thread Sanitizer - Pause on issues``
in the Diagnostics section of the generated Xcode scheme.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP` if it is set
when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER.rst
========================================================================


XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER
------------------------------------------

.. versionadded:: 3.13

Whether to enable ``Undefined Behavior Sanitizer``
in the Diagnostics section of the generated Xcode scheme.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER`
if it is set when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP.rst
=============================================================================


XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP
-----------------------------------------------

.. versionadded:: 3.13

Whether to enable ``Undefined Behavior Sanitizer`` option
``Pause on issues``
in the Diagnostics section of the generated Xcode scheme.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP`
if it is set when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_WORKING_DIRECTORY.rst
============================================================


XCODE_SCHEME_WORKING_DIRECTORY
------------------------------

.. versionadded:: 3.17

Specify the ``Working Directory`` of the *Run* and *Profile*
actions in the generated Xcode scheme. In case the value contains
generator expressions those are evaluated.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_WORKING_DIRECTORY` if it is set
when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_SCHEME_ZOMBIE_OBJECTS.rst
=========================================================


XCODE_SCHEME_ZOMBIE_OBJECTS
------------------------------

.. versionadded:: 3.13

Whether to enable ``Zombie Objects``
in the Diagnostics section of the generated Xcode scheme.

This property is initialized by the value of the variable
:variable:`CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS` if it is set
when a target is created.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 prop_tgt/XCODE_XCCONFIG.rst
============================================


XCODE_XCCONFIG
--------------

.. versionadded:: 3.24

If set, the :generator:`Xcode` generator will register the specified
file as a target-level XCConfig file. For global XCConfig files see
the :variable:`CMAKE_XCODE_XCCONFIG` variable.

This feature is intended to ease migration from native Xcode projects
to CMake projects.

Contents of ``XCODE_XCCONFIG`` may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.



/P/🚀 prop_tgt/XCTEST.rst
====================================


XCTEST
------

.. versionadded:: 3.3

This target is a XCTest CFBundle on the Mac.

This property will usually get set via the :command:`xctest_add_bundle`
macro in :module:`FindXCTest` module.

If a module library target has this property set to true it will be
built as a CFBundle when built on the Mac.  It will have the directory
structure required for a CFBundle.

This property depends on :prop_tgt:`BUNDLE` to be effective.



/P/🚀 prop_test/ATTACHED_FILES.rst
=============================================


ATTACHED_FILES
--------------

Attach a list of files to a dashboard submission.

Set this property to a list of files that will be encoded and
submitted to the dashboard as an addition to the test result.



/P/🚀 prop_test/ATTACHED_FILES_ON_FAIL.rst
=====================================================


ATTACHED_FILES_ON_FAIL
----------------------

Attach a list of files to a dashboard submission if the test fails.

Same as :prop_test:`ATTACHED_FILES`, but these files will only be
included if the test does not pass.



/P/🚀 prop_test/COST.rst
===================================


COST
----

This property describes the cost of a test.  When parallel testing is
enabled, tests in the test set will be run in descending order of cost.
Projects can explicitly define the cost of a test by setting this property
to a floating point value.

When the cost of a test is not defined by the project,
:manual:`ctest <ctest(1)>` will initially use a default cost of ``0``.
It computes a weighted average of the cost each time a test is run and
uses that as an improved estimate of the cost for the next run.  The more
a test is re-run in the same build directory, the more representative the
cost should become.



/P/🚀 prop_test/DEPENDS.rst
======================================


DEPENDS
-------

Specifies that this test should only be run after the specified list of tests.

Set this to a list of tests that must finish before this test is run. The
results of those tests are not considered, the dependency relationship is
purely for order of execution (i.e. it is really just a *run after*
relationship). Consider using test fixtures with setup tests if a dependency
with successful completion is required (see :prop_test:`FIXTURES_REQUIRED`).

Examples
~~~~~~~~

.. code-block:: cmake

  add_test(NAME baseTest1 ...)
  add_test(NAME baseTest2 ...)
  add_test(NAME dependsTest12 ...)

  set_tests_properties(dependsTest12 PROPERTIES DEPENDS "baseTest1;baseTest2")
  # dependsTest12 runs after baseTest1 and baseTest2, even if they fail



/P/🚀 prop_test/DISABLED.rst
=======================================


DISABLED
--------

.. versionadded:: 3.9

If set to ``True``, the test will be skipped and its status will be 'Not Run'. A
``DISABLED`` test will not be counted in the total number of tests and its
completion status will be reported to CDash as ``Disabled``.

A ``DISABLED`` test does not participate in test fixture dependency resolution.
If a ``DISABLED`` test has fixture requirements defined in its
:prop_test:`FIXTURES_REQUIRED` property, it will not cause setup or cleanup
tests for those fixtures to be added to the test set.

If a test with the :prop_test:`FIXTURES_SETUP` property set is ``DISABLED``,
the fixture behavior will be as though that setup test was passing and any test
case requiring that fixture will still run.



/P/🚀 prop_test/ENVIRONMENT.rst
==========================================


ENVIRONMENT
-----------

Specify environment variables that should be defined for running a test.

Set to a :ref:`semicolon-separated list <CMake Language Lists>` list
of environment variables and values of the form ``MYVAR=value``.
Those environment variables will be defined while running the test.
The environment changes from this property do not affect other tests.



/P/🚀 prop_test/ENVIRONMENT_MODIFICATION.rst
=======================================================


ENVIRONMENT_MODIFICATION
------------------------

.. versionadded:: 3.22

Specify environment variables that should be modified for running a test. Note
that the operations performed by this property are performed after the
:prop_test:`ENVIRONMENT` property is already applied.

Set to a :ref:`semicolon-separated list <CMake Language Lists>` of
environment variables and values of the form ``MYVAR=OP:VALUE``,
where ``MYVAR`` is the case-sensitive name of an environment variable
to be modified.  Entries are considered in the order specified in the
property's value.  The ``OP`` may be one of:

  - ``reset``: Reset to the unmodified value, ignoring all modifications to
    ``MYVAR`` prior to this entry. Note that this will reset the variable to
    the value set by :prop_test:`ENVIRONMENT`, if it was set, and otherwise
    to its state from the rest of the CTest execution.
  - ``set``: Replaces the current value of ``MYVAR`` with ``VALUE``.
  - ``unset``: Unsets the current value of ``MYVAR``.
  - ``string_append``: Appends singular ``VALUE`` to the current value of
    ``MYVAR``.
  - ``string_prepend``: Prepends singular ``VALUE`` to the current value of
    ``MYVAR``.
  - ``path_list_append``: Appends singular ``VALUE`` to the current value of
    ``MYVAR`` using the host platform's path list separator (``;`` on Windows
    and ``:`` elsewhere).
  - ``path_list_prepend``: Prepends singular ``VALUE`` to the current value of
    ``MYVAR`` using the host platform's path list separator (``;`` on Windows
    and ``:`` elsewhere).
  - ``cmake_list_append``: Appends singular ``VALUE`` to the current value of
    ``MYVAR`` using ``;`` as the separator.
  - ``cmake_list_prepend``: Prepends singular ``VALUE`` to the current value of
    ``MYVAR`` using ``;`` as the separator.

Unrecognized ``OP`` values will result in the test failing before it is
executed. This is so that future operations may be added without changing
valid behavior of existing tests.

The environment changes from this property do not affect other tests.



/P/🚀 prop_test/FAIL_REGULAR_EXPRESSION.rst
======================================================


FAIL_REGULAR_EXPRESSION
-----------------------

If the test output (stdout or stderr) matches this regular expression the test
will fail, regardless of the process exit code. Tests that exceed the timeout
specified by :prop_test:`TIMEOUT` fail regardless of
``FAIL_REGULAR_EXPRESSION``. Any non-zero return code or system-level test
failures including segmentation faults, signal abort, or heap errors fail the
test even if the regular expression does not match.

If set, if the output matches one of specified regular expressions, the test
will fail.  Example:

.. code-block:: cmake

  # test would pass, except for FAIL_REGULAR_EXPRESSION
  add_test(NAME mytest COMMAND ${CMAKE_COMMAND} -E echo "Failed")

  set_property(TEST mytest PROPERTY
    FAIL_REGULAR_EXPRESSION "[^a-z]Error;ERROR;Failed"
  )

``FAIL_REGULAR_EXPRESSION`` expects a list of regular expressions.

See also the :prop_test:`PASS_REGULAR_EXPRESSION` and
:prop_test:`SKIP_REGULAR_EXPRESSION` test properties.



/P/🚀 prop_test/FIXTURES_CLEANUP.rst
===============================================


FIXTURES_CLEANUP
----------------

.. versionadded:: 3.7

Specifies a list of fixtures for which the test is to be treated as a cleanup
test. These fixture names are distinct from test case names and are not
required to have any similarity to the names of tests associated with them.

Fixture cleanup tests are ordinary tests with all of the usual test
functionality. Setting the ``FIXTURES_CLEANUP`` property for a test has two
primary effects:

- CTest will ensure the test executes after all other tests which list any of
  the fixtures in its :prop_test:`FIXTURES_REQUIRED` property.

- If CTest is asked to run only a subset of tests (e.g. using regular
  expressions or the ``--rerun-failed`` option) and the cleanup test is not in
  the set of tests to run, it will automatically be added if any tests in the
  set require any fixture listed in ``FIXTURES_CLEANUP``.

A cleanup test can have multiple fixtures listed in its ``FIXTURES_CLEANUP``
property. It will execute only once for the whole CTest run, not once for each
fixture. A fixture can also have more than one cleanup test defined. If there
are multiple cleanup tests for a fixture, projects can control their order with
the usual :prop_test:`DEPENDS` test property if necessary.

A cleanup test is allowed to require other fixtures, but not any fixture listed
in its ``FIXTURES_CLEANUP`` property. For example:

.. code-block:: cmake

  # Ok: Dependent fixture is different to cleanup
  set_tests_properties(cleanupFoo PROPERTIES
    FIXTURES_CLEANUP  Foo
    FIXTURES_REQUIRED Bar
  )

  # Error: cannot require same fixture as cleanup
  set_tests_properties(cleanupFoo PROPERTIES
    FIXTURES_CLEANUP  Foo
    FIXTURES_REQUIRED Foo
  )

Cleanup tests will execute even if setup or regular tests for that fixture fail
or are skipped.

See :prop_test:`FIXTURES_REQUIRED` for a more complete discussion of how to use
test fixtures.



/P/🚀 prop_test/FIXTURES_REQUIRED.rst
================================================


FIXTURES_REQUIRED
-----------------

.. versionadded:: 3.7

Specifies a list of fixtures the test requires. Fixture names are case
sensitive and they are not required to have any similarity to test names.

Fixtures are a way to attach setup and cleanup tasks to a set of tests. If a
test requires a given fixture, then all tests marked as setup tasks for that
fixture will be executed first (once for the whole set of tests, not once per
test requiring the fixture). After all tests requiring a particular fixture
have completed, CTest will ensure all tests marked as cleanup tasks for that
fixture are then executed. Tests are marked as setup tasks with the
:prop_test:`FIXTURES_SETUP` property and as cleanup tasks with the
:prop_test:`FIXTURES_CLEANUP` property. If any of a fixture's setup tests fail,
all tests listing that fixture in their ``FIXTURES_REQUIRED`` property will not
be executed. The cleanup tests for the fixture will always be executed, even if
some setup tests fail.

When CTest is asked to execute only a subset of tests (e.g. by the use of
regular expressions or when run with the :option:`--rerun-failed <ctest --rerun-failed>`
command line option), it will automatically add any setup or cleanup tests for
fixtures required by any of the tests that are in the execution set. This
behavior can be overridden with the :option:`-FS <ctest -FS>`,
:option:`-FC <ctest -FC>` and :option:`-FA <ctest -FA>` command line options to
:manual:`ctest(1)` if desired.

Since setup and cleanup tasks are also tests, they can have an ordering
specified by the :prop_test:`DEPENDS` test property just like any other tests.
This can be exploited to implement setup or cleanup using multiple tests for a
single fixture to modularise setup or cleanup logic.

The concept of a fixture is different to that of a resource specified by
:prop_test:`RESOURCE_LOCK`, but they may be used together. A fixture defines a
set of tests which share setup and cleanup requirements, whereas a resource
lock has the effect of ensuring a particular set of tests do not run in
parallel. Some situations may need both, such as setting up a database,
serializing test access to that database and deleting the database again at the
end. For such cases, tests would populate both ``FIXTURES_REQUIRED`` and
:prop_test:`RESOURCE_LOCK` to combine the two behaviors. Names used for
:prop_test:`RESOURCE_LOCK` have no relationship with names of fixtures, so note
that a resource lock does not imply a fixture and vice versa.

Consider the following example which represents a database test scenario
similar to that mentioned above:

.. code-block:: cmake

  add_test(NAME testsDone   COMMAND emailResults)
  add_test(NAME fooOnly     COMMAND testFoo)
  add_test(NAME dbOnly      COMMAND testDb)
  add_test(NAME dbWithFoo   COMMAND testDbWithFoo)
  add_test(NAME createDB    COMMAND initDB)
  add_test(NAME setupUsers  COMMAND userCreation)
  add_test(NAME cleanupDB   COMMAND deleteDB)
  add_test(NAME cleanupFoo  COMMAND removeFoos)

  set_tests_properties(setupUsers PROPERTIES DEPENDS createDB)

  set_tests_properties(createDB   PROPERTIES FIXTURES_SETUP    DB)
  set_tests_properties(setupUsers PROPERTIES FIXTURES_SETUP    DB)
  set_tests_properties(cleanupDB  PROPERTIES FIXTURES_CLEANUP  DB)
  set_tests_properties(cleanupFoo PROPERTIES FIXTURES_CLEANUP  Foo)
  set_tests_properties(testsDone  PROPERTIES FIXTURES_CLEANUP  "DB;Foo")

  set_tests_properties(fooOnly    PROPERTIES FIXTURES_REQUIRED Foo)
  set_tests_properties(dbOnly     PROPERTIES FIXTURES_REQUIRED DB)
  set_tests_properties(dbWithFoo  PROPERTIES FIXTURES_REQUIRED "DB;Foo")

  set_tests_properties(dbOnly dbWithFoo createDB setupUsers cleanupDB
                       PROPERTIES RESOURCE_LOCK DbAccess)

Key points from this example:

- Two fixtures are defined: ``DB`` and ``Foo``. Tests can require a single
  fixture as ``fooOnly`` and ``dbOnly`` do, or they can depend on multiple
  fixtures like ``dbWithFoo`` does.

- A ``DEPENDS`` relationship is set up to ensure ``setupUsers`` happens after
  ``createDB``, both of which are setup tests for the ``DB`` fixture and will
  therefore be executed before the ``dbOnly`` and ``dbWithFoo`` tests
  automatically.

- No explicit ``DEPENDS`` relationships were needed to make the setup tests run
  before or the cleanup tests run after the regular tests.

- The ``Foo`` fixture has no setup tests defined, only a single cleanup test.

- ``testsDone`` is a cleanup test for both the ``DB`` and ``Foo`` fixtures.
  Therefore, it will only execute once regular tests for both fixtures have
  finished (i.e. after ``fooOnly``, ``dbOnly`` and ``dbWithFoo``). No
  ``DEPENDS`` relationship was specified for ``testsDone``, so it is free to
  run before, after or concurrently with other cleanup tests for either
  fixture.

- The setup and cleanup tests never list the fixtures they are for in their own
  ``FIXTURES_REQUIRED`` property, as that would result in a dependency on
  themselves and be considered an error.



/P/🚀 prop_test/FIXTURES_SETUP.rst
=============================================


FIXTURES_SETUP
--------------

.. versionadded:: 3.7

Specifies a list of fixtures for which the test is to be treated as a setup
test. These fixture names are distinct from test case names and are not
required to have any similarity to the names of tests associated with them.

Fixture setup tests are ordinary tests with all of the usual test
functionality. Setting the ``FIXTURES_SETUP`` property for a test has two
primary effects:

- CTest will ensure the test executes before any other test which lists the
  fixture name(s) in its :prop_test:`FIXTURES_REQUIRED` property.

- If CTest is asked to run only a subset of tests (e.g. using regular
  expressions or the ``--rerun-failed`` option) and the setup test is not in
  the set of tests to run, it will automatically be added if any tests in the
  set require any fixture listed in ``FIXTURES_SETUP``.

A setup test can have multiple fixtures listed in its ``FIXTURES_SETUP``
property. It will execute only once for the whole CTest run, not once for each
fixture. A fixture can also have more than one setup test defined. If there are
multiple setup tests for a fixture, projects can control their order with the
usual :prop_test:`DEPENDS` test property if necessary.

A setup test is allowed to require other fixtures, but not any fixture listed
in its ``FIXTURES_SETUP`` property. For example:

.. code-block:: cmake

  # Ok: dependent fixture is different to setup
  set_tests_properties(setupFoo PROPERTIES
    FIXTURES_SETUP    Foo
    FIXTURES_REQUIRED Bar
  )

  # Error: cannot require same fixture as setup
  set_tests_properties(setupFoo PROPERTIES
    FIXTURES_SETUP    Foo
    FIXTURES_REQUIRED Foo
  )

If any of a fixture's setup tests fail, none of the tests listing that fixture
in its :prop_test:`FIXTURES_REQUIRED` property will be run. Cleanup tests will,
however, still be executed.

See :prop_test:`FIXTURES_REQUIRED` for a more complete discussion of how to use
test fixtures.



/P/🚀 prop_test/GENERATED_RESOURCE_SPEC_FILE.rst
===========================================================


GENERATED_RESOURCE_SPEC_FILE
----------------------------

.. versionadded:: 3.28

Path to the :ref:`dynamically-generated resource spec file
<ctest-resource-dynamically-generated-spec-file>` generated by this test.



/P/🚀 prop_test/LABELS.rst
=====================================


LABELS
------

Specify a list of text labels associated with a test.  The labels are
reported in both the :program:`ctest` output summary and in dashboard submissions.
They can also be used to filter the set of tests to be executed (see the
:option:`ctest -L` and :option:`ctest -LE` options).

See :ref:`Additional Labels` for adding labels to a test dynamically during
test execution.



/P/🚀 prop_test/MEASUREMENT.rst
==========================================


MEASUREMENT
-----------

Specify a ``CDASH`` measurement and value to be reported for a test.

If set to a name then that name will be reported to ``CDASH`` as a named
measurement with a value of ``1``.  You may also specify a value by
setting ``MEASUREMENT`` to ``measurement=value``.



/P/🚀 prop_test/PASS_REGULAR_EXPRESSION.rst
======================================================


PASS_REGULAR_EXPRESSION
-----------------------

The test output (stdout or stderr) must match this regular expression
for the test to pass. The process exit code is ignored. Tests that exceed
the timeout specified by :prop_test:`TIMEOUT` still fail regardless of
``PASS_REGULAR_EXPRESSION``. System-level test failures including
segmentation faults, signal abort, or heap errors may fail the test even
if ``PASS_REGULAR_EXPRESSION`` is matched.

Example:

.. code-block:: cmake

  add_test(NAME mytest COMMAND ${CMAKE_COMMAND} -E echo "Passed this test")

  set_property(TEST mytest PROPERTY
    PASS_REGULAR_EXPRESSION "pass;Passed"
  )

``PASS_REGULAR_EXPRESSION`` expects a list of regular expressions.

To run a test that may have a system-level failure, but still pass if
``PASS_REGULAR_EXPRESSION`` matches, use a CMake command to wrap the
executable run. Note that this will prevent automatic handling of the
:prop_tgt:`CROSSCOMPILING_EMULATOR` and :prop_tgt:`TEST_LAUNCHER`
target property.

.. code-block:: cmake

    add_executable(main main.c)

    add_test(NAME sigabrt COMMAND ${CMAKE_COMMAND} -E env $<TARGET_FILE:main>)

    set_property(TEST sigabrt PROPERTY PROPERTY_REGULAR_EXPRESSION "pass;Passed")

.. code-block:: c

    #include <signal.h>
    #include <stdio.h>

    int main(void){
        fprintf(stdout, "Passed\n");
        fflush(stdout);  /* ensure the output buffer is seen */
        raise(SIGABRT);
        return 0;
    }

See also the :prop_test:`FAIL_REGULAR_EXPRESSION` and
:prop_test:`SKIP_REGULAR_EXPRESSION` test properties.



/P/🚀 prop_test/PROCESSOR_AFFINITY.rst
=================================================


PROCESSOR_AFFINITY
------------------

.. versionadded:: 3.12

Set to a true value to ask CTest to launch the test process with CPU affinity
for a fixed set of processors.  If enabled and supported for the current
platform, CTest will choose a set of processors to place in the CPU affinity
mask when launching the test process.  The number of processors in the set is
determined by the :prop_test:`PROCESSORS` test property or the number of
processors available to CTest, whichever is smaller.  The set of processors
chosen will be disjoint from the processors assigned to other concurrently
running tests that also have the ``PROCESSOR_AFFINITY`` property enabled.



/P/🚀 prop_test/PROCESSORS.rst
=========================================


PROCESSORS
----------

Set to specify how many process slots this test requires.
If not set, the default is ``1`` processor.

Denotes the number of processors that this test will require.  This is
typically used for MPI tests, and should be used in conjunction with
the :command:`ctest_test` ``PARALLEL_LEVEL`` option.

This will also be used to display a weighted test timing result in label and
subproject summaries in the command line output of :manual:`ctest(1)`. The wall
clock time for the test run will be multiplied by this property to give a
better idea of how much cpu resource CTest allocated for the test.

See also the :prop_test:`PROCESSOR_AFFINITY` test property.



/P/🚀 prop_test/REQUIRED_FILES.rst
=============================================


REQUIRED_FILES
--------------

List of files required to run the test.  The filenames are relative to the
test :prop_test:`WORKING_DIRECTORY` unless an absolute path is specified.

If set to a list of files, the test will not be run unless all of the
files exist.

Examples
~~~~~~~~

Suppose that ``test.txt`` is created by test ``baseTest`` and ``none.txt``
does not exist:

.. code-block:: cmake

  add_test(NAME baseTest ...)   # Assumed to create test.txt
  add_test(NAME fileTest ...)

  # The following ensures that if baseTest is successful, test.txt will
  # have been created before fileTest is run
  set_tests_properties(fileTest PROPERTIES
    DEPENDS baseTest
    REQUIRED_FILES test.txt
  )

  add_test(NAME notRunTest ...)

  # The following makes notRunTest depend on two files. Nothing creates
  # the none.txt file, so notRunTest will fail with status "Not Run".
  set_tests_properties(notRunTest PROPERTIES
    REQUIRED_FILES "test.txt;none.txt"
  )

The above example demonstrates how ``REQUIRED_FILES`` works, but it is not the
most robust way to implement test ordering with failure detection.  For that,
test fixtures are a better alternative (see :prop_test:`FIXTURES_REQUIRED`).



/P/🚀 prop_test/RESOURCE_GROUPS.rst
==============================================


RESOURCE_GROUPS
---------------

.. versionadded:: 3.16

Specify resources required by a test, grouped in a way that is meaningful to
the test.  See :ref:`resource allocation <ctest-resource-allocation>`
for more information on how this property integrates into the CTest resource
allocation feature.

The ``RESOURCE_GROUPS`` property is a :ref:`semicolon-separated list <CMake
Language Lists>` of group descriptions. Each entry consists of an optional
number of groups using the description followed by a series of resource
requirements for those groups. These requirements (and the number of groups)
are separated by commas. The resource requirements consist of the name of a
resource type, followed by a colon, followed by an unsigned integer
specifying the number of slots required on one resource of the given type.

The ``RESOURCE_GROUPS`` property tells CTest what resources a test expects
to use grouped in a way meaningful to the test.  The test itself must read
the :ref:`environment variables <ctest-resource-environment-variables>` to
determine which resources have been allocated to each group.  For example,
each group may correspond to a process the test will spawn when executed.

Consider the following example:

.. code-block:: cmake

  add_test(NAME MyTest COMMAND MyExe)
  set_property(TEST MyTest PROPERTY RESOURCE_GROUPS
    "2,gpus:2"
    "gpus:4,crypto_chips:2")

In this example, there are two group descriptions (implicitly separated by a
semicolon.) The content of the first description is ``2,gpus:2``. This
description specifies 2 groups, each of which requires 2 slots from a single
GPU. The content of the second description is ``gpus:4,crypto_chips:2``. This
description does not specify a group count, so a default of 1 is assumed.
This single group requires 4 slots from a single GPU and 2 slots from a
single cryptography chip. In total, 3 resource groups are specified for this
test, each with its own unique requirements.

Note that the number of slots following the resource type specifies slots from
a *single* instance of the resource. If the resource group can tolerate
receiving slots from different instances of the same resource, it can indicate
this by splitting the specification into multiple requirements of one slot. For
example:

.. code-block:: cmake

  add_test(NAME MyTest COMMAND MyExe)
  set_property(TEST MyTest PROPERTY RESOURCE_GROUPS
    "gpus:1,gpus:1,gpus:1,gpus:1")

In this case, the single resource group indicates that it needs four GPU slots,
all of which may come from separate GPUs (though they don't have to; CTest may
still assign slots from the same GPU.)

When CTest sets the :ref:`environment variables
<ctest-resource-environment-variables>` for a test, it assigns a group number
based on the group description, starting at 0 on the left and the number of
groups minus 1 on the right. For example, in the example above, the two
groups in the first description would have IDs of 0 and 1, and the single
group in the second description would have an ID of 2.

Both the ``RESOURCE_GROUPS`` and :prop_test:`RESOURCE_LOCK` properties serve
similar purposes, but they are distinct and orthogonal. Resources specified by
``RESOURCE_GROUPS`` do not affect :prop_test:`RESOURCE_LOCK`, and vice versa.
Whereas :prop_test:`RESOURCE_LOCK` is a simpler property that is used for
locking one global resource, ``RESOURCE_GROUPS`` is a more advanced property
that allows multiple tests to simultaneously use multiple resources of the
same type, specifying their requirements in a fine-grained manner.



/P/🚀 prop_test/RESOURCE_LOCK.rst
============================================


RESOURCE_LOCK
-------------

Specify a list of resources that are locked by this test.

If multiple tests specify the same resource lock, they are guaranteed
not to run concurrently.

See also :prop_test:`FIXTURES_REQUIRED` if the resource requires any setup or
cleanup steps.

Both the :prop_test:`RESOURCE_GROUPS` and ``RESOURCE_LOCK`` properties serve
similar purposes, but they are distinct and orthogonal. Resources specified by
:prop_test:`RESOURCE_GROUPS` do not affect ``RESOURCE_LOCK``, and vice versa.
Whereas ``RESOURCE_LOCK`` is a simpler property that is used for locking one
global resource, :prop_test:`RESOURCE_GROUPS` is a more advanced property
that allows multiple tests to simultaneously use multiple resources of the
same type, specifying their requirements in a fine-grained manner.



/P/🚀 prop_test/RUN_SERIAL.rst
=========================================


RUN_SERIAL
----------

Do not run this test in parallel with any other test.

Use this option in conjunction with the ctest_test ``PARALLEL_LEVEL``
option to specify that this test should not be run in parallel with
any other tests.



/P/🚀 prop_test/SKIP_REGULAR_EXPRESSION.rst
======================================================


SKIP_REGULAR_EXPRESSION
-----------------------

.. versionadded:: 3.16

If the test output (stderr or stdout) matches this regular expression the test
will be marked as skipped, regardless of the process exit code. Tests that
exceed the timeout specified by :prop_test:`TIMEOUT` still fail regardless of
``SKIP_REGULAR_EXPRESSION``. System-level test failures including segmentation
faults, signal abort, or heap errors may fail the test even if the regular
expression matches.

Example:

.. code-block:: cmake

  add_test(NAME mytest COMMAND ${CMAKE_COMMAND} -E echo "Skipped this test")

  set_property(TEST mytest PROPERTY
    SKIP_REGULAR_EXPRESSION "[^a-z]Skip" "SKIP" "Skipped"
  )

``SKIP_REGULAR_EXPRESSION`` expects a list of regular expressions.

To run a test that may have a system-level failure, but still skip if
``SKIP_REGULAR_EXPRESSION`` matches, use a CMake command to wrap the
executable run. Note that this will prevent automatic handling of the
:prop_tgt:`CROSSCOMPILING_EMULATOR` and :prop_tgt:`TEST_LAUNCHER`
target property.

.. code-block:: cmake

    add_executable(main main.c)

    add_test(NAME sigabrt COMMAND ${CMAKE_COMMAND} -E env $<TARGET_FILE:main>)

    set_property(TEST sigabrt PROPERTY SKIP_REGULAR_EXPRESSION "SIGABRT;[aA]bort")

.. code-block:: c

    #include <signal.h>

    int main(void){ raise(SIGABRT); return 0; }

See also the :prop_test:`SKIP_RETURN_CODE`,
:prop_test:`PASS_REGULAR_EXPRESSION`, and :prop_test:`FAIL_REGULAR_EXPRESSION`
test properties.



/P/🚀 prop_test/SKIP_RETURN_CODE.rst
===============================================


SKIP_RETURN_CODE
----------------

Return code to mark a test as skipped.

Sometimes only a test itself can determine if all requirements for the
test are met. If such a situation should not be considered a hard failure
a return code of the process can be specified that will mark the test as
``Not Run`` if it is encountered. Valid values are in the range of
0 to 255, inclusive.

Tests that exceed the timeout specified by :prop_test:`TIMEOUT` still fail
regardless of ``SKIP_RETURN_CODE``.
System-level test failures including segmentation faults,
signal abort, or heap errors may fail the test even if the return code matches.

.. code-block:: cmake

    # cmake (1) defines this to return code 1
    add_test(NAME r1 COMMAND ${CMAKE_COMMAND} -E false)

    set_tests_properties(r1 PROPERTIES SKIP_RETURN_CODE 1)


To run a test that may have a system-level failure, but still skip if
``SKIP_RETURN_CODE`` matches, use a CMake command to wrap the executable run.
Note that this will prevent automatic handling of the
:prop_tgt:`CROSSCOMPILING_EMULATOR` and :prop_tgt:`TEST_LAUNCHER` target
property.

.. code-block:: cmake

    add_executable(main main.c)

    # cmake -E env <command> returns 1 if the command fails in any way
    add_test(NAME sigabrt COMMAND ${CMAKE_COMMAND} -E env $<TARGET_FILE:main>)

    set_property(TEST sigabrt PROPERTY SKIP_RETURN_CODE 1)

.. code-block:: c

    #include <signal.h>

    int main(void){ raise(SIGABRT); return 0; }


To handle multiple types of cases that may need to be skipped, consider the
:prop_test:`SKIP_REGULAR_EXPRESSION` property.



/P/🚀 prop_test/TIMEOUT.rst
======================================


TIMEOUT
-------

How many seconds to allow for this test.

This property if set will limit a test to not take more than the
specified number of seconds to run.  If it exceeds that the test
process will be killed and ctest will move to the next test.  This
setting takes precedence over :variable:`CTEST_TEST_TIMEOUT`.

An explicit ``0`` value means the test has no timeout, except as
necessary to honor :option:`ctest --stop-time`.

See also :prop_test:`TIMEOUT_AFTER_MATCH` and
:prop_test:`TIMEOUT_SIGNAL_NAME`.



/P/🚀 prop_test/TIMEOUT_AFTER_MATCH.rst
==================================================


TIMEOUT_AFTER_MATCH
-------------------

.. versionadded:: 3.6

Change a test's timeout duration after a matching line is encountered
in its output.

Usage
^^^^^

.. code-block:: cmake

 add_test(mytest ...)
 set_property(TEST mytest PROPERTY TIMEOUT_AFTER_MATCH "${seconds}" "${regex}")

Description
^^^^^^^^^^^

Allow a test ``seconds`` to complete after ``regex`` is encountered in
its output.

When the test outputs a line that matches ``regex`` its start time is
reset to the current time and its timeout duration is changed to
``seconds``.  Prior to this, the timeout duration is determined by the
:prop_test:`TIMEOUT` property or the :variable:`CTEST_TEST_TIMEOUT`
variable if either of these are set.  Because the test's start time is
reset, its execution time will not include any time that was spent
waiting for the matching output.

``TIMEOUT_AFTER_MATCH`` is useful for avoiding spurious
timeouts when your test must wait for some system resource to become
available before it can execute.  Set :prop_test:`TIMEOUT` to a longer
duration that accounts for resource acquisition and use
``TIMEOUT_AFTER_MATCH`` to control how long the actual test
is allowed to run.

If the required resource can be controlled by CTest you should use
:prop_test:`RESOURCE_LOCK` instead of ``TIMEOUT_AFTER_MATCH``.
This property should be used when only the test itself can determine
when its required resources are available.

See also :prop_test:`TIMEOUT_SIGNAL_NAME`.



/P/🚀 prop_test/TIMEOUT_SIGNAL_GRACE_PERIOD.rst
==========================================================


TIMEOUT_SIGNAL_GRACE_PERIOD
---------------------------

.. versionadded:: 3.27

If the :prop_test:`TIMEOUT_SIGNAL_NAME` test property is set, this property
specifies the number of seconds to wait for a test process to terminate after
sending the custom signal.  Otherwise, this property has no meaning.

The grace period may be any real value greater than ``0.0``, but not greater
than ``60.0``.  If this property is not set, the default is ``1.0`` second.

This is available only on platforms supporting POSIX signals.
It is not available on Windows.



/P/🚀 prop_test/TIMEOUT_SIGNAL_NAME.rst
==================================================


TIMEOUT_SIGNAL_NAME
-------------------

.. versionadded:: 3.27

Specify a custom signal to send to a test process when its timeout is reached.
This is available only on platforms supporting POSIX signals.
It is not available on Windows.

The name must be one of the following:

  ``SIGINT``
    Interrupt.

  ``SIGQUIT``
    Quit.

  ``SIGTERM``
    Terminate.

  ``SIGUSR1``
    User defined signal 1.

  ``SIGUSR2``
    User defined signal 2.

The custom signal is sent to the test process to give it a chance
to exit gracefully during a grace period:

* If the test process created any children, it is responsible for
  terminating them too.

* The grace period length is determined by the
  :prop_test:`TIMEOUT_SIGNAL_GRACE_PERIOD` test property.

* If the test process does not terminate before the grace period ends,
  :manual:`ctest(1)` will force termination of its entire process tree
  via ``SIGSTOP`` and ``SIGKILL``.

See also :variable:`CTEST_TEST_TIMEOUT`,
:prop_test:`TIMEOUT`, and :prop_test:`TIMEOUT_AFTER_MATCH`.



/P/🚀 prop_test/WILL_FAIL.rst
========================================


WILL_FAIL
---------

If ``true``, inverts the pass / fail test criteria. Tests for which
``WILL_FAIL`` is ``true`` fail with return code 0 and pass with non-zero
return code. Tests that exceed the timeout specified by :prop_test:`TIMEOUT`
still fail regardless of ``WILL_FAIL``.
System-level test failures including segmentation faults,
signal abort, or heap errors may fail the test even if ``WILL_FAIL`` is true.

Example of a test that would ordinarily pass, but fails because ``WILL_FAIL``
is ``true``:

.. code-block:: cmake

    add_test(NAME failed COMMAND ${CMAKE_COMMAND} -E true)
    set_property(TEST failed PROPERTY WILL_FAIL true)

To run a test that may have a system-level failure, but still pass if
``WILL_FAIL`` is set, use a CMake command to wrap the executable run.
Note that this will prevent automatic handling of the
:prop_tgt:`CROSSCOMPILING_EMULATOR` and :prop_tgt:`TEST_LAUNCHER`
target property.

.. code-block:: cmake

    add_executable(main main.c)

    add_test(NAME sigabrt COMMAND ${CMAKE_COMMAND} -E env $<TARGET_FILE:main>)

    set_property(TEST sigabrt PROPERTY WILL_FAIL TRUE)

.. code-block:: c

    #include <signal.h>

    int main(void){ raise(SIGABRT); return 0; }



/P/🚀 prop_test/WORKING_DIRECTORY.rst
================================================


WORKING_DIRECTORY
-----------------

The directory from which the test executable will be called.

If this is not set, the test will be run with the working directory set to the
binary directory associated with where the test was created (i.e. the
:variable:`CMAKE_CURRENT_BINARY_DIR` for where :command:`add_test` was
called).



/P/🚀 prop_sf/ABSTRACT.rst
=====================================


ABSTRACT
--------

Is this source file an abstract class.

A property on a source file that indicates if the source file
represents a class that is abstract.  This only makes sense for
languages that have a notion of an abstract class and it is only used
by some tools that wrap classes into other languages.



/P/🚀 prop_sf/AUTORCC_OPTIONS.rst
============================================


AUTORCC_OPTIONS
---------------

Additional options for ``rcc`` when using :prop_tgt:`AUTORCC`

This property holds additional command line options which will be used when
``rcc`` is executed during the build via :prop_tgt:`AUTORCC`, i.e. it is equivalent to the
optional ``OPTIONS`` argument of the :module:`qt4_add_resources() <FindQt4>` macro.

By default it is empty.

The options set on the ``.qrc`` source file may override
:prop_tgt:`AUTORCC_OPTIONS` set on the target.

EXAMPLE
^^^^^^^

.. code-block:: cmake

  # ...
  set_property(SOURCE resources.qrc PROPERTY AUTORCC_OPTIONS "--compress;9")
  # ...



/P/🚀 prop_sf/AUTOUIC_OPTIONS.rst
============================================


AUTOUIC_OPTIONS
---------------

Additional options for ``uic`` when using :prop_tgt:`AUTOUIC`

This property holds additional command line options
which will be used when ``uic`` is executed during the build via
:prop_tgt:`AUTOUIC`, i.e. it is equivalent to the optional ``OPTIONS``
argument of the :module:`qt4_wrap_ui() <FindQt4>` macro.

By default it is empty.

The options set on the ``.ui`` source file may override
:prop_tgt:`AUTOUIC_OPTIONS` set on the target.

EXAMPLE
^^^^^^^

.. code-block:: cmake

  # ...
  set_property(SOURCE widget.ui PROPERTY AUTOUIC_OPTIONS "--no-protection")
  # ...



/P/🚀 prop_sf/COMPILE_DEFINITIONS.rst
================================================


COMPILE_DEFINITIONS
-------------------

Preprocessor definitions for compiling a source file.

The ``COMPILE_DEFINITIONS`` property may be set to a semicolon-separated
list of preprocessor definitions using the syntax ``VAR`` or ``VAR=value``.
Function-style definitions are not supported.  CMake will
automatically escape the value correctly for the native build system
(note that CMake language syntax may require escapes to specify some
values).  This property may be set on a per-configuration basis using
the name ``COMPILE_DEFINITIONS_<CONFIG>`` where ``<CONFIG>`` is an upper-case
name (ex.  ``COMPILE_DEFINITIONS_DEBUG``).

CMake will automatically drop some definitions that are not supported
by the native build tool.  Xcode does not support per-configuration
definitions on source files.

.. versionadded:: 3.26
  Any leading ``-D`` on an item will be removed.

.. include:: /include/COMPILE_DEFINITIONS_DISCLAIMER.txt

Contents of ``COMPILE_DEFINITIONS`` may use :manual:`cmake-generator-expressions(7)`
with the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
manual for available expressions.  However, :generator:`Xcode`
does not support per-config per-source settings, so expressions
that depend on the build configuration are not allowed with that
generator.

Generator expressions should be preferred instead of setting the alternative per-configuration
property.



/P/🚀 prop_sf/COMPILE_FLAGS.rst
==========================================


COMPILE_FLAGS
-------------

Additional flags to be added when compiling this source file.

The ``COMPILE_FLAGS`` property, managed as a string, sets additional compiler
flags used that will be added to the list of compile flags when this source
file builds.  The flags will be added after target-wide flags (except in
some cases not supported by the :generator:`Visual Studio 9 2008` generator).

Use :prop_sf:`COMPILE_DEFINITIONS` to pass additional preprocessor definitions.

Contents of ``COMPILE_FLAGS`` may use "generator expressions"
with the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
manual for available expressions.  However, :generator:`Xcode`
does not support per-config per-source settings, so expressions
that depend on the build configuration are not allowed with that
generator.

.. note::

  This property has been superseded by the :prop_sf:`COMPILE_OPTIONS` property.



/P/🚀 prop_sf/COMPILE_OPTIONS.rst
============================================


COMPILE_OPTIONS
---------------

.. versionadded:: 3.11

List of additional options to pass to the compiler.

This property holds a :ref:`semicolon-separated list <CMake Language Lists>`
of options and will be added to the list of compile flags when this source
file builds.  The options will be added after target-wide options (except in
some cases not supported by the :generator:`Visual Studio 9 2008` generator).

Contents of ``COMPILE_OPTIONS`` may use "generator expressions" with the
syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` manual
for available expressions.  However, :generator:`Xcode`
does not support per-config per-source settings, so expressions
that depend on the build configuration are not allowed with that
generator.

Usage example:

.. code-block:: cmake

  set_source_files_properties(foo.cpp PROPERTIES COMPILE_OPTIONS "-Wno-unused-parameter;-Wno-missing-field-initializer")

Related properties:

* Prefer this property over :prop_sf:`COMPILE_FLAGS`.
* Use :prop_sf:`COMPILE_DEFINITIONS` to pass additional preprocessor definitions.
* Use :prop_sf:`INCLUDE_DIRECTORIES` to pass additional include directories.

Related commands:

* :command:`add_compile_options` for directory-wide settings
* :command:`target_compile_options` for target-specific settings



/P/🚀 prop_sf/CXX_SCAN_FOR_MODULES.rst
=================================================


CXX_SCAN_FOR_MODULES
--------------------

.. versionadded:: 3.28

``CXX_SCAN_FOR_MODULES`` is a boolean specifying whether CMake will scan the
source for C++ module dependencies.  See also the
:prop_tgt:`CXX_SCAN_FOR_MODULES` for target-wide settings.

When this property is set ``ON``, CMake will scan the source at build time and
add module dependency information to the compile line as necessary.  When this
property is set ``OFF``, CMake will not scan the source at build time.  When
this property is unset, the :prop_tgt:`CXX_SCAN_FOR_MODULES` property is
consulted.

Note that scanning is only performed if C++20 or higher is enabled for the
target and the source uses the ``CXX`` language.  Scanning for modules in
sources belonging to file sets of type ``CXX_MODULES`` is always performed.



/P/🚀 prop_sf/EXTERNAL_OBJECT.rst
============================================


EXTERNAL_OBJECT
---------------

If set to true then this is an object file.

If this property is set to ``True`` then the source file is really an
object file and should not be compiled.  It will still be linked into
the target though.



/P/🚀 prop_sf/Fortran_FORMAT.rst
===========================================


Fortran_FORMAT
--------------

Set to ``FIXED`` or ``FREE`` to indicate the Fortran source layout.

This property tells CMake whether a given Fortran source file uses
fixed-format or free-format.  CMake will pass the corresponding format flag
to the compiler.  Consider using the target-wide :prop_tgt:`Fortran_FORMAT`
property if all source files in a target share the same format.

.. note:: For some compilers, ``NAG``, ``PGI`` and ``Solaris Studio``,
          setting this to ``OFF`` will have no effect.



/P/🚀 prop_sf/Fortran_PREPROCESS.rst
===============================================


Fortran_PREPROCESS
------------------

.. versionadded:: 3.18

Control whether the Fortran source file should be unconditionally preprocessed.

If unset or empty, rely on the compiler to determine whether the file
should be preprocessed. If explicitly set to ``OFF`` then the file
does not need to be preprocessed. If explicitly set to ``ON``, then
the file does need to be preprocessed as part of the compilation step.

When using the :generator:`Ninja` generator, all source files are
first preprocessed in order to generate module dependency
information. Setting this property to ``OFF`` will make ``Ninja``
skip this step.

Consider using the target-wide :prop_tgt:`Fortran_PREPROCESS` property
if all source files in a target need to be preprocessed.



/P/🚀 prop_sf/GENERATED.rst
======================================


GENERATED
---------

Is this source file generated as part of the build or CMake process.

.. versionchanged:: 3.20
  The GENERATED source file property is now visible in all directories.

Tells the internal CMake engine that a source file is generated by an outside
process such as another build step, or the execution of CMake itself.
This information is then used to exempt the file from any existence or
validity checks.

Any file that is

- created by the execution of commands such as
  :command:`add_custom_command` which run during the build
- listed as one of the ``BYPRODUCTS`` of an :command:`add_custom_command`
  or :command:`add_custom_target` command, or
- created by a CMake ``AUTOGEN`` operation such as :prop_tgt:`AUTOMOC`,
  :prop_tgt:`AUTORCC`, or :prop_tgt:`AUTOUIC`

will be marked with the ``GENERATED`` property.

When a generated file created as the ``OUTPUT`` of an
:command:`add_custom_command` command is explicitly listed as a source file
for any target in the same directory scope (which usually means the same
``CMakeLists.txt`` file), CMake will automatically create a dependency to
make sure the file is generated before building that target.

The :ref:`Makefile Generators` will remove ``GENERATED`` files during
``make clean``.

Generated sources may be hidden in some IDE tools, while in others they might
be shown. For the special case of sources generated by CMake's :prop_tgt:`AUTOMOC`,
:prop_tgt:`AUTORCC` or :prop_tgt:`AUTOUIC` functionality, the
:prop_gbl:`AUTOGEN_SOURCE_GROUP`, :prop_gbl:`AUTOMOC_SOURCE_GROUP`,
:prop_gbl:`AUTORCC_SOURCE_GROUP` and :prop_gbl:`AUTOUIC_SOURCE_GROUP` target
properties may influence where the generated sources are grouped in the project's
file lists.

.. note::

  Starting with CMake 3.20 the ``GENERATED`` source file property can be set
  and retrieved from any directory scope. It is an all-or-nothing property.
  It also can no longer be removed or unset if it was set to ``TRUE``. Policy
  :policy:`CMP0118` was introduced to allow supporting the ``OLD`` behavior
  for some time.



/P/🚀 prop_sf/HEADER_FILE_ONLY.rst
=============================================


HEADER_FILE_ONLY
----------------

Is this source file only a header file.

A property on a source file that indicates if the source file is a
header file with no associated implementation.  This is set
automatically based on the file extension and is used by CMake to
determine if certain dependency information should be computed.

By setting this property to ``ON``, you can disable compilation of
the given source file, even if it should be compiled because it is
part of the library's/executable's sources.

This is useful if you have some source files which you somehow
pre-process, and then add these pre-processed sources via
:command:`add_library` or :command:`add_executable`. Normally, in IDE,
there would be no reference of the original sources, only of these
pre-processed sources. So by setting this property for all the original
source files to ``ON``, and then either calling :command:`add_library`
or :command:`add_executable` while passing both the pre-processed
sources and the original sources, or by using :command:`target_sources`
to add original source files will do exactly what would one expect, i.e.
the original source files would be visible in IDE, and will not be built.



/P/🚀 prop_sf/INCLUDE_DIRECTORIES.rst
================================================


INCLUDE_DIRECTORIES
-------------------

.. versionadded:: 3.11

List of preprocessor include file search directories.

This property holds a :ref:`semicolon-separated list <CMake Language Lists>` of paths
and will be added to the list of include directories when this
source file builds. These directories will take precedence over directories
defined at target level except for :generator:`Xcode` generator due to technical
limitations.

Relative paths should not be added to this property directly.

Contents of ``INCLUDE_DIRECTORIES`` may use "generator expressions" with
the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` manual
for available expressions.  However, :generator:`Xcode` does not support
per-config per-source settings, so expressions that depend on the build
configuration are not allowed with that generator.



/P/🚀 prop_sf/KEEP_EXTENSION.rst
===========================================


KEEP_EXTENSION
--------------

Make the output file have the same extension as the source file.

If this property is set then the file extension of the output file
will be the same as that of the source file.  Normally the output file
extension is computed based on the language of the source file, for
example ``.cxx`` will go to a ``.o`` extension.



/P/🚀 prop_sf/LABELS.rst
===================================


LABELS
------

Specify a list of text labels associated with a source file.

This property has meaning only when the source file is listed in a
target whose ``LABELS`` property is also set.  No other semantics are
currently specified.



/P/🚀 prop_sf/LANGUAGE.rst
=====================================


LANGUAGE
--------

Specify the programming language in which a source file is written.

A property that can be set to indicate what programming language the
source file is.  If it is not set the language is determined based on
the file extension.  Typical values are ``CXX`` (i.e.  C++), ``C``,
``CSharp``, ``CUDA``, ``Fortran``, ``HIP``, ``ISPC``, and ``ASM``.  Setting
this property for a file means this file will be compiled, unless
:prop_sf:`HEADER_FILE_ONLY` is set.

.. versionchanged:: 3.20
  Setting this property causes the source file to be compiled as the
  specified language, using explicit flags if possible.  Previously it
  only caused the specified language's compiler to be used.
  See policy :policy:`CMP0119`.



/P/🚀 prop_sf/LOCATION.rst
=====================================


LOCATION
--------

The full path to a source file.

A read only property on a SOURCE FILE that contains the full path to
the source file.



/P/🚀 prop_sf/MACOSX_PACKAGE_LOCATION.rst
====================================================


MACOSX_PACKAGE_LOCATION
-----------------------

Place a source file inside a Application Bundle
(:prop_tgt:`MACOSX_BUNDLE`), Core Foundation Bundle (:prop_tgt:`BUNDLE`),
or Framework Bundle (:prop_tgt:`FRAMEWORK`).  It is applicable for macOS
and iOS.

Executable targets with the :prop_tgt:`MACOSX_BUNDLE` property set are
built as macOS or iOS application bundles on Apple platforms.  Shared
library targets with the :prop_tgt:`FRAMEWORK` property set are built as
macOS or iOS frameworks on Apple platforms.  Module library targets with
the :prop_tgt:`BUNDLE` property set are built as macOS ``CFBundle`` bundles
on Apple platforms.  Source files listed in the target with this property
set will be copied to a directory inside the bundle or framework content
folder specified by the property value.  For macOS Application Bundles the
content folder is ``<name>.app/Contents``.  For macOS Frameworks the
content folder is ``<name>.framework/Versions/<version>``.  For macOS
CFBundles the content folder is ``<name>.bundle/Contents`` (unless the
extension is changed).  See the :prop_tgt:`PUBLIC_HEADER`,
:prop_tgt:`PRIVATE_HEADER`, and :prop_tgt:`RESOURCE` target properties for
specifying files meant for ``Headers``, ``PrivateHeaders``, or
``Resources`` directories.

If the specified location is equal to ``Resources``, the resulting location
will be the same as if the :prop_tgt:`RESOURCE` property had been used. If
the specified location is a sub-folder of ``Resources``, it will be placed
into the respective sub-folder. Note: For iOS Apple uses a flat bundle layout
where no ``Resources`` folder exist. Therefore CMake strips the ``Resources``
folder name from the specified location.



/P/🚀 prop_sf/OBJECT_DEPENDS.rst
===========================================


OBJECT_DEPENDS
--------------

Additional files on which a compiled object file depends.

Specifies a :ref:`semicolon-separated list <CMake Language Lists>` of full-paths to
files on which any object files compiled from this source file depend.
On :ref:`Makefile Generators` and the :generator:`Ninja` generator an
object file will be recompiled if any of the named files is newer than it.
:ref:`Visual Studio Generators` and the :generator:`Xcode` generator
cannot implement such compilation dependencies.

This property need not be used to specify the dependency of a source
file on a generated header file that it includes.  Although the
property was originally introduced for this purpose, it is no longer
necessary.  If the generated header file is created by a custom
command in the same target as the source file, the automatic
dependency scanning process will recognize the dependency.  If the
generated header file is created by another target, an inter-target
dependency should be created with the :command:`add_dependencies`
command (if one does not already exist due to linking relationships).



/P/🚀 prop_sf/OBJECT_OUTPUTS.rst
===========================================


OBJECT_OUTPUTS
--------------

Additional outputs for a :generator:`Ninja` or :ref:`Makefile Generators` rule.

Additional outputs created by compilation of this source file.  If any
of these outputs is missing the object will be recompiled.  This is
supported only on the :generator:`Ninja` and :ref:`Makefile Generators`
and will be ignored on other generators.

This property supports
:manual:`generator expressions <cmake-generator-expressions(7)>`.



/P/🚀 prop_sf/SKIP_AUTOGEN.rst
=========================================


SKIP_AUTOGEN
------------

.. versionadded:: 3.8

Exclude the source file from :prop_tgt:`AUTOMOC`, :prop_tgt:`AUTOUIC` and
:prop_tgt:`AUTORCC` processing (for Qt projects).

For finer exclusion control see :prop_sf:`SKIP_AUTOMOC`,
:prop_sf:`SKIP_AUTOUIC` and :prop_sf:`SKIP_AUTORCC`.

EXAMPLE
^^^^^^^

.. code-block:: cmake

  # ...
  set_property(SOURCE file.h PROPERTY SKIP_AUTOGEN ON)
  # ...



/P/🚀 prop_sf/SKIP_AUTOMOC.rst
=========================================


SKIP_AUTOMOC
------------

.. versionadded:: 3.8

Exclude the source file from :prop_tgt:`AUTOMOC` processing (for Qt projects).

For broader exclusion control see :prop_sf:`SKIP_AUTOGEN`.

EXAMPLE
^^^^^^^

.. code-block:: cmake

  # ...
  set_property(SOURCE file.h PROPERTY SKIP_AUTOMOC ON)
  # ...



/P/🚀 prop_sf/SKIP_AUTORCC.rst
=========================================


SKIP_AUTORCC
------------

.. versionadded:: 3.8

Exclude the source file from :prop_tgt:`AUTORCC` processing (for Qt projects).

For broader exclusion control see :prop_sf:`SKIP_AUTOGEN`.

EXAMPLE
^^^^^^^

.. code-block:: cmake

  # ...
  set_property(SOURCE file.qrc PROPERTY SKIP_AUTORCC ON)
  # ...



/P/🚀 prop_sf/SKIP_AUTOUIC.rst
=========================================


SKIP_AUTOUIC
------------

.. versionadded:: 3.8

Exclude the source file from :prop_tgt:`AUTOUIC` processing (for Qt projects).

``SKIP_AUTOUIC`` can be set on C++ header and source files and on
``.ui`` files.

For broader exclusion control see :prop_sf:`SKIP_AUTOGEN`.

EXAMPLE
^^^^^^^

.. code-block:: cmake

  # ...
  set_property(SOURCE file.h PROPERTY SKIP_AUTOUIC ON)
  set_property(SOURCE file.cpp PROPERTY SKIP_AUTOUIC ON)
  set_property(SOURCE widget.ui PROPERTY SKIP_AUTOUIC ON)
  # ...



/P/🚀 prop_sf/SKIP_LINTING.rst
=========================================


SKIP_LINTING
------------

.. versionadded:: 3.27

This property allows you to exclude a specific source file
from the linting process. The linting process involves running
tools such as :prop_tgt:`<LANG>_CPPLINT`, :prop_tgt:`<LANG>_CLANG_TIDY`,
:prop_tgt:`<LANG>_CPPCHECK`, and :prop_tgt:`<LANG>_INCLUDE_WHAT_YOU_USE`
on the source files, as well as compiling header files as part of
:prop_tgt:`VERIFY_INTERFACE_HEADER_SETS`. By setting ``SKIP_LINTING`` on a
source file, the mentioned linting tools will not be executed for that
particular file.

Example
^^^^^^^

Consider a C++ project that includes multiple source files,
such as ``main.cpp``, ``things.cpp``, and ``generatedBindings.cpp``.
In this example, you want to exclude the ``generatedBindings.cpp``
file from the linting process. To achieve this, you can utilize
the ``SKIP_LINTING`` property with the :command:`set_source_files_properties`
command as shown below:

.. code-block:: cmake

  add_executable(MyApp main.cpp things.cpp generatedBindings.cpp)

  set_source_files_properties(generatedBindings.cpp PROPERTIES
      SKIP_LINTING ON
  )

In the provided code snippet, the ``SKIP_LINTING`` property is set to true
for the ``generatedBindings.cpp`` source file. As a result, when the linting
tools specified by :prop_tgt:`<LANG>_CPPLINT`, :prop_tgt:`<LANG>_CLANG_TIDY`,
:prop_tgt:`<LANG>_CPPCHECK`, or :prop_tgt:`<LANG>_INCLUDE_WHAT_YOU_USE`
are executed, they will skip analyzing the ``generatedBindings.cpp`` file.

By using the ``SKIP_LINTING`` property, you can selectively exclude specific
source files from the linting process. This allows you to focus the
linting tools on the relevant parts of your project, enhancing the efficiency
and effectiveness of the linting workflow.



/P/🚀 prop_sf/SKIP_PRECOMPILE_HEADERS.rst
====================================================


SKIP_PRECOMPILE_HEADERS
-----------------------

.. versionadded:: 3.16

Is this source file skipped by :prop_tgt:`PRECOMPILE_HEADERS` feature.

This property helps with build problems that one would run into
when using the :prop_tgt:`PRECOMPILE_HEADERS` feature.

One example would be the usage of Objective-C (``*.m``) files, and
Objective-C++ (``*.mm``) files, which lead to compilation failure
because they are treated (in case of Ninja / Makefile generator)
as C, and CXX respectively. The precompile headers are not
compatible between languages.



/P/🚀 prop_sf/SKIP_UNITY_BUILD_INCLUSION.rst
=======================================================


SKIP_UNITY_BUILD_INCLUSION
--------------------------

.. versionadded:: 3.16

Setting this property to true ensures the source file will be skipped by
unity builds when its associated target has its :prop_tgt:`UNITY_BUILD`
property set to true.  The source file will instead be compiled on its own
in the same way as it would with unity builds disabled.

This property helps with "ODR (One definition rule)" problems where combining
a particular source file with others might lead to build errors or other
unintended side effects.

Note that sources which are scanned for C++ modules (see
:manual:`cmake-cxxmodules(7)`) are not eligible for unity build inclusion and
will automatically be excluded.



/P/🚀 prop_sf/Swift_DEPENDENCIES_FILE.rst
====================================================


Swift_DEPENDENCIES_FILE
-----------------------

.. versionadded:: 3.15

This property sets the path for the Swift dependency file (swiftdeps) for the
source.  If one is not specified, it will default to ``<OBJECT>.swiftdeps``.



/P/🚀 prop_sf/Swift_DIAGNOSTICS_FILE.rst
===================================================


Swift_DIAGNOSTICS_FILE
----------------------

.. versionadded:: 3.15

This property controls where the Swift diagnostics are serialized.



/P/🚀 prop_sf/SYMBOLIC.rst
=====================================


SYMBOLIC
--------

Is this just a name for a rule.

If ``SYMBOLIC`` (boolean) is set to ``True`` the build system will be informed
that the source file is not actually created on disk but instead used
as a symbolic name for a build rule.



/P/🚀 prop_sf/UNITY_GROUP.rst
========================================


UNITY_GROUP
-----------

.. versionadded:: 3.18

This property controls which *bucket* the source will be part of when
the :prop_tgt:`UNITY_BUILD_MODE` is set to ``GROUP``.



/P/🚀 prop_sf/VS_COPY_TO_OUT_DIR.rst
===============================================


VS_COPY_TO_OUT_DIR
------------------

.. versionadded:: 3.8

Sets the ``<CopyToOutputDirectory>`` tag for a source file in a
Visual Studio project file. Valid values are ``Never``, ``Always``
and ``PreserveNewest``.



/P/🚀 prop_sf/VS_CSHARP_tagname.rst
==============================================


VS_CSHARP_<tagname>
-------------------

.. versionadded:: 3.8

Visual Studio and CSharp source-file-specific configuration.

Tell the :manual:`Visual Studio generators <cmake-generators(7)>`
to set the source file tag ``<tagname>``
to a given value in the generated Visual Studio CSharp
project. Ignored on other generators and languages. This property
can be used to define dependencies between source files or set any
other Visual Studio specific parameters.

Example usage:

.. code-block:: cmake

  set_source_files_properties(<filename>
           PROPERTIES
           VS_CSHARP_DependentUpon <other file>
           VS_CSHARP_SubType "Form")



/P/🚀 prop_sf/VS_DEPLOYMENT_CONTENT.rst
==================================================


VS_DEPLOYMENT_CONTENT
---------------------

.. versionadded:: 3.1

Mark a source file as content for deployment with a Windows Phone or
Windows Store application when built with a
:manual:`Visual Studio generators <cmake-generators(7)>`.
The value must evaluate to either ``1`` or ``0`` and may use
:manual:`generator expressions <cmake-generator-expressions(7)>`
to make the choice based on the build configuration.
The ``.vcxproj`` file entry for the source file will be
marked either ``DeploymentContent`` or ``ExcludedFromBuild``
for values ``1`` and ``0``, respectively.



/P/🚀 prop_sf/VS_DEPLOYMENT_LOCATION.rst
===================================================


VS_DEPLOYMENT_LOCATION
----------------------

.. versionadded:: 3.1

Specifies the deployment location for a content source file with a Windows
Phone or Windows Store application when built
with a :manual:`Visual Studio generators <cmake-generators(7)>`.
This property is only applicable when using :prop_sf:`VS_DEPLOYMENT_CONTENT`.
The value represent the path relative to the app package and applies to all
configurations.



/P/🚀 prop_sf/VS_INCLUDE_IN_VSIX.rst
===============================================


VS_INCLUDE_IN_VSIX
------------------

.. versionadded:: 3.8

Boolean property to specify if the file should be included within a
VSIX (Visual Studio Integration Extension) extension package.
This is needed for development of Visual Studio extensions.



/P/🚀 prop_sf/VS_RESOURCE_GENERATOR.rst
==================================================


VS_RESOURCE_GENERATOR
---------------------

.. versionadded:: 3.8

This property allows to specify the resource generator to be used
on this file. It defaults to ``PublicResXFileCodeGenerator`` if
not set.

This property only applies to C# projects.



/P/🚀 prop_sf/VS_SETTINGS.rst
========================================


VS_SETTINGS
-----------

.. versionadded:: 3.18

Set any item metadata on a file.

.. versionadded:: 3.22

  This property is honored for all source file types.
  Previously it worked only for non-built files.

Takes a list of ``Key=Value`` pairs. Tells the Visual Studio generator to set
``Key`` to ``Value`` as item metadata on the file.

For example:

.. code-block:: cmake

  set_property(SOURCE file.hlsl PROPERTY VS_SETTINGS "Key=Value" "Key2=Value2")

will set ``Key`` to ``Value`` and ``Key2`` to ``Value2`` on the
``file.hlsl`` item as metadata.

:manual:`Generator expressions <cmake-generator-expressions(7)>` are supported.



/P/🚀 prop_sf/VS_SHADER_DISABLE_OPTIMIZATIONS.rst
============================================================


VS_SHADER_DISABLE_OPTIMIZATIONS
-------------------------------

.. versionadded:: 3.11

Disable compiler optimizations for an ``.hlsl`` source file.  This adds the
``-Od`` flag to the command line for the FxCompiler tool.  Specify the value
``true`` for this property to disable compiler optimizations.



/P/🚀 prop_sf/VS_SHADER_ENABLE_DEBUG.rst
===================================================


VS_SHADER_ENABLE_DEBUG
----------------------

.. versionadded:: 3.11

Enable debugging information for an ``.hlsl`` source file.  This adds the
``-Zi`` flag to the command line for the FxCompiler tool.  Specify the value
``true`` to generate debugging information for the compiled shader.



/P/🚀 prop_sf/VS_SHADER_ENTRYPOINT.rst
=================================================


VS_SHADER_ENTRYPOINT
--------------------

.. versionadded:: 3.1

Specifies the name of the entry point for the shader of a ``.hlsl`` source
file.



/P/🚀 prop_sf/VS_SHADER_FLAGS.rst
============================================


VS_SHADER_FLAGS
---------------

.. versionadded:: 3.2

Set additional Visual Studio shader flags of a ``.hlsl`` source file.



/P/🚀 prop_sf/VS_SHADER_MODEL.rst
============================================


VS_SHADER_MODEL
---------------

.. versionadded:: 3.1

Specifies the shader model of a ``.hlsl`` source file. Some shader types can
only be used with recent shader models



/P/🚀 prop_sf/VS_SHADER_OBJECT_FILE_NAME.rst
=======================================================


VS_SHADER_OBJECT_FILE_NAME
--------------------------

.. versionadded:: 3.12

Specifies a file name for the compiled shader object file for an ``.hlsl``
source file.  This adds the ``-Fo`` flag to the command line for the FxCompiler
tool.



/P/🚀 prop_sf/VS_SHADER_OUTPUT_HEADER_FILE.rst
=========================================================


VS_SHADER_OUTPUT_HEADER_FILE
----------------------------

.. versionadded:: 3.10

Set filename for output header file containing object code of a ``.hlsl``
source file.



/P/🚀 prop_sf/VS_SHADER_TYPE.rst
===========================================


VS_SHADER_TYPE
--------------

.. versionadded:: 3.1

Set the Visual Studio shader type of a ``.hlsl`` source file.



/P/🚀 prop_sf/VS_SHADER_VARIABLE_NAME.rst
====================================================


VS_SHADER_VARIABLE_NAME
-----------------------

.. versionadded:: 3.10

Set name of variable in header file containing object code of a ``.hlsl``
source file.



/P/🚀 /prop_sf/VS_TOOL_OVERRIDE.rst
=========================================


VS_TOOL_OVERRIDE
----------------

.. versionadded:: 3.7

Override the default Visual Studio tool that will be applied to the source file
with a new tool not based on the extension of the file.





/P/🚀 prop_sf/VS_XAML_TYPE.rst
=========================================


VS_XAML_TYPE
------------

.. versionadded:: 3.3

Mark a Extensible Application Markup Language (XAML) source file
as a different type than the default ``Page``.
The most common usage would be to set the default ``App.xaml`` file as
``ApplicationDefinition``.



/P/🚀 prop_sf/WRAP_EXCLUDE.rst
=========================================


WRAP_EXCLUDE
------------

Exclude this source file from any code wrapping techniques.

Some packages can wrap source files into alternate languages to
provide additional functionality.

For example, C++ code can be wrapped into Java or Python, using SWIG.
If ``WRAP_EXCLUDE`` is set to ``True``, that indicates that this
source file should not be wrapped.



/P/🚀 prop_sf/XCODE_EXPLICIT_FILE_TYPE.rst
=====================================================


XCODE_EXPLICIT_FILE_TYPE
------------------------

.. versionadded:: 3.1

Set the :generator:`Xcode` ``explicitFileType`` attribute on its reference to a
source file.  CMake computes a default based on file extension but
can be told explicitly with this property.

See also :prop_sf:`XCODE_LAST_KNOWN_FILE_TYPE`.



/P/🚀 prop_sf/XCODE_FILE_ATTRIBUTES.rst
==================================================


XCODE_FILE_ATTRIBUTES
---------------------

.. versionadded:: 3.7

Add values to the :generator:`Xcode` ``ATTRIBUTES`` setting on its reference to a
source file.  Among other things, this can be used to set the role on
a ``.mig`` file::

  set_source_files_properties(defs.mig
      PROPERTIES
          XCODE_FILE_ATTRIBUTES "Client;Server"
  )



/P/🚀 prop_sf/XCODE_LAST_KNOWN_FILE_TYPE.rst
=======================================================


XCODE_LAST_KNOWN_FILE_TYPE
--------------------------

.. versionadded:: 3.1

Set the :generator:`Xcode` ``lastKnownFileType`` attribute on its reference to
a source file.  CMake computes a default based on file extension but
can be told explicitly with this property.

See also :prop_sf:`XCODE_EXPLICIT_FILE_TYPE`, which is preferred
over this property if set.



/P/🚀 prop_cache/ADVANCED.rst
========================================


ADVANCED
--------

True if entry should be hidden by default in GUIs.

This is a boolean value indicating whether the entry is considered
interesting only for advanced configuration.  The :command:`mark_as_advanced`
command modifies this property.



/P/🚀 prop_cache/HELPSTRING.rst
==========================================


HELPSTRING
----------

Help associated with entry in GUIs.

This string summarizes the purpose of an entry to help users set it
through a CMake GUI.



/P/🚀 prop_cache/MODIFIED.rst
========================================


MODIFIED
--------

Internal management property.  Do not set or get.

This is an internal cache entry property managed by CMake to track
interactive user modification of entries.  Ignore it.



/P/🚀 prop_cache/STRINGS.rst
=======================================


STRINGS
-------

Enumerate possible ``STRING`` entry values for GUI selection.

For cache entries with type ``STRING``, this enumerates a set of values.
CMake GUIs may use this to provide a selection widget instead of a
generic string entry field.  This is for convenience only.  CMake does
not enforce that the value matches one of those listed.



/P/🚀 prop_cache/TYPE.rst
====================================


TYPE
----

Widget type for entry in GUIs.

Cache entry values are always strings, but CMake GUIs present widgets
to help users set values.  The GUIs use this property as a hint to
determine the widget type.  Valid ``TYPE`` values are:

::

  BOOL          = Boolean ON/OFF value.
  PATH          = Path to a directory.
  FILEPATH      = Path to a file.
  STRING        = Generic string value.
  INTERNAL      = Do not present in GUI at all.
  STATIC        = Value managed by CMake, do not change.
  UNINITIALIZED = Type not yet specified.

Generally the ``TYPE`` of a cache entry should be set by the command which
creates it ( :command:`set`, :command:`option`, :command:`find_library`, etc.).



/P/🚀 prop_cache/VALUE.rst
=====================================


VALUE
-----

Value of a cache entry.

This property maps to the actual value of a cache entry.  Setting this
property always sets the value without checking, so use with care.




/P/🚀 prop_inst/CPACK_DESKTOP_SHORTCUTS.rst
==================================================


CPACK_DESKTOP_SHORTCUTS
-----------------------

.. versionadded:: 3.3

Species a list of shortcut names that should be created on the `Desktop`
for this file.

The property is currently only supported by the :cpack_gen:`CPack WIX Generator`.



/P/🚀 prop_inst/CPACK_NEVER_OVERWRITE.rst
================================================


CPACK_NEVER_OVERWRITE
---------------------

.. versionadded:: 3.1

Request that this file not be overwritten on install or reinstall.

The property is currently only supported by the :cpack_gen:`CPack WIX Generator`.



/P/🚀 prop_inst/CPACK_PERMANENT.rst
==========================================


CPACK_PERMANENT
---------------

.. versionadded:: 3.1

Request that this file not be removed on uninstall.

The property is currently only supported by the :cpack_gen:`CPack WIX Generator`.



/P/🚀 prop_inst/CPACK_START_MENU_SHORTCUTS.rst
=====================================================


CPACK_START_MENU_SHORTCUTS
--------------------------

.. versionadded:: 3.3

Species a list of shortcut names that should be created in the ``Start Menu``
for this file.

The property is currently only supported by the :cpack_gen:`CPack WIX Generator`.



/P/🚀 prop_inst/CPACK_STARTUP_SHORTCUTS.rst
==================================================


CPACK_STARTUP_SHORTCUTS
-----------------------

.. versionadded:: 3.3

Species a list of shortcut names that should be created in the `Startup` folder
for this file.

The property is currently only supported by the :cpack_gen:`CPack WIX Generator`.



/P/🚀 prop_inst/CPACK_WIX_ACL.rst
========================================


CPACK_WIX_ACL
-------------

.. versionadded:: 3.1

Specifies access permissions for files or directories
installed by a WiX installer.

The property can contain multiple list entries,
each of which has to match the following format.

::

  <user>[@<domain>]=<permission>[,<permission>]

``<user>`` and ``<domain>`` specify the windows user and domain for which the
``<Permission>`` element should be generated.

``<permission>`` is any of the YesNoType attributes listed here::

 https://wixtoolset.org/documentation/manual/v3/xsd/wix/permission.html

The property is currently only supported by the :cpack_gen:`CPack WIX Generator`.



/P/🚀 prop_dir/ADDITIONAL_MAKE_CLEAN_FILES.rst
=========================================================


ADDITIONAL_MAKE_CLEAN_FILES
---------------------------

.. deprecated:: 3.15

  Use :prop_dir:`ADDITIONAL_CLEAN_FILES` instead.

Additional files to remove during the clean stage.

A :ref:`;-list <CMake Language Lists>` of files that will be removed as a
part of the ``make clean`` target.

Arguments to ``ADDITIONAL_MAKE_CLEAN_FILES`` may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.

This property only works for the Makefile generators.
It is ignored on other generators.



/P/🚀 prop_dir/COMPILE_DEFINITIONS_CONFIG.rst
========================================================


COMPILE_DEFINITIONS_<CONFIG>
----------------------------

Ignored.  See CMake Policy :policy:`CMP0043`.

Per-configuration preprocessor definitions in a directory.

This is the configuration-specific version of :prop_dir:`COMPILE_DEFINITIONS`
where ``<CONFIG>`` is an upper-case name (ex. ``COMPILE_DEFINITIONS_DEBUG``).

This property will be initialized in each directory by its value in
the directory's parent.

Contents of ``COMPILE_DEFINITIONS_<CONFIG>`` may use "generator expressions"
with the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
manual for available expressions.  See the :manual:`cmake-buildsystem(7)`
manual for more on defining buildsystem properties.

Generator expressions should be preferred instead of setting this property.



/P/🚀 prop_dir/INTERPROCEDURAL_OPTIMIZATION.rst
==========================================================


INTERPROCEDURAL_OPTIMIZATION
----------------------------

This directory property does not exist anymore.

See the target property :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` instead.



/P/🚀 prop_dir/INTERPROCEDURAL_OPTIMIZATION_CONFIG.rst
=================================================================


INTERPROCEDURAL_OPTIMIZATION_<CONFIG>
-------------------------------------

This directory property does not exist anymore.

See the target property :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION_<CONFIG>` instead.



/P/🚀 prop_dir/TEST_INCLUDE_FILE.rst
===============================================


TEST_INCLUDE_FILE
-----------------

Deprecated.  Use :prop_dir:`TEST_INCLUDE_FILES` instead.

A cmake file that will be included when ctest is run.

If you specify ``TEST_INCLUDE_FILE``, that file will be included and
processed when ctest is run on the directory.



/P/🚀 prop_tgt/COMPILE_DEFINITIONS_CONFIG.rst
========================================================


COMPILE_DEFINITIONS_<CONFIG>
----------------------------

Ignored.  See CMake Policy :policy:`CMP0043`.

Per-configuration preprocessor definitions on a target.

This is the configuration-specific version of :prop_tgt:`COMPILE_DEFINITIONS`
where ``<CONFIG>`` is an upper-case name (ex. ``COMPILE_DEFINITIONS_DEBUG``).

Contents of ``COMPILE_DEFINITIONS_<CONFIG>`` may use "generator expressions"
with the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
manual for available expressions.  See the :manual:`cmake-buildsystem(7)`
manual for more on defining buildsystem properties.

Generator expressions should be preferred instead of setting this property.



/P/🚀 prop_tgt/IMPORTED_NO_SYSTEM.rst
================================================


IMPORTED_NO_SYSTEM
------------------

.. versionadded:: 3.23

.. deprecated:: 3.25

  ``IMPORTED_NO_SYSTEM`` is deprecated. Please use the following alternatives
  instead:

  * Set :prop_tgt:`SYSTEM` to false if you don't want a target's include
    directories to be treated as system directories when compiling consumers.
  * Set :prop_tgt:`EXPORT_NO_SYSTEM` to true if you don't want the include
    directories of the imported target generated by :command:`install(EXPORT)`
    and :command:`export` commands to be treated as system directories when
    compiling consumers.

Setting ``IMPORTED_NO_SYSTEM`` to true on an
:ref:`imported target <Imported Targets>` specifies that it is not a
system target.  This has the following effects:

* Entries of :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` are not treated
  as system include directories when compiling consumers (regardless of
  the value of the consumed target's :prop_tgt:`SYSTEM` property), as they
  would be by default.   Entries of
  :prop_tgt:`INTERFACE_SYSTEM_INCLUDE_DIRECTORIES` are not affected,
  and will always be treated as system include directories.
* On Apple platforms, when the target is a framework, it will not be treated as
  system.

This property can also be enabled on a non-imported target.  Doing so does
not affect the build system, but does tell the :command:`install(EXPORT)` and
:command:`export` commands to enable it on the imported targets they generate.

See the :prop_tgt:`NO_SYSTEM_FROM_IMPORTED` target property to set this
behavior on the target *consuming* the include directories rather than
the one *providing* them.



/P/🚀 prop_tgt/IOS_INSTALL_COMBINED.rst
==================================================


IOS_INSTALL_COMBINED
--------------------

.. versionadded:: 3.5
.. deprecated:: 3.28

  :prop_tgt:`IOS_INSTALL_COMBINED` was designed to make universal binaries
  containing iOS/arm* device code paired with iOS Simulator/x86_64 code
  (or similar for other Apple embedded platforms). Universal binaries can only
  differentiate code based on CPU type, so this only made sense before the
  days of arm64 macOS machines (i.e. iOS Simulator/arm64). Apple now
  recommends xcframeworks, which contain multiple binaries for different
  platforms, for this use case.

Build a combined (device and simulator) target when installing.

When this property is set to false, which is the default, then it will
either be built with the device SDK or the simulator SDK depending on the SDK
set. But if this property is set to true then the target will at install time
also be built for the other SDK and combined into one library.

.. note::

  If a selected architecture is available for both device SDK and simulator
  SDK it will be built for the SDK selected by :variable:`CMAKE_OSX_SYSROOT`
  and removed from the other SDK.

This feature requires at least Xcode version 6.



/P/🚀 prop_tgt/POST_INSTALL_SCRIPT.rst
=================================================


POST_INSTALL_SCRIPT
-------------------

Deprecated install support.

The :prop_tgt:`PRE_INSTALL_SCRIPT` and ``POST_INSTALL_SCRIPT`` properties are
the old way to specify CMake scripts to run before and after installing a
target.  They are used only when the old ``INSTALL_TARGETS`` command is
used to install the target.  Use the :command:`install` command instead.



/P/🚀 prop_tgt/PRE_INSTALL_SCRIPT.rst
================================================


PRE_INSTALL_SCRIPT
------------------

Deprecated install support.

The ``PRE_INSTALL_SCRIPT`` and :prop_tgt:`POST_INSTALL_SCRIPT` properties are
the old way to specify CMake scripts to run before and after installing a
target.  They are used only when the old ``INSTALL_TARGETS`` command is
used to install the target.  Use the :command:`install` command instead.



/P/🚀 prop_tgt/VS_WINRT_EXTENSIONS.rst
=================================================


VS_WINRT_EXTENSIONS
-------------------

Deprecated.  Use :prop_tgt:`VS_WINRT_COMPONENT` instead.
This property was an experimental partial implementation of that one.



/P/🚀 prop_sf/COMPILE_DEFINITIONS_CONFIG.rst
=======================================================


COMPILE_DEFINITIONS_<CONFIG>
----------------------------

Ignored.  See CMake Policy :policy:`CMP0043`.

Per-configuration preprocessor definitions on a source file.

This is the configuration-specific version of :prop_tgt:`COMPILE_DEFINITIONS`.
Note that :generator:`Xcode` does not support per-configuration source
file flags so this property will be ignored by the :generator:`Xcode` generator.



/P/🚀 manual/cmake-variables.7.rst
================================================


.. cmake-manual-description: CMake Variables Reference

cmake-variables(7)
******************

This page documents variables that are provided by CMake
or have meaning to CMake when set by project code.

For general information on variables, see the
:ref:`Variables <CMake Language Variables>`
section in the cmake-language manual.

.. include:: ID_RESERVE.txt

Variables that Provide Information
==================================

.. toctree::
   :maxdepth: 1

    Help/variable/CMAKE_AR
    Help/variable/CMAKE_ARGC
    Help/variable/CMAKE_ARGV0
    Help/variable/CMAKE_BINARY_DIR
    Help/variable/CMAKE_BUILD_TOOL
    Help/variable/CMAKE_CACHE_MAJOR_VERSION
    Help/variable/CMAKE_CACHE_MINOR_VERSION
    Help/variable/CMAKE_CACHE_PATCH_VERSION
    Help/variable/CMAKE_CACHEFILE_DIR
    Help/variable/CMAKE_CFG_INTDIR
    Help/variable/CMAKE_COMMAND
    Help/variable/CMAKE_CPACK_COMMAND
    Help/variable/CMAKE_CROSSCOMPILING
    Help/variable/CMAKE_CROSSCOMPILING_EMULATOR
    Help/variable/CMAKE_CTEST_COMMAND
    Help/variable/CMAKE_CURRENT_BINARY_DIR
    Help/variable/CMAKE_CURRENT_FUNCTION
    Help/variable/CMAKE_CURRENT_FUNCTION_LIST_DIR
    Help/variable/CMAKE_CURRENT_FUNCTION_LIST_FILE
    Help/variable/CMAKE_CURRENT_FUNCTION_LIST_LINE
    Help/variable/CMAKE_CURRENT_LIST_DIR
    Help/variable/CMAKE_CURRENT_LIST_FILE
    Help/variable/CMAKE_CURRENT_LIST_LINE
    Help/variable/CMAKE_CURRENT_SOURCE_DIR
    Help/variable/CMAKE_DEBUG_TARGET_PROPERTIES
    Help/variable/CMAKE_DIRECTORY_LABELS
    Help/variable/CMAKE_DL_LIBS
    Help/variable/CMAKE_DOTNET_SDK
    Help/variable/CMAKE_DOTNET_TARGET_FRAMEWORK
    Help/variable/CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION
    Help/variable/CMAKE_EDIT_COMMAND
    Help/variable/CMAKE_EXECUTABLE_SUFFIX
    Help/variable/CMAKE_EXECUTABLE_SUFFIX_LANG
    Help/variable/CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES
    Help/variable/CMAKE_FIND_DEBUG_MODE
    Help/variable/CMAKE_FIND_PACKAGE_NAME
    Help/variable/CMAKE_FIND_PACKAGE_REDIRECTS_DIR
    Help/variable/CMAKE_FIND_PACKAGE_SORT_DIRECTION
    Help/variable/CMAKE_FIND_PACKAGE_SORT_ORDER
    Help/variable/CMAKE_GENERATOR
    Help/variable/CMAKE_GENERATOR_INSTANCE
    Help/variable/CMAKE_GENERATOR_PLATFORM
    Help/variable/CMAKE_GENERATOR_TOOLSET
    Help/variable/CMAKE_IMPORT_LIBRARY_PREFIX
    Help/variable/CMAKE_IMPORT_LIBRARY_SUFFIX
    Help/variable/CMAKE_JOB_POOL_COMPILE
    Help/variable/CMAKE_JOB_POOL_LINK
    Help/variable/CMAKE_JOB_POOL_PRECOMPILE_HEADER
    Help/variable/CMAKE_JOB_POOLS
    Help/variable/CMAKE_LANG_COMPILER_AR
    Help/variable/CMAKE_LANG_COMPILER_FRONTEND_VARIANT
    Help/variable/CMAKE_LANG_COMPILER_LINKER
    Help/variable/CMAKE_LANG_COMPILER_LINKER_FRONTEND_VARIANT
    Help/variable/CMAKE_LANG_COMPILER_LINKER_ID
    Help/variable/CMAKE_LANG_COMPILER_LINKER_VERSION
    Help/variable/CMAKE_LANG_COMPILER_RANLIB
    Help/variable/CMAKE_LANG_LINK_LIBRARY_SUFFIX
    Help/variable/CMAKE_LINK_LIBRARY_SUFFIX
    Help/variable/CMAKE_LINK_SEARCH_END_STATIC
    Help/variable/CMAKE_LINK_SEARCH_START_STATIC
    Help/variable/CMAKE_MAJOR_VERSION
    Help/variable/CMAKE_MAKE_PROGRAM
    Help/variable/CMAKE_MATCH_COUNT
    Help/variable/CMAKE_MATCH_n
    Help/variable/CMAKE_MINIMUM_REQUIRED_VERSION
    Help/variable/CMAKE_MINOR_VERSION
    Help/variable/CMAKE_NETRC
    Help/variable/CMAKE_NETRC_FILE
    Help/variable/CMAKE_PARENT_LIST_FILE
    Help/variable/CMAKE_PATCH_VERSION
    Help/variable/CMAKE_PROJECT_DESCRIPTION
    Help/variable/CMAKE_PROJECT_HOMEPAGE_URL
    Help/variable/CMAKE_PROJECT_NAME
    Help/variable/CMAKE_PROJECT_VERSION
    Help/variable/CMAKE_PROJECT_VERSION_MAJOR
    Help/variable/CMAKE_PROJECT_VERSION_MINOR
    Help/variable/CMAKE_PROJECT_VERSION_PATCH
    Help/variable/CMAKE_PROJECT_VERSION_TWEAK
    Help/variable/CMAKE_RANLIB
    Help/variable/CMAKE_ROOT
    Help/variable/CMAKE_RULE_MESSAGES
    Help/variable/CMAKE_SCRIPT_MODE_FILE
    Help/variable/CMAKE_SHARED_LIBRARY_PREFIX
    Help/variable/CMAKE_SHARED_LIBRARY_SUFFIX
    Help/variable/CMAKE_SHARED_MODULE_PREFIX
    Help/variable/CMAKE_SHARED_MODULE_SUFFIX
    Help/variable/CMAKE_SIZEOF_VOID_P
    Help/variable/CMAKE_SKIP_INSTALL_RULES
    Help/variable/CMAKE_SKIP_RPATH
    Help/variable/CMAKE_SOURCE_DIR
    Help/variable/CMAKE_STATIC_LIBRARY_PREFIX
    Help/variable/CMAKE_STATIC_LIBRARY_SUFFIX
    Help/variable/CMAKE_Swift_COMPILATION_MODE
    Help/variable/CMAKE_Swift_MODULE_DIRECTORY
    Help/variable/CMAKE_Swift_NUM_THREADS
    Help/variable/CMAKE_TEST_LAUNCHER
    Help/variable/CMAKE_TOOLCHAIN_FILE
    Help/variable/CMAKE_TWEAK_VERSION
    Help/variable/CMAKE_VERBOSE_MAKEFILE
    Help/variable/CMAKE_VERSION
    Help/variable/CMAKE_VS_DEVENV_COMMAND
    Help/variable/CMAKE_VS_MSBUILD_COMMAND
    Help/variable/CMAKE_VS_NsightTegra_VERSION
    Help/variable/CMAKE_VS_NUGET_PACKAGE_RESTORE
    Help/variable/CMAKE_VS_PLATFORM_NAME
    Help/variable/CMAKE_VS_PLATFORM_NAME_DEFAULT
    Help/variable/CMAKE_VS_PLATFORM_TOOLSET
    Help/variable/CMAKE_VS_PLATFORM_TOOLSET_CUDA
    Help/variable/CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR
    Help/variable/CMAKE_VS_PLATFORM_TOOLSET_FORTRAN
    Help/variable/CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE
    Help/variable/CMAKE_VS_PLATFORM_TOOLSET_VERSION
    Help/variable/CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER
    Help/variable/CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION
    Help/variable/CMAKE_VS_TARGET_FRAMEWORK_VERSION
    Help/variable/CMAKE_VS_VERSION_BUILD_NUMBER
    Help/variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION
    Help/variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION
    Help/variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM
    Help/variable/CMAKE_XCODE_BUILD_SYSTEM
    Help/variable/CMAKE_XCODE_PLATFORM_TOOLSET
    Help/variable/PROJECT-NAME_BINARY_DIR
    Help/variable/PROJECT-NAME_DESCRIPTION
    Help/variable/PROJECT-NAME_HOMEPAGE_URL
    Help/variable/PROJECT-NAME_IS_TOP_LEVEL
    Help/variable/PROJECT-NAME_SOURCE_DIR
    Help/variable/PROJECT-NAME_VERSION
    Help/variable/PROJECT-NAME_VERSION_MAJOR
    Help/variable/PROJECT-NAME_VERSION_MINOR
    Help/variable/PROJECT-NAME_VERSION_PATCH
    Help/variable/PROJECT-NAME_VERSION_TWEAK
    Help/variable/PROJECT_BINARY_DIR
    Help/variable/PROJECT_DESCRIPTION
    Help/variable/PROJECT_HOMEPAGE_URL
    Help/variable/PROJECT_IS_TOP_LEVEL
    Help/variable/PROJECT_NAME
    Help/variable/PROJECT_SOURCE_DIR
    Help/variable/PROJECT_VERSION
    Help/variable/PROJECT_VERSION_MAJOR
    Help/variable/PROJECT_VERSION_MINOR
    Help/variable/PROJECT_VERSION_PATCH
    Help/variable/PROJECT_VERSION_TWEAK

Variables that Change Behavior
==============================

.. toctree::
   :maxdepth: 1

    Help/variable/BUILD_SHARED_LIBS
    Help/variable/CMAKE_ABSOLUTE_DESTINATION_FILES
    Help/variable/CMAKE_ADD_CUSTOM_COMMAND_DEPENDS_EXPLICIT_ONLY
    Help/variable/CMAKE_APPBUNDLE_PATH
    Help/variable/CMAKE_BUILD_TYPE
    Help/variable/CMAKE_CLANG_VFS_OVERLAY
    Help/variable/CMAKE_CODEBLOCKS_COMPILER_ID
    Help/variable/CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES
    Help/variable/CMAKE_CODELITE_USE_TARGETS
    Help/variable/CMAKE_COLOR_DIAGNOSTICS
    Help/variable/CMAKE_COLOR_MAKEFILE
    Help/variable/CMAKE_CONFIGURATION_TYPES
    Help/variable/CMAKE_DEPENDS_IN_PROJECT_ONLY
    Help/variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName
    Help/variable/CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES
    Help/variable/CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT
    Help/variable/CMAKE_ECLIPSE_MAKE_ARGUMENTS
    Help/variable/CMAKE_ECLIPSE_RESOURCE_ENCODING
    Help/variable/CMAKE_ECLIPSE_VERSION
    Help/variable/CMAKE_ERROR_DEPRECATED
    Help/variable/CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION
    Help/variable/CMAKE_EXECUTE_PROCESS_COMMAND_ECHO
    Help/variable/CMAKE_EXPORT_COMPILE_COMMANDS
    Help/variable/CMAKE_EXPORT_PACKAGE_REGISTRY
    Help/variable/CMAKE_EXPORT_NO_PACKAGE_REGISTRY
    Help/variable/CMAKE_FIND_APPBUNDLE
    Help/variable/CMAKE_FIND_FRAMEWORK
    Help/variable/CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX
    Help/variable/CMAKE_FIND_LIBRARY_PREFIXES
    Help/variable/CMAKE_FIND_LIBRARY_SUFFIXES
    Help/variable/CMAKE_FIND_NO_INSTALL_PREFIX
    Help/variable/CMAKE_FIND_PACKAGE_PREFER_CONFIG
    Help/variable/CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS
    Help/variable/CMAKE_FIND_PACKAGE_TARGETS_GLOBAL
    Help/variable/CMAKE_FIND_PACKAGE_WARN_NO_MODULE
    Help/variable/CMAKE_FIND_ROOT_PATH
    Help/variable/CMAKE_FIND_ROOT_PATH_MODE_INCLUDE
    Help/variable/CMAKE_FIND_ROOT_PATH_MODE_LIBRARY
    Help/variable/CMAKE_FIND_ROOT_PATH_MODE_PACKAGE
    Help/variable/CMAKE_FIND_ROOT_PATH_MODE_PROGRAM
    Help/variable/CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH
    Help/variable/CMAKE_FIND_USE_CMAKE_PATH
    Help/variable/CMAKE_FIND_USE_CMAKE_SYSTEM_PATH
    Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX
    Help/variable/CMAKE_FIND_USE_PACKAGE_REGISTRY
    Help/variable/CMAKE_FIND_USE_PACKAGE_ROOT_PATH
    Help/variable/CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH
    Help/variable/CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY
    Help/variable/CMAKE_FRAMEWORK_PATH
    Help/variable/CMAKE_IGNORE_PATH
    Help/variable/CMAKE_IGNORE_PREFIX_PATH
    Help/variable/CMAKE_INCLUDE_DIRECTORIES_BEFORE
    Help/variable/CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE
    Help/variable/CMAKE_INCLUDE_PATH
    Help/variable/CMAKE_INSTALL_DEFAULT_COMPONENT_NAME
    Help/variable/CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS
    Help/variable/CMAKE_INSTALL_MESSAGE
    Help/variable/CMAKE_INSTALL_PREFIX
    Help/variable/CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT
    Help/variable/CMAKE_KATE_FILES_MODE
    Help/variable/CMAKE_KATE_MAKE_ARGUMENTS
    Help/variable/CMAKE_LIBRARY_PATH
    Help/variable/CMAKE_LINK_DIRECTORIES_BEFORE
    Help/variable/CMAKE_LINK_LIBRARIES_ONLY_TARGETS
    Help/variable/CMAKE_MAXIMUM_RECURSION_DEPTH
    Help/variable/CMAKE_MESSAGE_CONTEXT
    Help/variable/CMAKE_MESSAGE_CONTEXT_SHOW
    Help/variable/CMAKE_MESSAGE_INDENT
    Help/variable/CMAKE_MESSAGE_LOG_LEVEL
    Help/variable/CMAKE_MFC_FLAG
    Help/variable/CMAKE_MODULE_PATH
    Help/variable/CMAKE_POLICY_DEFAULT_CMPNNNN
    Help/variable/CMAKE_POLICY_WARNING_CMPNNNN
    Help/variable/CMAKE_PREFIX_PATH
    Help/variable/CMAKE_PROGRAM_PATH
    Help/variable/CMAKE_PROJECT_INCLUDE
    Help/variable/CMAKE_PROJECT_INCLUDE_BEFORE
    Help/variable/CMAKE_PROJECT_PROJECT-NAME_INCLUDE
    Help/variable/CMAKE_PROJECT_PROJECT-NAME_INCLUDE_BEFORE
    Help/variable/CMAKE_PROJECT_TOP_LEVEL_INCLUDES
    Help/variable/CMAKE_REQUIRE_FIND_PACKAGE_PackageName
    Help/variable/CMAKE_SKIP_INSTALL_ALL_DEPENDENCY
    Help/variable/CMAKE_SKIP_TEST_ALL_DEPENDENCY
    Help/variable/CMAKE_STAGING_PREFIX
    Help/variable/CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS
    Help/variable/CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE
    Help/variable/CMAKE_SUPPRESS_REGENERATION
    Help/variable/CMAKE_SYSROOT
    Help/variable/CMAKE_SYSROOT_COMPILE
    Help/variable/CMAKE_SYSROOT_LINK
    Help/variable/CMAKE_SYSTEM_APPBUNDLE_PATH
    Help/variable/CMAKE_SYSTEM_FRAMEWORK_PATH
    Help/variable/CMAKE_SYSTEM_IGNORE_PATH
    Help/variable/CMAKE_SYSTEM_IGNORE_PREFIX_PATH
    Help/variable/CMAKE_SYSTEM_INCLUDE_PATH
    Help/variable/CMAKE_SYSTEM_LIBRARY_PATH
    Help/variable/CMAKE_SYSTEM_PREFIX_PATH
    Help/variable/CMAKE_SYSTEM_PROGRAM_PATH
    Help/variable/CMAKE_TLS_CAINFO
    Help/variable/CMAKE_TLS_VERIFY
    Help/variable/CMAKE_USER_MAKE_RULES_OVERRIDE
    Help/variable/CMAKE_WARN_DEPRECATED
    Help/variable/CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION
    Help/variable/CMAKE_XCODE_GENERATE_SCHEME
    Help/variable/CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY
    Help/variable/CMAKE_XCODE_LINK_BUILD_PHASE_MODE
    Help/variable/CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER
    Help/variable/CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN
    Help/variable/CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING
    Help/variable/CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER
    Help/variable/CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS
    Help/variable/CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE
    Help/variable/CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION
    Help/variable/CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE
    Help/variable/CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION
    Help/variable/CMAKE_XCODE_SCHEME_ENVIRONMENT
    Help/variable/CMAKE_XCODE_SCHEME_GUARD_MALLOC
    Help/variable/CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION
    Help/variable/CMAKE_XCODE_SCHEME_LAUNCH_MODE
    Help/variable/CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP
    Help/variable/CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES
    Help/variable/CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE
    Help/variable/CMAKE_XCODE_SCHEME_MALLOC_STACK
    Help/variable/CMAKE_XCODE_SCHEME_THREAD_SANITIZER
    Help/variable/CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP
    Help/variable/CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER
    Help/variable/CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP
    Help/variable/CMAKE_XCODE_SCHEME_WORKING_DIRECTORY
    Help/variable/CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS
    Help/variable/CMAKE_XCODE_XCCONFIG
    Help/variable/PackageName_ROOT

Variables that Describe the System
==================================

.. toctree::
   :maxdepth: 1

    Help/variable/ANDROID
    Help/variable/APPLE
    Help/variable/BORLAND
    Help/variable/BSD
    Help/variable/CMAKE_ANDROID_NDK_VERSION
    Help/variable/CMAKE_CL_64
    Help/variable/CMAKE_COMPILER_2005
    Help/variable/CMAKE_HOST_APPLE
    Help/variable/CMAKE_HOST_BSD
    Help/variable/CMAKE_HOST_LINUX
    Help/variable/CMAKE_HOST_SOLARIS
    Help/variable/CMAKE_HOST_SYSTEM
    Help/variable/CMAKE_HOST_SYSTEM_NAME
    Help/variable/CMAKE_HOST_SYSTEM_PROCESSOR
    Help/variable/CMAKE_HOST_SYSTEM_VERSION
    Help/variable/CMAKE_HOST_UNIX
    Help/variable/CMAKE_HOST_WIN32
    Help/variable/CMAKE_LIBRARY_ARCHITECTURE
    Help/variable/CMAKE_LIBRARY_ARCHITECTURE_REGEX
    Help/variable/CMAKE_OBJECT_PATH_MAX
    Help/variable/CMAKE_SYSTEM
    Help/variable/CMAKE_SYSTEM_NAME
    Help/variable/CMAKE_SYSTEM_PROCESSOR
    Help/variable/CMAKE_SYSTEM_VERSION
    Help/variable/CYGWIN
    Help/variable/GHSMULTI
    Help/variable/IOS
    Help/variable/LINUX
    Help/variable/MINGW
    Help/variable/MSVC
    Help/variable/MSVC_IDE
    Help/variable/MSVC_TOOLSET_VERSION
    Help/variable/MSVC_VERSION
    Help/variable/MSYS
    Help/variable/UNIX
    Help/variable/WIN32
    Help/variable/WINCE
    Help/variable/WINDOWS_PHONE
    Help/variable/WINDOWS_STORE
    Help/variable/XCODE
    Help/variable/XCODE_VERSION

Variables that Control the Build
================================

.. toctree::
   :maxdepth: 1

    Help/variable/CMAKE_ADSP_ROOT
    Help/variable/CMAKE_AIX_EXPORT_ALL_SYMBOLS
    Help/variable/CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS
    Help/variable/CMAKE_ANDROID_API
    Help/variable/CMAKE_ANDROID_API_MIN
    Help/variable/CMAKE_ANDROID_ARCH
    Help/variable/CMAKE_ANDROID_ARCH_ABI
    Help/variable/CMAKE_ANDROID_ARM_MODE
    Help/variable/CMAKE_ANDROID_ARM_NEON
    Help/variable/CMAKE_ANDROID_ASSETS_DIRECTORIES
    Help/variable/CMAKE_ANDROID_EXCEPTIONS
    Help/variable/CMAKE_ANDROID_GUI
    Help/variable/CMAKE_ANDROID_JAR_DEPENDENCIES
    Help/variable/CMAKE_ANDROID_JAR_DIRECTORIES
    Help/variable/CMAKE_ANDROID_JAVA_SOURCE_DIR
    Help/variable/CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES
    Help/variable/CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES
    Help/variable/CMAKE_ANDROID_NDK
    Help/variable/CMAKE_ANDROID_NDK_DEPRECATED_HEADERS
    Help/variable/CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG
    Help/variable/CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION
    Help/variable/CMAKE_ANDROID_PROCESS_MAX
    Help/variable/CMAKE_ANDROID_PROGUARD
    Help/variable/CMAKE_ANDROID_PROGUARD_CONFIG_PATH
    Help/variable/CMAKE_ANDROID_RTTI
    Help/variable/CMAKE_ANDROID_SECURE_PROPS_PATH
    Help/variable/CMAKE_ANDROID_SKIP_ANT_STEP
    Help/variable/CMAKE_ANDROID_STANDALONE_TOOLCHAIN
    Help/variable/CMAKE_ANDROID_STL_TYPE
    Help/variable/CMAKE_APPLE_SILICON_PROCESSOR
    Help/variable/CMAKE_ARCHIVE_OUTPUT_DIRECTORY
    Help/variable/CMAKE_ARCHIVE_OUTPUT_DIRECTORY_CONFIG
    Help/variable/CMAKE_AUTOGEN_BETTER_GRAPH_MULTI_CONFIG
    Help/variable/CMAKE_AUTOGEN_COMMAND_LINE_LENGTH_MAX
    Help/variable/CMAKE_AUTOGEN_ORIGIN_DEPENDS
    Help/variable/CMAKE_AUTOGEN_PARALLEL
    Help/variable/CMAKE_AUTOGEN_USE_SYSTEM_INCLUDE
    Help/variable/CMAKE_AUTOGEN_VERBOSE
    Help/variable/CMAKE_AUTOMOC
    Help/variable/CMAKE_AUTOMOC_COMPILER_PREDEFINES
    Help/variable/CMAKE_AUTOMOC_DEPEND_FILTERS
    Help/variable/CMAKE_AUTOMOC_MACRO_NAMES
    Help/variable/CMAKE_AUTOMOC_MOC_OPTIONS
    Help/variable/CMAKE_AUTOMOC_PATH_PREFIX
    Help/variable/CMAKE_AUTOMOC_EXECUTABLE
    Help/variable/CMAKE_AUTORCC
    Help/variable/CMAKE_AUTORCC_OPTIONS
    Help/variable/CMAKE_AUTORCC_EXECUTABLE
    Help/variable/CMAKE_AUTOUIC
    Help/variable/CMAKE_AUTOUIC_OPTIONS
    Help/variable/CMAKE_AUTOUIC_SEARCH_PATHS
    Help/variable/CMAKE_AUTOUIC_EXECUTABLE
    Help/variable/CMAKE_BUILD_RPATH
    Help/variable/CMAKE_BUILD_RPATH_USE_ORIGIN
    Help/variable/CMAKE_BUILD_WITH_INSTALL_NAME_DIR
    Help/variable/CMAKE_BUILD_WITH_INSTALL_RPATH
    Help/variable/CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY
    Help/variable/CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG
    Help/variable/CMAKE_COMPILE_WARNING_AS_ERROR
    Help/variable/CMAKE_CONFIG_POSTFIX
    Help/variable/CMAKE_CROSS_CONFIGS
    Help/variable/CMAKE_CTEST_ARGUMENTS
    Help/variable/CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS
    Help/variable/CMAKE_CUDA_RUNTIME_LIBRARY
    Help/variable/CMAKE_CUDA_SEPARABLE_COMPILATION
    Help/variable/CMAKE_CXX_SCAN_FOR_MODULES
    Help/variable/CMAKE_DEBUG_POSTFIX
    Help/variable/CMAKE_DEFAULT_BUILD_TYPE
    Help/variable/CMAKE_DEFAULT_CONFIGS
    Help/variable/CMAKE_DEPENDS_USE_COMPILER
    Help/variable/CMAKE_DISABLE_PRECOMPILE_HEADERS
    Help/variable/CMAKE_DLL_NAME_WITH_SOVERSION
    Help/variable/CMAKE_ENABLE_EXPORTS
    Help/variable/CMAKE_EXECUTABLE_ENABLE_EXPORTS
    Help/variable/CMAKE_EXE_LINKER_FLAGS
    Help/variable/CMAKE_EXE_LINKER_FLAGS_CONFIG
    Help/variable/CMAKE_EXE_LINKER_FLAGS_CONFIG_INIT
    Help/variable/CMAKE_EXE_LINKER_FLAGS_INIT
    Help/variable/CMAKE_EXPORT_FIND_PACKAGE_NAME
    Help/variable/CMAKE_FOLDER
    Help/variable/CMAKE_Fortran_FORMAT
    Help/variable/CMAKE_Fortran_MODULE_DIRECTORY
    Help/variable/CMAKE_Fortran_PREPROCESS
    Help/variable/CMAKE_FRAMEWORK
    Help/variable/CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG
    Help/variable/CMAKE_GHS_NO_SOURCE_GROUP_FILE
    Help/variable/CMAKE_GLOBAL_AUTOGEN_TARGET
    Help/variable/CMAKE_GLOBAL_AUTOGEN_TARGET_NAME
    Help/variable/CMAKE_GLOBAL_AUTORCC_TARGET
    Help/variable/CMAKE_GLOBAL_AUTORCC_TARGET_NAME
    Help/variable/CMAKE_GNUtoMS
    Help/variable/CMAKE_INCLUDE_CURRENT_DIR
    Help/variable/CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE
    Help/variable/CMAKE_INSTALL_NAME_DIR
    Help/variable/CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH
    Help/variable/CMAKE_INSTALL_RPATH
    Help/variable/CMAKE_INSTALL_RPATH_USE_LINK_PATH
    Help/variable/CMAKE_INTERPROCEDURAL_OPTIMIZATION
    Help/variable/CMAKE_INTERPROCEDURAL_OPTIMIZATION_CONFIG
    Help/variable/CMAKE_LANG_CLANG_TIDY
    Help/variable/CMAKE_LANG_CLANG_TIDY_EXPORT_FIXES_DIR
    Help/variable/CMAKE_LANG_COMPILER_LAUNCHER
    Help/variable/CMAKE_LANG_CPPCHECK
    Help/variable/CMAKE_LANG_CPPLINT
    Help/variable/CMAKE_LANG_INCLUDE_WHAT_YOU_USE
    Help/variable/CMAKE_LANG_LINK_GROUP_USING_FEATURE
    Help/variable/CMAKE_LANG_LINK_GROUP_USING_FEATURE_SUPPORTED
    Help/variable/CMAKE_LANG_LINK_LIBRARY_FILE_FLAG
    Help/variable/CMAKE_LANG_LINK_LIBRARY_FLAG
    Help/variable/CMAKE_LANG_LINK_LIBRARY_USING_FEATURE
    Help/variable/CMAKE_LANG_LINK_LIBRARY_USING_FEATURE_SUPPORTED
    Help/variable/CMAKE_LANG_LINK_WHAT_YOU_USE_FLAG
    Help/variable/CMAKE_LANG_LINKER_LAUNCHER
    Help/variable/CMAKE_LANG_USING_LINKER_MODE
    Help/variable/CMAKE_LANG_USING_LINKER_TYPE
    Help/variable/CMAKE_LANG_VISIBILITY_PRESET
    Help/variable/CMAKE_LIBRARY_OUTPUT_DIRECTORY
    Help/variable/CMAKE_LIBRARY_OUTPUT_DIRECTORY_CONFIG
    Help/variable/CMAKE_LIBRARY_PATH_FLAG
    Help/variable/CMAKE_LINK_DEF_FILE_FLAG
    Help/variable/CMAKE_LINK_DEPENDS_NO_SHARED
    Help/variable/CMAKE_LINK_DEPENDS_USE_LINKER
    Help/variable/CMAKE_LINK_GROUP_USING_FEATURE
    Help/variable/CMAKE_LINK_GROUP_USING_FEATURE_SUPPORTED
    Help/variable/CMAKE_LINK_INTERFACE_LIBRARIES
    Help/variable/CMAKE_LINK_LIBRARY_FILE_FLAG
    Help/variable/CMAKE_LINK_LIBRARY_FLAG
    Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE
    Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE_SUPPORTED
    Help/variable/CMAKE_LINK_WHAT_YOU_USE
    Help/variable/CMAKE_LINK_WHAT_YOU_USE_CHECK
    Help/variable/CMAKE_LINKER_TYPE
    Help/variable/CMAKE_MACOSX_BUNDLE
    Help/variable/CMAKE_MACOSX_RPATH
    Help/variable/CMAKE_MAP_IMPORTED_CONFIG_CONFIG
    Help/variable/CMAKE_MODULE_LINKER_FLAGS
    Help/variable/CMAKE_MODULE_LINKER_FLAGS_CONFIG
    Help/variable/CMAKE_MODULE_LINKER_FLAGS_CONFIG_INIT
    Help/variable/CMAKE_MODULE_LINKER_FLAGS_INIT
    Help/variable/CMAKE_MSVC_DEBUG_INFORMATION_FORMAT
    Help/variable/CMAKE_MSVC_RUNTIME_LIBRARY
    Help/variable/CMAKE_MSVCIDE_RUN_PATH
    Help/variable/CMAKE_NINJA_OUTPUT_PATH_PREFIX
    Help/variable/CMAKE_NO_BUILTIN_CHRPATH
    Help/variable/CMAKE_NO_SYSTEM_FROM_IMPORTED
    Help/variable/CMAKE_OPTIMIZE_DEPENDENCIES
    Help/variable/CMAKE_OSX_ARCHITECTURES
    Help/variable/CMAKE_OSX_DEPLOYMENT_TARGET
    Help/variable/CMAKE_OSX_SYSROOT
    Help/variable/CMAKE_PCH_INSTANTIATE_TEMPLATES
    Help/variable/CMAKE_PCH_WARN_INVALID
    Help/variable/CMAKE_PDB_OUTPUT_DIRECTORY
    Help/variable/CMAKE_PDB_OUTPUT_DIRECTORY_CONFIG
    Help/variable/CMAKE_PLATFORM_NO_VERSIONED_SONAME
    Help/variable/CMAKE_POSITION_INDEPENDENT_CODE
    Help/variable/CMAKE_RUNTIME_OUTPUT_DIRECTORY
    Help/variable/CMAKE_RUNTIME_OUTPUT_DIRECTORY_CONFIG
    Help/variable/CMAKE_SHARED_LIBRARY_ENABLE_EXPORTS
    Help/variable/CMAKE_SHARED_LINKER_FLAGS
    Help/variable/CMAKE_SHARED_LINKER_FLAGS_CONFIG
    Help/variable/CMAKE_SHARED_LINKER_FLAGS_CONFIG_INIT
    Help/variable/CMAKE_SHARED_LINKER_FLAGS_INIT
    Help/variable/CMAKE_SKIP_BUILD_RPATH
    Help/variable/CMAKE_SKIP_INSTALL_RPATH
    Help/variable/CMAKE_STATIC_LINKER_FLAGS
    Help/variable/CMAKE_STATIC_LINKER_FLAGS_CONFIG
    Help/variable/CMAKE_STATIC_LINKER_FLAGS_CONFIG_INIT
    Help/variable/CMAKE_STATIC_LINKER_FLAGS_INIT
    Help/variable/CMAKE_TASKING_TOOLSET
    Help/variable/CMAKE_TRY_COMPILE_CONFIGURATION
    Help/variable/CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES
    Help/variable/CMAKE_TRY_COMPILE_PLATFORM_VARIABLES
    Help/variable/CMAKE_TRY_COMPILE_TARGET_TYPE
    Help/variable/CMAKE_UNITY_BUILD
    Help/variable/CMAKE_UNITY_BUILD_BATCH_SIZE
    Help/variable/CMAKE_UNITY_BUILD_UNIQUE_ID
    Help/variable/CMAKE_VERIFY_INTERFACE_HEADER_SETS
    Help/variable/CMAKE_VISIBILITY_INLINES_HIDDEN
    Help/variable/CMAKE_VS_DEBUGGER_COMMAND
    Help/variable/CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS
    Help/variable/CMAKE_VS_DEBUGGER_ENVIRONMENT
    Help/variable/CMAKE_VS_DEBUGGER_WORKING_DIRECTORY
    Help/variable/CMAKE_VS_GLOBALS
    Help/variable/CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD
    Help/variable/CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD
    Help/variable/CMAKE_VS_JUST_MY_CODE_DEBUGGING
    Help/variable/CMAKE_VS_NO_COMPILE_BATCHING
    Help/variable/CMAKE_VS_SDK_EXCLUDE_DIRECTORIES
    Help/variable/CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES
    Help/variable/CMAKE_VS_SDK_INCLUDE_DIRECTORIES
    Help/variable/CMAKE_VS_SDK_LIBRARY_DIRECTORIES
    Help/variable/CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES
    Help/variable/CMAKE_VS_SDK_REFERENCE_DIRECTORIES
    Help/variable/CMAKE_VS_SDK_SOURCE_DIRECTORIES
    Help/variable/CMAKE_VS_WINRT_BY_DEFAULT
    Help/variable/CMAKE_WATCOM_RUNTIME_LIBRARY
    Help/variable/CMAKE_WIN32_EXECUTABLE
    Help/variable/CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS
    Help/variable/CMAKE_XCODE_ATTRIBUTE_an-attribute
    Help/variable/EXECUTABLE_OUTPUT_PATH
    Help/variable/LIBRARY_OUTPUT_PATH

Variables for Languages
=======================

.. toctree::
   :maxdepth: 1

    Help/variable/CMAKE_C_COMPILE_FEATURES
    Help/variable/CMAKE_C_EXTENSIONS
    Help/variable/CMAKE_C_STANDARD
    Help/variable/CMAKE_C_STANDARD_REQUIRED
    Help/variable/CMAKE_CUDA_ARCHITECTURES
    Help/variable/CMAKE_CUDA_COMPILE_FEATURES
    Help/variable/CMAKE_CUDA_EXTENSIONS
    Help/variable/CMAKE_CUDA_HOST_COMPILER
    Help/variable/CMAKE_CUDA_STANDARD
    Help/variable/CMAKE_CUDA_STANDARD_REQUIRED
    Help/variable/CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES
    Help/variable/CMAKE_CXX_COMPILE_FEATURES
    Help/variable/CMAKE_CXX_EXTENSIONS
    Help/variable/CMAKE_CXX_STANDARD
    Help/variable/CMAKE_CXX_STANDARD_REQUIRED
    Help/variable/CMAKE_Fortran_MODDIR_DEFAULT
    Help/variable/CMAKE_Fortran_MODDIR_FLAG
    Help/variable/CMAKE_Fortran_MODOUT_FLAG
    Help/variable/CMAKE_HIP_ARCHITECTURES
    Help/variable/CMAKE_HIP_EXTENSIONS
    Help/variable/CMAKE_HIP_PLATFORM
    Help/variable/CMAKE_HIP_STANDARD
    Help/variable/CMAKE_HIP_STANDARD_REQUIRED
    Help/variable/CMAKE_ISPC_HEADER_DIRECTORY
    Help/variable/CMAKE_ISPC_HEADER_SUFFIX
    Help/variable/CMAKE_ISPC_INSTRUCTION_SETS
    Help/variable/CMAKE_LANG_ANDROID_TOOLCHAIN_MACHINE
    Help/variable/CMAKE_LANG_ANDROID_TOOLCHAIN_PREFIX
    Help/variable/CMAKE_LANG_ANDROID_TOOLCHAIN_SUFFIX
    Help/variable/CMAKE_LANG_ARCHIVE_APPEND
    Help/variable/CMAKE_LANG_ARCHIVE_CREATE
    Help/variable/CMAKE_LANG_ARCHIVE_FINISH
    Help/variable/CMAKE_LANG_BYTE_ORDER
    Help/variable/CMAKE_LANG_COMPILE_OBJECT
    Help/variable/CMAKE_LANG_COMPILER
    Help/variable/CMAKE_LANG_COMPILER_EXTERNAL_TOOLCHAIN
    Help/variable/CMAKE_LANG_COMPILER_ID
    Help/variable/CMAKE_LANG_COMPILER_LOADED
    Help/variable/CMAKE_LANG_COMPILER_PREDEFINES_COMMAND
    Help/variable/CMAKE_LANG_COMPILER_TARGET
    Help/variable/CMAKE_LANG_COMPILER_VERSION
    Help/variable/CMAKE_LANG_CREATE_SHARED_LIBRARY
    Help/variable/CMAKE_LANG_CREATE_SHARED_MODULE
    Help/variable/CMAKE_LANG_CREATE_STATIC_LIBRARY
    Help/variable/CMAKE_LANG_EXTENSIONS
    Help/variable/CMAKE_LANG_EXTENSIONS_DEFAULT
    Help/variable/CMAKE_LANG_FLAGS
    Help/variable/CMAKE_LANG_FLAGS_CONFIG
    Help/variable/CMAKE_LANG_FLAGS_CONFIG_INIT
    Help/variable/CMAKE_LANG_FLAGS_DEBUG
    Help/variable/CMAKE_LANG_FLAGS_DEBUG_INIT
    Help/variable/CMAKE_LANG_FLAGS_INIT
    Help/variable/CMAKE_LANG_FLAGS_MINSIZEREL
    Help/variable/CMAKE_LANG_FLAGS_MINSIZEREL_INIT
    Help/variable/CMAKE_LANG_FLAGS_RELEASE
    Help/variable/CMAKE_LANG_FLAGS_RELEASE_INIT
    Help/variable/CMAKE_LANG_FLAGS_RELWITHDEBINFO
    Help/variable/CMAKE_LANG_FLAGS_RELWITHDEBINFO_INIT
    Help/variable/CMAKE_LANG_HOST_COMPILER
    Help/variable/CMAKE_LANG_IGNORE_EXTENSIONS
    Help/variable/CMAKE_LANG_IMPLICIT_INCLUDE_DIRECTORIES
    Help/variable/CMAKE_LANG_IMPLICIT_LINK_DIRECTORIES
    Help/variable/CMAKE_LANG_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES
    Help/variable/CMAKE_LANG_IMPLICIT_LINK_LIBRARIES
    Help/variable/CMAKE_LANG_LIBRARY_ARCHITECTURE
    Help/variable/CMAKE_LANG_LINK_EXECUTABLE
    Help/variable/CMAKE_LANG_LINKER_WRAPPER_FLAG
    Help/variable/CMAKE_LANG_LINKER_WRAPPER_FLAG_SEP
    Help/variable/CMAKE_LANG_OUTPUT_EXTENSION
    Help/variable/CMAKE_LANG_SIMULATE_ID
    Help/variable/CMAKE_LANG_SIMULATE_VERSION
    Help/variable/CMAKE_LANG_SIZEOF_DATA_PTR
    Help/variable/CMAKE_LANG_SOURCE_FILE_EXTENSIONS
    Help/variable/CMAKE_LANG_STANDARD
    Help/variable/CMAKE_LANG_STANDARD_DEFAULT
    Help/variable/CMAKE_LANG_STANDARD_INCLUDE_DIRECTORIES
    Help/variable/CMAKE_LANG_STANDARD_LIBRARIES
    Help/variable/CMAKE_LANG_STANDARD_REQUIRED
    Help/variable/CMAKE_OBJC_EXTENSIONS
    Help/variable/CMAKE_OBJC_STANDARD
    Help/variable/CMAKE_OBJC_STANDARD_REQUIRED
    Help/variable/CMAKE_OBJCXX_EXTENSIONS
    Help/variable/CMAKE_OBJCXX_STANDARD
    Help/variable/CMAKE_OBJCXX_STANDARD_REQUIRED
    Help/variable/CMAKE_Swift_LANGUAGE_VERSION
    Help/variable/CMAKE_USER_MAKE_RULES_OVERRIDE_LANG

Variables for CTest
===================

.. toctree::
   :maxdepth: 1

    Help/variable/CTEST_BINARY_DIRECTORY
    Help/variable/CTEST_BUILD_COMMAND
    Help/variable/CTEST_BUILD_NAME
    Help/variable/CTEST_BZR_COMMAND
    Help/variable/CTEST_BZR_UPDATE_OPTIONS
    Help/variable/CTEST_CHANGE_ID
    Help/variable/CTEST_CHECKOUT_COMMAND
    Help/variable/CTEST_CONFIGURATION_TYPE
    Help/variable/CTEST_CONFIGURE_COMMAND
    Help/variable/CTEST_COVERAGE_COMMAND
    Help/variable/CTEST_COVERAGE_EXTRA_FLAGS
    Help/variable/CTEST_CURL_OPTIONS
    Help/variable/CTEST_CUSTOM_COVERAGE_EXCLUDE
    Help/variable/CTEST_CUSTOM_ERROR_EXCEPTION
    Help/variable/CTEST_CUSTOM_ERROR_MATCH
    Help/variable/CTEST_CUSTOM_ERROR_POST_CONTEXT
    Help/variable/CTEST_CUSTOM_ERROR_PRE_CONTEXT
    Help/variable/CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE
    Help/variable/CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS
    Help/variable/CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS
    Help/variable/CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE
    Help/variable/CTEST_CUSTOM_MEMCHECK_IGNORE
    Help/variable/CTEST_CUSTOM_POST_MEMCHECK
    Help/variable/CTEST_CUSTOM_POST_TEST
    Help/variable/CTEST_CUSTOM_PRE_MEMCHECK
    Help/variable/CTEST_CUSTOM_PRE_TEST
    Help/variable/CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION
    Help/variable/CTEST_CUSTOM_TESTS_IGNORE
    Help/variable/CTEST_CUSTOM_WARNING_EXCEPTION
    Help/variable/CTEST_CUSTOM_WARNING_MATCH
    Help/variable/CTEST_CVS_COMMAND
    Help/variable/CTEST_CVS_UPDATE_OPTIONS
    Help/variable/CTEST_DROP_LOCATION
    Help/variable/CTEST_DROP_METHOD
    Help/variable/CTEST_DROP_SITE
    Help/variable/CTEST_DROP_SITE_CDASH
    Help/variable/CTEST_DROP_SITE_PASSWORD
    Help/variable/CTEST_DROP_SITE_USER
    Help/variable/CTEST_EXTRA_COVERAGE_GLOB
    Help/variable/CTEST_GIT_COMMAND
    Help/variable/CTEST_GIT_INIT_SUBMODULES
    Help/variable/CTEST_GIT_UPDATE_CUSTOM
    Help/variable/CTEST_GIT_UPDATE_OPTIONS
    Help/variable/CTEST_HG_COMMAND
    Help/variable/CTEST_HG_UPDATE_OPTIONS
    Help/variable/CTEST_LABELS_FOR_SUBPROJECTS
    Help/variable/CTEST_MEMORYCHECK_COMMAND
    Help/variable/CTEST_MEMORYCHECK_COMMAND_OPTIONS
    Help/variable/CTEST_MEMORYCHECK_SANITIZER_OPTIONS
    Help/variable/CTEST_MEMORYCHECK_SUPPRESSIONS_FILE
    Help/variable/CTEST_MEMORYCHECK_TYPE
    Help/variable/CTEST_NIGHTLY_START_TIME
    Help/variable/CTEST_P4_CLIENT
    Help/variable/CTEST_P4_COMMAND
    Help/variable/CTEST_P4_OPTIONS
    Help/variable/CTEST_P4_UPDATE_OPTIONS
    Help/variable/CTEST_RESOURCE_SPEC_FILE
    Help/variable/CTEST_RUN_CURRENT_SCRIPT
    Help/variable/CTEST_SCRIPT_DIRECTORY
    Help/variable/CTEST_SITE
    Help/variable/CTEST_SOURCE_DIRECTORY
    Help/variable/CTEST_SUBMIT_INACTIVITY_TIMEOUT
    Help/variable/CTEST_SUBMIT_URL
    Help/variable/CTEST_SVN_COMMAND
    Help/variable/CTEST_SVN_OPTIONS
    Help/variable/CTEST_SVN_UPDATE_OPTIONS
    Help/variable/CTEST_TEST_LOAD
    Help/variable/CTEST_TEST_TIMEOUT
    Help/variable/CTEST_UPDATE_COMMAND
    Help/variable/CTEST_UPDATE_OPTIONS
    Help/variable/CTEST_UPDATE_VERSION_ONLY
    Help/variable/CTEST_UPDATE_VERSION_OVERRIDE
    Help/variable/CTEST_USE_LAUNCHERS

Variables for CPack
===================

.. toctree::
   :maxdepth: 1

    Help/variable/CPACK_ABSOLUTE_DESTINATION_FILES
    Help/variable/CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY
    Help/variable/CPACK_CUSTOM_INSTALL_VARIABLES
    Help/variable/CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION
    Help/variable/CPACK_INCLUDE_TOPLEVEL_DIRECTORY
    Help/variable/CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS
    Help/variable/CPACK_PACKAGING_INSTALL_PREFIX
    Help/variable/CPACK_SET_DESTDIR
    Help/variable/CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION

Variable Expansion Operators
============================

.. toctree::
   :maxdepth: 1

    Help/variable/CACHE
    Help/variable/ENV

Internal Variables
==================

CMake has many internal variables.  Most of them are undocumented.
Some of them, however, were at some point described as normal
variables, and therefore may be encountered in legacy code. They
are subject to change, and not recommended for use in project code.

.. toctree::
   :maxdepth: 1

    Help/variable/CMAKE_HOME_DIRECTORY
    Help/variable/CMAKE_INTERNAL_PLATFORM_ABI
    Help/variable/CMAKE_LANG_COMPILER_ABI
    Help/variable/CMAKE_LANG_COMPILER_ARCHITECTURE_ID
    Help/variable/CMAKE_LANG_COMPILER_VERSION_INTERNAL
    Help/variable/CMAKE_LANG_LINKER_PREFERENCE
    Help/variable/CMAKE_LANG_LINKER_PREFERENCE_PROPAGATES
    Help/variable/CMAKE_LANG_PLATFORM_ID
    Help/variable/CMAKE_NOT_USING_CONFIG_FLAGS
    Help/variable/CMAKE_VS_INTEL_Fortran_PROJECT_VERSION

Deprecated Variables that Provide Information
=============================================

.. toctree::
   :maxdepth: 1

    Help/variable/CMAKE_EXTRA_GENERATOR

Deprecated Variables that Change Behavior
=========================================

.. toctree::
   :maxdepth: 1

    Help/variable/CMAKE_AUTOMOC_RELAXED_MODE
    Help/variable/CMAKE_BACKWARDS_COMPATIBILITY
    Help/variable/CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY
    Help/variable/CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY

Deprecated Variables that Describe the System
=============================================

.. toctree::
   :maxdepth: 1

    Help/variable/MSVC10
    Help/variable/MSVC11
    Help/variable/MSVC12
    Help/variable/MSVC14
    Help/variable/MSVC60
    Help/variable/MSVC70
    Help/variable/MSVC71
    Help/variable/MSVC80
    Help/variable/MSVC90

Deprecated Variables that Control the Build
===========================================

.. toctree::
   :maxdepth: 1

    Help/variable/CMAKE_IOS_INSTALL_COMBINED
    Help/variable/CMAKE_USE_RELATIVE_PATHS

Deprecated Variables for Languages
==================================

.. toctree::
   :maxdepth: 1

    Help/variable/CMAKE_COMPILER_IS_GNUCC
    Help/variable/CMAKE_COMPILER_IS_GNUCXX
    Help/variable/CMAKE_COMPILER_IS_GNUG77

Deprecated Variables for CTest
==============================

.. toctree::
   :maxdepth: 1

    Help/variable/CTEST_CVS_CHECKOUT
    Help/variable/CTEST_SCP_COMMAND
    Help/variable/CTEST_TRIGGER_SITE



/P/🚀 variable/CMAKE_AR.rst
=================================


CMAKE_AR
--------

Name of archiving tool for static libraries.

This specifies the name of the program that creates archive or static
libraries.



/P/🚀 variable/CMAKE_ARGC.rst
===================================


CMAKE_ARGC
----------

Number of command line arguments passed to CMake in script mode.

When run in :ref:`-P <Script Processing Mode>` script mode, CMake sets this
variable to the number of command line arguments.  See also
:variable:`CMAKE_ARGV0`, ``1``, ``2`` ...



/P/🚀 variable/CMAKE_ARGV0.rst
====================================


CMAKE_ARGV0
-----------

Command line argument passed to CMake in script mode.

When run in :ref:`-P <Script Processing Mode>` script mode, CMake sets this
variable to the first command line argument.  It then also sets ``CMAKE_ARGV1``,
``CMAKE_ARGV2``, ... and so on, up to the number of command line arguments
given.  See also :variable:`CMAKE_ARGC`.



/P/🚀 variable/CMAKE_BINARY_DIR.rst
=========================================


CMAKE_BINARY_DIR
----------------

The path to the top level of the build tree.

This is the full path to the top level of the current CMake build
tree.  For an in-source build, this would be the same as
:variable:`CMAKE_SOURCE_DIR`.

When run in :option:`cmake -P` script mode, CMake sets the variables
``CMAKE_BINARY_DIR``, :variable:`CMAKE_SOURCE_DIR`,
:variable:`CMAKE_CURRENT_BINARY_DIR` and
:variable:`CMAKE_CURRENT_SOURCE_DIR` to the current working directory.



/P/🚀 variable/CMAKE_BUILD_TOOL.rst
=========================================


CMAKE_BUILD_TOOL
----------------

This variable exists only for backwards compatibility.
It contains the same value as :variable:`CMAKE_MAKE_PROGRAM`.
Use that variable instead.



/P/🚀 variable/CMAKE_CACHE_MAJOR_VERSION.rst
==================================================


CMAKE_CACHE_MAJOR_VERSION
-------------------------

Major version of CMake used to create the ``CMakeCache.txt`` file

This stores the major version of CMake used to write a CMake cache
file.  It is only different when a different version of CMake is run
on a previously created cache file.



/P/🚀 variable/CMAKE_CACHE_MINOR_VERSION.rst
==================================================


CMAKE_CACHE_MINOR_VERSION
-------------------------

Minor version of CMake used to create the ``CMakeCache.txt`` file

This stores the minor version of CMake used to write a CMake cache
file.  It is only different when a different version of CMake is run
on a previously created cache file.



/P/🚀 variable/CMAKE_CACHE_PATCH_VERSION.rst
==================================================


CMAKE_CACHE_PATCH_VERSION
-------------------------

Patch version of CMake used to create the ``CMakeCache.txt`` file

This stores the patch version of CMake used to write a CMake cache
file.  It is only different when a different version of CMake is run
on a previously created cache file.



/P/🚀 variable/CMAKE_CACHEFILE_DIR.rst
============================================


CMAKE_CACHEFILE_DIR
-------------------

This variable is used internally by CMake, and may not be set during
the first configuration of a build tree.  When it is set, it has the
same value as :variable:`CMAKE_BINARY_DIR`.  Use that variable instead.



/P/🚀 variable/CMAKE_CFG_INTDIR.rst
=========================================


CMAKE_CFG_INTDIR
----------------

.. deprecated:: 3.21

  This variable has poor support on :generator:`Ninja Multi-Config`, and
  predates the existence of the :genex:`$<CONFIG>` generator expression. Use
  ``$<CONFIG>`` instead.

Build-time reference to per-configuration output subdirectory.

For native build systems supporting multiple configurations in the
build tree (such as :ref:`Visual Studio Generators` and :generator:`Xcode`),
the value is a reference to a build-time variable specifying the name
of the per-configuration output subdirectory.  On :ref:`Makefile Generators`
this evaluates to `.` because there is only one configuration in a build tree.
Example values:

.. code-block::

  $(ConfigurationName) = Visual Studio 9
  $(Configuration)     = Visual Studio 12 and above
  $(CONFIGURATION)     = Xcode
  .                    = Make-based tools
  .                    = Ninja
  ${CONFIGURATION}     = Ninja Multi-Config

Since these values are evaluated by the native build system, this
variable is suitable only for use in command lines that will be
evaluated at build time.  Example of intended usage:

::

  add_executable(mytool mytool.c)
  add_custom_command(
    OUTPUT out.txt
    COMMAND ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mytool
            ${CMAKE_CURRENT_SOURCE_DIR}/in.txt out.txt
    DEPENDS mytool in.txt
    )
  add_custom_target(drive ALL DEPENDS out.txt)

Note that ``CMAKE_CFG_INTDIR`` is no longer necessary for this purpose but
has been left for compatibility with existing projects.  Instead
:command:`add_custom_command` recognizes executable target names in its
``COMMAND`` option, so
``${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mytool`` can be replaced
by just ``mytool``.

This variable is read-only.  Setting it is undefined behavior.  In
multi-configuration build systems the value of this variable is passed
as the value of preprocessor symbol ``CMAKE_INTDIR`` to the compilation
of all source files.



/P/🚀 variable/CMAKE_COMMAND.rst
======================================


CMAKE_COMMAND
-------------

The full path to the :manual:`cmake(1)` executable.

This is the full path to the CMake executable :manual:`cmake(1)` which is
useful from custom commands that want to use the :option:`cmake -E` option for
portable system commands.  (e.g.  ``/usr/local/bin/cmake``)



/P/🚀 variable/CMAKE_CPACK_COMMAND.rst
============================================


CMAKE_CPACK_COMMAND
-------------------

.. versionadded:: 3.13

Full path to :manual:`cpack(1)` command installed with CMake.

This is the full path to the CPack executable :manual:`cpack(1)`
that can be used for custom commands or tests to invoke
CPack commands.



/P/🚀 variable/CMAKE_CROSSCOMPILING.rst
=============================================


CMAKE_CROSSCOMPILING
--------------------

This variable is set by CMake to indicate whether it is cross compiling,
but note limitations discussed below.

This variable will be set to true by CMake if the :variable:`CMAKE_SYSTEM_NAME`
variable has been set manually (i.e. in a toolchain file or as a cache entry
from the :manual:`cmake <cmake(1)>` command line). In most cases, manually
setting :variable:`CMAKE_SYSTEM_NAME` will only be done when cross compiling
since, if not manually set, it will be given the same value as
:variable:`CMAKE_HOST_SYSTEM_NAME`, which is correct for
the non-cross-compiling case. In the event that :variable:`CMAKE_SYSTEM_NAME`
is manually set to the same value as :variable:`CMAKE_HOST_SYSTEM_NAME`, then
``CMAKE_CROSSCOMPILING`` will still be set to true.

Another case to be aware of is that builds targeting Apple platforms other than
macOS are handled differently to other cross compiling scenarios. Rather than
relying on :variable:`CMAKE_SYSTEM_NAME` to select the target platform, Apple
device builds use :variable:`CMAKE_OSX_SYSROOT` to select the appropriate SDK,
which indirectly determines the target platform. Furthermore, when using the
:generator:`Xcode` generator, developers can switch between device and
simulator builds at build time rather than having a single
choice at configure time, so the concept
of whether the build is cross compiling or not is more complex. Therefore, the
use of ``CMAKE_CROSSCOMPILING`` is not recommended for projects targeting Apple
devices.



/P/🚀 variable/CMAKE_CROSSCOMPILING_EMULATOR.rst
======================================================


CMAKE_CROSSCOMPILING_EMULATOR
-----------------------------

.. versionadded:: 3.3

This variable is only used when :variable:`CMAKE_CROSSCOMPILING` is on. It
should point to a command on the host system that can run executable built
for the target system.

.. versionadded:: 3.15
  If this variable contains a :ref:`semicolon-separated list <CMake Language
  Lists>`, then the first value is the command and remaining values are its
  arguments.

.. versionadded:: 3.28
  This variable can be initialized via an
  :envvar:`CMAKE_CROSSCOMPILING_EMULATOR` environment variable.

The command will be used to run :command:`try_run` generated executables,
which avoids manual population of the ``TryRunResults.cmake`` file.

This variable is also used as the default value for the 
:prop_tgt:`CROSSCOMPILING_EMULATOR` target property of executables.  However,
while :manual:`generator expressions <cmake-generator-expressions(7)>` are
supported by the target property (since CMake 3.29), they are *not* supported
by this variable's :command:`try_run` functionality.



/P/🚀 variable/CMAKE_CTEST_COMMAND.rst
============================================


CMAKE_CTEST_COMMAND
-------------------

Full path to :manual:`ctest(1)` command installed with CMake.

This is the full path to the CTest executable :manual:`ctest(1)`
that can be used for custom commands or tests to invoke
CTest commands.



/P/🚀 variable/CMAKE_CURRENT_BINARY_DIR.rst
=================================================


CMAKE_CURRENT_BINARY_DIR
------------------------

The path to the binary directory currently being processed.

This is the full path to the build directory that is currently being
processed by cmake.  Each directory added by :command:`add_subdirectory` will
create a binary directory in the build tree, and as it is being
processed this variable will be set.  For in-source builds this is the
current source directory being processed.

When run in :option:`cmake -P` script mode, CMake sets the variables
:variable:`CMAKE_BINARY_DIR`, :variable:`CMAKE_SOURCE_DIR`,
``CMAKE_CURRENT_BINARY_DIR`` and
:variable:`CMAKE_CURRENT_SOURCE_DIR` to the current working directory.



/P/🚀 variable/CMAKE_CURRENT_FUNCTION.rst
===============================================


CMAKE_CURRENT_FUNCTION
----------------------

.. versionadded:: 3.17

When executing code inside a :command:`function`, this variable
contains the name of the current function.  It can be useful for
diagnostic or debug messages.

See also :variable:`CMAKE_CURRENT_FUNCTION_LIST_DIR`,
:variable:`CMAKE_CURRENT_FUNCTION_LIST_FILE` and
:variable:`CMAKE_CURRENT_FUNCTION_LIST_LINE`.



/P/🚀 variable/CMAKE_CURRENT_FUNCTION_LIST_DIR.rst
========================================================


CMAKE_CURRENT_FUNCTION_LIST_DIR
-------------------------------

.. versionadded:: 3.17

When executing code inside a :command:`function`, this variable
contains the full directory of the listfile that defined the current function.

It is quite common practice in CMake for modules to use some additional files,
such as templates to be copied in after substituting CMake variables.
In such cases, a function needs to know where to locate those files in a way
that doesn't depend on where the function is called.  Without
``CMAKE_CURRENT_FUNCTION_LIST_DIR``, the code to do that would typically use
the following pattern:

.. code-block:: cmake

  set(_THIS_MODULE_BASE_DIR "${CMAKE_CURRENT_LIST_DIR}")

  function(foo)
    configure_file(
      "${_THIS_MODULE_BASE_DIR}/some.template.in"
      some.output
    )
  endfunction()

Using ``CMAKE_CURRENT_FUNCTION_LIST_DIR`` inside the function instead
eliminates the need for the extra variable which would otherwise be visible
outside the function's scope.
The above example can be written in the more concise and more robust form:

.. code-block:: cmake

  function(foo)
    configure_file(
      "${CMAKE_CURRENT_FUNCTION_LIST_DIR}/some.template.in"
      some.output
    )
  endfunction()

See also :variable:`CMAKE_CURRENT_FUNCTION`,
:variable:`CMAKE_CURRENT_FUNCTION_LIST_FILE` and
:variable:`CMAKE_CURRENT_FUNCTION_LIST_LINE`.



/P/🚀 variable/CMAKE_CURRENT_FUNCTION_LIST_FILE.rst
=========================================================


CMAKE_CURRENT_FUNCTION_LIST_FILE
--------------------------------

.. versionadded:: 3.17

When executing code inside a :command:`function`, this variable
contains the full path to the listfile that defined the current function.

See also :variable:`CMAKE_CURRENT_FUNCTION`,
:variable:`CMAKE_CURRENT_FUNCTION_LIST_DIR` and
:variable:`CMAKE_CURRENT_FUNCTION_LIST_LINE`.



/P/🚀 variable/CMAKE_CURRENT_FUNCTION_LIST_LINE.rst
=========================================================


CMAKE_CURRENT_FUNCTION_LIST_LINE
--------------------------------

.. versionadded:: 3.17

When executing code inside a :command:`function`, this variable
contains the line number in the listfile where the current function
was defined.

See also :variable:`CMAKE_CURRENT_FUNCTION`,
:variable:`CMAKE_CURRENT_FUNCTION_LIST_DIR` and
:variable:`CMAKE_CURRENT_FUNCTION_LIST_FILE`.



/P/🚀 variable/CMAKE_CURRENT_LIST_DIR.rst
===============================================


CMAKE_CURRENT_LIST_DIR
----------------------

Full directory of the listfile currently being processed.

As CMake processes the listfiles in your project this variable will
always be set to the directory where the listfile which is currently
being processed (:variable:`CMAKE_CURRENT_LIST_FILE`) is located.  The value
has dynamic scope.  When CMake starts processing commands in a source file
it sets this variable to the directory where this file is located.
When CMake finishes processing commands from the file it restores the
previous value.  Therefore the value of the variable inside a macro or
function is the directory of the file invoking the bottom-most entry
on the call stack, not the directory of the file containing the macro
or function definition.

See also :variable:`CMAKE_CURRENT_LIST_FILE`.



/P/🚀 variable/CMAKE_CURRENT_LIST_FILE.rst
================================================


CMAKE_CURRENT_LIST_FILE
-----------------------

Full path to the listfile currently being processed.

As CMake processes the listfiles in your project this variable will
always be set to the one currently being processed.  The value has
dynamic scope.  When CMake starts processing commands in a source file
it sets this variable to the location of the file.  When CMake
finishes processing commands from the file it restores the previous
value.  Therefore the value of the variable inside a macro or function
is the file invoking the bottom-most entry on the call stack, not the
file containing the macro or function definition.

See also :variable:`CMAKE_PARENT_LIST_FILE`.



/P/🚀 variable/CMAKE_CURRENT_LIST_LINE.rst
================================================


CMAKE_CURRENT_LIST_LINE
-----------------------

The line number of the current file being processed.

This is the line number of the file currently being processed by
cmake.

If CMake is currently processing deferred calls scheduled by
the :command:`cmake_language(DEFER)` command, this variable
evaluates to ``DEFERRED`` instead of a specific line number.



/P/🚀 variable/CMAKE_CURRENT_SOURCE_DIR.rst
=================================================


CMAKE_CURRENT_SOURCE_DIR
------------------------

The path to the source directory currently being processed.

This is the full path to the source directory that is currently being
processed by cmake.

When run in :option:`cmake -P` script mode, CMake sets the variables
:variable:`CMAKE_BINARY_DIR`, :variable:`CMAKE_SOURCE_DIR`,
:variable:`CMAKE_CURRENT_BINARY_DIR` and
``CMAKE_CURRENT_SOURCE_DIR`` to the current working directory.



/P/🚀 variable/CMAKE_DEBUG_TARGET_PROPERTIES.rst
======================================================


CMAKE_DEBUG_TARGET_PROPERTIES
-----------------------------

Enables tracing output for target properties.

This variable can be populated with a list of properties to generate
debug output for when evaluating target properties.  Currently it can
only be used when evaluating:

* :prop_tgt:`AUTOUIC_OPTIONS`
* :prop_tgt:`COMPILE_DEFINITIONS`
* :prop_tgt:`COMPILE_FEATURES`
* :prop_tgt:`COMPILE_OPTIONS`
* :prop_tgt:`INCLUDE_DIRECTORIES`
* :prop_tgt:`LINK_DIRECTORIES`
* :prop_tgt:`LINK_OPTIONS`
* :prop_tgt:`POSITION_INDEPENDENT_CODE`
* :prop_tgt:`SOURCES`

target properties and any other property listed in
:prop_tgt:`COMPATIBLE_INTERFACE_STRING` and other
``COMPATIBLE_INTERFACE_`` properties.  It outputs an origin for each entry
in the target property.  Default is unset.



/P/🚀 variable/CMAKE_DIRECTORY_LABELS.rst
===============================================


CMAKE_DIRECTORY_LABELS
-----------------------

.. versionadded:: 3.10

Specify labels for the current directory.

This is used to initialize the :prop_dir:`LABELS` directory property.



/P/🚀 variable/CMAKE_DL_LIBS.rst
======================================


CMAKE_DL_LIBS
-------------

Name of library containing ``dlopen`` and ``dlclose``.

The name of the library that has ``dlopen`` and ``dlclose`` in it, usually
``-ldl`` on most UNIX machines.



/P/🚀 variable/CMAKE_DOTNET_SDK.rst
=========================================


CMAKE_DOTNET_SDK
----------------

.. versionadded:: 3.23

Default value for :prop_tgt:`DOTNET_SDK` property of targets.

This variable is used to initialize the :prop_tgt:`DOTNET_SDK`
property on all targets. See that target property for additional information.



/P/🚀 variable/CMAKE_DOTNET_TARGET_FRAMEWORK.rst
======================================================


CMAKE_DOTNET_TARGET_FRAMEWORK
-----------------------------

.. versionadded:: 3.17

Default value for :prop_tgt:`DOTNET_TARGET_FRAMEWORK` property	of
targets.

This variable is used to initialize the
:prop_tgt:`DOTNET_TARGET_FRAMEWORK` property on all targets. See that
target property for additional information.

Setting ``CMAKE_DOTNET_TARGET_FRAMEWORK`` may be necessary
when working with ``C#`` and newer .NET framework versions to
avoid referencing errors with the ``ALL_BUILD`` CMake target.

This variable is only evaluated for :ref:`Visual Studio Generators`
VS 2010 and above.



/P/🚀 variable/CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION.rst
==============================================================


CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION
-------------------------------------

.. versionadded:: 3.12

Default value for :prop_tgt:`DOTNET_TARGET_FRAMEWORK_VERSION`
property of targets.

This variable is used to initialize the
:prop_tgt:`DOTNET_TARGET_FRAMEWORK_VERSION` property on all
targets. See that target property for additional information. When set,
:variable:`CMAKE_DOTNET_TARGET_FRAMEWORK` takes precednece over this
variable. See that variable or the associated target property
:prop_tgt:`DOTNET_TARGET_FRAMEWORK` for additional information.


Setting ``CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION`` may be necessary
when working with ``C#`` and newer .NET framework versions to
avoid referencing errors with the ``ALL_BUILD`` CMake target.

This variable is only evaluated for :ref:`Visual Studio Generators`
VS 2010 and above.



/P/🚀 variable/CMAKE_EDIT_COMMAND.rst
===========================================


CMAKE_EDIT_COMMAND
------------------

Full path to :manual:`cmake-gui(1)` or :manual:`ccmake(1)`.  Defined only for
:ref:`Makefile Generators` and :ref:`Ninja Generators` when not using any
:ref:`Extra Generators`.

This is the full path to the CMake executable that can graphically
edit the cache.  For example, :manual:`cmake-gui(1)` or :manual:`ccmake(1)`.



/P/🚀 variable/CMAKE_EXECUTABLE_SUFFIX.rst
================================================


CMAKE_EXECUTABLE_SUFFIX
-----------------------

The suffix for executables on this platform.

The suffix to use for the end of an executable filename if any, ``.exe``
on Windows.

:variable:`CMAKE_EXECUTABLE_SUFFIX_<LANG>` overrides this for
language ``<LANG>``.



/P/🚀 variable/CMAKE_EXECUTABLE_SUFFIX_LANG.rst
=====================================================


CMAKE_EXECUTABLE_SUFFIX_<LANG>
------------------------------

The suffix to use for the end of an executable filename of ``<LANG>``
compiler target architecture, if any.

It overrides :variable:`CMAKE_EXECUTABLE_SUFFIX` for language ``<LANG>``.



/P/🚀 variable/CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES.rst
============================================================


CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES
-----------------------------------

Additional suffixes for shared libraries.

Extensions for shared libraries other than that specified by
:variable:`CMAKE_SHARED_LIBRARY_SUFFIX`, if any.  CMake uses this to recognize
external shared library files during analysis of libraries linked by a
target.



/P/🚀 variable/CMAKE_FIND_DEBUG_MODE.rst
==============================================


CMAKE_FIND_DEBUG_MODE
---------------------

.. versionadded:: 3.17

Print extra find call information for the following commands to standard
error:

* :command:`find_program`
* :command:`find_library`
* :command:`find_file`
* :command:`find_path`
* :command:`find_package`

Output is designed for human consumption and not for parsing.
Enabling this variable is equivalent to using :option:`cmake --debug-find`
with the added ability to enable debugging for a subset of find calls.

.. code-block:: cmake

  set(CMAKE_FIND_DEBUG_MODE TRUE)
  find_program(...)
  set(CMAKE_FIND_DEBUG_MODE FALSE)

Default is unset.



/P/🚀 variable/CMAKE_FIND_PACKAGE_NAME.rst
================================================


CMAKE_FIND_PACKAGE_NAME
-----------------------

.. versionadded:: 3.1.1

Defined by the :command:`find_package` command while loading
a find module to record the caller-specified package name.
See command documentation for details.



/P/🚀 variable/CMAKE_FIND_PACKAGE_REDIRECTS_DIR.rst
=========================================================


CMAKE_FIND_PACKAGE_REDIRECTS_DIR
--------------------------------

.. versionadded:: 3.24

This read-only variable specifies a directory that the :command:`find_package`
command will check first before searching anywhere else for a module or config
package file.  A config package file in this directory will always be found in
preference to any other Find module file or config package file.

The primary purpose of this variable is to facilitate integration between
:command:`find_package` and :command:`FetchContent_MakeAvailable`.  The latter
command may create files in the ``CMAKE_FIND_PACKAGE_REDIRECTS_DIR`` directory
when it populates a dependency.  This allows subsequent calls to
:command:`find_package` for the same dependency to reuse the populated
contents instead of trying to satisfy the dependency from somewhere external
to the build.  Projects may also want to write files into this directory in
some situations (see :ref:`FetchContent-find_package-integration-examples`
for examples).

The directory that ``CMAKE_FIND_PACKAGE_REDIRECTS_DIR`` points to will always
be erased and recreated empty at the start of every CMake run.  Any files
written into this directory during the CMake run will be lost the next time
CMake configures the project.

``CMAKE_FIND_PACKAGE_REDIRECTS_DIR`` is only set in CMake project mode.
It is not set when CMake is run in script mode
(i.e. :option:`cmake -P`).



/P/🚀 variable/CMAKE_FIND_PACKAGE_SORT_DIRECTION.rst
==========================================================


CMAKE_FIND_PACKAGE_SORT_DIRECTION
---------------------------------

.. versionadded:: 3.7

The sorting direction used by :variable:`CMAKE_FIND_PACKAGE_SORT_ORDER`.
It can assume one of the following values:

``DEC``
  Default.  Ordering is done in descending mode.
  The highest folder found will be tested first.

``ASC``
  Ordering is done in ascending mode.
  The lowest folder found will be tested first.

If :variable:`CMAKE_FIND_PACKAGE_SORT_ORDER` is not set or is set to ``NONE``
this variable has no effect.



/P/🚀 variable/CMAKE_FIND_PACKAGE_SORT_ORDER.rst
======================================================


CMAKE_FIND_PACKAGE_SORT_ORDER
-----------------------------

.. versionadded:: 3.7

The default order for sorting packages found using :command:`find_package`.
It can assume one of the following values:

``NONE``
  Default.  No attempt is done to sort packages.
  The first valid package found will be selected.

``NAME``
  Sort packages lexicographically before selecting one.

``NATURAL``
  Sort packages using natural order (see ``strverscmp(3)`` manual),
  i.e. such that contiguous digits are compared as whole numbers.

Natural sorting can be employed to return the highest version when multiple
versions of the same library are found by :command:`find_package`.  For
example suppose that the following libraries have been found:

* libX-1.1.0
* libX-1.2.9
* libX-1.2.10

By setting ``NATURAL`` order we can select the one with the highest
version number ``libX-1.2.10``.

.. code-block:: cmake

  set(CMAKE_FIND_PACKAGE_SORT_ORDER NATURAL)
  find_package(libX CONFIG)

The sort direction can be controlled using the
:variable:`CMAKE_FIND_PACKAGE_SORT_DIRECTION` variable
(by default decrescent, e.g. lib-B will be tested before lib-A).



/P/🚀 variable/CMAKE_GENERATOR.rst
========================================


CMAKE_GENERATOR
---------------

The generator used to build the project.  See :manual:`cmake-generators(7)`.

The name of the generator that is being used to generate the build
files.  (e.g.  ``Unix Makefiles``, ``Ninja``, etc.)

The value of this variable should never be modified by project code.
A generator may be selected via the :option:`cmake -G` option,
interactively in :manual:`cmake-gui(1)`, or via the :envvar:`CMAKE_GENERATOR`
environment variable.



/P/🚀 variable/CMAKE_GENERATOR_INSTANCE.rst
=================================================


CMAKE_GENERATOR_INSTANCE
------------------------

.. versionadded:: 3.11

Generator-specific instance specification provided by user.

Some CMake generators support selection of an instance of the native build
system when multiple instances are available.  If the user specifies an
instance (e.g. by setting this cache entry or via the
:envvar:`CMAKE_GENERATOR_INSTANCE` environment variable), or after a default
instance is chosen when a build tree is first configured, the value will be
available in this variable.

The value of this variable should never be modified by project code.
A toolchain file specified by the :variable:`CMAKE_TOOLCHAIN_FILE`
variable may initialize ``CMAKE_GENERATOR_INSTANCE`` as a cache entry.
Once a given build tree has been initialized with a particular value
for this variable, changing the value has undefined behavior.

Instance specification is supported only on specific generators.

Visual Studio Instance Selection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

:ref:`Visual Studio Generators` support instance specification for
Visual Studio 2017 and above.  The ``CMAKE_GENERATOR_INSTANCE`` variable
may be set as a cache entry selecting an instance of Visual Studio
via one of the following forms:

* ``location``
* ``location[,key=value]*``
* ``key=value[,key=value]*``

The ``location`` specifies the absolute path to the top-level directory
of the VS installation.

The ``key=value`` pairs form a comma-separated list of options to
specify details of the instance selection.
Supported pairs are:

``version=<major>.<minor>.<date>.<build>``
  .. versionadded:: 3.23

  Specify the 4-component VS Build Version, a.k.a. Build Number.

  .. include:: CMAKE_VS_VERSION_BUILD_NUMBER_COMPONENTS.txt

.. versionadded:: 3.23

  A portable VS instance, which is not known to the Visual Studio Installer,
  may be specified by providing both ``location`` and ``version=``.

If the value of ``CMAKE_GENERATOR_INSTANCE`` is not specified explicitly
by the user or a toolchain file, CMake queries the Visual Studio Installer
to locate VS instances, chooses one, and sets the variable as a cache entry
to hold the value persistently.  If an environment variable of the form
``VS##0COMNTOOLS``, where ``##`` the Visual Studio major version number,
is set and points to the ``Common7/Tools`` directory within one of the
VS instances, that instance will be used.  Otherwise, if more than one
VS instance is installed we do not define which one is chosen by default.

The VS version build number of the selected VS instance is provided in
the :variable:`CMAKE_VS_VERSION_BUILD_NUMBER` variable.



/P/🚀 variable/CMAKE_GENERATOR_PLATFORM.rst
=================================================


CMAKE_GENERATOR_PLATFORM
------------------------

.. versionadded:: 3.1

Generator-specific target platform specification provided by user.

Some CMake generators support a target platform name to be given
to the native build system to choose a compiler toolchain.
If the user specifies a platform name (e.g. via the :option:`cmake -A`
option or via the :envvar:`CMAKE_GENERATOR_PLATFORM` environment variable)
the value will be available in this variable.

The value of this variable should never be modified by project code.
A toolchain file specified by the :variable:`CMAKE_TOOLCHAIN_FILE`
variable may initialize ``CMAKE_GENERATOR_PLATFORM``.  Once a given
build tree has been initialized with a particular value for this
variable, changing the value has undefined behavior.

Platform specification is supported only on specific generators:

* For :ref:`Visual Studio Generators` with VS 2005 and above this
  specifies the target architecture.

* For :generator:`Green Hills MULTI` this specifies the target architecture.

See native build system documentation for allowed platform names.

.. _`Visual Studio Platform Selection`:

Visual Studio Platform Selection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The :ref:`Visual Studio Generators` support platform specification
using one of these forms:

* ``platform``
* ``platform[,key=value]*``
* ``key=value[,key=value]*``

The ``platform`` specifies the target platform (VS target architecture),
such as ``x64``, ``ARM64``, or ``Win32``.  The selected platform
name is provided in the :variable:`CMAKE_VS_PLATFORM_NAME` variable.

The ``key=value`` pairs form a comma-separated list of options to
specify generator-specific details of the platform selection.
Supported pairs are:

``version=<version>``
  .. versionadded:: 3.27

  Specify the Windows SDK version to use.  This is supported by VS 2015 and
  above when targeting Windows or Windows Store.  CMake will set the
  :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION` variable to the
  selected SDK version.

  The ``<version>`` may be one of:

  ``10.0``
    Specify that any 10.0 SDK version may be used, and let Visual Studio
    pick one.  This is supported by VS 2019 and above.

  ``10.0.<build>.<increment>``
    Specify the exact 4-component SDK version, e.g., ``10.0.19041.0``.
    The specified version of the SDK must be installed.  It may not exceed
    the value of :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM`,
    if that variable is set.

  ``8.1``
    Specify the 8.1 SDK version.  This is always supported by VS 2015.
    On VS 2017 and above the 8.1 SDK must be installed.

  If the ``version`` field is not specified, CMake selects a version as
  described in the :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION`
  variable documentation.



/P/🚀 variable/CMAKE_GENERATOR_TOOLSET.rst
================================================


CMAKE_GENERATOR_TOOLSET
-----------------------

Native build system toolset specification provided by user.

Some CMake generators support a toolset specification to tell the
native build system how to choose a compiler.  If the user specifies
a toolset (e.g. via the :option:`cmake -T` option or via
the :envvar:`CMAKE_GENERATOR_TOOLSET` environment variable) the value
will be available in this variable.

The value of this variable should never be modified by project code.
A toolchain file specified by the :variable:`CMAKE_TOOLCHAIN_FILE`
variable may initialize ``CMAKE_GENERATOR_TOOLSET``.  Once a given
build tree has been initialized with a particular value for this
variable, changing the value has undefined behavior.

Toolset specification is supported only on specific generators:

* :ref:`Visual Studio Generators` for VS 2010 and above
* The :generator:`Xcode` generator for Xcode 3.0 and above
* The :generator:`Green Hills MULTI` generator

See native build system documentation for allowed toolset names.

Visual Studio Toolset Selection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The :ref:`Visual Studio Generators` support toolset specification
using one of these forms:

* ``toolset``
* ``toolset[,key=value]*``
* ``key=value[,key=value]*``

The ``toolset`` specifies the toolset name.  The selected toolset name
is provided in the :variable:`CMAKE_VS_PLATFORM_TOOLSET` variable.

The ``key=value`` pairs form a comma-separated list of options to
specify generator-specific details of the toolset selection.
Supported pairs are:

``cuda=<version>|<path>``
  Specify the CUDA toolkit version to use or the path to a
  standalone CUDA toolkit directory.  Supported by VS 2010
  and above. The version can only be used with the CUDA
  toolkit VS integration globally installed.
  See the :variable:`CMAKE_VS_PLATFORM_TOOLSET_CUDA` and
  :variable:`CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR` variables.

``fortran=<compiler>``
  .. versionadded:: 3.29

  Specify the Fortran compiler to use, among those that integrate with VS.
  The value may be one of:

  ``ifort``
    Intel classic Fortran compiler.

  ``ifx``
    Intel oneAPI Fortran compiler.

  See the :variable:`CMAKE_VS_PLATFORM_TOOLSET_FORTRAN` variable.

``host=<arch>``
  Specify the host tools architecture as ``x64`` or ``x86``.
  Supported by VS 2013 and above.
  See the :variable:`CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE`
  variable.

``version=<version>``
  Specify the toolset version to use.  Supported by VS 2017
  and above with the specified toolset installed.
  See the :variable:`CMAKE_VS_PLATFORM_TOOLSET_VERSION` variable.

``VCTargetsPath=<path>``
  Specify an alternative ``VCTargetsPath`` value for Visual Studio
  project files.  This allows use of VS platform extension configuration
  files (``.props`` and ``.targets``) that are not installed with VS.

Visual Studio Toolset Customization
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**These are unstable interfaces with no compatibility guarantees**
because they hook into undocumented internal CMake implementation details.
Institutions may use these to internally maintain support for non-public
Visual Studio platforms and toolsets, but must accept responsibility to
make updates as changes are made to CMake.

Additional ``key=value`` pairs are available:

``customFlagTableDir=<path>``
  .. versionadded:: 3.21

  Specify the absolute path to a directory from which to load custom
  flag tables stored as JSON documents with file names of the form
  ``<platform>_<toolset>_<tool>.json`` or ``<platform>_<tool>.json``,
  where ``<platform>`` is the :variable:`CMAKE_VS_PLATFORM_NAME`,
  ``<toolset>`` is the :variable:`CMAKE_VS_PLATFORM_TOOLSET`,
  and ``<tool>`` is the tool for which the flag table is meant.
  **This naming pattern is an internal CMake implementation detail.**
  The ``<tool>`` names are undocumented.  The format of the ``.json``
  flag table files is undocumented.



/P/🚀 variable/CMAKE_IMPORT_LIBRARY_PREFIX.rst
====================================================


CMAKE_IMPORT_LIBRARY_PREFIX
---------------------------

The prefix for import libraries that you link to.

The prefix to use for the name of an import library if used on this
platform.

``CMAKE_IMPORT_LIBRARY_PREFIX_<LANG>`` overrides this for language ``<LANG>``.



/P/🚀 variable/CMAKE_IMPORT_LIBRARY_SUFFIX.rst
====================================================


CMAKE_IMPORT_LIBRARY_SUFFIX
---------------------------

The suffix for import libraries that you link to.

The suffix to use for the end of an import library filename if used on
this platform.

``CMAKE_IMPORT_LIBRARY_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.



/P/🚀 variable/CMAKE_JOB_POOL_COMPILE.rst
===============================================


CMAKE_JOB_POOL_COMPILE
----------------------

This variable is used to initialize the :prop_tgt:`JOB_POOL_COMPILE`
property on all the targets. See :prop_tgt:`JOB_POOL_COMPILE`
for additional information.



/P/🚀 variable/CMAKE_JOB_POOL_LINK.rst
============================================


CMAKE_JOB_POOL_LINK
-------------------

This variable is used to initialize the :prop_tgt:`JOB_POOL_LINK`
property on all the targets. See :prop_tgt:`JOB_POOL_LINK`
for additional information.



/P/🚀 variable/CMAKE_JOB_POOL_PRECOMPILE_HEADER.rst
=========================================================


CMAKE_JOB_POOL_PRECOMPILE_HEADER
--------------------------------

.. versionadded:: 3.17

This variable is used to initialize the :prop_tgt:`JOB_POOL_PRECOMPILE_HEADER`
property on all the targets. See :prop_tgt:`JOB_POOL_PRECOMPILE_HEADER`
for additional information.



/P/🚀 variable/CMAKE_JOB_POOLS.rst
========================================


CMAKE_JOB_POOLS
---------------

.. versionadded:: 3.11

If the :prop_gbl:`JOB_POOLS` global property is not set, the value
of this variable is used in its place.  See :prop_gbl:`JOB_POOLS`
for additional information.



/P/🚀 variable/CMAKE_LANG_COMPILER_AR.rst
===============================================


CMAKE_<LANG>_COMPILER_AR
------------------------

.. versionadded:: 3.9

A wrapper around ``ar`` adding the appropriate ``--plugin`` option for the
compiler.

See also :variable:`CMAKE_AR`.



/P/🚀 variable/CMAKE_LANG_COMPILER_FRONTEND_VARIANT.rst
=============================================================


CMAKE_<LANG>_COMPILER_FRONTEND_VARIANT
--------------------------------------

.. versionadded:: 3.14

Identification string of the compiler frontend variant.

Some compilers have multiple, different frontends for accepting command
line options.  (For example ``Clang`` originally only had a frontend
compatible with the ``GNU`` compiler but since its port to Windows
(``Clang-Cl``) it now also supports a frontend compatible with ``MSVC``.)
When CMake detects such a compiler it sets this
variable to what would have been the :variable:`CMAKE_<LANG>_COMPILER_ID` for
the compiler whose frontend it resembles.

.. note::
  In other words, this variable describes what command line options
  and language extensions the compiler frontend expects.

.. versionchanged:: 3.26
  This variable is set for ``GNU``, ``MSVC``, and ``AppleClang``
  compilers that have only one frontend variant.



/P/🚀 variable/CMAKE_LANG_COMPILER_LINKER.rst
===================================================


CMAKE_<LANG>_COMPILER_LINKER
----------------------------

.. versionadded:: 3.29

The full path to the linker for ``LANG``.

This is the command that will be used as the ``<LANG>`` linker.

This variable is not guaranteed to be defined for all linkers or languages.

.. note::
  This variable is read-only. It must not be set by the user. To select a
  specific linker, use the :variable:`CMAKE_LINKER_TYPE` variable or the
  :prop_tgt:`LINKER_TYPE` target property.



/P/🚀 variable/CMAKE_LANG_COMPILER_LINKER_FRONTEND_VARIANT.rst
====================================================================


CMAKE_<LANG>_COMPILER_LINKER_FRONTEND_VARIANT
---------------------------------------------

.. versionadded:: 3.29

Identification string of the linker frontend variant.

Some linkers have multiple, different frontends for accepting command
line options.  (For example ``LLCM LLD`` originally only had a frontend
compatible with the ``GNU`` compiler but since its port to Windows
(``lld-link``) it now also supports a frontend compatible with ``MSVC``.)
When CMake detects such a linker it sets this variable to what would have been
the :variable:`CMAKE_<LANG>_COMPILER_LINKER_ID` for the linker whose frontend
it resembles.

.. note::
  In other words, this variable describes what command line options
  and language extensions the linker frontend expects.

  This variable is set for ``GNU``, ``MSVC``, ``MOLD`` and ``AppleClang``
  linkers that have only one frontend variant.



/P/🚀 variable/CMAKE_LANG_COMPILER_LINKER_ID.rst
======================================================


CMAKE_<LANG>_COMPILER_LINKER_ID
-------------------------------

.. versionadded:: 3.29

Linker identification string.

A short string unique to the linker vendor.  Possible values
include:

=============================== ===============================================
Value                           Name
=============================== ===============================================
``AppleClang``                  Apple Clang
``LLD``                         `LLVM LLD`_
``GNU``                         `GNU Binutils - ld linker`_ (also known as
                                ``bfd``)
``GNUgold``                     `GNU Binutils - gold linker`_
``MSVC``                        `Microsoft Visual Studio`_
``MOLD``                        `mold: A Modern Linker`_ or, on Apple, `sold`_
                                linker
``AIX``                         AIX system linker
``Solaris``                     SunOS system linker
=============================== ===============================================

This variable is not guaranteed to be defined for all linkers or languages.

.. _LLVM LLD: https://lld.llvm.org
.. _GNU Binutils - ld linker: https://sourceware.org/binutils
.. _GNU Binutils - gold linker: https://sourceware.org/binutils
.. _Microsoft Visual Studio: https://visualstudio.microsoft.com
.. _mold\: A Modern Linker: https://github.com/rui314/mold
.. _sold: https://github.com/bluewhalesystems/sold



/P/🚀 variable/CMAKE_LANG_COMPILER_LINKER_VERSION.rst
===========================================================


CMAKE_<LANG>_COMPILER_LINKER_VERSION
------------------------------------

.. versionadded:: 3.29

Linker version string.

Linker version in major[.minor[.patch[.tweak]]] format.  This
variable is not guaranteed to be defined for all linkers or
languages.



/P/🚀 variable/CMAKE_LANG_COMPILER_RANLIB.rst
===================================================


CMAKE_<LANG>_COMPILER_RANLIB
----------------------------

.. versionadded:: 3.9

A wrapper around ``ranlib`` adding the appropriate ``--plugin`` option for the
compiler.

See also :variable:`CMAKE_RANLIB`.



/P/🚀 variable/CMAKE_LANG_LINK_LIBRARY_SUFFIX.rst
=======================================================


CMAKE_<LANG>_LINK_LIBRARY_SUFFIX
--------------------------------

.. versionadded:: 3.16

Language-specific suffix for libraries that you link to.

The suffix to use for the end of a library filename, ``.lib`` on Windows.



/P/🚀 variable/CMAKE_LINK_LIBRARY_SUFFIX.rst
==================================================


CMAKE_LINK_LIBRARY_SUFFIX
-------------------------

The suffix for libraries that you link to.

The suffix to use for the end of a library filename, ``.lib`` on Windows.



/P/🚀 variable/CMAKE_LINK_SEARCH_END_STATIC.rst
=====================================================


CMAKE_LINK_SEARCH_END_STATIC
----------------------------

.. versionadded:: 3.4

End a link line such that static system libraries are used.

Some linkers support switches such as ``-Bstatic`` and ``-Bdynamic`` to
determine whether to use static or shared libraries for ``-lXXX`` options.
CMake uses these options to set the link type for libraries whose full
paths are not known or (in some cases) are in implicit link
directories for the platform.  By default CMake adds an option at the
end of the library list (if necessary) to set the linker search type
back to its starting type.  This property switches the final linker
search type to ``-Bstatic`` regardless of how it started.

This variable is used to initialize the target property
:prop_tgt:`LINK_SEARCH_END_STATIC` for all targets. If set, its
value is also used by the :command:`try_compile` command.

See also :variable:`CMAKE_LINK_SEARCH_START_STATIC`.



/P/🚀 variable/CMAKE_LINK_SEARCH_START_STATIC.rst
=======================================================


CMAKE_LINK_SEARCH_START_STATIC
------------------------------

.. versionadded:: 3.4

Assume the linker looks for static libraries by default.

Some linkers support switches such as ``-Bstatic`` and ``-Bdynamic`` to
determine whether to use static or shared libraries for ``-lXXX`` options.
CMake uses these options to set the link type for libraries whose full
paths are not known or (in some cases) are in implicit link
directories for the platform.  By default the linker search type is
assumed to be ``-Bdynamic`` at the beginning of the library list.  This
property switches the assumption to ``-Bstatic``.  It is intended for use
when linking an executable statically (e.g.  with the GNU ``-static``
option).

This variable is used to initialize the target property
:prop_tgt:`LINK_SEARCH_START_STATIC` for all targets.  If set, its
value is also used by the :command:`try_compile` command.

See also :variable:`CMAKE_LINK_SEARCH_END_STATIC`.



/P/🚀 variable/CMAKE_MAJOR_VERSION.rst
============================================


CMAKE_MAJOR_VERSION
-------------------

First version number component of the :variable:`CMAKE_VERSION`
variable.



/P/🚀 variable/CMAKE_MAKE_PROGRAM.rst
===========================================


CMAKE_MAKE_PROGRAM
------------------

Tool that can launch the native build system.
The value may be the full path to an executable or just the tool
name if it is expected to be in the ``PATH``.

The tool selected depends on the :variable:`CMAKE_GENERATOR` used
to configure the project:

* The :ref:`Makefile Generators` set this to ``make``, ``gmake``, or
  a generator-specific tool (e.g. ``nmake`` for :generator:`NMake Makefiles`).

  These generators store ``CMAKE_MAKE_PROGRAM`` in the CMake cache
  so that it may be edited by the user.

* The :generator:`Ninja` generator sets this to ``ninja``.

  This generator stores ``CMAKE_MAKE_PROGRAM`` in the CMake cache
  so that it may be edited by the user.

* The :generator:`Xcode` generator sets this to ``xcodebuild``.

  This generator prefers to lookup the build tool at build time
  rather than to store ``CMAKE_MAKE_PROGRAM`` in the CMake cache
  ahead of time.  This is because ``xcodebuild`` is easy to find.

  For compatibility with versions of CMake prior to 3.2, if
  a user or project explicitly adds ``CMAKE_MAKE_PROGRAM`` to
  the CMake cache then CMake will use the specified value.

* The :ref:`Visual Studio Generators` set this to the full path to
  ``MSBuild.exe`` (VS >= 10), ``devenv.com`` (VS 7,8,9), or
  ``VCExpress.exe`` (VS Express 8,9).
  (See also variables
  :variable:`CMAKE_VS_MSBUILD_COMMAND` and
  :variable:`CMAKE_VS_DEVENV_COMMAND`.

  These generators prefer to lookup the build tool at build time
  rather than to store ``CMAKE_MAKE_PROGRAM`` in the CMake cache
  ahead of time.  This is because the tools are version-specific
  and can be located using the Windows Registry.  It is also
  necessary because the proper build tool may depend on the
  project content (e.g. the Intel Fortran plugin to VS 10 and 11
  requires ``devenv.com`` to build its ``.vfproj`` project files
  even though ``MSBuild.exe`` is normally preferred to support
  the :variable:`CMAKE_GENERATOR_TOOLSET`).

  For compatibility with versions of CMake prior to 3.0, if
  a user or project explicitly adds ``CMAKE_MAKE_PROGRAM`` to
  the CMake cache then CMake will use the specified value if
  possible.

* The :generator:`Green Hills MULTI` generator sets this to the full
  path to ``gbuild.exe(Windows)`` or ``gbuild(Linux)`` based upon
  the toolset being used.

  Once the generator has initialized a particular value for this
  variable, changing the value has undefined behavior.

The ``CMAKE_MAKE_PROGRAM`` variable is set for use by project code.
The value is also used by the :option:`cmake --build` and
:option:`ctest --build-and-test` tools to launch the native
build process.



/P/🚀 variable/CMAKE_MATCH_COUNT.rst
==========================================


CMAKE_MATCH_COUNT
-----------------

.. versionadded:: 3.2

The number of matches with the last regular expression.

When a regular expression match is used, CMake fills in
:variable:`CMAKE_MATCH_<n>` variables with the match contents.
The ``CMAKE_MATCH_COUNT`` variable holds the number of match
expressions when these are filled.



/P/🚀 variable/CMAKE_MATCH_n.rst
======================================


CMAKE_MATCH_<n>
---------------

Capture group ``<n>`` matched by the last regular expression, for groups
0 through 9.  Group 0 is the entire match.  Groups 1 through 9 are the
subexpressions captured by ``()`` syntax.

When a regular expression match is used, CMake fills in ``CMAKE_MATCH_<n>``
variables with the match contents.  The :variable:`CMAKE_MATCH_COUNT`
variable holds the number of match expressions when these are filled.



/P/🚀 variable/CMAKE_MINIMUM_REQUIRED_VERSION.rst
=======================================================


CMAKE_MINIMUM_REQUIRED_VERSION
------------------------------

The ``<min>`` version of CMake given to the most recent call to the
:command:`cmake_minimum_required(VERSION)` command in the current
variable scope or any parent variable scope.



/P/🚀 variable/CMAKE_MINOR_VERSION.rst
============================================


CMAKE_MINOR_VERSION
-------------------

Second version number component of the :variable:`CMAKE_VERSION`
variable.



/P/🚀 variable/CMAKE_NETRC.rst
====================================


CMAKE_NETRC
-----------

.. versionadded:: 3.11

This variable is used to initialize the ``NETRC`` option for the
:command:`file(DOWNLOAD)` and :command:`file(UPLOAD)` commands.
See those commands for additional information.

This variable is also used by the :module:`ExternalProject` and
:module:`FetchContent` modules for internal calls to :command:`file(DOWNLOAD)`.

The local option takes precedence over this variable.



/P/🚀 variable/CMAKE_NETRC_FILE.rst
=========================================


CMAKE_NETRC_FILE
----------------

.. versionadded:: 3.11

This variable is used to initialize the ``NETRC_FILE`` option for the
:command:`file(DOWNLOAD)` and :command:`file(UPLOAD)` commands.
See those commands for additional information.

This variable is also used by the :module:`ExternalProject` and
:module:`FetchContent` modules for internal calls to :command:`file(DOWNLOAD)`.

The local option takes precedence over this variable.



/P/🚀 variable/CMAKE_PARENT_LIST_FILE.rst
===============================================


CMAKE_PARENT_LIST_FILE
----------------------

Full path to the CMake file that included the current one.

While processing a CMake file loaded by :command:`include` or
:command:`find_package` this variable contains the full path to the file
including it.  The top of the include stack is always the ``CMakeLists.txt``
for the current directory.  See also :variable:`CMAKE_CURRENT_LIST_FILE`.



/P/🚀 variable/CMAKE_PATCH_VERSION.rst
============================================


CMAKE_PATCH_VERSION
-------------------

Third version number component of the :variable:`CMAKE_VERSION`
variable.



/P/🚀 variable/CMAKE_PROJECT_DESCRIPTION.rst
==================================================


CMAKE_PROJECT_DESCRIPTION
-------------------------

.. versionadded:: 3.9

The description of the top level project.

This variable holds the description of the project as specified in the top
level CMakeLists.txt file by a :command:`project` command.  In the event that
the top level CMakeLists.txt contains multiple :command:`project` calls,
the most recently called one from that top level CMakeLists.txt will determine
the value that ``CMAKE_PROJECT_DESCRIPTION`` contains.  For example, consider
the following top level CMakeLists.txt:

.. code-block:: cmake

  cmake_minimum_required(VERSION 3.0)
  project(First DESCRIPTION "I am First")
  project(Second DESCRIPTION "I am Second")
  add_subdirectory(sub)
  project(Third DESCRIPTION "I am Third")

And ``sub/CMakeLists.txt`` with the following contents:

.. code-block:: cmake

  project(SubProj DESCRIPTION "I am SubProj")
  message("CMAKE_PROJECT_DESCRIPTION = ${CMAKE_PROJECT_DESCRIPTION}")

The most recently seen :command:`project` command from the top level
CMakeLists.txt would be ``project(Second ...)``, so this will print::

  CMAKE_PROJECT_DESCRIPTION = I am Second

To obtain the description from the most recent call to :command:`project` in
the current directory scope or above, see the :variable:`PROJECT_DESCRIPTION`
variable.



/P/🚀 variable/CMAKE_PROJECT_HOMEPAGE_URL.rst
===================================================


CMAKE_PROJECT_HOMEPAGE_URL
--------------------------

.. versionadded:: 3.12

The homepage URL of the top level project.

This variable holds the homepage URL of the project as specified in the top
level CMakeLists.txt file by a :command:`project` command.  In the event that
the top level CMakeLists.txt contains multiple :command:`project` calls,
the most recently called one from that top level CMakeLists.txt will determine
the value that ``CMAKE_PROJECT_HOMEPAGE_URL`` contains.  For example, consider
the following top level CMakeLists.txt:

.. code-block:: cmake

  cmake_minimum_required(VERSION 3.0)
  project(First HOMEPAGE_URL "https://first.example.com")
  project(Second HOMEPAGE_URL "https://second.example.com")
  add_subdirectory(sub)
  project(Third HOMEPAGE_URL "https://third.example.com")

And ``sub/CMakeLists.txt`` with the following contents:

.. code-block:: cmake

  project(SubProj HOMEPAGE_URL "https://subproj.example.com")
  message("CMAKE_PROJECT_HOMEPAGE_URL = ${CMAKE_PROJECT_HOMEPAGE_URL}")

The most recently seen :command:`project` command from the top level
CMakeLists.txt would be ``project(Second ...)``, so this will print::

  CMAKE_PROJECT_HOMEPAGE_URL = https://second.example.com

To obtain the homepage URL from the most recent call to :command:`project` in
the current directory scope or above, see the :variable:`PROJECT_HOMEPAGE_URL`
variable.



/P/🚀 variable/CMAKE_PROJECT_NAME.rst
===========================================


CMAKE_PROJECT_NAME
------------------

The name of the top level project.

This variable holds the name of the project as specified in the top
level CMakeLists.txt file by a :command:`project` command.  In the event that
the top level CMakeLists.txt contains multiple :command:`project` calls,
the most recently called one from that top level CMakeLists.txt will determine
the name that ``CMAKE_PROJECT_NAME`` contains.  For example, consider
the following top level CMakeLists.txt:

.. code-block:: cmake

  cmake_minimum_required(VERSION 3.0)
  project(First)
  project(Second)
  add_subdirectory(sub)
  project(Third)

And ``sub/CMakeLists.txt`` with the following contents:

.. code-block:: cmake

  project(SubProj)
  message("CMAKE_PROJECT_NAME = ${CMAKE_PROJECT_NAME}")

The most recently seen :command:`project` command from the top level
CMakeLists.txt would be ``project(Second)``, so this will print::

  CMAKE_PROJECT_NAME = Second

To obtain the name from the most recent call to :command:`project` in
the current directory scope or above, see the :variable:`PROJECT_NAME`
variable.



/P/🚀 variable/CMAKE_PROJECT_VERSION.rst
==============================================


CMAKE_PROJECT_VERSION
---------------------

.. versionadded:: 3.12

The version of the top level project.

This variable holds the version of the project as specified in the top
level CMakeLists.txt file by a :command:`project` command.  In the event that
the top level CMakeLists.txt contains multiple :command:`project` calls,
the most recently called one from that top level CMakeLists.txt will determine
the value that ``CMAKE_PROJECT_VERSION`` contains.  For example, consider
the following top level CMakeLists.txt:

.. code-block:: cmake

  cmake_minimum_required(VERSION 3.0)
  project(First VERSION 1.2.3)
  project(Second VERSION 3.4.5)
  add_subdirectory(sub)
  project(Third VERSION 6.7.8)

And ``sub/CMakeLists.txt`` with the following contents:

.. code-block:: cmake

  project(SubProj VERSION 1)
  message("CMAKE_PROJECT_VERSION = ${CMAKE_PROJECT_VERSION}")

The most recently seen :command:`project` command from the top level
CMakeLists.txt would be ``project(Second ...)``, so this will print::

  CMAKE_PROJECT_VERSION = 3.4.5

To obtain the version from the most recent call to :command:`project` in
the current directory scope or above, see the :variable:`PROJECT_VERSION`
variable.



/P/🚀 variable/CMAKE_PROJECT_VERSION_MAJOR.rst
====================================================


CMAKE_PROJECT_VERSION_MAJOR
---------------------------

.. versionadded:: 3.12

The major version of the top level project.

This variable holds the major version of the project as specified in the top
level CMakeLists.txt file by a :command:`project` command. Please see
:variable:`CMAKE_PROJECT_VERSION` documentation for the behavior when
multiple :command:`project` commands are used in the sources.



/P/🚀 variable/CMAKE_PROJECT_VERSION_MINOR.rst
====================================================


CMAKE_PROJECT_VERSION_MINOR
---------------------------

.. versionadded:: 3.12

The minor version of the top level project.

This variable holds the minor version of the project as specified in the top
level CMakeLists.txt file by a :command:`project` command. Please see
:variable:`CMAKE_PROJECT_VERSION` documentation for the behavior when
multiple :command:`project` commands are used in the sources.



/P/🚀 variable/CMAKE_PROJECT_VERSION_PATCH.rst
====================================================


CMAKE_PROJECT_VERSION_PATCH
---------------------------

.. versionadded:: 3.12

The patch version of the top level project.

This variable holds the patch version of the project as specified in the top
level CMakeLists.txt file by a :command:`project` command. Please see
:variable:`CMAKE_PROJECT_VERSION` documentation for the behavior when
multiple :command:`project` commands are used in the sources.



/P/🚀 variable/CMAKE_PROJECT_VERSION_TWEAK.rst
====================================================


CMAKE_PROJECT_VERSION_TWEAK
---------------------------

.. versionadded:: 3.12

The tweak version of the top level project.

This variable holds the tweak version of the project as specified in the top
level CMakeLists.txt file by a :command:`project` command. Please see
:variable:`CMAKE_PROJECT_VERSION` documentation for the behavior when
multiple :command:`project` commands are used in the sources.



/P/🚀 variable/CMAKE_RANLIB.rst
=====================================


CMAKE_RANLIB
------------

Name of randomizing tool for static libraries.

This specifies name of the program that randomizes libraries on UNIX,
not used on Windows, but may be present.



/P/🚀 variable/CMAKE_ROOT.rst
===================================


CMAKE_ROOT
----------

Install directory for running cmake.

This is the install root for the running CMake and the ``Modules``
directory can be found here.  This is commonly used in this format:
``${CMAKE_ROOT}/Modules``



/P/🚀 variable/CMAKE_RULE_MESSAGES.rst
============================================


CMAKE_RULE_MESSAGES
-------------------

.. versionadded:: 3.13

Specify whether to report a message for each make rule.

If set in the cache it is used to initialize the value of the :prop_gbl:`RULE_MESSAGES` property.
Users may disable the option in their local build tree to disable granular messages
and report only as each target completes in Makefile builds.



/P/🚀 variable/CMAKE_SCRIPT_MODE_FILE.rst
===============================================


CMAKE_SCRIPT_MODE_FILE
----------------------

Full path to the :option:`cmake -P` script file currently being
processed.

When run in :option:`cmake -P` script mode, CMake sets this variable to
the full path of the script file.  When run to configure a ``CMakeLists.txt``
file, this variable is not set.



/P/🚀 variable/CMAKE_SHARED_LIBRARY_PREFIX.rst
====================================================


CMAKE_SHARED_LIBRARY_PREFIX
---------------------------

The prefix for shared libraries that you link to.

The prefix to use for the name of a shared library, ``lib`` on UNIX.

``CMAKE_SHARED_LIBRARY_PREFIX_<LANG>`` overrides this for language ``<LANG>``.



/P/🚀 variable/CMAKE_SHARED_LIBRARY_SUFFIX.rst
====================================================


CMAKE_SHARED_LIBRARY_SUFFIX
---------------------------

The suffix for shared libraries that you link to.

The suffix to use for the end of a shared library filename, ``.dll`` on
Windows.

``CMAKE_SHARED_LIBRARY_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.



/P/🚀 variable/CMAKE_SHARED_MODULE_PREFIX.rst
===================================================


CMAKE_SHARED_MODULE_PREFIX
--------------------------

The prefix for loadable modules that you link to.

The prefix to use for the name of a loadable module on this platform.

``CMAKE_SHARED_MODULE_PREFIX_<LANG>`` overrides this for language ``<LANG>``.



/P/🚀 variable/CMAKE_SHARED_MODULE_SUFFIX.rst
===================================================


CMAKE_SHARED_MODULE_SUFFIX
--------------------------

The suffix for shared libraries that you link to.

The suffix to use for the end of a loadable module filename on this
platform

``CMAKE_SHARED_MODULE_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.



/P/🚀 variable/CMAKE_SIZEOF_VOID_P.rst
============================================


CMAKE_SIZEOF_VOID_P
-------------------

Size of a ``void`` pointer.

This is set to the size of a pointer on the target machine, and is determined
when a compiled language is enabled.  If a 64-bit size is found, then the
library search path is modified to look for 64-bit libraries first.



/P/🚀 variable/CMAKE_SKIP_INSTALL_RULES.rst
=================================================


CMAKE_SKIP_INSTALL_RULES
------------------------

Whether to disable generation of installation rules.

If ``TRUE``, CMake will neither generate installation rules nor
will it generate ``cmake_install.cmake`` files. This variable is ``FALSE`` by
default.



/P/🚀 variable/CMAKE_SKIP_RPATH.rst
=========================================


CMAKE_SKIP_RPATH
----------------

If true, do not add run time path information.

If this is set to ``TRUE``, then the rpath information is not added to
compiled executables.  The default is to add rpath information if the
platform supports it.  This allows for easy running from the build
tree.  To omit RPATH in the install step, but not the build step, use
:variable:`CMAKE_SKIP_INSTALL_RPATH` instead. To omit RPATH in the build step,
use :variable:`CMAKE_SKIP_BUILD_RPATH`.

For more information on RPATH handling see the :prop_tgt:`INSTALL_RPATH`
and :prop_tgt:`BUILD_RPATH` target properties.



/P/🚀 variable/CMAKE_SOURCE_DIR.rst
=========================================


CMAKE_SOURCE_DIR
----------------

The path to the top level of the source tree.

This is the full path to the top level of the current CMake source
tree.  For an in-source build, this would be the same as
:variable:`CMAKE_BINARY_DIR`.

When run in :option:`cmake -P` script mode, CMake sets the variables
:variable:`CMAKE_BINARY_DIR`, ``CMAKE_SOURCE_DIR``,
:variable:`CMAKE_CURRENT_BINARY_DIR` and
:variable:`CMAKE_CURRENT_SOURCE_DIR` to the current working directory.



/P/🚀 variable/CMAKE_STATIC_LIBRARY_PREFIX.rst
====================================================


CMAKE_STATIC_LIBRARY_PREFIX
---------------------------

The prefix for static libraries that you link to.

The prefix to use for the name of a static library, ``lib`` on UNIX.

``CMAKE_STATIC_LIBRARY_PREFIX_<LANG>`` overrides this for language ``<LANG>``.



/P/🚀 variable/CMAKE_STATIC_LIBRARY_SUFFIX.rst
====================================================


CMAKE_STATIC_LIBRARY_SUFFIX
---------------------------

The suffix for static libraries that you link to.

The suffix to use for the end of a static library filename, ``.lib`` on
Windows.

``CMAKE_STATIC_LIBRARY_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.



/P/🚀 variable/CMAKE_Swift_COMPILATION_MODE.rst
=====================================================


CMAKE_Swift_COMPILATION_MODE
----------------------------

.. versionadded:: 3.29

Specify how Swift compiles a target. This variable is used to initialize the
:prop_tgt:`Swift_COMPILATION_MODE` property on targets as they are created.

The allowed values are:

.. include:: ../prop_tgt/Swift_COMPILATION_MODE-VALUES.txt

Use :manual:`generator expressions <cmake-generator-expressions(7)>` to support
per-configuration specification. For example, the code:

.. code-block:: cmake

   set(CMAKE_Swift_COMPILATION_MODE
     "$<IF:$<CONFIG:Release>,wholemodule,incremental>")

sets the default Swift compilation mode to wholemodule mode when building a
release configuration and to incremental mode in other configurations.

If this variable is not set then the :prop_tgt:`Swift_COMPILATION_MODE` target
property will not be set automatically. If that property is unset then CMake
uses the default value ``incremental`` to build the Swift source files.

.. note::

   This property only has effect when policy :policy:`CMP0157` is set to ``NEW``
   prior to the first :command:`project` or :command:`enable_language` command
   that enables the Swift language.



/P/🚀 variable/CMAKE_Swift_MODULE_DIRECTORY.rst
=====================================================


CMAKE_Swift_MODULE_DIRECTORY
----------------------------

.. versionadded:: 3.15

Swift module output directory.

This variable is used to initialize the :prop_tgt:`Swift_MODULE_DIRECTORY`
property on all the targets.  See the target property for additional
information.



/P/🚀 variable/CMAKE_Swift_NUM_THREADS.rst
================================================


CMAKE_Swift_NUM_THREADS
-----------------------

.. versionadded:: 3.15.1

Number of threads for parallel compilation for Swift targets.

This variable controls the number of parallel jobs that the swift driver creates
for building targets.  If not specified, it will default to the number of
logical CPUs on the host.



/P/🚀 variable/CMAKE_TEST_LAUNCHER.rst
============================================


CMAKE_TEST_LAUNCHER
-------------------

.. versionadded:: 3.29

This variable is used to initialize the :prop_tgt:`TEST_LAUNCHER` target
property of executable targets as they are created.  It is used to specify
a launcher for running tests, added by the :command:`add_test` command,
that run an executable target.

If this variable contains a :ref:`semicolon-separated list <CMake Language
Lists>`, then the first value is the command and remaining values are its
arguments.

This variable can be initialized via an
:envvar:`CMAKE_TEST_LAUNCHER` environment variable.



/P/🚀 variable/CMAKE_TOOLCHAIN_FILE.rst
=============================================


CMAKE_TOOLCHAIN_FILE
--------------------

Path to toolchain file supplied to :manual:`cmake(1)`.

This variable is specified on the command line when cross-compiling with CMake.
It is the path to a file which is read early in the CMake run and which
specifies locations for compilers and toolchain utilities, and other target
platform and compiler related information.

Relative paths are allowed and are interpreted first as relative to the
build directory, and if not found, relative to the source directory.

This is initialized by the :envvar:`CMAKE_TOOLCHAIN_FILE` environment
variable if it is set when a new build tree is first created.

See the :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` variable for setting
other things not directly related to the toolchain.



/P/🚀 variable/CMAKE_TWEAK_VERSION.rst
============================================


CMAKE_TWEAK_VERSION
-------------------

Defined to ``0`` for compatibility with code written for older
CMake versions that may have defined higher values.

.. note::

  In CMake versions 2.8.2 through 2.8.12, this variable holds
  the fourth version number component of the
  :variable:`CMAKE_VERSION` variable.



/P/🚀 variable/CMAKE_VERBOSE_MAKEFILE.rst
===============================================


CMAKE_VERBOSE_MAKEFILE
----------------------

Enable verbose output from Makefile builds.

This variable is a cache entry initialized (to ``FALSE``) by
the :command:`project` command.  Users may enable the option
in their local build tree to get more verbose output from
Makefile builds and show each command line as it is launched.



/P/🚀 variable/CMAKE_VERSION.rst
======================================


CMAKE_VERSION
-------------

The CMake version string as three non-negative integer components
separated by ``.`` and possibly followed by ``-`` and other information.
The first two components represent the feature level and the third
component represents either a bug-fix level or development date.

Release versions and release candidate versions of CMake use the format::

  <major>.<minor>.<patch>[-rc<n>]

where the ``<patch>`` component is less than ``20000000``.  Development
versions of CMake use the format::

  <major>.<minor>.<date>[-<id>]

where the ``<date>`` component is of format ``CCYYMMDD`` and ``<id>``
may contain arbitrary text.  This represents development as of a
particular date following the ``<major>.<minor>`` feature release.

Individual component values are also available in variables:

* :variable:`CMAKE_MAJOR_VERSION`
* :variable:`CMAKE_MINOR_VERSION`
* :variable:`CMAKE_PATCH_VERSION`
* :variable:`CMAKE_TWEAK_VERSION`

Use the :command:`if` command ``VERSION_LESS``, ``VERSION_GREATER``,
``VERSION_EQUAL``, ``VERSION_LESS_EQUAL``, or ``VERSION_GREATER_EQUAL``
operators to compare version string values against ``CMAKE_VERSION`` using a
component-wise test.  Version component values may be 10 or larger so do not
attempt to compare version strings as floating-point numbers.

.. note::

  CMake versions 2.8.2 through 2.8.12 used three components for the
  feature level.  Release versions represented the bug-fix level in a
  fourth component, i.e. ``<major>.<minor>.<patch>[.<tweak>][-rc<n>]``.
  Development versions represented the development date in the fourth
  component, i.e. ``<major>.<minor>.<patch>.<date>[-<id>]``.

  CMake versions prior to 2.8.2 used three components for the
  feature level and had no bug-fix component.  Release versions
  used an even-valued second component, i.e.
  ``<major>.<even-minor>.<patch>[-rc<n>]``.  Development versions
  used an odd-valued second component with the development date as
  the third component, i.e. ``<major>.<odd-minor>.<date>``.

  The ``CMAKE_VERSION`` variable is defined by CMake 2.6.3 and higher.
  Earlier versions defined only the individual component variables.



/P/🚀 variable/CMAKE_VS_DEVENV_COMMAND.rst
================================================


CMAKE_VS_DEVENV_COMMAND
-----------------------

The generators for :generator:`Visual Studio 9 2008` and above set this
variable to the ``devenv.com`` command installed with the corresponding
Visual Studio version.  Note that this variable may be empty on
Visual Studio Express editions because they do not provide this tool.

This variable is not defined by other generators even if ``devenv.com``
is installed on the computer.

The :variable:`CMAKE_VS_MSBUILD_COMMAND` is also provided for
:generator:`Visual Studio 12 2013` and above.
See also the :variable:`CMAKE_MAKE_PROGRAM` variable.



/P/🚀 variable/CMAKE_VS_MSBUILD_COMMAND.rst
=================================================


CMAKE_VS_MSBUILD_COMMAND
------------------------

The generators for :generator:`Visual Studio 12 2013` and above set this
variable to the ``MSBuild.exe`` command installed with the corresponding
Visual Studio version.

This variable is not defined by other generators even if ``MSBuild.exe``
is installed on the computer.

The :variable:`CMAKE_VS_DEVENV_COMMAND` is also provided for the
non-Express editions of Visual Studio.
See also the :variable:`CMAKE_MAKE_PROGRAM` variable.



/P/🚀 variable/CMAKE_VS_NsightTegra_VERSION.rst
=====================================================


CMAKE_VS_NsightTegra_VERSION
----------------------------

.. versionadded:: 3.1

When using a Visual Studio generator with the
:variable:`CMAKE_SYSTEM_NAME` variable set to ``Android``,
this variable contains the version number of the
installed NVIDIA Nsight Tegra Visual Studio Edition.



/P/🚀 variable/CMAKE_VS_NUGET_PACKAGE_RESTORE.rst
=======================================================


CMAKE_VS_NUGET_PACKAGE_RESTORE
------------------------------

.. versionadded:: 3.23

When using a Visual Studio generator, this cache variable controls
if msbuild should automatically attempt to restore NuGet packages
prior to a build. NuGet packages can be defined using the
:prop_tgt:`VS_PACKAGE_REFERENCES` property on a target. If no
package references are defined, this setting will do nothing.

The command line option ``--resolve-package-references`` can be used
alternatively to control the resolve behavior globally. This option
will take precedence over the cache variable.

Targets that use the :prop_tgt:`DOTNET_SDK` are required to run a
restore before building. Disabling this option may cause the build
to fail in such projects.

This setting is stored as a cache entry. Default value is ``ON``.

See also the :prop_tgt:`VS_PACKAGE_REFERENCES` property.



/P/🚀 variable/CMAKE_VS_PLATFORM_NAME.rst
===============================================


CMAKE_VS_PLATFORM_NAME
----------------------

.. versionadded:: 3.1

Visual Studio target platform name used by the current generator.

VS 8 and above allow project files to specify a target platform.
CMake provides the name of the chosen platform in this variable.
See the :variable:`CMAKE_GENERATOR_PLATFORM` variable for details.

See also the :variable:`CMAKE_VS_PLATFORM_NAME_DEFAULT` variable.



/P/🚀 variable/CMAKE_VS_PLATFORM_NAME_DEFAULT.rst
=======================================================


CMAKE_VS_PLATFORM_NAME_DEFAULT
------------------------------

.. versionadded:: 3.14.3

Default for the Visual Studio target platform name for the current generator
without considering the value of the :variable:`CMAKE_GENERATOR_PLATFORM`
variable.  For :ref:`Visual Studio Generators` for VS 2017 and below this is
always ``Win32``.  For VS 2019 and above this is based on the host platform.

See also the :variable:`CMAKE_VS_PLATFORM_NAME` variable.



/P/🚀 variable/CMAKE_VS_PLATFORM_TOOLSET.rst
==================================================


CMAKE_VS_PLATFORM_TOOLSET
-------------------------

Visual Studio Platform Toolset name.

VS 10 and above use MSBuild under the hood and support multiple
compiler toolchains.  CMake may specify a toolset explicitly, such as
``v110`` for VS 11 or ``Windows7.1SDK`` for 64-bit support in VS 10
Express.  CMake provides the name of the chosen toolset in this
variable.

See the :variable:`CMAKE_GENERATOR_TOOLSET` variable for details.



/P/🚀 variable/CMAKE_VS_PLATFORM_TOOLSET_CUDA.rst
=======================================================


CMAKE_VS_PLATFORM_TOOLSET_CUDA
------------------------------

.. versionadded:: 3.9

NVIDIA CUDA Toolkit version whose Visual Studio toolset to use.

The :ref:`Visual Studio Generators` for VS 2010 and above support using
a CUDA toolset provided by a CUDA Toolkit.  The toolset version number
may be specified by a field in :variable:`CMAKE_GENERATOR_TOOLSET` of
the form ``cuda=8.0``. Or it is automatically detected if a path to
a standalone CUDA directory is specified in the form ``cuda=C:\path\to\cuda``.
If none is specified CMake will choose a default version.
CMake provides the selected CUDA toolset version in this variable.
The value may be empty if no CUDA Toolkit with Visual Studio integration
is installed.



/P/🚀 variable/CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR.rst
==================================================================


CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR
-----------------------------------------

.. versionadded:: 3.16

Path to standalone NVIDIA CUDA Toolkit (eg. extracted from installer).

The :ref:`Visual Studio Generators` for VS 2010 and above support using
a standalone (non-installed) NVIDIA CUDA toolkit.  The path
may be specified by a field in :variable:`CMAKE_GENERATOR_TOOLSET` of
the form ``cuda=C:\path\to\cuda``.  The given directory must at least
contain the nvcc compiler in path ``.\bin`` and must provide Visual Studio
integration files in path ``.\extras\visual_studio_integration\
MSBuildExtensions\``. One can create a standalone CUDA toolkit directory by
either opening a installer with 7zip or copying the files that are extracted
by the running installer. The value may be empty if no path to a standalone
CUDA Toolkit was specified.



/P/🚀 variable/CMAKE_VS_PLATFORM_TOOLSET_FORTRAN.rst
==========================================================


CMAKE_VS_PLATFORM_TOOLSET_FORTRAN
---------------------------------

.. versionadded:: 3.29

Fortran compiler to be used by Visual Studio projects.

:ref:`Visual Studio Generators` support selecting among Fortran compilers
whose Visual Studio Integration is installed.  The compiler may be specified
by a field in :variable:`CMAKE_GENERATOR_TOOLSET` of the form ``fortran=...``.
CMake provides the selected Fortran compiler in this variable.
The value may be empty if the field was not specified.



/P/🚀 variable/CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE.rst
====================================================================


CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE
-------------------------------------------

.. versionadded:: 3.8

Visual Studio preferred tool architecture.

The :ref:`Visual Studio Generators` for VS 2013 and above support using
either the 32-bit or 64-bit host toolchains by specifying a ``host=x86``
or ``host=x64`` value in the :variable:`CMAKE_GENERATOR_TOOLSET` option.
CMake provides the selected toolchain architecture preference in this
variable (``x86``, ``x64``, ``ARM64`` or empty).



/P/🚀 variable/CMAKE_VS_PLATFORM_TOOLSET_VERSION.rst
==========================================================


CMAKE_VS_PLATFORM_TOOLSET_VERSION
---------------------------------

.. versionadded:: 3.12

Visual Studio Platform Toolset version.

The :ref:`Visual Studio Generators` for VS 2017 and above allow to
select minor versions of the same toolset. The toolset version number
may be specified by a field in :variable:`CMAKE_GENERATOR_TOOLSET` of
the form ``version=14.11``. If none is specified CMake will choose a default
toolset. The value may be empty if no minor version was selected and the
default is used.

If the value is not empty, it is the version number that MSBuild uses in
its ``Microsoft.VCToolsVersion.*.props`` file names.

.. versionadded:: 3.19.7

   VS 16.9's toolset may also be specified as ``14.28.16.9`` because
   VS 16.10 uses the file name ``Microsoft.VCToolsVersion.14.28.16.9.props``.

Three-Component MSVC Toolset Versions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. versionadded:: 3.19.7

The ``version=`` field may be given a three-component toolset version
such as ``14.28.29910``, and CMake will convert it to the name used by
MSBuild ``Microsoft.VCToolsVersion.*.props`` files.  This is useful
to distinguish between VS 16.8's ``14.28.29333`` toolset and VS 16.9's
``14.28.29910`` toolset.  It also matches ``vcvarsall``'s ``-vcvars_ver=``
behavior.



/P/🚀 variable/CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER.rst
=============================================================


CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER
------------------------------------

.. versionadded:: 3.22

Visual Studio target framework identifier.

In some cases, the :ref:`Visual Studio Generators` may use an explicit value
for the MSBuild ``TargetFrameworkIdentifier`` setting in ``.csproj`` files.
CMake provides the chosen value in this variable.

See also :variable:`CMAKE_VS_TARGET_FRAMEWORK_VERSION` and
:variable:`CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION`.



/P/🚀 variable/CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION.rst
==================================================================


CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION
-----------------------------------------

.. versionadded:: 3.22

Visual Studio target framework targets version.

In some cases, the :ref:`Visual Studio Generators` may use an explicit value
for the MSBuild ``TargetFrameworkTargetsVersion`` setting in ``.csproj`` files.
CMake provides the chosen value in this variable.

See also :variable:`CMAKE_VS_TARGET_FRAMEWORK_VERSION` and
:variable:`CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER`.



/P/🚀 variable/CMAKE_VS_TARGET_FRAMEWORK_VERSION.rst
==========================================================


CMAKE_VS_TARGET_FRAMEWORK_VERSION
---------------------------------

.. versionadded:: 3.22

Visual Studio target framework version.

In some cases, the :ref:`Visual Studio Generators` may use an explicit value
for the MSBuild ``TargetFrameworkVersion`` setting in ``.csproj`` files.
CMake provides the chosen value in this variable.

See the :variable:`CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION` variable
and :prop_tgt:`DOTNET_TARGET_FRAMEWORK_VERSION` target property to
specify custom ``TargetFrameworkVersion`` values for project targets.

See also :variable:`CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER` and
:variable:`CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION`.



/P/🚀 variable/CMAKE_VS_VERSION_BUILD_NUMBER.rst
======================================================


CMAKE_VS_VERSION_BUILD_NUMBER
-----------------------------

.. versionadded:: 3.26

Visual Studio version.

:ref:`Visual Studio Generators` for VS 2017 and above set this
variable to the Visual Studio version build number in the format
``<major>.<minor>.<date>.<build>``.

.. include:: CMAKE_VS_VERSION_BUILD_NUMBER_COMPONENTS.txt

See also the :variable:`CMAKE_GENERATOR_INSTANCE` variable.



/P/🚀 variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION.rst
=====================================================================


CMAKE_VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION
--------------------------------------------

.. versionadded:: 3.27

Tell :ref:`Visual Studio Generators` to use the given
Windows Target Platform Minimum Version.

This variable is used to initialize the
:prop_tgt:`VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION` property on all
targets when they are created.  See that target property for
additional information.



/P/🚀 variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION.rst
=================================================================


CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION
----------------------------------------

.. versionadded:: 3.4

Visual Studio Windows Target Platform Version.

When targeting Windows 10 and above, :ref:`Visual Studio Generators` for
VS 2015 and above support specification of a Windows SDK version:

* If :variable:`CMAKE_GENERATOR_PLATFORM` specifies a ``version=`` field,
  as documented by :ref:`Visual Studio Platform Selection`, that SDK
  version is selected.

* Otherwise, if the ``WindowsSDKVersion`` environment variable
  is set to an available SDK version, that version is selected.
  This is intended for use in environments established by ``vcvarsall.bat``
  or similar scripts.

  .. versionadded:: 3.27
    This is enabled by policy :policy:`CMP0149`.

* Otherwise, if :variable:`CMAKE_SYSTEM_VERSION` is set to an available
  SDK version, that version is selected.

  .. versionchanged:: 3.27
    This is disabled by policy :policy:`CMP0149`.

* Otherwise, CMake uses the latest Windows SDK version available.

The chosen Windows target version number is provided
in ``CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION``.  If no Windows 10 SDK
is available this value will be empty.

One may set a ``CMAKE_WINDOWS_KITS_10_DIR`` *environment variable*
to an absolute path to tell CMake to look for Windows 10 SDKs in
a custom location.  The specified directory is expected to contain
``Include/10.0.*`` directories.

See also :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM`.



/P/🚀 variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM.rst
=========================================================================


CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM
------------------------------------------------

.. versionadded:: 3.19

Override the :ref:`Windows 10 SDK Maximum Version for VS 2015` and beyond.

The ``CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM`` variable may
be set to a false value (e.g. ``OFF``, ``FALSE``, or ``0``) or the SDK version
to use as the maximum (e.g. ``10.0.14393.0``).  If unset, the default depends
on which version of Visual Studio is targeted by the current generator.

This can be used to exclude Windows SDK versions from consideration for
:variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION`.



/P/🚀 variable/CMAKE_XCODE_BUILD_SYSTEM.rst
=================================================


CMAKE_XCODE_BUILD_SYSTEM
------------------------

.. versionadded:: 3.19

Xcode build system selection.

The :generator:`Xcode` generator defines this variable to indicate which
variant of the Xcode build system will be used.  The value is the
version of Xcode in which the corresponding build system first became
mature enough for use by CMake.  The possible values are:

``1``
  The original Xcode build system.
  This is the default when using Xcode 11.x or below and supported
  up to Xcode 13.x.

``12``
  The Xcode "new build system" introduced by Xcode 10.
  It became mature enough for use by CMake in Xcode 12.
  This is the default when using Xcode 12.x or above.

The ``CMAKE_XCODE_BUILD_SYSTEM`` variable is informational and should not
be modified by project code.  See the :ref:`Xcode Build System Selection`
documentation section to select the Xcode build system.



/P/🚀 variable/CMAKE_XCODE_PLATFORM_TOOLSET.rst
=====================================================


CMAKE_XCODE_PLATFORM_TOOLSET
----------------------------

Xcode compiler selection.

:generator:`Xcode` supports selection of a compiler from one of the installed
toolsets.  CMake provides the name of the chosen toolset in this
variable, if any is explicitly selected (e.g.  via the :option:`cmake -T`
option).



/P/🚀 variable/PROJECT-NAME_BINARY_DIR.rst
================================================


<PROJECT-NAME>_BINARY_DIR
-------------------------

Top level binary directory for the named project.

A variable is created with the name used in the :command:`project` command,
and is the binary directory for the project.  This can be useful when
:command:`add_subdirectory` is used to connect several projects.



/P/🚀 variable/PROJECT-NAME_DESCRIPTION.rst
=================================================


<PROJECT-NAME>_DESCRIPTION
--------------------------

.. versionadded:: 3.12

Value given to the ``DESCRIPTION`` option of the most recent call to the
:command:`project` command with project name ``<PROJECT-NAME>``, if any.



/P/🚀 variable/PROJECT-NAME_HOMEPAGE_URL.rst
==================================================


<PROJECT-NAME>_HOMEPAGE_URL
---------------------------

.. versionadded:: 3.12

Value given to the ``HOMEPAGE_URL`` option of the most recent call to the
:command:`project` command with project name ``<PROJECT-NAME>``, if any.



/P/🚀 variable/PROJECT-NAME_IS_TOP_LEVEL.rst
==================================================


<PROJECT-NAME>_IS_TOP_LEVEL
---------------------------

.. versionadded:: 3.21

A boolean variable indicating whether the named project was called in a top
level ``CMakeLists.txt`` file.

To obtain the value from the most recent call to :command:`project` in
the current directory scope or above, see the
:variable:`PROJECT_IS_TOP_LEVEL` variable.

The variable value will be true in:

* the top-level directory of the project
* the top-level directory of an external project added by
  :module:`ExternalProject`
* a directory added by :command:`add_subdirectory` that does not also contain
  a :command:`project` call
* a directory added by :command:`FetchContent_MakeAvailable`,
  if the fetched content does not contain a :command:`project` call

The variable value will be false in:

* a directory added by :command:`add_subdirectory` that also contains
  a :command:`project` call
* a directory added by :command:`FetchContent_MakeAvailable`,
  if the fetched content contains a :command:`project` call



/P/🚀 variable/PROJECT-NAME_SOURCE_DIR.rst
================================================


<PROJECT-NAME>_SOURCE_DIR
-------------------------

Top level source directory for the named project.

A variable is created with the name used in the :command:`project` command,
and is the source directory for the project.  This can be useful when
:command:`add_subdirectory` is used to connect several projects.



/P/🚀 variable/PROJECT-NAME_VERSION.rst
=============================================


<PROJECT-NAME>_VERSION
----------------------

Value given to the ``VERSION`` option of the most recent call to the
:command:`project` command with project name ``<PROJECT-NAME>``, if any.

See also the component-wise version variables
:variable:`<PROJECT-NAME>_VERSION_MAJOR`,
:variable:`<PROJECT-NAME>_VERSION_MINOR`,
:variable:`<PROJECT-NAME>_VERSION_PATCH`, and
:variable:`<PROJECT-NAME>_VERSION_TWEAK`.



/P/🚀 variable/PROJECT-NAME_VERSION_MAJOR.rst
===================================================


<PROJECT-NAME>_VERSION_MAJOR
----------------------------

First version number component of the :variable:`<PROJECT-NAME>_VERSION`
variable as set by the :command:`project` command.



/P/🚀 variable/PROJECT-NAME_VERSION_MINOR.rst
===================================================


<PROJECT-NAME>_VERSION_MINOR
----------------------------

Second version number component of the :variable:`<PROJECT-NAME>_VERSION`
variable as set by the :command:`project` command.



/P/🚀 variable/PROJECT-NAME_VERSION_PATCH.rst
===================================================


<PROJECT-NAME>_VERSION_PATCH
----------------------------

Third version number component of the :variable:`<PROJECT-NAME>_VERSION`
variable as set by the :command:`project` command.



/P/🚀 variable/PROJECT-NAME_VERSION_TWEAK.rst
===================================================


<PROJECT-NAME>_VERSION_TWEAK
----------------------------

Fourth version number component of the :variable:`<PROJECT-NAME>_VERSION`
variable as set by the :command:`project` command.



/P/🚀 variable/PROJECT_BINARY_DIR.rst
===========================================


PROJECT_BINARY_DIR
------------------

Full path to build directory for project.

This is the binary directory of the most recent :command:`project` command.



/P/🚀 variable/PROJECT_DESCRIPTION.rst
============================================


PROJECT_DESCRIPTION
-------------------

.. versionadded:: 3.9

Short project description given to the project command.

This is the description given to the most recently called :command:`project`
command in the current directory scope or above.  To obtain the description
of the top level project, see the :variable:`CMAKE_PROJECT_DESCRIPTION`
variable.



/P/🚀 variable/PROJECT_HOMEPAGE_URL.rst
=============================================


PROJECT_HOMEPAGE_URL
--------------------

.. versionadded:: 3.12

The homepage URL of the project.

This is the homepage URL given to the most recently called :command:`project`
command in the current directory scope or above.  To obtain the homepage URL
of the top level project, see the :variable:`CMAKE_PROJECT_HOMEPAGE_URL`
variable.



/P/🚀 variable/PROJECT_IS_TOP_LEVEL.rst
=============================================


PROJECT_IS_TOP_LEVEL
--------------------

.. versionadded:: 3.21

A boolean variable indicating whether the most recently called
:command:`project` command in the current scope or above was in the top
level ``CMakeLists.txt`` file.

Some modules should only be included as part of the top level
``CMakeLists.txt`` file to not cause unintended side effects in the build
tree, and this variable can be used to conditionally execute such code. For
example, consider the :module:`CTest` module, which creates targets and
options:

.. code-block:: cmake

  project(MyProject)
  ...
  if(PROJECT_IS_TOP_LEVEL)
    include(CTest)
  endif()

The variable value will be true in:

* the top-level directory of the project
* the top-level directory of an external project added by
  :module:`ExternalProject`
* a directory added by :command:`add_subdirectory` that does not also contain
  a :command:`project` call
* a directory added by :command:`FetchContent_MakeAvailable`,
  if the fetched content does not contain a :command:`project` call

The variable value will be false in:

* a directory added by :command:`add_subdirectory` that also contains
  a :command:`project` call
* a directory added by :command:`FetchContent_MakeAvailable`,
  if the fetched content contains a :command:`project` call



/P/🚀 variable/PROJECT_NAME.rst
=====================================


PROJECT_NAME
------------

Name of the project given to the project command.

This is the name given to the most recently called :command:`project`
command in the current directory scope or above.  To obtain the name of
the top level project, see the :variable:`CMAKE_PROJECT_NAME` variable.



/P/🚀 variable/PROJECT_SOURCE_DIR.rst
===========================================


PROJECT_SOURCE_DIR
------------------

This is the source directory of the last call to the
:command:`project` command made in the current directory scope or one
of its parents. Note, it is not affected by calls to
:command:`project` made within a child directory scope (i.e. from
within a call to :command:`add_subdirectory` from the current scope).



/P/🚀 variable/PROJECT_VERSION.rst
========================================


PROJECT_VERSION
---------------

Value given to the ``VERSION`` option of the most recent call to the
:command:`project` command, if any.

See also the component-wise version variables
:variable:`PROJECT_VERSION_MAJOR`,
:variable:`PROJECT_VERSION_MINOR`,
:variable:`PROJECT_VERSION_PATCH`, and
:variable:`PROJECT_VERSION_TWEAK`.



/P/🚀 variable/PROJECT_VERSION_MAJOR.rst
==============================================


PROJECT_VERSION_MAJOR
---------------------

First version number component of the :variable:`PROJECT_VERSION`
variable as set by the :command:`project` command.



/P/🚀 variable/PROJECT_VERSION_MINOR.rst
==============================================


PROJECT_VERSION_MINOR
---------------------

Second version number component of the :variable:`PROJECT_VERSION`
variable as set by the :command:`project` command.



/P/🚀 variable/PROJECT_VERSION_PATCH.rst
==============================================


PROJECT_VERSION_PATCH
---------------------

Third version number component of the :variable:`PROJECT_VERSION`
variable as set by the :command:`project` command.



/P/🚀 variable/PROJECT_VERSION_TWEAK.rst
==============================================


PROJECT_VERSION_TWEAK
---------------------

Fourth version number component of the :variable:`PROJECT_VERSION`
variable as set by the :command:`project` command.



/P/🚀 variable/BUILD_SHARED_LIBS.rst
==========================================


BUILD_SHARED_LIBS
-----------------

Tell :command:`add_library` to default to ``SHARED`` libraries,
instead of ``STATIC`` libraries, when called with no explicit library type.

Calls to :command:`add_library` without any explicit library type check
the current ``BUILD_SHARED_LIBS`` variable value.  If it is true, then the
default library type is ``SHARED``.  Otherwise, the default is ``STATIC``.

For example, the code:

.. code-block:: cmake

  add_library(example ${sources})

behaves as if written

.. code-block:: cmake

  if(BUILD_SHARED_LIBS)
    add_library(example SHARED ${sources})
  else()
    add_library(example STATIC ${sources})
  endif()

CMake does not define ``BUILD_SHARED_LIBS`` by default, but projects
often create a cache entry for it using the :command:`option` command:

.. code-block:: cmake

  option(BUILD_SHARED_LIBS "Build using shared libraries" ON)

This provides a switch that users can control, e.g., with :option:`cmake -D`.
If adding such an option to the project, do so in the top level
``CMakeLists.txt`` file, before any :command:`add_library` calls.
Note that if bringing external dependencies directly into the build, such as
with :module:`FetchContent` or a direct call to :command:`add_subdirectory`,
and one of those dependencies has such a call to
:command:`option(BUILD_SHARED_LIBS ...) <option>`, the top level project must
also call :command:`option(BUILD_SHARED_LIBS ...) <option>` before bringing in
its dependencies.  Failure to do so can lead to different behavior between the
first and subsequent CMake runs.



/P/🚀 variable/CMAKE_ABSOLUTE_DESTINATION_FILES.rst
=========================================================


CMAKE_ABSOLUTE_DESTINATION_FILES
--------------------------------

List of files which have been installed using an ``ABSOLUTE DESTINATION`` path.

This variable is defined by CMake-generated ``cmake_install.cmake``
scripts.  It can be used (read-only) by programs or scripts that
source those install scripts.  This is used by some CPack generators
(e.g.  RPM).



/P/🚀 variable/CMAKE_ADD_CUSTOM_COMMAND_DEPENDS_EXPLICIT_ONLY.rst
=======================================================================


CMAKE_ADD_CUSTOM_COMMAND_DEPENDS_EXPLICIT_ONLY
----------------------------------------------

.. versionadded:: 3.27

Whether to enable the ``DEPENDS_EXPLICIT_ONLY`` option by default in
:command:`add_custom_command`.

This variable affects the default behavior of the :command:`add_custom_command`
command.  Setting this variable to ``ON`` is equivalent to using the
``DEPENDS_EXPLICIT_ONLY`` option in all uses of that command.

See also :variable:`CMAKE_OPTIMIZE_DEPENDENCIES`.



/P/🚀 variable/CMAKE_APPBUNDLE_PATH.rst
=============================================


CMAKE_APPBUNDLE_PATH
--------------------

:ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path
for macOS application bundles used by the :command:`find_program`, and
:command:`find_package` commands.

There is also an environment variable :envvar:`CMAKE_APPBUNDLE_PATH`, which is used
as an additional list of search directories.



/P/🚀 variable/CMAKE_BUILD_TYPE.rst
=========================================


CMAKE_BUILD_TYPE
----------------

Specifies the build type on single-configuration generators (e.g.
:ref:`Makefile Generators` or :generator:`Ninja`).  Typical values include
``Debug``, ``Release``, ``RelWithDebInfo`` and ``MinSizeRel``, but custom
build types can also be defined.

This variable is initialized by the first :command:`project` or
:command:`enable_language` command called in a project when a new build
tree is first created.  If the :envvar:`CMAKE_BUILD_TYPE` environment
variable is set, its value is used.  Otherwise, a toolchain-specific
default is chosen when a language is enabled.  The default value is often
an empty string, but this is usually not desirable and one of the other
standard build types is usually more appropriate.

Depending on the situation, the value of this variable may be treated
case-sensitively or case-insensitively.  See :ref:`Build Configurations`
for discussion of this and other related topics.

For multi-config generators, see :variable:`CMAKE_CONFIGURATION_TYPES`.



/P/🚀 variable/CMAKE_CLANG_VFS_OVERLAY.rst
================================================


CMAKE_CLANG_VFS_OVERLAY
-----------------------

.. versionadded:: 3.19

When cross compiling for windows with clang-cl, this variable can be an
absolute path pointing to a clang virtual file system yaml file, which
will enable clang-cl to resolve windows header names on a case sensitive
file system.



/P/🚀 variable/CMAKE_CODEBLOCKS_COMPILER_ID.rst
=====================================================


CMAKE_CODEBLOCKS_COMPILER_ID
----------------------------

.. versionadded:: 3.11

Change the compiler id in the generated CodeBlocks project files.

CodeBlocks uses its own compiler id string which differs from
:variable:`CMAKE_<LANG>_COMPILER_ID`.  If this variable is left empty,
CMake tries to recognize the CodeBlocks compiler id automatically.
Otherwise the specified string is used in the CodeBlocks project file.
See the CodeBlocks documentation for valid compiler id strings.

Other IDEs like QtCreator that also use the CodeBlocks generator may ignore
this setting.



/P/🚀 variable/CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES.rst
================================================================


CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES
---------------------------------------

.. versionadded:: 3.10

Change the way the CodeBlocks generator creates project files.

If this variable evaluates to ``ON`` the generator excludes from
the project file any files that are located outside the project root.



/P/🚀 variable/CMAKE_CODELITE_USE_TARGETS.rst
===================================================


CMAKE_CODELITE_USE_TARGETS
--------------------------

.. versionadded:: 3.7

Change the way the CodeLite generator creates projectfiles.

If this variable evaluates to ``ON`` at the end of the top-level
``CMakeLists.txt`` file, the generator creates projectfiles based on targets
rather than projects.



/P/🚀 variable/CMAKE_COLOR_DIAGNOSTICS.rst
================================================


CMAKE_COLOR_DIAGNOSTICS
-----------------------

.. versionadded:: 3.24

Enable color diagnostics throughout.

This variable uses three states: ``ON``, ``OFF`` and not defined.

When not defined:

* :ref:`Makefile Generators` initialize the :variable:`CMAKE_COLOR_MAKEFILE`
  variable to ``ON``.  It controls color buildsystem messages.

* GNU/Clang compilers are not invoked with any color diagnostics flag.

When ``ON``:

* :ref:`Makefile Generators` produce color buildsystem messages by default.
  :variable:`CMAKE_COLOR_MAKEFILE` is not initialized, but may be
  explicitly set to ``OFF`` to disable color buildsystem messages.

* GNU/Clang compilers are invoked with a flag enabling color diagnostics
  (``-fcolor-diagnostics``).

When ``OFF``:

* :ref:`Makefile Generators` do not produce color buildsystem messages by
  default.  :variable:`CMAKE_COLOR_MAKEFILE` is not initialized, but may be
  explicitly set to ``ON`` to enable color buildsystem messages.

* GNU/Clang compilers are invoked with a flag disabling color diagnostics
  (``-fno-color-diagnostics``).

If the :envvar:`CMAKE_COLOR_DIAGNOSTICS` environment variable is set, its
value is used.  Otherwise, ``CMAKE_COLOR_DIAGNOSTICS`` is not defined by
default.



/P/🚀 variable/CMAKE_COLOR_MAKEFILE.rst
=============================================


CMAKE_COLOR_MAKEFILE
--------------------

Enables color output when using the :ref:`Makefile Generators`.

When enabled, the generated Makefiles will produce colored output.
Default is ``ON``.



/P/🚀 variable/CMAKE_CONFIGURATION_TYPES.rst
==================================================


CMAKE_CONFIGURATION_TYPES
-------------------------

Specifies the available build types (configurations) on multi-config
generators (e.g. :ref:`Visual Studio <Visual Studio Generators>`,
:generator:`Xcode`, or :generator:`Ninja Multi-Config`) as a
:ref:`semicolon-separated list <CMake Language Lists>`.  Typical entries
include ``Debug``, ``Release``, ``RelWithDebInfo`` and ``MinSizeRel``,
but custom build types can also be defined.

This variable is initialized by the first :command:`project` or
:command:`enable_language` command called in a project when a new build
tree is first created.  If the :envvar:`CMAKE_CONFIGURATION_TYPES`
environment variable is set, its value is used.  Otherwise, the default
value is generator-specific.

Depending on the situation, the values in this variable may be treated
case-sensitively or case-insensitively.  See :ref:`Build Configurations`
for discussion of this and other related topics.

For single-config generators, see :variable:`CMAKE_BUILD_TYPE`.



/P/🚀 variable/CMAKE_DEPENDS_IN_PROJECT_ONLY.rst
======================================================


CMAKE_DEPENDS_IN_PROJECT_ONLY
-----------------------------

.. versionadded:: 3.6

When set to ``TRUE`` in a directory, the build system produced by the
:ref:`Makefile Generators` is set up to only consider dependencies on source
files that appear either in the source or in the binary directories.  Changes
to source files outside of these directories will not cause rebuilds.

This should be used carefully in cases where some source files are picked up
through external headers during the build.



/P/🚀 variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName.rst
===============================================================


CMAKE_DISABLE_FIND_PACKAGE_<PackageName>
----------------------------------------

Variable for disabling :command:`find_package` calls.

Every non-``REQUIRED`` :command:`find_package` call in a project can be
disabled by setting the variable
``CMAKE_DISABLE_FIND_PACKAGE_<PackageName>`` to ``TRUE``.
This can be used to build a project without an optional package,
although that package is installed.

This switch should be used during the initial CMake run.  Otherwise if
the package has already been found in a previous CMake run, the
variables which have been stored in the cache will still be there.  In
that case it is recommended to remove the cache variables for this
package from the cache using the cache editor or :option:`cmake -U`.

Note that this variable can lead to inconsistent results within the project.
Consider the case where a dependency is requested via :command:`find_package`
from two different places within the project.  If the first call does not
have the ``REQUIRED`` keyword, it will not find the dependency when
``CMAKE_DISABLE_FIND_PACKAGE_<PackageName>`` is set to true for that
dependency.  The project will proceed under the assumption that the dependency
isn't available.  If the second call elsewhere in the project *does* have the
``REQUIRED`` keyword, it can succeed.  Two different parts of the same project
have then seen opposite results for the same dependency.

See also the :variable:`CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>` variable.



/P/🚀 variable/CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES.rst
================================================================


CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES
---------------------------------------

.. versionadded:: 3.6

This cache variable is used by the Eclipse project generator.  See
:manual:`cmake-generators(7)`.

The Eclipse project generator generates so-called linked resources
e.g. to the subproject root dirs in the source tree or to the source files
of targets.
This can be disabled by setting this variable to FALSE.



/P/🚀 variable/CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT.rst
==============================================================


CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT
-------------------------------------

.. versionadded:: 3.6

This cache variable is used by the Eclipse project generator.  See
:manual:`cmake-generators(7)`.

If this variable is set to TRUE, the Eclipse project generator will generate
an Eclipse project in :variable:`CMAKE_SOURCE_DIR` . This project can then
be used in Eclipse e.g. for the version control functionality.
``CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT`` defaults to ``FALSE``; so
nothing is written into the source directory.



/P/🚀 variable/CMAKE_ECLIPSE_MAKE_ARGUMENTS.rst
=====================================================


CMAKE_ECLIPSE_MAKE_ARGUMENTS
----------------------------

.. versionadded:: 3.6

This cache variable is used by the Eclipse project generator.  See
:manual:`cmake-generators(7)`.

This variable holds arguments which are used when Eclipse invokes the make
tool. By default it is initialized to hold flags to enable parallel builds
(using -j typically).



/P/🚀 variable/CMAKE_ECLIPSE_RESOURCE_ENCODING.rst
========================================================


CMAKE_ECLIPSE_RESOURCE_ENCODING
-------------------------------

.. versionadded:: 3.16

This cache variable tells the :generator:`Eclipse CDT4` project generator
to set the resource encoding to the given value in generated project files.
If no value is given, no encoding will be set.



/P/🚀 variable/CMAKE_ECLIPSE_VERSION.rst
==============================================


CMAKE_ECLIPSE_VERSION
---------------------

.. versionadded:: 3.6

This cache variable is used by the Eclipse project generator.  See
:manual:`cmake-generators(7)`.

When using the Eclipse project generator, CMake tries to find the Eclipse
executable and detect the version of it. Depending on the version it finds,
some features are enabled or disabled. If CMake doesn't find
Eclipse, it assumes the oldest supported version, Eclipse Callisto (3.2).



/P/🚀 variable/CMAKE_ERROR_DEPRECATED.rst
===============================================


CMAKE_ERROR_DEPRECATED
----------------------

Whether to issue errors for deprecated functionality.

If ``TRUE``, use of deprecated functionality will issue fatal errors.
If this variable is not set, CMake behaves as if it were set to ``FALSE``.



/P/🚀 variable/CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION.rst
====================================================================


CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION
-------------------------------------------

Ask ``cmake_install.cmake`` script to error out as soon as a file with
absolute ``INSTALL DESTINATION`` is encountered.

The fatal error is emitted before the installation of the offending
file takes place.  This variable is used by CMake-generated
``cmake_install.cmake`` scripts.  If one sets this variable to ``ON`` while
running the script, it may get fatal error messages from the script.



/P/🚀 variable/CMAKE_EXECUTE_PROCESS_COMMAND_ECHO.rst
===========================================================


CMAKE_EXECUTE_PROCESS_COMMAND_ECHO
----------------------------------

.. versionadded:: 3.15

If this variable is set to ``STDERR``, ``STDOUT`` or ``NONE`` then commands
in :command:`execute_process` calls will be printed to either stderr or
stdout or not at all.



/P/🚀 variable/CMAKE_EXPORT_COMPILE_COMMANDS.rst
======================================================


CMAKE_EXPORT_COMPILE_COMMANDS
-----------------------------

.. versionadded:: 3.5

Enable/Disable output of compile commands during generation.

If enabled, generates a ``compile_commands.json`` file containing the exact
compiler calls for all translation units of the project in machine-readable
form.  The format of the JSON file looks like:

.. code-block:: javascript

  [
    {
      "directory": "/home/user/development/project",
      "command": "/usr/bin/c++ ... -c ../foo/foo.cc",
      "file": "../foo/foo.cc",
      "output": "../foo.dir/foo.cc.o"
    },

    ...

    {
      "directory": "/home/user/development/project",
      "command": "/usr/bin/c++ ... -c ../foo/bar.cc",
      "file": "../foo/bar.cc",
      "output": "../foo.dir/bar.cc.o"
    }
  ]

This is initialized by the :envvar:`CMAKE_EXPORT_COMPILE_COMMANDS` environment
variable, and initializes the :prop_tgt:`EXPORT_COMPILE_COMMANDS` target
property for all targets.

.. note::
  This option is implemented only by :ref:`Makefile Generators`
  and :ref:`Ninja Generators`.  It is ignored on other generators.

  This option currently does not work well in combination with
  the :prop_tgt:`UNITY_BUILD` target property or the
  :variable:`CMAKE_UNITY_BUILD` variable.



/P/🚀 variable/CMAKE_EXPORT_PACKAGE_REGISTRY.rst
======================================================


CMAKE_EXPORT_PACKAGE_REGISTRY
-----------------------------

.. versionadded:: 3.15

Enables the :command:`export(PACKAGE)` command when :policy:`CMP0090`
is set to ``NEW``.

The :command:`export(PACKAGE)` command does nothing by default.  In some cases
it is desirable to write to the user package registry, so the
``CMAKE_EXPORT_PACKAGE_REGISTRY`` variable may be set to enable it.

If :policy:`CMP0090` is *not* set to ``NEW`` this variable does nothing, and
the :variable:`CMAKE_EXPORT_NO_PACKAGE_REGISTRY` variable controls the behavior
instead.

See also :ref:`Disabling the Package Registry`.



/P/🚀 variable/CMAKE_EXPORT_NO_PACKAGE_REGISTRY.rst
=========================================================


CMAKE_EXPORT_NO_PACKAGE_REGISTRY
--------------------------------

.. versionadded:: 3.1

Disable the :command:`export(PACKAGE)` command when :policy:`CMP0090`
is not set to ``NEW``.

In some cases, for example for packaging and for system wide
installations, it is not desirable to write the user package registry.
If the ``CMAKE_EXPORT_NO_PACKAGE_REGISTRY`` variable is enabled,
the :command:`export(PACKAGE)` command will do nothing.

If :policy:`CMP0090` is set to ``NEW`` this variable does nothing, and the
:variable:`CMAKE_EXPORT_PACKAGE_REGISTRY` variable controls the behavior
instead.

See also :ref:`Disabling the Package Registry`.



/P/🚀 variable/CMAKE_FIND_APPBUNDLE.rst
=============================================


CMAKE_FIND_APPBUNDLE
--------------------

.. versionadded:: 3.4

This variable affects how ``find_*`` commands choose between
macOS Application Bundles and unix-style package components.

On Darwin or systems supporting macOS Application Bundles, the
``CMAKE_FIND_APPBUNDLE`` variable can be set to empty or
one of the following:

``FIRST``
  Try to find application bundles before standard programs.
  This is the default on Darwin.

``LAST``
  Try to find application bundles after standard programs.

``ONLY``
  Only try to find application bundles.

``NEVER``
  Never try to find application bundles.



/P/🚀 variable/CMAKE_FIND_FRAMEWORK.rst
=============================================


CMAKE_FIND_FRAMEWORK
--------------------

.. versionadded:: 3.4

This variable affects how ``find_*`` commands choose between
macOS Frameworks and unix-style package components.

On Darwin or systems supporting macOS Frameworks, the
``CMAKE_FIND_FRAMEWORK`` variable can be set to empty or
one of the following:

``FIRST``
  Try to find frameworks before standard libraries or headers.
  This is the default on Darwin.

``LAST``
  Try to find frameworks after standard libraries or headers.

``ONLY``
  Only try to find frameworks.

``NEVER``
  Never try to find frameworks.



/P/🚀 variable/CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX.rst
=============================================================


CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX
------------------------------------

.. versionadded:: 3.9

Specify a ``<suffix>`` to tell the :command:`find_library` command to
search in a ``lib<suffix>`` directory before each ``lib`` directory that
would normally be searched.

This overrides the behavior of related global properties:

* :prop_gbl:`FIND_LIBRARY_USE_LIB32_PATHS`
* :prop_gbl:`FIND_LIBRARY_USE_LIB64_PATHS`
* :prop_gbl:`FIND_LIBRARY_USE_LIBX32_PATHS`



/P/🚀 variable/CMAKE_FIND_LIBRARY_PREFIXES.rst
====================================================


CMAKE_FIND_LIBRARY_PREFIXES
---------------------------

Prefixes to prepend when looking for libraries.

This specifies what prefixes to add to library names when the
:command:`find_library` command looks for libraries.  On UNIX systems this is
typically ``lib``, meaning that when trying to find the ``foo`` library it
will look for ``libfoo``.



/P/🚀 variable/CMAKE_FIND_LIBRARY_SUFFIXES.rst
====================================================


CMAKE_FIND_LIBRARY_SUFFIXES
---------------------------

Suffixes to append when looking for libraries.

This specifies what suffixes to add to library names when the
:command:`find_library` command looks for libraries.  On Windows systems this
is typically ``.lib`` and, depending on the compiler, ``.dll.lib``, ``.dll.a``,
``.a`` (e.g. rustc, GCC, or Clang), so when it tries to find the ``foo``
library, it will look for ``[<prefix>]foo[.dll].lib`` and/or
``[<prefix>]foo[.dll].a``, depending on the compiler used and the ``<prefix>``
specified in the :variable:`CMAKE_FIND_LIBRARY_PREFIXES`.



/P/🚀 variable/CMAKE_FIND_NO_INSTALL_PREFIX.rst
=====================================================


CMAKE_FIND_NO_INSTALL_PREFIX
----------------------------

Exclude the values of the :variable:`CMAKE_INSTALL_PREFIX` and
:variable:`CMAKE_STAGING_PREFIX` variables from
:variable:`CMAKE_SYSTEM_PREFIX_PATH`.  CMake adds these project-destination
prefixes to :variable:`CMAKE_SYSTEM_PREFIX_PATH` by default in order to
support building a series of dependent packages and installing them into
a common prefix.  Set ``CMAKE_FIND_NO_INSTALL_PREFIX`` to ``TRUE``
to suppress this behavior.

The :variable:`CMAKE_SYSTEM_PREFIX_PATH` is initialized on the first call to a
:command:`project` or :command:`enable_language` command.  Therefore one must
set ``CMAKE_FIND_NO_INSTALL_PREFIX`` before this in order to take effect.  A
user may set the variable as a cache entry on the command line to achieve this.

Note that the prefix(es) may still be searched for other reasons, such as being
the same prefix as the CMake installation, or for being a built-in system
prefix.



/P/🚀 variable/CMAKE_FIND_PACKAGE_PREFER_CONFIG.rst
=========================================================


CMAKE_FIND_PACKAGE_PREFER_CONFIG
---------------------------------

.. versionadded:: 3.15

Tell :command:`find_package` to try "Config" mode before "Module" mode if no
mode was specified.

The command :command:`find_package` operates without an explicit mode when
the reduced signature is used without the ``MODULE`` option. In this case,
by default, CMake first tries Module mode by searching for a
``Find<pkg>.cmake`` module.  If it fails, CMake then searches for the package
using Config mode.

Set ``CMAKE_FIND_PACKAGE_PREFER_CONFIG`` to ``TRUE`` to tell
:command:`find_package` to first search using Config mode before falling back
to Module mode.

This variable may be useful when a developer has compiled a custom version of
a common library and wishes to link it to a dependent project.  If this
variable is set to ``TRUE``, it would prevent a dependent project's call
to :command:`find_package` from selecting the default library located by the
system's ``Find<pkg>.cmake`` module before finding the developer's custom
built library.

Once this variable is set, it is the responsibility of the exported
``<pkg>Config.cmake`` files to provide the same result variables as the
``Find<pkg>.cmake`` modules so that dependent projects can use them
interchangeably.



/P/🚀 variable/CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS.rst
============================================================


CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS
-----------------------------------

.. versionadded:: 3.14

Set to ``TRUE`` to tell :command:`find_package` calls to resolve symbolic
links in the value of ``<PackageName>_DIR``.

This is helpful in use cases where the package search path points at a
proxy directory in which symlinks to the real package locations appear.
This is not enabled by default because there are also common use cases
in which the symlinks should be preserved.



/P/🚀 variable/CMAKE_FIND_PACKAGE_TARGETS_GLOBAL.rst
==========================================================


CMAKE_FIND_PACKAGE_TARGETS_GLOBAL
---------------------------------

.. versionadded:: 3.24

Setting to ``TRUE`` promotes all :prop_tgt:`IMPORTED` targets discoverd
by :command:`find_package` to a ``GLOBAL`` scope.


Setting this to ``TRUE`` is akin to specifying ``GLOBAL``
as an argument to :command:`find_package`.
Default value is ``OFF``.



/P/🚀 variable/CMAKE_FIND_PACKAGE_WARN_NO_MODULE.rst
==========================================================


CMAKE_FIND_PACKAGE_WARN_NO_MODULE
---------------------------------

Tell :command:`find_package` to warn if called without an explicit mode.

If :command:`find_package` is called without an explicit mode option
(``MODULE``, ``CONFIG``, or ``NO_MODULE``) and no ``Find<pkg>.cmake`` module
is in :variable:`CMAKE_MODULE_PATH` then CMake implicitly assumes that the
caller intends to search for a package configuration file.  If no package
configuration file is found then the wording of the failure message
must account for both the case that the package is really missing and
the case that the project has a bug and failed to provide the intended
Find module.  If instead the caller specifies an explicit mode option
then the failure message can be more specific.

Set ``CMAKE_FIND_PACKAGE_WARN_NO_MODULE`` to ``TRUE`` to tell
:command:`find_package` to warn when it implicitly assumes Config mode.  This
helps developers enforce use of an explicit mode in all calls to
:command:`find_package` within a project.

This variable has no effect if :variable:`CMAKE_FIND_PACKAGE_PREFER_CONFIG` is
set to ``TRUE``.



/P/🚀 variable/CMAKE_FIND_ROOT_PATH.rst
=============================================


CMAKE_FIND_ROOT_PATH
--------------------

:ref:`Semicolon-separated list <CMake Language Lists>` of root paths to search on the filesystem.

This variable is most useful when cross-compiling. CMake uses the paths in
this list as alternative roots to find filesystem items with
:command:`find_package`, :command:`find_library` etc.



/P/🚀 variable/CMAKE_FIND_ROOT_PATH_MODE_INCLUDE.rst
==========================================================


CMAKE_FIND_ROOT_PATH_MODE_INCLUDE
---------------------------------

.. |FIND_XXX| replace:: :command:`find_file` and :command:`find_path`

.. include:: CMAKE_FIND_ROOT_PATH_MODE_XXX.txt



/P/🚀 variable/CMAKE_FIND_ROOT_PATH_MODE_LIBRARY.rst
==========================================================


CMAKE_FIND_ROOT_PATH_MODE_LIBRARY
---------------------------------

.. |FIND_XXX| replace:: :command:`find_library`

.. include:: CMAKE_FIND_ROOT_PATH_MODE_XXX.txt



/P/🚀 variable/CMAKE_FIND_ROOT_PATH_MODE_PACKAGE.rst
==========================================================


CMAKE_FIND_ROOT_PATH_MODE_PACKAGE
---------------------------------

.. |FIND_XXX| replace:: :command:`find_package`

.. include:: CMAKE_FIND_ROOT_PATH_MODE_XXX.txt



/P/🚀 variable/CMAKE_FIND_ROOT_PATH_MODE_PROGRAM.rst
==========================================================


CMAKE_FIND_ROOT_PATH_MODE_PROGRAM
---------------------------------

.. |FIND_XXX| replace:: :command:`find_program`

.. include:: CMAKE_FIND_ROOT_PATH_MODE_XXX.txt



/P/🚀 variable/CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH.rst
==============================================================


CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH
-------------------------------------

.. versionadded:: 3.16

Controls the default behavior of the following commands for whether or not to
search paths provided by cmake-specific environment variables:

* :command:`find_program`
* :command:`find_library`
* :command:`find_file`
* :command:`find_path`
* :command:`find_package`

This is useful in cross-compiling environments.

By default this variable is not set, which is equivalent to it having
a value of ``TRUE``.  Explicit options given to the above commands
take precedence over this variable.

See also the :variable:`CMAKE_FIND_USE_CMAKE_PATH`,
:variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH`,
:variable:`CMAKE_FIND_USE_INSTALL_PREFIX`,
:variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`,
:variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`,
:variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY`,
and :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` variables.



/P/🚀 variable/CMAKE_FIND_USE_CMAKE_PATH.rst
==================================================


CMAKE_FIND_USE_CMAKE_PATH
-------------------------

.. versionadded:: 3.16

Controls the default behavior of the following commands for whether or not to
search paths provided by cmake-specific cache variables:

* :command:`find_program`
* :command:`find_library`
* :command:`find_file`
* :command:`find_path`
* :command:`find_package`

This is useful in cross-compiling environments.

By default this variable is not set, which is equivalent to it having
a value of ``TRUE``.  Explicit options given to the above commands
take precedence over this variable.

See also the :variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`,
:variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH`,
:variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`,
:variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`,
:variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY`,
and :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` variables.



/P/🚀 variable/CMAKE_FIND_USE_CMAKE_SYSTEM_PATH.rst
=========================================================


CMAKE_FIND_USE_CMAKE_SYSTEM_PATH
--------------------------------

.. versionadded:: 3.16

Controls the default behavior of the following commands for whether or not to
search paths provided by platform-specific cmake variables:

* :command:`find_program`
* :command:`find_library`
* :command:`find_file`
* :command:`find_path`
* :command:`find_package`

This is useful in cross-compiling environments.

By default this variable is not set, which is equivalent to it having
a value of ``TRUE``.  Explicit options given to the above commands
take precedence over this variable.

See also the :variable:`CMAKE_FIND_USE_CMAKE_PATH`,
:variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`,
:variable:`CMAKE_FIND_USE_INSTALL_PREFIX`,
:variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`,
:variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`,
:variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY`,
and :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` variables.



/P/🚀 variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst
======================================================


CMAKE_FIND_USE_INSTALL_PREFIX
-----------------------------------

.. versionadded:: 3.24

Controls the default behavior of the following commands for whether or not to
search the locations in the :variable:`CMAKE_INSTALL_PREFIX` and
:variable:`CMAKE_STAGING_PREFIX` variables.

* :command:`find_program`
* :command:`find_library`
* :command:`find_file`
* :command:`find_path`
* :command:`find_package`

This is useful in cross-compiling environments.

Due to backwards compatibility with :variable:`CMAKE_FIND_NO_INSTALL_PREFIX`,
the behavior of the find command change based on if this variable exists.

============================== ============================ ===========
 CMAKE_FIND_USE_INSTALL_PREFIX CMAKE_FIND_NO_INSTALL_PREFIX   Search
============================== ============================ ===========
 Not Defined                      On                          NO
 Not Defined                      Off || Not Defined          YES
 Off                              On                          NO
 Off                              Off || Not Defined          NO
 On                               On                          YES
 On                               Off || Not Defined          YES
============================== ============================ ===========

By default this variable is not defined. Explicit options given to the above
commands take precedence over this variable.

See also the :variable:`CMAKE_FIND_USE_CMAKE_PATH`,
:variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`,
:variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`,
:variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`,
:variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY`,
and :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` variables.



/P/🚀 variable/CMAKE_FIND_USE_PACKAGE_REGISTRY.rst
========================================================


CMAKE_FIND_USE_PACKAGE_REGISTRY
-------------------------------

.. versionadded:: 3.16

Controls the default behavior of the :command:`find_package` command for
whether or not to search paths provided by the :ref:`User Package Registry`.

By default this variable is not set and the behavior will fall back
to that determined by the deprecated
:variable:`CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY` variable.  If that is
also not set, then :command:`find_package` will use the
:ref:`User Package Registry` unless the ``NO_CMAKE_PACKAGE_REGISTRY`` option
is provided.

This variable takes precedence over
:variable:`CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY` when both are set.

In some cases, for example to locate only system wide installations, it
is not desirable to use the :ref:`User Package Registry` when searching
for packages.  If the ``CMAKE_FIND_USE_PACKAGE_REGISTRY``
variable is ``FALSE``, all the :command:`find_package` commands will skip
the :ref:`User Package Registry` as if they were called with the
``NO_CMAKE_PACKAGE_REGISTRY`` argument.

See also :ref:`Disabling the Package Registry` and the
:variable:`CMAKE_FIND_USE_CMAKE_PATH`,
:variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`,
:variable:`CMAKE_FIND_USE_INSTALL_PREFIX`,
:variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH`,
:variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`,
:variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`,
and :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` variables.



/P/🚀 variable/CMAKE_FIND_USE_PACKAGE_ROOT_PATH.rst
=========================================================


CMAKE_FIND_USE_PACKAGE_ROOT_PATH
--------------------------------

.. versionadded:: 3.16

Controls the default behavior of the following commands for whether or not to
search paths provided by :variable:`<PackageName>_ROOT` variables:

* :command:`find_program`
* :command:`find_library`
* :command:`find_file`
* :command:`find_path`
* :command:`find_package`

By default this variable is not set, which is equivalent to it having
a value of ``TRUE``.  Explicit options given to the above commands
take precedence over this variable.

See also the :variable:`CMAKE_FIND_USE_CMAKE_PATH`,
:variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`,
:variable:`CMAKE_FIND_USE_INSTALL_PREFIX`,
:variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH`,
:variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`,
:variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`,
and :variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` variables.



/P/🚀 variable/CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH.rst
===============================================================


CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH
--------------------------------------

.. versionadded:: 3.16

Controls the default behavior of the following commands for whether or not to
search paths provided by standard system environment variables:

* :command:`find_program`
* :command:`find_library`
* :command:`find_file`
* :command:`find_path`
* :command:`find_package`

This is useful in cross-compiling environments.

By default this variable is not set, which is equivalent to it having
a value of ``TRUE``.  Explicit options given to the above commands
take precedence over this variable.

See also the :variable:`CMAKE_FIND_USE_CMAKE_PATH`,
:variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`,
:variable:`CMAKE_FIND_USE_INSTALL_PREFIX`,
:variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH`,
:variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY`,
:variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH`,
and :variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY` variables.



/P/🚀 variable/CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY.rst
===============================================================


CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY
--------------------------------------

.. versionadded:: 3.16

Controls searching the :ref:`System Package Registry` by the
:command:`find_package` command.

By default this variable is not set and the behavior will fall back
to that determined by the deprecated
:variable:`CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY` variable.
If that is also not set, then :command:`find_package()` will use the
:ref:`System Package Registry` unless the ``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY``
option is provided.

This variable takes precedence over
:variable:`CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY` when both are set.

In some cases, for example to locate only user specific installations, it
is not desirable to use the :ref:`System Package Registry` when searching
for packages. If the ``CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY``
variable is ``FALSE``, all the :command:`find_package` commands will skip
the :ref:`System Package Registry` as if they were called with the
``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY`` argument.

See also :ref:`Disabling the Package Registry`.

See also the :variable:`CMAKE_FIND_USE_CMAKE_PATH`,
:variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`,
:variable:`CMAKE_FIND_USE_INSTALL_PREFIX`,
:variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH`,
:variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`,
:variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY`,
and :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` variables.



/P/🚀 variable/CMAKE_FRAMEWORK_PATH.rst
=============================================


CMAKE_FRAMEWORK_PATH
--------------------

:ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path
for macOS frameworks used by the :command:`find_library`,
:command:`find_package`, :command:`find_path`, and :command:`find_file`
commands.

There is also an environment variable :envvar:`CMAKE_FRAMEWORK_PATH`, which is used
as an additional list of search directories.



/P/🚀 variable/CMAKE_IGNORE_PATH.rst
==========================================


CMAKE_IGNORE_PATH
-----------------

.. |CMAKE_IGNORE_VAR| replace:: ``CMAKE_IGNORE_PATH``
.. |CMAKE_IGNORE_PREFIX_VAR| replace:: :variable:`CMAKE_IGNORE_PREFIX_PATH`

.. include:: IGNORE_SEARCH_PATH.txt
.. include:: IGNORE_SEARCH_LOCATIONS.txt
.. include:: IGNORE_SEARCH_NONSYSTEM.txt

See also the following variables:

- :variable:`CMAKE_IGNORE_PREFIX_PATH`
- :variable:`CMAKE_SYSTEM_IGNORE_PATH`
- :variable:`CMAKE_PREFIX_PATH`
- :variable:`CMAKE_LIBRARY_PATH`
- :variable:`CMAKE_INCLUDE_PATH`
- :variable:`CMAKE_PROGRAM_PATH`



/P/🚀 variable/CMAKE_IGNORE_PREFIX_PATH.rst
=================================================


CMAKE_IGNORE_PREFIX_PATH
------------------------

.. versionadded:: 3.23

.. |CMAKE_IGNORE_VAR| replace:: ``CMAKE_IGNORE_PREFIX_PATH``
.. |CMAKE_IGNORE_NONPREFIX_VAR| replace:: :variable:`CMAKE_IGNORE_PATH`

.. include:: IGNORE_SEARCH_PREFIX.txt
.. include:: IGNORE_SEARCH_LOCATIONS.txt
.. include:: IGNORE_SEARCH_NONSYSTEM.txt

See also the following variables:

- :variable:`CMAKE_IGNORE_PATH`
- :variable:`CMAKE_SYSTEM_IGNORE_PREFIX_PATH`
- :variable:`CMAKE_PREFIX_PATH`
- :variable:`CMAKE_LIBRARY_PATH`
- :variable:`CMAKE_INCLUDE_PATH`
- :variable:`CMAKE_PROGRAM_PATH`



/P/🚀 variable/CMAKE_INCLUDE_DIRECTORIES_BEFORE.rst
=========================================================


CMAKE_INCLUDE_DIRECTORIES_BEFORE
--------------------------------

Whether to append or prepend directories by default in
:command:`include_directories`.

This variable affects the default behavior of the :command:`include_directories`
command.  Setting this variable to ``ON`` is equivalent to using the ``BEFORE``
option in all uses of that command.



/P/🚀 variable/CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE.rst
=================================================================


CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE
----------------------------------------

Whether to force prepending of project include directories.

This variable affects the order of include directories generated in compiler
command lines.  If set to ``ON``, it causes the :variable:`CMAKE_SOURCE_DIR`
and the :variable:`CMAKE_BINARY_DIR` to appear first.



/P/🚀 variable/CMAKE_INCLUDE_PATH.rst
===========================================


CMAKE_INCLUDE_PATH
------------------

:ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path
for the :command:`find_file` and :command:`find_path` commands.  By default it
is empty, it is intended to be set by the project.


There is also an environment variable :envvar:`CMAKE_INCLUDE_PATH`, which is used
as an additional list of search directories.

See also :variable:`CMAKE_SYSTEM_INCLUDE_PATH` and :variable:`CMAKE_PREFIX_PATH`.



/P/🚀 variable/CMAKE_INSTALL_DEFAULT_COMPONENT_NAME.rst
=============================================================


CMAKE_INSTALL_DEFAULT_COMPONENT_NAME
------------------------------------

Default component used in :command:`install` commands.

If an :command:`install` command is used without the ``COMPONENT`` argument,
these files will be grouped into a default component.  The name of this
default install component will be taken from this variable.  It
defaults to ``Unspecified``.



/P/🚀 variable/CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS.rst
====================================================================


CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS
-------------------------------------------

.. versionadded:: 3.11

Default permissions for directories created implicitly during installation
of files by :command:`install` and :command:`file(INSTALL)`.

If ``make install`` is invoked and directories are implicitly created they
get permissions set by ``CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS``
variable or platform specific default permissions if the variable is not set.

Implicitly created directories are created if they are not explicitly installed
by :command:`install` command but are needed to install a file on a certain
path. Example of such locations are directories created due to the setting of
:variable:`CMAKE_INSTALL_PREFIX`.

Expected content of the ``CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS``
variable is a list of permissions that can be used by :command:`install` command
`PERMISSIONS` section.

Example usage:

::

 set(CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS
      OWNER_READ
      OWNER_WRITE
      OWNER_EXECUTE
      GROUP_READ
    )



/P/🚀 variable/CMAKE_INSTALL_MESSAGE.rst
==============================================


CMAKE_INSTALL_MESSAGE
---------------------

.. versionadded:: 3.1

Specify verbosity of installation script code generated by the
:command:`install` command (using the :command:`file(INSTALL)` command).
For paths that are newly installed or updated, installation
may print lines like::

  -- Installing: /some/destination/path

For paths that are already up to date, installation may print
lines like::

  -- Up-to-date: /some/destination/path

The ``CMAKE_INSTALL_MESSAGE`` variable may be set to control
which messages are printed:

``ALWAYS``
  Print both ``Installing`` and ``Up-to-date`` messages.

``LAZY``
  Print ``Installing`` but not ``Up-to-date`` messages.

``NEVER``
  Print neither ``Installing`` nor ``Up-to-date`` messages.

Other values have undefined behavior and may not be diagnosed.

If this variable is not set, the default behavior is ``ALWAYS``.



/P/🚀 variable/CMAKE_INSTALL_PREFIX.rst
=============================================


CMAKE_INSTALL_PREFIX
--------------------

Install directory used by :command:`install`.

If ``make install`` is invoked or ``INSTALL`` is built, this directory is
prepended onto all install directories.

This variable defaults as follows:

* .. versionadded:: 3.29

    If the :envvar:`CMAKE_INSTALL_PREFIX` environment variable is set,
    its value is used as default for this variable.

* ``c:/Program Files/${PROJECT_NAME}`` on Windows.

* ``/usr/local`` on UNIX platforms.

See :variable:`CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT` for how a
project might choose its own default.

On UNIX one can use the ``DESTDIR`` mechanism in order to relocate the
whole installation to a staging area.  See the :envvar:`DESTDIR` environment
variable for more information.

The installation prefix is also added to :variable:`CMAKE_SYSTEM_PREFIX_PATH`
so that :command:`find_package`, :command:`find_program`,
:command:`find_library`, :command:`find_path`, and :command:`find_file`
will search the prefix for other software. This behavior can be disabled by
setting the :variable:`CMAKE_FIND_NO_INSTALL_PREFIX` to ``TRUE`` before the
first :command:`project` invocation.

.. note::

  Use the :module:`GNUInstallDirs` module to provide GNU-style
  options for the layout of directories within the installation.

The ``CMAKE_INSTALL_PREFIX`` may be defined when configuring a build tree
to set its installation prefix.  Or, when using the :manual:`cmake(1)`
command-line tool's :option:`--install <cmake --install>` mode, one may specify
a different prefix using the :option:`--prefix <cmake--install --prefix>`
option:

.. code-block:: shell

  cmake --install . --prefix /my/install/prefix



/P/🚀 variable/CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT.rst
====================================================================


CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT
-------------------------------------------

.. versionadded:: 3.7.1

CMake sets this variable to a ``TRUE`` value when the
:variable:`CMAKE_INSTALL_PREFIX` has just been initialized to
its default value, typically on the first
run of CMake within a new build tree and the :envvar:`CMAKE_INSTALL_PREFIX`
environment variable is not set on the first run of CMake. This can be used
by project code to change the default without overriding a user-provided value:

.. code-block:: cmake

  if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    set(CMAKE_INSTALL_PREFIX "/my/default" CACHE PATH "..." FORCE)
  endif()



/P/🚀 variable/CMAKE_KATE_FILES_MODE.rst
==============================================


CMAKE_KATE_FILES_MODE
---------------------

.. versionadded:: 3.27

This cache variable is used by the Kate project generator and controls
to what mode the ``files`` entry in the project file will be set.  See
:manual:`cmake-generators(7)`.

Possible values are ``AUTO``, ``SVN``, ``GIT``, ``HG``, ``FOSSIL`` and ``LIST``.

When set to ``LIST``, CMake will put the list of source files known to CMake
in the project file.
When set to ``SVN``, ``GIT``, ``HG`` or ``FOSSIL``, CMake will set
the generated project accordingly to Subversion, git, Mercurial
or Fossil, and Kate will then use the respective command line tool to
retrieve the list of files in the project.
When unset or set to ``AUTO``, CMake will try to detect whether the
source directory is part of a git or svn checkout or not, and put the
respective entry into the project file.



/P/🚀 variable/CMAKE_KATE_MAKE_ARGUMENTS.rst
==================================================


CMAKE_KATE_MAKE_ARGUMENTS
-------------------------

.. versionadded:: 3.0

This cache variable is used by the Kate project generator.  See
:manual:`cmake-generators(7)`.

This variable holds arguments which are used when Kate invokes the make
tool. By default it is initialized to hold flags to enable parallel builds
(using -j typically).



/P/🚀 variable/CMAKE_LIBRARY_PATH.rst
===========================================


CMAKE_LIBRARY_PATH
------------------

:ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path
for the :command:`find_library` command.  By default it is empty, it is
intended to be set by the project.

There is also an environment variable :envvar:`CMAKE_LIBRARY_PATH`, which is used
as an additional list of search directories.

See also :variable:`CMAKE_SYSTEM_LIBRARY_PATH` and :variable:`CMAKE_PREFIX_PATH`.



/P/🚀 variable/CMAKE_LINK_DIRECTORIES_BEFORE.rst
======================================================


CMAKE_LINK_DIRECTORIES_BEFORE
-----------------------------

.. versionadded:: 3.13

Whether to append or prepend directories by default in
:command:`link_directories`.

This variable affects the default behavior of the :command:`link_directories`
command.  Setting this variable to ``ON`` is equivalent to using the ``BEFORE``
option in all uses of that command.



/P/🚀 variable/CMAKE_LINK_LIBRARIES_ONLY_TARGETS.rst
==========================================================


CMAKE_LINK_LIBRARIES_ONLY_TARGETS
---------------------------------

.. versionadded:: 3.23

Set this variable to initialize the :prop_tgt:`LINK_LIBRARIES_ONLY_TARGETS`
property of non-imported targets when they are created.  Setting it to true
enables an additional check that all items named by
:command:`target_link_libraries` that can be target names are actually names
of existing targets.  See the target property documentation for details.



/P/🚀 variable/CMAKE_MAXIMUM_RECURSION_DEPTH.rst
======================================================


CMAKE_MAXIMUM_RECURSION_DEPTH
-----------------------------

.. versionadded:: 3.14

Maximum recursion depth for CMake scripts. It is intended to be set on the
command line with ``-DCMAKE_MAXIMUM_RECURSION_DEPTH=<x>``, or within
``CMakeLists.txt`` by projects that require a large recursion depth. Projects
that set this variable should provide the user with a way to override it. For
example:

.. code-block:: cmake

  # About to perform deeply recursive actions
  if(NOT CMAKE_MAXIMUM_RECURSION_DEPTH)
    set(CMAKE_MAXIMUM_RECURSION_DEPTH 2000)
  endif()

If it is not set, or is set to a non-integer value, a sensible default limit is
used. If the recursion limit is reached, the script terminates immediately with
a fatal error.

Calling any of the following commands increases the recursion depth:

* :command:`include`
* :command:`find_package`
* :command:`add_subdirectory`
* :command:`try_compile`
* :command:`ctest_read_custom_files`
* :command:`ctest_run_script` (unless ``NEW_PROCESS`` is specified)
* User-defined :command:`function`'s and :command:`macro`'s (note that
  :command:`function` and :command:`macro` themselves don't increase recursion
  depth)
* Reading or writing variables that are being watched by a
  :command:`variable_watch`

See also the :envvar:`CMAKE_MAXIMUM_RECURSION_DEPTH` environment variable.



/P/🚀 variable/CMAKE_MESSAGE_CONTEXT.rst
==============================================


CMAKE_MESSAGE_CONTEXT
---------------------

.. versionadded:: 3.17

When enabled by the :option:`cmake --log-context` command line
option or the :variable:`CMAKE_MESSAGE_CONTEXT_SHOW` variable, the
:command:`message` command converts the ``CMAKE_MESSAGE_CONTEXT`` list into a
dot-separated string surrounded by square brackets and prepends it to each line
for messages of log levels ``NOTICE`` and below.

For logging contexts to work effectively, projects should generally
``APPEND`` and ``POP_BACK`` an item to the current value of
``CMAKE_MESSAGE_CONTEXT`` rather than replace it.
Projects should not assume the message context at the top of the source tree
is empty, as there are scenarios where the context might have already been set
(e.g. hierarchical projects).

.. warning::

  Valid context names are restricted to anything that could be used
  as a CMake variable name.  All names that begin with an underscore
  or the string ``cmake_`` are also reserved for use by CMake and
  should not be used by projects.

Example:

.. code-block:: cmake

  function(bar)
    list(APPEND CMAKE_MESSAGE_CONTEXT "bar")
    message(VERBOSE "bar VERBOSE message")
  endfunction()

  function(baz)
    list(APPEND CMAKE_MESSAGE_CONTEXT "baz")
    message(DEBUG "baz DEBUG message")
  endfunction()

  function(foo)
    list(APPEND CMAKE_MESSAGE_CONTEXT "foo")
    bar()
    message(TRACE "foo TRACE message")
    baz()
  endfunction()

  list(APPEND CMAKE_MESSAGE_CONTEXT "top")

  message(VERBOSE "Before `foo`")
  foo()
  message(VERBOSE "After `foo`")

  list(POP_BACK CMAKE_MESSAGE_CONTEXT)


Which results in the following output:

.. code-block:: none

  -- [top] Before `foo`
  -- [top.foo.bar] bar VERBOSE message
  -- [top.foo] foo TRACE message
  -- [top.foo.baz] baz DEBUG message
  -- [top] After `foo`



/P/🚀 variable/CMAKE_MESSAGE_CONTEXT_SHOW.rst
===================================================


CMAKE_MESSAGE_CONTEXT_SHOW
--------------------------

.. versionadded:: 3.17

Setting this variable to true enables showing a context with each line
logged by the :command:`message` command (see :variable:`CMAKE_MESSAGE_CONTEXT`
for how the context itself is specified).

This variable is an alternative to providing the ``--log-context`` option
on the :manual:`cmake <cmake(1)>` command line.  Whereas the command line
option will apply only to that one CMake run, setting
``CMAKE_MESSAGE_CONTEXT_SHOW`` to true as a cache variable will ensure that
subsequent CMake runs will continue to show the message context.

Projects should not set ``CMAKE_MESSAGE_CONTEXT_SHOW``.  It is intended for
users so that they may control whether or not to include context with messages.



/P/🚀 variable/CMAKE_MESSAGE_INDENT.rst
=============================================


CMAKE_MESSAGE_INDENT
--------------------

.. versionadded:: 3.16

The :command:`message` command joins the strings from this list and for
log levels of ``NOTICE`` and below, it prepends the resultant string to
each line of the message.

Example:

.. code-block:: cmake

  list(APPEND listVar one two three)

  message(VERBOSE [[Collected items in the "listVar":]])
  list(APPEND CMAKE_MESSAGE_INDENT "  ")

  foreach(item IN LISTS listVar)
    message(VERBOSE ${item})
  endforeach()

  list(POP_BACK CMAKE_MESSAGE_INDENT)
  message(VERBOSE "No more indent")

Which results in the following output:

.. code-block:: none

  -- Collected items in the "listVar":
  --   one
  --   two
  --   three
  -- No more indent



/P/🚀 variable/CMAKE_MESSAGE_LOG_LEVEL.rst
================================================


CMAKE_MESSAGE_LOG_LEVEL
-----------------------

.. versionadded:: 3.17

When set, this variable specifies the logging level used by the
:command:`message` command.  Valid values are the same as those for the
:option:`--log-level <cmake --log-level>` command line option of the
:manual:`cmake(1)` program.  If this variable is set and the
:option:`--log-level <cmake --log-level>` command line option is
given, the command line option takes precedence.

The main advantage to using this variable is to make a log level persist
between CMake runs.  Setting it as a cache variable will ensure that
subsequent CMake runs will continue to use the chosen log level.

Projects should not set this variable, it is intended for users so that
they may control the log level according to their own needs.

.. versionadded:: 3.25
  See the :command:`cmake_language`
  :ref:`cmake_language <query_message_log_level>` command for a way to query
  the current message logging level.



/P/🚀 variable/CMAKE_MFC_FLAG.rst
=======================================


CMAKE_MFC_FLAG
--------------

Use the MFC library for an executable or dll.

Enables the use of the Microsoft Foundation Classes (MFC).
It should be set to ``1`` for the static MFC library, and
``2`` for the shared MFC library.  This is used in Visual Studio
project files.

Usage example:

.. code-block:: cmake

  add_definitions(-D_AFXDLL)
  set(CMAKE_MFC_FLAG 2)
  add_executable(CMakeSetup WIN32 ${SRCS})

Contents of ``CMAKE_MFC_FLAG`` may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.



/P/🚀 variable/CMAKE_MODULE_PATH.rst
==========================================


CMAKE_MODULE_PATH
-----------------

:ref:`Semicolon-separated list <CMake Language Lists>` of directories,
represented using forward slashes, specifying a search path for CMake modules
to be loaded by the :command:`include` or :command:`find_package` commands
before checking the default modules that come with CMake. By default it is
empty.  It is intended to be set by the project.



/P/🚀 variable/CMAKE_POLICY_DEFAULT_CMPNNNN.rst
=====================================================


CMAKE_POLICY_DEFAULT_CMP<NNNN>
------------------------------

Default for CMake Policy ``CMP<NNNN>`` when it is otherwise left unset.

Commands :command:`cmake_minimum_required(VERSION)` and
:command:`cmake_policy(VERSION)` by default leave policies introduced after
the given version unset.  Set ``CMAKE_POLICY_DEFAULT_CMP<NNNN>`` to ``OLD``
or ``NEW`` to specify the default for policy ``CMP<NNNN>``, where ``<NNNN>``
is the policy number.

This variable should not be set by a project in CMake code as a way to
set its own policies; use :command:`cmake_policy(SET)` instead.  This
variable is meant to externally set policies for which a project has
not itself been updated:

* Users running CMake may set this variable in the cache
  (e.g. ``-DCMAKE_POLICY_DEFAULT_CMP<NNNN>=<OLD|NEW>``).  Set it to ``OLD``
  to quiet a policy warning while using old behavior or to ``NEW`` to
  try building the project with new behavior.

* Projects may set this variable before a call to :command:`add_subdirectory`
  that adds a third-party project in order to set its policies without
  modifying third-party code.



/P/🚀 variable/CMAKE_POLICY_WARNING_CMPNNNN.rst
=====================================================


CMAKE_POLICY_WARNING_CMP<NNNN>
------------------------------

Explicitly enable or disable the warning when CMake Policy ``CMP<NNNN>``
has not been set explicitly by :command:`cmake_policy` or implicitly
by :command:`cmake_minimum_required`. This is meaningful
only for the policies that do not warn by default:

* ``CMAKE_POLICY_WARNING_CMP0025`` controls the warning for
  policy :policy:`CMP0025`.
* ``CMAKE_POLICY_WARNING_CMP0047`` controls the warning for
  policy :policy:`CMP0047`.
* ``CMAKE_POLICY_WARNING_CMP0056`` controls the warning for
  policy :policy:`CMP0056`.
* ``CMAKE_POLICY_WARNING_CMP0060`` controls the warning for
  policy :policy:`CMP0060`.
* ``CMAKE_POLICY_WARNING_CMP0065`` controls the warning for
  policy :policy:`CMP0065`.
* ``CMAKE_POLICY_WARNING_CMP0066`` controls the warning for
  policy :policy:`CMP0066`.
* ``CMAKE_POLICY_WARNING_CMP0067`` controls the warning for
  policy :policy:`CMP0067`.
* ``CMAKE_POLICY_WARNING_CMP0082`` controls the warning for
  policy :policy:`CMP0082`.
* ``CMAKE_POLICY_WARNING_CMP0089`` controls the warning for
  policy :policy:`CMP0089`.
* ``CMAKE_POLICY_WARNING_CMP0102`` controls the warning for
  policy :policy:`CMP0102`.
* ``CMAKE_POLICY_WARNING_CMP0112`` controls the warning for
  policy :policy:`CMP0112`.
* ``CMAKE_POLICY_WARNING_CMP0116`` controls the warning for
  policy :policy:`CMP0116`.
* ``CMAKE_POLICY_WARNING_CMP0126`` controls the warning for
  policy :policy:`CMP0126`.
* ``CMAKE_POLICY_WARNING_CMP0128`` controls the warning for
  policy :policy:`CMP0128`.
* ``CMAKE_POLICY_WARNING_CMP0129`` controls the warning for
  policy :policy:`CMP0129`.
* ``CMAKE_POLICY_WARNING_CMP0133`` controls the warning for
  policy :policy:`CMP0133`.

This variable should not be set by a project in CMake code.  Project
developers running CMake may set this variable in their cache to
enable the warning (e.g. ``-DCMAKE_POLICY_WARNING_CMP<NNNN>=ON``).
Alternatively, running :manual:`cmake(1)` with the
:option:`--debug-output <cmake --debug-output>`,
:option:`--trace <cmake --trace>`, or
:option:`--trace-expand <cmake --trace-expand>` option will also
enable the warning.



/P/🚀 variable/CMAKE_PREFIX_PATH.rst
==========================================


CMAKE_PREFIX_PATH
-----------------

:ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying installation
*prefixes* to be searched by the :command:`find_package`,
:command:`find_program`, :command:`find_library`, :command:`find_file`, and
:command:`find_path` commands.  Each command will add appropriate
subdirectories (like ``bin``, ``lib``, or ``include``) as specified in its own
documentation.

By default this is empty.  It is intended to be set by the project.

There is also an environment variable :envvar:`CMAKE_PREFIX_PATH`, which is used
as an additional list of search prefixes.

See also :variable:`CMAKE_SYSTEM_PREFIX_PATH`, :variable:`CMAKE_INCLUDE_PATH`,
:variable:`CMAKE_LIBRARY_PATH`, :variable:`CMAKE_PROGRAM_PATH`, and
:variable:`CMAKE_IGNORE_PATH`.



/P/🚀 variable/CMAKE_PROGRAM_PATH.rst
===========================================


CMAKE_PROGRAM_PATH
------------------

:ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path
for the :command:`find_program` command.  By default it is empty, it is
intended to be set by the project.

There is also an environment variable :envvar:`CMAKE_PROGRAM_PATH`, which is used
as an additional list of search directories.

See also :variable:`CMAKE_SYSTEM_PROGRAM_PATH` and :variable:`CMAKE_PREFIX_PATH`.



/P/🚀 variable/CMAKE_PROJECT_INCLUDE.rst
==============================================


CMAKE_PROJECT_INCLUDE
---------------------

.. versionadded:: 3.15

A CMake language file to be included as the last step of all
:command:`project` command calls.  This is intended for injecting custom code
into project builds without modifying their source.  See :ref:`Code Injection`
for a more detailed discussion of files potentially included during a
:command:`project` call.

.. versionadded:: 3.29
  This variable can be a :ref:`semicolon-separated list <CMake Language Lists>`
  of CMake language files to be included sequentially. It can also now refer to
  module names to be found in :variable:`CMAKE_MODULE_PATH` or as a builtin
  CMake module.

See also the :variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE`,
:variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE`,
:variable:`CMAKE_PROJECT_INCLUDE_BEFORE`, and
:variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` variables.



/P/🚀 variable/CMAKE_PROJECT_INCLUDE_BEFORE.rst
=====================================================


CMAKE_PROJECT_INCLUDE_BEFORE
----------------------------

.. versionadded:: 3.15

A CMake language file to be included as the first step of all
:command:`project` command calls.  This is intended for injecting custom code
into project builds without modifying their source.  See :ref:`Code Injection`
for a more detailed discussion of files potentially included during a
:command:`project` call.

.. versionadded:: 3.29
  This variable can be a :ref:`semicolon-separated list <CMake Language Lists>`
  of CMake language files to be included sequentially. It can also now refer to
  module names to be found in :variable:`CMAKE_MODULE_PATH` or as a builtin
  CMake module.

See also the :variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE`,
:variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE`,
:variable:`CMAKE_PROJECT_INCLUDE`, and
:variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` variables.



/P/🚀 variable/CMAKE_PROJECT_PROJECT-NAME_INCLUDE.rst
===========================================================


CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE
------------------------------------

A CMake language file to be included as the last step of any
:command:`project` command calls that specify ``<PROJECT-NAME>`` as the project
name.  This is intended for injecting custom code into project builds without
modifying their source.  See :ref:`Code Injection` for a more detailed
discussion of files potentially included during a :command:`project` call.

.. versionadded:: 3.29
  This variable can be a :ref:`semicolon-separated list <CMake Language Lists>`
  of CMake language files to be included sequentially. It can also now refer to
  module names to be found in :variable:`CMAKE_MODULE_PATH` or as a builtin
  CMake module.

See also the :variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE`,
:variable:`CMAKE_PROJECT_INCLUDE`, :variable:`CMAKE_PROJECT_INCLUDE_BEFORE`,
and :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` variables.



/P/🚀 variable/CMAKE_PROJECT_PROJECT-NAME_INCLUDE_BEFORE.rst
==================================================================


CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE
-------------------------------------------

.. versionadded:: 3.17

A CMake language file to be included as the first step of any
:command:`project` command calls that specify ``<PROJECT-NAME>`` as the project
name.  This is intended for injecting custom code into project builds without
modifying their source.  See :ref:`Code Injection` for a more detailed
discussion of files potentially included during a :command:`project` call.

.. versionadded:: 3.29
  This variable can be a :ref:`semicolon-separated list <CMake Language Lists>`
  of CMake language files to be included sequentially. It can also now refer to
  module names to be found in :variable:`CMAKE_MODULE_PATH` or as a builtin
  CMake module.

See also the :variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE`,
:variable:`CMAKE_PROJECT_INCLUDE`, :variable:`CMAKE_PROJECT_INCLUDE_BEFORE`,
and :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` variables.



/P/🚀 variable/CMAKE_PROJECT_TOP_LEVEL_INCLUDES.rst
=========================================================


CMAKE_PROJECT_TOP_LEVEL_INCLUDES
--------------------------------

.. versionadded:: 3.24

:ref:`Semicolon-separated list <CMake Language Lists>` of CMake language
files to include as part of the very first :command:`project` call.
The files will be included immediately after the toolchain file has been read
(if one is specified) and platform variables have been set, but before any
languages have been enabled. Therefore, language-specific variables,
including things like :variable:`CMAKE_<LANG>_COMPILER`, might not be set.
See :ref:`Code Injection` for a more detailed discussion of files potentially
included during a :command:`project` call.

.. versionadded:: 3.29
  This variable can also now refer to module names to be found in
  :variable:`CMAKE_MODULE_PATH` or builtin to CMake.

This variable is intended for specifying files that perform one-time setup
for the build. It provides an injection point for things like configuring
package managers, adding logic the user shares between projects (e.g. defining
their own custom build types), and so on. It is primarily for users to add
things specific to their environment, but not for specifying the toolchain
details (use :variable:`CMAKE_TOOLCHAIN_FILE` for that).

By default, this variable is empty.  It is intended to be set by the user.

See also the :variable:`CMAKE_PROJECT_INCLUDE`,
:variable:`CMAKE_PROJECT_INCLUDE_BEFORE`,
:variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE`, and
:variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE` variables.



/P/🚀 variable/CMAKE_REQUIRE_FIND_PACKAGE_PackageName.rst
===============================================================


CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>
----------------------------------------

.. versionadded:: 3.22

Variable for making :command:`find_package` call ``REQUIRED``.

Every non-``REQUIRED`` :command:`find_package` call in a project can be
turned into ``REQUIRED`` by setting the variable
``CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>`` to ``TRUE``.
This can be used to assert assumptions about build environment and to
ensure the build will fail early if they do not hold.

Note that setting this variable to true breaks some commonly used patterns.
Multiple calls to :command:`find_package` are sometimes used to obtain a
different search order to the default.
For example, projects can force checking a known path for a particular
package first before searching any of the other default search paths:

.. code:: cmake

  find_package(something PATHS /some/local/path NO_DEFAULT_PATH)
  find_package(something)

In the above, the first call looks for the ``something`` package in a specific
directory.  If ``CMAKE_REQUIRE_FIND_PACKAGE_something`` is set to true, then
this first call must succeed, otherwise a fatal error occurs.  The second call
never gets a chance to provide a fall-back to using the default search
locations.

A similar pattern is used even by some of CMake's own Find modules to search
for a config package first:

.. code:: cmake

  find_package(something CONFIG QUIET)
  if(NOT something_FOUND)
    # Fall back to searching using typical Find module logic...
  endif()

Again, if ``CMAKE_REQUIRE_FIND_PACKAGE_something`` is true, the first call
must succeed.  It effectively means a config package must be found for the
dependency, and the Find module logic is never used.

See also the :variable:`CMAKE_DISABLE_FIND_PACKAGE_<PackageName>` variable.



/P/🚀 variable/CMAKE_SKIP_INSTALL_ALL_DEPENDENCY.rst
==========================================================


CMAKE_SKIP_INSTALL_ALL_DEPENDENCY
---------------------------------

Don't make the ``install`` target depend on the ``all`` target.

By default, the ``install`` target depends on the ``all`` target.  This
has the effect, that when ``make install`` is invoked or ``INSTALL`` is
built, first the ``all`` target is built, then the installation starts.
If ``CMAKE_SKIP_INSTALL_ALL_DEPENDENCY`` is set to ``TRUE``, this
dependency is not created, so the installation process will start immediately,
independent from whether the project has been completely built or not.

See also :variable:`CMAKE_SKIP_TEST_ALL_DEPENDENCY`.



/P/🚀 variable/CMAKE_SKIP_TEST_ALL_DEPENDENCY.rst
=======================================================


CMAKE_SKIP_TEST_ALL_DEPENDENCY
------------------------------

.. versionadded:: 3.29

Control whether the ``test`` target depends on the ``all`` target.

If this variable is not defined, or is set to ``TRUE``, then the
``test`` (or ``RUN_TESTS``) target does not depend on the
``all`` (or ``ALL_BUILD``) target.  When the ``test`` target is built,
e.g., via ``make test``, the test process will start immediately,
regardless of whether the project has been completely built or not.

If ``CMAKE_SKIP_TEST_ALL_DEPENDENCY`` is explicitly set to ``FALSE``,
then the ``test`` target will depend on the ``all`` target.  When the
``test`` target is built, e.g., via ``make test``, the ``all`` target
will be built first, and then the tests will run.

See also :variable:`CMAKE_SKIP_INSTALL_ALL_DEPENDENCY`.



/P/🚀 variable/CMAKE_STAGING_PREFIX.rst
=============================================


CMAKE_STAGING_PREFIX
--------------------

This variable may be set to a path to install to when cross-compiling. This can
be useful if the path in :variable:`CMAKE_SYSROOT` is read-only, or otherwise
should remain pristine.

The ``CMAKE_STAGING_PREFIX`` location is also used as a search prefix
by the ``find_*`` commands. This can be controlled by setting the
:variable:`CMAKE_FIND_NO_INSTALL_PREFIX` variable.

If any ``RPATH``/``RUNPATH`` entries passed to the linker contain the
``CMAKE_STAGING_PREFIX``, the matching path fragments are replaced
with the :variable:`CMAKE_INSTALL_PREFIX`.



/P/🚀 variable/CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS.rst
==========================================================


CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS
---------------------------------

.. versionadded:: 3.8

This variable contains a list of env vars as a list of tokens with the
syntax ``var=value``.

Example:

.. code-block:: cmake

  set(CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS
     "FOO=FOO1\;FOO2\;FOON"
     "BAR=BAR1\;BAR2\;BARN"
     "BAZ=BAZ1\;BAZ2\;BAZN"
     "FOOBAR=FOOBAR1\;FOOBAR2\;FOOBARN"
     "VALID="
     )

In case of malformed variables CMake will fail:

.. code-block:: cmake

  set(CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS
      "THIS_IS_NOT_VALID"
      )



/P/🚀 variable/CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE.rst
================================================================


CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE
---------------------------------------

.. versionadded:: 3.8

If this variable evaluates to ``ON`` at the end of the top-level
``CMakeLists.txt`` file, the :generator:`Sublime Text 2` extra generator
excludes the build tree from the ``.sublime-project`` if it is inside the
source tree.



/P/🚀 variable/CMAKE_SUPPRESS_REGENERATION.rst
====================================================


CMAKE_SUPPRESS_REGENERATION
---------------------------

.. versionadded:: 3.12

If ``CMAKE_SUPPRESS_REGENERATION`` is ``OFF``, which is default, then CMake
adds a special target on which all other targets depend that checks the build
system and optionally re-runs CMake to regenerate the build system when
the target specification source changes.

If this variable evaluates to ``ON`` at the end of the top-level
``CMakeLists.txt`` file, CMake will not add the regeneration target to the
build system or perform any build system checks.



/P/🚀 variable/CMAKE_SYSROOT.rst
======================================


CMAKE_SYSROOT
-------------

Path to pass to the compiler in the ``--sysroot`` flag.

The ``CMAKE_SYSROOT`` content is passed to the compiler in the ``--sysroot``
flag, if supported.  The path is also stripped from the ``RPATH``/``RUNPATH``
if necessary on installation.  The ``CMAKE_SYSROOT`` is also used to prefix
paths searched by the ``find_*`` commands.

This variable may only be set in a toolchain file specified by
the :variable:`CMAKE_TOOLCHAIN_FILE` variable.

See also the :variable:`CMAKE_SYSROOT_COMPILE` and
:variable:`CMAKE_SYSROOT_LINK` variables.



/P/🚀 variable/CMAKE_SYSROOT_COMPILE.rst
==============================================


CMAKE_SYSROOT_COMPILE
---------------------

.. versionadded:: 3.9

Path to pass to the compiler in the ``--sysroot`` flag when compiling source
files.  This is the same as :variable:`CMAKE_SYSROOT` but is used only for
compiling sources and not linking.

This variable may only be set in a toolchain file specified by
the :variable:`CMAKE_TOOLCHAIN_FILE` variable.



/P/🚀 variable/CMAKE_SYSROOT_LINK.rst
===========================================


CMAKE_SYSROOT_LINK
------------------

.. versionadded:: 3.9

Path to pass to the compiler in the ``--sysroot`` flag when linking.  This is
the same as :variable:`CMAKE_SYSROOT` but is used only for linking and not
compiling sources.

This variable may only be set in a toolchain file specified by
the :variable:`CMAKE_TOOLCHAIN_FILE` variable.



/P/🚀 variable/CMAKE_SYSTEM_APPBUNDLE_PATH.rst
====================================================


CMAKE_SYSTEM_APPBUNDLE_PATH
---------------------------

.. versionadded:: 3.4

Search path for macOS application bundles used by the :command:`find_program`,
and :command:`find_package` commands.  By default it contains the standard
directories for the current system.  It is *not* intended to be modified by
the project, use :variable:`CMAKE_APPBUNDLE_PATH` for this.



/P/🚀 variable/CMAKE_SYSTEM_FRAMEWORK_PATH.rst
====================================================


CMAKE_SYSTEM_FRAMEWORK_PATH
---------------------------

.. versionadded:: 3.4

Search path for macOS frameworks used by the :command:`find_library`,
:command:`find_package`, :command:`find_path`, and :command:`find_file`
commands.  By default it contains the standard directories for the
current system.  It is *not* intended to be modified by the project,
use :variable:`CMAKE_FRAMEWORK_PATH` for this.



/P/🚀 variable/CMAKE_SYSTEM_IGNORE_PATH.rst
=================================================


CMAKE_SYSTEM_IGNORE_PATH
------------------------

.. |CMAKE_IGNORE_VAR| replace:: ``CMAKE_SYSTEM_IGNORE_PATH``
.. |CMAKE_IGNORE_PREFIX_VAR| replace:: :variable:`CMAKE_SYSTEM_IGNORE_PREFIX_PATH`
.. |CMAKE_IGNORE_NONSYSTEM_VAR| replace:: :variable:`CMAKE_IGNORE_PATH`

.. include:: IGNORE_SEARCH_PATH.txt
.. include:: IGNORE_SEARCH_LOCATIONS.txt
.. include:: IGNORE_SEARCH_SYSTEM.txt

See also the following variables:

- :variable:`CMAKE_SYSTEM_IGNORE_PREFIX_PATH`
- :variable:`CMAKE_SYSTEM_PREFIX_PATH`
- :variable:`CMAKE_SYSTEM_LIBRARY_PATH`
- :variable:`CMAKE_SYSTEM_INCLUDE_PATH`
- :variable:`CMAKE_SYSTEM_PROGRAM_PATH`



/P/🚀 variable/CMAKE_SYSTEM_IGNORE_PREFIX_PATH.rst
========================================================


CMAKE_SYSTEM_IGNORE_PREFIX_PATH
-------------------------------

.. versionadded:: 3.23

.. |CMAKE_IGNORE_VAR| replace:: ``CMAKE_SYSTEM_IGNORE_PREFIX_PATH``
.. |CMAKE_IGNORE_NONPREFIX_VAR| replace:: :variable:`CMAKE_SYSTEM_IGNORE_PATH`
.. |CMAKE_IGNORE_NONSYSTEM_VAR| replace:: :variable:`CMAKE_IGNORE_PREFIX_PATH`

.. include:: IGNORE_SEARCH_PREFIX.txt
.. include:: IGNORE_SEARCH_LOCATIONS.txt
.. include:: IGNORE_SEARCH_SYSTEM.txt

See also the following variables:

- :variable:`CMAKE_SYSTEM_IGNORE_PATH`
- :variable:`CMAKE_SYSTEM_PREFIX_PATH`
- :variable:`CMAKE_SYSTEM_LIBRARY_PATH`
- :variable:`CMAKE_SYSTEM_INCLUDE_PATH`
- :variable:`CMAKE_SYSTEM_PROGRAM_PATH`



/P/🚀 variable/CMAKE_SYSTEM_INCLUDE_PATH.rst
==================================================


CMAKE_SYSTEM_INCLUDE_PATH
-------------------------

:ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path
for the :command:`find_file` and :command:`find_path` commands.  By default
this contains the standard directories for the current system.  It is *not*
intended to be modified by the project; use :variable:`CMAKE_INCLUDE_PATH` for
this.  See also :variable:`CMAKE_SYSTEM_PREFIX_PATH`.



/P/🚀 variable/CMAKE_SYSTEM_LIBRARY_PATH.rst
==================================================


CMAKE_SYSTEM_LIBRARY_PATH
-------------------------

:ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path
for the :command:`find_library` command.  By default this contains the
standard directories for the current system.  It is *not* intended to be
modified by the project; use :variable:`CMAKE_LIBRARY_PATH` for this.
See also :variable:`CMAKE_SYSTEM_PREFIX_PATH`.



/P/🚀 variable/CMAKE_SYSTEM_PREFIX_PATH.rst
=================================================


CMAKE_SYSTEM_PREFIX_PATH
------------------------

:ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying installation
*prefixes* to be searched by the :command:`find_package`,
:command:`find_program`, :command:`find_library`, :command:`find_file`, and
:command:`find_path` commands.  Each command will add appropriate
subdirectories (like ``bin``, ``lib``, or ``include``) as specified in its own
documentation.

By default this contains the system directories for the current system, the
:variable:`CMAKE_INSTALL_PREFIX`, and the :variable:`CMAKE_STAGING_PREFIX`.
The installation and staging prefixes may be excluded by setting
the :variable:`CMAKE_FIND_NO_INSTALL_PREFIX` variable before the
first :command:`project` invocation.

The system directories that are contained in ``CMAKE_SYSTEM_PREFIX_PATH`` are
locations that typically include installed software. An example being
``/usr/local`` for UNIX based platforms. In addition to standard platform
locations, CMake will also add values to ``CMAKE_SYSTEM_PREFIX_PATH`` based on
environment variables. The environment variables and search locations that
CMake uses may evolve over time, as platforms and their conventions also
evolve. The following provides an indicative list of environment variables
and locations that CMake searches, but they are subject to change:


CrayLinuxEnvironment:
  * ``ENV{SYSROOT_DIR}/``
  * ``ENV{SYSROOT_DIR}/usr``
  * ``ENV{SYSROOT_DIR}/usr/local``

Darwin:
  * ``ENV{SDKROOT}/usr`` When ``CMAKE_OSX_SYSROOT`` is not explicitly specified.

OpenBSD:
  * ``ENV{LOCALBASE}``

Unix:
  * ``ENV{CONDA_PREFIX}`` when using a conda compiler

MSYSTEM environment with MinGW toolchain:
  .. versionadded:: 3.28

  * ``ENV{MSYSTEM_PREFIX}/local``
  * ``ENV{MSYSTEM_PREFIX}``

Windows:
  * ``ENV{ProgramW6432}``
  * ``ENV{ProgramFiles}``
  * ``ENV{ProgramFiles(x86)}``
  * ``ENV{SystemDrive}/Program Files``
  * ``ENV{SystemDrive}/Program Files (x86)``


``CMAKE_SYSTEM_PREFIX_PATH`` is *not* intended to be modified by the project;
use :variable:`CMAKE_PREFIX_PATH` for this.

See also :variable:`CMAKE_SYSTEM_INCLUDE_PATH`,
:variable:`CMAKE_SYSTEM_LIBRARY_PATH`, :variable:`CMAKE_SYSTEM_PROGRAM_PATH`,
and :variable:`CMAKE_SYSTEM_IGNORE_PATH`.



/P/🚀 variable/CMAKE_SYSTEM_PROGRAM_PATH.rst
==================================================


CMAKE_SYSTEM_PROGRAM_PATH
-------------------------

:ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path
for the :command:`find_program` command.  By default this contains the
standard directories for the current system.  It is *not* intended to be
modified by the project; use :variable:`CMAKE_PROGRAM_PATH` for this.
See also :variable:`CMAKE_SYSTEM_PREFIX_PATH`.



/P/🚀 variable/CMAKE_TLS_CAINFO.rst
=========================================


CMAKE_TLS_CAINFO
----------------

Specify the default value for the :command:`file(DOWNLOAD)` and
:command:`file(UPLOAD)` commands' ``TLS_CAINFO`` options.
It is unset by default.

This variable is also used by the :module:`ExternalProject` and
:module:`FetchContent` modules for internal calls to :command:`file(DOWNLOAD)`.



/P/🚀 variable/CMAKE_TLS_VERIFY.rst
=========================================


CMAKE_TLS_VERIFY
----------------

Specify the default value for the :command:`file(DOWNLOAD)` and
:command:`file(UPLOAD)` commands' ``TLS_VERIFY`` options.
If not set, the default is *off*.

This variable is also used by the :module:`ExternalProject` and
:module:`FetchContent` modules for internal calls to :command:`file(DOWNLOAD)`.

TLS verification can help provide confidence that one is connecting
to the desired server.  When downloading known content, one should
also use file hashes to verify it.

.. code-block:: cmake

  set(CMAKE_TLS_VERIFY TRUE)



/P/🚀 variable/CMAKE_USER_MAKE_RULES_OVERRIDE.rst
=======================================================


CMAKE_USER_MAKE_RULES_OVERRIDE
------------------------------

Specify a CMake file that overrides platform information.

CMake loads the specified file while enabling support for each
language from either the :command:`project` or :command:`enable_language`
commands.  It is loaded after CMake's builtin compiler and platform information
modules have been loaded but before the information is used.  The file
may set platform information variables to override CMake's defaults.
See :variable:`CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>` for the language-specific
version of this variable.

This feature is intended for use only in overriding information
variables that must be set before CMake builds its first test project
to check that the compiler for a language works.  It should not be
used to load a file in cases that a normal :command:`include` will work.  Use
it only as a last resort for behavior that cannot be achieved any
other way.  For example, one may set the
:variable:`CMAKE_C_FLAGS_INIT <CMAKE_<LANG>_FLAGS_INIT>` variable
to change the default value used to initialize the
:variable:`CMAKE_C_FLAGS <CMAKE_<LANG>_FLAGS>` variable
before it is cached.  The override file should NOT be used to set anything
that could be set after languages are enabled, such as variables like
:variable:`CMAKE_RUNTIME_OUTPUT_DIRECTORY` that affect the placement of
binaries.  Information set in the file will be used for :command:`try_compile`
and :command:`try_run` builds too.



/P/🚀 variable/CMAKE_WARN_DEPRECATED.rst
==============================================


CMAKE_WARN_DEPRECATED
---------------------

Whether to issue warnings for deprecated functionality.

If not ``FALSE``, use of deprecated functionality will issue warnings.
If this variable is not set, CMake behaves as if it were set to ``TRUE``.

When running :manual:`cmake(1)`, this option can be enabled with the
:option:`-Wdeprecated <cmake -Wdeprecated>` option, or disabled with the
:option:`-Wno-deprecated <cmake -Wno-deprecated>` option.



/P/🚀 variable/CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION.rst
===================================================================


CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION
------------------------------------------

Ask ``cmake_install.cmake`` script to warn each time a file with absolute
``INSTALL DESTINATION`` is encountered.

This variable is used by CMake-generated ``cmake_install.cmake`` scripts.
If one sets this variable to ``ON`` while running the script, it may get
warning messages from the script.



/P/🚀 variable/CMAKE_XCODE_GENERATE_SCHEME.rst
====================================================


CMAKE_XCODE_GENERATE_SCHEME
---------------------------

.. versionadded:: 3.9

If enabled, the :generator:`Xcode` generator will generate schema files.  These
are useful to invoke analyze, archive, build-for-testing and test
actions from the command line.

This variable initializes the
:prop_tgt:`XCODE_GENERATE_SCHEME`
target property on all targets.



/P/🚀 variable/CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY.rst
====================================================================


CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY
-------------------------------------------

.. versionadded:: 3.11

If enabled, the :generator:`Xcode` generator will generate only a
single Xcode project file for the topmost :command:`project()` command
instead of generating one for every ``project()`` command.

This could be useful to speed up the CMake generation step for
large projects and to work-around a bug in the ``ZERO_CHECK`` logic.



/P/🚀 variable/CMAKE_XCODE_LINK_BUILD_PHASE_MODE.rst
==========================================================


CMAKE_XCODE_LINK_BUILD_PHASE_MODE
---------------------------------

.. versionadded:: 3.19

This variable is used to initialize the
:prop_tgt:`XCODE_LINK_BUILD_PHASE_MODE` property on targets.
It affects the methods that the :generator:`Xcode` generator uses to link
different kinds of libraries.  Its default value is ``NONE``.



/P/🚀 variable/CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER.rst
=============================================================


CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER
------------------------------------

.. versionadded:: 3.13

Whether to enable ``Address Sanitizer`` in the Diagnostics
section of the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_ADDRESS_SANITIZER`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN.rst
==============================================================================


CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN
-----------------------------------------------------

.. versionadded:: 3.13

Whether to enable ``Detect use of stack after return``
in the Diagnostics section of the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING.rst
=====================================================================


CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING
--------------------------------------------

.. versionadded:: 3.16

Whether to enable
``Allow debugging when using document Versions Browser``
in the Options section of the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER.rst
=======================================================================


CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER
----------------------------------------------

.. versionadded:: 3.13

Whether to disable the ``Main Thread Checker``
in the Diagnostics section of the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS.rst
=================================================================


CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS
----------------------------------------

.. versionadded:: 3.13

Whether to enable ``Dynamic Library Loads``
in the Diagnostics section of the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE.rst
====================================================================


CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE
-------------------------------------------

.. versionadded:: 3.13

Whether to enable ``Dynamic Linker API usage``
in the Diagnostics section of the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION.rst
=====================================================================


CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION
--------------------------------------------

.. versionadded:: 3.25

Property value for ``Metal: API Validation`` in the Options section of
the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_ENABLE_GPU_API_VALIDATION` property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE.rst
=========================================================================


CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE
------------------------------------------------

.. versionadded:: 3.23

Property value for ``GPU Frame Capture`` in the Options section of
the generated Xcode scheme. Example values are `Metal` and
`Disabled`.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION.rst
========================================================================


CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION
-----------------------------------------------

.. versionadded:: 3.25

Property value for ``Metal: Shader Validation`` in the Options section of
the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION` property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_ENVIRONMENT.rst
=======================================================


CMAKE_XCODE_SCHEME_ENVIRONMENT
------------------------------

.. versionadded:: 3.17

Specify environment variables that should be added to the Arguments
section of the generated Xcode scheme.

If set to a list of environment variables and values of the form
``MYVAR=value`` those environment variables will be added to the
scheme.

This variable initializes the :prop_tgt:`XCODE_SCHEME_ENVIRONMENT`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_GUARD_MALLOC.rst
========================================================


CMAKE_XCODE_SCHEME_GUARD_MALLOC
-------------------------------

.. versionadded:: 3.13

Whether to enable ``Guard Malloc``
in the Diagnostics section of the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_GUARD_MALLOC`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION.rst
================================================================


CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION
---------------------------------------

.. versionadded:: 3.25

Set the build configuration to run the target.

This variable initializes the :prop_tgt:`XCODE_SCHEME_LAUNCH_CONFIGURATION`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_LAUNCH_MODE.rst
=======================================================


CMAKE_XCODE_SCHEME_LAUNCH_MODE
------------------------------

.. versionadded:: 3.25

Property value for ``Launch`` in the Info section of the generated Xcode
scheme.

This variable initializes the :prop_tgt:`XCODE_SCHEME_LAUNCH_MODE` property on
all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP.rst
====================================================================


CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP
-------------------------------------------

.. versionadded:: 3.13

Whether to enable the ``Main Thread Checker`` option
``Pause on issues``
in the Diagnostics section of the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES.rst
==============================================================


CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES
-------------------------------------

.. versionadded:: 3.13

Whether to enable ``Malloc Guard Edges``
in the Diagnostics section of the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_MALLOC_GUARD_EDGES`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE.rst
===========================================================


CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE
----------------------------------

.. versionadded:: 3.13

Whether to enable ``Malloc Scribble``
in the Diagnostics section of the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_MALLOC_SCRIBBLE`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_MALLOC_STACK.rst
========================================================


CMAKE_XCODE_SCHEME_MALLOC_STACK
-------------------------------

.. versionadded:: 3.13

Whether to enable ``Malloc Stack`` in the Diagnostics
section of the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_MALLOC_STACK`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_THREAD_SANITIZER.rst
============================================================


CMAKE_XCODE_SCHEME_THREAD_SANITIZER
-----------------------------------

.. versionadded:: 3.13

Whether to enable ``Thread Sanitizer`` in the Diagnostics
section of the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_THREAD_SANITIZER`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP.rst
=================================================================


CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP
----------------------------------------

.. versionadded:: 3.13

Whether to enable ``Thread Sanitizer - Pause on issues``
in the Diagnostics section of the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_THREAD_SANITIZER_STOP`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER.rst
=========================================================================


CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER
------------------------------------------------

.. versionadded:: 3.13

Whether to enable ``Undefined Behavior Sanitizer``
in the Diagnostics section of the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP.rst
==============================================================================


CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP
-----------------------------------------------------

.. versionadded:: 3.13

Whether to enable ``Undefined Behavior Sanitizer`` option
``Pause on issues``
in the Diagnostics section of the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_WORKING_DIRECTORY.rst
=============================================================


CMAKE_XCODE_SCHEME_WORKING_DIRECTORY
------------------------------------

.. versionadded:: 3.17

Specify the ``Working Directory`` of the *Run* and *Profile*
actions in the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_WORKING_DIRECTORY`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS.rst
==========================================================


CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS
---------------------------------

.. versionadded:: 3.13

Whether to enable ``Zombie Objects``
in the Diagnostics section of the generated Xcode scheme.

This variable initializes the
:prop_tgt:`XCODE_SCHEME_ZOMBIE_OBJECTS`
property on all targets.

Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property
documentation to see all Xcode schema related properties.



/P/🚀 variable/CMAKE_XCODE_XCCONFIG.rst
=============================================


CMAKE_XCODE_XCCONFIG
--------------------

.. versionadded:: 3.24

If set, the :generator:`Xcode` generator will register the specified
file as a global XCConfig file. For target-level XCConfig files see
the :prop_tgt:`XCODE_XCCONFIG` target property.

This feature is intended to ease migration from native Xcode projects
to CMake projects.

Contents of ``CMAKE_XCODE_XCCONFIG`` may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.



/P/🚀 variable/PackageName_ROOT.rst
=========================================


<PackageName>_ROOT
------------------

.. versionadded:: 3.12

Calls to :command:`find_package(<PackageName>)` will search in prefixes
specified by the ``<PackageName>_ROOT`` CMake variable, where
``<PackageName>`` is the (case-preserved) name given to the
:command:`find_package` call and ``_ROOT`` is literal.
For example, ``find_package(Foo)`` will search prefixes specified in the
``Foo_ROOT`` CMake variable (if set).  See policy :policy:`CMP0074`.

This variable may hold a single prefix or a
:ref:`semicolon-separated list <CMake Language Lists>` of multiple prefixes.

See also the :envvar:`<PackageName>_ROOT` environment variable.

.. variable:: <PACKAGENAME>_ROOT

  .. versionadded:: 3.27

  Calls to :command:`find_package(<PackageName>)` will also search in
  prefixes specified by the upper-case ``<PACKAGENAME>_ROOT`` CMake
  variable.  See policy :policy:`CMP0144`.



/P/🚀 variable/ANDROID.rst
================================


ANDROID
-------

.. versionadded:: 3.7

Set to ``1`` when the target system (:variable:`CMAKE_SYSTEM_NAME`) is
``Android``.



/P/🚀 variable/APPLE.rst
==============================


APPLE
-----

Set to ``True`` when the target system is an Apple platform
(macOS, iOS, tvOS, visionOS or watchOS).



/P/🚀 variable/BORLAND.rst
================================


BORLAND
-------

``True`` if the Borland compiler is being used.

This is set to ``true`` if the Borland compiler is being used.



/P/🚀 variable/BSD.rst
============================


BSD
---

.. versionadded:: 3.25

Set to a string value when the target system is BSD. This value can be one of
the following: DragonFlyBSD, FreeBSD, OpenBSD, or NetBSD.



/P/🚀 variable/CMAKE_ANDROID_NDK_VERSION.rst
==================================================


CMAKE_ANDROID_NDK_VERSION
-------------------------

.. versionadded:: 3.20

When :ref:`Cross Compiling for Android with the NDK` and using an
Android NDK version 11 or higher, this variable is provided by
CMake to report the NDK version number.



/P/🚀 variable/CMAKE_CL_64.rst
====================================


CMAKE_CL_64
-----------

Discouraged.  Use :variable:`CMAKE_SIZEOF_VOID_P` instead.

Set to a true value when using a Microsoft Visual Studio ``cl`` compiler that
*targets* a 64-bit architecture.



/P/🚀 variable/CMAKE_COMPILER_2005.rst
============================================


CMAKE_COMPILER_2005
-------------------

Using the Visual Studio 2005 compiler from Microsoft

Set to true when using the Visual Studio 2005 compiler from Microsoft.



/P/🚀 variable/CMAKE_HOST_APPLE.rst
=========================================


CMAKE_HOST_APPLE
----------------

``True`` for Apple macOS operating systems.

Set to ``true`` when the host system is Apple macOS.



/P/🚀 variable/CMAKE_HOST_BSD.rst
=======================================


CMAKE_HOST_BSD
--------------

.. versionadded:: 3.25

Set to a string value when the host system is BSD. This value can be one of
the following: DragonFlyBSD, FreeBSD, OpenBSD, or NetBSD.



/P/🚀 variable/CMAKE_HOST_LINUX.rst
=========================================


CMAKE_HOST_LINUX
----------------

.. versionadded:: 3.25

Set to true when the host system is Linux.



/P/🚀 variable/CMAKE_HOST_SOLARIS.rst
===========================================


CMAKE_HOST_SOLARIS
------------------

.. versionadded:: 3.6

``True`` for Oracle Solaris operating systems.

Set to ``true`` when the host system is Oracle Solaris.



/P/🚀 variable/CMAKE_HOST_SYSTEM.rst
==========================================


CMAKE_HOST_SYSTEM
-----------------

Composite Name of OS CMake is being run on.

This variable is the composite of :variable:`CMAKE_HOST_SYSTEM_NAME` and
:variable:`CMAKE_HOST_SYSTEM_VERSION`, e.g.
``${CMAKE_HOST_SYSTEM_NAME}-${CMAKE_HOST_SYSTEM_VERSION}``.  If
:variable:`CMAKE_HOST_SYSTEM_VERSION` is not set, then this variable is
the same as :variable:`CMAKE_HOST_SYSTEM_NAME`.



/P/🚀 variable/CMAKE_HOST_SYSTEM_NAME.rst
===============================================


CMAKE_HOST_SYSTEM_NAME
----------------------

Name of the OS CMake is running on.

On systems that have the uname command, this variable is set to the
output of ``uname -s``.  ``Linux``, ``Windows``, and ``Darwin`` for macOS
are the values found on the big three operating systems.

For a list of possible values, see :variable:`CMAKE_SYSTEM_NAME`.



/P/🚀 variable/CMAKE_HOST_SYSTEM_PROCESSOR.rst
====================================================


CMAKE_HOST_SYSTEM_PROCESSOR
---------------------------

The name of the CPU CMake is running on.

Windows Platforms
^^^^^^^^^^^^^^^^^

On Windows, this variable is set to the value of the environment variable
``PROCESSOR_ARCHITECTURE``.

Unix Platforms
^^^^^^^^^^^^^^

On systems that support ``uname``, this variable is set to the output of:

- ``uname -m`` on GNU, Linux, Cygwin, Android, or
- ``arch`` on OpenBSD, or
- on other systems,

  * ``uname -p`` if its exit code is nonzero, or
  * ``uname -m`` otherwise.

macOS Platforms
^^^^^^^^^^^^^^^

The value of ``uname -m`` is used by default.

On Apple Silicon hosts, the architecture printed by ``uname -m`` may vary
based on CMake's own architecture and that of the invoking process tree.

.. versionadded:: 3.19.2

  On Apple Silicon hosts:

  * The :variable:`CMAKE_APPLE_SILICON_PROCESSOR` variable or
    the :envvar:`CMAKE_APPLE_SILICON_PROCESSOR` environment variable
    may be set to specify the host architecture explicitly.

  * If :variable:`CMAKE_OSX_ARCHITECTURES` is not set, CMake adds explicit
    flags to tell the compiler to build for the host architecture so the
    toolchain does not have to guess based on the process tree's architecture.



/P/🚀 variable/CMAKE_HOST_SYSTEM_VERSION.rst
==================================================


CMAKE_HOST_SYSTEM_VERSION
-------------------------

The OS version CMake is running on.

A numeric version string for the system.  On systems that support
``uname``, this variable is set to the output of ``uname -r``. On other
systems this is set to major-minor version numbers.



/P/🚀 variable/CMAKE_HOST_UNIX.rst
========================================


CMAKE_HOST_UNIX
---------------

``True`` for UNIX and UNIX like operating systems.

Set to ``true`` when the host system is UNIX or UNIX like (i.e.  APPLE and
CYGWIN).



/P/🚀 variable/CMAKE_HOST_WIN32.rst
=========================================


CMAKE_HOST_WIN32
----------------

``True`` if the host system is running Windows, including Windows 64-bit and MSYS.

Set to ``false`` on Cygwin.



/P/🚀 variable/CMAKE_LIBRARY_ARCHITECTURE.rst
===================================================


CMAKE_LIBRARY_ARCHITECTURE
--------------------------

Target architecture library directory name, if detected.

This is the value of :variable:`CMAKE_<LANG>_LIBRARY_ARCHITECTURE` as detected
for one of the enabled languages.



/P/🚀 variable/CMAKE_LIBRARY_ARCHITECTURE_REGEX.rst
=========================================================


CMAKE_LIBRARY_ARCHITECTURE_REGEX
--------------------------------

Regex matching possible target architecture library directory names.

This is used to detect :variable:`CMAKE_<LANG>_LIBRARY_ARCHITECTURE` from the
implicit linker search path by matching the ``<arch>`` name.



/P/🚀 variable/CMAKE_OBJECT_PATH_MAX.rst
==============================================


CMAKE_OBJECT_PATH_MAX
---------------------

Maximum object file full-path length allowed by native build tools.

CMake computes for every source file an object file name that is
unique to the source file and deterministic with respect to the full
path to the source file.  This allows multiple source files in a
target to share the same name if they lie in different directories
without rebuilding when one is added or removed.  However, it can
produce long full paths in a few cases, so CMake shortens the path
using a hashing scheme when the full path to an object file exceeds a
limit.  CMake has a built-in limit for each platform that is
sufficient for common tools, but some native tools may have a lower
limit.  This variable may be set to specify the limit explicitly.  The
value must be an integer no less than 128.



/P/🚀 variable/CMAKE_SYSTEM.rst
=====================================


CMAKE_SYSTEM
------------

Composite name of operating system CMake is compiling for.

This variable is the composite of :variable:`CMAKE_SYSTEM_NAME` and
:variable:`CMAKE_SYSTEM_VERSION`, e.g.
``${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}``.  If
:variable:`CMAKE_SYSTEM_VERSION` is not set, then this variable is
the same as :variable:`CMAKE_SYSTEM_NAME`.



/P/🚀 variable/CMAKE_SYSTEM_NAME.rst
==========================================


CMAKE_SYSTEM_NAME
-----------------

The name of the operating system for which CMake is to build.
See the :variable:`CMAKE_SYSTEM_VERSION` variable for the OS version.

Note that ``CMAKE_SYSTEM_NAME`` is not set to anything by default when running
in script mode, since it's not building anything.

System Name for Host Builds
^^^^^^^^^^^^^^^^^^^^^^^^^^^

``CMAKE_SYSTEM_NAME`` is by default set to the same value as the
:variable:`CMAKE_HOST_SYSTEM_NAME` variable so that the build
targets the host system.

System Name for Cross Compiling
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``CMAKE_SYSTEM_NAME`` may be set explicitly when first configuring a new build
tree in order to enable :ref:`cross compiling <Cross Compiling Toolchain>`.
In this case the :variable:`CMAKE_SYSTEM_VERSION` variable must also be
set explicitly.

System Names Known to CMake
^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following is a list of possible values, each associated with corresponding
operating systems or environments.

========================= ======================================================
Value                     Name
========================= ======================================================
``ADSP``                  Analog Devices Audio Digital Signal Processing
``AIX``                   IBM Unix operating system
``Android``               Android operating system
``ARTOS``                 Operating system for microcontrollers
``BeOS``                  Operating system for personal computers (discontinued)
``BlueGeneL``             Blue Gene/L static environment
``BlueGeneP-dynamic``     Blue Gene/P dynamic environment
``BlueGeneP-static``      Blue Gene/P static environment
``BlueGeneQ-dynamic``     Blue Gene/Q dynamic environment
``BlueGeneQ-static``      Blue Gene/Q static environment
``BSDOS``                 BSD operating system (discontinued)
``Catamount``             Operating system for Cray XT series
``CrayLinuxEnvironment``  Cray Linux Environment
``CYGWIN``                Cygwin environment for Windows
``Darwin``                Apple stationary operating systems (macOS, OS X, etc.)
``DOS``                   MS-DOS or compatible
``DragonFly``             BSD-derived operating system
``eCos``                  Real-time embedded operating system
``Emscripten``            Compiler toolchain to WebAssembly
``Euros``                 Real-time operating system for embedded devices
``FreeBSD``               FreeBSD operating system
``Fuchsia``               Operating system by Google based on the Zircon kernel
``Generic-ADSP``          Generic ADSP (Audio DSP) environment
``Generic-ELF``           Generic ELF (Executable and Linkable Format) environment
``Generic``               Some platforms, e.g. bare metal embedded devices
``GHS-MULTI``             Green Hills Software MULTI environment
``GNU``                   GNU/Hurd-based operating system
``Haiku``                 Unix operating system inspired by BeOS
``HP-UX``                 Hewlett Packard Unix
``iOS``                   Apple mobile phone operating system
``kFreeBSD``              FreeBSD kernel with a GNU userland
``Linux``                 All Linux-based distributions
``Midipix``               POSIX-compatible layer for Windows
``MirBSD``                MirOS BSD operating system
``MP-RAS``                MP-RAS UNIX operating system
``MSYS``                  MSYS environment (MSYSTEM=MSYS)
``NetBSD``                NetBSD operating systems
``OpenBSD``               OpenBSD operating systems
``OpenVMS``               OpenVMS operating system by HP
``OS2``                   OS/2 operating system
``OSF1``                  Compaq Tru64 UNIX (formerly DEC OSF/1, Digital Unix) (discontinued)
``QNX``                   Unix-like operating system by BlackBerry
``RISCos``                RISC OS operating system
``SCO_SV``                SCO OpenServer 5
``SerenityOS``            Unix-like operating system
``SINIX``                 SINIX operating system
``SunOS``                 Oracle Solaris and all illumos operating systems
``syllable``              Syllable operating system
``Tru64``                 Compaq Tru64 UNIX (formerly DEC OSF/1) operating system
``tvOS``                  Apple TV operating system
``ULTRIX``                Unix operating system (discontinued)
``UNIX_SV``               SCO UnixWare (pre release 7)
``UnixWare``              SCO UnixWare 7
``visionOS``              Apple mixed reality operating system
``watchOS``               Apple watch operating system
``Windows``               Windows stationary operating systems
``WindowsCE``             Windows Embedded Compact
``WindowsPhone``          Windows mobile phone operating system
``WindowsStore``          Universal Windows Platform applications
``Xenix``                 SCO Xenix Unix operating system (discontinued)
========================= ======================================================

Platform-specific notes:

* MSYS2's ``msys/cmake`` package (``/usr/bin/cmake``) works only under
  ``MSYSTEM=MSYS`` environments, with system name ``MSYS``.  Under other
  environments like ``MSYSTEM=MINGW64``, use another package such
  as ``mingw64/mingw-w64-x86_64-cmake`` (``/mingw64/bin/cmake``),
  which targets ``MSYSTEM=MINGW64`` with system name ``Windows``.

* Cygwin's ``cmake`` package (``/usr/bin/cmake``) uses system name ``CYGWIN``.
  A non-cygwin CMake on Windows (e.g. ``$PROGRAMFILES/CMake/bin/cmake``)
  uses system name ``Windows`` even when it runs under a Cygwin environment.



/P/🚀 variable/CMAKE_SYSTEM_PROCESSOR.rst
===============================================


CMAKE_SYSTEM_PROCESSOR
----------------------

When not cross-compiling, this variable has the same value as the
:variable:`CMAKE_HOST_SYSTEM_PROCESSOR` variable.  In many cases,
this will correspond to the target architecture for the build, but
this is not guaranteed.  (E.g. on Windows, the host may be ``AMD64``
even when using a MSVC ``cl`` compiler with a 32-bit target.)

When cross-compiling, a :variable:`CMAKE_TOOLCHAIN_FILE` should set
the ``CMAKE_SYSTEM_PROCESSOR`` variable to match target architecture
that it specifies (via :variable:`CMAKE_<LANG>_COMPILER` and perhaps
:variable:`CMAKE_<LANG>_COMPILER_TARGET`).



/P/🚀 variable/CMAKE_SYSTEM_VERSION.rst
=============================================


CMAKE_SYSTEM_VERSION
--------------------

The version of the operating system for which CMake is to build.
See the :variable:`CMAKE_SYSTEM_NAME` variable for the OS name.

System Version for Host Builds
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When the :variable:`CMAKE_SYSTEM_NAME` variable takes its default value
then ``CMAKE_SYSTEM_VERSION`` is by default set to the same value as the
:variable:`CMAKE_HOST_SYSTEM_VERSION` variable so that the build targets
the host system version.

In the case of a host build then ``CMAKE_SYSTEM_VERSION`` may be set
explicitly when first configuring a new build tree in order to enable
targeting the build for a different version of the host operating system
than is actually running on the host.  This is allowed and not considered
cross compiling so long as the binaries built for the specified OS version
can still run on the host.

System Version for Cross Compiling
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When the :variable:`CMAKE_SYSTEM_NAME` variable is set explicitly to
enable :ref:`cross compiling <Cross Compiling Toolchain>` then the
value of ``CMAKE_SYSTEM_VERSION`` must also be set explicitly to specify
the target system version.



/P/🚀 variable/CYGWIN.rst
===============================


CYGWIN
------

``True`` for Cygwin.

Set to ``true`` when using Cygwin.



/P/🚀 variable/GHSMULTI.rst
=================================


GHSMULTI
--------

.. versionadded:: 3.3

``1`` when using :generator:`Green Hills MULTI` generator.

Also, Set to ``1`` when the target system is a Green Hills platform
(i.e. When :variable:`CMAKE_SYSTEM_NAME` is ``GHS-MULTI``).



/P/🚀 variable/IOS.rst
============================


IOS
---

.. versionadded:: 3.14

Set to ``1`` when the target system (:variable:`CMAKE_SYSTEM_NAME`) is ``iOS``.



/P/🚀 variable/LINUX.rst
==============================


LINUX
-----

.. versionadded:: 3.25

Set to true when the target system is Linux.



/P/🚀 variable/MINGW.rst
==============================


MINGW
-----

.. versionadded:: 3.2

Set to a true value when at least one language is enabled
with a compiler targeting the GNU ABI on Windows (MinGW).

Otherwise, this variable is not set by CMake.



/P/🚀 variable/MSVC.rst
=============================


MSVC
----

Set to ``true`` when the compiler is some version of Microsoft Visual C++
or another compiler simulating the Visual C++ ``cl`` command-line syntax.

See also the :variable:`MSVC_VERSION` variable.



/P/🚀 variable/MSVC_IDE.rst
=================================


MSVC_IDE
--------

``True`` when using the Microsoft Visual C++ IDE.

Set to ``true`` when the target platform is the Microsoft Visual C++ IDE, as
opposed to the command line compiler.

.. note::

  This variable is only available after compiler detection has been performed,
  so it is not available to toolchain files or before the first
  :command:`project` or :command:`enable_language` call which uses an
  MSVC-like compiler.



/P/🚀 variable/MSVC_TOOLSET_VERSION.rst
=============================================


MSVC_TOOLSET_VERSION
--------------------

.. versionadded:: 3.12

The toolset version of Microsoft Visual C/C++ being used if any.
If MSVC-like is being used, this variable is set based on the version
of the compiler as given by the :variable:`MSVC_VERSION` variable.

Known toolset version numbers are::

  80        = VS 2005 (8.0)
  90        = VS 2008 (9.0)
  100       = VS 2010 (10.0)
  110       = VS 2012 (11.0)
  120       = VS 2013 (12.0)
  140       = VS 2015 (14.0)
  141       = VS 2017 (15.0)
  142       = VS 2019 (16.0)
  143       = VS 2022 (17.0)

Compiler versions newer than those known to CMake will be reported
as the latest known toolset version.

See also the :variable:`MSVC_VERSION` variable.



/P/🚀 variable/MSVC_VERSION.rst
=====================================


MSVC_VERSION
------------

The version of Microsoft Visual C/C++ being used if any.
If a compiler simulating Visual C++ is being used, this variable is set
to the toolset version simulated as given by the ``_MSC_VER``
preprocessor definition.

Known version numbers are::

  1200      = VS  6.0
  1300      = VS  7.0
  1310      = VS  7.1
  1400      = VS  8.0 (v80 toolset)
  1500      = VS  9.0 (v90 toolset)
  1600      = VS 10.0 (v100 toolset)
  1700      = VS 11.0 (v110 toolset)
  1800      = VS 12.0 (v120 toolset)
  1900      = VS 14.0 (v140 toolset)
  1910-1919 = VS 15.0 (v141 toolset)
  1920-1929 = VS 16.0 (v142 toolset)
  1930-1939 = VS 17.0 (v143 toolset)

See also the  :variable:`CMAKE_<LANG>_COMPILER_VERSION` and
:variable:`MSVC_TOOLSET_VERSION` variable.



/P/🚀 variable/MSYS.rst
=============================


MSYS
----

.. versionadded:: 3.14

``True`` when using the :generator:`MSYS Makefiles` generator.



/P/🚀 variable/UNIX.rst
=============================


UNIX
----

Set to ``True`` when the target system is UNIX or UNIX-like
(e.g. :variable:`APPLE` and :variable:`CYGWIN`).  The
:variable:`CMAKE_SYSTEM_NAME` variable should be queried if
a more specific understanding of the target system is required.



/P/🚀 variable/WIN32.rst
==============================


WIN32
-----

Set to ``True`` when the target system is Windows, including Win64.



/P/🚀 variable/WINCE.rst
==============================


WINCE
-----

.. versionadded:: 3.1

True when the :variable:`CMAKE_SYSTEM_NAME` variable is set
to ``WindowsCE``.



/P/🚀 variable/WINDOWS_PHONE.rst
======================================


WINDOWS_PHONE
-------------

.. versionadded:: 3.1

True when the :variable:`CMAKE_SYSTEM_NAME` variable is set
to ``WindowsPhone``.



/P/🚀 variable/WINDOWS_STORE.rst
======================================


WINDOWS_STORE
-------------

.. versionadded:: 3.1

True when the :variable:`CMAKE_SYSTEM_NAME` variable is set
to ``WindowsStore``.



/P/🚀 variable/XCODE.rst
==============================


XCODE
-----

.. versionadded:: 3.7

``True`` when using :generator:`Xcode` generator.



/P/🚀 variable/XCODE_VERSION.rst
======================================


XCODE_VERSION
-------------

Version of Xcode (:generator:`Xcode` generator only).

Under the :generator:`Xcode` generator, this is the version of Xcode
as specified in ``Xcode.app/Contents/version.plist`` (such as ``3.1.2``).



/P/🚀 variable/CMAKE_ADSP_ROOT.rst
========================================


CMAKE_ADSP_ROOT
---------------

.. versionadded:: 3.24

When :ref:`Cross Compiling for ADSP SHARC/Blackfin`,
this variable holds the absolute path to the latest CCES or VDSP++ install.
The directory is expected to contain the ``cc21k.exe`` and ``ccblkfn.exe`` compilers.
This will be set automatically if a default install of CCES or VDSP++ can be found.

See also the :envvar:`ADSP_ROOT` environment variable.



/P/🚀 variable/CMAKE_AIX_EXPORT_ALL_SYMBOLS.rst
=====================================================


CMAKE_AIX_EXPORT_ALL_SYMBOLS
----------------------------

.. versionadded:: 3.17

Default value for :prop_tgt:`AIX_EXPORT_ALL_SYMBOLS` target property.
This variable is used to initialize the property on each target as it is
created.



/P/🚀 variable/CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS.rst
=============================================================


CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS
------------------------------------

.. versionadded:: 3.4

Default value for the :prop_tgt:`ANDROID_ANT_ADDITIONAL_OPTIONS` target property.
See that target property for additional information.



/P/🚀 variable/CMAKE_ANDROID_API.rst
==========================================


CMAKE_ANDROID_API
-----------------

.. versionadded:: 3.1

When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio
Edition`, this variable may be set to specify the default value for the
:prop_tgt:`ANDROID_API` target property.  See that target property for
additional information.

When :ref:`Cross Compiling for Android`, the :variable:`CMAKE_SYSTEM_VERSION`
variable represents the Android API version number targeted.  For historical
reasons, if a toolchain file sets ``CMAKE_ANDROID_API``, but not
``CMAKE_SYSTEM_VERSION``, the latter will be initialized using the former.



/P/🚀 variable/CMAKE_ANDROID_API_MIN.rst
==============================================


CMAKE_ANDROID_API_MIN
---------------------

.. versionadded:: 3.2

Default value for the :prop_tgt:`ANDROID_API_MIN` target property.
See that target property for additional information.



/P/🚀 variable/CMAKE_ANDROID_ARCH.rst
===========================================


CMAKE_ANDROID_ARCH
------------------

.. versionadded:: 3.4

When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio
Edition`, this variable may be set to specify the default value for the
:prop_tgt:`ANDROID_ARCH` target property.  See that target property for
additional information.

Otherwise, when :ref:`Cross Compiling for Android`, this variable provides
the name of the Android architecture corresponding to the value of the
:variable:`CMAKE_ANDROID_ARCH_ABI` variable.  The architecture name
may be one of:

* ``arm``
* ``arm64``
* ``mips``
* ``mips64``
* ``x86``
* ``x86_64``



/P/🚀 variable/CMAKE_ANDROID_ARCH_ABI.rst
===============================================


CMAKE_ANDROID_ARCH_ABI
----------------------

.. versionadded:: 3.7

When :ref:`Cross Compiling for Android`, this variable specifies the
target architecture and ABI to be used.  Valid values are:

* ``arm64-v8a``
* ``armeabi-v7a``
* ``armeabi-v6``
* ``armeabi``
* ``mips``
* ``mips64``
* ``x86``
* ``x86_64``

See also the :variable:`CMAKE_ANDROID_ARM_MODE` and
:variable:`CMAKE_ANDROID_ARM_NEON` variables.



/P/🚀 variable/CMAKE_ANDROID_ARM_MODE.rst
===============================================


CMAKE_ANDROID_ARM_MODE
----------------------

.. versionadded:: 3.7

When :ref:`Cross Compiling for Android` and :variable:`CMAKE_ANDROID_ARCH_ABI`
is set to one of the ``armeabi`` architectures, set ``CMAKE_ANDROID_ARM_MODE``
to ``ON`` to target 32-bit ARM processors (``-marm``).  Otherwise, the
default is to target the 16-bit Thumb processors (``-mthumb``).



/P/🚀 variable/CMAKE_ANDROID_ARM_NEON.rst
===============================================


CMAKE_ANDROID_ARM_NEON
----------------------

.. versionadded:: 3.7

When :ref:`Cross Compiling for Android` and :variable:`CMAKE_ANDROID_ARCH_ABI`
is set to ``armeabi-v7a`` set ``CMAKE_ANDROID_ARM_NEON`` to ``ON`` to target
ARM NEON devices.



/P/🚀 variable/CMAKE_ANDROID_ASSETS_DIRECTORIES.rst
=========================================================


CMAKE_ANDROID_ASSETS_DIRECTORIES
--------------------------------

.. versionadded:: 3.4

Default value for the :prop_tgt:`ANDROID_ASSETS_DIRECTORIES` target property.
See that target property for additional information.



/P/🚀 variable/CMAKE_ANDROID_EXCEPTIONS.rst
=================================================


CMAKE_ANDROID_EXCEPTIONS
------------------------

.. versionadded:: 3.20

When :ref:`Cross Compiling for Android with the NDK`, this variable may be set
to specify whether exceptions are enabled.



/P/🚀 variable/CMAKE_ANDROID_GUI.rst
==========================================


CMAKE_ANDROID_GUI
-----------------

.. versionadded:: 3.1

Default value for the :prop_tgt:`ANDROID_GUI` target property of
executables.  See that target property for additional information.



/P/🚀 variable/CMAKE_ANDROID_JAR_DEPENDENCIES.rst
=======================================================


CMAKE_ANDROID_JAR_DEPENDENCIES
------------------------------

.. versionadded:: 3.4

Default value for the :prop_tgt:`ANDROID_JAR_DEPENDENCIES` target property.
See that target property for additional information.



/P/🚀 variable/CMAKE_ANDROID_JAR_DIRECTORIES.rst
======================================================


CMAKE_ANDROID_JAR_DIRECTORIES
-----------------------------

.. versionadded:: 3.4

Default value for the :prop_tgt:`ANDROID_JAR_DIRECTORIES` target property.
See that target property for additional information.



/P/🚀 variable/CMAKE_ANDROID_JAVA_SOURCE_DIR.rst
======================================================


CMAKE_ANDROID_JAVA_SOURCE_DIR
-----------------------------

.. versionadded:: 3.4

Default value for the :prop_tgt:`ANDROID_JAVA_SOURCE_DIR` target property.
See that target property for additional information.



/P/🚀 variable/CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES.rst
==============================================================


CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES
-------------------------------------

.. versionadded:: 3.4

Default value for the :prop_tgt:`ANDROID_NATIVE_LIB_DEPENDENCIES` target
property.  See that target property for additional information.



/P/🚀 variable/CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES.rst
=============================================================


CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES
------------------------------------

.. versionadded:: 3.4

Default value for the :prop_tgt:`ANDROID_NATIVE_LIB_DIRECTORIES` target
property.  See that target property for additional information.



/P/🚀 variable/CMAKE_ANDROID_NDK.rst
==========================================


CMAKE_ANDROID_NDK
-----------------

.. versionadded:: 3.7

When :ref:`Cross Compiling for Android with the NDK`, this variable holds
the absolute path to the root directory of the NDK.  The directory must
contain a ``platforms`` subdirectory holding the ``android-<api>``
directories.



/P/🚀 variable/CMAKE_ANDROID_NDK_DEPRECATED_HEADERS.rst
=============================================================


CMAKE_ANDROID_NDK_DEPRECATED_HEADERS
------------------------------------

.. versionadded:: 3.9

When :ref:`Cross Compiling for Android with the NDK`, this variable
may be set to specify whether to use the deprecated per-api-level
headers instead of the unified headers.

If not specified, the default will be *false* if using a NDK version
that provides the unified headers and *true* otherwise.



/P/🚀 variable/CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG.rst
=============================================================


CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG
------------------------------------

.. versionadded:: 3.7.1

When :ref:`Cross Compiling for Android with the NDK`, this variable
provides the NDK's "host tag" used to construct the path to prebuilt
toolchains that run on the host.



/P/🚀 variable/CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION.rst
============================================================


CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION
-----------------------------------

.. versionadded:: 3.7

When :ref:`Cross Compiling for Android with the NDK`, this variable
may be set to specify the version of the toolchain to be used
as the compiler.

On NDK r19 or above, this variable must be unset or set to ``clang``.

On NDK r18 or below, this variable must be set to one of these forms:

* ``<major>.<minor>``: GCC of specified version
* ``clang<major>.<minor>``: Clang of specified version
* ``clang``: Clang of most recent available version

A toolchain of the requested version will be selected automatically to
match the ABI named in the :variable:`CMAKE_ANDROID_ARCH_ABI` variable.

If not specified, the default will be a value that selects the latest
available GCC toolchain.



/P/🚀 variable/CMAKE_ANDROID_PROCESS_MAX.rst
==================================================


CMAKE_ANDROID_PROCESS_MAX
-------------------------

.. versionadded:: 3.4

Default value for the :prop_tgt:`ANDROID_PROCESS_MAX` target property.
See that target property for additional information.



/P/🚀 variable/CMAKE_ANDROID_PROGUARD.rst
===============================================


CMAKE_ANDROID_PROGUARD
----------------------

.. versionadded:: 3.4

Default value for the :prop_tgt:`ANDROID_PROGUARD` target property.
See that target property for additional information.



/P/🚀 variable/CMAKE_ANDROID_PROGUARD_CONFIG_PATH.rst
===========================================================


CMAKE_ANDROID_PROGUARD_CONFIG_PATH
----------------------------------

.. versionadded:: 3.4

Default value for the :prop_tgt:`ANDROID_PROGUARD_CONFIG_PATH` target property.
See that target property for additional information.



/P/🚀 variable/CMAKE_ANDROID_RTTI.rst
===========================================


CMAKE_ANDROID_RTTI
------------------

.. versionadded:: 3.20

When :ref:`Cross Compiling for Android with the NDK`, this variable may be set
to specify whether RTTI is enabled.



/P/🚀 variable/CMAKE_ANDROID_SECURE_PROPS_PATH.rst
========================================================


CMAKE_ANDROID_SECURE_PROPS_PATH
-------------------------------

.. versionadded:: 3.4

Default value for the :prop_tgt:`ANDROID_SECURE_PROPS_PATH` target property.
See that target property for additional information.



/P/🚀 variable/CMAKE_ANDROID_SKIP_ANT_STEP.rst
====================================================


CMAKE_ANDROID_SKIP_ANT_STEP
---------------------------

.. versionadded:: 3.4

Default value for the :prop_tgt:`ANDROID_SKIP_ANT_STEP` target property.
See that target property for additional information.



/P/🚀 variable/CMAKE_ANDROID_STANDALONE_TOOLCHAIN.rst
===========================================================


CMAKE_ANDROID_STANDALONE_TOOLCHAIN
----------------------------------

.. versionadded:: 3.7

When :ref:`Cross Compiling for Android with a Standalone Toolchain`, this
variable holds the absolute path to the root directory of the toolchain.
The specified directory must contain a ``sysroot`` subdirectory.



/P/🚀 variable/CMAKE_ANDROID_STL_TYPE.rst
===============================================


CMAKE_ANDROID_STL_TYPE
----------------------

.. versionadded:: 3.4

When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio
Edition`, this variable may be set to specify the default value for the
:prop_tgt:`ANDROID_STL_TYPE` target property.  See that target property
for additional information.

When :ref:`Cross Compiling for Android with the NDK`, this variable may be
set to specify the STL variant to be used.  The value may be one of:

``none``
  No C++ Support
``system``
  Minimal C++ without STL
``gabi++_static``
  GAbi++ Static
``gabi++_shared``
  GAbi++ Shared
``gnustl_static``
  GNU libstdc++ Static
``gnustl_shared``
  GNU libstdc++ Shared
``c++_static``
  LLVM libc++ Static
``c++_shared``
  LLVM libc++ Shared
``stlport_static``
  STLport Static
``stlport_shared``
  STLport Shared

The default value is ``gnustl_static`` on NDK versions that provide it
and otherwise ``c++_static``.  Note that this default differs from
the native NDK build system because CMake may be used to build projects for
Android that are not natively implemented for it and use the C++ standard
library.



/P/🚀 variable/CMAKE_APPLE_SILICON_PROCESSOR.rst
======================================================


CMAKE_APPLE_SILICON_PROCESSOR
-----------------------------

.. versionadded:: 3.19.2

On Apple Silicon hosts running macOS, set this variable to tell
CMake what architecture to use for :variable:`CMAKE_HOST_SYSTEM_PROCESSOR`.
The value must be either ``arm64`` or ``x86_64``.

The value of this variable should never be modified by project code.
It is meant to be set as a cache entry provided by the user,
e.g. via ``-DCMAKE_APPLE_SILICON_PROCESSOR=...``.

See also the :envvar:`CMAKE_APPLE_SILICON_PROCESSOR` environment variable.



/P/🚀 variable/CMAKE_ARCHIVE_OUTPUT_DIRECTORY.rst
=======================================================


CMAKE_ARCHIVE_OUTPUT_DIRECTORY
------------------------------

Where to put all the :ref:`ARCHIVE <Archive Output Artifacts>`
target files when built.

This variable is used to initialize the :prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY`
property on all the targets.  See that target property for additional
information.



/P/🚀 variable/CMAKE_ARCHIVE_OUTPUT_DIRECTORY_CONFIG.rst
==============================================================


CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>
---------------------------------------

.. versionadded:: 3.3

Where to put all the :ref:`ARCHIVE <Archive Output Artifacts>`
target files when built for a specific configuration.

This variable is used to initialize the
:prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>` property on all the targets.
See that target property for additional information.



/P/🚀 variable/CMAKE_AUTOGEN_BETTER_GRAPH_MULTI_CONFIG.rst
================================================================


CMAKE_AUTOGEN_BETTER_GRAPH_MULTI_CONFIG
---------------------------------------

.. versionadded:: 3.29

This variable is used to initialize the
:prop_tgt:`AUTOGEN_BETTER_GRAPH_MULTI_CONFIG` property on all targets as they
are created.  See that target property for additional information.

By default ``CMAKE_AUTOGEN_BETTER_GRAPH_MULTI_CONFIG`` is unset.



/P/🚀 variable/CMAKE_AUTOGEN_COMMAND_LINE_LENGTH_MAX.rst
==============================================================


CMAKE_AUTOGEN_COMMAND_LINE_LENGTH_MAX
-------------------------------------

.. versionadded:: 3.29

Command line length limit for autogen targets, i.e. ``moc`` or ``uic``,
that triggers the use of response files on Windows instead of passing all
arguments to the command line.

By default ``CMAKE_AUTOGEN_COMMAND_LINE_LENGTH_MAX`` is unset.



/P/🚀 variable/CMAKE_AUTOGEN_ORIGIN_DEPENDS.rst
=====================================================


CMAKE_AUTOGEN_ORIGIN_DEPENDS
----------------------------

.. versionadded:: 3.14

Switch for forwarding origin target dependencies to the corresponding
:ref:`<ORIGIN>_autogen` targets.

  .. note::

    If Qt 5.15 or later is used and the generator is either :generator:`Ninja`
    or :ref:`Makefile Generators`, additional target dependencies are added to
    the :ref:`<ORIGIN>_autogen_timestamp_deps` target instead of the
    :ref:`<ORIGIN>_autogen` target.

This variable is used to initialize the :prop_tgt:`AUTOGEN_ORIGIN_DEPENDS`
property on all the targets.  See that target property for additional
information.

By default ``CMAKE_AUTOGEN_ORIGIN_DEPENDS`` is ``ON``.



/P/🚀 variable/CMAKE_AUTOGEN_PARALLEL.rst
===============================================


CMAKE_AUTOGEN_PARALLEL
----------------------

.. versionadded:: 3.11

Number of parallel ``moc`` or ``uic`` processes to start when using
:prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC`.

This variable is used to initialize the :prop_tgt:`AUTOGEN_PARALLEL` property
on all the targets.  See that target property for additional information.

By default ``CMAKE_AUTOGEN_PARALLEL`` is unset.



/P/🚀 variable/CMAKE_AUTOGEN_USE_SYSTEM_INCLUDE.rst
=========================================================


CMAKE_AUTOGEN_USE_SYSTEM_INCLUDE
--------------------------------

.. versionadded:: 3.27

This variable is used to initialize the :prop_tgt:`AUTOGEN_USE_SYSTEM_INCLUDE`
property on all targets as they are created.  See that target property for
additional information.

By default ``CMAKE_AUTOGEN_USE_SYSTEM_INCLUDE`` is unset.



/P/🚀 variable/CMAKE_AUTOGEN_VERBOSE.rst
==============================================


CMAKE_AUTOGEN_VERBOSE
---------------------

.. versionadded:: 3.13

Sets the verbosity of :prop_tgt:`AUTOMOC`, :prop_tgt:`AUTOUIC` and
:prop_tgt:`AUTORCC`.  A positive integer value or a true boolean value
lets the ``AUTO*`` generators output additional processing information.

Setting ``CMAKE_AUTOGEN_VERBOSE`` has the same effect
as setting the ``VERBOSE`` environment variable during
generation (e.g. by calling ``make VERBOSE=1``).
The extra verbosity is limited to the ``AUTO*`` generators though.

By default ``CMAKE_AUTOGEN_VERBOSE`` is unset.



/P/🚀 variable/CMAKE_AUTOMOC.rst
======================================


CMAKE_AUTOMOC
-------------

Whether to handle ``moc`` automatically for Qt targets.

This variable is used to initialize the :prop_tgt:`AUTOMOC` property on all the
targets.  See that target property for additional information.



/P/🚀 variable/CMAKE_AUTOMOC_COMPILER_PREDEFINES.rst
==========================================================


CMAKE_AUTOMOC_COMPILER_PREDEFINES
---------------------------------

.. versionadded:: 3.10

This variable is used to initialize the :prop_tgt:`AUTOMOC_COMPILER_PREDEFINES`
property on all the targets. See that target property for additional
information.

By default it is ON.



/P/🚀 variable/CMAKE_AUTOMOC_DEPEND_FILTERS.rst
=====================================================


CMAKE_AUTOMOC_DEPEND_FILTERS
----------------------------

.. versionadded:: 3.9

Filter definitions used by :variable:`CMAKE_AUTOMOC`
to extract file names from source code as additional dependencies
for the ``moc`` file.

This variable is used to initialize the :prop_tgt:`AUTOMOC_DEPEND_FILTERS`
property on all the targets. See that target property for additional
information.

By default it is empty.



/P/🚀 variable/CMAKE_AUTOMOC_MACRO_NAMES.rst
==================================================


CMAKE_AUTOMOC_MACRO_NAMES
----------------------------

.. versionadded:: 3.10

:ref:`Semicolon-separated list <CMake Language Lists>` list of macro names used by
:variable:`CMAKE_AUTOMOC` to determine if a C++ file needs to be
processed by ``moc``.

This variable is used to initialize the :prop_tgt:`AUTOMOC_MACRO_NAMES`
property on all the targets. See that target property for additional
information.

The default value is ``Q_OBJECT;Q_GADGET;Q_NAMESPACE;Q_NAMESPACE_EXPORT``.

Example
^^^^^^^
Let CMake know that source files that contain ``CUSTOM_MACRO`` must be ``moc``
processed as well::

  set(CMAKE_AUTOMOC ON)
  list(APPEND CMAKE_AUTOMOC_MACRO_NAMES "CUSTOM_MACRO")



/P/🚀 variable/CMAKE_AUTOMOC_MOC_OPTIONS.rst
==================================================


CMAKE_AUTOMOC_MOC_OPTIONS
-------------------------

Additional options for ``moc`` when using :variable:`CMAKE_AUTOMOC`.

This variable is used to initialize the :prop_tgt:`AUTOMOC_MOC_OPTIONS` property
on all the targets.  See that target property for additional information.



/P/🚀 variable/CMAKE_AUTOMOC_PATH_PREFIX.rst
==================================================


CMAKE_AUTOMOC_PATH_PREFIX
-------------------------

.. versionadded:: 3.16

Whether to generate the ``-p`` path prefix option for ``moc`` on
:prop_tgt:`AUTOMOC` enabled Qt targets.

This variable is used to initialize the :prop_tgt:`AUTOMOC_PATH_PREFIX`
property on all the targets.  See that target property for additional
information.

The default value is ``OFF``.



/P/🚀 variable/CMAKE_AUTOMOC_EXECUTABLE.rst
=================================================


CMAKE_AUTOMOC_EXECUTABLE
------------------------

.. versionadded:: 3.27

This variable is used to initialize the :prop_tgt:`AUTOMOC_EXECUTABLE`
property on all the targets. See that target property for additional
information.

By default it is empty.



/P/🚀 variable/CMAKE_AUTORCC.rst
======================================


CMAKE_AUTORCC
-------------

Whether to handle ``rcc`` automatically for Qt targets.

This variable is used to initialize the :prop_tgt:`AUTORCC` property on all
the targets.  See that target property for additional information.



/P/🚀 variable/CMAKE_AUTORCC_OPTIONS.rst
==============================================


CMAKE_AUTORCC_OPTIONS
---------------------

Additional options for ``rcc`` when using :variable:`CMAKE_AUTORCC`.

This variable is used to initialize the :prop_tgt:`AUTORCC_OPTIONS` property on
all the targets.  See that target property for additional information.

EXAMPLE
^^^^^^^

.. code-block:: cmake

  # ...
  set(CMAKE_AUTORCC_OPTIONS "--compress;9")
  # ...



/P/🚀 variable/CMAKE_AUTORCC_EXECUTABLE.rst
=================================================


CMAKE_AUTORCC_EXECUTABLE
------------------------

.. versionadded:: 3.27

This variable is used to initialize the :prop_tgt:`AUTORCC_EXECUTABLE`
property on all the targets. See that target property for additional
information.

By default it is empty.



/P/🚀 variable/CMAKE_AUTOUIC.rst
======================================


CMAKE_AUTOUIC
-------------

Whether to handle ``uic`` automatically for Qt targets.

This variable is used to initialize the :prop_tgt:`AUTOUIC` property on all
the targets.  See that target property for additional information.



/P/🚀 variable/CMAKE_AUTOUIC_OPTIONS.rst
==============================================


CMAKE_AUTOUIC_OPTIONS
---------------------

Additional options for ``uic`` when using :variable:`CMAKE_AUTOUIC`.

This variable is used to initialize the :prop_tgt:`AUTOUIC_OPTIONS` property on
all the targets.  See that target property for additional information.

EXAMPLE
^^^^^^^

.. code-block:: cmake

  # ...
  set_property(CMAKE_AUTOUIC_OPTIONS "--no-protection")
  # ...



/P/🚀 variable/CMAKE_AUTOUIC_SEARCH_PATHS.rst
===================================================


CMAKE_AUTOUIC_SEARCH_PATHS
--------------------------

.. versionadded:: 3.9

Search path list used by :variable:`CMAKE_AUTOUIC` to find included
``.ui`` files.

This variable is used to initialize the :prop_tgt:`AUTOUIC_SEARCH_PATHS`
property on all the targets. See that target property for additional
information.

By default it is empty.



/P/🚀 variable/CMAKE_AUTOUIC_EXECUTABLE.rst
=================================================


CMAKE_AUTOUIC_EXECUTABLE
------------------------

.. versionadded:: 3.27

This variable is used to initialize the :prop_tgt:`AUTOUIC_EXECUTABLE`
property on all the targets. See that target property for additional
information.

By default it is empty.



/P/🚀 variable/CMAKE_BUILD_RPATH.rst
==========================================


CMAKE_BUILD_RPATH
-----------------

.. versionadded:: 3.8

:ref:`Semicolon-separated list <CMake Language Lists>` specifying runtime path (``RPATH``)
entries to add to binaries linked in the build tree (for platforms that
support it).  The entries will *not* be used for binaries in the install
tree.  See also the :variable:`CMAKE_INSTALL_RPATH` variable.

This is used to initialize the :prop_tgt:`BUILD_RPATH` target property
for all targets.



/P/🚀 variable/CMAKE_BUILD_RPATH_USE_ORIGIN.rst
=====================================================


CMAKE_BUILD_RPATH_USE_ORIGIN
----------------------------

.. versionadded:: 3.14

Whether to use relative paths for the build ``RPATH``.

This is used to initialize the :prop_tgt:`BUILD_RPATH_USE_ORIGIN` target
property for all targets, see that property for more details.



/P/🚀 variable/CMAKE_BUILD_WITH_INSTALL_NAME_DIR.rst
==========================================================


CMAKE_BUILD_WITH_INSTALL_NAME_DIR
---------------------------------

.. versionadded:: 3.9

Whether to use :prop_tgt:`INSTALL_NAME_DIR` on targets in the build tree.

This variable is used to initialize the :prop_tgt:`BUILD_WITH_INSTALL_NAME_DIR`
property on all targets.



/P/🚀 variable/CMAKE_BUILD_WITH_INSTALL_RPATH.rst
=======================================================


CMAKE_BUILD_WITH_INSTALL_RPATH
------------------------------

Use the install path for the ``RPATH``.

Normally CMake uses the build tree for the ``RPATH`` when building
executables etc on systems that use ``RPATH``.  When the software is
installed the executables etc are relinked by CMake to have the
install ``RPATH``.  If this variable is set to true then the software is
always built with the install path for the ``RPATH`` and does not need to
be relinked when installed.

This is used to initialize the :prop_tgt:`BUILD_WITH_INSTALL_RPATH` target property
for all targets.



/P/🚀 variable/CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY.rst
===========================================================


CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY
----------------------------------

.. versionadded:: 3.1

Output directory for MS debug symbol ``.pdb`` files
generated by the compiler while building source files.

This variable is used to initialize the
:prop_tgt:`COMPILE_PDB_OUTPUT_DIRECTORY` property on all the targets.



/P/🚀 variable/CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG.rst
==================================================================


CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>
-------------------------------------------

.. versionadded:: 3.1

Per-configuration output directory for MS debug symbol ``.pdb`` files
generated by the compiler while building source files.

This is a per-configuration version of
:variable:`CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY`.
This variable is used to initialize the
:prop_tgt:`COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>`
property on all the targets.



/P/🚀 variable/CMAKE_COMPILE_WARNING_AS_ERROR.rst
=======================================================


CMAKE_COMPILE_WARNING_AS_ERROR
------------------------------

.. versionadded:: 3.24

Specify whether to treat warnings on compile as errors.

This variable is used to initialize the
:prop_tgt:`COMPILE_WARNING_AS_ERROR` property on all the targets.



/P/🚀 variable/CMAKE_CONFIG_POSTFIX.rst
=============================================


CMAKE_<CONFIG>_POSTFIX
----------------------

Default filename postfix for libraries under configuration ``<CONFIG>``.

When a non-executable target is created its :prop_tgt:`<CONFIG>_POSTFIX`
target property is initialized with the value of this variable if it is set.



/P/🚀 variable/CMAKE_CROSS_CONFIGS.rst
============================================


CMAKE_CROSS_CONFIGS
-------------------

.. versionadded:: 3.17

Specifies a :ref:`semicolon-separated list <CMake Language Lists>` of
configurations available from all ``build-<Config>.ninja`` files in the
:generator:`Ninja Multi-Config` generator.  This variable activates
cross-config mode. Targets from each config specified in this variable can be
built from any ``build-<Config>.ninja`` file. Custom commands will use the
configuration native to ``build-<Config>.ninja``. If it is set to ``all``, all
configurations from :variable:`CMAKE_CONFIGURATION_TYPES` are cross-configs. If
it is not specified, or empty, each ``build-<Config>.ninja`` file will only
contain build rules for its own configuration.

The value of this variable must be a subset of
:variable:`CMAKE_CONFIGURATION_TYPES`.



/P/🚀 variable/CMAKE_CTEST_ARGUMENTS.rst
==============================================


CMAKE_CTEST_ARGUMENTS
---------------------

.. versionadded:: 3.17

Set this to a :ref:`semicolon-separated list <CMake Language Lists>` of
command-line arguments to pass to :manual:`ctest(1)` when running tests
through the ``test`` (or ``RUN_TESTS``) target of the generated build system.



/P/🚀 variable/CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS.rst
==========================================================


CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS
---------------------------------

.. versionadded:: 3.16

Default value for :prop_tgt:`CUDA_RESOLVE_DEVICE_SYMBOLS` target
property when defined. By default this variable is not defined.

This variable is used to initialize the property on each target as
it is created.



/P/🚀 variable/CMAKE_CUDA_RUNTIME_LIBRARY.rst
===================================================


CMAKE_CUDA_RUNTIME_LIBRARY
--------------------------

.. versionadded:: 3.17

Select the CUDA runtime library for use when compiling and linking CUDA.
This variable is used to initialize the :prop_tgt:`CUDA_RUNTIME_LIBRARY`
property on all targets as they are created.

The allowed case insensitive values are:

.. include:: ../prop_tgt/CUDA_RUNTIME_LIBRARY-VALUES.txt

Contents of ``CMAKE_CUDA_RUNTIME_LIBRARY`` may use
:manual:`generator expressions <cmake-generator-expressions(7)>`.

If this variable is not set then the :prop_tgt:`CUDA_RUNTIME_LIBRARY` target
property will not be set automatically.  If that property is not set then
CMake uses an appropriate default value based on the compiler to select the
CUDA runtime library.

.. note::

  This property has effect only when the ``CUDA`` language is enabled. To
  control the CUDA runtime linking when only using the CUDA SDK with the
  ``C`` or ``C++`` language we recommend using the :module:`FindCUDAToolkit`
  module.



/P/🚀 variable/CMAKE_CUDA_SEPARABLE_COMPILATION.rst
=========================================================


CMAKE_CUDA_SEPARABLE_COMPILATION
--------------------------------

.. versionadded:: 3.11

Default value for :prop_tgt:`CUDA_SEPARABLE_COMPILATION` target property.
This variable is used to initialize the property on each target as it is
created.



/P/🚀 variable/CMAKE_CXX_SCAN_FOR_MODULES.rst
===================================================


CMAKE_CXX_SCAN_FOR_MODULES
--------------------------

.. versionadded:: 3.28

Whether to scan C++ source files for module dependencies.

This variable is used to initialize the :prop_tgt:`CXX_SCAN_FOR_MODULES`
property on all the targets.  See that target property for additional
information.



/P/🚀 variable/CMAKE_DEBUG_POSTFIX.rst
============================================


CMAKE_DEBUG_POSTFIX
-------------------

See variable :variable:`CMAKE_<CONFIG>_POSTFIX`.

This variable is a special case of the more-general
:variable:`CMAKE_<CONFIG>_POSTFIX` variable for the `DEBUG` configuration.



/P/🚀 variable/CMAKE_DEFAULT_BUILD_TYPE.rst
=================================================


CMAKE_DEFAULT_BUILD_TYPE
------------------------

.. versionadded:: 3.17

Specifies the configuration to use by default in a ``build.ninja`` file in the
:generator:`Ninja Multi-Config` generator. If this variable is specified,
``build.ninja`` uses build rules from ``build-<Config>.ninja`` by default. All
custom commands are executed with this configuration. If the variable is not
specified, the first item from :variable:`CMAKE_CONFIGURATION_TYPES` is used
instead.

The value of this variable must be one of the items from
:variable:`CMAKE_CONFIGURATION_TYPES`.



/P/🚀 variable/CMAKE_DEFAULT_CONFIGS.rst
==============================================


CMAKE_DEFAULT_CONFIGS
---------------------

.. versionadded:: 3.17

Specifies a :ref:`semicolon-separated list <CMake Language Lists>` of configurations
to build for a target in ``build.ninja`` if no ``:<Config>`` suffix is specified in
the :generator:`Ninja Multi-Config` generator. If it is set to ``all``, all
configurations from :variable:`CMAKE_CROSS_CONFIGS` are used. If it is not
specified, it defaults to :variable:`CMAKE_DEFAULT_BUILD_TYPE`.

For example, if you set :variable:`CMAKE_DEFAULT_BUILD_TYPE` to ``Release``,
but set ``CMAKE_DEFAULT_CONFIGS`` to ``Debug`` or ``all``, all
``<target>`` aliases in ``build.ninja`` will resolve to ``<target>:Debug`` or
``<target>:all``, but custom commands will still use the ``Release``
configuration.

The value of this variable must be a subset of :variable:`CMAKE_CROSS_CONFIGS`
or be the same as :variable:`CMAKE_DEFAULT_BUILD_TYPE`. It must not be
specified if :variable:`CMAKE_DEFAULT_BUILD_TYPE` or
:variable:`CMAKE_CROSS_CONFIGS` is not used.



/P/🚀 variable/CMAKE_DEPENDS_USE_COMPILER.rst
===================================================


CMAKE_DEPENDS_USE_COMPILER
--------------------------

.. versionadded:: 3.20

For the :ref:`Makefile Generators`, source dependencies are now, for a
selection of compilers, generated by the compiler itself. By defining this
variable with value ``FALSE``, you can restore the legacy behavior (i.e. using
CMake for dependencies discovery).



/P/🚀 variable/CMAKE_DISABLE_PRECOMPILE_HEADERS.rst
=========================================================


CMAKE_DISABLE_PRECOMPILE_HEADERS
--------------------------------

.. versionadded:: 3.16

Default value for :prop_tgt:`DISABLE_PRECOMPILE_HEADERS` of targets.

By default ``CMAKE_DISABLE_PRECOMPILE_HEADERS`` is ``OFF``.



/P/🚀 variable/CMAKE_DLL_NAME_WITH_SOVERSION.rst
======================================================


CMAKE_DLL_NAME_WITH_SOVERSION
-----------------------------

.. versionadded:: 3.27

This variable is used to initialize the :prop_tgt:`DLL_NAME_WITH_SOVERSION`
property on shared library targets for the Windows platform, which is selected
when the :variable:`WIN32` variable is set.

See this target property for additional information.

Please note that setting this variable has no effect if versioned filenames
are globally disabled with the :variable:`CMAKE_PLATFORM_NO_VERSIONED_SONAME`
variable.



/P/🚀 variable/CMAKE_ENABLE_EXPORTS.rst
=============================================


CMAKE_ENABLE_EXPORTS
--------------------

.. versionadded:: 3.4

Specify whether executables export symbols for loadable modules.

This variable is used to initialize the :prop_tgt:`ENABLE_EXPORTS` target
property for executable targets when they are created by calls to the
:command:`add_executable` command.  See the property documentation for details.

This variable has been superseded by the
:variable:`CMAKE_EXECUTABLE_ENABLE_EXPORTS` variable.  It is provided for
backward compatibility with older CMake code, but should not be used in new
projects.



/P/🚀 variable/CMAKE_EXECUTABLE_ENABLE_EXPORTS.rst
========================================================


CMAKE_EXECUTABLE_ENABLE_EXPORTS
-------------------------------

.. versionadded:: 3.27

Specify whether executables export symbols for loadable modules.

This variable is used to initialize the :prop_tgt:`ENABLE_EXPORTS` target
property for executable targets when they are created by calls to the
:command:`add_executable` command.  See the property documentation for details.

This variable supersede the :variable:`CMAKE_ENABLE_EXPORTS` variable.



/P/🚀 variable/CMAKE_EXE_LINKER_FLAGS.rst
===============================================


CMAKE_EXE_LINKER_FLAGS
----------------------

Linker flags to be used to create executables.

These flags will be used by the linker when creating an executable.



/P/🚀 variable/CMAKE_EXE_LINKER_FLAGS_CONFIG.rst
======================================================


CMAKE_EXE_LINKER_FLAGS_<CONFIG>
-------------------------------

Flags to be used when linking an executable.

Same as ``CMAKE_C_FLAGS_*`` but used by the linker when creating
executables.



/P/🚀 variable/CMAKE_EXE_LINKER_FLAGS_CONFIG_INIT.rst
===========================================================


CMAKE_EXE_LINKER_FLAGS_<CONFIG>_INIT
------------------------------------

.. versionadded:: 3.7

Value used to initialize the :variable:`CMAKE_EXE_LINKER_FLAGS_<CONFIG>`
cache entry the first time a build tree is configured.
This variable is meant to be set by a :variable:`toolchain file
<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to
the value based on the environment and target platform.

See also :variable:`CMAKE_EXE_LINKER_FLAGS_INIT`.



/P/🚀 variable/CMAKE_EXE_LINKER_FLAGS_INIT.rst
====================================================


CMAKE_EXE_LINKER_FLAGS_INIT
---------------------------

.. versionadded:: 3.7

Value used to initialize the :variable:`CMAKE_EXE_LINKER_FLAGS`
cache entry the first time a build tree is configured.
This variable is meant to be set by a :variable:`toolchain file
<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to
the value based on the environment and target platform.

See also the configuration-specific variable
:variable:`CMAKE_EXE_LINKER_FLAGS_<CONFIG>_INIT`.



/P/🚀 variable/CMAKE_EXPORT_FIND_PACKAGE_NAME.rst
=======================================================


CMAKE_EXPORT_FIND_PACKAGE_NAME
------------------------------

.. note::

  Experimental. Gated by ``CMAKE_EXPERIMENTAL_EXPORT_PACKAGE_DEPENDENCIES``.

Initializes the value of :prop_tgt:`EXPORT_FIND_PACKAGE_NAME`.



/P/🚀 variable/CMAKE_FOLDER.rst
=====================================


CMAKE_FOLDER
------------

.. versionadded:: 3.12

Set the folder name. Use to organize targets in an IDE.

This variable is used to initialize the :prop_tgt:`FOLDER` property on all the
targets.  See that target property for additional information.



/P/🚀 variable/CMAKE_Fortran_FORMAT.rst
=============================================


CMAKE_Fortran_FORMAT
--------------------

Set to ``FIXED`` or ``FREE`` to indicate the Fortran source layout.

This variable is used to initialize the :prop_tgt:`Fortran_FORMAT` property on
all the targets.  See that target property for additional information.



/P/🚀 variable/CMAKE_Fortran_MODULE_DIRECTORY.rst
=======================================================


CMAKE_Fortran_MODULE_DIRECTORY
------------------------------

Fortran module output directory.

This variable is used to initialize the :prop_tgt:`Fortran_MODULE_DIRECTORY`
property on all the targets.  See that target property for additional
information.



/P/🚀 variable/CMAKE_Fortran_PREPROCESS.rst
=================================================


CMAKE_Fortran_PREPROCESS
------------------------

.. versionadded:: 3.18

Default value for :prop_tgt:`Fortran_PREPROCESS` of targets.

This variable is used to initialize the :prop_tgt:`Fortran_PREPROCESS`
property on all the targets.  See that target property for additional
information.



/P/🚀 variable/CMAKE_FRAMEWORK.rst
========================================


CMAKE_FRAMEWORK
---------------

.. versionadded:: 3.15

Default value for :prop_tgt:`FRAMEWORK` of targets.

This variable is used to initialize the :prop_tgt:`FRAMEWORK` property on
all the targets.  See that target property for additional information.



/P/🚀 variable/CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG.rst
====================================================================


CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>
---------------------------------------------

.. versionadded:: 3.18

Default framework filename postfix under configuration ``<CONFIG>`` when
using a multi-config generator.

When a framework target is created its :prop_tgt:`FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>`
target property is initialized with the value of this variable if it is set.



/P/🚀 variable/CMAKE_GHS_NO_SOURCE_GROUP_FILE.rst
=======================================================


CMAKE_GHS_NO_SOURCE_GROUP_FILE
------------------------------

.. versionadded:: 3.14

``ON`` / ``OFF`` boolean to control if the project file for a target should
be one single file or multiple files.  Refer to
:prop_tgt:`GHS_NO_SOURCE_GROUP_FILE` for further details.



/P/🚀 variable/CMAKE_GLOBAL_AUTOGEN_TARGET.rst
====================================================


CMAKE_GLOBAL_AUTOGEN_TARGET
---------------------------

.. versionadded:: 3.14

Switch to enable generation of a global ``autogen`` target.

When ``CMAKE_GLOBAL_AUTOGEN_TARGET`` is enabled, a custom target
``autogen`` is generated.  This target depends on all :prop_tgt:`AUTOMOC` and
:prop_tgt:`AUTOUIC` generated :ref:`<ORIGIN>_autogen` targets in the project.
By building the global ``autogen`` target, all :prop_tgt:`AUTOMOC` and
:prop_tgt:`AUTOUIC` files in the project will be generated.

The name of the global ``autogen`` target can be changed by setting
:variable:`CMAKE_GLOBAL_AUTOGEN_TARGET_NAME`.

By default ``CMAKE_GLOBAL_AUTOGEN_TARGET`` is unset.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.

.. note::

    :ref:`<ORIGIN>_autogen` targets by default inherit their origin target's
    dependencies. This might result in unintended dependency target builds when
    only :ref:`<ORIGIN>_autogen` targets are built.  A solution is to disable
    :prop_tgt:`AUTOGEN_ORIGIN_DEPENDS` on the respective origin targets.



/P/🚀 variable/CMAKE_GLOBAL_AUTOGEN_TARGET_NAME.rst
=========================================================


CMAKE_GLOBAL_AUTOGEN_TARGET_NAME
--------------------------------

.. versionadded:: 3.14

Change the name of the global ``autogen`` target.

When :variable:`CMAKE_GLOBAL_AUTOGEN_TARGET` is enabled, a global custom target
named ``autogen`` is created.  ``CMAKE_GLOBAL_AUTOGEN_TARGET_NAME``
allows to set a different name for that target.

By default ``CMAKE_GLOBAL_AUTOGEN_TARGET_NAME`` is unset.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.



/P/🚀 variable/CMAKE_GLOBAL_AUTORCC_TARGET.rst
====================================================


CMAKE_GLOBAL_AUTORCC_TARGET
---------------------------

.. versionadded:: 3.14

Switch to enable generation of a global ``autorcc`` target.

When ``CMAKE_GLOBAL_AUTORCC_TARGET`` is enabled, a custom target
``autorcc`` is generated. This target depends on all :prop_tgt:`AUTORCC`
generated ``<ORIGIN>_arcc_<QRC>`` targets in the project.
By building the global ``autorcc`` target, all :prop_tgt:`AUTORCC`
files in the project will be generated.

The name of the global ``autorcc`` target can be changed by setting
:variable:`CMAKE_GLOBAL_AUTORCC_TARGET_NAME`.

By default ``CMAKE_GLOBAL_AUTORCC_TARGET`` is unset.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.



/P/🚀 variable/CMAKE_GLOBAL_AUTORCC_TARGET_NAME.rst
=========================================================


CMAKE_GLOBAL_AUTORCC_TARGET_NAME
--------------------------------

.. versionadded:: 3.14

Change the name of the global ``autorcc`` target.

When :variable:`CMAKE_GLOBAL_AUTORCC_TARGET` is enabled, a global custom target
named ``autorcc`` is created.  ``CMAKE_GLOBAL_AUTORCC_TARGET_NAME``
allows to set a different name for that target.

By default ``CMAKE_GLOBAL_AUTORCC_TARGET_NAME`` is unset.

See the :manual:`cmake-qt(7)` manual for more information on using CMake
with Qt.



/P/🚀 variable/CMAKE_GNUtoMS.rst
======================================


CMAKE_GNUtoMS
-------------

Convert GNU import libraries (``.dll.a``) to MS format (``.lib``).

This variable is used to initialize the :prop_tgt:`GNUtoMS` property on
targets when they are created.  See that target property for additional
information.



/P/🚀 variable/CMAKE_INCLUDE_CURRENT_DIR.rst
==================================================


CMAKE_INCLUDE_CURRENT_DIR
-------------------------

Automatically add the current source and build directories to the include path.

If this variable is enabled, CMake automatically adds
:variable:`CMAKE_CURRENT_SOURCE_DIR` and :variable:`CMAKE_CURRENT_BINARY_DIR`
to the include path for each directory.  These additional include
directories do not propagate down to subdirectories.  This is useful
mainly for out-of-source builds, where files generated into the build
tree are included by files located in the source tree.

By default ``CMAKE_INCLUDE_CURRENT_DIR`` is ``OFF``.



/P/🚀 variable/CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE.rst
===============================================================


CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE
--------------------------------------

Automatically add the current source and build directories to the
:prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` target property.

If this variable is enabled, CMake automatically adds for each shared
library target, static library target, module target and executable
target, :variable:`CMAKE_CURRENT_SOURCE_DIR` and
:variable:`CMAKE_CURRENT_BINARY_DIR` to
the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` target property.  By default
``CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE`` is ``OFF``.



/P/🚀 variable/CMAKE_INSTALL_NAME_DIR.rst
===============================================


CMAKE_INSTALL_NAME_DIR
----------------------

Directory name for installed targets on Apple platforms.

``CMAKE_INSTALL_NAME_DIR`` is used to initialize the
:prop_tgt:`INSTALL_NAME_DIR` property on all targets.  See that target
property for more information.



/P/🚀 variable/CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH.rst
===============================================================


CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH
--------------------------------------

.. versionadded:: 3.16

Sets the default for whether toolchain-defined rpaths should be removed during
installation.

``CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH`` is a boolean that provides the
default value for the :prop_tgt:`INSTALL_REMOVE_ENVIRONMENT_RPATH` property
of all subsequently created targets.



/P/🚀 variable/CMAKE_INSTALL_RPATH.rst
============================================


CMAKE_INSTALL_RPATH
-------------------

The rpath to use for installed targets.

A semicolon-separated list specifying the rpath to use in installed
targets (for platforms that support it).  This is used to initialize
the target property :prop_tgt:`INSTALL_RPATH` for all targets.



/P/🚀 variable/CMAKE_INSTALL_RPATH_USE_LINK_PATH.rst
==========================================================


CMAKE_INSTALL_RPATH_USE_LINK_PATH
---------------------------------

Add paths to linker search and installed rpath.

``CMAKE_INSTALL_RPATH_USE_LINK_PATH`` is a boolean that if set to ``True``
will append to the runtime search path (rpath) of installed binaries
any directories outside the project that are in the linker search path or
contain linked library files.  The directories are appended after the
value of the :prop_tgt:`INSTALL_RPATH` target property.

This variable is used to initialize the target property
:prop_tgt:`INSTALL_RPATH_USE_LINK_PATH` for all targets.



/P/🚀 variable/CMAKE_INTERPROCEDURAL_OPTIMIZATION.rst
===========================================================


CMAKE_INTERPROCEDURAL_OPTIMIZATION
----------------------------------

.. versionadded:: 3.9

Default value for :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` of targets.

This variable is used to initialize the :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION`
property on all the targets.  See that target property for additional
information.



/P/🚀 variable/CMAKE_INTERPROCEDURAL_OPTIMIZATION_CONFIG.rst
==================================================================


CMAKE_INTERPROCEDURAL_OPTIMIZATION_<CONFIG>
-------------------------------------------

.. versionadded:: 3.9

Default value for :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION_<CONFIG>` of targets.

This variable is used to initialize the :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION_<CONFIG>`
property on all the targets.  See that target property for additional
information.



/P/🚀 variable/CMAKE_LANG_CLANG_TIDY.rst
==============================================


CMAKE_<LANG>_CLANG_TIDY
-----------------------

.. versionadded:: 3.6

Default value for :prop_tgt:`<LANG>_CLANG_TIDY` target property
when ``<LANG>`` is ``C``, ``CXX``, ``OBJC`` or ``OBJCXX``.

This variable is used to initialize the property on each target as it is
created.  For example:

.. code-block:: cmake

  set(CMAKE_CXX_CLANG_TIDY clang-tidy -checks=-*,readability-*)
  add_executable(foo foo.cxx)



/P/🚀 variable/CMAKE_LANG_CLANG_TIDY_EXPORT_FIXES_DIR.rst
===============================================================


CMAKE_<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR
----------------------------------------

.. versionadded:: 3.26

Default value for :prop_tgt:`<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR` target
property when ``<LANG>`` is ``C``, ``CXX``, ``OBJC`` or ``OBJCXX``.

This variable is used to initialize the property on each target as it is
created.  For example:

.. code-block:: cmake

  set(CMAKE_CXX_CLANG_TIDY_EXPORT_FIXES_DIR clang-tidy-fixes)
  add_executable(foo foo.cxx)



/P/🚀 variable/CMAKE_LANG_COMPILER_LAUNCHER.rst
=====================================================


CMAKE_<LANG>_COMPILER_LAUNCHER
------------------------------

.. versionadded:: 3.4

Default value for :prop_tgt:`<LANG>_COMPILER_LAUNCHER` target property.
This variable is used to initialize the property on each target as it is
created.  This is done only when ``<LANG>`` is ``C``, ``CXX``, ``Fortran``,
``HIP``, ``ISPC``, ``OBJC``, ``OBJCXX``, or ``CUDA``.

This variable is initialized to the :envvar:`CMAKE_<LANG>_COMPILER_LAUNCHER`
environment variable if it is set.



/P/🚀 variable/CMAKE_LANG_CPPCHECK.rst
============================================


CMAKE_<LANG>_CPPCHECK
---------------------

.. versionadded:: 3.10

Default value for :prop_tgt:`<LANG>_CPPCHECK` target property. This variable
is used to initialize the property on each target as it is created.  This
is done only when ``<LANG>`` is ``C`` or ``CXX``.



/P/🚀 variable/CMAKE_LANG_CPPLINT.rst
===========================================


CMAKE_<LANG>_CPPLINT
--------------------

.. versionadded:: 3.8

Default value for :prop_tgt:`<LANG>_CPPLINT` target property. This variable
is used to initialize the property on each target as it is created.  This
is done only when ``<LANG>`` is ``C`` or ``CXX``.



/P/🚀 variable/CMAKE_LANG_INCLUDE_WHAT_YOU_USE.rst
========================================================


CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE
---------------------------------

.. versionadded:: 3.3

Default value for :prop_tgt:`<LANG>_INCLUDE_WHAT_YOU_USE` target property.
This variable is used to initialize the property on each target as it is
created.  This is done only when ``<LANG>`` is ``C`` or ``CXX``.



/P/🚀 variable/CMAKE_LANG_LINK_GROUP_USING_FEATURE.rst
============================================================


CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>
---------------------------------------

.. versionadded:: 3.24

This variable defines how to link a group of libraries for the specified
``<FEATURE>`` when a :genex:`LINK_GROUP` generator expression is used and
the link language for the target is ``<LANG>``.
For this variable to have any effect, the associated
:variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED` variable
must be set to true.

The :variable:`CMAKE_LINK_GROUP_USING_<FEATURE>` variable should be defined
instead for features that are independent of the link language.

.. include:: CMAKE_LINK_GROUP_USING_FEATURE.txt



/P/🚀 variable/CMAKE_LANG_LINK_GROUP_USING_FEATURE_SUPPORTED.rst
======================================================================


CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED
-------------------------------------------------

.. versionadded:: 3.24

This variable specifies whether the ``<FEATURE>`` is supported for the link
language ``<LANG>``.  If this variable is true, then the ``<FEATURE>`` must
be defined by :variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>`, and the
more generic :variable:`CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED` and
:variable:`CMAKE_LINK_GROUP_USING_<FEATURE>` variables are not used.

If ``CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED`` is false or is not
set, then the :variable:`CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED` variable
will determine whether ``<FEATURE>`` is deemed to be supported.



/P/🚀 variable/CMAKE_LANG_LINK_LIBRARY_FILE_FLAG.rst
==========================================================


CMAKE_<LANG>_LINK_LIBRARY_FILE_FLAG
-----------------------------------

.. versionadded:: 3.16

Language-specific flag to be used to link a library specified by
a path to its file.

The flag will be used before a library file path is given to the
linker.  This is needed only on very few platforms.



/P/🚀 variable/CMAKE_LANG_LINK_LIBRARY_FLAG.rst
=====================================================


CMAKE_<LANG>_LINK_LIBRARY_FLAG
------------------------------

.. versionadded:: 3.16

Flag to be used to link a library into a shared library or executable.

This flag will be used to specify a library to link to a shared library or an
executable for the specific language.  On most compilers this is ``-l``.



/P/🚀 variable/CMAKE_LANG_LINK_LIBRARY_USING_FEATURE.rst
==============================================================


CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>
-----------------------------------------

.. versionadded:: 3.24

This variable defines how to link a library or framework for the specified
``<FEATURE>`` when a :genex:`LINK_LIBRARY` generator expression is used and
the link language for the target is ``<LANG>``.
For this variable to have any effect, the associated
:variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED` variable
must be set to true.

The :variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>` variable should be defined
instead for features that are independent of the link language.

.. include:: CMAKE_LINK_LIBRARY_USING_FEATURE.txt



/P/🚀 variable/CMAKE_LANG_LINK_LIBRARY_USING_FEATURE_SUPPORTED.rst
========================================================================


CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED
---------------------------------------------------

.. versionadded:: 3.24

Set to ``TRUE`` if the ``<FEATURE>``, as defined by variable
:variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>`, is supported for the
linker language ``<LANG>``.

.. note::

  This variable is evaluated before the more generic variable
  :variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED`.



/P/🚀 variable/CMAKE_LANG_LINK_WHAT_YOU_USE_FLAG.rst
==========================================================


CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG
-----------------------------------

.. versionadded:: 3.22

Linker flag to be used to configure linker so that all specified libraries on
the command line will be linked into the target.

See also variable :variable:`CMAKE_LINK_WHAT_YOU_USE_CHECK`.



/P/🚀 variable/CMAKE_LANG_LINKER_LAUNCHER.rst
===================================================


CMAKE_<LANG>_LINKER_LAUNCHER
----------------------------

.. versionadded:: 3.21

Default value for :prop_tgt:`<LANG>_LINKER_LAUNCHER` target property. This
variable is used to initialize the property on each target as it is created.
This is done only when ``<LANG>`` is ``C``, ``CXX``, ``OBJC``, or ``OBJCXX``.

This variable is initialized to the :envvar:`CMAKE_<LANG>_LINKER_LAUNCHER`
environment variable if it is set.



/P/🚀 variable/CMAKE_LANG_USING_LINKER_MODE.rst
=====================================================


CMAKE_<LANG>_USING_LINKER_MODE
------------------------------

.. versionadded:: 3.29

This variable specify what is the type of data stored in variable
 :variable:`CMAKE_<LANG>_USING_LINKER_<TYPE>`. There are two possible values:

``FLAG``
  :variable:`CMAKE_<LANG>_USING_LINKER_<TYPE>` holds compiler flags. This is
  the default.

``TOOL``
  :variable:`CMAKE_<LANG>_USING_LINKER_<TYPE>` holds the path to the linker
  tool.



/P/🚀 variable/CMAKE_LANG_USING_LINKER_TYPE.rst
=====================================================


CMAKE_<LANG>_USING_LINKER_<TYPE>
--------------------------------

.. versionadded:: 3.29

This variable defines how to specify the linker for the link step for the type
as specified by the variable :variable:`CMAKE_LINKER_TYPE` or the target
property :prop_tgt:`LINKER_TYPE`. It can hold compiler flags for the link step
or directly the linker tool. The type of data is given by the variable
:variable:`CMAKE_<LANG>_USING_LINKER_MODE`.

.. note::

  The specified linker tool is expected to be accessible through
  the ``PATH`` environment variable, particularly when the
  :variable:`CMAKE_<LANG>_USING_LINKER_MODE` variable is set to ``FLAG``.

For example, to specify the ``LLVM`` linker for ``GNU`` compilers, we have:

.. code-block:: cmake

  set(CMAKE_C_USING_LINKER_LLD "-fuse-ld=lld")

Or on ``Windows`` platform, for ``Clang`` compilers simulating ``MSVC``, we
have:

.. code-block:: cmake

  set(CMAKE_C_USING_LINKER_LLD "-fuse-ld=lld-link")

And for the ``MSVC`` compiler, linker is directly used, so we have:

.. code-block:: cmake

  set(CMAKE_C_USING_LINKER_LLD "/path/to/lld-link.exe")
  set(CMAKE_C_USING_LINKER_MODE TOOL)



/P/🚀 variable/CMAKE_LANG_VISIBILITY_PRESET.rst
=====================================================


CMAKE_<LANG>_VISIBILITY_PRESET
------------------------------

Default value for the :prop_tgt:`<LANG>_VISIBILITY_PRESET` target
property when a target is created.



/P/🚀 variable/CMAKE_LIBRARY_OUTPUT_DIRECTORY.rst
=======================================================


CMAKE_LIBRARY_OUTPUT_DIRECTORY
------------------------------

Where to put all the :ref:`LIBRARY <Library Output Artifacts>`
target files when built.

This variable is used to initialize the :prop_tgt:`LIBRARY_OUTPUT_DIRECTORY`
property on all the targets.  See that target property for additional
information.



/P/🚀 variable/CMAKE_LIBRARY_OUTPUT_DIRECTORY_CONFIG.rst
==============================================================


CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>
---------------------------------------

.. versionadded:: 3.3

Where to put all the :ref:`LIBRARY <Library Output Artifacts>`
target files when built for a specific configuration.

This variable is used to initialize the
:prop_tgt:`LIBRARY_OUTPUT_DIRECTORY_<CONFIG>` property on all the targets.
See that target property for additional information.



/P/🚀 variable/CMAKE_LIBRARY_PATH_FLAG.rst
================================================


CMAKE_LIBRARY_PATH_FLAG
-----------------------

The flag to be used to add a library search path to a compiler.

The flag will be used to specify a library directory to the compiler.
On most compilers this is ``-L``.



/P/🚀 variable/CMAKE_LINK_DEF_FILE_FLAG.rst
=================================================


CMAKE_LINK_DEF_FILE_FLAG
------------------------

Linker flag to be used to specify a ``.def`` file for dll creation.

The flag will be used to add a ``.def`` file when creating a dll on
Windows; this is only defined on Windows.



/P/🚀 variable/CMAKE_LINK_DEPENDS_NO_SHARED.rst
=====================================================


CMAKE_LINK_DEPENDS_NO_SHARED
----------------------------

Whether to skip link dependencies on shared library files.

This variable initializes the :prop_tgt:`LINK_DEPENDS_NO_SHARED` property on
targets when they are created.  See that target property for
additional information.



/P/🚀 variable/CMAKE_LINK_DEPENDS_USE_LINKER.rst
======================================================


CMAKE_LINK_DEPENDS_USE_LINKER
-----------------------------

.. versionadded:: 3.27

For the :ref:`Makefile <Makefile Generators>` and
:ref:`Ninja <Ninja Generators>` generators, link dependencies are now, for a
selection of linkers, generated by the linker itself. By defining this
variable with value ``FALSE``, you can deactivate this feature.

This feature is also deactivated if the :prop_tgt:`LINK_DEPENDS_NO_SHARED`
target property is true.

.. note::

  CMake version |release| defaults this variable to ``FALSE`` because
  GNU binutils linkers (``ld``, ``ld.bfd``, ``ld.gold``) generate spurious
  dependencies on temporary files when LTO is enabled.  See `GNU bug 30568`_.

.. _`GNU bug 30568`: https://sourceware.org/bugzilla/show_bug.cgi?id=30568



/P/🚀 variable/CMAKE_LINK_GROUP_USING_FEATURE.rst
=======================================================


CMAKE_LINK_GROUP_USING_<FEATURE>
--------------------------------

.. versionadded:: 3.24

This variable defines how to link a group of libraries for the specified
``<FEATURE>`` when a :genex:`LINK_GROUP` generator expression is used.
Both of the following conditions must be met for this variable to have any
effect:

* The associated :variable:`CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED`
  variable must be set to true.

* There is no language-specific definition for the same ``<FEATURE>``.
  This means :variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED`
  cannot be true for the link language used by the target for which the
  :genex:`LINK_GROUP` generator expression is evaluated.

The :variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>` variable should be
defined instead for features that are dependent on the link language.

.. include:: CMAKE_LINK_GROUP_USING_FEATURE.txt



/P/🚀 variable/CMAKE_LINK_GROUP_USING_FEATURE_SUPPORTED.rst
=================================================================


CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED
------------------------------------------

.. versionadded:: 3.24

This variable specifies whether the ``<FEATURE>`` is supported regardless of
the link language.  If this variable is true, then the ``<FEATURE>`` must
be defined by :variable:`CMAKE_LINK_GROUP_USING_<FEATURE>`.

Note that this variable has no effect if
:variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED` is true for
the link language of the target.



/P/🚀 variable/CMAKE_LINK_INTERFACE_LIBRARIES.rst
=======================================================


CMAKE_LINK_INTERFACE_LIBRARIES
------------------------------

Default value for :prop_tgt:`LINK_INTERFACE_LIBRARIES` of targets.

This variable is used to initialize the :prop_tgt:`LINK_INTERFACE_LIBRARIES`
property on all the targets.  See that target property for additional
information.



/P/🚀 variable/CMAKE_LINK_LIBRARY_FILE_FLAG.rst
=====================================================


CMAKE_LINK_LIBRARY_FILE_FLAG
----------------------------

Flag to be used to link a library specified by a path to its file.

The flag will be used before a library file path is given to the
linker.  This is needed only on very few platforms.



/P/🚀 variable/CMAKE_LINK_LIBRARY_FLAG.rst
================================================


CMAKE_LINK_LIBRARY_FLAG
-----------------------

Flag to be used to link a library into an executable.

The flag will be used to specify a library to link to an executable.
On most compilers this is ``-l``.



/P/🚀 variable/CMAKE_LINK_LIBRARY_USING_FEATURE.rst
=========================================================


CMAKE_LINK_LIBRARY_USING_<FEATURE>
----------------------------------

.. versionadded:: 3.24

This variable defines how to link a library or framework for the specified
``<FEATURE>`` when a :genex:`LINK_LIBRARY` generator expression is used.
Both of the following conditions must be met for this variable to have any
effect:

* The associated :variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED`
  variable must be set to true.

* There is no language-specific definition for the same ``<FEATURE>``.
  This means :variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED`
  cannot be true for the link language used by the target for which the
  :genex:`LINK_LIBRARY` generator expression is evaluated.

.. include:: CMAKE_LINK_LIBRARY_USING_FEATURE.txt



/P/🚀 variable/CMAKE_LINK_LIBRARY_USING_FEATURE_SUPPORTED.rst
===================================================================


CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED
--------------------------------------------

.. versionadded:: 3.24

Set to ``TRUE`` if the ``<FEATURE>``, as defined by variable
:variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>`, is supported regardless the
linker language.

.. note::

  This variable is evaluated if, and only if, the variable
  :variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED` is not
  defined.



/P/🚀 variable/CMAKE_LINK_WHAT_YOU_USE.rst
================================================


CMAKE_LINK_WHAT_YOU_USE
-----------------------

.. versionadded:: 3.7

Default value for :prop_tgt:`LINK_WHAT_YOU_USE` target property.
This variable is used to initialize the property on each target as it is
created.



/P/🚀 variable/CMAKE_LINK_WHAT_YOU_USE_CHECK.rst
======================================================


CMAKE_LINK_WHAT_YOU_USE_CHECK
-----------------------------

.. versionadded:: 3.22

Defines the command executed after the link step to check libraries usage.
This check is currently only defined on ``ELF`` platforms with value
``ldd -u -r``.

See also :variable:`CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG` variables.



/P/🚀 variable/CMAKE_LINKER_TYPE.rst
==========================================


CMAKE_LINKER_TYPE
-----------------

.. versionadded:: 3.29

Specify which linker will be used for the link step.

.. note::
  It is assumed that the linker specified is fully compatible with the standard
  one. CMake will not do any options translation.

This variable is used to initialize the :prop_tgt:`LINKER_TYPE` target
property when they are created by calls to :command:`add_library` or
:command:`add_executable` commands. It is meaningful only for targets having a
link step. If set, its value is also used by the :command:`try_compile`
command.

.. include:: LINKER_PREDEFINED_TYPES.txt



/P/🚀 variable/CMAKE_MACOSX_BUNDLE.rst
============================================


CMAKE_MACOSX_BUNDLE
-------------------

Default value for :prop_tgt:`MACOSX_BUNDLE` of targets.

This variable is used to initialize the :prop_tgt:`MACOSX_BUNDLE` property on
all the targets.  See that target property for additional information.

This variable is set to ``ON`` by default if :variable:`CMAKE_SYSTEM_NAME`
equals to :ref:`iOS, tvOS, visionOS or watchOS <Cross Compiling for iOS, tvOS, visionOS, or watchOS>`.



/P/🚀 variable/CMAKE_MACOSX_RPATH.rst
===========================================


CMAKE_MACOSX_RPATH
-------------------

Whether to use rpaths on macOS and iOS.

This variable is used to initialize the :prop_tgt:`MACOSX_RPATH` property on
all targets.



/P/🚀 variable/CMAKE_MAP_IMPORTED_CONFIG_CONFIG.rst
=========================================================


CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>
----------------------------------

Default value for :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` of targets.

This variable is used to initialize the
:prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` property on all the targets.  See
that target property for additional information.



/P/🚀 variable/CMAKE_MODULE_LINKER_FLAGS.rst
==================================================


CMAKE_MODULE_LINKER_FLAGS
-------------------------

Linker flags to be used to create modules.

These flags will be used by the linker when creating a module.



/P/🚀 variable/CMAKE_MODULE_LINKER_FLAGS_CONFIG.rst
=========================================================


CMAKE_MODULE_LINKER_FLAGS_<CONFIG>
----------------------------------

Flags to be used when linking a module.

Same as ``CMAKE_C_FLAGS_*`` but used by the linker when creating modules.



/P/🚀 variable/CMAKE_MODULE_LINKER_FLAGS_CONFIG_INIT.rst
==============================================================


CMAKE_MODULE_LINKER_FLAGS_<CONFIG>_INIT
---------------------------------------

.. versionadded:: 3.7

Value used to initialize the :variable:`CMAKE_MODULE_LINKER_FLAGS_<CONFIG>`
cache entry the first time a build tree is configured.
This variable is meant to be set by a :variable:`toolchain file
<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to
the value based on the environment and target platform.

See also :variable:`CMAKE_MODULE_LINKER_FLAGS_INIT`.



/P/🚀 variable/CMAKE_MODULE_LINKER_FLAGS_INIT.rst
=======================================================


CMAKE_MODULE_LINKER_FLAGS_INIT
------------------------------

.. versionadded:: 3.7

Value used to initialize the :variable:`CMAKE_MODULE_LINKER_FLAGS`
cache entry the first time a build tree is configured.
This variable is meant to be set by a :variable:`toolchain file
<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to
the value based on the environment and target platform.

See also the configuration-specific variable
:variable:`CMAKE_MODULE_LINKER_FLAGS_<CONFIG>_INIT`.



/P/🚀 variable/CMAKE_MSVC_DEBUG_INFORMATION_FORMAT.rst
============================================================


CMAKE_MSVC_DEBUG_INFORMATION_FORMAT
-----------------------------------

.. versionadded:: 3.25

Select the MSVC debug information format targeting the MSVC ABI.
This variable is used to initialize the
:prop_tgt:`MSVC_DEBUG_INFORMATION_FORMAT` property on all targets as they are
created.  It is also propagated by calls to the :command:`try_compile` command
into the test project.

The allowed values are:

.. include:: ../prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt

Use :manual:`generator expressions <cmake-generator-expressions(7)>` to
support per-configuration specification.  For example, the code:

.. code-block:: cmake

  set(CMAKE_MSVC_DEBUG_INFORMATION_FORMAT "$<$<CONFIG:Debug,RelWithDebInfo>:ProgramDatabase>")

selects for all following targets the program database debug information format
for the Debug configuration.

If this variable is not set, the :prop_tgt:`MSVC_DEBUG_INFORMATION_FORMAT`
target property will not be set automatically.  If that property is not set,
CMake selects a debug information format using the default value
``$<$<CONFIG:Debug,RelWithDebInfo>:ProgramDatabase>``, if supported by the
compiler, and otherwise ``$<$<CONFIG:Debug,RelWithDebInfo>:Embedded>``.

.. note::

  This variable has effect only when policy :policy:`CMP0141` is set to ``NEW``
  prior to the first :command:`project` or :command:`enable_language` command
  that enables a language using a compiler targeting the MSVC ABI.



/P/🚀 variable/CMAKE_MSVC_RUNTIME_LIBRARY.rst
===================================================


CMAKE_MSVC_RUNTIME_LIBRARY
--------------------------

.. versionadded:: 3.15

Select the MSVC runtime library for use by compilers targeting the MSVC ABI.
This variable is used to initialize the :prop_tgt:`MSVC_RUNTIME_LIBRARY`
property on all targets as they are created.  It is also propagated by
calls to the :command:`try_compile` command into the test project.

The allowed values are:

.. include:: ../prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt

Use :manual:`generator expressions <cmake-generator-expressions(7)>` to
support per-configuration specification.  For example, the code:

.. code-block:: cmake

  set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

selects for all following targets a multi-threaded statically-linked runtime
library with or without debug information depending on the configuration.

If this variable is not set then the :prop_tgt:`MSVC_RUNTIME_LIBRARY` target
property will not be set automatically.  If that property is not set then
CMake uses the default value ``MultiThreaded$<$<CONFIG:Debug>:Debug>DLL``
to select a MSVC runtime library.

.. note::

  This variable has effect only when policy :policy:`CMP0091` is set to ``NEW``
  prior to the first :command:`project` or :command:`enable_language` command
  that enables a language using a compiler targeting the MSVC ABI.



/P/🚀 variable/CMAKE_MSVCIDE_RUN_PATH.rst
===============================================


CMAKE_MSVCIDE_RUN_PATH
----------------------

.. versionadded:: 3.10

Extra PATH locations that should be used when executing
:command:`add_custom_command` or :command:`add_custom_target` when using the
:generator:`Visual Studio 9 2008` (or above) generator. This allows
for running commands and using dll's that the IDE environment is not aware of.

If not set explicitly the value is initialized by the ``CMAKE_MSVCIDE_RUN_PATH``
environment variable, if set, and otherwise left empty.



/P/🚀 variable/CMAKE_NINJA_OUTPUT_PATH_PREFIX.rst
=======================================================


CMAKE_NINJA_OUTPUT_PATH_PREFIX
------------------------------

.. versionadded:: 3.6

Tell the :ref:`Ninja Generators` to add a prefix to every output path in
``build.ninja``.  A trailing slash is appended to the prefix, if missing.

This is useful when the generated ninja file is meant to be embedded as a
``subninja`` file into a *super* ninja project.  For example, the command:

.. code-block:: shell

  cd super-build-dir &&
  cmake -G Ninja -S /path/to/src -B sub -DCMAKE_NINJA_OUTPUT_PATH_PREFIX=sub/
  #                                 ^^^---------- these match -----------^^^

generates a build directory with its top-level (:variable:`CMAKE_BINARY_DIR`)
in ``super-build-dir/sub``.  The path to the build directory ends in the
output path prefix.  This makes it suitable for use in a separately-written
``super-build-dir/build.ninja`` file with a directive like this::

  subninja sub/build.ninja

The ``auto-regeneration`` rule in ``super-build-dir/build.ninja`` must
have an order-only dependency on ``sub/build.ninja``.

.. versionadded:: 3.27

  The :generator:`Ninja Multi-Config` generator supports this variable.

.. note::
  When ``CMAKE_NINJA_OUTPUT_PATH_PREFIX`` is set, the project generated
  by CMake cannot be used as a standalone project.  No default targets
  are specified.

  The value of ``CMAKE_NINJA_OUTPUT_PATH_PREFIX`` must match one or more
  path components at the *end* of :variable:`CMAKE_BINARY_DIR`, or the
  behavior is undefined.  However, this requirement is not checked
  automatically.



/P/🚀 variable/CMAKE_NO_BUILTIN_CHRPATH.rst
=================================================


CMAKE_NO_BUILTIN_CHRPATH
------------------------

Do not use the builtin binary editor to fix runtime library search
paths on installation.

When an ELF or XCOFF binary needs to have a different runtime library
search path after installation than it does in the build tree, CMake uses
a builtin editor to change the runtime search path in the installed copy.
If this variable is set to true then CMake will relink the binary before
installation instead of using its builtin editor.

For more information on RPATH handling see
the :prop_tgt:`INSTALL_RPATH` and :prop_tgt:`BUILD_RPATH` target properties.

.. versionadded:: 3.20

  This variable also applies to XCOFF binaries' LIBPATH.  Prior to the
  addition of the XCOFF editor in CMake 3.20, this variable applied only
  to ELF binaries' RPATH/RUNPATH.



/P/🚀 variable/CMAKE_NO_SYSTEM_FROM_IMPORTED.rst
======================================================


CMAKE_NO_SYSTEM_FROM_IMPORTED
-----------------------------

Default value for :prop_tgt:`NO_SYSTEM_FROM_IMPORTED` of targets.

This variable is used to initialize the :prop_tgt:`NO_SYSTEM_FROM_IMPORTED`
property on all the targets.  See that target property for additional
information.



/P/🚀 variable/CMAKE_OPTIMIZE_DEPENDENCIES.rst
====================================================


CMAKE_OPTIMIZE_DEPENDENCIES
---------------------------

.. versionadded:: 3.19

Initializes the :prop_tgt:`OPTIMIZE_DEPENDENCIES` target property.



/P/🚀 variable/CMAKE_OSX_ARCHITECTURES.rst
================================================


CMAKE_OSX_ARCHITECTURES
-----------------------

Target specific architectures for macOS and iOS.

This variable is used to initialize the :prop_tgt:`OSX_ARCHITECTURES`
property on each target as it is created.  See that target property
for additional information.

.. include:: CMAKE_OSX_VARIABLE.txt



/P/🚀 variable/CMAKE_OSX_DEPLOYMENT_TARGET.rst
====================================================


CMAKE_OSX_DEPLOYMENT_TARGET
---------------------------

Specify the minimum version of the target platform (e.g. macOS or iOS)
on which the target binaries are to be deployed.  CMake uses this
variable value for the ``-mmacosx-version-min`` flag or their respective
target platform equivalents.  For older Xcode versions that shipped
multiple macOS SDKs this variable also helps to choose the SDK in case
:variable:`CMAKE_OSX_SYSROOT` is unset.

If not set explicitly the value is initialized by the
``MACOSX_DEPLOYMENT_TARGET`` environment variable, if set,
and otherwise computed based on the host platform.

.. include:: CMAKE_OSX_VARIABLE.txt



/P/🚀 variable/CMAKE_OSX_SYSROOT.rst
==========================================


CMAKE_OSX_SYSROOT
-----------------

Specify the location or name of the macOS platform SDK to be used.
CMake uses this value to compute the value of the ``-isysroot`` flag
or equivalent and to help the ``find_*`` commands locate files in
the SDK.

If not set explicitly the value is initialized by the ``SDKROOT``
environment variable, if set, and otherwise computed based on the
:variable:`CMAKE_OSX_DEPLOYMENT_TARGET` or the host platform.

.. include:: CMAKE_OSX_VARIABLE.txt



/P/🚀 variable/CMAKE_PCH_INSTANTIATE_TEMPLATES.rst
========================================================


CMAKE_PCH_INSTANTIATE_TEMPLATES
-------------------------------

.. versionadded:: 3.19

This variable is used to initialize the :prop_tgt:`PCH_INSTANTIATE_TEMPLATES`
property of targets when they are created.



/P/🚀 variable/CMAKE_PCH_WARN_INVALID.rst
===============================================


CMAKE_PCH_WARN_INVALID
----------------------

.. versionadded:: 3.18

This variable is used to initialize the :prop_tgt:`PCH_WARN_INVALID`
property of targets when they are created.



/P/🚀 variable/CMAKE_PDB_OUTPUT_DIRECTORY.rst
===================================================


CMAKE_PDB_OUTPUT_DIRECTORY
--------------------------

Output directory for MS debug symbol ``.pdb`` files generated by the
linker for executable and shared library targets.

This variable is used to initialize the :prop_tgt:`PDB_OUTPUT_DIRECTORY`
property on all the targets.  See that target property for additional
information.



/P/🚀 variable/CMAKE_PDB_OUTPUT_DIRECTORY_CONFIG.rst
==========================================================


CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>
-----------------------------------

Per-configuration output directory for MS debug symbol ``.pdb`` files
generated by the linker for executable and shared library targets.

This is a per-configuration version of :variable:`CMAKE_PDB_OUTPUT_DIRECTORY`.
This variable is used to initialize the
:prop_tgt:`PDB_OUTPUT_DIRECTORY_<CONFIG>`
property on all the targets.  See that target property for additional
information.



/P/🚀 variable/CMAKE_PLATFORM_NO_VERSIONED_SONAME.rst
===========================================================


CMAKE_PLATFORM_NO_VERSIONED_SONAME
----------------------------------

.. versionadded:: 3.1

This variable is used to globally control whether the
:prop_tgt:`VERSION` and :prop_tgt:`SOVERSION` target
properties should be used for shared libraries.
When set to true, adding version information to each
shared library target is disabled.

By default this variable is set only on platforms where
CMake knows it is needed.   On other platforms, the
specified properties will be used for shared libraries.



/P/🚀 variable/CMAKE_POSITION_INDEPENDENT_CODE.rst
========================================================


CMAKE_POSITION_INDEPENDENT_CODE
-------------------------------

Default value for :prop_tgt:`POSITION_INDEPENDENT_CODE` of targets.

This variable is used to initialize the
:prop_tgt:`POSITION_INDEPENDENT_CODE` property on all the targets.
See that target property for additional information.  If set, its
value is also used by the :command:`try_compile` command.



/P/🚀 variable/CMAKE_RUNTIME_OUTPUT_DIRECTORY.rst
=======================================================


CMAKE_RUNTIME_OUTPUT_DIRECTORY
------------------------------

Where to put all the :ref:`RUNTIME <Runtime Output Artifacts>`
target files when built.

This variable is used to initialize the :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY`
property on all the targets.  See that target property for additional
information.



/P/🚀 variable/CMAKE_RUNTIME_OUTPUT_DIRECTORY_CONFIG.rst
==============================================================


CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>
---------------------------------------

.. versionadded:: 3.3

Where to put all the :ref:`RUNTIME <Runtime Output Artifacts>`
target files when built for a specific configuration.

This variable is used to initialize the
:prop_tgt:`RUNTIME_OUTPUT_DIRECTORY_<CONFIG>` property on all the targets.
See that target property for additional information.



/P/🚀 variable/CMAKE_SHARED_LIBRARY_ENABLE_EXPORTS.rst
============================================================


CMAKE_SHARED_LIBRARY_ENABLE_EXPORTS
-----------------------------------

.. versionadded:: 3.27

Specify whether shared library generates an import file.

This variable is used to initialize the :prop_tgt:`ENABLE_EXPORTS` target
property for shared library targets when they are created by calls to the
:command:`add_library` command.  See the property documentation for details.



/P/🚀 variable/CMAKE_SHARED_LINKER_FLAGS.rst
==================================================


CMAKE_SHARED_LINKER_FLAGS
-------------------------

Linker flags to be used to create shared libraries.

These flags will be used by the linker when creating a shared library.



/P/🚀 variable/CMAKE_SHARED_LINKER_FLAGS_CONFIG.rst
=========================================================


CMAKE_SHARED_LINKER_FLAGS_<CONFIG>
----------------------------------

Flags to be used when linking a shared library.

Same as ``CMAKE_C_FLAGS_*`` but used by the linker when creating shared
libraries.



/P/🚀 variable/CMAKE_SHARED_LINKER_FLAGS_CONFIG_INIT.rst
==============================================================


CMAKE_SHARED_LINKER_FLAGS_<CONFIG>_INIT
---------------------------------------

.. versionadded:: 3.7

Value used to initialize the :variable:`CMAKE_SHARED_LINKER_FLAGS_<CONFIG>`
cache entry the first time a build tree is configured.
This variable is meant to be set by a :variable:`toolchain file
<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to
the value based on the environment and target platform.

See also :variable:`CMAKE_SHARED_LINKER_FLAGS_INIT`.



/P/🚀 variable/CMAKE_SHARED_LINKER_FLAGS_INIT.rst
=======================================================


CMAKE_SHARED_LINKER_FLAGS_INIT
------------------------------

.. versionadded:: 3.7

Value used to initialize the :variable:`CMAKE_SHARED_LINKER_FLAGS`
cache entry the first time a build tree is configured.
This variable is meant to be set by a :variable:`toolchain file
<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to
the value based on the environment and target platform.

See also the configuration-specific variable
:variable:`CMAKE_SHARED_LINKER_FLAGS_<CONFIG>_INIT`.



/P/🚀 variable/CMAKE_SKIP_BUILD_RPATH.rst
===============================================


CMAKE_SKIP_BUILD_RPATH
----------------------

Do not include RPATHs in the build tree.

Normally CMake uses the build tree for the RPATH when building
executables etc on systems that use RPATH.  When the software is
installed the executables etc are relinked by CMake to have the
install RPATH.  If this variable is set to ``TRUE`` then the software is
always built with no RPATH.

This is used to initialize the :prop_tgt:`SKIP_BUILD_RPATH` target property
for all targets. For more information on RPATH handling see
the :prop_tgt:`INSTALL_RPATH` and :prop_tgt:`BUILD_RPATH` target properties.

See also the :variable:`CMAKE_SKIP_INSTALL_RPATH` variable.
To omit RPATH in both the build and install steps, use
:variable:`CMAKE_SKIP_RPATH` instead.



/P/🚀 variable/CMAKE_SKIP_INSTALL_RPATH.rst
=================================================


CMAKE_SKIP_INSTALL_RPATH
------------------------

Do not include RPATHs in the install tree.

Normally CMake uses the build tree for the RPATH when building
executables etc on systems that use RPATH.  When the software is
installed the executables etc are relinked by CMake to have the
install RPATH.  If this variable is set to true then the software is
always installed without RPATH, even if RPATH is enabled when
building.  This can be useful for example to allow running tests from
the build directory with RPATH enabled before the installation step.

See also the :variable:`CMAKE_SKIP_BUILD_RPATH` variable.
To omit RPATH in both the build and install steps, use
:variable:`CMAKE_SKIP_RPATH` instead.

For more information on RPATH handling see the :prop_tgt:`INSTALL_RPATH`
and :prop_tgt:`BUILD_RPATH` target properties.



/P/🚀 variable/CMAKE_STATIC_LINKER_FLAGS.rst
==================================================


CMAKE_STATIC_LINKER_FLAGS
-------------------------

Flags to be used to create static libraries.  These flags will be passed
to the archiver when creating a static library.

See also :variable:`CMAKE_STATIC_LINKER_FLAGS_<CONFIG>`.

.. note::
  Static libraries do not actually link.  They are essentially archives
  of object files.  The use of the name "linker" in the name of this
  variable is kept for compatibility.



/P/🚀 variable/CMAKE_STATIC_LINKER_FLAGS_CONFIG.rst
=========================================================


CMAKE_STATIC_LINKER_FLAGS_<CONFIG>
----------------------------------

Flags to be used to create static libraries.  These flags will be passed
to the archiver when creating a static library in the ``<CONFIG>``
configuration.

See also :variable:`CMAKE_STATIC_LINKER_FLAGS`.

.. note::
  Static libraries do not actually link.  They are essentially archives
  of object files.  The use of the name "linker" in the name of this
  variable is kept for compatibility.



/P/🚀 variable/CMAKE_STATIC_LINKER_FLAGS_CONFIG_INIT.rst
==============================================================


CMAKE_STATIC_LINKER_FLAGS_<CONFIG>_INIT
---------------------------------------

.. versionadded:: 3.7

Value used to initialize the :variable:`CMAKE_STATIC_LINKER_FLAGS_<CONFIG>`
cache entry the first time a build tree is configured.
This variable is meant to be set by a :variable:`toolchain file
<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to
the value based on the environment and target platform.

See also :variable:`CMAKE_STATIC_LINKER_FLAGS_INIT`.



/P/🚀 variable/CMAKE_STATIC_LINKER_FLAGS_INIT.rst
=======================================================


CMAKE_STATIC_LINKER_FLAGS_INIT
------------------------------

.. versionadded:: 3.7

Value used to initialize the :variable:`CMAKE_STATIC_LINKER_FLAGS`
cache entry the first time a build tree is configured.
This variable is meant to be set by a :variable:`toolchain file
<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to
the value based on the environment and target platform.

See also the configuration-specific variable
:variable:`CMAKE_STATIC_LINKER_FLAGS_<CONFIG>_INIT`.



/P/🚀 variable/CMAKE_TASKING_TOOLSET.rst
==============================================


CMAKE_TASKING_TOOLSET
---------------------

.. versionadded:: 3.25

Select the Tasking toolset which provides the compiler

Architecture compilers are provided by different toolchains with
incompatible versioning schemes.  Set this variable in a
:variable:`toolchain file <CMAKE_TOOLCHAIN_FILE>` so CMake can detect
the compiler features correctly. If no toolset is specified,
``Standalone`` is assumed.

Due to the different versioning schemes, the compiler version
(:variable:`CMAKE_<LANG>_COMPILER_VERSION`) depends on the toolset and
architecture in use. If projects can be built with multiple toolsets or
architectures, the specified ``CMAKE_TASKING_TOOLSET`` and the
automatically determined :variable:`CMAKE_<LANG>_COMPILER_ARCHITECTURE_ID`
must be taken into account when comparing against the
:variable:`CMAKE_<LANG>_COMPILER_VERSION`.

``TriCore``
  Compilers are provided by the TriCore toolset.

``SmartCode``
  Compilers are provided by the SmartCode toolset.

``Standalone``
  Compilers are provided by the standalone toolsets.

  .. note::

    For the TriCore architecture, the compiler from the TriCore toolset is
    selected as standalone compiler.



/P/🚀 variable/CMAKE_TRY_COMPILE_CONFIGURATION.rst
========================================================


CMAKE_TRY_COMPILE_CONFIGURATION
-------------------------------

Build configuration used for :command:`try_compile` and :command:`try_run`
projects.

Projects built by :command:`try_compile` and :command:`try_run` are built
synchronously during the CMake configuration step.  Therefore a specific build
configuration must be chosen even if the generated build system
supports multiple configurations.



/P/🚀 variable/CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES.rst
================================================================


CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES
---------------------------------------

.. versionadded:: 3.24

Set to a true value to tell the :command:`try_compile` command not
to propagate any platform variables into the test project.

The :command:`try_compile` command normally passes some CMake variables
that configure the platform and toolchain behavior into test projects.
See policy :policy:`CMP0137`.  This variable may be set to disable
that behavior.



/P/🚀 variable/CMAKE_TRY_COMPILE_PLATFORM_VARIABLES.rst
=============================================================


CMAKE_TRY_COMPILE_PLATFORM_VARIABLES
------------------------------------

.. versionadded:: 3.6

List of variables that the :command:`try_compile` command source file signature
must propagate into the test project in order to target the same platform as
the host project.

This variable should not be set by project code.  It is meant to be set by
CMake's platform information modules for the current toolchain, or by a
toolchain file when used with :variable:`CMAKE_TOOLCHAIN_FILE`.

Variables meaningful to CMake, such as :variable:`CMAKE_<LANG>_FLAGS`, are
propagated automatically.  The ``CMAKE_TRY_COMPILE_PLATFORM_VARIABLES``
variable may be set to pass custom variables meaningful to a toolchain file.
For example, a toolchain file may contain:

.. code-block:: cmake

  set(CMAKE_SYSTEM_NAME ...)
  set(CMAKE_TRY_COMPILE_PLATFORM_VARIABLES MY_CUSTOM_VARIABLE)
  # ... use MY_CUSTOM_VARIABLE ...

If a user passes ``-DMY_CUSTOM_VARIABLE=SomeValue`` to CMake then this
setting will be made visible to the toolchain file both for the main
project and for test projects generated by the :command:`try_compile`
command source file signature.

.. versionchanged:: 3.24
  Listed variables are propagated to the :command:`try_compile`
  :ref:`whole-project <Try Compiling Whole Projects>` signature too.
  See :policy:`CMP0137`.

.. versionadded:: 3.24
  The :variable:`CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES` variable may be
  set to disable passing platform variables into the test project.



/P/🚀 variable/CMAKE_TRY_COMPILE_TARGET_TYPE.rst
======================================================


CMAKE_TRY_COMPILE_TARGET_TYPE
-----------------------------

.. versionadded:: 3.6

Type of target generated for :command:`try_compile` calls using the
source file signature.  Valid values are:

``EXECUTABLE``
  Use :command:`add_executable` to name the source file in the
  generated project.  This is the default if no value is given.

``STATIC_LIBRARY``
  Use :command:`add_library` with the ``STATIC`` option to name the
  source file in the generated project.  This avoids running the
  linker and is intended for use with cross-compiling toolchains
  that cannot link without custom flags or linker scripts.



/P/🚀 variable/CMAKE_UNITY_BUILD.rst
==========================================


CMAKE_UNITY_BUILD
-----------------

.. versionadded:: 3.16

This variable is used to initialize the :prop_tgt:`UNITY_BUILD`
property of targets when they are created.  Setting it to true
enables batch compilation of multiple sources within each target.
This feature is known as a *Unity* or *Jumbo* build.

Projects should not set this variable, it is intended as a developer
control to be set on the :manual:`cmake(1)` command line or other
equivalent methods.  The developer must have the ability to enable or
disable unity builds according to the capabilities of their own machine
and compiler.

By default, this variable is not set, which will result in unity builds
being disabled.

.. note::
  This option currently does not work well in combination with
  the :variable:`CMAKE_EXPORT_COMPILE_COMMANDS` variable.



/P/🚀 variable/CMAKE_UNITY_BUILD_BATCH_SIZE.rst
=====================================================


CMAKE_UNITY_BUILD_BATCH_SIZE
----------------------------

.. versionadded:: 3.16

This variable is used to initialize the :prop_tgt:`UNITY_BUILD_BATCH_SIZE`
property of targets when they are created.  It specifies the default upper
limit on the number of source files that may be combined in any one unity
source file when unity builds are enabled for a target.



/P/🚀 variable/CMAKE_UNITY_BUILD_UNIQUE_ID.rst
====================================================


CMAKE_UNITY_BUILD_UNIQUE_ID
---------------------------

.. versionadded:: 3.20

This variable is used to initialize the :prop_tgt:`UNITY_BUILD_UNIQUE_ID`
property of targets when they are created.  It specifies the name of the
unique identifier generated per file in a unity build.



/P/🚀 variable/CMAKE_VERIFY_INTERFACE_HEADER_SETS.rst
===========================================================


CMAKE_VERIFY_INTERFACE_HEADER_SETS
----------------------------------

.. versionadded:: 3.24

This variable is used to initialize the
:prop_tgt:`VERIFY_INTERFACE_HEADER_SETS` property of targets when they are
created.  Setting it to true enables header set verification.

Projects should not normally set this variable, it is intended as a developer
control to be set on the :manual:`cmake(1)` command line or other
equivalent methods.  The developer must have the ability to enable or
disable header set verification according to the capabilities of their own
machine and compiler.

Verification of a dependency's header sets is not typically of interest
to developers.  Therefore, :command:`FetchContent_MakeAvailable` explicitly
sets ``CMAKE_VERIFY_INTERFACE_HEADER_SETS`` to false for the duration of its
call, but restores its original value before returning.  If a project brings
a dependency directly into the main build (e.g. calling
:command:`add_subdirectory` on a vendored project from a git submodule), it
should also do likewise.  For example:

.. code:: cmake

  # Save original setting so we can restore it later
  set(want_header_set_verification ${CMAKE_VERIFY_INTERFACE_HEADER_SETS})

  # Include the vendored dependency with header set verification disabled
  set(CMAKE_VERIFY_INTERFACE_HEADER_SETS OFF)
  add_subdirectory(...)   # Vendored sources, e.g. from git submodules

  # Add the project's own sources. Restore the developer's original choice
  # for whether to enable header set verification.
  set(CMAKE_VERIFY_INTERFACE_HEADER_SETS ${want_header_set_verification})
  add_subdirectory(src)

By default, this variable is not set, which will result in header set
verification being disabled.



/P/🚀 variable/CMAKE_VISIBILITY_INLINES_HIDDEN.rst
========================================================


CMAKE_VISIBILITY_INLINES_HIDDEN
-------------------------------

Default value for the :prop_tgt:`VISIBILITY_INLINES_HIDDEN` target
property when a target is created.



/P/🚀 variable/CMAKE_VS_DEBUGGER_COMMAND.rst
==================================================


CMAKE_VS_DEBUGGER_COMMAND
-------------------------

.. versionadded:: 3.27

This variable is used to initialize the :prop_tgt:`VS_DEBUGGER_COMMAND`
property on each target as it is created.  See that target property
for additional information.



/P/🚀 variable/CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS.rst
============================================================


CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS
-----------------------------------

.. versionadded:: 3.27

This variable is used to initialize the :prop_tgt:`VS_DEBUGGER_COMMAND_ARGUMENTS`
property on each target as it is created.  See that target property
for additional information.



/P/🚀 variable/CMAKE_VS_DEBUGGER_ENVIRONMENT.rst
======================================================


CMAKE_VS_DEBUGGER_ENVIRONMENT
-----------------------------

.. versionadded:: 3.27

This variable is used to initialize the :prop_tgt:`VS_DEBUGGER_ENVIRONMENT`
property on each target as it is created.  See that target property
for additional information.



/P/🚀 variable/CMAKE_VS_DEBUGGER_WORKING_DIRECTORY.rst
============================================================


CMAKE_VS_DEBUGGER_WORKING_DIRECTORY
-----------------------------------

.. versionadded:: 3.27

This variable is used to initialize the :prop_tgt:`VS_DEBUGGER_WORKING_DIRECTORY`
property on each target as it is created.  See that target property
for additional information.



/P/🚀 variable/CMAKE_VS_GLOBALS.rst
=========================================


CMAKE_VS_GLOBALS
----------------

.. versionadded:: 3.13

List of ``Key=Value`` records to be set per target as target properties
:prop_tgt:`VS_GLOBAL_<variable>` with ``variable=Key`` and value ``Value``.

For example:

.. code-block:: cmake

  set(CMAKE_VS_GLOBALS
    "DefaultLanguage=en-US"
    "MinimumVisualStudioVersion=14.0"
    )

will set properties ``VS_GLOBAL_DefaultLanguage`` to ``en-US`` and
``VS_GLOBAL_MinimumVisualStudioVersion`` to ``14.0`` for all targets
(except for ``INTERFACE`` libraries).

This variable is meant to be set by a
:variable:`toolchain file <CMAKE_TOOLCHAIN_FILE>`.



/P/🚀 variable/CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD.rst
==================================================================


CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD
-----------------------------------------

.. versionadded:: 3.3

Include ``INSTALL`` target to default build.

In Visual Studio solution, by default the ``INSTALL`` target will not be part
of the default build. Setting this variable will enable the ``INSTALL`` target
to be part of the default build.



/P/🚀 variable/CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD.rst
==================================================================


CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD
-----------------------------------------

.. versionadded:: 3.8

Include ``PACKAGE`` target to default build.

In Visual Studio solution, by default the ``PACKAGE`` target will not be part
of the default build. Setting this variable will enable the ``PACKAGE`` target
to be part of the default build.



/P/🚀 variable/CMAKE_VS_JUST_MY_CODE_DEBUGGING.rst
========================================================


CMAKE_VS_JUST_MY_CODE_DEBUGGING
-------------------------------

.. versionadded:: 3.15

Enable Just My Code with Visual Studio debugger.

This variable is used to initialize the :prop_tgt:`VS_JUST_MY_CODE_DEBUGGING`
property on all targets when they are created.  See that target property for
additional information.



/P/🚀 variable/CMAKE_VS_NO_COMPILE_BATCHING.rst
=====================================================


CMAKE_VS_NO_COMPILE_BATCHING
----------------------------

.. versionadded:: 3.24

Turn off compile batching when using :ref:`Visual Studio Generators`.

This variable is used to initialize the :prop_tgt:`VS_NO_COMPILE_BATCHING`
property on all targets when they are created.  See that target property for
additional information.

Example
^^^^^^^

This shows setting the property for the target ``foo`` using the variable.

.. code-block:: cmake

  set(CMAKE_VS_NO_COMPILE_BATCHING ON)
  add_library(foo SHARED foo.cpp)



/P/🚀 variable/CMAKE_VS_SDK_EXCLUDE_DIRECTORIES.rst
=========================================================


CMAKE_VS_SDK_EXCLUDE_DIRECTORIES
--------------------------------

.. versionadded:: 3.12

This variable allows to override Visual Studio default Exclude Directories.



/P/🚀 variable/CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES.rst
============================================================


CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES
-----------------------------------

.. versionadded:: 3.12

This variable allows to override Visual Studio default Executable Directories.



/P/🚀 variable/CMAKE_VS_SDK_INCLUDE_DIRECTORIES.rst
=========================================================


CMAKE_VS_SDK_INCLUDE_DIRECTORIES
--------------------------------

.. versionadded:: 3.12

This variable allows to override Visual Studio default Include Directories.



/P/🚀 variable/CMAKE_VS_SDK_LIBRARY_DIRECTORIES.rst
=========================================================


CMAKE_VS_SDK_LIBRARY_DIRECTORIES
--------------------------------

.. versionadded:: 3.12

This variable allows to override Visual Studio default Library Directories.



/P/🚀 variable/CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES.rst
===============================================================


CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES
--------------------------------------

.. versionadded:: 3.12

This variable allows to override Visual Studio default Library WinRT
Directories.



/P/🚀 variable/CMAKE_VS_SDK_REFERENCE_DIRECTORIES.rst
===========================================================


CMAKE_VS_SDK_REFERENCE_DIRECTORIES
----------------------------------

.. versionadded:: 3.12

This variable allows to override Visual Studio default Reference Directories.



/P/🚀 variable/CMAKE_VS_SDK_SOURCE_DIRECTORIES.rst
========================================================


CMAKE_VS_SDK_SOURCE_DIRECTORIES
-------------------------------

.. versionadded:: 3.12

This variable allows to override Visual Studio default Source Directories.



/P/🚀 variable/CMAKE_VS_WINRT_BY_DEFAULT.rst
==================================================


CMAKE_VS_WINRT_BY_DEFAULT
-------------------------

.. versionadded:: 3.13

Inform :ref:`Visual Studio Generators` for VS 2010 and above that the
target platform enables WinRT compilation by default and it needs to
be explicitly disabled if ``/ZW`` or :prop_tgt:`VS_WINRT_COMPONENT` is
omitted (as opposed to enabling it when either of those options is
present)

This makes cmake configuration consistent in terms of WinRT among
platforms - if you did not enable the WinRT compilation explicitly, it
will be disabled (by either not enabling it or explicitly disabling it)

Note: WinRT compilation is always explicitly disabled for C language
source files, even if it is expliclty enabled for a project

This variable is meant to be set by a
:variable:`toolchain file <CMAKE_TOOLCHAIN_FILE>` for such platforms.



/P/🚀 variable/CMAKE_WATCOM_RUNTIME_LIBRARY.rst
=====================================================


CMAKE_WATCOM_RUNTIME_LIBRARY
----------------------------

.. versionadded:: 3.24

Select the Watcom runtime library for use by compilers targeting the Watcom ABI.
This variable is used to initialize the :prop_tgt:`WATCOM_RUNTIME_LIBRARY`
property on all targets as they are created.  It is also propagated by
calls to the :command:`try_compile` command into the test project.

The allowed values are:

.. include:: ../prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt

Use :manual:`generator expressions <cmake-generator-expressions(7)>` to
support per-configuration specification.

For example, the code:

.. code-block:: cmake

  set(CMAKE_WATCOM_RUNTIME_LIBRARY "MultiThreaded")

selects for all following targets a multi-threaded statically-linked runtime
library.

If this variable is not set then the :prop_tgt:`WATCOM_RUNTIME_LIBRARY` target
property will not be set automatically.  If that property is not set then
CMake uses the default value ``MultiThreadedDLL`` on Windows and
``SingleThreaded`` on other platforms to select a Watcom runtime library.

.. note::

  This variable has effect only when policy :policy:`CMP0136` is set to ``NEW``
  prior to the first :command:`project` or :command:`enable_language` command
  that enables a language using a compiler targeting the Watcom ABI.



/P/🚀 variable/CMAKE_WIN32_EXECUTABLE.rst
===============================================


CMAKE_WIN32_EXECUTABLE
----------------------

Default value for :prop_tgt:`WIN32_EXECUTABLE` of targets.

This variable is used to initialize the :prop_tgt:`WIN32_EXECUTABLE` property
on all the targets.  See that target property for additional information.



/P/🚀 variable/CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS.rst
=========================================================


CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS
--------------------------------

.. versionadded:: 3.4

Default value for :prop_tgt:`WINDOWS_EXPORT_ALL_SYMBOLS` target property.
This variable is used to initialize the property on each target as it is
created.



/P/🚀 variable/CMAKE_XCODE_ATTRIBUTE_an-attribute.rst
===========================================================


CMAKE_XCODE_ATTRIBUTE_<an-attribute>
------------------------------------

.. versionadded:: 3.1

Set Xcode target attributes directly.

Tell the :generator:`Xcode` generator to set ``<an-attribute>`` to a given
value in the generated Xcode project.  Ignored on other generators.

This offers low-level control over the generated Xcode project file.
It is meant as a last resort for specifying settings that CMake does
not otherwise have a way to control.  Although this can override a
setting CMake normally produces on its own, doing so bypasses CMake's
model of the project and can break things.

See the :prop_tgt:`XCODE_ATTRIBUTE_<an-attribute>` target property
to set attributes on a specific target.

Contents of ``CMAKE_XCODE_ATTRIBUTE_<an-attribute>`` may use
"generator expressions" with the syntax ``$<...>``.  See the
:manual:`cmake-generator-expressions(7)` manual for available
expressions.  See the :manual:`cmake-buildsystem(7)` manual
for more on defining buildsystem properties.



/P/🚀 variable/EXECUTABLE_OUTPUT_PATH.rst
===============================================


EXECUTABLE_OUTPUT_PATH
----------------------

Old executable location variable.

The target property :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` supersedes this
variable for a target if it is set.  Executable targets are otherwise placed in
this directory.



/P/🚀 variable/LIBRARY_OUTPUT_PATH.rst
============================================


LIBRARY_OUTPUT_PATH
-------------------

Old library location variable.

The target properties :prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY`,
:prop_tgt:`LIBRARY_OUTPUT_DIRECTORY`, and :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY`
supersede this variable for a target if they are set.  Library targets are
otherwise placed in this directory.



/P/🚀 variable/CMAKE_C_COMPILE_FEATURES.rst
=================================================


CMAKE_C_COMPILE_FEATURES
------------------------

.. versionadded:: 3.1

List of features known to the C compiler

These features are known to be available for use with the C compiler. This
list is a subset of the features listed in the
:prop_gbl:`CMAKE_C_KNOWN_FEATURES` global property.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_C_EXTENSIONS.rst
===========================================


CMAKE_C_EXTENSIONS
------------------

.. versionadded:: 3.1

Default value for :prop_tgt:`C_EXTENSIONS` target property if set when a target
is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_C_STANDARD.rst
=========================================


CMAKE_C_STANDARD
----------------

.. versionadded:: 3.1

Default value for :prop_tgt:`C_STANDARD` target property if set when a target
is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_C_STANDARD_REQUIRED.rst
==================================================


CMAKE_C_STANDARD_REQUIRED
-------------------------

.. versionadded:: 3.1

Default value for :prop_tgt:`C_STANDARD_REQUIRED` target property if set when
a target is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_CUDA_ARCHITECTURES.rst
=================================================


CMAKE_CUDA_ARCHITECTURES
------------------------

.. versionadded:: 3.18

Default value for :prop_tgt:`CUDA_ARCHITECTURES` property of targets.

Initialized by the :envvar:`CUDAARCHS` environment variable if set.
Otherwise as follows depending on :variable:`CMAKE_CUDA_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>`:

- For ``Clang``: the oldest architecture that works.

- For ``NVIDIA``: the default architecture chosen by the compiler.
  See policy :policy:`CMP0104`.

Users are encouraged to override this, as the default varies across compilers
and compiler versions.

This variable is used to initialize the :prop_tgt:`CUDA_ARCHITECTURES` property
on all targets. See the target property for additional information.

Examples
^^^^^^^^

.. code-block:: cmake

  cmake_minimum_required(VERSION)

  if(NOT DEFINED CMAKE_CUDA_ARCHITECTURES)
    set(CMAKE_CUDA_ARCHITECTURES 75)
  endif()

  project(example LANGUAGES CUDA)

``CMAKE_CUDA_ARCHITECTURES`` will default to ``75`` unless overridden by the user.



/P/🚀 variable/CMAKE_CUDA_COMPILE_FEATURES.rst
====================================================


CMAKE_CUDA_COMPILE_FEATURES
---------------------------

.. versionadded:: 3.17

List of features known to the CUDA compiler

These features are known to be available for use with the CUDA compiler. This
list is a subset of the features listed in the
:prop_gbl:`CMAKE_CUDA_KNOWN_FEATURES` global property.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_CUDA_EXTENSIONS.rst
==============================================


CMAKE_CUDA_EXTENSIONS
---------------------

.. versionadded:: 3.8

Default value for :prop_tgt:`CUDA_EXTENSIONS` target property if set when a
target is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_CUDA_HOST_COMPILER.rst
=================================================


CMAKE_CUDA_HOST_COMPILER
------------------------

.. versionadded:: 3.10

This is the original CUDA-specific name for the more general
:variable:`CMAKE_<LANG>_HOST_COMPILER` variable.  See the latter
for details.



/P/🚀 variable/CMAKE_CUDA_STANDARD.rst
============================================


CMAKE_CUDA_STANDARD
-------------------

.. versionadded:: 3.8

Default value for :prop_tgt:`CUDA_STANDARD` target property if set when a
target is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_CUDA_STANDARD_REQUIRED.rst
=====================================================


CMAKE_CUDA_STANDARD_REQUIRED
----------------------------

.. versionadded:: 3.8

Default value for :prop_tgt:`CUDA_STANDARD_REQUIRED` target property if set
when a target is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES.rst
===============================================================


CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES
--------------------------------------

.. versionadded:: 3.8

When the ``CUDA`` language has been enabled, this provides a
:ref:`semicolon-separated list <CMake Language Lists>` of include directories provided
by the CUDA Toolkit.  The value may be useful for C++ source files
to include CUDA headers.



/P/🚀 variable/CMAKE_CXX_COMPILE_FEATURES.rst
===================================================


CMAKE_CXX_COMPILE_FEATURES
--------------------------

.. versionadded:: 3.1

List of features known to the C++ compiler

These features are known to be available for use with the C++ compiler. This
list is a subset of the features listed in the
:prop_gbl:`CMAKE_CXX_KNOWN_FEATURES` global property.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_CXX_EXTENSIONS.rst
=============================================


CMAKE_CXX_EXTENSIONS
--------------------

.. versionadded:: 3.1

Default value for :prop_tgt:`CXX_EXTENSIONS` target property if set when a
target is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_CXX_STANDARD.rst
===========================================


CMAKE_CXX_STANDARD
------------------

.. versionadded:: 3.1

Default value for :prop_tgt:`CXX_STANDARD` target property if set when a target
is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_CXX_STANDARD_REQUIRED.rst
====================================================


CMAKE_CXX_STANDARD_REQUIRED
---------------------------

.. versionadded:: 3.1

Default value for :prop_tgt:`CXX_STANDARD_REQUIRED` target property if set when
a target is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_Fortran_MODDIR_DEFAULT.rst
=====================================================


CMAKE_Fortran_MODDIR_DEFAULT
----------------------------

Fortran default module output directory.

Most Fortran compilers write ``.mod`` files to the current working
directory.  For those that do not, this is set to ``.`` and used when
the :prop_tgt:`Fortran_MODULE_DIRECTORY` target property is not set.



/P/🚀 variable/CMAKE_Fortran_MODDIR_FLAG.rst
==================================================


CMAKE_Fortran_MODDIR_FLAG
-------------------------

Fortran flag for module output directory.

This stores the flag needed to pass the value of the
:prop_tgt:`Fortran_MODULE_DIRECTORY` target property to the compiler.



/P/🚀 variable/CMAKE_Fortran_MODOUT_FLAG.rst
==================================================


CMAKE_Fortran_MODOUT_FLAG
-------------------------

Fortran flag to enable module output.

Most Fortran compilers write ``.mod`` files out by default.  For others,
this stores the flag needed to enable module output.



/P/🚀 variable/CMAKE_HIP_ARCHITECTURES.rst
================================================


CMAKE_HIP_ARCHITECTURES
-----------------------

.. versionadded:: 3.21

List of GPU architectures to for which to generate device code.
Architecture names are interpreted based on :variable:`CMAKE_HIP_PLATFORM`.

This is initialized based on the value of :variable:`CMAKE_HIP_PLATFORM`:

``amd``
  Uses architectures reported by ``rocm_agent_enumerator``, if available,
  and otherwise to a default chosen by the compiler.

This variable is used to initialize the :prop_tgt:`HIP_ARCHITECTURES` property
on all targets. See the target property for additional information.



/P/🚀 variable/CMAKE_HIP_EXTENSIONS.rst
=============================================


CMAKE_HIP_EXTENSIONS
--------------------

.. versionadded:: 3.21

Default value for :prop_tgt:`HIP_EXTENSIONS` target property if set when a
target is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_HIP_PLATFORM.rst
===========================================


CMAKE_HIP_PLATFORM
------------------

.. versionadded:: 3.28

GPU platform for which HIP language sources are to be compiled.

The value must be one of:

``amd``
  AMD GPUs

``nvidia``
  NVIDIA GPUs

If not specified, a default is computed via ``hipconfig --platform``.

:variable:`CMAKE_HIP_ARCHITECTURES` entries are interpreted with
as architectures of the GPU platform.

:variable:`CMAKE_HIP_COMPILER <CMAKE_<LANG>_COMPILER>` must target
the same GPU platform.



/P/🚀 variable/CMAKE_HIP_STANDARD.rst
===========================================


CMAKE_HIP_STANDARD
------------------

.. versionadded:: 3.21

Default value for :prop_tgt:`HIP_STANDARD` target property if set when a target
is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_HIP_STANDARD_REQUIRED.rst
====================================================


CMAKE_HIP_STANDARD_REQUIRED
---------------------------

.. versionadded:: 3.21

Default value for :prop_tgt:`HIP_STANDARD_REQUIRED` target property if set when
a target is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_ISPC_HEADER_DIRECTORY.rst
====================================================


CMAKE_ISPC_HEADER_DIRECTORY
----------------------------

.. versionadded:: 3.19

ISPC generated header output directory.

This variable is used to initialize the :prop_tgt:`ISPC_HEADER_DIRECTORY`
property on all the targets.  See the target property for additional
information.



/P/🚀 variable/CMAKE_ISPC_HEADER_SUFFIX.rst
=================================================


CMAKE_ISPC_HEADER_SUFFIX
------------------------

.. versionadded:: 3.19.2

Output suffix to be used for ISPC generated headers.

This variable is used to initialize the :prop_tgt:`ISPC_HEADER_SUFFIX`
property on all the targets.  See the target property for additional
information.



/P/🚀 variable/CMAKE_ISPC_INSTRUCTION_SETS.rst
====================================================


CMAKE_ISPC_INSTRUCTION_SETS
---------------------------

.. versionadded:: 3.19

Default value for :prop_tgt:`ISPC_INSTRUCTION_SETS` property of targets.

This variable is used to initialize the :prop_tgt:`ISPC_INSTRUCTION_SETS` property
on all targets. See the target property for additional information.



/P/🚀 variable/CMAKE_LANG_ANDROID_TOOLCHAIN_MACHINE.rst
=============================================================


CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE
--------------------------------------

.. versionadded:: 3.7.1

When :ref:`Cross Compiling for Android` this variable contains the
toolchain binutils machine name (e.g. ``gcc -dumpmachine``).  The
binutils typically have a ``<machine>-`` prefix on their name.

See also :variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX`
and :variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX`.



/P/🚀 variable/CMAKE_LANG_ANDROID_TOOLCHAIN_PREFIX.rst
============================================================


CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX
-------------------------------------

.. versionadded:: 3.7

When :ref:`Cross Compiling for Android` this variable contains the absolute
path prefixing the toolchain GNU compiler and its binutils.

See also :variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX`
and :variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE`.

For example, the path to the linker is::

  ${CMAKE_CXX_ANDROID_TOOLCHAIN_PREFIX}ld${CMAKE_CXX_ANDROID_TOOLCHAIN_SUFFIX}



/P/🚀 variable/CMAKE_LANG_ANDROID_TOOLCHAIN_SUFFIX.rst
============================================================


CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX
-------------------------------------

.. versionadded:: 3.7

When :ref:`Cross Compiling for Android` this variable contains the
host platform suffix of the toolchain GNU compiler and its binutils.

See also :variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX`
and :variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE`.



/P/🚀 variable/CMAKE_LANG_ARCHIVE_APPEND.rst
==================================================


CMAKE_<LANG>_ARCHIVE_APPEND
---------------------------

Rule variable to append to a static archive.

This is a rule variable that tells CMake how to append to a static
archive.  It is used in place of :variable:`CMAKE_<LANG>_CREATE_STATIC_LIBRARY`
on some platforms in order to support large object counts.  See also
:variable:`CMAKE_<LANG>_ARCHIVE_CREATE` and
:variable:`CMAKE_<LANG>_ARCHIVE_FINISH`.



/P/🚀 variable/CMAKE_LANG_ARCHIVE_CREATE.rst
==================================================


CMAKE_<LANG>_ARCHIVE_CREATE
---------------------------

Rule variable to create a new static archive.

This is a rule variable that tells CMake how to create a static
archive.  It is used in place of :variable:`CMAKE_<LANG>_CREATE_STATIC_LIBRARY`
on some platforms in order to support large object counts.  See also
:variable:`CMAKE_<LANG>_ARCHIVE_APPEND` and
:variable:`CMAKE_<LANG>_ARCHIVE_FINISH`.



/P/🚀 variable/CMAKE_LANG_ARCHIVE_FINISH.rst
==================================================


CMAKE_<LANG>_ARCHIVE_FINISH
---------------------------

Rule variable to finish an existing static archive.

This is a rule variable that tells CMake how to finish a static
archive.  It is used in place of :variable:`CMAKE_<LANG>_CREATE_STATIC_LIBRARY`
on some platforms in order to support large object counts.  See also
:variable:`CMAKE_<LANG>_ARCHIVE_CREATE` and
:variable:`CMAKE_<LANG>_ARCHIVE_APPEND`.



/P/🚀 variable/CMAKE_LANG_BYTE_ORDER.rst
==============================================


CMAKE_<LANG>_BYTE_ORDER
-----------------------

.. versionadded:: 3.20

Byte order of ``<LANG>`` compiler target architecture, if known.
If defined and not empty, the value is one of:

``BIG_ENDIAN``
  The target architecture is Big Endian.

``LITTLE_ENDIAN``
  The target architecture is Little Endian.

This is defined for languages ``C``, ``CXX``, ``OBJC``, ``OBJCXX``,
and ``CUDA``.

If :variable:`CMAKE_OSX_ARCHITECTURES` specifies multiple architectures, the
value of ``CMAKE_<LANG>_BYTE_ORDER`` is non-empty only if all architectures
share the same byte order.



/P/🚀 variable/CMAKE_LANG_COMPILE_OBJECT.rst
==================================================


CMAKE_<LANG>_COMPILE_OBJECT
---------------------------

Rule variable to compile a single object file.

This is a rule variable that tells CMake how to compile a single
object file for the language ``<LANG>``.



/P/🚀 variable/CMAKE_LANG_COMPILER.rst
============================================


CMAKE_<LANG>_COMPILER
---------------------

The full path to the compiler for ``LANG``.

This is the command that will be used as the ``<LANG>`` compiler.  Once
set, you can not change this variable.

Usage
^^^^^

This variable can be set by the user during the first time a build tree is configured.

If a non-full path value is supplied then CMake will resolve the full path of
the compiler.

The variable could be set in a user supplied toolchain file or via
:option:`-D <cmake -D>` on the command line.

.. note::
  Options that are required to make the compiler work correctly can be included
  as items in a list; they can not be changed.

.. code-block:: cmake

  #set within user supplied toolchain file
  set(CMAKE_C_COMPILER /full/path/to/qcc --arg1 --arg2)

or

.. code-block:: console

  $ cmake ... -DCMAKE_C_COMPILER='qcc;--arg1;--arg2'



/P/🚀 variable/CMAKE_LANG_COMPILER_EXTERNAL_TOOLCHAIN.rst
===============================================================


CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN
----------------------------------------

The external toolchain for cross-compiling, if supported.

Some compiler toolchains do not ship their own auxiliary utilities such as
archivers and linkers.  The compiler driver may support a command-line argument
to specify the location of such tools.
``CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN`` may be set to a path to
the external toolchain and will be passed to the compiler driver if supported.

This variable may only be set in a toolchain file specified by
the :variable:`CMAKE_TOOLCHAIN_FILE` variable.



/P/🚀 variable/CMAKE_LANG_COMPILER_ID.rst
===============================================


CMAKE_<LANG>_COMPILER_ID
------------------------

Compiler identification string.

A short string unique to the compiler vendor.  Possible values
include:

=============================== ===============================================
Value                           Name
=============================== ===============================================
``Absoft``                      Absoft Fortran
``ADSP``                        Analog VisualDSP++
``AppleClang``                  Apple Clang
``ARMCC``                       ARM Compiler
``ARMClang``                    ARM Compiler based on Clang
``Bruce``                       Bruce C Compiler
``CCur``                        Concurrent Fortran
``Clang``                       `LLVM Clang`_
``Cray``                        Cray Compiler
``CrayClang``                   Cray Clang-based Compiler
``Embarcadero``, ``Borland``    `Embarcadero`_
``Flang``                       `Classic Flang Fortran Compiler`_
``LLVMFlang``                   `LLVM Flang Fortran Compiler`_
``Fujitsu``                     Fujitsu HPC compiler (Trad mode)
``FujitsuClang``                Fujitsu HPC compiler (Clang mode)
``G95``                         `G95 Fortran`_
``GNU``                         `GNU Compiler Collection`_
``GHS``                         `Green Hills Software`_
``HP``                          Hewlett-Packard Compiler
``IAR``                         IAR Systems
``Intel``                       Intel Classic Compiler
``IntelLLVM``                   `Intel LLVM-Based Compiler`_
``LCC``                         MCST Elbrus C/C++/Fortran Compiler
``MSVC``                        `Microsoft Visual Studio`_
``NVHPC``                       `NVIDIA HPC Compiler`_
``NVIDIA``                      `NVIDIA CUDA Compiler`_
``OrangeC``                     `OrangeC Compiler`_
``OpenWatcom``                  `Open Watcom`_
``PGI``                         The Portland Group
``PathScale``                   PathScale
``SDCC``                        `Small Device C Compiler`_
``SunPro``                      Oracle Solaris Studio
``Tasking``                     `Tasking Compiler Toolsets`_
``TI``                          Texas Instruments
``TIClang``                     `Texas Instruments Clang-based Compilers`_
``TinyCC``                      `Tiny C Compiler`_
``XL``, ``VisualAge``, ``zOS``  IBM XL
``XLClang``                     IBM Clang-based XL
``IBMClang``                    IBM LLVM-based Compiler
=============================== ===============================================

This variable is not guaranteed to be defined for all compilers or
languages.

.. _LLVM Clang: https://clang.llvm.org
.. _Embarcadero: https://www.embarcadero.com
.. _Classic Flang Fortran Compiler: https://github.com/flang-compiler/flang
.. _LLVM Flang Fortran Compiler: https://github.com/llvm/llvm-project/tree/main/flang
.. _G95 Fortran: https://g95.sourceforge.net
.. _GNU Compiler Collection: https://gcc.gnu.org
.. _Green Hills Software: https://www.ghs.com/products/compiler.html
.. _Intel LLVM-Based Compiler:  https://www.intel.com/content/www/us/en/developer/tools/oneapi/overview.html
.. _Microsoft Visual Studio: https://visualstudio.microsoft.com
.. _NVIDIA HPC Compiler: https://developer.nvidia.com/hpc-compilers
.. _NVIDIA CUDA Compiler: https://developer.nvidia.com/cuda-llvm-compiler
.. _Open Watcom: https://open-watcom.github.io
.. _OrangeC Compiler: https://github.com/LADSoft/OrangeC
.. _Small Device C Compiler: https://sdcc.sourceforge.net
.. _Tiny C Compiler: https://bellard.org/tcc
.. _Tasking Compiler Toolsets: https://www.tasking.com
.. _Texas Instruments Clang-based Compilers: https://www.ti.com/tool/download/ARM-CGT-CLANG



/P/🚀 variable/CMAKE_LANG_COMPILER_LOADED.rst
===================================================


CMAKE_<LANG>_COMPILER_LOADED
----------------------------

Defined to true if the language is enabled.

When language ``<LANG>`` is enabled by :command:`project` or
:command:`enable_language` this variable is defined to ``1``.



/P/🚀 variable/CMAKE_LANG_COMPILER_PREDEFINES_COMMAND.rst
===============================================================


CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND
----------------------------------------

.. versionadded:: 3.10

Command that outputs the compiler pre definitions.

See :prop_tgt:`AUTOMOC` which uses
:variable:`CMAKE_CXX_COMPILER_PREDEFINES_COMMAND <CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND>`
to generate the :prop_tgt:`AUTOMOC_COMPILER_PREDEFINES`.



/P/🚀 variable/CMAKE_LANG_COMPILER_TARGET.rst
===================================================


CMAKE_<LANG>_COMPILER_TARGET
----------------------------

The target for cross-compiling, if supported.

Some compiler drivers are inherently cross-compilers, such as clang and
QNX qcc. These compiler drivers support a command-line argument to specify
the target to cross-compile for.

This variable may only be set in a toolchain file specified by
the :variable:`CMAKE_TOOLCHAIN_FILE` variable.



/P/🚀 variable/CMAKE_LANG_COMPILER_VERSION.rst
====================================================


CMAKE_<LANG>_COMPILER_VERSION
-----------------------------

Compiler version string.

Compiler version in major[.minor[.patch[.tweak]]] format.  This
variable is not guaranteed to be defined for all compilers or
languages.

For example ``CMAKE_C_COMPILER_VERSION`` and
``CMAKE_CXX_COMPILER_VERSION`` might indicate the respective C and C++
compiler version.



/P/🚀 variable/CMAKE_LANG_CREATE_SHARED_LIBRARY.rst
=========================================================


CMAKE_<LANG>_CREATE_SHARED_LIBRARY
----------------------------------

Rule variable to create a shared library.

This is a rule variable that tells CMake how to create a shared
library for the language ``<LANG>``.  This rule variable is a ``;`` delimited
list of commands to run to perform the linking step.



/P/🚀 variable/CMAKE_LANG_CREATE_SHARED_MODULE.rst
========================================================


CMAKE_<LANG>_CREATE_SHARED_MODULE
---------------------------------

Rule variable to create a shared module.

This is a rule variable that tells CMake how to create a shared
library for the language ``<LANG>``.  This rule variable is a ``;`` delimited
list of commands to run.



/P/🚀 variable/CMAKE_LANG_CREATE_STATIC_LIBRARY.rst
=========================================================


CMAKE_<LANG>_CREATE_STATIC_LIBRARY
----------------------------------

Rule variable to create a static library.

This is a rule variable that tells CMake how to create a static
library for the language ``<LANG>``.



/P/🚀 variable/CMAKE_LANG_EXTENSIONS.rst
==============================================


CMAKE_<LANG>_EXTENSIONS
-----------------------

The variations are:

* :variable:`CMAKE_C_EXTENSIONS`
* :variable:`CMAKE_CXX_EXTENSIONS`
* :variable:`CMAKE_CUDA_EXTENSIONS`
* :variable:`CMAKE_HIP_EXTENSIONS`
* :variable:`CMAKE_OBJC_EXTENSIONS`
* :variable:`CMAKE_OBJCXX_EXTENSIONS`

Default values for :prop_tgt:`<LANG>_EXTENSIONS` target properties if set when
a target is created.  For the compiler's default setting see
:variable:`CMAKE_<LANG>_EXTENSIONS_DEFAULT`.

For supported CMake versions see the respective pages.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_LANG_EXTENSIONS_DEFAULT.rst
======================================================


CMAKE_<LANG>_EXTENSIONS_DEFAULT
-------------------------------

.. versionadded:: 3.22

Compiler's default extensions mode. Used as the default for the
:prop_tgt:`<LANG>_EXTENSIONS` target property when
:variable:`CMAKE_<LANG>_EXTENSIONS` is not set (see :policy:`CMP0128`).

This variable is read-only.  Modifying it is undefined behavior.



/P/🚀 variable/CMAKE_LANG_FLAGS.rst
=========================================


CMAKE_<LANG>_FLAGS
------------------

Language-wide flags for language ``<LANG>`` used when building for
all configurations.  These flags will be passed to all invocations
of the compiler.  This includes invocations that drive compiling
and those that drive linking.

For each language, if this variable is not defined, it is initialized
and stored in the cache using values from environment variables in
combination with CMake's builtin defaults for the toolchain:

* ``CMAKE_C_FLAGS``:
  Initialized by the :envvar:`CFLAGS` environment variable.
* ``CMAKE_CXX_FLAGS``:
  Initialized by the :envvar:`CXXFLAGS` environment variable.
* ``CMAKE_CUDA_FLAGS``:
  Initialized by the :envvar:`CUDAFLAGS` environment variable.
* ``CMAKE_Fortran_FLAGS``:
  Initialized by the :envvar:`FFLAGS` environment variable.
* ``CMAKE_CSharp_FLAGS``:
  Initialized by the :envvar:`CSFLAGS` environment variable.
* ``CMAKE_HIP_FLAGS``:
  Initialized by the :envvar:`HIPFLAGS` environment variable.
* ``CMAKE_ISPC_FLAGS``:
  Initialized by the :envvar:`ISPCFLAGS` environment variable.

This value is a command-line string fragment. Therefore, multiple options
should be separated by spaces, and options with spaces should be quoted.

The flags in this variable will be passed before those in the
per-configuration :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` variable.
On invocations driving compiling, flags from both variables will be passed
before flags added by commands such as :command:`add_compile_options` and
:command:`target_compile_options`. On invocations driving linking,
they will be passed before flags added by commands such as
:command:`add_link_options` and :command:`target_link_options`.



/P/🚀 variable/CMAKE_LANG_FLAGS_CONFIG.rst
================================================


CMAKE_<LANG>_FLAGS_<CONFIG>
---------------------------

Language-wide flags for language ``<LANG>`` used when building for
the ``<CONFIG>`` configuration.  These flags will be passed to all
invocations of the compiler in the corresponding configuration.
This includes invocations that drive compiling and those that drive
linking.

The flags in this variable will be passed after those in the
:variable:`CMAKE_<LANG>_FLAGS` variable.  On invocations driving compiling,
flags from both variables will be passed before flags added by commands
such as :command:`add_compile_options` and :command:`target_compile_options`.
On invocations driving linking, they will be passed before flags added by
commands such as :command:`add_link_options` and
:command:`target_link_options`.



/P/🚀 variable/CMAKE_LANG_FLAGS_CONFIG_INIT.rst
=====================================================


CMAKE_<LANG>_FLAGS_<CONFIG>_INIT
--------------------------------

.. versionadded:: 3.11

Value used to initialize the :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` cache
entry the first time a build tree is configured for language ``<LANG>``.
This variable is meant to be set by a :variable:`toolchain file
<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to
the value based on the environment and target platform.

See also :variable:`CMAKE_<LANG>_FLAGS_INIT`.



/P/🚀 variable/CMAKE_LANG_FLAGS_DEBUG.rst
===============================================


CMAKE_<LANG>_FLAGS_DEBUG
------------------------

This variable is the ``Debug`` variant of the
:variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` variable.



/P/🚀 variable/CMAKE_LANG_FLAGS_DEBUG_INIT.rst
====================================================


CMAKE_<LANG>_FLAGS_DEBUG_INIT
-----------------------------

.. versionadded:: 3.7

This variable is the ``Debug`` variant of the
:variable:`CMAKE_<LANG>_FLAGS_<CONFIG>_INIT` variable.



/P/🚀 variable/CMAKE_LANG_FLAGS_INIT.rst
==============================================


CMAKE_<LANG>_FLAGS_INIT
-----------------------

.. versionadded:: 3.7

Value used to initialize the :variable:`CMAKE_<LANG>_FLAGS` cache entry
the first time a build tree is configured for language ``<LANG>``.
This variable is meant to be set by a :variable:`toolchain file
<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to
the value based on the environment and target platform.  For example,
the contents of a ``xxxFLAGS`` environment variable will be prepended,
where ``xxx`` will be language-specific but not necessarily the same as
``<LANG>`` (e.g. :envvar:`CXXFLAGS` for ``CXX``, :envvar:`FFLAGS` for
``Fortran``, and so on).
This value is a command-line string fragment. Therefore, multiple options
should be separated by spaces, and options with spaces should be quoted.

See also the configuration-specific
:variable:`CMAKE_<LANG>_FLAGS_<CONFIG>_INIT` variable.



/P/🚀 variable/CMAKE_LANG_FLAGS_MINSIZEREL.rst
====================================================


CMAKE_<LANG>_FLAGS_MINSIZEREL
-----------------------------

This variable is the ``MinSizeRel`` variant of the
:variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` variable.



/P/🚀 variable/CMAKE_LANG_FLAGS_MINSIZEREL_INIT.rst
=========================================================


CMAKE_<LANG>_FLAGS_MINSIZEREL_INIT
----------------------------------

.. versionadded:: 3.7

This variable is the ``MinSizeRel`` variant of the
:variable:`CMAKE_<LANG>_FLAGS_<CONFIG>_INIT` variable.



/P/🚀 variable/CMAKE_LANG_FLAGS_RELEASE.rst
=================================================


CMAKE_<LANG>_FLAGS_RELEASE
--------------------------

This variable is the ``Release`` variant of the
:variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` variable.



/P/🚀 variable/CMAKE_LANG_FLAGS_RELEASE_INIT.rst
======================================================


CMAKE_<LANG>_FLAGS_RELEASE_INIT
-------------------------------

.. versionadded:: 3.7

This variable is the ``Release`` variant of the
:variable:`CMAKE_<LANG>_FLAGS_<CONFIG>_INIT` variable.



/P/🚀 variable/CMAKE_LANG_FLAGS_RELWITHDEBINFO.rst
========================================================


CMAKE_<LANG>_FLAGS_RELWITHDEBINFO
---------------------------------

This variable is the ``RelWithDebInfo`` variant of the
:variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` variable.



/P/🚀 variable/CMAKE_LANG_FLAGS_RELWITHDEBINFO_INIT.rst
=============================================================


CMAKE_<LANG>_FLAGS_RELWITHDEBINFO_INIT
--------------------------------------

.. versionadded:: 3.7

This variable is the ``RelWithDebInfo`` variant of the
:variable:`CMAKE_<LANG>_FLAGS_<CONFIG>_INIT` variable.



/P/🚀 variable/CMAKE_LANG_HOST_COMPILER.rst
=================================================


CMAKE_<LANG>_HOST_COMPILER
--------------------------

.. versionadded:: 3.10
  ``CMAKE_CUDA_HOST_COMPILER``

.. versionadded:: 3.28
  ``CMAKE_HIP_HOST_COMPILER``

This variable is available when ``<LANG>`` is ``CUDA`` or ``HIP``.

When :variable:`CMAKE_<LANG>_COMPILER_ID` is
``NVIDIA``, ``CMAKE_<LANG>_HOST_COMPILER`` selects the compiler executable
to use when compiling host code for ``CUDA`` or ``HIP`` language files.
This maps to the ``nvcc -ccbin`` option.

The ``CMAKE_<LANG>_HOST_COMPILER`` variable may be set explicitly before CUDA
or HIP is first enabled by a :command:`project` or :command:`enable_language`
command.
This can be done via ``-DCMAKE_<LANG>_HOST_COMPILER=...`` on the command line
or in a :ref:`toolchain file <Cross Compiling Toolchain>`.  Or, one may set
the :envvar:`CUDAHOSTCXX` or :envvar:`HIPHOSTCXX` environment variable to
provide a default value.

Once the CUDA or HIP language is enabled, the ``CMAKE_<LANG>_HOST_COMPILER``
variable is read-only and changes to it are undefined behavior.

.. note::

  Since ``CMAKE_<LANG>_HOST_COMPILER`` is meaningful only when the
  :variable:`CMAKE_<LANG>_COMPILER_ID` is ``NVIDIA``,
  it does not make sense to set ``CMAKE_<LANG>_HOST_COMPILER`` without also
  setting ``CMAKE_<LANG>_COMPILER`` to NVCC.

.. note::

  Projects should not try to set ``CMAKE_<LANG>_HOST_COMPILER`` to match
  :variable:`CMAKE_CXX_COMPILER <CMAKE_<LANG>_COMPILER>` themselves.
  It is the end-user's responsibility, not the project's, to ensure that
  NVCC targets the same ABI as the C++ compiler.

.. note::

  Ignored when using :ref:`Visual Studio Generators`.



/P/🚀 variable/CMAKE_LANG_IGNORE_EXTENSIONS.rst
=====================================================


CMAKE_<LANG>_IGNORE_EXTENSIONS
------------------------------

File extensions that should be ignored by the build.

This is a list of file extensions that may be part of a project for a
given language but are not compiled.



/P/🚀 variable/CMAKE_LANG_IMPLICIT_INCLUDE_DIRECTORIES.rst
================================================================


CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES
-----------------------------------------

Directories implicitly searched by the compiler for header files.

CMake does not explicitly specify these directories on compiler
command lines for language ``<LANG>``.  This prevents system include
directories from being treated as user include directories on some
compilers, which is important for ``C``, ``CXX``, and ``CUDA`` to
avoid overriding standard library headers.

This value is not used for ``Fortran`` because it has no standard
library headers and some compilers do not search their implicit
include directories for module ``.mod`` files.



/P/🚀 variable/CMAKE_LANG_IMPLICIT_LINK_DIRECTORIES.rst
=============================================================


CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES
--------------------------------------

Implicit linker search path detected for language ``<LANG>``.

Compilers typically pass directories containing language runtime
libraries and default library search paths when they invoke a linker.
These paths are implicit linker search directories for the compiler's
language.

For each language enabled by the :command:`project` or
:command:`enable_language` command, CMake automatically detects these
directories and reports the results in this variable.
The :envvar:`CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES_EXCLUDE` environment
variable may be set to exclude specific directories from the automatically
detected results.

When linking to a static library, CMake adds the implicit link directories
from this variable for each language used in the static library (except
the language whose compiler is used to drive linking).  In the case of an
imported static library, the :prop_tgt:`IMPORTED_LINK_INTERFACE_LANGUAGES`
target property lists the languages whose implicit link information is
needed.  If any of the languages is not enabled, its value for the
``CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES`` variable may instead be provided
by the project.  Or, a :variable:`toolchain file <CMAKE_TOOLCHAIN_FILE>`
may set the variable to a value known for the specified toolchain.  It will
either be overridden when the language is enabled, or used as a fallback.

Some toolchains read implicit directories from an environment variable such as
``LIBRARY_PATH``.  If using such an environment variable, keep its value
consistent when operating in a given build tree because CMake saves the value
detected when first creating a build tree.

If policy :policy:`CMP0060` is not set to ``NEW``, then when a library in one
of these directories is given by full path to :command:`target_link_libraries`
CMake will generate the ``-l<name>`` form on link lines for historical
purposes.

See also the :variable:`CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES` variable.



/P/🚀 variable/CMAKE_LANG_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES.rst
=======================================================================


CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES
------------------------------------------------

Implicit linker framework search path detected for language ``<LANG>``.

These paths are implicit linker framework search directories for the
compiler's language.  CMake automatically detects these directories
for each language and reports the results in this variable.



/P/🚀 variable/CMAKE_LANG_IMPLICIT_LINK_LIBRARIES.rst
===========================================================


CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES
------------------------------------

Implicit link libraries and flags detected for language ``<LANG>``.

Compilers typically pass language runtime library names and other
flags when they invoke a linker.  These flags are implicit link
options for the compiler's language.  For each language enabled
by the :command:`project` or :command:`enable_language` command,
CMake automatically detects these libraries and flags and reports
the results in this variable.

When linking to a static library, CMake adds the implicit link libraries and
flags from this variable for each language used in the static library (except
the language whose compiler is used to drive linking).  In the case of an
imported static library, the :prop_tgt:`IMPORTED_LINK_INTERFACE_LANGUAGES`
target property lists the languages whose implicit link information is
needed.  If any of the languages is not enabled, its value for the
``CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES`` variable may instead be provided
by the project.  Or, a :variable:`toolchain file <CMAKE_TOOLCHAIN_FILE>`
may set the variable to a value known for the specified toolchain.  It will
either be overridden when the language is enabled, or used as a fallback.

See also the :variable:`CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES` variable.



/P/🚀 variable/CMAKE_LANG_LIBRARY_ARCHITECTURE.rst
========================================================


CMAKE_<LANG>_LIBRARY_ARCHITECTURE
---------------------------------

Target architecture library directory name detected for ``<LANG>``.

If the ``<LANG>`` compiler passes to the linker an architecture-specific
system library search directory such as ``<prefix>/lib/<arch>`` this
variable contains the ``<arch>`` name if/as detected by CMake.



/P/🚀 variable/CMAKE_LANG_LINK_EXECUTABLE.rst
===================================================


CMAKE_<LANG>_LINK_EXECUTABLE
----------------------------

Rule variable to link an executable.

Rule variable to link an executable for the given language.



/P/🚀 variable/CMAKE_LANG_LINKER_WRAPPER_FLAG.rst
=======================================================


CMAKE_<LANG>_LINKER_WRAPPER_FLAG
--------------------------------

.. versionadded:: 3.13

Defines the syntax of compiler driver option to pass options to the linker
tool. It will be used to translate the ``LINKER:`` prefix in the link options
(see :command:`add_link_options` and :command:`target_link_options`).

This variable holds a :ref:`semicolon-separated list <CMake Language Lists>` of tokens.
If a space (i.e. " ") is specified as last token, flag and ``LINKER:``
arguments will be specified as separate arguments to the compiler driver.
The :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP` variable can be specified
to manage concatenation of arguments.

For example, for ``Clang`` we have:

.. code-block:: cmake

  set (CMAKE_C_LINKER_WRAPPER_FLAG "-Xlinker" " ")

Specifying ``"LINKER:-z,defs"`` will be transformed in
``-Xlinker -z -Xlinker defs``.

For ``GNU GCC``:

.. code-block:: cmake

  set (CMAKE_C_LINKER_WRAPPER_FLAG "-Wl,")
  set (CMAKE_C_LINKER_WRAPPER_FLAG_SEP ",")

Specifying ``"LINKER:-z,defs"`` will be transformed in ``-Wl,-z,defs``.

And for ``SunPro``:

.. code-block:: cmake

  set (CMAKE_C_LINKER_WRAPPER_FLAG "-Qoption" "ld" " ")
  set (CMAKE_C_LINKER_WRAPPER_FLAG_SEP ",")

Specifying ``"LINKER:-z,defs"`` will be transformed in ``-Qoption ld -z,defs``.



/P/🚀 variable/CMAKE_LANG_LINKER_WRAPPER_FLAG_SEP.rst
===========================================================


CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP
------------------------------------

.. versionadded:: 3.13

This variable is used with :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG`
variable to format ``LINKER:`` prefix in the link options
(see :command:`add_link_options` and :command:`target_link_options`).

When specified, arguments of the ``LINKER:`` prefix will be concatenated using
this value as separator.



/P/🚀 variable/CMAKE_LANG_OUTPUT_EXTENSION.rst
====================================================


CMAKE_<LANG>_OUTPUT_EXTENSION
-----------------------------

Extension for the output of a compile for a single file.

This is the extension for an object file for the given ``<LANG>``.  For
example ``.obj`` for C on Windows.



/P/🚀 variable/CMAKE_LANG_SIMULATE_ID.rst
===============================================


CMAKE_<LANG>_SIMULATE_ID
------------------------

Identification string of the "simulated" compiler.

Some compilers simulate other compilers to serve as drop-in
replacements.  When CMake detects such a compiler it sets this
variable to what would have been the :variable:`CMAKE_<LANG>_COMPILER_ID` for
the simulated compiler.

.. note::
  In other words, this variable describes the ABI compatibility
  of the generated code.



/P/🚀 variable/CMAKE_LANG_SIMULATE_VERSION.rst
====================================================


CMAKE_<LANG>_SIMULATE_VERSION
-----------------------------

Version string of "simulated" compiler.

Some compilers simulate other compilers to serve as drop-in
replacements.  When CMake detects such a compiler it sets this
variable to what would have been the :variable:`CMAKE_<LANG>_COMPILER_VERSION`
for the simulated compiler.



/P/🚀 variable/CMAKE_LANG_SIZEOF_DATA_PTR.rst
===================================================


CMAKE_<LANG>_SIZEOF_DATA_PTR
----------------------------

Size of pointer-to-data types for language ``<LANG>``.

This holds the size (in bytes) of pointer-to-data types in the target
platform ABI.  It is defined for languages ``C`` and ``CXX`` (C++).



/P/🚀 variable/CMAKE_LANG_SOURCE_FILE_EXTENSIONS.rst
==========================================================


CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS
-----------------------------------

Extensions of source files for the given language.

This is the list of extensions for a given language's source files.



/P/🚀 variable/CMAKE_LANG_STANDARD.rst
============================================


CMAKE_<LANG>_STANDARD
---------------------

The variations are:

* :variable:`CMAKE_C_STANDARD`
* :variable:`CMAKE_CXX_STANDARD`
* :variable:`CMAKE_CUDA_STANDARD`
* :variable:`CMAKE_HIP_STANDARD`
* :variable:`CMAKE_OBJC_STANDARD`
* :variable:`CMAKE_OBJCXX_STANDARD`

Default values for :prop_tgt:`<LANG>_STANDARD` target properties if set when a
target is created.

For supported CMake versions see the respective pages.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_LANG_STANDARD_DEFAULT.rst
====================================================


CMAKE_<LANG>_STANDARD_DEFAULT
-----------------------------

.. versionadded:: 3.9

The compiler's default standard for the language ``<LANG>``. Empty if the
compiler has no conception of standard levels.



/P/🚀 variable/CMAKE_LANG_STANDARD_INCLUDE_DIRECTORIES.rst
================================================================


CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES
-----------------------------------------

.. versionadded:: 3.6

Include directories to be used for every source file compiled with
the ``<LANG>`` compiler.  This is meant for specification of system
include directories needed by the language for the current platform.
The directories always appear at the end of the include path passed
to the compiler.

This variable should not be set by project code.  It is meant to be set by
CMake's platform information modules for the current toolchain, or by a
toolchain file when used with :variable:`CMAKE_TOOLCHAIN_FILE`.

See also :variable:`CMAKE_<LANG>_STANDARD_LIBRARIES`.



/P/🚀 variable/CMAKE_LANG_STANDARD_LIBRARIES.rst
======================================================


CMAKE_<LANG>_STANDARD_LIBRARIES
-------------------------------

.. versionadded:: 3.6

Libraries linked into every executable and shared library linked
for language ``<LANG>``.  This is meant for specification of system
libraries needed by the language for the current platform.

This variable should not be set by project code.  It is meant to be set by
CMake's platform information modules for the current toolchain, or by a
toolchain file when used with :variable:`CMAKE_TOOLCHAIN_FILE`.

See also :variable:`CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES`.



/P/🚀 variable/CMAKE_LANG_STANDARD_REQUIRED.rst
=====================================================


CMAKE_<LANG>_STANDARD_REQUIRED
------------------------------

The variations are:

* :variable:`CMAKE_C_STANDARD_REQUIRED`
* :variable:`CMAKE_CXX_STANDARD_REQUIRED`
* :variable:`CMAKE_CUDA_STANDARD_REQUIRED`
* :variable:`CMAKE_HIP_STANDARD_REQUIRED`
* :variable:`CMAKE_OBJC_STANDARD_REQUIRED`
* :variable:`CMAKE_OBJCXX_STANDARD_REQUIRED`

Default values for :prop_tgt:`<LANG>_STANDARD_REQUIRED` target properties if
set when a target is created.

For supported CMake versions see the respective pages.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_OBJC_EXTENSIONS.rst
==============================================


CMAKE_OBJC_EXTENSIONS
---------------------

.. versionadded:: 3.16

Default value for :prop_tgt:`OBJC_EXTENSIONS` target property if set when a
target is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_OBJC_STANDARD.rst
============================================


CMAKE_OBJC_STANDARD
-------------------

.. versionadded:: 3.16

Default value for :prop_tgt:`OBJC_STANDARD` target property if set when a
target is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_OBJC_STANDARD_REQUIRED.rst
=====================================================


CMAKE_OBJC_STANDARD_REQUIRED
----------------------------

.. versionadded:: 3.16

Default value for :prop_tgt:`OBJC_STANDARD_REQUIRED` target property if set
when a target is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_OBJCXX_EXTENSIONS.rst
================================================


CMAKE_OBJCXX_EXTENSIONS
-----------------------

.. versionadded:: 3.16

Default value for :prop_tgt:`OBJCXX_EXTENSIONS` target property if set when a
target is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_OBJCXX_STANDARD.rst
==============================================


CMAKE_OBJCXX_STANDARD
---------------------

.. versionadded:: 3.16

Default value for :prop_tgt:`OBJCXX_STANDARD` target property if set when a
target is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_OBJCXX_STANDARD_REQUIRED.rst
=======================================================


CMAKE_OBJCXX_STANDARD_REQUIRED
------------------------------

.. versionadded:: 3.16

Default value for :prop_tgt:`OBJCXX_STANDARD_REQUIRED` target property if set
when a target is created.

See the :manual:`cmake-compile-features(7)` manual for information on
compile features and a list of supported compilers.



/P/🚀 variable/CMAKE_Swift_LANGUAGE_VERSION.rst
=====================================================


CMAKE_Swift_LANGUAGE_VERSION
----------------------------

.. versionadded:: 3.7

Set to the Swift language version number.  If not set, the oldest legacy
version known to be available in the host Xcode version is assumed:

* Swift ``4.0`` for Xcode 10.2 and above.
* Swift ``3.0`` for Xcode 8.3 and above.
* Swift ``2.3`` for Xcode 8.2 and below.



/P/🚀 variable/CMAKE_USER_MAKE_RULES_OVERRIDE_LANG.rst
============================================================


CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>
-------------------------------------

Specify a CMake file that overrides platform information for ``<LANG>``.

This is a language-specific version of
:variable:`CMAKE_USER_MAKE_RULES_OVERRIDE` loaded only when enabling language
``<LANG>``.



/P/🚀 variable/CTEST_BINARY_DIRECTORY.rst
===============================================


CTEST_BINARY_DIRECTORY
----------------------

.. versionadded:: 3.1

Specify the CTest ``BuildDirectory`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_BUILD_COMMAND.rst
============================================


CTEST_BUILD_COMMAND
-------------------

.. versionadded:: 3.1

Specify the CTest ``MakeCommand`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_BUILD_NAME.rst
=========================================


CTEST_BUILD_NAME
----------------

.. versionadded:: 3.1

Specify the CTest ``BuildName`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_BZR_COMMAND.rst
==========================================


CTEST_BZR_COMMAND
-----------------

.. versionadded:: 3.1

Specify the CTest ``BZRCommand`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_BZR_UPDATE_OPTIONS.rst
=================================================


CTEST_BZR_UPDATE_OPTIONS
------------------------

.. versionadded:: 3.1

Specify the CTest ``BZRUpdateOptions`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_CHANGE_ID.rst
========================================


CTEST_CHANGE_ID
---------------

.. versionadded:: 3.4

Specify the CTest ``ChangeId`` setting
in a :manual:`ctest(1)` dashboard client script.

This setting allows CTest to pass arbitrary information about this
build up to CDash.  One use of this feature is to allow CDash to
post comments on your pull request if anything goes wrong with your build.



/P/🚀 variable/CTEST_CHECKOUT_COMMAND.rst
===============================================


CTEST_CHECKOUT_COMMAND
----------------------

.. versionadded:: 3.1

Tell the :command:`ctest_start` command how to checkout or initialize
the source directory in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_CONFIGURATION_TYPE.rst
=================================================


CTEST_CONFIGURATION_TYPE
------------------------

.. versionadded:: 3.1

Specify the CTest ``DefaultCTestConfigurationType`` setting
in a :manual:`ctest(1)` dashboard client script.

If the configuration type is set via :option:`-C \<cfg\> <ctest -C>` from the command line
then this variable is populated accordingly.



/P/🚀 variable/CTEST_CONFIGURE_COMMAND.rst
================================================


CTEST_CONFIGURE_COMMAND
-----------------------

.. versionadded:: 3.1

Specify the CTest ``ConfigureCommand`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_COVERAGE_COMMAND.rst
===============================================


CTEST_COVERAGE_COMMAND
----------------------

.. versionadded:: 3.1

Specify the CTest ``CoverageCommand`` setting
in a :manual:`ctest(1)` dashboard client script.

Cobertura
'''''''''

Using `Cobertura`_ as the coverage generation within your multi-module
Java project can generate a series of XML files.

The Cobertura Coverage parser expects to read the coverage data from a
single XML file which contains the coverage data for all modules.
Cobertura has a program with the ability to merge given ``cobertura.ser`` files
and then another program to generate a combined XML file from the previous
merged file.  For command line testing, this can be done by hand prior to
CTest looking for the coverage files. For script builds,
set the ``CTEST_COVERAGE_COMMAND`` variable to point to a file which will
perform these same steps, such as a ``.sh`` or ``.bat`` file.

.. code-block:: cmake

  set(CTEST_COVERAGE_COMMAND .../run-coverage-and-consolidate.sh)

where the ``run-coverage-and-consolidate.sh`` script is perhaps created by
the :command:`configure_file` command and might contain the following code:

.. code-block:: bash

  #!/usr/bin/env bash
  CoberturaFiles="$(find "/path/to/source" -name "cobertura.ser")"
  SourceDirs="$(find "/path/to/source" -name "java" -type d)"
  cobertura-merge --datafile coberturamerge.ser $CoberturaFiles
  cobertura-report --datafile coberturamerge.ser --destination . \
                   --format xml $SourceDirs

The script uses ``find`` to capture the paths to all of the ``cobertura.ser``
files found below the project's source directory.  It keeps the list of files
and supplies it as an argument to the ``cobertura-merge`` program. The
``--datafile`` argument signifies where the result of the merge will be kept.

The combined ``coberturamerge.ser`` file is then used to generate the XML report
using the ``cobertura-report`` program.  The call to the cobertura-report
program requires some named arguments.

``--datafila``
  path to the merged ``.ser`` file

``--destination``
  path to put the output files(s)

``--format``
  file format to write output in: xml or html

The rest of the supplied arguments consist of the full paths to the
``/src/main/java`` directories of each module within the source tree. These
directories are needed and should not be forgotten.

.. _`Cobertura`: https://cobertura.github.io/cobertura/



/P/🚀 variable/CTEST_COVERAGE_EXTRA_FLAGS.rst
===================================================


CTEST_COVERAGE_EXTRA_FLAGS
--------------------------

.. versionadded:: 3.1

Specify the CTest ``CoverageExtraFlags`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_CURL_OPTIONS.rst
===========================================


CTEST_CURL_OPTIONS
------------------

.. versionadded:: 3.1

Specify the CTest ``CurlOptions`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_CUSTOM_COVERAGE_EXCLUDE.rst
======================================================


CTEST_CUSTOM_COVERAGE_EXCLUDE
-----------------------------

A list of regular expressions which will be used to exclude files by their
path from coverage output by the :command:`ctest_coverage` command.

.. include:: CTEST_CUSTOM_XXX.txt



/P/🚀 variable/CTEST_CUSTOM_ERROR_EXCEPTION.rst
=====================================================


CTEST_CUSTOM_ERROR_EXCEPTION
----------------------------

A list of regular expressions which will be used to exclude when detecting
error messages in build outputs by the :command:`ctest_build` command.

.. include:: CTEST_CUSTOM_XXX.txt



/P/🚀 variable/CTEST_CUSTOM_ERROR_MATCH.rst
=================================================


CTEST_CUSTOM_ERROR_MATCH
------------------------

A list of regular expressions which will be used to detect error messages in
build outputs by the :command:`ctest_build` command.

.. include:: CTEST_CUSTOM_XXX.txt



/P/🚀 variable/CTEST_CUSTOM_ERROR_POST_CONTEXT.rst
========================================================


CTEST_CUSTOM_ERROR_POST_CONTEXT
-------------------------------

The number of lines to include as context which follow an error message by the
:command:`ctest_build` command. The default is 10.

.. include:: CTEST_CUSTOM_XXX.txt



/P/🚀 variable/CTEST_CUSTOM_ERROR_PRE_CONTEXT.rst
=======================================================


CTEST_CUSTOM_ERROR_PRE_CONTEXT
------------------------------

The number of lines to include as context which precede an error message by
the :command:`ctest_build` command. The default is 10.

.. include:: CTEST_CUSTOM_XXX.txt



/P/🚀 variable/CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE.rst
=====================================================================


CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE
--------------------------------------------

When saving a failing test's output, this is the maximum size, in bytes, that
will be collected by the :command:`ctest_test` command. Defaults to 307200
(300 KiB). See :variable:`CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION` for possible
truncation modes.

If a test's output contains the literal string "CTEST_FULL_OUTPUT",
the output will not be truncated and may exceed the maximum size.

.. include:: CTEST_CUSTOM_XXX.txt

For controlling the output collection of passing tests, see
:variable:`CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE`.



/P/🚀 variable/CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS.rst
==============================================================


CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS
-------------------------------------

The maximum number of errors in a single build step which will be detected.
After this, the :command:`ctest_test` command will truncate the output.
Defaults to 50.

.. include:: CTEST_CUSTOM_XXX.txt



/P/🚀 variable/CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS.rst
================================================================


CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS
---------------------------------------

The maximum number of warnings in a single build step which will be detected.
After this, the :command:`ctest_test` command will truncate the output.
Defaults to 50.

.. include:: CTEST_CUSTOM_XXX.txt



/P/🚀 variable/CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE.rst
=====================================================================


CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE
--------------------------------------------

When saving a passing test's output, this is the maximum size, in bytes, that
will be collected by the :command:`ctest_test` command. Defaults to 1024
(1 KiB). See :variable:`CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION` for possible
truncation modes.

If a test's output contains the literal string "CTEST_FULL_OUTPUT",
the output will not be truncated and may exceed the maximum size.

.. include:: CTEST_CUSTOM_XXX.txt

For controlling the output collection of failing tests, see
:variable:`CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE`.



/P/🚀 variable/CTEST_CUSTOM_MEMCHECK_IGNORE.rst
=====================================================


CTEST_CUSTOM_MEMCHECK_IGNORE
----------------------------

A list of regular expressions to use to exclude tests during the
:command:`ctest_memcheck` command.

.. include:: CTEST_CUSTOM_XXX.txt



/P/🚀 variable/CTEST_CUSTOM_POST_MEMCHECK.rst
===================================================


CTEST_CUSTOM_POST_MEMCHECK
--------------------------

A list of commands to run at the end of the :command:`ctest_memcheck` command.

.. include:: CTEST_CUSTOM_XXX.txt



/P/🚀 variable/CTEST_CUSTOM_POST_TEST.rst
===============================================


CTEST_CUSTOM_POST_TEST
----------------------

A list of commands to run at the end of the :command:`ctest_test` command.

.. include:: CTEST_CUSTOM_XXX.txt



/P/🚀 variable/CTEST_CUSTOM_PRE_MEMCHECK.rst
==================================================


CTEST_CUSTOM_PRE_MEMCHECK
-------------------------

A list of commands to run at the start of the :command:`ctest_memcheck`
command.

.. include:: CTEST_CUSTOM_XXX.txt



/P/🚀 variable/CTEST_CUSTOM_PRE_TEST.rst
==============================================


CTEST_CUSTOM_PRE_TEST
----------------------

A list of commands to run at the start of the :command:`ctest_test` command.

.. include:: CTEST_CUSTOM_XXX.txt



/P/🚀 variable/CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION.rst
============================================================


CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION
-----------------------------------

.. versionadded:: 3.24

Set the test output truncation mode in case a maximum size is configured
via the :variable:`CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE` or
:variable:`CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE` variables.
By default the ``tail`` of the output will be truncated. Other possible
values are ``middle`` and ``head``.

.. include:: CTEST_CUSTOM_XXX.txt



/P/🚀 variable/CTEST_CUSTOM_TESTS_IGNORE.rst
==================================================


CTEST_CUSTOM_TESTS_IGNORE
-------------------------

A list of test names to be excluded from the set of tests run by the
:command:`ctest_test` command.

.. include:: CTEST_CUSTOM_XXX.txt



/P/🚀 variable/CTEST_CUSTOM_WARNING_EXCEPTION.rst
=======================================================


CTEST_CUSTOM_WARNING_EXCEPTION
------------------------------

A list of regular expressions which will be used to exclude when detecting
warning messages in build outputs by the :command:`ctest_build` command.

.. include:: CTEST_CUSTOM_XXX.txt



/P/🚀 variable/CTEST_CUSTOM_WARNING_MATCH.rst
===================================================


CTEST_CUSTOM_WARNING_MATCH
--------------------------

A list of regular expressions which will be used to detect warning messages in
build outputs by the :command:`ctest_build` command.

.. include:: CTEST_CUSTOM_XXX.txt



/P/🚀 variable/CTEST_CVS_COMMAND.rst
==========================================


CTEST_CVS_COMMAND
-----------------

.. versionadded:: 3.1

Specify the CTest ``CVSCommand`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_CVS_UPDATE_OPTIONS.rst
=================================================


CTEST_CVS_UPDATE_OPTIONS
------------------------

.. versionadded:: 3.1

Specify the CTest ``CVSUpdateOptions`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_DROP_LOCATION.rst
============================================


CTEST_DROP_LOCATION
-------------------

.. versionadded:: 3.1

Specify the CTest ``DropLocation`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_DROP_METHOD.rst
==========================================


CTEST_DROP_METHOD
-----------------

.. versionadded:: 3.1

Specify the CTest ``DropMethod`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_DROP_SITE.rst
========================================


CTEST_DROP_SITE
---------------

.. versionadded:: 3.1

Specify the CTest ``DropSite`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_DROP_SITE_CDASH.rst
==============================================


CTEST_DROP_SITE_CDASH
---------------------

.. versionadded:: 3.1

Specify the CTest ``IsCDash`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_DROP_SITE_PASSWORD.rst
=================================================


CTEST_DROP_SITE_PASSWORD
------------------------

.. versionadded:: 3.1

Specify the CTest ``DropSitePassword`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_DROP_SITE_USER.rst
=============================================


CTEST_DROP_SITE_USER
--------------------

.. versionadded:: 3.1

Specify the CTest ``DropSiteUser`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_EXTRA_COVERAGE_GLOB.rst
==================================================


CTEST_EXTRA_COVERAGE_GLOB
-------------------------

.. versionadded:: 3.4

A list of regular expressions which will be used to find files which should be
covered by the :command:`ctest_coverage` command.

.. include:: CTEST_CUSTOM_XXX.txt



/P/🚀 variable/CTEST_GIT_COMMAND.rst
==========================================


CTEST_GIT_COMMAND
-----------------

.. versionadded:: 3.1

Specify the CTest ``GITCommand`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_GIT_INIT_SUBMODULES.rst
==================================================


CTEST_GIT_INIT_SUBMODULES
-------------------------

.. versionadded:: 3.6

Specify the CTest ``GITInitSubmodules`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_GIT_UPDATE_CUSTOM.rst
================================================


CTEST_GIT_UPDATE_CUSTOM
-----------------------

.. versionadded:: 3.1

Specify the CTest ``GITUpdateCustom`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_GIT_UPDATE_OPTIONS.rst
=================================================


CTEST_GIT_UPDATE_OPTIONS
------------------------

.. versionadded:: 3.1

Specify the CTest ``GITUpdateOptions`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_HG_COMMAND.rst
=========================================


CTEST_HG_COMMAND
----------------

.. versionadded:: 3.1

Specify the CTest ``HGCommand`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_HG_UPDATE_OPTIONS.rst
================================================


CTEST_HG_UPDATE_OPTIONS
-----------------------

.. versionadded:: 3.1

Specify the CTest ``HGUpdateOptions`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_LABELS_FOR_SUBPROJECTS.rst
=====================================================


CTEST_LABELS_FOR_SUBPROJECTS
----------------------------

.. versionadded:: 3.10

Specify the CTest ``LabelsForSubprojects`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_MEMORYCHECK_COMMAND.rst
==================================================


CTEST_MEMORYCHECK_COMMAND
-------------------------

.. versionadded:: 3.1

Specify the CTest ``MemoryCheckCommand`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_MEMORYCHECK_COMMAND_OPTIONS.rst
==========================================================


CTEST_MEMORYCHECK_COMMAND_OPTIONS
---------------------------------

.. versionadded:: 3.1

Specify the CTest ``MemoryCheckCommandOptions`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_MEMORYCHECK_SANITIZER_OPTIONS.rst
============================================================


CTEST_MEMORYCHECK_SANITIZER_OPTIONS
-----------------------------------

.. versionadded:: 3.1

Specify the CTest ``MemoryCheckSanitizerOptions`` setting
in a :manual:`ctest(1)` dashboard client script.

CTest prepends correct sanitizer options ``*_OPTIONS``
environment variable to executed command. CTests adds
its own ``log_path`` to sanitizer options, don't provide your
own ``log_path``.



/P/🚀 variable/CTEST_MEMORYCHECK_SUPPRESSIONS_FILE.rst
============================================================


CTEST_MEMORYCHECK_SUPPRESSIONS_FILE
-----------------------------------

.. versionadded:: 3.1

Specify the CTest ``MemoryCheckSuppressionFile`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_MEMORYCHECK_TYPE.rst
===============================================


CTEST_MEMORYCHECK_TYPE
----------------------

.. versionadded:: 3.1

Specify the CTest ``MemoryCheckType`` setting
in a :manual:`ctest(1)` dashboard client script.
Valid values are ``Valgrind``, ``Purify``, ``BoundsChecker``, ``DrMemory``,
``CudaSanitizer``, ``ThreadSanitizer``, ``AddressSanitizer``, ``LeakSanitizer``,
``MemorySanitizer`` and ``UndefinedBehaviorSanitizer``.



/P/🚀 variable/CTEST_NIGHTLY_START_TIME.rst
=================================================


CTEST_NIGHTLY_START_TIME
------------------------

.. versionadded:: 3.1

Specify the CTest ``NightlyStartTime`` setting in a :manual:`ctest(1)`
dashboard client script.

Note that this variable must always be set for a nightly build in a
dashboard script. It is needed so that nightly builds can be properly grouped
together in CDash.



/P/🚀 variable/CTEST_P4_CLIENT.rst
========================================


CTEST_P4_CLIENT
---------------

.. versionadded:: 3.1

Specify the CTest ``P4Client`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_P4_COMMAND.rst
=========================================


CTEST_P4_COMMAND
----------------

.. versionadded:: 3.1

Specify the CTest ``P4Command`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_P4_OPTIONS.rst
=========================================


CTEST_P4_OPTIONS
----------------

.. versionadded:: 3.1

Specify the CTest ``P4Options`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_P4_UPDATE_OPTIONS.rst
================================================


CTEST_P4_UPDATE_OPTIONS
-----------------------

.. versionadded:: 3.1

Specify the CTest ``P4UpdateOptions`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_RESOURCE_SPEC_FILE.rst
=================================================


CTEST_RESOURCE_SPEC_FILE
------------------------

.. versionadded:: 3.18

Specify the CTest ``ResourceSpecFile`` setting in a :manual:`ctest(1)`
dashboard client script.

This can also be used to specify the resource spec file from a CMake build. If
no ``RESOURCE_SPEC_FILE`` is passed to :command:`ctest_test`, and
``CTEST_RESOURCE_SPEC_FILE`` is not specified in the dashboard script, the
value of this variable from the build is used.



/P/🚀 variable/CTEST_RUN_CURRENT_SCRIPT.rst
=================================================


CTEST_RUN_CURRENT_SCRIPT
------------------------

.. versionadded:: 3.11

Setting this to 0 prevents :manual:`ctest(1)` from being run again when it
reaches the end of a script run by calling :option:`ctest -S`.



/P/🚀 variable/CTEST_SCRIPT_DIRECTORY.rst
===============================================


CTEST_SCRIPT_DIRECTORY
----------------------

The directory containing the top-level CTest script.
The concept is similar to :variable:`CMAKE_SOURCE_DIR`.



/P/🚀 variable/CTEST_SITE.rst
===================================


CTEST_SITE
----------

.. versionadded:: 3.1

Specify the CTest ``Site`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_SOURCE_DIRECTORY.rst
===============================================


CTEST_SOURCE_DIRECTORY
----------------------

.. versionadded:: 3.1

Specify the CTest ``SourceDirectory`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_SUBMIT_INACTIVITY_TIMEOUT.rst
========================================================


CTEST_SUBMIT_INACTIVITY_TIMEOUT
-------------------------------

.. versionadded:: 3.23

Specify the CTest ``SubmitInactivityTimeout`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_SUBMIT_URL.rst
=========================================


CTEST_SUBMIT_URL
----------------

.. versionadded:: 3.14

Specify the CTest ``SubmitURL`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_SVN_COMMAND.rst
==========================================


CTEST_SVN_COMMAND
-----------------

.. versionadded:: 3.1

Specify the CTest ``SVNCommand`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_SVN_OPTIONS.rst
==========================================


CTEST_SVN_OPTIONS
-----------------

.. versionadded:: 3.1

Specify the CTest ``SVNOptions`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_SVN_UPDATE_OPTIONS.rst
=================================================


CTEST_SVN_UPDATE_OPTIONS
------------------------

.. versionadded:: 3.1

Specify the CTest ``SVNUpdateOptions`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_TEST_LOAD.rst
========================================


CTEST_TEST_LOAD
---------------

.. versionadded:: 3.4

Specify the ``TestLoad`` setting in the :ref:`CTest Test Step`
of a :manual:`ctest(1)` dashboard client script.  This sets the
default value for the ``TEST_LOAD`` option of the :command:`ctest_test`
command.



/P/🚀 variable/CTEST_TEST_TIMEOUT.rst
===========================================


CTEST_TEST_TIMEOUT
------------------

.. versionadded:: 3.1

Specify the CTest ``TimeOut`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_UPDATE_COMMAND.rst
=============================================


CTEST_UPDATE_COMMAND
--------------------

.. versionadded:: 3.1

Specify the CTest ``UpdateCommand`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_UPDATE_OPTIONS.rst
=============================================


CTEST_UPDATE_OPTIONS
--------------------

.. versionadded:: 3.1

Specify the CTest ``UpdateOptions`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_UPDATE_VERSION_ONLY.rst
==================================================


CTEST_UPDATE_VERSION_ONLY
-------------------------

.. versionadded:: 3.1

Specify the CTest :ref:`UpdateVersionOnly <UpdateVersionOnly>` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_UPDATE_VERSION_OVERRIDE.rst
======================================================


CTEST_UPDATE_VERSION_OVERRIDE
-----------------------------

.. versionadded:: 3.15

Specify the CTest :ref:`UpdateVersionOverride <UpdateVersionOverride>` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CTEST_USE_LAUNCHERS.rst
============================================


CTEST_USE_LAUNCHERS
-------------------

.. versionadded:: 3.1

Specify the CTest ``UseLaunchers`` setting
in a :manual:`ctest(1)` dashboard client script.



/P/🚀 variable/CPACK_ABSOLUTE_DESTINATION_FILES.rst
=========================================================


CPACK_ABSOLUTE_DESTINATION_FILES
--------------------------------

List of files which have been installed using an ``ABSOLUTE DESTINATION`` path.

This variable is a Read-Only variable which is set internally by CPack
during installation and before packaging using
:variable:`CMAKE_ABSOLUTE_DESTINATION_FILES` defined in ``cmake_install.cmake``
scripts.  The value can be used within CPack project configuration
file and/or ``CPack<GEN>.cmake`` file of ``<GEN>`` generator.



/P/🚀 variable/CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY.rst
===================================================================


CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY
------------------------------------------

Boolean toggle to include/exclude top level directory (component case).

Similar usage as :variable:`CPACK_INCLUDE_TOPLEVEL_DIRECTORY` but for the
component case.  See :variable:`CPACK_INCLUDE_TOPLEVEL_DIRECTORY`
documentation for the detail.



/P/🚀 variable/CPACK_CUSTOM_INSTALL_VARIABLES.rst
=======================================================


CPACK_CUSTOM_INSTALL_VARIABLES
------------------------------

.. versionadded:: 3.21

CPack variables (set via e.g. :option:`cpack -D`, ``CPackConfig.cmake`` or
:variable:`CPACK_PROJECT_CONFIG_FILE` scripts) are not directly visible in
installation scripts.  Instead, one can pass a list of ``varName=value``
pairs in the ``CPACK_CUSTOM_INSTALL_VARIABLES`` variable.  At install time,
each list item will result in a variable of the specified name (``varName``)
being set to the given ``value``.  The ``=`` can be omitted for an empty
``value``.

``CPACK_CUSTOM_INSTALL_VARIABLES`` allows the packaging installation to be
influenced by the user or driving script at CPack runtime without having to
regenerate the install scripts.

Example
"""""""

.. code-block:: cmake

  install(FILES large.txt DESTINATION data)

  install(CODE [[
    if(ENABLE_COMPRESSION)
      # "run-compressor" is a fictional tool that produces
      # large.txt.xz from large.txt and then removes the input file
      execute_process(COMMAND run-compressor $ENV{DESTDIR}${CMAKE_INSTALL_PREFIX}/large.txt)
    endif()
  ]])

With the above example snippet, :manual:`cpack <cpack(1)>` will by default
run the installation script with ``ENABLE_COMPRESSION`` unset, resulting in
a package containing the uncompressed ``large.txt``.  This can be overridden
when invoking :manual:`cpack <cpack(1)>` like so:

.. code-block:: shell

  cpack -D "CPACK_CUSTOM_INSTALL_VARIABLES=ENABLE_COMPRESSION=TRUE"

The installation script will then run with ``ENABLE_COMPRESSION`` set to
``TRUE``, resulting in a package containing the compressed ``large.txt.xz``
instead.



/P/🚀 variable/CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION.rst
====================================================================


CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION
-------------------------------------------

Ask CPack to error out as soon as a file with absolute ``INSTALL DESTINATION``
is encountered.

The fatal error is emitted before the installation of the offending
file takes place.  Some CPack generators, like ``NSIS``, enforce this
internally.  This variable triggers the definition
of :variable:`CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION` when CPack
runs.



/P/🚀 variable/CPACK_INCLUDE_TOPLEVEL_DIRECTORY.rst
=========================================================


CPACK_INCLUDE_TOPLEVEL_DIRECTORY
--------------------------------

Boolean toggle to include/exclude top level directory.

When preparing a package CPack installs the item under the so-called
top level directory.  The purpose of is to include (set to ``1`` or ``ON`` or
``TRUE``) the top level directory in the package or not (set to ``0`` or
``OFF`` or ``FALSE``).

Each CPack generator has a built-in default value for this variable.
E.g.  Archive generators (ZIP, TGZ, ...) includes the top level
whereas RPM or DEB don't.  The user may override the default value by
setting this variable.

There is a similar variable
:variable:`CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY` which may be used
to override the behavior for the component packaging
case which may have different default value for historical (now
backward compatibility) reason.



/P/🚀 variable/CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS.rst
====================================================================


CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS
-------------------------------------------

.. versionadded:: 3.11

Default permissions for implicitly created directories during packaging.

This variable serves the same purpose during packaging as the
:variable:`CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS` variable
serves during installation (e.g. ``make install``).

If `include(CPack)` is used then by default this variable is set to the content
of :variable:`CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS`.



/P/🚀 variable/CPACK_PACKAGING_INSTALL_PREFIX.rst
=======================================================


CPACK_PACKAGING_INSTALL_PREFIX
------------------------------

The prefix used in the built package.

Each CPack generator has a default value (like ``/usr``).  This default
value may be overwritten from the ``CMakeLists.txt`` or the :manual:`cpack(1)`
command line by setting an alternative value.  Example:

::

  set(CPACK_PACKAGING_INSTALL_PREFIX "/opt")

This is not the same purpose as :variable:`CMAKE_INSTALL_PREFIX` which is used
when installing from the build tree without building a package.



/P/🚀 variable/CPACK_SET_DESTDIR.rst
==========================================


CPACK_SET_DESTDIR
-----------------

Boolean toggle to make CPack use ``DESTDIR`` mechanism when packaging.

``DESTDIR`` means DESTination DIRectory.  It is commonly used by makefile
users in order to install software at non-default location.  It is a
basic relocation mechanism that should not be used on Windows (see
:variable:`CMAKE_INSTALL_PREFIX` documentation).  It is usually invoked like
this:

::

 make DESTDIR=/home/john install

which will install the concerned software using the installation
prefix, e.g. ``/usr/local`` prepended with the ``DESTDIR`` value which
finally gives ``/home/john/usr/local``.  When preparing a package, CPack
first installs the items to be packaged in a local (to the build tree)
directory by using the same ``DESTDIR`` mechanism.  Nevertheless, if
``CPACK_SET_DESTDIR`` is set then CPack will set ``DESTDIR`` before doing the
local install.  The most noticeable difference is that without
``CPACK_SET_DESTDIR``, CPack uses :variable:`CPACK_PACKAGING_INSTALL_PREFIX`
as a prefix whereas with ``CPACK_SET_DESTDIR`` set, CPack will use
:variable:`CMAKE_INSTALL_PREFIX` as a prefix.

Manually setting ``CPACK_SET_DESTDIR`` may help (or simply be necessary)
if some install rules uses absolute ``DESTINATION`` (see CMake
:command:`install` command).  However, starting with CPack/CMake 2.8.3 RPM
and DEB installers tries to handle ``DESTDIR`` automatically so that it is
seldom necessary for the user to set it.



/P/🚀 variable/CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION.rst
===================================================================


CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION
------------------------------------------

Ask CPack to warn each time a file with absolute ``INSTALL DESTINATION`` is
encountered.

This variable triggers the definition of
:variable:`CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION` when CPack runs
``cmake_install.cmake`` scripts.



/P/🚀 variable/CACHE.rst
==============================


CACHE
-----

.. versionadded:: 3.13

Operator to read cache variables.

Use the syntax ``$CACHE{VAR}`` to read cache entry ``VAR``.
See the :ref:`cmake-language(7) variables <CMake Language Variables>`
documentation for more complete documentation of the interaction of
normal variables and cache entries.

When evaluating :ref:`Variable References` of the form ``${VAR}``,
CMake first searches for a normal variable with that name, and if not
found CMake will search for a cache entry with that name.
The ``$CACHE{VAR}`` syntax can be used to do direct cache lookup and
ignore any existing normal variable.

See the :command:`set` and :command:`unset` commands to see how to
write or remove cache variables.



/P/🚀 variable/ENV.rst
============================


ENV
---

Operator to read environment variables.

Use the syntax ``$ENV{VAR}`` to read environment variable ``VAR``.

To test whether an environment variable is defined, use the signature
``if(DEFINED ENV{<name>})`` of the :command:`if` command.

.. note::

  Environment variable names containing special characters like parentheses
  may need to be escaped.  (Policy :policy:`CMP0053` must also be enabled.)
  For example, to get the value of the Windows environment variable
  ``ProgramFiles(x86)``, use:

  .. code-block:: cmake

      set(ProgramFiles_x86 "$ENV{ProgramFiles\(x86\)}")

For general information on environment variables, see the
:ref:`Environment Variables <CMake Language Environment Variables>`
section in the :manual:`cmake-language(7)` manual.



/P/🚀 variable/CMAKE_HOME_DIRECTORY.rst
=============================================


CMAKE_HOME_DIRECTORY
--------------------

Path to top of source tree. Same as :variable:`CMAKE_SOURCE_DIR`.

This is an internal cache entry used to locate the source directory
when loading a ``CMakeCache.txt`` from a build tree.  It should not
be used in project code.  The variable :variable:`CMAKE_SOURCE_DIR`
has the same value and should be preferred.



/P/🚀 variable/CMAKE_INTERNAL_PLATFORM_ABI.rst
====================================================


CMAKE_INTERNAL_PLATFORM_ABI
---------------------------

An internal variable subject to change.

This is used in determining the compiler ABI and is subject to change.



/P/🚀 variable/CMAKE_LANG_COMPILER_ABI.rst
================================================


CMAKE_<LANG>_COMPILER_ABI
-------------------------

An internal variable subject to change.

This is used in determining the compiler ABI and is subject to change.



/P/🚀 variable/CMAKE_LANG_COMPILER_ARCHITECTURE_ID.rst
============================================================


CMAKE_<LANG>_COMPILER_ARCHITECTURE_ID
-------------------------------------

.. versionadded:: 3.10

An internal variable subject to change.

This is used to identify the variant of a compiler based on its target
architecture.  For some compilers this is needed to determine the correct
usage.



/P/🚀 variable/CMAKE_LANG_COMPILER_VERSION_INTERNAL.rst
=============================================================


CMAKE_<LANG>_COMPILER_VERSION_INTERNAL
--------------------------------------

.. versionadded:: 3.10

An internal variable subject to change.

This is used to identify the variant of a compiler based on an internal
version number.  For some compilers this is needed to determine the
correct usage.



/P/🚀 variable/CMAKE_LANG_LINKER_PREFERENCE.rst
=====================================================


CMAKE_<LANG>_LINKER_PREFERENCE
------------------------------

An internal variable subject to change.

Preference value for linker language selection.

The "linker language" for executable, shared library, and module
targets is the language whose compiler will invoke the linker.  The
:prop_tgt:`LINKER_LANGUAGE` target property sets the language explicitly.
Otherwise, the linker language is that whose linker preference value
is highest among languages compiled and linked into the target.  See
also the :variable:`CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES` variable.



/P/🚀 variable/CMAKE_LANG_LINKER_PREFERENCE_PROPAGATES.rst
================================================================


CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES
-----------------------------------------

An internal variable subject to change.

True if :variable:`CMAKE_<LANG>_LINKER_PREFERENCE` propagates across targets.

This is used when CMake selects a linker language for a target.
Languages compiled directly into the target are always considered.  A
language compiled into static libraries linked by the target is
considered if this variable is true.



/P/🚀 variable/CMAKE_LANG_PLATFORM_ID.rst
===============================================


CMAKE_<LANG>_PLATFORM_ID
------------------------

An internal variable subject to change.

This is used in determining the platform and is subject to change.



/P/🚀 variable/CMAKE_NOT_USING_CONFIG_FLAGS.rst
=====================================================


CMAKE_NOT_USING_CONFIG_FLAGS
----------------------------

Skip ``_BUILD_TYPE`` flags if true.

This is an internal flag used by the generators in CMake to tell CMake
to skip the ``_BUILD_TYPE`` flags.



/P/🚀 variable/CMAKE_VS_INTEL_Fortran_PROJECT_VERSION.rst
===============================================================


CMAKE_VS_INTEL_Fortran_PROJECT_VERSION
--------------------------------------

When generating for :generator:`Visual Studio 9 2008` or greater with the Intel
Fortran plugin installed, this specifies the ``.vfproj`` project file format
version.  This is intended for internal use by CMake and should not be
used by project code.



/P/🚀 variable/CMAKE_EXTRA_GENERATOR.rst
==============================================


CMAKE_EXTRA_GENERATOR
---------------------

.. deprecated:: 3.27

  Support for :ref:`Extra Generators` is deprecated and will be removed from
  a future version of CMake.  IDEs may use the :manual:`cmake-file-api(7)`
  to view CMake-generated project build trees.

The extra generator used to build the project.  See
:manual:`cmake-generators(7)`.

When using the Eclipse, CodeBlocks, CodeLite, Kate or Sublime generators, CMake
generates Makefiles (:variable:`CMAKE_GENERATOR`) and additionally project
files for the respective IDE.  This IDE project file generator is stored in
``CMAKE_EXTRA_GENERATOR`` (e.g.  ``Eclipse CDT4``).



/P/🚀 variable/CMAKE_AUTOMOC_RELAXED_MODE.rst
===================================================


CMAKE_AUTOMOC_RELAXED_MODE
--------------------------

.. deprecated:: 3.15

Switch between strict and relaxed automoc mode.

By default, :prop_tgt:`AUTOMOC` behaves exactly as described in the
documentation of the :prop_tgt:`AUTOMOC` target property.  When set to
``TRUE``, it accepts more input and tries to find the correct input file for
``moc`` even if it differs from the documented behavior.  In this mode it
e.g.  also checks whether a header file is intended to be processed by moc
when a ``"foo.moc"`` file has been included.

Relaxed mode has to be enabled for KDE4 compatibility.



/P/🚀 variable/CMAKE_BACKWARDS_COMPATIBILITY.rst
======================================================


CMAKE_BACKWARDS_COMPATIBILITY
-----------------------------

Deprecated.  See CMake Policy :policy:`CMP0001` documentation.



/P/🚀 variable/CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY.rst
===============================================================


CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY
--------------------------------------

.. versionadded:: 3.1

.. deprecated:: 3.16

  Use the :variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` variable instead.

By default this variable is not set. If neither
:variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` nor
``CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY`` is set, then
:command:`find_package()` will use the :ref:`User Package Registry`
unless the ``NO_CMAKE_PACKAGE_REGISTRY`` option is provided.

``CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY`` is ignored if
:variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` is set.

In some cases, for example to locate only system wide installations, it
is not desirable to use the :ref:`User Package Registry` when searching
for packages. If the ``CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY``
variable is ``TRUE``, all the :command:`find_package` commands will skip
the :ref:`User Package Registry` as if they were called with the
``NO_CMAKE_PACKAGE_REGISTRY`` argument.

See also :ref:`Disabling the Package Registry`.



/P/🚀 variable/CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY.rst
======================================================================


CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY
---------------------------------------------

.. versionadded:: 3.1

.. deprecated:: 3.16

  Use the :variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY` variable instead.

By default this variable is not set. If neither
:variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY` nor
``CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY`` is set, then
:command:`find_package()` will use the :ref:`System Package Registry`
unless the ``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY`` option is provided.

``CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY`` is ignored if
:variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY` is set.

In some cases, it is not desirable to use the
:ref:`System Package Registry` when searching for packages. If the
``CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY`` variable is
``TRUE``, all the :command:`find_package` commands will skip
the :ref:`System Package Registry` as if they were called with the
``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY`` argument.

See also :ref:`Disabling the Package Registry`.



/P/🚀 variable/MSVC10.rst
===============================


MSVC10
------

Discouraged.  Use the :variable:`MSVC_VERSION` variable instead.

``True`` when using the Microsoft Visual Studio ``v100`` toolset
(``cl`` version 16) or another compiler that simulates it.



/P/🚀 variable/MSVC11.rst
===============================


MSVC11
------

Discouraged.  Use the :variable:`MSVC_VERSION` variable instead.

``True`` when using the Microsoft Visual Studio ``v110`` toolset
(``cl`` version 17) or another compiler that simulates it.



/P/🚀 variable/MSVC12.rst
===============================


MSVC12
------

Discouraged.  Use the :variable:`MSVC_VERSION` variable instead.

``True`` when using the Microsoft Visual Studio ``v120`` toolset
(``cl`` version 18) or another compiler that simulates it.



/P/🚀 variable/MSVC14.rst
===============================


MSVC14
------

.. versionadded:: 3.1

Discouraged.  Use the :variable:`MSVC_VERSION` variable instead.

``True`` when using the Microsoft Visual Studio ``v140`` or ``v141``
toolset (``cl`` version 19) or another compiler that simulates it.



/P/🚀 variable/MSVC60.rst
===============================


MSVC60
------

Discouraged.  Use the :variable:`MSVC_VERSION` variable instead.

``True`` when using Microsoft Visual C++ 6.0.

Set to ``true`` when the compiler is version 6.0 of Microsoft Visual C++.



/P/🚀 variable/MSVC70.rst
===============================


MSVC70
------

Discouraged.  Use the :variable:`MSVC_VERSION` variable instead.

``True`` when using Microsoft Visual C++ 7.0.

Set to ``true`` when the compiler is version 7.0 of Microsoft Visual C++.



/P/🚀 variable/MSVC71.rst
===============================


MSVC71
------

Discouraged.  Use the :variable:`MSVC_VERSION` variable instead.

``True`` when using Microsoft Visual C++ 7.1.

Set to ``true`` when the compiler is version 7.1 of Microsoft Visual C++.



/P/🚀 variable/MSVC80.rst
===============================


MSVC80
------

Discouraged.  Use the :variable:`MSVC_VERSION` variable instead.

``True`` when using the Microsoft Visual Studio ``v80`` toolset
(``cl`` version 14) or another compiler that simulates it.



/P/🚀 variable/MSVC90.rst
===============================


MSVC90
------

Discouraged.  Use the :variable:`MSVC_VERSION` variable instead.

``True`` when using the Microsoft Visual Studio ``v90`` toolset
(``cl`` version 15) or another compiler that simulates it.



/P/🚀 variable/CMAKE_IOS_INSTALL_COMBINED.rst
===================================================


CMAKE_IOS_INSTALL_COMBINED
--------------------------

.. versionadded:: 3.5
.. deprecated:: 3.28

  This is deprecated because :prop_tgt:`IOS_INSTALL_COMBINED` is deprecated.

Default value for :prop_tgt:`IOS_INSTALL_COMBINED` of targets.

This variable is used to initialize the :prop_tgt:`IOS_INSTALL_COMBINED`
property on all the targets.  See that target property for additional
information.



/P/🚀 variable/CMAKE_USE_RELATIVE_PATHS.rst
=================================================


CMAKE_USE_RELATIVE_PATHS
------------------------

This variable has no effect.  The partially implemented effect it
had in previous releases was removed in CMake 3.4.



/P/🚀 variable/CMAKE_COMPILER_IS_GNUCC.rst
================================================


CMAKE_COMPILER_IS_GNUCC
-----------------------

True if the ``C`` compiler is GNU.

This variable is deprecated.  Use
:variable:`CMAKE_C_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` instead.



/P/🚀 variable/CMAKE_COMPILER_IS_GNUCXX.rst
=================================================


CMAKE_COMPILER_IS_GNUCXX
------------------------

True if the C++ (``CXX``) compiler is GNU.

This variable is deprecated.  Use
:variable:`CMAKE_CXX_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` instead.



/P/🚀 variable/CMAKE_COMPILER_IS_GNUG77.rst
=================================================


CMAKE_COMPILER_IS_GNUG77
------------------------

True if the ``Fortran`` compiler is GNU.

This variable is deprecated.  Use
:variable:`CMAKE_Fortran_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` instead.



/P/🚀 variable/CTEST_CVS_CHECKOUT.rst
===========================================


CTEST_CVS_CHECKOUT
------------------

.. versionadded:: 3.1

Deprecated.  Use :variable:`CTEST_CHECKOUT_COMMAND` instead.



/P/🚀 variable/CTEST_SCP_COMMAND.rst
==========================================


CTEST_SCP_COMMAND
-----------------

.. versionadded:: 3.1

Legacy option.  Not used.



/P/🚀 variable/CTEST_TRIGGER_SITE.rst
===========================================


CTEST_TRIGGER_SITE
------------------

.. versionadded:: 3.1

Legacy option.  Not used.




/P/🚀 command/DEPRECATED_POLICY_VERSIONS.txt
=========================================================


.. code-block:: 

    .. versionchanged:: 3.27
    
      Compatibility with versions of CMake older than 3.5 is deprecated.
      Calls to :command:`cmake_minimum_required(VERSION)` or
      :command:`cmake_policy(VERSION)` that do not specify at least
      3.5 as their policy version (optionally via ``...<max>``)
      will produce a deprecation warning in CMake 3.27 and above.
    
    .. versionchanged:: 3.19
    
      Compatibility with versions of CMake older than 2.8.12 is deprecated.
      Calls to :command:`cmake_minimum_required(VERSION)` or
      :command:`cmake_policy(VERSION)` that do not specify at least
      2.8.12 as their policy version (optionally via ``...<max>``)
      will produce a deprecation warning in CMake 3.19 and above.



/P/🚀 command/DEPRECATED_POLICY_VERSIONS.txt
=========================================================


.. code-block:: 

    .. versionchanged:: 3.27
    
      Compatibility with versions of CMake older than 3.5 is deprecated.
      Calls to :command:`cmake_minimum_required(VERSION)` or
      :command:`cmake_policy(VERSION)` that do not specify at least
      3.5 as their policy version (optionally via ``...<max>``)
      will produce a deprecation warning in CMake 3.27 and above.
    
    .. versionchanged:: 3.19
    
      Compatibility with versions of CMake older than 2.8.12 is deprecated.
      Calls to :command:`cmake_minimum_required(VERSION)` or
      :command:`cmake_policy(VERSION)` that do not specify at least
      2.8.12 as their policy version (optionally via ``...<max>``)
      will produce a deprecation warning in CMake 3.19 and above.



/P/🚀 command/FIND_XXX.txt
=======================================


.. code-block:: 

    A short-hand signature is:
    
    .. parsed-literal::
    
       |FIND_XXX| (<VAR> name1 [path1 path2 ...])
    
    The general signature is:
    
    .. parsed-literal::
    
       |FIND_XXX| (
                 <VAR>
                 name | |NAMES|
                 [HINTS [path | ENV var]... ]
                 [PATHS [path | ENV var]... ]
                 [REGISTRY_VIEW (64|32|64_32|32_64|HOST|TARGET|BOTH)]
                 [PATH_SUFFIXES suffix1 [suffix2 ...]]
                 [VALIDATOR function]
                 [DOC "cache documentation string"]
                 [NO_CACHE]
                 [REQUIRED]
                 [NO_DEFAULT_PATH]
                 [NO_PACKAGE_ROOT_PATH]
                 [NO_CMAKE_PATH]
                 [NO_CMAKE_ENVIRONMENT_PATH]
                 [NO_SYSTEM_ENVIRONMENT_PATH]
                 [NO_CMAKE_SYSTEM_PATH]
                 [NO_CMAKE_INSTALL_PREFIX]
                 [CMAKE_FIND_ROOT_PATH_BOTH |
                  ONLY_CMAKE_FIND_ROOT_PATH |
                  NO_CMAKE_FIND_ROOT_PATH]
                )
    
    This command is used to find a |SEARCH_XXX_DESC|.
    A cache entry, or a normal variable if ``NO_CACHE`` is specified,
    named by ``<VAR>`` is created to store the result of this command.
    If the |SEARCH_XXX| is found the result is stored in the variable
    and the search will not be repeated unless the variable is cleared.
    If nothing is found, the result will be ``<VAR>-NOTFOUND``.
    
    Options include:
    
    ``NAMES``
      Specify one or more possible names for the |SEARCH_XXX|.
    
      When using this to specify names with and without a version
      suffix, we recommend specifying the unversioned name first
      so that locally-built packages can be found before those
      provided by distributions.
    
    ``HINTS``, ``PATHS``
      Specify directories to search in addition to the default locations.
      The ``ENV var`` sub-option reads paths from a system environment
      variable.
    
      .. versionchanged:: 3.24
        On ``Windows`` platform, it is possible to include registry queries as part
        of the directories, using a :ref:`dedicated syntax <Find Using Windows Registry>`.
        Such specifications will be ignored on all other platforms.
    
    ``REGISTRY_VIEW``
      .. versionadded:: 3.24
    
      .. include:: FIND_XXX_REGISTRY_VIEW.txt
    
    ``PATH_SUFFIXES``
      Specify additional subdirectories to check below each directory
      location otherwise considered.
    
    ``VALIDATOR``
      .. versionadded:: 3.25
    
      Specify a :command:`function` to be called for each candidate item found
      (a :command:`macro` cannot be provided, that will result in an error).
      Two arguments will be passed to the validator function: the name of a
      result variable, and the absolute path to the candidate item.  The item
      will be accepted and the search will end unless the function sets the
      value in the result variable to false in the calling scope.  The result
      variable will hold a true value when the validator function is entered.
    
      .. parsed-literal::
    
         function(my_check validator_result_var item)
           if(NOT item MATCHES ...)
             set(${validator_result_var} FALSE PARENT_SCOPE)
           endif()
         endfunction()
    
         |FIND_XXX| (result NAMES ... VALIDATOR my_check)
    
      Note that if a cached result is used, the search is skipped and any
      ``VALIDATOR`` is ignored.  The cached result is not required to pass the
      validation function.
    
    ``DOC``
      Specify the documentation string for the ``<VAR>`` cache entry.
    
    ``NO_CACHE``
      .. versionadded:: 3.21
    
      The result of the search will be stored in a normal variable rather than
      a cache entry.
    
      .. note::
    
        If the variable is already set before the call (as a normal or cache
        variable) then the search will not occur.
    
      .. warning::
    
        This option should be used with caution because it can greatly increase
        the cost of repeated configure steps.
    
    ``REQUIRED``
      .. versionadded:: 3.18
    
      Stop processing with an error message if nothing is found, otherwise
      the search will be attempted again the next time |FIND_XXX| is invoked
      with the same variable.
    
    If ``NO_DEFAULT_PATH`` is specified, then no additional paths are
    added to the search.
    If ``NO_DEFAULT_PATH`` is not specified, the search process is as follows:
    
    .. |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in the
       :variable:`<PackageName>_ROOT` CMake variable and the
       :envvar:`<PackageName>_ROOT` environment variable if
       called from within a find module loaded by
       :command:`find_package(<PackageName>)`
    
    .. |CMAKE_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in :variable:`CMAKE_PREFIX_PATH`
    
    .. |ENV_CMAKE_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in :envvar:`CMAKE_PREFIX_PATH`
    
    .. |SYSTEM_ENVIRONMENT_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>/[s]bin`` in ``PATH``, and
       |entry_XXX_SUBDIR| for other entries in ``PATH``
    
    .. |CMAKE_SYSTEM_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in
       :variable:`CMAKE_SYSTEM_PREFIX_PATH`
    
    1. If called from within a find module or any other script loaded by a call to
       :command:`find_package(<PackageName>)`, search prefixes unique to the
       current package being found.  See policy :policy:`CMP0074`.
    
       .. versionadded:: 3.12
    
       Specifically, search paths specified by the following variables, in order:
    
       a. :variable:`<PackageName>_ROOT` CMake variable,
          where ``<PackageName>`` is the case-preserved package name.
    
       b. :variable:`<PACKAGENAME>_ROOT` CMake variable,
          where ``<PACKAGENAME>`` is the upper-cased package name.
          See policy :policy:`CMP0144`.
    
          .. versionadded:: 3.27
    
       c. :envvar:`<PackageName>_ROOT` environment variable,
          where ``<PackageName>`` is the case-preserved package name.
    
       d. :envvar:`<PACKAGENAME>_ROOT` environment variable,
          where ``<PACKAGENAME>`` is the upper-cased package name.
          See policy :policy:`CMP0144`.
    
          .. versionadded:: 3.27
    
       The package root variables are maintained as a stack, so if called from
       nested find modules or config packages, root paths from the parent's find
       module or config package will be searched after paths from the current
       module or package.  In other words, the search order would be
       ``<CurrentPackage>_ROOT``, ``ENV{<CurrentPackage>_ROOT}``,
       ``<ParentPackage>_ROOT``, ``ENV{<ParentPackage>_ROOT}``, etc.
       This can be skipped if ``NO_PACKAGE_ROOT_PATH`` is passed or by setting
       the :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` to ``FALSE``.
    
       * |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX|
    
    2. Search paths specified in cmake-specific cache variables.
       These are intended to be used on the command line with a ``-DVAR=value``.
       The values are interpreted as :ref:`semicolon-separated lists <CMake Language Lists>`.
       This can be skipped if ``NO_CMAKE_PATH`` is passed or by setting the
       :variable:`CMAKE_FIND_USE_CMAKE_PATH` to ``FALSE``.
    
       * |CMAKE_PREFIX_PATH_XXX|
       * |CMAKE_XXX_PATH|
       * |CMAKE_XXX_MAC_PATH|
    
    3. Search paths specified in cmake-specific environment variables.
       These are intended to be set in the user's shell configuration,
       and therefore use the host's native path separator
       (``;`` on Windows and ``:`` on UNIX).
       This can be skipped if ``NO_CMAKE_ENVIRONMENT_PATH`` is passed or
       by setting the :variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH` to ``FALSE``.
    
       * |ENV_CMAKE_PREFIX_PATH_XXX|
       * |ENV_CMAKE_XXX_PATH|
       * |ENV_CMAKE_XXX_MAC_PATH|
    
    4. Search the paths specified by the ``HINTS`` option.
       These should be paths computed by system introspection, such as a
       hint provided by the location of another item already found.
       Hard-coded guesses should be specified with the ``PATHS`` option.
    
    5. Search the standard system environment variables.
       This can be skipped if ``NO_SYSTEM_ENVIRONMENT_PATH`` is passed or by
       setting the :variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH` to ``FALSE``.
    
       * |SYSTEM_ENVIRONMENT_PATH_XXX|
    
       |SYSTEM_ENVIRONMENT_PATH_WINDOWS_XXX|
    
    6. Search cmake variables defined in the Platform files
       for the current system.  The searching of ``CMAKE_INSTALL_PREFIX`` and
       ``CMAKE_STAGING_PREFIX`` can be
       skipped if ``NO_CMAKE_INSTALL_PREFIX`` is passed or by setting the
       :variable:`CMAKE_FIND_USE_INSTALL_PREFIX` to ``FALSE``. All these locations
       can be skipped if ``NO_CMAKE_SYSTEM_PATH`` is passed or by setting the
       :variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH` to ``FALSE``.
    
       * |CMAKE_SYSTEM_PREFIX_PATH_XXX|
       * |CMAKE_SYSTEM_XXX_PATH|
       * |CMAKE_SYSTEM_XXX_MAC_PATH|
    
       The platform paths that these variables contain are locations that
       typically include installed software. An example being ``/usr/local`` for
       UNIX based platforms.
    
    7. Search the paths specified by the PATHS option
       or in the short-hand version of the command.
       These are typically hard-coded guesses.
    
    The :variable:`CMAKE_IGNORE_PATH`, :variable:`CMAKE_IGNORE_PREFIX_PATH`,
    :variable:`CMAKE_SYSTEM_IGNORE_PATH` and
    :variable:`CMAKE_SYSTEM_IGNORE_PREFIX_PATH` variables can also cause some
    of the above locations to be ignored.
    
    .. versionadded:: 3.16
      Added ``CMAKE_FIND_USE_<CATEGORY>_PATH`` variables to globally disable
      various search locations.
    
    .. |FIND_ARGS_XXX| replace:: <VAR> NAMES name
    
    On macOS the :variable:`CMAKE_FIND_FRAMEWORK` and
    :variable:`CMAKE_FIND_APPBUNDLE` variables determine the order of
    preference between Apple-style and unix-style package components.
    
    .. include:: FIND_XXX_ROOT.txt
    .. include:: FIND_XXX_ORDER.txt



/P/🚀 command/FIND_XXX.txt
=======================================


.. code-block:: 

    A short-hand signature is:
    
    .. parsed-literal::
    
       |FIND_XXX| (<VAR> name1 [path1 path2 ...])
    
    The general signature is:
    
    .. parsed-literal::
    
       |FIND_XXX| (
                 <VAR>
                 name | |NAMES|
                 [HINTS [path | ENV var]... ]
                 [PATHS [path | ENV var]... ]
                 [REGISTRY_VIEW (64|32|64_32|32_64|HOST|TARGET|BOTH)]
                 [PATH_SUFFIXES suffix1 [suffix2 ...]]
                 [VALIDATOR function]
                 [DOC "cache documentation string"]
                 [NO_CACHE]
                 [REQUIRED]
                 [NO_DEFAULT_PATH]
                 [NO_PACKAGE_ROOT_PATH]
                 [NO_CMAKE_PATH]
                 [NO_CMAKE_ENVIRONMENT_PATH]
                 [NO_SYSTEM_ENVIRONMENT_PATH]
                 [NO_CMAKE_SYSTEM_PATH]
                 [NO_CMAKE_INSTALL_PREFIX]
                 [CMAKE_FIND_ROOT_PATH_BOTH |
                  ONLY_CMAKE_FIND_ROOT_PATH |
                  NO_CMAKE_FIND_ROOT_PATH]
                )
    
    This command is used to find a |SEARCH_XXX_DESC|.
    A cache entry, or a normal variable if ``NO_CACHE`` is specified,
    named by ``<VAR>`` is created to store the result of this command.
    If the |SEARCH_XXX| is found the result is stored in the variable
    and the search will not be repeated unless the variable is cleared.
    If nothing is found, the result will be ``<VAR>-NOTFOUND``.
    
    Options include:
    
    ``NAMES``
      Specify one or more possible names for the |SEARCH_XXX|.
    
      When using this to specify names with and without a version
      suffix, we recommend specifying the unversioned name first
      so that locally-built packages can be found before those
      provided by distributions.
    
    ``HINTS``, ``PATHS``
      Specify directories to search in addition to the default locations.
      The ``ENV var`` sub-option reads paths from a system environment
      variable.
    
      .. versionchanged:: 3.24
        On ``Windows`` platform, it is possible to include registry queries as part
        of the directories, using a :ref:`dedicated syntax <Find Using Windows Registry>`.
        Such specifications will be ignored on all other platforms.
    
    ``REGISTRY_VIEW``
      .. versionadded:: 3.24
    
      .. include:: FIND_XXX_REGISTRY_VIEW.txt
    
    ``PATH_SUFFIXES``
      Specify additional subdirectories to check below each directory
      location otherwise considered.
    
    ``VALIDATOR``
      .. versionadded:: 3.25
    
      Specify a :command:`function` to be called for each candidate item found
      (a :command:`macro` cannot be provided, that will result in an error).
      Two arguments will be passed to the validator function: the name of a
      result variable, and the absolute path to the candidate item.  The item
      will be accepted and the search will end unless the function sets the
      value in the result variable to false in the calling scope.  The result
      variable will hold a true value when the validator function is entered.
    
      .. parsed-literal::
    
         function(my_check validator_result_var item)
           if(NOT item MATCHES ...)
             set(${validator_result_var} FALSE PARENT_SCOPE)
           endif()
         endfunction()
    
         |FIND_XXX| (result NAMES ... VALIDATOR my_check)
    
      Note that if a cached result is used, the search is skipped and any
      ``VALIDATOR`` is ignored.  The cached result is not required to pass the
      validation function.
    
    ``DOC``
      Specify the documentation string for the ``<VAR>`` cache entry.
    
    ``NO_CACHE``
      .. versionadded:: 3.21
    
      The result of the search will be stored in a normal variable rather than
      a cache entry.
    
      .. note::
    
        If the variable is already set before the call (as a normal or cache
        variable) then the search will not occur.
    
      .. warning::
    
        This option should be used with caution because it can greatly increase
        the cost of repeated configure steps.
    
    ``REQUIRED``
      .. versionadded:: 3.18
    
      Stop processing with an error message if nothing is found, otherwise
      the search will be attempted again the next time |FIND_XXX| is invoked
      with the same variable.
    
    If ``NO_DEFAULT_PATH`` is specified, then no additional paths are
    added to the search.
    If ``NO_DEFAULT_PATH`` is not specified, the search process is as follows:
    
    .. |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in the
       :variable:`<PackageName>_ROOT` CMake variable and the
       :envvar:`<PackageName>_ROOT` environment variable if
       called from within a find module loaded by
       :command:`find_package(<PackageName>)`
    
    .. |CMAKE_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in :variable:`CMAKE_PREFIX_PATH`
    
    .. |ENV_CMAKE_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in :envvar:`CMAKE_PREFIX_PATH`
    
    .. |SYSTEM_ENVIRONMENT_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>/[s]bin`` in ``PATH``, and
       |entry_XXX_SUBDIR| for other entries in ``PATH``
    
    .. |CMAKE_SYSTEM_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in
       :variable:`CMAKE_SYSTEM_PREFIX_PATH`
    
    1. If called from within a find module or any other script loaded by a call to
       :command:`find_package(<PackageName>)`, search prefixes unique to the
       current package being found.  See policy :policy:`CMP0074`.
    
       .. versionadded:: 3.12
    
       Specifically, search paths specified by the following variables, in order:
    
       a. :variable:`<PackageName>_ROOT` CMake variable,
          where ``<PackageName>`` is the case-preserved package name.
    
       b. :variable:`<PACKAGENAME>_ROOT` CMake variable,
          where ``<PACKAGENAME>`` is the upper-cased package name.
          See policy :policy:`CMP0144`.
    
          .. versionadded:: 3.27
    
       c. :envvar:`<PackageName>_ROOT` environment variable,
          where ``<PackageName>`` is the case-preserved package name.
    
       d. :envvar:`<PACKAGENAME>_ROOT` environment variable,
          where ``<PACKAGENAME>`` is the upper-cased package name.
          See policy :policy:`CMP0144`.
    
          .. versionadded:: 3.27
    
       The package root variables are maintained as a stack, so if called from
       nested find modules or config packages, root paths from the parent's find
       module or config package will be searched after paths from the current
       module or package.  In other words, the search order would be
       ``<CurrentPackage>_ROOT``, ``ENV{<CurrentPackage>_ROOT}``,
       ``<ParentPackage>_ROOT``, ``ENV{<ParentPackage>_ROOT}``, etc.
       This can be skipped if ``NO_PACKAGE_ROOT_PATH`` is passed or by setting
       the :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` to ``FALSE``.
    
       * |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX|
    
    2. Search paths specified in cmake-specific cache variables.
       These are intended to be used on the command line with a ``-DVAR=value``.
       The values are interpreted as :ref:`semicolon-separated lists <CMake Language Lists>`.
       This can be skipped if ``NO_CMAKE_PATH`` is passed or by setting the
       :variable:`CMAKE_FIND_USE_CMAKE_PATH` to ``FALSE``.
    
       * |CMAKE_PREFIX_PATH_XXX|
       * |CMAKE_XXX_PATH|
       * |CMAKE_XXX_MAC_PATH|
    
    3. Search paths specified in cmake-specific environment variables.
       These are intended to be set in the user's shell configuration,
       and therefore use the host's native path separator
       (``;`` on Windows and ``:`` on UNIX).
       This can be skipped if ``NO_CMAKE_ENVIRONMENT_PATH`` is passed or
       by setting the :variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH` to ``FALSE``.
    
       * |ENV_CMAKE_PREFIX_PATH_XXX|
       * |ENV_CMAKE_XXX_PATH|
       * |ENV_CMAKE_XXX_MAC_PATH|
    
    4. Search the paths specified by the ``HINTS`` option.
       These should be paths computed by system introspection, such as a
       hint provided by the location of another item already found.
       Hard-coded guesses should be specified with the ``PATHS`` option.
    
    5. Search the standard system environment variables.
       This can be skipped if ``NO_SYSTEM_ENVIRONMENT_PATH`` is passed or by
       setting the :variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH` to ``FALSE``.
    
       * |SYSTEM_ENVIRONMENT_PATH_XXX|
    
       |SYSTEM_ENVIRONMENT_PATH_WINDOWS_XXX|
    
    6. Search cmake variables defined in the Platform files
       for the current system.  The searching of ``CMAKE_INSTALL_PREFIX`` and
       ``CMAKE_STAGING_PREFIX`` can be
       skipped if ``NO_CMAKE_INSTALL_PREFIX`` is passed or by setting the
       :variable:`CMAKE_FIND_USE_INSTALL_PREFIX` to ``FALSE``. All these locations
       can be skipped if ``NO_CMAKE_SYSTEM_PATH`` is passed or by setting the
       :variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH` to ``FALSE``.
    
       * |CMAKE_SYSTEM_PREFIX_PATH_XXX|
       * |CMAKE_SYSTEM_XXX_PATH|
       * |CMAKE_SYSTEM_XXX_MAC_PATH|
    
       The platform paths that these variables contain are locations that
       typically include installed software. An example being ``/usr/local`` for
       UNIX based platforms.
    
    7. Search the paths specified by the PATHS option
       or in the short-hand version of the command.
       These are typically hard-coded guesses.
    
    The :variable:`CMAKE_IGNORE_PATH`, :variable:`CMAKE_IGNORE_PREFIX_PATH`,
    :variable:`CMAKE_SYSTEM_IGNORE_PATH` and
    :variable:`CMAKE_SYSTEM_IGNORE_PREFIX_PATH` variables can also cause some
    of the above locations to be ignored.
    
    .. versionadded:: 3.16
      Added ``CMAKE_FIND_USE_<CATEGORY>_PATH`` variables to globally disable
      various search locations.
    
    .. |FIND_ARGS_XXX| replace:: <VAR> NAMES name
    
    On macOS the :variable:`CMAKE_FIND_FRAMEWORK` and
    :variable:`CMAKE_FIND_APPBUNDLE` variables determine the order of
    preference between Apple-style and unix-style package components.
    
    .. include:: FIND_XXX_ROOT.txt
    .. include:: FIND_XXX_ORDER.txt



/P/🚀 command/FIND_XXX_ROOT.txt
============================================


.. code-block:: 

    The CMake variable :variable:`CMAKE_FIND_ROOT_PATH` specifies one or more
    directories to be prepended to all other search directories.  This
    effectively "re-roots" the entire search under given locations.
    Paths which are descendants of the :variable:`CMAKE_STAGING_PREFIX` are excluded
    from this re-rooting, because that variable is always a path on the host system.
    By default the :variable:`CMAKE_FIND_ROOT_PATH` is empty.
    
    The :variable:`CMAKE_SYSROOT` variable can also be used to specify exactly one
    directory to use as a prefix.  Setting :variable:`CMAKE_SYSROOT` also has other
    effects.  See the documentation for that variable for more.
    
    These variables are especially useful when cross-compiling to
    point to the root directory of the target environment and CMake will
    search there too.  By default at first the directories listed in
    :variable:`CMAKE_FIND_ROOT_PATH` are searched, then the :variable:`CMAKE_SYSROOT`
    directory is searched, and then the non-rooted directories will be
    searched.  The default behavior can be adjusted by setting
    |CMAKE_FIND_ROOT_PATH_MODE_XXX|.  This behavior can be manually
    overridden on a per-call basis using options:
    
    ``CMAKE_FIND_ROOT_PATH_BOTH``
      Search in the order described above.
    
    ``NO_CMAKE_FIND_ROOT_PATH``
      Do not use the :variable:`CMAKE_FIND_ROOT_PATH` variable.
    
    ``ONLY_CMAKE_FIND_ROOT_PATH``
      Search only the re-rooted directories and directories below
      :variable:`CMAKE_STAGING_PREFIX`.



/P/🚀 command/FIND_XXX_ORDER.txt
=============================================


.. code-block:: 

    The default search order is designed to be most-specific to
    least-specific for common use cases.
    Projects may override the order by simply calling the command
    multiple times and using the ``NO_*`` options:
    
    .. parsed-literal::
    
       |FIND_XXX| (|FIND_ARGS_XXX| PATHS paths... NO_DEFAULT_PATH)
       |FIND_XXX| (|FIND_ARGS_XXX|)
    
    Once one of the calls succeeds the result variable will be set
    and stored in the cache so that no call will search again.



/P/🚀 command/FIND_XXX.txt
=======================================


.. code-block:: 

    A short-hand signature is:
    
    .. parsed-literal::
    
       |FIND_XXX| (<VAR> name1 [path1 path2 ...])
    
    The general signature is:
    
    .. parsed-literal::
    
       |FIND_XXX| (
                 <VAR>
                 name | |NAMES|
                 [HINTS [path | ENV var]... ]
                 [PATHS [path | ENV var]... ]
                 [REGISTRY_VIEW (64|32|64_32|32_64|HOST|TARGET|BOTH)]
                 [PATH_SUFFIXES suffix1 [suffix2 ...]]
                 [VALIDATOR function]
                 [DOC "cache documentation string"]
                 [NO_CACHE]
                 [REQUIRED]
                 [NO_DEFAULT_PATH]
                 [NO_PACKAGE_ROOT_PATH]
                 [NO_CMAKE_PATH]
                 [NO_CMAKE_ENVIRONMENT_PATH]
                 [NO_SYSTEM_ENVIRONMENT_PATH]
                 [NO_CMAKE_SYSTEM_PATH]
                 [NO_CMAKE_INSTALL_PREFIX]
                 [CMAKE_FIND_ROOT_PATH_BOTH |
                  ONLY_CMAKE_FIND_ROOT_PATH |
                  NO_CMAKE_FIND_ROOT_PATH]
                )
    
    This command is used to find a |SEARCH_XXX_DESC|.
    A cache entry, or a normal variable if ``NO_CACHE`` is specified,
    named by ``<VAR>`` is created to store the result of this command.
    If the |SEARCH_XXX| is found the result is stored in the variable
    and the search will not be repeated unless the variable is cleared.
    If nothing is found, the result will be ``<VAR>-NOTFOUND``.
    
    Options include:
    
    ``NAMES``
      Specify one or more possible names for the |SEARCH_XXX|.
    
      When using this to specify names with and without a version
      suffix, we recommend specifying the unversioned name first
      so that locally-built packages can be found before those
      provided by distributions.
    
    ``HINTS``, ``PATHS``
      Specify directories to search in addition to the default locations.
      The ``ENV var`` sub-option reads paths from a system environment
      variable.
    
      .. versionchanged:: 3.24
        On ``Windows`` platform, it is possible to include registry queries as part
        of the directories, using a :ref:`dedicated syntax <Find Using Windows Registry>`.
        Such specifications will be ignored on all other platforms.
    
    ``REGISTRY_VIEW``
      .. versionadded:: 3.24
    
      .. include:: FIND_XXX_REGISTRY_VIEW.txt
    
    ``PATH_SUFFIXES``
      Specify additional subdirectories to check below each directory
      location otherwise considered.
    
    ``VALIDATOR``
      .. versionadded:: 3.25
    
      Specify a :command:`function` to be called for each candidate item found
      (a :command:`macro` cannot be provided, that will result in an error).
      Two arguments will be passed to the validator function: the name of a
      result variable, and the absolute path to the candidate item.  The item
      will be accepted and the search will end unless the function sets the
      value in the result variable to false in the calling scope.  The result
      variable will hold a true value when the validator function is entered.
    
      .. parsed-literal::
    
         function(my_check validator_result_var item)
           if(NOT item MATCHES ...)
             set(${validator_result_var} FALSE PARENT_SCOPE)
           endif()
         endfunction()
    
         |FIND_XXX| (result NAMES ... VALIDATOR my_check)
    
      Note that if a cached result is used, the search is skipped and any
      ``VALIDATOR`` is ignored.  The cached result is not required to pass the
      validation function.
    
    ``DOC``
      Specify the documentation string for the ``<VAR>`` cache entry.
    
    ``NO_CACHE``
      .. versionadded:: 3.21
    
      The result of the search will be stored in a normal variable rather than
      a cache entry.
    
      .. note::
    
        If the variable is already set before the call (as a normal or cache
        variable) then the search will not occur.
    
      .. warning::
    
        This option should be used with caution because it can greatly increase
        the cost of repeated configure steps.
    
    ``REQUIRED``
      .. versionadded:: 3.18
    
      Stop processing with an error message if nothing is found, otherwise
      the search will be attempted again the next time |FIND_XXX| is invoked
      with the same variable.
    
    If ``NO_DEFAULT_PATH`` is specified, then no additional paths are
    added to the search.
    If ``NO_DEFAULT_PATH`` is not specified, the search process is as follows:
    
    .. |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in the
       :variable:`<PackageName>_ROOT` CMake variable and the
       :envvar:`<PackageName>_ROOT` environment variable if
       called from within a find module loaded by
       :command:`find_package(<PackageName>)`
    
    .. |CMAKE_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in :variable:`CMAKE_PREFIX_PATH`
    
    .. |ENV_CMAKE_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in :envvar:`CMAKE_PREFIX_PATH`
    
    .. |SYSTEM_ENVIRONMENT_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>/[s]bin`` in ``PATH``, and
       |entry_XXX_SUBDIR| for other entries in ``PATH``
    
    .. |CMAKE_SYSTEM_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in
       :variable:`CMAKE_SYSTEM_PREFIX_PATH`
    
    1. If called from within a find module or any other script loaded by a call to
       :command:`find_package(<PackageName>)`, search prefixes unique to the
       current package being found.  See policy :policy:`CMP0074`.
    
       .. versionadded:: 3.12
    
       Specifically, search paths specified by the following variables, in order:
    
       a. :variable:`<PackageName>_ROOT` CMake variable,
          where ``<PackageName>`` is the case-preserved package name.
    
       b. :variable:`<PACKAGENAME>_ROOT` CMake variable,
          where ``<PACKAGENAME>`` is the upper-cased package name.
          See policy :policy:`CMP0144`.
    
          .. versionadded:: 3.27
    
       c. :envvar:`<PackageName>_ROOT` environment variable,
          where ``<PackageName>`` is the case-preserved package name.
    
       d. :envvar:`<PACKAGENAME>_ROOT` environment variable,
          where ``<PACKAGENAME>`` is the upper-cased package name.
          See policy :policy:`CMP0144`.
    
          .. versionadded:: 3.27
    
       The package root variables are maintained as a stack, so if called from
       nested find modules or config packages, root paths from the parent's find
       module or config package will be searched after paths from the current
       module or package.  In other words, the search order would be
       ``<CurrentPackage>_ROOT``, ``ENV{<CurrentPackage>_ROOT}``,
       ``<ParentPackage>_ROOT``, ``ENV{<ParentPackage>_ROOT}``, etc.
       This can be skipped if ``NO_PACKAGE_ROOT_PATH`` is passed or by setting
       the :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` to ``FALSE``.
    
       * |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX|
    
    2. Search paths specified in cmake-specific cache variables.
       These are intended to be used on the command line with a ``-DVAR=value``.
       The values are interpreted as :ref:`semicolon-separated lists <CMake Language Lists>`.
       This can be skipped if ``NO_CMAKE_PATH`` is passed or by setting the
       :variable:`CMAKE_FIND_USE_CMAKE_PATH` to ``FALSE``.
    
       * |CMAKE_PREFIX_PATH_XXX|
       * |CMAKE_XXX_PATH|
       * |CMAKE_XXX_MAC_PATH|
    
    3. Search paths specified in cmake-specific environment variables.
       These are intended to be set in the user's shell configuration,
       and therefore use the host's native path separator
       (``;`` on Windows and ``:`` on UNIX).
       This can be skipped if ``NO_CMAKE_ENVIRONMENT_PATH`` is passed or
       by setting the :variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH` to ``FALSE``.
    
       * |ENV_CMAKE_PREFIX_PATH_XXX|
       * |ENV_CMAKE_XXX_PATH|
       * |ENV_CMAKE_XXX_MAC_PATH|
    
    4. Search the paths specified by the ``HINTS`` option.
       These should be paths computed by system introspection, such as a
       hint provided by the location of another item already found.
       Hard-coded guesses should be specified with the ``PATHS`` option.
    
    5. Search the standard system environment variables.
       This can be skipped if ``NO_SYSTEM_ENVIRONMENT_PATH`` is passed or by
       setting the :variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH` to ``FALSE``.
    
       * |SYSTEM_ENVIRONMENT_PATH_XXX|
    
       |SYSTEM_ENVIRONMENT_PATH_WINDOWS_XXX|
    
    6. Search cmake variables defined in the Platform files
       for the current system.  The searching of ``CMAKE_INSTALL_PREFIX`` and
       ``CMAKE_STAGING_PREFIX`` can be
       skipped if ``NO_CMAKE_INSTALL_PREFIX`` is passed or by setting the
       :variable:`CMAKE_FIND_USE_INSTALL_PREFIX` to ``FALSE``. All these locations
       can be skipped if ``NO_CMAKE_SYSTEM_PATH`` is passed or by setting the
       :variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH` to ``FALSE``.
    
       * |CMAKE_SYSTEM_PREFIX_PATH_XXX|
       * |CMAKE_SYSTEM_XXX_PATH|
       * |CMAKE_SYSTEM_XXX_MAC_PATH|
    
       The platform paths that these variables contain are locations that
       typically include installed software. An example being ``/usr/local`` for
       UNIX based platforms.
    
    7. Search the paths specified by the PATHS option
       or in the short-hand version of the command.
       These are typically hard-coded guesses.
    
    The :variable:`CMAKE_IGNORE_PATH`, :variable:`CMAKE_IGNORE_PREFIX_PATH`,
    :variable:`CMAKE_SYSTEM_IGNORE_PATH` and
    :variable:`CMAKE_SYSTEM_IGNORE_PREFIX_PATH` variables can also cause some
    of the above locations to be ignored.
    
    .. versionadded:: 3.16
      Added ``CMAKE_FIND_USE_<CATEGORY>_PATH`` variables to globally disable
      various search locations.
    
    .. |FIND_ARGS_XXX| replace:: <VAR> NAMES name
    
    On macOS the :variable:`CMAKE_FIND_FRAMEWORK` and
    :variable:`CMAKE_FIND_APPBUNDLE` variables determine the order of
    preference between Apple-style and unix-style package components.
    
    .. include:: FIND_XXX_ROOT.txt
    .. include:: FIND_XXX_ORDER.txt



/P/🚀 command/FIND_XXX.txt
=======================================


.. code-block:: 

    A short-hand signature is:
    
    .. parsed-literal::
    
       |FIND_XXX| (<VAR> name1 [path1 path2 ...])
    
    The general signature is:
    
    .. parsed-literal::
    
       |FIND_XXX| (
                 <VAR>
                 name | |NAMES|
                 [HINTS [path | ENV var]... ]
                 [PATHS [path | ENV var]... ]
                 [REGISTRY_VIEW (64|32|64_32|32_64|HOST|TARGET|BOTH)]
                 [PATH_SUFFIXES suffix1 [suffix2 ...]]
                 [VALIDATOR function]
                 [DOC "cache documentation string"]
                 [NO_CACHE]
                 [REQUIRED]
                 [NO_DEFAULT_PATH]
                 [NO_PACKAGE_ROOT_PATH]
                 [NO_CMAKE_PATH]
                 [NO_CMAKE_ENVIRONMENT_PATH]
                 [NO_SYSTEM_ENVIRONMENT_PATH]
                 [NO_CMAKE_SYSTEM_PATH]
                 [NO_CMAKE_INSTALL_PREFIX]
                 [CMAKE_FIND_ROOT_PATH_BOTH |
                  ONLY_CMAKE_FIND_ROOT_PATH |
                  NO_CMAKE_FIND_ROOT_PATH]
                )
    
    This command is used to find a |SEARCH_XXX_DESC|.
    A cache entry, or a normal variable if ``NO_CACHE`` is specified,
    named by ``<VAR>`` is created to store the result of this command.
    If the |SEARCH_XXX| is found the result is stored in the variable
    and the search will not be repeated unless the variable is cleared.
    If nothing is found, the result will be ``<VAR>-NOTFOUND``.
    
    Options include:
    
    ``NAMES``
      Specify one or more possible names for the |SEARCH_XXX|.
    
      When using this to specify names with and without a version
      suffix, we recommend specifying the unversioned name first
      so that locally-built packages can be found before those
      provided by distributions.
    
    ``HINTS``, ``PATHS``
      Specify directories to search in addition to the default locations.
      The ``ENV var`` sub-option reads paths from a system environment
      variable.
    
      .. versionchanged:: 3.24
        On ``Windows`` platform, it is possible to include registry queries as part
        of the directories, using a :ref:`dedicated syntax <Find Using Windows Registry>`.
        Such specifications will be ignored on all other platforms.
    
    ``REGISTRY_VIEW``
      .. versionadded:: 3.24
    
      .. include:: FIND_XXX_REGISTRY_VIEW.txt
    
    ``PATH_SUFFIXES``
      Specify additional subdirectories to check below each directory
      location otherwise considered.
    
    ``VALIDATOR``
      .. versionadded:: 3.25
    
      Specify a :command:`function` to be called for each candidate item found
      (a :command:`macro` cannot be provided, that will result in an error).
      Two arguments will be passed to the validator function: the name of a
      result variable, and the absolute path to the candidate item.  The item
      will be accepted and the search will end unless the function sets the
      value in the result variable to false in the calling scope.  The result
      variable will hold a true value when the validator function is entered.
    
      .. parsed-literal::
    
         function(my_check validator_result_var item)
           if(NOT item MATCHES ...)
             set(${validator_result_var} FALSE PARENT_SCOPE)
           endif()
         endfunction()
    
         |FIND_XXX| (result NAMES ... VALIDATOR my_check)
    
      Note that if a cached result is used, the search is skipped and any
      ``VALIDATOR`` is ignored.  The cached result is not required to pass the
      validation function.
    
    ``DOC``
      Specify the documentation string for the ``<VAR>`` cache entry.
    
    ``NO_CACHE``
      .. versionadded:: 3.21
    
      The result of the search will be stored in a normal variable rather than
      a cache entry.
    
      .. note::
    
        If the variable is already set before the call (as a normal or cache
        variable) then the search will not occur.
    
      .. warning::
    
        This option should be used with caution because it can greatly increase
        the cost of repeated configure steps.
    
    ``REQUIRED``
      .. versionadded:: 3.18
    
      Stop processing with an error message if nothing is found, otherwise
      the search will be attempted again the next time |FIND_XXX| is invoked
      with the same variable.
    
    If ``NO_DEFAULT_PATH`` is specified, then no additional paths are
    added to the search.
    If ``NO_DEFAULT_PATH`` is not specified, the search process is as follows:
    
    .. |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in the
       :variable:`<PackageName>_ROOT` CMake variable and the
       :envvar:`<PackageName>_ROOT` environment variable if
       called from within a find module loaded by
       :command:`find_package(<PackageName>)`
    
    .. |CMAKE_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in :variable:`CMAKE_PREFIX_PATH`
    
    .. |ENV_CMAKE_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in :envvar:`CMAKE_PREFIX_PATH`
    
    .. |SYSTEM_ENVIRONMENT_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>/[s]bin`` in ``PATH``, and
       |entry_XXX_SUBDIR| for other entries in ``PATH``
    
    .. |CMAKE_SYSTEM_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in
       :variable:`CMAKE_SYSTEM_PREFIX_PATH`
    
    1. If called from within a find module or any other script loaded by a call to
       :command:`find_package(<PackageName>)`, search prefixes unique to the
       current package being found.  See policy :policy:`CMP0074`.
    
       .. versionadded:: 3.12
    
       Specifically, search paths specified by the following variables, in order:
    
       a. :variable:`<PackageName>_ROOT` CMake variable,
          where ``<PackageName>`` is the case-preserved package name.
    
       b. :variable:`<PACKAGENAME>_ROOT` CMake variable,
          where ``<PACKAGENAME>`` is the upper-cased package name.
          See policy :policy:`CMP0144`.
    
          .. versionadded:: 3.27
    
       c. :envvar:`<PackageName>_ROOT` environment variable,
          where ``<PackageName>`` is the case-preserved package name.
    
       d. :envvar:`<PACKAGENAME>_ROOT` environment variable,
          where ``<PACKAGENAME>`` is the upper-cased package name.
          See policy :policy:`CMP0144`.
    
          .. versionadded:: 3.27
    
       The package root variables are maintained as a stack, so if called from
       nested find modules or config packages, root paths from the parent's find
       module or config package will be searched after paths from the current
       module or package.  In other words, the search order would be
       ``<CurrentPackage>_ROOT``, ``ENV{<CurrentPackage>_ROOT}``,
       ``<ParentPackage>_ROOT``, ``ENV{<ParentPackage>_ROOT}``, etc.
       This can be skipped if ``NO_PACKAGE_ROOT_PATH`` is passed or by setting
       the :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` to ``FALSE``.
    
       * |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX|
    
    2. Search paths specified in cmake-specific cache variables.
       These are intended to be used on the command line with a ``-DVAR=value``.
       The values are interpreted as :ref:`semicolon-separated lists <CMake Language Lists>`.
       This can be skipped if ``NO_CMAKE_PATH`` is passed or by setting the
       :variable:`CMAKE_FIND_USE_CMAKE_PATH` to ``FALSE``.
    
       * |CMAKE_PREFIX_PATH_XXX|
       * |CMAKE_XXX_PATH|
       * |CMAKE_XXX_MAC_PATH|
    
    3. Search paths specified in cmake-specific environment variables.
       These are intended to be set in the user's shell configuration,
       and therefore use the host's native path separator
       (``;`` on Windows and ``:`` on UNIX).
       This can be skipped if ``NO_CMAKE_ENVIRONMENT_PATH`` is passed or
       by setting the :variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH` to ``FALSE``.
    
       * |ENV_CMAKE_PREFIX_PATH_XXX|
       * |ENV_CMAKE_XXX_PATH|
       * |ENV_CMAKE_XXX_MAC_PATH|
    
    4. Search the paths specified by the ``HINTS`` option.
       These should be paths computed by system introspection, such as a
       hint provided by the location of another item already found.
       Hard-coded guesses should be specified with the ``PATHS`` option.
    
    5. Search the standard system environment variables.
       This can be skipped if ``NO_SYSTEM_ENVIRONMENT_PATH`` is passed or by
       setting the :variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH` to ``FALSE``.
    
       * |SYSTEM_ENVIRONMENT_PATH_XXX|
    
       |SYSTEM_ENVIRONMENT_PATH_WINDOWS_XXX|
    
    6. Search cmake variables defined in the Platform files
       for the current system.  The searching of ``CMAKE_INSTALL_PREFIX`` and
       ``CMAKE_STAGING_PREFIX`` can be
       skipped if ``NO_CMAKE_INSTALL_PREFIX`` is passed or by setting the
       :variable:`CMAKE_FIND_USE_INSTALL_PREFIX` to ``FALSE``. All these locations
       can be skipped if ``NO_CMAKE_SYSTEM_PATH`` is passed or by setting the
       :variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH` to ``FALSE``.
    
       * |CMAKE_SYSTEM_PREFIX_PATH_XXX|
       * |CMAKE_SYSTEM_XXX_PATH|
       * |CMAKE_SYSTEM_XXX_MAC_PATH|
    
       The platform paths that these variables contain are locations that
       typically include installed software. An example being ``/usr/local`` for
       UNIX based platforms.
    
    7. Search the paths specified by the PATHS option
       or in the short-hand version of the command.
       These are typically hard-coded guesses.
    
    The :variable:`CMAKE_IGNORE_PATH`, :variable:`CMAKE_IGNORE_PREFIX_PATH`,
    :variable:`CMAKE_SYSTEM_IGNORE_PATH` and
    :variable:`CMAKE_SYSTEM_IGNORE_PREFIX_PATH` variables can also cause some
    of the above locations to be ignored.
    
    .. versionadded:: 3.16
      Added ``CMAKE_FIND_USE_<CATEGORY>_PATH`` variables to globally disable
      various search locations.
    
    .. |FIND_ARGS_XXX| replace:: <VAR> NAMES name
    
    On macOS the :variable:`CMAKE_FIND_FRAMEWORK` and
    :variable:`CMAKE_FIND_APPBUNDLE` variables determine the order of
    preference between Apple-style and unix-style package components.
    
    .. include:: FIND_XXX_ROOT.txt
    .. include:: FIND_XXX_ORDER.txt



/P/🚀 command/UNSET_NOTE.txt
=========================================


.. code-block:: 

    .. note::
    
      When evaluating :ref:`Variable References` of the form ``${VAR}``, CMake
      first searches for a normal variable with that name.  If no such normal
      variable exists, CMake will then search for a cache entry with that name.
      Because of this, **unsetting a normal variable can expose a cache variable
      that was previously hidden**.  To force a variable reference of the form
      ``${VAR}`` to return an empty string, use ``set(<variable> "")``, which
      clears the normal variable but leaves it defined.



/P/🚀 command/UNSET_NOTE.txt
=========================================


.. code-block:: 

    .. note::
    
      When evaluating :ref:`Variable References` of the form ``${VAR}``, CMake
      first searches for a normal variable with that name.  If no such normal
      variable exists, CMake will then search for a cache entry with that name.
      Because of this, **unsetting a normal variable can expose a cache variable
      that was previously hidden**.  To force a variable reference of the form
      ``${VAR}`` to return an empty string, use ``set(<variable> "")``, which
      clears the normal variable but leaves it defined.



/P/🚀 command/GENEX_NOTE.txt
=========================================


.. code-block:: 

    .. |more_see_also| replace:: See the :manual:`cmake-buildsystem(7)` manual
       for more on defining buildsystem properties.
    
    Arguments to |command_name| may use generator expressions
    with the syntax ``$<...>``. See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  |more_see_also|



/P/🚀 command/GENEX_NOTE.txt
=========================================


.. code-block:: 

    .. |more_see_also| replace:: See the :manual:`cmake-buildsystem(7)` manual
       for more on defining buildsystem properties.
    
    Arguments to |command_name| may use generator expressions
    with the syntax ``$<...>``. See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  |more_see_also|



/P/🚀 command/OPTIONS_SHELL.txt
============================================


.. code-block:: 

    Option De-duplication
    ^^^^^^^^^^^^^^^^^^^^^
    
    The final set of options used for a target is constructed by
    accumulating options from the current target and the usage requirements of
    its dependencies.  The set of options is de-duplicated to avoid repetition.
    
    .. versionadded:: 3.12
      While beneficial for individual options, the de-duplication step can break
      up option groups.  For example, ``-option A -option B`` becomes
      ``-option A B``.  One may specify a group of options using shell-like
      quoting along with a ``SHELL:`` prefix.  The ``SHELL:`` prefix is dropped,
      and the rest of the option string is parsed using the
      :command:`separate_arguments` ``UNIX_COMMAND`` mode. For example,
      ``"SHELL:-option A" "SHELL:-option B"`` becomes ``-option A -option B``.



/P/🚀 command/GENEX_NOTE.txt
=========================================


.. code-block:: 

    .. |more_see_also| replace:: See the :manual:`cmake-buildsystem(7)` manual
       for more on defining buildsystem properties.
    
    Arguments to |command_name| may use generator expressions
    with the syntax ``$<...>``. See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  |more_see_also|



/P/🚀 command/DEVICE_LINK_OPTIONS.txt
==================================================


.. code-block:: 

    Host And Device Specific Link Options
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    .. versionadded:: 3.18
      When a device link step is involved, which is controlled by
      :prop_tgt:`CUDA_SEPARABLE_COMPILATION` and
      :prop_tgt:`CUDA_RESOLVE_DEVICE_SYMBOLS` properties and policy :policy:`CMP0105`,
      the raw options will be delivered to the host and device link steps (wrapped in
      ``-Xcompiler`` or equivalent for device link). Options wrapped with
      :genex:`$<DEVICE_LINK:...>` generator expression will be used
      only for the device link step. Options wrapped with :genex:`$<HOST_LINK:...>`
      generator expression will be used only for the host link step.



/P/🚀 command/OPTIONS_SHELL.txt
============================================


.. code-block:: 

    Option De-duplication
    ^^^^^^^^^^^^^^^^^^^^^
    
    The final set of options used for a target is constructed by
    accumulating options from the current target and the usage requirements of
    its dependencies.  The set of options is de-duplicated to avoid repetition.
    
    .. versionadded:: 3.12
      While beneficial for individual options, the de-duplication step can break
      up option groups.  For example, ``-option A -option B`` becomes
      ``-option A B``.  One may specify a group of options using shell-like
      quoting along with a ``SHELL:`` prefix.  The ``SHELL:`` prefix is dropped,
      and the rest of the option string is parsed using the
      :command:`separate_arguments` ``UNIX_COMMAND`` mode. For example,
      ``"SHELL:-option A" "SHELL:-option B"`` becomes ``-option A -option B``.



/P/🚀 command/LINK_OPTIONS_LINKER.txt
==================================================


.. code-block:: 

    Handling Compiler Driver Differences
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    To pass options to the linker tool, each compiler driver has its own syntax.
    The ``LINKER:`` prefix and ``,`` separator can be used to specify, in a portable
    way, options to pass to the linker tool. ``LINKER:`` is replaced by the
    appropriate driver option and ``,`` by the appropriate driver separator.
    The driver prefix and driver separator are given by the values of the
    :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG` and
    :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP` variables.
    
    For example, ``"LINKER:-z,defs"`` becomes ``-Xlinker -z -Xlinker defs`` for
    ``Clang`` and ``-Wl,-z,defs`` for ``GNU GCC``.
    
    The ``LINKER:`` prefix can be specified as part of a ``SHELL:`` prefix
    expression.
    
    The ``LINKER:`` prefix supports, as an alternative syntax, specification of
    arguments using the ``SHELL:`` prefix and space as separator. The previous
    example then becomes ``"LINKER:SHELL:-z defs"``.
    
    .. note::
    
      Specifying the ``SHELL:`` prefix anywhere other than at the beginning of the
      ``LINKER:`` prefix is not supported.



/P/🚀 command/SUPPORTED_LANGUAGES.txt
==================================================


.. code-block:: 

    
    Supported languages are ``C``, ``CXX`` (i.e.  C++), ``CSharp`` (i.e.  C#), ``CUDA``,
    ``OBJC`` (i.e. Objective-C), ``OBJCXX`` (i.e. Objective-C++), ``Fortran``, ``HIP``,
    ``ISPC``, ``Swift``, ``ASM``, ``ASM_NASM``, ``ASM_MARMASM``, ``ASM_MASM``, and ``ASM-ATT``.
    
      .. versionadded:: 3.8
        Added ``CSharp`` and ``CUDA`` support.
    
      .. versionadded:: 3.15
        Added ``Swift`` support.
    
      .. versionadded:: 3.16
        Added ``OBJC`` and ``OBJCXX`` support.
    
      .. versionadded:: 3.18
        Added ``ISPC`` support.
    
      .. versionadded:: 3.21
        Added ``HIP`` support.
    
      .. versionadded:: 3.26
        Added ``ASM_MARMASM`` support.
    
    If enabling ``ASM``, list it last so that CMake can check whether
    compilers for other languages like ``C`` work for assembly too.



/P/🚀 command/GENEX_NOTE.txt
=========================================


.. code-block:: 

    .. |more_see_also| replace:: See the :manual:`cmake-buildsystem(7)` manual
       for more on defining buildsystem properties.
    
    Arguments to |command_name| may use generator expressions
    with the syntax ``$<...>``. See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  |more_see_also|



/P/🚀 command/SUPPORTED_LANGUAGES.txt
==================================================


.. code-block:: 

    
    Supported languages are ``C``, ``CXX`` (i.e.  C++), ``CSharp`` (i.e.  C#), ``CUDA``,
    ``OBJC`` (i.e. Objective-C), ``OBJCXX`` (i.e. Objective-C++), ``Fortran``, ``HIP``,
    ``ISPC``, ``Swift``, ``ASM``, ``ASM_NASM``, ``ASM_MARMASM``, ``ASM_MASM``, and ``ASM-ATT``.
    
      .. versionadded:: 3.8
        Added ``CSharp`` and ``CUDA`` support.
    
      .. versionadded:: 3.15
        Added ``Swift`` support.
    
      .. versionadded:: 3.16
        Added ``OBJC`` and ``OBJCXX`` support.
    
      .. versionadded:: 3.18
        Added ``ISPC`` support.
    
      .. versionadded:: 3.21
        Added ``HIP`` support.
    
      .. versionadded:: 3.26
        Added ``ASM_MARMASM`` support.
    
    If enabling ``ASM``, list it last so that CMake can check whether
    compilers for other languages like ``C`` work for assembly too.



/P/🚀 command/GENEX_NOTE.txt
=========================================


.. code-block:: 

    .. |more_see_also| replace:: See the :manual:`cmake-buildsystem(7)` manual
       for more on defining buildsystem properties.
    
    Arguments to |command_name| may use generator expressions
    with the syntax ``$<...>``. See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  |more_see_also|



/P/🚀 command/GENEX_NOTE.txt
=========================================


.. code-block:: 

    .. |more_see_also| replace:: See the :manual:`cmake-buildsystem(7)` manual
       for more on defining buildsystem properties.
    
    Arguments to |command_name| may use generator expressions
    with the syntax ``$<...>``. See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  |more_see_also|



/P/🚀 command/GENEX_NOTE.txt
=========================================


.. code-block:: 

    .. |more_see_also| replace:: See the :manual:`cmake-buildsystem(7)` manual
       for more on defining buildsystem properties.
    
    Arguments to |command_name| may use generator expressions
    with the syntax ``$<...>``. See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  |more_see_also|



/P/🚀 command/OPTIONS_SHELL.txt
============================================


.. code-block:: 

    Option De-duplication
    ^^^^^^^^^^^^^^^^^^^^^
    
    The final set of options used for a target is constructed by
    accumulating options from the current target and the usage requirements of
    its dependencies.  The set of options is de-duplicated to avoid repetition.
    
    .. versionadded:: 3.12
      While beneficial for individual options, the de-duplication step can break
      up option groups.  For example, ``-option A -option B`` becomes
      ``-option A B``.  One may specify a group of options using shell-like
      quoting along with a ``SHELL:`` prefix.  The ``SHELL:`` prefix is dropped,
      and the rest of the option string is parsed using the
      :command:`separate_arguments` ``UNIX_COMMAND`` mode. For example,
      ``"SHELL:-option A" "SHELL:-option B"`` becomes ``-option A -option B``.



/P/🚀 command/GENEX_NOTE.txt
=========================================


.. code-block:: 

    .. |more_see_also| replace:: See the :manual:`cmake-buildsystem(7)` manual
       for more on defining buildsystem properties.
    
    Arguments to |command_name| may use generator expressions
    with the syntax ``$<...>``. See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  |more_see_also|



/P/🚀 include/INTERFACE_INCLUDE_DIRECTORIES_WARNING.txt
====================================================================


.. code-block:: 

    
    Note that it is not advisable to populate the :genex:`INSTALL_INTERFACE` of
    the |INTERFACE_PROPERTY_LINK| of a target with absolute paths to the include
    directories of dependencies.  That would hard-code into installed packages
    the include directory paths for dependencies
    **as found on the machine the package was made on**.
    
    The :genex:`INSTALL_INTERFACE` of the |INTERFACE_PROPERTY_LINK| is only
    suitable for specifying the required include directories for headers
    provided with the target itself, not those provided by the transitive
    dependencies listed in its :prop_tgt:`INTERFACE_LINK_LIBRARIES` target
    property.  Those dependencies should themselves be targets that specify
    their own header locations in |INTERFACE_PROPERTY_LINK|.
    
    See the :ref:`Creating Relocatable Packages` section of the
    :manual:`cmake-packages(7)` manual for discussion of additional care
    that must be taken when specifying usage requirements while creating
    packages for redistribution.



/P/🚀 command/GENEX_NOTE.txt
=========================================


.. code-block:: 

    .. |more_see_also| replace:: See the :manual:`cmake-buildsystem(7)` manual
       for more on defining buildsystem properties.
    
    Arguments to |command_name| may use generator expressions
    with the syntax ``$<...>``. See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  |more_see_also|



/P/🚀 include/INTERFACE_LINK_LIBRARIES_WARNING.txt
===============================================================


.. code-block:: 

    
    Note that it is not advisable to populate the
    |INTERFACE_PROPERTY_LINK| of a target with absolute paths to dependencies.
    That would hard-code into installed packages the library file paths
    for dependencies **as found on the machine the package was made on**.
    
    See the :ref:`Creating Relocatable Packages` section of the
    :manual:`cmake-packages(7)` manual for discussion of additional care
    that must be taken when specifying usage requirements while creating
    packages for redistribution.



/P/🚀 command/GENEX_NOTE.txt
=========================================


.. code-block:: 

    .. |more_see_also| replace:: See the :manual:`cmake-buildsystem(7)` manual
       for more on defining buildsystem properties.
    
    Arguments to |command_name| may use generator expressions
    with the syntax ``$<...>``. See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  |more_see_also|



/P/🚀 command/DEVICE_LINK_OPTIONS.txt
==================================================


.. code-block:: 

    Host And Device Specific Link Options
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    .. versionadded:: 3.18
      When a device link step is involved, which is controlled by
      :prop_tgt:`CUDA_SEPARABLE_COMPILATION` and
      :prop_tgt:`CUDA_RESOLVE_DEVICE_SYMBOLS` properties and policy :policy:`CMP0105`,
      the raw options will be delivered to the host and device link steps (wrapped in
      ``-Xcompiler`` or equivalent for device link). Options wrapped with
      :genex:`$<DEVICE_LINK:...>` generator expression will be used
      only for the device link step. Options wrapped with :genex:`$<HOST_LINK:...>`
      generator expression will be used only for the host link step.



/P/🚀 command/OPTIONS_SHELL.txt
============================================


.. code-block:: 

    Option De-duplication
    ^^^^^^^^^^^^^^^^^^^^^
    
    The final set of options used for a target is constructed by
    accumulating options from the current target and the usage requirements of
    its dependencies.  The set of options is de-duplicated to avoid repetition.
    
    .. versionadded:: 3.12
      While beneficial for individual options, the de-duplication step can break
      up option groups.  For example, ``-option A -option B`` becomes
      ``-option A B``.  One may specify a group of options using shell-like
      quoting along with a ``SHELL:`` prefix.  The ``SHELL:`` prefix is dropped,
      and the rest of the option string is parsed using the
      :command:`separate_arguments` ``UNIX_COMMAND`` mode. For example,
      ``"SHELL:-option A" "SHELL:-option B"`` becomes ``-option A -option B``.



/P/🚀 command/LINK_OPTIONS_LINKER.txt
==================================================


.. code-block:: 

    Handling Compiler Driver Differences
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    To pass options to the linker tool, each compiler driver has its own syntax.
    The ``LINKER:`` prefix and ``,`` separator can be used to specify, in a portable
    way, options to pass to the linker tool. ``LINKER:`` is replaced by the
    appropriate driver option and ``,`` by the appropriate driver separator.
    The driver prefix and driver separator are given by the values of the
    :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG` and
    :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP` variables.
    
    For example, ``"LINKER:-z,defs"`` becomes ``-Xlinker -z -Xlinker defs`` for
    ``Clang`` and ``-Wl,-z,defs`` for ``GNU GCC``.
    
    The ``LINKER:`` prefix can be specified as part of a ``SHELL:`` prefix
    expression.
    
    The ``LINKER:`` prefix supports, as an alternative syntax, specification of
    arguments using the ``SHELL:`` prefix and space as separator. The previous
    example then becomes ``"LINKER:SHELL:-z defs"``.
    
    .. note::
    
      Specifying the ``SHELL:`` prefix anywhere other than at the beginning of the
      ``LINKER:`` prefix is not supported.



/P/🚀 command/GENEX_NOTE.txt
=========================================


.. code-block:: 

    .. |more_see_also| replace:: See the :manual:`cmake-buildsystem(7)` manual
       for more on defining buildsystem properties.
    
    Arguments to |command_name| may use generator expressions
    with the syntax ``$<...>``. See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  |more_see_also|



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/LANG_FLAGS.txt
========================================


.. code-block:: 

    CMake uses this environment variable value, in combination with its own
    builtin default flags for the toolchain, to initialize and store the
    |CMAKE_LANG_FLAGS| cache entry.
    This occurs the first time a build tree is configured for language |LANG|.
    For any configuration run (including the first), the environment variable
    will be ignored if the |CMAKE_LANG_FLAGS| variable is already defined.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/LANG_FLAGS.txt
========================================


.. code-block:: 

    CMake uses this environment variable value, in combination with its own
    builtin default flags for the toolchain, to initialize and store the
    |CMAKE_LANG_FLAGS| cache entry.
    This occurs the first time a build tree is configured for language |LANG|.
    For any configuration run (including the first), the environment variable
    will be ignored if the |CMAKE_LANG_FLAGS| variable is already defined.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/LANG_FLAGS.txt
========================================


.. code-block:: 

    CMake uses this environment variable value, in combination with its own
    builtin default flags for the toolchain, to initialize and store the
    |CMAKE_LANG_FLAGS| cache entry.
    This occurs the first time a build tree is configured for language |LANG|.
    For any configuration run (including the first), the environment variable
    will be ignored if the |CMAKE_LANG_FLAGS| variable is already defined.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/LANG_FLAGS.txt
========================================


.. code-block:: 

    CMake uses this environment variable value, in combination with its own
    builtin default flags for the toolchain, to initialize and store the
    |CMAKE_LANG_FLAGS| cache entry.
    This occurs the first time a build tree is configured for language |LANG|.
    For any configuration run (including the first), the environment variable
    will be ignored if the |CMAKE_LANG_FLAGS| variable is already defined.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/LANG_FLAGS.txt
========================================


.. code-block:: 

    CMake uses this environment variable value, in combination with its own
    builtin default flags for the toolchain, to initialize and store the
    |CMAKE_LANG_FLAGS| cache entry.
    This occurs the first time a build tree is configured for language |LANG|.
    For any configuration run (including the first), the environment variable
    will be ignored if the |CMAKE_LANG_FLAGS| variable is already defined.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/LANG_FLAGS.txt
========================================


.. code-block:: 

    CMake uses this environment variable value, in combination with its own
    builtin default flags for the toolchain, to initialize and store the
    |CMAKE_LANG_FLAGS| cache entry.
    This occurs the first time a build tree is configured for language |LANG|.
    For any configuration run (including the first), the environment variable
    will be ignored if the |CMAKE_LANG_FLAGS| variable is already defined.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/LANG_FLAGS.txt
========================================


.. code-block:: 

    CMake uses this environment variable value, in combination with its own
    builtin default flags for the toolchain, to initialize and store the
    |CMAKE_LANG_FLAGS| cache entry.
    This occurs the first time a build tree is configured for language |LANG|.
    For any configuration run (including the first), the environment variable
    will be ignored if the |CMAKE_LANG_FLAGS| variable is already defined.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/LANG_FLAGS.txt
========================================


.. code-block:: 

    CMake uses this environment variable value, in combination with its own
    builtin default flags for the toolchain, to initialize and store the
    |CMAKE_LANG_FLAGS| cache entry.
    This occurs the first time a build tree is configured for language |LANG|.
    For any configuration run (including the first), the environment variable
    will be ignored if the |CMAKE_LANG_FLAGS| variable is already defined.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/LANG_FLAGS.txt
========================================


.. code-block:: 

    CMake uses this environment variable value, in combination with its own
    builtin default flags for the toolchain, to initialize and store the
    |CMAKE_LANG_FLAGS| cache entry.
    This occurs the first time a build tree is configured for language |LANG|.
    For any configuration run (including the first), the environment variable
    will be ignored if the |CMAKE_LANG_FLAGS| variable is already defined.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 generator/VS_TOOLSET_HOST_ARCH_LEGACY.txt
============================================================


.. code-block:: 

    .. versionadded:: 3.8
      For each toolset that comes with this version of Visual Studio, there are
      variants that are themselves compiled for 32-bit (``x86``) and
      64-bit (``x64``) hosts (independent of the architecture they target).
      |VS_TOOLSET_HOST_ARCH_DEFAULT|
      One may explicitly request use of either the 32-bit or 64-bit host tools
      by adding either ``host=x86`` or ``host=x64`` to the toolset specification.
      See the :variable:`CMAKE_GENERATOR_TOOLSET` variable for details.
    
    .. versionadded:: 3.14
      Added support for ``host=x86`` option.



/P/🚀 generator/VS_TOOLSET_HOST_ARCH_LEGACY.txt
============================================================


.. code-block:: 

    .. versionadded:: 3.8
      For each toolset that comes with this version of Visual Studio, there are
      variants that are themselves compiled for 32-bit (``x86``) and
      64-bit (``x64``) hosts (independent of the architecture they target).
      |VS_TOOLSET_HOST_ARCH_DEFAULT|
      One may explicitly request use of either the 32-bit or 64-bit host tools
      by adding either ``host=x86`` or ``host=x64`` to the toolset specification.
      See the :variable:`CMAKE_GENERATOR_TOOLSET` variable for details.
    
    .. versionadded:: 3.14
      Added support for ``host=x86`` option.



/P/🚀 generator/VS_TOOLSET_HOST_ARCH_LEGACY.txt
============================================================


.. code-block:: 

    .. versionadded:: 3.8
      For each toolset that comes with this version of Visual Studio, there are
      variants that are themselves compiled for 32-bit (``x86``) and
      64-bit (``x64``) hosts (independent of the architecture they target).
      |VS_TOOLSET_HOST_ARCH_DEFAULT|
      One may explicitly request use of either the 32-bit or 64-bit host tools
      by adding either ``host=x86`` or ``host=x64`` to the toolset specification.
      See the :variable:`CMAKE_GENERATOR_TOOLSET` variable for details.
    
    .. versionadded:: 3.14
      Added support for ``host=x86`` option.



/P/🚀 generator/VS_TOOLSET_HOST_ARCH.txt
=====================================================


.. code-block:: 

    For each toolset that comes with this version of Visual Studio, there are
    variants that are themselves compiled for 32-bit (``x86``) and
    64-bit (``x64``) hosts (independent of the architecture they target).
    |VS_TOOLSET_HOST_ARCH_DEFAULT|
    One may explicitly request use of either the 32-bit or 64-bit host tools
    by adding either ``host=x86`` or ``host=x64`` to the toolset specification.
    See the :variable:`CMAKE_GENERATOR_TOOLSET` variable for details.



/P/🚀 generator/VS_TOOLSET_HOST_ARCH.txt
=====================================================


.. code-block:: 

    For each toolset that comes with this version of Visual Studio, there are
    variants that are themselves compiled for 32-bit (``x86``) and
    64-bit (``x64``) hosts (independent of the architecture they target).
    |VS_TOOLSET_HOST_ARCH_DEFAULT|
    One may explicitly request use of either the 32-bit or 64-bit host tools
    by adding either ``host=x86`` or ``host=x64`` to the toolset specification.
    See the :variable:`CMAKE_GENERATOR_TOOLSET` variable for details.



/P/🚀 prop_gbl/CMAKE_LANG_STD_FLAGS.txt
====================================================


.. code-block:: 

    .. note::
    
      If the compiler's default standard level is at least that
      of the requested feature, CMake may omit the ``-std=`` flag.
      The flag may still be added if the compiler's default extensions mode
      does not match the :prop_tgt:`<LANG>_EXTENSIONS` target property,
      or if the :prop_tgt:`<LANG>_STANDARD` target property is set.



/P/🚀 prop_gbl/CMAKE_LANG_STD_FLAGS.txt
====================================================


.. code-block:: 

    .. note::
    
      If the compiler's default standard level is at least that
      of the requested feature, CMake may omit the ``-std=`` flag.
      The flag may still be added if the compiler's default extensions mode
      does not match the :prop_tgt:`<LANG>_EXTENSIONS` target property,
      or if the :prop_tgt:`<LANG>_STANDARD` target property is set.



/P/🚀 prop_gbl/CMAKE_LANG_STD_FLAGS.txt
====================================================


.. code-block:: 

    .. note::
    
      If the compiler's default standard level is at least that
      of the requested feature, CMake may omit the ``-std=`` flag.
      The flag may still be added if the compiler's default extensions mode
      does not match the :prop_tgt:`<LANG>_EXTENSIONS` target property,
      or if the :prop_tgt:`<LANG>_STANDARD` target property is set.



/P/🚀 include/COMPILE_DEFINITIONS_DISCLAIMER.txt
=============================================================


.. code-block:: 

    Disclaimer: Most native build tools have poor support for escaping
    certain values.  CMake has work-arounds for many cases but some values
    may just not be possible to pass correctly.  If a value does not seem
    to be escaped correctly, do not attempt to work-around the problem by
    adding escape sequences to the value.  Your work-around may break in a
    future version of CMake that has improved escape support.  Instead
    consider defining the macro in a (configured) header file.  Then
    report the limitation.  Known limitations include::
    
      #          - broken almost everywhere
      ;          - broken in VS IDE 7.0 and Borland Makefiles
      ,          - broken in VS IDE
      %          - broken in some cases in NMake
      & |        - broken in some cases on MinGW
      ^ < > \"   - broken in most Make tools on Windows
    
    CMake does not reject these values outright because they do work in
    some cases.  Use with caution.



/P/🚀 prop_tgt/XXX_OUTPUT_DIRECTORY.txt
====================================================


.. code-block:: 

    Output directory in which to build |XXX| target files.
    
    This property specifies the directory into which |xxx| target files
    should be built.  The property value may use
    :manual:`generator expressions <cmake-generator-expressions(7)>`.
    Multi-configuration generators (:ref:`Visual Studio <Visual Studio Generators>`,
    :generator:`Xcode`, :generator:`Ninja Multi-Config`) append a
    per-configuration subdirectory to the specified directory unless a generator
    expression is used.
    
    This property is initialized by the value of the
    |CMAKE_XXX_OUTPUT_DIRECTORY| variable if it is set when a target is created.



/P/🚀 prop_tgt/MACOS_IMPORT_FILES.txt
==================================================


.. code-block:: 

    .. note::
    
      On macOS, this property will be ignored for the linker import files (e.g.
      ``.tbd`` files, see :prop_tgt:`ENABLE_EXPORTS` property for details) when:
    
      * The :prop_tgt:`FRAMEWORK` is set, because the framework layout cannot be
        changed.
      * The :generator:`Xcode` generator is used, due to the limitations and
        constraints of the ``Xcode`` tool.
    
      In both cases, the linker import files will be generated |IDEM| as the shared
      library.



/P/🚀 prop_tgt/XXX_OUTPUT_NAME.txt
===============================================


.. code-block:: 

    Output name for |XXX| target files.
    
    This property specifies the base name for |xxx| target files.  It
    overrides :prop_tgt:`OUTPUT_NAME` and :prop_tgt:`OUTPUT_NAME_<CONFIG>`
    properties.



/P/🚀 prop_tgt/MACOS_IMPORT_FILES.txt
==================================================


.. code-block:: 

    .. note::
    
      On macOS, this property will be ignored for the linker import files (e.g.
      ``.tbd`` files, see :prop_tgt:`ENABLE_EXPORTS` property for details) when:
    
      * The :prop_tgt:`FRAMEWORK` is set, because the framework layout cannot be
        changed.
      * The :generator:`Xcode` generator is used, due to the limitations and
        constraints of the ``Xcode`` tool.
    
      In both cases, the linker import files will be generated |IDEM| as the shared
      library.



/P/🚀 include/COMPILE_DEFINITIONS_DISCLAIMER.txt
=============================================================


.. code-block:: 

    Disclaimer: Most native build tools have poor support for escaping
    certain values.  CMake has work-arounds for many cases but some values
    may just not be possible to pass correctly.  If a value does not seem
    to be escaped correctly, do not attempt to work-around the problem by
    adding escape sequences to the value.  Your work-around may break in a
    future version of CMake that has improved escape support.  Instead
    consider defining the macro in a (configured) header file.  Then
    report the limitation.  Known limitations include::
    
      #          - broken almost everywhere
      ;          - broken in VS IDE 7.0 and Borland Makefiles
      ,          - broken in VS IDE
      %          - broken in some cases in NMake
      & |        - broken in some cases on MinGW
      ^ < > \"   - broken in most Make tools on Windows
    
    CMake does not reject these values outright because they do work in
    some cases.  Use with caution.



/P/🚀 command/OPTIONS_SHELL.txt
============================================


.. code-block:: 

    Option De-duplication
    ^^^^^^^^^^^^^^^^^^^^^
    
    The final set of options used for a target is constructed by
    accumulating options from the current target and the usage requirements of
    its dependencies.  The set of options is de-duplicated to avoid repetition.
    
    .. versionadded:: 3.12
      While beneficial for individual options, the de-duplication step can break
      up option groups.  For example, ``-option A -option B`` becomes
      ``-option A B``.  One may specify a group of options using shell-like
      quoting along with a ``SHELL:`` prefix.  The ``SHELL:`` prefix is dropped,
      and the rest of the option string is parsed using the
      :command:`separate_arguments` ``UNIX_COMMAND`` mode. For example,
      ``"SHELL:-option A" "SHELL:-option B"`` becomes ``-option A -option B``.



/P/🚀 prop_tgt/COMPILE_PDB_NOTE.txt
================================================


.. code-block:: 

    .. note::
     The compiler-generated program database files are specified by the
     ``/Fd`` compiler flag and are not the same as linker-generated
     program database files specified by the ``/pdb`` linker flag.
     Use the |PDB_XXX| property to specify the latter.



/P/🚀 prop_tgt/COMPILE_PDB_NOTE.txt
================================================


.. code-block:: 

    .. note::
     The compiler-generated program database files are specified by the
     ``/Fd`` compiler flag and are not the same as linker-generated
     program database files specified by the ``/pdb`` linker flag.
     Use the |PDB_XXX| property to specify the latter.



/P/🚀 prop_tgt/COMPILE_PDB_NOTE.txt
================================================


.. code-block:: 

    .. note::
     The compiler-generated program database files are specified by the
     ``/Fd`` compiler flag and are not the same as linker-generated
     program database files specified by the ``/pdb`` linker flag.
     Use the |PDB_XXX| property to specify the latter.



/P/🚀 prop_tgt/COMPILE_PDB_NOTE.txt
================================================


.. code-block:: 

    .. note::
     The compiler-generated program database files are specified by the
     ``/Fd`` compiler flag and are not the same as linker-generated
     program database files specified by the ``/pdb`` linker flag.
     Use the |PDB_XXX| property to specify the latter.



/P/🚀 prop_tgt/CUDA_RUNTIME_LIBRARY-VALUES.txt
===========================================================


.. code-block:: 

    ``None``
      Link with ``-cudart=none`` or equivalent flag(s) to use no CUDA
      runtime library.
    ``Shared``
      Link with ``-cudart=shared`` or equivalent flag(s) to use a
      dynamically-linked CUDA runtime library.
    ``Static``
      Link with ``-cudart=static`` or equivalent flag(s) to use a
      statically-linked CUDA runtime library.



/P/🚀 command/OPTIONS_SHELL.txt
============================================


.. code-block:: 

    Option De-duplication
    ^^^^^^^^^^^^^^^^^^^^^
    
    The final set of options used for a target is constructed by
    accumulating options from the current target and the usage requirements of
    its dependencies.  The set of options is de-duplicated to avoid repetition.
    
    .. versionadded:: 3.12
      While beneficial for individual options, the de-duplication step can break
      up option groups.  For example, ``-option A -option B`` becomes
      ``-option A B``.  One may specify a group of options using shell-like
      quoting along with a ``SHELL:`` prefix.  The ``SHELL:`` prefix is dropped,
      and the rest of the option string is parsed using the
      :command:`separate_arguments` ``UNIX_COMMAND`` mode. For example,
      ``"SHELL:-option A" "SHELL:-option B"`` becomes ``-option A -option B``.



/P/🚀 prop_tgt/INTERFACE_BUILD_PROPERTY.txt
========================================================


.. code-block:: 

    
    List of public |property_name| requirements for a library.
    
    Targets may populate this property to publish the |property_name|
    required to compile against the headers for the target.  The |command_name|
    command populates this property with values given to the ``PUBLIC`` and
    ``INTERFACE`` keywords.  Projects may also get and set the property directly.
    
    When target dependencies are specified using :command:`target_link_libraries`,
    CMake will read this property from all target dependencies to determine the
    build properties of the consumer.
    
    Contents of |PROPERTY_INTERFACE_NAME| may use "generator expressions"
    with the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  See the :manual:`cmake-buildsystem(7)`
    -manual for more on defining buildsystem properties.



/P/🚀 prop_tgt/INTERFACE_BUILD_PROPERTY.txt
========================================================


.. code-block:: 

    
    List of public |property_name| requirements for a library.
    
    Targets may populate this property to publish the |property_name|
    required to compile against the headers for the target.  The |command_name|
    command populates this property with values given to the ``PUBLIC`` and
    ``INTERFACE`` keywords.  Projects may also get and set the property directly.
    
    When target dependencies are specified using :command:`target_link_libraries`,
    CMake will read this property from all target dependencies to determine the
    build properties of the consumer.
    
    Contents of |PROPERTY_INTERFACE_NAME| may use "generator expressions"
    with the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  See the :manual:`cmake-buildsystem(7)`
    -manual for more on defining buildsystem properties.



/P/🚀 prop_tgt/INTERFACE_BUILD_PROPERTY.txt
========================================================


.. code-block:: 

    
    List of public |property_name| requirements for a library.
    
    Targets may populate this property to publish the |property_name|
    required to compile against the headers for the target.  The |command_name|
    command populates this property with values given to the ``PUBLIC`` and
    ``INTERFACE`` keywords.  Projects may also get and set the property directly.
    
    When target dependencies are specified using :command:`target_link_libraries`,
    CMake will read this property from all target dependencies to determine the
    build properties of the consumer.
    
    Contents of |PROPERTY_INTERFACE_NAME| may use "generator expressions"
    with the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  See the :manual:`cmake-buildsystem(7)`
    -manual for more on defining buildsystem properties.



/P/🚀 prop_tgt/INTERFACE_BUILD_PROPERTY.txt
========================================================


.. code-block:: 

    
    List of public |property_name| requirements for a library.
    
    Targets may populate this property to publish the |property_name|
    required to compile against the headers for the target.  The |command_name|
    command populates this property with values given to the ``PUBLIC`` and
    ``INTERFACE`` keywords.  Projects may also get and set the property directly.
    
    When target dependencies are specified using :command:`target_link_libraries`,
    CMake will read this property from all target dependencies to determine the
    build properties of the consumer.
    
    Contents of |PROPERTY_INTERFACE_NAME| may use "generator expressions"
    with the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  See the :manual:`cmake-buildsystem(7)`
    -manual for more on defining buildsystem properties.



/P/🚀 include/INTERFACE_INCLUDE_DIRECTORIES_WARNING.txt
====================================================================


.. code-block:: 

    
    Note that it is not advisable to populate the :genex:`INSTALL_INTERFACE` of
    the |INTERFACE_PROPERTY_LINK| of a target with absolute paths to the include
    directories of dependencies.  That would hard-code into installed packages
    the include directory paths for dependencies
    **as found on the machine the package was made on**.
    
    The :genex:`INSTALL_INTERFACE` of the |INTERFACE_PROPERTY_LINK| is only
    suitable for specifying the required include directories for headers
    provided with the target itself, not those provided by the transitive
    dependencies listed in its :prop_tgt:`INTERFACE_LINK_LIBRARIES` target
    property.  Those dependencies should themselves be targets that specify
    their own header locations in |INTERFACE_PROPERTY_LINK|.
    
    See the :ref:`Creating Relocatable Packages` section of the
    :manual:`cmake-packages(7)` manual for discussion of additional care
    that must be taken when specifying usage requirements while creating
    packages for redistribution.



/P/🚀 prop_tgt/INTERFACE_BUILD_PROPERTY.txt
========================================================


.. code-block:: 

    
    List of public |property_name| requirements for a library.
    
    Targets may populate this property to publish the |property_name|
    required to compile against the headers for the target.  The |command_name|
    command populates this property with values given to the ``PUBLIC`` and
    ``INTERFACE`` keywords.  Projects may also get and set the property directly.
    
    When target dependencies are specified using :command:`target_link_libraries`,
    CMake will read this property from all target dependencies to determine the
    build properties of the consumer.
    
    Contents of |PROPERTY_INTERFACE_NAME| may use "generator expressions"
    with the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  See the :manual:`cmake-buildsystem(7)`
    -manual for more on defining buildsystem properties.



/P/🚀 prop_tgt/LINK_LIBRARIES_INDIRECTION.txt
==========================================================


.. code-block:: 

    .. note::
      A call to :command:`target_link_libraries(<target> ...)` may update this
      property on ``<target>``.  If ``<target>`` was not created in the same
      directory as the call then :command:`target_link_libraries` will wrap each
      entry with the form ``::@(directory-id);...;::@``, where the ``::@`` is
      literal and the ``(directory-id)`` is unspecified.
      This tells the generators that the named libraries must be looked up in
      the scope of the caller rather than in the scope in which the
      ``<target>`` was created.  Valid directory ids are stripped on export
      by the :command:`install(EXPORT)` and :command:`export` commands.



/P/🚀 include/INTERFACE_LINK_LIBRARIES_WARNING.txt
===============================================================


.. code-block:: 

    
    Note that it is not advisable to populate the
    |INTERFACE_PROPERTY_LINK| of a target with absolute paths to dependencies.
    That would hard-code into installed packages the library file paths
    for dependencies **as found on the machine the package was made on**.
    
    See the :ref:`Creating Relocatable Packages` section of the
    :manual:`cmake-packages(7)` manual for discussion of additional care
    that must be taken when specifying usage requirements while creating
    packages for redistribution.



/P/🚀 prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.txt
===============================================================


.. code-block:: 

    The value of |INTERFACE_PROPERTY_LINK_DIRECT| may use
    :manual:`generator expressions <cmake-generator-expressions(7)>`.
    
    .. note::
    
      The |INTERFACE_PROPERTY_LINK_DIRECT| target property is intended for
      advanced use cases such as injection of static plugins into a consuming
      executable.  It should not be used as a substitute for organizing
      normal calls to :command:`target_link_libraries`.



/P/🚀 prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.txt
===============================================================


.. code-block:: 

    The value of |INTERFACE_PROPERTY_LINK_DIRECT| may use
    :manual:`generator expressions <cmake-generator-expressions(7)>`.
    
    .. note::
    
      The |INTERFACE_PROPERTY_LINK_DIRECT| target property is intended for
      advanced use cases such as injection of static plugins into a consuming
      executable.  It should not be used as a substitute for organizing
      normal calls to :command:`target_link_libraries`.



/P/🚀 prop_tgt/INTERFACE_BUILD_PROPERTY.txt
========================================================


.. code-block:: 

    
    List of public |property_name| requirements for a library.
    
    Targets may populate this property to publish the |property_name|
    required to compile against the headers for the target.  The |command_name|
    command populates this property with values given to the ``PUBLIC`` and
    ``INTERFACE`` keywords.  Projects may also get and set the property directly.
    
    When target dependencies are specified using :command:`target_link_libraries`,
    CMake will read this property from all target dependencies to determine the
    build properties of the consumer.
    
    Contents of |PROPERTY_INTERFACE_NAME| may use "generator expressions"
    with the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  See the :manual:`cmake-buildsystem(7)`
    -manual for more on defining buildsystem properties.



/P/🚀 prop_tgt/XXX_OUTPUT_DIRECTORY.txt
====================================================


.. code-block:: 

    Output directory in which to build |XXX| target files.
    
    This property specifies the directory into which |xxx| target files
    should be built.  The property value may use
    :manual:`generator expressions <cmake-generator-expressions(7)>`.
    Multi-configuration generators (:ref:`Visual Studio <Visual Studio Generators>`,
    :generator:`Xcode`, :generator:`Ninja Multi-Config`) append a
    per-configuration subdirectory to the specified directory unless a generator
    expression is used.
    
    This property is initialized by the value of the
    |CMAKE_XXX_OUTPUT_DIRECTORY| variable if it is set when a target is created.



/P/🚀 prop_tgt/XXX_OUTPUT_NAME.txt
===============================================


.. code-block:: 

    Output name for |XXX| target files.
    
    This property specifies the base name for |xxx| target files.  It
    overrides :prop_tgt:`OUTPUT_NAME` and :prop_tgt:`OUTPUT_NAME_<CONFIG>`
    properties.



/P/🚀 include/INTERFACE_LINK_LIBRARIES_WARNING.txt
===============================================================


.. code-block:: 

    
    Note that it is not advisable to populate the
    |INTERFACE_PROPERTY_LINK| of a target with absolute paths to dependencies.
    That would hard-code into installed packages the library file paths
    for dependencies **as found on the machine the package was made on**.
    
    See the :ref:`Creating Relocatable Packages` section of the
    :manual:`cmake-packages(7)` manual for discussion of additional care
    that must be taken when specifying usage requirements while creating
    packages for redistribution.



/P/🚀 include/INTERFACE_LINK_LIBRARIES_WARNING.txt
===============================================================


.. code-block:: 

    
    Note that it is not advisable to populate the
    |INTERFACE_PROPERTY_LINK| of a target with absolute paths to dependencies.
    That would hard-code into installed packages the library file paths
    for dependencies **as found on the machine the package was made on**.
    
    See the :ref:`Creating Relocatable Packages` section of the
    :manual:`cmake-packages(7)` manual for discussion of additional care
    that must be taken when specifying usage requirements while creating
    packages for redistribution.



/P/🚀 prop_tgt/LINK_LIBRARIES_INDIRECTION.txt
==========================================================


.. code-block:: 

    .. note::
      A call to :command:`target_link_libraries(<target> ...)` may update this
      property on ``<target>``.  If ``<target>`` was not created in the same
      directory as the call then :command:`target_link_libraries` will wrap each
      entry with the form ``::@(directory-id);...;::@``, where the ``::@`` is
      literal and the ``(directory-id)`` is unspecified.
      This tells the generators that the named libraries must be looked up in
      the scope of the caller rather than in the scope in which the
      ``<target>`` was created.  Valid directory ids are stripped on export
      by the :command:`install(EXPORT)` and :command:`export` commands.



/P/🚀 command/DEVICE_LINK_OPTIONS.txt
==================================================


.. code-block:: 

    Host And Device Specific Link Options
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    .. versionadded:: 3.18
      When a device link step is involved, which is controlled by
      :prop_tgt:`CUDA_SEPARABLE_COMPILATION` and
      :prop_tgt:`CUDA_RESOLVE_DEVICE_SYMBOLS` properties and policy :policy:`CMP0105`,
      the raw options will be delivered to the host and device link steps (wrapped in
      ``-Xcompiler`` or equivalent for device link). Options wrapped with
      :genex:`$<DEVICE_LINK:...>` generator expression will be used
      only for the device link step. Options wrapped with :genex:`$<HOST_LINK:...>`
      generator expression will be used only for the host link step.



/P/🚀 command/OPTIONS_SHELL.txt
============================================


.. code-block:: 

    Option De-duplication
    ^^^^^^^^^^^^^^^^^^^^^
    
    The final set of options used for a target is constructed by
    accumulating options from the current target and the usage requirements of
    its dependencies.  The set of options is de-duplicated to avoid repetition.
    
    .. versionadded:: 3.12
      While beneficial for individual options, the de-duplication step can break
      up option groups.  For example, ``-option A -option B`` becomes
      ``-option A B``.  One may specify a group of options using shell-like
      quoting along with a ``SHELL:`` prefix.  The ``SHELL:`` prefix is dropped,
      and the rest of the option string is parsed using the
      :command:`separate_arguments` ``UNIX_COMMAND`` mode. For example,
      ``"SHELL:-option A" "SHELL:-option B"`` becomes ``-option A -option B``.



/P/🚀 command/LINK_OPTIONS_LINKER.txt
==================================================


.. code-block:: 

    Handling Compiler Driver Differences
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    To pass options to the linker tool, each compiler driver has its own syntax.
    The ``LINKER:`` prefix and ``,`` separator can be used to specify, in a portable
    way, options to pass to the linker tool. ``LINKER:`` is replaced by the
    appropriate driver option and ``,`` by the appropriate driver separator.
    The driver prefix and driver separator are given by the values of the
    :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG` and
    :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP` variables.
    
    For example, ``"LINKER:-z,defs"`` becomes ``-Xlinker -z -Xlinker defs`` for
    ``Clang`` and ``-Wl,-z,defs`` for ``GNU GCC``.
    
    The ``LINKER:`` prefix can be specified as part of a ``SHELL:`` prefix
    expression.
    
    The ``LINKER:`` prefix supports, as an alternative syntax, specification of
    arguments using the ``SHELL:`` prefix and space as separator. The previous
    example then becomes ``"LINKER:SHELL:-z defs"``.
    
    .. note::
    
      Specifying the ``SHELL:`` prefix anywhere other than at the beginning of the
      ``LINKER:`` prefix is not supported.



/P/🚀 variable/LINKER_PREDEFINED_TYPES.txt
=======================================================


.. code-block:: 

    Linker types are case-sensitive and may only contain letters, numbers and
    underscores. Linker types defined in all uppercase are reserved for CMake's own
    built-in types. The pre-defined linker types are:
    
    ``DEFAULT``
      This type corresponds to standard linking, essentially equivalent to
      not specifying :prop_tgt:`LINKER_TYPE` target property.
    
    ``SYSTEM``
      Use the standard linker delivered by the platform or the standard toolkit
      (for example, ``SYSTEM`` imply Microsoft linker for all ``MSVC`` compatible
      compilers). This type is supported for the following platforms/compilers:
    
      * Linux, for ``GNU``, ``Clang``, ``LLVMFlang`` and ``NVIDIA`` compilers.
      * All Apple variants for ``AppleClang``, ``Clang`` and ``GNU`` compilers.
      * Windows, for ``MSVC``, ``GNU``, ``Clang`` and ``NVIDIA`` compilers.
    
    ``LLD``
      Use the ``LLVM`` linker. This type is supported for the following
      platforms/compilers:
    
      * Linux, for ``GNU``, ``Clang``, ``LLVMFlang`` and ``NVIDIA`` compilers.
      * All Apple variants for ``Clang`` and ``AppleClang`` compilers.
      * Windows, for ``GNU``, ``Clang`` compilers with ``GNU`` front-end and
        ``CLang``, ``MSVC`` and ``NVIDIA`` compilers with ``MSVC`` front-end.
    
    ``BFD``
      Use the ``GNU`` linker.  This type is supported for the following
      platforms/compilers:
    
      * Linux, for ``GNU``, ``Clang``, ``LLVMFlang`` and ``NVIDIA`` compilers.
      * Windows, for ``GNU``, ``Clang`` compilers with ``GNU`` front-end.
    
    ``GOLD``
      Supported on Linux platform for ``GNU``, ``Clang``, ``LLVMFlang`` and
      ``NVIDIA`` compilers.
    
    ``MOLD``
      Use the `mold linker <https://github.com/rui314/mold>`_. This type is
      supported on the following platforms:
    
      * Linux platform for ``GNU``, ``Clang``, ``LLVMFlang`` and ``NVIDIA``
        compilers.
      * All Apple variants for ``Clang`` and ``AppleClang`` compilers as an
        alias to ``SOLD``.
    
    ``SOLD``
      Use the `sold linker <https://github.com/bluewhalesystems/sold>`_. This type
      is only supported on Apple platforms for ``Clang`` and ``AppleClang``
      compilers.
    
    ``APPLE_CLASSIC``
      Use the Apple linker in the classic behavior (i.e. before ``Xcode 15.0``).
      This type is only supported on Apple platforms for ``GNU``, ``Clang`` and
      ``AppleClang`` compilers.
    
    ``MSVC``
      Use the Microsoft linker. This type is only supported on Windows
      platform for ``MSVC`` and ``Clang`` compiler with ``MSVC`` front-end.



/P/🚀 prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt
====================================================================


.. code-block:: 

    ``Embedded``
      Compile with ``-Z7`` or equivalent flag(s) to produce object files
      with full symbolic debugging information.
    ``ProgramDatabase``
      Compile with ``-Zi`` or equivalent flag(s) to produce a program
      database that contains all the symbolic debugging information.
    ``EditAndContinue``
      Compile with ``-ZI`` or equivalent flag(s) to produce a program
      database that supports the Edit and Continue feature.
    
    The value is ignored on compilers not targeting the MSVC ABI, but an
    unsupported value will be rejected as an error when using a compiler
    targeting the MSVC ABI.
    
    The value may also be the empty string (``""``), in which case no debug
    information format flag will be added explicitly by CMake.



/P/🚀 prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt
===========================================================


.. code-block:: 

    ``MultiThreaded``
      Compile with ``-MT`` or equivalent flag(s) to use a multi-threaded
      statically-linked runtime library.
    ``MultiThreadedDLL``
      Compile with ``-MD`` or equivalent flag(s) to use a multi-threaded
      dynamically-linked runtime library.
    ``MultiThreadedDebug``
      Compile with ``-MTd`` or equivalent flag(s) to use a multi-threaded
      statically-linked runtime library.
    ``MultiThreadedDebugDLL``
      Compile with ``-MDd`` or equivalent flag(s) to use a multi-threaded
      dynamically-linked runtime library.
    
    The value is ignored on compilers not targeting the MSVC ABI, but an
    unsupported value will be rejected as an error when using a compiler
    targeting the MSVC ABI.
    
    The value may also be the empty string (``""``) in which case no runtime
    library selection flag will be added explicitly by CMake.  Note that with
    :ref:`Visual Studio Generators` the native build system may choose to
    add its own default runtime library selection flag.



/P/🚀 prop_tgt/COMPILE_PDB_NOTE.txt
./prop_tgt/PDB_NOTE.txt
==============================================
==============================


.. code-block:: 




/P/🚀 prop_tgt/COMPILE_PDB_NOTE.txt
./prop_tgt/PDB_NOTE.txt
==============================================
==============================


.. code-block:: 




/P/🚀 prop_tgt/COMPILE_PDB_NOTE.txt
./prop_tgt/PDB_NOTE.txt
==============================================
==============================


.. code-block:: 




/P/🚀 prop_tgt/COMPILE_PDB_NOTE.txt
./prop_tgt/PDB_NOTE.txt
==============================================
==============================


.. code-block:: 




/P/🚀 prop_tgt/XXX_OUTPUT_DIRECTORY.txt
====================================================


.. code-block:: 

    Output directory in which to build |XXX| target files.
    
    This property specifies the directory into which |xxx| target files
    should be built.  The property value may use
    :manual:`generator expressions <cmake-generator-expressions(7)>`.
    Multi-configuration generators (:ref:`Visual Studio <Visual Studio Generators>`,
    :generator:`Xcode`, :generator:`Ninja Multi-Config`) append a
    per-configuration subdirectory to the specified directory unless a generator
    expression is used.
    
    This property is initialized by the value of the
    |CMAKE_XXX_OUTPUT_DIRECTORY| variable if it is set when a target is created.



/P/🚀 prop_tgt/XXX_OUTPUT_NAME.txt
===============================================


.. code-block:: 

    Output name for |XXX| target files.
    
    This property specifies the base name for |xxx| target files.  It
    overrides :prop_tgt:`OUTPUT_NAME` and :prop_tgt:`OUTPUT_NAME_<CONFIG>`
    properties.



/P/🚀 prop_tgt/VERSION_SOVERSION_EXAMPLE.txt
=========================================================


.. code-block:: 

    A common convention is to specify both ``VERSION`` and ``SOVERSION``
    such that ``SOVERSION`` matches the first component of ``VERSION``:
    
    .. code-block:: cmake
    
      set_target_properties(mylib PROPERTIES VERSION 1.2.3 SOVERSION 1)
    
    The idea is that breaking changes to the ABI increment both the
    ``SOVERSION`` and the major ``VERSION`` number.



/P/🚀 command/OPTIONS_SHELL.txt
============================================


.. code-block:: 

    Option De-duplication
    ^^^^^^^^^^^^^^^^^^^^^
    
    The final set of options used for a target is constructed by
    accumulating options from the current target and the usage requirements of
    its dependencies.  The set of options is de-duplicated to avoid repetition.
    
    .. versionadded:: 3.12
      While beneficial for individual options, the de-duplication step can break
      up option groups.  For example, ``-option A -option B`` becomes
      ``-option A B``.  One may specify a group of options using shell-like
      quoting along with a ``SHELL:`` prefix.  The ``SHELL:`` prefix is dropped,
      and the rest of the option string is parsed using the
      :command:`separate_arguments` ``UNIX_COMMAND`` mode. For example,
      ``"SHELL:-option A" "SHELL:-option B"`` becomes ``-option A -option B``.



/P/🚀 prop_tgt/Swift_COMPILATION_MODE-VALUES.txt
=============================================================


.. code-block:: 

    ``incremental``
      Compiles each Swift source in the module separately, resulting in better
      parallelism in the build. The compiler emits additional information into
      the build directory improving rebuild performance when small changes are made
      to the source between rebuilds. This is the best option to use while
      iterating on changes in a project.
    
    ``wholemodule``
      Whole-module optimizations are slowest to compile, but results in the most
      optimized library. The entire context is loaded into once instance of the
      compiler, so there is no parallelism across source files in the module.
    
    ``singlefile``
      Compiles each source in a Swift modules separately, resulting in better
      parallelism. Unlike the ``incremental`` build mode, no additional information
      is emitted by the compiler during the build, so rebuilding after making small
      changes to the source file will not run faster. This option should be used
      sparingly, preferring ``incremental`` builds, unless working around a compiler
      bug.



/P/🚀 prop_tgt/VERSION_SOVERSION_EXAMPLE.txt
=========================================================


.. code-block:: 

    A common convention is to specify both ``VERSION`` and ``SOVERSION``
    such that ``SOVERSION`` matches the first component of ``VERSION``:
    
    .. code-block:: cmake
    
      set_target_properties(mylib PROPERTIES VERSION 1.2.3 SOVERSION 1)
    
    The idea is that breaking changes to the ABI increment both the
    ``SOVERSION`` and the major ``VERSION`` number.



/P/🚀 prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt
=============================================================


.. code-block:: 

    ``SingleThreaded``
      Compile without additional flags to use a single-threaded
      statically-linked runtime library.
    ``SingleThreadedDLL``
      Compile with ``-br`` or equivalent flag(s) to use a single-threaded
      dynamically-linked runtime library. This is not available for Linux
      targets.
    ``MultiThreaded``
      Compile with ``-bm`` or equivalent flag(s) to use a multi-threaded
      statically-linked runtime library.
    ``MultiThreadedDLL``
      Compile with ``-bm -br`` or equivalent flag(s) to use a multi-threaded
      dynamically-linked runtime library. This is not available for Linux
      targets.
    
    The value is ignored on non-Watcom compilers but an unsupported value will
    be rejected as an error when using a compiler targeting the Watcom ABI.
    
    The value may also be the empty string (``""``) in which case no runtime
    library selection flag will be added explicitly by CMake.



/P/🚀 include/COMPILE_DEFINITIONS_DISCLAIMER.txt
=============================================================


.. code-block:: 

    Disclaimer: Most native build tools have poor support for escaping
    certain values.  CMake has work-arounds for many cases but some values
    may just not be possible to pass correctly.  If a value does not seem
    to be escaped correctly, do not attempt to work-around the problem by
    adding escape sequences to the value.  Your work-around may break in a
    future version of CMake that has improved escape support.  Instead
    consider defining the macro in a (configured) header file.  Then
    report the limitation.  Known limitations include::
    
      #          - broken almost everywhere
      ;          - broken in VS IDE 7.0 and Borland Makefiles
      ,          - broken in VS IDE
      %          - broken in some cases in NMake
      & |        - broken in some cases on MinGW
      ^ < > \"   - broken in most Make tools on Windows
    
    CMake does not reject these values outright because they do work in
    some cases.  Use with caution.



/P/🚀 manual/ID_RESERVE.txt
========================================


.. code-block:: 

    .. note::
    
      CMake reserves identifiers that:
    
      * begin with ``CMAKE_`` (upper-, lower-, or mixed-case), or
      * begin with ``_CMAKE_`` (upper-, lower-, or mixed-case), or
      * begin with ``_`` followed by the name of any :manual:`CMake Command <cmake-commands(7)>`.



/P/🚀 prop_tgt/Swift_COMPILATION_MODE-VALUES.txt
=============================================================


.. code-block:: 

    ``incremental``
      Compiles each Swift source in the module separately, resulting in better
      parallelism in the build. The compiler emits additional information into
      the build directory improving rebuild performance when small changes are made
      to the source between rebuilds. This is the best option to use while
      iterating on changes in a project.
    
    ``wholemodule``
      Whole-module optimizations are slowest to compile, but results in the most
      optimized library. The entire context is loaded into once instance of the
      compiler, so there is no parallelism across source files in the module.
    
    ``singlefile``
      Compiles each source in a Swift modules separately, resulting in better
      parallelism. Unlike the ``incremental`` build mode, no additional information
      is emitted by the compiler during the build, so rebuilding after making small
      changes to the source file will not run faster. This option should be used
      sparingly, preferring ``incremental`` builds, unless working around a compiler
      bug.



/P/🚀 variable/CMAKE_VS_VERSION_BUILD_NUMBER_COMPONENTS.txt
========================================================================


.. code-block:: 

    The components are:
    
    ``<major>.<minor>``
    
      The VS major and minor version numbers.
      These are the same as the release version numbers.
    
    ``<date>``
    
      A build date in the format ``MMMDD``, where ``MMM`` is a month index
      since an epoch used by Microsoft, and ``DD`` is a day in that month.
    
    ``<build>``
    
      A build index on the day represented by ``<date>``.
    
    The build number is reported by ``vswhere`` as ``installationVersion``.
    For example, VS 16.11.10 has build number ``16.11.32126.315``.



/P/🚀 variable/CMAKE_FIND_ROOT_PATH_MODE_XXX.txt
=============================================================


.. code-block:: 

    This variable controls whether the :variable:`CMAKE_FIND_ROOT_PATH` and
    :variable:`CMAKE_SYSROOT` are used by |FIND_XXX|.
    
    If set to ``ONLY``, then only the roots in :variable:`CMAKE_FIND_ROOT_PATH`
    will be searched. If set to ``NEVER``, then the roots in
    :variable:`CMAKE_FIND_ROOT_PATH` will be ignored and only the host system
    root will be used. If set to ``BOTH``, then the host system paths and the
    paths in :variable:`CMAKE_FIND_ROOT_PATH` will be searched.



/P/🚀 variable/CMAKE_FIND_ROOT_PATH_MODE_XXX.txt
=============================================================


.. code-block:: 

    This variable controls whether the :variable:`CMAKE_FIND_ROOT_PATH` and
    :variable:`CMAKE_SYSROOT` are used by |FIND_XXX|.
    
    If set to ``ONLY``, then only the roots in :variable:`CMAKE_FIND_ROOT_PATH`
    will be searched. If set to ``NEVER``, then the roots in
    :variable:`CMAKE_FIND_ROOT_PATH` will be ignored and only the host system
    root will be used. If set to ``BOTH``, then the host system paths and the
    paths in :variable:`CMAKE_FIND_ROOT_PATH` will be searched.



/P/🚀 variable/CMAKE_FIND_ROOT_PATH_MODE_XXX.txt
=============================================================


.. code-block:: 

    This variable controls whether the :variable:`CMAKE_FIND_ROOT_PATH` and
    :variable:`CMAKE_SYSROOT` are used by |FIND_XXX|.
    
    If set to ``ONLY``, then only the roots in :variable:`CMAKE_FIND_ROOT_PATH`
    will be searched. If set to ``NEVER``, then the roots in
    :variable:`CMAKE_FIND_ROOT_PATH` will be ignored and only the host system
    root will be used. If set to ``BOTH``, then the host system paths and the
    paths in :variable:`CMAKE_FIND_ROOT_PATH` will be searched.



/P/🚀 variable/CMAKE_FIND_ROOT_PATH_MODE_XXX.txt
=============================================================


.. code-block:: 

    This variable controls whether the :variable:`CMAKE_FIND_ROOT_PATH` and
    :variable:`CMAKE_SYSROOT` are used by |FIND_XXX|.
    
    If set to ``ONLY``, then only the roots in :variable:`CMAKE_FIND_ROOT_PATH`
    will be searched. If set to ``NEVER``, then the roots in
    :variable:`CMAKE_FIND_ROOT_PATH` will be ignored and only the host system
    root will be used. If set to ``BOTH``, then the host system paths and the
    paths in :variable:`CMAKE_FIND_ROOT_PATH` will be searched.



/P/🚀 variable/IGNORE_SEARCH_PATH.txt
==================================================


.. code-block:: 

    :ref:`Semicolon-separated list <CMake Language Lists>` of directories
    to be ignored by the various ``find...()`` commands.
    
    For :command:`find_program`, :command:`find_library`, :command:`find_file`,
    and :command:`find_path`, any file found in one of the listed directories
    will be ignored. The listed directories do not apply recursively, so any
    subdirectories to be ignored must also be explicitly listed.
    |CMAKE_IGNORE_VAR| does not affect the search *prefixes* used by these
    four commands. To ignore individual paths under a search prefix
    (e.g. ``bin``, ``include``, ``lib``, etc.), each path must be listed in
    |CMAKE_IGNORE_VAR| as a full absolute path. |CMAKE_IGNORE_PREFIX_VAR|
    provides a more appropriate way to ignore a whole search prefix.
    
    :command:`find_package` is also affected by |CMAKE_IGNORE_VAR|, but only
    for *Config mode* searches. Any ``<Name>Config.cmake`` or
    ``<name>-config.cmake`` file found in one of the specified directories
    will be ignored. In addition, any search *prefix* found in |CMAKE_IGNORE_VAR|
    will be skipped for backward compatibility reasons, but new code should
    prefer to use |CMAKE_IGNORE_PREFIX_VAR| to ignore prefixes instead.



/P/🚀 variable/IGNORE_SEARCH_LOCATIONS.txt
=======================================================


.. code-block:: 

    Ignoring search locations can be useful in cross-compiling environments where
    some system directories contain incompatible but possibly linkable libraries.
    For example, on cross-compiled cluster environments, this allows a user to
    ignore directories containing libraries meant for the front-end machine.



/P/🚀 variable/IGNORE_SEARCH_NONSYSTEM.txt
=======================================================


.. code-block:: 

    By default, |CMAKE_IGNORE_VAR| is empty. It is intended to be set by the
    project or the end user.



/P/🚀 variable/IGNORE_SEARCH_PREFIX.txt
====================================================


.. code-block:: 

    :ref:`Semicolon-separated list <CMake Language Lists>` of search *prefixes*
    to be ignored by the :command:`find_program`, :command:`find_library`,
    :command:`find_file`, and :command:`find_path` commands.
    The prefixes are also ignored by the *Config mode* of the
    :command:`find_package` command (*Module mode* is unaffected).
    To ignore specific directories instead, see |CMAKE_IGNORE_NONPREFIX_VAR|.



/P/🚀 variable/IGNORE_SEARCH_LOCATIONS.txt
=======================================================


.. code-block:: 

    Ignoring search locations can be useful in cross-compiling environments where
    some system directories contain incompatible but possibly linkable libraries.
    For example, on cross-compiled cluster environments, this allows a user to
    ignore directories containing libraries meant for the front-end machine.



/P/🚀 variable/IGNORE_SEARCH_NONSYSTEM.txt
=======================================================


.. code-block:: 

    By default, |CMAKE_IGNORE_VAR| is empty. It is intended to be set by the
    project or the end user.



/P/🚀 variable/IGNORE_SEARCH_PATH.txt
==================================================


.. code-block:: 

    :ref:`Semicolon-separated list <CMake Language Lists>` of directories
    to be ignored by the various ``find...()`` commands.
    
    For :command:`find_program`, :command:`find_library`, :command:`find_file`,
    and :command:`find_path`, any file found in one of the listed directories
    will be ignored. The listed directories do not apply recursively, so any
    subdirectories to be ignored must also be explicitly listed.
    |CMAKE_IGNORE_VAR| does not affect the search *prefixes* used by these
    four commands. To ignore individual paths under a search prefix
    (e.g. ``bin``, ``include``, ``lib``, etc.), each path must be listed in
    |CMAKE_IGNORE_VAR| as a full absolute path. |CMAKE_IGNORE_PREFIX_VAR|
    provides a more appropriate way to ignore a whole search prefix.
    
    :command:`find_package` is also affected by |CMAKE_IGNORE_VAR|, but only
    for *Config mode* searches. Any ``<Name>Config.cmake`` or
    ``<name>-config.cmake`` file found in one of the specified directories
    will be ignored. In addition, any search *prefix* found in |CMAKE_IGNORE_VAR|
    will be skipped for backward compatibility reasons, but new code should
    prefer to use |CMAKE_IGNORE_PREFIX_VAR| to ignore prefixes instead.



/P/🚀 variable/IGNORE_SEARCH_LOCATIONS.txt
=======================================================


.. code-block:: 

    Ignoring search locations can be useful in cross-compiling environments where
    some system directories contain incompatible but possibly linkable libraries.
    For example, on cross-compiled cluster environments, this allows a user to
    ignore directories containing libraries meant for the front-end machine.



/P/🚀 variable/IGNORE_SEARCH_SYSTEM.txt
====================================================


.. code-block:: 

    |CMAKE_IGNORE_VAR| is populated by CMake as part of its platform
    and toolchain setup. Its purpose is to ignore locations containing
    incompatible binaries meant for the host rather than the target platform.
    The project or end user should not modify this variable, they should use
    |CMAKE_IGNORE_NONSYSTEM_VAR| instead.



/P/🚀 variable/IGNORE_SEARCH_PREFIX.txt
====================================================


.. code-block:: 

    :ref:`Semicolon-separated list <CMake Language Lists>` of search *prefixes*
    to be ignored by the :command:`find_program`, :command:`find_library`,
    :command:`find_file`, and :command:`find_path` commands.
    The prefixes are also ignored by the *Config mode* of the
    :command:`find_package` command (*Module mode* is unaffected).
    To ignore specific directories instead, see |CMAKE_IGNORE_NONPREFIX_VAR|.



/P/🚀 variable/IGNORE_SEARCH_LOCATIONS.txt
=======================================================


.. code-block:: 

    Ignoring search locations can be useful in cross-compiling environments where
    some system directories contain incompatible but possibly linkable libraries.
    For example, on cross-compiled cluster environments, this allows a user to
    ignore directories containing libraries meant for the front-end machine.



/P/🚀 variable/IGNORE_SEARCH_SYSTEM.txt
====================================================


.. code-block:: 

    |CMAKE_IGNORE_VAR| is populated by CMake as part of its platform
    and toolchain setup. Its purpose is to ignore locations containing
    incompatible binaries meant for the host rather than the target platform.
    The project or end user should not modify this variable, they should use
    |CMAKE_IGNORE_NONSYSTEM_VAR| instead.



/P/🚀 prop_tgt/CUDA_RUNTIME_LIBRARY-VALUES.txt
===========================================================


.. code-block:: 

    ``None``
      Link with ``-cudart=none`` or equivalent flag(s) to use no CUDA
      runtime library.
    ``Shared``
      Link with ``-cudart=shared`` or equivalent flag(s) to use a
      dynamically-linked CUDA runtime library.
    ``Static``
      Link with ``-cudart=static`` or equivalent flag(s) to use a
      statically-linked CUDA runtime library.



/P/🚀 variable/CMAKE_LINK_GROUP_USING_FEATURE.txt
==============================================================


.. code-block:: 

    Feature names are case-sensitive and may only contain letters, numbers
    and underscores.  Feature names defined in all uppercase are reserved for
    CMake's own built-in features (see `Predefined Features`_ further below).
    
    
    Feature Definitions
    ^^^^^^^^^^^^^^^^^^^
    
    A group feature definition is a list that contains exactly two elements:
    
    ::
    
      <PREFIX> <SUFFIX>
    
    On the linker command line, ``<PREFIX>`` will precede the list of libraries
    in the group and ``<SUFFIX>`` will follow after.
    
    For the elements of this variable, the ``LINKER:`` prefix can be used.
    
    .. include:: ../command/LINK_OPTIONS_LINKER.txt
      :start-line: 3
    
    Examples
    ^^^^^^^^
    
    Solving cross-references between two static libraries
    """""""""""""""""""""""""""""""""""""""""""""""""""""
    
    A project may define two or more static libraries which have circular
    dependencies between them.  In order for the linker to resolve all symbols
    at link time, it may need to search repeatedly among the libraries until no
    new undefined references are created.  Different linkers use different syntax
    for achieving this.  The following example shows how this may be implemented
    for some linkers.  Note that this is for illustration purposes only.
    Projects should use the built-in ``RESCAN`` group feature instead
    (see `Predefined Features`_), which provides a more complete and more robust
    implementation of this functionality.
    
    .. code-block:: cmake
    
      set(CMAKE_C_LINK_GROUP_USING_cross_refs_SUPPORTED TRUE)
      if(CMAKE_C_COMPILER_ID STREQUAL "GNU" AND CMAKE_SYSTEM_NAME STREQUAL "Linux")
        set(CMAKE_C_LINK_GROUP_USING_cross_refs
          "LINKER:--start-group"
          "LINKER:--end-group"
        )
      elseif(CMAKE_C_COMPILER_ID STREQUAL "SunPro" AND CMAKE_SYSTEM_NAME STREQUAL "SunOS")
        set(CMAKE_C_LINK_GROUP_USING_cross_refs
          "LINKER:-z,rescan-start"
          "LINKER:-z,rescan-end"
        )
      else()
        # feature not yet supported for the other environments
        set(CMAKE_C_LINK_GROUP_USING_cross_refs_SUPPORTED FALSE)
      endif()
    
      add_library(lib1 STATIC ...)
      add_library(lib2 SHARED ...)
    
      if(CMAKE_C_LINK_GROUP_USING_cross_refs_SUPPORTED)
        target_link_libraries(lib2 PRIVATE "$<LINK_GROUP:cross_refs,lib1,external>")
      else()
        target_link_libraries(lib2 PRIVATE lib1 external)
      endif()
    
    CMake will generate the following linker command line fragments when linking
    ``lib2``:
    
    * ``GNU``: ``-Wl,--start-group /path/to/lib1.a -lexternal -Wl,--end-group``
    * ``SunPro``: ``-Wl,-z,rescan-start /path/to/lib1.a -lexternal -Wl,-z,rescan-end``
    
    
    Predefined Features
    ^^^^^^^^^^^^^^^^^^^
    
    The following built-in group features are pre-defined by CMake:
    
    .. include:: LINK_GROUP_PREDEFINED_FEATURES.txt



/P/🚀 variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt
================================================================


.. code-block:: 

    Feature names are case-sensitive and may only contain letters, numbers
    and underscores.  Feature names defined in all uppercase are reserved for
    CMake's own built-in features (see `Predefined Features`_ further below).
    
    
    Feature Definitions
    ^^^^^^^^^^^^^^^^^^^
    
    A library feature definition is a list that contains one or three elements:
    
    ::
    
      [<PREFIX>] <LIBRARY_EXPRESSION> [<SUFFIX>]
    
    When ``<PREFIX>`` and ``<SUFFIX>`` are specified, they precede and follow
    respectively the whole list of libraries specified in the
    :genex:`LINK_LIBRARY` expression, not each library item individually.
    There is no guarantee that the list of specified libraries will be kept
    grouped together though, so the ``<PREFIX>`` and ``<SUFFIX>`` may appear
    more than once if the library list is reorganized by CMake to satisfy other
    constraints.  This means constructs like ``--start-group`` and ``--end-group``,
    as supported by the GNU ``ld`` linker, cannot be used in this way.  The
    :genex:`LINK_GROUP` generator expression should be used instead for such
    constructs.
    
    ``<LIBRARY_EXPRESSION>`` is used to specify the pattern for constructing the
    corresponding fragment on the linker command line for each library.
    The following placeholders can be used in the expression:
    
    * ``<LIBRARY>`` is expanded to the full path to the library for CMake targets,
      or to a platform-specific value based on the item otherwise (the same as
      ``<LINK_ITEM>`` on Windows, or the library base name for other platforms).
    * ``<LINK_ITEM>`` is expanded to how the library would normally be linked on
      the linker command line.
    * ``<LIB_ITEM>`` is expanded to the full path to the library for CMake targets,
      or the item itself exactly as specified in the ``<LIBRARY_EXPRESSION>``
      otherwise.
    
    In addition to the above, it is possible to have one pattern for paths
    (CMake targets and external libraries specified with file paths) and another
    for other items specified by name only.  The ``PATH{}`` and ``NAME{}`` wrappers
    can be used to provide the expansion for those two cases, respectively.
    When wrappers are used, both must be present.  For example:
    
    .. code-block:: cmake
    
      set(CMAKE_LINK_LIBRARY_USING_weak_library
          "PATH{-weak_library <LIBRARY>}NAME{LINKER:-weak-l<LIB_ITEM>}"
      )
    
    For all three elements of this variable (``<PREFIX>``, ``<LIBRARY_EXPRESSION>``,
    and ``<SUFFIX>``), the ``LINKER:`` prefix can be used.
    
    .. include:: ../command/LINK_OPTIONS_LINKER.txt
      :start-line: 3
    
    Examples
    ^^^^^^^^
    
    Loading a whole static library
    """"""""""""""""""""""""""""""
    
    A common need is to prevent the linker from discarding any symbols from a
    static library.  Different linkers use different syntax for achieving this.
    The following example shows how this may be implemented for some linkers.
    Note that this is for illustration purposes only.  Projects should use the
    built-in ``WHOLE_ARCHIVE`` feature instead (see `Predefined Features`_), which
    provides a more complete and more robust implementation of this functionality.
    
    .. code-block:: cmake
    
      set(CMAKE_C_LINK_LIBRARY_USING_load_archive_SUPPORTED TRUE)
      if(CMAKE_C_COMPILER_ID STREQUAL "AppleClang")
        set(CMAKE_C_LINK_LIBRARY_USING_load_archive "-force_load <LIB_ITEM>")
      elseif(CMAKE_C_COMPILER_ID STREQUAL "GNU" AND CMAKE_SYSTEM_NAME STREQUAL "Linux")
        set(CMAKE_C_LINK_LIBRARY_USING_load_archive
          "LINKER:--push-state,--whole-archive"
          "<LINK_ITEM>"
          "LINKER:--pop-state"
        )
      elseif(CMAKE_C_COMPILER_ID STREQUAL "MSVC")
        set(CMAKE_C_LINK_LIBRARY_USING_load_archive "/WHOLEARCHIVE:<LIBRARY>")
      else()
        # feature not yet supported for the other environments
        set(CMAKE_C_LINK_LIBRARY_USING_load_archive_SUPPORTED FALSE)
      endif()
    
      add_library(lib1 STATIC ...)
      add_library(lib2 SHARED ...)
    
      if(CMAKE_C_LINK_LIBRARY_USING_load_archive_SUPPORTED)
        # The -force_load Apple linker option requires a file name
        set(external_lib
          "$<IF:$<LINK_LANG_AND_ID:C,AppleClang>,libexternal.a,external>"
        )
        target_link_libraries(lib2 PRIVATE
          "$<LINK_LIBRARY:load_archive,lib1,${external_lib}>"
        )
      else()
        target_link_libraries(lib2 PRIVATE lib1 external)
      endif()
    
    CMake will generate the following link expressions:
    
    * ``AppleClang``: ``-force_load /path/to/lib1.a -force_load libexternal.a``
    * ``GNU``: ``-Wl,--push-state,--whole-archive /path/to/lib1.a -lexternal -Wl,--pop-state``
    * ``MSVC``: ``/WHOLEARCHIVE:/path/to/lib1.lib /WHOLEARCHIVE:external.lib``
    
    Linking a library as weak
    """""""""""""""""""""""""
    
    On macOS, it is possible to link a library in weak mode (the library and all
    references are marked as weak imports).  Different flags must be used for a
    library specified by file path compared to one specified by name.
    This constraint can be solved using ``PATH{}`` and ``NAME{}`` wrappers.
    Again, the following example shows how this may be implemented for some
    linkers, but it is for illustration purposes only.  Projects should use the
    built-in ``WEAK_FRAMEWORK`` or ``WEAK_LIBRARY`` features instead (see
    `Predefined Features`_), which provide more complete and more robust
    implementations of this functionality.
    
    .. code-block:: cmake
    
      if (CMAKE_C_COMPILER_ID STREQUAL "AppleClang")
        set(CMAKE_LINK_LIBRARY_USING_weak_library
            "PATH{-weak_library <LIBRARY>}NAME{LINKER:-weak-l<LIB_ITEM>}"
        )
        set(CMAKE_LINK_LIBRARY_USING_weak_library_SUPPORTED TRUE)
      endif()
    
      add_library(lib SHARED ...)
      add_executable(main ...)
      if(CMAKE_LINK_LIBRARY_USING_weak_library_SUPPORTED)
        target_link_libraries(main PRIVATE "$<LINK_LIBRARY:weak_library,lib,external>")
      else()
        target_link_libraries(main PRIVATE lib external)
      endif()
    
    CMake will generate the following linker command line fragment when linking
    ``main`` using the ``AppleClang`` toolchain:
    
    ``-weak_library /path/to/lib -Xlinker -weak-lexternal``.
    
    
    Predefined Features
    ^^^^^^^^^^^^^^^^^^^
    
    The following built-in library features are pre-defined by CMake:
    
    .. include:: LINK_LIBRARY_PREDEFINED_FEATURES.txt



/P/🚀 variable/CMAKE_LINK_GROUP_USING_FEATURE.txt
==============================================================


.. code-block:: 

    Feature names are case-sensitive and may only contain letters, numbers
    and underscores.  Feature names defined in all uppercase are reserved for
    CMake's own built-in features (see `Predefined Features`_ further below).
    
    
    Feature Definitions
    ^^^^^^^^^^^^^^^^^^^
    
    A group feature definition is a list that contains exactly two elements:
    
    ::
    
      <PREFIX> <SUFFIX>
    
    On the linker command line, ``<PREFIX>`` will precede the list of libraries
    in the group and ``<SUFFIX>`` will follow after.
    
    For the elements of this variable, the ``LINKER:`` prefix can be used.
    
    .. include:: ../command/LINK_OPTIONS_LINKER.txt
      :start-line: 3
    
    Examples
    ^^^^^^^^
    
    Solving cross-references between two static libraries
    """""""""""""""""""""""""""""""""""""""""""""""""""""
    
    A project may define two or more static libraries which have circular
    dependencies between them.  In order for the linker to resolve all symbols
    at link time, it may need to search repeatedly among the libraries until no
    new undefined references are created.  Different linkers use different syntax
    for achieving this.  The following example shows how this may be implemented
    for some linkers.  Note that this is for illustration purposes only.
    Projects should use the built-in ``RESCAN`` group feature instead
    (see `Predefined Features`_), which provides a more complete and more robust
    implementation of this functionality.
    
    .. code-block:: cmake
    
      set(CMAKE_C_LINK_GROUP_USING_cross_refs_SUPPORTED TRUE)
      if(CMAKE_C_COMPILER_ID STREQUAL "GNU" AND CMAKE_SYSTEM_NAME STREQUAL "Linux")
        set(CMAKE_C_LINK_GROUP_USING_cross_refs
          "LINKER:--start-group"
          "LINKER:--end-group"
        )
      elseif(CMAKE_C_COMPILER_ID STREQUAL "SunPro" AND CMAKE_SYSTEM_NAME STREQUAL "SunOS")
        set(CMAKE_C_LINK_GROUP_USING_cross_refs
          "LINKER:-z,rescan-start"
          "LINKER:-z,rescan-end"
        )
      else()
        # feature not yet supported for the other environments
        set(CMAKE_C_LINK_GROUP_USING_cross_refs_SUPPORTED FALSE)
      endif()
    
      add_library(lib1 STATIC ...)
      add_library(lib2 SHARED ...)
    
      if(CMAKE_C_LINK_GROUP_USING_cross_refs_SUPPORTED)
        target_link_libraries(lib2 PRIVATE "$<LINK_GROUP:cross_refs,lib1,external>")
      else()
        target_link_libraries(lib2 PRIVATE lib1 external)
      endif()
    
    CMake will generate the following linker command line fragments when linking
    ``lib2``:
    
    * ``GNU``: ``-Wl,--start-group /path/to/lib1.a -lexternal -Wl,--end-group``
    * ``SunPro``: ``-Wl,-z,rescan-start /path/to/lib1.a -lexternal -Wl,-z,rescan-end``
    
    
    Predefined Features
    ^^^^^^^^^^^^^^^^^^^
    
    The following built-in group features are pre-defined by CMake:
    
    .. include:: LINK_GROUP_PREDEFINED_FEATURES.txt



/P/🚀 variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt
================================================================


.. code-block:: 

    Feature names are case-sensitive and may only contain letters, numbers
    and underscores.  Feature names defined in all uppercase are reserved for
    CMake's own built-in features (see `Predefined Features`_ further below).
    
    
    Feature Definitions
    ^^^^^^^^^^^^^^^^^^^
    
    A library feature definition is a list that contains one or three elements:
    
    ::
    
      [<PREFIX>] <LIBRARY_EXPRESSION> [<SUFFIX>]
    
    When ``<PREFIX>`` and ``<SUFFIX>`` are specified, they precede and follow
    respectively the whole list of libraries specified in the
    :genex:`LINK_LIBRARY` expression, not each library item individually.
    There is no guarantee that the list of specified libraries will be kept
    grouped together though, so the ``<PREFIX>`` and ``<SUFFIX>`` may appear
    more than once if the library list is reorganized by CMake to satisfy other
    constraints.  This means constructs like ``--start-group`` and ``--end-group``,
    as supported by the GNU ``ld`` linker, cannot be used in this way.  The
    :genex:`LINK_GROUP` generator expression should be used instead for such
    constructs.
    
    ``<LIBRARY_EXPRESSION>`` is used to specify the pattern for constructing the
    corresponding fragment on the linker command line for each library.
    The following placeholders can be used in the expression:
    
    * ``<LIBRARY>`` is expanded to the full path to the library for CMake targets,
      or to a platform-specific value based on the item otherwise (the same as
      ``<LINK_ITEM>`` on Windows, or the library base name for other platforms).
    * ``<LINK_ITEM>`` is expanded to how the library would normally be linked on
      the linker command line.
    * ``<LIB_ITEM>`` is expanded to the full path to the library for CMake targets,
      or the item itself exactly as specified in the ``<LIBRARY_EXPRESSION>``
      otherwise.
    
    In addition to the above, it is possible to have one pattern for paths
    (CMake targets and external libraries specified with file paths) and another
    for other items specified by name only.  The ``PATH{}`` and ``NAME{}`` wrappers
    can be used to provide the expansion for those two cases, respectively.
    When wrappers are used, both must be present.  For example:
    
    .. code-block:: cmake
    
      set(CMAKE_LINK_LIBRARY_USING_weak_library
          "PATH{-weak_library <LIBRARY>}NAME{LINKER:-weak-l<LIB_ITEM>}"
      )
    
    For all three elements of this variable (``<PREFIX>``, ``<LIBRARY_EXPRESSION>``,
    and ``<SUFFIX>``), the ``LINKER:`` prefix can be used.
    
    .. include:: ../command/LINK_OPTIONS_LINKER.txt
      :start-line: 3
    
    Examples
    ^^^^^^^^
    
    Loading a whole static library
    """"""""""""""""""""""""""""""
    
    A common need is to prevent the linker from discarding any symbols from a
    static library.  Different linkers use different syntax for achieving this.
    The following example shows how this may be implemented for some linkers.
    Note that this is for illustration purposes only.  Projects should use the
    built-in ``WHOLE_ARCHIVE`` feature instead (see `Predefined Features`_), which
    provides a more complete and more robust implementation of this functionality.
    
    .. code-block:: cmake
    
      set(CMAKE_C_LINK_LIBRARY_USING_load_archive_SUPPORTED TRUE)
      if(CMAKE_C_COMPILER_ID STREQUAL "AppleClang")
        set(CMAKE_C_LINK_LIBRARY_USING_load_archive "-force_load <LIB_ITEM>")
      elseif(CMAKE_C_COMPILER_ID STREQUAL "GNU" AND CMAKE_SYSTEM_NAME STREQUAL "Linux")
        set(CMAKE_C_LINK_LIBRARY_USING_load_archive
          "LINKER:--push-state,--whole-archive"
          "<LINK_ITEM>"
          "LINKER:--pop-state"
        )
      elseif(CMAKE_C_COMPILER_ID STREQUAL "MSVC")
        set(CMAKE_C_LINK_LIBRARY_USING_load_archive "/WHOLEARCHIVE:<LIBRARY>")
      else()
        # feature not yet supported for the other environments
        set(CMAKE_C_LINK_LIBRARY_USING_load_archive_SUPPORTED FALSE)
      endif()
    
      add_library(lib1 STATIC ...)
      add_library(lib2 SHARED ...)
    
      if(CMAKE_C_LINK_LIBRARY_USING_load_archive_SUPPORTED)
        # The -force_load Apple linker option requires a file name
        set(external_lib
          "$<IF:$<LINK_LANG_AND_ID:C,AppleClang>,libexternal.a,external>"
        )
        target_link_libraries(lib2 PRIVATE
          "$<LINK_LIBRARY:load_archive,lib1,${external_lib}>"
        )
      else()
        target_link_libraries(lib2 PRIVATE lib1 external)
      endif()
    
    CMake will generate the following link expressions:
    
    * ``AppleClang``: ``-force_load /path/to/lib1.a -force_load libexternal.a``
    * ``GNU``: ``-Wl,--push-state,--whole-archive /path/to/lib1.a -lexternal -Wl,--pop-state``
    * ``MSVC``: ``/WHOLEARCHIVE:/path/to/lib1.lib /WHOLEARCHIVE:external.lib``
    
    Linking a library as weak
    """""""""""""""""""""""""
    
    On macOS, it is possible to link a library in weak mode (the library and all
    references are marked as weak imports).  Different flags must be used for a
    library specified by file path compared to one specified by name.
    This constraint can be solved using ``PATH{}`` and ``NAME{}`` wrappers.
    Again, the following example shows how this may be implemented for some
    linkers, but it is for illustration purposes only.  Projects should use the
    built-in ``WEAK_FRAMEWORK`` or ``WEAK_LIBRARY`` features instead (see
    `Predefined Features`_), which provide more complete and more robust
    implementations of this functionality.
    
    .. code-block:: cmake
    
      if (CMAKE_C_COMPILER_ID STREQUAL "AppleClang")
        set(CMAKE_LINK_LIBRARY_USING_weak_library
            "PATH{-weak_library <LIBRARY>}NAME{LINKER:-weak-l<LIB_ITEM>}"
        )
        set(CMAKE_LINK_LIBRARY_USING_weak_library_SUPPORTED TRUE)
      endif()
    
      add_library(lib SHARED ...)
      add_executable(main ...)
      if(CMAKE_LINK_LIBRARY_USING_weak_library_SUPPORTED)
        target_link_libraries(main PRIVATE "$<LINK_LIBRARY:weak_library,lib,external>")
      else()
        target_link_libraries(main PRIVATE lib external)
      endif()
    
    CMake will generate the following linker command line fragment when linking
    ``main`` using the ``AppleClang`` toolchain:
    
    ``-weak_library /path/to/lib -Xlinker -weak-lexternal``.
    
    
    Predefined Features
    ^^^^^^^^^^^^^^^^^^^
    
    The following built-in library features are pre-defined by CMake:
    
    .. include:: LINK_LIBRARY_PREDEFINED_FEATURES.txt



/P/🚀 variable/LINKER_PREDEFINED_TYPES.txt
=======================================================


.. code-block:: 

    Linker types are case-sensitive and may only contain letters, numbers and
    underscores. Linker types defined in all uppercase are reserved for CMake's own
    built-in types. The pre-defined linker types are:
    
    ``DEFAULT``
      This type corresponds to standard linking, essentially equivalent to
      not specifying :prop_tgt:`LINKER_TYPE` target property.
    
    ``SYSTEM``
      Use the standard linker delivered by the platform or the standard toolkit
      (for example, ``SYSTEM`` imply Microsoft linker for all ``MSVC`` compatible
      compilers). This type is supported for the following platforms/compilers:
    
      * Linux, for ``GNU``, ``Clang``, ``LLVMFlang`` and ``NVIDIA`` compilers.
      * All Apple variants for ``AppleClang``, ``Clang`` and ``GNU`` compilers.
      * Windows, for ``MSVC``, ``GNU``, ``Clang`` and ``NVIDIA`` compilers.
    
    ``LLD``
      Use the ``LLVM`` linker. This type is supported for the following
      platforms/compilers:
    
      * Linux, for ``GNU``, ``Clang``, ``LLVMFlang`` and ``NVIDIA`` compilers.
      * All Apple variants for ``Clang`` and ``AppleClang`` compilers.
      * Windows, for ``GNU``, ``Clang`` compilers with ``GNU`` front-end and
        ``CLang``, ``MSVC`` and ``NVIDIA`` compilers with ``MSVC`` front-end.
    
    ``BFD``
      Use the ``GNU`` linker.  This type is supported for the following
      platforms/compilers:
    
      * Linux, for ``GNU``, ``Clang``, ``LLVMFlang`` and ``NVIDIA`` compilers.
      * Windows, for ``GNU``, ``Clang`` compilers with ``GNU`` front-end.
    
    ``GOLD``
      Supported on Linux platform for ``GNU``, ``Clang``, ``LLVMFlang`` and
      ``NVIDIA`` compilers.
    
    ``MOLD``
      Use the `mold linker <https://github.com/rui314/mold>`_. This type is
      supported on the following platforms:
    
      * Linux platform for ``GNU``, ``Clang``, ``LLVMFlang`` and ``NVIDIA``
        compilers.
      * All Apple variants for ``Clang`` and ``AppleClang`` compilers as an
        alias to ``SOLD``.
    
    ``SOLD``
      Use the `sold linker <https://github.com/bluewhalesystems/sold>`_. This type
      is only supported on Apple platforms for ``Clang`` and ``AppleClang``
      compilers.
    
    ``APPLE_CLASSIC``
      Use the Apple linker in the classic behavior (i.e. before ``Xcode 15.0``).
      This type is only supported on Apple platforms for ``GNU``, ``Clang`` and
      ``AppleClang`` compilers.
    
    ``MSVC``
      Use the Microsoft linker. This type is only supported on Windows
      platform for ``MSVC`` and ``Clang`` compiler with ``MSVC`` front-end.



/P/🚀 prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt
====================================================================


.. code-block:: 

    ``Embedded``
      Compile with ``-Z7`` or equivalent flag(s) to produce object files
      with full symbolic debugging information.
    ``ProgramDatabase``
      Compile with ``-Zi`` or equivalent flag(s) to produce a program
      database that contains all the symbolic debugging information.
    ``EditAndContinue``
      Compile with ``-ZI`` or equivalent flag(s) to produce a program
      database that supports the Edit and Continue feature.
    
    The value is ignored on compilers not targeting the MSVC ABI, but an
    unsupported value will be rejected as an error when using a compiler
    targeting the MSVC ABI.
    
    The value may also be the empty string (``""``), in which case no debug
    information format flag will be added explicitly by CMake.



/P/🚀 prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt
===========================================================


.. code-block:: 

    ``MultiThreaded``
      Compile with ``-MT`` or equivalent flag(s) to use a multi-threaded
      statically-linked runtime library.
    ``MultiThreadedDLL``
      Compile with ``-MD`` or equivalent flag(s) to use a multi-threaded
      dynamically-linked runtime library.
    ``MultiThreadedDebug``
      Compile with ``-MTd`` or equivalent flag(s) to use a multi-threaded
      statically-linked runtime library.
    ``MultiThreadedDebugDLL``
      Compile with ``-MDd`` or equivalent flag(s) to use a multi-threaded
      dynamically-linked runtime library.
    
    The value is ignored on compilers not targeting the MSVC ABI, but an
    unsupported value will be rejected as an error when using a compiler
    targeting the MSVC ABI.
    
    The value may also be the empty string (``""``) in which case no runtime
    library selection flag will be added explicitly by CMake.  Note that with
    :ref:`Visual Studio Generators` the native build system may choose to
    add its own default runtime library selection flag.



/P/🚀 variable/CMAKE_OSX_VARIABLE.txt
==================================================


.. code-block:: 

    The value of this variable should be set prior to the first
    :command:`project` or :command:`enable_language` command invocation
    because it may influence configuration of the toolchain and flags.
    It is intended to be set locally by the user creating a build tree.
    This variable should be set as a ``CACHE`` entry (or else CMake may
    remove it while initializing a cache entry of the same name) unless
    policy :policy:`CMP0126` is set to ``NEW``.
    
    Despite the ``OSX`` part in the variable name(s) they apply also to
    other SDKs than macOS like iOS, tvOS, visionOS, or watchOS.
    
    This variable is ignored on platforms other than Apple.



/P/🚀 variable/CMAKE_OSX_VARIABLE.txt
==================================================


.. code-block:: 

    The value of this variable should be set prior to the first
    :command:`project` or :command:`enable_language` command invocation
    because it may influence configuration of the toolchain and flags.
    It is intended to be set locally by the user creating a build tree.
    This variable should be set as a ``CACHE`` entry (or else CMake may
    remove it while initializing a cache entry of the same name) unless
    policy :policy:`CMP0126` is set to ``NEW``.
    
    Despite the ``OSX`` part in the variable name(s) they apply also to
    other SDKs than macOS like iOS, tvOS, visionOS, or watchOS.
    
    This variable is ignored on platforms other than Apple.



/P/🚀 variable/CMAKE_OSX_VARIABLE.txt
==================================================


.. code-block:: 

    The value of this variable should be set prior to the first
    :command:`project` or :command:`enable_language` command invocation
    because it may influence configuration of the toolchain and flags.
    It is intended to be set locally by the user creating a build tree.
    This variable should be set as a ``CACHE`` entry (or else CMake may
    remove it while initializing a cache entry of the same name) unless
    policy :policy:`CMP0126` is set to ``NEW``.
    
    Despite the ``OSX`` part in the variable name(s) they apply also to
    other SDKs than macOS like iOS, tvOS, visionOS, or watchOS.
    
    This variable is ignored on platforms other than Apple.



/P/🚀 prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt
=============================================================


.. code-block:: 

    ``SingleThreaded``
      Compile without additional flags to use a single-threaded
      statically-linked runtime library.
    ``SingleThreadedDLL``
      Compile with ``-br`` or equivalent flag(s) to use a single-threaded
      dynamically-linked runtime library. This is not available for Linux
      targets.
    ``MultiThreaded``
      Compile with ``-bm`` or equivalent flag(s) to use a multi-threaded
      statically-linked runtime library.
    ``MultiThreadedDLL``
      Compile with ``-bm -br`` or equivalent flag(s) to use a multi-threaded
      dynamically-linked runtime library. This is not available for Linux
      targets.
    
    The value is ignored on non-Watcom compilers but an unsupported value will
    be rejected as an error when using a compiler targeting the Watcom ABI.
    
    The value may also be the empty string (``""``) in which case no runtime
    library selection flag will be added explicitly by CMake.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 manual/CTEST_EXAMPLE_MAKEFILE_JOB_SERVER.make
================================================================


.. code-block:: 

    test:
        +ctest -j 8



/P/🚀 manual/presets/example.json
==============================================


.. code-block:: 

    {
      "version": 6,
      "cmakeMinimumRequired": {
        "major": 3,
        "minor": 23,
        "patch": 0
      },
      "include": [
        "otherThings.json",
        "moreThings.json"
      ],
      "configurePresets": [
        {
          "name": "default",
          "displayName": "Default Config",
          "description": "Default build using Ninja generator",
          "generator": "Ninja",
          "binaryDir": "${sourceDir}/build/default",
          "cacheVariables": {
            "FIRST_CACHE_VARIABLE": {
              "type": "BOOL",
              "value": "OFF"
            },
            "SECOND_CACHE_VARIABLE": "ON"
          },
          "environment": {
            "MY_ENVIRONMENT_VARIABLE": "Test",
            "PATH": "$env{HOME}/ninja/bin:$penv{PATH}"
          },
          "vendor": {
            "example.com/ExampleIDE/1.0": {
              "autoFormat": true
            }
          }
        },
        {
          "name": "ninja-multi",
          "inherits": "default",
          "displayName": "Ninja Multi-Config",
          "description": "Default build using Ninja Multi-Config generator",
          "generator": "Ninja Multi-Config"
        },
        {
          "name": "windows-only",
          "inherits": "default",
          "displayName": "Windows-only configuration",
          "description": "This build is only available on Windows",
          "condition": {
            "type": "equals",
            "lhs": "${hostSystemName}",
            "rhs": "Windows"
          }
        }
      ],
      "buildPresets": [
        {
          "name": "default",
          "configurePreset": "default"
        }
      ],
      "testPresets": [
        {
          "name": "default",
          "configurePreset": "default",
          "output": {"outputOnFailure": true},
          "execution": {"noTestsAction": "error", "stopOnFailure": true}
        }
      ],
      "packagePresets": [
        {
          "name": "default",
          "configurePreset": "default",
          "generators": [
            "TGZ"
          ]
        }
      ],
      "workflowPresets": [
        {
          "name": "default",
          "steps": [
            {
              "type": "configure",
              "name": "default"
            },
            {
              "type": "build",
              "name": "default"
            },
            {
              "type": "test",
              "name": "default"
            },
            {
              "type": "package",
              "name": "default"
            }
          ]
        }
      ],
      "vendor": {
        "example.com/ExampleIDE/1.0": {
          "autoFormat": false
        }
      }
    }





/P/🚀 command/DEPRECATED_POLICY_VERSIONS.txt
=========================================================


.. code-block:: 

    .. versionchanged:: 3.27
    
      Compatibility with versions of CMake older than 3.5 is deprecated.
      Calls to :command:`cmake_minimum_required(VERSION)` or
      :command:`cmake_policy(VERSION)` that do not specify at least
      3.5 as their policy version (optionally via ``...<max>``)
      will produce a deprecation warning in CMake 3.27 and above.
    
    .. versionchanged:: 3.19
    
      Compatibility with versions of CMake older than 2.8.12 is deprecated.
      Calls to :command:`cmake_minimum_required(VERSION)` or
      :command:`cmake_policy(VERSION)` that do not specify at least
      2.8.12 as their policy version (optionally via ``...<max>``)
      will produce a deprecation warning in CMake 3.19 and above.



/P/🚀 command/DEVICE_LINK_OPTIONS.txt
==================================================


.. code-block:: 

    Host And Device Specific Link Options
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    .. versionadded:: 3.18
      When a device link step is involved, which is controlled by
      :prop_tgt:`CUDA_SEPARABLE_COMPILATION` and
      :prop_tgt:`CUDA_RESOLVE_DEVICE_SYMBOLS` properties and policy :policy:`CMP0105`,
      the raw options will be delivered to the host and device link steps (wrapped in
      ``-Xcompiler`` or equivalent for device link). Options wrapped with
      :genex:`$<DEVICE_LINK:...>` generator expression will be used
      only for the device link step. Options wrapped with :genex:`$<HOST_LINK:...>`
      generator expression will be used only for the host link step.



/P/🚀 command/FIND_XXX.txt
=======================================


.. code-block:: 

    A short-hand signature is:
    
    .. parsed-literal::
    
       |FIND_XXX| (<VAR> name1 [path1 path2 ...])
    
    The general signature is:
    
    .. parsed-literal::
    
       |FIND_XXX| (
                 <VAR>
                 name | |NAMES|
                 [HINTS [path | ENV var]... ]
                 [PATHS [path | ENV var]... ]
                 [REGISTRY_VIEW (64|32|64_32|32_64|HOST|TARGET|BOTH)]
                 [PATH_SUFFIXES suffix1 [suffix2 ...]]
                 [VALIDATOR function]
                 [DOC "cache documentation string"]
                 [NO_CACHE]
                 [REQUIRED]
                 [NO_DEFAULT_PATH]
                 [NO_PACKAGE_ROOT_PATH]
                 [NO_CMAKE_PATH]
                 [NO_CMAKE_ENVIRONMENT_PATH]
                 [NO_SYSTEM_ENVIRONMENT_PATH]
                 [NO_CMAKE_SYSTEM_PATH]
                 [NO_CMAKE_INSTALL_PREFIX]
                 [CMAKE_FIND_ROOT_PATH_BOTH |
                  ONLY_CMAKE_FIND_ROOT_PATH |
                  NO_CMAKE_FIND_ROOT_PATH]
                )
    
    This command is used to find a |SEARCH_XXX_DESC|.
    A cache entry, or a normal variable if ``NO_CACHE`` is specified,
    named by ``<VAR>`` is created to store the result of this command.
    If the |SEARCH_XXX| is found the result is stored in the variable
    and the search will not be repeated unless the variable is cleared.
    If nothing is found, the result will be ``<VAR>-NOTFOUND``.
    
    Options include:
    
    ``NAMES``
      Specify one or more possible names for the |SEARCH_XXX|.
    
      When using this to specify names with and without a version
      suffix, we recommend specifying the unversioned name first
      so that locally-built packages can be found before those
      provided by distributions.
    
    ``HINTS``, ``PATHS``
      Specify directories to search in addition to the default locations.
      The ``ENV var`` sub-option reads paths from a system environment
      variable.
    
      .. versionchanged:: 3.24
        On ``Windows`` platform, it is possible to include registry queries as part
        of the directories, using a :ref:`dedicated syntax <Find Using Windows Registry>`.
        Such specifications will be ignored on all other platforms.
    
    ``REGISTRY_VIEW``
      .. versionadded:: 3.24
    
      .. include:: FIND_XXX_REGISTRY_VIEW.txt
    
    ``PATH_SUFFIXES``
      Specify additional subdirectories to check below each directory
      location otherwise considered.
    
    ``VALIDATOR``
      .. versionadded:: 3.25
    
      Specify a :command:`function` to be called for each candidate item found
      (a :command:`macro` cannot be provided, that will result in an error).
      Two arguments will be passed to the validator function: the name of a
      result variable, and the absolute path to the candidate item.  The item
      will be accepted and the search will end unless the function sets the
      value in the result variable to false in the calling scope.  The result
      variable will hold a true value when the validator function is entered.
    
      .. parsed-literal::
    
         function(my_check validator_result_var item)
           if(NOT item MATCHES ...)
             set(${validator_result_var} FALSE PARENT_SCOPE)
           endif()
         endfunction()
    
         |FIND_XXX| (result NAMES ... VALIDATOR my_check)
    
      Note that if a cached result is used, the search is skipped and any
      ``VALIDATOR`` is ignored.  The cached result is not required to pass the
      validation function.
    
    ``DOC``
      Specify the documentation string for the ``<VAR>`` cache entry.
    
    ``NO_CACHE``
      .. versionadded:: 3.21
    
      The result of the search will be stored in a normal variable rather than
      a cache entry.
    
      .. note::
    
        If the variable is already set before the call (as a normal or cache
        variable) then the search will not occur.
    
      .. warning::
    
        This option should be used with caution because it can greatly increase
        the cost of repeated configure steps.
    
    ``REQUIRED``
      .. versionadded:: 3.18
    
      Stop processing with an error message if nothing is found, otherwise
      the search will be attempted again the next time |FIND_XXX| is invoked
      with the same variable.
    
    If ``NO_DEFAULT_PATH`` is specified, then no additional paths are
    added to the search.
    If ``NO_DEFAULT_PATH`` is not specified, the search process is as follows:
    
    .. |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in the
       :variable:`<PackageName>_ROOT` CMake variable and the
       :envvar:`<PackageName>_ROOT` environment variable if
       called from within a find module loaded by
       :command:`find_package(<PackageName>)`
    
    .. |CMAKE_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in :variable:`CMAKE_PREFIX_PATH`
    
    .. |ENV_CMAKE_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in :envvar:`CMAKE_PREFIX_PATH`
    
    .. |SYSTEM_ENVIRONMENT_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>/[s]bin`` in ``PATH``, and
       |entry_XXX_SUBDIR| for other entries in ``PATH``
    
    .. |CMAKE_SYSTEM_PREFIX_PATH_XXX_SUBDIR| replace::
       |prefix_XXX_SUBDIR| for each ``<prefix>`` in
       :variable:`CMAKE_SYSTEM_PREFIX_PATH`
    
    1. If called from within a find module or any other script loaded by a call to
       :command:`find_package(<PackageName>)`, search prefixes unique to the
       current package being found.  See policy :policy:`CMP0074`.
    
       .. versionadded:: 3.12
    
       Specifically, search paths specified by the following variables, in order:
    
       a. :variable:`<PackageName>_ROOT` CMake variable,
          where ``<PackageName>`` is the case-preserved package name.
    
       b. :variable:`<PACKAGENAME>_ROOT` CMake variable,
          where ``<PACKAGENAME>`` is the upper-cased package name.
          See policy :policy:`CMP0144`.
    
          .. versionadded:: 3.27
    
       c. :envvar:`<PackageName>_ROOT` environment variable,
          where ``<PackageName>`` is the case-preserved package name.
    
       d. :envvar:`<PACKAGENAME>_ROOT` environment variable,
          where ``<PACKAGENAME>`` is the upper-cased package name.
          See policy :policy:`CMP0144`.
    
          .. versionadded:: 3.27
    
       The package root variables are maintained as a stack, so if called from
       nested find modules or config packages, root paths from the parent's find
       module or config package will be searched after paths from the current
       module or package.  In other words, the search order would be
       ``<CurrentPackage>_ROOT``, ``ENV{<CurrentPackage>_ROOT}``,
       ``<ParentPackage>_ROOT``, ``ENV{<ParentPackage>_ROOT}``, etc.
       This can be skipped if ``NO_PACKAGE_ROOT_PATH`` is passed or by setting
       the :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` to ``FALSE``.
    
       * |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX|
    
    2. Search paths specified in cmake-specific cache variables.
       These are intended to be used on the command line with a ``-DVAR=value``.
       The values are interpreted as :ref:`semicolon-separated lists <CMake Language Lists>`.
       This can be skipped if ``NO_CMAKE_PATH`` is passed or by setting the
       :variable:`CMAKE_FIND_USE_CMAKE_PATH` to ``FALSE``.
    
       * |CMAKE_PREFIX_PATH_XXX|
       * |CMAKE_XXX_PATH|
       * |CMAKE_XXX_MAC_PATH|
    
    3. Search paths specified in cmake-specific environment variables.
       These are intended to be set in the user's shell configuration,
       and therefore use the host's native path separator
       (``;`` on Windows and ``:`` on UNIX).
       This can be skipped if ``NO_CMAKE_ENVIRONMENT_PATH`` is passed or
       by setting the :variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH` to ``FALSE``.
    
       * |ENV_CMAKE_PREFIX_PATH_XXX|
       * |ENV_CMAKE_XXX_PATH|
       * |ENV_CMAKE_XXX_MAC_PATH|
    
    4. Search the paths specified by the ``HINTS`` option.
       These should be paths computed by system introspection, such as a
       hint provided by the location of another item already found.
       Hard-coded guesses should be specified with the ``PATHS`` option.
    
    5. Search the standard system environment variables.
       This can be skipped if ``NO_SYSTEM_ENVIRONMENT_PATH`` is passed or by
       setting the :variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH` to ``FALSE``.
    
       * |SYSTEM_ENVIRONMENT_PATH_XXX|
    
       |SYSTEM_ENVIRONMENT_PATH_WINDOWS_XXX|
    
    6. Search cmake variables defined in the Platform files
       for the current system.  The searching of ``CMAKE_INSTALL_PREFIX`` and
       ``CMAKE_STAGING_PREFIX`` can be
       skipped if ``NO_CMAKE_INSTALL_PREFIX`` is passed or by setting the
       :variable:`CMAKE_FIND_USE_INSTALL_PREFIX` to ``FALSE``. All these locations
       can be skipped if ``NO_CMAKE_SYSTEM_PATH`` is passed or by setting the
       :variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH` to ``FALSE``.
    
       * |CMAKE_SYSTEM_PREFIX_PATH_XXX|
       * |CMAKE_SYSTEM_XXX_PATH|
       * |CMAKE_SYSTEM_XXX_MAC_PATH|
    
       The platform paths that these variables contain are locations that
       typically include installed software. An example being ``/usr/local`` for
       UNIX based platforms.
    
    7. Search the paths specified by the PATHS option
       or in the short-hand version of the command.
       These are typically hard-coded guesses.
    
    The :variable:`CMAKE_IGNORE_PATH`, :variable:`CMAKE_IGNORE_PREFIX_PATH`,
    :variable:`CMAKE_SYSTEM_IGNORE_PATH` and
    :variable:`CMAKE_SYSTEM_IGNORE_PREFIX_PATH` variables can also cause some
    of the above locations to be ignored.
    
    .. versionadded:: 3.16
      Added ``CMAKE_FIND_USE_<CATEGORY>_PATH`` variables to globally disable
      various search locations.
    
    .. |FIND_ARGS_XXX| replace:: <VAR> NAMES name
    
    On macOS the :variable:`CMAKE_FIND_FRAMEWORK` and
    :variable:`CMAKE_FIND_APPBUNDLE` variables determine the order of
    preference between Apple-style and unix-style package components.
    
    .. include:: FIND_XXX_ROOT.txt
    .. include:: FIND_XXX_ORDER.txt



/P/🚀 command/FIND_XXX_ORDER.txt
=============================================


.. code-block:: 

    The default search order is designed to be most-specific to
    least-specific for common use cases.
    Projects may override the order by simply calling the command
    multiple times and using the ``NO_*`` options:
    
    .. parsed-literal::
    
       |FIND_XXX| (|FIND_ARGS_XXX| PATHS paths... NO_DEFAULT_PATH)
       |FIND_XXX| (|FIND_ARGS_XXX|)
    
    Once one of the calls succeeds the result variable will be set
    and stored in the cache so that no call will search again.



/P/🚀 command/FIND_XXX_REGISTRY_VIEW.txt
=====================================================


.. code-block:: 

    Specify which registry views must be queried. This option is only meaningful
    on ``Windows`` platforms and will be ignored on other ones. When not
    specified, the |FIND_XXX_REGISTRY_VIEW_DEFAULT| view is used when the
    :policy:`CMP0134` policy is ``NEW``. Refer to :policy:`CMP0134` for the
    default view when the policy is ``OLD``.
    
    ``64``
      Query the 64-bit registry. On 32-bit Windows, it always returns the string
      ``/REGISTRY-NOTFOUND``.
    
    ``32``
      Query the 32-bit registry.
    
    ``64_32``
      Query both views (``64`` and ``32``) and generate a path for each.
    
    ``32_64``
      Query both views (``32`` and ``64``) and generate a path for each.
    
    ``HOST``
      Query the registry matching the architecture of the host: ``64`` on 64-bit
      Windows and ``32`` on 32-bit Windows.
    
    ``TARGET``
      Query the registry matching the architecture specified by the
      :variable:`CMAKE_SIZEOF_VOID_P` variable. If not defined, fall back to
      ``HOST`` view.
    
    ``BOTH``
      Query both views (``32`` and ``64``). The order depends on the following
      rules: If the :variable:`CMAKE_SIZEOF_VOID_P` variable is defined, use the
      following view depending on the content of this variable:
    
      * ``8``: ``64_32``
      * ``4``: ``32_64``
    
      If the :variable:`CMAKE_SIZEOF_VOID_P` variable is not defined, rely on the
      architecture of the host:
    
      * 64-bit: ``64_32``
      * 32-bit: ``32``



/P/🚀 command/FIND_XXX_ROOT.txt
============================================


.. code-block:: 

    The CMake variable :variable:`CMAKE_FIND_ROOT_PATH` specifies one or more
    directories to be prepended to all other search directories.  This
    effectively "re-roots" the entire search under given locations.
    Paths which are descendants of the :variable:`CMAKE_STAGING_PREFIX` are excluded
    from this re-rooting, because that variable is always a path on the host system.
    By default the :variable:`CMAKE_FIND_ROOT_PATH` is empty.
    
    The :variable:`CMAKE_SYSROOT` variable can also be used to specify exactly one
    directory to use as a prefix.  Setting :variable:`CMAKE_SYSROOT` also has other
    effects.  See the documentation for that variable for more.
    
    These variables are especially useful when cross-compiling to
    point to the root directory of the target environment and CMake will
    search there too.  By default at first the directories listed in
    :variable:`CMAKE_FIND_ROOT_PATH` are searched, then the :variable:`CMAKE_SYSROOT`
    directory is searched, and then the non-rooted directories will be
    searched.  The default behavior can be adjusted by setting
    |CMAKE_FIND_ROOT_PATH_MODE_XXX|.  This behavior can be manually
    overridden on a per-call basis using options:
    
    ``CMAKE_FIND_ROOT_PATH_BOTH``
      Search in the order described above.
    
    ``NO_CMAKE_FIND_ROOT_PATH``
      Do not use the :variable:`CMAKE_FIND_ROOT_PATH` variable.
    
    ``ONLY_CMAKE_FIND_ROOT_PATH``
      Search only the re-rooted directories and directories below
      :variable:`CMAKE_STAGING_PREFIX`.



/P/🚀 command/GENEX_NOTE.txt
=========================================


.. code-block:: 

    .. |more_see_also| replace:: See the :manual:`cmake-buildsystem(7)` manual
       for more on defining buildsystem properties.
    
    Arguments to |command_name| may use generator expressions
    with the syntax ``$<...>``. See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  |more_see_also|



/P/🚀 command/LINK_OPTIONS_LINKER.txt
==================================================


.. code-block:: 

    Handling Compiler Driver Differences
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    To pass options to the linker tool, each compiler driver has its own syntax.
    The ``LINKER:`` prefix and ``,`` separator can be used to specify, in a portable
    way, options to pass to the linker tool. ``LINKER:`` is replaced by the
    appropriate driver option and ``,`` by the appropriate driver separator.
    The driver prefix and driver separator are given by the values of the
    :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG` and
    :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP` variables.
    
    For example, ``"LINKER:-z,defs"`` becomes ``-Xlinker -z -Xlinker defs`` for
    ``Clang`` and ``-Wl,-z,defs`` for ``GNU GCC``.
    
    The ``LINKER:`` prefix can be specified as part of a ``SHELL:`` prefix
    expression.
    
    The ``LINKER:`` prefix supports, as an alternative syntax, specification of
    arguments using the ``SHELL:`` prefix and space as separator. The previous
    example then becomes ``"LINKER:SHELL:-z defs"``.
    
    .. note::
    
      Specifying the ``SHELL:`` prefix anywhere other than at the beginning of the
      ``LINKER:`` prefix is not supported.



/P/🚀 command/OPTIONS_SHELL.txt
============================================


.. code-block:: 

    Option De-duplication
    ^^^^^^^^^^^^^^^^^^^^^
    
    The final set of options used for a target is constructed by
    accumulating options from the current target and the usage requirements of
    its dependencies.  The set of options is de-duplicated to avoid repetition.
    
    .. versionadded:: 3.12
      While beneficial for individual options, the de-duplication step can break
      up option groups.  For example, ``-option A -option B`` becomes
      ``-option A B``.  One may specify a group of options using shell-like
      quoting along with a ``SHELL:`` prefix.  The ``SHELL:`` prefix is dropped,
      and the rest of the option string is parsed using the
      :command:`separate_arguments` ``UNIX_COMMAND`` mode. For example,
      ``"SHELL:-option A" "SHELL:-option B"`` becomes ``-option A -option B``.



/P/🚀 command/SUPPORTED_LANGUAGES.txt
==================================================


.. code-block:: 

    
    Supported languages are ``C``, ``CXX`` (i.e.  C++), ``CSharp`` (i.e.  C#), ``CUDA``,
    ``OBJC`` (i.e. Objective-C), ``OBJCXX`` (i.e. Objective-C++), ``Fortran``, ``HIP``,
    ``ISPC``, ``Swift``, ``ASM``, ``ASM_NASM``, ``ASM_MARMASM``, ``ASM_MASM``, and ``ASM-ATT``.
    
      .. versionadded:: 3.8
        Added ``CSharp`` and ``CUDA`` support.
    
      .. versionadded:: 3.15
        Added ``Swift`` support.
    
      .. versionadded:: 3.16
        Added ``OBJC`` and ``OBJCXX`` support.
    
      .. versionadded:: 3.18
        Added ``ISPC`` support.
    
      .. versionadded:: 3.21
        Added ``HIP`` support.
    
      .. versionadded:: 3.26
        Added ``ASM_MARMASM`` support.
    
    If enabling ``ASM``, list it last so that CMake can check whether
    compilers for other languages like ``C`` work for assembly too.



/P/🚀 command/UNSET_NOTE.txt
=========================================


.. code-block:: 

    .. note::
    
      When evaluating :ref:`Variable References` of the form ``${VAR}``, CMake
      first searches for a normal variable with that name.  If no such normal
      variable exists, CMake will then search for a cache entry with that name.
      Because of this, **unsetting a normal variable can expose a cache variable
      that was previously hidden**.  To force a variable reference of the form
      ``${VAR}`` to return an empty string, use ``set(<variable> "")``, which
      clears the normal variable but leaves it defined.



/P/🚀 envvar/ENV_VAR.txt
=====================================


.. code-block:: 

    This is a CMake :ref:`Environment Variable <CMake Language
    Environment Variables>`. Its initial value is taken from
    the calling process environment.



/P/🚀 envvar/LANG_FLAGS.txt
========================================


.. code-block:: 

    CMake uses this environment variable value, in combination with its own
    builtin default flags for the toolchain, to initialize and store the
    |CMAKE_LANG_FLAGS| cache entry.
    This occurs the first time a build tree is configured for language |LANG|.
    For any configuration run (including the first), the environment variable
    will be ignored if the |CMAKE_LANG_FLAGS| variable is already defined.



/P/🚀 generator/VS_TOOLSET_HOST_ARCH.txt
=====================================================


.. code-block:: 

    For each toolset that comes with this version of Visual Studio, there are
    variants that are themselves compiled for 32-bit (``x86``) and
    64-bit (``x64``) hosts (independent of the architecture they target).
    |VS_TOOLSET_HOST_ARCH_DEFAULT|
    One may explicitly request use of either the 32-bit or 64-bit host tools
    by adding either ``host=x86`` or ``host=x64`` to the toolset specification.
    See the :variable:`CMAKE_GENERATOR_TOOLSET` variable for details.



/P/🚀 generator/VS_TOOLSET_HOST_ARCH_LEGACY.txt
============================================================


.. code-block:: 

    .. versionadded:: 3.8
      For each toolset that comes with this version of Visual Studio, there are
      variants that are themselves compiled for 32-bit (``x86``) and
      64-bit (``x64``) hosts (independent of the architecture they target).
      |VS_TOOLSET_HOST_ARCH_DEFAULT|
      One may explicitly request use of either the 32-bit or 64-bit host tools
      by adding either ``host=x86`` or ``host=x64`` to the toolset specification.
      See the :variable:`CMAKE_GENERATOR_TOOLSET` variable for details.
    
    .. versionadded:: 3.14
      Added support for ``host=x86`` option.



/P/🚀 guide/importing-exporting/Downstream/CMakeLists.txt
======================================================================


.. code-block:: 

    cmake_minimum_required(VERSION 3.15)
    project(Downstream)
    
    # specify the C++ standard
    set(CMAKE_CXX_STANDARD 11)
    set(CMAKE_CXX_STANDARD_REQUIRED True)
    
    # find MathFunctions
    find_package(MathFunctions 3.4.1 EXACT)
    
    # create executable
    add_executable(myexe main.cc)
    
    # use MathFunctions library
    target_link_libraries(myexe PRIVATE MathFunctions::MathFunctions)



/P/🚀 guide/importing-exporting/Downstream/main.cc
===============================================================


.. code-block:: 

    // A simple program that outputs the square root of a number
    #include <iostream>
    #include <string>
    
    #include "MathFunctions.h"
    
    int main(int argc, char* argv[])
    {
      if (argc < 2) {
        std::cout << "Usage: " << argv[0] << " number" << std::endl;
        return 1;
      }
    
      // convert input to double
      const double inputValue = std::stod(argv[1]);
    
      // calculate square root
      const double sqrt = MathFunctions::sqrt(inputValue);
      std::cout << "The square root of " << inputValue << " is " << sqrt
                << std::endl;
    
      return 0;
    }



/P/🚀 guide/importing-exporting/DownstreamComponents/CMakeLists.txt
================================================================================


.. code-block:: 

    cmake_minimum_required(VERSION 3.15)
    project(DownstreamComponents)
    
    # specify the C++ standard
    set(CMAKE_CXX_STANDARD 11)
    set(CMAKE_CXX_STANDARD_REQUIRED True)
    
    # find MathFunctions
    find_package(MathFunctions 3.4 COMPONENTS Addition SquareRoot)
    
    # create executable
    add_executable(myexe main.cc)
    
    # use MathFunctions library
    target_link_libraries(myexe PRIVATE MathFunctions::Addition MathFunctions::SquareRoot)
    
    # Workaround for GCC on AIX to avoid -isystem, not needed in general.
    set_property(TARGET myexe PROPERTY NO_SYSTEM_FROM_IMPORTED 1)



/P/🚀 guide/importing-exporting/DownstreamComponents/main.cc
=========================================================================


.. code-block:: 

    // A simple program that outputs the square root of a number
    #include <iostream>
    #include <string>
    
    #include "Addition.h"
    #include "SquareRoot.h"
    
    int main(int argc, char* argv[])
    {
      if (argc < 2) {
        std::cout << "Usage: " << argv[0] << " number" << std::endl;
        return 1;
      }
    
      // convert input to double
      const double inputValue = std::stod(argv[1]);
    
      // calculate square root
      const double sqrt = MathFunctions::sqrt(inputValue);
      std::cout << "The square root of " << inputValue << " is " << sqrt
                << std::endl;
    
      // calculate sum
      const double sum = MathFunctions::add(inputValue, inputValue);
      std::cout << inputValue << " + " << inputValue << " = " << sum << std::endl;
    
      return 0;
    }



/P/🚀 guide/importing-exporting/Importing/CMakeLists.txt
=====================================================================


.. code-block:: 

    cmake_minimum_required(VERSION 3.15)
    project(Importing)
    
    # specify the C++ standard
    set(CMAKE_CXX_STANDARD 11)
    set(CMAKE_CXX_STANDARD_REQUIRED True)
    
    # Add executable
    add_executable(myexe IMPORTED)
    
    # Set imported location
    set_property(TARGET myexe PROPERTY
                 IMPORTED_LOCATION "../InstallMyExe/bin/myexe")
    
    # Add custom command to create source file
    add_custom_command(OUTPUT main.cc COMMAND myexe)
    
    # Use source file
    add_executable(mynewexe main.cc)



/P/🚀 guide/importing-exporting/MathFunctions/CMakeLists.txt
=========================================================================


.. code-block:: 

    cmake_minimum_required(VERSION 3.15)
    project(MathFunctions)
    
    # make cache variables for install destinations
    include(GNUInstallDirs)
    
    # specify the C++ standard
    set(CMAKE_CXX_STANDARD 11)
    set(CMAKE_CXX_STANDARD_REQUIRED True)
    
    # create library
    add_library(MathFunctions STATIC MathFunctions.cxx)
    
    # add include directories
    target_include_directories(MathFunctions
                               PUBLIC
                               "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>"
                               "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>"
    )
    
    # install the target and create export-set
    install(TARGETS MathFunctions
            EXPORT MathFunctionsTargets
            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
            INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    )
    
    # install header file
    install(FILES MathFunctions.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
    
    # generate and install export file
    install(EXPORT MathFunctionsTargets
            FILE MathFunctionsTargets.cmake
            NAMESPACE MathFunctions::
            DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/MathFunctions
    )
    
    # include CMakePackageConfigHelpers macro
    include(CMakePackageConfigHelpers)
    
    # set version
    set(version 3.4.1)
    
    set_property(TARGET MathFunctions PROPERTY VERSION ${version})
    set_property(TARGET MathFunctions PROPERTY SOVERSION 3)
    set_property(TARGET MathFunctions PROPERTY
      INTERFACE_MathFunctions_MAJOR_VERSION 3)
    set_property(TARGET MathFunctions APPEND PROPERTY
      COMPATIBLE_INTERFACE_STRING MathFunctions_MAJOR_VERSION
    )
    
    # generate the version file for the config file
    write_basic_package_version_file(
      "${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsConfigVersion.cmake"
      VERSION "${version}"
      COMPATIBILITY AnyNewerVersion
    )
    
    # create config file
    configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in
      "${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsConfig.cmake"
      INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/MathFunctions
    )
    
    # install config files
    install(FILES
              "${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsConfig.cmake"
              "${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsConfigVersion.cmake"
            DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/MathFunctions
    )
    
    # generate the export targets for the build tree
    export(EXPORT MathFunctionsTargets
           FILE "${CMAKE_CURRENT_BINARY_DIR}/cmake/MathFunctionsTargets.cmake"
           NAMESPACE MathFunctions::
    )



/P/🚀 guide/importing-exporting/MathFunctions/Config.cmake.in
==========================================================================


.. code-block:: 

    @PACKAGE_INIT@
    
    include("${CMAKE_CURRENT_LIST_DIR}/MathFunctionsTargets.cmake")
    
    check_required_components(MathFunctions)



/P/🚀 guide/importing-exporting/MathFunctions/MathFunctions.cxx
============================================================================


.. code-block:: 

    #include "MathFunctions.h"
    
    #include <cmath>
    
    namespace MathFunctions {
    double sqrt(double x)
    {
      return std::sqrt(x);
    }
    }



/P/🚀 guide/importing-exporting/MathFunctions/MathFunctions.h
==========================================================================


.. code-block:: 

    #pragma once
    
    namespace MathFunctions {
    double sqrt(double x);
    }



/P/🚀 guide/importing-exporting/MathFunctionsComponents/Addition/Addition.cxx
==========================================================================================


.. code-block:: 

    #include "Addition.h"
    
    namespace MathFunctions {
    double add(double x, double y)
    {
      return x + y;
    }
    }



/P/🚀 guide/importing-exporting/MathFunctionsComponents/Addition/Addition.h
========================================================================================


.. code-block:: 

    #pragma once
    
    namespace MathFunctions {
    double add(double x, double y);
    }



/P/🚀 guide/importing-exporting/MathFunctionsComponents/Addition/CMakeLists.txt
============================================================================================


.. code-block:: 

    # create library
    add_library(Addition STATIC Addition.cxx)
    
    add_library(MathFunctions::Addition ALIAS Addition)
    
    # add include directories
    target_include_directories(Addition
                               PUBLIC
                               "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>"
                               $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
    )
    
    # install the target and create export-set
    install(TARGETS Addition
            EXPORT AdditionTargets
            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
            INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    )
    
    # install header file
    install(FILES Addition.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
    
    # generate and install export file
    install(EXPORT AdditionTargets
            FILE MathFunctionsAdditionTargets.cmake
            NAMESPACE MathFunctions::
            DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/MathFunctions
    )



/P/🚀 guide/importing-exporting/MathFunctionsComponents/CMakeLists.txt
===================================================================================


.. code-block:: 

    cmake_minimum_required(VERSION 3.15)
    project(MathFunctionsComponents)
    
    # make cache variables for install destinations
    include(GNUInstallDirs)
    
    # specify the C++ standard
    set(CMAKE_CXX_STANDARD 11)
    set(CMAKE_CXX_STANDARD_REQUIRED True)
    
    add_subdirectory(Addition)
    add_subdirectory(SquareRoot)
    
    # include CMakePackageConfigHelpers macro
    include(CMakePackageConfigHelpers)
    
    # set version
    set(version 3.4.1)
    
    # generate the version file for the config file
    write_basic_package_version_file(
      "${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsConfigVersion.cmake"
      VERSION "${version}"
      COMPATIBILITY AnyNewerVersion
    )
    
    # create config file
    configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in
      "${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsConfig.cmake"
      INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/MathFunctions
      NO_CHECK_REQUIRED_COMPONENTS_MACRO
    )
    
    # install config files
    install(FILES
              "${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsConfig.cmake"
              "${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsConfigVersion.cmake"
            DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/MathFunctions
    )



/P/🚀 guide/importing-exporting/MathFunctionsComponents/Config.cmake.in
====================================================================================


.. code-block:: 

    @PACKAGE_INIT@
    
    set(_MathFunctions_supported_components Addition SquareRoot)
    
    foreach(_comp ${MathFunctions_FIND_COMPONENTS})
      if (NOT _comp IN_LIST _MathFunctions_supported_components)
        set(MathFunctions_FOUND False)
        set(MathFunctions_NOT_FOUND_MESSAGE "Unsupported component: ${_comp}")
      endif()
      include("${CMAKE_CURRENT_LIST_DIR}/MathFunctions${_comp}Targets.cmake")
    endforeach()



/P/🚀 guide/importing-exporting/MathFunctionsComponents/MathFunctions.cxx
======================================================================================


.. code-block:: 

    #include "MathFunctions.h"
    
    #include <cmath>
    
    namespace MathFunctions {
    double sqrt(double x)
    {
      return std::sqrt(x);
    }
    }



/P/🚀 guide/importing-exporting/MathFunctionsComponents/MathFunctions.h
====================================================================================


.. code-block:: 

    #pragma once
    
    namespace MathFunctions {
    double sqrt(double x);
    }



/P/🚀 guide/importing-exporting/MathFunctionsComponents/SquareRoot/CMakeLists.txt
==============================================================================================


.. code-block:: 

    # create library
    add_library(SquareRoot STATIC SquareRoot.cxx)
    
    add_library(MathFunctions::SquareRoot ALIAS SquareRoot)
    
    # add include directories
    target_include_directories(SquareRoot
                               PUBLIC
                               "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>"
                               "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>"
    )
    
    # install the target and create export-set
    install(TARGETS SquareRoot
            EXPORT SquareRootTargets
            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
            INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    )
    
    # install header file
    install(FILES SquareRoot.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
    
    # generate and install export file
    install(EXPORT SquareRootTargets
            FILE MathFunctionsSquareRootTargets.cmake
            NAMESPACE MathFunctions::
            DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/MathFunctions
    )



/P/🚀 guide/importing-exporting/MathFunctionsComponents/SquareRoot/SquareRoot.cxx
==============================================================================================


.. code-block:: 

    #include "SquareRoot.h"
    
    #include <cmath>
    
    namespace MathFunctions {
    double sqrt(double x)
    {
      return std::sqrt(x);
    }
    }



/P/🚀 guide/importing-exporting/MathFunctionsComponents/SquareRoot/SquareRoot.h
============================================================================================


.. code-block:: 

    #pragma once
    
    namespace MathFunctions {
    double sqrt(double x);
    }



/P/🚀 guide/importing-exporting/MyExe/CMakeLists.txt
=================================================================


.. code-block:: 

    cmake_minimum_required(VERSION 3.15)
    project(MyExe)
    
    # specify the C++ standard
    set(CMAKE_CXX_STANDARD 11)
    set(CMAKE_CXX_STANDARD_REQUIRED True)
    
    # Add executable
    add_executable(myexe main.cxx)
    
    # install executable
    install(TARGETS myexe)



/P/🚀 guide/importing-exporting/MyExe/main.cxx
===========================================================


.. code-block:: 

    // A simple program that outputs a file with the given name
    #include <fstream>
    #include <iostream>
    
    int main(int argc, char* argv[])
    {
      std::ofstream outfile("main.cc");
      outfile << "int main(int argc, char* argv[])" << std::endl;
      outfile << "{" << std::endl;
      outfile << "  // Your code here" << std::endl;
      outfile << "  return 0;" << std::endl;
      outfile << "}" << std::endl;
      outfile.close();
    
      return 0;
    }



/P/🚀 guide/tutorial/Complete/CMakeLists.txt
=========================================================


.. code-block:: 

    cmake_minimum_required(VERSION 3.15)
    
    # set the project name and version
    project(Tutorial VERSION 1.0)
    
    set(CMAKE_DEBUG_POSTFIX d)
    
    add_library(tutorial_compiler_flags INTERFACE)
    target_compile_features(tutorial_compiler_flags INTERFACE cxx_std_11)
    
    # add compiler warning flags just when building this project via
    # the BUILD_INTERFACE genex
    set(gcc_like_cxx "$<COMPILE_LANG_AND_ID:CXX,ARMClang,AppleClang,Clang,GNU,LCC>")
    set(msvc_cxx "$<COMPILE_LANG_AND_ID:CXX,MSVC>")
    target_compile_options(tutorial_compiler_flags INTERFACE
      "$<${gcc_like_cxx}:$<BUILD_INTERFACE:-Wall;-Wextra;-Wshadow;-Wformat=2;-Wunused>>"
      "$<${msvc_cxx}:$<BUILD_INTERFACE:-W3>>"
    )
    
    # control where the static and shared libraries are built so that on windows
    # we don't need to tinker with the path to run the executable
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
    
    option(BUILD_SHARED_LIBS "Build using shared libraries" ON)
    
    if(APPLE)
      set(CMAKE_INSTALL_RPATH "@executable_path/../lib")
    elseif(UNIX)
      set(CMAKE_INSTALL_RPATH "$ORIGIN/../lib")
    endif()
    
    # configure a header file to pass the version number only
    configure_file(TutorialConfig.h.in TutorialConfig.h)
    
    # add the MathFunctions library
    add_subdirectory(MathFunctions)
    
    # add the executable
    add_executable(Tutorial tutorial.cxx)
    set_target_properties(Tutorial PROPERTIES DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX})
    
    target_link_libraries(Tutorial PUBLIC MathFunctions tutorial_compiler_flags)
    
    # add the binary tree to the search path for include files
    # so that we will find TutorialConfig.h
    target_include_directories(Tutorial PUBLIC
                               "${PROJECT_BINARY_DIR}"
                               )
    
    # add the install targets
    install(TARGETS Tutorial DESTINATION bin)
    install(FILES "${PROJECT_BINARY_DIR}/TutorialConfig.h"
      DESTINATION include
      )
    
    # enable testing
    enable_testing()
    
    # does the application run
    add_test(NAME Runs COMMAND Tutorial 25)
    
    # does the usage message work?
    add_test(NAME Usage COMMAND Tutorial)
    set_tests_properties(Usage
      PROPERTIES PASS_REGULAR_EXPRESSION "Usage:.*number"
      )
    
    # define a function to simplify adding tests
    function(do_test target arg result)
      add_test(NAME Comp${arg} COMMAND ${target} ${arg})
      set_tests_properties(Comp${arg}
        PROPERTIES PASS_REGULAR_EXPRESSION ${result}
        )
    endfunction()
    
    # do a bunch of result based tests
    do_test(Tutorial 4 "4 is 2")
    do_test(Tutorial 9 "9 is 3")
    do_test(Tutorial 5 "5 is 2.236")
    do_test(Tutorial 7 "7 is 2.645")
    do_test(Tutorial 25 "25 is 5")
    do_test(Tutorial -25 "-25 is (-nan|nan|0)")
    do_test(Tutorial 0.0001 "0.0001 is 0.01")
    
    # setup installer
    include(InstallRequiredSystemLibraries)
    set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/License.txt")
    set(CPACK_PACKAGE_VERSION_MAJOR "${Tutorial_VERSION_MAJOR}")
    set(CPACK_PACKAGE_VERSION_MINOR "${Tutorial_VERSION_MINOR}")
    set(CPACK_SOURCE_GENERATOR "TGZ")
    include(CPack)
    
    # install the configuration targets
    install(EXPORT MathFunctionsTargets
      FILE MathFunctionsTargets.cmake
      DESTINATION lib/cmake/MathFunctions
    )
    
    include(CMakePackageConfigHelpers)
    # generate the config file that is includes the exports
    configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in
      "${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsConfig.cmake"
      INSTALL_DESTINATION "lib/cmake/example"
      NO_SET_AND_CHECK_MACRO
      NO_CHECK_REQUIRED_COMPONENTS_MACRO
      )
    # generate the version file for the config file
    write_basic_package_version_file(
      "${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsConfigVersion.cmake"
      VERSION "${Tutorial_VERSION_MAJOR}.${Tutorial_VERSION_MINOR}"
      COMPATIBILITY AnyNewerVersion
    )
    
    # install the configuration file
    install(FILES
      ${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsConfig.cmake
      DESTINATION lib/cmake/MathFunctions
      )
    
    # generate the export targets for the build tree
    # needs to be after the install(TARGETS ) command
    export(EXPORT MathFunctionsTargets
      FILE "${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsTargets.cmake"
    )



/P/🚀 guide/tutorial/Complete/Config.cmake.in
==========================================================


.. code-block:: 

    
    @PACKAGE_INIT@
    
    include ( "${CMAKE_CURRENT_LIST_DIR}/MathFunctionsTargets.cmake" )



/P/🚀 guide/tutorial/Complete/CTestConfig.cmake
============================================================


.. code-block:: 

    set(CTEST_PROJECT_NAME "CMakeTutorial")
    set(CTEST_NIGHTLY_START_TIME "00:00:00 EST")
    
    set(CTEST_DROP_METHOD "http")
    set(CTEST_DROP_SITE "my.cdash.org")
    set(CTEST_DROP_LOCATION "/submit.php?project=CMakeTutorial")
    set(CTEST_DROP_SITE_CDASH TRUE)



/P/🚀 guide/tutorial/Complete/License.txt
======================================================


.. code-block:: 

    This is the open source License.txt file introduced in
    CMake/Tutorial/Step9...



/P/🚀 guide/tutorial/Complete/MathFunctions/CMakeLists.txt
=======================================================================


.. code-block:: 

    # add the library that runs
    add_library(MathFunctions MathFunctions.cxx)
    
    # state that anybody linking to us needs to include the current source dir
    # to find MathFunctions.h, while we don't.
    target_include_directories(MathFunctions
                               INTERFACE
                                $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
                                $<INSTALL_INTERFACE:include>
                               )
    
    # should we use our own math functions
    option(USE_MYMATH "Use tutorial provided math implementation" ON)
    if(USE_MYMATH)
    
      target_compile_definitions(MathFunctions PRIVATE "USE_MYMATH")
    
      include(MakeTable.cmake) # generates Table.h
    
      # library that just does sqrt
      add_library(SqrtLibrary STATIC
                  mysqrt.cxx
                  ${CMAKE_CURRENT_BINARY_DIR}/Table.h
                  )
    
      # state that we depend on our binary dir to find Table.h
      target_include_directories(SqrtLibrary PRIVATE
                                 ${CMAKE_CURRENT_BINARY_DIR}
                                 )
    
      # state that SqrtLibrary need PIC when the default is shared libraries
      set_target_properties(SqrtLibrary PROPERTIES
                            POSITION_INDEPENDENT_CODE ${BUILD_SHARED_LIBS}
                            )
    
      # link SqrtLibrary to tutorial_compiler_flags
      target_link_libraries(SqrtLibrary PUBLIC tutorial_compiler_flags)
    
      target_link_libraries(MathFunctions PRIVATE SqrtLibrary)
    endif()
    
    # link MathFunctions to tutorial_compiler_flags
    target_link_libraries(MathFunctions PUBLIC tutorial_compiler_flags)
    
    # define the symbol stating we are using the declspec(dllexport) when
    # building on windows
    target_compile_definitions(MathFunctions PRIVATE "EXPORTING_MYMATH")
    
    # setup the version numbering
    set_property(TARGET MathFunctions PROPERTY VERSION "1.0.0")
    set_property(TARGET MathFunctions PROPERTY SOVERSION "1")
    
    # install libs
    set(installable_libs MathFunctions tutorial_compiler_flags)
    if(TARGET SqrtLibrary)
      list(APPEND installable_libs SqrtLibrary)
    endif()
    install(TARGETS ${installable_libs}
            EXPORT MathFunctionsTargets
            DESTINATION lib)
    # install include headers
    install(FILES MathFunctions.h DESTINATION include)



/P/🚀 guide/tutorial/Complete/MathFunctions/MakeTable.cmake
========================================================================


.. code-block:: 

    # first we add the executable that generates the table
    add_executable(MakeTable MakeTable.cxx)
    target_link_libraries(MakeTable PRIVATE tutorial_compiler_flags)
    
    # add the command to generate the source code
    add_custom_command(
      OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/Table.h
      COMMAND MakeTable ${CMAKE_CURRENT_BINARY_DIR}/Table.h
      DEPENDS MakeTable
      )



/P/🚀 guide/tutorial/Complete/MathFunctions/MakeTable.cxx
======================================================================


.. code-block:: 

    // A simple program that builds a sqrt table
    #include <cmath>
    #include <fstream>
    #include <iostream>
    
    int main(int argc, char* argv[])
    {
      // make sure we have enough arguments
      if (argc < 2) {
        return 1;
      }
    
      std::ofstream fout(argv[1], std::ios_base::out);
      const bool fileOpen = fout.is_open();
      if (fileOpen) {
        fout << "double sqrtTable[] = {" << std::endl;
        for (int i = 0; i < 10; ++i) {
          fout << sqrt(static_cast<double>(i)) << "," << std::endl;
        }
        // close the table with a zero
        fout << "0};" << std::endl;
        fout.close();
      }
      return fileOpen ? 0 : 1; // return 0 if wrote the file
    }



/P/🚀 guide/tutorial/Complete/MathFunctions/MathFunctions.cxx
==========================================================================


.. code-block:: 

    
    #include "MathFunctions.h"
    
    #include <cmath>
    
    #ifdef USE_MYMATH
    #  include "mysqrt.h"
    #endif
    
    namespace mathfunctions {
    double sqrt(double x)
    {
    // which square root function should we use?
    #ifdef USE_MYMATH
      return detail::mysqrt(x);
    #else
      return std::sqrt(x);
    #endif
    }
    }



/P/🚀 guide/tutorial/Complete/MathFunctions/MathFunctions.h
========================================================================


.. code-block:: 

    
    #if defined(_WIN32)
    #  if defined(EXPORTING_MYMATH)
    #    define DECLSPEC __declspec(dllexport)
    #  else
    #    define DECLSPEC __declspec(dllimport)
    #  endif
    #else // non windows
    #  define DECLSPEC
    #endif
    
    namespace mathfunctions {
    double DECLSPEC sqrt(double x);
    }



/P/🚀 guide/tutorial/Complete/MathFunctions/mysqrt.cxx
===================================================================


.. code-block:: 

    #include <iostream>
    
    #include "MathFunctions.h"
    
    // include the generated table
    #include "Table.h"
    
    namespace mathfunctions {
    namespace detail {
    // a hack square root calculation using simple operations
    double mysqrt(double x)
    {
      if (x <= 0) {
        return 0;
      }
    
      // use the table to help find an initial value
      double result = x;
      if (x >= 1 && x < 10) {
        std::cout << "Use the table to help find an initial value " << std::endl;
        result = sqrtTable[static_cast<int>(x)];
      }
    
      // do ten iterations
      for (int i = 0; i < 10; ++i) {
        if (result <= 0) {
          result = 0.1;
        }
        double delta = x - (result * result);
        result = result + 0.5 * delta / result;
        std::cout << "Computing sqrt of " << x << " to be " << result << std::endl;
      }
    
      return result;
    }
    }
    }



/P/🚀 guide/tutorial/Complete/MathFunctions/mysqrt.h
=================================================================


.. code-block:: 

    
    namespace mathfunctions {
    namespace detail {
    double mysqrt(double x);
    }
    }



/P/🚀 guide/tutorial/Complete/MultiCPackConfig.cmake
=================================================================


.. code-block:: 

    include("release/CPackConfig.cmake")
    
    set(CPACK_INSTALL_CMAKE_PROJECTS
        "debug;Tutorial;ALL;/"
        "release;Tutorial;ALL;/"
        )



/P/🚀 guide/tutorial/Complete/tutorial.cxx
=======================================================


.. code-block:: 

    // A simple program that computes the square root of a number
    #include <iostream>
    #include <string>
    
    #include "MathFunctions.h"
    #include "TutorialConfig.h"
    
    int main(int argc, char* argv[])
    {
      if (argc < 2) {
        // report version
        std::cout << argv[0] << " Version " << Tutorial_VERSION_MAJOR << "."
                  << Tutorial_VERSION_MINOR << std::endl;
        std::cout << "Usage: " << argv[0] << " number" << std::endl;
        return 1;
      }
    
      // convert input to double
      const double inputValue = std::stod(argv[1]);
    
      const double outputValue = mathfunctions::sqrt(inputValue);
    
      std::cout << "The square root of " << inputValue << " is " << outputValue
                << std::endl;
      return 0;
    }



/P/🚀 guide/tutorial/Complete/TutorialConfig.h.in
==============================================================


.. code-block:: 

    // the configured options and settings for Tutorial
    #define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@
    #define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@



/P/🚀 guide/tutorial/source.txt
============================================


.. code-block:: 

    .. |tutorial_source| replace::
      The tutorial documentation and source code examples can be found in
      the ``Help/guide/tutorial`` directory of the CMake source code tree.



/P/🚀 Step1/CMakeLists.txt
======================================================


.. code-block:: cmake

    # TODO 1: Set the minimum required version of CMake to be 3.10
    
    # TODO 2: Create a project named Tutorial
    
    # TODO 7: Set the project version number as 1.0 in the above project command
    
    # TODO 6: Set the variable CMAKE_CXX_STANDARD to 11
    #         and the variable CMAKE_CXX_STANDARD_REQUIRED to True
    
    # TODO 8: Use configure_file to configure and copy TutorialConfig.h.in to
    #         TutorialConfig.h
    
    # TODO 3: Add an executable called Tutorial to the project
    # Hint: Be sure to specify the source file as tutorial.cxx
    
    # TODO 9: Use target_include_directories to include ${PROJECT_BINARY_DIR}



/P/🚀 Step1/tutorial.cxx
====================================================


.. code-block:: cpp

    // A simple program that computes the square root of a number
    #include <cmath>
    #include <cstdlib> // TODO 5: Remove this line
    #include <iostream>
    #include <string>
    
    // TODO 11: Include TutorialConfig.h
    
    int main(int argc, char* argv[])
    {
      if (argc < 2) {
        // TODO 12: Create a print statement using Tutorial_VERSION_MAJOR
        //          and Tutorial_VERSION_MINOR
        std::cout << "Usage: " << argv[0] << " number" << std::endl;
        return 1;
      }
    
      // convert input to double
      // TODO 4: Replace atof(argv[1]) with std::stod(argv[1])
      const double inputValue = atof(argv[1]);
    
      // calculate square root
      const double outputValue = sqrt(inputValue);
      std::cout << "The square root of " << inputValue << " is " << outputValue
                << std::endl;
      return 0;
    }



/P/🚀 Step1/TutorialConfig.h.in
===========================================================


.. code-block:: cpp

    // the configured options and settings for Tutorial
    // TODO 10: Define Tutorial_VERSION_MAJOR and Tutorial_VERSION_MINOR



/P/🚀 Step2/CMakeLists.txt
======================================================


.. code-block:: cmake

    cmake_minimum_required(VERSION 3.10)
    
    # set the project name and version
    project(Tutorial VERSION 1.0)
    
    # specify the C++ standard
    set(CMAKE_CXX_STANDARD 11)
    set(CMAKE_CXX_STANDARD_REQUIRED True)
    
    # configure a header file to pass some of the CMake settings
    # to the source code
    configure_file(TutorialConfig.h.in TutorialConfig.h)
    
    # TODO 2: Use add_subdirectory() to add MathFunctions to this project
    
    # add the executable
    add_executable(Tutorial tutorial.cxx)
    
    # TODO 3: Use target_link_libraries to link the library to our executable
    
    # TODO 4: Add MathFunctions to Tutorial's target_include_directories()
    # Hint: ${PROJECT_SOURCE_DIR} is a path to the project source. AKA This folder!
    
    # add the binary tree to the search path for include files
    # so that we will find TutorialConfig.h
    target_include_directories(Tutorial PUBLIC
                               "${PROJECT_BINARY_DIR}"
                               )



/P/🚀 Step2/MathFunctions/CMakeLists.txt
====================================================================


.. code-block:: cmake

    # TODO 14: Remove mysqrt.cxx from the list of sources
    
    # TODO 1: Add a library called MathFunctions with sources MathFunctions.cxx
    # and mysqrt.cxx
    # Hint: You will need the add_library command
    
    # TODO 7: Create a variable USE_MYMATH using option and set default to ON
    
    # TODO 8: If USE_MYMATH is ON, use target_compile_definitions to pass
    # USE_MYMATH as a precompiled definition to our source files
    
    # TODO 12: When USE_MYMATH is ON, add a library for SqrtLibrary with
    # source mysqrt.cxx
    
    # TODO 13: When USE_MYMATH is ON, link SqrtLibrary to the MathFunctions Library



/P/🚀 Step2/MathFunctions/MathFunctions.cxx
=======================================================================


.. code-block:: cpp

    #include "MathFunctions.h"
    
    // TODO 11: include cmath
    
    // TODO 10: Wrap the mysqrt include in a precompiled ifdef based on USE_MYMATH
    #include "mysqrt.h"
    
    namespace mathfunctions {
    double sqrt(double x)
    {
      // TODO 9: If USE_MYMATH is defined, use detail::mysqrt.
      // Otherwise, use std::sqrt.
      return detail::mysqrt(x);
    }
    }



/P/🚀 Step2/MathFunctions/MathFunctions.h
=====================================================================


.. code-block:: cpp

    #pragma once
    
    namespace mathfunctions {
    double sqrt(double x);
    }



/P/🚀 Step2/MathFunctions/mysqrt.cxx
================================================================


.. code-block:: cpp

    #include "mysqrt.h"
    
    #include <iostream>
    
    namespace mathfunctions {
    namespace detail {
    // a hack square root calculation using simple operations
    double mysqrt(double x)
    {
      if (x <= 0) {
        return 0;
      }
    
      double result = x;
    
      // do ten iterations
      for (int i = 0; i < 10; ++i) {
        if (result <= 0) {
          result = 0.1;
        }
        double delta = x - (result * result);
        result = result + 0.5 * delta / result;
        std::cout << "Computing sqrt of " << x << " to be " << result << std::endl;
      }
      return result;
    }
    }
    }



/P/🚀 Step2/MathFunctions/mysqrt.h
==============================================================


.. code-block:: cpp

    #pragma once
    
    namespace mathfunctions {
    namespace detail {
    double mysqrt(double x);
    }
    }



/P/🚀 Step2/tutorial.cxx
====================================================


.. code-block:: cpp

    // A simple program that computes the square root of a number
    #include <cmath>
    #include <iostream>
    #include <string>
    
    // TODO 5: Include MathFunctions.h
    #include "TutorialConfig.h"
    
    int main(int argc, char* argv[])
    {
      if (argc < 2) {
        // report version
        std::cout << argv[0] << " Version " << Tutorial_VERSION_MAJOR << "."
                  << Tutorial_VERSION_MINOR << std::endl;
        std::cout << "Usage: " << argv[0] << " number" << std::endl;
        return 1;
      }
    
      // convert input to double
      const double inputValue = std::stod(argv[1]);
    
      // TODO 6: Replace sqrt with mathfunctions::sqrt
    
      // calculate square root
      const double outputValue = sqrt(inputValue);
      std::cout << "The square root of " << inputValue << " is " << outputValue
                << std::endl;
      return 0;
    }



/P/🚀 Step2/TutorialConfig.h.in
===========================================================


.. code-block:: cpp

    // the configured options and settings for Tutorial
    #define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@
    #define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@



/P/🚀 Step3/CMakeLists.txt
======================================================


.. code-block:: cmake

    cmake_minimum_required(VERSION 3.10)
    
    # set the project name and version
    project(Tutorial VERSION 1.0)
    
    # TODO 4: Replace the following code by:
    # * Creating an interface library called tutorial_compiler_flags
    #   Hint: use add_library() with the INTERFACE signature
    # * Add compiler feature cxx_std_11 to tutorial_compiler_flags
    #   Hint: Use target_compile_features()
    
    # specify the C++ standard
    set(CMAKE_CXX_STANDARD 11)
    set(CMAKE_CXX_STANDARD_REQUIRED True)
    
    # configure a header file to pass some of the CMake settings
    # to the source code
    configure_file(TutorialConfig.h.in TutorialConfig.h)
    
    # TODO 2: Remove EXTRA_INCLUDES list
    
    # add the MathFunctions library
    add_subdirectory(MathFunctions)
    list(APPEND EXTRA_INCLUDES "${PROJECT_SOURCE_DIR}/MathFunctions")
    
    # add the executable
    add_executable(Tutorial tutorial.cxx)
    
    # TODO 5: Link Tutorial to tutorial_compiler_flags
    
    target_link_libraries(Tutorial PUBLIC MathFunctions)
    
    # TODO 3: Remove use of EXTRA_INCLUDES
    
    # add the binary tree to the search path for include files
    # so that we will find TutorialConfig.h
    target_include_directories(Tutorial PUBLIC
                               "${PROJECT_BINARY_DIR}"
                               ${EXTRA_INCLUDES}
                               )



/P/🚀 Step3/MathFunctions/CMakeLists.txt
====================================================================


.. code-block:: cmake

    add_library(MathFunctions MathFunctions.cxx)
    
    # TODO 1: State that anybody linking to MathFunctions needs to include the
    # current source directory, while MathFunctions itself doesn't.
    # Hint: Use target_include_directories with the INTERFACE keyword
    
    # should we use our own math functions
    option(USE_MYMATH "Use tutorial provided math implementation" ON)
    if (USE_MYMATH)
      target_compile_definitions(MathFunctions PRIVATE "USE_MYMATH")
    
      # library that just does sqrt
      add_library(SqrtLibrary STATIC
                  mysqrt.cxx
                  )
    
      # TODO 6: Link SqrtLibrary to tutorial_compiler_flags
    
      target_link_libraries(MathFunctions PRIVATE SqrtLibrary)
    endif()
    
    # TODO 7: Link MathFunctions to tutorial_compiler_flags



/P/🚀 Step3/MathFunctions/MathFunctions.cxx
=======================================================================


.. code-block:: cpp

    #include "MathFunctions.h"
    
    #include <cmath>
    
    #ifdef USE_MYMATH
    #  include "mysqrt.h"
    #endif
    
    namespace mathfunctions {
    double sqrt(double x)
    {
    // which square root function should we use?
    #ifdef USE_MYMATH
      return detail::mysqrt(x);
    #else
      return std::sqrt(x);
    #endif
    }
    }



/P/🚀 Step3/MathFunctions/MathFunctions.h
=====================================================================


.. code-block:: cpp

    #pragma once
    
    namespace mathfunctions {
    double sqrt(double x);
    }



/P/🚀 Step3/MathFunctions/mysqrt.cxx
================================================================


.. code-block:: cpp

    #include "mysqrt.h"
    
    #include <iostream>
    
    namespace mathfunctions {
    namespace detail {
    // a hack square root calculation using simple operations
    double mysqrt(double x)
    {
      if (x <= 0) {
        return 0;
      }
    
      double result = x;
    
      // do ten iterations
      for (int i = 0; i < 10; ++i) {
        if (result <= 0) {
          result = 0.1;
        }
        double delta = x - (result * result);
        result = result + 0.5 * delta / result;
        std::cout << "Computing sqrt of " << x << " to be " << result << std::endl;
      }
      return result;
    }
    }
    }



/P/🚀 Step3/MathFunctions/mysqrt.h
==============================================================


.. code-block:: cpp

    #pragma once
    
    namespace mathfunctions {
    namespace detail {
    double mysqrt(double x);
    }
    }



/P/🚀 Step3/tutorial.cxx
====================================================


.. code-block:: cpp

    // A simple program that computes the square root of a number
    #include <cmath>
    #include <iostream>
    #include <string>
    
    #include "MathFunctions.h"
    #include "TutorialConfig.h"
    
    int main(int argc, char* argv[])
    {
      if (argc < 2) {
        // report version
        std::cout << argv[0] << " Version " << Tutorial_VERSION_MAJOR << "."
                  << Tutorial_VERSION_MINOR << std::endl;
        std::cout << "Usage: " << argv[0] << " number" << std::endl;
        return 1;
      }
    
      // convert input to double
      const double inputValue = std::stod(argv[1]);
    
      const double outputValue = mathfunctions::sqrt(inputValue);
    
      std::cout << "The square root of " << inputValue << " is " << outputValue
                << std::endl;
      return 0;
    }



/P/🚀 Step3/TutorialConfig.h.in
===========================================================


.. code-block:: cpp

    // the configured options and settings for Tutorial
    #define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@
    #define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@



/P/🚀 Step4/CMakeLists.txt
======================================================


.. code-block:: cmake

    # TODO 1: Update the minimum required version to 3.15
    
    cmake_minimum_required(VERSION 3.10)
    
    # set the project name and version
    project(Tutorial VERSION 1.0)
    
    # specify the C++ standard
    add_library(tutorial_compiler_flags INTERFACE)
    target_compile_features(tutorial_compiler_flags INTERFACE cxx_std_11)
    
    # TODO 2: Create helper variables to determine which compiler we are using:
    # * Create a new variable gcc_like_cxx that is true if we are using CXX and
    #   any of the following compilers: ARMClang, AppleClang, Clang, GNU, LCC
    # * Create a new variable msvc_cxx that is true if we are using CXX and MSVC
    # Hint: Use set() and COMPILE_LANG_AND_ID
    
    # TODO 3: Add warning flag compile options to the interface library
    # tutorial_compiler_flags.
    # * For gcc_like_cxx, add flags -Wall;-Wextra;-Wshadow;-Wformat=2;-Wunused
    # * For msvc_cxx, add flags -W3
    # Hint: Use target_compile_options()
    
    # TODO 4: With nested generator expressions, only use the flags for the
    # build-tree
    # Hint: Use BUILD_INTERFACE
    
    # configure a header file to pass some of the CMake settings
    # to the source code
    configure_file(TutorialConfig.h.in TutorialConfig.h)
    
    # add the MathFunctions library
    add_subdirectory(MathFunctions)
    
    # add the executable
    add_executable(Tutorial tutorial.cxx)
    
    target_link_libraries(Tutorial PUBLIC MathFunctions tutorial_compiler_flags)
    
    # add the binary tree to the search path for include files
    # so that we will find TutorialConfig.h
    target_include_directories(Tutorial PUBLIC
                               "${PROJECT_BINARY_DIR}"
                               )



/P/🚀 Step4/MathFunctions/CMakeLists.txt
====================================================================


.. code-block:: cmake

    # create the MathFunctions library
    add_library(MathFunctions MathFunctions.cxx)
    
    # state that anybody linking to us needs to include the current source dir
    # to find MathFunctions.h, while we don't.
    target_include_directories(MathFunctions
                               INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}
                               )
    
    # should we use our own math functions
    option(USE_MYMATH "Use tutorial provided math implementation" ON)
    if (USE_MYMATH)
      target_compile_definitions(MathFunctions PRIVATE "USE_MYMATH")
    
      # library that just does sqrt
      add_library(SqrtLibrary STATIC
                  mysqrt.cxx
                  )
    
      # link SqrtLibrary to tutorial_compiler_flags
      target_link_libraries(SqrtLibrary PUBLIC tutorial_compiler_flags)
    
      target_link_libraries(MathFunctions PRIVATE SqrtLibrary)
    endif()
    
    # link MathFunctions to tutorial_compiler_flags
    target_link_libraries(MathFunctions PUBLIC tutorial_compiler_flags)



/P/🚀 Step4/MathFunctions/MathFunctions.cxx
=======================================================================


.. code-block:: cpp

    #include "MathFunctions.h"
    
    #include <cmath>
    
    #ifdef USE_MYMATH
    #  include "mysqrt.h"
    #endif
    
    namespace mathfunctions {
    double sqrt(double x)
    {
    // which square root function should we use?
    #ifdef USE_MYMATH
      return detail::mysqrt(x);
    #else
      return std::sqrt(x);
    #endif
    }
    }



/P/🚀 Step4/MathFunctions/MathFunctions.h
=====================================================================


.. code-block:: cpp

    #pragma once
    
    namespace mathfunctions {
    double sqrt(double x);
    }



/P/🚀 Step4/MathFunctions/mysqrt.cxx
================================================================


.. code-block:: cpp

    #include "mysqrt.h"
    
    #include <iostream>
    
    namespace mathfunctions {
    namespace detail {
    // a hack square root calculation using simple operations
    double mysqrt(double x)
    {
      if (x <= 0) {
        return 0;
      }
    
      double result = x;
    
      // do ten iterations
      for (int i = 0; i < 10; ++i) {
        if (result <= 0) {
          result = 0.1;
        }
        double delta = x - (result * result);
        result = result + 0.5 * delta / result;
        std::cout << "Computing sqrt of " << x << " to be " << result << std::endl;
      }
      return result;
    }
    }
    }



/P/🚀 Step4/MathFunctions/mysqrt.h
==============================================================


.. code-block:: cpp

    #pragma once
    
    namespace mathfunctions {
    namespace detail {
    double mysqrt(double x);
    }
    }



/P/🚀 Step4/tutorial.cxx
====================================================


.. code-block:: cpp

    // A simple program that computes the square root of a number
    #include <cmath>
    #include <iostream>
    #include <string>
    
    #include "MathFunctions.h"
    #include "TutorialConfig.h"
    
    int main(int argc, char* argv[])
    {
      if (argc < 2) {
        // report version
        std::cout << argv[0] << " Version " << Tutorial_VERSION_MAJOR << "."
                  << Tutorial_VERSION_MINOR << std::endl;
        std::cout << "Usage: " << argv[0] << " number" << std::endl;
        return 1;
      }
    
      // convert input to double
      const double inputValue = std::stod(argv[1]);
    
      const double outputValue = mathfunctions::sqrt(inputValue);
    
      std::cout << "The square root of " << inputValue << " is " << outputValue
                << std::endl;
      return 0;
    }



/P/🚀 Step4/TutorialConfig.h.in
===========================================================


.. code-block:: cpp

    // the configured options and settings for Tutorial
    #define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@
    #define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@



/P/🚀 Step5/CMakeLists.txt
======================================================


.. code-block:: cmake

    cmake_minimum_required(VERSION 3.15)
    
    # set the project name and version
    project(Tutorial VERSION 1.0)
    
    # specify the C++ standard
    add_library(tutorial_compiler_flags INTERFACE)
    target_compile_features(tutorial_compiler_flags INTERFACE cxx_std_11)
    
    # add compiler warning flags just when building this project via
    # the BUILD_INTERFACE genex
    set(gcc_like_cxx "$<COMPILE_LANG_AND_ID:CXX,ARMClang,AppleClang,Clang,GNU,LCC>")
    set(msvc_cxx "$<COMPILE_LANG_AND_ID:CXX,MSVC>")
    target_compile_options(tutorial_compiler_flags INTERFACE
      "$<${gcc_like_cxx}:$<BUILD_INTERFACE:-Wall;-Wextra;-Wshadow;-Wformat=2;-Wunused>>"
      "$<${msvc_cxx}:$<BUILD_INTERFACE:-W3>>"
    )
    
    # configure a header file to pass some of the CMake settings
    # to the source code
    configure_file(TutorialConfig.h.in TutorialConfig.h)
    
    # add the MathFunctions library
    add_subdirectory(MathFunctions)
    
    # add the executable
    add_executable(Tutorial tutorial.cxx)
    
    target_link_libraries(Tutorial PUBLIC MathFunctions tutorial_compiler_flags)
    
    # add the binary tree to the search path for include files
    # so that we will find TutorialConfig.h
    target_include_directories(Tutorial PUBLIC
                               "${PROJECT_BINARY_DIR}"
                               )
    
    # TODO 3: Install Tutorial in the bin directory
    # Hint: Use the TARGETS and DESTINATION parameters
    
    # TODO 4: Install TutorialConfig.h to the include directory
    # Hint: Use the FILES and DESTINATION parameters
    
    # TODO 5: Enable testing
    
    # TODO 6: Add a test called Runs which runs the following command:
    # $ Tutorial 25
    
    # TODO 7: Add a test called Usage which runs the following command:
    # $ Tutorial
    # Make sure the expected output is displayed.
    # Hint: Use the PASS_REGULAR_EXPRESSION property with "Usage.*number"
    
    # TODO 8: Add a test which runs the following command:
    # $ Tutorial 4
    # Make sure the result is correct.
    # Hint: Use the PASS_REGULAR_EXPRESSION property with "4 is 2"
    
    # TODO 9: Add more tests. Create a function called do_test to avoid copy +
    # paste. Test the following values: 4, 9, 5, 7, 25, -25 and 0.0001.



/P/🚀 Step5/MathFunctions/CMakeLists.txt
====================================================================


.. code-block:: cmake

    add_library(MathFunctions MathFunctions.cxx)
    
    # state that anybody linking to us needs to include the current source dir
    # to find MathFunctions.h, while we don't.
    target_include_directories(MathFunctions
                               INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}
                               )
    
    # should we use our own math functions
    option(USE_MYMATH "Use tutorial provided math implementation" ON)
    if (USE_MYMATH)
      target_compile_definitions(MathFunctions PRIVATE "USE_MYMATH")
    
      # library that just does sqrt
      add_library(SqrtLibrary STATIC
                  mysqrt.cxx
                  )
    
      # link SqrtLibrary to tutorial_compiler_flags
      target_link_libraries(SqrtLibrary PUBLIC tutorial_compiler_flags)
    
      target_link_libraries(MathFunctions PRIVATE SqrtLibrary)
    endif()
    
    # link MathFunctions to tutorial_compiler_flags
    target_link_libraries(MathFunctions PUBLIC tutorial_compiler_flags)
    
    # TODO 1: Create a variable called installable_libs that is a list of all
    # libraries we want to install (e.g. MathFunctions and tutorial_compiler_flags)
    # Then install the installable libraries to the lib folder.
    # Hint: Use the TARGETS and DESTINATION parameters
    
    # TODO 2: Install the library headers to the include folder.
    # Hint: Use the FILES and DESTINATION parameters



/P/🚀 Step5/MathFunctions/MathFunctions.cxx
=======================================================================


.. code-block:: cpp

    #include "MathFunctions.h"
    
    #include <cmath>
    
    #ifdef USE_MYMATH
    #  include "mysqrt.h"
    #endif
    
    namespace mathfunctions {
    double sqrt(double x)
    {
    // which square root function should we use?
    #ifdef USE_MYMATH
      return detail::mysqrt(x);
    #else
      return std::sqrt(x);
    #endif
    }
    }



/P/🚀 Step5/MathFunctions/MathFunctions.h
=====================================================================


.. code-block:: cpp

    #pragma once
    
    namespace mathfunctions {
    double sqrt(double x);
    }



/P/🚀 Step5/MathFunctions/mysqrt.cxx
================================================================


.. code-block:: cpp

    #include "mysqrt.h"
    
    #include <iostream>
    
    namespace mathfunctions {
    namespace detail {
    // a hack square root calculation using simple operations
    double mysqrt(double x)
    {
      if (x <= 0) {
        return 0;
      }
    
      double result = x;
    
      // do ten iterations
      for (int i = 0; i < 10; ++i) {
        if (result <= 0) {
          result = 0.1;
        }
        double delta = x - (result * result);
        result = result + 0.5 * delta / result;
        std::cout << "Computing sqrt of " << x << " to be " << result << std::endl;
      }
      return result;
    }
    }
    }



/P/🚀 Step5/MathFunctions/mysqrt.h
==============================================================


.. code-block:: cpp

    #pragma once
    
    namespace mathfunctions {
    namespace detail {
    double mysqrt(double x);
    }
    }



/P/🚀 Step5/tutorial.cxx
====================================================


.. code-block:: cpp

    // A simple program that computes the square root of a number
    #include <cmath>
    #include <iostream>
    #include <string>
    
    #include "MathFunctions.h"
    #include "TutorialConfig.h"
    
    int main(int argc, char* argv[])
    {
      if (argc < 2) {
        // report version
        std::cout << argv[0] << " Version " << Tutorial_VERSION_MAJOR << "."
                  << Tutorial_VERSION_MINOR << std::endl;
        std::cout << "Usage: " << argv[0] << " number" << std::endl;
        return 1;
      }
    
      // convert input to double
      const double inputValue = std::stod(argv[1]);
    
      const double outputValue = mathfunctions::sqrt(inputValue);
    
      std::cout << "The square root of " << inputValue << " is " << outputValue
                << std::endl;
      return 0;
    }



/P/🚀 Step5/TutorialConfig.h.in
===========================================================


.. code-block:: cpp

    // the configured options and settings for Tutorial
    #define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@
    #define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@



/P/🚀 Step6/CMakeLists.txt
======================================================


.. code-block:: cmake

    cmake_minimum_required(VERSION 3.15)
    
    # set the project name and version
    project(Tutorial VERSION 1.0)
    
    # specify the C++ standard
    add_library(tutorial_compiler_flags INTERFACE)
    target_compile_features(tutorial_compiler_flags INTERFACE cxx_std_11)
    
    # add compiler warning flags just when building this project via
    # the BUILD_INTERFACE genex
    set(gcc_like_cxx "$<COMPILE_LANG_AND_ID:CXX,ARMClang,AppleClang,Clang,GNU,LCC>")
    set(msvc_cxx "$<COMPILE_LANG_AND_ID:CXX,MSVC>")
    target_compile_options(tutorial_compiler_flags INTERFACE
      "$<${gcc_like_cxx}:$<BUILD_INTERFACE:-Wall;-Wextra;-Wshadow;-Wformat=2;-Wunused>>"
      "$<${msvc_cxx}:$<BUILD_INTERFACE:-W3>>"
    )
    
    # configure a header file to pass some of the CMake settings
    # to the source code
    configure_file(TutorialConfig.h.in TutorialConfig.h)
    
    # add the MathFunctions library
    add_subdirectory(MathFunctions)
    
    # add the executable
    add_executable(Tutorial tutorial.cxx)
    
    target_link_libraries(Tutorial PUBLIC MathFunctions tutorial_compiler_flags)
    
    # add the binary tree to the search path for include files
    # so that we will find TutorialConfig.h
    target_include_directories(Tutorial PUBLIC
                               "${PROJECT_BINARY_DIR}"
                               )
    
    # add the install targets
    install(TARGETS Tutorial DESTINATION bin)
    install(FILES "${PROJECT_BINARY_DIR}/TutorialConfig.h"
      DESTINATION include
      )
    
    # TODO 1: Replace enable_testing() with include(CTest)
    # enable testing
    enable_testing()
    
    # does the application run
    add_test(NAME Runs COMMAND Tutorial 25)
    
    # does the usage message work?
    add_test(NAME Usage COMMAND Tutorial)
    set_tests_properties(Usage
      PROPERTIES PASS_REGULAR_EXPRESSION "Usage:.*number"
      )
    
    # define a function to simplify adding tests
    function(do_test target arg result)
      add_test(NAME Comp${arg} COMMAND ${target} ${arg})
      set_tests_properties(Comp${arg}
        PROPERTIES PASS_REGULAR_EXPRESSION ${result}
        )
    endfunction()
    
    # do a bunch of result based tests
    do_test(Tutorial 4 "4 is 2")
    do_test(Tutorial 9 "9 is 3")
    do_test(Tutorial 5 "5 is 2.236")
    do_test(Tutorial 7 "7 is 2.645")
    do_test(Tutorial 25 "25 is 5")
    do_test(Tutorial -25 "-25 is (-nan|nan|0)")
    do_test(Tutorial 0.0001 "0.0001 is 0.01")



/P/🚀 Step6/CTestConfig.cmake
=========================================================


.. code-block:: cmake

    set(CTEST_PROJECT_NAME "CMakeTutorial")
    set(CTEST_NIGHTLY_START_TIME "00:00:00 EST")
    
    set(CTEST_DROP_METHOD "http")
    set(CTEST_DROP_SITE "my.cdash.org")
    set(CTEST_DROP_LOCATION "/submit.php?project=CMakeTutorial")
    set(CTEST_DROP_SITE_CDASH TRUE)



/P/🚀 Step6/MathFunctions/CMakeLists.txt
====================================================================


.. code-block:: cmake

    add_library(MathFunctions MathFunctions.cxx)
    
    # state that anybody linking to us needs to include the current source dir
    # to find MathFunctions.h, while we don't.
    target_include_directories(MathFunctions
                               INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}
                               )
    
    # should we use our own math functions
    option(USE_MYMATH "Use tutorial provided math implementation" ON)
    if (USE_MYMATH)
      target_compile_definitions(MathFunctions PRIVATE "USE_MYMATH")
    
      # library that just does sqrt
      add_library(SqrtLibrary STATIC
                  mysqrt.cxx
                  )
    
      # link SqrtLibrary to tutorial_compiler_flags
      target_link_libraries(SqrtLibrary PUBLIC tutorial_compiler_flags)
    
      target_link_libraries(MathFunctions PRIVATE SqrtLibrary)
    endif()
    
    # link MathFunctions to tutorial_compiler_flags
    target_link_libraries(MathFunctions PUBLIC tutorial_compiler_flags)
    
    # install libs
    set(installable_libs MathFunctions tutorial_compiler_flags)
    if(TARGET SqrtLibrary)
      list(APPEND installable_libs SqrtLibrary)
    endif()
    install(TARGETS ${installable_libs} DESTINATION lib)
    # install include headers
    install(FILES MathFunctions.h DESTINATION include)



/P/🚀 Step6/MathFunctions/MathFunctions.cxx
=======================================================================


.. code-block:: cpp

    #include "MathFunctions.h"
    
    #include <cmath>
    
    #ifdef USE_MYMATH
    #  include "mysqrt.h"
    #endif
    
    namespace mathfunctions {
    double sqrt(double x)
    {
    // which square root function should we use?
    #ifdef USE_MYMATH
      return detail::mysqrt(x);
    #else
      return std::sqrt(x);
    #endif
    }
    }



/P/🚀 Step6/MathFunctions/MathFunctions.h
=====================================================================


.. code-block:: cpp

    #pragma once
    
    namespace mathfunctions {
    double sqrt(double x);
    }



/P/🚀 Step6/MathFunctions/mysqrt.cxx
================================================================


.. code-block:: cpp

    #include "mysqrt.h"
    
    #include <iostream>
    
    namespace mathfunctions {
    namespace detail {
    // a hack square root calculation using simple operations
    double mysqrt(double x)
    {
      if (x <= 0) {
        return 0;
      }
    
      double result = x;
    
      // do ten iterations
      for (int i = 0; i < 10; ++i) {
        if (result <= 0) {
          result = 0.1;
        }
        double delta = x - (result * result);
        result = result + 0.5 * delta / result;
        std::cout << "Computing sqrt of " << x << " to be " << result << std::endl;
      }
      return result;
    }
    }
    }



/P/🚀 Step6/MathFunctions/mysqrt.h
==============================================================


.. code-block:: cpp

    #pragma once
    
    namespace mathfunctions {
    namespace detail {
    double mysqrt(double x);
    }
    }



/P/🚀 Step6/tutorial.cxx
====================================================


.. code-block:: cpp

    // A simple program that computes the square root of a number
    #include <cmath>
    #include <iostream>
    #include <string>
    
    #include "MathFunctions.h"
    #include "TutorialConfig.h"
    
    int main(int argc, char* argv[])
    {
      if (argc < 2) {
        // report version
        std::cout << argv[0] << " Version " << Tutorial_VERSION_MAJOR << "."
                  << Tutorial_VERSION_MINOR << std::endl;
        std::cout << "Usage: " << argv[0] << " number" << std::endl;
        return 1;
      }
    
      // convert input to double
      const double inputValue = std::stod(argv[1]);
    
      const double outputValue = mathfunctions::sqrt(inputValue);
    
      std::cout << "The square root of " << inputValue << " is " << outputValue
                << std::endl;
      return 0;
    }



/P/🚀 Step6/TutorialConfig.h.in
===========================================================


.. code-block:: cpp

    // the configured options and settings for Tutorial
    #define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@
    #define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@



/P/🚀 Step7/CMakeLists.txt
======================================================


.. code-block:: cmake

    cmake_minimum_required(VERSION 3.15)
    
    # set the project name and version
    project(Tutorial VERSION 1.0)
    
    # specify the C++ standard
    add_library(tutorial_compiler_flags INTERFACE)
    target_compile_features(tutorial_compiler_flags INTERFACE cxx_std_11)
    
    # add compiler warning flags just when building this project via
    # the BUILD_INTERFACE genex
    set(gcc_like_cxx "$<COMPILE_LANG_AND_ID:CXX,ARMClang,AppleClang,Clang,GNU,LCC>")
    set(msvc_cxx "$<COMPILE_LANG_AND_ID:CXX,MSVC>")
    target_compile_options(tutorial_compiler_flags INTERFACE
      "$<${gcc_like_cxx}:$<BUILD_INTERFACE:-Wall;-Wextra;-Wshadow;-Wformat=2;-Wunused>>"
      "$<${msvc_cxx}:$<BUILD_INTERFACE:-W3>>"
    )
    
    # configure a header file to pass some of the CMake settings
    # to the source code
    configure_file(TutorialConfig.h.in TutorialConfig.h)
    
    # add the MathFunctions library
    add_subdirectory(MathFunctions)
    
    # add the executable
    add_executable(Tutorial tutorial.cxx)
    
    target_link_libraries(Tutorial PUBLIC MathFunctions tutorial_compiler_flags)
    
    # add the binary tree to the search path for include files
    # so that we will find TutorialConfig.h
    target_include_directories(Tutorial PUBLIC
                               "${PROJECT_BINARY_DIR}"
                               )
    
    # add the install targets
    install(TARGETS Tutorial DESTINATION bin)
    install(FILES "${PROJECT_BINARY_DIR}/TutorialConfig.h"
      DESTINATION include
      )
    
    # enable testing
    include(CTest)
    
    # does the application run
    add_test(NAME Runs COMMAND Tutorial 25)
    
    # does the usage message work?
    add_test(NAME Usage COMMAND Tutorial)
    set_tests_properties(Usage
      PROPERTIES PASS_REGULAR_EXPRESSION "Usage:.*number"
      )
    
    # define a function to simplify adding tests
    function(do_test target arg result)
      add_test(NAME Comp${arg} COMMAND ${target} ${arg})
      set_tests_properties(Comp${arg}
        PROPERTIES PASS_REGULAR_EXPRESSION ${result}
        )
    endfunction()
    
    # do a bunch of result based tests
    do_test(Tutorial 4 "4 is 2")
    do_test(Tutorial 9 "9 is 3")
    do_test(Tutorial 5 "5 is 2.236")
    do_test(Tutorial 7 "7 is 2.645")
    do_test(Tutorial 25 "25 is 5")
    do_test(Tutorial -25 "-25 is (-nan|nan|0)")
    do_test(Tutorial 0.0001 "0.0001 is 0.01")



/P/🚀 Step7/CTestConfig.cmake
=========================================================


.. code-block:: cmake

    set(CTEST_PROJECT_NAME "CMakeTutorial")
    set(CTEST_NIGHTLY_START_TIME "00:00:00 EST")
    
    set(CTEST_DROP_METHOD "http")
    set(CTEST_DROP_SITE "my.cdash.org")
    set(CTEST_DROP_LOCATION "/submit.php?project=CMakeTutorial")
    set(CTEST_DROP_SITE_CDASH TRUE)



/P/🚀 Step7/MathFunctions/CMakeLists.txt
====================================================================


.. code-block:: cmake

    add_library(MathFunctions MathFunctions.cxx)
    
    # state that anybody linking to us needs to include the current source dir
    # to find MathFunctions.h, while we don't.
    target_include_directories(MathFunctions
                               INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}
                               )
    
    # should we use our own math functions
    option(USE_MYMATH "Use tutorial provided math implementation" ON)
    if (USE_MYMATH)
      target_compile_definitions(MathFunctions PRIVATE "USE_MYMATH")
    
      # library that just does sqrt
      add_library(SqrtLibrary STATIC
                  mysqrt.cxx
                  )
    
      # link SqrtLibrary to tutorial_compiler_flags
      target_link_libraries(SqrtLibrary PUBLIC tutorial_compiler_flags)
    
      # TODO 1: Include CheckCXXSourceCompiles
    
      # TODO 2: Use check_cxx_source_compiles with simple C++ code to verify
      # availability of:
      # * std::log
      # * std::exp
      # Store the results in HAVE_LOG and HAVE_EXP respectively.
    
      # Hint: Sample C++ code which uses log:
      # #include <cmath>
      # int main() {
      #   std::log(1.0);
      #   return 0;
      # }
    
      # TODO 3: Conditionally on HAVE_LOG and HAVE_EXP, add private compile
      # definitions "HAVE_LOG" and "HAVE_EXP" to the SqrtLibrary target.
    
      # Hint: Use target_compile_definitions()
    
      target_link_libraries(MathFunctions PRIVATE SqrtLibrary)
    endif()
    
    # link MathFunctions to tutorial_compiler_flags
    target_link_libraries(MathFunctions PUBLIC tutorial_compiler_flags)
    
    # install libs
    set(installable_libs MathFunctions tutorial_compiler_flags)
    if(TARGET SqrtLibrary)
      list(APPEND installable_libs SqrtLibrary)
    endif()
    install(TARGETS ${installable_libs} DESTINATION lib)
    # install include headers
    install(FILES MathFunctions.h DESTINATION include)



/P/🚀 Step7/MathFunctions/MathFunctions.cxx
=======================================================================


.. code-block:: cpp

    #include "MathFunctions.h"
    
    #include <cmath>
    
    #ifdef USE_MYMATH
    #  include "mysqrt.h"
    #endif
    
    namespace mathfunctions {
    double sqrt(double x)
    {
    // which square root function should we use?
    #ifdef USE_MYMATH
      return detail::mysqrt(x);
    #else
      return std::sqrt(x);
    #endif
    }
    }



/P/🚀 Step7/MathFunctions/MathFunctions.h
=====================================================================


.. code-block:: cpp

    #pragma once
    
    namespace mathfunctions {
    double sqrt(double x);
    }



/P/🚀 Step7/MathFunctions/mysqrt.cxx
================================================================


.. code-block:: cpp

    #include "mysqrt.h"
    
    #include <iostream>
    
    namespace mathfunctions {
    namespace detail {
    // a hack square root calculation using simple operations
    double mysqrt(double x)
    {
      if (x <= 0) {
        return 0;
      }
    
      // TODO 5: If both HAVE_LOG and HAVE_EXP are defined,  use the following:
      //// double result = std::exp(std::log(x) * 0.5);
      //// std::cout << "Computing sqrt of " << x << " to be " << result
      ////        << " using log and exp" << std::endl;
      // else, use the existing logic.
    
      // Hint: Don't forget the #endif before returning the result!
    
      double result = x;
    
      // do ten iterations
      for (int i = 0; i < 10; ++i) {
        if (result <= 0) {
          result = 0.1;
        }
        double delta = x - (result * result);
        result = result + 0.5 * delta / result;
        std::cout << "Computing sqrt of " << x << " to be " << result << std::endl;
      }
    
      return result;
    }
    }
    }



/P/🚀 Step7/MathFunctions/mysqrt.h
==============================================================


.. code-block:: cpp

    #pragma once
    
    namespace mathfunctions {
    namespace detail {
    double mysqrt(double x);
    }
    }



/P/🚀 Step7/tutorial.cxx
====================================================


.. code-block:: cpp

    // A simple program that computes the square root of a number
    #include <cmath>
    #include <iostream>
    #include <string>
    
    #include "MathFunctions.h"
    #include "TutorialConfig.h"
    
    int main(int argc, char* argv[])
    {
      if (argc < 2) {
        // report version
        std::cout << argv[0] << " Version " << Tutorial_VERSION_MAJOR << "."
                  << Tutorial_VERSION_MINOR << std::endl;
        std::cout << "Usage: " << argv[0] << " number" << std::endl;
        return 1;
      }
    
      // convert input to double
      const double inputValue = std::stod(argv[1]);
    
      const double outputValue = mathfunctions::sqrt(inputValue);
    
      std::cout << "The square root of " << inputValue << " is " << outputValue
                << std::endl;
      return 0;
    }



/P/🚀 Step7/TutorialConfig.h.in
===========================================================


.. code-block:: cpp

    // the configured options and settings for Tutorial
    #define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@
    #define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@



/P/🚀 Step8/CMakeLists.txt
======================================================


.. code-block:: cmake

    cmake_minimum_required(VERSION 3.15)
    
    # set the project name and version
    project(Tutorial VERSION 1.0)
    
    # specify the C++ standard
    add_library(tutorial_compiler_flags INTERFACE)
    target_compile_features(tutorial_compiler_flags INTERFACE cxx_std_11)
    
    # add compiler warning flags just when building this project via
    # the BUILD_INTERFACE genex
    set(gcc_like_cxx "$<COMPILE_LANG_AND_ID:CXX,ARMClang,AppleClang,Clang,GNU,LCC>")
    set(msvc_cxx "$<COMPILE_LANG_AND_ID:CXX,MSVC>")
    target_compile_options(tutorial_compiler_flags INTERFACE
      "$<${gcc_like_cxx}:$<BUILD_INTERFACE:-Wall;-Wextra;-Wshadow;-Wformat=2;-Wunused>>"
      "$<${msvc_cxx}:$<BUILD_INTERFACE:-W3>>"
    )
    
    # configure a header file to pass some of the CMake settings
    # to the source code
    configure_file(TutorialConfig.h.in TutorialConfig.h)
    
    # add the MathFunctions library
    add_subdirectory(MathFunctions)
    
    # add the executable
    add_executable(Tutorial tutorial.cxx)
    
    target_link_libraries(Tutorial PUBLIC MathFunctions tutorial_compiler_flags)
    
    # add the binary tree to the search path for include files
    # so that we will find TutorialConfig.h
    target_include_directories(Tutorial PUBLIC
                               "${PROJECT_BINARY_DIR}"
                               )
    
    # add the install targets
    install(TARGETS Tutorial DESTINATION bin)
    install(FILES "${PROJECT_BINARY_DIR}/TutorialConfig.h"
      DESTINATION include
      )
    
    # enable testing
    include(CTest)
    
    # does the application run
    add_test(NAME Runs COMMAND Tutorial 25)
    
    # does the usage message work?
    add_test(NAME Usage COMMAND Tutorial)
    set_tests_properties(Usage
      PROPERTIES PASS_REGULAR_EXPRESSION "Usage:.*number"
      )
    
    # define a function to simplify adding tests
    function(do_test target arg result)
      add_test(NAME Comp${arg} COMMAND ${target} ${arg})
      set_tests_properties(Comp${arg}
        PROPERTIES PASS_REGULAR_EXPRESSION ${result}
        )
    endfunction()
    
    # do a bunch of result based tests
    do_test(Tutorial 4 "4 is 2")
    do_test(Tutorial 9 "9 is 3")
    do_test(Tutorial 5 "5 is 2.236")
    do_test(Tutorial 7 "7 is 2.645")
    do_test(Tutorial 25 "25 is 5")
    do_test(Tutorial -25 "-25 is (-nan|nan|0)")
    do_test(Tutorial 0.0001 "0.0001 is 0.01")



/P/🚀 Step8/CTestConfig.cmake
=========================================================


.. code-block:: cmake

    set(CTEST_PROJECT_NAME "CMakeTutorial")
    set(CTEST_NIGHTLY_START_TIME "00:00:00 EST")
    
    set(CTEST_DROP_METHOD "http")
    set(CTEST_DROP_SITE "my.cdash.org")
    set(CTEST_DROP_LOCATION "/submit.php?project=CMakeTutorial")
    set(CTEST_DROP_SITE_CDASH TRUE)



/P/🚀 Step8/MathFunctions/CMakeLists.txt
====================================================================


.. code-block:: cmake

    add_library(MathFunctions MathFunctions.cxx)
    
    # should we use our own math functions
    option(USE_MYMATH "Use tutorial provided math implementation" ON)
    if (USE_MYMATH)
      target_compile_definitions(MathFunctions PRIVATE "USE_MYMATH")
    
      # library that just does sqrt
      add_library(SqrtLibrary STATIC
                  mysqrt.cxx
                  )
    
      # link SqrtLibrary to tutorial_compiler_flags
      target_link_libraries(SqrtLibrary PUBLIC tutorial_compiler_flags)
    
      # does this system provide the log and exp functions?
      include(CheckCXXSourceCompiles)
      check_cxx_source_compiles("
        #include <cmath>
        int main() {
          std::log(1.0);
          return 0;
        }
      " HAVE_LOG)
      check_cxx_source_compiles("
        #include <cmath>
        int main() {
          std::exp(1.0);
          return 0;
        }
      " HAVE_EXP)
    
      # add compile definitions
      if(HAVE_LOG AND HAVE_EXP)
        target_compile_definitions(SqrtLibrary
                                   PRIVATE "HAVE_LOG" "HAVE_EXP"
                                   )
      endif()
    
      target_link_libraries(MathFunctions PRIVATE SqrtLibrary)
    endif()
    
    # state that anybody linking to us needs to include the current source dir
    # to find MathFunctions.h, while we don't.
    target_include_directories(MathFunctions
                               INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}
                               )
    
    # link MathFunctions to tutorial_compiler_flags
    target_link_libraries(MathFunctions PUBLIC tutorial_compiler_flags)
    
    # install libs
    set(installable_libs MathFunctions tutorial_compiler_flags)
    if(TARGET SqrtLibrary)
      list(APPEND installable_libs SqrtLibrary)
    endif()
    install(TARGETS ${installable_libs} DESTINATION lib)
    # install include headers
    install(FILES MathFunctions.h DESTINATION include)



/P/🚀 Step8/MathFunctions/MakeTable.cxx
===================================================================


.. code-block:: cpp

    // A simple program that builds a sqrt table
    #include <cmath>
    #include <fstream>
    #include <iostream>
    
    int main(int argc, char* argv[])
    {
      // make sure we have enough arguments
      if (argc < 2) {
        return 1;
      }
    
      std::ofstream fout(argv[1], std::ios_base::out);
      const bool fileOpen = fout.is_open();
      if (fileOpen) {
        fout << "double sqrtTable[] = {" << std::endl;
        for (int i = 0; i < 10; ++i) {
          fout << sqrt(static_cast<double>(i)) << "," << std::endl;
        }
        // close the table with a zero
        fout << "0};" << std::endl;
        fout.close();
      }
      return fileOpen ? 0 : 1; // return 0 if wrote the file
    }



/P/🚀 Step8/MathFunctions/MathFunctions.cxx
=======================================================================


.. code-block:: cpp

    #include "MathFunctions.h"
    
    #include <cmath>
    
    #ifdef USE_MYMATH
    #  include "mysqrt.h"
    #endif
    
    namespace mathfunctions {
    double sqrt(double x)
    {
    // which square root function should we use?
    #ifdef USE_MYMATH
      return detail::mysqrt(x);
    #else
      return std::sqrt(x);
    #endif
    }
    }



/P/🚀 Step8/MathFunctions/MathFunctions.h
=====================================================================


.. code-block:: cpp

    #pragma once
    
    namespace mathfunctions {
    double sqrt(double x);
    }



/P/🚀 Step8/MathFunctions/mysqrt.cxx
================================================================


.. code-block:: cpp

    #include "mysqrt.h"
    
    #include <cmath>
    #include <iostream>
    
    namespace mathfunctions {
    namespace detail {
    // a hack square root calculation using simple operations
    double mysqrt(double x)
    {
      if (x <= 0) {
        return 0;
      }
    
      // if we have both log and exp then use them
    #if defined(HAVE_LOG) && defined(HAVE_EXP)
      double result = std::exp(std::log(x) * 0.5);
      std::cout << "Computing sqrt of " << x << " to be " << result
                << " using log and exp" << std::endl;
    #else
      double result = x;
    
      // do ten iterations
      for (int i = 0; i < 10; ++i) {
        if (result <= 0) {
          result = 0.1;
        }
        double delta = x - (result * result);
        result = result + 0.5 * delta / result;
        std::cout << "Computing sqrt of " << x << " to be " << result << std::endl;
      }
    #endif
      return result;
    }
    }
    }



/P/🚀 Step8/MathFunctions/mysqrt.h
==============================================================


.. code-block:: cpp

    #pragma once
    
    namespace mathfunctions {
    namespace detail {
    double mysqrt(double x);
    }
    }



/P/🚀 Step8/tutorial.cxx
====================================================


.. code-block:: cpp

    // A simple program that computes the square root of a number
    #include <cmath>
    #include <iostream>
    #include <string>
    
    #include "MathFunctions.h"
    #include "TutorialConfig.h"
    
    int main(int argc, char* argv[])
    {
      if (argc < 2) {
        // report version
        std::cout << argv[0] << " Version " << Tutorial_VERSION_MAJOR << "."
                  << Tutorial_VERSION_MINOR << std::endl;
        std::cout << "Usage: " << argv[0] << " number" << std::endl;
        return 1;
      }
    
      // convert input to double
      const double inputValue = std::stod(argv[1]);
    
      const double outputValue = mathfunctions::sqrt(inputValue);
    
      std::cout << "The square root of " << inputValue << " is " << outputValue
                << std::endl;
      return 0;
    }



/P/🚀 Step8/TutorialConfig.h.in
===========================================================


.. code-block:: cpp

    // the configured options and settings for Tutorial
    #define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@
    #define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@



/P/🚀 Step9/CMakeLists.txt
======================================================


.. code-block:: cmake

    cmake_minimum_required(VERSION 3.15)
    
    # set the project name and version
    project(Tutorial VERSION 1.0)
    
    # specify the C++ standard
    add_library(tutorial_compiler_flags INTERFACE)
    target_compile_features(tutorial_compiler_flags INTERFACE cxx_std_11)
    
    # add compiler warning flags just when building this project via
    # the BUILD_INTERFACE genex
    set(gcc_like_cxx "$<COMPILE_LANG_AND_ID:CXX,ARMClang,AppleClang,Clang,GNU,LCC>")
    set(msvc_cxx "$<COMPILE_LANG_AND_ID:CXX,MSVC>")
    target_compile_options(tutorial_compiler_flags INTERFACE
      "$<${gcc_like_cxx}:$<BUILD_INTERFACE:-Wall;-Wextra;-Wshadow;-Wformat=2;-Wunused>>"
      "$<${msvc_cxx}:$<BUILD_INTERFACE:-W3>>"
    )
    
    # configure a header file to pass some of the CMake settings
    # to the source code
    configure_file(TutorialConfig.h.in TutorialConfig.h)
    
    # add the MathFunctions library
    add_subdirectory(MathFunctions)
    
    # add the executable
    add_executable(Tutorial tutorial.cxx)
    
    target_link_libraries(Tutorial PUBLIC MathFunctions tutorial_compiler_flags)
    
    # add the binary tree to the search path for include files
    # so that we will find TutorialConfig.h
    target_include_directories(Tutorial PUBLIC
                               "${PROJECT_BINARY_DIR}"
                               )
    
    # add the install targets
    install(TARGETS Tutorial DESTINATION bin)
    install(FILES "${PROJECT_BINARY_DIR}/TutorialConfig.h"
      DESTINATION include
      )
    
    # enable testing
    include(CTest)
    
    # does the application run
    add_test(NAME Runs COMMAND Tutorial 25)
    
    # does the usage message work?
    add_test(NAME Usage COMMAND Tutorial)
    set_tests_properties(Usage
      PROPERTIES PASS_REGULAR_EXPRESSION "Usage:.*number"
      )
    
    # define a function to simplify adding tests
    function(do_test target arg result)
      add_test(NAME Comp${arg} COMMAND ${target} ${arg})
      set_tests_properties(Comp${arg}
        PROPERTIES PASS_REGULAR_EXPRESSION ${result}
        )
    endfunction()
    
    # do a bunch of result based tests
    do_test(Tutorial 4 "4 is 2")
    do_test(Tutorial 9 "9 is 3")
    do_test(Tutorial 5 "5 is 2.236")
    do_test(Tutorial 7 "7 is 2.645")
    do_test(Tutorial 25 "25 is 5")
    do_test(Tutorial -25 "-25 is (-nan|nan|0)")
    do_test(Tutorial 0.0001 "0.0001 is 0.01")



/P/🚀 Step9/CTestConfig.cmake
=========================================================


.. code-block:: cmake

    set(CTEST_PROJECT_NAME "CMakeTutorial")
    set(CTEST_NIGHTLY_START_TIME "00:00:00 EST")
    
    set(CTEST_DROP_METHOD "http")
    set(CTEST_DROP_SITE "my.cdash.org")
    set(CTEST_DROP_LOCATION "/submit.php?project=CMakeTutorial")
    set(CTEST_DROP_SITE_CDASH TRUE)



/P/🚀 Step9/License.txt
===================================================


.. code-block:: cmake

    This is the open source License.txt file introduced in
    CMake/Tutorial/Step9...



/P/🚀 Step9/MathFunctions/CMakeLists.txt
====================================================================


.. code-block:: cmake

    add_library(MathFunctions MathFunctions.cxx)
    
    # state that anybody linking to us needs to include the current source dir
    # to find MathFunctions.h, while we don't.
    target_include_directories(MathFunctions
                               INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}
                               )
    
    # should we use our own math functions
    option(USE_MYMATH "Use tutorial provided math implementation" ON)
    if (USE_MYMATH)
      target_compile_definitions(MathFunctions PRIVATE "USE_MYMATH")
    
      # generate Table.h
      include(MakeTable.cmake)
    
      # library that just does sqrt
      add_library(SqrtLibrary STATIC
                  mysqrt.cxx
                  ${CMAKE_CURRENT_BINARY_DIR}/Table.h
                  )
    
      # state that we depend on our binary dir to find Table.h
      target_include_directories(SqrtLibrary PRIVATE
                                 ${CMAKE_CURRENT_BINARY_DIR}
                                 )
    
      # link SqrtLibrary to tutorial_compiler_flags
      target_link_libraries(SqrtLibrary PUBLIC tutorial_compiler_flags)
    
      target_link_libraries(MathFunctions PRIVATE SqrtLibrary)
    endif()
    
    # link MathFunctions to tutorial_compiler_flags
    target_link_libraries(MathFunctions PUBLIC tutorial_compiler_flags)
    
    # install libs
    set(installable_libs MathFunctions tutorial_compiler_flags)
    if(TARGET SqrtLibrary)
      list(APPEND installable_libs SqrtLibrary)
    endif()
    install(TARGETS ${installable_libs} DESTINATION lib)
    # install include headers
    install(FILES MathFunctions.h DESTINATION include)



/P/🚀 Step9/MathFunctions/MakeTable.cmake
=====================================================================


.. code-block:: cmake

    # first we add the executable that generates the table
    add_executable(MakeTable MakeTable.cxx)
    target_link_libraries(MakeTable PRIVATE tutorial_compiler_flags)
    
    # add the command to generate the source code
    add_custom_command(
      OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/Table.h
      COMMAND MakeTable ${CMAKE_CURRENT_BINARY_DIR}/Table.h
      DEPENDS MakeTable
      )



/P/🚀 Step9/MathFunctions/MakeTable.cxx
===================================================================


.. code-block:: cpp

    // A simple program that builds a sqrt table
    #include <cmath>
    #include <fstream>
    #include <iostream>
    
    int main(int argc, char* argv[])
    {
      // make sure we have enough arguments
      if (argc < 2) {
        return 1;
      }
    
      std::ofstream fout(argv[1], std::ios_base::out);
      const bool fileOpen = fout.is_open();
      if (fileOpen) {
        fout << "double sqrtTable[] = {" << std::endl;
        for (int i = 0; i < 10; ++i) {
          fout << sqrt(static_cast<double>(i)) << "," << std::endl;
        }
        // close the table with a zero
        fout << "0};" << std::endl;
        fout.close();
      }
      return fileOpen ? 0 : 1; // return 0 if wrote the file
    }



/P/🚀 Step9/MathFunctions/MathFunctions.cxx
=======================================================================


.. code-block:: cpp

    #include "MathFunctions.h"
    
    #include <cmath>
    
    #ifdef USE_MYMATH
    #  include "mysqrt.h"
    #endif
    
    namespace mathfunctions {
    double sqrt(double x)
    {
    // which square root function should we use?
    #ifdef USE_MYMATH
      return detail::mysqrt(x);
    #else
      return std::sqrt(x);
    #endif
    }
    }



/P/🚀 Step9/MathFunctions/MathFunctions.h
=====================================================================


.. code-block:: cpp

    #pragma once
    
    namespace mathfunctions {
    double sqrt(double x);
    }



/P/🚀 Step9/MathFunctions/mysqrt.cxx
================================================================


.. code-block:: cpp

    #include "mysqrt.h"
    
    #include <iostream>
    
    // include the generated table
    #include "Table.h"
    
    namespace mathfunctions {
    namespace detail {
    // a hack square root calculation using simple operations
    double mysqrt(double x)
    {
      if (x <= 0) {
        return 0;
      }
    
      // use the table to help find an initial value
      double result = x;
      if (x >= 1 && x < 10) {
        std::cout << "Use the table to help find an initial value " << std::endl;
        result = sqrtTable[static_cast<int>(x)];
      }
    
      // do ten iterations
      for (int i = 0; i < 10; ++i) {
        if (result <= 0) {
          result = 0.1;
        }
        double delta = x - (result * result);
        result = result + 0.5 * delta / result;
        std::cout << "Computing sqrt of " << x << " to be " << result << std::endl;
      }
    
      return result;
    }
    }
    }



/P/🚀 Step9/MathFunctions/mysqrt.h
==============================================================


.. code-block:: cpp

    #pragma once
    
    namespace mathfunctions {
    namespace detail {
    double mysqrt(double x);
    }
    }



/P/🚀 Step9/tutorial.cxx
====================================================


.. code-block:: cpp

    // A simple program that computes the square root of a number
    #include <cmath>
    #include <iostream>
    #include <string>
    
    #include "MathFunctions.h"
    #include "TutorialConfig.h"
    
    int main(int argc, char* argv[])
    {
      if (argc < 2) {
        // report version
        std::cout << argv[0] << " Version " << Tutorial_VERSION_MAJOR << "."
                  << Tutorial_VERSION_MINOR << std::endl;
        std::cout << "Usage: " << argv[0] << " number" << std::endl;
        return 1;
      }
    
      // convert input to double
      const double inputValue = std::stod(argv[1]);
    
      const double outputValue = mathfunctions::sqrt(inputValue);
    
      std::cout << "The square root of " << inputValue << " is " << outputValue
                << std::endl;
      return 0;
    }



/P/🚀 Step9/TutorialConfig.h.in
===========================================================


.. code-block:: cpp

    // the configured options and settings for Tutorial
    #define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@
    #define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@



/P/🚀 Step10/CMakeLists.txt
=======================================================


.. code-block:: cmake

    cmake_minimum_required(VERSION 3.15)
    
    # set the project name and version
    project(Tutorial VERSION 1.0)
    
    # specify the C++ standard
    add_library(tutorial_compiler_flags INTERFACE)
    target_compile_features(tutorial_compiler_flags INTERFACE cxx_std_11)
    
    # add compiler warning flags just when building this project via
    # the BUILD_INTERFACE genex
    set(gcc_like_cxx "$<COMPILE_LANG_AND_ID:CXX,ARMClang,AppleClang,Clang,GNU,LCC>")
    set(msvc_cxx "$<COMPILE_LANG_AND_ID:CXX,MSVC>")
    target_compile_options(tutorial_compiler_flags INTERFACE
      "$<${gcc_like_cxx}:$<BUILD_INTERFACE:-Wall;-Wextra;-Wshadow;-Wformat=2;-Wunused>>"
      "$<${msvc_cxx}:$<BUILD_INTERFACE:-W3>>"
    )
    
    # configure a header file to pass the version number only
    configure_file(TutorialConfig.h.in TutorialConfig.h)
    
    # add the MathFunctions library
    add_subdirectory(MathFunctions)
    
    # add the executable
    add_executable(Tutorial tutorial.cxx)
    target_link_libraries(Tutorial PUBLIC MathFunctions tutorial_compiler_flags)
    
    # add the binary tree to the search path for include files
    # so that we will find TutorialConfig.h
    target_include_directories(Tutorial PUBLIC
                               "${PROJECT_BINARY_DIR}"
                               )
    
    # add the install targets
    install(TARGETS Tutorial DESTINATION bin)
    install(FILES "${PROJECT_BINARY_DIR}/TutorialConfig.h"
      DESTINATION include
      )
    
    # enable testing
    include(CTest)
    
    # does the application run
    add_test(NAME Runs COMMAND Tutorial 25)
    
    # does the usage message work?
    add_test(NAME Usage COMMAND Tutorial)
    set_tests_properties(Usage
      PROPERTIES PASS_REGULAR_EXPRESSION "Usage:.*number"
      )
    
    # define a function to simplify adding tests
    function(do_test target arg result)
      add_test(NAME Comp${arg} COMMAND ${target} ${arg})
      set_tests_properties(Comp${arg}
        PROPERTIES PASS_REGULAR_EXPRESSION ${result}
        )
    endfunction()
    
    # do a bunch of result based tests
    do_test(Tutorial 4 "4 is 2")
    do_test(Tutorial 9 "9 is 3")
    do_test(Tutorial 5 "5 is 2.236")
    do_test(Tutorial 7 "7 is 2.645")
    do_test(Tutorial 25 "25 is 5")
    do_test(Tutorial -25 "-25 is (-nan|nan|0)")
    do_test(Tutorial 0.0001 "0.0001 is 0.01")
    
    # setup installer
    include(InstallRequiredSystemLibraries)
    set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/License.txt")
    set(CPACK_PACKAGE_VERSION_MAJOR "${Tutorial_VERSION_MAJOR}")
    set(CPACK_PACKAGE_VERSION_MINOR "${Tutorial_VERSION_MINOR}")
    set(CPACK_SOURCE_GENERATOR "TGZ")
    include(CPack)



/P/🚀 Step10/CTestConfig.cmake
==========================================================


.. code-block:: cmake

    set(CTEST_PROJECT_NAME "CMakeTutorial")
    set(CTEST_NIGHTLY_START_TIME "00:00:00 EST")
    
    set(CTEST_DROP_METHOD "http")
    set(CTEST_DROP_SITE "my.cdash.org")
    set(CTEST_DROP_LOCATION "/submit.php?project=CMakeTutorial")
    set(CTEST_DROP_SITE_CDASH TRUE)



/P/🚀 Step10/License.txt
====================================================


.. code-block:: cmake

    This is the open source License.txt file introduced in
    CMake/Tutorial/Step9...



/P/🚀 Step10/MathFunctions/CMakeLists.txt
=====================================================================


.. code-block:: cmake

    # add the library that runs
    add_library(MathFunctions MathFunctions.cxx)
    
    # state that anybody linking to us needs to include the current source dir
    # to find MathFunctions.h, while we don't.
    target_include_directories(MathFunctions
                               INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}
                               )
    
    # should we use our own math functions
    option(USE_MYMATH "Use tutorial provided math implementation" ON)
    if(USE_MYMATH)
    
      target_compile_definitions(MathFunctions PRIVATE "USE_MYMATH")
    
      include(MakeTable.cmake) # generates Table.h
    
      # library that just does sqrt
      add_library(SqrtLibrary STATIC
                  mysqrt.cxx
                  ${CMAKE_CURRENT_BINARY_DIR}/Table.h
                  )
    
      # state that we depend on our binary dir to find Table.h
      target_include_directories(SqrtLibrary PRIVATE
                                 ${CMAKE_CURRENT_BINARY_DIR}
                                 )
    
      # link SqrtLibrary to tutorial_compiler_flags
      target_link_libraries(SqrtLibrary PUBLIC tutorial_compiler_flags)
    
      target_link_libraries(MathFunctions PRIVATE SqrtLibrary)
    endif()
    
    # link MathFunctions to tutorial_compiler_flags
    target_link_libraries(MathFunctions PUBLIC tutorial_compiler_flags)
    
    # install libs
    set(installable_libs MathFunctions tutorial_compiler_flags)
    if(TARGET SqrtLibrary)
      list(APPEND installable_libs SqrtLibrary)
    endif()
    install(TARGETS ${installable_libs} DESTINATION lib)
    # install include headers
    install(FILES MathFunctions.h DESTINATION include)



/P/🚀 Step10/MathFunctions/MakeTable.cmake
======================================================================


.. code-block:: cmake

    # first we add the executable that generates the table
    add_executable(MakeTable MakeTable.cxx)
    target_link_libraries(MakeTable PRIVATE tutorial_compiler_flags)
    
    # add the command to generate the source code
    add_custom_command(
      OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/Table.h
      COMMAND MakeTable ${CMAKE_CURRENT_BINARY_DIR}/Table.h
      DEPENDS MakeTable
      )



/P/🚀 Step10/MathFunctions/MakeTable.cxx
====================================================================


.. code-block:: cpp

    // A simple program that builds a sqrt table
    #include <cmath>
    #include <fstream>
    #include <iostream>
    
    int main(int argc, char* argv[])
    {
      // make sure we have enough arguments
      if (argc < 2) {
        return 1;
      }
    
      std::ofstream fout(argv[1], std::ios_base::out);
      const bool fileOpen = fout.is_open();
      if (fileOpen) {
        fout << "double sqrtTable[] = {" << std::endl;
        for (int i = 0; i < 10; ++i) {
          fout << sqrt(static_cast<double>(i)) << "," << std::endl;
        }
        // close the table with a zero
        fout << "0};" << std::endl;
        fout.close();
      }
      return fileOpen ? 0 : 1; // return 0 if wrote the file
    }



/P/🚀 Step10/MathFunctions/MathFunctions.cxx
========================================================================


.. code-block:: cpp

    
    #include "MathFunctions.h"
    
    #include <cmath>
    
    #ifdef USE_MYMATH
    #  include "mysqrt.h"
    #endif
    
    namespace mathfunctions {
    double sqrt(double x)
    {
    // which square root function should we use?
    #ifdef USE_MYMATH
      return detail::mysqrt(x);
    #else
      return std::sqrt(x);
    #endif
    }
    }



/P/🚀 Step10/MathFunctions/MathFunctions.h
======================================================================


.. code-block:: cpp

    namespace mathfunctions {
    double sqrt(double x);
    }



/P/🚀 Step10/MathFunctions/mysqrt.cxx
=================================================================


.. code-block:: cpp

    #include <iostream>
    
    #include "MathFunctions.h"
    
    // include the generated table
    #include "Table.h"
    
    namespace mathfunctions {
    namespace detail {
    // a hack square root calculation using simple operations
    double mysqrt(double x)
    {
      if (x <= 0) {
        return 0;
      }
    
      // use the table to help find an initial value
      double result = x;
      if (x >= 1 && x < 10) {
        std::cout << "Use the table to help find an initial value " << std::endl;
        result = sqrtTable[static_cast<int>(x)];
      }
    
      // do ten iterations
      for (int i = 0; i < 10; ++i) {
        if (result <= 0) {
          result = 0.1;
        }
        double delta = x - (result * result);
        result = result + 0.5 * delta / result;
        std::cout << "Computing sqrt of " << x << " to be " << result << std::endl;
      }
    
      return result;
    }
    }
    }



/P/🚀 Step10/MathFunctions/mysqrt.h
===============================================================


.. code-block:: cpp

    
    namespace mathfunctions {
    namespace detail {
    double mysqrt(double x);
    }
    }



/P/🚀 Step10/tutorial.cxx
=====================================================


.. code-block:: cpp

    // A simple program that computes the square root of a number
    #include <iostream>
    #include <sstream>
    #include <string>
    
    #include "MathFunctions.h"
    #include "TutorialConfig.h"
    
    int main(int argc, char* argv[])
    {
      if (argc < 2) {
        // report version
        std::cout << argv[0] << " Version " << Tutorial_VERSION_MAJOR << "."
                  << Tutorial_VERSION_MINOR << std::endl;
        std::cout << "Usage: " << argv[0] << " number" << std::endl;
        return 1;
      }
    
      // convert input to double
      const double inputValue = std::stod(argv[1]);
    
      const double outputValue = mathfunctions::sqrt(inputValue);
    
      std::cout << "The square root of " << inputValue << " is " << outputValue
                << std::endl;
      return 0;
    }



/P/🚀 Step10/TutorialConfig.h.in
============================================================


.. code-block:: cpp

    // the configured options and settings for Tutorial
    #define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@
    #define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@



/P/🚀 Step11/CMakeLists.txt
=======================================================


.. code-block:: cmake

    cmake_minimum_required(VERSION 3.15)
    
    # set the project name and version
    project(Tutorial VERSION 1.0)
    
    # specify the C++ standard
    add_library(tutorial_compiler_flags INTERFACE)
    target_compile_features(tutorial_compiler_flags INTERFACE cxx_std_11)
    
    # add compiler warning flags just when building this project via
    # the BUILD_INTERFACE genex
    set(gcc_like_cxx "$<COMPILE_LANG_AND_ID:CXX,ARMClang,AppleClang,Clang,GNU,LCC>")
    set(msvc_cxx "$<COMPILE_LANG_AND_ID:CXX,MSVC>")
    target_compile_options(tutorial_compiler_flags INTERFACE
      "$<${gcc_like_cxx}:$<BUILD_INTERFACE:-Wall;-Wextra;-Wshadow;-Wformat=2;-Wunused>>"
      "$<${msvc_cxx}:$<BUILD_INTERFACE:-W3>>"
    )
    
    # control where the static and shared libraries are built so that on windows
    # we don't need to tinker with the path to run the executable
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
    
    option(BUILD_SHARED_LIBS "Build using shared libraries" ON)
    
    # configure a header file to pass the version number only
    configure_file(TutorialConfig.h.in TutorialConfig.h)
    
    # add the MathFunctions library
    add_subdirectory(MathFunctions)
    
    # add the executable
    add_executable(Tutorial tutorial.cxx)
    target_link_libraries(Tutorial PUBLIC MathFunctions tutorial_compiler_flags)
    
    # add the binary tree to the search path for include files
    # so that we will find TutorialConfig.h
    target_include_directories(Tutorial PUBLIC
                               "${PROJECT_BINARY_DIR}"
                               )
    
    # add the install targets
    install(TARGETS Tutorial DESTINATION bin)
    install(FILES "${PROJECT_BINARY_DIR}/TutorialConfig.h"
      DESTINATION include
      )
    
    # enable testing
    include(CTest)
    
    # does the application run
    add_test(NAME Runs COMMAND Tutorial 25)
    
    # does the usage message work?
    add_test(NAME Usage COMMAND Tutorial)
    set_tests_properties(Usage
      PROPERTIES PASS_REGULAR_EXPRESSION "Usage:.*number"
      )
    
    # define a function to simplify adding tests
    function(do_test target arg result)
      add_test(NAME Comp${arg} COMMAND ${target} ${arg})
      set_tests_properties(Comp${arg}
        PROPERTIES PASS_REGULAR_EXPRESSION ${result}
        )
    endfunction()
    
    # do a bunch of result based tests
    do_test(Tutorial 4 "4 is 2")
    do_test(Tutorial 9 "9 is 3")
    do_test(Tutorial 5 "5 is 2.236")
    do_test(Tutorial 7 "7 is 2.645")
    do_test(Tutorial 25 "25 is 5")
    do_test(Tutorial -25 "-25 is (-nan|nan|0)")
    do_test(Tutorial 0.0001 "0.0001 is 0.01")
    
    # setup installer
    include(InstallRequiredSystemLibraries)
    set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/License.txt")
    set(CPACK_PACKAGE_VERSION_MAJOR "${Tutorial_VERSION_MAJOR}")
    set(CPACK_PACKAGE_VERSION_MINOR "${Tutorial_VERSION_MINOR}")
    set(CPACK_SOURCE_GENERATOR "TGZ")
    include(CPack)



/P/🚀 Step11/CTestConfig.cmake
==========================================================


.. code-block:: cmake

    set(CTEST_PROJECT_NAME "CMakeTutorial")
    set(CTEST_NIGHTLY_START_TIME "00:00:00 EST")
    
    set(CTEST_DROP_METHOD "http")
    set(CTEST_DROP_SITE "my.cdash.org")
    set(CTEST_DROP_LOCATION "/submit.php?project=CMakeTutorial")
    set(CTEST_DROP_SITE_CDASH TRUE)



/P/🚀 Step11/License.txt
====================================================


.. code-block:: cmake

    This is the open source License.txt file introduced in
    CMake/Tutorial/Step9...



/P/🚀 Step11/MathFunctions/CMakeLists.txt
=====================================================================


.. code-block:: cmake

    # add the library that runs
    add_library(MathFunctions MathFunctions.cxx)
    
    # state that anybody linking to us needs to include the current source dir
    # to find MathFunctions.h, while we don't.
    target_include_directories(MathFunctions
                               INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}
                               )
    
    # should we use our own math functions
    option(USE_MYMATH "Use tutorial provided math implementation" ON)
    if(USE_MYMATH)
    
      target_compile_definitions(MathFunctions PRIVATE "USE_MYMATH")
    
      include(MakeTable.cmake) # generates Table.h
    
      # library that just does sqrt
      add_library(SqrtLibrary STATIC
                  mysqrt.cxx
                  ${CMAKE_CURRENT_BINARY_DIR}/Table.h
                  )
    
      # state that we depend on our binary dir to find Table.h
      target_include_directories(SqrtLibrary PRIVATE
                                 ${CMAKE_CURRENT_BINARY_DIR}
                                 )
    
      # state that SqrtLibrary need PIC when the default is shared libraries
      set_target_properties(SqrtLibrary PROPERTIES
                            POSITION_INDEPENDENT_CODE ${BUILD_SHARED_LIBS}
                            )
    
      # link SqrtLibrary to tutorial_compiler_flags
      target_link_libraries(SqrtLibrary PUBLIC tutorial_compiler_flags)
    
      target_link_libraries(MathFunctions PRIVATE SqrtLibrary)
    endif()
    
    # link MathFunctions to tutorial_compiler_flags
    target_link_libraries(MathFunctions PUBLIC tutorial_compiler_flags)
    
    # define the symbol stating we are using the declspec(dllexport) when
    # building on windows
    target_compile_definitions(MathFunctions PRIVATE "EXPORTING_MYMATH")
    
    # install libs
    set(installable_libs MathFunctions tutorial_compiler_flags)
    if(TARGET SqrtLibrary)
      list(APPEND installable_libs SqrtLibrary)
    endif()
    install(TARGETS ${installable_libs} DESTINATION lib)
    # install include headers
    install(FILES MathFunctions.h DESTINATION include)



/P/🚀 Step11/MathFunctions/MakeTable.cmake
======================================================================


.. code-block:: cmake

    # first we add the executable that generates the table
    add_executable(MakeTable MakeTable.cxx)
    target_link_libraries(MakeTable PRIVATE tutorial_compiler_flags)
    
    # add the command to generate the source code
    add_custom_command(
      OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/Table.h
      COMMAND MakeTable ${CMAKE_CURRENT_BINARY_DIR}/Table.h
      DEPENDS MakeTable
      )



/P/🚀 Step11/MathFunctions/MakeTable.cxx
====================================================================


.. code-block:: cpp

    // A simple program that builds a sqrt table
    #include <cmath>
    #include <fstream>
    #include <iostream>
    
    int main(int argc, char* argv[])
    {
      // make sure we have enough arguments
      if (argc < 2) {
        return 1;
      }
    
      std::ofstream fout(argv[1], std::ios_base::out);
      const bool fileOpen = fout.is_open();
      if (fileOpen) {
        fout << "double sqrtTable[] = {" << std::endl;
        for (int i = 0; i < 10; ++i) {
          fout << sqrt(static_cast<double>(i)) << "," << std::endl;
        }
        // close the table with a zero
        fout << "0};" << std::endl;
        fout.close();
      }
      return fileOpen ? 0 : 1; // return 0 if wrote the file
    }



/P/🚀 Step11/MathFunctions/MathFunctions.cxx
========================================================================


.. code-block:: cpp

    
    #include "MathFunctions.h"
    
    #include <cmath>
    
    #ifdef USE_MYMATH
    #  include "mysqrt.h"
    #endif
    
    namespace mathfunctions {
    double sqrt(double x)
    {
    // which square root function should we use?
    #ifdef USE_MYMATH
      return detail::mysqrt(x);
    #else
      return std::sqrt(x);
    #endif
    }
    }



/P/🚀 Step11/MathFunctions/MathFunctions.h
======================================================================


.. code-block:: cpp

    
    #if defined(_WIN32)
    #  if defined(EXPORTING_MYMATH)
    #    define DECLSPEC __declspec(dllexport)
    #  else
    #    define DECLSPEC __declspec(dllimport)
    #  endif
    #else // non windows
    #  define DECLSPEC
    #endif
    
    namespace mathfunctions {
    double DECLSPEC sqrt(double x);
    }



/P/🚀 Step11/MathFunctions/mysqrt.cxx
=================================================================


.. code-block:: cpp

    #include <iostream>
    
    #include "MathFunctions.h"
    
    // include the generated table
    #include "Table.h"
    
    namespace mathfunctions {
    namespace detail {
    // a hack square root calculation using simple operations
    double mysqrt(double x)
    {
      if (x <= 0) {
        return 0;
      }
    
      // use the table to help find an initial value
      double result = x;
      if (x >= 1 && x < 10) {
        std::cout << "Use the table to help find an initial value " << std::endl;
        result = sqrtTable[static_cast<int>(x)];
      }
    
      // do ten iterations
      for (int i = 0; i < 10; ++i) {
        if (result <= 0) {
          result = 0.1;
        }
        double delta = x - (result * result);
        result = result + 0.5 * delta / result;
        std::cout << "Computing sqrt of " << x << " to be " << result << std::endl;
      }
    
      return result;
    }
    }
    }



/P/🚀 Step11/MathFunctions/mysqrt.h
===============================================================


.. code-block:: cpp

    
    namespace mathfunctions {
    namespace detail {
    double mysqrt(double x);
    }
    }



/P/🚀 Step11/tutorial.cxx
=====================================================


.. code-block:: cpp

    // A simple program that computes the square root of a number
    #include <iostream>
    #include <sstream>
    #include <string>
    
    #include "MathFunctions.h"
    #include "TutorialConfig.h"
    
    int main(int argc, char* argv[])
    {
      if (argc < 2) {
        // report version
        std::cout << argv[0] << " Version " << Tutorial_VERSION_MAJOR << "."
                  << Tutorial_VERSION_MINOR << std::endl;
        std::cout << "Usage: " << argv[0] << " number" << std::endl;
        return 1;
      }
    
      // convert input to double
      const double inputValue = std::stod(argv[1]);
    
      const double outputValue = mathfunctions::sqrt(inputValue);
    
      std::cout << "The square root of " << inputValue << " is " << outputValue
                << std::endl;
      return 0;
    }



/P/🚀 Step11/TutorialConfig.h.in
============================================================


.. code-block:: cpp

    // the configured options and settings for Tutorial
    #define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@
    #define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@



/P/🚀 Step12/CMakeLists.txt
=======================================================


.. code-block:: cmake

    cmake_minimum_required(VERSION 3.15)
    
    # set the project name and version
    project(Tutorial VERSION 1.0)
    
    add_library(tutorial_compiler_flags INTERFACE)
    target_compile_features(tutorial_compiler_flags INTERFACE cxx_std_11)
    
    # add compiler warning flags just when building this project via
    # the BUILD_INTERFACE genex
    set(gcc_like_cxx "$<COMPILE_LANG_AND_ID:CXX,ARMClang,AppleClang,Clang,GNU,LCC>")
    set(msvc_cxx "$<COMPILE_LANG_AND_ID:CXX,MSVC>")
    target_compile_options(tutorial_compiler_flags INTERFACE
      "$<${gcc_like_cxx}:$<BUILD_INTERFACE:-Wall;-Wextra;-Wshadow;-Wformat=2;-Wunused>>"
      "$<${msvc_cxx}:$<BUILD_INTERFACE:-W3>>"
    )
    
    # control where the static and shared libraries are built so that on windows
    # we don't need to tinker with the path to run the executable
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
    
    option(BUILD_SHARED_LIBS "Build using shared libraries" ON)
    
    if(APPLE)
      set(CMAKE_INSTALL_RPATH "@executable_path/../lib")
    elseif(UNIX)
      set(CMAKE_INSTALL_RPATH "$ORIGIN/../lib")
    endif()
    
    # configure a header file to pass the version number only
    configure_file(TutorialConfig.h.in TutorialConfig.h)
    
    # add the MathFunctions library
    add_subdirectory(MathFunctions)
    
    # add the executable
    add_executable(Tutorial tutorial.cxx)
    target_link_libraries(Tutorial PUBLIC MathFunctions tutorial_compiler_flags)
    
    # add the binary tree to the search path for include files
    # so that we will find TutorialConfig.h
    target_include_directories(Tutorial PUBLIC
                               "${PROJECT_BINARY_DIR}"
                               )
    
    # add the install targets
    install(TARGETS Tutorial DESTINATION bin)
    install(FILES "${PROJECT_BINARY_DIR}/TutorialConfig.h"
      DESTINATION include
      )
    
    # enable testing
    enable_testing()
    
    # does the application run
    add_test(NAME Runs COMMAND Tutorial 25)
    
    # does the usage message work?
    add_test(NAME Usage COMMAND Tutorial)
    set_tests_properties(Usage
      PROPERTIES PASS_REGULAR_EXPRESSION "Usage:.*number"
      )
    
    # define a function to simplify adding tests
    function(do_test target arg result)
      add_test(NAME Comp${arg} COMMAND ${target} ${arg})
      set_tests_properties(Comp${arg}
        PROPERTIES PASS_REGULAR_EXPRESSION ${result}
        )
    endfunction()
    
    # do a bunch of result based tests
    do_test(Tutorial 4 "4 is 2")
    do_test(Tutorial 9 "9 is 3")
    do_test(Tutorial 5 "5 is 2.236")
    do_test(Tutorial 7 "7 is 2.645")
    do_test(Tutorial 25 "25 is 5")
    do_test(Tutorial -25 "-25 is (-nan|nan|0)")
    do_test(Tutorial 0.0001 "0.0001 is 0.01")
    
    # setup installer
    include(InstallRequiredSystemLibraries)
    set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/License.txt")
    set(CPACK_PACKAGE_VERSION_MAJOR "${Tutorial_VERSION_MAJOR}")
    set(CPACK_PACKAGE_VERSION_MINOR "${Tutorial_VERSION_MINOR}")
    include(CPack)
    
    # install the configuration targets
    install(EXPORT MathFunctionsTargets
      FILE MathFunctionsTargets.cmake
      DESTINATION lib/cmake/MathFunctions
    )
    
    include(CMakePackageConfigHelpers)
    # generate the config file that includes the exports
    configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in
      "${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsConfig.cmake"
      INSTALL_DESTINATION "lib/cmake/MathFunctions"
      NO_SET_AND_CHECK_MACRO
      NO_CHECK_REQUIRED_COMPONENTS_MACRO
      )
    # generate the version file for the config file
    write_basic_package_version_file(
      "${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsConfigVersion.cmake"
      VERSION "${Tutorial_VERSION_MAJOR}.${Tutorial_VERSION_MINOR}"
      COMPATIBILITY AnyNewerVersion
    )
    
    # install the generated configuration files
    install(FILES
      ${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsConfig.cmake
      ${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsConfigVersion.cmake
      DESTINATION lib/cmake/MathFunctions
      )
    
    # generate the export targets for the build tree
    # needs to be after the install(TARGETS) command
    export(EXPORT MathFunctionsTargets
      FILE "${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsTargets.cmake"
    )



/P/🚀 Step12/Config.cmake.in
========================================================


.. code-block:: cmake

    
    @PACKAGE_INIT@
    
    include ( "${CMAKE_CURRENT_LIST_DIR}/MathFunctionsTargets.cmake" )



/P/🚀 Step12/CTestConfig.cmake
==========================================================


.. code-block:: cmake

    set(CTEST_PROJECT_NAME "CMakeTutorial")
    set(CTEST_NIGHTLY_START_TIME "00:00:00 EST")
    
    set(CTEST_DROP_METHOD "http")
    set(CTEST_DROP_SITE "my.cdash.org")
    set(CTEST_DROP_LOCATION "/submit.php?project=CMakeTutorial")
    set(CTEST_DROP_SITE_CDASH TRUE)



/P/🚀 Step12/License.txt
====================================================


.. code-block:: cmake

    This is the open source License.txt file introduced in
    CMake/Tutorial/Step9...



/P/🚀 Step12/MathFunctions/CMakeLists.txt
=====================================================================


.. code-block:: cmake

    # add the library that runs
    add_library(MathFunctions MathFunctions.cxx)
    
    # state that anybody linking to us needs to include the current source dir
    # to find MathFunctions.h, while we don't.
    target_include_directories(MathFunctions
                               INTERFACE
                                $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
                                $<INSTALL_INTERFACE:include>
                               )
    
    # should we use our own math functions
    option(USE_MYMATH "Use tutorial provided math implementation" ON)
    if(USE_MYMATH)
    
      target_compile_definitions(MathFunctions PRIVATE "USE_MYMATH")
    
      include(MakeTable.cmake) # generates Table.h
    
      # library that just does sqrt
      add_library(SqrtLibrary STATIC
                  mysqrt.cxx
                  ${CMAKE_CURRENT_BINARY_DIR}/Table.h
                  )
    
      # state that we depend on our binary dir to find Table.h
      target_include_directories(SqrtLibrary PRIVATE
                                 ${CMAKE_CURRENT_BINARY_DIR}
                                 )
    
      # state that SqrtLibrary need PIC when the default is shared libraries
      set_target_properties(SqrtLibrary PROPERTIES
                            POSITION_INDEPENDENT_CODE ${BUILD_SHARED_LIBS}
                            )
    
      # link SqrtLibrary to tutorial_compiler_flags
      target_link_libraries(SqrtLibrary PUBLIC tutorial_compiler_flags)
    
      target_link_libraries(MathFunctions PRIVATE SqrtLibrary)
    endif()
    
    # link MathFunctions to tutorial_compiler_flags
    target_link_libraries(MathFunctions PUBLIC tutorial_compiler_flags)
    
    # define the symbol stating we are using the declspec(dllexport) when
    # building on windows
    target_compile_definitions(MathFunctions PRIVATE "EXPORTING_MYMATH")
    
    # install libs
    set(installable_libs MathFunctions tutorial_compiler_flags)
    if(TARGET SqrtLibrary)
      list(APPEND installable_libs SqrtLibrary)
    endif()
    install(TARGETS ${installable_libs}
            EXPORT MathFunctionsTargets
            DESTINATION lib)
    # install include headers
    install(FILES MathFunctions.h DESTINATION include)



/P/🚀 Step12/MathFunctions/MakeTable.cmake
======================================================================


.. code-block:: cmake

    # first we add the executable that generates the table
    add_executable(MakeTable MakeTable.cxx)
    target_link_libraries(MakeTable PRIVATE tutorial_compiler_flags)
    
    # add the command to generate the source code
    add_custom_command(
      OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/Table.h
      COMMAND MakeTable ${CMAKE_CURRENT_BINARY_DIR}/Table.h
      DEPENDS MakeTable
      )



/P/🚀 Step12/MathFunctions/MakeTable.cxx
====================================================================


.. code-block:: cpp

    // A simple program that builds a sqrt table
    #include <cmath>
    #include <fstream>
    #include <iostream>
    
    int main(int argc, char* argv[])
    {
      // make sure we have enough arguments
      if (argc < 2) {
        return 1;
      }
    
      std::ofstream fout(argv[1], std::ios_base::out);
      const bool fileOpen = fout.is_open();
      if (fileOpen) {
        fout << "double sqrtTable[] = {" << std::endl;
        for (int i = 0; i < 10; ++i) {
          fout << sqrt(static_cast<double>(i)) << "," << std::endl;
        }
        // close the table with a zero
        fout << "0};" << std::endl;
        fout.close();
      }
      return fileOpen ? 0 : 1; // return 0 if wrote the file
    }



/P/🚀 Step12/MathFunctions/MathFunctions.cxx
========================================================================


.. code-block:: cpp

    
    #include "MathFunctions.h"
    
    #include <cmath>
    
    #ifdef USE_MYMATH
    #  include "mysqrt.h"
    #endif
    
    namespace mathfunctions {
    double sqrt(double x)
    {
    // which square root function should we use?
    #ifdef USE_MYMATH
      return detail::mysqrt(x);
    #else
      return std::sqrt(x);
    #endif
    }
    }



/P/🚀 Step12/MathFunctions/MathFunctions.h
======================================================================


.. code-block:: cpp

    
    #if defined(_WIN32)
    #  if defined(EXPORTING_MYMATH)
    #    define DECLSPEC __declspec(dllexport)
    #  else
    #    define DECLSPEC __declspec(dllimport)
    #  endif
    #else // non windows
    #  define DECLSPEC
    #endif
    
    namespace mathfunctions {
    double DECLSPEC sqrt(double x);
    }



/P/🚀 Step12/MathFunctions/mysqrt.cxx
=================================================================


.. code-block:: cpp

    #include <iostream>
    
    #include "MathFunctions.h"
    
    // include the generated table
    #include "Table.h"
    
    namespace mathfunctions {
    namespace detail {
    // a hack square root calculation using simple operations
    double mysqrt(double x)
    {
      if (x <= 0) {
        return 0;
      }
    
      // use the table to help find an initial value
      double result = x;
      if (x >= 1 && x < 10) {
        std::cout << "Use the table to help find an initial value " << std::endl;
        result = sqrtTable[static_cast<int>(x)];
      }
    
      // do ten iterations
      for (int i = 0; i < 10; ++i) {
        if (result <= 0) {
          result = 0.1;
        }
        double delta = x - (result * result);
        result = result + 0.5 * delta / result;
        std::cout << "Computing sqrt of " << x << " to be " << result << std::endl;
      }
    
      return result;
    }
    }
    }



/P/🚀 Step12/MathFunctions/mysqrt.h
===============================================================


.. code-block:: cpp

    
    namespace mathfunctions {
    namespace detail {
    double mysqrt(double x);
    }
    }



/P/🚀 Step12/tutorial.cxx
=====================================================


.. code-block:: cpp

    // A simple program that computes the square root of a number
    #include <iostream>
    #include <string>
    
    #include "MathFunctions.h"
    #include "TutorialConfig.h"
    
    int main(int argc, char* argv[])
    {
      if (argc < 2) {
        // report version
        std::cout << argv[0] << " Version " << Tutorial_VERSION_MAJOR << "."
                  << Tutorial_VERSION_MINOR << std::endl;
        std::cout << "Usage: " << argv[0] << " number" << std::endl;
        return 1;
      }
    
      // convert input to double
      const double inputValue = std::stod(argv[1]);
    
      const double outputValue = mathfunctions::sqrt(inputValue);
    
      std::cout << "The square root of " << inputValue << " is " << outputValue
                << std::endl;
      return 0;
    }



/P/🚀 Step12/TutorialConfig.h.in
============================================================


.. code-block:: cpp

    // the configured options and settings for Tutorial
    #define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@
    #define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@




/P/🚀 include/COMPILE_DEFINITIONS_DISCLAIMER.txt
=============================================================


.. code-block:: 

    Disclaimer: Most native build tools have poor support for escaping
    certain values.  CMake has work-arounds for many cases but some values
    may just not be possible to pass correctly.  If a value does not seem
    to be escaped correctly, do not attempt to work-around the problem by
    adding escape sequences to the value.  Your work-around may break in a
    future version of CMake that has improved escape support.  Instead
    consider defining the macro in a (configured) header file.  Then
    report the limitation.  Known limitations include::
    
      #          - broken almost everywhere
      ;          - broken in VS IDE 7.0 and Borland Makefiles
      ,          - broken in VS IDE
      %          - broken in some cases in NMake
      & |        - broken in some cases on MinGW
      ^ < > \"   - broken in most Make tools on Windows
    
    CMake does not reject these values outright because they do work in
    some cases.  Use with caution.



/P/🚀 include/INTERFACE_INCLUDE_DIRECTORIES_WARNING.txt
====================================================================


.. code-block:: 

    
    Note that it is not advisable to populate the :genex:`INSTALL_INTERFACE` of
    the |INTERFACE_PROPERTY_LINK| of a target with absolute paths to the include
    directories of dependencies.  That would hard-code into installed packages
    the include directory paths for dependencies
    **as found on the machine the package was made on**.
    
    The :genex:`INSTALL_INTERFACE` of the |INTERFACE_PROPERTY_LINK| is only
    suitable for specifying the required include directories for headers
    provided with the target itself, not those provided by the transitive
    dependencies listed in its :prop_tgt:`INTERFACE_LINK_LIBRARIES` target
    property.  Those dependencies should themselves be targets that specify
    their own header locations in |INTERFACE_PROPERTY_LINK|.
    
    See the :ref:`Creating Relocatable Packages` section of the
    :manual:`cmake-packages(7)` manual for discussion of additional care
    that must be taken when specifying usage requirements while creating
    packages for redistribution.



/P/🚀 include/INTERFACE_LINK_LIBRARIES_WARNING.txt
===============================================================


.. code-block:: 

    
    Note that it is not advisable to populate the
    |INTERFACE_PROPERTY_LINK| of a target with absolute paths to dependencies.
    That would hard-code into installed packages the library file paths
    for dependencies **as found on the machine the package was made on**.
    
    See the :ref:`Creating Relocatable Packages` section of the
    :manual:`cmake-packages(7)` manual for discussion of additional care
    that must be taken when specifying usage requirements while creating
    packages for redistribution.



/P/🚀 manual/CTEST_EXAMPLE_MAKEFILE_JOB_SERVER.make
================================================================


.. code-block:: 

    test:
    	+ctest -j 8



/P/🚀 manual/ID_RESERVE.txt
========================================


.. code-block:: 

    .. note::
    
      CMake reserves identifiers that:
    
      * begin with ``CMAKE_`` (upper-, lower-, or mixed-case), or
      * begin with ``_CMAKE_`` (upper-, lower-, or mixed-case), or
      * begin with ``_`` followed by the name of any :manual:`CMake Command <cmake-commands(7)>`.



/P/🚀 manual/LINKS.txt
===================================


.. code-block:: 

    The following resources are available to get help using CMake:
    
    Home Page
     https://cmake.org
    
     The primary starting point for learning about CMake.
    
    Online Documentation and Community Resources
     https://cmake.org/documentation
    
     Links to available documentation and community resources may be
     found on this web page.
    
    Discourse Forum
     https://discourse.cmake.org
    
     The Discourse Forum hosts discussion and questions about CMake.



/P/🚀 manual/OPTIONS_BUILD.txt
===========================================


.. code-block:: 

    .. option:: -S <path-to-source>
    
     Path to root directory of the CMake project to build.
    
    .. option:: -B <path-to-build>
    
     Path to directory which CMake will use as the root of build directory.
    
     If the directory doesn't already exist CMake will make it.
    
    .. option:: -C <initial-cache>
    
     Pre-load a script to populate the cache.
    
     When CMake is first run in an empty build tree, it creates a
     ``CMakeCache.txt`` file and populates it with customizable settings for
     the project.  This option may be used to specify a file from which
     to load cache entries before the first pass through the project's
     CMake listfiles.  The loaded entries take priority over the
     project's default values.  The given file should be a CMake script
     containing :command:`set` commands that use the ``CACHE`` option, not a
     cache-format file.
    
     References to :variable:`CMAKE_SOURCE_DIR` and :variable:`CMAKE_BINARY_DIR`
     within the script evaluate to the top-level source and build tree.
    
    .. option:: -D <var>:<type>=<value>, -D <var>=<value>
    
     Create or update a CMake ``CACHE`` entry.
    
     When CMake is first run in an empty build tree, it creates a
     ``CMakeCache.txt`` file and populates it with customizable settings for
     the project.  This option may be used to specify a setting that
     takes priority over the project's default value.  The option may be
     repeated for as many ``CACHE`` entries as desired.
    
     If the ``:<type>`` portion is given it must be one of the types
     specified by the :command:`set` command documentation for its
     ``CACHE`` signature.
     If the ``:<type>`` portion is omitted the entry will be created
     with no type if it does not exist with a type already.  If a
     command in the project sets the type to ``PATH`` or ``FILEPATH``
     then the ``<value>`` will be converted to an absolute path.
    
     This option may also be given as a single argument:
     ``-D<var>:<type>=<value>`` or ``-D<var>=<value>``.
    
     It's important to note that the order of ``-C`` and ``-D`` arguments is
     significant. They will be carried out in the order they are listed, with the
     last argument taking precedence over the previous ones. For example, if you
     specify ``-DCMAKE_BUILD_TYPE=Debug``, followed by a ``-C`` argument with a
     file that calls:
    
     .. code-block:: cmake
    
       set(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)
    
     then the ``-C`` argument will take precedence, and ``CMAKE_BUILD_TYPE`` will
     be set to ``Release``. However, if the ``-D`` argument comes after the ``-C``
     argument, it will be set to ``Debug``.
    
     If a ``set(... CACHE ...)`` call in the ``-C`` file does not use ``FORCE``,
     and a ``-D`` argument sets the same variable, the ``-D`` argument will take
     precedence regardless of order because of the nature of non-``FORCE``
     ``set(... CACHE ...)`` calls.
    
    .. option:: -U <globbing_expr>
    
     Remove matching entries from CMake ``CACHE``.
    
     This option may be used to remove one or more variables from the
     ``CMakeCache.txt`` file, globbing expressions using ``*`` and ``?`` are
     supported.  The option may be repeated for as many ``CACHE`` entries as
     desired.
    
     Use with care, you can make your ``CMakeCache.txt`` non-working.
    
    .. option:: -G <generator-name>
    
     Specify a build system generator.
    
     CMake may support multiple native build systems on certain
     platforms.  A generator is responsible for generating a particular
     build system.  Possible generator names are specified in the
     :manual:`cmake-generators(7)` manual.
    
     If not specified, CMake checks the :envvar:`CMAKE_GENERATOR` environment
     variable and otherwise falls back to a builtin default selection.
    
    .. option:: -T <toolset-spec>
    
     Toolset specification for the generator, if supported.
    
     Some CMake generators support a toolset specification to tell
     the native build system how to choose a compiler.  See the
     :variable:`CMAKE_GENERATOR_TOOLSET` variable for details.
    
    .. option:: -A <platform-name>
    
     Specify platform name if supported by generator.
    
     Some CMake generators support a platform name to be given to the
     native build system to choose a compiler or SDK.  See the
     :variable:`CMAKE_GENERATOR_PLATFORM` variable for details.
    
    .. option:: --toolchain <path-to-file>
    
     .. versionadded:: 3.21
    
     Specify the cross compiling toolchain file, equivalent to setting
     :variable:`CMAKE_TOOLCHAIN_FILE` variable.
    
    .. option:: --install-prefix <directory>
    
     .. versionadded:: 3.21
    
     Specify the installation directory, used by the
     :variable:`CMAKE_INSTALL_PREFIX` variable. Must be an absolute path.
    
    .. option:: -Wno-dev
    
     Suppress developer warnings.
    
     Suppress warnings that are meant for the author of the
     ``CMakeLists.txt`` files. By default this will also turn off
     deprecation warnings.
    
    .. option:: -Wdev
    
     Enable developer warnings.
    
     Enable warnings that are meant for the author of the ``CMakeLists.txt``
     files. By default this will also turn on deprecation warnings.
    
    .. option:: -Wdeprecated
    
     Enable deprecated functionality warnings.
    
     Enable warnings for usage of deprecated functionality, that are meant
     for the author of the ``CMakeLists.txt`` files.
    
    .. option:: -Wno-deprecated
    
     Suppress deprecated functionality warnings.
    
     Suppress warnings for usage of deprecated functionality, that are meant
     for the author of the ``CMakeLists.txt`` files.
    
    .. option:: -Werror=<what>
    
     Treat CMake warnings as errors. ``<what>`` must be one of the following:
    
     ``dev``
       Make developer warnings errors.
    
       Make warnings that are meant for the author of the ``CMakeLists.txt`` files
       errors. By default this will also turn on deprecated warnings as errors.
    
     ``deprecated``
      Make deprecated macro and function warnings errors.
    
      Make warnings for usage of deprecated macros and functions, that are meant
      for the author of the ``CMakeLists.txt`` files, errors.
    
    .. option:: -Wno-error=<what>
    
     Do not treat CMake warnings as errors. ``<what>`` must be one of the following:
    
     ``dev``
      Make warnings that are meant for the author of the ``CMakeLists.txt`` files not
      errors. By default this will also turn off deprecated warnings as errors.
    
     ``deprecated``
      Make warnings for usage of deprecated macros and functions, that are meant
      for the author of the ``CMakeLists.txt`` files, not errors.



/P/🚀 manual/OPTIONS_HELP.txt
==========================================


.. code-block:: 

    .. |file| replace:: The output is printed to a named ``<file>`` if given.
    
    .. option:: -version [<file>], --version [<file>], /V [<file>]
    
     Show program name/version banner and exit.
     |file|
    
    .. option:: -h, -H, --help, -help, -usage, /?
    
     Print usage information and exit.
    
     Usage describes the basic command line interface and its options.
    
    .. option:: --help <keyword> [<file>]
    
     Print help for one CMake keyword.
    
     ``<keyword>`` can be a property, variable, command, policy, generator
     or module.
    
     The relevant manual entry for ``<keyword>`` is
     printed in a human-readable text format.
     |file|
    
     .. versionchanged:: 3.28
    
       Prior to CMake 3.28, this option supported command names only.
    
    .. option:: --help-full [<file>]
    
     Print all help manuals and exit.
    
     All manuals are printed in a human-readable text format.
     |file|
    
    .. option:: --help-manual <man> [<file>]
    
     Print one help manual and exit.
    
     The specified manual is printed in a human-readable text format.
     |file|
    
    .. option:: --help-manual-list [<file>]
    
     List help manuals available and exit.
    
     The list contains all manuals for which help may be obtained by
     using the ``--help-manual`` option followed by a manual name.
     |file|
    
    .. option:: --help-command <cmd> [<file>]
    
     Print help for one command and exit.
    
     The :manual:`cmake-commands(7)` manual entry for ``<cmd>`` is
     printed in a human-readable text format.
     |file|
    
    .. option:: --help-command-list [<file>]
    
     List commands with help available and exit.
    
     The list contains all commands for which help may be obtained by
     using the ``--help-command`` option followed by a command name.
     |file|
    
    .. option:: --help-commands [<file>]
    
     Print cmake-commands manual and exit.
    
     The :manual:`cmake-commands(7)` manual is printed in a
     human-readable text format.
     |file|
    
    .. option:: --help-module <mod> [<file>]
    
     Print help for one module and exit.
    
     The :manual:`cmake-modules(7)` manual entry for ``<mod>`` is printed
     in a human-readable text format.
     |file|
    
    .. option:: --help-module-list [<file>]
    
     List modules with help available and exit.
    
     The list contains all modules for which help may be obtained by
     using the ``--help-module`` option followed by a module name.
     |file|
    
    .. option:: --help-modules [<file>]
    
     Print cmake-modules manual and exit.
    
     The :manual:`cmake-modules(7)` manual is printed in a human-readable
     text format.
     |file|
    
    .. option:: --help-policy <cmp> [<file>]
    
     Print help for one policy and exit.
    
     The :manual:`cmake-policies(7)` manual entry for ``<cmp>`` is
     printed in a human-readable text format.
     |file|
    
    .. option:: --help-policy-list [<file>]
    
     List policies with help available and exit.
    
     The list contains all policies for which help may be obtained by
     using the ``--help-policy`` option followed by a policy name.
     |file|
    
    .. option:: --help-policies [<file>]
    
     Print cmake-policies manual and exit.
    
     The :manual:`cmake-policies(7)` manual is printed in a
     human-readable text format.
     |file|
    
    .. option:: --help-property <prop> [<file>]
    
     Print help for one property and exit.
    
     The :manual:`cmake-properties(7)` manual entries for ``<prop>`` are
     printed in a human-readable text format.
     |file|
    
    .. option:: --help-property-list [<file>]
    
     List properties with help available and exit.
    
     The list contains all properties for which help may be obtained by
     using the ``--help-property`` option followed by a property name.
     |file|
    
    .. option:: --help-properties [<file>]
    
     Print cmake-properties manual and exit.
    
     The :manual:`cmake-properties(7)` manual is printed in a
     human-readable text format.
     |file|
    
    .. option:: --help-variable <var> [<file>]
    
     Print help for one variable and exit.
    
     The :manual:`cmake-variables(7)` manual entry for ``<var>`` is
     printed in a human-readable text format.
     |file|
    
    .. option:: --help-variable-list [<file>]
    
     List variables with help available and exit.
    
     The list contains all variables for which help may be obtained by
     using the ``--help-variable`` option followed by a variable name.
     |file|
    
    .. option:: --help-variables [<file>]
    
     Print cmake-variables manual and exit.
    
     The :manual:`cmake-variables(7)` manual is printed in a
     human-readable text format.
     |file|



/P/🚀 module/CMAKE_REQUIRED_DEFINITIONS.txt
========================================================


.. code-block:: 

      ``CMAKE_REQUIRED_DEFINITIONS``
        A :ref:`;-list <CMake Language Lists>` of compiler definitions of the form
        ``-DFOO`` or ``-DFOO=bar``. A definition for the name specified by
        ``<resultVar>`` will also be added automatically.



/P/🚀 module/CMAKE_REQUIRED_FLAGS.txt
==================================================


.. code-block:: 

      ``CMAKE_REQUIRED_FLAGS``
        String of additional flags to pass to the compiler. The string must be
        space-delimited--a :ref:`;-list <CMake Language Lists>` will not work.
        The contents of :variable:`CMAKE_<LANG>_FLAGS <CMAKE_<LANG>_FLAGS>` and
        its associated configuration-specific variable are automatically added
        to the compiler command before the contents of ``CMAKE_REQUIRED_FLAGS``.



/P/🚀 module/CMAKE_REQUIRED_INCLUDES.txt
=====================================================


.. code-block:: 

      ``CMAKE_REQUIRED_INCLUDES``
        A :ref:`;-list <CMake Language Lists>` of header search paths to pass to
        the compiler. These will be the only header search paths used--the contents
        of the :prop_dir:`INCLUDE_DIRECTORIES` directory property will be ignored.



/P/🚀 module/CMAKE_REQUIRED_LIBRARIES.txt
======================================================


.. code-block:: 

      ``CMAKE_REQUIRED_LIBRARIES``
        A :ref:`;-list <CMake Language Lists>` of libraries to add to the link
        command. These can be the name of system libraries or they can be
        :ref:`Imported Targets <Imported Targets>` (see :command:`try_compile` for
        further details).



/P/🚀 module/CMAKE_REQUIRED_LINK_OPTIONS.txt
=========================================================


.. code-block:: 

      ``CMAKE_REQUIRED_LINK_OPTIONS``
        .. versionadded:: 3.14
    
        A :ref:`;-list <CMake Language Lists>` of options to add to the link
        command (see :command:`try_compile` for further details).



/P/🚀 module/CMAKE_REQUIRED_QUIET.txt
==================================================


.. code-block:: 

      ``CMAKE_REQUIRED_QUIET``
        .. versionadded:: 3.1
    
        If this variable evaluates to a boolean true value, all status messages
        associated with the check will be suppressed.



/P/🚀 prop_gbl/CMAKE_LANG_STD_FLAGS.txt
====================================================


.. code-block:: 

    .. note::
    
      If the compiler's default standard level is at least that
      of the requested feature, CMake may omit the ``-std=`` flag.
      The flag may still be added if the compiler's default extensions mode
      does not match the :prop_tgt:`<LANG>_EXTENSIONS` target property,
      or if the :prop_tgt:`<LANG>_STANDARD` target property is set.



/P/🚀 prop_tgt/COMPILE_PDB_NOTE.txt
================================================


.. code-block:: 

    .. note::
     The compiler-generated program database files are specified by the
     ``/Fd`` compiler flag and are not the same as linker-generated
     program database files specified by the ``/pdb`` linker flag.
     Use the |PDB_XXX| property to specify the latter.



/P/🚀 prop_tgt/CUDA_RUNTIME_LIBRARY-VALUES.txt
===========================================================


.. code-block:: 

    ``None``
      Link with ``-cudart=none`` or equivalent flag(s) to use no CUDA
      runtime library.
    ``Shared``
      Link with ``-cudart=shared`` or equivalent flag(s) to use a
      dynamically-linked CUDA runtime library.
    ``Static``
      Link with ``-cudart=static`` or equivalent flag(s) to use a
      statically-linked CUDA runtime library.



/P/🚀 prop_tgt/INTERFACE_BUILD_PROPERTY.txt
========================================================


.. code-block:: 

    
    List of public |property_name| requirements for a library.
    
    Targets may populate this property to publish the |property_name|
    required to compile against the headers for the target.  The |command_name|
    command populates this property with values given to the ``PUBLIC`` and
    ``INTERFACE`` keywords.  Projects may also get and set the property directly.
    
    When target dependencies are specified using :command:`target_link_libraries`,
    CMake will read this property from all target dependencies to determine the
    build properties of the consumer.
    
    Contents of |PROPERTY_INTERFACE_NAME| may use "generator expressions"
    with the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`
    manual for available expressions.  See the :manual:`cmake-buildsystem(7)`
    -manual for more on defining buildsystem properties.



/P/🚀 prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.txt
===============================================================


.. code-block:: 

    The value of |INTERFACE_PROPERTY_LINK_DIRECT| may use
    :manual:`generator expressions <cmake-generator-expressions(7)>`.
    
    .. note::
    
      The |INTERFACE_PROPERTY_LINK_DIRECT| target property is intended for
      advanced use cases such as injection of static plugins into a consuming
      executable.  It should not be used as a substitute for organizing
      normal calls to :command:`target_link_libraries`.



/P/🚀 prop_tgt/LINK_LIBRARIES_INDIRECTION.txt
==========================================================


.. code-block:: 

    .. note::
      A call to :command:`target_link_libraries(<target> ...)` may update this
      property on ``<target>``.  If ``<target>`` was not created in the same
      directory as the call then :command:`target_link_libraries` will wrap each
      entry with the form ``::@(directory-id);...;::@``, where the ``::@`` is
      literal and the ``(directory-id)`` is unspecified.
      This tells the generators that the named libraries must be looked up in
      the scope of the caller rather than in the scope in which the
      ``<target>`` was created.  Valid directory ids are stripped on export
      by the :command:`install(EXPORT)` and :command:`export` commands.



/P/🚀 prop_tgt/MACOS_IMPORT_FILES.txt
==================================================


.. code-block:: 

    .. note::
    
      On macOS, this property will be ignored for the linker import files (e.g.
      ``.tbd`` files, see :prop_tgt:`ENABLE_EXPORTS` property for details) when:
    
      * The :prop_tgt:`FRAMEWORK` is set, because the framework layout cannot be
        changed.
      * The :generator:`Xcode` generator is used, due to the limitations and
        constraints of the ``Xcode`` tool.
    
      In both cases, the linker import files will be generated |IDEM| as the shared
      library.



/P/🚀 prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt
====================================================================


.. code-block:: 

    ``Embedded``
      Compile with ``-Z7`` or equivalent flag(s) to produce object files
      with full symbolic debugging information.
    ``ProgramDatabase``
      Compile with ``-Zi`` or equivalent flag(s) to produce a program
      database that contains all the symbolic debugging information.
    ``EditAndContinue``
      Compile with ``-ZI`` or equivalent flag(s) to produce a program
      database that supports the Edit and Continue feature.
    
    The value is ignored on compilers not targeting the MSVC ABI, but an
    unsupported value will be rejected as an error when using a compiler
    targeting the MSVC ABI.
    
    The value may also be the empty string (``""``), in which case no debug
    information format flag will be added explicitly by CMake.



/P/🚀 prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt
===========================================================


.. code-block:: 

    ``MultiThreaded``
      Compile with ``-MT`` or equivalent flag(s) to use a multi-threaded
      statically-linked runtime library.
    ``MultiThreadedDLL``
      Compile with ``-MD`` or equivalent flag(s) to use a multi-threaded
      dynamically-linked runtime library.
    ``MultiThreadedDebug``
      Compile with ``-MTd`` or equivalent flag(s) to use a multi-threaded
      statically-linked runtime library.
    ``MultiThreadedDebugDLL``
      Compile with ``-MDd`` or equivalent flag(s) to use a multi-threaded
      dynamically-linked runtime library.
    
    The value is ignored on compilers not targeting the MSVC ABI, but an
    unsupported value will be rejected as an error when using a compiler
    targeting the MSVC ABI.
    
    The value may also be the empty string (``""``) in which case no runtime
    library selection flag will be added explicitly by CMake.  Note that with
    :ref:`Visual Studio Generators` the native build system may choose to
    add its own default runtime library selection flag.



/P/🚀 prop_tgt/PDB_NOTE.txt
========================================


.. code-block:: 

    .. note::
     This property does not apply to STATIC library targets because no linker
     is invoked to produce them so they have no linker-generated ``.pdb`` file
     containing debug symbols.
    
     The linker-generated program database files are specified by the
     ``/pdb`` linker flag and are not the same as compiler-generated
     program database files specified by the ``/Fd`` compiler flag.
     Use the |COMPILE_PDB_XXX| property to specify the latter.



/P/🚀 prop_tgt/Swift_COMPILATION_MODE-VALUES.txt
=============================================================


.. code-block:: 

    ``incremental``
      Compiles each Swift source in the module separately, resulting in better
      parallelism in the build. The compiler emits additional information into
      the build directory improving rebuild performance when small changes are made
      to the source between rebuilds. This is the best option to use while
      iterating on changes in a project.
    
    ``wholemodule``
      Whole-module optimizations are slowest to compile, but results in the most
      optimized library. The entire context is loaded into once instance of the
      compiler, so there is no parallelism across source files in the module.
    
    ``singlefile``
      Compiles each source in a Swift modules separately, resulting in better
      parallelism. Unlike the ``incremental`` build mode, no additional information
      is emitted by the compiler during the build, so rebuilding after making small
      changes to the source file will not run faster. This option should be used
      sparingly, preferring ``incremental`` builds, unless working around a compiler
      bug.



/P/🚀 prop_tgt/VERSION_SOVERSION_EXAMPLE.txt
=========================================================


.. code-block:: 

    A common convention is to specify both ``VERSION`` and ``SOVERSION``
    such that ``SOVERSION`` matches the first component of ``VERSION``:
    
    .. code-block:: cmake
    
      set_target_properties(mylib PROPERTIES VERSION 1.2.3 SOVERSION 1)
    
    The idea is that breaking changes to the ABI increment both the
    ``SOVERSION`` and the major ``VERSION`` number.



/P/🚀 prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt
=============================================================


.. code-block:: 

    ``SingleThreaded``
      Compile without additional flags to use a single-threaded
      statically-linked runtime library.
    ``SingleThreadedDLL``
      Compile with ``-br`` or equivalent flag(s) to use a single-threaded
      dynamically-linked runtime library. This is not available for Linux
      targets.
    ``MultiThreaded``
      Compile with ``-bm`` or equivalent flag(s) to use a multi-threaded
      statically-linked runtime library.
    ``MultiThreadedDLL``
      Compile with ``-bm -br`` or equivalent flag(s) to use a multi-threaded
      dynamically-linked runtime library. This is not available for Linux
      targets.
    
    The value is ignored on non-Watcom compilers but an unsupported value will
    be rejected as an error when using a compiler targeting the Watcom ABI.
    
    The value may also be the empty string (``""``) in which case no runtime
    library selection flag will be added explicitly by CMake.



/P/🚀 prop_tgt/XXX_OUTPUT_DIRECTORY.txt
====================================================


.. code-block:: 

    Output directory in which to build |XXX| target files.
    
    This property specifies the directory into which |xxx| target files
    should be built.  The property value may use
    :manual:`generator expressions <cmake-generator-expressions(7)>`.
    Multi-configuration generators (:ref:`Visual Studio <Visual Studio Generators>`,
    :generator:`Xcode`, :generator:`Ninja Multi-Config`) append a
    per-configuration subdirectory to the specified directory unless a generator
    expression is used.
    
    This property is initialized by the value of the
    |CMAKE_XXX_OUTPUT_DIRECTORY| variable if it is set when a target is created.



/P/🚀 prop_tgt/XXX_OUTPUT_NAME.txt
===============================================


.. code-block:: 

    Output name for |XXX| target files.
    
    This property specifies the base name for |xxx| target files.  It
    overrides :prop_tgt:`OUTPUT_NAME` and :prop_tgt:`OUTPUT_NAME_<CONFIG>`
    properties.



/P/🚀 variable/CMAKE_FIND_ROOT_PATH_MODE_XXX.txt
=============================================================


.. code-block:: 

    This variable controls whether the :variable:`CMAKE_FIND_ROOT_PATH` and
    :variable:`CMAKE_SYSROOT` are used by |FIND_XXX|.
    
    If set to ``ONLY``, then only the roots in :variable:`CMAKE_FIND_ROOT_PATH`
    will be searched. If set to ``NEVER``, then the roots in
    :variable:`CMAKE_FIND_ROOT_PATH` will be ignored and only the host system
    root will be used. If set to ``BOTH``, then the host system paths and the
    paths in :variable:`CMAKE_FIND_ROOT_PATH` will be searched.



/P/🚀 variable/CMAKE_LINK_GROUP_USING_FEATURE.txt
==============================================================


.. code-block:: 

    Feature names are case-sensitive and may only contain letters, numbers
    and underscores.  Feature names defined in all uppercase are reserved for
    CMake's own built-in features (see `Predefined Features`_ further below).
    
    
    Feature Definitions
    ^^^^^^^^^^^^^^^^^^^
    
    A group feature definition is a list that contains exactly two elements:
    
    ::
    
      <PREFIX> <SUFFIX>
    
    On the linker command line, ``<PREFIX>`` will precede the list of libraries
    in the group and ``<SUFFIX>`` will follow after.
    
    For the elements of this variable, the ``LINKER:`` prefix can be used.
    
    .. include:: ../command/LINK_OPTIONS_LINKER.txt
      :start-line: 3
    
    Examples
    ^^^^^^^^
    
    Solving cross-references between two static libraries
    """""""""""""""""""""""""""""""""""""""""""""""""""""
    
    A project may define two or more static libraries which have circular
    dependencies between them.  In order for the linker to resolve all symbols
    at link time, it may need to search repeatedly among the libraries until no
    new undefined references are created.  Different linkers use different syntax
    for achieving this.  The following example shows how this may be implemented
    for some linkers.  Note that this is for illustration purposes only.
    Projects should use the built-in ``RESCAN`` group feature instead
    (see `Predefined Features`_), which provides a more complete and more robust
    implementation of this functionality.
    
    .. code-block:: cmake
    
      set(CMAKE_C_LINK_GROUP_USING_cross_refs_SUPPORTED TRUE)
      if(CMAKE_C_COMPILER_ID STREQUAL "GNU" AND CMAKE_SYSTEM_NAME STREQUAL "Linux")
        set(CMAKE_C_LINK_GROUP_USING_cross_refs
          "LINKER:--start-group"
          "LINKER:--end-group"
        )
      elseif(CMAKE_C_COMPILER_ID STREQUAL "SunPro" AND CMAKE_SYSTEM_NAME STREQUAL "SunOS")
        set(CMAKE_C_LINK_GROUP_USING_cross_refs
          "LINKER:-z,rescan-start"
          "LINKER:-z,rescan-end"
        )
      else()
        # feature not yet supported for the other environments
        set(CMAKE_C_LINK_GROUP_USING_cross_refs_SUPPORTED FALSE)
      endif()
    
      add_library(lib1 STATIC ...)
      add_library(lib2 SHARED ...)
    
      if(CMAKE_C_LINK_GROUP_USING_cross_refs_SUPPORTED)
        target_link_libraries(lib2 PRIVATE "$<LINK_GROUP:cross_refs,lib1,external>")
      else()
        target_link_libraries(lib2 PRIVATE lib1 external)
      endif()
    
    CMake will generate the following linker command line fragments when linking
    ``lib2``:
    
    * ``GNU``: ``-Wl,--start-group /path/to/lib1.a -lexternal -Wl,--end-group``
    * ``SunPro``: ``-Wl,-z,rescan-start /path/to/lib1.a -lexternal -Wl,-z,rescan-end``
    
    
    Predefined Features
    ^^^^^^^^^^^^^^^^^^^
    
    The following built-in group features are pre-defined by CMake:
    
    .. include:: LINK_GROUP_PREDEFINED_FEATURES.txt



/P/🚀 variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt
================================================================


.. code-block:: 

    Feature names are case-sensitive and may only contain letters, numbers
    and underscores.  Feature names defined in all uppercase are reserved for
    CMake's own built-in features (see `Predefined Features`_ further below).
    
    
    Feature Definitions
    ^^^^^^^^^^^^^^^^^^^
    
    A library feature definition is a list that contains one or three elements:
    
    ::
    
      [<PREFIX>] <LIBRARY_EXPRESSION> [<SUFFIX>]
    
    When ``<PREFIX>`` and ``<SUFFIX>`` are specified, they precede and follow
    respectively the whole list of libraries specified in the
    :genex:`LINK_LIBRARY` expression, not each library item individually.
    There is no guarantee that the list of specified libraries will be kept
    grouped together though, so the ``<PREFIX>`` and ``<SUFFIX>`` may appear
    more than once if the library list is reorganized by CMake to satisfy other
    constraints.  This means constructs like ``--start-group`` and ``--end-group``,
    as supported by the GNU ``ld`` linker, cannot be used in this way.  The
    :genex:`LINK_GROUP` generator expression should be used instead for such
    constructs.
    
    ``<LIBRARY_EXPRESSION>`` is used to specify the pattern for constructing the
    corresponding fragment on the linker command line for each library.
    The following placeholders can be used in the expression:
    
    * ``<LIBRARY>`` is expanded to the full path to the library for CMake targets,
      or to a platform-specific value based on the item otherwise (the same as
      ``<LINK_ITEM>`` on Windows, or the library base name for other platforms).
    * ``<LINK_ITEM>`` is expanded to how the library would normally be linked on
      the linker command line.
    * ``<LIB_ITEM>`` is expanded to the full path to the library for CMake targets,
      or the item itself exactly as specified in the ``<LIBRARY_EXPRESSION>``
      otherwise.
    
    In addition to the above, it is possible to have one pattern for paths
    (CMake targets and external libraries specified with file paths) and another
    for other items specified by name only.  The ``PATH{}`` and ``NAME{}`` wrappers
    can be used to provide the expansion for those two cases, respectively.
    When wrappers are used, both must be present.  For example:
    
    .. code-block:: cmake
    
      set(CMAKE_LINK_LIBRARY_USING_weak_library
          "PATH{-weak_library <LIBRARY>}NAME{LINKER:-weak-l<LIB_ITEM>}"
      )
    
    For all three elements of this variable (``<PREFIX>``, ``<LIBRARY_EXPRESSION>``,
    and ``<SUFFIX>``), the ``LINKER:`` prefix can be used.
    
    .. include:: ../command/LINK_OPTIONS_LINKER.txt
      :start-line: 3
    
    Examples
    ^^^^^^^^
    
    Loading a whole static library
    """"""""""""""""""""""""""""""
    
    A common need is to prevent the linker from discarding any symbols from a
    static library.  Different linkers use different syntax for achieving this.
    The following example shows how this may be implemented for some linkers.
    Note that this is for illustration purposes only.  Projects should use the
    built-in ``WHOLE_ARCHIVE`` feature instead (see `Predefined Features`_), which
    provides a more complete and more robust implementation of this functionality.
    
    .. code-block:: cmake
    
      set(CMAKE_C_LINK_LIBRARY_USING_load_archive_SUPPORTED TRUE)
      if(CMAKE_C_COMPILER_ID STREQUAL "AppleClang")
        set(CMAKE_C_LINK_LIBRARY_USING_load_archive "-force_load <LIB_ITEM>")
      elseif(CMAKE_C_COMPILER_ID STREQUAL "GNU" AND CMAKE_SYSTEM_NAME STREQUAL "Linux")
        set(CMAKE_C_LINK_LIBRARY_USING_load_archive
          "LINKER:--push-state,--whole-archive"
          "<LINK_ITEM>"
          "LINKER:--pop-state"
        )
      elseif(CMAKE_C_COMPILER_ID STREQUAL "MSVC")
        set(CMAKE_C_LINK_LIBRARY_USING_load_archive "/WHOLEARCHIVE:<LIBRARY>")
      else()
        # feature not yet supported for the other environments
        set(CMAKE_C_LINK_LIBRARY_USING_load_archive_SUPPORTED FALSE)
      endif()
    
      add_library(lib1 STATIC ...)
      add_library(lib2 SHARED ...)
    
      if(CMAKE_C_LINK_LIBRARY_USING_load_archive_SUPPORTED)
        # The -force_load Apple linker option requires a file name
        set(external_lib
          "$<IF:$<LINK_LANG_AND_ID:C,AppleClang>,libexternal.a,external>"
        )
        target_link_libraries(lib2 PRIVATE
          "$<LINK_LIBRARY:load_archive,lib1,${external_lib}>"
        )
      else()
        target_link_libraries(lib2 PRIVATE lib1 external)
      endif()
    
    CMake will generate the following link expressions:
    
    * ``AppleClang``: ``-force_load /path/to/lib1.a -force_load libexternal.a``
    * ``GNU``: ``-Wl,--push-state,--whole-archive /path/to/lib1.a -lexternal -Wl,--pop-state``
    * ``MSVC``: ``/WHOLEARCHIVE:/path/to/lib1.lib /WHOLEARCHIVE:external.lib``
    
    Linking a library as weak
    """""""""""""""""""""""""
    
    On macOS, it is possible to link a library in weak mode (the library and all
    references are marked as weak imports).  Different flags must be used for a
    library specified by file path compared to one specified by name.
    This constraint can be solved using ``PATH{}`` and ``NAME{}`` wrappers.
    Again, the following example shows how this may be implemented for some
    linkers, but it is for illustration purposes only.  Projects should use the
    built-in ``WEAK_FRAMEWORK`` or ``WEAK_LIBRARY`` features instead (see
    `Predefined Features`_), which provide more complete and more robust
    implementations of this functionality.
    
    .. code-block:: cmake
    
      if (CMAKE_C_COMPILER_ID STREQUAL "AppleClang")
        set(CMAKE_LINK_LIBRARY_USING_weak_library
            "PATH{-weak_library <LIBRARY>}NAME{LINKER:-weak-l<LIB_ITEM>}"
        )
        set(CMAKE_LINK_LIBRARY_USING_weak_library_SUPPORTED TRUE)
      endif()
    
      add_library(lib SHARED ...)
      add_executable(main ...)
      if(CMAKE_LINK_LIBRARY_USING_weak_library_SUPPORTED)
        target_link_libraries(main PRIVATE "$<LINK_LIBRARY:weak_library,lib,external>")
      else()
        target_link_libraries(main PRIVATE lib external)
      endif()
    
    CMake will generate the following linker command line fragment when linking
    ``main`` using the ``AppleClang`` toolchain:
    
    ``-weak_library /path/to/lib -Xlinker -weak-lexternal``.
    
    
    Predefined Features
    ^^^^^^^^^^^^^^^^^^^
    
    The following built-in library features are pre-defined by CMake:
    
    .. include:: LINK_LIBRARY_PREDEFINED_FEATURES.txt



/P/🚀 variable/CMAKE_OSX_VARIABLE.txt
==================================================


.. code-block:: 

    The value of this variable should be set prior to the first
    :command:`project` or :command:`enable_language` command invocation
    because it may influence configuration of the toolchain and flags.
    It is intended to be set locally by the user creating a build tree.
    This variable should be set as a ``CACHE`` entry (or else CMake may
    remove it while initializing a cache entry of the same name) unless
    policy :policy:`CMP0126` is set to ``NEW``.
    
    Despite the ``OSX`` part in the variable name(s) they apply also to
    other SDKs than macOS like iOS, tvOS, visionOS, or watchOS.
    
    This variable is ignored on platforms other than Apple.



/P/🚀 variable/CMAKE_VS_VERSION_BUILD_NUMBER_COMPONENTS.txt
========================================================================


.. code-block:: 

    The components are:
    
    ``<major>.<minor>``
    
      The VS major and minor version numbers.
      These are the same as the release version numbers.
    
    ``<date>``
    
      A build date in the format ``MMMDD``, where ``MMM`` is a month index
      since an epoch used by Microsoft, and ``DD`` is a day in that month.
    
    ``<build>``
    
      A build index on the day represented by ``<date>``.
    
    The build number is reported by ``vswhere`` as ``installationVersion``.
    For example, VS 16.11.10 has build number ``16.11.32126.315``.



/P/🚀 variable/CTEST_CUSTOM_XXX.txt
================================================


.. code-block:: 

    It is initialized by :manual:`ctest(1)`, but may be edited in a ``CTestCustom``
    file. See :command:`ctest_read_custom_files` documentation.



/P/🚀 variable/IGNORE_SEARCH_LOCATIONS.txt
=======================================================


.. code-block:: 

    Ignoring search locations can be useful in cross-compiling environments where
    some system directories contain incompatible but possibly linkable libraries.
    For example, on cross-compiled cluster environments, this allows a user to
    ignore directories containing libraries meant for the front-end machine.



/P/🚀 variable/IGNORE_SEARCH_NONSYSTEM.txt
=======================================================


.. code-block:: 

    By default, |CMAKE_IGNORE_VAR| is empty. It is intended to be set by the
    project or the end user.



/P/🚀 variable/IGNORE_SEARCH_PATH.txt
==================================================


.. code-block:: 

    :ref:`Semicolon-separated list <CMake Language Lists>` of directories
    to be ignored by the various ``find...()`` commands.
    
    For :command:`find_program`, :command:`find_library`, :command:`find_file`,
    and :command:`find_path`, any file found in one of the listed directories
    will be ignored. The listed directories do not apply recursively, so any
    subdirectories to be ignored must also be explicitly listed.
    |CMAKE_IGNORE_VAR| does not affect the search *prefixes* used by these
    four commands. To ignore individual paths under a search prefix
    (e.g. ``bin``, ``include``, ``lib``, etc.), each path must be listed in
    |CMAKE_IGNORE_VAR| as a full absolute path. |CMAKE_IGNORE_PREFIX_VAR|
    provides a more appropriate way to ignore a whole search prefix.
    
    :command:`find_package` is also affected by |CMAKE_IGNORE_VAR|, but only
    for *Config mode* searches. Any ``<Name>Config.cmake`` or
    ``<name>-config.cmake`` file found in one of the specified directories
    will be ignored. In addition, any search *prefix* found in |CMAKE_IGNORE_VAR|
    will be skipped for backward compatibility reasons, but new code should
    prefer to use |CMAKE_IGNORE_PREFIX_VAR| to ignore prefixes instead.



/P/🚀 variable/IGNORE_SEARCH_PREFIX.txt
====================================================


.. code-block:: 

    :ref:`Semicolon-separated list <CMake Language Lists>` of search *prefixes*
    to be ignored by the :command:`find_program`, :command:`find_library`,
    :command:`find_file`, and :command:`find_path` commands.
    The prefixes are also ignored by the *Config mode* of the
    :command:`find_package` command (*Module mode* is unaffected).
    To ignore specific directories instead, see |CMAKE_IGNORE_NONPREFIX_VAR|.



/P/🚀 variable/IGNORE_SEARCH_SYSTEM.txt
====================================================


.. code-block:: 

    |CMAKE_IGNORE_VAR| is populated by CMake as part of its platform
    and toolchain setup. Its purpose is to ignore locations containing
    incompatible binaries meant for the host rather than the target platform.
    The project or end user should not modify this variable, they should use
    |CMAKE_IGNORE_NONSYSTEM_VAR| instead.



/P/🚀 variable/LINKER_PREDEFINED_TYPES.txt
=======================================================


.. code-block:: 

    Linker types are case-sensitive and may only contain letters, numbers and
    underscores. Linker types defined in all uppercase are reserved for CMake's own
    built-in types. The pre-defined linker types are:
    
    ``DEFAULT``
      This type corresponds to standard linking, essentially equivalent to
      not specifying :prop_tgt:`LINKER_TYPE` target property.
    
    ``SYSTEM``
      Use the standard linker delivered by the platform or the standard toolkit
      (for example, ``SYSTEM`` imply Microsoft linker for all ``MSVC`` compatible
      compilers). This type is supported for the following platforms/compilers:
    
      * Linux, for ``GNU``, ``Clang``, ``LLVMFlang`` and ``NVIDIA`` compilers.
      * All Apple variants for ``AppleClang``, ``Clang`` and ``GNU`` compilers.
      * Windows, for ``MSVC``, ``GNU``, ``Clang`` and ``NVIDIA`` compilers.
    
    ``LLD``
      Use the ``LLVM`` linker. This type is supported for the following
      platforms/compilers:
    
      * Linux, for ``GNU``, ``Clang``, ``LLVMFlang`` and ``NVIDIA`` compilers.
      * All Apple variants for ``Clang`` and ``AppleClang`` compilers.
      * Windows, for ``GNU``, ``Clang`` compilers with ``GNU`` front-end and
        ``CLang``, ``MSVC`` and ``NVIDIA`` compilers with ``MSVC`` front-end.
    
    ``BFD``
      Use the ``GNU`` linker.  This type is supported for the following
      platforms/compilers:
    
      * Linux, for ``GNU``, ``Clang``, ``LLVMFlang`` and ``NVIDIA`` compilers.
      * Windows, for ``GNU``, ``Clang`` compilers with ``GNU`` front-end.
    
    ``GOLD``
      Supported on Linux platform for ``GNU``, ``Clang``, ``LLVMFlang`` and
      ``NVIDIA`` compilers.
    
    ``MOLD``
      Use the `mold linker <https://github.com/rui314/mold>`_. This type is
      supported on the following platforms:
    
      * Linux platform for ``GNU``, ``Clang``, ``LLVMFlang`` and ``NVIDIA``
        compilers.
      * All Apple variants for ``Clang`` and ``AppleClang`` compilers as an
        alias to ``SOLD``.
    
    ``SOLD``
      Use the `sold linker <https://github.com/bluewhalesystems/sold>`_. This type
      is only supported on Apple platforms for ``Clang`` and ``AppleClang``
      compilers.
    
    ``APPLE_CLASSIC``
      Use the Apple linker in the classic behavior (i.e. before ``Xcode 15.0``).
      This type is only supported on Apple platforms for ``GNU``, ``Clang`` and
      ``AppleClang`` compilers.
    
    ``MSVC``
      Use the Microsoft linker. This type is only supported on Windows
      platform for ``MSVC`` and ``Clang`` compiler with ``MSVC`` front-end.



/P/🚀 variable/LINK_GROUP_PREDEFINED_FEATURES.txt
==============================================================


.. code-block:: 

    ``RESCAN``
      Some linkers are single-pass only.  For such linkers, circular references
      between libraries typically result in unresolved symbols.  This feature
      instructs the linker to search the specified static libraries repeatedly
      until no new undefined references are created.
    
      Normally, a static library is searched only once in the order that it is
      specified on the command line.  If a symbol in that library is needed to
      resolve an undefined symbol referred to by an object in a library that
      appears later on the command line, the linker would not be able to resolve
      that reference.  By grouping the static libraries with the ``RESCAN``
      feature, they will all be searched repeatedly until all possible references
      are resolved.  This will use linker options like ``--start-group`` and
      ``--end-group``, or on SunOS, ``-z rescan-start`` and ``-z rescan-end``.
    
      Using this feature has a significant performance cost. It is best to use it
      only when there are unavoidable circular references between two or more
      static libraries.
    
      This feature is available when using toolchains that target Linux, BSD, and
      SunOS.  It can also be used when targeting Windows platforms if the GNU
      toolchain is used.



/P/🚀 variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt
================================================================


.. code-block:: 

    ``DEFAULT``
      This feature corresponds to standard linking, essentially equivalent to
      using no feature at all.  It is typically only used with the
      :prop_tgt:`LINK_LIBRARY_OVERRIDE` and
      :prop_tgt:`LINK_LIBRARY_OVERRIDE_<LIBRARY>` target properties.
    
    ``WHOLE_ARCHIVE``
      Force inclusion of all members of a static library.  This feature is only
      supported for the following platforms, with limitations as noted:
    
      * Linux.
      * All BSD variants.
      * SunOS.
      * All Apple variants.  The library must be specified as a CMake target name,
        a library file name (such as ``libfoo.a``), or a library file path (such as
        ``/path/to/libfoo.a``).  Due to a limitation of the Apple linker, it
        cannot be specified as a plain library name like ``foo``, where ``foo``
        is not a CMake target.
      * Windows.  When using a MSVC or MSVC-like toolchain, the MSVC version must
        be greater than 1900.
      * Cygwin.
      * MSYS.
    
    ``FRAMEWORK``
      This option tells the linker to search for the specified framework using
      the ``-framework`` linker option.  It can only be used on Apple platforms,
      and only with a linker that understands the option used (i.e. the linker
      provided with Xcode, or one compatible with it).
    
      The framework can be specified as a CMake framework target, a bare framework
      name, or a file path.  If a target is given, that target must have the
      :prop_tgt:`FRAMEWORK` target property set to true.  For a file path, if it
      contains a directory part, that directory will be added as a framework
      search path.
    
      .. code-block:: cmake
    
        add_library(lib SHARED ...)
        target_link_libraries(lib PRIVATE "$<LINK_LIBRARY:FRAMEWORK,/path/to/my_framework>")
    
        # The constructed linker command line will contain:
        #   -F/path/to -framework my_framework
    
      File paths must conform to one of the following patterns (``*`` is a
      wildcard, and optional parts are shown as ``[...]``):
    
         * ``[/path/to/]FwName[.framework]``
         * ``[/path/to/]FwName.framework/FwName[suffix]``
         * ``[/path/to/]FwName.framework/Versions/*/FwName[suffix]``
    
      Note that CMake recognizes and automatically handles framework targets,
      even without using the :genex:`$<LINK_LIBRARY:FRAMEWORK,...>` expression.
      The generator expression can still be used with a CMake target if the
      project wants to be explicit about it, but it is not required to do so.
      The linker command line may have some differences between using the
      generator expression or not, but the final result should be the same.
      On the other hand, if a file path is given, CMake will recognize some paths
      automatically, but not all cases.  The project may want to use
      :genex:`$<LINK_LIBRARY:FRAMEWORK,...>` for file paths so that the expected
      behavior is clear.
    
      .. versionadded:: 3.25
        The :prop_tgt:`FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>` target property as
        well as the ``suffix`` of the framework library name are now supported by
        the ``FRAMEWORK`` features.
    
    ``NEEDED_FRAMEWORK``
      This is similar to the ``FRAMEWORK`` feature, except it forces the linker
      to link with the framework even if no symbols are used from it.  It uses
      the ``-needed_framework`` option and has the same linker constraints as
      ``FRAMEWORK``.
    
    ``REEXPORT_FRAMEWORK``
      This is similar to the ``FRAMEWORK`` feature, except it tells the linker
      that the framework should be available to clients linking to the library
      being created.  It uses the ``-reexport_framework`` option and has the
      same linker constraints as ``FRAMEWORK``.
    
    ``WEAK_FRAMEWORK``
      This is similar to the ``FRAMEWORK`` feature, except it forces the linker
      to mark the framework and all references to it as weak imports.  It uses
      the ``-weak_framework`` option and has the same linker constraints as
      ``FRAMEWORK``.
    
    ``NEEDED_LIBRARY``
      This is similar to the ``NEEDED_FRAMEWORK`` feature, except it is for use
      with non-framework targets or libraries (Apple platforms only).
      It uses the ``-needed_library`` or ``-needed-l`` option as appropriate,
      and has the same linker constraints as ``NEEDED_FRAMEWORK``.
    
    ``REEXPORT_LIBRARY``
      This is similar to the ``REEXPORT_FRAMEWORK`` feature,  except it is for use
      with non-framework targets or libraries (Apple platforms only).
      It uses the ``-reexport_library`` or ``-reexport-l`` option as appropriate,
      and has the same linker constraints as ``REEXPORT_FRAMEWORK``.
    
    ``WEAK_LIBRARY``
      This is similar to the ``WEAK_FRAMEWORK`` feature, except it is for use
      with non-framework targets or libraries (Apple platforms only).
      It uses the ``-weak_library`` or ``-weak-l`` option as appropriate,
      and has the same linker constraints as ``WEAK_FRAMEWORK``.



/P/🚀 policy/DEPRECATED.txt
========================================


.. code-block:: 

    .. note::
      The ``OLD`` behavior of a policy is
      :manual:`deprecated by definition <cmake-policies(7)>`
      and may be removed in a future version of CMake.



/P/🚀 policy/DISALLOWED_COMMAND.txt
================================================


.. code-block:: 

    CMake >= |disallowed_version| prefer that this command never be called.
    The ``OLD`` behavior for this policy is to allow the command to be called.
    The ``NEW`` behavior for this policy is to issue a ``FATAL_ERROR`` when the
    command is called.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: |disallowed_version|
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt



/P/🚀 policy/STANDARD_ADVICE.txt
=============================================


.. code-block:: 

    This policy was introduced in CMake version |INTRODUCED_IN_CMAKE_VERSION|.
    It may be set by :command:`cmake_policy` or :command:`cmake_minimum_required`.
    If it is not set, CMake |WARNS_OR_DOES_NOT_WARN|, and uses ``OLD`` behavior.



/P/🚀 policy/CMP0000.rst
=====================================


.. code-block:: 

    CMP0000
    -------
    
    A minimum required CMake version must be specified.
    
    CMake requires that projects specify the version of CMake to which
    they have been written.  This policy has been put in place so users
    trying to build the project may be told when they need to update their
    CMake.  Specifying a version also helps the project build with CMake
    versions newer than that specified.  Use the :command:`cmake_minimum_required`
    command at the top of your main ``CMakeLists.txt`` file:
    
    ::
    
      cmake_minimum_required(VERSION <major>.<minor>)
    
    where ``<major>.<minor>`` is the version of CMake you want to support
    (such as ``3.14``).  The command will ensure that at least the given
    version of CMake is running and help newer versions be compatible with
    the project.  See documentation of :command:`cmake_minimum_required` for
    details.
    
    Note that the command invocation must appear in the ``CMakeLists.txt``
    file itself; a call in an included file is not sufficient.  However,
    the  :command:`cmake_policy` command may be called to set policy ``CMP0000``
    to ``OLD`` or ``NEW`` behavior explicitly.  The ``OLD`` behavior is to
    silently ignore the missing invocation.  The ``NEW`` behavior is to issue
    an error instead of a warning.  An included file may set ``CMP0000``
    explicitly to affect how this policy is enforced for the main
    ``CMakeLists.txt`` file.
    
    This policy was introduced in CMake version 2.6.0.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0001.rst
=====================================


.. code-block:: 

    CMP0001
    -------
    
    ``CMAKE_BACKWARDS_COMPATIBILITY`` should no longer be used.
    
    The behavior is to check ``CMAKE_BACKWARDS_COMPATIBILITY`` and present
    it to the user.  The ``NEW`` behavior is to ignore
    CMAKE_BACKWARDS_COMPATIBILITY completely.
    
    In CMake 2.4 and below the variable ``CMAKE_BACKWARDS_COMPATIBILITY`` was
    used to request compatibility with earlier versions of CMake.  In
    CMake 2.6 and above all compatibility issues are handled by policies
    and the :command:`cmake_policy` command.  However, CMake must still check
    ``CMAKE_BACKWARDS_COMPATIBILITY`` for projects written for CMake 2.4 and
    below.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.6.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0002.rst
=====================================


.. code-block:: 

    CMP0002
    -------
    
    Logical target names must be globally unique.
    
    Targets names created with :command:`add_executable`, :command:`add_library`, or
    :command:`add_custom_target` are logical build target names.  Logical target
    names must be globally unique because:
    
    ::
    
      - Unique names may be referenced unambiguously both in CMake
        code and on make tool command lines.
      - Logical names are used by Xcode and VS IDE generators
        to produce meaningful project names for the targets.
    
    The logical name of executable and library targets does not have to
    correspond to the physical file names built.  Consider using the
    :prop_tgt:`OUTPUT_NAME` target property to create two targets with the same
    physical name while keeping logical names distinct.  Custom targets
    must simply have globally unique names (unless one uses the global
    property :prop_gbl:`ALLOW_DUPLICATE_CUSTOM_TARGETS` with a Makefiles generator).
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.6.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0003.rst
=====================================


.. code-block:: 

    CMP0003
    -------
    
    Libraries linked via full path no longer produce linker search paths.
    
    This policy affects how libraries whose full paths are NOT known are
    found at link time, but was created due to a change in how CMake deals
    with libraries whose full paths are known.  Consider the code
    
    ::
    
      target_link_libraries(myexe /path/to/libA.so)
    
    CMake 2.4 and below implemented linking to libraries whose full paths
    are known by splitting them on the link line into separate components
    consisting of the linker search path and the library name.  The
    example code might have produced something like
    
    ::
    
      ... -L/path/to -lA ...
    
    in order to link to library A.  An analysis was performed to order
    multiple link directories such that the linker would find library A in
    the desired location, but there are cases in which this does not work.
    CMake versions 2.6 and above use the more reliable approach of passing
    the full path to libraries directly to the linker in most cases.  The
    example code now produces something like
    
    ::
    
      ... /path/to/libA.so ....
    
    Unfortunately this change can break code like
    
    ::
    
      target_link_libraries(myexe /path/to/libA.so B)
    
    where ``B`` is meant to find ``/path/to/libB.so``.  This code is wrong
    because the user is asking the linker to find library B but has not
    provided a linker search path (which may be added with the
    link_directories command).  However, with the old linking
    implementation the code would work accidentally because the linker
    search path added for library A allowed library B to be found.
    
    In order to support projects depending on linker search paths added by
    linking to libraries with known full paths, the ``OLD`` behavior for this
    policy will add the linker search paths even though they are not
    needed for their own libraries.  When this policy is set to ``OLD``, CMake
    will produce a link line such as
    
    ::
    
      ... -L/path/to /path/to/libA.so -lB ...
    
    which will allow library B to be found as it was previously.  When
    this policy is set to NEW, CMake will produce a link line such as
    
    ::
    
      ... /path/to/libA.so -lB ...
    
    which more accurately matches what the project specified.
    
    The setting for this policy used when generating the link line is that
    in effect when the target is created by an add_executable or
    add_library command.  For the example described above, the code
    
    ::
    
      cmake_policy(SET CMP0003 OLD) # or cmake_policy(VERSION 2.4)
      add_executable(myexe myexe.c)
      target_link_libraries(myexe /path/to/libA.so B)
    
    will work and suppress the warning for this policy.  It may also be
    updated to work with the corrected linking approach:
    
    ::
    
      cmake_policy(SET CMP0003 NEW) # or cmake_policy(VERSION 2.6)
      link_directories(/path/to) # needed to find library B
      add_executable(myexe myexe.c)
      target_link_libraries(myexe /path/to/libA.so B)
    
    Even better, library B may be specified with a full path:
    
    ::
    
      add_executable(myexe myexe.c)
      target_link_libraries(myexe /path/to/libA.so /path/to/libB.so)
    
    When all items on the link line have known paths CMake does not check
    this policy so it has no effect.
    
    Note that the warning for this policy will be issued for at most one
    target.  This avoids flooding users with messages for every target
    when setting the policy once will probably fix all targets.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.6.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0004.rst
=====================================


.. code-block:: 

    CMP0004
    -------
    
    Libraries linked may not have leading or trailing whitespace.
    
    CMake versions 2.4 and below silently removed leading and trailing
    whitespace from libraries linked with code like
    
    ::
    
      target_link_libraries(myexe " A ")
    
    This could lead to subtle errors in user projects.
    
    The ``OLD`` behavior for this policy is to silently remove leading and
    trailing whitespace.  The ``NEW`` behavior for this policy is to diagnose
    the existence of such whitespace as an error.  The setting for this
    policy used when checking the library names is that in effect when the
    target is created by an :command:`add_executable` or :command:`add_library`
    command.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.6.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0005.rst
=====================================


.. code-block:: 

    CMP0005
    -------
    
    Preprocessor definition values are now escaped automatically.
    
    This policy determines whether or not CMake should generate escaped
    preprocessor definition values added via add_definitions.  CMake
    versions 2.4 and below assumed that only trivial values would be given
    for macros in add_definitions calls.  It did not attempt to escape
    non-trivial values such as string literals in generated build rules.
    CMake versions 2.6 and above support escaping of most values, but
    cannot assume the user has not added escapes already in an attempt to
    work around limitations in earlier versions.
    
    The ``OLD`` behavior for this policy is to place definition values given
    to add_definitions directly in the generated build rules without
    attempting to escape anything.  The ``NEW`` behavior for this policy is to
    generate correct escapes for all native build tools automatically.
    See documentation of the ``COMPILE_DEFINITIONS`` target property for
    limitations of the escaping implementation.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.6.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0006.rst
=====================================


.. code-block:: 

    CMP0006
    -------
    
    Installing :prop_tgt:`MACOSX_BUNDLE` targets requires a ``BUNDLE DESTINATION``.
    
    This policy determines whether the :command:`install(TARGETS)` command must be
    given a ``BUNDLE DESTINATION`` when asked to install a target with the
    :prop_tgt:`MACOSX_BUNDLE` property set.  CMake 2.4 and below did not distinguish
    application bundles from normal executables when installing targets.
    CMake 2.6 provides a ``BUNDLE`` option to the :command:`install(TARGETS)`
    command that specifies rules specific to application bundles on the Mac.
    Projects should use this option when installing a target with the
    :prop_tgt:`MACOSX_BUNDLE` property set.
    
    The ``OLD`` behavior for this policy is to fall back to the
    ``RUNTIME DESTINATION`` if a ``BUNDLE DESTINATION`` is not given.  The ``NEW``
    behavior for this policy is to produce an error if a bundle target is installed
    without a ``BUNDLE DESTINATION``.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.6.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0007.rst
=====================================


.. code-block:: 

    CMP0007
    -------
    
    list command no longer ignores empty elements.
    
    This policy determines whether the list command will ignore empty
    elements in the list.  CMake 2.4 and below list commands ignored all
    empty elements in the list.  For example, ``a;b;;c`` would have length 3
    and not 4.  The ``OLD`` behavior for this policy is to ignore empty list
    elements.  The ``NEW`` behavior for this policy is to correctly count
    empty elements in a list.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.6.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0008.rst
=====================================


.. code-block:: 

    CMP0008
    -------
    
    Libraries linked by full-path must have a valid library file name.
    
    In CMake 2.4 and below it is possible to write code like
    
    ::
    
      target_link_libraries(myexe /full/path/to/somelib)
    
    where ``somelib`` is supposed to be a valid library file name such as
    ``libsomelib.a`` or ``somelib.lib``.  For Makefile generators this
    produces an error at build time because the dependency on the full
    path cannot be found.  For :ref:`Visual Studio Generators` IDE
    and :generator:`Xcode` generators this used to
    work by accident because CMake would always split off the library
    directory and ask the linker to search for the library by name
    (``-lsomelib`` or ``somelib.lib``).  Despite the failure with Makefiles, some
    projects have code like this and build only with Visual Studio and/or Xcode.
    This version of CMake prefers to pass the full path directly to the
    native build tool, which will fail in this case because it does not
    name a valid library file.
    
    This policy determines what to do with full paths that do not appear
    to name a valid library file.  The ``OLD`` behavior for this policy is to
    split the library name from the path and ask the linker to search for
    it.  The ``NEW`` behavior for this policy is to trust the given path and
    pass it directly to the native build tool unchanged.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.6.1
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0009.rst
=====================================


.. code-block:: 

    CMP0009
    -------
    
    FILE GLOB_RECURSE calls should not follow symlinks by default.
    
    In CMake 2.6.1 and below, :command:`file(GLOB_RECURSE)` calls would follow
    through symlinks, sometimes coming up with unexpectedly large result sets
    because of symlinks to top level directories that contain hundreds of
    thousands of files.
    
    This policy determines whether or not to follow symlinks encountered
    during a :command:`file(GLOB_RECURSE)` call.  The ``OLD`` behavior for this
    policy is to follow the symlinks.  The ``NEW`` behavior for this policy is not
    to follow the symlinks by default, but only if ``FOLLOW_SYMLINKS`` is given
    as an additional argument to the ``FILE`` command.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.6.2
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0010.rst
=====================================


.. code-block:: 

    CMP0010
    -------
    
    Bad variable reference syntax is an error.
    
    In CMake 2.6.2 and below, incorrect variable reference syntax such as
    a missing close-brace (``${FOO``) was reported but did not stop
    processing of CMake code.  This policy determines whether a bad
    variable reference is an error.  The ``OLD`` behavior for this policy is
    to warn about the error, leave the string untouched, and continue.
    The ``NEW`` behavior for this policy is to report an error.
    
    If :policy:`CMP0053` is set to ``NEW``, this policy has no effect
    and is treated as always being ``NEW``.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.6.3
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0011.rst
=====================================


.. code-block:: 

    CMP0011
    -------
    
    Included scripts do automatic :command:`cmake_policy` PUSH and POP.
    
    In CMake 2.6.2 and below, CMake Policy settings in scripts loaded by
    the :command:`include` and :command:`find_package` commands would affect
    the includer.  Explicit invocations of ``cmake_policy(PUSH)`` and
    ``cmake_policy(POP)`` were required to isolate policy changes and protect
    the includer.  While some scripts intend to affect the policies of their
    includer, most do not.  In CMake 2.6.3 and above, :command:`include` and
    :command:`find_package` by default ``PUSH`` and ``POP`` an entry on
    the policy stack around an included
    script, but provide a ``NO_POLICY_SCOPE`` option to disable it.  This
    policy determines whether or not to imply ``NO_POLICY_SCOPE`` for
    compatibility.  The ``OLD`` behavior for this policy is to imply
    ``NO_POLICY_SCOPE`` for :command:`include` and :command:`find_package` commands.
    The ``NEW`` behavior for this policy is to allow the commands to do
    their default cmake_policy ``PUSH`` and ``POP``.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.6.3
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0012.rst
=====================================


.. code-block:: 

    CMP0012
    -------
    
    :command:`if` recognizes numbers and boolean constants.
    
    In CMake versions 2.6.4 and lower the :command:`if` command implicitly
    dereferenced arguments corresponding to variables, even those named
    like numbers or boolean constants, except for ``0`` and ``1``.  Numbers and
    boolean constants such as ``true``, ``false``, ``yes``, ``no``, ``on``,
    ``off``, ``y``, ``n``, ``notfound``, ``ignore`` (all case insensitive)
    were recognized in some cases but not all.  For example, the code ``if(TRUE)``
    might have evaluated as ``false``.
    Numbers such as 2 were recognized only in boolean expressions
    like ``if(NOT 2)`` (leading to ``false``) but not as a single-argument like
    ``if(2)`` (also leading to ``false``).  Later versions of CMake prefer to
    treat numbers and boolean constants literally, so they should not be
    used as variable names.
    
    The ``OLD`` behavior for this policy is to implicitly dereference
    variables named like numbers and boolean constants.  The ``NEW`` behavior
    for this policy is to recognize numbers and boolean constants without
    dereferencing variables with such names.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.8.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0013.rst
=====================================


.. code-block:: 

    CMP0013
    -------
    
    Duplicate binary directories are not allowed.
    
    CMake 2.6.3 and below silently permitted add_subdirectory() calls to
    create the same binary directory multiple times.  During build system
    generation files would be written and then overwritten in the build
    tree and could lead to strange behavior.  CMake 2.6.4 and above
    explicitly detect duplicate binary directories.  CMake 2.6.4 always
    considers this case an error.  In CMake 2.8.0 and above this policy
    determines whether or not the case is an error.  The ``OLD`` behavior for
    this policy is to allow duplicate binary directories.  The NEW
    behavior for this policy is to disallow duplicate binary directories
    with an error.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.8.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0014.rst
=====================================


.. code-block:: 

    CMP0014
    -------
    
    Input directories must have ``CMakeLists.txt``.
    
    CMake versions before 2.8 silently ignored missing ``CMakeLists.txt``
    files in directories referenced by :command:`add_subdirectory` or  :command:`subdirs`,
    treating them as if present but empty.  In CMake 2.8.0 and above this
    :command:`cmake_policy` determines whether or not the case is an error.
    The ``OLD`` behavior for this policy is to silently ignore the problem.
    The ``NEW`` behavior for this policy is to report an error.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.8.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0015.rst
=====================================


.. code-block:: 

    CMP0015
    -------
    
     :command:`link_directories` treats paths relative to the source dir.
    
    In CMake 2.8.0 and lower the :command:`link_directories` command passed
    relative paths unchanged to the linker.  In CMake 2.8.1 and above the
    :command:`link_directories` command prefers to interpret relative paths with
    respect to ``CMAKE_CURRENT_SOURCE_DIR``, which is consistent with
    :command:`include_directories` and other commands.  The ``OLD`` behavior for
    this policy is to use relative paths verbatim in the linker command.  The
    ``NEW`` behavior for this policy is to convert relative paths to absolute
    paths by appending the relative path to ``CMAKE_CURRENT_SOURCE_DIR``.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.8.1
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0016.rst
=====================================


.. code-block:: 

    CMP0016
    -------
    
    :command:`target_link_libraries` reports error if its only argument
    is not a target.
    
    In CMake 2.8.2 and lower the :command:`target_link_libraries` command silently
    ignored if it was called with only one argument, and this argument
    wasn't a valid target.  In CMake 2.8.3 and above it reports an error
    in this case.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.8.3
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0017.rst
=====================================


.. code-block:: 

    CMP0017
    -------
    
    Prefer files from the CMake module directory when including from there.
    
    Starting with CMake 2.8.4, if a cmake-module shipped with CMake (i.e.
    located in the CMake module directory) calls :command:`include` or
    :command:`find_package`, the files located in the CMake module directory are
    preferred over the files in :variable:`CMAKE_MODULE_PATH`.  This makes sure
    that the modules belonging to CMake always get those files included which
    they expect, and against which they were developed and tested.  In all
    other cases, the files found in :variable:`CMAKE_MODULE_PATH` still take
    precedence over the ones in the CMake module directory.  The ``OLD``
    behavior is to always prefer files from CMAKE_MODULE_PATH over files
    from the CMake modules directory.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.8.4
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0018.rst
=====================================


.. code-block:: 

    CMP0018
    -------
    
    Ignore ``CMAKE_SHARED_LIBRARY_<Lang>_FLAGS`` variable.
    
    CMake 2.8.8 and lower compiled sources in ``SHARED`` and ``MODULE`` libraries
    using the value of the undocumented ``CMAKE_SHARED_LIBRARY_<Lang>_FLAGS``
    platform variable.  The variable contained platform-specific flags
    needed to compile objects for shared libraries.  Typically it included
    a flag such as ``-fPIC`` for position independent code but also included
    other flags needed on certain platforms.  CMake 2.8.9 and higher
    prefer instead to use the :prop_tgt:`POSITION_INDEPENDENT_CODE` target
    property to determine what targets should be position independent, and new
    undocumented platform variables to select flags while ignoring
    ``CMAKE_SHARED_LIBRARY_<Lang>_FLAGS`` completely.
    
    The default for either approach produces identical compilation flags,
    but if a project modifies ``CMAKE_SHARED_LIBRARY_<Lang>_FLAGS`` from its
    original value this policy determines which approach to use.
    
    The ``OLD`` behavior for this policy is to ignore the
    :prop_tgt:`POSITION_INDEPENDENT_CODE` property for all targets and use the
    modified value of ``CMAKE_SHARED_LIBRARY_<Lang>_FLAGS`` for ``SHARED`` and
    ``MODULE`` libraries.
    
    The ``NEW`` behavior for this policy is to ignore
    ``CMAKE_SHARED_LIBRARY_<Lang>_FLAGS`` whether it is modified or not and
    honor the :prop_tgt:`POSITION_INDEPENDENT_CODE` target property.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.8.9
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0019.rst
=====================================


.. code-block:: 

    CMP0019
    -------
    
    Do not re-expand variables in include and link information.
    
    CMake 2.8.10 and lower re-evaluated values given to the
    include_directories, link_directories, and link_libraries commands to
    expand any leftover variable references at the end of the
    configuration step.  This was for strict compatibility with VERY early
    CMake versions because all variable references are now normally
    evaluated during CMake language processing.  CMake 2.8.11 and higher
    prefer to skip the extra evaluation.
    
    The ``OLD`` behavior for this policy is to re-evaluate the values for
    strict compatibility.  The ``NEW`` behavior for this policy is to leave
    the values untouched.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.8.11
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0020.rst
=====================================


.. code-block:: 

    CMP0020
    -------
    
    Automatically link Qt executables to ``qtmain`` target on Windows.
    
    CMake 2.8.10 and lower required users of Qt to always specify a link
    dependency to the ``qtmain.lib`` static library manually on Windows.
    CMake 2.8.11 gained the ability to evaluate generator expressions
    while determining the link dependencies from ``IMPORTED`` targets.  This
    allows CMake itself to automatically link executables which link to Qt
    to the ``qtmain.lib`` library when using ``IMPORTED`` Qt targets.  For
    applications already linking to ``qtmain.lib``, this should have little
    impact.  For applications which supply their own alternative WinMain
    implementation and for applications which use the QAxServer library,
    this automatic linking will need to be disabled as per the
    documentation.
    
    The ``OLD`` behavior for this policy is not to link executables to
    ``qtmain.lib`` automatically when they link to the QtCore ``IMPORTED`` target.
    The ``NEW`` behavior for this policy is to link executables to ``qtmain.lib``
    automatically when they link to QtCore ``IMPORTED`` target.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.8.11
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0021.rst
=====================================


.. code-block:: 

    CMP0021
    -------
    
    Fatal error on relative paths in :prop_tgt:`INCLUDE_DIRECTORIES` target
    property.
    
    CMake 2.8.10.2 and lower allowed the :prop_tgt:`INCLUDE_DIRECTORIES` target
    property to contain relative paths.  The base path for such relative
    entries is not well defined.  CMake 2.8.12 issues a ``FATAL_ERROR`` if the
    :prop_tgt:`INCLUDE_DIRECTORIES` property contains a relative path.
    
    The ``OLD`` behavior for this policy is not to warn about relative paths
    in the ``INCLUDE_DIRECTORIES`` target property.  The ``NEW`` behavior for this
    policy is to issue a ``FATAL_ERROR`` if ``INCLUDE_DIRECTORIES`` contains a
    relative path.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.8.12
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0022.rst
=====================================


.. code-block:: 

    CMP0022
    -------
    
    :prop_tgt:`INTERFACE_LINK_LIBRARIES` defines the link interface.
    
    CMake 2.8.11 constructed the 'link interface' of a target from
    properties matching ``(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_<CONFIG>)?``.
    The modern way to specify config-sensitive content is to use generator
    expressions and the ``IMPORTED_`` prefix makes uniform processing of the
    link interface with generator expressions impossible.  The
    :prop_tgt:`INTERFACE_LINK_LIBRARIES` target property was introduced as a
    replacement in CMake 2.8.12.  This new property is named consistently
    with the ``INTERFACE_COMPILE_DEFINITIONS``, ``INTERFACE_INCLUDE_DIRECTORIES``
    and ``INTERFACE_COMPILE_OPTIONS`` properties.  For in-build targets, CMake
    will use the INTERFACE_LINK_LIBRARIES property as the source of the
    link interface only if policy ``CMP0022`` is ``NEW``.  When exporting a target
    which has this policy set to ``NEW``, only the :prop_tgt:`INTERFACE_LINK_LIBRARIES`
    property will be processed and generated for the ``IMPORTED`` target by
    default.  A new option to the :command:`install(EXPORT)` and export commands
    allows export of the old-style properties for compatibility with
    downstream users of CMake versions older than 2.8.12.  The
    :command:`target_link_libraries` command will no longer populate the properties
    matching ``LINK_INTERFACE_LIBRARIES(_<CONFIG>)?`` if this policy is ``NEW``.
    
    Warning-free future-compatible code which works with CMake 2.8.7 onwards
    can be written by using the ``LINK_PRIVATE`` and ``LINK_PUBLIC`` keywords
    of :command:`target_link_libraries`.
    
    The ``OLD`` behavior for this policy is to ignore the
    :prop_tgt:`INTERFACE_LINK_LIBRARIES` property for in-build targets.
    The ``NEW`` behavior for this policy is to use the ``INTERFACE_LINK_LIBRARIES``
    property for in-build targets, and ignore the old properties matching
    ``(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_<CONFIG>)?``.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.8.12
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0023.rst
=====================================


.. code-block:: 

    CMP0023
    -------
    
    Plain and keyword :command:`target_link_libraries` signatures cannot be mixed.
    
    CMake 2.8.12 introduced the :command:`target_link_libraries` signature using
    the ``PUBLIC``, ``PRIVATE``, and ``INTERFACE`` keywords to generalize the
    ``LINK_PUBLIC`` and ``LINK_PRIVATE`` keywords introduced in CMake 2.8.7.
    Use of signatures with any of these keywords sets the link interface of a
    target explicitly, even if empty.  This produces confusing behavior
    when used in combination with the historical behavior of the plain
    :command:`target_link_libraries` signature.  For example, consider the code:
    
    ::
    
     target_link_libraries(mylib A)
     target_link_libraries(mylib PRIVATE B)
    
    After the first line the link interface has not been set explicitly so
    CMake would use the link implementation, A, as the link interface.
    However, the second line sets the link interface to empty.  In order
    to avoid this subtle behavior CMake now prefers to disallow mixing the
    plain and keyword signatures of :command:`target_link_libraries` for a single
    target.
    
    The ``OLD`` behavior for this policy is to allow keyword and plain
    :command:`target_link_libraries` signatures to be mixed.  The ``NEW`` behavior for
    this policy is to not to allow mixing of the keyword and plain
    signatures.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 2.8.12
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0024.rst
=====================================


.. code-block:: 

    CMP0024
    -------
    
    Disallow include export result.
    
    CMake 2.8.12 and lower allowed use of the :command:`include` command with the
    result of the :command:`export` command.  This relies on the assumption that
    the :command:`export` command has an immediate effect at configure-time during
    a cmake run.  Certain properties of targets are not fully determined
    until later at generate-time, such as the link language and complete
    list of link libraries.  Future refactoring will change the effect of
    the :command:`export` command to be executed at generate-time.  Use ``ALIAS``
    targets instead in cases where the goal is to refer to targets by
    another name.
    
    The ``OLD`` behavior for this policy is to allow including the result of
    an :command:`export` command.  The ``NEW`` behavior for this policy is not to
    allow including the result of an :command:`export` command.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0025.rst
=====================================


.. code-block:: 

    CMP0025
    -------
    
    Compiler id for Apple Clang is now ``AppleClang``.
    
    CMake 3.0 and above recognize that Apple Clang is a different compiler
    than upstream Clang and that they have different version numbers.
    CMake now prefers to present this to projects by setting the
    :variable:`CMAKE_<LANG>_COMPILER_ID` variable to ``AppleClang`` instead
    of ``Clang``.  However, existing projects may assume the compiler id for
    Apple Clang is just ``Clang`` as it was in CMake versions prior to 3.0.
    Therefore this policy determines for Apple Clang which compiler id to
    report in the :variable:`CMAKE_<LANG>_COMPILER_ID` variable after
    language ``<LANG>`` is enabled by the :command:`project` or
    :command:`enable_language` command.  The policy must be set prior
    to the invocation of either command.
    
    The ``OLD`` behavior for this policy is to use compiler id ``Clang``.  The
    ``NEW`` behavior for this policy is to use compiler id ``AppleClang``.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn by default
    .. include:: STANDARD_ADVICE.txt
    
    See documentation of the
    :variable:`CMAKE_POLICY_WARNING_CMP0025 <CMAKE_POLICY_WARNING_CMP<NNNN>>`
    variable to control the warning.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0026.rst
=====================================


.. code-block:: 

    CMP0026
    -------
    
    Disallow use of the LOCATION property for build targets.
    
    CMake 2.8.12 and lower allowed reading the :prop_tgt:`LOCATION` target
    property (and configuration-specific variants) to
    determine the eventual location of build targets.  This relies on the
    assumption that all necessary information is available at
    configure-time to determine the final location and filename of the
    target.  However, this property is not fully determined until later at
    generate-time.  At generate time, the :genex:`$<TARGET_FILE>` generator
    expression can be used to determine the eventual :prop_tgt:`LOCATION` of a target
    output.
    
    Code which reads the :prop_tgt:`LOCATION` target property can be ported to
    use the :genex:`$<TARGET_FILE>` generator expression together with the
    :command:`file(GENERATE)` subcommand to generate a file containing
    the target location.
    
    The ``OLD`` behavior for this policy is to allow reading the :prop_tgt:`LOCATION`
    properties from build-targets.  The ``NEW`` behavior for this policy is to
    not to allow reading the :prop_tgt:`LOCATION` properties from build-targets.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0027.rst
=====================================


.. code-block:: 

    CMP0027
    -------
    
    Conditionally linked imported targets with missing include directories.
    
    CMake 2.8.11 introduced introduced the concept of
    :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`, and a check at cmake time that the
    entries in the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of an ``IMPORTED``
    target actually exist.  CMake 2.8.11 also introduced generator expression
    support in the :command:`target_link_libraries` command.  However, if an
    imported target is linked as a result of a generator expression evaluation, the
    entries in the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of that target were not
    checked for existence as they should be.
    
    The ``OLD`` behavior of this policy is to report a warning if an entry in
    the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of a generator-expression
    conditionally linked ``IMPORTED`` target does not exist.
    
    The ``NEW`` behavior of this policy is to report an error if an entry in
    the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of a generator-expression
    conditionally linked ``IMPORTED`` target does not exist.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0028.rst
=====================================


.. code-block:: 

    CMP0028
    -------
    
    Double colon in target name means ``ALIAS`` or ``IMPORTED`` target.
    
    CMake 2.8.12 and lower allowed the use of targets and files with double
    colons in :command:`target_link_libraries`, with some buildsystem generators.
    
    The use of double-colons is a common pattern used to namespace ``IMPORTED``
    targets and ``ALIAS`` targets.  When computing the link dependencies of
    a target, the name of each dependency could either be a target, or a file
    on disk.  Previously, if a target was not found with a matching name, the name
    was considered to refer to a file on disk.  This can lead to confusing error
    messages if there is a typo in what should be a target name.
    
    See also the :prop_tgt:`LINK_LIBRARIES_ONLY_TARGETS` target property.
    
    The ``OLD`` behavior for this policy is to search for targets, then files on
    disk, even if the search term contains double-colons.  The ``NEW`` behavior
    for this policy is to issue a ``FATAL_ERROR`` if a link dependency contains
    double-colons but is not an ``IMPORTED`` target or an ``ALIAS`` target.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0029.rst
=====================================


.. code-block:: 

    CMP0029
    -------
    
    The :command:`subdir_depends` command should not be called.
    
    The implementation of this command has been empty since December 2001
    but was kept in CMake for compatibility for a long time.
    
    .. |disallowed_version| replace:: 3.0
    .. include:: DISALLOWED_COMMAND.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0030.rst
=====================================


.. code-block:: 

    CMP0030
    -------
    
    The :command:`use_mangled_mesa` command should not be called.
    
    This command was created in September 2001 to support VTK before
    modern CMake language and custom command capabilities.  VTK has
    not used it in years.
    
    .. |disallowed_version| replace:: 3.0
    .. include:: DISALLOWED_COMMAND.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0031.rst
=====================================


.. code-block:: 

    CMP0031
    -------
    
    The :command:`load_command` command should not be called.
    
    This command was added in August 2002 to allow projects to add
    arbitrary commands implemented in C or C++.  However, it does
    not work when the toolchain in use does not match the ABI of
    the CMake process.  It has been mostly superseded by the
    :command:`macro` and :command:`function` commands.
    
    .. |disallowed_version| replace:: 3.0
    .. include:: DISALLOWED_COMMAND.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0032.rst
=====================================


.. code-block:: 

    CMP0032
    -------
    
    The :command:`output_required_files` command should not be called.
    
    This command was added in June 2001 to expose the then-current CMake
    implicit dependency scanner.  CMake's real implicit dependency scanner
    has evolved since then but is not exposed through this command.  The
    scanning capabilities of this command are very limited and this
    functionality is better achieved through dedicated outside tools.
    
    .. |disallowed_version| replace:: 3.0
    .. include:: DISALLOWED_COMMAND.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0033.rst
=====================================


.. code-block:: 

    CMP0033
    -------
    
    The :command:`export_library_dependencies` command should not be called.
    
    This command was added in January 2003 to export ``<tgt>_LIB_DEPENDS``
    internal CMake cache entries to a file for installation with a project.
    This was used at the time to allow transitive link dependencies to
    work for applications outside of the original build tree of a project.
    The functionality has been superseded by the :command:`export` and
    :command:`install(EXPORT)` commands.
    
    .. |disallowed_version| replace:: 3.0
    .. include:: DISALLOWED_COMMAND.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0034.rst
=====================================


.. code-block:: 

    CMP0034
    -------
    
    The :command:`utility_source` command should not be called.
    
    This command was introduced in March 2001 to help build executables used to
    generate other files.  This approach has long been replaced by
    :command:`add_executable` combined with :command:`add_custom_command`.
    
    .. |disallowed_version| replace:: 3.0
    .. include:: DISALLOWED_COMMAND.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0035.rst
=====================================


.. code-block:: 

    CMP0035
    -------
    
    The :command:`variable_requires` command should not be called.
    
    This command was introduced in November 2001 to perform some conditional
    logic.  It has long been replaced by the :command:`if` command.
    
    .. |disallowed_version| replace:: 3.0
    .. include:: DISALLOWED_COMMAND.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0036.rst
=====================================


.. code-block:: 

    CMP0036
    -------
    
    The :command:`build_name` command should not be called.
    
    This command was added in May 2001 to compute a name for the current
    operating system and compiler combination.  The command has long been
    documented as discouraged and replaced by the :variable:`CMAKE_SYSTEM`
    and :variable:`CMAKE_<LANG>_COMPILER` variables.
    
    .. |disallowed_version| replace:: 3.0
    .. include:: DISALLOWED_COMMAND.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0037.rst
=====================================


.. code-block:: 

    CMP0037
    -------
    
    Target names should not be reserved and should match a validity pattern.
    
    CMake 2.8.12 and lower allowed creating targets using :command:`add_library`,
    :command:`add_executable` and :command:`add_custom_target` with unrestricted
    choice for the target name.  Newer cmake features such
    as :manual:`cmake-generator-expressions(7)` and some
    diagnostics expect target names to match a restricted pattern.
    
    Target names may contain upper and lower case letters, numbers, the underscore
    character (``_``), dot(``.``), plus(``+``) and minus(``-``).
    As a special case, ``ALIAS`` and ``IMPORTED`` targets may contain
    two consecutive colons.
    
    Target names reserved by one or more CMake generators are not allowed.
    Among others these include ``all``, ``clean``, ``help``, and ``install``.
    
    Target names associated with optional features, such as ``test`` and
    ``package``, may also be reserved.  CMake 3.10 and below always reserve them.
    CMake 3.11 and above reserve them only when the corresponding feature is
    enabled (e.g. by including the :module:`CTest` or :module:`CPack` modules).
    
    The ``OLD`` behavior for this policy is to allow creating targets with
    reserved names or which do not match the validity pattern.
    The ``NEW`` behavior for this policy is to report an error
    if an add_* command is used with an invalid target name.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0038.rst
=====================================


.. code-block:: 

    CMP0038
    -------
    
    Targets may not link directly to themselves.
    
    CMake 2.8.12 and lower allowed a build target to link to itself directly with
    a :command:`target_link_libraries` call. This is an indicator of a bug in
    user code.
    
    The ``OLD`` behavior for this policy is to ignore targets which list themselves
    in their own link implementation.  The ``NEW`` behavior for this policy is to
    report an error if a target attempts to link to itself.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0039.rst
=====================================


.. code-block:: 

    CMP0039
    -------
    
    Utility targets may not have link dependencies.
    
    CMake 2.8.12 and lower allowed using utility targets in the left hand side
    position of the :command:`target_link_libraries` command. This is an indicator
    of a bug in user code.
    
    The ``OLD`` behavior for this policy is to ignore attempts to set the link
    libraries of utility targets.  The ``NEW`` behavior for this policy is to
    report an error if an attempt is made to set the link libraries of a
    utility target.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0040.rst
=====================================


.. code-block:: 

    CMP0040
    -------
    
    The target in the ``TARGET`` signature of :command:`add_custom_command`
    must exist and must be defined in the current directory.
    
    CMake 2.8.12 and lower silently ignored a custom command created with
    the ``TARGET`` signature of :command:`add_custom_command`
    if the target is unknown or was defined outside the current directory.
    
    The ``OLD`` behavior for this policy is to ignore custom commands
    for unknown targets.  The ``NEW`` behavior for this policy is to report
    an error if the target referenced in :command:`add_custom_command` is
    unknown or was defined outside the current directory.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0041.rst
=====================================


.. code-block:: 

    CMP0041
    -------
    
    Error on relative include with generator expression.
    
    Diagnostics in CMake 2.8.12 and lower silently ignored an entry in the
    :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of a target if it contained a generator
    expression at any position.
    
    The path entries in that target property should not be relative. High-level
    API should ensure that by adding either a source directory or a install
    directory prefix, as appropriate.
    
    As an additional diagnostic, the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` generated
    on an :prop_tgt:`IMPORTED` target for the install location should not contain
    paths in the source directory or the build directory.
    
    The ``OLD`` behavior for this policy is to ignore relative path entries if they
    contain a generator expression. The ``NEW`` behavior for this policy is to report
    an error if a generator expression appears in another location and the path is
    relative.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0042.rst
=====================================


.. code-block:: 

    CMP0042
    -------
    
    :prop_tgt:`MACOSX_RPATH` is enabled by default.
    
    CMake 2.8.12 and newer has support for using ``@rpath`` in a target's install
    name.  This was enabled by setting the target property
    :prop_tgt:`MACOSX_RPATH`.  The ``@rpath`` in an install name is a more
    flexible and powerful mechanism than ``@executable_path`` or ``@loader_path``
    for locating shared libraries.
    
    CMake 3.0 and later prefer this property to be ON by default.  Projects
    wanting ``@rpath`` in a target's install name may remove any setting of
    the :prop_tgt:`INSTALL_NAME_DIR` and :variable:`CMAKE_INSTALL_NAME_DIR`
    variables.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0043.rst
=====================================


.. code-block:: 

    CMP0043
    -------
    
    Ignore COMPILE_DEFINITIONS_<Config> properties
    
    CMake 2.8.12 and lower allowed setting the
    :prop_tgt:`COMPILE_DEFINITIONS_<CONFIG>` target property and
    :prop_dir:`COMPILE_DEFINITIONS_<CONFIG>` directory property to apply
    configuration-specific compile definitions.
    
    Since CMake 2.8.10, the :prop_tgt:`COMPILE_DEFINITIONS` property has supported
    :manual:`generator expressions <cmake-generator-expressions(7)>` for setting
    configuration-dependent content.  The continued existence of the suffixed
    variables is redundant, and causes a maintenance burden.  Population of the
    :prop_tgt:`COMPILE_DEFINITIONS_DEBUG <COMPILE_DEFINITIONS_<CONFIG>>` property
    may be replaced with a population of :prop_tgt:`COMPILE_DEFINITIONS` directly
    or via :command:`target_compile_definitions`:
    
    .. code-block:: cmake
    
      # Old Interfaces:
      set_property(TARGET tgt APPEND PROPERTY
        COMPILE_DEFINITIONS_DEBUG DEBUG_MODE
      )
      set_property(DIRECTORY APPEND PROPERTY
        COMPILE_DEFINITIONS_DEBUG DIR_DEBUG_MODE
      )
    
      # New Interfaces:
      set_property(TARGET tgt APPEND PROPERTY
        COMPILE_DEFINITIONS $<$<CONFIG:Debug>:DEBUG_MODE>
      )
      target_compile_definitions(tgt PRIVATE $<$<CONFIG:Debug>:DEBUG_MODE>)
      set_property(DIRECTORY APPEND PROPERTY
        COMPILE_DEFINITIONS $<$<CONFIG:Debug>:DIR_DEBUG_MODE>
      )
    
    The ``OLD`` behavior for this policy is to consume the content of the suffixed
    :prop_tgt:`COMPILE_DEFINITIONS_<CONFIG>` target property when generating the
    compilation command. The ``NEW`` behavior for this policy is to ignore the content
    of the :prop_tgt:`COMPILE_DEFINITIONS_<CONFIG>` target property .
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0044.rst
=====================================


.. code-block:: 

    CMP0044
    -------
    
    Case sensitive ``<LANG>_COMPILER_ID`` generator expressions
    
    CMake 2.8.12 introduced the ``<LANG>_COMPILER_ID``
    :manual:`generator expressions <cmake-generator-expressions(7)>` to allow
    comparison of the :variable:`CMAKE_<LANG>_COMPILER_ID` with a test value.  The
    possible valid values are lowercase, but the comparison with the test value
    was performed case-insensitively.
    
    The ``OLD`` behavior for this policy is to perform a case-insensitive comparison
    with the value in the ``<LANG>_COMPILER_ID`` expression. The ``NEW`` behavior
    for this policy is to perform a case-sensitive comparison with the value in
    the ``<LANG>_COMPILER_ID`` expression.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0045.rst
=====================================


.. code-block:: 

    CMP0045
    -------
    
    Error on non-existent target in get_target_property.
    
    In CMake 2.8.12 and lower, the :command:`get_target_property` command accepted
    a non-existent target argument without issuing any error or warning.  The
    result variable is set to a ``-NOTFOUND`` value.
    
    The ``OLD`` behavior for this policy is to issue no warning and set the result
    variable to a ``-NOTFOUND`` value.  The ``NEW`` behavior
    for this policy is to issue a ``FATAL_ERROR`` if the command is called with a
    non-existent target.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0046.rst
=====================================


.. code-block:: 

    CMP0046
    -------
    
    Error on non-existent dependency in add_dependencies.
    
    CMake 2.8.12 and lower silently ignored non-existent dependencies
    listed in the :command:`add_dependencies` command.
    
    The ``OLD`` behavior for this policy is to silently ignore non-existent
    dependencies. The ``NEW`` behavior for this policy is to report an error
    if non-existent dependencies are listed in the :command:`add_dependencies`
    command.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0047.rst
=====================================


.. code-block:: 

    CMP0047
    -------
    
    Use ``QCC`` compiler id for the qcc drivers on QNX.
    
    CMake 3.0 and above recognize that the QNX qcc compiler driver is
    different from the GNU compiler.
    CMake now prefers to present this to projects by setting the
    :variable:`CMAKE_<LANG>_COMPILER_ID` variable to ``QCC`` instead
    of ``GNU``.  However, existing projects may assume the compiler id for
    QNX qcc is just ``GNU`` as it was in CMake versions prior to 3.0.
    Therefore this policy determines for QNX qcc which compiler id to
    report in the :variable:`CMAKE_<LANG>_COMPILER_ID` variable after
    language ``<LANG>`` is enabled by the :command:`project` or
    :command:`enable_language` command.  The policy must be set prior
    to the invocation of either command.
    
    The ``OLD`` behavior for this policy is to use the ``GNU`` compiler id
    for the qcc and QCC compiler drivers. The ``NEW`` behavior for this policy
    is to use the ``QCC`` compiler id for those drivers.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn by default
    .. include:: STANDARD_ADVICE.txt
    
    See documentation of the
    :variable:`CMAKE_POLICY_WARNING_CMP0047 <CMAKE_POLICY_WARNING_CMP<NNNN>>`
    variable to control the warning.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0048.rst
=====================================


.. code-block:: 

    CMP0048
    -------
    
    The :command:`project` command manages ``VERSION`` variables.
    
    CMake version 3.0 introduced the ``VERSION`` option of the :command:`project`
    command to specify a project version as well as the name.  In order to keep
    :variable:`PROJECT_VERSION` and related variables consistent with variable
    :variable:`PROJECT_NAME` it is necessary to set the ``VERSION`` variables
    to the empty string when no ``VERSION`` is given to :command:`project`.
    However, this can change behavior for existing projects that set ``VERSION``
    variables themselves since :command:`project` may now clear them.
    This policy controls the behavior for compatibility with such projects.
    
    The ``OLD`` behavior for this policy is to leave ``VERSION`` variables untouched.
    The ``NEW`` behavior for this policy is to set ``VERSION`` as documented by the
    :command:`project` command.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0049.rst
=====================================


.. code-block:: 

    CMP0049
    -------
    
    Do not expand variables in target source entries.
    
    CMake 2.8.12 and lower performed an extra layer of variable expansion
    when evaluating source file names::
    
      set(a_source foo.c)
      add_executable(foo \${a_source})
    
    .. note: no cmake highlighting since this syntax is deprecated
    
    This was undocumented behavior.
    
    The ``OLD`` behavior for this policy is to expand such variables when processing
    the target sources.  The ``NEW`` behavior for this policy is to issue an error
    if such variables need to be expanded.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0050.rst
=====================================


.. code-block:: 

    CMP0050
    -------
    
    Disallow add_custom_command SOURCE signatures.
    
    CMake 2.8.12 and lower allowed a signature for :command:`add_custom_command`
    which specified an input to a command.  This was undocumented behavior.
    Modern use of CMake associates custom commands with their output, rather
    than their input.
    
    The ``OLD`` behavior for this policy is to allow the use of
    :command:`add_custom_command` SOURCE signatures.  The ``NEW`` behavior for this
    policy is to issue an error if such a signature is used.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0051.rst
=====================================


.. code-block:: 

    CMP0051
    -------
    
    .. versionadded:: 3.1
    
    List :genex:`TARGET_OBJECTS` in SOURCES target property.
    
    CMake 3.0 and lower did not include the ``TARGET_OBJECTS``
    :manual:`generator expression <cmake-generator-expressions(7)>` when
    returning the :prop_tgt:`SOURCES` target property.
    
    Configure-time CMake code is not able to handle generator expressions.  If
    using the :prop_tgt:`SOURCES` target property at configure time, it may be
    necessary to first remove generator expressions using the
    :command:`string(GENEX_STRIP)` command.  Generate-time CMake code such as
    :command:`file(GENERATE)` can handle the content without stripping.
    
    The ``OLD`` behavior for this policy is to omit ``TARGET_OBJECTS``
    expressions from the :prop_tgt:`SOURCES` target property.  The ``NEW``
    behavior for this policy is to include ``TARGET_OBJECTS`` expressions
    in the output.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.1
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0052.rst
=====================================


.. code-block:: 

    CMP0052
    -------
    
    .. versionadded:: 3.1
    
    Reject source and build dirs in installed
    :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`.
    
    CMake 3.0 and lower allowed subdirectories of the source directory or build
    directory to be in the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of
    installed and exported targets, if the directory was also a subdirectory of
    the installation prefix.  This makes the installation depend on the
    existence of the source dir or binary dir, and the installation will be
    broken if either are removed after installation.
    
    See :ref:`Include Directories and Usage Requirements` for more on
    specifying include directories for targets.
    
    The ``OLD`` behavior for this policy is to export the content of the
    :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` with the source or binary
    directory.  The ``NEW`` behavior for this
    policy is to issue an error if such a directory is used.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.1
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0053.rst
=====================================


.. code-block:: 

    CMP0053
    -------
    
    .. versionadded:: 3.1
    
    Simplify variable reference and escape sequence evaluation.
    
    CMake 3.1 introduced a much faster implementation of evaluation of the
    :ref:`Variable References` and :ref:`Escape Sequences` documented in the
    :manual:`cmake-language(7)` manual.  While the behavior is identical
    to the legacy implementation in most cases, some corner cases were
    cleaned up to simplify the behavior.  Specifically:
    
    * Expansion of ``@VAR@`` reference syntax defined by the
      :command:`configure_file` and :command:`string(CONFIGURE)`
      commands is no longer performed in other contexts.
    
    * Literal ``${VAR}`` reference syntax may contain only
      alphanumeric characters (``A-Z``, ``a-z``, ``0-9``) and
      the characters ``_``, ``.``, ``/``, ``-``, and ``+``.
      Note that ``$`` is technically allowed in the ``NEW`` behavior, but is
      invalid for ``OLD`` behavior.  This is due to an oversight during the
      implementation of ``CMP0053`` and its use as a literal variable
      reference is discouraged for this reason.
      Variables with other characters in their name may still
      be referenced indirectly, e.g.
    
      .. code-block:: cmake
    
        set(varname "otherwise & disallowed $ characters")
        message("${${varname}}")
    
    * The setting of policy :policy:`CMP0010` is not considered,
      so improper variable reference syntax is always an error.
    
    * More characters are allowed to be escaped in variable names.
      Previously, only ``()#" \@^`` were valid characters to
      escape. Now any non-alphanumeric, non-semicolon, non-NUL
      character may be escaped following the ``escape_identity``
      production in the :ref:`Escape Sequences` section of the
      :manual:`cmake-language(7)` manual.
    
    The ``OLD`` behavior for this policy is to honor the legacy behavior for
    variable references and escape sequences.  The ``NEW`` behavior is to
    use the simpler variable expansion and escape sequence evaluation rules.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.1
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0054.rst
=====================================


.. code-block:: 

    CMP0054
    -------
    
    .. versionadded:: 3.1
    
    Only interpret :command:`if` arguments as variables or keywords when unquoted.
    
    CMake 3.1 and above no longer implicitly dereference variables or
    interpret keywords in an :command:`if` command argument when
    it is a :ref:`Quoted Argument` or a :ref:`Bracket Argument`.
    
    The ``OLD`` behavior for this policy is to dereference variables and
    interpret keywords even if they are quoted or bracketed.
    The ``NEW`` behavior is to not dereference variables or interpret keywords
    that have been quoted or bracketed.
    
    Given the following partial example:
    
    ::
    
      set(A E)
      set(E "")
    
      if("${A}" STREQUAL "")
        message("Result is TRUE before CMake 3.1 or when CMP0054 is OLD")
      else()
        message("Result is FALSE in CMake 3.1 and above if CMP0054 is NEW")
      endif()
    
    After explicit expansion of variables this gives:
    
    ::
    
      if("E" STREQUAL "")
    
    With the policy set to ``OLD`` implicit expansion reduces this semantically to:
    
    ::
    
      if("" STREQUAL "")
    
    With the policy set to ``NEW`` the quoted arguments will not be
    further dereferenced:
    
    ::
    
      if("E" STREQUAL "")
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.1
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0055.rst
=====================================


.. code-block:: 

    CMP0055
    -------
    
    .. versionadded:: 3.2
    
    Strict checking for the :command:`break` command.
    
    CMake 3.1 and lower allowed calls to the :command:`break` command
    outside of a loop context and also ignored any given arguments.
    This was undefined behavior.
    
    The ``OLD`` behavior for this policy is to allow :command:`break` to be placed
    outside of loop contexts and ignores any arguments.  The ``NEW`` behavior for this
    policy is to issue an error if a misplaced break or any arguments are found.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.2
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0056.rst
=====================================


.. code-block:: 

    CMP0056
    -------
    
    .. versionadded:: 3.2
    
    Honor link flags in :command:`try_compile` source-file signature.
    
    The :command:`try_compile` command source-file signature generates a
    ``CMakeLists.txt`` file to build the source file into an executable.
    In order to compile the source the same way as it might be compiled
    by the calling project, the generated project sets the value of the
    :variable:`CMAKE_<LANG>_FLAGS` variable to that in the calling project.
    The value of the :variable:`CMAKE_EXE_LINKER_FLAGS` variable may be
    needed in some cases too, but CMake 3.1 and lower did not set it in
    the generated project.  CMake 3.2 and above prefer to set it so that
    linker flags are honored as well as compiler flags.  This policy
    provides compatibility with the pre-3.2 behavior.
    
    The ``OLD`` behavior for this policy is to not set the value of the
    :variable:`CMAKE_EXE_LINKER_FLAGS` variable in the generated test
    project.  The ``NEW`` behavior for this policy is to set the value of
    the :variable:`CMAKE_EXE_LINKER_FLAGS` variable in the test project
    to the same as it is in the calling project.
    
    If the project code does not set the policy explicitly, users may
    set it on the command line by defining the
    :variable:`CMAKE_POLICY_DEFAULT_CMP0056 <CMAKE_POLICY_DEFAULT_CMP<NNNN>>`
    variable in the cache.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.2
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn by default
    .. include:: STANDARD_ADVICE.txt
    
    See documentation of the
    :variable:`CMAKE_POLICY_WARNING_CMP0056 <CMAKE_POLICY_WARNING_CMP<NNNN>>`
    variable to control the warning.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0057.rst
=====================================


.. code-block:: 

    CMP0057
    -------
    
    .. versionadded:: 3.3
    
    Support new :command:`if` IN_LIST operator.
    
    CMake 3.3 adds support for the new IN_LIST operator.
    
    The ``OLD`` behavior for this policy is to ignore the IN_LIST operator.
    The ``NEW`` behavior is to interpret the IN_LIST operator.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.3
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0058.rst
=====================================


.. code-block:: 

    CMP0058
    -------
    
    .. versionadded:: 3.3
    
    Ninja requires custom command byproducts to be explicit.
    
    When an intermediate file generated during the build is consumed
    by an expensive operation or a large tree of dependents, one may
    reduce the work needed for an incremental rebuild by updating the
    file timestamp only when its content changes.  With this approach
    the generation rule must have a separate output file that is always
    updated with a new timestamp that is newer than any dependencies of
    the rule so that the build tool re-runs the rule only when the input
    changes.  We refer to the separate output file as a rule's *witness*
    and the generated file as a rule's *byproduct*.
    
    Byproducts may not be listed as outputs because their timestamps are
    allowed to be older than the inputs.  No build tools (like ``make``)
    that existed when CMake was designed have a way to express byproducts.
    Therefore CMake versions prior to 3.2 had no way to specify them.
    Projects typically left byproducts undeclared in the rules that
    generate them.  For example:
    
    .. code-block:: cmake
    
      add_custom_command(
        OUTPUT witness.txt
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
                ${CMAKE_CURRENT_SOURCE_DIR}/input.txt
                byproduct.txt # timestamp may not change
        COMMAND ${CMAKE_COMMAND} -E touch witness.txt
        DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/input.txt
        )
      add_custom_target(Provider DEPENDS witness.txt)
      add_custom_command(
        OUTPUT generated.c
        COMMAND expensive-task -i byproduct.txt -o generated.c
        DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/byproduct.txt
        )
      add_library(Consumer generated.c)
      add_dependencies(Consumer Provider)
    
    This works well for all generators except :generator:`Ninja`.
    The Ninja build tool sees a rule listing ``byproduct.txt``
    as a dependency and no rule listing it as an output.  Ninja then
    complains that there is no way to satisfy the dependency and
    stops building even though there are order-only dependencies
    that ensure ``byproduct.txt`` will exist before its consumers
    need it.  See discussion of this problem in `Ninja Issue 760`_
    for further details on why Ninja works this way.
    
    .. _Ninja Issue 760: https://github.com/ninja-build/ninja/issues/760
    
    Instead of leaving byproducts undeclared in the rules that generate
    them, Ninja expects byproducts to be listed along with other outputs.
    Such rules may be marked with a ``restat`` option that tells Ninja
    to check the timestamps of outputs after the rules run.  This
    prevents byproducts whose timestamps do not change from causing
    their dependents to re-build unnecessarily.
    
    Since the above approach does not tell CMake what custom command
    generates ``byproduct.txt``, the Ninja generator does not have
    enough information to add the byproduct as an output of any rule.
    CMake 2.8.12 and above work around this problem and allow projects
    using the above approach to build by generating ``phony`` build
    rules to tell Ninja to tolerate such missing files.  However, this
    workaround prevents Ninja from diagnosing a dependency that is
    really missing.  It also works poorly in in-source builds where
    every custom command dependency, even on source files, needs to
    be treated this way because CMake does not have enough information
    to know which files are generated as byproducts of custom commands.
    
    Introducing Byproducts
    ^^^^^^^^^^^^^^^^^^^^^^
    
    CMake 3.2 introduced the ``BYPRODUCTS`` option to the
    :command:`add_custom_command` and :command:`add_custom_target`
    commands.  This option allows byproducts to be specified explicitly:
    
    .. code-block:: cmake
    
      add_custom_command(
        OUTPUT witness.txt
        BYPRODUCTS byproduct.txt # explicit byproduct specification
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
                ${CMAKE_CURRENT_SOURCE_DIR}/input.txt
                byproduct.txt # timestamp may not change
      ...
    
    The ``BYPRODUCTS`` option is used by the :generator:`Ninja` generator
    to list byproducts among the outputs of the custom commands that
    generate them, and is ignored by other generators.
    
    CMake 3.3 and above prefer to require projects to specify custom
    command byproducts explicitly so that it can avoid using the
    ``phony`` rule workaround altogether.  Policy ``CMP0058`` was
    introduced to provide compatibility with existing projects that
    still need the workaround.
    
    This policy has no effect on generators other than :generator:`Ninja`.
    The ``OLD`` behavior for this policy is to generate Ninja ``phony``
    rules for unknown dependencies in the build tree.  The ``NEW``
    behavior for this policy is to not generate these and instead
    require projects to specify custom command ``BYPRODUCTS`` explicitly.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.3
    .. |WARNS_OR_DOES_NOT_WARN| replace::
       warns when it sees unknown dependencies in out-of-source build trees
    .. include:: STANDARD_ADVICE.txt
    
    The policy setting must be in scope at the end of the top-level
    ``CMakeLists.txt`` file of the project and has global effect.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0059.rst
=====================================


.. code-block:: 

    CMP0059
    -------
    
    .. versionadded:: 3.3
    
    Do not treat ``DEFINITIONS`` as a built-in directory property.
    
    CMake 3.3 and above no longer make a list of definitions available through
    the :prop_dir:`DEFINITIONS` directory property.  The
    :prop_dir:`COMPILE_DEFINITIONS` directory property may be used instead.
    
    The ``OLD`` behavior for this policy is to provide the list of flags given
    so far to the :command:`add_definitions` command.  The ``NEW`` behavior is
    to behave as a normal user-defined directory property.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.3
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0060.rst
=====================================


.. code-block:: 

    CMP0060
    -------
    
    .. versionadded:: 3.3
    
    Link libraries by full path even in implicit directories.
    
    Policy :policy:`CMP0003` was introduced with the intention of always
    linking library files by full path when a full path is given to the
    :command:`target_link_libraries` command.  However, on some platforms
    (e.g. HP-UX) the compiler front-end adds alternative library search paths
    for the current architecture (e.g. ``/usr/lib/<arch>`` has alternatives
    to libraries in ``/usr/lib`` for the current architecture).
    On such platforms the :command:`find_library` may find a library such as
    ``/usr/lib/libfoo.so`` that does not belong to the current architecture.
    
    Prior to policy :policy:`CMP0003` projects would still build in such
    cases because the incorrect library path would be converted to ``-lfoo``
    on the link line and the linker would find the proper library in the
    arch-specific search path provided by the compiler front-end implicitly.
    At the time we chose to remain compatible with such projects by always
    converting library files found in implicit link directories to ``-lfoo``
    flags to ask the linker to search for them.  This approach allowed existing
    projects to continue to build while still linking to libraries outside
    implicit link directories via full path (such as those in the build tree).
    
    CMake does allow projects to override this behavior by using an
    :ref:`IMPORTED library target <Imported Targets>` with its
    :prop_tgt:`IMPORTED_LOCATION` property set to the desired full path to
    a library file.  In fact, many :ref:`Find Modules` are learning to provide
    :ref:`Imported Targets` instead of just the traditional ``Foo_LIBRARIES``
    variable listing library files.  However, this makes the link line
    generated for a library found by a Find Module depend on whether it
    is linked through an imported target or not, which is inconsistent.
    Furthermore, this behavior has been a source of confusion because the
    generated link line for a library file depends on its location.  It is
    also problematic for projects trying to link statically because flags
    like ``-Wl,-Bstatic -lfoo -Wl,-Bdynamic`` may be used to help the linker
    select ``libfoo.a`` instead of ``libfoo.so`` but then leak dynamic linking
    to following libraries.  (See the :prop_tgt:`LINK_SEARCH_END_STATIC`
    target property for a solution typically used for that problem.)
    
    When the special case for libraries in implicit link directories was first
    introduced the list of implicit link directories was simply hard-coded
    (e.g. ``/lib``, ``/usr/lib``, and a few others).  Since that time, CMake
    has learned to detect the implicit link directories used by the compiler
    front-end.  If necessary, the :command:`find_library` command could be
    taught to use this information to help find libraries of the proper
    architecture.
    
    For these reasons, CMake 3.3 and above prefer to drop the special case
    and link libraries by full path even when they are in implicit link
    directories.  Policy ``CMP0060`` provides compatibility for existing
    projects.
    
    The ``OLD`` behavior for this policy is to ask the linker to search for
    libraries whose full paths are known to be in implicit link directories.
    The ``NEW`` behavior for this policy is to link libraries by full path even
    if they are in implicit link directories.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.3
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn by default
    .. include:: STANDARD_ADVICE.txt
    
    See documentation of the
    :variable:`CMAKE_POLICY_WARNING_CMP0060 <CMAKE_POLICY_WARNING_CMP<NNNN>>`
    variable to control the warning.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0061.rst
=====================================


.. code-block:: 

    CMP0061
    -------
    
    .. versionadded:: 3.3
    
    CTest does not by default tell ``make`` to ignore errors (``-i``).
    
    The :command:`ctest_build` and :command:`build_command` commands no
    longer generate build commands for :ref:`Makefile Generators` with
    the ``-i`` option.  Previously this was done to help build as much
    of tested projects as possible.  However, this behavior is not
    consistent with other generators and also causes the return code
    of the ``make`` tool to be meaningless.
    
    Of course users may still add this option manually by setting
    :variable:`CTEST_BUILD_COMMAND` or the ``MAKECOMMAND`` cache entry.
    See the :ref:`CTest Build Step` ``MakeCommand`` setting documentation
    for their effects.
    
    The ``OLD`` behavior for this policy is to add ``-i`` to ``make``
    calls in CTest.  The ``NEW`` behavior for this policy is to not
    add ``-i``.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.3
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0062.rst
=====================================


.. code-block:: 

    CMP0062
    -------
    
    .. versionadded:: 3.3
    
    Disallow :command:`install` of :command:`export` result.
    
    The :command:`export()` command generates a file containing
    :ref:`Imported Targets`, which is suitable for use from the build
    directory.  It is not suitable for installation because it contains absolute
    paths to buildsystem locations, and is particular to a single build
    configuration.
    
    The :command:`install(EXPORT)` generates and installs files which contain
    :ref:`Imported Targets`.  These files are generated with relative paths
    (unless the user specifies absolute paths), and are designed for
    multi-configuration use.  See :ref:`Creating Packages` for more.
    
    CMake 3.3 no longer allows the use of the :command:`install(FILES)` command
    with the result of the :command:`export()` command.
    
    The ``OLD`` behavior for this policy is to allow installing the result of
    an :command:`export()` command.  The ``NEW`` behavior for this policy is
    not to allow installing the result of an :command:`export()` command.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.3
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0063.rst
=====================================


.. code-block:: 

    CMP0063
    -------
    
    .. versionadded:: 3.3
    
    Honor visibility properties for all target types.
    
    The :prop_tgt:`<LANG>_VISIBILITY_PRESET` and
    :prop_tgt:`VISIBILITY_INLINES_HIDDEN` target properties affect visibility
    of symbols during dynamic linking.  When first introduced these properties
    affected compilation of sources only in shared libraries, module libraries,
    and executables with the :prop_tgt:`ENABLE_EXPORTS` property set.  This
    was sufficient for the basic use cases of shared libraries and executables
    with plugins.  However, some sources may be compiled as part of static
    libraries or object libraries and then linked into a shared library later.
    CMake 3.3 and above prefer to honor these properties for sources compiled
    in all target types.  This policy preserves compatibility for projects
    expecting the properties to work only for some target types.
    
    The ``OLD`` behavior for this policy is to ignore the visibility properties
    for static libraries, object libraries, and executables without exports.
    The ``NEW`` behavior for this policy is to honor the visibility properties
    for all target types.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.3
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0064.rst
=====================================


.. code-block:: 

    CMP0064
    -------
    
    .. versionadded:: 3.4
    
    Recognize ``TEST`` as a operator for the :command:`if` command.
    
    The ``TEST`` operator was added to the :command:`if` command to determine if a
    given test name was created by the :command:`add_test` command.
    
    The ``OLD`` behavior for this policy is to ignore the ``TEST`` operator.
    The ``NEW`` behavior is to interpret the ``TEST`` operator.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.4
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0065.rst
=====================================


.. code-block:: 

    CMP0065
    -------
    
    .. versionadded:: 3.4
    
    Do not add flags to export symbols from executables without
    the :prop_tgt:`ENABLE_EXPORTS` target property.
    
    CMake 3.3 and below, for historical reasons, always linked executables
    on some platforms with flags like ``-rdynamic`` to export symbols from
    the executables for use by any plugins they may load via ``dlopen``.
    CMake 3.4 and above prefer to do this only for executables that are
    explicitly marked with the :prop_tgt:`ENABLE_EXPORTS` target property.
    
    The ``OLD`` behavior of this policy is to always use the additional link
    flags when linking executables regardless of the value of the
    :prop_tgt:`ENABLE_EXPORTS` target property.
    
    The ``NEW`` behavior of this policy is to only use the additional link
    flags when linking executables if the :prop_tgt:`ENABLE_EXPORTS` target
    property is set to ``True``.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.4
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn by default
    .. include:: STANDARD_ADVICE.txt
    
    See documentation of the
    :variable:`CMAKE_POLICY_WARNING_CMP0065 <CMAKE_POLICY_WARNING_CMP<NNNN>>`
    variable to control the warning.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0066.rst
=====================================


.. code-block:: 

    CMP0066
    -------
    
    .. versionadded:: 3.7
    
    Honor per-config flags in :command:`try_compile` source-file signature.
    
    The source file signature of the :command:`try_compile` command uses the value
    of the :variable:`CMAKE_<LANG>_FLAGS` variable in the test project so that the
    test compilation works as it would in the main project.  However, CMake 3.6 and
    below do not also honor config-specific compiler flags such as those in the
    :variable:`CMAKE_<LANG>_FLAGS_DEBUG` variable.  CMake 3.7 and above prefer to
    honor config-specific compiler flags too.  This policy provides compatibility
    for projects that do not expect config-specific compiler flags to be used.
    
    The ``OLD`` behavior of this policy is to ignore config-specific flag
    variables like :variable:`CMAKE_<LANG>_FLAGS_DEBUG` and only use CMake's
    built-in defaults for the current compiler and platform.
    
    The ``NEW`` behavior of this policy is to honor config-specific flag
    variabldes like :variable:`CMAKE_<LANG>_FLAGS_DEBUG`.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.7
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn by default
    .. include:: STANDARD_ADVICE.txt
    
    See documentation of the
    :variable:`CMAKE_POLICY_WARNING_CMP0066 <CMAKE_POLICY_WARNING_CMP<NNNN>>`
    variable to control the warning.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0067.rst
=====================================


.. code-block:: 

    CMP0067
    -------
    
    .. versionadded:: 3.8
    
    Honor language standard in :command:`try_compile` source-file signature.
    
    The :command:`try_compile` source file signature is intended to allow
    callers to check whether they will be able to compile a given source file
    with the current toolchain.  In order to match compiler behavior, any
    language standard mode should match.  However, CMake 3.7 and below did not
    do this.  CMake 3.8 and above prefer to honor the language standard settings
    for ``C``, ``CXX`` (C++), and ``CUDA`` using the values of the variables:
    
    * :variable:`CMAKE_C_STANDARD`
    * :variable:`CMAKE_C_STANDARD_REQUIRED`
    * :variable:`CMAKE_C_EXTENSIONS`
    * :variable:`CMAKE_CXX_STANDARD`
    * :variable:`CMAKE_CXX_STANDARD_REQUIRED`
    * :variable:`CMAKE_CXX_EXTENSIONS`
    * :variable:`CMAKE_CUDA_STANDARD`
    * :variable:`CMAKE_CUDA_STANDARD_REQUIRED`
    * :variable:`CMAKE_CUDA_EXTENSIONS`
    
    This policy provides compatibility for projects that do not expect
    the language standard settings to be used automatically.
    
    The ``OLD`` behavior of this policy is to ignore language standard
    setting variables when generating the ``try_compile`` test project.
    The ``NEW`` behavior of this policy is to honor language standard
    setting variables.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.8
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn by default
    .. include:: STANDARD_ADVICE.txt
    
    See documentation of the
    :variable:`CMAKE_POLICY_WARNING_CMP0067 <CMAKE_POLICY_WARNING_CMP<NNNN>>`
    variable to control the warning.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0068.rst
=====================================


.. code-block:: 

    CMP0068
    -------
    
    .. versionadded:: 3.9
    
    ``RPATH`` settings on macOS do not affect ``install_name``.
    
    CMake 3.9 and newer remove any effect the following settings may have on the
    ``install_name`` of a target on macOS:
    
    * :prop_tgt:`BUILD_WITH_INSTALL_RPATH` target property
    * :prop_tgt:`SKIP_BUILD_RPATH` target property
    * :variable:`CMAKE_SKIP_RPATH` variable
    * :variable:`CMAKE_SKIP_INSTALL_RPATH` variable
    
    Previously, setting :prop_tgt:`BUILD_WITH_INSTALL_RPATH` had the effect of
    setting both the ``install_name`` of a target to :prop_tgt:`INSTALL_NAME_DIR`
    and the ``RPATH`` to :prop_tgt:`INSTALL_RPATH`.  In CMake 3.9, it only affects
    setting of ``RPATH``.  However, if one wants :prop_tgt:`INSTALL_NAME_DIR` to
    apply to the target in the build tree, one may set
    :prop_tgt:`BUILD_WITH_INSTALL_NAME_DIR`.
    
    If :prop_tgt:`SKIP_BUILD_RPATH`, :variable:`CMAKE_SKIP_RPATH` or
    :variable:`CMAKE_SKIP_INSTALL_RPATH` were used to strip the directory portion
    of the ``install_name`` of a target, one may set ``INSTALL_NAME_DIR=""``
    instead.
    
    The ``OLD`` behavior of this policy is to use the ``RPATH`` settings for
    ``install_name`` on macOS.  The ``NEW`` behavior of this policy is to ignore
    the ``RPATH`` settings for ``install_name`` on macOS.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.9
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0069.rst
=====================================


.. code-block:: 

    CMP0069
    -------
    
    .. versionadded:: 3.9
    
    :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` is enforced when enabled.
    
    CMake 3.9 and newer prefer to add IPO flags whenever the
    :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` target property is enabled and
    produce an error if flags are not known to CMake for the current compiler.
    Since a given compiler may not support IPO flags in all environments in which
    it is used, it is now the project's responsibility to use the
    :module:`CheckIPOSupported` module to check for support before enabling the
    :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` target property.  This approach
    allows a project to conditionally activate IPO when supported.  It also
    allows an end user to set the :variable:`CMAKE_INTERPROCEDURAL_OPTIMIZATION`
    variable in an environment known to support IPO even if the project does
    not enable the property.
    
    Since CMake 3.8 and lower only honored :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION`
    for the Intel compiler on Linux, some projects may unconditionally enable the
    target property.  Policy ``CMP0069`` provides compatibility with such projects.
    
    This policy takes effect whenever the IPO property is enabled.  The ``OLD``
    behavior for this policy is to add IPO flags only for Intel compiler on Linux.
    The ``NEW`` behavior for this policy is to add IPO flags for the current
    compiler or produce an error if CMake does not know the flags.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.9
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt
    
    Examples
    ^^^^^^^^
    
    Behave like CMake 3.8 and do not apply any IPO flags except for Intel compiler
    on Linux:
    
    .. code-block:: cmake
    
      cmake_minimum_required(VERSION 3.8)
      project(foo)
    
      # ...
    
      set_property(TARGET ... PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
    
    Use the :module:`CheckIPOSupported` module to detect whether IPO is
    supported by the current compiler, environment, and CMake version.
    Produce a fatal error if support is not available:
    
    .. code-block:: cmake
    
      cmake_minimum_required(VERSION 3.9) # CMP0069 NEW
      project(foo)
    
      include(CheckIPOSupported)
      check_ipo_supported()
    
      # ...
    
      set_property(TARGET ... PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
    
    Apply IPO flags only if compiler supports it:
    
    .. code-block:: cmake
    
      cmake_minimum_required(VERSION 3.9) # CMP0069 NEW
      project(foo)
    
      include(CheckIPOSupported)
    
      # ...
    
      check_ipo_supported(RESULT result)
      if(result)
        set_property(TARGET ... PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
      endif()
    
    Apply IPO flags without any checks.  This may lead to build errors if IPO
    is not supported by the compiler in the current environment.  Produce an
    error if CMake does not know IPO flags for the current compiler:
    
    .. code-block:: cmake
    
      cmake_minimum_required(VERSION 3.9) # CMP0069 NEW
      project(foo)
    
      # ...
    
      set_property(TARGET ... PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)



/P/🚀 policy/CMP0070.rst
=====================================


.. code-block:: 

    CMP0070
    -------
    
    .. versionadded:: 3.10
    
    Define :command:`file(GENERATE)` behavior for relative paths.
    
    CMake 3.10 and newer define that relative paths given to ``INPUT`` and
    ``OUTPUT`` arguments of ``file(GENERATE)`` are interpreted relative to the
    current source and binary directories, respectively.  CMake 3.9 and lower did
    not define any behavior for relative paths but did not diagnose them either
    and accidentally treated them relative to the process working directory.
    Policy ``CMP0070`` provides compatibility with projects that used the old
    undefined behavior.
    
    This policy affects behavior of relative paths given to ``file(GENERATE)``.
    The ``OLD`` behavior for this policy is to treat the paths relative to the
    working directory of CMake.  The ``NEW`` behavior for this policy is to
    interpret relative paths with respect to the current source or binary
    directory of the caller.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.10
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0071.rst
=====================================


.. code-block:: 

    CMP0071
    -------
    
    .. versionadded:: 3.10
    
    Let :prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC` process
    :prop_sf:`GENERATED` files.
    
    Since version 3.10, CMake processes **regular** and :prop_sf:`GENERATED`
    source files in :prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC`.
    In earlier CMake versions, only **regular** source files were processed.
    :prop_sf:`GENERATED` source files were ignored silently.
    
    This policy affects how source files that are :prop_sf:`GENERATED`
    get treated in :prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC`.
    
    The ``OLD`` behavior for this policy is to ignore :prop_sf:`GENERATED`
    source files in :prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC`.
    
    The ``NEW`` behavior for this policy is to process :prop_sf:`GENERATED`
    source files in :prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC` just like regular
    source files.
    
    .. note::
    
      To silence the ``CMP0071`` warning source files can be excluded from
      :prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC` processing by setting the
      source file properties :prop_sf:`SKIP_AUTOMOC`, :prop_sf:`SKIP_AUTOUIC` or
      :prop_sf:`SKIP_AUTOGEN`.
    
    Source skip example::
    
      # ...
      set_property(SOURCE /path/to/file1.h PROPERTY SKIP_AUTOMOC ON)
      set_property(SOURCE /path/to/file2.h PROPERTY SKIP_AUTOUIC ON)
      set_property(SOURCE /path/to/file3.h PROPERTY SKIP_AUTOGEN ON)
      # ...
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.10
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0072.rst
=====================================


.. code-block:: 

    CMP0072
    -------
    
    .. versionadded:: 3.11
    
    :module:`FindOpenGL` prefers GLVND by default when available.
    
    The :module:`FindOpenGL` module provides an ``OpenGL::GL`` target and an
    ``OPENGL_LIBRARIES`` variable for projects to use for legacy GL interfaces.
    When both a legacy GL library (e.g. ``libGL.so``) and GLVND libraries
    for OpenGL and GLX (e.g. ``libOpenGL.so`` and ``libGLX.so``) are available,
    the module must choose between them.  It documents an ``OpenGL_GL_PREFERENCE``
    variable that can be used to specify an explicit preference.  When no such
    preference is set, the module must choose a default preference.
    
    CMake 3.11 and above prefer to choose GLVND libraries.  This policy provides
    compatibility with projects that expect the legacy GL library to be used.
    
    The ``OLD`` behavior for this policy is to set ``OpenGL_GL_PREFERENCE`` to
    ``LEGACY``.  The ``NEW`` behavior for this policy is to set
    ``OpenGL_GL_PREFERENCE`` to ``GLVND``.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.11
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0073.rst
=====================================


.. code-block:: 

    CMP0073
    -------
    
    .. versionadded:: 3.12
    
    Do not produce legacy ``_LIB_DEPENDS`` cache entries.
    
    Ancient CMake versions once used ``<tgt>_LIB_DEPENDS`` cache entries to
    propagate library link dependencies.  This has long been done by other
    means, leaving the :command:`export_library_dependencies` command as the
    only user of these values.  That command has long been disallowed by
    policy :policy:`CMP0033`, but the ``<tgt>_LIB_DEPENDS`` cache entries
    were left for compatibility with possible non-standard uses by projects.
    
    CMake 3.12 and above now prefer to not produce these cache entries
    at all.  This policy provides compatibility with projects that have
    not been updated to avoid using them.
    
    The ``OLD`` behavior for this policy is to set ``<tgt>_LIB_DEPENDS`` cache
    entries.  The ``NEW`` behavior for this policy is to not set them.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.12
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0074.rst
=====================================


.. code-block:: 

    CMP0074
    -------
    
    .. versionadded:: 3.12
    
    :command:`find_package` uses ``<PackageName>_ROOT`` variables.
    
    In CMake 3.12 and above the :command:`find_package(<PackageName>)` command now
    searches prefixes specified by the :variable:`<PackageName>_ROOT` CMake
    variable and the :envvar:`<PackageName>_ROOT` environment variable.
    Package roots are maintained as a stack so nested calls to all ``find_*``
    commands inside find modules and config packages also search the roots as
    prefixes.  This policy provides compatibility with projects that have not been
    updated to avoid using ``<PackageName>_ROOT`` variables for other purposes.
    
    The ``OLD`` behavior for this policy is to ignore ``<PackageName>_ROOT``
    variables.  The ``NEW`` behavior for this policy is to use
    ``<PackageName>_ROOT`` variables.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.12
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0075.rst
=====================================


.. code-block:: 

    CMP0075
    -------
    
    .. versionadded:: 3.12
    
    Include file check macros honor ``CMAKE_REQUIRED_LIBRARIES``.
    
    In CMake 3.12 and above, the
    
    * ``check_include_file`` macro in the :module:`CheckIncludeFile` module, the
    * ``check_include_file_cxx`` macro in the
      :module:`CheckIncludeFileCXX` module, and the
    * ``check_include_files`` macro in the :module:`CheckIncludeFiles` module
    
    now prefer to link the check executable to the libraries listed in the
    ``CMAKE_REQUIRED_LIBRARIES`` variable.  This policy provides compatibility
    with projects that have not been updated to expect this behavior.
    
    The ``OLD`` behavior for this policy is to ignore ``CMAKE_REQUIRED_LIBRARIES``
    in the include file check macros.  The ``NEW`` behavior of this policy is to
    honor ``CMAKE_REQUIRED_LIBRARIES`` in the include file check macros.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.12
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0076.rst
=====================================


.. code-block:: 

    CMP0076
    -------
    
    .. versionadded:: 3.13
    
    The :command:`target_sources` command converts relative paths to absolute.
    
    In CMake 3.13 and above, the :command:`target_sources` command now converts
    relative source file paths to absolute paths in the following cases:
    
    * Source files are added to the target's :prop_tgt:`INTERFACE_SOURCES`
      property.
    * The target's :prop_tgt:`SOURCE_DIR` property differs from
      :variable:`CMAKE_CURRENT_SOURCE_DIR`.
    
    A path that begins with a generator expression is always left unmodified.
    
    This policy provides compatibility with projects that have not been updated
    to expect this behavior.  The ``OLD`` behavior for this policy is to leave
    all relative source file paths unmodified.  The ``NEW`` behavior of this
    policy is to convert relative paths to absolute according to above rules.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.13
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0077.rst
=====================================


.. code-block:: 

    CMP0077
    -------
    
    .. versionadded:: 3.13
    
    :command:`option` honors normal variables.
    
    The :command:`option` command is typically used to create a cache entry
    to allow users to set the option.  However, there are cases in which a
    normal (non-cached) variable of the same name as the option may be
    defined by the project prior to calling the :command:`option` command.
    For example, a project that embeds another project as a subdirectory
    may want to hard-code options of the subproject to build the way it needs.
    
    For historical reasons in CMake 3.12 and below the :command:`option`
    command *removes* a normal (non-cached) variable of the same name when:
    
    * a cache entry of the specified name does not exist at all, or
    * a cache entry of the specified name exists but has not been given
      a type (e.g. via ``-D<name>=ON`` on the command line).
    
    In both of these cases (typically on the first run in a new build tree),
    the :command:`option` command gives the cache entry type ``BOOL`` and
    removes any normal (non-cached) variable of the same name.  In the
    remaining case that the cache entry of the specified name already
    exists and has a type (typically on later runs in a build tree), the
    :command:`option` command changes nothing and any normal variable of
    the same name remains set.
    
    In CMake 3.13 and above the :command:`option` command prefers to
    do nothing when a normal variable of the given name already exists.
    It does not create or update a cache entry or remove the normal variable.
    The new behavior is consistent between the first and later runs in a
    build tree.  This policy provides compatibility with projects that have
    not been updated to expect the new behavior.
    
    When the :command:`option` command sees a normal variable of the given
    name:
    
    * The ``OLD`` behavior for this policy is to proceed even when a normal
      variable of the same name exists.  If the cache entry does not already
      exist and have a type then it is created and/or given a type and the
      normal variable is removed.
    
    * The ``NEW`` behavior for this policy is to do nothing when a normal
      variable of the same name exists.  The normal variable is not removed.
      The cache entry is not created or updated and is ignored if it exists.
    
    See :policy:`CMP0126` for a similar policy for the :command:`set(CACHE)`
    command, but note that there are some differences in ``NEW`` behavior
    between the two policies.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.13
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    Use the :variable:`CMAKE_POLICY_DEFAULT_CMP0077
    <CMAKE_POLICY_DEFAULT_CMP\<NNNN\>>` variable to set the policy for
    a third-party project in a subdirectory without modifying it.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0078.rst
=====================================


.. code-block:: 

    CMP0078
    -------
    
    .. versionadded:: 3.13
    
    :module:`UseSWIG` generates standard target names.
    
    Starting with CMake 3.13, :module:`UseSWIG` generates now standard target
    names. This policy provides compatibility with projects that expect the legacy
    behavior.
    
    The ``OLD`` behavior for this policy relies on
    ``UseSWIG_TARGET_NAME_PREFERENCE`` variable that can be used to specify an
    explicit preference.  The value may be one of:
    
    * ``LEGACY``: legacy strategy is applied. Variable
      ``SWIG_MODULE_<name>_REAL_NAME`` must be used to get real target name.
      This is the default if not specified.
    * ``STANDARD``: target name matches specified name.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.13
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0079.rst
=====================================


.. code-block:: 

    CMP0079
    -------
    
    .. versionadded:: 3.13
    
    :command:`target_link_libraries` allows use with targets in other directories.
    
    Prior to CMake 3.13 the :command:`target_link_libraries` command did not
    accept targets not created in the calling directory as its first argument
    for calls that update the :prop_tgt:`LINK_LIBRARIES` of the target itself.
    It did accidentally accept targets from other directories on calls that
    only update the :prop_tgt:`INTERFACE_LINK_LIBRARIES`, but would simply
    add entries to the property as if the call were made in the original
    directory.  Thus link interface libraries specified this way were always
    looked up by generators in the scope of the original target rather than
    in the scope that called :command:`target_link_libraries`.
    
    CMake 3.13 now allows the :command:`target_link_libraries` command to
    be called from any directory to add link dependencies and link interface
    libraries to targets created in other directories.  The entries are added
    to :prop_tgt:`LINK_LIBRARIES` and :prop_tgt:`INTERFACE_LINK_LIBRARIES`
    using a special (internal) suffix to tell the generators to look up the
    names in the calling scope rather than the scope that created the target.
    
    This policy provides compatibility with projects that already use
    :command:`target_link_libraries` with the ``INTERFACE`` keyword
    on a target in another directory to add :prop_tgt:`INTERFACE_LINK_LIBRARIES`
    entries to be looked up in the target's directory.  Such projects should
    be updated to be aware of the new scoping rules in that case.
    
    The ``OLD`` behavior of this policy is to disallow
    :command:`target_link_libraries` calls naming targets from another directory
    except in the previously accidentally allowed case of using the ``INTERFACE``
    keyword only.  The ``NEW`` behavior of this policy is to allow all such
    calls but use the new scoping rules.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.13
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0080.rst
=====================================


.. code-block:: 

    CMP0080
    -------
    
    .. versionadded:: 3.13
    
    :module:`BundleUtilities` cannot be included at configure time.
    
    The macros provided by :module:`BundleUtilities` are intended to be invoked
    at install time rather than at configure time, because they depend on the
    listed targets already existing at the time they are invoked. If they are
    invoked at configure time, the targets haven't been built yet, and the
    commands will fail.
    
    This policy restricts the inclusion of :module:`BundleUtilities` to
    ``cmake -P`` style scripts and install rules. Specifically, it looks for the
    presence of :variable:`CMAKE_GENERATOR` and throws a fatal error if it exists.
    
    The ``OLD`` behavior of this policy is to allow :module:`BundleUtilities` to
    be included at configure time. The ``NEW`` behavior of this policy is to
    disallow such inclusion.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.13
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0081.rst
=====================================


.. code-block:: 

    CMP0081
    -------
    
    .. versionadded:: 3.13
    
    Relative paths not allowed in :prop_tgt:`LINK_DIRECTORIES` target property.
    
    CMake 3.12 and lower allowed the :prop_dir:`LINK_DIRECTORIES` directory
    property to contain relative paths.  The base path for such relative
    entries is not well defined.  CMake 3.13 and later will issue a
    ``FATAL_ERROR`` if the :prop_tgt:`LINK_DIRECTORIES` target property
    (which is initialized by the :prop_dir:`LINK_DIRECTORIES` directory property)
    contains a relative path.
    
    The ``OLD`` behavior for this policy is not to warn about relative paths
    in the :prop_tgt:`LINK_DIRECTORIES` target property.  The ``NEW`` behavior for
    this policy is to issue a ``FATAL_ERROR`` if :prop_tgt:`LINK_DIRECTORIES`
    contains a relative path.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.13
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0082.rst
=====================================


.. code-block:: 

    CMP0082
    -------
    
    .. versionadded:: 3.14
    
    Install rules from :command:`add_subdirectory` calls are interleaved with
    those in caller.
    
    CMake 3.13 and lower ran the install rules from :command:`add_subdirectory`
    after all other install rules, even if :command:`add_subdirectory` was called
    before the other install rules.  CMake 3.14 and above prefer to interleave
    these :command:`add_subdirectory` install rules with the others so that
    they are run in the order they are declared.  This policy provides
    compatibility for projects that have not been updated to expect the
    new behavior.
    
    The ``OLD`` behavior for this policy is to run the install rules from
    :command:`add_subdirectory` after the other install rules.  The ``NEW``
    behavior for this policy is to run all install rules in the order they are
    declared.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.14
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn by default
    .. include:: STANDARD_ADVICE.txt
    
    See documentation of the
    :variable:`CMAKE_POLICY_WARNING_CMP0082 <CMAKE_POLICY_WARNING_CMP<NNNN>>`
    variable to control the warning.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0083.rst
=====================================


.. code-block:: 

    CMP0083
    -------
    
    .. versionadded:: 3.14
    
    To control generation of Position Independent Executable (``PIE``) or not, some
    flags are required at link time.
    
    CMake 3.13 and lower did not add these link flags when
    :prop_tgt:`POSITION_INDEPENDENT_CODE` is set.
    
    The ``OLD`` behavior for this policy is to not manage ``PIE`` link flags. The
    ``NEW`` behavior is to add link flags if :prop_tgt:`POSITION_INDEPENDENT_CODE`
    is set:
    
    * Set to ``TRUE``: flags to produce a position independent executable are
      passed to the linker step. For example ``-pie`` for ``GCC``.
    * Set to ``FALSE``: flags not to produce a position independent executable are
      passed to the linker step. For example ``-no-pie`` for ``GCC``.
    * Not set: no flags are passed to the linker step.
    
    Since a given linker may not support ``PIE`` flags in all environments in
    which it is used, it is the project's responsibility to use the
    :module:`CheckPIESupported` module to check for support to ensure that the
    :prop_tgt:`POSITION_INDEPENDENT_CODE` target property for executables will be
    honored at link time.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.14
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. Note::
    
       Android platform has a special handling of ``PIE`` so it is not required
       to use the :module:`CheckPIESupported` module to ensure flags are passed to
       the linker.
    
    .. include:: DEPRECATED.txt
    
    Examples
    ^^^^^^^^
    
    Behave like CMake 3.13 and do not apply any ``PIE`` flags at link stage.
    
    .. code-block:: cmake
    
      cmake_minimum_required(VERSION 3.13)
      project(foo)
    
      # ...
    
      add_executable(foo ...)
      set_property(TARGET foo PROPERTY POSITION_INDEPENDENT_CODE TRUE)
    
    Use the :module:`CheckPIESupported` module to detect whether ``PIE`` is
    supported by the current linker and environment.  Apply ``PIE`` flags only
    if the linker supports them.
    
    .. code-block:: cmake
    
      cmake_minimum_required(VERSION 3.14) # CMP0083 NEW
      project(foo)
    
      include(CheckPIESupported)
      check_pie_supported()
    
      # ...
    
      add_executable(foo ...)
      set_property(TARGET foo PROPERTY POSITION_INDEPENDENT_CODE TRUE)



/P/🚀 policy/CMP0084.rst
=====================================


.. code-block:: 

    CMP0084
    -------
    
    .. versionadded:: 3.14
    
    The :module:`FindQt` module does not exist for :command:`find_package`.
    
    The existence of :module:`FindQt` means that for Qt upstream to provide
    package config files that can be found by ``find_package(Qt)``, the consuming
    project has to explicitly specify ``find_package(Qt CONFIG)``. Removing this
    module gives Qt a path forward for exporting its own config files which can
    easily be found by consuming projects.
    
    This policy pretends that CMake's internal :module:`FindQt` module does not
    exist for :command:`find_package`. If a project really wants to use Qt 3 or 4,
    it can call ``find_package(Qt[34])``, ``include(FindQt)``, or add
    :module:`FindQt` to their :variable:`CMAKE_MODULE_PATH`.
    
    The ``OLD`` behavior of this policy is for :module:`FindQt` to exist for
    :command:`find_package`. The ``NEW`` behavior is to pretend that it doesn't
    exist for :command:`find_package`.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.14
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0085.rst
=====================================


.. code-block:: 

    CMP0085
    -------
    
    .. versionadded:: 3.14
    
    ``$<IN_LIST:...>`` handles empty list items.
    
    In CMake 3.13 and lower, the ``$<IN_LIST:...>`` generator expression always
    returned ``0`` if the first argument was empty, even if the list contained an
    empty item. This behavior is inconsistent with the ``IN_LIST`` behavior of
    :command:`if`, which this generator expression is meant to emulate. CMake 3.14
    and later handles this case correctly.
    
    The ``OLD`` behavior of this policy is for ``$<IN_LIST:...>`` to always return
    ``0`` if the first argument is empty. The ``NEW`` behavior is to return ``1``
    if the first argument is empty and the list contains an empty item.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.14
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0086.rst
=====================================


.. code-block:: 

    CMP0086
    -------
    
    .. versionadded:: 3.14
    
    :module:`UseSWIG` honors ``SWIG_MODULE_NAME`` via ``-module`` flag.
    
    Starting with CMake 3.14, :module:`UseSWIG` passes option
    ``-module <module_name>`` to ``SWIG`` compiler if the file property
    ``SWIG_MODULE_NAME`` is specified. This policy provides compatibility with
    projects that expect the legacy behavior.
    
    The ``OLD`` behavior for this policy is to never pass ``-module`` option.
    The ``NEW`` behavior is to pass ``-module`` option to ``SWIG`` compiler if
    ``SWIG_MODULE_NAME`` is specified.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.14
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0087.rst
=====================================


.. code-block:: 

    CMP0087
    -------
    
    .. versionadded:: 3.14
    
    :command:`install(CODE)` and :command:`install(SCRIPT)` support generator
    expressions.
    
    In CMake 3.13 and earlier, :command:`install(CODE)` and
    :command:`install(SCRIPT)` did not evaluate generator expressions.  CMake 3.14
    and later will evaluate generator expressions for :command:`install(CODE)` and
    :command:`install(SCRIPT)`.
    
    The ``OLD`` behavior of this policy is for :command:`install(CODE)` and
    :command:`install(SCRIPT)` to not evaluate generator expressions.  The ``NEW``
    behavior is to evaluate generator expressions for :command:`install(CODE)` and
    :command:`install(SCRIPT)`.
    
    Note that it is the value of this policy setting at the end of the directory
    scope that is important, not its setting at the time of the call to
    :command:`install(CODE)` or :command:`install(SCRIPT)`.  This has implications
    for calling these commands from places that have their own policy scope but not
    their own directory scope (e.g. from files brought in via :command:`include()`
    rather than :command:`add_subdirectory()`).
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.14
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0088.rst
=====================================


.. code-block:: 

    CMP0088
    -------
    
    .. versionadded:: 3.14
    
    :module:`FindBISON` runs bison in :variable:`CMAKE_CURRENT_BINARY_DIR`
    when executing.
    
    The module provides a ``BISON_TARGET`` macro which generates BISON output.
    In CMake 3.13 and below the macro would generate a custom command that runs
    ``bison`` in the source directory.  CMake 3.14 and later prefer to run it
    in the build directory and use :variable:`CMAKE_CURRENT_BINARY_DIR` as the
    ``WORKING_DIRECTORY`` of its :command:`add_custom_command` invocation.
    This ensures that any implicitly generated file is written to the build
    tree rather than the source.
    
    This policy provides compatibility for projects that have not been updated
    to expect the new behavior.
    
    The ``OLD`` behavior for this policy is for ``BISON_TARGET`` to use
    the current source directory for the ``WORKING_DIRECTORY`` and where
    to generate implicit files. The ``NEW`` behavior of this policy is to
    use the current binary directory for the ``WORKING_DIRECTORY`` and where
    to generate implicit files.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.14
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0089.rst
=====================================


.. code-block:: 

    CMP0089
    -------
    
    .. versionadded:: 3.15
    
    Compiler id for IBM Clang-based XL compilers is now ``XLClang``.
    
    CMake 3.15 and above recognize that IBM's Clang-based XL compilers
    that define ``__ibmxl__`` are a new front-end distinct from ``xlc``
    with a different command line and set of capabilities.
    CMake now prefers to present this to projects by setting the
    :variable:`CMAKE_<LANG>_COMPILER_ID` variable to ``XLClang`` instead
    of ``XL``.  However, existing projects may assume the compiler id for
    Clang-based XL is just ``XL`` as it was in CMake versions prior to 3.15.
    Therefore this policy determines for Clang-based XL compilers which
    compiler id to report in the :variable:`CMAKE_<LANG>_COMPILER_ID`
    variable after language ``<LANG>`` is enabled by the :command:`project`
    or :command:`enable_language` command.  The policy must be set prior
    to the invocation of either command.
    
    The ``OLD`` behavior for this policy is to use compiler id ``XL``.  The
    ``NEW`` behavior for this policy is to use compiler id ``XLClang``.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.15
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn by default
    .. include:: STANDARD_ADVICE.txt
    
    See documentation of the
    :variable:`CMAKE_POLICY_WARNING_CMP0089 <CMAKE_POLICY_WARNING_CMP<NNNN>>`
    variable to control the warning.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0090.rst
=====================================


.. code-block:: 

    CMP0090
    -------
    
    .. versionadded:: 3.15
    
    :command:`export(PACKAGE)` does not populate package registry by default.
    
    In CMake 3.14 and below the :command:`export(PACKAGE)` command populated the
    user package registry by default and users needed to set the
    :variable:`CMAKE_EXPORT_NO_PACKAGE_REGISTRY` to disable it, e.g. in automated
    build and packaging environments.  Since the user package registry is stored
    outside the build tree, this side effect should not be enabled by default.
    Therefore CMake 3.15 and above prefer that :command:`export(PACKAGE)` does
    nothing unless an explicit :variable:`CMAKE_EXPORT_PACKAGE_REGISTRY` variable
    is set to enable it.  This policy provides compatibility with projects that
    have not been updated.
    
    The ``OLD`` behavior for this policy is for :command:`export(PACKAGE)` command
    to populate the user package registry unless
    :variable:`CMAKE_EXPORT_NO_PACKAGE_REGISTRY` is enabled.
    The ``NEW`` behavior is for :command:`export(PACKAGE)` command to do nothing
    unless the :variable:`CMAKE_EXPORT_PACKAGE_REGISTRY` is enabled.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.15
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0091.rst
=====================================


.. code-block:: 

    CMP0091
    -------
    
    .. versionadded:: 3.15
    
    MSVC runtime library flags are selected by an abstraction.
    
    Compilers targeting the MSVC ABI have flags to select the MSVC runtime library.
    Runtime library selection typically varies with build configuration because
    there is a separate runtime library for Debug builds.
    
    In CMake 3.14 and below, MSVC runtime library selection flags are added to
    the default :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` cache entries by CMake
    automatically.  This allows users to edit their cache entries to adjust the
    flags.  However, the presence of such default flags is problematic for
    projects that want to choose a different runtime library programmatically.
    In particular, it requires string editing of the
    :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` variables with knowledge of the
    CMake builtin defaults so they can be replaced.
    
    CMake 3.15 and above prefer to leave the MSVC runtime library selection flags
    out of the default :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` values and instead
    offer a first-class abstraction.  The :variable:`CMAKE_MSVC_RUNTIME_LIBRARY`
    variable and :prop_tgt:`MSVC_RUNTIME_LIBRARY` target property may be set to
    select the MSVC runtime library.  If they are not set then CMake uses the
    default value ``MultiThreaded$<$<CONFIG:Debug>:Debug>DLL`` which is
    equivalent to the original flags.
    
    This policy provides compatibility with projects that have not been updated
    to be aware of the abstraction.  The policy setting takes effect as of the
    first :command:`project` or :command:`enable_language` command that enables
    a language whose compiler targets the MSVC ABI.
    
    .. note::
    
      Once the policy has taken effect at the top of a project, that choice
      must be used throughout the tree.  In projects that have nested projects
      in subdirectories, be sure to convert everything together.
    
    The ``OLD`` behavior for this policy is to place MSVC runtime library
    flags in the default :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` cache
    entries and ignore the :variable:`CMAKE_MSVC_RUNTIME_LIBRARY` abstraction.
    The ``NEW`` behavior for this policy is to *not* place MSVC runtime
    library flags in the default cache entries and use the abstraction instead.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.15
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0092.rst
=====================================


.. code-block:: 

    CMP0092
    -------
    
    .. versionadded:: 3.15
    
    MSVC warning flags are not in :variable:`CMAKE_<LANG>_FLAGS` by default.
    
    When using MSVC-like compilers in CMake 3.14 and below, warning flags
    like ``/W3`` are added to :variable:`CMAKE_<LANG>_FLAGS` by default.
    This is problematic for projects that want to choose a different warning
    level programmatically.  In particular, it requires string editing of the
    :variable:`CMAKE_<LANG>_FLAGS` variables with knowledge of the
    CMake builtin defaults so they can be replaced.
    
    CMake 3.15 and above prefer to leave out warning flags from the value of
    :variable:`CMAKE_<LANG>_FLAGS` by default.
    
    This policy provides compatibility with projects that have not been updated
    to expect the lack of warning flags.  The policy setting takes effect as of
    the first :command:`project` or :command:`enable_language` command that
    initializes :variable:`CMAKE_<LANG>_FLAGS` for a given language ``<LANG>``.
    
    .. note::
    
      Once the policy has taken effect at the top of a project for a given
      language, that choice must be used throughout the tree for that language.
      In projects that have nested projects in subdirectories, be sure to
      convert everything together.
    
    The ``OLD`` behavior for this policy is to place MSVC warning flags in the
    default :variable:`CMAKE_<LANG>_FLAGS` cache entries.  The ``NEW`` behavior
    for this policy is to *not* place MSVC warning flags in the default cache
    entries.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.15
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0093.rst
=====================================


.. code-block:: 

    CMP0093
    -------
    
    .. versionadded:: 3.15
    
    :module:`FindBoost` reports ``Boost_VERSION`` in ``x.y.z`` format.
    
    In CMake 3.14 and below the module would report the Boost version
    number as specified in the preprocessor definition ``BOOST_VERSION`` in
    the ``boost/version.hpp`` file. In CMake 3.15 and later it is preferred
    that the reported version number matches the ``x.y.z`` format reported
    by the CMake package shipped with Boost ``1.70.0`` and later. The macro
    value is still reported in the ``Boost_VERSION_MACRO`` variable.
    
    The ``OLD`` behavior for this policy is for :module:`FindBoost` to report
    ``Boost_VERSION`` as specified in the preprocessor definition
    ``BOOST_VERSION`` in ``boost/version.hpp``. The ``NEW`` behavior for this
    policy is for :module:`FindBoost` to report ``Boost_VERSION`` in
    ``x.y.z`` format.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.15
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0094.rst
=====================================


.. code-block:: 

    CMP0094
    -------
    
    .. versionadded:: 3.15
    
    Modules :module:`FindPython3`, :module:`FindPython2` and :module:`FindPython`
    use ``LOCATION`` for lookup strategy.
    
    Starting with CMake 3.15, Modules :module:`FindPython3`, :module:`FindPython2`
    and :module:`FindPython` set value ``LOCATION`` for, respectively, variables
    ``Python3_FIND_STRATEGY``, ``Python2_FIND_STRATEGY`` and
    ``Python_FIND_STRATEGY``. This policy provides compatibility with projects that
    expect the legacy behavior.
    
    The ``OLD`` behavior for this policy set value ``VERSION`` for variables
    ``Python3_FIND_STRATEGY``, ``Python2_FIND_STRATEGY`` and
    ``Python_FIND_STRATEGY``.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.15
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0095.rst
=====================================


.. code-block:: 

    CMP0095
    -------
    
    .. versionadded:: 3.16
    
    ``RPATH`` entries are properly escaped in the intermediary CMake install script.
    
    In CMake 3.15 and earlier, ``RPATH`` entries set via
    :variable:`CMAKE_INSTALL_RPATH` or via :prop_tgt:`INSTALL_RPATH` have not been
    escaped before being inserted into the ``cmake_install.cmake`` script. Dynamic
    linkers on ELF-based systems (e.g. Linux and FreeBSD) allow certain keywords in
    ``RPATH`` entries, such as ``${ORIGIN}`` (More details are available in the
    ``ld.so`` man pages on those systems). The syntax of these keywords can match
    CMake's variable syntax. In order to not be substituted (usually to an empty
    string) already by the intermediary ``cmake_install.cmake`` script, the user had
    to double-escape such ``RPATH`` keywords, e.g.
    ``set(CMAKE_INSTALL_RPATH "\\\${ORIGIN}/../lib")``. Since the intermediary
    ``cmake_install.cmake`` script is an implementation detail of CMake, CMake 3.16
    and later will make sure ``RPATH`` entries are inserted literally by escaping
    any coincidental CMake syntax.
    
    The ``OLD`` behavior of this policy is to not escape ``RPATH`` entries in the
    intermediary ``cmake_install.cmake`` script. The ``NEW`` behavior is to properly
    escape coincidental CMake syntax in ``RPATH`` entries when generating the
    intermediary ``cmake_install.cmake`` script.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.16
    .. |WARNS_OR_DOES_NOT_WARN| replace::
       warns when it detects use of CMake-like syntax
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0096.rst
=====================================


.. code-block:: 

    CMP0096
    -------
    
    .. versionadded:: 3.16
    
    The :command:`project` command preserves leading zeros in version components.
    
    When a ``VERSION <major>[.<minor>[.<patch>[.<tweak>]]]]`` argument is given
    to the :command:`project` command, it stores the version string in the
    ``PROJECT_VERSION`` variable and stores individual integer version components
    in ``PROJECT_VERSION_{MAJOR,MINOR,PATCH,TWEAK}`` variables (see policy
    :policy:`CMP0048`).  CMake 3.15 and below dropped leading zeros from each
    component.  CMake 3.16 and higher prefer to preserve leading zeros.  This
    policy provides compatibility for projects that have not been updated to
    expect the new behavior.
    
    The ``OLD`` behavior of this policy drops leading zeros in all components,
    e.g.  such that version ``1.07.06`` becomes ``1.7.6``.  The ``NEW`` behavior
    of this policy preserves the leading zeros in all components, such that
    version ``1.07.06`` remains unchanged.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.16
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0097.rst
=====================================


.. code-block:: 

    CMP0097
    -------
    
    .. versionadded:: 3.16
    
    :command:`ExternalProject_Add` with ``GIT_SUBMODULES ""`` initializes no
    submodules.  The policy also applies to :command:`FetchContent_Declare`,
    which uses the same download and update features as
    :command:`ExternalProject_Add`.
    
    The commands provide a ``GIT_SUBMODULES`` option which controls what submodules
    to initialize and update. Starting with CMake 3.16, explicitly setting
    ``GIT_SUBMODULES`` to an empty string means no submodules will be initialized
    or updated.
    
    This policy provides compatibility for projects that have not been updated
    to expect the new behavior.
    
    The ``OLD`` behavior for this policy is for ``GIT_SUBMODULES`` when set to
    an empty string to initialize and update all git submodules.
    The ``NEW`` behavior for this policy is for ``GIT_SUBMODULES`` when set to
    an empty string to initialize and update no git submodules.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.16
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0098.rst
=====================================


.. code-block:: 

    CMP0098
    -------
    
    .. versionadded:: 3.17
    
    :module:`FindFLEX` runs ``flex`` in directory
    :variable:`CMAKE_CURRENT_BINARY_DIR` when executing.
    
    The module provides a ``FLEX_TARGET`` macro which generates FLEX output.
    In CMake 3.16 and below the macro would generate a custom command that runs
    ``flex`` in the current source directory.  CMake 3.17 and later prefer to
    run it in the build directory and use :variable:`CMAKE_CURRENT_BINARY_DIR`
    as the ``WORKING_DIRECTORY`` of its :command:`add_custom_command` invocation.
    This ensures that any implicitly generated file is written relative to the
    build tree rather than the source tree, unless the generated file is
    provided as absolute path.
    
    This policy provides compatibility for projects that have not been updated
    to expect the new behavior.
    
    The ``OLD`` behavior for this policy is for ``FLEX_TARGET`` to use
    the current source directory for the ``WORKING_DIRECTORY`` and where
    to generate implicit files. The ``NEW`` behavior of this policy is to
    use the current binary directory for the ``WORKING_DIRECTORY`` relative to
    which implicit files are generated unless provided as absolute path.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.17
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0099.rst
=====================================


.. code-block:: 

    CMP0099
    -------
    
    .. versionadded:: 3.17
    
    Target link properties :prop_tgt:`INTERFACE_LINK_OPTIONS`,
    :prop_tgt:`INTERFACE_LINK_DIRECTORIES` and :prop_tgt:`INTERFACE_LINK_DEPENDS`
    are now transitive over private dependencies of static libraries.
    
    In CMake 3.16 and below the interface link properties attached to libraries
    are not propagated for private dependencies of static libraries.
    Only the libraries themselves are propagated to link the dependent binary.
    CMake 3.17 and later prefer to propagate all interface link properties.
    This policy provides compatibility for projects that have not been updated
    to expect the new behavior.
    
    The ``OLD`` behavior for this policy is to not propagate interface link
    properties. The ``NEW`` behavior of this policy is to propagate interface link
    properties.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.17
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0100.rst
=====================================


.. code-block:: 

    CMP0100
    -------
    
    .. versionadded:: 3.17
    
    Let :prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC` process
    header files that end with a ``.hh`` extension.
    
    Since version 3.17, CMake processes header files that end with a
    ``.hh`` extension in :prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC`.
    In earlier CMake versions, these header files were ignored by
    :prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC`.
    
    This policy affects how header files that end with a ``.hh`` extension
    get treated in :prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC`.
    
    The ``OLD`` behavior for this policy is to ignore ``.hh`` header files
    in :prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC`.
    
    The ``NEW`` behavior for this policy is to process ``.hh`` header files
    in :prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC` just like other header files.
    
    .. note::
    
      To silence the ``CMP0100`` warning source files can be excluded from
      :prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC` processing by setting the
      source file properties :prop_sf:`SKIP_AUTOMOC`, :prop_sf:`SKIP_AUTOUIC` or
      :prop_sf:`SKIP_AUTOGEN`.
    
      .. code-block:: cmake
    
        # Source skip example:
        set_property(SOURCE /path/to/file1.hh PROPERTY SKIP_AUTOMOC ON)
        set_property(SOURCE /path/to/file2.hh PROPERTY SKIP_AUTOUIC ON)
        set_property(SOURCE /path/to/file3.hh PROPERTY SKIP_AUTOGEN ON)
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.17.0
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0101.rst
=====================================


.. code-block:: 

    CMP0101
    -------
    
    .. versionadded:: 3.17
    
    :command:`target_compile_options` now always honors the ``BEFORE`` keyword.
    
    In CMake 3.16 and below, the :command:`target_compile_options` command
    ignores the ``BEFORE`` keyword when inserting items into the
    :prop_tgt:`COMPILE_OPTIONS` target property (``PRIVATE`` and ``PUBLIC``
    items).  CMake 3.17 and later honors the ``BEFORE`` keyword in all cases.
    This policy provides compatibility for projects that have not been updated
    to expect the new behavior.
    
    The behavior of inserting items into the :prop_tgt:`INTERFACE_COMPILE_OPTIONS`
    target property (``PUBLIC`` and ``INTERFACE`` items) is not affected by this
    policy.  The ``BEFORE`` keyword has always been honored when adding items to
    :prop_tgt:`INTERFACE_COMPILE_OPTIONS`.
    
    The ``OLD`` behavior for this policy is to not honor the ``BEFORE`` keyword
    when inserting into the :prop_tgt:`COMPILE_OPTIONS` property.
    The ``NEW`` behavior for this policy is to honor the ``BEFORE`` keyword in
    all cases.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.17
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0102.rst
=====================================


.. code-block:: 

    CMP0102
    -------
    
    .. versionadded:: 3.17
    
    The :command:`mark_as_advanced` command no longer creates a cache entry if one
    does not already exist.
    
    In CMake 3.16 and below, if a variable was not defined at all or just defined
    locally, the :command:`mark_as_advanced` command would create a new cache
    entry with an ``UNINITIALIZED`` type and no value. When a :command:`find_path`
    (or other similar ``find_`` command) would next run, it would find this
    undefined cache entry and set it up with an empty string value. This process
    would end up deleting the local variable in the process (due to the way the
    cache works), effectively clearing any stored ``find_`` results that were only
    available in the local scope.
    
    The ``OLD`` behavior for this policy is to create the empty cache definition.
    The ``NEW`` behavior of this policy is to ignore variables which do not
    already exist in the cache.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.17
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn by default
    .. include:: STANDARD_ADVICE.txt
    
    See documentation of the :variable:`CMAKE_POLICY_WARNING_CMP0102
    <CMAKE_POLICY_WARNING_CMP<NNNN>>` variable to control the warning.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0103.rst
=====================================


.. code-block:: 

    CMP0103
    -------
    
    .. versionadded:: 3.18
    
    Multiple calls to :command:`export` command with same ``FILE`` without
    ``APPEND`` is no longer allowed.
    
    In CMake 3.17 and below, multiple calls to :command:`export` command with the
    same ``FILE`` without ``APPEND`` are accepted silently but only the last
    occurrence is taken into account during the generation.
    
    The ``OLD`` behavior for this policy is to ignore the multiple occurrences of
     :command:`export` command except the last one.
    
    The ``NEW`` behavior of this policy is to raise an error on second call to
    :command:`export` command with same ``FILE`` without ``APPEND``.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.18
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0104.rst
=====================================


.. code-block:: 

    CMP0104
    -------
    
    .. versionadded:: 3.18
    
    Initialize :variable:`CMAKE_CUDA_ARCHITECTURES` when
    :variable:`CMAKE_CUDA_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` is ``NVIDIA``.
    Raise an error if :prop_tgt:`CUDA_ARCHITECTURES` is empty.
    
    :variable:`CMAKE_CUDA_ARCHITECTURES` introduced in CMake 3.18 is used to
    initialize :prop_tgt:`CUDA_ARCHITECTURES`, which passes correct code generation
    flags to the CUDA compiler.
    
    Previous to this users had to manually specify the code generation flags. This
    policy is for backwards compatibility with manually specifying code generation
    flags.
    
    The ``OLD`` behavior for this policy is to not initialize
    :variable:`CMAKE_CUDA_ARCHITECTURES` when
    :variable:`CMAKE_CUDA_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` is ``NVIDIA``.
    Empty :prop_tgt:`CUDA_ARCHITECTURES` is allowed.
    
    The ``NEW`` behavior of this policy is to initialize
    :variable:`CMAKE_CUDA_ARCHITECTURES` when
    :variable:`CMAKE_CUDA_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` is ``NVIDIA``
    and raise an error if :prop_tgt:`CUDA_ARCHITECTURES` is empty during generation.
    
    If :prop_tgt:`CUDA_ARCHITECTURES` is set to a false value no architectures
    flags are passed to the compiler. This is intended to support packagers and
    the rare cases where full control over the passed flags is required.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.18
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt
    
    Examples
    ^^^^^^^^
    
    .. code-block:: cmake
    
      set_target_properties(tgt PROPERTIES CUDA_ARCHITECTURES "35;50;72")
    
    Generates code for real and virtual architectures ``30``, ``50`` and ``72``.
    
    .. code-block:: cmake
    
      set_property(TARGET tgt PROPERTY CUDA_ARCHITECTURES 70-real 72-virtual)
    
    Generates code for real architecture ``70`` and virtual architecture ``72``.
    
    .. code-block:: cmake
    
      set_property(TARGET tgt PROPERTY CUDA_ARCHITECTURES OFF)
    
    CMake will not pass any architecture flags to the compiler.



/P/🚀 policy/CMP0105.rst
=====================================


.. code-block:: 

    CMP0105
    -------
    
    .. versionadded:: 3.18
    
    :prop_tgt:`LINK_OPTIONS` and :prop_tgt:`INTERFACE_LINK_OPTIONS` target
    properties are now used for the device link step.
    
    In CMake 3.17 and below, link options are not used by the device link step.
    
    The ``OLD`` behavior for this policy is to ignore the link options during the
    device link step.
    
    The ``NEW`` behavior of this policy is to use the link options during the
    device link step.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.18
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0106.rst
=====================================


.. code-block:: 

    CMP0106
    -------
    
    .. versionadded:: 3.18
    
    The :module:`Documentation` module is removed.
    
    The :module:`Documentation` was added as a support mechanism for the VTK
    project and was tuned for that project. Instead of CMake providing this module
    with (now old) VTK patterns for cache variables and required packages, the
    module is now deprecated by CMake itself.
    
    The ``OLD`` behavior of this policy is for :module:`Documentation` to add
    cache variables and find VTK documentation dependent packages. The ``NEW``
    behavior is to act as an empty module.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.18
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0107.rst
=====================================


.. code-block:: 

    CMP0107
    -------
    
    .. versionadded:: 3.18
    
    It is not allowed to create an ``ALIAS`` target with the same name as an
    another target.
    
    In CMake 3.17 and below, an ``ALIAS`` target can overwrite silently an existing
    target with the same name.
    
    The ``OLD`` behavior for this policy is to allow target overwrite.
    
    The ``NEW`` behavior of this policy is to prevent target overwriting.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.17
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0108.rst
=====================================


.. code-block:: 

    CMP0108
    -------
    
    .. versionadded:: 3.18
    
    A target is not allowed to link to itself even through an ``ALIAS`` target.
    
    In CMake 3.17 and below, a target can link to a target aliased to itself.
    
    The ``OLD`` behavior for this policy is to allow a target to link to a target
    aliased to itself.
    
    The ``NEW`` behavior of this policy is to prevent a target to link to itself
    through an ``ALIAS`` target.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.17
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0109.rst
=====================================


.. code-block:: 

    CMP0109
    -------
    
    .. versionadded:: 3.19
    
    :command:`find_program` requires permission to execute but not to read.
    
    In CMake 3.18 and below, the :command:`find_program` command on UNIX
    would find files that are readable without requiring execute permission,
    and would not find files that are executable without read permission.
    In CMake 3.19 and above, ``find_program`` now prefers to require execute
    permission but not read permission.  This policy provides compatibility
    with projects that have not been updated to expect the new behavior.
    
    The ``OLD`` behavior for this policy is for ``find_program`` to require
    read permission but not execute permission.
    The ``NEW`` behavior for this policy is for ``find_program`` to require
    execute permission but not read permission.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.19
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0110.rst
=====================================


.. code-block:: 

    CMP0110
    -------
    
    .. versionadded:: 3.19
    
    :command:`add_test` supports arbitrary characters in test names.
    
    :command:`add_test` can now (officially) create tests with whitespace and
    other special characters in its name.  Before CMake version 3.19 that was not
    allowed, however, it was possible to work around this limitation by explicitly
    putting escaped quotes around the test's name in the ``add_test`` command.
    
    Although never officially supported several projects in the wild found and
    implemented this workaround.  However, the new change which officially allows
    the ``add_test`` command to support whitespace and other special characters in
    test names now breaks that workaround.  In order for these projects to work
    smoothly with newer CMake versions, this policy was introduced.
    
    The ``OLD`` behavior of this policy is to still prevent ``add_test`` from
    handling whitespace and special characters properly (if not using the
    mentioned workaround).  The ``NEW`` behavior on the other hand allows names
    with whitespace and special characters for tests created by ``add_test``.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.19
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0111.rst
=====================================


.. code-block:: 

    CMP0111
    -------
    
    .. versionadded:: 3.19
    
    An imported target missing its location property fails during generation.
    
    :ref:`Imported Targets` for library files and executables require that
    their location on disk is specified in a target property such as
    :prop_tgt:`IMPORTED_LOCATION`, :prop_tgt:`IMPORTED_IMPLIB`, or a
    per-configuration equivalent.  If a needed location property is not set,
    CMake 3.18 and below generate the string ``<TARGET_NAME>-NOTFOUND`` in
    its place, which results in failures of the corresponding rules at build
    time.  CMake 3.19 and above prefer instead to raise an error during
    generation.  This policy provides compatibility for projects that have
    not been updated to expect the new behavior.
    
    The ``OLD`` behavior of this policy is to generate the location of an imported
    unknown, static or shared library target as ``<TARGET_NAME>-NOTFOUND`` if not
    set.
    The ``NEW`` behavior is to raise an error.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.19
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0112.rst
=====================================


.. code-block:: 

    CMP0112
    -------
    
    .. versionadded:: 3.19
    
    Target file component generator expressions do not add target dependencies.
    
    The following target-based generator expressions that query for directory or
    file name components no longer add a dependency on the evaluated target.
    
        - ``TARGET_FILE_NAME``
        - ``TARGET_FILE_DIR``
        - ``TARGET_LINKER_FILE_BASE_NAME``
        - ``TARGET_LINKER_FILE_NAME``
        - ``TARGET_LINKER_FILE_DIR``
        - ``TARGET_SONAME_FILE_NAME``
        - ``TARGET_SONAME_FILE_DIR``
        - ``TARGET_PDB_FILE_NAME``
        - ``TARGET_PDB_FILE_DIR``
        - ``TARGET_BUNDLE_DIR``
        - ``TARGET_BUNDLE_DIR_NAME``
        - ``TARGET_BUNDLE_CONTENT_DIR``
    
    
    In CMake 3.18 and lower a dependency on the evaluated target of the above
    generator expressions would always be added.  CMake 3.19 and above prefer
    to not add this dependency.  This policy provides compatibility for projects
    that have not been updated to expect the new behavior.  The policy setting
    is recorded on each target when it is created, and decides whether generator
    expressions referencing that target imply a dependency on it.
    
    The ``OLD`` behavior for this policy is to add a dependency on the evaluated
    target for the above generator expressions.  The ``NEW`` behavior of
    this policy is to not add a dependency on the evaluated target for the
    above generator expressions.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.19
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn by default
    .. include:: STANDARD_ADVICE.txt
    
    See documentation of the
    :variable:`CMAKE_POLICY_WARNING_CMP0112 <CMAKE_POLICY_WARNING_CMP<NNNN>>`
    variable to control the warning.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0113.rst
=====================================


.. code-block:: 

    CMP0113
    -------
    
    .. versionadded:: 3.19
    
    :ref:`Makefile Generators` do not repeat custom commands from target
    dependencies.
    
    Consider a chain of custom commands split across two dependent targets:
    
    .. code-block:: cmake
    
      add_custom_command(OUTPUT output-not-created
        COMMAND ... DEPENDS ...)
      set_property(SOURCE output-not-created PROPERTY SYMBOLIC 1)
      add_custom_command(OUTPUT output-created
        COMMAND ... DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/output-not-created)
      add_custom_target(first DEPENDS output-not-created)
      add_custom_target(second DEPENDS output-created)
      add_dependencies(second first)
    
    In CMake 3.18 and lower, the Makefile generators put a copy of both custom
    commands in the Makefile for target ``second`` even though its dependency on
    target ``first`` ensures that the first custom command runs before the second.
    Running ``make second`` would cause the first custom command to run once in
    the ``first`` target and then again in the ``second`` target.
    
    CMake 3.19 and above prefer to not duplicate custom commands in a target that
    are already generated in other targets on which the target depends (directly or
    indirectly).  This policy provides compatibility for projects that have not
    been updated to expect the new behavior.  In particular, projects that relied
    on the duplicate execution or that did not properly set the :prop_sf:`SYMBOLIC`
    source file property may be affected.
    
    The ``OLD`` behavior for this policy is to duplicate custom commands in
    dependent targets.  The ``NEW`` behavior of this policy is to not duplicate
    custom commands in dependent targets.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.19
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0114.rst
=====================================


.. code-block:: 

    CMP0114
    -------
    
    .. versionadded:: 3.19
    
    :module:`ExternalProject` step targets fully adopt their steps.
    
    The :command:`ExternalProject_Add` ``STEP_TARGETS`` option, and the
    :command:`ExternalProject_Add_StepTargets` function, can be used to
    create build targets for individual steps of an external project.
    
    In CMake 3.18 and below, step targets have some limitations:
    
    * Step targets always depend on targets named by the
      :command:`ExternalProject_Add` ``DEPENDS`` option even though
      not all steps need them.  In order to allow step targets to be created
      without those dependencies, the :command:`ExternalProject_Add`
      ``INDEPENDENT_STEP_TARGETS`` option or the
      :command:`ExternalProject_Add_StepTargets` ``NO_DEPENDS`` option may
      be used.  However, adding such "independent" step targets makes sense
      only for specific steps such as ``download``, ``update``, and ``patch``
      because they do not need any of the external project's build dependencies.
      Furthermore, it does not make sense to create independent step targets
      for steps that depend on non-independent steps.  Such rules are not
      enforced, and projects that do not follow them can generate build systems
      with confusing and generator-specific behavior.
    
    * Step targets hold copies of the custom commands implementing their
      steps that are separate from the copies in the primary target created
      by :command:`ExternalProject_Add`, and the primary target does not
      depend on the step targets.  In parallel builds that drive the primary
      target and step targets concurrently, multiple copies of the steps'
      commands may run concurrently and race each other.
    
      Also, prior to policy :policy:`CMP0113`, the step targets generated
      by :ref:`Makefile Generators` also contain all the custom commands
      on which their step depends.  This can lead to repeated execution of
      those steps even in serial builds.
    
    In CMake 3.19 and above, the :module:`ExternalProject` module prefers
    a revised design to address these problems:
    
    * Each step is classified as "independent" if it does not depend
      on other targets named by the :command:`ExternalProject_Add` ``DEPENDS``.
      The predefined steps are automatically classified by default:
    
      * The ``download``, ``update``, and ``patch`` steps are independent.
      * The ``configure``, ``build``, ``test``, and ``install`` steps are not.
    
      For custom steps, the :command:`ExternalProject_Add_Step` command provides
      an ``INDEPENDENT`` option to mark them as independent.  It is an error to
      mark a step as independent if it depends on other steps that are not.  Note
      that this use of the term "independent" refers only to independence from
      external targets and is orthogonal to a step's dependencies on other steps.
    
    * Step targets created by the :command:`ExternalProject_Add` ``STEP_TARGETS``
      option or the :command:`ExternalProject_Add_Step` function are now
      independent if and only if their steps are marked as independent.
      The :command:`ExternalProject_Add` ``INDEPENDENT_STEP_TARGETS`` option
      and :command:`ExternalProject_Add_StepTargets` ``NO_DEPENDS`` option
      are no longer allowed.
    
    * Step targets, when created, are fully responsible for holding the
      custom commands implementing their steps.  The primary target created
      by :command:`ExternalProject_Add` depends on the step targets, and the
      step targets depend on each other.  The target-level dependencies match
      the file-level dependencies used by the custom commands for each step.
    
      When the :command:`ExternalProject_Add` ``UPDATE_DISCONNECTED`` or
      ``TEST_EXCLUDE_FROM_MAIN`` option is used, or the
      :command:`ExternalProject_Add_Step` ``EXCLUDE_FROM_MAIN`` option is used
      for a custom step, some step targets may be created automatically.
      These are needed to hold the steps commonly depended upon by the primary
      target and the disconnected step targets.
    
    Policy ``CMP0114`` provides compatibility for projects that have not been
    updated to expect the new behavior.  The ``OLD`` behavior for this policy
    is to use the above-documented behavior from 3.18 and below.  The ``NEW``
    behavior for this policy is to use the above-documented behavior preferred
    by 3.19 and above.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.19
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0115.rst
=====================================


.. code-block:: 

    CMP0115
    -------
    
    .. versionadded:: 3.20
    
    Source file extensions must be explicit.
    
    In CMake 3.19 and below, if a source file could not be found by the name
    specified, it would append a list of known extensions to the name to see if
    the file with the extension could be found. For example, this would allow the
    user to run:
    
    .. code-block:: cmake
    
      add_executable(exe main)
    
    and put ``main.c`` in the executable without specifying the extension.
    
    Starting in CMake 3.20, CMake prefers all source files to have their extensions
    explicitly listed:
    
    .. code-block:: cmake
    
      add_executable(exe main.c)
    
    The ``OLD`` behavior for this policy is to implicitly append known extensions
    to source files if they can't be found. The ``NEW`` behavior of this policy is
    to not append known extensions and require them to be explicit.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.20
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0116.rst
=====================================


.. code-block:: 

    CMP0116
    -------
    
    .. versionadded:: 3.20
    
    Ninja generators transform ``DEPFILE`` s from :command:`add_custom_command`.
    
    In CMake 3.19 and below, files given to the ``DEPFILE`` argument of
    :command:`add_custom_command` were passed directly to Ninja's ``depfile``
    variable without any path resolution. This meant that if
    :command:`add_custom_command` was called from a subdirectory (created by
    :command:`add_subdirectory`), the ``DEPFILE`` argument would have to be either
    an absolute path or a path relative to :variable:`CMAKE_BINARY_DIR`, rather
    than :variable:`CMAKE_CURRENT_BINARY_DIR`. In addition, no transformation was
    done on the file listed in ``DEPFILE``, which meant that the paths within the
    ``DEPFILE`` had the same restrictions.
    
    Starting with CMake 3.20, the ``DEPFILE`` argument is relative to
    :variable:`CMAKE_CURRENT_BINARY_DIR` (unless it is absolute), and the paths in
    the ``DEPFILE`` are also relative to :variable:`CMAKE_CURRENT_BINARY_DIR`.
    CMake automatically transforms the paths in the ``DEPFILE`` (unless they are
    absolute) after the custom command is run. The file listed in ``DEPFILE`` is
    not modified in any way. Instead, CMake writes the transformation to its own
    internal file, and passes this internal file to Ninja's ``depfile`` variable.
    This transformation happens regardless of whether or not ``DEPFILE`` is
    relative, and regardless of whether or not :command:`add_custom_command` is
    called from a subdirectory.
    
    The ``OLD`` behavior for this policy is to pass the ``DEPFILE`` to Ninja
    unaltered. The ``NEW`` behavior for this policy is to transform the ``DEPFILE``
    after running the custom command. The status of ``CMP0116`` is recorded at the
    time of the custom command's creation, and you can have custom commands in the
    same directory with different values for ``CMP0116`` by setting the policy
    before each custom command.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.20
    .. |WARNS_OR_DOES_NOT_WARN| replace::
       does *not* warn by default (unless ``DEPFILE`` is used in a subdirectory)
    .. include:: STANDARD_ADVICE.txt
    
    See documentation of the
    :variable:`CMAKE_POLICY_WARNING_CMP0116 <CMAKE_POLICY_WARNING_CMP<NNNN>>`
    variable to control the warning.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0117.rst
=====================================


.. code-block:: 

    CMP0117
    -------
    
    .. versionadded:: 3.20
    
    MSVC RTTI flag ``/GR`` is not added to
    :variable:`CMAKE_CXX_FLAGS <CMAKE_<LANG>_FLAGS>` by default.
    
    When using MSVC-like compilers in CMake 3.19 and below, the RTTI flag
    ``/GR`` is added to :variable:`CMAKE_CXX_FLAGS <CMAKE_<LANG>_FLAGS>` by
    default.  This behavior is left from support for MSVC versions from Visual
    Studio 2003 and below that did not enable RTTI by default.  It is no longer
    necessary.  Furthermore, it is problematic for projects that want to change
    to ``/GR-`` programmatically.  In particular, it requires string editing of
    the :variable:`CMAKE_CXX_FLAGS <CMAKE_<LANG>_FLAGS>` variable with knowledge
    of the CMake builtin default so it can be replaced.
    
    CMake 3.20 and above prefer to leave out ``/GR`` from the value of
    :variable:`CMAKE_CXX_FLAGS <CMAKE_<LANG>_FLAGS>` by default.
    
    This policy provides compatibility with projects that have not been updated
    to expect the lack of the ``/GR`` flag.  The policy setting takes effect as
    of the first :command:`project` or :command:`enable_language` command that
    initializes :variable:`CMAKE_CXX_FLAGS <CMAKE_<LANG>_FLAGS>`.
    
    .. note::
    
      Once the policy has taken effect at the top of a project for a given
      language, that choice must be used throughout the tree for that language.
      In projects that have nested projects in subdirectories, be sure to
      convert everything together.
    
    The ``OLD`` behavior for this policy is to place the MSVC ``/GR`` flag in the
    default :variable:`CMAKE_CXX_FLAGS <CMAKE_<LANG>_FLAGS>` cache entry.  The
    ``NEW`` behavior for this policy is to *not* place the MSVC ``/GR`` flag in
    the default cache entry.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.20
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0118.rst
=====================================


.. code-block:: 

    CMP0118
    -------
    
    .. versionadded:: 3.20
    
    The :prop_sf:`GENERATED` source file property is now visible in all directories.
    
    Whether or not a source file is generated is an all-or-nothing global
    property of the source.  Consequently, the associated ``GENERATED``
    property is now visible from any directory scope, not only from the scope
    for which it was set.
    
    Additionally, the ``GENERATED`` property may now be set only to boolean
    values, and may not be turned off once turned on.
    
    The ``OLD`` behavior of this policy is to only allow ``GENERATED`` to be
    visible from the directory scope for which it was set.  The ``NEW``
    behavior on the other hand allows it to be visible from any scope.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.20
    .. |WARNS_OR_DOES_NOT_WARN| replace::
       does *not* warn with regard to visibility of the ``GENERATED``
       property, but does warn about setting the ``GENERATED`` property
       to a non-boolean value,
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0119.rst
=====================================


.. code-block:: 

    CMP0119
    -------
    
    .. versionadded:: 3.20
    
    :prop_sf:`LANGUAGE` source file property explicitly compiles as specified
    language.
    
    The :prop_sf:`LANGUAGE` source file property is documented to mean that the
    source file is written in the specified language.  In CMake 3.19 and below,
    setting this property causes CMake to compile the source file using the
    compiler for the specified language.  However, it only passes an explicit
    flag to tell the compiler to treat the source as the specified language
    for MSVC-like, XL, and Embarcadero compilers for the ``CXX`` language.
    CMake 3.20 and above prefer to also explicitly tell the compiler to use
    the specified language using a flag such as ``-x c`` on all compilers
    for which such flags are known.
    
    This policy provides compatibility for projects that have not been updated
    to expect this behavior.  For example, some projects were setting the
    ``LANGUAGE`` property to ``C`` on assembly-language ``.S`` source files
    in order to compile them using the C compiler.  Such projects should be
    updated to use ``enable_language(ASM)``, for which CMake will often choose
    the C compiler as the assembler on relevant platforms anyway.
    
    The ``OLD`` behavior for this policy is to interpret the ``LANGUAGE <LANG>``
    property using its undocumented meaning to "use the ``<LANG>`` compiler".
    The ``NEW`` behavior for this policy is to interpret the ``LANGUAGE <LANG>``
    property using its documented meaning to "compile as a ``<LANG>`` source".
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.20
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0120.rst
=====================================


.. code-block:: 

    CMP0120
    -------
    
    .. versionadded:: 3.20
    
    The :module:`WriteCompilerDetectionHeader` module is removed.
    
    CMake versions 3.1 through 3.19 provide this module to generate a
    C++ compatibility layer by re-using information from CMake's table of
    preprocessor checks for :manual:`cmake-compile-features(7)`.  However:
    
    * Those granular features have been superseded by meta-features for
      :ref:`Requiring Language Standards` such as ``cxx_std_11``.  Therefore
      no new granular feature checks will be added and projects will need to
      use other means to conditionally use new C++ features.
    
    * The module exposes some of CMake's implementation details directly
      to C++ translation units.
    
    * The module's approach effectively provides a header file with CMake,
      thus tying the version of the header to the version of CMake.
      Many projects found that the :module:`WriteCompilerDetectionHeader` was
      best used by manually generating its header locally with a recent version
      of CMake and then bundling it with the project source so that it could
      be used with older CMake versions.
    
    For reasons including the above, CMake 3.20 and above prefer to not
    provide the :module:`WriteCompilerDetectionHeader` module.  This policy
    provides compatibility for projects that have not been ported away from
    it.  Projects using the module should be updated to stop using it.
    Alternatives include:
    
    * Bundle a copy of the generated header in the project's source.
    * Use a third-party alternative, such as the CC0-licensed `Hedley`_.
    * Drop support for compilers too old to provide the features natively.
    
    The ``OLD`` behavior of this policy is for inclusion of the deprecated
    :module:`WriteCompilerDetectionHeader` module to work.  The ``NEW``
    behavior is for inclusion of the module to fail as if it does not exist.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.20
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt
    
    .. _`Hedley`: https://nemequ.github.io/hedley/



/P/🚀 policy/CMP0121.rst
=====================================


.. code-block:: 

    CMP0121
    -------
    
    .. versionadded:: 3.21
    
    The :command:`list` command now detects invalid indices.
    
    Prior to CMake version 3.21, the :command:`list` command's ``GET``,
    ``INSERT``, ``SUBLIST``, and ``REMOVE_AT`` subcommands did not detect invalid
    index arguments.
    
    The ``OLD`` behavior of this policy is for invalid indices to be treated as
    their integer value (if any) at the start of the string. For example,
    ``2good4you`` is a ``2`` and ``not_an_integer`` is a ``0``. The ``NEW``
    behavior is for invalid indices to trigger an error.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.21
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0122.rst
=====================================


.. code-block:: 

    CMP0122
    -------
    
    .. versionadded:: 3.21
    
    :module:`UseSWIG` use library name conventions for ``CSharp`` language.
    
    Starting with CMake 3.21, :module:`UseSWIG` generates now a library using
    default naming conventions. This policy provides compatibility with projects
    that expect the legacy behavior.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.21
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0123.rst
=====================================


.. code-block:: 

    CMP0123
    -------
    
    .. versionadded:: 3.21
    
    ``ARMClang`` cpu/arch compile and link flags must be set explicitly.
    
    CMake 3.20 and lower automatically maps the :variable:`CMAKE_SYSTEM_PROCESSOR`
    variable and an undocumented ``CMAKE_SYSTEM_ARCH`` to compile and link options
    for ``ARMClang``.  For example, the ``-mcpu=cortex-m33`` flag is added when
    :variable:`CMAKE_SYSTEM_PROCESSOR` equals ``cortex-m33``.  CMake requires
    projects to set either variable or it raises a fatal error.  However, the
    project may need to additionally specify CPU features using e.g.
    ``-mcpu=cortex-m33+nodsp``, conflicting with the ``-mcpu=cortex-m33`` added
    by CMake.  This results in either link errors or unusable binaries.
    
    CMake 3.21 and above prefer instead to not add any cpu/arch compile and link
    flags automatically.  Instead, projects must specify them explicitly.
    This policy provides compatibility for projects that have not been updated.
    
    The ``OLD`` behavior of this policy requires projects that use ``ARMClang``
    to set either :variable:`CMAKE_SYSTEM_PROCESSOR` or ``CMAKE_SYSTEM_ARCH``
    and it automatically adds a compile option ``-mcpu=`` or ``-march=`` and
    a link option ``--cpu=`` based on those variables.  The ``NEW`` behavior
    does not add compile or link options, and projects are responsible for
    setting correct options.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.21
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0124.rst
=====================================


.. code-block:: 

    CMP0124
    -------
    
    .. versionadded:: 3.21
    
    :command:`foreach` loop variables are only available in the loop scope.
    
    CMake 3.20 and below always leave the loop variable set at the end of the
    loop, either to the value it had before the loop, if any, or to the empty
    string.  CMake 3.21 and above prefer to leave the loop variable in the
    state it had before the loop started, either set or unset.  This policy
    provides compatibility for projects that expect the loop variable to always
    be left set.
    
    The ``OLD`` behavior for this policy is to set the loop variable at the
    end of the loop, either to its original value, or to an empty value.
    The ``NEW`` behavior for this policy is to restore the loop variable to
    the state it had before the loop started, either set or unset.
    
    For example:
    
    .. code-block:: cmake
    
      set(items a b c)
    
      set(var1 "value")
      unset(var2)
    
      foreach(var1 IN LISTS items)
      endforeach()
    
      foreach(var2 IN LISTS items)
      endforeach()
    
      if(DEFINED var1)
        message("var1: ${var1}")
      endif()
      if(DEFINED var2)
        message("var2: ${var2}")
      endif()
    
    Under the ``OLD`` behavior, this code prints ``var1: value`` and ``var2:``.
    Under the ``NEW`` behavior, this code prints only ``var1: value``.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.21
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0125.rst
=====================================


.. code-block:: 

    CMP0125
    -------
    
    .. versionadded:: 3.21
    
    The :command:`find_file`, :command:`find_path`, :command:`find_library` and
    :command:`find_program` commands cache their result in the variable specified
    by their first argument.  Prior to CMake 3.21, if a cache variable of that
    name already existed before the call but the cache variable had no type, any
    non-cache variable of the same name would be discarded and the cache variable
    was always used (see also :policy:`CMP0126` for a different but similar
    behavior).  This contradicts the convention that a non-cache variable should
    take precedence over a cache variable of the same name.  Such a situation can
    arise if a user sets a cache variable on the command line without specifying
    a type, such as ``cmake -DMYVAR=blah ...`` instead of
    ``cmake -DMYVAR:FILEPATH=blah``.
    
    Related to the above, if a cache variable of the specified name already exists
    and it *does* have a type, the various ``find_...()`` commands would return
    that value unchanged.  In particular, if it contained a relative path, it
    would not be converted to an absolute path in this situation.
    
    When policy ``CMP0125`` is set to ``OLD`` or is unset, the behavior is as
    described above.  When it is set to ``NEW``, the behavior is as follows:
    
    * If a non-cache variable of the specified name exists when the ``find_...()``
      command is called, its value will be used regardless of whether a cache
      variable of the same name already exists or not.  A cache variable will not
      be created in this case if no such cache variable existed before.
      If a cache variable of the specified name did already exist, the cache will
      be updated to match the non-cache variable.
    
    * The various ``find...()`` commands will always provide an absolute path in
      the result variable, except where a relative path provided by a cache or
      non-cache variable cannot be resolved to an existing path.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.21
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0126.rst
=====================================


.. code-block:: 

    CMP0126
    -------
    
    .. versionadded:: 3.21
    
    When this policy is set to ``NEW``, the :command:`set(CACHE)` command does not
    remove any normal variable of the same name from the current scope.
    The ``OLD`` behavior removes any normal variable of the same name from the
    current scope in the following situations:
    
    * No cache variable of that name existed previously.
    
    * A cache variable of that name existed previously, but it had no type.
      This can occur when the variable was set on the command line using a form
      like ``cmake -DMYVAR=blah`` instead of ``cmake -DMYVAR:STRING=blah``.
    
    * The ``FORCE`` or ``INTERNAL`` keywords were used when setting the cache
      variable.
    
    Note that the ``NEW`` behavior has an important difference to the similar
    ``NEW`` behavior of policy :policy:`CMP0077`.  The :command:`set(CACHE)`
    command always sets the cache variable if it did not exist previously,
    regardless of the ``CMP0126`` policy setting.  The :command:`option` command
    will *not* set the cache variable if a non-cache variable of the same name
    already exists and :policy:`CMP0077` is set to ``NEW``.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.21
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn by default
    .. include:: STANDARD_ADVICE.txt
    
    See documentation of the
    :variable:`CMAKE_POLICY_WARNING_CMP0126 <CMAKE_POLICY_WARNING_CMP<NNNN>>`
    variable to control the warning.
    
    The :variable:`CMAKE_POLICY_DEFAULT_CMP0126 <CMAKE_POLICY_DEFAULT_CMP\<NNNN\>>`
    variable may be used to set the policy for a third-party project in a
    subdirectory without modifying it.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0127.rst
=====================================


.. code-block:: 

    CMP0127
    -------
    
    .. versionadded:: 3.22
    
    :command:`cmake_dependent_option` supports full :ref:`Condition Syntax`.
    
    The ``<depends>`` parameter accepts a :ref:`semicolon-separated list <CMake
    Language Lists>` of conditions.  CMake 3.21 and lower evaluates each
    ``condition`` as ``if(${condition})``, which does not properly handle
    conditions with nested paren groups.  CMake 3.22 and above instead prefer
    to evaluate each ``condition`` as ``if(<condition>)``, where ``<condition>``
    is re-parsed as if literally written in a call to :command:`if`.  This
    allows expressions like::
    
      "A AND (B OR C)"
    
    but requires expressions like::
    
      "FOO MATCHES (UPPER|lower)"
    
    to be re-written as::
    
      "FOO MATCHES \"(UPPER|lower)\""
    
    Policy ``CMP0127`` provides compatibility for projects that have not
    been updated to expect the new behavior.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.22
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0128.rst
=====================================


.. code-block:: 

    CMP0128
    -------
    
    .. versionadded:: 3.22
    
    When this policy is set to ``NEW``:
    
    * :prop_tgt:`<LANG>_EXTENSIONS` is initialized to
      :variable:`CMAKE_<LANG>_EXTENSIONS` if set, otherwise falling back to
      :variable:`CMAKE_<LANG>_EXTENSIONS_DEFAULT`.
    
    * Extensions are correctly enabled/disabled if :prop_tgt:`<LANG>_STANDARD` is
      unset or satisfied by the default.
    
    * Standard mode-affecting flags aren't added unless necessary to achieve the
      specified mode.
    
    The ``OLD`` behavior:
    
    * Initializes :prop_tgt:`<LANG>_EXTENSIONS` to
      :variable:`CMAKE_<LANG>_EXTENSIONS` if set, otherwise falling back to ``ON``.
    
    * Always adds a flag if :prop_tgt:`<LANG>_STANDARD` is set and
      :prop_tgt:`<LANG>_STANDARD_REQUIRED` is ``OFF``.
    
    * If :prop_tgt:`<LANG>_STANDARD` is unset:
    
      * Doesn't disable extensions even if :prop_tgt:`<LANG>_EXTENSIONS` is
        ``OFF``.
    
      * Fails to enable extensions if :prop_tgt:`<LANG>_EXTENSIONS` is ``ON``
        except for the ``IAR`` compiler.
    
    Code may need to be updated for the ``NEW`` behavior in the following cases:
    
    * If a standard mode flag previously overridden by CMake's and not used during
      compiler detection now takes effect due to CMake no longer adding one as the
      default detected is appropriate.
    
      Such code should be converted to either:
    
      * Use :prop_tgt:`<LANG>_STANDARD` and :prop_tgt:`<LANG>_EXTENSIONS` instead
        of manually adding flags.
    
      * Or ensure the manually-specified flags are used during compiler detection.
    
    * If extensions were disabled without :prop_tgt:`<LANG>_STANDARD` being set
      CMake previously wouldn't actually disable extensions.
    
      Such code should be updated to not disable extensions if they are required.
    
    * If extensions were enabled/disabled when :prop_tgt:`<LANG>_STANDARD` was
      satisfied by the compiler's default CMake previously wouldn't actually
      enable/disable extensions.
    
      Such code should be updated to set the correct extensions mode.
    
    If compiler flags affecting the standard mode are used during compiler
    detection (for example in :manual:`a toolchain file <cmake-toolchains(7)>`
    using :variable:`CMAKE_<LANG>_FLAGS_INIT`) then they will affect the detected
    default :variable:`standard <CMAKE_<LANG>_STANDARD_DEFAULT>` and
    :variable:`extensions <CMAKE_<LANG>_EXTENSIONS_DEFAULT>`.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.22
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn by default
    .. include:: STANDARD_ADVICE.txt
    
    See documentation of the
    :variable:`CMAKE_POLICY_WARNING_CMP0128 <CMAKE_POLICY_WARNING_CMP<NNNN>>`
    variable to control the warning.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0129.rst
=====================================


.. code-block:: 

    CMP0129
    -------
    
    .. versionadded:: 3.23
    
    Compiler id for MCST LCC compilers is now ``LCC``, not ``GNU``.
    
    CMake 3.23 and above recognize MCST LCC compiler as a different from ``GNU``,
    with its own command line and set of capabilities.
    CMake now prefers to present this to projects by setting the
    :variable:`CMAKE_<LANG>_COMPILER_ID` variable to ``LCC`` instead
    of ``GNU``. However, existing projects may assume the compiler id for
    LCC is ``GNU`` as it was in CMake versions prior to 3.23.
    Therefore this policy determines for MCST LCC compiler which
    compiler id to report in the :variable:`CMAKE_<LANG>_COMPILER_ID`
    variable after language ``<LANG>`` is enabled by the :command:`project`
    or :command:`enable_language` command.  The policy must be set prior
    to the invocation of either command.
    
    The ``OLD`` behavior for this policy is to use compiler id ``GNU`` (and set
    :variable:`CMAKE_<LANG>_COMPILER_VERSION` to the supported GNU compiler version.)
    ``NEW`` behavior for this policy is to use compiler id ``LCC``, and set
    :variable:`CMAKE_<LANG>_SIMULATE_ID` to ``GNU``, and
    :variable:`CMAKE_<LANG>_SIMULATE_VERSION` to the supported GNU compiler version.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.23
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn by default
    .. include:: STANDARD_ADVICE.txt
    
    See documentation of the
    :variable:`CMAKE_POLICY_WARNING_CMP0129 <CMAKE_POLICY_WARNING_CMP<NNNN>>`
    variable to control the warning.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0130.rst
=====================================


.. code-block:: 

    CMP0130
    -------
    
    .. versionadded:: 3.24
    
    :command:`while` diagnoses condition evaluation errors.
    
    CMake 3.23 and below accidentally tolerated errors encountered while
    evaluating the condition passed to the :command:`while` command
    (but not the :command:`if` command).  For example, the code
    
    .. code-block:: cmake
    
      set(paren "(")
      while(${paren})
      endwhile()
    
    creates an unbalanced parenthesis during condition evaluation.
    
    CMake 3.24 and above prefer to diagnose such errors.  This policy
    provides compatibility for projects that have not been updated to
    fix their condition errors.
    
    The ``OLD`` behavior for this policy is to ignore errors in
    :command:`while` conditions.  The ``NEW`` behavior for this
    policy is to diagnose errors in :command:`while` conditions.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.24
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0131.rst
=====================================


.. code-block:: 

    CMP0131
    -------
    
    .. versionadded:: 3.24
    
    :prop_tgt:`LINK_LIBRARIES` supports the :genex:`$<LINK_ONLY:...>`
    generator expression.
    
    CMake 3.23 and below documented the :genex:`$<LINK_ONLY:...>` generator
    expression only for use in :prop_tgt:`INTERFACE_LINK_LIBRARIES`.
    When used in :prop_tgt:`LINK_LIBRARIES`, the content guarded inside
    :genex:`$<LINK_ONLY:...>` was always used, even when collecting non-linking
    usage requirements such as :prop_tgt:`INTERFACE_COMPILE_DEFINITIONS`.
    
    CMake 3.24 and above prefer to support :genex:`$<LINK_ONLY:...>`, when
    used in :prop_tgt:`LINK_LIBRARIES`, by using the guarded content only
    for link dependencies and not other usage requirements.  This policy
    provides compatibility for projects that have not been updated to
    account for this change.
    
    The ``OLD`` behavior for this policy is to use :prop_tgt:`LINK_LIBRARIES`
    content guarded by :genex:`$<LINK_ONLY:...>` even for non-linking
    usage requirements.  The ``NEW`` behavior for this policy is to use
    the guarded content only for link dependencies.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.24
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0132.rst
=====================================


.. code-block:: 

    CMP0132
    -------
    
    .. versionadded:: 3.24
    
    Apart from when using the Xcode generator and some Visual Studio generators,
    CMake 3.23 and below will set environment variables like :envvar:`CC`,
    :envvar:`CXX`, etc. when the corresponding language is enabled.
    This only occurs on the very first time CMake is run in a build directory,
    and the environment variables are only defined at configure time, not build
    time. On subsequent CMake runs, these environment variables are not set,
    opening up the opportunity for different behavior between the first and
    subsequent CMake runs. CMake 3.24 and above prefer to not set these
    environment variables when a language is enabled, even on the first run in
    a build directory.
    
    The ``OLD`` behavior for this policy sets the relevant environment variable
    on the first run when a language is enabled. The ``NEW`` behavior for this
    policy does not set any such environment variables.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.24
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0133.rst
=====================================


.. code-block:: 

    CMP0133
    -------
    
    .. versionadded:: 3.24
    
    The :module:`CPack` module disables SLA by default in the
    :cpack_gen:`CPack DragNDrop Generator`.
    
    The :cpack_gen:`CPack DragNDrop Generator` in CMake 3.22 and below attach a
    Software License Agreement (SLA) to ``.dmg`` files using the file specified
    by :variable:`CPACK_RESOURCE_FILE_LICENSE`, if set to a non-default value.
    macOS 12.0 deprecated the tools used to do this, so CMake 3.23 added
    the :variable:`CPACK_DMG_SLA_USE_RESOURCE_FILE_LICENSE` option to
    control the behavior.  CMake 3.23 enables that option by default for
    compatibility with older versions. CMake 3.24 and above prefer to *not*
    enable the :variable:`CPACK_DMG_SLA_USE_RESOURCE_FILE_LICENSE` option by
    default. This policy provides compatibility with projects that have not
    been updated to account for the lack of a SLA in their ``.dmg`` packages.
    
    The ``OLD`` behavior for this policy is to enable
    :variable:`CPACK_DMG_SLA_USE_RESOURCE_FILE_LICENSE` by default.
    The ``NEW`` behavior for this policy is to not enable it by default.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.24
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn by default
    .. include:: STANDARD_ADVICE.txt
    
    See documentation of the
    :variable:`CMAKE_POLICY_WARNING_CMP0133 <CMAKE_POLICY_WARNING_CMP<NNNN>>`
    variable to control the warning.
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0134.rst
=====================================


.. code-block:: 

    CMP0134
    -------
    
    .. versionadded:: 3.24
    
    The default registry view is ``TARGET`` for the :command:`find_file`,
    :command:`find_path`, :command:`find_library`, and :command:`find_package`
    commands and ``BOTH`` for the :command:`find_program` command.
    
    The default registry views in CMake 3.23 and below are selected using the
    following rules:
    
    * if :variable:`CMAKE_SIZEOF_VOID_P` has value ``8``:
    
      * Use view ``64`` for all ``find_*`` commands except :command:`find_program`
        command.
      * Use view ``64_32`` for :command:`find_program` command.
    
    * if :variable:`CMAKE_SIZEOF_VOID_P` has value ``4`` or is undefined:
    
      * Use view ``32`` for all ``find_*`` commands except :command:`find_program`
        command.
      * Use view ``32_64`` for :command:`find_program` command.
    
    The ``OLD`` behavior for this policy is to use registry views ``64`` and
    ``64_32`` or ``32_64`` and ``32`` as default, depending of
    :variable:`CMAKE_SIZEOF_VOID_P` variable value.
    The ``NEW`` behavior for this policy is to use registry views ``TARGET`` and
    ``BOTH`` as default.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.24
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0135.rst
=====================================


.. code-block:: 

    CMP0135
    -------
    
    .. versionadded:: 3.24
    
    When using the ``URL`` download method with the :command:`ExternalProject_Add`
    command, CMake 3.23 and below sets the timestamps of the extracted contents
    to the same as the timestamps in the archive. When the ``URL`` changes, the
    new archive is downloaded and extracted, but the timestamps of the extracted
    contents might not be newer than the previous contents. Anything that depends
    on the extracted contents might not be rebuilt, even though the contents may
    change.
    
    CMake 3.24 and above prefers to set the timestamps of all extracted contents
    to the time of the extraction. This ensures that anything that depends on the
    extracted contents will be rebuilt whenever the ``URL`` changes.
    
    The ``DOWNLOAD_EXTRACT_TIMESTAMP`` option to the
    :command:`ExternalProject_Add` command can be used to explicitly specify how
    timestamps should be handled. When ``DOWNLOAD_EXTRACT_TIMESTAMP`` is not
    given, this policy controls the default behavior. The ``OLD`` behavior for
    this policy is to restore the timestamps from the archive. The ``NEW``
    behavior sets the timestamps of extracted contents to the time of extraction.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.24
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0136.rst
=====================================


.. code-block:: 

    CMP0136
    -------
    
    .. versionadded:: 3.24
    
    Watcom runtime library flags are selected by an abstraction.
    
    Compilers targeting the Watcom ABI have flags to select the Watcom runtime
    library.
    
    In CMake 3.23 and below, Watcom runtime library selection flags are added to
    the default :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` cache entries by CMake
    automatically.  This allows users to edit their cache entries to adjust the
    flags.  However, the presence of such default flags is problematic for
    projects that want to choose a different runtime library programmatically.
    In particular, it requires string editing of the
    :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` variables with knowledge of the
    CMake builtin defaults so they can be replaced.
    
    CMake 3.24 and above prefer to leave the Watcom runtime library selection flags
    out of the default :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` values and instead
    offer a first-class abstraction.  The :variable:`CMAKE_WATCOM_RUNTIME_LIBRARY`
    variable and :prop_tgt:`WATCOM_RUNTIME_LIBRARY` target property may be set to
    select the Watcom runtime library.  If they are not set then CMake uses the
    default value ``MultiThreadedDLL`` on Windows and ``SingleThreaded`` on other
    platforms, which is equivalent to the original flags.
    
    This policy provides compatibility with projects that have not been updated
    to be aware of the abstraction.  The policy setting takes effect as of the
    first :command:`project` or :command:`enable_language` command that enables
    a language whose compiler targets the Watcom ABI.
    
    .. note::
    
      Once the policy has taken effect at the top of a project, that choice
      must be used throughout the tree.  In projects that have nested projects
      in subdirectories, be sure to convert everything together.
    
    The ``OLD`` behavior for this policy is to place Watcom runtime library
    flags in the default :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` cache
    entries and ignore the :variable:`CMAKE_WATCOM_RUNTIME_LIBRARY` abstraction.
    The ``NEW`` behavior for this policy is to *not* place Watcom runtime
    library flags in the default cache entries and use the abstraction instead.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.24
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0137.rst
=====================================


.. code-block:: 

    CMP0137
    -------
    
    .. versionadded:: 3.24
    
    :command:`try_compile` passes platform variables in project mode.
    
    The :command:`try_compile` command :ref:`source file <Try Compiling Source
    Files>` signature propagates CMake variables containing platform settings,
    and those specified by the :variable:`CMAKE_TRY_COMPILE_PLATFORM_VARIABLES`
    variable, into the generated test project.  This helps the test project drive
    the toolchain the same way the calling project will.  In CMake 3.23 and below,
    the :ref:`whole-project <Try Compiling Whole Projects>` signature does not
    propagate platform variables automatically.  CMake 3.24 and above prefer to
    propagate platform variables in the :ref:`whole-project <Try Compiling Whole
    Projects>` signature.  This policy provides compatibility with projects that
    have not been updated to expect the behavior.
    
    The ``OLD`` behavior for this policy is to not pass any additional variables to
    the :ref:`whole-project <Try Compiling Whole Projects>` signature.
    The ``NEW`` behavior for this policy is to pass the same variables that the
    :ref:`source file <Try Compiling Source Files>` signature does.
    
    Regardless of the policy setting, the
    :variable:`CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES` variable may be set
    to suppress passing the platform variables through either signature.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.24
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0138.rst
=====================================


.. code-block:: 

    CMP0138
    -------
    
    .. versionadded:: 3.24
    
    :module:`CheckIPOSupported` uses flags from calling project.
    
    The :module:`CheckIPOSupported` module :command:`check_ipo_supported`
    command compiles a test project to determine whether the toolchain
    supports :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION`.  CMake 3.23 and
    below run the check with the default values of the
    :variable:`CMAKE_<LANG>_FLAGS` and :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>`
    variables for the current environment and toolchain settings.
    However, some projects may modify these flag variables to add
    flags that affect availability of the toolchain's IPO features.
    CMake 3.24 and above prefer to honor the calling project's values
    for these variables.  This policy provides compatibility for projects
    that have not been updated to expect this behavior.
    
    The ``OLD`` behavior for this policy is to ignore the calling
    project's values of :variable:`CMAKE_<LANG>_FLAGS` and
    :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>`.  The ``NEW`` behavior
    for this policy is to use the values of those variables as
    compiler flags in the test project.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.24
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0139.rst
=====================================


.. code-block:: 

    CMP0139
    -------
    
    .. versionadded:: 3.24
    
    The :command:`if` command supports path comparisons using ``PATH_EQUAL``
    operator.
    
    The ``OLD`` behavior for this policy is to ignore the ``PATH_EQUAL`` operator.
    The ``NEW`` behavior is to interpret the ``PATH_EQUAL`` operator.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.24
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0140.rst
=====================================


.. code-block:: 

    CMP0140
    -------
    
    .. versionadded:: 3.25
    
    The :command:`return` command checks its parameters.
    
    The ``OLD`` behavior for this policy is to ignore any parameters given to the
    command.
    The ``NEW`` behavior is to check the validity of the parameters.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.25
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0141.rst
=====================================


.. code-block:: 

    CMP0141
    -------
    
    .. versionadded:: 3.25
    
    MSVC debug information format flags are selected by an abstraction.
    
    Compilers targeting the MSVC ABI have flags to select the debug information
    format. Debug information format selection typically varies with build
    configuration.
    
    In CMake 3.24 and below, debug information format flags are added to
    the default :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` cache entries by CMake
    automatically.  This allows users to edit their cache entries to adjust the
    flags.  However, the presence of such default flags is problematic for
    projects that want to choose a different runtime library programmatically.
    In particular, it requires string editing of the
    :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` variables with knowledge of the
    CMake builtin defaults so they can be replaced.
    
    CMake 3.25 and above prefer to leave the debug information format flags
    out of the default :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` values and instead
    offer a first-class abstraction.  The
    :variable:`CMAKE_MSVC_DEBUG_INFORMATION_FORMAT` variable and
    :prop_tgt:`MSVC_DEBUG_INFORMATION_FORMAT` target property may be set to
    select the MSVC debug information format.  If they are not set, CMake
    enables debug information in debug configurations using the default value
    ``$<$<CONFIG:Debug,RelWithDebInfo>:ProgramDatabase>``, if supported by the
    compiler, and otherwise ``$<$<CONFIG:Debug,RelWithDebInfo>:Embedded>``.
    
    This policy provides compatibility with projects that have not been updated
    to be aware of the abstraction.  The policy setting takes effect as of the
    first :command:`project` or :command:`enable_language` command that enables
    a language whose compiler targets the MSVC ABI.
    
    .. note::
    
      Once the policy has taken effect at the top of a project, that choice
      will be used throughout the tree.  In projects that have nested projects
      in subdirectories, be sure to confirm if everything is working with the
      selected policy behavior.
    
    The ``OLD`` behavior for this policy is to place MSVC debug information
    format flags in the default :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` cache
    entries and ignore the :variable:`CMAKE_MSVC_DEBUG_INFORMATION_FORMAT`
    abstraction.  The ``NEW`` behavior for this policy is to *not* place MSVC
    debug information format flags in the default cache entries and use
    the abstraction instead.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.25
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0142.rst
=====================================


.. code-block:: 

    CMP0142
    -------
    
    .. versionadded:: 3.25
    
    The :generator:`Xcode` generator does not append per-config suffixes to
    library search paths.
    
    In CMake 3.24 and below, the :generator:`Xcode` generator preceded each
    entry of a library search path with a copy of itself appended with
    ``$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)``.  This was left from
    very early versions of CMake in which per-config directories were not well
    modeled.  Such paths often do not exist, resulting in warnings from the
    toolchain.  CMake 3.25 and above prefer to not add such library search
    paths.  This policy provides compatibility for projects that may have been
    accidentally relying on the old behavior.
    
    The ``OLD`` behavior for this policy is to append
    ``$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)`` to all library search paths.
    The ``NEW`` behavior is to not modify library search paths.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.25
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0143.rst
=====================================


.. code-block:: 

    CMP0143
    -------
    
    .. versionadded:: 3.26
    
    :prop_gbl:`USE_FOLDERS` global property is treated as ``ON`` by default.
    
    When using CMake 3.25 or earlier, :prop_gbl:`USE_FOLDERS` is treated
    as ``OFF`` by default unless projects enable the feature.  For example:
    
    .. code-block:: cmake
    
      cmake_minimum_required(VERSION 3.25)
      project(foobar LANGUAGES CXX)
      set_property(GLOBAL PROPERTY USE_FOLDERS ON)
    
    CMake 3.26 and later prefer to enable the feature by default.
    
    Note that it is the policy setting at the `end` of the top level
    ``CMakeLists.txt`` file that matters.  The policy setting applies globally
    to the whole project.
    
    This policy provides compatibility with projects that have not been updated
    to expect enabling of folders.  Enabling folders causes projects to appear
    differently in IDEs.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.26
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0144.rst
=====================================


.. code-block:: 

    CMP0144
    -------
    
    .. versionadded:: 3.27
    
    :command:`find_package` uses upper-case ``<PACKAGENAME>_ROOT`` variables.
    
    In CMake 3.27 and above the :command:`find_package(<PackageName>)` command now
    searches prefixes specified by the upper-case :variable:`<PACKAGENAME>_ROOT`
    CMake variable and the :envvar:`<PACKAGENAME>_ROOT` environment variable
    in addition to the case-preserved :variable:`<PackageName>_ROOT` and
    :envvar:`<PackageName>_ROOT` variables used since policy :policy:`CMP0074`.
    This policy provides compatibility with projects that have not been
    updated to avoid using ``<PACKAGENAME>_ROOT`` variables for other purposes.
    
    The ``OLD`` behavior for this policy is to ignore ``<PACKAGENAME>_ROOT``
    variables if the original ``<PackageName>`` has lower-case characters.
    The ``NEW`` behavior for this policy is to use ``<PACKAGENAME>_ROOT``
    variables.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.27
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0145.rst
=====================================


.. code-block:: 

    CMP0145
    -------
    
    .. versionadded:: 3.27
    
    The :module:`Dart` and :module:`FindDart` modules are removed.
    
    These modules were added very early in CMake's development to support
    driving tests with a "DART" tool, but DART has not been distributed or
    maintained for many years.  Projects would ``include(Dart)`` to use it,
    and the ``Dart`` module would run ``find_package(Dart)`` internally.
    Since :manual:`ctest(1)` was created, the ``Dart`` module has just been
    a compatibility shim that finds ``Dart`` to support some legacy
    functionality and then forwards to the :module:`CTest` module.
    
    CMake 3.27 and above prefer to not provide the :module:`Dart` or
    :module:`FindDart` modules.  This policy provides compatibility for
    projects that have not been ported away from them.  Projects using the
    ``Dart`` module should be updated to use the :module:`CTest` module directly.
    
    The ``OLD`` behavior of this policy is for ``include(Dart)`` and
    ``find_package(Dart)`` to load the deprecated modules.  The ``NEW``
    behavior is for uses of the modules to fail as if they do not exist.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.27
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0146.rst
=====================================


.. code-block:: 

    CMP0146
    -------
    
    .. versionadded:: 3.27
    
    The :module:`FindCUDA` module is removed.
    
    The :module:`FindCUDA` module has been deprecated since CMake 3.10.
    CMake 3.27 and above prefer to not provide the module.
    This policy provides compatibility for projects that have not been
    ported away from it.
    
    Projects using the :module:`FindCUDA` module should be updated to use
    CMake's first-class ``CUDA`` language support.  List ``CUDA`` among the
    languages named in the top-level call to the :command:`project` command,
    or call the :command:`enable_language` command with ``CUDA``.
    Then one can add CUDA (``.cu``) sources directly to targets,
    similar to other languages.
    
    The ``OLD`` behavior of this policy is for ``find_package(CUDA)`` to
    load the deprecated module.  The ``NEW`` behavior is for uses of the
    module to fail as if it does not exist.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.27
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0147.rst
=====================================


.. code-block:: 

    CMP0147
    -------
    
    .. versionadded:: 3.27
    
    :ref:`Visual Studio Generators` build custom commands in parallel.
    
    Visual Studio 15.8 (2017) and newer support building custom commands in
    parallel.  CMake 3.27 and above prefer to enable this behavior by adding
    a ``BuildInParallel`` setting to custom commands in ``.vcxproj`` files.
    This policy provides compatibility for projects that have not been updated
    to expect this, e.g., because their custom commands were accidentally
    relying on serial execution by MSBuild.
    
    The ``OLD`` behavior for this policy is to not add ``BuildInParallel``.
    The ``NEW`` behavior for this policy is to add ``BuildInParallel`` for
    VS 15.8 and newer.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.27
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0148.rst
=====================================


.. code-block:: 

    CMP0148
    -------
    
    .. versionadded:: 3.27
    
    The :module:`FindPythonInterp` and :module:`FindPythonLibs` modules are removed.
    
    These modules have been deprecated since CMake 3.12.
    CMake 3.27 and above prefer to not provide the modules.
    This policy provides compatibility for projects that have not been
    ported away from them.
    
    Projects using the :module:`FindPythonInterp` and/or :module:`FindPythonLibs`
    modules should be updated to use one of their replacements:
    
    * :module:`FindPython3`
    * :module:`FindPython2`
    * :module:`FindPython`
    
    The ``OLD`` behavior of this policy is for ``find_package(PythonInterp)``
    and ``find_package(PythonLibs)`` to load the deprecated modules.  The ``NEW``
    behavior is for uses of the modules to fail as if they do not exist.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.27
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0149.rst
=====================================


.. code-block:: 

    CMP0149
    -------
    
    .. versionadded:: 3.27
    
    :ref:`Visual Studio Generators` select latest Windows SDK by default.
    
    Visual Studio Generators select a Windows SDK version to put in the
    ``WindowsTargetPlatformVersion`` setting in ``.vcxproj`` files.
    CMake sets the :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION`
    variable to the selected SDK version.
    
    Prior to CMake 3.27, the SDK version was always selected by the value of
    the :variable:`CMAKE_SYSTEM_VERSION` variable.  Users or toolchain files
    could set that variable to one of the exact Windows SDK versions available
    on the host system.  Since :variable:`CMAKE_SYSTEM_VERSION` defaults to
    :variable:`CMAKE_HOST_SYSTEM_VERSION`, and it is not guaranteed that a
    matching Windows SDK version is available, CMake had to fall back to
    using the latest Windows SDK version if no exact match was available.
    This approach was problematic:
    
    * The latest Windows SDK might or might not be selected based on whether
      the host version of Windows happens to match an available SDK version.
    
    * An old Windows SDK version might be selected that has not been updated
      for newer language standards such as C11.
    
    CMake 3.27 and higher prefer to ignore the exact value of
    :variable:`CMAKE_SYSTEM_VERSION` and by default select the latest SDK
    version available.  An exact SDK version may be specified explicitly
    using a ``version=`` field in the :variable:`CMAKE_GENERATOR_PLATFORM`
    variable.  See :ref:`Visual Studio Platform Selection`.
    
    This policy provides compatibility for projects, toolchain files, and
    build scripts that have not been ported away from using
    :variable:`CMAKE_SYSTEM_VERSION` to specify an exact SDK version.
    
    .. note::
    
      This policy must be set before the first :command:`project` or
      :command:`enable_language` command invocation at the top of the
      project.  That is when :ref:`Visual Studio Generators` select a
      Windows SDK.
    
    The ``OLD`` behavior for this policy is to use the exact value of
    :variable:`CMAKE_SYSTEM_VERSION` if possible.  The ``NEW`` behavior
    for this policy is to ignore it.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.27
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0150.rst
=====================================


.. code-block:: 

    CMP0150
    -------
    
    .. versionadded:: 3.27
    
    :command:`ExternalProject_Add` and :command:`FetchContent_Declare` commands
    treat relative ``GIT_REPOSITORY`` paths as being relative to the parent
    project's remote.
    
    Earlier versions of these commands always treated relative paths in
    ``GIT_REPOSITORY`` as local paths, but the base directory it was treated
    as relative to was both undocumented and unintuitive.  The ``OLD`` behavior
    for this policy is to interpret relative paths used for ``GIT_REPOSITORY``
    as local paths relative to the following:
    
    * The parent directory of ``SOURCE_DIR`` for :command:`ExternalProject_Add`.
    * ``FETCHCONTENT_BASE_DIR`` for :command:`FetchContent_Declare`.
    
    The ``NEW`` behavior is to determine the remote from the parent project and
    interpret the path relative to that remote.  The value of
    :variable:`CMAKE_CURRENT_SOURCE_DIR` when :command:`ExternalProject_Add` or
    :command:`FetchContent_Declare` is called determines the parent project.
    The remote is selected according to the following (the first match is used):
    
    * If the parent project is checked out on a branch with an upstream remote
      defined, use that remote.
    * If only one remote is defined, use that remote.
    * If multiple remotes are defined and one of them is named ``origin``, use
      ``origin``'s remote but also issue a warning.
    
    If an appropriate remote cannot be determined from the above, a fatal error
    will be raised.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.27
    .. |WARNS_OR_DOES_NOT_WARN| replace::
       warns when a relative path is encountered
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0151.rst
=====================================


.. code-block:: 

    CMP0151
    -------
    
    .. versionadded:: 3.27
    
    AUTOMOC include directory is a system include directory by default.
    
    Headers generated for :ref:`Qt AUTOMOC` are placed in target-specific include
    directories.  CMake 3.26 and older added these as normal include directories.
    CMake 3.27 and newer prefer to add them as system include directories.
    This policy provides compatibility for projects that have not been updated
    to expect this.
    
    If the :prop_tgt:`AUTOGEN_USE_SYSTEM_INCLUDE` target property is set,
    perhaps via the :variable:`CMAKE_AUTOGEN_USE_SYSTEM_INCLUDE` variable,
    then its value is used regardless of the setting of this policy.
    
    The ``OLD`` behavior for this policy is to add autogen include directory to
    the target's include directories.
    The ``NEW`` behavior for this policy is to add autogen include directory to
    the target's system include directories.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.27
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0152.rst
=====================================


.. code-block:: 

    CMP0152
    -------
    
    .. versionadded:: 3.28
    
    :command:`file(REAL_PATH)` resolves symlinks before collapsing ../ components.
    
    In CMake 3.27 and below, :command:`file(REAL_PATH)` collapsed any ``../``
    components in a path before resolving symlinks.  This produced incorrect
    results when the ``../`` collapsed away a symlink.
    
    The ``OLD`` behavior for this policy is to collapse ``../`` components before
    resolving symlinks.
    The ``NEW`` behavior for this policy is to resolve all symlinks before
    collapsing ``../`` components.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.28
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0153.rst
=====================================


.. code-block:: 

    CMP0153
    -------
    
    .. versionadded:: 3.28
    
    The :command:`exec_program` command should not be called.
    
    This command has long been superseded by the :command:`execute_process`
    command and has been deprecated since CMake 3.0.
    
    .. |disallowed_version| replace:: 3.28
    .. include:: DISALLOWED_COMMAND.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0154.rst
=====================================


.. code-block:: 

    CMP0154
    -------
    
    .. versionadded:: 3.28
    
    Generated files are private by default in targets using :ref:`file sets`.
    
    CMake 3.27 and below assume that any file generated as an output or byproduct
    of :command:`add_custom_command` or :command:`add_custom_target` may be a
    public header file meant for inclusion by dependents' source files.  This
    requires :ref:`Ninja Generators` to add conservative order-only dependencies
    that prevent a target's source files from compiling before custom commands
    from the target's dependencies are finished, even if those custom commands
    only produce sources private to their own target.
    
    :ref:`File Sets`, introduced by CMake 3.23, provide a way to express the
    visibility of generated header files.  CMake 3.28 and above prefer to
    assume that, in targets using file sets, generated files are private to
    their own target by default.  Generated public headers must be specified
    as members of a ``PUBLIC`` (or ``INTERFACE``) ``FILE_SET``, typically of
    type ``HEADERS``.  With this information, :ref:`Ninja Generators` may omit
    the above-mentioned conservative dependencies and produce more efficient
    build graphs.
    
    Additionally, if the custom command's output is a member of a file set of type
    ``CXX_MODULES``, it will additionally not be required to exist before
    compiling other sources in the same target.  Since these files should not be
    included at compile time directly, they may not be implicitly required to
    exist for other compilation rules.
    
    This policy provides compatibility for projects using file sets in targets
    with generated header files that have not been updated.  Such projects
    should be updated to express generated public headers in a file set.
    For example:
    
    .. code-block:: cmake
    
      add_custom_command(
        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/foo.h
        ...
      )
      target_sources(foo
        PUBLIC FILE_SET HEADERS
          BASE_DIRS ${CMAKE_CURRENT_BINARY_DIR}
          FILES     ${CMAKE_CURRENT_BINARY_DIR}/foo.h
      )
    
    The ``OLD`` behavior for this policy is to assume generated files are
    public, even in targets using file sets, and for :ref:`Ninja Generators`
    to produce conservative build graphs.  The ``NEW`` behavior for this
    policy is to assume generated files are private in targets using file sets,
    and for :ref:`Ninja Generators` to produce more efficient build graphs.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.28
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0155.rst
=====================================


.. code-block:: 

    CMP0155
    -------
    
    .. versionadded:: 3.28
    
    C++ sources in targets with at least C++20 are scanned for imports
    when supported.
    
    CMake 3.27 and below assume that C++ sources do not ``import`` modules.
    CMake 3.28 and above prefer to assume that C++ sources in targets using C++20
    or higher might ``import`` modules, and must be scanned before compiling,
    unless explicitly disabled.  This policy provides compatibility for projects
    that use C++20 or higher, without modules, that have not been updated to turn
    off scanning, e.g., via the :variable:`CMAKE_CXX_SCAN_FOR_MODULES` variable.
    See the :manual:`cmake-cxxmodules(7)` manual for more details on C++ module
    support.
    
    The ``OLD`` behavior for this policy is to assume that C++ 20 and newer
    sources do not import modules.  The ``NEW`` behavior for this policy is to
    assume that C++ 20 and newer files may import modules if the compiler
    understands how to scan for their dependencies, and need to be scanned.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.28
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0156.rst
=====================================


.. code-block:: 

    CMP0156
    -------
    
    .. versionadded:: 3.29
    
    De-duplicate libraries on link lines based on linker capabilities.
    
    Traditional linkers maintain a set of undefined symbols during linking. The
    linker processes each file in the order in which it appears on the command
    line, until the set of undefined symbols becomes empty. An object file is
    linked into the output object when it is encountered, with its undefined
    symbols added to the set. Upon encountering an archive file a traditional
    linker searches the objects contained therein, and processes those that satisfy
    symbols in the unresolved set.
    
    Handling mutually dependent archives may be awkward when using a traditional
    linker. Archive files may have to be specified multiple times.
    
    Some linkers (for instance Apple or Windows linkers, as well as ``LLVM LLD``)
    record all symbols found in objects and archives as they iterate over command
    line arguments. When one of these linkers encounters an undefined symbol that
    can be resolved by an object file contained in a previously processed archive
    file, it immediately extracts and links it into the output object.
    
    CMake 3.28 and below may generate link lines that repeat static libraries as
    a traditional linker would need, even when using a linker that does not need it.
    They may also de-duplicate shared libraries by keeping their last occurrence,
    which on Windows platforms can change DLL load order.
    
    CMake 3.29 and above prefer to apply different strategies based on linker
    capabilities.  So, when targeting Apple and Windows platforms, all
    libraries are de-duplicated.  Moreover, on Windows platforms, libraries
    are de-duplicated by keeping their first occurrence, thus respecting the
    project-specified order.  This policy provides compatibility with projects
    that have not been updated to expect the latter behavior.
    
    The ``OLD`` behavior for this policy is to always repeat static libraries
    as if using a traditional linker, and always de-duplicate shared libraries
    by keeping the last occurrence of each.  The ``NEW`` behavior for this policy
    is to apply different strategies based on linker capabilities.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.29
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0157.rst
=====================================


.. code-block:: 

    CMP0157
    -------
    
    .. versionadded:: 3.29
    
    Swift compilation mode is selected by an abstraction.
    
    The Swift compiler can compile modules in different modes. The desired build
    mode depends whether the developer is iterating and wants to incrementally make
    changes, or if they are building a release for distribution and want more
    optimizations applied to the resulting binary.
    
    CMake versions 3.26 through 3.28 build Swift binaries with whole-module
    optimizations enabled when configured in a non-debug build type.
    For CMake versions earlier than 3.26, the developer needs to specify
    the necessary flag manually for the :ref:`Ninja Generators`, and cannot
    not specify whole-module optimizations to the :generator:`Xcode` generator.
    
    CMake versions 3.29 and above prefer to set the compilation mode using
    the :prop_tgt:`Swift_COMPILATION_MODE` target property, which can be
    initialized by the :variable:`CMAKE_Swift_COMPILATION_MODE` variable.
    
    This policy provides compatibility for projects that have not been updated.
    The policy setting takes effect as of the first :command:`project` or
    :command:`enable_language` command that enables the ``Swift`` language.
    
    .. note::
    
      Once the policy has taken effect at the top of a project, that choice
      must be used throughout the tree. In projects that have nested projects
      in subdirectories, be sure to convert everything together.
    
    The ``OLD`` behavior for this policy builds all Swift targets in
    ``wholemodule`` mode for non-debug configurations.  :ref:`Ninja Generators`
    prepend the ``-wmo`` flag to the default set of Swift flags.
    The :generator:`Xcode` generator sets the ``SWIFT_COMPILATION_MODE``
    attribute to ``wholemodule`` in the generated Xcode project file.
    
    The ``NEW`` behavior for this policy is to apply the compilation mode specified
    in the :prop_tgt:`Swift_COMPILATION_MODE` target property, initialized as each
    target is created by the :variable:`CMAKE_Swift_COMPILATION_MODE` variable.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.29
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0158.rst
=====================================


.. code-block:: 

    CMP0158
    -------
    
    .. versionadded:: 3.29
    
    :command:`add_test` honors :variable:`CMAKE_CROSSCOMPILING_EMULATOR` only
    when :variable:`cross-compiling <CMAKE_CROSSCOMPILING>`.
    
    In CMake 3.28 and below, :command:`add_test` unconditionally used the
    :prop_tgt:`CROSSCOMPILING_EMULATOR` target property (initialized by the
    :variable:`CMAKE_CROSSCOMPILING_EMULATOR` variable) to run test commands
    naming executable targets.  CMake 3.29 and above prefer to use the emulator
    only when the :variable:`CMAKE_CROSSCOMPILING` variable is enabled.  The
    :variable:`CMAKE_TEST_LAUNCHER` variable may be used instead when not
    cross-compiling.  This policy provides compatibility for projects that
    have not been updated.
    
    The ``OLD`` behavior for this policy is for :command:`add_test` to use
    the :prop_tgt:`CROSSCOMPILING_EMULATOR` target property unconditionally.
    The ``NEW`` behavior for this policy is for :command:`add_test` to use
    the :prop_tgt:`CROSSCOMPILING_EMULATOR` target property only when
    :variable:`cross-compiling <CMAKE_CROSSCOMPILING>`.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.29
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0159.rst
=====================================


.. code-block:: 

    CMP0159
    -------
    
    .. versionadded:: 3.29
    
    :command:`file(STRINGS)` with ``REGEX`` updates :variable:`CMAKE_MATCH_<n>`.
    
    In CMake 3.28 and below the :command:`file(STRINGS)` command's ``REGEX``
    option does not affect :variable:`CMAKE_MATCH_<n>` variables.  CMake 3.29
    and above prefer to update the :variable:`CMAKE_MATCH_<n>` variables using
    captures from the last match in the file, similar to the
    :command:`string(REGEX MATCHALL)` command.  This policy provides
    compatibility for projects that have not been updated to expect the behavior.
    
    The ``OLD`` behavior for this policy is for :command:`file(STRINGS)` with
    ``REGEX`` to not store capture groups in :variable:`CMAKE_MATCH_<n>`
    variables.  The ``NEW`` behavior is to store the capture groups.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.29
    .. |WARNS_OR_DOES_NOT_WARN| replace:: does *not* warn
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0160.rst
=====================================


.. code-block:: 

    CMP0160
    -------
    
    .. versionadded:: 3.29
    
    More read-only target properties now error when trying to set them.
    
    The :command:`set_target_properties` and :command:`set_property` commands
    are intended to error out on all read-only properties. However, CMake 3.28 and
    below only did this for the following properties:
    
    * :prop_tgt:`HEADER_SETS`
    * :prop_tgt:`INTERFACE_HEADER_SETS`
    * :prop_tgt:`IMPORTED_GLOBAL`
    * :prop_tgt:`MANUALLY_ADDED_DEPENDENCIES`
    * :prop_tgt:`NAME`
    * :prop_tgt:`TYPE`
    
    This policy enforces the read-only nature of the following target properties:
    
    * :prop_tgt:`ALIAS_GLOBAL`
    * :prop_tgt:`BINARY_DIR`
    * :prop_tgt:`CXX_MODULE_SETS`
    * :prop_tgt:`IMPORTED`
    * :prop_tgt:`INTERFACE_CXX_MODULE_SETS`
    * :prop_tgt:`LOCATION`
    * :prop_tgt:`LOCATION_<CONFIG>`
    * :prop_tgt:`SOURCE_DIR`
    
    The ``OLD`` behavior for this policy is to only error out for the properties
    :prop_tgt:`MANUALLY_ADDED_DEPENDENCIES`, :prop_tgt:`NAME`, and :prop_tgt:`TYPE`.
    The ``NEW`` behavior for this policy is to error out on all target properties
    that are documented as read-only.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.29
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    
    .. include:: DEPRECATED.txt



/P/🚀 policy/CMP0161.rst
=====================================


.. code-block:: 

    CMP0161
    -------
    
    .. versionadded:: 3.29
    
    The :variable:`CPACK_PRODUCTBUILD_DOMAINS` variable defaults to true.
    
    Before CMake 3.29, the :variable:`CPACK_PRODUCTBUILD_DOMAINS` variable is
    unset by default.  When using the :cpack_gen:`CPack productbuild Generator`,
    this disables the use of the ``domains`` attribute in the productbuild
    Distribution XML, and falls back to the ``auth`` attribute instead.
    These attributes control where a productbuild package is allowed to be
    installed.  But the ``auth`` attribute has been deprecated by Apple,
    so projects should migrate to using ``domains`` instead.
    
    CMake 3.29 and above prefer to use a default value of true for
    :variable:`CPACK_PRODUCTBUILD_DOMAINS`, which means ``domains`` will be used
    by default unless the project explicitly sets
    :variable:`CPACK_PRODUCTBUILD_DOMAINS` to false.
    This policy provides compatibility with projects that enabled the
    :cpack_gen:`CPack productbuild Generator`, but did not explicitly set
    :variable:`CPACK_PRODUCTBUILD_DOMAINS`.
    
    The ``OLD`` behavior for this policy is to leave
    :variable:`CPACK_PRODUCTBUILD_DOMAINS` unset if it hasn't been set.
    The ``NEW`` behavior for this policy is to use a default value of true for
    :variable:`CPACK_PRODUCTBUILD_DOMAINS`.
    
    .. |INTRODUCED_IN_CMAKE_VERSION| replace:: 3.29
    .. |WARNS_OR_DOES_NOT_WARN| replace:: warns
    .. include:: STANDARD_ADVICE.txt
    Note that a warning will only be emitted if the
    :variable:`CPACK_BINARY_PRODUCTBUILD <CPACK_BINARY_<GENNAME>>` variable is
    set to true and the project is being built for an Apple platform.
    
    .. include:: DEPRECATED.txt


/P/🚀 release/dev.txt
==================================


.. code-block:: 

    ..
      This file should be included by the adjacent "index.rst"
      in development versions but not in release versions.
    
    Changes Since Release
    =====================
    
    The following noteworthy changes have been made in this development
    version since the preceding release but have not yet been consolidated
    into notes for a specific release version:
    
    .. toctree::
       :maxdepth: 1
       :glob:
    
       dev/*




/P/🚀 dev/README.rst
=================================


CMake Development
*****************

This directory contains documentation about development of CMake itself.
It is not part of the user documentation distributed with CMake.

Contributor Instructions
========================

See `CONTRIBUTING.rst`_ for instructions to contribute changes.

The process for contributing changes is the same whether or not one
has been invited to participate directly in upstream development.

.. _`CONTRIBUTING.rst`: ../../CONTRIBUTING.rst

Upstream Development
====================

CMake uses `Kitware's GitLab Instance`_ to manage development, review, and
integration of changes.  The `CMake Repository`_ holds the integration
branches and tags.  Upstream development processes are covered by the
following documents:

* The `CMake Review Process`_ manages integration of changes.
* The `CMake Testing Process`_ drives integration testing.

.. _`Kitware's GitLab Instance`: https://gitlab.kitware.com
.. _`CMake Repository`: https://gitlab.kitware.com/cmake/cmake
.. _`CMake Review Process`: review.rst
.. _`CMake Testing Process`: testing.rst

Developer Documentation
=======================

CMake developer documentation is provided by the following documents:

* The `CMake Source Code Guide`_.
* The `CMake Documentation Guide`_.
* The `CMake Experimental Features Guide`_.

.. _`CMake Source Code Guide`: source.rst
.. _`CMake Documentation Guide`: documentation.rst
.. _`CMake Experimental Features Guide`: experimental.rst

Maintainer Documentation
========================

CMake maintainer documentation is provided by the following documents:

* The `CMake Maintainer Guide`_.

.. _`CMake Maintainer Guide`: maint.rst



/P/🚀 dev/maint.rst
================================


CMake Maintainer Guide
**********************

The following is a guide to CMake maintenance processes.
See documentation on `CMake Development`_ for more information.

.. _`CMake Development`: README.rst

.. contents:: Maintainer Processes:

Governance
==========

CMake has no formal governance body.  Maintainers expect one another to
cooperate constructively and make decisions in good faith.  In cases of
disagreement, the chief maintainer retains final authority.

Review a Merge Request
======================

The `CMake Review Process`_ requires a maintainer to issue the ``Do: merge``
command to integrate a merge request.  Please check at least the following:

* If the MR source branch (or part of it) should be backported
  to the ``release`` branch (and is already based on a commit
  contained in the ``release`` branch), add a ``Backport: release`` or
  ``Backport: release:<commit-ish>`` trailing line to the MR description.

* If the MR source branch is not named well for the change it makes
  (e.g. it is just ``master`` or the patch changed during review),
  add a ``Topic-rename: <topic>`` trailing line to the MR description
  to provide a better topic name.

* If the MR introduces a new feature or a user-facing behavior change,
  such as a policy, ensure that a ``Help/release/dev/$topic.rst`` file
  is added with a release note.

* If a commit changes a specific area, such as a module, its commit
  message should have an ``area:`` prefix on its first line.

* If a commit fixes a tracked issue, its commit message should have
  a trailing line such as ``Fixes: #00000``.

* Ensure that the MR adds sufficient documentation and test cases.

* Ensure that the MR has been tested sufficiently.  Typically it should
  be staged for nightly testing with ``Do: stage``.  Then manually
  review the `CMake CDash Page`_ to verify that no regressions were
  introduced.  (Learn to tolerate spurious failures due to idiosyncrasies
  of various nightly builders.)

* Ensure that the MR targets the ``master`` branch.  A MR intended for
  the ``release`` branch should be based on ``release`` but still target
  ``master``.  Use the above-mentioned ``Backport: release`` line to tell
  ``Do: merge`` to merge to both.  If a MR is merged without the backport
  line, a maintainer may still merge the MR topic to ``release`` manually.

Maintain Current Release
========================

The ``release`` branch is used to maintain the current release or release
candidate.  The branch is published with no version number but maintained
using a local branch named ``release-$ver``, where ``$ver`` is the version
number of the current release in the form ``$major.$minor``.  It is always
merged into ``master`` before publishing.

To merge an open MR to the ``release`` branch, edit its description to
use the ``Backport: release`` line mentioned above and then ``Do: merge``
normally.  To update the ``release`` branch manually (e.g. to merge a
``$topic`` branch that was merged without the backport line), use the
following procedure.

Before merging a ``$topic`` branch into ``release``, verify that the
``$topic`` branch has already been merged to ``master`` via the usual
``Do: merge`` process.  Then, to merge the ``$topic`` branch into
``release``, start by creating the local branch:

.. code-block:: shell

  git fetch origin
  git checkout -b release-$ver origin/release

Merge the ``$topic`` branch into the local ``release-$ver`` branch, making
sure to include a ``Merge-request: !xxxx`` footer in the commit message:

.. code-block:: shell

  git merge --no-ff $topic

Merge the ``release-$ver`` branch to ``master``:

.. code-block:: shell

  git checkout master
  git pull
  git merge --no-ff release-$ver

Review new ancestry to ensure nothing unexpected was merged to either branch:

.. code-block:: shell

  git log --graph --boundary origin/master..master
  git log --graph --boundary origin/release..release-$ver

Publish both ``master`` and ``release`` simultaneously:

.. code-block:: shell

  git push --atomic origin master release-$ver:release

.. _`CMake Review Process`: review.rst
.. _`CMake CDash Page`: https://open.cdash.org/index.php?project=CMake

Create Release Version
======================

When the ``release`` branch is ready to create a new release, follow the
steps in the above `Maintain Current Release`_ section to checkout a local
``release-$ver`` branch, where ``$ver`` is the version number of the
current release in the form ``$major.$minor``.

Edit ``Source/CMakeVersion.cmake`` to set the full version:

.. code-block:: cmake

  # CMake version number components.
  set(CMake_VERSION_MAJOR $major)
  set(CMake_VERSION_MINOR $minor)
  set(CMake_VERSION_PATCH $patch)
  #set(CMake_VERSION_RC $rc) # uncomment for release candidates

In the following we use the placeholder ``$fullver`` for the full version
number of the new release with the form ``$major.$minor.$patch[-rc$rc]``.
If the version is not a release candidate, comment out the RC version
component above and leave off the ``-rc$rc`` suffix from ``$fullver``.

Commit the release version with the **exact** message ``CMake $fullver``:

.. code-block:: shell

  git commit -m "CMake $fullver"

Tag the release using an annotated tag with the same message as the
commit and named with the **exact** form ``v$fullver``:

.. code-block:: shell

  git tag -s -m "CMake $fullver" "v$fullver"

Follow the steps in the above `Maintain Current Release`_ section to
merge the ``release-$ver`` branch into ``master`` and publish both.

Branch a New Release
====================

This section covers how to start a new ``release`` branch for a major or
minor version bump (patch releases remain on their existing branch).

In the following we use the placeholder ``$ver`` to represent the
version number of the new release with the form ``$major.$minor``,
and ``$prev`` to represent the version number of the prior release.

Review Prior Release
--------------------

Review the history around the prior release branch:

.. code-block:: shell

  git log --graph --boundary \
   ^$(git rev-list --grep="Merge topic 'doc-.*-relnotes'" -n 1 master)~1 \
   $(git rev-list --grep="Begin post-.* development" -n 1 master) \
   $(git tag --list *-rc1| tail -1)

Consolidate Release Notes
-------------------------

Starting from a clean work tree on ``master``, create a topic branch to
use for consolidating the release notes:

.. code-block:: shell

  git checkout -b doc-$ver-relnotes

Run the `consolidate-relnotes.bash`_ script:

.. code-block:: shell

  Utilities/Release/consolidate-relnotes.bash $ver $prev

.. _`consolidate-relnotes.bash`: ../../Utilities/Release/consolidate-relnotes.bash

This moves notes from the ``Help/release/dev/*.rst`` files into a versioned
``Help/release/$ver.rst`` file and updates ``Help/release/index.rst`` to
link to the new document.  Commit the changes with a message such as::

  Help: Consolidate $ver release notes

  Run the `Utilities/Release/consolidate-relnotes.bash` script to move
  notes from `Help/release/dev/*` into `Help/release/$ver.rst`.

Manually edit ``Help/release/$ver.rst`` to add section headers, organize
the notes, and revise wording.  Then commit with a message such as::

  Help: Organize and revise $ver release notes

  Add section headers similar to the $prev release notes and move each
  individual bullet into an appropriate section.  Revise a few bullets.

Update Sphinx ``versionadded`` directives in documents added since
the previous release by running the `update_versions.py`_ script:

.. code-block:: shell

  Utilities/Sphinx/update_versions.py --since v$prev.0 --overwrite

.. _`update_versions.py`: ../../Utilities/Sphinx/update_versions.py

Commit the changes with a message such as::

  Help: Update Sphinx versionadded directives for $ver release

  Run the script:

      Utilities/Sphinx/update_versions.py --since v$prev.0 --overwrite

Open a merge request with the ``doc-$ver-relnotes`` branch for review
and integration.  Further steps may proceed after this has been merged
to ``master``.

Update 'release' Branch
-----------------------

Starting from a clean work tree on ``master``, create a new ``release-$ver``
branch locally:

.. code-block:: shell

  git checkout -b release-$ver origin/master

Remove the development branch release note infrastructure:

.. code-block:: shell

  git rm Help/release/dev/0-sample-topic.rst
  sed -i '/^\.\. include:: dev.txt/ {N;d}' Help/release/index.rst

Commit with a message such as::

  Help: Drop development topic notes to prepare release

  Release versions do not have the development topic section of
  the CMake Release Notes index page.

Update ``Source/CMakeVersion.cmake`` to set the version to
``$major.$minor.0-rc0``:

.. code-block:: cmake

  # CMake version number components.
  set(CMake_VERSION_MAJOR $major)
  set(CMake_VERSION_MINOR $minor)
  set(CMake_VERSION_PATCH 0)
  set(CMake_VERSION_RC 0)

Replace uses of ``DEVEL_CMAKE_VERSION`` in the source tree with
the literal release version number string ``"$major.$minor.0"``:

.. code-block:: shell

  $EDITOR $(git grep -l DEVEL_CMAKE_VERSION)

Commit with a message such as::

  Begin $ver release versioning

Merge the ``release-$ver`` branch to ``master``:

.. code-block:: shell

  git checkout master
  git pull
  git merge --no-ff release-$ver

Begin post-release development by restoring the development branch release
note infrastructure, and the version date from ``origin/master``:

.. code-block:: shell

  git checkout origin/master -- \
    Source/CMakeVersion.cmake Help/release/dev/0-sample-topic.rst
  sed -i $'/^Releases/ i\\\n.. include:: dev.txt\\\n' Help/release/index.rst

Update ``Source/CMakeVersion.cmake`` to set the version to
``$major.$minor.$date``:

.. code-block:: cmake

  # CMake version number components.
  set(CMake_VERSION_MAJOR $major)
  set(CMake_VERSION_MINOR $minor)
  set(CMake_VERSION_PATCH $date)
  #set(CMake_VERSION_RC 0)

Commit with a message such as::

  Begin post-$ver development

Push the update to the ``master`` and ``release`` branches:

.. code-block:: shell

  git push --atomic origin master release-$ver:release

Announce 'release' Branch
-------------------------

Post a topic to the `CMake Discourse Forum Development Category`_
announcing that post-release development is open::

  I've branched `release` for $ver.  The repository is now open for
  post-$ver development.  Please rebase open merge requests on `master`
  before staging or merging.

.. _`CMake Discourse Forum Development Category`: https://discourse.cmake.org/c/development

Initial Post-Release Development
--------------------------------

Deprecate policies more than 8 release series old by updating the
policy range check in ``cmMakefile::SetPolicy``.
Commit with a message such as::

  Add deprecation warnings for policies CMP#### and below

  The OLD behaviors of all policies are deprecated, but only by
  documentation.  Add an explicit deprecation diagnostic for policies
  introduced in CMake $OLDVER and below to encourage projects to port
  away from setting policies to OLD.

Update the ``cmake_policy`` version range generated by ``install(EXPORT)``
in ``cmExportFileGenerator::GeneratePolicyHeaderCode`` and
``install_jar_exports`` in ``javaTargets.cmake.in`` to end at the
previous release.  We use one release back since we now know all the
policies added for that version.  Commit with a message such as::

  export: Increase maximum policy version in exported files to $prev

  The files generated by `install(EXPORT)`, `export()`, and
  `install_jar_exports()` commands are known to work with policies
  as of CMake $prev, so enable them in sufficiently new CMake versions.

Update the ``cmake_minimum_required`` version range in CMake itself:

* ``CMakeLists.txt``
* ``Source/Checks/Curses/CMakeLists.txt``
* ``Utilities/Doxygen/CMakeLists.txt``
* ``Utilities/Sphinx/CMakeLists.txt``

to end in the previous release.  Commit with a message such as::

  Configure CMake itself with policies through CMake $prev



/P/🚀 dev/documentation.rst
========================================


CMake Documentation Guide
*************************

The following is a guide to the CMake documentation source for developers.
See documentation on `CMake Development`_ for more information.

.. _`CMake Development`: README.rst

Help
====

The ``Help`` directory contains CMake help manual source files.
They are written using the `reStructuredText`_ markup syntax and
processed by `Sphinx`_ to generate the CMake help manuals.

.. _`reStructuredText`: https://docutils.sourceforge.net/docs/ref/rst/introduction.html
.. _`Sphinx`: https://sphinx-doc.org

Markup Constructs
-----------------

In addition to using Sphinx to generate the CMake help manuals, we
also use a C++-implemented document processor to print documents for
the ``--help-*`` command-line help options.  It supports a subset of
reStructuredText markup.  When authoring or modifying documents,
please verify that the command-line help looks good in addition to the
Sphinx-generated html and man pages.

The command-line help processor supports the following constructs
defined by reStructuredText, Sphinx, and a CMake extension to Sphinx.

..
 Note: This list must be kept consistent with the cmRST implementation.

CMake Domain directives
 Directives defined in the `CMake Domain`_ for defining CMake
 documentation objects are printed in command-line help output as
 if the lines were normal paragraph text with interpretation.

CMake Domain interpreted text roles
 Interpreted text roles defined in the `CMake Domain`_ for
 cross-referencing CMake documentation objects are replaced by their
 link text in command-line help output.  Other roles are printed
 literally and not processed.

``code-block`` directive
 Add a literal code block without interpretation.  The command-line
 help processor prints the block content without the leading directive
 line and with common indentation replaced by one space.

``include`` directive
 Include another document source file.  The command-line help
 processor prints the included document inline with the referencing
 document.

literal block after ``::``
 A paragraph ending in ``::`` followed by a blank line treats
 the following indented block as literal text without interpretation.
 The command-line help processor prints the ``::`` literally and
 prints the block content with common indentation replaced by one
 space.

``note`` directive
 Call out a side note.  The command-line help processor prints the
 block content as if the lines were normal paragraph text with
 interpretation.

``parsed-literal`` directive
 Add a literal block with markup interpretation.  The command-line
 help processor prints the block content without the leading
 directive line and with common indentation replaced by one space.

``productionlist`` directive
 Render context-free grammar productions.  The command-line help
 processor prints the block content as if the lines were normal
 paragraph text with interpretation.

``replace`` directive
 Define a ``|substitution|`` replacement.
 The command-line help processor requires a substitution replacement
 to be defined before it is referenced.

``|substitution|`` reference
 Reference a substitution replacement previously defined by
 the ``replace`` directive.  The command-line help processor
 performs the substitution and replaces all newlines in the
 replacement text with spaces.

``toctree`` directive
 Include other document sources in the Table-of-Contents
 document tree.  The command-line help processor prints
 the referenced documents inline as part of the referencing
 document.

``versionadded``, ``versionchanged`` directives
 Specify that something was added or changed by a named CMake version.
 The command-line help processor prints the block content as if the lines
 were normal paragraph text with interpretation.

Inline markup constructs not listed above are printed literally in the
command-line help output.  We prefer to use inline markup constructs that
look correct in source form, so avoid use of \\-escapes in favor of inline
literals when possible.

Explicit markup blocks not matching directives listed above are removed from
command-line help output.  Do not use them, except for plain ``..`` comments
that are removed by Sphinx too.

Note that nested indentation of blocks is not recognized by the
command-line help processor.  Therefore:

* Explicit markup blocks are recognized only when not indented
  inside other blocks.

* Literal blocks after paragraphs ending in ``::`` but not
  at the top indentation level may consume all indented lines
  following them.

Try to avoid these cases in practice.

CMake Domain
------------

CMake adds a `Sphinx Domain`_ called ``cmake``, also called the
"CMake Domain".  It defines several "object" types for CMake
documentation:

``command``
 A CMake language command.

``cpack_gen``
 A CPack package generator.
 See the `cpack(1)`_ command-line tool's ``-G`` option.

``envvar``
 An environment variable.
 See the `cmake-env-variables(7)`_ manual
 and the `set()`_ command.

``generator``
 A CMake native build system generator.
 See the `cmake(1)`_ command-line tool's ``-G`` option.

``genex``
 A CMake generator expression.
 See the `cmake-generator-expressions(7)`_ manual.

``manual``
 A CMake manual page, like the `cmake(1)`_ manual.

``module``
 A CMake module.
 See the `cmake-modules(7)`_ manual
 and the `include()`_ command.

``policy``
 A CMake policy.
 See the `cmake-policies(7)`_ manual
 and the `cmake_policy()`_ command.

``prop_cache, prop_dir, prop_gbl, prop_sf, prop_inst, prop_test, prop_tgt``
 A CMake cache, directory, global, source file, installed file, test,
 or target property, respectively.  See the `cmake-properties(7)`_
 manual and the `set_property()`_ command.

``variable``
 A CMake language variable.
 See the `cmake-variables(7)`_ manual
 and the `set()`_ command.

Documentation objects in the CMake Domain come from two sources:

1. The CMake extension to Sphinx transforms every document named
   with the form ``Help/<type>/<file-name>.rst`` to a domain object with
   type ``<type>``.  The object name is extracted from the document title,
   which is expected to be of the form::

    <object-name>
    -------------

   and to appear at or near the top of the ``.rst`` file before any other lines
   starting in a letter, digit, ``<``, or ``$``.  If no such title appears
   literally in the ``.rst`` file, the object name is the ``<file-name>``.
   If a title does appear, it is expected that ``<file-name>`` is equal
   to ``<object-name>`` with any ``<`` and ``>`` characters removed,
   or in the case of a ``$<genex-name>`` or ``$<genex-name:...>``, the
   ``genex-name``.

2. `CMake Domain directives`_ may be used in documents to explicitly define
   some object types:

   * `command directive`_
   * `envvar directive`_
   * `genex directive`_
   * `variable directive`_

   Object types for which no directive is available must be defined using
   the document transform above.

CMake Domain Directives
-----------------------

The CMake Domain provides the following directives.

``command`` directive
^^^^^^^^^^^^^^^^^^^^^

Document a "command" object:

.. code-block:: rst

  .. command:: <command-name>

    This indented block documents <command-name>.

The directive requires a single argument, the command name.

``envvar`` directive
^^^^^^^^^^^^^^^^^^^^

Document an "envvar" object:

.. code-block:: rst

  .. envvar:: <envvar-name>

    This indented block documents <envvar-name>.

The directive requires a single argument, the environment variable name.

``genex`` directive
^^^^^^^^^^^^^^^^^^^

Document a "genex" object:

.. code-block:: rst

 .. genex:: <genex-name>

  This indented block documents <genex-name>.

The directive requires a single argument, the generator expression name.

The optional ``:target:`` option allows a custom target name to be specified.
Because this will affect the ability to reference the "genex" object using the
``:genex:`` role, this option should be used very sparingly.

``signature`` directive
^^^^^^^^^^^^^^^^^^^^^^^

Document `CMake Command Signatures <Style: CMake Command Signatures_>`_
within a ``Help/command/<command-name>.rst`` document.

.. code-block:: rst

  .. signature:: <command-name>(<signature>)

    This indented block documents one or more signatures of a CMake command.

The ``signature`` directive requires one argument, the signature summary:

* One or more signatures must immediately follow the ``::``.
  The first signature may optionally be placed on the same line.
  A blank line following the ``signature`` directive will result in a
  documentation generation error: ``1 argument(s) required, 0 supplied``.

* Signatures may be split across multiple lines, but the final ``)`` of each
  signature must be the last character on its line.

* Blank lines between signatures are not allowed.  (Content after a blank line
  is treated as part of the description.)

* Whitespace in signatures is not preserved.  To document a complex signature,
  abbreviate it in the ``signature`` directive argument and specify the full
  signature in a ``code-block`` in the description.

The ``signature`` directive generates a hyperlink target for each signature:

* Default target names are automatically extracted from leading "keyword"
  arguments in the signatures, where a keyword is any sequence of
  non-space starting with a letter.  For example, the signature
  ``string(REGEX REPLACE <match-regex> ...)`` generates the target
  ``REGEX REPLACE``, similar to ``.. _`REGEX REPLACE`:``.

* Custom target names may be specified using a ``:target:`` option.
  For example:

  .. code-block:: rst

    .. signature::
      cmake_path(GET <path-var> ROOT_NAME <out-var>)
      cmake_path(GET <path-var> ROOT_PATH <out-var>)
      :target:
        GET ROOT_NAME
        GET ROOT_PATH

  Provide a custom target name for each signature, one per line.
  The first target may optionally be placed on the same line as ``:target:``.

* If a target name is already in use earlier in the document, no hyperlink
  target will be generated.

* The targets may be referenced from within the same document using
  ```REF`_`` or ```TEXT <REF_>`_`` syntax.  Like reStructuredText section
  headers, the targets do not work with Sphinx ``:ref:`` syntax, however
  they can be globally referenced using e.g. ``:command:`string(APPEND)```.

Although whitespace in the signature is not preserved, by default, line breaks
are suppressed inside of square- or angle-brackets.  This behavior can be
controlled using the ``:break:`` option; note, however, that there is no way
to *force* a line break.  The default value is 'smart'.  Allowable values are:

  ``all``
    Allow line breaks at any whitespace.

  ``smart`` (default)
    Allow line breaks at whitespace, except between matched square- or
    angle-brackets.  For example, if a signature contains the text
    ``<input>... [OUTPUT_VARIABLE <out-var>]``, a line break would be allowed
    after ``<input>...`` but not between ``OUTPUT_VARIABLE`` and ``<out-var>``.

  ``verbatim``
    Allow line breaks only where the source document contains a newline.

The directive treats its content as the documentation of the signature(s).
Indent the signature documentation accordingly.

``variable`` directive
^^^^^^^^^^^^^^^^^^^^^^

Document a "variable" object:

.. code-block:: rst

 .. variable:: <variable-name>

  This indented block documents <variable-name>.

The directive requires a single argument, the variable name.

.. _`Sphinx Domain`: https://sphinx-doc.org/domains.html
.. _`cmake(1)`: https://cmake.org/cmake/help/latest/manual/cmake.1.html
.. _`cmake-env-variables(7)`: https://cmake.org/cmake/help/latest/manual/cmake-env-variables.7.html
.. _`cmake-generator-expressions(7)`: https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html
.. _`cmake-modules(7)`: https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html
.. _`cmake-policies(7)`: https://cmake.org/cmake/help/latest/manual/cmake-policies.7.html
.. _`cmake-properties(7)`: https://cmake.org/cmake/help/latest/manual/cmake-properties.7.html
.. _`cmake-variables(7)`: https://cmake.org/cmake/help/latest/manual/cmake-variables.7.html
.. _`cmake_policy()`: https://cmake.org/cmake/help/latest/command/cmake_policy.html
.. _`cpack(1)`: https://cmake.org/cmake/help/latest/manual/cpack.1.html
.. _`include()`: https://cmake.org/cmake/help/latest/command/include.html
.. _`set()`: https://cmake.org/cmake/help/latest/command/set.html
.. _`set_property()`: https://cmake.org/cmake/help/latest/command/set_property.html

Cross-References
----------------

Sphinx uses reStructuredText interpreted text roles to provide
cross-reference syntax.  The `CMake Domain`_ provides for each
domain object type a role of the same name to cross-reference it.
CMake Domain roles are inline markup of the forms::

 :type:`name`
 :type:`text <name>`

where ``type`` is the domain object type and ``name`` is the
domain object name.  In the first form the link text will be
``name`` (or ``name()`` if the type is ``command``) and in
the second form the link text will be the explicit ``text``.
For example, the code:

.. code-block:: rst

 * The :command:`list` command.
 * The :command:`list(APPEND)` sub-command.
 * The :command:`list() command <list>`.
 * The :command:`list(APPEND) sub-command <list>`.
 * The :variable:`CMAKE_VERSION` variable.
 * The :prop_tgt:`OUTPUT_NAME_<CONFIG>` target property.

produces:

* The `list()`_ command.
* The `list(APPEND)`_ sub-command.
* The `list() command`_.
* The `list(APPEND) sub-command`_.
* The `CMAKE_VERSION`_ variable.
* The `OUTPUT_NAME_<CONFIG>`_ target property.

Note that CMake Domain roles differ from Sphinx and reStructuredText
convention in that the form ``a<b>``, without a space preceding ``<``,
is interpreted as a name instead of link text with an explicit target.
This is necessary because we use ``<placeholders>`` frequently in
object names like ``OUTPUT_NAME_<CONFIG>``.  The form ``a <b>``,
with a space preceding ``<``, is still interpreted as a link text
with an explicit target.

Additionally, the ``cref`` role may be used to create references
to local targets that have literal styling.  This is especially
useful for referencing a subcommand in the command's documentation.

.. _`list()`: https://cmake.org/cmake/help/latest/command/list.html
.. _`list(APPEND)`: https://cmake.org/cmake/help/latest/command/list.html
.. _`list(APPEND) sub-command`: https://cmake.org/cmake/help/latest/command/list.html
.. _`list() command`: https://cmake.org/cmake/help/latest/command/list.html
.. _`CMAKE_VERSION`: https://cmake.org/cmake/help/latest/variable/CMAKE_VERSION.html
.. _`OUTPUT_NAME_<CONFIG>`: https://cmake.org/cmake/help/latest/prop_tgt/OUTPUT_NAME_CONFIG.html

Style
-----

Style: Section Headers
^^^^^^^^^^^^^^^^^^^^^^

When marking section titles, make the section decoration line as long as
the title text.  Use only a line below the title, not above. For
example:

.. code-block:: rst

  Title Text
  ----------

Capitalize the first letter of each non-minor word in the title.

The section header underline character hierarchy is

* ``#``: Manual group (part) in the master document
* ``*``: Manual (chapter) title
* ``=``: Section within a manual
* ``-``: Subsection or `CMake Domain`_ object document title
* ``^``: Subsubsection or `CMake Domain`_ object document section
* ``"``: Paragraph or `CMake Domain`_ object document subsection
* ``~``: `CMake Domain`_ object document subsubsection

Style: Whitespace
^^^^^^^^^^^^^^^^^

Use two spaces for indentation.  Use two spaces between sentences in
prose.

Style: Line Length
^^^^^^^^^^^^^^^^^^

Prefer to restrict the width of lines to 75-80 columns.  This is not a
hard restriction, but writing new paragraphs wrapped at 75 columns
allows space for adding minor content without significant re-wrapping of
content.

Style: Prose
^^^^^^^^^^^^

Use American English spellings in prose.

Style: Starting Literal Blocks
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Prefer to mark the start of literal blocks with ``::`` at the end of
the preceding paragraph. In cases where the following block gets
a ``code-block`` marker, put a single ``:`` at the end of the preceding
paragraph.

Style: CMake Command Signatures
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A ``Help/command/<command-name>.rst`` document defines one ``command``
object in the `CMake Domain`_, but some commands have multiple signatures.
Use the CMake Domain's `signature directive`_ to document each signature.
Separate signatures from preceding content by a section header.
For example:

.. code-block:: rst

  ... preceding paragraph.

  Normal Libraries
  ^^^^^^^^^^^^^^^^

  .. signature::
    add_library(<lib> ...)

    This signature is used for ...

Use the following conventions in command signature documentation:

* Use an angle-bracket ``<placeholder>`` for arguments to be specified
  by the caller.  Refer to them in prose using
  `inline literal <Style: Inline Literals_>`_ syntax.

* Wrap optional parts with square brackets.

* Mark repeatable parts with a trailing ellipsis (``...``).

The ``signature`` directive may be used multiple times for different
signatures of the same command.

Style: Boolean Constants
^^^^^^^^^^^^^^^^^^^^^^^^

Use "``OFF``" and "``ON``" for boolean values which can be modified by
the user, such as ``POSITION_INDEPENDENT_CODE``.  Such properties
may be "enabled" and "disabled". Use "``True``" and "``False``" for
inherent values which can't be modified after being set, such as the
``IMPORTED`` property of a build target.

Style: Inline Literals
^^^^^^^^^^^^^^^^^^^^^^

Mark up references to keywords in signatures, file names, and other
technical terms with ``inline-literal`` syntax, for example:

.. code-block:: rst

  If ``WIN32`` is used with :command:`add_executable`, the
  :prop_tgt:`WIN32_EXECUTABLE` target property is enabled. That command
  creates the file ``<name>.exe`` on Windows.

Style: Cross-References
^^^^^^^^^^^^^^^^^^^^^^^

Mark up linkable references as links, including repeats.
An alternative, which is used by wikipedia
(`<https://en.wikipedia.org/wiki/WP:REPEATLINK>`_),
is to link to a reference only once per article. That style is not used
in CMake documentation.

Style: Referencing CMake Concepts
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If referring to a concept which corresponds to a property, and that
concept is described in a high-level manual, prefer to link to the
manual section instead of the property. For example:

.. code-block:: rst

  This command creates an :ref:`Imported Target <Imported Targets>`.

instead of:

.. code-block:: rst

  This command creates an :prop_tgt:`IMPORTED` target.

The latter should be used only when referring specifically to the
property.

References to manual sections are not automatically created by creating
a section, but code such as:

.. code-block:: rst

  .. _`Imported Targets`:

creates a suitable anchor.  Use an anchor name which matches the name
of the corresponding section.  Refer to the anchor using a
cross-reference with specified text.

Imported Targets need the ``IMPORTED`` term marked up with care in
particular because the term may refer to a command keyword, a target
property, or a concept.

Where a property, command or variable is related conceptually to others,
by for example, being related to the buildsystem description, generator
expressions or Qt, each relevant property, command or variable should
link to the primary manual, which provides high-level information.  Only
particular information relating to the command should be in the
documentation of the command.

Style: Referencing CMake Domain Objects
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When referring to `CMake Domain`_ objects such as properties, variables,
commands etc, prefer to link to the target object and follow that with
the type of object it is.  For example:

.. code-block:: rst

  Set the :prop_tgt:`AUTOMOC` target property to ``ON``.

Instead of

.. code-block:: rst

  Set the target property :prop_tgt:`AUTOMOC` to ``ON``.

The ``policy`` directive is an exception, and the type us usually
referred to before the link:

.. code-block:: rst

  If policy :policy:`CMP0022` is set to ``NEW`` the behavior is ...

However, markup self-references with ``inline-literal`` syntax.
For example, within the ``add_executable`` command documentation, use

.. code-block:: rst

  ``add_executable``

not

.. code-block:: rst

  :command:`add_executable`

which is used elsewhere.

Modules
=======

The ``Modules`` directory contains CMake-language ``.cmake`` module files.

Module Documentation
--------------------

To document CMake module ``Modules/<module-name>.cmake``, modify
``Help/manual/cmake-modules.7.rst`` to reference the module in the
``toctree`` directive, in sorted order, as::

 /module/<module-name>

Then add the module document file ``Help/module/<module-name>.rst``
containing just the line::

 .. cmake-module:: ../../Modules/<module-name>.cmake

The ``cmake-module`` directive will scan the module file to extract
reStructuredText markup from comment blocks that start in ``.rst:``.
At the top of ``Modules/<module-name>.cmake``, begin with the following
license notice:

::

 # Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
 # file Copyright.txt or https://cmake.org/licensing for details.

After this notice, add a *BLANK* line.  Then, add documentation using
a `Bracket Comment`_ of the form:

::

  #[=======================================================================[.rst:
  <module-name>
  -------------

  <reStructuredText documentation of module>
  #]=======================================================================]

Any number of ``=`` may be used in the opening and closing brackets
as long as they match.  Content on the line containing the closing
bracket is excluded if and only if the line starts in ``#``.

Additional such ``.rst:`` comments may appear anywhere in the module file.
All such comments must start with ``#`` in the first column.

For example, a ``FindXxx.cmake`` module may contain:

::

  # Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
  # file Copyright.txt or https://cmake.org/licensing for details.

  #[=======================================================================[.rst:
  FindXxx
  -------

  This is a cool module.
  This module does really cool stuff.
  It can do even more than you think.

  It even needs two paragraphs to tell you about it.
  And it defines the following variables:

  ``VAR_COOL``
    this is great isn't it?
  ``VAR_REALLY_COOL``
    cool right?
  #]=======================================================================]

  <code>

  #[=======================================================================[.rst:
  .. command:: Xxx_do_something

   This command does something for Xxx::

    Xxx_do_something(some arguments)
  #]=======================================================================]
  macro(Xxx_do_something)
    <code>
  endmacro()

Test the documentation formatting by running
``cmake --help-module <module-name>``, and also by enabling the
``SPHINX_HTML`` and ``SPHINX_MAN`` options to build the documentation.
Edit the comments until generated documentation looks satisfactory.  To
have a .cmake file in this directory NOT show up in the modules
documentation, simply leave out the ``Help/module/<module-name>.rst``
file and the ``Help/manual/cmake-modules.7.rst`` toctree entry.

.. _`Bracket Comment`: https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#bracket-comment

Module Functions and Macros
---------------------------

Modules may provide CMake functions and macros defined by the `function()`_
and `macro()`_ commands.  To avoid conflicts across modules, name the
functions and macros using the prefix ``<ModuleName>_`` followed by the
rest of the name, where ``<ModuleName>`` is the exact-case spelling of
the module name.  We have no convention for the portion of names after
the ``<ModuleName>_`` prefix.

For historical reasons, some modules that come with CMake do not follow
this prefix convention.  When adding new functions to these modules,
discussion during review can decide whether to follow their existing
convention or to use the module name prefix.

Documentation of public functions and macros should be provided in
the module, typically in the main `module documentation`_ at the top.
For example, a ``MyModule`` module may document a function like this::

  #[=======================================================================[.rst:
  MyModule
  --------

  This is my module.  It provides some functions.

  .. command:: MyModule_Some_Function

    This is some function:

    .. code-block:: cmake

      MyModule_Some_Function(...)
  #]=======================================================================]

Documentation may alternatively be placed just before each definition.
For example, a ``MyModule`` module may document another function like this::

  #[=======================================================================[.rst:
  .. command:: MyModule_Other_Function

    This is another function:

    .. code-block:: cmake

      MyModule_Other_Function(...)
  #]=======================================================================]
  function(MyModule_Other_Function ...)
    # ...
  endfunction()

.. _`function()`: https://cmake.org/cmake/help/latest/command/function.html
.. _`macro()`: https://cmake.org/cmake/help/latest/command/macro.html



/P/🚀 dev/experimental.rst
=======================================


CMake Experimental Features Guide
*********************************

The following is a guide to CMake experimental features that are
under development and not yet included in official documentation.
See documentation on `CMake Development`_ for more information.

.. _`CMake Development`: README.rst

Features are gated behind ``CMAKE_EXPERIMENTAL_`` variables which must be set
to specific values in order to enable their gated behaviors. Note that the
specific values will change over time to reinforce their experimental nature.
When used, a warning will be generated to indicate that an experimental
feature is in use and that the affected behavior in the project is not part of
CMake's stability guarantees.

Export Package Dependencies
===========================

In order to activate support for this experimental feature, set

* variable ``CMAKE_EXPERIMENTAL_EXPORT_PACKAGE_DEPENDENCIES`` to
* value ``1942b4fa-b2c5-4546-9385-83f254070067``.

This UUID may change in future versions of CMake.  Be sure to use the value
documented here by the source tree of the version of CMake with which you are
experimenting.

When activated, this experimental feature provides the following:

* The ``install(EXPORT)`` and ``export(EXPORT)`` commands have experimental
  ``EXPORT_PACKAGE_DEPENDENCIES`` arguments to generate ``find_dependency``
  calls automatically.

* Details of the calls may be configured using the ``export(SETUP)``
  command's ``PACKAGE_DEPENDENCY`` argument.

* The package name associated with specific targets may be specified
  using the ``CMAKE_EXPORT_FIND_PACKAGE_NAME`` variable and/or
``EXPORT_FIND_PACKAGE_NAME`` target property.



/P/🚀 dev/review.rst
=================================


CMake Review Process
********************

The following documents the process for reviewing and integrating changes.
See `CONTRIBUTING.rst`_ for instructions to contribute changes.
See documentation on `CMake Development`_ for more information.

.. _`CONTRIBUTING.rst`: ../../CONTRIBUTING.rst
.. _`CMake Development`: README.rst

.. contents:: The review process consists of the following steps:

Merge Request
=============

A user initiates the review process for a change by pushing a *topic
branch* to his or her own fork of the `CMake Repository`_ on GitLab and
creating a *merge request* ("MR").  The new MR will appear on the
`CMake Merge Requests Page`_.  The rest of the review and integration
process is managed by the merge request page for the change.

During the review process, the MR submitter should address review comments
or test failures by updating their local topic branch to fix their commits
(e.g. via ``git commit --amend`` or ``git rebase -i``), and then issuing a
(force-)push of the topic branch to their remote (e.g. ``git push --force``).
This will automatically initiate a new round of review on the existing MR.

We recommend that users enable the "Remove source branch when merge
request is accepted" option when creating the MR or by editing it.
This will cause the MR topic branch to be automatically removed from
the user's fork during the `Merge`_ step.

.. _`CMake Merge Requests Page`: https://gitlab.kitware.com/cmake/cmake/-/merge_requests
.. _`CMake Repository`: https://gitlab.kitware.com/cmake/cmake

Workflow Status
---------------

`CMake GitLab Project Developers`_ may set one of the following labels
in GitLab to track the state of a MR:

* ``workflow:wip`` indicates that the MR needs additional updates from
  the MR submitter before further review.  Use this label after making
  comments that require such updates.

* ``workflow:in-review`` indicates that the MR awaits feedback from a
  human reviewer or from `Topic Testing`_.  Use this label after making
  comments requesting such feedback.

* ``workflow:nightly-testing`` indicates that the MR awaits results
  of `Integration Testing`_.  Use this label after making comments
  requesting such staging.

* ``workflow:expired`` indicates that the MR has been closed due
  to a period of inactivity.  See the `Expire`_ step.  Use this label
  after closing a MR for this reason.

* ``workflow:external-discussion`` indicates that the MR has been closed
  pending discussion elsewhere.  See the `External Discussion`_ step.
  Use this label after closing a MR for this reason.

The workflow status labels are intended to be mutually exclusive,
so please remove any existing workflow label when adding one.

.. _`CMake GitLab Project Developers`: https://gitlab.kitware.com/cmake/cmake/-/settings/members

Robot Review
============

The "Kitware Robot" (``@kwrobot``) automatically performs basic checks on
the commits proposed in a MR.  If all is well the robot silently reports
a successful "build" status to GitLab.  Otherwise the robot posts a comment
with its diagnostics.  **A topic may not be merged until the automatic
review succeeds.**

Note that the MR submitter is expected to address the robot's comments by
*rewriting* the commits named by the robot's diagnostics (e.g., via
``git rebase -i``). This is because the robot checks each commit individually,
not the topic as a whole. This is done in order to ensure that commits in the
middle of a topic do not, for example, add a giant file which is then later
removed in the topic.

Automatic Check
---------------

The automatic check is repeated whenever the topic branch is updated.
One may explicitly request a re-check by adding a comment with the
following command among the `comment trailing lines`_::

  Do: check

``@kwrobot`` will add an award emoji to the comment to indicate that it
was processed and also run its checks again.

Automatic Format
----------------

The automatic check will reject commits introducing source code not
formatted according to ``clang-format``.  One may ask the robot to
automatically rewrite the MR topic branch with expected formatting
by adding a comment with the following command among the
`comment trailing lines`_::

  Do: reformat

``@kwrobot`` will add an award emoji to the comment to indicate that it
was processed and also rewrite the MR topic branch and force-push an
updated version with every commit formatted as expected by the check.

Human Review
============

Anyone is welcome to review merge requests and make comments!

Please make comments directly on the MR page Discussion and Changes tabs
and not on individual commits.  Comments on a commit may disappear
from the MR page if the commit is rewritten in response.

Reviewers may add comments providing feedback or to acknowledge their
approval.  Lines of specific forms will be extracted during the `merge`_
step and included as trailing lines of the generated merge commit message.
Each review comment consists of up to two parts which must be specified
in the following order: `comment body`_, then `comment trailing lines`_.
Each part is optional, but they must be specified in this order.

Comment Body
------------

The body of a comment may be free-form `GitLab Flavored Markdown`_.
See GitLab documentation on `Special GitLab References`_ to add links to
things like issues, commits, or other merge requests (even across projects).

Additionally, a line in the comment body may start with one of the
following votes:

* ``-1`` or ``:-1:`` indicates "the change is not ready for integration".

* ``+1`` or ``:+1:`` indicates "I like the change".
  This adds an ``Acked-by:`` trailer to the `merge`_ commit message.

* ``+2`` indicates "the change is ready for integration".
  This adds a ``Reviewed-by:`` trailer to the `merge`_ commit message.

* ``+3`` indicates "I have tested the change and verified it works".
  This adds a ``Tested-by:`` trailer to the `merge`_ commit message.

.. _`GitLab Flavored Markdown`: https://gitlab.kitware.com/help/user/markdown.md
.. _`Special GitLab References`: https://gitlab.kitware.com/help/user/markdown.md#special-gitlab-references

Comment Trailing Lines
----------------------

Zero or more *trailing* lines in the last section of a comment may appear
with the form ``Key: Value``.  The first such line should be separated
from a preceding `comment body`_ by a blank line.  Any key-value pair(s)
may be specified for human reference.  A few specific keys have meaning to
``@kwrobot`` as follows.

Comment Trailer Votes
^^^^^^^^^^^^^^^^^^^^^

Among the `comment trailing lines`_ one may cast a vote using one of the
following pairs followed by nothing but whitespace before the end of the line:

* ``Rejected-by: me`` indicates "the change is not ready for integration".
* ``Acked-by: me`` indicates "I like the change".
  This adds an ``Acked-by:`` trailer to the `merge`_ commit message.
* ``Reviewed-by: me`` indicates "the change is ready for integration".
  This adds a ``Reviewed-by:`` trailer to the `merge`_ commit message.
* ``Tested-by: me`` indicates "I have tested the change and verified it works".
  This adds a ``Tested-by:`` trailer to the `merge`_ commit message.

Each ``me`` reference may instead be an ``@username`` reference or a full
``Real Name <user@domain>`` reference to credit someone else for performing
the review.  References to ``me`` and ``@username`` will automatically be
transformed into a real name and email address according to the user's
GitLab account profile.

Comment Trailer Commands
^^^^^^^^^^^^^^^^^^^^^^^^

Among the `comment trailing lines`_ authorized users may issue special
commands to ``@kwrobot`` using the form ``Do: ...``:

* ``Do: check`` explicitly re-runs the robot `Automatic Check`_.
* ``Do: reformat`` rewrites the MR topic for `Automatic Format`_.
* ``Do: test`` submits the MR for `Topic Testing`_.
* ``Do: stage`` submits the MR for `Integration Testing`_.
* ``Do: merge`` submits the MR for `Merge`_.

See the corresponding sections for details on permissions and options
for each command.

Commit Messages
---------------

Part of the human review is to check that each commit message is appropriate.
The first line of the message should begin with one or two words indicating the
area the commit applies to, followed by a colon and then a brief summary.
Committers should aim to keep this first line short. Any subsequent lines
should be separated from the first by a blank line and provide relevant, useful
information.

Area Prefix on Commit Messages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The appropriateness of the initial word describing the area the commit applies
to is not something the automatic robot review can judge, so it is up to the
human reviewer to confirm that the area is specified and that it is
appropriate. Good area words include the module name the commit is primarily
fixing, the main C++ source file being edited, ``Help`` for generic
documentation changes or a feature or functionality theme the changes apply to
(e.g. ``server`` or ``Autogen``). Examples of suitable first lines of a commit
message include:

* ``Help: Fix example in cmake-buildsystem(7) manual``
* ``FindBoost: Add support for 1.64``
* ``Autogen: Extended mocInclude tests``
* ``cmLocalGenerator: Explain standard flag selection logic in comments``

Referencing Issues in Commit Messages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If the commit fixes a particular reported issue, this information should
ideally also be part of the commit message. The recommended way to do this is
to place a line at the end of the message in the form ``Fixes: #xxxxx`` where
``xxxxx`` is the GitLab issue number and to separate it from the rest of the
text by a blank line. For example::

  Help: Fix FooBar example robustness issue

  FooBar supports option X, but the example provided
  would not work if Y was also specified.

  Fixes: #12345

GitLab will automatically create relevant links to the merge request and will
close the issue when the commit is merged into master. GitLab understands a few
other synonyms for ``Fixes`` and allows much more flexible forms than the
above, but committers should aim for this format for consistency. Note that
such details can alternatively be specified in the merge request description.

Referencing Commits in Commit Messages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The preferred form for references to other commits is
``commit <shorthash> (<subject>, <date>)``, where:

* ``<shorthash>``:
  The abbreviated hash of the commit.

* ``<subject>``:
  The first line of the commit message.

* ``<date>``:
  The author date of the commit, in its original time zone, formatted as
  ``CCYY-MM-DD``.  ``git-log(1)`` shows the original time zone by default.

This may be generated with ``git show -s --pretty=reference <commit>`` with
Git 2.25 and newer. Older versions of Git can generate the same format via
``git show -s --date=short --pretty="format:%h (%s, %ad)" <commit>``.

If the commit is a fix for the mentioned commit, consider using a ``Fixes:``
trailer in the commit message with the specified format. This trailer should
not be word-wrapped. Note that if there is also an issue for what is being
fixed, it is preferable to link to the issue instead.

If relevant, add the first release tag of CMake containing the commit after
the ``<date>``, i.e., ``commit <shorthash> (<subject>, <date>, <tag>)``.
Or, use the output of ``git describe --contains <commit>`` as the ``<tag>``.

Alternatively, the full commit ``<hash>`` may be used.

Revising Commit Messages
^^^^^^^^^^^^^^^^^^^^^^^^

Reviewers are encouraged to ask the committer to amend commit messages to
follow these guidelines, but prefer to focus on the changes themselves as a
first priority. Maintainers will also make a check of commit messages before
merging.

Topic Testing
=============

CMake uses `GitLab CI`_ to test merge requests, configured by the top-level
``.gitlab-ci.yml`` file.  Results may be seen both on the merge request's
pipeline page and on the `CMake CDash Page`_.  Filtered CDash results
showing just the pipeline's jobs can be reached by selecting the ``cdash``
job in the ``External`` stage of the pipeline.

Lint and documentation build jobs run automatically after every push.
Heavier jobs require a manual trigger to run:

* Merge request authors may visit their merge request's pipeline and click the
  "Play" button on one or more jobs manually.  If the merge request has the
  "Allow commits from members who can merge to the target branch" check box
  enabled, CMake maintainers may use the "Play" button too.

* `CMake GitLab Project Developers`_ may trigger CI on a merge request by
  adding a comment with a command among the `comment trailing lines`_::

    Do: test

  ``@kwrobot`` will add an award emoji to the comment to indicate that it
  was processed and also trigger all manual jobs in the merge request's
  pipeline.

  The ``Do: test`` command accepts the following arguments:

  * ``--named <regex>``, ``-n <regex>``: Trigger jobs matching ``<regex>``
    anywhere in their name.  Job names may be seen on the merge request's
    pipeline page.
  * ``--stage <stage>``, ``-s <stage>``: Only affect jobs in a given stage.
    Stage names may be seen on the merge request's pipeline page.  Note that
    the names are determined by what is in the ``.gitlab-ci.yml`` file and may
    be capitalized in the web page, so lowercasing the webpage's display name
    for stages may be required.
  * ``--action <action>``, ``-a <action>``: The action to perform on the jobs.
    Possible actions:

    * ``manual`` (the default): Start jobs awaiting manual interaction.
    * ``unsuccessful``: Start or restart jobs which have not completed
      successfully.
    * ``failed``: Restart jobs which have completed, but without success.
    * ``completed``: Restart all completed jobs.


In order to keep job names shorter and keep as much information visible on the
GitLab web interface as possible, jobs have a short prefix which indicates
what its main purpose is:

  * ``b:`` jobs build CMake for the purposes of running the
    test suite.
  * ``l:`` jobs perform "linting" on the CMake source tree such as static
    analysis.
  * ``p:`` jobs perform preparatory tasks for use in other jobs.
  * ``t:`` jobs perform testing of CMake.
  * ``u:`` jobs upload other job results to permanent locations.

If the merge request topic branch is updated by a push, a new manual trigger
using one of the above methods is needed to start CI again.

.. _`GitLab CI`: https://gitlab.kitware.com/help/ci/README.md
.. _`CMake CDash Page`: https://open.cdash.org/index.php?project=CMake

Integration Testing
===================

The above `topic testing`_ tests the MR topic independent of other
merge requests and on only a few key platforms and configurations.
The `CMake Testing Process`_ also has a large number of machines
provided by Kitware and generous volunteers that cover nearly all
supported platforms, generators, and configurations.  In order to
avoid overwhelming these resources, they do not test every MR
individually.  Instead, these machines follow an *integration branch*,
run tests on a nightly basis (or continuously during the day), and
post to the `CMake CDash Page`_.  Some follow ``master``.  Most follow
a special integration branch, the *topic stage*.

The topic stage is a special branch maintained by the "Kitware Robot"
(``@kwrobot``).  It consists of the head of the MR target integration
branch (e.g. ``master``) branch followed by a sequence of merges each
integrating changes from an open MR that has been staged for integration
testing.  Each time the target integration branch is updated the stage
is rebuilt automatically by merging the staged MR topics again.
The branch is stored in the upstream repository by special refs:

* ``refs/stage/master/head``: The current topic stage branch.
  This is used by continuous builds that report to CDash.
* ``refs/stage/master/nightly/latest``: Topic stage as of 1am UTC each night.
  This is used by most nightly builds that report to CDash.
* ``refs/stage/master/nightly/<yyyy>/<mm>/<dd>``: Topic stage as of 1am UTC
  on the date specified. This is used for historical reference.

`CMake GitLab Project Developers`_ may stage a MR for integration testing
by adding a comment with a command among the `comment trailing lines`_::

  Do: stage

``@kwrobot`` will add an award emoji to the comment to indicate that it
was processed and also attempt to add the MR topic branch to the topic
stage.  If the MR cannot be added (e.g. due to conflicts) the robot will
post a comment explaining what went wrong.

Once a MR has been added to the topic stage it will remain on the stage
until one of the following occurs:

* The MR topic branch is updated by a push.

* The MR target integration branch (e.g. ``master``) branch is updated
  and the MR cannot be merged into the topic stage again due to conflicts.

* A developer or the submitter posts an explicit ``Do: unstage`` command.
  This is useful to remove a MR from the topic stage when one is not ready
  to push an update to the MR topic branch.  It is unnecessary to explicitly
  unstage just before or after pushing an update because the push will cause
  the MR to be unstaged automatically.

* The MR is closed.

* The MR is merged.

Once a MR has been removed from the topic stage a new ``Do: stage``
command is needed to stage it again.

.. _`CMake Testing Process`: testing.rst

Resolve
=======

The workflow used by the CMake project supports a number of different
ways in which a MR can be moved to a resolved state.  In addition to
the conventional practices of merging or closing a MR without merging it,
a MR can also be moved to a quasi-resolved state pending some action.
This may involve moving discussion to an issue or it may be the result of
an extended period of inactivity.  These quasi-resolved states are used
to help manage the relatively large number of MRs the project receives
and are not an indication of the changes being rejected.  The following
sections explain the different resolutions a MR may be given.

Merge
-----

Once review has concluded that the MR topic is ready for integration,
`CMake GitLab Project Masters`_ may merge the topic by adding a comment
with a command among the `comment trailing lines`_::

  Do: merge

``@kwrobot`` will add an award emoji to the comment to indicate that it
was processed and also attempt to merge the MR topic branch to the MR
target integration branch (e.g. ``master``).  If the MR cannot be merged
(e.g. due to conflicts) the robot will post a comment explaining what
went wrong.  If the MR is merged the robot will also remove the source
branch from the user's fork if the corresponding MR option was checked.

The robot automatically constructs a merge commit message of the following
form::

  Merge topic 'mr-topic-branch-name'

  00000000 commit message subject line (one line per commit)

  Acked-by: Kitware Robot <kwrobot@kitware.com>
  Merge-request: !0000

Mention of the commit short sha1s and MR number helps GitLab link the
commits back to the merge request and indicates when they were merged.
The ``Acked-by:`` trailer shown indicates that `Robot Review`_ passed.
Additional ``Acked-by:``, ``Reviewed-by:``, and similar trailers may be
collected from `Human Review`_ comments that have been made since the
last time the MR topic branch was updated with a push.

The ``Do: merge`` command accepts the following arguments:

* ``-t <topic>``: substitute ``<topic>`` for the name of the MR topic
  branch in the constructed merge commit message.

Additionally, ``Do: merge`` extracts configuration from trailing lines
in the MR description (the following have no effect if used in a MR
comment instead):

* ``Backport: release[:<commit-ish>]``: merge the topic branch into
  the ``release`` branch to backport the change.  This is allowed
  only if the topic branch is based on a commit in ``release`` already.
  If only part of the topic branch should be backported, specify it as
  ``:<commit-ish>``.  The ``<commit-ish>`` may use `git rev-parse`_
  syntax to reference commits relative to the topic ``HEAD``.
  See additional `backport instructions`_ for details.
  For example:

  ``Backport: release``
    Merge the topic branch head into both ``release`` and ``master``.
  ``Backport: release:HEAD~1^2``
    Merge the topic branch head's parent's second parent commit into
    the ``release`` branch.  Merge the topic branch head to ``master``.

* ``Topic-rename: <topic>``: substitute ``<topic>`` for the name of
  the MR topic branch in the constructed merge commit message.
  It is also used in merge commits constructed by ``Do: stage``.
  The ``-t`` option to a ``Do: merge`` command overrides any topic
  rename set in the MR description.

.. _`CMake GitLab Project Masters`: https://gitlab.kitware.com/cmake/cmake/-/settings/members
.. _`backport instructions`: https://gitlab.kitware.com/utils/git-workflow/-/wikis/Backport-topics
.. _`git rev-parse`: https://git-scm.com/docs/git-rev-parse

Close
-----

If review has concluded that the MR should not be integrated then it
may be closed through GitLab.  This would normally be a final state
with no expectation that the MR would be re-opened in the future.
It is also used when a MR is being superseded by another separate one,
in which case a reference to the new MR should be added to the MR being
closed.

Expire
------

If progress on a MR has stalled for a while, it may be closed with a
``workflow:expired`` label and a comment indicating that the MR has
been closed due to inactivity (it may also be done where the MR is blocked
for an extended period by work in a different MR).  This is not an
indication that there is a problem with the MR's content, it is only a
practical measure to allow the reviewers to focus attention on MRs that
are actively being worked on.  As a guide, the average period of inactivity
before transitioning a MR to the expired state would be around 2 weeks,
but this may decrease to 1 week or less when there is a high number of
open merge requests.

Reviewers would usually provide a message similar to the following when
resolving a MR as expired::

  Closing for now. @<MR-author> please re-open when ready to continue work.

This is to make it clear to contributors that they are welcome to re-open
the expired MR when they are ready to return to working on it and moving
it forward.  In the meantime, the MR will appear as ``Closed`` in GitLab,
but it can be differentiated from permanently closed MRs by the presence
of the ``workflow:expired`` label.

**NOTE:** Please re-open *before* pushing an update to the MR topic branch
to ensure GitLab will still act on the association.  If changes are pushed
before re-opening the MR, the reviewer should initiate a ``Do: check`` to
force GitLab to act on the updates.

External Discussion
-------------------

In some situations, a series of comments on a MR may develop into a more
involved discussion, or it may become apparent that there are broader
discussions that need to take place before the MR can move forward in an
agreed direction.  Such discussions are better suited to GitLab issues
rather than in a MR because MRs may be superseded by a different MR, or
the set of changes may evolve to look quite different to the context in
which the discussions began.  When this occurs, reviewers may ask the
MR author to open an issue to discuss things there and they will transition
the MR to a resolved state with the label ``workflow:external-discussion``.
The MR will appear in GitLab as closed, but it can be differentiated from
permanently closed MRs by the presence of the ``workflow:external-discussion``
label.  Reviewers should leave a message clearly explaining the action
so that the MR author understands that the MR closure is temporary and
it is clear what actions need to happen next.  The following is an example
of such a message, but it will usually be necessary to tailor the message
to the individual situation::

  The desired behavior here looks to be more involved than first thought.
  Please open an issue so we can discuss the relevant details there.
  Once the path forward is clear, we can re-open this MR and continue work.

When the discussion in the associated issue runs its course and the way
forward is clear, the MR can be re-opened again and the
``workflow:external-discussion`` label removed.  Reviewers should ensure
that the issue created contains a reference to the MR so that GitLab
provides a cross-reference to link the two.



/P/🚀 dev/source.rst
=================================


CMake Source Code Guide
***********************

The following is a guide to the CMake source code for developers.
See documentation on `CMake Development`_ for more information.

.. _`CMake Development`: README.rst

C++ Code Style
==============

We use `clang-format`_ version **15** to define our style for C++ code in
the CMake source tree.  See the `.clang-format`_ configuration file for our
style settings.  Use the `Utilities/Scripts/clang-format.bash`_ script to
format source code.  It automatically runs ``clang-format`` on the set of
source files for which we enforce style.  The script also has options to
format only a subset of files, such as those that are locally modified.

.. _`clang-format`: https://clang.llvm.org/docs/ClangFormat.html
.. _`.clang-format`: ../../.clang-format
.. _`Utilities/Scripts/clang-format.bash`: ../../Utilities/Scripts/clang-format.bash

C++ Subset Permitted
====================

CMake requires compiling as C++11 in order to support building on older
toolchains.  However, to facilitate development, some standard library
features from more recent C++ standards are supported through a compatibility
layer.  These features are defined under the namespace ``cm`` and headers
are accessible under the ``cm/`` directory.  The headers under ``cm/`` can
be used in place of the standard ones when extended features are needed.
For example ``<cm/memory>`` can be used in place of ``<memory>``.

Available features are:

* From ``C++14``:

  * ``<cm/array>``:
    ``cm::cbegin``, ``cm::cend``, ``cm::rbegin``, ``cm::rend``,
    ``cm::crbegin``, ``cm::crend``

  * ``<cm/deque>``:
    ``cm::cbegin``, ``cm::cend``, ``cm::rbegin``, ``cm::rend``,
    ``cm::crbegin``, ``cm::crend``

  * ``<cm/forward_list>``:
    ``cm::cbegin``, ``cm::cend``, ``cm::rbegin``, ``cm::rend``,
    ``cm::crbegin``, ``cm::crend``

  * ``<cm/iomanip>``:
    ``cm::quoted``

  * ``<cm/iterator>``:
    ``cm::make_reverse_iterator``, ``cm::cbegin``, ``cm::cend``,
    ``cm::rbegin``, ``cm::rend``, ``cm::crbegin``, ``cm::crend``

  * ``<cm/list>``:
    ``cm::cbegin``, ``cm::cend``, ``cm::rbegin``, ``cm::rend``,
    ``cm::crbegin``, ``cm::crend``

  * ``<cm/map>``:
    ``cm::cbegin``, ``cm::cend``, ``cm::rbegin``, ``cm::rend``,
    ``cm::crbegin``, ``cm::crend``

  * ``<cm/memory>``:
    ``cm::make_unique``

  * ``<cm/set>``:
    ``cm::cbegin``, ``cm::cend``, ``cm::rbegin``, ``cm::rend``,
    ``cm::crbegin``, ``cm::crend``

  * ``<cm/string>``:
    ``cm::cbegin``, ``cm::cend``, ``cm::rbegin``, ``cm::rend``,
    ``cm::crbegin``, ``cm::crend``

  * ``<cm/string_view>``:
    ``cm::cbegin``, ``cm::cend``, ``cm::rbegin``, ``cm::rend``,
    ``cm::crbegin``, ``cm::crend``

  * ``<cm/shared_mutex>``:
    ``cm::shared_lock``

  * ``<cm/type_traits>``:
    ``cm::enable_if_t``

  * ``<cm/unordered_map>``:
    ``cm::cbegin``, ``cm::cend``, ``cm::rbegin``, ``cm::rend``,
    ``cm::crbegin``, ``cm::crend``

  * ``<cm/unordered_set>``:
    ``cm::cbegin``, ``cm::cend``, ``cm::rbegin``, ``cm::rend``,
    ``cm::crbegin``, ``cm::crend``

  * ``<cm/vector>``:
    ``cm::cbegin``, ``cm::cend``, ``cm::rbegin``, ``cm::rend``,
    ``cm::crbegin``, ``cm::crend``

* From ``C++17``:

  * ``<cm/algorithm>``:
    ``cm::clamp``

  * ``<cm/array>``:
    ``cm::size``, ``cm::empty``, ``cm::data``

  * ``<cm/deque>``:
    ``cm::size``, ``cm::empty``, ``cm::data``

  * ``cm/filesystem>``:
    ``cm::filesystem::path``

  * ``<cm/forward_list>``:
    ``cm::size``, ``cm::empty``, ``cm::data``

  * ``<cm/iterator>``:
    ``cm::size``, ``cm::empty``, ``cm::data``

  * ``<cm/list>``:
    ``cm::size``, ``cm::empty``, ``cm::data``

  * ``<cm/map>``:
    ``cm::size``, ``cm::empty``, ``cm::data``

  * ``<cm/optional>``:
    ``cm::nullopt_t``, ``cm::nullopt``, ``cm::optional``,
    ``cm::make_optional``, ``cm::bad_optional_access``

  * ``<cm/set>``:
    ``cm::size``, ``cm::empty``, ``cm::data``

  * ``<cm/shared_mutex>``:
    ``cm::shared_mutex``

  * ``<cm/string>``:
    ``cm::size``, ``cm::empty``, ``cm::data``

  * ``<cm/string_view>``:
    ``cm::string_view``, ``cm::size``, ``cm::empty``, ``cm::data``

  * ``<cm/type_traits>``:
    ``cm::bool_constant``, ``cm::invoke_result_t``, ``cm::invoke_result``,
    ``cm::void_t``

  * ``<cm/unordered_map>``:
    ``cm::size``, ``cm::empty``, ``cm::data``

  * ``<cm/unordered_set>``:
    ``cm::size``, ``cm::empty``, ``cm::data``

  * ``<cm/utility>``:
    ``cm::in_place_t``, ``cm::in_place``

  * ``<cm/vector>``:
    ``cm::size``, ``cm::empty``, ``cm::data``

* From ``C++20``:

  * ``<cm/array>``:
    ``cm::ssize``

  * ``<cm/deque>``:
    ``cm::erase``, ``cm::erase_if``, ``cm::ssize``

  * ``<cm/forward_list>``:
    ``cm::ssize``

  * ``<cm/iterator>``:
    ``cm::ssize``

  * ``<cm/list>``:
    ``cm::erase``, ``cm::erase_if``, ``cm::ssize``

  * ``<cm/map>`` :
    ``cm::erase_if``, ``cm::ssize``

  * ``<cm/set>`` :
    ``cm::erase_if``, ``cm::ssize``

  * ``<cm/string_view>``:
    ``cm::ssize``

  * ``<cm/string>``:
    ``cm::erase``, ``cm::erase_if``, ``cm::ssize``

  * ``<cm/unordered_map>``:
    ``cm::erase_if``, ``cm::ssize``

  * ``<cm/unordered_set>``:
    ``cm::erase_if``, ``cm::ssize``

  * ``<cm/vector>``:
    ``cm::erase``, ``cm::erase_if``, ``cm::ssize``

Additionally, some useful non-standard extensions to the C++ standard library
are available in headers under the directory ``cmext/`` in namespace ``cm``.
These are:

* ``<cmext/algorithm>``:

  * ``cm::append``:
    Append elements to a sequential container.

  * ``cm::contains``:
    Checks if element or key is contained in container.

* ``<cmext/enum_set>``

  * ``cm::enum_set``:
    Container to manage set of elements from an ``enum class`` definition.

* ``<cmext/iterator>``:

  * ``cm::is_terator``:
    Checks if a type is an iterator type.

  * ``cm::is_input_iterator``:
    Checks if a type is an input iterator type.

  * ``cm::is_range``:
    Checks if a type is a range type: functions ``std::begin()`` and
    ``std::end()`` apply.

  * ``cm::is_input_range``:
    Checks if a type is an input range type: functions ``std::begin()`` and
    ``std::end()`` apply and return an input iterator.

* ``<cmext/memory>``:

  * ``cm::static_reference_cast``:
    Apply a ``static_cast`` to a smart pointer.

  * ``cm::dynamic_reference_cast``:
    Apply a ``dynamic_cast`` to a smart pointer.

* ``<cmext/type_traits>``:

  * ``cm::is_container``:
    Checks if a type is a container type.

  * ``cm::is_associative_container``:
    Checks if a type is an associative container type.

  * ``cm::is_unordered_associative_container``:
    Checks if a type is an unordered associative container type.

  * ``cm::is_sequence_container``:
    Checks if a type is a sequence container type.

  * ``cm::is_unique_ptr``:
    Checks if a type is a ``std::unique_ptr`` type.

CMake assumes the compiler supports ``#pragma once``. Use this for all
hand-written header files.

Dynamic Memory Management
=========================

To ensure efficient memory management, i.e. no memory leaks, it is required
to use smart pointers.  Any dynamic memory allocation must be handled by a
smart pointer such as ``std::unique_ptr`` or ``std::shared_ptr``.

It is allowed to pass raw pointers between objects to enable objects sharing.
A raw pointer **must** not be deleted. Only the object(s) owning the smart
pointer are allowed to delete dynamically allocated memory.

Third Parties
=============

To build CMake, some third parties are needed. Under ``Utilities``
directory, are versions of these third parties which can be used as an
alternate to the ones provided by the system.

To enable the selection of the third parties between the system and CMake ones,
in CMake sources, third parties headers must be prefixed by ``cm3p/``
(for example: ``<cm3p/json/reader.h>``). These wrappers are located under
``Utilities/cm3p`` directory.

Source Tree Layout
==================

The CMake source tree is organized as follows.

* ``Auxiliary/``:
  Shell and editor integration files.

* ``Help/``:
  Documentation.  See the `CMake Documentation Guide`_.

  * ``Help/dev/``:
    Developer documentation.

  * ``Help/release/dev/``:
    Release note snippets for development since last release.

* ``Licenses/``:
  License files for third-party libraries in binary distributions.

* ``Modules/``:
  CMake language modules installed with CMake.

* ``Packaging/``:
  Files used for packaging CMake itself for distribution.

* ``Source/``:
  Source code of CMake itself.

* ``Templates/``:
  Files distributed with CMake as implementation details for generators,
  packagers, etc.

* ``Tests/``:
  The test suite.  See `Tests/README.rst`_.

* ``Utilities/``:
  Scripts, third-party source code.

  * ``Utilities/std/cm``:
    Support files for various C++ standards.

  * ``Utilities/std/cmext``:
    Extensions to the C++ STL.

  * ``Utilities/cm3p``:
    Public headers for third parties needed to build CMake.

  * ``Utilities/Sphinx/``:
    Sphinx configuration to build CMake user documentation.

  * ``Utilities/Release/``:
    Scripts used to package CMake itself for distribution on ``cmake.org``.
    See `Utilities/Release/README.rst`_.

.. _`CMake Documentation Guide`: documentation.rst
.. _`Tests/README.rst`: ../../Tests/README.rst
.. _`Utilities/Release/README.rst`: ../../Utilities/Release/README.rst



/P/🚀 dev/testing.rst
==================================


CMake Testing Process
*********************

The following documents the process for running integration testing builds.
See documentation on `CMake Development`_ for more information.

.. _`CMake Development`: README.rst

CMake Dashboard Scripts
=======================

The *integration testing* step of the `CMake Review Process`_ uses a set of
testing machines that follow an integration branch on their own schedule to
drive testing and submit results to the `CMake CDash Page`_.  Anyone is
welcome to provide testing machines in order to help keep support for their
platforms working.

The `CMake Dashboard Scripts Repository`_ provides CTest scripts to drive
nightly, continuous, and experimental testing of CMake.  Use the following
commands to set up a new integration testing client:

.. code-block:: console

  $ mkdir -p ~/Dashboards
  $ cd ~/Dashboards
  $ git clone https://gitlab.kitware.com/cmake/dashboard-scripts.git CMakeScripts
  $ cd CMakeScripts

The `cmake_common.cmake`_ script contains comments at the top with
instructions to set up a testing client.  As it instructs, create a
CTest script with local settings and include ``cmake_common.cmake``.

.. _`CMake Review Process`: review.rst
.. _`CMake CDash Page`: https://open.cdash.org/index.php?project=CMake
.. _`CMake Dashboard Scripts Repository`: https://gitlab.kitware.com/cmake/dashboard-scripts
.. _`cmake_common.cmake`: https://gitlab.kitware.com/cmake/dashboard-scripts/-/blob/master/cmake_common.cmake

Nightly Start Time
------------------

The ``cmake_common.cmake`` script expects its includer to be run from a
nightly scheduled task (cron job).  Schedule such tasks for sometime after
``1:00am UTC``, the time at which our nightly testing branches fast-forward.



/P/🚀 dev/try_compile-linker-language.rst
======================================================


try_compile-linker-language
---------------------------

* The :command:`try_compile` and :command:`try_run` commands gained a
  ``LINKER_LANGUAGE`` option to specify the :prop_tgt:`LINKER_LANGUAGE`
  target property in the generated test project.
