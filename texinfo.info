# / Emacs with Texinfo 
***********************

1. https://www.gnu.org/software/emacs/download.html
2. https://ftp.gnu.org/gnu/emacs/windows/emacs-29/
3. https://www.gnu.org/software/emacs/tour/index.html
4. https://www.gnu.org/software/emacs/documentation.html

Emacs 作者 Robert J. Chassell 于 2017 年离世。参考 Goodbye to Bob Chassell 
https://www.fsf.org/blogs/community/goodbye-to-bob-chassell

Texinfo 是 GNU 项目的官方文档格式，可与 GNU Emacs 良好地集成，提供比 man 帮助文档
更易于访问、跳转更方便的文档解决方案。Windows 平台下可以使用 msys2 安装 Emacs：

```sh
# https://packages.msys2.org/groups/editors
$ pacman -S info texinfo texinfo-tex
$ pacman -S nano vim emacs         # Msys2 Subsystems
$ pacman -S mingw-w64-x86_64-emacs # MinGW64 Subsystems

$ mingw64.exe && runemacs
$ msys2_shell.cmd -mingw64 -c runemacs
$ echo '#! /usr/bin/env bash
PATH=/mingw64/bin runemacs "$@"' > /usr/bin/emacs
# Open Emacs Manual and goto C.3 Command Argument Example
$ emacs +42836 -- /mingw64/share/info/emacs.info

$ echo '#! /usr/bin/env bash
PATH=/mingw64/bin emacs "$@"' > /usr/bin/el
$ cat > test.el << EOF
#!/usr/bin/emacs --script
(print 3.1415926535897932)
(message (string-join (list "H" "I" "!") "\n"))
(progn (setq foo 3) (message "Square of %d is %d" foo (* foo foo)))
EOF

$ el --script test.el
$ el --eval '(message (format "1+2 equals %d" (+ 1 2)))'
$ el -batch --eval '(print 3.1415926535897932)'

cat > el.bat << EOF
@set PBAK=%PATH%
@PATH=c:/msys64/mingw64/bin/
"%PATH%emacs.exe" %*
@set PATH=%PBAK%
EOF
cat > emacs.bat << EOF
@set PBAK=%PATH%
@PATH=c:/msys64/mingw64/bin/
"%PATH%runemacs.exe" %*
@set PATH=%PBAK%
EOF

$ find c:/msys64/mingw64/bin | grep emacs
c:/msys64/mingw64/bin/emacs-29.1.exe
c:/msys64/mingw64/bin/emacs.exe 
c:/msys64/mingw64/bin/emacsclient.exe
c:/msys64/mingw64/bin/emacsclientw.exe
c:/msys64/mingw64/bin/runemacs.exe
```

Msys2 启动 mingw64.exe 子系统环境时可能会由于设置错误，导致无法加载入口 shell 程序，
提示找不到类似 /usr/include/cmd.exe 这样的 shell 程序。可以直接通过 Msys2 提供的虚拟
文件系统目录访问 `/mingw64/bin/runemacs`。如果提示出现的路径不固定，是相对路径，
那么就需要修改系统环境变量 `SHELL`，设置一个 shell 程序的绝对路径。

可以将安装目录下的 bash 程序链接到这个目录，使用以下 Powershell 命令创建链接文件：

```sh
$target="c:/msys64/usr/bin/bash.exe";
$path="c:/msys64/usr/include/cmd.exe";
new-item -type SymbolicLink -target "$target"  -Path "$path"
```

注意：runemacs 是图形版本入口程序，emacs 是控制台版本程序，如果想要执行脚本并且
输入控制台信息，就不能使用前者。Emacs 作为服务器启动，为任意 emacsclient 提供服务。
另外，emacs 还可以使用 `-nw` (--no-window-system) 进入 TUI 字符界面而不是 GUI。
TUI 界面下，如果运行环境不支持鼠标，比如当前的 Sublime Text + Terminus 环境，
那么就需要使用键盘 `F10` 来触发菜单，不巧，Terminus 依然不支持功能键。最后，
只能使用 Emacs 提供的扩展命令补救：

1. `menu-bar-mode` 切换菜单条模式，隐藏菜单条后可以使用扩展命令打开。
2. `menu-bar-open` <f10> 打开菜单；
3. `minor-mode-menu-from-indicator` 打开 Minor Mode Menu 功能菜单；
4. `buffer-menu-open` (`C-<f10>`) 打开缓冲区菜单；
5. `context-menu-open` (`S-<f10>`) 打开上下文菜单，间接访问 major mode menu；

批处理模式 `-batch`（batch mode）用于命令行中运行脚本、makefiles 等等，结合以下
参数使用：

1.  `-l` (--load=FILE)
2.  `-f` (--funcall=FUNCTION)
3.  `--eval` (--execute=EXPRESSION)

批处理模式隐含了 `-q` (--no-init-file) 选项，不会加载初始化文件，但是会加载
site-start.el，执行完程序后就会退出，所以不会有 GUI 窗口。所有打印内容输出到
标准文件，`prin1`, `princ` 和 `print` 函数打印到 `stdout`，而 `message` 和 `error` 
函数打印到 `stderr`。

![Emacs 启动流程图](https://pic1.zhimg.com/v2-541f88ad7e680f4f71fdbed05311713c.jpg)
https://zhuanlan.zhihu.com/p/608657330

另外，使用 bash 脚本包装方式执行 `emacs --eval "(print 3.14)"`，可能导致以下错误，
注意输入的 lisp 表达式处理成了以空格分隔的参数，这种处理似乎和 bash 脚本中的
参数引用 `$@` `$*` 等等有关：

```sh
Error: end-of-file nil
  mapbacktrace(#f(compiled-function (evald func args flags) #<bytecode -0x5b0f49f239119ab>))
  debug-early-backtrace()
  debug-early(error (end-of-file))
  command-line-1(("--eval" "(print" "3.1415926535897932)"))
  command-line()
  normal-top-level()
End of file during parsing
```

如果 bash 脚本中按如下方式调用 emacs，脚本命名为 el，执行 `el --eval "(print 3.14)"`
则完全没有问题：

```sh
#! /usr/bin/env bash
/mingw64/bin/emacs --batch "$1" "$2"
```

翻看 bash 手册 3.4.2 Special Parameters，要实现以上参数传递，就需要正确使用 `"$@"`
自动变量，注意必须使用双引号包括，这样才会进行 word splitting，将传入的各个参数
使用双引号处理。

Emacs Docs & Key Maps
========================================================

Emacs 文档存放在两个位置，主要是 Emacs 用户手册和基本操作教程（多语言翻译），
还有 Elisp 语言手册、入门教程。另外，还有 Emacs 附带的各种工具文档：

    /msys64/mingw64/share/info
    /msys64/mingw64/share/emacs/29.1/etc/tutorials
    /mingw64/share/emacs/29.1/etc/refcards

    〓 0 Emacs Lisp Intro: (eintr).    A simple introduction to Emacs Lisp programming.
    〓 0 Elisp: (elisp).               The Emacs Lisp Reference Manual.
    〓 0 Emacs: (emacs).               The extensible self-documenting text editor.

```sh
$ echo '
for it in *.info; do 
    echo -n "$it 〓 "; 
    sed -n '/INFO-DIR-ENTRY/,/INFO-DIR-ENTRY/{s/\*/\0/p}' $it;
done;
' > infotitles
$ ./infotitles > /c/dl/out.md
$ cat /c/dl/out.md
auth.info         〓 0 Auth-source: (auth).          The Emacs auth-source library.
autotype.info     〓 0 Autotype: (autotype).         Convenient features for text that you enter
bovine.info       〓 0 Bovine: (bovine).             Semantic bovine parser development.
calc.info         〓 0 Calc: (calc).                 Advanced desk calculator and mathematical tool.
ccmode.info       〓 0 CC Mode: (ccmode).            Emacs mode for editing C, C++, Objective-C,
cl.info           〓 0 CL-Lib: (cl).                 Partial Common Lisp support for Emacs Lisp.
dbus.info         〓 0 D-Bus: (dbus).                Using D-Bus in Emacs.
dired-x.info      〓 0 Dired-X: (dired-x).           Dired Extra Features.
ebrowse.info      〓 0 Ebrowse: (ebrowse).           A C++ class browser for Emacs.
ede.info          〓 0 EDE: (ede).                   The Emacs Development Environment.
ediff.info        〓 0 Ediff: (ediff).               A visual interface for comparing and
edt.info          〓 0 EDT: (edt).                   An Emacs emulation of the EDT editor.
efaq-w32.info     〓 0 Emacs W32 FAQ: (efaq-w32).   FAQs about Emacs on MS Windows.
efaq.info         〓 0 Emacs FAQ: (efaq).            Frequently Asked Questions about Emacs.
eglot.info        〓 0 Eglot: (eglot).             Language Server Protocol client for Emacs.
eieio.info        〓 0 EIEIO: (eieio).               An objects system for Emacs Lisp.
eintr.info        〓 0 Emacs Lisp Intro: (eintr).    A simple introduction to Emacs Lisp programming.
elisp.info        〓 0 Elisp: (elisp).               The Emacs Lisp Reference Manual.
emacs-gnutls.info 〓 0 Emacs GnuTLS: (emacs-gnutls). The Emacs GnuTLS integration.
emacs-mime.info   〓 0 Emacs MIME: (emacs-mime).     Emacs MIME de/composition library.
emacs.info        〓 0 Emacs: (emacs).               The extensible self-documenting text editor.
epa.info          〓 0 EasyPG Assistant: (epa).      An Emacs user interface to GNU Privacy Guard.
erc.info          〓 0 ERC: (erc).                   Powerful and extensible IRC client for Emacs.
ert.info          〓 0 ERT: (ert).                   Emacs Lisp regression testing tool.
eshell.info       〓 0 Eshell: (eshell).             A command shell implemented in Emacs Lisp.
eudc.info         〓 0 EUDC: (eudc).                 Emacs client for directory servers (LDAP, BBDB).
eww.info          〓 0 EWW: (eww).      Emacs Web Wowser
flymake.info      〓 0 Flymake: (flymake).           A universal on-the-fly syntax checker.
forms.info        〓 0 Forms: (forms).               Emacs package for editing data bases
gnus.info         〓 0 Gnus: (gnus).                 The newsreader Gnus.
gnutls.info       〓 0 GnuTLS: (gnutls).      GNU Transport Layer Security Library.
htmlfontify.info  〓 0 Htmlfontify: (htmlfontify).   Convert source code to html.
idlwave.info      〓 0 IDLWAVE: (idlwave).           Major mode and shell for IDL files.
ido.info          〓 0 Ido: (ido).                   Interactively do things with buffers and files.
info.info         〓 0 Info: (info).                 How to use the documentation browsing system.
mairix-el.info    〓 0 Mairix: (mairix-el).          Emacs interface to the Mairix mail indexer.
message.info      〓 0 Message: (message).           Mail and news composition mode that
mh-e.info         〓 0 MH-E: (mh-e).                 Emacs interface to the MH mail system.
modus-themes.info 〓 0 Modus Themes: (modus-themes). Elegant, highly legible and customizable themes.
newsticker.info   〓 0 Newsticker: (newsticker).     A feed reader for Emacs.
nxml-mode.info    〓 0 nXML Mode: (nxml-mode).       XML editing mode with RELAX NG support.
octave-mode.info  〓 0 Octave mode: (octave-mode).   Emacs mode for editing GNU Octave files.
org.info          〓 0 Org Mode: (org).      Outline-based notes management and organizer.
pcl-cvs.info      〓 0 PCL-CVS: (pcl-cvs).           Emacs front-end to CVS.
pgg.info          〓 0 PGG: (pgg).                   An obsolete Emacs interface to various
rcirc.info        〓 0 Rcirc: (rcirc).               Internet Relay Chat (IRC) client.
reftex.info       〓 0 RefTeX: (reftex).             Emacs support for LaTeX cross-references
remember.info     〓 0 Remember: (remember).         Simple information manager for Emacs.
sasl.info         〓 0 SASL: (sasl).                 The Emacs SASL library.
sc.info           〓 0 SC: (sc).                     Supercite lets you cite parts of messages
semantic.info     〓 0 Semantic: (semantic).         Source code parser library and utilities.
ses.info          〓 0 SES: (ses).                   Simple Emacs Spreadsheet.
sieve.info        〓 0 Sieve: (sieve).               Managing Sieve scripts in Emacs.
smtpmail.info     〓 0 SMTP: (smtpmail).             Emacs library for sending mail via SMTP.
speedbar.info     〓 0 Speedbar: (speedbar).         File/Tag summarizing utility.
srecode.info      〓 0 SRecode: (srecode).           Semantic template code generator.
todo-mode.info    〓 0 Todo Mode: (todo-mode).       Make and maintain todo lists.
tramp.info        〓 0 Tramp: (tramp).               Transparent Remote Access, Multiple Protocol
transient.info    〓 0 Transient: (transient).       Transient Commands.
url.info          〓 0 URL: (url).                   URL loading package.
use-package.info  〓 0 use-package: (use-package). Declarative package configuration for Emacs.
vhdl-mode.info    〓 0 VHDL Mode: (vhdl-mode).       Emacs mode for editing VHDL code.
vip.info          〓 0 VIP: (vip).                   An obsolete VI-emulation for Emacs.
viper.info        〓 0 VIPER: (viper).               A VI-emulation mode for Emacs.
vtable.info       〓 0 vtable: (vtable).     Variable Pitch Tables.
widget.info       〓 0 Widget: (widget).             The "widget" package used by the Emacs
wisent.info       〓 0 Wisent: (wisent).             Semantic Wisent parser development.
woman.info        〓 0 WoMan: (woman).               Browse UN*X Manual Pages "W.O. (without) Man".
```

Emacs 本身是 Lisp 语言的一种实现，也使用 Elisp 编写扩展。例如，Windows 平台下，
主界面上的滚动条太丑了（占空间、无效 UI 元素），可以修改初始化配置脚本文件：

    (set-scroll-bar-mode nil)

Options ⇒ Show/Hide ⇒ Scroll Bar 设置滚动条状态。或者使用菜单设置：
Options ⇒ Customize Emacs ⇒ Specific Option... 然后在 UI 界面中选择属性配置。

Emacs 启动时会按以下顺序寻找配置脚本文件，参考手册 50.4.4 How Emacs Finds Your Init File

    ~/.emacs
    ~/.emacs.el
    ~/.emacs.d/init.el
    ~/.config/emacs/init.el

Windows 平台使用 Msys2 环境时，HOME 目录可能指两个不同的位置，一是 Windows 本身
的用户主目录，另一个是 Msys2 虚拟文件系统中的用户主目录，它在其安装目录下，
也使用同样的用户名称。另外还可能使用 Roaming 目录，这取决于你运行 Emacs 的环境。
Emacs 中使用 shell 命令 `echo $HOME` 打印出来的路径并不准确，这根据指定 shell 程序
设置的环境输出，并不代表 Emacs 所运行的环境：

```sh
# cmd
>dir %HOME%
 C:\Users\OCEAN 的目录

# bash
$ echo ~/
/home/OCEAN/
```

Emacs 运行时加载的初始化脚本通过 Options ⇒ Save Options 操作，在底部的提示信息确认。
以下是位于用户 Roaming 目录下的初始化配置脚本参考 (/AppData/Roaming/.emacs)：

```lisp
    (put 'upcase-region 'disabled nil)
    (global-ede-mode t)
    (custom-set-variables
     ;; custom-set-variables was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(ede-project-directories '("c:/dl/em" "c:/dl/pl/emacs"))
     '(scroll-bar-mode nil)
     '(shell-file-name "bash"))
     '(shell)
    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(default ((t (:family "FiraCode Nerd Font Mono" :foundry "outline" :slant normal :weight regular :height 102 :width normal)))))
```

Emacs 扩展命令特别多，Control 或者 Meta 键加其他按键组合的方式不够用。因此，
Emacs 使用的是映射扩展命令的形式: key sequence ⇨ X (eXtend) command。
任何时候需要后选项输入，都可以按 `TAB` 键补全扩展命令名称，或者使用通配符 * 
来获取额外提示。

比如，`M-x *emacs TAB` 获取和 emacs 相关扩展命令列表。

1. C-x 字符扩展，按 C-x 之后，按字符按键执行相应命令；
2. M-x 指定命令扩展，按 M-x 之后，输入命令名称；

50.3.2 Prefix Keymaps 参考，可以执行 `describe-keymap` 查询完整列表：

   • `ctl-x-map` is the variable name for the map used for characters that follow `C-x`.
   • `help-map` is for characters that follow `C-h`.
   • `esc-map` is for characters that follow `ESC`.  Thus, all Meta characters are actually defined by this map.
   • `ctl-x-4-map` is for characters that follow `C-x 4`.
   • `mode-specific-map` is for characters that follow `C-c`.
   • `project-prefix-map` is for characters that follow `C-x p`, used for project-related commands.

其中 `ctl-x-4-map` 这类功能映射与其它窗格（相对当前窗格）操作相关，
参考手册 21.4 Displaying in Another Window

Emacs 根据快捷键映射的作用范围分成几类：

* Keymaps::          全局通用，global keymap；
* Prefix Keymaps::   前缀快捷键，prefix keys，例如 `C-x` 就是前缀 x 的一系列快捷键；
* Local Keymaps::    Major and minor modes 有各自的局部快捷键映射；
* Minibuffer Maps::  微缓冲有专用的局部快捷键映射；

全局映射包含了常用字符按键，例如，`g` 按键，它和其它常用键一样绑定了 `self-insert-command`
这个扩展命令，所以会将相应的字符插入当前编辑的文件。控制台程序接收到的功能键
实际上是一系列字符，并且使用 `<ESC> [` 开头，Emacs 按键序列可以和功能键混合使用。
比如，`C-x <Home>`, 当你输入 `C-x` 组合键后，Emacs 会根据映射获释这个动作触发的
是一个字符前缀映射快捷键，继续输入 `<Home>` 功能键时，它们被组合成按键序列，
并根据最终的映射关系调用扩展命令。

可以随时执行以下扩展命令绑定、解绑按键映射，查询现有的全局绑定使用 `keymap-global-lookup`：

1. `M-x keymap-global-set <RET> KEY CMD <RET>`
    Define KEY globally to run CMD.
2. `M-x keymap-local-set <RET> KEY CMD <RET>`
    Define KEY locally (in the major mode now in effect) to run CMD.
3. `M-x keymap-global-unset <RET> KEY`
    Make KEY undefined in the global map.
4. `M-x keymap-local-unset <RET> KEY`
    Make KEY undefined locally (in the major mode now in effect).

参考文档官方：50.3 Customizing Key Bindings


Emacs Major & Minior Mode
========================================================

所有文件的编辑模式，editing mode 分成主、次两类：Major and Minor Modes。主模式
就是根据文件类型确定的模式，如果某文件类型没有特别功能，就使用 (fundamental)
模式，这是最基本的主模式。次模式则可选项，参考手册 24 Major and Minor Modes。

因为 Emacs 处理各种文件会动态切换 major mode，所以局部映射也动态调整，根据不同的
文件类型提供不同的功能映射。

鼠标中键点击界面底部状态条 (mode line) 中的模式指示器获取当前文件的主模式信息，
以下是常见主模式名称与对应的 Lisp 定义文件：

     Fundamental mode : /mingw64/share/emacs/29.1/lisp/simple.el
       Messages mode : /mingw64/share/emacs/29.1/lisp/simple.el:
           Info mode : /mingw64/share/emacs/29.1/lisp/info.el
    Buffer Menu mode : /mingw64/share/emacs/29.1/lisp/buff-menu.el
          Text mode : /mingw64/share/emacs/29.1/lisp/text-mode.el
          ELisp/l mode : /mingw64/share/emacs/29.1/lisp/elisp-mode.e
    Lisp Interaction mode : /mingw64/share/emacs/29.1/lisp/elisp-mode.el

    eldoc-mode is an interactive native-compiled Lisp function in eldoc.el

每个主模式都对应一个环境配置函数，例如 Fundamental mode：

```lisp
    (defun fundamental-mode ()
      "Major mode not specialized for anything in particular.
    Other major modes are defined by comparison with this one."
      (interactive)
      (kill-all-local-variables)
      (run-mode-hooks))

    (define-derived-mode clean-mode fundamental-mode "Clean"
      "A mode that removes all overlays and text properties."
      (kill-all-local-variables t)
      (let ((inhibit-read-only t))
        (dolist (overlay (overlays-in (point-min) (point-max)))
          (delete-overlay overlay))
        (set-text-properties (point-min) (point-max) nil)
        (setq-local yank-excluded-properties t)))
```

Emacs 使用 hooks 机制让插件参与事件回调处理，实现 Emacs 自定义，每个主模式都至少
有一个 Mode hook，设置回调函数（挂钩），Emacs 在适当、特定事件触发的时候执行。
Mode hook 的作用就是在 Emacs 启动一个主模式时，自动执行已经和某主模式“挂钩”的
函数或次模式。这样就可以自由地向一个主模式上挂上各种功能，随主模式一起启动。

钩子回调分为两种命名形式，使用 `-hook` 后缀名，没有参数，Emacs 按其注册顺序
轮流执行。另一种是异常钩子，使用 `-functions` 后缀名，旧版本使用 `-hooks`，
它们可以有参数。

主模式 Mode hooks 可以派生自其它基础的模式，比如 HTML mode 派生自 Text mode，
`text-mode-hook` 会在 `html-mode-hook` 之前运行，参考手册 24.2.2 Derived Modes。
具体文件类型与 major mode 关系可以执行 `C-h v auto-mode-alist` 命令查询，这是
一个记录模式映射列表的变量，association list。

Mode hook 的名字形式通常就是“Name-mode-hook”。例如，在文本文件 text-mode 
中启动次一个“检查拼写”flyspell-mode 功能，可以这样写配置：

```lisp
    (add-hook 'text-mode-hook 'flyspell-mode)
```

Emacs 读取文件时，会自动根据文件扩展名确定主模式。但是也提供了文件级别的配置，
可以在文件第一行设置类似以下格式的内容告诉 Emacs 使用什么模式：

    -*- mode: MODENAME; VAR: VALUE; ... -*-

    ; -*- mode: Lisp; eval: (auto-fill-mode 1); -*-

还可以执行 `M-x add-file-local-variable-prop-line` 命令来设置，而不是手动设置。
参考文档 50.2.2 Hooks and 50.2.4 Local Variables in Files


每个 Major Mode 有一个 KEYMAP 名字，绑定按键时需要指定相关的 major mode。以下使用
Elisp 脚本修改全局全局按键映射，展示：M-j 绑定 find-file，以及 php-mode 模式绑定。
Emacs 会根据约定解释 C M S 这些关键字符，以添加相应的 Modifier keys 处理逻辑：

```lisp
    ; (global-set-key KEY COMMAND)
    (global-set-key (kbd "M-j") 'find-file)
    (global-unset-key (kbd "M-j"))

    ; Major Mode
    ; (global-set-key KEYMAP KEY COMMAND)
    (require 'php-mode)
    (define-key php-mode-map (kbd "M-j") 'find-file)
```

注意: 这得先配制 php-mode，php-mode.el 文件中可以找到相应的 KEYMAP 名字。


    问题1 怎样获得 Major Mode 名字？使用下面的函数：

        (defun get-buffer-mode-name (buffer-or-string)
          "Get the buffer major mode name."
          (interactive "bBuffer Name:")
          (message (with-current-buffer buffer-or-string
                       major-mode)))

    问题２ 发现以下错误消息，假定设置 matlab-shell-mode-map 的时候出现：

        wrong type argument keymapp nil

    应该先判断是否为空，如下设置

        (if matlab-shell-mode-map
            ()    ; Do not change the keymap if it is already set up.
          (setq matlab-shell-mode-map (make-sparse-keymap))
          (define-key matlab-shell-mode-map (kbd "C-c SPC")  'ace-jump-mode)
          (define-key matlab-shell-mode-map (kbd "C-x SPC")  'ace-jump-mode)
          (define-key matlab-shell-mode-map (kbd "RET") 'comint-send-input)
          (define-key matlab-shell-mode-map (kbd "C-c C-c")'comint-interrupt-subjob)
          )


Emacs Basic Operations
========================================================

任何时都可以使用 Help ⇒ Describe 获取详细的帮助信息：

1. `C-h f` 搜索关功能键字，扩展命令：`describe-function` 
2. `C-h v` 搜索 ELisp 变量信息，扩展命令：`describe-variable`
3. `C-h x` 查询当前所有可用的扩展命令，扩展命令：`describe-command`
4. `C-h b` 查询已经绑定的所有快捷键映射，扩展命令：`describe-bindings`
5. `C-h k` 查询按键在当前窗格中的功能，扩展命令：`describe-key`
6. `C-h P` 获取 ELisp 程序包信息，扩展命令：`describe-package`
7. `C-h r I` 直接通过 Emacs 手册中的索引查询帮助信息，可提供模糊的关键词。

比如，相要知道保存文件如何操作，执行 `C-h f` 搜索 save，尝试 TAB 补全，
就可以找到 `save-buffer` 扩展命令的操作是 `C-x C-s`。

也可以查询按键绑定的功能，输入 `C-h c` 之后再输入一个组合键，Emacs 会给出
这个命令的简要说明。例如，`C-h c C-p` 或者 `C-h c C-x 5 2` 显示以下消息：

        C-p runs the command previous-line
        C-x 5-2 runs the command make-frame-command

Emacs 是一个 Lisp 语言实现，本身就是一个 Lisp 脚本解析器，它的初始化脚本、配置
脚本、程序包中定义了有大量的变量符号，使用 `C-h v` 可以查询，比如，shell 命令
所使用的入口程序：`C-h v shell-file-name`。

另外，`M-x apropos` 查询与关键字相关命令、选项、变量等信息（11.4 Apropos）。


命令可能由多个阶段完成执行，期间使用 `C-g` 可以取消当执行中的一个命令，
包括取消执行到卡顿状态的命令。

Emacs“递归编辑”是命令执行过程中又进入另一个命令的状态，递归编辑状态由
状态栏的方括号所指示，其中包含了用方括号来指明的模式名称。比如，可能看到
[(Fundamental)]，而不是 (Fundamental)。离开递归编辑可以用 `ESC ESC ESC`，这是通用的
“离开”命令，你甚至可以使用它来关掉多余的窗格，或者离开小缓冲。

`C-g` 只能是取消“本层递归编辑之内”的命令，参考手册 51 Quitting and Aborting。

尝试输入 `M-x` 进入小缓冲，Emacs 标题栏会显示 *Minibuf*，再输入 ESC ESC ESC 离开。

又比如，`M-%` 进行交互式替换，此时又用了 `C-s` 进行搜索。替换模式并没有结束，
又进入了搜索模式，这就是所谓的递归编辑。

Emacs 使用一个单独的字母表达功能键，见下表。

| Emacs Keys | 缩写 |    PC 键盘     |
|------------|------|----------------|
| Control    | C    | Ctrl / Control |
| Meta       | M    | Alt / Option   |
| Shift      | S    | Shift / Shift  |
| Super      | s    | Win / Command  |
| Hyper      | H    | 无             |
| mouse-1    | 无   | 鼠标左键       |
| mouse-2    | 无   | 鼠标中键       |
| mouse-3    | 无   | 鼠标右键       |

命令使用示范：

0. `M-x doctor` 执行 Help ⇒ Emacs Physiotherapist，这其实是自带游戏中的一个。
0. `M-x mpuz` 执行 Tools ⇒ Games ⇒ Multiplication Puzzle，算术解密游戏，按字母填数字。
0. `M-x hanoi` 执行 Tools ⇒ Games ⇒ Tower of Hanoi，河内塔游戏演示。
0. `M-x zone` 文字动画演示。
0. `M-x animate-birthday-present` 文字动画演示。
1. 光标基本操作：
    01. `C-v`   向前移动一屏，保留两行内容以关联上下文。
    02. `M-v`  向后移动一屏，保留两行内容以关联上下文。
    03. `C-l`   重绘屏幕，并将屏幕聚集到当前光标所在行，`recenter-top-bottom`。
    04. `C-p`   移动光标到上一行，`previous-line`。
    05. `C-n`   移动光标到下一行，`next-line`。
    06. `C-b`   向左侧字符移动光标，`backward-char`。
    07. `C-f`   向右侧字符移动光标，`forward-char`。
    08. `C-a`   移动光标到行首，`move-beginning-of-line`。
    09. `C-e`   移动光标到行尾，`move-end-of-line`。
    10. `M-a`   移动光标到句首，`backward-sentence`。
    11. `M-e`   移动光标到句尾，`forward-sentence`。
2. 基本编辑操作：
    01. `M-l`   转换为小写，并移动到下一个词，`downcase-word`。
    02. `M-u`   转换为大写，并移动到下一个词，`upcase-word`。
    03. `C-d`   转换为大写，并移动到下一个词，`upcase-word`。
    04. `M-d`   转换为大写，并移动到下一个词，`upcase-word`。
    05. `C-x C-u`  选区内容转换为大写，`upcase-region`。
    06. `C-<Del>` 或者 `M-d` 删除（剪切）光标后的词，`kill-word`。
    07. `M-<Del>` 删除（剪切）光标前的词，`backward-kill-word`。
    08. `C-k`  删除内容直到行尾，`kill-sentence`。
    09. `C-x <Back>` 删除内容直到行首，`backwrad-kill-sentence`。
    10. `C-w`  Cut (`kill-region`)，将内容放入 kill ring。
    11. `M-w`  Copy (`kill-ring-save`) 将内容放入 kill ring。
    12. `C-y` 粘贴（`yank`）插入最后放入 kill ring 缓存的内容。
    13. `M-y` 粘贴（`yank-pop`）循环指定的 kill ring 内容。
    14. `C-M-w` Appending Kills，`append-next-kill`，此功能用于合并剪切内容。
2. Emacs 分屏、空口 (Frame)、窗格 (Window) 操作：
    0. `q` 退出当前窗格，回到上一个缓冲区，`quit-window`，可编辑文件则执行 ` self-insert-command`。
    1. `C-x 0` 关闭当前窗格，`delete-window`。
    2. `C-x 1` 最大化当前窗格，`delete-other-window`。
    3. `C-x 2` 上下分割窗格，`split-window-below`。
    4. `C-x 3` 左右分割窗格，`split-window-right`，或者在状态条点中键 `C-mouse-2`。
    1. `C-x o`  跳转到其它窗格，`other-window`。
    2. `C-M-v` 或者 `ESC C-v` 向下滚动其它的窗格，`scroll-other-window`。
    3. `C-M-S-v` 向上滚动其它窗格内容，`scroll-other-window-down`。
    1. `C-x 4 f` Visit a file, in another window ( `find-file-other-window`).
    1. `C-x 5 0` 关闭当前窗口，`delete-frame`。
    2. `C-x 5 1` 关闭其它窗口，`delete-other-frame`。
    3. `C-x 5 2` 为当前 buffer 新建一个窗口，`make-frame-command`。
    4. `C-x 5 f` Visit a file, in a new frame ( `find-file-other-frame`).
    5. `C-x 5 o`  Select another frame, and raise it.
    6. `M-<F10>`  Toggle the maximization state of the current frame.
    7. `<F11>`    Toggle full-screen mode for the current frame.
3. 文件与缓冲区操作：
    1. `C-x d`   打开目录，显示文件列表。
    2. `C-x C-f` 搜索、打开文件，`ffap` 命令，指定目录则显示列表供用户选择、筛选。
    3. `C-x b`   Switch buffer，注意，切换缓冲区时，名称中的 * 符号也要输入。
    4. `C-x C-b` List buffers，光标可能没有聚集到缓冲区列表，使用 `C-x o` 跳转；
    5. `C-x Left/Right` 切换前后缓冲区。
    6. `C-x k`   删除缓冲区，相当关闭文件，`kill-buffer`。
    7. `C-x C-s` Save buffer to file
    8. `C-x s`   Save some buffers to their files
    9. `C-x u`   Undo，`undo`，也可以使用 `C/`。
    9. `C-M _`  Redo，`undo-redo`，PC 键盘上需要 Shift 一起按。
4. `C-g` 打断、取消一个命令的执行，`Esc Esc Esc` 更通用。
5. `C-x C-c` Quit Emacs，`save-buffers-kill-terminal`，使用 `kill-emacs` 不提示保存。
6. `M-&` Shell 对话，默认执行 `cmd.exe`，可配置 Shell File Name 为 bash。

可以将 v 看作是箭头方向，`C-v` 就向下移动屏幕，使用 Alt 就变换成 `M-v` 反方向。
移动光标同时按下 Shift 就可以选择文字内容，称为 Shift Selection。类似 Vim 编辑器，
Emacs 中的命令也可以接收参数，比如先按住 `M` 再数字键输入数值，然后再按下其它
组合键，b 或 v 等等，就可以实现指定数量的字符、行操作。

设置命令参数更通用的方式是执行 `universal-argument`，`C-u`，例如，`C-u 8 C-f`
会向前移动 8 个字符。

Emacs 中的每一个缓冲区都记录各自的光标位置信息，这个坐标信息称为 Point。
在执行复制、剪切（kill）、粘贴（Yanking）命令时，除了对当前选中的内容操作，
在未选中内容时，还可以对光标当前位置、到已经标记的位置操作，Mark 与 Region。
参考 12 The Mark and the Region。

0. exchange-point-and-mark (`C-x C-x`)
1. set-mark-command (`C-SPC`)
2. mark-whole-buffer (`C-x h`)
3. mark-defun (`C-M-h`)
4. mark-end-of-buffer
5. mark-end-of-sentence
6. mark-page (`C-x C-p`)
7. mark-paragraph (`M-h`)
8. mark-sexp (`C-M-@`)
9. mark-whole-buffer (`C-x h`)

Appending Kills 算是一个高级剪贴功能，有了它就可以将分散的内容统一粘贴。
由于 `append-next-kill` 需要和其它剪切命令紧密合作，所以只能在需要合并内容
的剪切命令执行之前使用 `C-M-w`，否则内容不会被附加到 kill ring 缓冲区最后
一条数据之后，而是产生新的记录。

Emacs 内置了一个称为 Kill Ring 的列表，保存复制、剪切过的数据，最大数量默认
设置为 120 条，使用 `C-h v kill-ring` 可以查看数据。粘贴这个动作称为 Yanking
“拽回”。

类似的还有 Mark Ring，这些都属性堆栈数据结构，Mark Ring 存放的是 Mark 坐标，
`C-<SPC> C-<SPC>` 往里面添加坐标，`C-u C-<SPC>` 则取出坐标并设置光标，
`set-mark-command-repeat-pop`。


河内之塔 (Towers of Hanoi) 据说创世纪时 Benares 有一座波罗教塔，是由三支钻石所撑，
开始时神在第一根棒上放置 64 个由上至下依次由小至大排列的金盘，并命令僧侣将
所有的金盘从第一根石棒移至第三根石棒，并且遵守大盘子在小盘子之下的原则，
若每日仅搬一个盘子，则当盘子全数搬运完毕之时，此塔将毁损、世界末日来临之时。
https://www.masteringemacs.org/article/fun-games-in-emacs

河内塔是一个经典的算法题目，使用分治法可解，分治的是精义在于“分工”，分而
汉之。就像工厂流水线一样，上下游的工人不需要知道最终产品是什么，只需要知道
当下的任务（工序）是做什么。理解这里涉及的任务“边界”很重要，以最简单的
三个盘情况为例，假设 A B C 石柱，其中 B 柱堆放了三个盘。顶层任务（工厂订单）
是将所有盘搬运到 C 柱，隐含意思是将最大的盘搬运到 C 柱。然后，进行第一次任务
分解（拆分成流水线工作），也就是下线任务需要将上一层的盘搬运到 A 柱，这样
才能上大盘搬运到 C 柱上。这一个过程是递归进行的，非常适合计算机处理。对于
人类，不合适深度的递归，需要在实操上寻找逻辑：要搬运一个盘到目标柱子上，
就需要判断其上层盘子的数量，如果是偶数就将最顶层的盘也搬到目标柱子上；如果
是奇数，那么就将顶层盘子搬运到另一个柱子上。


Emacs 程序运行时，图形界面显示出来的窗口（frame）可以分割成多个窗格（Window）。 
每个窗格或者多个窗格可以对应同一个 buffer。所有打开的文件对应一个 buffer，但是
buffer 可以是内存块，不一定和磁盘文件有关。关闭文件相当于删除当前文件的缓冲区。

窗格底部的状态栏，Mode Line，包含了当前 buffer 对象的信息，以及一个上下文菜单。
另外，Buffer name 属性也是一个交互 UI，使用不同的鼠标键点击就可以上下切换文件。


缓冲区列表，`C-x C-b`，`list-buffers`，包含了一些信息，除了 buffer 名称，
容量大小，和相应的文件名，有些是专用内存没有磁盘文件关联。

列表第一列 CRM 代表 Current Readonly Modifed 三列信息，句点代表当前处于活动状态，
右侧 * 表示这个缓冲区内存已经有改动未保存。中间 % 符号代表是一个只读的缓冲区，
使用 `%` 或者 `C-x C-q` 切换读写状态。缓冲区窗格 Buffer Menu 可以修改这些状态。
缓冲区列表不是实时更新的，可以使用 `g` 来刷新，使用 `T` 切换只显示磁盘文件。

    20.2 Listing Existing Buffers
    =============================

     CRM Buffer                Size  Mode              File
     . * .emacs                3294  Emacs-Lisp        ~/.emacs
      %  *Help*                 101  Help
         search.c             86055  C                 ~/cvs/emacs/src/search.c
      %  src                  20959  Dired by name     ~/cvs/emacs/src/
       * *mail*                  42  Mail
      %  HELLO                 1607  Fundamental       ~/cvs/emacs/etc/HELLO
      %  NEWS                481184  Outline           ~/cvs/emacs/etc/NEWS
         *scratch*              191  Lisp Interaction
       * *Messages*            1554  Messages

还有 Mode 指示了 Emacs 处理这种文件的工作模式，每一种模式都代表了 Emacs 提供
不同的功能，状态条 (Mode line) 右侧提供了相应的菜单。

例如 Emacs-Lisp 表示这是一个 Lisp 代码文件。Lisp Interaction 指示这是一个交互式
Lisp 代码，例如输入以下代码，然后执行 `C-M x` 就可以执行 Lisp 代码，或者
使用 `C-j` 将求值结果插入当前文件：

    (print (+ 123 456))


类似的概念是 `minibuffer`，所谓小缓冲是指专用于命令参数的小块内存，它也可以编辑，
只不过编辑的是命令的参数而不是文件数据，所以它只需要很小的内存。


通过“minibuffer”，Emacs 命令可以读取复杂的参数，每次执行命令前用户输入的参数
，比如文件路径、文件名、命令名，甚至是 Lisp 表达式都可以作为命令的参数，都可以
进行编辑，按 RET 确认后即表示完成小缓冲的编辑，提交给命令。由于 `RET`、`TAB`
或者 `SPC`、`?` 等等按键已经绑定功能，它们通常用于自动完成。所以，为了在编辑
命令参数时输入这些字符，可以使用 `C-q C-j` 这样的形式输入一个换行符号，`C-q`
执行 `quoted-insert`，`C-j` 代表一个 control character，等价换行符号。

也可以使用 `C-o`（`open-line`）。制表符号和 ? 号直接直接在 `C-q` 后面输入。

小缓冲经常使用备选列表，可以使用以下操作（9 The Minibuffer 9.4.2 Completion Commands）

1. `M-p` (`previous-history-element`) 移动到上一条 minibuffer 历史记录；
2. `M-n` (`next-history-element`) 移动到下一条 minibuffer 历史记录；
3. `<UP>` 与 `<DOWN>` 类似以上两条，但优先使用备选项目。(`previous-line-or-history-element` and `next-line-or-history-element`) ；
4. `M-r REGEXP <RET>` 使用正则筛选历史早期条目 (`previous-matching-history-element`)。
5. `M-s REGEXP <RET>` 使用正则筛选历史后期条目 (`next-matching-history-element`)。
6. `<TAB>` (`minibuffer-complete`) 自动完成，尽量匹配用户输入的内容；
7. `<SPC>` (`minibuffer-complete-word`) 自动完成一个词，不支持有空格的参数，如文件名；
8. `<RET>` (`minibuffer-complete-and-exit`) 自动完成，将第一个备选参数提供给命令；
9. `?` (`minibuffer-completion-help`) 显示后有备选项。

Emacs 有一个 picture mode 方便编辑 ASCII 图形，使用 `M-x edit-picture` 激活。
编辑完成后使用 `C-c C-c` 退回原来的 major mode。Picture mode 状态下大部分
按键都重新绑定，普通的字母输入使用覆盖方式，退格命令也并不是删除，而是
使用空格替换掉原来的字符。可以设置光标在输入字符后的运动方向，而不是默认
向右移动。参考文档 43 Editing Pictures。


Remote Editing via OpenSSH
========================================================

Emacs 集成了 TRAMP （Transparent Remote (file) Access, Multiple Protocol），透明远程编辑。
基于 FTP/SCP/SSH 安全连接，使用 TRAMP 打开文件时，`C-x C-f`，指定远程路径，
使用 `/ssh:user@address:/path-to-file` 这样的路径，Emacs 根据服务地址和用户账户
访问远程服务器的相应文件或目录。服务器名称可以配置在 `~/.ssh/config` 文件中，
文件路径时就可以指定主机名称，`/ssh:hostname:`。

```sh
    19.15 Remote Files
    ==================
     /METHOD:HOST:FILENAME
     /METHOD:USER@HOST:FILENAME
     /METHOD:USER@HOST#PORT:FILENAME
```

Emacs 会按以下逻辑顺序确定远程编辑使用的协议：

  1. If the host name starts with ‘ftp.’ (with dot), Emacs uses *FTP*.
  2. If the user name is ‘ftp’ or ‘anonymous’, Emacs uses *FTP*.
  3. If the variable ‘tramp-default-method’ is set to ‘ftp’, Emacs uses *FTP*.
  4. If ‘ssh-agent’ is running, Emacs uses *scp*.
  5. Otherwise, Emacs uses *ssh*.

正常工作的 OpenSSH for Windows 7.7，Emacs Tramp 访问时依然可能产生以下问题：

    ➊ Host key verification failed
    ➋ ssh_askpass: posix_spawn: No such file or directory
    ➌ Connection reset by ip port 22

触发➊错误原因有二：没有合适的公钥登录，没有配置好密码登录。

触发➋错误原因：没有配置好自动公钥登录机制，然后使用备选的密码登录时，Emacs 
不能打开 /dev/tty 设备文件向用户请求输入密码，可能与 Msys2 环境问题有问题。

触发➌错误原因：登录的用户未授权，通常包含 unable to resolve user 调试信息。

相对地，Vim 在这远程编辑方面的功能使用就非常流畅，基于 Nread 和 Nwrite：

```sh
vim scp://user@ip:port/path/to/file
```

为了观察 Tramp 连接过程的细节，可以设置 `tramp-verbose` 变量为更高的等级，
输出更多的细节信息，scratch 文件中编写以下 lisp，然后按 `C-M-x` 执行它。
然后，再使用 `C-x C-f` 打开远程文件时就会在 *debug tramp* 文件展示细节：

```lisp
(setq tramp-verbose 10)
(print tramp-verbose)
```

除了 SSH，Tramp 还支持其它协议进行远程编辑，并且 SSH 也有多种连接途径。
安装 PuTTY 还可以使用 `plink -ssh` 进行远程连接：

    pacman -S mingw-w64-x86_64-putty

只是，以上尝试都卡死在 tramp-maybe-open-connection 方法中，远程连接不到。
即使关闭 Windows 防火墙也不行。

[SSH (Secure Shell)](https://www.ssh.com/academy/ssh) 作为最常用的一种安全连接协议，
目前已经存在多种实现，开放源代码方案 OpenSSH 是通用性较好的一个。

1. Tectia SSH client & server for Windows, Unix, Linux - with 24x7 support
2. Tectia SSH for IBM z/OS client & server for IBM z/OS mainframes - with 24x7 support
3. PuTTY client for Windows and Linux
4. WinSCP client for Windows
5. CyberDuck client for Mac
6. OpenSSH server for Unix, Linux

OpenSSH 还在 Github 代码托管服务中使用，不仅可以使用 HTTPS 地址克隆项目，
还可以使用 SSH 地址克隆项目，并且更安全。项目配置文件 .git/config 参考：

```sh
[remote "https"]
    url = https://github.com/Jeangowhy/opendocs.git
    fetch = +refs/heads/*:refs/remotes/https/*

[remote "ssh"]
    url = git@github_jeango:Jeangowhy/opendocs.git
    fetch = +refs/heads/*:refs/remotes/ssh/*
```

Github 网站上可以为用户配置一个公钥登录、授权服务，登录地址固定为 git@github.com。
使用 git config 命令配置的用户账户只能影响 commit 这类的命令，但是 push 命令使用
的账户记录在 Windows 系统上，通过控制面板中的凭据管理器集中处理。如果要实现
在单台计算机上使用不同的公钥登录不同的 Github 账户，那么就需要修改 OpenSSH 
客户端配置文件，通过 `HOST` 配置告诉 ssh 程序使用不同的账户信息登录不同的主机。
配置参考如下，这就是为何上面 .git/comfig 配置文件中出现 github_jeango 这个主机
映射地址，它的目的是告诉 ssh 程序在连接服务器时使用 `IdentityFile` 指定的公钥：

```sh
Host github_jeango
Hostname ssh.github.com
IdentityFile ~/.ssh/id_ecdsa
port 22

Host github_jimbo
Hostname ssh.github.com
IdentityFile ~/.ssh/id_rsa
port 22
```

OpenSSH 客户端默认配置文件是 ~/.ssh/config

通过以上配置，就可以在代码项目中使用指定的账户来操作 push 这样命令：

```sh
$ git push ssh main
The authenticity of host 'ssh.github.com (20.205.243.160)' can't be established.
ECDSA key fingerprint is SHA256:p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added 'ssh.github.com,20.205.243.160' (ECDSA) to the list of known hosts.
Everything up-to-date
```

SSH 工作原理可以由以下图表展示：

    ╔═══════════════════════════════════════════════════════════╗
    ║ 1. Client initiates the connection by contacting server ⇨ ║
    ╚═══════════════════════════════════════════════════════════╝
    ╔═══════════════════════════════════════════════════════════╗
    ║ ⇦             2. Sends server public key                  ║
    ╚═══════════════════════════════════════════════════════════╝
    ╔═══════════════════════════════════════════════════════════╗
    ║ ⇦     3. Negotiate parameters and open secure channel  ⇨  ║
    ╚═══════════════════════════════════════════════════════════╝
    ╔═══════════════════════════════════════════════════════════╗
    ║        4. User login to server host operating system   ⇨  ║
    ╚═══════════════════════════════════════════════════════════╝

    SSH Client Side                                   SSH Server Side 

SSH 授权程序包含以下步骤：

1. Negotiating the version of the protocol to use
2. Negotiating cryptographic algorithms and other options to use
3. Negotiating a one-time session key for encrypting the rest of the session
4. Authenticating the server host using its host key
5. Authenticating the user using a password, public key authentication, or other means.

SSH 系统建立于 [PKI (Public Key Infrastructure)](https://www.ssh.com/academy/pki) 体系，
使用非对称加密技术建立安全连接，然后通过密钥交换算法交换共享密钥加密要传递的数据。
PKI 系统的中心是 Certificate Authority (CA)，它们负责对各种文档进行签名，颁发证书。

整个 SSH 安全系统中，涉及多种密钥概念和文件，它们有各自的用途，简要说明如下：

1. Host Keys 服务器端自身的私钥；
2. Authorized keys 已经授权的客户端公钥列表文件，只有授权的客户才允许登录；
3. Known host keys 客户端已经接受的服务器公钥列表文件，只连接被认可的服务器；
4. Identity key 身份证密钥，属于私钥，用于确认用户身份和授权访问；
5. Session keys 建立连接过程的会话中用以加密数据的共享密钥，属于对称加密；

Authorized keys 和 identity keys 组合称为用户密钥，即用户密钥对，用于验证身份。

[Basic overview of SSH Keys](https://www.ssh.com/academy/ssh-keys)


为了查看连接过程细节，使用 `ssh -v user@ip` 命令，-v 参数表示打印细节信息。
[OpenSSH](https://www.openssh.com/specs.html) 登录流程参考官方文档。SSH 登录过程
涉及四种授权验证机制：

7. Public Key Authentication Method: "publickey"
8. Password Authentication Method: "password"
9. Host-Based Authentication: "hostbased"
0. Certificate based user authentication

另外，还有一种特殊的“无需登录”，The "none" Authentication，这种方式毫无安全性。

密码登录需要用户登录时输入密码，这个输入过程存在泄密的可能性。而公钥登录只
需要服务器保存用户的公钥，同时客户端也要保存服务器公钥的指纹。这对于多用户、
多服务器的大型机构很不方便，如果有员工离职，需要将他的公钥从每台服务器删除。

OpenSSH 提供了一个私钥管理工具，ssh-agent 服务程序用于保持用于公钥授权的私钥。
在使用 ssh 登录到其他机器时，通过 `SSH_AUTH_SOCK` 或 `SSH_AGENT_PID` 环境变量
可以找到代理，然后自动进行身份验证。因此，ssh-agent 就是一个 identity keys 管家，
可以用于实现单点登录 single sign-on (SSO)。

密钥代理工具和 ssh-add 配合使用，使用 `ssh-add -l` 打印当前保管中的密钥列表。
ssh-agent 默认也使用用户主目录下 `.ssh` 子目录中的密钥文件，执行 ssh-add 命令
而不指定参数时，会添加以下默认密钥文件，或者直接指定密钥文件：

    ~/.ssh/id_rsa
    ~/.ssh/id_dsa
    ~/.ssh/id_ecdsa
    ~/.ssh/id_ed25519
    ~/.ssh/identity

加载私钥之后，ssh-add 会尝试加载相应的证书信息，默认读取和私钥文件同名，但后缀
`-cert.pub` 的证书，可以指定。


证书登录很好地解决以上问题，通过引入证书颁发机构 CA（Certificate1 authority），
对信任的服务器颁发服务器证书，对信任的用户颁发用户证书。登录时只需要双方
展示证书，不需要知道彼此的公钥，即可以验证是否可信。

证书登录的主要优点有两个：

1. 用户和服务器不用交换公钥，这更容易管理，也具有更好的可扩展性。
2. 证书有到期时间，而公钥没有。设置有效期很短的证书，进一步提高安全性。

X.509 证书规范是公钥基础设施（PKI）的标准格式，证书文件格式有多种，参考如下：

1. .der .cer，文件是二进制格式，只保存证书，不保存私钥。
2. .pem，一般是文本格式，可保存证书，可保存私钥。
3. .crt，可以是二进制格式，可以是文本格式，与 .der 格式相同，不保存私钥。
4. .pfx .p12，二进制格式，同时包含证书和私钥，一般有密码保护。
5. .jks，二进制格式，同时包含证书和私钥，一般有密码保护。

X.509 certificate 一般结构使用 ASN.1 抽象语法标记表示，Abstract Syntax Notation One。
X.509 数字证书包含以下基本内容，此外还可以附加额外扩展数据：

*   **Version:** 
    The iteration of the X.509 certificate being issued to a user.
*   **Serial Number:** 
    A unique number assigned to each X.509 certificate by the CA.
*   **Signature Algorithm ID:** 
    The specific mathematical algorithm used to create and encrypt the CA's private key.
*   **Issuer:** 
    The name of the CA who issued the X.509 certificate.
*   **Validity Period:** 
    The timeframe in which the X.509 certificate can be used before it expires and becomes obsolete. 
    It includes the start and end dates that the certificate is viable.
*   **Subject:** 
    The user's name or the type of device that receives the X.509 certificate from the CA.
*   **Subject Public Key Information:** 
    This includes the algorithm used to generate the public key attached to the X.509 certificate, 
    the public key itself, and additional data such as the key's size and unique function.
*   **Certificate Signature Algorithm:** 
    The type of algorithm involved in signing and encrypting the X.509 certificate.
*   **Certificate Signature:** 
    A long, alphanumerical string unique to the identity of the CA issuing the X.509 certificate.

-   https://www.ssh.com/academy/pki/x.509-certificate
-   https://cvsweb.openbsd.org/src/usr.bin/ssh/PROTOCOL.certkeys
-   https://www.ietf.org/rfc/rfc5280.txt
    Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile

使用 OpenSSL 工具可以在各种格式之间转换。但是 OpenSSL 生成的证书较特殊：

    Certified keys are represented using new key types:

         ssh-rsa-cert-v01@openssh.com
         ssh-dss-cert-v01@openssh.com
         ecdsa-sha2-nistp256-cert-v01@openssh.com
         ecdsa-sha2-nistp384-cert-v01@openssh.com
         ecdsa-sha2-nistp521-cert-v01@openssh.com
         ssh-ed25519-cert-v01@openssh.com

    Two additional types exist for RSA certificates to force use of
     SHA-2 signatures (SHA-256 and SHA-512 respectively):

         rsa-sha2-256-cert-v01@openssh.com
         rsa-sha2-512-cert-v01@openssh.com

SSH 服务器使用专用的公钥列表文件记录认可用户身份，`~/.ssh/authorized_keys` 文件。
需要使用公钥登录的用户，其公钥就需要附加到这个文件后面。服务器端可以使用 
`sshd -d` 启动命令，用于查看调试信息，或者使用 `sshd -T` 检查配置文件是否有问题。

1. https://mirrors.aliyun.com/pub/OpenBSD/OpenSSH/portable/
2. https://codeload.github.com/PowerShell/openssh-portable/zip/refs/tags/v9.4.0.0
2. https://github.com/PowerShell/openssh-portable/archive/refs/tags/v9.4.0.0.zip
3. https://github.com/powershell/win32-openssh/wiki

根据 OpenSSH for Windows v7.7.0.0 Wiki 文档，还有大量 OpenSSH 配置项未能支持。
主要支持了用户组、Windows 域用户，工作组用户、用户组和互联网账户严格解析为
其本地帐户名（没有域部分，类似于标准 Unix 名称）。域用户和组严格解析为
NameSamCompatible 格式，`Domain_short_name\user_name`。所有基于用户/用户组的配置
规则都需要遵守此格式。

- Ex. for domain users and groups
  - `DenyUsers contoso\admin@192.168.2.23` : blocks contoso\admin from 192.168.2.23
  - `DenyUsers contoso\*`  : blocks all users from contoso domain
  - `AllowGroups contoso\sshusers` : only allow users from contoso\sshusers group
  - `AllowGroups "contoso\ssh users"` : only allow users from "contoso\ssh users" group
- Ex. for local users and groups
  - `AllowUsers localuser@192.168.2.23`
  - `AllowGroups sshusers`

OpenSSH 移植到 Windows 的版本暗病多了，感谢 MS 团队，他们不仅创造问题，
还好心搞了 win32-openssh wiki 页面帮解决难题，真的要哭死给他们看。
参考 Fix SSH file permissions。

主要是资源文件权限处理问题，如果配置文件、密钥文件权限配置不正确，将不能
正常运行 sshd 服务。问题基于 Windows 与 Unix 系统文件权限检查的两点差异：

- SuperUser on Unix maps to either [System (SY)][SY] or AdministratorsGroup (AG) on Windows. 
- Permission controlling in Windows is more granular than in Unix. 

Windows `LocalSystem` 账户是服务控制管理器使用的预定义本地帐户，怪物账户，没有
一般账户的管理流程。安全子系统无法识别此帐户，因此不能在对 LookupAccountName 
函数的调用中指定其名称。它在本地计算机上具有广泛的权限，并充当网络的计算机。
其令牌包括 `NT AUTHORITY\SYSTEM` 和 `BUILTIN\Administrators SID`。这些帐户可以访问
大多数系统对象。所有区域设置中的帐户名称均为 `.\LocalSystem`。名称也可以使用
LocalSystem 或 ComputerName\LocalSystem。此帐户没有密码。如果在对 CreateService 或 
ChangeServiceConfig 函数的调用中指定 LocalSystem 帐户，则会忽略所提供的任何密码。

Host Keys 文件只能由System (SY) 和 AdministratorsGroup (AG) 账户持有。

用户密钥文件，不能由多个用户持有，任何其它用户访问权限都会导致密钥失效。
运行 ssh 时会警告：

    WARNING: UNPROTECTED PRIVATE KEY FILE!

`authorized_keys` 是用户关联的 authorized public keys 列表文件，用于 key-based 
的自动用户授权登录流程。未经授权的访问会损害用户账户，它不应该也不
能被其它用户访问。

默认的管理组公钥认证列表文件也只能由 SYSTEM 和 Administrators group 账户访问：
`%programdata%\ssh\administrators_authorized_keys`

[SY]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms684190(v=vs.85).aspx

公钥授权登录的工作流程，包括密钥对生成、使用公钥，公钥签名（生成证书）：

```sh
### Usage from client-side (`ssh`)
# 1. Generate a key pair on the client (preferably with a passphrase):
ssh-keygen -t rsa -f id_rsa
# 2. Register private key with ssh-agent (optional, for single sign-on experience)
net start ssh-agent
ssh-add id_rsa
# 3. Login using private key
ssh -i ./id_rsa user@host             # (workgroup user)
ssh -i ./id_rsa -l user@domain host   # (domain user)

### Setup SSHD server for certificate based user authentication
# 1. Generate CA keys (just like any other keys)
ssh-keygen -t rsa -f ca_userkeys
# 2. Register above key as trusted CA for sshd. Add following entry in sshd_config
# - Path is relative to sshd binaries directory. Absolute path is recommended to avoid confusion
TrustedUserCAKeys ca_userkeys.pub
# 3. sign user keys using ssh-keygen
# - `username` should match the user to be authenticated
ssh-keygen -s ca_userkeys -I cert_identity -V -1w:+54w5d -n username id_rsa.pub
```

证书授权登录机制中，服务器和客户端都需要持有自己的证书。这里使用自签名证书，
具体操作流程是：

1. 使用 ssh-keygen 建用于自签名用的 CA 密钥对，对应以上 ca_userkeys；
2. 使用 ssh-keygen 和 CA 密钥对用户和服务器的公钥进行签名，生成各自的证书；

配置好证书文件，用户登录服务器时，双方自动向对方展示证书，服务器利用可信 CA 验证。

使用 ssh-keygen 提供的证书签发功能时，使用 -h 参数表示签发的是服务器证书，
而不是客户证书。生成的证书文件会在公钥文件名的基础上，添加 `-cert` 后缀，
例如，`id_rsa-cert.pub`。公钥文件默认扩展名为 .pub，私钥没有扩展名。创建密钥时，
ssh-keygen 会询问输入 passphrase，它相当于一个保护密钥的密码，可以不设置，设置后
还可以使用 `-p` 修改。并且注意，对于 Host Keys 一定不能设置。可以使用任何字符，
通常 10-30 个为好。单纯英文字母并不好，单个字母的信息熵（entropy）只有 1-2 bits。

签发客户证书时，只需要指定 CA 密钥和 "key identifier"，对应命令中的 -s 和 -l 参数。
`-I certificate_identity` 指定的是一个标识符（字符串），它作为 Key ID 写入证书文件中。
这个 ID 不同于用户身份密钥（Identity Key），但也会用于登录时对用户进行认证。
证书有效期使用 `-V` 参数指定，负号表示当下之前的时间。
密钥身份会在服务器端验证证书有效性时使用。

一张证书（Certificates）除了包含 public key，一些身份信息（identity information），还
可选地包含委托人信息（principal），例如 user 或 host。根据使用场合而定，对于远程登录，
那就要包含用户名称，如果要限制登录主机，也可以添加这部分信息，使用逗号分隔。

用户名或主机名信息通过 `-n` 参数指定，这部分信息会写入证书的 Principals 字段中。

```sh
# signs user public key and review certificate information
ssh-keygen -s ca_userkeys -I cert_identity -V -1w:+54w5d -n Jeango id_rsa.pub
ssh-keygen -L -f id_rsa-cert.pub

id_rsa-cert.pub:
        Type: ssh-rsa-cert-v01@openssh.com user certificate
        Public key: RSA-CERT SHA256:SGofxZ6qk6LAoYy0wXTTomCr37ZYfJwgxyeIq3+ufGQ
        Signing CA: RSA SHA256:OW4EEfy7xKsL6udqZMH3CzpObdamK6rPNVNhyP/ED2c
        Key ID: "cert_identity"
        Serial: 0
        Valid: from 2023-11-08T21:50:28 to 2024-12-02T21:50:28
        Principals: 
                Jeango
        Critical Options: (none)
        Extensions: 
                permit-X11-forwarding
                permit-agent-forwarding
                permit-port-forwarding
                permit-pty
                permit-user-rc
```

客户、服务器证书对应在配置文件使用 `CertificateFile` 和 `HostCertificate` 指定证书路径。

为了让服务能够验证客户证书，就需要将所有可信任 CA 机构的公钥文件添加到 
TrustedUserCAKeys 列表文件中。某些证书不再使用时，就可以吊销，将对应的公钥保存到
Key Revocation Lists 文件中：

    TrustedUserCAKeys /etc/ssh/ca_userkeys.pub
    RevokedKeys       /etc/ssh/revoked_keys

    HostCertificate /etc/ssh/ssh_host_rsa_key-cert.pub

HostKey 默认按以下顺序查找，或者命令行参数 `-h host_key_file` 指定服务器端密钥文件：

    /etc/ssh/ssh_host_ecdsa_key, 
    /etc/ssh/ssh_host_ed25519_key
    /etc/ssh/ssh_host_rsa_key

如果服务器有密钥有对有相应的证书文件，使用 `-c host_certificate_file` 指定。
证书用于密钥交换过程中证明服务器身份，必需和密钥文件对应。

Windows 操作系统下，OpenSSH 对应以下位置找配置文件：

1. sshd 服务端默认配置文件：`%programdata%\ssh\sshd_config`
2. ssh 客户端配置文件按以下顺序搜索：
    1. 使用 ssh.exe -F 参数指定；
    2. 使用用户目录中的配置文件：`%userprofile%\.ssh\config`
    3. 使用系统级配置文件：`%programdata%\ssh\ssh_config`

涉及公钥、密码登录方式最基本的配置如下

```sh
    # To disable tunneled clear text passwords, change to no here!
    PasswordAuthentication yes
    PermitEmptyPasswords yes

    #HostKey __PROGRAMDATA__/ssh/ssh_host_rsa_key
    #HostKey __PROGRAMDATA__/ssh/ssh_host_dsa_key
    #HostKey __PROGRAMDATA__/ssh/ssh_host_ecdsa_key
    #HostKey __PROGRAMDATA__/ssh/ssh_host_ed25519_key

    PubkeyAuthentication yes

    # The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
    # but this is overridden so installations will only check .ssh/authorized_keys
    AuthorizedKeysFile  .ssh/authorized_keys

    # Example of overriding settings on a per-user basis
    Match Group administrators
          AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys
```

Windows 系统上有一个奇怪现象，使用不存在的账户登录时，会在公钥验证失败后进入密码
登录，并提示用户输入密码。但是使用系统存在的账户登录时，则会直接 Connection reset。

当然，账户不存在输入密码也是不可能登录成功，服务端 Failed password for invalid user，
客户端则接收到 Disconnected。但是会经过多轮公钥检测，所有公钥都不适用再尝试密码：

    debug1: attempt 5 failures 4 [preauth]
    debug1: keyboard-interactive devs  [preauth]
    debug1: auth2_challenge: user=NOBODY devs= [preauth]
    debug1: kbdint_alloc: devices '' [preauth]
    debug1: userauth-request for user NOBODY service ssh-connection method password [preauth]
    debug1: attempt 6 failures 5 [preauth]
    debug1: Windows authentication failed for user: NOUSER domain: . error: 1326
    Failed password for invalid user NOBODY from localhost port 18327 ssh2
    maximum authentication attempts exceeded for invalid user NOBODY from localhost port 18327 ssh2 [preauth]
    Disconnecting invalid user NOBODY localhost port 18327: Too many authentication failures [preauth]

使用账户登录，服务器端 get_user_token 失败，还没到公钥检测步骤，[preauth] 阶段止步：

    debug1: Local version string SSH-2.0-OpenSSH_for_Windows_7.7
    debug1: sshd version OpenSSH_for_Windows_7.7, LibreSSL 2.6.5
    debug1: list_hostkey_types: ssh-rsa,rsa-sha2-512,rsa-sha2-256 [preauth]
    debug1: SSH2_MSG_KEXINIT sent [preauth]
    debug1: SSH2_MSG_KEXINIT received [preauth]
    debug1: kex: algorithm: curve25519-sha256 [preauth]
    debug1: kex: host key algorithm: rsa-sha2-512 [preauth]
    debug1: kex: client->server cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none [preauth]
    debug1: kex: server->client cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none [preauth]
    debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]
    debug1: rekey after 134217728 blocks [preauth]
    debug1: SSH2_MSG_NEWKEYS sent [preauth]
    debug1: expecting SSH2_MSG_NEWKEYS [preauth]
    debug1: SSH2_MSG_NEWKEYS received [preauth]
    debug1: rekey after 134217728 blocks [preauth]
    debug1: KEX done [preauth]
    debug1: userauth-request for user administrator service ssh-connection method none [preauth]
    debug1: attempt 0 failures 0 [preauth]
    debug1: get_user_token - unable to generate user token for administrator as i am not running as system
    ga_init, unable to resolve user administrator

错误发生在 Initialize group access list，ga_init 方法中。SSH_MSG_KEXINIT 这些是密钥协商
过程中产生的消息，SSH2 前缀表示属于 SSH protocol version 2 Core RFCs 规范引入的消息。
INIT 后缀表示初始化密钥交换，NEWKEYS 当然表示新的密钥正在协商中。
参考 RFC8308  Extension Negotiation in the Secure Shell (SSH) Protocol

使用当前运行 sshd 服务和客户端的系统账户成功进行公钥登录，get_user_token 函数
没有问题，以下调试信息显示 Match Group 发生作用，但是没有相关的域服务器认证，
继续使用公钥登录流，由客户端推送相应的公钥文件：

    debug1: userauth-request for user ocean service ssh-connection method none [preauth]
    debug1: attempt 0 failures 0 [preauth]
    debug1: user ocean matched group list administrators at line 90
    debug1: Windows authentication failed for user: ocean domain: . error: 1327
    Failed none for ocean from localhost port 15062 ssh2
    debug1: userauth-request for user ocean service ssh-connection method publickey [preauth]
    debug1: attempt 1 failures 0 [preauth]


Secure Shell (SSH) 安全连接配置中，服务器中应该有多个 Host Keys，对应不同的加密算法。
具体使用什么算法取决于和客户建立连接时协商结果。

SSH 核心技术规范文档有 5 份，扩展部分的文档有 18 份：

1. RFC4250 - SSH Protocol Assigned Numbers IANA 机构分配码
2. RFC4251 - SSH Protocol Architecture     协议构架
3. RFC4252 - SSH Authentication Protocol   认证协议
4. RFC4253 - SSH Transport Layer Protocol  传输层协议
5. RFC4254 - SSH Connection Protocol       连接协议

IANA (Internet Assigned Numbers Authority) 互联网数字分配机构是互联网正常运作的协调机构。
Internet 作为一个全球范围的不受集权控制的全球网络，为了使网络在全球范围内协调，
存在对互联网一些关键的部分达成技术共识的需要，而这就是 IANA 的任务。更准确地说，
IANA 分配和维护在互联网技术标准（或者称为协议）中的唯一编码和数值系统。

SSH 协议而言，IANA 分配码就包含 Message Numbers 中用于各种消息类型的信息号码。
SSH Protocol packets 消息类型编码使用 1 ~ 255 之间的值，值越小，消息类型越低层。
比如，1 号消息就是 SSH_MSG_DISCONNECT，属于传输层，用于表达一个连接的断开。
这个消息包含一个 reason code，供客户端调试使用，用于确实问题所在。

     Symbolic Name                                  reason code
     -------------                                  -----------
     SSH_DISCONNECT_HOST_NOT_ALLOWED_TO_CONNECT          1
     SSH_DISCONNECT_PROTOCOL_ERROR                       2
     SSH_DISCONNECT_KEY_EXCHANGE_FAILED                  3
     SSH_DISCONNECT_RESERVED                             4
     SSH_DISCONNECT_MAC_ERROR                            5
     SSH_DISCONNECT_COMPRESSION_ERROR                    6
     SSH_DISCONNECT_SERVICE_NOT_AVAILABLE                7
     SSH_DISCONNECT_PROTOCOL_VERSION_NOT_SUPPORTED       8
     SSH_DISCONNECT_HOST_KEY_NOT_VERIFIABLE              9
     SSH_DISCONNECT_CONNECTION_LOST                     10
     SSH_DISCONNECT_BY_APPLICATION                      11
     SSH_DISCONNECT_TOO_MANY_CONNECTIONS                12
     SSH_DISCONNECT_AUTH_CANCELLED_BY_USER              13
     SSH_DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE      14
     SSH_DISCONNECT_ILLEGAL_USER_NAME                   15

RSA 非对称保密系统中，使用公钥/私钥对来进行加密解密，任意一个 key 加密的数据，
只有另一个 key 可以解密。之所以分公钥、私钥，是因为必需保证其中一个处理安全保密
状态。如果两个 key 都被公开，那么保密系统就失去意义了。所以算法设计上，会生成
较长的 key 作为私钥，而公钥通常只有几十字节。

由于 RSA 加密解密系算法是幂指数运算，非常耗费 CPU，通常只用在交换对称密钥、
数字签名的场合。而实际数据的加密解密还是使用传统的对称加密算法，例如使用
AES (Advanced Encryption Standard) 算法加密。

对称保密系统中使用同一个密钥进行加密、解密，由通信的双方共同持有。这就需要使用
RSA 算法实现在公开网络上交换这个真正用于加密数据的密钥。对称加密算法设计之初
是为用户数据服务的，所以处理能力更快，领先非对称加密算法好几个数量级。

SSH 安全连接的工作过程：通常客户端第一次连接 SSH 服务器的时候，服务器会明文推送
一个 RSA 公钥。服务器向客户端推送自己的公钥，就是向客户端展示自己的身份证明。
客户端接收到服务器公钥时，有三种选择：

1.  接受并保存下来。即信任服务器 RSA 公钥，记录到 known_hosts 留着永久使用。
2.  接受一次。只用于一次通信，不保存服务器 RSA 公钥。
3.  拒绝。显然，客户端没有服务器的公钥，也无法连接 SSH 服务器。

接下来，如果配置了公钥登录，客户端就需要向服务器展示自己的公钥以证明身份。

RSA 系统还需要考虑中间人攻击 MITM (Man in the middle attacks)。中间人也就是在服务器
与客户端中间的设备，当客户端向服务器发起连接请求，被网络中间环节捕获，并使用
假冒消息回复客户端，另一方面又向服务器发出假冒客户端的消息，在真正的通信双方
之间担任一个“代理人”的角色。

在接受 RSA 公钥之前，客户端并没有服务器 RSA 公钥，问题就是客户端如何知道接收
到的 RSA 公钥真的是服务器的呢？答案：不知道！也许是伪造的，也许真的是服务器。
这个问题直接催生了 CA 证书颁发机构，通过公众认可、可信任的机构授权，使用服务
获得一个公共认证的身份。

数字证书就是 CA (Certificate Authority) 机构认证过的公钥，数字证书和公钥一样是公开。
证书生产过程简要过程：数字证书申请人首先提交包含能证明自己身份信息认证签名
请求文件 CSR (Certificate Signing Request)，然后使用 HASH 算法摘要这个 CSR 文件，
CA 授权中心使用自己的私钥加密这些摘要信息，即得到一个数字签名 (digital signature)，
这些信息组合在一些就生成了一张证书。用户验证证书真伪时，同样先获取 CSR 文件的
摘要信息，再通过证书颁发机构的公钥解密证书包含的数字签名，两部分信息进行比对，
如果一致，即证明身份是 CA 授权的身份，不可能伪造。

因为 CA 机构具有公信力，所以 CA 信任的机制同样也具体这种信任关系，从而形成
一条信任关系链。CA 机构附加在证书文件上的数字签名（公钥数字签名）就相当于
身份证号码。数字签名只有被签名（加密）信息的发送者才能产生，他人无法伪造,
因为伪造无法使用公钥解密。数字签名是对信息的发送者发送信息真实性的有效证明。


RSA 私钥如果那一天泄露/破解了呢？意味着历史上用户加密数据传输都可以解密，
这是无法容忍的。所以引入了 PFS (Perfect Forward Secrecy) 机制，保证破解通信过程中
任何一个密钥，只能解密特定一段数据，却不能解密整个通信过程的数据。

PFS 安全机制通常使用 DH (Diffie-Hellman) 算法在客户端、服务器之间动态交换密钥。
这是最早的密钥交换算法之一，DH 算法每隔一段时间进行 re-key，即重新协商双方
的共享密钥，通信双方的共享密钥周期性变更以实现 PFS 安全性。即使破解了其中
一个密钥，依然不能获取到完整的数据，除非破解所有密钥。

密钥配送问题通常有三种解决方式：线下约定共享密钥、通过公钥密码体系配送共享密钥、
使用密钥交换协议，Diffie-Hellman Key Exchange，简称 DHKE。

DH 密钥协商算法不会在网络上明文传递密钥，双方通过算法协商出一个共同的密钥，
但是 DH 算法并未解决中间人攻击。


以下是一个使用 publickey + password 双重登录机制的成功连接的过程细节说明：

Key types 定义在 enum sshkey_types，常用的几种值如下：

1. KEY_RSA,   // id_rsa has type 0
2. KEY_DSA,   // id_dsa has type 1, but as you have no id_dsa key file, -1 is used
3. KEY_ECDSA, // id_ecdsa has type 2

建立连接时，客户端尝试从默认的密钥文件目录下查找公钥文件（identity file），注意，
证书文件也包含公钥。进一步产生密钥加载状态信息（key_load_public）。如果找到可用的
公钥文件，则推送 给服务器。以下 ➊ 调试信息显示，经过多次尝试后没有找到有效的
公钥文件，然后启用后备的密码登录验证机制。注意 ➋ ➌ ➍，这时是客户端向服务器
推送了公钥文件，但是与服务器要求的算法不一致被拒：ssh-rsa (expected rsa-sha2-512)。

```sh
$  ssh -v jeango@localhost
OpenSSH_for_Windows_7.7p1, LibreSSL 2.6.5
debug1: Reading configuration data __PROGRAMDATA__/ssh/ssh_config
debug1: Connecting to localhost [::1] port 22.
debug1: Connection established.
debug1: identity file C:/Users/OCEAN/.ssh/id_rsa type 0 ➊
debug1: key_load_public: No such file or directory ➊
debug1: identity file C:/Users/OCEAN/.ssh/id_rsa-cert type -1 ➊
debug1: key_load_public: No such file or directory ➊
debug1: identity file C:/Users/OCEAN/.ssh/id_dsa type -1 ➊
debug1: key_load_public: No such file or directory ➊
debug1: identity file C:/Users/OCEAN/.ssh/id_dsa-cert type -1 ➊
debug1: identity file C:/Users/OCEAN/.ssh/id_ecdsa type 2 ➊
debug1: key_load_public: No such file or directory ➊
debug1: identity file C:/Users/OCEAN/.ssh/id_ecdsa-cert type -1 ➊
debug1: identity file C:/Users/OCEAN/.ssh/id_ed25519 type 3 ➊
debug1: key_load_public: No such file or directory ➊
debug1: identity file C:/Users/OCEAN/.ssh/id_ed25519-cert type -1 ➊
debug1: key_load_public: No such file or directory ➊
debug1: identity file C:/Users/OCEAN/.ssh/id_xmss type -1 ➊
debug1: key_load_public: No such file or directory ➊
debug1: identity file C:/Users/OCEAN/.ssh/id_xmss-cert type -1 ➊
debug1: Local version string SSH-2.0-OpenSSH_for_Windows_7.7
debug1: Remote protocol version 2.0, remote software version OpenSSH_8.2p1 Ubuntu-4ubuntu0.5
debug1: match: OpenSSH_8.2p1 Ubuntu-4ubuntu0.5 pat OpenSSH* compat 0x04000000
debug1: Authenticating to localhost:22 as 'jeango'
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: algorithm: curve25519-sha256
debug1: kex: host key algorithm: rsa-sha2-512
debug1: kex: server->client cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none
debug1: kex: client->server cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ssh-rsa SHA256:Kzw79sZsSxXCvx1UeGQEXhObYUApk3VdtV65phuWNgo
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in C:/Users/OCEAN/.ssh/known_hosts:14
debug1: rekey after 134217728 blocks
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: rekey after 134217728 blocks
debug1: SSH2_MSG_EXT_INFO received
debug1: kex_input_ext_info: server-sig-algs=<ssh-ed25519,sk-ssh-ed25519@openssh.com,ssh-rsa,rsa-sha2-256,rsa-sha2-512,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,sk-ecdsa-sha2-nistp256@openssh.com>
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: RSA SHA256:SGofxZ6qk6LAoYy0wXTTomCr37ZYfJwgxyeIq3+ufGQ C:/Users/OCEAN/.ssh/id_rsa ➋
debug1: Server accepts key: pkalg rsa-sha2-512 blen 407 ➌
warning: agent returned different signature type ssh-rsa (expected rsa-sha2-512) ➍
debug1: Authentications that can continue: publickey,password
debug1: Offering public key: RSA SHA256:YM8iJvccRJ2Z9u6q0+hIU5lYNJUhl9peqMYw6YMh22k id_rsa
debug1: Authentications that can continue: publickey,password
debug1: Trying private key: C:/Users/OCEAN/.ssh/id_dsa
debug1: Offering public key: ECDSA SHA256:iyWSeGrUJSfeISO4EvuhU/+gNTlzWm5m5kKmMsoMpDg C:/Users/OCEAN/.ssh/id_ecdsa
debug1: Authentications that can continue: publickey,password
debug1: Offering public key: ED25519 SHA256:IN5O4aMLHewRjrYZfawK86soOuuevosxMG5RGXAKYkk C:/Users/OCEAN/.ssh/id_ed25519
debug1: Authentications that can continue: publickey,password
debug1: Trying private key: C:/Users/OCEAN/.ssh/id_xmss
debug1: Next authentication method: password
debug1: read_passphrase: can't open /dev/tty: No such file or directory
jeango@localhost's password:
debug1: Authentication succeeded (password).
Authenticated to localhost ([::1]:22).
debug1: channel 0: new [client-session]
debug1: Requesting no-more-sessions@openssh.com
debug1: Entering interactive session.
debug1: pledge: network
GetConsoleMode on hOutputConsole failed with 6

debug1: client_input_global_request: rtype hostkeys-00@openssh.com want_reply 0
debug1: Remote: /home/jeango/.ssh/authorized_keys:1: key options: agent-forwarding port-forwarding pty user-rc x11-forwarding
debug1: Remote: /home/jeango/.ssh/authorized_keys:1: key options: agent-forwarding port-forwarding pty user-rc x11-forwarding
exit
debug1: client_input_channel_req: channel 0 rtype exit-status reply 0
debug1: client_input_channel_req: channel 0 rtype eow@openssh.com reply 0
debug1: channel 0: free: client-session, nchannels 1
Connection to localhost closed.
Transferred: sent 3908, received 5036 bytes, in 2.9 seconds
Bytes per second: sent 1333.3, received 1718.2
debug1: Exit status 0
```

以下是使用公钥证书完成自动登录的会话过程，主要是 ➊ ➋ ➌ ➍，从检出公钥文件，
推送给服务器，等待服务器接受客户端公钥并通过验证，然后就可以开始安全连接：

```sh
$ ssh -v jeango@localhost
OpenSSH_8.2p1 Ubuntu-4ubuntu0.5, OpenSSL 1.1.1f  31 Mar 2020
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 19: include /etc/ssh/ssh_config.d/*.conf matched no files
debug1: /etc/ssh/ssh_config line 21: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/jeango/.ssh/id_rsa type 0
debug1: identity file /home/jeango/.ssh/id_rsa-cert type -1
debug1: identity file /home/jeango/.ssh/id_dsa type -1
debug1: identity file /home/jeango/.ssh/id_dsa-cert type -1
debug1: identity file /home/jeango/.ssh/id_ecdsa type -1
debug1: identity file /home/jeango/.ssh/id_ecdsa-cert type -1
debug1: identity file /home/jeango/.ssh/id_ecdsa_sk type -1
debug1: identity file /home/jeango/.ssh/id_ecdsa_sk-cert type -1
debug1: identity file /home/jeango/.ssh/id_ed25519 type -1
debug1: identity file /home/jeango/.ssh/id_ed25519-cert type -1
debug1: identity file /home/jeango/.ssh/id_ed25519_sk type -1
debug1: identity file /home/jeango/.ssh/id_ed25519_sk-cert type -1
debug1: identity file /home/jeango/.ssh/id_xmss type -1
debug1: identity file /home/jeango/.ssh/id_xmss-cert type -1
debug1: Local version string SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5
debug1: Remote protocol version 2.0, remote software version OpenSSH_8.2p1 Ubuntu-4ubuntu0.5
debug1: match: OpenSSH_8.2p1 Ubuntu-4ubuntu0.5 pat OpenSSH* compat 0x04000000
debug1: Authenticating to localhost:22 as 'jeango'
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: algorithm: curve25519-sha256
debug1: kex: host key algorithm: ecdsa-sha2-nistp256
debug1: kex: server->client cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none
debug1: kex: client->server cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ecdsa-sha2-nistp256 SHA256:Cb1TaBugGJtDvGIIm6MtbvKdCo188ch50PgTcMplsz4
debug1: Host 'localhost' is known and matches the ECDSA host key.
debug1: Found key in /home/jeango/.ssh/known_hosts:1
debug1: rekey out after 134217728 blocks
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: rekey in after 134217728 blocks
debug1: Will attempt key: /home/jeango/.ssh/id_rsa RSA SHA256:SGofxZ6qk6LAoYy0wXTTomCr37ZYfJwgxyeIq3+ufGQ➊
debug1: Will attempt key: /home/jeango/.ssh/id_dsa
debug1: Will attempt key: /home/jeango/.ssh/id_ecdsa
debug1: Will attempt key: /home/jeango/.ssh/id_ecdsa_sk
debug1: Will attempt key: /home/jeango/.ssh/id_ed25519
debug1: Will attempt key: /home/jeango/.ssh/id_ed25519_sk
debug1: Will attempt key: /home/jeango/.ssh/id_xmss
debug1: SSH2_MSG_EXT_INFO received
debug1: kex_input_ext_info: server-sig-algs=<ssh-ed25519,sk-ssh-ed25519@openssh.com,ssh-rsa,rsa-sha2-256,rsa-sha2-512,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,sk-ecdsa-sha2-nistp256@openssh.com>
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/jeango/.ssh/id_rsa RSA SHA256:SGofxZ6qk6LAoYy0wXTTomCr37ZYfJwgxyeIq3+ufGQ➋
debug1: Server accepts key: /home/jeango/.ssh/id_rsa RSA SHA256:SGofxZ6qk6LAoYy0wXTTomCr37ZYfJwgxyeIq3+ufGQ➌
debug1: Authentication succeeded (publickey).➍
Authenticated to localhost ([127.0.0.1]:22).
debug1: channel 0: new [client-session]
debug1: Requesting no-more-sessions@openssh.com
debug1: Entering interactive session.
debug1: pledge: network
debug1: client_input_global_request: rtype hostkeys-00@openssh.com want_reply 0
debug1: Remote: /home/jeango/.ssh/authorized_keys:1: key options: agent-forwarding port-forwarding pty user-rc x11-forwarding
debug1: Remote: /home/jeango/.ssh/authorized_keys:1: key options: agent-forwarding port-forwarding pty user-rc x11-forwarding
debug1: Sending environment.
debug1: Sending env LANG = C.UTF-8
Welcome to Ubuntu 20.04.5 LTS (GNU/Linux 5.10.102.1-microsoft-standard-WSL2 x86_64)
jeango@DESKTOP-CBSK60R:~$ exit
logout
debug1: client_input_channel_req: channel 0 rtype exit-status reply 0
debug1: client_input_channel_req: channel 0 rtype eow@openssh.com reply 0
debug1: channel 0: free: client-session, nchannels 1
Connection to localhost closed.
Transferred: sent 3680, received 4364 bytes, in 8.0 seconds
Bytes per second: sent 458.9, received 544.1
debug1: Exit status 0
```

以下是 Emacs 环境中执行 Shell command: `ssh -v jeango@localhost` 连接失败
时的调试信息：

```sh
OpenSSH_for_Windows_7.7p1, LibreSSL 2.6.5
debug1: Reading configuration data __PROGRAMDATA__/ssh/ssh_config
debug1: Connecting to localhost [localhost] port 22.
debug1: Connection established.
debug1: identity file C:/Users/OCEAN/.ssh/id_rsa type 0
debug1: key_load_public: No such file or directory
debug1: identity file C:/Users/OCEAN/.ssh/id_rsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file C:/Users/OCEAN/.ssh/id_dsa type -1
debug1: key_load_public: No such file or directory
debug1: identity file C:/Users/OCEAN/.ssh/id_dsa-cert type -1
debug1: identity file C:/Users/OCEAN/.ssh/id_ecdsa type 2
debug1: key_load_public: No such file or directory
debug1: identity file C:/Users/OCEAN/.ssh/id_ecdsa-cert type -1
debug1: identity file C:/Users/OCEAN/.ssh/id_ed25519 type 3
debug1: key_load_public: No such file or directory
debug1: identity file C:/Users/OCEAN/.ssh/id_ed25519-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file C:/Users/OCEAN/.ssh/id_xmss type -1
debug1: key_load_public: No such file or directory
debug1: identity file C:/Users/OCEAN/.ssh/id_xmss-cert type -1
debug1: Local version string SSH-2.0-OpenSSH_for_Windows_7.7
debug1: Remote protocol version 2.0, remote software version OpenSSH_for_Windows_7.7
debug1: match: OpenSSH_for_Windows_7.7 pat OpenSSH* compat 0x04000000
debug1: Authenticating to localhost:22 as 'jeango'
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: algorithm: curve25519-sha256
debug1: kex: host key algorithm: ecdsa-sha2-nistp256
debug1: kex: server->client cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none
debug1: kex: client->server cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ecdsa-sha2-nistp256 SHA256:eLf04Yz/GVfQGQbp/lrr5eKWZ23anTidDf4Tp8GJskI
debug1: Host 'localhost' is known and matches the ECDSA host key.
debug1: Found key in C:/Users/OCEAN/.ssh/known_hosts:27
debug1: rekey after 134217728 blocks
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: rekey after 134217728 blocks
debug1: SSH2_MSG_EXT_INFO received
debug1: kex_input_ext_info: server-sig-algs=<ssh-ed25519,ssh-rsa,rsa-sha2-256,rsa-sha2-512,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521>
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug1: Next authentication method: publickey
debug1: Offering public key: RSA SHA256:SGofxZ6qk6LAoYy0wXTTomCr37ZYfJwgxyeIq3+ufGQ C:/Users/OCEAN/.ssh/id_rsa
debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug1: Offering public key: RSA SHA256:YM8iJvccRJ2Z9u6q0+hIU5lYNJUhl9peqMYw6YMh22k id_rsa
debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug1: Trying private key: C:/Users/OCEAN/.ssh/id_dsa
debug1: Offering public key: ECDSA SHA256:iyWSeGrUJSfeISO4EvuhU/+gNTlzWm5m5kKmMsoMpDg C:/Users/OCEAN/.ssh/id_ecdsa
debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug1: Offering public key: ED25519 SHA256:IN5O4aMLHewRjrYZfawK86soOuuevosxMG5RGXAKYkk C:/Users/OCEAN/.ssh/id_ed25519
debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug1: Trying private key: C:/Users/OCEAN/.ssh/id_xmss
debug1: Next authentication method: keyboard-interactive
debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug1: Next authentication method: password
debug1: read_passphrase: can't open /dev/tty: No such file or directory
CreateProcessW failed error:2
ssh_askpass: posix_spawn: No such file or directory
Received disconnect from localhost port 22:2: Too many authentication failures
Disconnected from localhost port 22
```

Emacs Packages with GPG
========================================================

Emacs 集成了插件安装、管理工具，提供了一系列前缀为 package 的命令，例如 
`list-packages` 或者 `package-install`。

程序包管理功能需要 `package.el` 和 TLS 安全传输层协议支持，Emacs 24.1 版本以上支持。
程序包默认安装于 `~/.emacs.d/elpa/`，可以修改 `package-user-dir` 变量来改变默认路径。
目录命名使用 NAME-VERSION 这样的规则。

Emacs 24 版本开始集成 ELPA 扩展包管理工具，旧版本需要手动在初始化脚本中安装：

```lisp
; Enable installation of packages from MELPA by adding an entry to package-archives 
; after (require 'package) and before the call to package-initialize in your init.el or .emacs file:

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  
;; See `package-archive-priorities` and `package-pinned-packages`. 
;; Most users will not need or want to do this.
; (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)
```

默认的 ELPA 扩展包服务器是 https://elpa.gnu.org/packages
可选的还有 [MELPA (Milkypostman’s Emacs Lisp Package Archive)](https://melpa.org/)
另外，还可以使用稳定版本的软件包，[Stable MELPA](https://stable.melpa.org/)

执行命令 `C-h v package-archives RET` 查看当前配置：

```lisp
(defcustom package-archives `(
    ("gnu" . ,(format "http%s://elpa.gnu.org/packages/" (if (gnutls-available-p) "s" "")))
    ("nongnu" . ,(format "http%s://elpa.nongnu.org/nongnu/" (if (gnutls-available-p) "s" ""))))
```

Msys2 平台下的 GPG 工具可能导致运行出错：

```sh
    Failed to verify signature archive-contents.sig:
    No public key for 645357D2883A0966 created at 2023-11-10T06:05:08+0800 using EDDSA
    No public key for 066DAFCB81E42C40 created at 2023-11-10T06:05:08+0800 using RSA
    Command output:
    gpg: keyblock resource 'pubring.kbx': No such file or directory
    gpg: Signature made Fri Nov 10 06:05:08 2023    
    gpg:                using RSA key C433554766D3DDC64221BFAA066DAFCB81E42C40
    gpg: Can't check signature: No public key
    gpg: Signature made Fri Nov 10 06:05:08 2023    
    gpg:                using EDDSA key 0327BE68D64D9A1A66859F15645357D2883A0966
    gpg: Can't check signature: No public key
```

以上信息显示无法使用 fingerpoint 找到相应的公钥，RSA key 和 EDDSA key 两个。
GPG 找不到相应的公钥，就无法对程序包中提供的 .sig 签名文件进行验证。

但是，至少可以关掉签名验证：`M-x customize-variable RET package-check-signature RET`

Msys2 平台下，GPG 程序会在错误的路径中查找 pubring.kbx 密钥环文件：

    /mingw64/bin/c:/Users/OCEAN/AppData/Roaming/.emacs.d/elpa/gnupg/pubring.kbx
    /c/opendocs/c:/Users/OCEAN/.emacs.d/elpa/gnupg/pubring.kbx

从路径信息可以看到，$HOME 路径前缀了错误的目录，可能是当前目录，也可能是
PGP 命令程序所在目录。这是因为 Msys2 中存在多个平台 (subsystems)，其中三个
最基本的子系统是 `msys2`, `mingw32`, `mingw64`。而目前 Emacs 29.1 只提供
`mingw64` 平台的版本 https://packages.msys2.org/search?q=emacs

| Base Package | Version | Subsystems |
|--------------|---------|------------|
| emacs           | 27.2-2 | msys2     |
| mingw-w64-emacs | 29.1-3 | mingw-w64 |

如果像以下环境变量设置 PATH 包含 msys2 子系统的路径，Emacs 就会有以上问题，
程序包没能正确处理 Msys2 子系统的虚拟文件系统：

    PATH=/mingw64/bin:/usr/bin emacs

HOME 系统环境变量，指向一个任意文件夹，Emacs 会把这个文件夹当成 home。
但是一般情况下，mingw32 和 mingw64 等子系统编译原生的程序不需要这个目录，
应该就是 msys2 和 mingw 版本混用导致的问题。

Cygwin 会自动将 Windows 格式的 HOME 路径会转换为 Unix 风格。Emacs 再将 HOME
路径传递给 gpg 命令，然后错误地使用它自己认定的 HOME 路径前缀。可以尝试
使用 GnuGP for Windows 版本，并且将它置于 PATH 的前头：

```sh
    $ pacman -S gnupg
    $ pacman -Qo /usr/bin/gpg.exe
    /usr/bin/gpg.exe is owned by gnupg 2.2.41-1

    $ gpg --version | grep Home
    Home: /c/Users/OCEAN/.gnupg

    HOME=c:/Users/OCEAN emacs # HOME=/c/Users/OCEAN
```

参考 [GNU bug report logs - #42984  27.1](https://debbugs.gnu.org/cgi/bugreport.cgi?bug=42984)
Emacs 中相关的路径记录在 `package-gnupghome-dir` 和 `package-user-dir` 变量：

    (expand-file-name "gnupg" package-user-dir)

它们的路径形式是 Windows 风格的，也就是上面使用的 `c:/Users` 这样的字符串，
并不是 gnupg 各种期待的 Posix-like 风格，从而进行了错误的路径拼接。实事上，
Msys2 安装的 Emacs 只依赖 Gnu TLS 库，不需要使用 GnuPG。当然，如果可以找到
gpg 程序，则优先使用它。为了解决这个问题，可以重命名 gpg 应用程序，例如
gpgv2。注意，gpg2 这个名字是 Linux 系统下的默认名称，也会被定位到。改名的
一个好处是让 Language Server Support (Eglot) 可以正常找到环境变量中可以搜索到的
LSP 服务程序。


如果在 emacs 的启动文件中 add-list 到 exec-path 的话，要把 mingw64 放在后面添加，
因为这个列表的添加方法是压栈式添加，最后入栈的路径在前头。

手动运行 GPG，可以指定 HOME 目录，从服务器获取公钥重构本地密钥环：

    gpg --homedir ~/.emacs.d/elpa/gnupg --receive-keys key-ids

ELPA 公钥可能过期，这会导致 Emacs 无法验证服务器的签名，需要手动下载、
安装最新的 keyring 更新程序包，Update Emacs's GPG keyring for GNU ELPA。
可以使用 Emacs 打开程序压缩包、或者直接拖放到 Emacs 界面，然后执行 
`M-x package-install-from-buffer` 安装 GNU elpa 公钥：
http://elpa.gnu.org/packages/gnu-elpa-keyring-update.html

```sh
    Parsing tar file...done
    Extracting...done
      INFO     Scraping files for loaddefs...done
      GEN      gnu-elpa-keyring-update-autoloads.el
    Checking c:/msys64/home/OCEAN/.emacs.d/elpa/gnu-elpa-keyring-update-2022.12... [3 times]
    Compiling c:/msys64/home/OCEAN/.emacs.d/elpa/gnu-elpa-keyring-update-2022.12/gnu-elpa-keyring-update.el... (gnu-elpa-keyring-update)
    Importing gnu-elpa.gpg-keyring...done
    Compiling c:/msys64/home/OCEAN/.emacs.d/elpa/gnu-elpa-keyring-update-2022.12/gnu-elpa-keyring-update.el...done
    Wrote c:/msys64/home/OCEAN/.emacs.d/elpa/gnu-elpa-keyring-update-2022.12/gnu-elpa-keyring-update.elc
    Checking c:/msys64/home/OCEAN/.emacs.d/elpa/gnu-elpa-keyring-update-2022.12...
    Checking c:/msys64/home/OCEAN/.emacs.d/elpa/gnu-elpa-keyring-update-2022.12/etc...
    Done (Total of 1 file compiled, 2 skipped)
    Saving file c:/msys64/home/OCEAN/.emacs.el...
    Wrote c:/msys64/home/OCEAN/.emacs.el
    You can run the command ‘package-install-from-buffer’ with M-x p-i-b
    Wrote c:/msys64/home/OCEAN/.emacs.el
```


GPG 基于 PKI 公钥基础结构，可以分成两部分：

1. GPG 是一个加密、解密、签名、验证工具。
2. GPG 是一个密钥管理工具，并且提供一套公钥信任体系。

GNU 于 1999 年发布开源版本的 GNU Privacy Guard (GPG)，对标 PGP 商业软件，
PGP (Pretty Good Privacy) 则是更早发布的商业软件，于 1991 年发布。
OpenPGP 是于 1997 年制定的一套标准，GPG、PGP 等工具都实现了这套标准。
参考 RFC 4880 [OpenPGP Message Format](https://www.ietf.org/rfc/rfc4880.txt)

GPG 与 SSL 证书系统最大差别在于：GPG 基于信任网络（Web of Trust），SSL 基于
权威的第三方来为每一个证书提供背书。因此，GPG 系统中每个用户自行选择
信任哪些证书。

第一个 KeyServer 诞生在上世纪 90 年代，叫做 HKP（HTTP Keyserver Protocol），
Marc Horowitz 在麻省理工学习时为了他的论文而搭建。在此之前，大部分人依靠
电子邮件来交换公钥，虽然不是那么安全。 

GPG 设计出交叉签署机制，当我签署了某个人的公钥，并且上传签名到公钥服务器，
或者发送回给本人的时候，我就为这个人的真实性做出了背书。一般来说，为他人的
公钥签名后，需要发还给他，或者发到公钥服务器，这一步骤最好经过本人同意。
为已经导入的他人公钥签名，意味着你将为他的身份真实性背书，请谨慎！

    gpg --sign-key {keyid/uid}

PGP 系统设计存在问题：https://ulyc.github.io/2022/09/05/tr-pgp-problem-1/
比如缺失 PFS (Perfect Forward Secrecy) 机制，这意味着一旦你上传到服务的密钥泄密，
过往所有加密将失效。

为了防止被篡改，keyserver 设计为只增不删的形式。即密钥一旦上传到服务器，
永远不能删除，除非吊销它，比如密钥丢失或者泄露时。“永远不能删除”
设计为 SKS 带来了许多问题，2019 年 GPG SKS 同步网络被签名投毒是其中之一。
还有人设计出基于 keyserver 的数据库，蓄意在“永不删除”服务中存入违法信息，
比如说儿童色情，将使所有节点的运营者面临刑事起诉。

虽然，PGP 的目标在于构建一个身份加密系统，但是可能存在元数据泄漏问题。
许多新手按照教程提示的在创建 PGP 密钥的时候填上了自己的真实姓名，并按
将公钥上传到 KeyServer。但是事实是，网络匿名环境中充满了不那么友好，
甚至是恶意的用户。以现代眼光看来 ，KeyServer 这个系统并不健壮，问题重重，
许多问题已经发现十多年，仍未得到解决。因为密码工程师不会设计一个像
PGP 一样的系统，也不会容忍它设计中的大部分缺陷。

严肃的密码学家们在很大程度上已经放弃了 PGP，并不再花时间为它发表论文。
一个例外：[Efail: Breaking S/MIME and OpenPGP Email Encryption using Exfiltration Channels]
(https://www.usenix.org/conference/usenixsecurity18/presentation/poddebniak)

KeyServer 可以通过 Email/Key ID/Fingerpoint 搜过 PGP Key，可能包含敏感信息元数据，
不乏有些比较注重自身隐私的用户，部分会将自己真实的名字（汉字或拼音）和邮箱
一起发到了服务器上。要知道那里的数据是公开且永远不能删除的，意识到问题之后
再进行 revoke 也不是很好的解决方法，仍然可查，并且 revoked 状态会变红更显眼。

SKS Keyserver Pool 是当今世界最大的 HKP Pool，世界各地符合此标准的公钥服务器
会定期相互通信、同步、比较目录，数据完全开放下载。KeyServer 虽然一直是 PGP 
重要基础设置，但其实 SKS Keyserver Pool 目前只有不到 20 台服务器，GnuPG 默认
使用的是其中的 HKPS pool，只有四台服务器。

使用以下命令与 keyserver 交互，注意 --send-keys 时一定不要将整个密钥环
（所有密钥）上传到密钥服务器，应该指定新创建的，或者更新过的：

    --send-keys keyIDs
           Similar to --export but sends the keys to a keyserver.  Fingerprints may be used instead
           of key IDs.  Don't send your complete keyring to a keyserver --- select only those  keys
           which are new or changed by you.  If no keyIDs are given, gpg does nothing.

    --receive-keys keyIDs
    --recv-keys keyIDs
           Import the keys with the given keyIDs from a keyserver.

    --search-keys names
           Search the keyserver for the given names. Multiple names given here will be  joined  to‐
           gether  to  create the search string for the keyserver.  Note that keyservers search for
           names in a different and simpler way than gpg does.  The best choice is to  use  a  mail
           address.   Due  to  data privacy reasons keyservers may even not even allow searching by
           user id or mail address and thus may only  return  results  when  being  used  with  the
           --recv-key command to search by key fingerprint or keyid.

       Use name as your keyserver. This is the server  that  
       --receive-keys,  
       --send-keys,  and
       --search-keys  will  communicate with to receive keys from, send keys to, and search for
       keys on. The format of the name is a URI: `scheme:[//]keyservername[:port]'  The  scheme
       is  the type of keyserver: "hkp" for the HTTP (or compatible) keyservers, "ldap" for the
       LDAP keyservers, or "mailto" for the Graff email keyserver. Note  that  your  particular
       installation  of  GnuPG  may  have  other  keyserver  types available as well. Keyserver
       schemes are case-insensitive. After the keyserver name, optional keyserver configuration
       options  may  be provided. These are the same as the global --keyserver-options from be‐
       low, but apply only to this particular keyserver.

有一些 KeyServer 没有用 SKS 的软件，运行的是更下现代和稳定的软件，例如 
基于 Hockeypuck 的  Ubuntu keyserver, 这些服务器仍然会和 SKS pool 保持同步。

另外，还有独立 KeyServer，这些服务器不与 SKS pool 同步数据，中心化运营管理，
会对公钥上传者做一定的认证，并且支持删除自己的公钥。比较有代表性的有，
keys.openpgp.org 和 KeyBase。

GPG 公钥服务器参考：

    hkps://subkeys.pgp.net
    hkps://keys.gnupg.net
    hkps://hkps.pool.sks-keyservers.net

GnuPG 2.1 更改了密钥服务器的设置方式，`~/.gnupg/gpg.conf` 配置文件中指定，比如：

    keyserver hkps://keys.gnupg.net

上传密钥前一定要慎重，上传后的密钥没有任何方式能删除，只能修改信息或者吊销，
使用以下命令上传公钥到 keyserver：

    gpg --send-keys key-IDs

使用 `--gen-key` 生成密钥对，并且将文件存放在 `~/.gnupg` 目录，另外还会生成
吊销证书，这是一个 .rev 文件，通过它只可以将关联的证书吊销。打算撤销时，
使用 `--import` 导入撤销证书 GPG 库中，即撤销本地公钥。吊销证书文件生成时
使用了一个 : 号在证书标记头，避免误操作吊销了公钥。

私钥丢失的情况可以吊销它，如果缺失私钥和吊销证书，就无法更新密钥的状态。
编辑证书时，使用 revkey 命令吊销公钥，再执行 --send-keys 上传密钥服务器，
密钥服务器上的密钥就会被撤销。其他人从密钥服务器更新之后，就知道密钥
已经被撤销，以后就不会再使用此密钥进行加密，也将不会信任此密钥的签名。

```sh
$ gpg --gen-key
gpg: /home/OCEAN/.gnupg/trustdb.gpg: trustdb created
gpg: directory '/home/OCEAN/.gnupg/openpgp-revocs.d' created
gpg: revocation certificate stored as '/home/OCEAN/.gnupg/openpgp-revocs.d/60256A099DCBDC83FDA19DD10457E2CD0FD74D8A.rev'
public and secret key created and signed.

pub   rsa3072 2023-11-16 [SC] [expires: 2025-11-15]
      60256A099DCBDC83FDA19DD10457E2CD0FD74D8A
uid                      Jeango <jeango@v.com>
sub   rsa3072 2023-11-16 [E] [expires: 2025-11-15]

$ tree /home/OCEAN/.gnupg/
C:/msys64/home/OCEAN/.gnupg/
|-- S.gpg-agent
|-- S.gpg-agent.browser
|-- S.gpg-agent.extra
|-- S.gpg-agent.ssh
|-- openpgp-revocs.d
|   `-- 60256A099DCBDC83FDA19DD10457E2CD0FD74D8A.rev
|-- private-keys-v1.d
|   |-- 7E3553D38B6B3FEDB9C55F23FD2CDA0366815F44.key
|   `-- E1AF8CEF5F4CB32E7F239B67FDF8CD301F39A818.key
|-- pubring.kbx
|-- pubring.kbx~
`-- trustdb.gpg
```

GPG 手册中有关于各个文件的说明：

1. `~/.gnupg/pubring.gpg` 公钥环（keyrings）文件，该备份这个文件。
2. `~/.gnupg/pubring.kbx` 使用不同格式的公钥环文件，与 gpgsm 共享，该备份这个文件。
3. `~/.gnupg/secring.gpg` 密钥环（keyrings）文件，GnuPG 2.1 之前版本使用。
4. `~/.gnupg/trustdb.gpg` 信任数据库，不必备份，最好使用 `--export-ownertrust` 备份 ownertrust。
5. `~/.gnupg/openpgp-revocs.d/` 存放预先生成的 revocation certificates，文件名是密钥指纹。

GPG 中有子密钥的概念，主密钥对（Primary keypair）、子秘钥对（Subordinate keypair）：

1.  pub -- Primary Public key
2.  sec -- Primary Secret key
3.  sub -- Public Sub-key
4.  ssb -- Secret Sub-key

在非对称加密算法中，密钥都成对出现，理论上只需一对主密钥，就满足加密和签名。
GPG 为主密钥引入若干对子密钥，一是出于主密钥本身的安全考虑，其次方便不同的
应用场景，子密钥（Subkeys）可以设置使用不同的加密算法。


例如，需要在多台设备上进行签名和加密操作，如果在每个机器上都使用主密钥，
一旦丢失，则所有设备上的信息都将可以被解密。而且只能吊销主密钥，没有其他
办法来止损。有了子密钥，就相当于有了代理人，主密钥只需要安全保存，日常任务
使用子密钥完成，仅在必要的时候使用主密钥。那么即使其中一个子密钥出现问题，
只有这台机器上的信息可能被泄露。只需要使用主密钥吊销这个子密钥即可。

使用 `-k` 或者 `-K` 查询密钥，`--list-keys` 或者 `--list-secret-keys`，密钥
信息包含方括号包围字母，这些字母代表了密钥的用途，每个值的含义如下：

*  E - Encryption：加密用途。
*  S - Signing：签名用途。
*  C - Certification：认证其他子密钥或 UID。
*  A - Authentication：身份认证，例如用于 SSH 登录。

前三个较为常用，使用 `--gen-key` 生成的密钥就可以有这些用途，默认生成一对
主密钥 [SC] 和一对子密钥 [E]。这样将会使用主密钥进行签名，使用子密钥进行解密。

密钥信息中还包含一个 40 字符的指纹，fingerprints，由 10 组 4 个字符组成的信息。
这是使用 SHA-1 算法对整个密钥计算出来的摘要（HASH），共 20 字节 160 bits。
一般表示为 40 个十六进制数，这个指纹可以作为一对密钥的唯一标识。可以使用
`--fingerprint` 查询密钥的指纹数据。


信任网络 (Web of Trust) 是间接验证密钥的有效性的一种方式，也就是信任链。
比如说，A 相信 B，B 相信 C，那么 A 也应该相信 C。 

GPG 信任分为几个不同的等级：

* [ultimate]：终极信任。一般只应该对自己的密钥进行终极信任，相当信任链的根节点。
* [full]：完全信任。认可此密钥签名的其他密钥。
* [marginal]：临界可信，可信度待提高，如果有三个这样的密钥签名的其他密钥也就可信了。
* [never]：永不信任。此类密钥对其他密钥的签名，一律不信任。

需要注意信任和有效性不一定有关系，比如，信任的机构签名的证书是可信的，但是
过期了，那么就是无效的。有了信任网络，一个密钥有效的条件就变成：被一个 [full] 
签名或三个 [marginal] 签名，同时这个签名传递的路径距离 [ultimate] 的长度不超过 5。

这些参数值可以修改，GPG 提供了一个交互式证书编辑器，使用 `--edit-key` 进入，
参考： [The GNU Privacy Handbook](https://www.gnupg.org/gph/en/manual.html)

使用 `--edit-key` 执行 trust 交互命令时能看到两个属性，信任 (trust) 和有效性
 (validity)。信任度是一种主观选择，命令提供五个信任级别供选择：

    1 = I don't know or won't say （我不知道或不作答）
    2 = I do NOT trust（我不相信）
    3 = I trust marginally（我勉强相信）
    4 = I trust fully（我完全相信）
    5 = I trust ultimately（我绝对相信）

确认彼此的公钥确实是未经篡改的、真实有效的，就成了一个难题。公钥服务器的出现，
很好地解决了通信双方都需要安全便捷地交换公钥的问题。公钥服务器 KeyServer，
通过交换通信双方的 key IDs 或者 User ID 就可以方便地从公钥服务器下载公钥。


主密钥至少有一个用于标识用户身份的 User ID (UID)，格式为 Real Name (Comment) <Email>。
每个 UID 旁边的方括号内，标识了这个 uid 的有效性。新导入公钥默认为 [unknown]。
这是因为任何人都可以声称自己是任何人，所以需要验证新导入的公钥。

第一种验证方式是直接交换公钥，绝对安全。但很多时候这不可能。

另一种方式是验证指纹，通过可靠的方式确认指纹是否正确。因为指纹是通过安全
散列算法对整个密钥信息计算的摘要，很难构造出两个摘要相同的密钥（碰撞），
所以一旦确认指纹没错，就可以认为密钥有效。

然后使用自己的密钥对公钥进行签名，将密钥标识为有效的状态，让 GPG 认可新密钥。

注意：签名和有效性都是针对 UID。例如，一个人声称了两个身份，但是只验证了
其中一个，那就可以仅对这个 UID 签名。

如果是想认识更多的人，并让自己的公钥被更多的人认证， 
可以参加「公钥签名派对（Key signing party）」，参与派对的人相互交换公钥指纹，
公钥一般是存在服务器或是一个别人可以下载到的地方，这里只交换指纹。
甚至需要相互出示身份证、护照、驾照、出身证明，以验明正身。


官方手册 HOW TO SPECIFY A USER ID 指明了多种选择指定密钥的方式：

*  指纹：使用 40 个十六进制数表示的指纹来选择密钥是 GPG 推荐的方式。
*  Key ID：指纹低 64 bits 即右侧 8 位字符，OpenPGP 协议内部使用 16 位字符。
*  精确匹配的邮箱：<jeano@xstudio.com>，使用完整的邮箱地址。
*  部分匹配的邮箱：@jeano，使用 @ 符号前缀。
*  精确匹配 OpenPGP UID：=jeano <jeano@xstudio.com> ，对 X.509 证书无效。
*  精确匹配 subject's DN：比如 /CN=Jeano,O=XStudio,L=GD,C=CN。
*  精确匹配 issuer's DN：比如 #/CN=Root Cert,O=Poets,L=Paris,C=FR。
*  精确匹配串号和 issuer's DN：比如 #4F03/CN=Root Cert,O=Poets,L=Paris,C=FR。

请注意，不能使用 gpgsm -list-keys 打印 subject's DN 字符串，为了更可读性，
该字符串已被重新排序和修改。可以使用 --with-colons 打印原始的（但标准转义）
RFC-2253 字符串。

使用 issuer's DN 应该返回颁发者的 Root ceert，即证书颁发机构的根证书。

[RFC 2253 LADPv3 Distinguished Names](https://www.rfc-editor.org/rfc/rfc2253) 规范参考：

    
    RFC 2253               LADPv3 Distinguished Names          December 1997

                    String  X.500 AttributeType
                    ------------------------------
                    CN      commonName
                    L       localityName
                    ST      stateOrProvinceName
                    O       organizationName
                    OU      organizationalUnitName
                    C       countryName
                    STREET  streetAddress
                    DC      domainComponent
                    UID     userid

在需要 key IDs 指定密钥的地方，都可以使用上面这些形式。注意，指纹和 Key ID 
之外其他都可能匹配到多个，最终将选择第一个使用。

除了这些基本的匹配外，Key ID 和指纹，还可以配合 ! 感叹号使用。

比如，主密钥支持 [SC]，某个子密钥也支持 [S]。那么签名时将会使用哪个呢？
答案是使用子密钥。在选择密钥时，GPG 会自动选择一个支持对应能力的子密钥，
如果存在多个，则选择较新的一个。要使用指定主密钥或子密钥就在 key ID 或
指纹后面加上 ! 强制使用这个密钥，而不要自动推算。

这种用法还可以用在导出密钥时，仅导出某个子密钥或主密钥。


Emacs Project & Packages
========================================================

Emacs 集成了 GDB 调试器，这是一个复杂的工具，应该随手准备 GDB 手册。好在 Texinfo
文档随工具一起安装，只需要使用 info 命令打开文档，并且可直接定位到指定的 @Node，
例如，查询 starti 指令的使用，就可以直接通过 Texiinfo 文档的索引数据定位到章节：

```sh
$ info gdb -n "Starting"
$ info gdb -n "starti"

4.2 Starting your Program

'starti'
     The 'starti' command does the equivalent of setting a temporary
     breakpoint at the first instruction of a program's execution and
     then invoking the 'run' command.  For programs containing an
     elaboration phase, the 'starti' command will stop execution at the
     start of the elaboration phase.
```

info 阅读器与 Emacs 文档使用同样的 Texinfo 文档格式，它们的操作也基本一致。
为了快速定位信息，应该熟练使用以下 info 常用快捷键：

01.  `g` 跳转到到指定 Texinfo Node，配合 Tab 可以显示文档现有的 @Node 名称列表；
02.  `/` 或者 `?` 执行正则搜索，`{` 和 `}` 继续进行前、后搜索；
03.  `i` ('index-search') 搜索 Texinfo 索引数据，使用 `<Tab>` 获取备选列表；
04.  `I` ('virtual-index') 虚拟索引，查找出匹配的索引条件组合列表出来。
05.  `,` ('next-index-match')  跳转到下一个匹配的索引条目，配合 `i` 命令使用；
06.  `l` 历史回退，`r` 历史前进，`L` 历史记录列表；
07.  `t` 打开 Texinfo 文档的顶级节点，@Node top；
08.  `T` 打开 Texinfo 目录页面，Table of Contents；
09.  `C-g` ('echo-area-abort') 撤消、退出当前操作；
10.  `M-x <TAG>` 打开可执行的扩展命令列表；
11.  `M-x index-apropos` 翻查所有 Texinfo 文档，收集相关的索引数据；
12.  `C-x C-b` ('list-visited-nodes') 弹窗显示历史浏览记录，`q` 或者 `C-g` 取消；


GDB 启动调试程序前，应该使用带有调试符号表信息的程序文件，也就是使用 `gcc -g` 
编译得到的二进制可执行程序，如果使用了 `-O` 或者 `-s` 优化选项，调试符号会被
清除，GDB 加载程序时


```sh
# Command line
$ gdb -i=mi -q
$ gdb --args ./exe argument1 argument2

# GDB prompt
$ gdb
(gdb) file exe
(gdb) run argument1 argument2
(gdb) starti argument1 argument2
(gdb) set args argument1 argument2
(gdb) run 
```

如果没有调试符号，那么就必需进行汇编级别的逆向工程，使用 `disassemble` 指令，
例如，`disas $pc` 反汇编程序计数寄存器所指定的内存区。
参考 9.6 Source and Machine Code。


Emacs 集成了输入法：`set-input-method` (C-x RET C-\) 或 `toggle-input-method` (C-\)
切换输入法，chinese 为中文输入，py 后缀表示拼音，qj 表示全角，tonepy 表示音调拼音。


Emacs 集成了 eww 浏览器，比如打开维基百科：`M-x eww RET https://wikipedia.org RET`。
打开页面后就可以使用 eww 模式菜单提供的快捷键进行操作。也可以执行 eww 前缀的
各种命令，包括 `eww` (G)，打开新 URL 页面，此命令还可以用来搜索关键字，Emacs
默认使用 DuckDuckGo 搜索引擎。修改 `eww-search-prefix` 变量可以更改搜索引擎，
例如，https://cn.bing.com/search?q= 注意这个前缀会直接和关键字拼接成 URL。
执行 `C-x customize-option RET eww-search-prefix RET` 进入配置页面。


Emacs 集成了 Gnus，这是一个可以用于收发电子邮件、新闻组 (Usenet) 的程序包。
由于 Emacs 运行于单线程，恰巧 Gnus 会在网络 I/O 上花费大量的时间，这可能
导致运行 Gnus 的时候使 Emacs 卡顿以致无法动弹、假死掉。最好重开一个 Emacs 
（专用进程）用来处理类似的事情。参考手册 35 Email and Usenet News with Gnus。


Emacs 集成了 Eshell，使用 ELisp 编写的命令行交互程序，REPL (Read-Eval-Print Loop)，
它不直接调用系统内核功能，只是基于 ELisp 标准库提供服务，因此你可以在 EShell 
中调用 Lisp 函数或者使用变量，EShell 定义了一系列内置命令，包含 bash 常用功能。
Eshell 按以下顺序定位命令，参考 eshell.info 手册：

  1. As a command alias (*note Aliases::)
  2. As a built-in command (*note Built-ins::)
  3. As an external program
  4. As an ordinary Lisp function

```lisp
    ~ $ echo $user-login-name
    OCEAN
    ~ $ (format "hello, %s" user-login-name)
    hello, OCEA

     ~ $ echo (list 1 2 3)
     (1 2 3)

     ~ $ printnl (list 1 2) 3
     1
     2
     3
```

Eshell 定义了以下 Virtual Targets (映射设备名到函数)：

1. `/dev/null` Does nothing with the output passed to it.
2. `/dev/eshell` Writes the text passed to it to the display.
3. `/dev/kill` Adds the text passed to it to the kill ring.
4. `/dev/clip` Adds the text passed to it to the clipboard.


Emacs 一些编程扩展包参考：

1. 工程文件、符号跳转插件： https://github.com/bbatsov/projectile
2. Emacs LSP Mode 智能提示：https://emacs-lsp.github.io/lsp-mode/
3. Doom Emacs (集成 LSP 的配置)：https://github.com/doomemacs/doomemacs
4. Cargo mode for Emacs（Rust 语言插件）：https://github.com/kwrooijen/cargo.el

    `M-x package-install RET cargo RET`

5. company-mode 自动完成：http://company-mode.github.io

    `M-x package-install RET company RET`

    Once installed, enable company-mode with `M-x company-mode`.

6. company-box (A company front-end with icons) https://github.com/sebastiencs/company-box

    ```lisp
    ;; With use-package:
    (use-package company-box
      :hook (company-mode . company-box-mode))

    ;; Or:
    (require 'company-box)
    (add-hook 'company-mode-hook 'company-box-mode)
    To customize:
    M-x customize-group [RET] company-box [RET]
    ```

7. GDScript mode for Emacs https://github.com/godotengine/emacs-gdscript-mode

    ```lisp
    ; ## install via MELPA
    ; The package is available in the [MELPA](https://melpa.org/#/) package archive. 
    ; Once you [set up MELPA](https://melpa.org/#/getting-started) you can install the package from Emacs:
    ; M-x package-install gdscript-mode
    ; Then, in your init.el file, you can require the package:
    (require 'gdscript-mode)

    ; ## Installing manually
    (add-to-list 'load-path "/path/to/gdscript-mode")
    (require 'gdscript-mode)

    ; To find all GDScript-mode settings, press `M-x customize` and search for "gdscript".
    ; To find extends use the `M-x gdscript-godot-*` commands.
    ```

为了让 Emacs 工作区处于最后退出时的布局状态，如果打开的文件、窗格公位置等，可以
使用 Emacs Sessions，会话就是保存用户工作区状态数据的一种机制。可以直接在初始化脚本
中设置如下选项，也可以勾选 Options ⇒  Save State between Sessions（保存会话状态），或者
Save Place in File between Sessions（）。

```sh
 '(desktop-save-mode t)
 '(save-place-mode t)
```

退出 Emacs 时就会将会话数据写入 .desktop 文件，路径由 `desktop-path` 变量指定，默认
值等于 `user-emacs-directory`，也就是 "~/.emacs.d/"。Emacs 会按 `desktop-auto-save-timeout`
指定的时间间隔自动保存会话变更的状态。利用自动保存功能，还可以恢复文件数据，
自动保存文件命名为 `#name#`，执行 `recover-session` 命令进行恢复。

参考手册 45 Saving Emacs Sessions


最新版 Emacs 29 集成了 LSP (Language Server Protocl) 智能提示服务：Eglot (lsp client)，详情
信息参考 eglot.info 手册。Eglog 取名自 Emacs polyGLOT，即多语言功能支持。如果当前系统
安装了 [LLVM clangd](https://clangd.llvm.org/)，那么打开 C/C++ 源代码文件时，激活 Eglot
功能，它就会自动检测到 clangd，并且提供智能代码提示服务。将光标移动到代码中的函数、
变量等符号上面，Emacs 编辑器就会将当前编辑文件的信息，包括光标位置，告诉 clangd
服务程序，它会对文件进行语法解析，并返回相关符号的上下文信息。Emacs 接收到这些
信息后，就会在提示区（界面最底部）显示出来。

如果使用旧版 Emacs，可能还在使用 lsp-mode 或者 company-mode。其中，lsp-mode 配置复杂，
有些功能累赘，如果不手动关掉，会造成性能上的问题。可以自行配置最新的 Eglot，
参考以下 Clangd 文档给出的脚本设置 `eglot-server-programs`，提示 Eglot 找到服务程序：

```sh
    # https://github.com/joaotavora/eglot
    # https://github.com/llvm/clangd-www
    # Install eglot with M-x package-install RET eglot RET.
    # Add the following to ~/.emacs to enable clangd:
    (require 'eglot)
    (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
    (add-hook 'c-mode-hook 'eglot-ensure)
    (add-hook 'c++-mode-hook 'eglot-ensure)
```

例如，添加 Python (Pyright) 和 TypeScript LSP 等语言支持，可以和 Sublime Text 共用
同一个 LSP 客户端程序，只需要在 PATH 可以找到 LSP 客户程序文件，或者直接将
路径写入 Emacs 初始化脚本中。JavaScript/TypeScript 可以使用官方的 LSP 客户程序，
也可以使用 `deno lsp`：

```sh
    (require 'eglot)
    (add-to-list 'eglot-server-programs
             '(python-mode . ("pyright-langserver" "--stdio")))

    (require 'eglot)
    (add-to-list 'eglot-server-programs
             '(gdscript-mode . ("C:/dl/games/Godot_v4.1.2-stable_win64.exe" "--headless")))

    (require 'eglot)
    (add-to-list 'eglot-server-programs
             '(typescript-mode . ("deno" "lsp")))
```

注意，安装各种语言的模式扩展，例如 `M-x package-install`

现代语言基本上都会提供 LSP 客户端实现，例如 Rust analyzer、Java jdtls、Kotlin kotlinls、
Godot GDScript 等等，TypeScript 自然是不在话下，它似乎是 LSP 同一个团队的产品。

目前只在 MELPA 上提供 gdscript-mode 安装包，默认配置的 ELPA 服务器上没有，
需要在初始化脚本中添加 MELPA 服务器，或者下载程序包手动安装。

LSP 协议使用 JSON-RPC 作为进程间通信技术，这与 LSP 客户端是否通过 TCP/IP
网络连接与否无关，这只是一种基于 JSON 数据结构的通信手段。例如，Clangd LSP
就选择基于 stdin/stdout 通过 XPC Service 这种整合了 GCD 与 launchd 的轻量级进程间
通信技术来实现 LSP 服务。Godot 则会使用 TCP/IP，默认使用端口 Godot 4.x 6005，
Godot 3.x 6008，配置它就需要给 Eglog 设置相应的端口。

Godot 启动并进入项目器后，默认就会启用 LSP Client，偏好设置中可以修改默认配置。
所以只需要提供一个 `--headless` 参数隐藏 GUI 界面，以及一个 gd 脚本让它运行：

```sh
/c/dl/games/Godot_v4.1.2-stable_win64.exe --headless --script "/C/dl/games/tutor4/mainloop/scenetree.gd"
```



Eglot 代码补全、错误提示、代码跳转功能都基于 Emacs 原生功能实现，不像 lsp-mode 
引入一大堆依赖，而且代码清晰可读性强。Eglot 运行明显比 lsp-mode 流畅，缺点是只支持
标准 LSP 协议，对于各个语言服务的扩展协议，需要自行解决。

使用 `C-M-i` 执行 complete-symbol 命令，获取自动完成提示信息。


Emacs 工程管理功能支持，参考手册 29.2 Working with Projects。

EDE (Emacs Development Environment) 是用于简化工程管理的全局工具包，支持 Emacs 项目
构建、调试功能，基于 Make 实现 Emaca IDE (Integrated Development Environment) 开发环境。

EDE 本身作为 global minor mode 方式实现，使用 `M-x global-ede-mode` 启用它，或者
通过工具菜单激活它：Tools ⇒ Project Support (EDE)，也可以修改初始化 lisp 脚本：

     (global-ede-mode t)

注意：Tools ⇒ Project 菜单是要配合 EDE 功能使用的，EDE 加载工程后，会根据工程
目录路径来识别文件的归属。可以加载多个工程目录，每个文件都对应了它自己的 
current direcctory，这个路径会用于检查其所属的工程。使用 project-dired (`C-x p D`) 
打开工程目录后，才会加载 Dired (Directory Editor) 模式提供的 Project 菜单。

使用 Tools 的菜单切换工程，`C-x p p`，使用 `<TAB>` 显示的备选列表数据来自临时
缓冲文件 ~/.emacs.d/projects，对应变量 `project-list-file`。如果当前切换的路径没有
使用 EDE Load Project 功能加载，那么项目路径就会从临时文件中移除。这个临时列表
中没有包含的工程路径，在切换项目时就需要手动指定，然后就会记录到临时文件中。
EDE 加载的工程则会记录在初始化脚本中的 `ede-project-directories`，数据是分散的。
这些操作暴露了 Emacs 功能设计上的缺陷，会引入迷惑性操作。

     '(ede-project-directories '("c:/dl/pl/emacs" more... ))

通常 Emacs 会自动管理项目登记列表，可以手动修改 `project-list-file` 列表，此变量所在
脚本文件可以通过 `M-h v project-list-file` 查询，可以使用 `M-x project-forget-project`
手动清除记录。参考文档 29.2.4 Managing the Project List File

打开过的项目可能会被记录在 ~/.emacs.d/ede-projects.el 缓存列表中，切换
项目时 `C-x p p` 提供相应的项目备选列表。

工程相关扩展命令，find 直接查找文件名，regexp 根据文件内容查询文件：

01. project-compile (`C-x p c`)
02. project-switch-project (`C-x p p`)
03. project-vc-dir (`C-x p v`)
04. project-find-dir (`C-x p d`)
05. project-find-file (`C-x p f`)
06. project-find-regexp (`C-x p g`)
07. project-dired (`C-x p D`)
08. project-or-external-find-regexp (`C-x p G`)
09. project-query-replace-regexp (`C-x p r`)
10. project-async-shell-command (`C-x p &`)
11. project-eshell (`C-x p e`)
12. project-shell (`C-x p s`)
13. project-shell-command (`C-x p !`)

创建项目，设置类型时可以选择 Automake 或者 Make，前者工具齐全但臃肿，后者小巧。
设置工程名称后就会在项目目录下生成 Project.ede 脚本（Elisp）：

```sh
$ cat Project.ede 
;; Object HelloC
;; EDE Project Files are auto generated: Do Not Edit
(ede-proj-project "HelloC"
  :file "Project.ede"
  :name "HelloC"
  :targets nil
  :configurations '("debug" "release")
  :object-name "HelloC"
  :makefile-type Makefile
  :configuration-variables '("debug" (("DEBUG" . "1"))))
```

使用 EDE Development ⇒ Project Options ⇒ Add Target ... 添加 Make 编译目标，目标
类型有多种，使用 TAB 实例查看列表，构建程序就设置为 `program` 类型。Emacs 会
提示要包含当前项目中现有的哪些代码文件。创建构建目标后，项目配置文件更新：

```sh
  :targets
  (list
    (ede-proj-target-makefile-program "hello"
      :object-name "hello"
      :name "hello"
      :path ""
      :source '("main.c")
      :configuration-variables '("debug" ("CFLAGS" . "-g") ("LDFLAGS" . "-g"))))
```

使用 EDE Development ⇒ Build Project 菜单完成项目的构建，包括打包项目源文件。
如果当前活动的文件不属于工程，此菜单显示灰色不可用状态。Emacs 每个窗格都与
当前文件所在目录作为工作目录，使用 shell `pwd` 命令就可以显示其目录路径。

使用 EDE Development 菜单构建工程过程中会自动生成 Makefile 脚本，然后就可以使用 
Tools ⇒ Project ⇒ Compile ... 命令 `C-x p c` 执行编译，它会调用 make 去执行
构建过程。

切换项目：Tools ⇒ Project ⇒ Switch Project `C-x p p`，使用 `<Tab>` 获取备选项目路径，
如果当前已有记录在档的项目，或者输入 `...` 回车后加载项目目录。如果选择或指定的
目录没有包含支持的项目文件，比如 .ede 文件，那么就会再次提示用户指定一个路径。

使用 git 进行项目代码的版本管理也很方便，执行 `project-vc-dir` 就可以打开处于
版本管理状态下的目录，并且 VC dir mode 提供了 VC-Dir 菜单进行版本管理的操作。
比如，在某个文件上按 `G` 就可以将文件登记到 .gitingore 清单文件中，Git 就不会
对这些标记过的文件进行管理。执行 `g` 刷新文件列表，文件状态也相应更新为
`ignored` 状态：

```sh
VC backend : Git
Working dir: c:/dl/em/
Branch     : master
Stash      : Nothing stashed

                         ./
     ignored             #main.c#
     ignored             .deps/
     unregistered        .gitignore
     ignored             .gitignore~
     ignored             HelloC-1.0.tar.gz
  *  added               Makefile
  *  added               Project.ede
     ignored             hello.exe
     unregistered        main.c
     ignored             main.c~
     ignored             main.o
                         .deps/
```

Git 忽视清单文件 .gitignore 中的记录参考：

```sh
/#*#
*.tar.gz
*.exe
*~
*.o
.deps/
```

所有 `unregistered` 状态的文件还未与 Git 数据库产生关系，只有先注册它们后续才可以
添加到 Git 数据库中管理。基本操作：`m` Mark ⇒ `i` Register，或者执行 `v` Check In。
点击这些文件的状态条，前面会出现 * 符号，表示处于标记状态 (Marked)，然后对这些
标记过的文件进行操作。

注意，vc-dir-git-mode 可能没有提供完整的 Git 工作命令，比如 commit，就需要配合命令
行来操作 Git 的版本更新提交等操作。

版本管理内容参考手册 29.1 Version Control，或者 Git 命令文档。



Standalone info reader
========================================================

Emacs 其中一个微不足道的功能是浏览 info 文件。`info` 命令只是一个独立阅读器。

Texinfo 基于单一源文件来生产多种格式的输出，包括在线和印刷格式：HTML, PDF, DVI, 
Info, DocBook, LaTeX, EPUB 3。因此，如果用户采用 Texinfo 只需编写一个文件即可，
无需为在线信息编写不同的文件，也不需要为印刷手册编写另一个文件。

Texinfo 的纯文本格式使用 .info 扩展名，通过 makeinfo 生成。原始脚本文件是 
.texi 格式，尽管它也文本文件。事实上，info 格式还包含少许非可视的控制字符，
不算是严格的 Plain text。

可以使用 Sublime Text + reStructureedText 或者 Markdown 插件来查看 Texinfo 文档。
虽然，Info 工具已经提供比 man 文档更易用的交互操作，但是比起 Sublime Text 的
符号跳转功能还是差一点。因为 Info 操作上还是繁琐，需要来回跳转。Sublime Text
则通过索引数据库，或者文档的目录数据很好解决了此问题，主要归功于它引入的
语法声明机制，对不同类型的文档、代码定义了相应的语法文档，同时解决了文档
高亮显示、关键字搜索，还用索引数据收集等工作，并为智能提示打下了基础。

Windows WSL 环境中可以安装 texinfo 软件包，它包含了各个转译命令，可以使用
wsl 命令来调用 Linux 子系统的命令，例如以下命令，将包含 Texinfo 字符串通过
管道流送给 texi2any 转换格式，默认输出 stdin.info 文件。管道操符作需要转义，
否则会作为宿主机上的管道操作：

```sh
# sudo apt install texinfo
# Host interoperate with WSL
$ wsl -- whoami
$ wsl whoami
jeango
$ whoami
OCEAN
$ wsl -- printf '@node Top \n@node Node007\n' \| texi2any
```

文档通常安装于 /usr/share/info 目录，此目录下有一个自动生成的 `dir` 文件，它就是
Info 的主页信息文件，也是 Texinfo 格式。其它安装好的文档使用 .info.gz 压缩包格式，
目的是为了节省磁盘空间。可以使用 gzip 工具解压阅读，因为压缩包通常只有一个 Info 
文件，可以直接将内容输出到控制台 stdout。文档通常分成个包，使用数字后缀命名，
例如 m4 宏编程工具有三个 info 文档包，其中无数字后缀的这个包含 Tag Table，记录
文档节点（章节）对应文档的字节偏移位置。文件名后缀数字最大的这个通常包含 
Index 数据，其它的是主文档：

```sh
$ find /usr/share/info/m4* | sed -n 'p'
/usr/share/info/m4.info-1.gz
/usr/share/info/m4.info-2.gz
/usr/share/info/m4.info.gz

$ ls -lth /usr/share/info/m4*
-rw-r--r-- 1 OCEAN None  88K Dec 29  2021 /usr/share/info/m4.info-1.gz
-rw-r--r-- 1 OCEAN None  13K Dec 29  2021 /usr/share/info/m4.info-2.gz
-rw-r--r-- 1 OCEAN None 1.7K Dec 29  2021 /usr/share/info/m4.info.gz

$ gzip -d -c `find /usr/share/info/m4*`
$ gzip -d -c `find /usr/share/info/m4* | sed -n '3p'`
```

Linxu 系统中可以直接使用 info 命令来查看 Texinfo 文档。执行此命令将列出当前系统
已经安装的 Texinfo 文档的清单。命令首先进入 Info main menu (aka directory node)，
它的 TUI (Text User Interface) 操作非常像 VIM 编辑器，使用按键执行相应的命令：

    'q' quits;
    'H' lists all Info commands;
    'h' starts the Info tutorial;
    'mTexinfo RET' visits the Texinfo manual, etc.

主菜单提示了几个常用的命令，如按下 `q` 按键即退出 info 界面，`h` 开始阅读
教程，`H` 列表 info 可用的命令，回车键使用 `RET` 表示，输入 `m` 激活 Info 菜单，
然后输入 `Texinfo` 并回车就可以打开 Texinfo 手册，其它主题文档也同样操作。

Menu 列表下使用 * 号标明帮助主题文档，并且已经分类，使用 `Tab` 进行跳转。
使用 [/]、[s] 或者 [S] 打开正则表达式搜索，输入 @Node 节点名称，* 号到 : 之间的
字符串，然后按回车跳转。输入不完整也没有关系，Info 会匹配到相应的位置。
还可以使用 `{` 和 `}` 继续搜索。使用 `i` 在 Index 数据库搜索相关内容，使用
`,` 循环搜索类似的索引内容。

Info 的正则搜索功能仅限于当前主题页面，这使得它无法像 Sublime Text 那样便利。
另一方面，info 提供了索引搜索，这在一定程度上提升了使便利性。但是还不及
基于全文索引、目录数据的模糊搜索方便，特别是在记不清具体关系字的情况。

举例来说，查询 bash 手册时，想知道比较运算符的信息，如果搜索 `compare` 这个
词就可能找不到相关信息，尽管它已经很接近文档中使用的 `comparision` 关键字。
如果使用模糊搜索，则完全可以检索到，这种信息检索能力更符合大脑的工作方式。
Sublime Text 中还有一个 Incremental Find 功能，它有点类似模糊搜索，只是根据用户
输入的信息动态地跟踪到当前搜索到的内容所在，这已经比传统搜索功能好用的多。

当然，拿一个小工具和专业软件来比较本身就是不公平的，它们的不在同一水平，
如果要比较，也应该是：Emacs、VIM、Sublime Text、TextMate、VS Code 之间的比较。
这些软件中，除了 TextMate 没接触过外（它的后辈是 Sublime Text），GNU Emacs
是我最近研究 Texinfo 文档格式时才开始学习的一个编辑软件，也是继学习 `sed`
和 `gawk` 编辑工具之后才开始使用的编辑器。说它是编辑器似乎有点不恰当，
很多用户称之 Emacs 操作系统，因为它确实强大，超过编辑器本身的内涵，既可以
编辑文件，又可以处理目录，浏览 Web 页面，总之它不是一个简单的 IDE。

就目前来看，得益于后发优势，Sublime Text 在构架设计上赢得一些优势，使得它
的插件机制机制非常容易对软件主体进行功能扩展。其中，multiple cursor 多选区
功能是这些软件中实现最好的，并且通过编写插件 [RegexpSelection](sublime.md#__RegexpSelection) 
实现了正则表达式选区功能，这极大地方便了文档、代码的编辑！
Emacs 的多选实现插件（存在插件兼容问题）：https://github.com/magnars/multiple-cursors.el

Emacs 28.1 has a wide variety of new features, including:

1. Native compilation of Lisp files
2. Text shaping with HarfBuzz and drawing with Cairo
3. Support for loading Secure Computing filters
4. Much improved display of Emoji and Emoji sequences
5. New system for documenting groups of functions
6. A minor mode for context menus
7. Mode-specific commands
8. Emacs shows matching parentheses by default
9. Many improvements and extensions to project.el

Texinfo 是一个超文本系统，考虑到 TUI 的显示机制，一个屏幕可能无法显示完整
的主题页面内容。所以 info 界面中的翻页有两种形式，一是当前主题内容的滚动，
另一种是主题之间的跳转。官方文档称为 Node，其层次结构如下图表所示：

      3.7 Node and Menu Illustration

                              Top
                               |
             -------------------------------------
            |                  |                  |
         Chapter 1          Chapter 2          Chapter 3
            |                  |                  |
         --------           --------           --------
        |        |         |        |         |        |
     Section  Section   Section  Section   Section  Section
       1.1      1.2       2.1      2.2       3.1      3.2

使用 [Space] 空格键和 [Backspace] 在当前主题上页面上下滚动，[Del] 也可以往回滚动。
翻到底部自动跳转到下一页内容。

TUI 界面顶行内容显示 `Next`、`Prev`、`Up`，对应下一页、上一页，和上层信息。
使用按键 [n] 翻到下一页，[p] 返回上一页，[u] 返回上一层。C-h 获得帮助。
使用 `[` 和 `]` 在文档节点间跳转。

info 阅读器与 Emacs 文档使用同样的 Texinfo 文档格式，它们的操作也基本一致。
Emacs 查看帮助文档时，状态栏中显示 `(info)`，点击它可以弹出快捷键菜单。

以下是 info 常用的快捷键：

10. `h` 打开 info 阅读器的帮助文档；
11. `H` 打开 info 阅读器的主页面；
12. `m` 文档菜单条目跳转；
01. `<SPC>` and `<DEL>` (or `<Space>` and `<Backspace>`)  进行翻页；
02. `n` ('next-node') 跳转到下一个节点，节点内容如标题 'Next' 指示；
03. `p` ('prev-node') 跳转到上一个节点，节点内容如标题 'Prev' 指示；
04. `u` ('up-node') 跳转到上一级节点，节点内容如标题 'Up' 指示；
05. `g` 跳转到到指定 Texinfo Node，配合 Tab 可以显示文档现有的 @Node 名称列表；
06. `/` 或者 `?` 执行正则搜索，`{` 和 `}` 继续进行前、后搜索；
07. `i` ('index-search') 搜索 Texinfo 索引数据，使用 `<Tab>` 获取备选列表；
08. `I` ('virtual-index') 虚拟索引，查找出匹配的索引条件组合列表出来。
09. `,` ('next-index-match')  跳转到下一个匹配的索引条目，配合 `i` 命令使用；
13. `l` 历史回退，`r` 历史前进，`L` 历史记录列表；
14. `t` 打开 Texinfo 文档的顶级节点，@Node top；
15. `T` 打开 Texinfo 目录页面，Table of Contents；
16. `C-g` ('echo-area-abort') 撤消、退出当前操作；
17. `M-x <TAG>` 打开可执行的扩展命令列表；
18. `M-x index-apropos` 翻查所有 Texinfo 文档，收集相关的索引数据；
19. `C-x C-b` ('list-visited-nodes') 弹窗显示历史浏览记录，`q` 或者 `C-g` 取消；

甚至可以直接在命令运行是指定要打开的文档、以及 Node：

```sh
Examples:
  info                              show top-level dir menu
  info info-stnd                    show the manual for this Info program
  info emacs                        start at emacs node from top-level dir
  info emacs buffers                select buffers menu entry in emacs manual
  info emacs -n Files               start at Files node within emacs manual
  info '(emacs)Files'               alternative way to start at Files node
  info --subnodes -o out.txt emacs   dump entire emacs manual to out.txt
  info -f ./foo.info                show file ./foo.info, not searching dir

$ info find -n Actions
```

Sublime Text 社区目前还没有为 Texinfo 格式提供支持。

专业的文档格式转换工具，[Pandoc](https://pandoc.org/) 可以支持多种格式的互转换：

    (← = conversion from; → = conversion to; ↔︎ = conversion from and to)

    Lightweight markup formats
    ↔︎ Markdown (including CommonMark and GitHub-flavored Markdown)
    ↔︎ reStructuredText
    → AsciiDoc
    ↔︎ Emacs Org-Mode
    ↔︎ Emacs Muse
    ↔︎ Textile
    → Markua
    ← txt2tags

    Ebooks
    ↔︎ EPUB version 2 or 3
    ↔︎ FictionBook2

    Documentation formats
    → GNU TexInfo
    ↔︎ Haddock markup

    TeX formats
    ↔︎ LaTeX
    → ConTeXt

    XML formats
    ↔︎ DocBook version 4 or 5
    ↔︎ JATS
    ← BITS
    → TEI Simple
    → OpenDocument XML


Texinfo 文档规范中使用 `@Node` 来定义文件节点，顶层节点为 `@Node top`，节点概念
概念可以理解为书籍中的一个章节，甚至一个小节也可以定义为 @Node。这些节点组成
目录树，并且在 @Menu 块中逻列，菜单条目格式为 `* Node Name::`，行首使用 * 开头。
节点名称可以带空格，使用双冒号结束，后面跟节点介绍、描述信息。以下 Texinfo 内容
截取自文档 2.4 Short Sample，仅供参考。

     @node Top
     @top GNU Sample

     This manual is for GNU Sample
     (version @value{VERSION}, @value{UPDATED}).

     @menu
     * First Chapter::    The first chapter is the
                           only chapter in this sample.
     * Index::            Complete index.
     @end menu


     @node First Chapter
     @chapter First Chapter

     @cindex chapter, first
     This is the first chapter.

Texinfo 使用索引来快速定位 @Node 所在的位置，索引目标位置主要有两种形式：文档行号
和字节偏移。当执行 texi2any 或者 makeinfo 命令转译文档为 info 格式输出，产生索引数据，
形式参考如下，其中 Tab Table 是一种记录索引的形式，它在索引条目（Node）后使用一个
控制字符 0x7f 分隔符，后续是目标所在的字节数偏移：

    Key (Character) Index
    * global mark ring:                      Global Mark Ring.   (line    6)

    Variable Index
    * mark ring:                             Mark Ring.          (line    6)

    Concept Index
    Tag Table:
    Node: Mark Ring<0x7f>219617

在文档内容中，使用 `*note Node Name::` 这样的格式进行交叉引用，其中 *note* 这个是
提示词，可以省略，或者选择其它词。

    The Mark and the Region

    * Setting Mark::        Commands to set the mark.
    * Marking Objects::     Commands to put region around textual units.
    * Using Region::        Summary of ways to operate on contents of the region.
    * Mark Ring::           Previous mark positions saved so you can go back there.
    * Global Mark Ring::    Previous mark positions in various buffers.
    * Shift Selection::     Using shifted cursor motion keys.
    * Disabled Transient Mark:: Leaving regions unhighlighted by default.

    Many commands that insert text, such as ‘C-y’ (‘yank’), set the mark
    at the other end of the inserted text, without activating it.  This lets
    you easily return to that position (*note Mark Ring::).  You can tell
    that a command does this when it shows ‘Mark set’ in the echo area.


交叉引用是指当前主题中引用了其它页面的中概念、信息，支持交叉引用是现代电子
文档信息检索（Information Retrieval）的一项基本能力。Texinfo 支持多种交叉引用的
定义形式，例如锚点 `@anchor`，浮动标签 `@float`，或者 `@xref` 与 `@cite` 等。
即使是传统纸质印刷品，交叉引用也可以给出引用的页面信息，供阅读者参考。

转译生成 info 文档后，交叉引用显示为类似 `*Note Node Name::` 这样的字符串。

总之：GNU Emacs 和 Texinfo 作为开源技术，真真的好用💖。同类的开源文档文档
还有 reStructuredText，LaTeX 都是杰出的开源文档技术，永远值得依赖，是建设自有
数字图书馆的最佳选择。开源才直接获取一手信息，拒绝做二手信息消费者！


Man Page
========================================================

Emacs 集成了 WoMan 工具包，用于替换 man 工具浏览早期的 Linux 内置文档。
执行 `M-x woman-mini-help` 获取基本命令的使用帮助，或者执行 `woman-find-file` 
命令打开指定的 man 手册文件。WoMan 完全支持 man 格式，并且不会使用连字符
作为换行标记，因此也会产生单词切割的现象。缺点是需要指定文件的全路径。

WoMan 提供了三种用户接口来查找、格式化 man 文档：

1. • a topic interface similar to that provided by the standard Emacs ‘man’ command;
2. • a family of filename interfaces analogous to the standard Emacs ‘view-file’ command;
3. • an automatic interface that detects the file type from its contents.  (under test)

使用中发现，Emacs 提供的 `man` 命令并不能找到文档，有可能是 Msys2 平台兼容问题。
参考 woman.info 手册 5.1 Interface Options，可以配置以下参数，告诉 WoMan 如何查找文档，
并且执行 `C-u M-x woman` 重建文档缓存：

*  *woman-manpath* a list of directories that contain _directories of_ man files
*  *woman-path* a list of directories that contain man files _directly_.
*  *woman-cache-level* A positive integer representing the level of topic caching.
*  *woman-cache-filename* Either a string representing the full pathname of the WoMan 
    directory and topic cache file, or ‘nil’.

另外，根据 Emacs EShell 的程序逻辑，Shell 环境提供的外部命令可以作为一个备用，
因此，Msys2 环境中安装 man 命令，这样总可以保证可以查询 man page。


根据 GNU Coding Standards 所述，Man Page 是 GNU 项目的备选文档，不是必要的。
作为旧的文档系统，Man 手册结构比起 Texinfo 差了不止一个层次，没有索引，
也基本上没有目录。

`man` 命令本身是一个简单的排版工具，它将 man.N 文档格式化排版后，N 是一组数字，
用于划分文档的归类，基本的划分标准如下：

1.  Executable programs or shell commands
2.  System calls (functions provided by the kernel)
3.  Library calls (functions within program libraries)
4.  Special files (usually found in /dev)
5.  File formats and conventions eg /etc/passwd
6.  Games
7.  Miscellaneous  (including  macro  packages  and  conventions), e.g. man(7), groff(7)
8.  System administration commands (usually only for root)
9.  Kernel routines [Non standard]

手册中的 SEE ALSO 环境会按 section 编号给出参考文档，例如：

    apropos(1), groff(1), less(1), manpath(1),  nroff(1),  troff(1),  whatis(1),  zsoelim(1),
    manpath(5), man(7), catman(8), mandb(8)

man 手册系统涉及以下配置和手册存储默认路径：

1. `/etc/manpath.config` man-db configuration file.
2. `/usr/share/man` A global manual page hierarchy.

执行 man 命令获取指定命令的参考手册，一般不需要指定 section 编号，它按默认顺序
从头到尾检查现有的文档。可以手动修改 `/etc/manpath.config` 配置文件，指定
`$MANSECT` 中的搜索优先级排序：

```sh
    # The order of sections to search 

       1 n l 8 3 2 3posix 3pm 3perl 3am 5 4 9 6 7

    # SYNOPSIS
    man [man options] [[section] page ...] ...
    man -k [apropos options] regexp ...
    man -K [man options] [section] term ...
    man -f [whatis options] page ...
    man -l [man options] file ...
    man -w|-W [man options] page ...
```

再通过 `less` 命令打印出来，供用户查阅、浏览，所以使用 man 格式的手册文档，还
必需掌握 less 命令的常用的操作。掌握其中的正则搜索功能有利于快速定位关键信息，
例如，`^[A-Z]+$` 这个正则可以匹配 man 文档的标题，标题内容约定全使用大写字母：


      e  ^E  j  ^N  CR  *  Forward  one line   (or N lines).
      y  ^Y  k  ^K  ^P  *  Backward one line   (or N lines).
      f  ^F  ^V  SPACE  *  Forward  one window (or N lines).
      b  ^B  ESC-v      *  Backward one window (or N lines).
      z                 *  Forward  one window (and set window to N).
      w                 *  Backward one window (and set window to N).
      /pattern          *  Search forward for (N-th) matching line.
      ?pattern          *  Search backward for (N-th) matching line.
      n                 *  Repeat previous search (for N-th occurrence).
      N                 *  Repeat previous search in reverse direction.

man 文档结构遵循一套写作模板约定：

NAME, SYNOPSIS, CONFIGURATION, DESCRIPTION, OPTIONS,
EXIT STATUS, RETURN VALUE, ERRORS, ENVIRONMENT, FILES,  VERSIONS,  CONFORMING TO,  
NOTES, BUGS, EXAMPLE, AUTHORS, and SEE ALSO.

重要的章节有：

1. *NAME*：命令名字和简单描述。
2. *SYNOPSIS*：语法格式，比如 shell 命令会罗列所有的 option 和 argument 用法。
3. *DESCRIPTION*：详细用法解释。
4. *EXAMPLES*：用法举例，有时直接翻到最后看例子，会更容易理解。

SYNOPSIS 介绍语法，也就是命令语言规则，应该从语言学的角度去理解。

    bold text          粗体，应该原样输入；
    italic text        斜体，应该按实际使用场景替换成合适的参数；
    [-abc]             方括号，表示可选参数；
    -a|-b              竖线，表示参数相互冲突，不可以同时使用；
    argument ...       省略号，表示参数可以多次重复使用；
    [expression] ...   方括号加省略号，表示参数任意重复使用或省略；
    <abc>              尖括号，表示必选；

由于 man 命令在命令行打印文档，不能正常显示斜体，所以会使用下划线、彩色文字替代。

以下是 man 命令文档 EXAMPLES 环节中给出的示例参考，其本身归类 7：

```sh
man ls        # Display the manual page for the item (program) ls.

man 'man(7)'
man 7 man
man man.7     # Display the manual page for macro package man from section 7.

man -a intro  # Display, in succession, all of the available intro manual pages contained within the manual.
man -k printf # Search the short descriptions and manual page names for the keyword printf.
man -f smail  # Lookup the manual pages referenced by smail. Equivalent to `whatis smail`.

$ man -f man
man (7)              - macros to format man pages
man (1)              - an interface to the system reference manuals
```

常用 man 参数说明：

使用 -a, --all 连续打印所有查找到的匹配的文档，浏览完一个接着提示下一个：

    --Man-- next: man(7) [ view (return) | skip (Ctrl-D) | quit (Ctrl-C) ] 

Intro pages 是针对 man 文档的介绍性内容，不同的 man 文档分区都有相应的 intro 文档：
intro(1),  intro(2),  intro(3),  intro(4),  intro(5),  intro(6),  intro(7),  intro(8)

使用 -k, --apropos 查询相关信息，这可能会包含大量 Linux Programmer's Manual 或者
Library Functions Manual 等内容。

使用 -f, --whatis 查询“这是什么”信息，例如 printf 可以是命令行工具，也可以是
C/C++ 语言中的格式化输出函数，可以查询到它们有不同的归类：

```sh
$ man -f printf
printf (1)           - format and print data
printf (3)           - formatted output conversion
```

man 文档格式的源文档使用一系列宏符号定义，groff an.tmac macro package，通常称之
man macro package。源文档结构稍显混乱，基本上不适合直接阅读。
具体参考 man(7) - macros to format man pages

man 文档组织是碎片化的，粒度小到以 C 函数为单位，只适合用于查阅。
可以参考按工程分类的文档目录：https://www.man7.org/linux/man-pages/dir_by_project.html




This is texinfo.info, produced by makeinfo version 7.1 from
texinfo.texi.

This manual is for GNU Texinfo (version 7.1, 18 October 2023), a
documentation system that can produce both online information and a
printed manual from a single source using semantic markup.

   Copyright © 1988-2023 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".
INFO-DIR-SECTION Texinfo documentation system
START-INFO-DIR-ENTRY
* Texinfo: (texinfo).           The GNU documentation format.
* install-info: (texinfo)Invoking install-info. Update info/dir entries.
* texi2any: (texinfo)Invoking texi2any.         Translate Texinfo source.
* makeinfo: (texinfo)Invoking texi2any.         Translate Texinfo source.
* pod2texi: (pod2texi)Invoking pod2texi.        Translate Perl Pod to Texinfo.
* texi2dvi: (texinfo)Format with texi2dvi.      Print Texinfo documents.
* texi2pdf: (texinfo)PDF Output.                PDF output for Texinfo.
* pdftexi2dvi: (texinfo)PDF Output.             PDF output for Texinfo.
* texindex: (texinfo)Format with tex/texindex.  Sort Texinfo index files.
END-INFO-DIR-ENTRY


File: texinfo.info,  Node: Top,  Next: Copying Conditions,  Up: (dir)

# /Texinfo
*******

This manual is for GNU Texinfo (version 7.1, 18 October 2023), a
documentation system that can produce both online information and a
printed manual from a single source using semantic markup.

   The first part of this master menu lists the major nodes in this Info
document, including the @-command and concept indices.  The rest of the
menu lists all the lower-level nodes in the document.

* Menu:

* Copying Conditions::         Your rights.
* Overview::                   Texinfo in brief.
* Writing a Texinfo File::     Format of a Texinfo source file.
* Nodes::                      Writing nodes, the basic unit of Texinfo.
* Chapter Structuring::        Creating chapters, sections, appendices, etc.
* Cross References::           Writing cross-references.
* Marking Text::               Marking words and phrases as code, keyboard
                               input, meta-syntactic variables, and the like.
* Quotations and Examples::    Block quotations, examples, etc.
* Lists and Tables::           Itemized or numbered lists, and tables.
* Special Displays::           Floating figures and footnotes.
* Indices::                    Creating indices.
* Insertions::                 Inserting @-signs, braces, etc.
* Breaks::                     Forcing or preventing line and page breaks.
* Definition Commands::        Describing functions and the like uniformly.
* Internationalization::       Supporting languages other than English.
* Conditionals::               Specifying text for only some output cases.
* Defining New Texinfo Commands::  User-defined macros and aliases.
* Include Files::              How to incorporate other Texinfo files.
* Hardcopy with TeX::          Output for paper, with TeX.
* Generic Translator texi2any::  ‘texi2any’, an all-purpose converter.
* Creating and Installing Info Files::  Details on Info output.
* Generating HTML::            Details on HTML output.
* @-Command Details::          Details of the Texinfo @-commands.
* Tips::                       Hints on how to write a Texinfo document.
* Sample Texinfo Files::       Complete examples, including full texts.
* Texinfo Mode::               Using the GNU Emacs Texinfo mode.
* Global Document Commands::   Affecting formatting throughout.
* Info Format Specification::  Technical details of the Info file format.
* GNU Free Documentation License::  Copying this manual.
* Command and Variable Index::
* General Index::              A menu covering many topics.

 -- The Detailed Node Listing --

Overview of Texinfo

* Reporting Bugs::             Submitting effective bug reports.
* Output Formats::             Overview of the supported output formats.
* Info Files::                 What is an Info file?
* Printed Books::              Characteristics of a printed book or manual.
* Adding Output Formats::      Man pages and implementing new formats.
* History::                    Acknowledgements, contributors and genesis.

Writing a Texinfo File

* Conventions::                General rules for writing a Texinfo file.
* Comments::                   Writing comments and ignored text in general.
* Minimum::                    What a Texinfo file must have.
* Short Sample Texinfo File::  A short sample Texinfo file.
* Texinfo File Header::        The first lines.
* Directory Category::         A category for a manual.
* Document Permissions::       Ensuring your manual is free.
* Titlepage & Copyright Page:: Creating the title and copyright pages.
* Contents::                   How to create a table of contents.
* The Top Node::               Creating the 'Top' node and master menu.
* The Body of the Document::   The rest of the nodes.
* Ending a File::              What is at the end of a Texinfo file?

Texinfo File Header

* First Line::                 The first line of a Texinfo file.
* @setfilename::               Give the name of the output file.
* @settitle::                  Create a title for the printed work.
* Preamble::                   Start of the Texinfo file up to first content.
* Start and End of Header::    Formatting a region in Emacs requires this.

Document Permissions

* @copying::                   Declare the document's copying permissions.
* @insertcopying::             Where to insert the permissions.

Title and Copyright Pages

* @titlepage::                 Create a title for the printed document.
* @title @subtitle @author::   The ‘@title’, ‘@subtitle’, and ‘@author’
                               commands.
* @titlefont @center @sp::     The ‘@titlefont’, ‘@center’, and ‘@sp’ commands.
* Copyright::                  How to write the copyright notice and include
                               copying permissions.
* Heading Generation::         Turn on page headings after the title and
                               copyright pages.

The 'Top' Node and Master Menu

* Master Menu Parts::

Nodes

* Writing a Node::             How to write a ‘@node’ line.
* Node Names::                 How to choose node names.
* Node Line Requirements::     Keep names unique.
* First Node::                 How to write a 'Top' node.
* @top Command::               How to use the ‘@top’ command.
* Texinfo Document Structure:: Double structure of documents.
* Node Menu Illustration::     A diagram, and sample nodes and menus.
* Node Descriptions::          ‘@nodedescription’ and ‘@nodedescriptionblock’.
* Menus::                      Listing subordinate nodes.

Menus

* Writing a Menu::             What is a menu?
* Menu Example::               Two and three part menu entries.
* Menu Location::              Menus go at the ends of nodes.
* Menu Parts::                 A menu entry has three parts.
* Less Cluttered Menu Entry::  Two part menu entry.
* Other Info Files::           How to refer to a different Info file.

Chapter Structuring

* Tree Structuring::           A manual is like an upside down tree ...
* Structuring Command Types::
* @chapter::
* @unnumbered @appendix::
* @majorheading @chapheading::
* @section::
* @unnumberedsec @appendixsec @heading::
* @subsection::
* @unnumberedsubsec @appendixsubsec @subheading::
* @subsubsection::
* @part::                      Collections of chapters.
* Raise/lower sections::       How to change commands' hierarchical level.

Cross-references

* Cross Reference Commands::   A summary of the different commands.
* Cross Reference Parts::      A cross-reference has several parts.
* One Argument::               ‘@xref’ with one argument.
* Two Arguments::              ‘@xref’ with two arguments.
* Three Arguments::            ‘@xref’ with three arguments.
* Four and Five Arguments::    ‘@xref’ with four and five arguments.
* Referring to a Manual as a Whole::  Refer to an entire manual.
* @xref::                      Begin a reference with 'See' ...
* @ref::                       A reference for the last part of a sentence.
* @pxref::                     How to write a parenthetical cross-reference.
* @anchor::                    Defining arbitrary cross-reference targets
* @link::                      How to make a plain link.
* @inforef::                   How to refer to an Info-only file.
* @url::                       How to refer to a uniform resource locator.
* @cite::                      How to refer to books not in the Info system.
* PDF Colors::                 Colorizing URLs and other links in PDF output.

‘@url’, ‘@uref{URL[, TEXT][, REPLACEMENT]}’

* @url Examples::              Examples of using all the forms of ‘@url’.
* URL Line Breaking::          How lines are broken within ‘@url’ text.
* @url PDF Output Format::     A special option to hide links in PDF output.

Marking Text, Words and Phrases

* Indicating::                 How to indicate definitions, files, etc.
* Emphasis::                   How to emphasize text.

Indicating Definitions, Commands, etc.

* Useful Highlighting::        Highlighting provides useful information.
* @code::                      Indicating program code.
* @kbd::                       Showing keyboard input.
* @key::                       Specifying keys.
* @samp::                      Indicating a literal sequence of characters.
* @verb::                      Indicating a verbatim sequence of characters.
* @var::                       Indicating metasyntactic variables.
* @env::                       Indicating environment variables.
* @file::                      Indicating file names.
* @command::                   Indicating command names.
* @option::                    Indicating option names.
* @dfn::                       Specifying definitions.
* @abbr::                      Indicating abbreviations.
* @acronym::                   Indicating acronyms.
* @indicateurl::               Indicating an example URL.
* @email::                     Indicating an electronic mail address.

Emphasizing Text

* @emph @strong::              How to emphasize text in Texinfo.
* Smallcaps::                  How to use the small caps font.
* Fonts::                      Various font commands for printed output.

Quotations and Examples

* Block Enclosing Commands::   Different constructs for different purposes.
* @quotation::                 Writing a quotation.
* @indentedblock::             Block of text indented on left.
* @example::                   Writing an example in a fixed-width font.
* @verbatim::                  Writing a verbatim example.
* @lisp::                      Illustrating Lisp code.
* @display::                   Writing an example in the current font.
* @format::                    Writing an example without narrowed margins.
* @exdent::                    Undo indentation on a line.
* @flushleft @flushright::     Pushing text flush left or flush right.
* @raggedright::               Avoiding justification on the right.
* @noindent::                  Preventing paragraph indentation.
* @indent::                    Forcing paragraph indentation.
* @cartouche::                 Drawing rounded rectangles around text.
* small::                      Examples in a smaller font.

Lists and Tables

* Introducing Lists::          Texinfo formats lists for you.
* @itemize::                   How to construct a simple list.
* @enumerate::                 How to construct a numbered list.
* Two-column Tables::          How to construct a two-column table.
* Multi-column Tables::        How to construct generalized tables.

Making a Two-column Table

* @table::                     How to construct a two-column table.
* @ftable @vtable::            Automatic indexing for two-column tables.
* @itemx::                     How to put more entries in the first column.

‘@multitable’: Multi-column Tables

* Multitable Column Widths::   Defining multitable column widths.
* Multitable Rows::            Defining multitable rows, with examples.

Special Displays

* Floats::                     Figures, tables, and the like.
* Images::                     Including graphics and images.
* Footnotes::                  Writing footnotes.

Floats

* @float::                     Producing floating material.
* @caption @shortcaption::     Specifying descriptions for floats.
* @listoffloats::              A table of contents for floats.

Inserting Images

* Image Syntax::
* Image Scaling::

Footnotes

* Footnote Commands::          How to write a footnote in Texinfo.
* Footnote Styles::            Controlling how footnotes appear.

Indices

* Predefined Indices::         Use different indices for different kinds of
                               entries.
* Indexing Commands::          How to make an index entry.
* Advanced Indexing::          Advanced indexing commands.
* Index Entries::              Choose different words for index entries.
* Printing Indices & Menus::   How to print an index in hardcopy and generate
                               index menus in Info.
* Combining Indices::          How to combine indices.
* New Indices::                How to define your own indices.

Combining Indices

* @syncodeindex::              How to merge two indices, using ‘@code’ font for
                               the merged-from index.
* @synindex::                  How to merge two indices, using the roman font
                               for the merged-from index.

Special Insertions

* Special Characters::         Inserting @ {} , \ # &
* Inserting Quote Characters:: Inserting left and right quotes, in code.
* Inserting Space::            Inserting the right amount of whitespace.
* Inserting Accents::          Inserting accents and special characters.
* Inserting Quotation Marks::  Inserting quotation marks.
* Inserting Subscripts and Superscripts::  Inserting sub/superscripts.
* Inserting Math::             Formatting mathematical expressions.
* Glyphs for Text::            Inserting dots, bullets, currencies, etc.
* Glyphs for Programming::     Indicating results of evaluation, expansion of
                               macros, errors, etc.
* Inserting Unicode::          Inserting a Unicode character by code point.

Special Characters: Inserting @ {} , \ # &

* Inserting an Atsign::        ‘@@’, ‘@atchar{}’.
* Inserting Braces::           ‘@{ @}’, ‘@l rbracechar{}’.
* Inserting a Comma::          , and ‘@comma{}’.
* Inserting a Backslash::      \ and ‘@backslashchar{}’.
* Inserting a Hashsign::       # and ‘@hashchar{}’.
* Inserting an Ampersand::     & and ‘@ampchar{}’.

Inserting Space

* Multiple Spaces::            Inserting multiple spaces.
* Not Ending a Sentence::      Sometimes a . doesn't end a sentence.
* Ending a Sentence::          Sometimes it does.
* @frenchspacing::             Specifying end-of-sentence spacing.
* @dmn::                       Formatting a dimension.

Glyphs for Text

* @TeX @LaTeX::                The TeX logos.
* @copyright::                 The copyright symbol (c in a circle).
* @registeredsymbol::          The registered symbol (R in a circle).
* @dots::                      How to insert ellipses: ... and ...
* @bullet::                    How to insert a bullet: •
* @euro::                      How to insert the euro currency symbol.
* @pounds::                    How to insert the pounds currency symbol.
* @textdegree::                How to insert the degrees symbol.
* @minus::                     How to insert a minus sign.
* @geq @leq::                  How to insert greater/less-than-or-equal signs.

Glyphs for Programming

* Glyphs Summary::             List of the glyph commands.
* @result::                    How to show the result of expression.
* @expansion::                 How to indicate an expansion.
* @print::                     How to indicate generated output.
* @error::                     How to indicate an error message.
* @equiv::                     How to indicate equivalence.
* @point::                     How to indicate the location of point.
* Click Sequences::            Inserting GUI usage sequences.

Forcing and Preventing Breaks

* Break Commands::             Summary of break-related commands.
* Line Breaks::                Forcing line breaks.
* @- @hyphenation::            Helping TeX with hyphenation points.
* @allowcodebreaks::           Controlling line breaks within @code text.
* @w::                         Preventing unwanted line breaks in text.
* @tie::                       Inserting an unbreakable but varying space.
* @sp::                        Inserting blank lines.
* @page::                      Forcing the start of a new page.
* @group::                     Preventing unwanted page breaks.
* @need::                      Another way to prevent unwanted page breaks.

Definition Commands

* Def Cmd Template::           Writing descriptions using definition commands.
* Def Cmd Continuation Lines:: Continuing the heading over source lines.
* Optional Arguments::         Handling optional and repeated arguments.
* No Space After Definition Name::  How to omit space after name.
* @deffnx::                    Group two or more 'first' lines.
* Def Cmds in Detail::         Reference for all the definition commands.
* Generic Definition Commands::  Without automatic index entries.
* Def Cmd Conventions::        Conventions for writing definitions.
* Sample Function Definition:: An example.

The Definition Commands

* Functions Commands::         Commands for functions and similar entities.
* Typed Functions::            Commands for functions in typed languages.
* Variables Commands::         Commands for variables and similar entities.
* Typed Variables::            Commands for variables in typed languages.
* Data Types::                 The definition command for data types.
* Abstract Objects::           Commands for object-oriented programming.

Object-Oriented Programming

* Variables: Object-Oriented Variables.
* Methods:   Object-Oriented Methods.

Internationalization

* @documentlanguage::          Declaring the current language.
* @documentencoding::          Declaring the input encoding.

Conditionally Visible Text

* Conditional Commands::       Text for a given format.
* Conditional Not Commands::   Text for any format other than a given one.
* Raw Formatter Commands::     Using raw formatter commands.
* Inline Conditionals::        Brace-delimited conditional text.
* @set @clear @value::         Variable tests and substitutions.
* Testing for Texinfo Commands::  Testing if a Texinfo command is available.
* Conditional Nesting::        Using conditionals inside conditionals.

Flags: ‘@set’, ‘@clear’, conditionals, and ‘@value’

* @set @value::                Expand a flag variable to a string.
* @ifset @ifclear::            Format a region if a flag is set.
* @inlineifset @inlineifclear::  Brace-delimited flag conditionals.
* @value Example::             An easy way to update edition information.

Defining New Texinfo Commands

* Defining Macros::            Defining and undefining new commands.
* Invoking Macros::            Using a macro, once you've defined it.
* Macro Details::              Limitations of Texinfo macros.
* @alias::                     Command aliases.
* Line Macros::                Macros using whole line for arguments.
* @definfoenclose::            Customized highlighting.
* External Macro Processors::  ‘#line’ directives.

External Macro Processors: Line Directives

* #line Directive::
* #line and TeX::
* #line Syntax Details::

Include Files

* Using Include Files::        How to use the ‘@include’ command.
* Sample Include File::        A sample outer file with included files within
                               it; and a sample included file.
* @verbatiminclude::           Including a file verbatim.

Formatting and Printing with TeX

* Use TeX::                    Use TeX to format for hardcopy.
* Format with texi2dvi or texi2pdf::  The simplest way to format.
* Format with tex/texindex::   Formatting with explicit shell commands.
* Print with lpr::             How to print.
* Preparing for TeX::          What to do before you use TeX.
* Overfull hboxes::            What are and what to do with overfull hboxes.

Format with ‘tex’/‘texindex’

* Formatting Partial Documents::
* Details of texindex::

‘texi2any’: The Translator for Texinfo

* Invoking texi2any::          Running the translator from a shell.
* texi2any Environment Variables::  Control over output format and XS use.
* texi2any Printed Output::    Calling ‘texi2dvi’.
* Customization Variables::    Configuring ‘texi2any’.
* Internationalization of Document Strings::  Translating program-inserted
                               text.
* Invoking pod2texi::          Translating Perl Pod to Texinfo.
* texi2html::                  An ancestor of ‘texi2any’.

Customization Variables

* Commands: Customization Variables for @-Commands.
* Options:  Customization Variables and Options.
* HTML:     HTML Customization Variables.
* MathJax:  MathJax Customization Variables.
* latex2html:  latex2html Customization Variables.
* tex4ht:      tex4ht Customization Variables.
* LaTeX:    LaTeX Customization Variables.
* Other:    Other Customization Variables.

Invoking ‘pod2texi’: Convert Pod to Texinfo

* pod2texi manual page::       ‘pod2texi’ invocation in a manual page format.

Creating and Installing Info Files

* Installing an Info File::
* Tag and Split Files::
* Info Format FAQ::

Installing an Info File

* Directory File::             The top-level menu for all Info files.
* New Info File::              Listing a new Info file.
* Other Info Directories::     How to specify Info files that are located in
                               other directories.
* Installing Dir Entries::     How to specify what menu entry to add to the
                               Info directory.
* Invoking install-info::      ‘install-info’ options.

Generating HTML

* HTML Translation::           Details of the HTML output.
* HTML Splitting::             How HTML output is split.
* HTML CSS::                   Influencing HTML output with Cascading Style
                               Sheets.
* @documentdescription::       Document summary for the HTML output.
* Generating EPUB::            Details on the EPUB output.
* Syntax Highlighting::
* HTML Xref::

Generating EPUB

* EPUB Output File and Directory::  Use syntax highlighting in code excerpts.
* EPUB Cross-References::      Cross-references in HTML output.
* EPUB HTML::

HTML Cross-references

* Link Basics:       HTML Xref Link Basics.
* Node Expansion:    HTML Xref Node Name Expansion.
* Command Expansion: HTML Xref Command Expansion.
* 8-bit Expansion:   HTML Xref 8-bit Character Expansion.
* Mismatch:          HTML Xref Mismatch.
* Configuration:     HTML Xref Configuration.  ‘htmlxref.cnf’.

@-Command Details

* Command Syntax::
* Command List::
* Command Contexts::
* Obsolete @-Commands::

Sample Texinfo Files

* GNU Sample Texts::
* Verbatim Copying License::
* All-permissive Copying License::

Using Texinfo Mode

* Texinfo Mode Overview::      How Texinfo mode can help you.
* Emacs Editing::              Texinfo mode adds to GNU Emacs' general purpose
                               editing features.
* Inserting::                  How to insert frequently used @-commands.
* Showing the Structure::      How to show the structure of a file.
* Updating Nodes and Menus::   How to update or create new nodes and menus.
* Info Formatting::            How to format for Info.
* Printing with Emacs::        How to format with TeX and print with Emacs.
* Texinfo Mode Summary::       Summary of all the Texinfo mode commands.
* Formatting Info files::      Processing directly Info files.
* Catching Mistakes::          How to find mistakes in formatting.
* Batch Formatting::           How to format for Info in Emacs batch mode.

Showing the Sectioning Structure of a File

* Using texinfo-show-structure::  How to use ‘texinfo-show-structure’.
* Using occur::                How to list all lines containing a pattern.

Updating Nodes and Menus

* Updating Commands::          Five major updating commands.
* Updating Requirements::      How to structure a Texinfo file for using the
                               updating command.
* Update Multiple Files::      How to create and update nodes and menus when
                               using included files.
* Include Files Requirements:: How to structure outer file and include files
                               for the updating command.
* Other Updating Commands::    How to indent descriptions, insert missing nodes
                               lines, and update nodes in sequence.

Formatting for Info

* texi2any in Emacs::          How to run ‘texi2any’ from Emacs.
* texinfo-format commands::    Two Info formatting commands written in Emacs
                               Lisp are an alternative to ‘texi2any’.

Formatting and Printing with Emacs

* Texinfo Mode Printing::      How to format and print part or all of a file.
* Compile-Command::            How to print using Emacs's compile command.

Direct Formatting of Info files

* Tagifying::                  How to tagify a file.
* Splitting::                  How to split a file manually.

Catching Mistakes

* texi2any Preferred::         ‘texi2any’ finds errors.
* Debugging with Info::        How to catch errors with Info formatting.
* Debugging with TeX::         How to catch errors with TeX formatting.
* Running Info-validate::      How to find badly referenced nodes.

Finding Badly Referenced Nodes

* Using Info-validate::        How to run ‘Info-validate’.
* Unsplit and Tagify::         How to create an unsplit file and add a tag
                               table for validation.

Global Document Commands

* @setchapternewpage::         Start chapters on right-hand pages.
* Headings::                   Page headings.
* @paragraphindent::           Specify paragraph indentation.
* @firstparagraphindent::      Suppressing first paragraph indentation.
* @exampleindent::             Specify environment indentation.
* @smallbook::                 How to print small format books and manuals.
* A4 Paper::                   How to print on A4, A5 or B6 paper.
* @pagesizes::                 How to print with customized page sizes.
* Microtypography::            Improving the appearance of paragraphs.
* Magnification::              How to print scaled up output.

Page Headings

* @headings::                  An option for turning headings on and off and
                               double or single sided printing.
* Heading Format::             Standard page heading formats.
* Custom Headings::            How to create your own headings and footings.

Info Format Specification

* Whole:           Info Format Whole Manual.  Split vs. nonsplit manuals.
* Preamble:        Info Format Preamble.
* Indirect:        Info Format Indirect Table.
* Tag table:       Info Format Tag Table.
* Local variables: Info Format Local Variables.
* Regular nodes:   Info Format Regular Nodes.
* Menu:            Info Format Menu.
* Image:           Info Format Image.
* Printindex:      Info Format Printindex.
* Cross-Reference: Info Format Cross Reference.


File: texinfo.info,  Node: Copying Conditions,  Next: Overview,  Prev: Top,  Up: Top

# /Texinfo Copying Conditions
**************************

GNU Texinfo is “free software”; this means that everyone is free to use
it and free to redistribute it on certain conditions.  Texinfo is not in
the public domain; it is copyrighted and there are restrictions on its
distribution, but these restrictions are designed to permit everything
that a good cooperating citizen would want to do.  What is not allowed
is to try to prevent others from further sharing any version of Texinfo
that they might get from you.

   Specifically, we want to make sure that you have the right to give
away copies of the programs that relate to Texinfo, that you receive
source code or else can get it if you want it, that you can change these
programs or use pieces of them in new free programs, and that you know
you can do these things.

   To make sure that everyone has such rights, we have to forbid you to
deprive anyone else of these rights.  For example, if you distribute
copies of the Texinfo related programs, you must give the recipients all
the rights that you have.  You must make sure that they, too, receive or
can get the source code.  And you must tell them their rights.

   Also, for our own protection, we must make certain that everyone
finds out that there is no warranty for the programs that relate to
Texinfo.  If these programs are modified by someone else and passed on,
we want their recipients to know that what they have is not what we
distributed, so that any problems introduced by others will not reflect
on our reputation.

   The precise conditions of the licenses for the programs currently
being distributed that relate to Texinfo are found in the General Public
Licenses that accompany them.  This manual is covered by the GNU Free
Documentation License (*note* GNU Free Documentation License::).


File: texinfo.info,  Node: Overview,  Next: Writing a Texinfo File,  Prev: Copying Conditions,  Up: Top

# /1 Overview of Texinfo
*********************

“Texinfo” is a documentation system that uses a single source file to
produce both online information and printed output.  This means that
instead of writing several different documents, one for each output
format, you need only write one document.

   Using Texinfo, you can create a printed document (via the TeX
typesetting system) in PDF format, including chapters, sections,
cross-references, and indices.  From the same Texinfo source file, you
can create HTML output suitable for use with a web browser, you can
create an Info file for use in GNU Emacs or other Info-reading programs,
and also create DocBook, EPUB 3, or LaTeX files.

   A Texinfo source file is a plain text file containing text
interspersed with “@-commands” (words preceded by an ‘@’) that tell the
Texinfo processors what to do.  Texinfo's markup commands are almost
entirely “semantic”; that is, they specify the intended meaning of text
in the document, rather than physical formatting instructions.

   GNU Emacs has a special mode, called Texinfo mode, that provides
various Texinfo-related features.  (*Note* Texinfo Mode::.)

   Texinfo was devised specifically for the purpose of writing software
documentation and manuals.  If you want to write a good manual for your
program, Texinfo has many features which we hope will make your job
easier.  However, Texinfo is not intended to be a general-purpose
formatting program.  It provides almost no commands for controlling the
final formatting, so may be inappropriate for your needs if you want to
lay out a newspaper, devise a glossy magazine ad, or follow the exact
formatting requirements of a publishing house.

   Spell "Texinfo" with a capital "T" and the other letters in
lowercase.  The first syllable of "Texinfo" is pronounced like "speck",
not "hex".  This odd pronunciation is derived from the pronunciation of
TeX.  Pronounce TeX as if the ‘X’ were the last sound in the name
'Bach'.  In the word TeX, the ‘X’ is, rather than the English letter
"ex", actually the Greek letter "chi".

   Texinfo is the official documentation format of the GNU project.
More information, including manuals for GNU packages, is available at
the GNU documentation web page (http://www.gnu.org/doc/).

* Menu:

* Reporting Bugs::             Submitting effective bug reports.
* Output Formats::             Overview of the supported output formats.
* Info Files::                 What is an Info file?
* Printed Books::              Characteristics of a printed book or manual.
* Adding Output Formats::      Man pages and implementing new formats.
* History::                    Acknowledgements, contributors and genesis.


File: texinfo.info,  Node: Reporting Bugs,  Next: Output Formats,  Up: Overview

/Table of Contents
==================

* Texinfo Copying Conditions
* 1 Overview of Texinfo
* 2 Writing a Texinfo File
* 3 Nodes
* 4 Chapter Structuring
* 5 Cross-references
* 6 Marking Text, Words and Phrases
* 7 Quotations and Examples
* 8 Lists and Tables
* 9 Special Displays
* 10 Indices
* 11 Special Insertions
* 12 Forcing and Preventing Breaks
* 13 Definition Commands
* 14 Internationalization
* 15 Conditionally Visible Text
* 16 Defining New Texinfo Commands
* 17 Include Files
* 18 Formatting and Printing with TeX
* 19 ‘texi2any’: The Translator for Texinfo
* 20 Creating and Installing Info Files
* 21 Generating HTML
* Appendix A @-Command Details
* Appendix B Tips and Hints
* Appendix C Sample Texinfo Files
* Appendix D Using Texinfo Mode
* Appendix E Global Document Commands
* Appendix F Info Format Specification
* Appendix G GNU Free Documentation License
* Command and Variable Index
* General Index
* Texinfo
* Texinfo Copying Conditions
* 1 Overview of Texinfo
*   1.1 Reporting Bugs
*   1.2 Output Formats
*   1.3 Info Files
*   1.4 Printed Books
*   1.5 Adding Output Formats
*   1.6 History
* 2 Writing a Texinfo File
*   2.1 General Syntactic Conventions
*   2.2 Comments
*   2.3 What a Texinfo File Must Have
*   2.4 Short Sample
*   2.5 Texinfo File Header
*     2.5.1 The First Line of a Texinfo File
*     2.5.2 ‘@setfilename’: Set the Output File Name
*     2.5.3 ‘@settitle’: Set the Document Title
*     2.5.4 Preamble
*     2.5.5 Start and End of Header for Emacs
*   2.6 Directory Category
*   2.7 Document Permissions
*     2.7.1 ‘@copying’: Declare Copying Permissions
*     2.7.2 ‘@insertcopying’: Include Permissions Text
*   2.8 Title and Copyright Pages
*     2.8.1 ‘@titlepage’
*     2.8.2 ‘@title’, ‘@subtitle’, and ‘@author’
*     2.8.3 ‘@titlefont’, ‘@center’, and ‘@sp’
*     2.8.4 Copyright Page
*     2.8.5 Heading Generation
*   2.9 Generating a Table of Contents
*   2.10 The 'Top' Node and Master Menu
*     2.10.1 Parts of a Master Menu
*   2.11 The Body of the Document
*   2.12 Ending a Texinfo File
* 3 Nodes
*   3.1 Writing a ‘@node’ Line
*   3.2 Choosing Node Names
*   3.3 ‘@node’ Line Requirements
*   3.4 The First Node
*   3.5 The ‘@top’ Sectioning Command
*   3.6 Texinfo Document Structure
*   3.7 Node and Menu Illustration
*   3.8 Node Descriptions
*   3.9 Menus
*     3.9.1 Writing a Menu
*     3.9.2 A Menu Example
*     3.9.3 Menu Location
*     3.9.4 The Parts of a Menu
*     3.9.5 Less Cluttered Menu Entry
*     3.9.6 Referring to Other Info Files
* 4 Chapter Structuring
*   4.1 Tree Structure of Sections
*   4.2 Structuring Command Types
*   4.3 ‘@chapter’: Chapter Structuring
*   4.4 ‘@unnumbered’, ‘@appendix’: Chapters with Other Labeling
*   4.5 ‘@majorheading’, ‘@chapheading’: Chapter-level Headings
*   4.6 ‘@section’: Sections Below Chapters
*   4.7 ‘@unnumberedsec’, ‘@appendixsec’, ‘@heading’
*   4.8 ‘@subsection’: Subsections Below Sections
*   4.9 The ‘@subsection’-like Commands
*   4.10 ‘@subsubsection’ and Other Subsub Commands
*   4.11 ‘@part’: Groups of Chapters
*   4.12 Raise/lower Sections: ‘@raisesections’ and ‘@lowersections’
* 5 Cross-references
*   5.1 Different Cross-reference Commands
*   5.2 Parts of a Cross-reference
*   5.3 ‘@xref’ with One Argument
*   5.4 ‘@xref’ with Two Arguments
*   5.5 ‘@xref’ with Three Arguments
*   5.6 ‘@xref’ with Four and Five Arguments
*   5.7 Referring to a Manual as a Whole
*   5.8 ‘@xref’
*   5.9 ‘@ref’
*   5.10 ‘@pxref’
*   5.11 ‘@anchor’: Defining Arbitrary Cross-reference Targets
*   5.12 ‘@link’: Plain, unadorned hyperlink
*   5.13 ‘@inforef’: Cross-references to Info-only Material
*   5.14 ‘@url’, ‘@uref{URL[, TEXT][, REPLACEMENT]}’
*     5.14.1 ‘@url’ Examples
*     5.14.2 URL Line Breaking
*     5.14.3 ‘@url’ PDF Output Format
*   5.15 ‘@cite’{REFERENCE}
*   5.16 PDF Colors
* 6 Marking Text, Words and Phrases
*   6.1 Indicating Definitions, Commands, etc.
*     6.1.1 Highlighting Commands are Useful
*     6.1.2 ‘@code’{SAMPLE-CODE}
*     6.1.3 ‘@kbd’{KEYBOARD-CHARACTERS}
*     6.1.4 ‘@key’{KEY-NAME}
*     6.1.5 ‘@samp’{TEXT}
*     6.1.6 ‘@verb’{CHARTEXTCHAR}
*     6.1.7 ‘@var’{METASYNTACTIC-VARIABLE}
*     6.1.8 ‘@env’{ENVIRONMENT-VARIABLE}
*     6.1.9 ‘@file’{FILE-NAME}
*     6.1.10 ‘@command’{COMMAND-NAME}
*     6.1.11 ‘@option’{OPTION-NAME}
*     6.1.12 ‘@dfn’{TERM}
*     6.1.13 ‘@abbr’{ABBREVIATION[, MEANING]}
*     6.1.14 ‘@acronym’{ACRONYM[, MEANING]}
*     6.1.15 ‘@indicateurl’{UNIFORM-RESOURCE-LOCATOR}
*     6.1.16 ‘@email’{EMAIL-ADDRESS[, DISPLAYED-TEXT]}
*   6.2 Emphasizing Text
*     6.2.1 ‘@emph’{TEXT} and ‘@strong’{TEXT}
*     6.2.2 ‘@sc’{TEXT}: The Small Caps Font
*     6.2.3 Fonts for Printing
* 7 Quotations and Examples
*   7.1 Block Enclosing Commands
*   7.2 ‘@quotation’: Block Quotations
*   7.3 ‘@indentedblock’: Indented text blocks
*   7.4 ‘@example’: Example Text
*   7.5 ‘@verbatim’: Literal Text
*   7.6 ‘@lisp’: Marking a Lisp Example
*   7.7 ‘@display’: Examples Using the Text Font
*   7.8 ‘@format’: Examples Using the Full Line Width
*   7.9 ‘@exdent’: Undoing a Line's Indentation
*   7.10 ‘@flushleft’ and ‘@flushright’
*   7.11 ‘@raggedright’: Ragged Right Text
*   7.12 ‘@noindent’: Omitting Indentation
*   7.13 ‘@indent’: Forcing Indentation
*   7.14 ‘@cartouche’: Rounded Rectangles
*   7.15 ‘@small...’ Block Commands
* 8 Lists and Tables
*   8.1 Introducing Lists
*   8.2 ‘@itemize’: Making an Itemized List
*   8.3 ‘@enumerate’: Making a Numbered or Lettered List
*   8.4 Making a Two-column Table
*     8.4.1 Using the ‘@table’ Command
*     8.4.2 ‘@ftable’ and ‘@vtable’
*     8.4.3 ‘@itemx’: Second and Subsequent Items
*   8.5 ‘@multitable’: Multi-column Tables
*     8.5.1 Multitable Column Widths
*     8.5.2 Multitable Rows
* 9 Special Displays
*   9.1 Floats
*     9.1.1 ‘@float’ [TYPE][,LABEL]: Floating Material
*     9.1.2 ‘@caption’ & ‘@shortcaption’
*     9.1.3 ‘@listoffloats’: Tables of Contents for Floats
*   9.2 Inserting Images
*     9.2.1 Image Syntax
*     9.2.2 Image Scaling
*   9.3 Footnotes
*     9.3.1 Footnote Commands
*     9.3.2 Footnote Styles
* 10 Indices
*   10.1 Predefined Indices
*   10.2 Defining the Entries of an Index
*   10.3 Advanced Indexing Commands
*   10.4 Making Index Entries
*   10.5 Printing Indices and Menus
*   10.6 Combining Indices
*     10.6.1 ‘@syncodeindex’: Combining Indices Using ‘@code’
*     10.6.2 ‘@synindex’: Combining Indices
*   10.7 Defining New Indices
* 11 Special Insertions
*   11.1 Special Characters: Inserting @ {} , \ # &
*     11.1.1 Inserting '@' with ‘@@’ and ‘@atchar{}’
*     11.1.2 Inserting '{ '}' with ‘@{ @}’ and ‘@l rbracechar{}’
*     11.1.3 Inserting ',' with ‘@comma{}’
*     11.1.4 Inserting '\' with ‘@backslashchar{}’
*     11.1.5 Inserting '#' with ‘@hashchar{}’
*     11.1.6 Inserting '&' with ‘@&’ and ‘@ampchar{}’
*   11.2 Inserting Quote Characters
*   11.3 Inserting Space
*     11.3.1 Multiple Spaces
*     11.3.2 Not Ending a Sentence
*     11.3.3 Ending a Sentence
*     11.3.4 ‘@frenchspacing’ VAL: Control Sentence Spacing
*     11.3.5 ‘@dmn’{DIMENSION}: Format a Dimension
*   11.4 Inserting Accents
*   11.5 Inserting Quotation Marks
*   11.6 ‘@sub’ and ‘@sup’: Inserting Subscripts and Superscripts
*   11.7 ‘@math’ and ‘@displaymath’: Formatting Mathematics
*   11.8 Glyphs for Text
*     11.8.1 ‘@TeX’{} (TeX) and ‘@LaTeX’{} (LaTeX)
*     11.8.2 ‘@copyright{}’ (©)
*     11.8.3 ‘@registeredsymbol{}’ (®)
*     11.8.4 ‘@dots’ (...) and ‘@enddots’ (...)
*     11.8.5 ‘@bullet’ (•)
*     11.8.6 ‘@euro’ (€): Euro Currency Symbol
*     11.8.7 ‘@pounds’ (£): Pounds Sterling
*     11.8.8 ‘@textdegree’ (°): Degrees Symbol
*     11.8.9 ‘@minus’ (−): Inserting a Minus Sign
*     11.8.10 ‘@geq’ (≥) and ‘@leq’ (≤): Inserting Relations
*   11.9 Glyphs for Programming
*     11.9.1 Glyphs Summary
*     11.9.2 ‘@result{}’ (⇒): Result of an Expression
*     11.9.3 ‘@expansion{}’ (↦): Indicating an Expansion
*     11.9.4 ‘@print{}’ (⊣): Indicating Generated Output
*     11.9.5 ‘@error{}’ (error→): Indicating an Error Message
*     11.9.6 ‘@equiv{}’ (≡): Indicating Equivalence
*     11.9.7 ‘@point{}’ (⋆): Indicating Point in a Buffer
*     11.9.8 Click Sequences
*   11.10 Inserting Unicode: ‘@U’
* 12 Forcing and Preventing Breaks
*   12.1 Break Commands
*   12.2 `@*` and `@/`: Generate and Allow Line Breaks
*   12.3 ‘@-’ and ‘@hyphenation’: Hyphenation in Printed Output
*   12.4 ‘@allowcodebreaks’: Control Line Breaks in ‘@code’
*   12.5 ‘@w’{TEXT}: Prevent Line Breaks
*   12.6 ‘@tie{}’: Inserting an Unbreakable Space
*   12.7 ‘@sp’ N: Insert Blank Lines
*   12.8 ‘@page’: Start a New Page
*   12.9 ‘@group’: Prevent Page Breaks
*   12.10 ‘@need MILS’: Prevent Page Breaks
* 13 Definition Commands
*   13.1 The Template for a Definition
*   13.2 Definition Command Continuation Lines
*   13.3 Optional and Repeated Arguments
*   13.4 Omitting the Space After a Definition Name
*   13.5 ‘@deffnx’, et al.: Two or More 'First' Lines
*   13.6 The Definition Commands
*     13.6.1 Functions and Similar Entities
*     13.6.2 Functions in Typed Languages
*     13.6.3 Variables and Similar Entities
*     13.6.4 Variables in Typed Languages
*     13.6.5 Data Types
*     13.6.6 Object-Oriented Programming
*       13.6.6.1 Object-Oriented Variables
*       13.6.6.2 Object-Oriented Methods
*   13.7 Generic Definition Commands
*   13.8 Conventions for Writing Definitions
*   13.9 A Sample Function Definition
* 14 Internationalization
*   14.1 ‘@documentlanguage LL[_CC]’: Set the Document Language
*   14.2 ‘@documentencoding ENC’: Set Input Encoding
* 15 Conditionally Visible Text
*   15.1 Conditional Commands
*   15.2 Conditional Not Commands
*   15.3 Raw Formatter Commands
*   15.4 Inline Conditionals: ‘@inline’, ‘@inlineifelse’, ‘@inlineraw’
*   15.5 Flags: ‘@set’, ‘@clear’, conditionals, and ‘@value’
*     15.5.1 ‘@set’ and ‘@value’
*     15.5.2 ‘@ifset’ and ‘@ifclear’
*     15.5.3 ‘@inlineifset’ and ‘@inlineifclear’
*     15.5.4 ‘@value’ Example
*   15.6 Testing for Texinfo Commands: ‘@ifcommanddefined’, ‘@ifcommandnotdefined’
*   15.7 Conditional Nesting
* 16 Defining New Texinfo Commands
*   16.1 Defining Macros
*   16.2 Invoking Macros
*   16.3 Macro Details and Caveats
*   16.4 ‘@alias NEW=EXISTING’
*   16.5 Line Macros
*   16.6 ‘@definfoenclose’: Customized Highlighting
*   16.7 External Macro Processors: Line Directives
*     16.7.1 ‘#line’ Directive
*     16.7.2 ‘#line’ and TeX
*     16.7.3 ‘#line’ Syntax Details
* 17 Include Files
*   17.1 How to Use Include Files
*   17.2 Sample File with ‘@include’
*   17.3 ‘@verbatiminclude’ FILE: Include a File Verbatim
* 18 Formatting and Printing with TeX
*   18.1 Use TeX
*   18.2 Format with ‘texi2dvi’ or ‘texi2pdf’
*   18.3 Format with ‘tex’/‘texindex’
*     18.3.1 Formatting Partial Documents
*     18.3.2 Details of ‘texindex’
*   18.4 Print with ‘lpr’ from Shell
*   18.5 Preparing for TeX
*   18.6 Overfull "hboxes"
* 19 ‘texi2any’: The Translator for Texinfo
*   19.1 Invoking ‘texi2any’ from a Shell
*   19.2 Environment Variables Recognized by ‘texi2any’
*   19.3 ‘texi2any’ Printed Output
*   19.4 Customization Variables
*     19.4.1 Customization Variables for @-Commands
*     19.4.2 Customization Variables and Options
*     19.4.3 HTML Customization Variables
*     19.4.4 MathJax Customization Variables
*     19.4.5 ‘latex2html’ Customization Variables
*     19.4.6 ‘tex4ht’ Customization Variables
*     19.4.7 LaTeX Customization Variables
*     19.4.8 Other Customization Variables
*   19.5 Internationalization of Document Strings
*   19.6 Invoking ‘pod2texi’: Convert Pod to Texinfo
*     19.6.1 pod2texi
*   19.7 ‘texi2html’: Ancestor of ‘texi2any’
* 20 Creating and Installing Info Files
*   20.1 Installing an Info File
*     20.1.1 The Directory File ‘dir’
*     20.1.2 Listing a New Info File
*     20.1.3 Info Files in Other Directories
*     20.1.4 Installing Info Directory Files
*     20.1.5 Invoking ‘install-info’
*   20.2 Tag Files and Split Files
*   20.3 Info Format FAQ
* 21 Generating HTML
*   21.1 HTML Translation
*   21.2 HTML Splitting
*   21.3 HTML CSS
*   21.4 ‘@documentdescription’: Summary Text
*   21.5 Generating EPUB
*     21.5.1 Container Directory and Output Files
*     21.5.2 EPUB Cross-References
*     21.5.3 HTML Generated for EPUB
*   21.6 Code Examples Syntax Highlighting in HTML
*   21.7 HTML Cross-references
*     21.7.1 HTML Cross-reference Link Basics
*     21.7.2 HTML Cross-reference Node Name Expansion
*     21.7.3 HTML Cross-reference Command Expansion
*     21.7.4 HTML Cross-reference 8-bit Character Expansion
*     21.7.5 HTML Cross-reference Mismatch
*     21.7.6 HTML Cross-reference Configuration: ‘htmlxref.cnf’
* Appendix A @-Command Details
*   A.1 @-Command Syntax
*   A.2 @-Command List
*   A.3 @-Command Contexts
*   A.4 Obsolete @-Commands
* Appendix B Tips and Hints
* Appendix C Sample Texinfo Files
*   C.1 GNU Sample Texts
*   C.2 Verbatim Copying License
*   C.3 All-permissive Copying License
* Appendix D Using Texinfo Mode
*   D.1 Texinfo Mode Overview
*   D.2 The Usual GNU Emacs Editing Commands
*   D.3 Inserting Frequently Used Commands
*   D.4 Showing the Sectioning Structure of a File
*     D.4.1 Using ‘texinfo-show-structure’
*     D.4.2 Using ‘occur’
*   D.5 Updating Nodes and Menus
*     D.5.1 The Updating Commands
*     D.5.2 Updating Requirements
*     D.5.3 Update Outer File and Include Files
*     D.5.4 Include Files Requirements
*     D.5.5 Other Updating Commands
*   D.6 Formatting for Info
*     D.6.1 Running ‘texi2any’/‘makeinfo’ Within Emacs
*     D.6.2 The ‘texinfo-format...’ Commands
*   D.7 Formatting and Printing with Emacs
*     D.7.1 Formatting and Printing in Texinfo Mode
*     D.7.2 Using the Local Variables List
*   D.8 Texinfo Mode Summary
*   D.9 Direct Formatting of Info files
*     D.9.1 Tagifying a File
*     D.9.2 Splitting a File Manually
*   D.10 Catching Mistakes
*     D.10.1 ‘texi2any’ Preferred
*     D.10.2 Catching Errors with Info Formatting
*     D.10.3 Debugging with TeX
*     D.10.4 Finding Badly Referenced Nodes
*       D.10.4.1 Using ‘Info-validate’
*       D.10.4.2 Creating an Unsplit File and Adding a Tag Table
*   D.11 Batch Formatting
* Appendix E Global Document Commands
*   E.1 ‘@setchapternewpage’: Blank Pages Before Chapters
*   E.2 Page Headings
*     E.2.1 The ‘@headings’ Command
*     E.2.2 Standard Heading Formats
*     E.2.3 How to Make Your Own Headings
*   E.3 ‘@paragraphindent’: Controlling Paragraph Indentation
*   E.4 ‘@firstparagraphindent’: Indenting After Headings
*   E.5 ‘@exampleindent’: Environment Indenting
*   E.6 ‘@smallbook’: Printing "Small" Books
*   E.7 Printing on A4 Paper
*   E.8 ‘@pagesizes’ [WIDTH][, HEIGHT]: Custom Page Sizes
*   E.9 Microtypography
*   E.10 Magnification
* Appendix F Info Format Specification
*   F.1 Info Format: A Whole Manual
*   F.2 Info Format: Preamble
*   F.3 Info Format: Indirect Table
*   F.4 Info Format: Tag Table
*   F.5 Info Format: Local Variables
*   F.6 Info Format: Regular Nodes
*   F.7 Info Format: Menu
*   F.8 Info Format: Image
*   F.9 Info Format: Printindex
*   F.10 Info Format: Cross-reference
* Appendix G GNU Free Documentation License
* Command and Variable Index
* General Index


1.1 Reporting Bugs
==================

We welcome bug reports and suggestions for any aspect of the Texinfo
system: programs, documentation, installation, etc.  Please email them
to <bug-texinfo@gnu.org>.  You can get the latest version of Texinfo via
its home page, <http://www.gnu.org/software/texinfo>.

   For bug reports, please include enough information for the
maintainers to reproduce the problem.  Generally speaking, that means:

   • The version number of Texinfo and the program(s) or manual(s)
     involved.
   • The contents of any input files necessary to reproduce the bug.
   • Precisely how you ran any program(s) involved.
   • A description of the problem and samples of any erroneous output.
   • Hardware and operating system names and versions.
   • Anything else that you think would be helpful.

   When in doubt whether something is needed or not, include it.  It's
better to include too much than to leave out something important.

   It is critical to send an actual input file that reproduces the
problem.

   Any problems with the Info reader in Emacs should be reported to the
Emacs developers: see *note* (emacs)Bugs::.

   Patches are welcome; if possible, please make them with ‘diff -c’,
‘diff -u’ (*note* (diffutils)::), or ‘git diff’ and include ‘ChangeLog’
entries (*note* (standards)Change Log::), and follow the existing coding
style.


File: texinfo.info,  Node: Output Formats,  Next: Info Files,  Prev: Reporting Bugs,  Up: Overview

1.2 Output Formats
==================

Here is an overview of the output formats currently supported by
Texinfo.

Info
     (Generated via ‘texi2any’.)  Info format is mostly a plain text
     transliteration of the Texinfo source.  It adds a few control
     characters to provide navigational information for
     cross-references, indices, and so on.  The Emacs Info subsystem
     (*note* (info)Top::), and the standalone ‘info’ program (*note*
     (info-stnd)Top::), among others, can read these files.  *Note* Info
     Files::, and *note* Creating and Installing Info Files::.

Plain text
     (Generated via ‘texi2any --plaintext’.)  This is almost the same as
     Info output with the navigational control characters are omitted.

HTML
     (Generated via ‘texi2any --html’.)  HTML, standing for Hyper Text
     Markup Language, is the language for writing documents on the World
     Wide Web.  Web browsers can render this language online.  There are
     many versions of HTML, both different standards and
     browser-specific variations.  ‘texi2any’ uses a subset of the
     language that can be interpreted by any common browser,
     intentionally not using many newer or less widely-supported tags.
     Although the native output is thus rather plain, it can be
     customized at various levels, if desired.  *Note* Generating HTML::.

EPUB 3
     (Generated via ‘texi2any --epub3’.)  EPUB is a format designed for
     reading electronic books on portable devices.  It is a derivative
     of HTML.  The format was developed by the International Digital
     Publishing Forum (IDPF), which is now part of the World Wide Web
     Consortium (W3C).  The latest major revision, EPUB 3, dates from
     2011.

DVI
     (Generated via ‘texi2dvi’.)  The DeVIce Independent binary format
     is output by the TeX typesetting program (<http://tug.org>).  This
     is then read by a DVI 'driver', which knows the actual
     device-specific commands that can be viewed or printed, notably
     Dvips for translation to PostScript (*note* (dvips)Top::) and Xdvi
     for viewing on an X display
     (<http://sourceforge.net/projects/xdvi/>).  *Note* Hardcopy with
     TeX::.  (Be aware that the Texinfo language is very different from
     TeX's usual languages: plain TeX, LaTeX, ConTeXt, etc.)

PostScript
     (Generated via ‘texi2dvi --ps’.)  PostScript is a page description
     language that became widely used around 1985 and is still used
     today.  <https://en.wikipedia.org/wiki/PostScript> gives a basic
     description and more preferences.  By default, Texinfo uses the
     ‘dvips’ program to convert TeX's DVI output to PostScript.  *Note*
     (dvips)Top::.

PDF
     (Generated via ‘texi2dvi --pdf’ or ‘texi2pdf’.)  This format was
     developed by Adobe Systems for portable document interchange, based
     on their previous PostScript language.  It can represent the exact
     appearance of a document, including fonts and graphics, and
     supporting arbitrary scaling.  It is intended to be
     platform-independent and easily viewable, among other design goals;
     <https://en.wikipedia.org/wiki/Portable_Document_Format> and
     <http://tug.org/TUGboat/tb22-3/tb72beebe-pdf.pdf> have some
     background.  By default, Texinfo uses the ‘pdftex’ program, an
     extension of TeX, to output PDF; see
     <http://tug.org/applications/pdftex>.  *Note* PDF Output::.

LaTeX
     (Generated via ‘texi2any --latex’.)  This is a typesetting system
     built on top of TeX.  It was originally released by Leslie Lamport
     in 1984.  LaTeX adds more definitions to those of TeX and has a
     wide range of packages built on it.  LaTeX is ubiquitous in
     academic literature.  The current version of LaTeX is under active
     development; more information is available online at
     <https://www.latex-project.org/>.

     The LaTeX output can be further processed into DVI, PostScript, or
     PDF.  In theory, the LaTeX output should allow for much more
     customizability of the output than would be possible with the plain
     TeX implementation of Texinfo.

DocBook
     (Generated via ‘texi2any --docbook’.)  This is an XML-based format,
     primarily for technical documentation.  It therefore bears some
     resemblance, in broad outline, to Texinfo.  See
     <http://www.docbook.org>.  Various converters from DocBook _to_
     Texinfo have also been developed; see the Texinfo web pages.

XML
     (Generated via ‘texi2any --xml’.)  The ‘texi2any’ XML output,
     unlike all the other output formats, is a transliteration of the
     Texinfo source, rather than finished output.  Texinfo XML files
     cannot be viewed in web browsers or other programs.

     XML is a generic syntax specification usable for any sort of
     content.  (A reference is at <http://www.w3.org/XML>.)  The purpose
     of the Texinfo XML output is to allow further processing by XML
     tools.  The output syntax is defined in an XML DTD, which is
     contained in a file ‘texinfo.dtd’ included in the Texinfo source
     distribution.

     The Texinfo source distribution includes a utility script
     ‘txixml2texi’ to do a backward transformation to recreate the
     original Texinfo content (except for Texinfo macros and
     conditionals).


File: texinfo.info,  Node: Info Files,  Next: Printed Books,  Prev: Output Formats,  Up: Overview

1.3 Info Files
==============

As mentioned above, Info format is mostly a plain text transliteration
of the Texinfo source, with the addition of a few control characters to
separate nodes and provide navigational information, so that
Info-reading programs can operate on it.

   Info files are nearly always created by processing a Texinfo source
document.  ‘texi2any’, also known as ‘makeinfo’, is the principal
command that converts a Texinfo file into an Info file; *note* Generic
Translator texi2any::.

   Generally, you enter an Info file through a node that by convention
is named 'Top'.  This node normally contains just a brief summary of the
file's purpose, and a large menu through which the rest of the file is
reached.  From this node, you can either traverse the file
systematically by going from node to node, or you can go to a specific
node listed in the main menu, or you can search the index menus and then
go directly to the node that has the information you want.
Alternatively, with the standalone Info program, you can specify
specific menu items on the command line (*note* (info)Top::).

   If you want to read through an Info file in sequence, as if it were a
printed manual, you can hit <SPC> repeatedly, or you get the whole file
with the advanced Info command ‘g *’.  (*Note* Advanced Info commands:
(info)Advanced.)

   The ‘dir’ file in the ‘info’ directory serves as the departure point
for the whole Info system.  From it, you can reach the 'Top' nodes of
each of the documents in a complete Info system.

   If you wish to refer to an Info file via a URI, you can use the
(unofficial) syntax exemplified by the following.  This works with
Emacs/W3, for example:
     info:emacs#Dissociated%20Press
     info:///usr/info/emacs#Dissociated%20Press
     info://localhost/usr/info/emacs#Dissociated%20Press

   The ‘info’ program itself does not follow URIs of any kind.


File: texinfo.info,  Node: Printed Books,  Next: Adding Output Formats,  Prev: Info Files,  Up: Overview

1.4 Printed Books
=================

A Texinfo file can be formatted and typeset as a printed book or manual.
To do this, you need TeX, a sophisticated typesetting program written by
Donald Knuth of Stanford University.  It is not part of the Texinfo
distribution.

   Texinfo provides a file ‘texinfo.tex’ that contains the definitions
that TeX uses when it typesets a Texinfo file.  You can get the latest
version of ‘texinfo.tex’ from the Texinfo home page,
<http://www.gnu.org/software/texinfo/>.

   A Texinfo-based book is similar to any other typeset, printed work:
it can have a title page, copyright page, table of contents, and
preface, as well as chapters, numbered or unnumbered sections and
subsections, page headers, cross-references, footnotes, and indices.

   TeX is very powerful and has a great many features.  However, because
a Texinfo file must be able to present information both on a
character-only terminal in Info form and in a typeset book, the
formatting commands that Texinfo supports are necessarily limited.

   *Note* Hardcopy with TeX::, for more information on processing a
manual with TeX.


File: texinfo.info,  Node: Adding Output Formats,  Next: History,  Prev: Printed Books,  Up: Overview

1.5 Adding Output Formats
=========================

The output formats in the previous sections handle a wide variety of
usage, but of course there is always room for more.

   If you are a programmer and would like to contribute to the GNU
project by implementing additional output formats for Texinfo, that
would be excellent.  The way to do this that would be most useful is to
write a new back-end for ‘texi2any’, our reference implementation of a
Texinfo parser; it creates a tree representation of the Texinfo input
that you can use for the conversion.  The documentation in the source
file ‘tp/Texinfo/Convert/Converter.pm’ is a good place to start (*note*
(texi2any_internals)Texinfo::Convert::Converter::).  *Note* Generic
Translator texi2any::.

   Another viable approach is use the Texinfo XML output from ‘texi2any’
as your input.  This XML is an essentially complete representation of
the input, but without the Texinfo syntax and option peculiarities, as
described above.

   If you still cannot resist the temptation of writing a new program
that reads Texinfo source directly, let us give some more caveats:
please do not underestimate the amount of work required.  Texinfo is by
no means a simple language to parse correctly, and remains under
development, so you would be committing to an ongoing task.  You are
advised to check that the tests of the language that come with
‘texi2any’ give correct results with your new program.

   From time to time, proposals are made to generate traditional Unix
man pages from Texinfo source.  However, because man pages have a strict
conventional format, creating a good man page requires a completely
different source from that needed for the typical Texinfo applications
of writing a good user tutorial and/or a good reference manual.  This
makes generating man pages incompatible with the Texinfo design goal of
not having to document the same information in different ways for
different output formats.  You might as well write the man page
directly.

   As an alternative way to support man pages, you may find the program
‘help2man’ to be useful.  It generates a traditional man page from the
‘--help’ output of a program.  In fact, the man pages for the programs
in the Texinfo distribution are generated with this.  It is GNU software
written by Brendan O'Dea, available from
<http://www.gnu.org/software/help2man>.


File: texinfo.info,  Node: History,  Prev: Adding Output Formats,  Up: Overview

1.6 History
===========

Richard M. Stallman invented the Texinfo format, wrote the initial
processors, and created Edition 1.0 of this manual.  Robert J. Chassell
greatly revised and extended the manual, starting with Edition 1.1.
Brian Fox was responsible for the standalone Texinfo distribution until
version 3.8.  Karl Berry continued maintenance from Texinfo 3.8 (manual
edition 2.22), and Gavin Smith has continued maintenance since Texinfo
6.0.

Beginnings
----------

Richard Stallman included an on-line, hypertext help system called Info
in the original implementation of Emacs (in 1975/6).  Stallman had been
inspired after seeing a presentation a couple of years earlier on the
"NLS" hypertext system of Douglas Engelbart.

   In another development, in the 1970's at CMU, Brian Reid developed a
program and format named Scribe to mark up documents for printing.  It
used the ‘@’ character to introduce commands, as Texinfo does.  Much
more consequentially, it strove to describe document contents rather
than formatting, an idea wholeheartedly adopted by Texinfo.

   Meanwhile, people at MIT developed another format called Bolio.
Richard Stallman (RMS) worked on converting Bolio to use TeX as its
typesetting language, resulting in BoTeX.  The earliest BoTeX version
seems to have been 0.02 on October 31, 1984.

   BoTeX could only be used as a markup language for documents to be
printed, not for online documents.  RMS combined BoTeX and Info to
create Texinfo, a mark-up language for text that is intended to be read
both online and as printed hard copy.

   The original translator to create Info was written (primarily by RMS
and Bob Chassell) in Emacs Lisp, namely the ‘texinfo-format-buffer’ and
other functions.  In the early 1990s, Brian Fox reimplemented the
conversion program in C, now called ‘makeinfo’, as well as the
standalone ‘info’ program.

Reimplementing in Perl
----------------------

In 2012, the C ‘makeinfo’ was itself replaced by a Perl implementation
generically called ‘texi2any’.  This version supports the same level of
output customization as ‘texi2html’, an independent program originally
written by Lionel Cons, later with substantial work by many others.  The
many additional features needed to make ‘texi2html’ a replacement for
‘makeinfo’ were implemented by Patrice Dumas.  The first, never-released
version of ‘texi2any’ was based on the ‘texi2html’ code.

   That implementation, however, was abandoned in favor of the current
program (also written by Patrice Dumas), which parses the Texinfo input
into a tree for processing.  It inherited the design of customization
and other features from ‘texi2html’ (for more on ‘texi2html’
compatibility, *note* texi2html::).  However, ‘texi2any’ is a full
reimplementation: it constructs a tree-based representation of the input
document for all back-ends to work from.

   The new Perl program is much slower than the old C program.  The
speed gap has partially closed since first release, but it may not ever
be entirely comparable.  So why did we switch?  In short, we intend and
hope that the present program will be much easier than the previous C
implementation of ‘makeinfo’ to extend to different output styles,
back-end output formats, and all other customizations.  In more detail:

   • HTML customization.  Many GNU and other free software packages had
     been happily using the HTML customization features in ‘texi2html’
     for years.  Thus, in effect two independent implementations of the
     Texinfo language had developed, and keeping them in sync was not
     simple.  Adding the HTML customization possible in ‘texi2html’ to a
     C program would have been an enormous effort.

   • Unicode, and multilingual support generally, especially of east
     Asian languages.  At that time, doing it in C would have been
     tantamount to rewriting the entire program.  Since then, the parser
     and bits of converter back-ends have been rewritten in C, but the
     converter back-ends are still mostly in Perl which has good
     multilingual support built in.

   • Additional back-ends.  The ‘makeinfo’ code had become convoluted to
     the point where adding a new back-end was quite complex, requiring
     complex interactions with existing back-ends.  In contrast, the new
     implementation provides a clean tree-based representation for all
     back-ends to work from.  People have requested numerous different
     back-ends (LaTeX, the latest (X)HTML, ...); this change made them
     much more feasible to implement.  Which leads to the last item:

   • Making contributions easier.  In general, due to the cleaner
     structure, the separate parser/back-ends implementation should be
     considerably easier than the former C ‘makeinfo’ implementation for
     anyone to read and contribute to, with the resulting obvious
     benefits.  After ten years, contributed back-ends were yet to
     happen, but it is still believed that this structure could in
     theory lend better to contributions.

   ‘texi2any’ is intended to be a reference implementation that defines
parts of the language not fully specified by the manual.  Without such a
reference, alternative implementations would be very likely to have
subtle, or not-so-subtle, differences in behavior, and thus Texinfo
documents would become dependent on the processor.  It is also important
to have consistent command-line options for all processors.  Extensive
tests of the language and processor were developed at the same time as
‘texi2any’; we encourage anyone thinking of writing a program to parse
Texinfo input to make use of these tests.

   With the release of ‘texi2any’ as the reference implementation,
development of both the C implementation of ‘makeinfo’ and ‘texi2html’
has been halted.  Going forward, we ask authors of Texinfo documents to
use only ‘texi2any’.


File: texinfo.info,  Node: Writing a Texinfo File,  Next: Nodes,  Prev: Overview,  Up: Top

# /2 Writing a Texinfo File
************************

This chapter describes Texinfo syntax and what is required in a Texinfo
file, and gives a short sample file.

* Menu:

* Conventions::                General rules for writing a Texinfo file.
* Comments::                   Writing comments and ignored text in general.
* Minimum::                    What a Texinfo file must have.
* Short Sample Texinfo File::  A short sample Texinfo file.
* Texinfo File Header::        The first lines.
* Directory Category::         A category for a manual.
* Document Permissions::       Ensuring your manual is free.
* Titlepage & Copyright Page:: Creating the title and copyright pages.
* Contents::                   How to create a table of contents.
* The Top Node::               Creating the 'Top' node and master menu.
* The Body of the Document::   The rest of the nodes.
* Ending a File::              What is at the end of a Texinfo file?


File: texinfo.info,  Node: Conventions,  Next: Comments,  Up: Writing a Texinfo File

2.1 General Syntactic Conventions
=================================

This section describes the general conventions used in all Texinfo
documents.

   • All printable ASCII characters except ‘@’, ‘{’ and ‘}’ can appear
     in a Texinfo file and stand for themselves.  ‘@’ is the escape
     character which introduces commands, while ‘{’ and ‘}’ are used to
     surround arguments to certain commands.  To put one of these
     special characters into the document, put an ‘@’ character in front
     of it, like this: ‘@@’, ‘@{’, and ‘@}’.

   • In a Texinfo file, the commands you write to describe the contents
     of the manual are preceded by an ‘@’ character; they are called
     “@-commands”.  (The ‘@’ in Texinfo has the same meaning that ‘\’
     has in plain TeX.)

     Depending on what they do or what arguments they take, you need to
     write @-commands on lines of their own, or as part of sentences.
     As a general rule, a command requires braces if it mingles among
     other text; but it does not need braces if it is on a line of its
     own.  For more details of Texinfo command syntax, see *note* Command
     Syntax::.

   • Whitespace following an @-command name is optional and (usually)
     ignored if present.  The exceptions are contexts when whitespace is
     significant, e.g., an ‘@example’ environment.

   • Texinfo supports the usual quotation marks used in English and in
     other languages; see *note* Inserting Quotation Marks::.

   • Use three hyphens in a row, ‘---’, to produce a long dash--like
     this (called an “em dash”), used for punctuation in sentences.  Use
     two hyphens, ‘--’, to produce a medium dash (called an “en dash”),
     used primarily for numeric ranges, as in "June 25-26".  Use a
     single hyphen, ‘-’, to produce a standard hyphen used in compound
     words.  For display on the screen, Info reduces three hyphens to
     two and two hyphens to one (not transitively!).  Of course, any
     number of hyphens in the source remain as they are in literal
     contexts, such as ‘@code’ and ‘@example’.

   • _Whitespace_.  Texinfo files are plain text files composed of lines
     terminated by the usual newline character (line feed).  Texinfo
     processors read input one line at a time.  Paragraphs are
     terminated by an empty line or a line containing only spaces.  A
     sequence of several spaces in text is usually treated the same as a
     single space (except in verbatim modes).

     Form feed (‘CTRL-l’) characters in normal text end any open
     paragraph.  Other ASCII whitespace (tab, carriage return) may be
     treated the same as space characters, although the results may
     differ depending on output format.  Hence, there is not much point
     in using these in documents.  Non-ASCII spaces, such as Unicode "em
     space", are not recognized as whitespace at all and will be treated
     as regular, non-whitespace characters.

     However, in verbatim modes, for example in code samples, tab
     characters may produce the correct formatting in the output.


File: texinfo.info,  Node: Comments,  Next: Minimum,  Prev: Conventions,  Up: Writing a Texinfo File

2.2 Comments
============

You can write comments in a Texinfo file by using the ‘@comment’
command, which may be abbreviated to ‘@c’.  Such comments are for a
person looking at the Texinfo source file.  All the text on a line that
follows either ‘@comment’ or ‘@c’ is a comment; the rest of the line
does not appear in the visible output.  (To be precise, the character
after the ‘@c’ or ‘@comment’ must be something other than a dash or
alphanumeric, or it will be taken as part of the command.)

   Often, you can write the ‘@comment’ or ‘@c’ in the middle of a line,
and only the text that follows after the ‘@comment’ or ‘@c’ command does
not appear; but some commands, such as ‘@settitle’, work on a whole
line.  You cannot use ‘@comment’ or ‘@c’ within a line beginning with
such a command.

   In cases of nested command invocations, complicated macro
definitions, etc., ‘@c’ and ‘@comment’ may provoke an error when
processing with TeX.  Therefore, you can also use the ‘DEL’ character
(ASCII 127 decimal, 0x7f hex, 0177 octal) as a true TeX comment
character (catcode 14, in TeX internals).  Everything on the line after
the ‘DEL’ will be ignored and the next line will be merged.

   You can also have long stretches of text ignored by the Texinfo
processors with the ‘@ignore’ and ‘@end ignore’ commands.  Write each of
these commands on a line of its own, starting each command at the
beginning of the line.  Text between these two commands does not appear
in the processed output.  You can use ‘@ignore’ and ‘@end ignore’ for
writing comments.  (For some caveats regarding nesting of such commands,
*note* Conditional Nesting::.)


File: texinfo.info,  Node: Minimum,  Next: Short Sample Texinfo File,  Prev: Comments,  Up: Writing a Texinfo File

2.3 What a Texinfo File Must Have
=================================

By convention, the name of a Texinfo file ends with one of the
extensions ‘.texi’, ‘.texinfo’, ‘.txi’, or ‘.tex’.  Using ‘.tex’ is
discouraged as this extension is already used by TeX and LaTeX input
files.  The most common and recommended extension is ‘.texi’.  The name
of a Texinfo file should only contain ASCII characters.

   The output name is based on the input file name, in the default case.
First, any of the extensions ‘.texi’, ‘.tex’, ‘.txi’, or ‘.texinfo’ is
removed from the input file name; then, the output format specific
extension is added--‘.html’ when generating HTML, ‘.info’ when
generating Info, etc.  The output name should only contain ASCII
characters(1).

   In order to be made into a printed manual, a Texinfo file must begin
with a line like this:

     \input texinfo

The contents of the file follow this beginning, and then you must end
the Texinfo source with a line like this:

     @bye

   The ‘@bye’ line at the end of the file on a line of its own tells TeX
that the file is ended and to stop formatting.  If you leave this out,
you'll be dumped at TeX's prompt at the end of the run.

   Furthermore, you will usually provide a Texinfo file with a title, a
title page, indices, and the like, all of which are explained in this
manual.  But the minimum, which can be useful for short documents, is
just the one line at the beginning and the one line at the end.

   Without additional information, the input and output encodings are
assumed to be UTF-8, an universal codeset compatible with 7-bit ASCII.

   ---------- Footnotes ----------

   (1) ‘texi2any’ can handle non ASCII characters in input file names,
but non ASCII characters in output name will create problems for some
output formats, especially for cross-references.


File: texinfo.info,  Node: Short Sample Texinfo File,  Next: Texinfo File Header,  Prev: Minimum,  Up: Writing a Texinfo File

2.4 Short Sample
================

Here is a short sample Texinfo file.

     \input texinfo
     @settitle Sample Manual 1.0

     @copying
     This is a short example of a complete Texinfo file.

     Copyright @copyright{} 2016 Free Software Foundation, Inc.
     @end copying

     @titlepage
     @title Sample Title
     @page
     @vskip 0pt plus 1filll
     @insertcopying
     @end titlepage

     @contents

     @node Top
     @top GNU Sample

     This manual is for GNU Sample
     (version @value{VERSION}, @value{UPDATED}).

     @menu
     * First Chapter::    The first chapter is the
                           only chapter in this sample.
     * Index::            Complete index.
     @end menu


     @node First Chapter
     @chapter First Chapter

     @cindex chapter, first
     This is the first chapter.
     @cindex index entry, another

     Here is a numbered list.

     @enumerate
     @item
     This is the first item.

     @item
     This is the second item.
     @end enumerate


     @node First Section
     @section First Section

     First section of first chapter.


     @node Second Section
     @section Second Section

     Second section of first chapter.


     @node Index
     @unnumbered Index

     @printindex cp

     @bye


File: texinfo.info,  Node: Texinfo File Header,  Next: Directory Category,  Prev: Short Sample Texinfo File,  Up: Writing a Texinfo File

2.5 Texinfo File Header
=======================

Texinfo files start with the line:

     \input texinfo

   The ‘\input texinfo’ line tells TeX to use the ‘texinfo.tex’ file,
which tells TeX how to translate the Texinfo @-commands into TeX
typesetting commands.  (Note the use of the backslash, ‘\’; this is
correct for TeX.)

   It makes sense to include any command that affects document
formatting as a whole in the header.  The ‘@settitle’ line is usually
present at the beginning of the header:

     @settitle Sample Manual 1.0

   The ‘@settitle’ line specifies a title for the page headers (or
footers) of the printed manual, and the default title and document
description for the ‘<head>’ in HTML.  ‘@synindex’ (*note* @synindex::),
for instance, is another command often included in the header.

   The start of the Texinfo file up to the first content that is output
as part of the main body of the document is the “preamble”.  It includes
the header, *note* Document Permissions:: and *note* Titlepage & Copyright
Page:: specification.  It is important for the LaTeX output format as
the end of preamble is where the ‘\begin{document}’ line is output.  In
other output formats it may be used to determine how some special output
is formatted, for example *note* @copying:: output as a comment at the
beginning of output files, or the language used in file headers.

* Menu:

* First Line::                 The first line of a Texinfo file.
* @setfilename::               Give the name of the output file.
* @settitle::                  Create a title for the printed work.
* Preamble::                   Start of the Texinfo file up to first content.
* Start and End of Header::    Formatting a region in Emacs requires this.


File: texinfo.info,  Node: First Line,  Next: @setfilename,  Up: Texinfo File Header

2.5.1 The First Line of a Texinfo File
--------------------------------------

Every Texinfo file that is to be the top-level input to TeX must begin
with a line that looks like this:

     \input texinfo

   When the file is processed by TeX, the ‘\input texinfo’ command tells
TeX to load the macros needed for processing a Texinfo file.  These are
in a file called ‘texinfo.tex’, which should have been installed on your
system along with either the TeX or Texinfo software.  TeX uses the
backslash, ‘\’, to mark the beginning of a command, exactly as Texinfo
uses ‘@’.  The ‘texinfo.tex’ file causes the switch from ‘\’ to ‘@’;
before the switch occurs, TeX requires ‘\’, which is why it appears at
the beginning of the file.

   You may optionally follow this line with a comment to tell GNU Emacs
to use Texinfo mode when the file is edited:

     \input texinfo   @c -*-texinfo-*-

This may be useful when Emacs doesn't detect the file type from the file
extension automatically.


File: texinfo.info,  Node: @setfilename,  Next: @settitle,  Prev: First Line,  Up: Texinfo File Header

2.5.2 ‘@setfilename’: Set the Output File Name
----------------------------------------------

The ‘@setfilename’ line specifies the name of the output file to be
generated by ‘texi2any’.  This command is ignored for TeX formatting.
When present, it should be the first Texinfo command (that is, after
‘\input texinfo’).  Write the ‘@setfilename’ command at the beginning of
a line and follow it on the same line by the Info file name.

     @setfilename INFO-FILE-NAME

   The name must be different from the name of the Texinfo file.  There
are two conventions for choosing the name: you can either remove the
extension (such as ‘.texi’) entirely from the input file name, or
(recommended) replace it with the ‘.info’ extension.  It is not advised
to base the ‘@setfilename’ name on a entirely different name than the
input file name.

   When a ‘@setfilename’ line is present, the Texinfo processors ignore
everything written before the ‘@setfilename’ line.  This is why the very
first line of the file (the ‘\input’ line) does not show up in the
output.

   If there is no ‘@setfilename’ line, ‘texi2any’ uses the input file
name to determine the output name (*note* Minimum::).  The ‘\input’ line
is still ignored in this processing, as well as leading blank lines.

   When producing another output format, ‘texi2any’ will replace any
final extension with the output format-specific extension (‘html’ when
generating HTML, for example), or add a dot followed by the extension
(‘.html’ for HTML) if the given name has no extension.

   @-commands are not allowed in ‘@setfilename’, except for ‘@@’, ‘@{’,
‘@}’ and associated @-commands such as ‘@atchar{}’.

   ‘@setfilename’ used to be required by the Texinfo processors and some
other programs.  This should not be the case any more; ‘@setfilename’
can be omitted.  If the Texinfo input is processed from standard input,
without an input file name to deduce the base file name from,
‘@setfilename’ could still be relevant.  This is not the only way,
however: ‘--output’ option specifies the output file name on the
‘texi2any’ command-line (*note* Invoking texi2any::).

   Although an explicit ‘.info’ extension is preferable, some operating
systems cannot handle long file names.  You can run into a problem even
when the file name you specify is itself short enough.  This occurs
because the Info formatters split a long Info file into short indirect
subfiles, and name them by appending ‘-1’, ‘-2’, ..., ‘-10’, ‘-11’, and
so on, to the original file name.  (*Note* Tag and Split Files::.)  The
subfile name ‘texinfo.info-10’, for example, is too long for old systems
with a 14-character limit on filenames; so the Info file name for this
document could be ‘texinfo’ rather than ‘texinfo.info’ on such a system.
‘@setfilename’ is a way to specify an alternative name.


File: texinfo.info,  Node: @settitle,  Next: Preamble,  Prev: @setfilename,  Up: Texinfo File Header

2.5.3 ‘@settitle’: Set the Document Title
-----------------------------------------

A Texinfo file should contain a line that looks like this:

     @settitle TITLE

   Write the ‘@settitle’ command at the beginning of a line and follow
it on the same line by the title.  Do not write anything else on the
line.  The ‘@settitle’ command should precede everything that generates
actual output.  The best place for it is right after the ‘@setfilename’
command, if present (described in the previous section).

   This command gives the title to use in a header or footer for
double-sided printed output, in case such headings are output.  For more
on headings for printed output, see *note* Heading Generation::.

   In HTML, TITLE serves as the document ‘<title>’ and it becomes the
default document description in the ‘<head>’ part.

   When the title page is used in the output, as is generally the case
for printed output, the title in the ‘@settitle’ command does not affect
the title as it appears on the title page.  Thus, the two do not need
not to match exactly.  A practice we recommend is to include the version
or edition number of the manual in the ‘@settitle’ title; on the title
page, the version number generally appears as a ‘@subtitle’ so it would
be omitted from the ‘@title’.  *Note* @titlepage::.


File: texinfo.info,  Node: Preamble,  Next: Start and End of Header,  Prev: @settitle,  Up: Texinfo File Header

2.5.4 Preamble
--------------

The “preamble” starts at the beginning of the Texinfo file and continues
until the first directly output material.  It typically includes the
file header (*note* Texinfo File Header::), the ‘@copying’ block
specifying the document permissions (*note* @copying::) and the
‘@titlepage’ specification (*note* Titlepage & Copyright Page::).

   The preamble may contain commands that affect document formatting as
a whole but which do not produce output, or do not produce output
straight away, such as ‘@settitle’ (*note* @settitle::),
‘@documentlanguage’, (*note* @documentlanguage::), commands setting the
headings, controlling indentation or hyphenation, or the table of
contents (*note* Contents::).

   Any text that starts a paragraph, @-commands that are formatted as
quotations, tables, lists and so on, and ‘@node’ (*note* Nodes::) and
chapter structuring commands (*note* Chapter Structuring::) end the
preamble.

   The concept of the preamble is significant for LaTeX output, as the
‘\begin{document}’ line is output at the end of the preamble.

   In plaintext, the preamble is simply output as usual at the beginning
of the document; for example, a ‘@contents’ in the preamble is output as
the table of contents (*note* Contents::).

   There is not much special treatment of the preamble for HTML and Info
output either.  However, some settings current at the very end of the
preamble may be used for the document as a whole, regardless of what
follows.  This may apply to commands specifying the indentation, or the
language (*note* @documentlanguage::).

   For example, for the following document, the HTML and Info copying
comments are formatted with ‘@documentlanguage’ set to ‘pt’, as it is
the last ‘@documentlanguage’ before the end of the preamble.

     \input texinfo
     @documentlanguage fr

     @copying
     The copying information @error{} some text
     @end copying

     @documentlanguage pt

     Text ending the preamble

     @documentlanguage de

     @node Top



File: texinfo.info,  Node: Start and End of Header,  Prev: Preamble,  Up: Texinfo File Header

2.5.5 Start and End of Header for Emacs
---------------------------------------

In Emacs, start- and end-of-header lines can be used to enclose commands
that globally affect the document in the Texinfo preambule.  This allows
you to format only part of a Texinfo file for Info or printing.  *Note*
texinfo-format commands::.

   A start-of-header line is a Texinfo comment that looks like this:

     @c %**start of header

   Write the start-of-header line on the second line of a Texinfo file.
Follow the start-of-header commands that globally affect the document
formatting, such as ‘@settitle’, ‘@synindex’ or ‘@footnotestyle’; and
then by an end-of-header line.

   A end-of-header line is a Texinfo comment that looks like this:

     @c %**end of header

   The odd string of characters, ‘%**’, is to ensure that no other
comment is accidentally taken for a start-of-header line.  You can
change it if you wish by setting the ‘tex-start-of-header’ and/or
‘tex-end-of-header’ Emacs variables.  *Note* Texinfo Mode Printing::.

   The start- and end-of-header lines are not part of the Texinfo format
specification, which is why they are implemented with comments.


File: texinfo.info,  Node: Directory Category,  Next: Document Permissions,  Prev: Texinfo File Header,  Up: Writing a Texinfo File

2.6 Directory Category
======================

Use the ‘@dircategory’ command to specify a category for the manual.
Here are a few examples of category names:

     Basics
     Text creation and manipulation
     Archiving
     Compression
     Database
     Editors
     Emacs
     Email
     Graphics
     Localization
     Network applications
     Printing
     Science
     Software development
     Software libraries
     Version control

   ‘@dircategory’ commands are usually followed by a ‘@direntry’ blocks,
which are used by ‘install-info’.  *Note* Installing Dir Entries::, for
details.

   The first ‘@dircategory’ command in a manual is the category for the
entire manual.  Subsequent uses of ‘@dircategory’ set the category for
following ‘@direntry’ blocks only.


File: texinfo.info,  Node: Document Permissions,  Next: Titlepage & Copyright Page,  Prev: Directory Category,  Up: Writing a Texinfo File

2.7 Document Permissions
========================

This segment describes the document and contains the copyright notice
and copying permissions.  This is done with the ‘@copying’ command.  A
real manual includes more text here, according to the license under
which it is distributed.

     @copying
     This is a short example of a complete Texinfo file, version 1.0.

     Copyright @copyright{} 2016 Free Software Foundation, Inc.
     @end copying

   The copyright notice and copying permissions for a document need to
appear in several places in the various Texinfo output formats.
Therefore, Texinfo provides a command (‘@copying’) to declare this text
once, and another command (‘@insertcopying’) to insert the text at
appropriate points.

   If the document is a software manual, the software is typically under
a different license--for GNU and many other free software packages,
software is usually released under the GNU GPL, and manuals are released
under the GNU FDL.  It is helpful to state the license of the software
of the manual, but giving the complete text of the software license is
not necessarily required.

* Menu:

* @copying::                   Declare the document's copying permissions.
* @insertcopying::             Where to insert the permissions.


File: texinfo.info,  Node: @copying,  Next: @insertcopying,  Up: Document Permissions

2.7.1 ‘@copying’: Declare Copying Permissions
---------------------------------------------

The ‘@copying’ command should be given very early in the document; the
recommended location is right after the header material (*note* Texinfo
File Header::).  It conventionally consists of a sentence or two about
what the program is, identification of the documentation itself, the
legal copyright line, and the copying permissions.  Here is a skeletal
example:

     @copying
     This manual is for PROGRAM (version VERSION, updated
     DATE), which ...

     Copyright @copyright{} YEARS COPYRIGHT-OWNER.

     @quotation
     Permission is granted to ...
     @end quotation
     @end copying

   The ‘@quotation’ has no legal significance; it's there to improve
readability in some contexts.

   The text of ‘@copying’ appears as a comment at the beginning of Info
and HTML output files.  This information is also output at the beginning
of the DocBook output files using appropriate markup.  It is _not_
output implicitly in plain text or printed output; it's up to you to use
‘@insertcopying’ to emit the copying information.  See the next section
for details.

   The ‘@copyright{}’ command generates a ‘c’ inside a circle when the
output format supports this glyph (print and HTML always do, for
instance).  When the glyph is not supported in the output, it generates
the three-character sequence ‘(C)’.

   The copyright notice itself has the following legally-prescribed
form:

     Copyright © YEARS COPYRIGHT-OWNER.

   The word 'Copyright' must always be written in English, even if the
document is otherwise written in another language.  This is due to
international law.

   The list of years should include all years in which a version was
completed (even if it was released in a subsequent year).  It is
simplest for each year to be written out individually and in full,
separated by commas.

   The copyright owner (or owners) is whoever holds legal copyright on
the work.  In the case of works assigned to the FSF, the owner is 'Free
Software Foundation, Inc.'.

   The copyright 'line' may actually be split across multiple lines,
both in the source document and in the output.  This often happens for
documents with a long history, having many different years of
publication.  If you do use several lines, do not indent any of them (or
anything else in the ‘@copying’ block) in the source file.

   *Note* (maintain)Copyright Notices::, for additional information.
*Note* GNU Sample Texts::, for the full text to be used in GNU manuals.
*Note* GNU Free Documentation License::, for the license itself under
which GNU and other free manuals are distributed.


File: texinfo.info,  Node: @insertcopying,  Prev: @copying,  Up: Document Permissions

2.7.2 ‘@insertcopying’: Include Permissions Text
------------------------------------------------

The ‘@insertcopying’ command is simply written on a line by itself, like
this:

     @insertcopying

   This inserts the text previously defined by ‘@copying’.  To meet
legal requirements, it must be used on the copyright page in the printed
manual (*note* Copyright::).

   The ‘@copying’ command itself causes the permissions text to appear
in an Info file _before_ the first node.  The text is also copied into
the beginning of each split Info output file, as is legally necessary.
This location implies a human reading the manual using Info does _not_
see this text (except when using the advanced Info command ‘g *’).  This
does not matter for legal purposes, because the text is present.  But to
get a visible text in the output, ‘@insertcopying’ should be used.

   Similarly, the ‘@copying’ text is automatically included at the
beginning of each HTML output file, as an HTML comment.  Again, this
text is not visible without ‘@insertcopying’ (unless the reader views
the HTML source).

   The permissions text defined by ‘@copying’ also appears automatically
at the beginning of the DocBook output files using appropriate markup.
‘@insertcopying’ can be used to output the permission text within normal
text.


File: texinfo.info,  Node: Titlepage & Copyright Page,  Next: Contents,  Prev: Document Permissions,  Up: Writing a Texinfo File

2.8 Title and Copyright Pages
=============================

In hard copy output, the manual's name and author are usually printed on
a title page.  Copyright information is usually printed on the back
(verso) of the title page.  This segment must be enclosed between
‘@titlepage’ and ‘@end titlepage’ commands:

     @titlepage
     @title Sample Title

     @c The following two commands start the copyright page.
     @page
     @vskip 0pt plus 1filll
     @insertcopying
     @end titlepage

We use the ‘@insertcopying’ command to include the permission text from
the previous section, instead of writing it out again.

   The title and copyright pages appear in printed manuals, but not in
most other output formats.  In HTML, the best way to get a title page
similar to printed manuals is to set the ‘NO_TOP_NODE_OUTPUT’
customization variable (*note* NO_TOP_NODE_OUTPUT::).

* Menu:

* @titlepage::                 Create a title for the printed document.
* @title @subtitle @author::   The ‘@title’, ‘@subtitle’, and ‘@author’
                               commands.
* @titlefont @center @sp::     The ‘@titlefont’, ‘@center’, and ‘@sp’ commands.
* Copyright::                  How to write the copyright notice and include
                               copying permissions.
* Heading Generation::         Turn on page headings after the title and
                               copyright pages.


File: texinfo.info,  Node: @titlepage,  Next: @title @subtitle @author,  Up: Titlepage & Copyright Page

2.8.1 ‘@titlepage’
------------------

Start the material for the title page and following copyright page with
‘@titlepage’ on a line by itself and end it with ‘@end titlepage’ on a
line by itself.

   The ‘@end titlepage’ command starts a new page and turns on page
numbering (*note* Heading Generation::).  All the material that you want
to appear on unnumbered pages should be put between the ‘@titlepage’ and
‘@end titlepage’ commands.

   By using the ‘@page’ command, you can force a page break within the
region delineated by the ‘@titlepage’ and ‘@end titlepage’ commands and
thereby create more than one unnumbered page.  This is how the copyright
page is produced.  (The ‘@titlepage’ command might perhaps have been
better named the ‘@titleandadditionalpages’ command, but that would have
been rather long!)

   When you write a manual about a computer program, you should write
the version of the program to which the manual applies on the title
page.  If the manual changes more frequently than the program or is
independent of it, you should also include an edition number(1) for the
manual.  This helps readers keep track of which manual is for which
version of the program.  (The 'Top' node should also contain this
information; see *note* The Top Node::.)

   One method uses the ‘@title’, ‘@subtitle’, and ‘@author’ commands to
create a title page.  With this method, you do not specify any of the
actual formatting of the title page.  You specify the text you want, and
Texinfo does the formatting.  The usual formatting consist of black
rules under the title and author lines and the subtitle text set flush
to the right-hand side of the page.

   Texinfo also provides a second method for creating a title page.
using typesetting commands that are not to be used in the main text.
This method uses uses the ‘@titlefont’, ‘@sp’, and ‘@center’ commands to
generate a title page in which the words on the page are centered.

   For sufficiently simple documents, and for the bastard title page in
traditional book frontmatter, Texinfo also provides a command
‘@shorttitlepage’ which takes the rest of the line as the title.  The
argument is typeset on a page by itself and followed by a blank page.
In HTML, ‘@shorttitlepage’ can play the same role as ‘@settitle’, if
‘@settitle’ is not set.  *Note* @settitle::.

   ---------- Footnotes ----------

   (1) We have found that it is helpful to refer to versions of
independent manuals as 'editions' and versions of programs as
'versions'; otherwise, we find we are liable to confuse each other in
conversation by referring to both the documentation and the software
with the same words.


File: texinfo.info,  Node: @title @subtitle @author,  Next: @titlefont @center @sp,  Prev: @titlepage,  Up: Titlepage & Copyright Page

2.8.2 ‘@title’, ‘@subtitle’, and ‘@author’
------------------------------------------

You can use the ‘@title’, ‘@subtitle’, and ‘@author’ commands to create
a title page in which the vertical and horizontal spacing is done for
you automatically.

   Write the ‘@title’, ‘@subtitle’, or ‘@author’ commands at the
beginning of a line followed by the title, subtitle, or author.  The
‘@author’ command may be used for a quotation in an ‘@quotation’ block
(*note* @quotation::); except for that, it is an error to use any of
these commands outside of ‘@titlepage’.

   The ‘@title’ command normally produces a line in which the title is
set flush to the left-hand side of the page in a larger than normal
font.  The title is underlined with a black rule.  The title must be
given on a single line in the source file; it will be broken into
multiple lines of output is needed.

   For long titles, the ‘@*’ command may be used to specify the line
breaks in long titles if the automatic breaks do not suit.  Such
explicit line breaks are generally reflected in all output formats; if
you only want to specify them for the printed output, use a conditional
(*note* Conditionals::).  For example:

     @title This Long Title@inlinefmt{tex,@*} Is Broken in @TeX{}

   The ‘@subtitle’ command normally sets subtitles in a normal-sized
font flush to the right-hand side of the page.

   The ‘@author’ command normally sets the names of the author or
authors in a middle-sized font flush to the left-hand side of the page
on a line near the bottom of the title page.  The names are followed by
a black rule that is thinner than the rule that normally underlines the
title.

   There are two ways to use the ‘@author’ command: you can write the
name or names on the remaining part of the line that starts with an
‘@author’ command:

     @author by Jane Smith and John Doe

or you can write the names one above each other by using multiple
‘@author’ commands:

     @author Jane Smith
     @author John Doe

   A template for this method looks like this:

     @titlepage
     @title NAME-OF-MANUAL-WHEN-PRINTED
     @subtitle SUBTITLE-IF-ANY
     @subtitle SECOND-SUBTITLE
     @author AUTHOR
     @page
     ...
     @end titlepage


File: texinfo.info,  Node: @titlefont @center @sp,  Next: Copyright,  Prev: @title @subtitle @author,  Up: Titlepage & Copyright Page

2.8.3 ‘@titlefont’, ‘@center’, and ‘@sp’
----------------------------------------

You can also use the ‘@titlefont’, ‘@sp’, and ‘@center’ commands to
create a title page for a printed document.

   Use the ‘@titlefont’ command to select a large font suitable for the
title itself.  You can use ‘@titlefont’ more than once if you have an
especially long title.

   For HTML output, each ‘@titlefont’ command produces an ‘<h1>’
heading, but the HTML document ‘<title>’ is not affected.  For that, you
could put a ‘@settitle’ command before the ‘@titlefont’ command (*note*
@settitle::).

   For example:

     @titlefont{Texinfo}

   Use the ‘@center’ command at the beginning of a line to center the
remaining text on that line.  Thus,

     @center @titlefont{Texinfo}

centers the title, which in this example is "Texinfo" printed in the
title font.

   Use the ‘@sp’ command to insert vertical space.  For example:

     @sp 2

This inserts two blank lines on the printed page.  (*Note* @sp::, for
more information about the ‘@sp’ command.)

   A template for this method looks like this:

     @titlepage
     @sp 10
     @center @titlefont{NAME-OF-MANUAL-WHEN-PRINTED}
     @sp 2
     @center SUBTITLE-IF-ANY
     @sp 2
     @center AUTHOR
     ...
     @end titlepage

   The spacing of the example fits an 8.5 by 11 inch manual.


File: texinfo.info,  Node: Copyright,  Next: Heading Generation,  Prev: @titlefont @center @sp,  Up: Titlepage & Copyright Page

2.8.4 Copyright Page
--------------------

By international treaty, the copyright notice for a book must be either
on the title page or on the back of the title page.  When the copyright
notice is on the back of the title page, that page is customarily not
numbered.  Therefore, in Texinfo, the information on the copyright page
should be within ‘@titlepage’ and ‘@end titlepage’ commands.

   Use the ‘@page’ command to cause a page break.  To push the copyright
notice and the other text on the copyright page towards the bottom of
the page, use the following incantation after ‘@page’:

     @vskip 0pt plus 1filll

The ‘@vskip’ command inserts whitespace in the TeX output; it is ignored
in all other output formats.  The ‘0pt plus 1filll’ means to put in zero
points of mandatory whitespace, and as much optional whitespace as
needed to push the following text to the bottom of the page.  Note the
use of three ‘l’s in the word ‘filll’; this is correct.

   To insert the copyright text itself, write ‘@insertcopying’ next
(*note* Document Permissions::):

     @insertcopying

   Follow the copying text by the publisher, ISBN numbers, cover art
credits, and other such information.

   Here is an example putting all this together:

     @titlepage
     ...
     @page
     @vskip 0pt plus 1filll
     @insertcopying

     Published by ...

     Cover art by ...
     @end titlepage

   We have one more special case to consider: for plain text output, you
must insert the copyright information explicitly if you want it to
appear.  For instance, you could have the following after the copyright
page:

     @ifplaintext
     @insertcopying
     @end ifplaintext

   You could include other title-like information for the plain text
output in the same place.


File: texinfo.info,  Node: Heading Generation,  Prev: Copyright,  Up: Titlepage & Copyright Page

2.8.5 Heading Generation
------------------------

Texinfo has two standard page heading formats, one for documents printed
on one side of each sheet of paper (single-sided printing), and the
other for documents printed on both sides of each sheet (double-sided
printing).

   In full generality, you can control the headings in different ways:

   • The conventional way is to write a ‘@setchapternewpage’ command
     before the title page commands.

     Most documents are formatted with the standard single-sided or
     double-sided headings, (sometimes) using ‘@setchapternewpage odd’
     for double-sided printing and (almost always) no
     ‘@setchapternewpage’ command for single-sided printing (*note*
     @setchapternewpage::).

   • Alternatively, you can use the ‘@headings’ command to prevent page
     headings from being generated or to start them for either single or
     double-sided printing.  To turn off headings, write ‘@headings
     off’.  *Note* @headings::.

   • Or, you may specify your own page heading and footing format.
     *Note* Headings::.


File: texinfo.info,  Node: Contents,  Next: The Top Node,  Prev: Titlepage & Copyright Page,  Up: Writing a Texinfo File

2.9 Generating a Table of Contents
==================================

The ‘@chapter’, ‘@section’, and other structuring commands (*note*
Chapter Structuring::) supply the information to make up a table of
contents, but they do not cause an actual table to appear in the manual.
To do this, you must use the ‘@contents’ and/or ‘@summarycontents’
command(s).

‘@contents’
     Generates a table of contents in a printed manual, including all
     chapters, sections, subsections, etc., as well as appendices and
     unnumbered chapters.  Headings generated by ‘@majorheading’,
     ‘@chapheading’, and the other ‘@...heading’ commands do not appear
     in the table of contents (*note* Structuring Command Types::).

‘@shortcontents’
‘@summarycontents’
     (‘@summarycontents’ is a synonym for ‘@shortcontents’.)

     Generates a short or summary table of contents that lists only the
     chapters, appendices, and unnumbered chapters.  Sections,
     subsections and subsubsections are omitted.  Only a long manual
     needs a short table of contents in addition to the full table of
     contents.

   Both contents commands should be written on a line by themselves, and
placed near the beginning of the file, after the ‘@end titlepage’ (*note*
@titlepage::), before any sectioning command.  The contents commands
automatically generate a chapter-like heading at the top of the first
table of contents page, so don't include any sectioning command such as
‘@unnumbered’ before them.

   Since an Info file uses menus instead of tables of contents, the Info
formatting commands ignore the contents commands.  But the contents are
included in plain text output and in other output formats, such as HTML.

   In HTML output, the links in the short table of contents point to
corresponding entries in the full table of contents rather than the text
of the document.  The links in the full table of contents point to the
main text of the document.

   ‘@shortcontents’ is not implemented for LaTeX output.


File: texinfo.info,  Node: The Top Node,  Next: The Body of the Document,  Prev: Contents,  Up: Writing a Texinfo File

2.10 The 'Top' Node and Master Menu
===================================

The 'Top' node is the node in which a reader enters an Info manual.  As
such, it should contain a very brief description of the manual
(including the version number).  The contents of the 'Top' node do not
appear in printed output nor in DocBook output.

   It is conventional to write a ‘@top’ sectioning command line
containing the title of the document immediately after the ‘@node Top’
line (*note* @top Command::).

   We repeat the short description from the beginning of the ‘@copying’
text, but there's no need to repeat the copyright information, so we
don't use ‘@insertcopying’ here.

   The 'Top' node contains a top-level “menu” listing the chapters, and
possibly a “detailed menu” listing all the nodes in the entire document.

     @node Top
     @top Short Sample

     This is a short sample Texinfo file.

     @menu
     * First Chapter::    The first chapter is the
                            only chapter in this sample.
     * Index::            Complete index.
     @end menu

* Menu:

* Master Menu Parts::


File: texinfo.info,  Node: Master Menu Parts,  Up: The Top Node

2.10.1 Parts of a Master Menu
-----------------------------

A “master menu” is the main menu.  It is customary to include a detailed
menu listing all the nodes in the document in this menu.  Like any other
menu, a master menu is enclosed in ‘@menu’ and ‘@end menu’ and does not
appear in the printed output nor in DocBook output.

   The master menu contains entries for the major nodes in the Texinfo
file: the nodes for the chapters, chapter-like sections, and the
appendices, followed by nodes for the indices.

   You may choose to follow these entries with a “detailed menu”.  This
lists other, lower-level nodes, often ordered by chapter.  These items
may be a convenience for an inquirer who can go directly to a particular
node when searching for specific information, rather than going through
an intermediate menu.  If you use a detailed menu in your master menu,
mark it with the ‘@detailmenu ... @end detailmenu’ environment.

   Each section in the menu can be introduced by a descriptive line.  So
long as the line does not begin with an asterisk, it will not be treated
as a menu entry.  (*Note* Writing a Menu::, for more information.)

   For example, the master menu for this manual looks like the following
(but has many more entries):

     @menu
     * Copying Conditions::  Your rights.
     * Overview::            Texinfo in brief.
     ...
     * Command and Variable Index::
     * General Index::

     @detailmenu
     --- The Detailed Node Listing ---

     Overview of Texinfo

     * Reporting Bugs:: ...
     ...

     Beginning a Texinfo File

     * Sample Beginning:: ...
     ...
     @end detailmenu
     @end menu


File: texinfo.info,  Node: The Body of the Document,  Next: Ending a File,  Prev: The Top Node,  Up: Writing a Texinfo File

2.11 The Body of the Document
=============================

The body segment contains all the text of the document.  A manual is
divided into one or more “nodes” (*note* Nodes::).  The example
illustrates a chapter made of three nodes, one for introductory material
in the chapter, and two sections.  The introductory material contains an
enumerated list.

     @node First Chapter
     @chapter First Chapter

     @cindex chapter, first
     This is the first chapter.
     @cindex index entry, another

     Here is a numbered list.

     @enumerate
     @item
     This is the first item.

     @item
     This is the second item.
     @end enumerate


     @node First Section
     @section First Section

     First section of first chapter.


     @node Second Section
     @section Second Section

     Second section of first chapter.

   In the Info output, the ‘First Chapter’ node will contain a menu
listing the two sections in the chapter.  Similarly, when this node is
output in its own HTML file, it will contain a table of contents for the
chapter.

   Here is what the contents of this chapter will look like:


     1. First Chapter
     ****************

     This is the first chapter.

     Here is a numbered list.

       1. This is the first item.

       2. This is the second item.

     1.1 First Section
     =================

     First section of first chapter.

     1.2 Second Section
     ==================

     Second section of first chapter.

(In the Info and HTML output, the chapter would also be split into
nodes.)


File: texinfo.info,  Node: Ending a File,  Prev: The Body of the Document,  Up: Writing a Texinfo File

2.12 Ending a Texinfo File
==========================

The end of a Texinfo file should include commands to create indices
(*note* Printing Indices & Menus::), and the ‘@bye’ command to mark the
last line to be processed.  For example:

     @node Index
     @unnumbered Index

     @printindex cp

     @bye

   A ‘@bye’ command terminates Texinfo processing.  It should be on a
line by itself.  Anything following ‘@bye’ is completely ignored.


File: texinfo.info,  Node: Nodes,  Next: Chapter Structuring,  Prev: Writing a Texinfo File,  Up: Top

# /3 Nodes
*******

A “node” is a region of text that begins at a ‘@node’ command, and
continues until the next ‘@node’ command.  To specify a node, write a
‘@node’ command at the beginning of a line, and follow it with the name
of the node.  Info readers display one node at a time, and provide
commands for the user to move to related nodes.  The HTML output can be
similarly navigated.

   Nodes are used as the targets of cross-references.  Cross-references,
such as the one at the end of this sentence, are made with ‘@xref’ and
related commands; see *note* Cross References::.  Cross-references can be
sprinkled throughout the text.  Other @-commands may also be the target
of cross-references (*note* @anchor::, *note* Floats::).

   Normally, you put a node command immediately before each chapter
structuring command--for example, an ‘@section’ or ‘@subsection’ line.
(*Note* Chapter Structuring::.)  You should do this even if you do not
intend to format the file for Info.  This is because printed output uses
both ‘@node’ names and chapter-structuring names in the output for
cross-references.  The only time you are likely to use the chapter
structuring commands without also using nodes is if you are writing a
document that contains no cross references and will only be printed, not
transformed into Info, HTML, or other formats.

* Menu:

* Writing a Node::             How to write a ‘@node’ line.
* Node Names::                 How to choose node names.
* Node Line Requirements::     Keep names unique.
* First Node::                 How to write a 'Top' node.
* @top Command::               How to use the ‘@top’ command.
* Texinfo Document Structure:: Double structure of documents.
* Node Menu Illustration::     A diagram, and sample nodes and menus.
* Node Descriptions::          ‘@nodedescription’ and ‘@nodedescriptionblock’.
* Menus::                      Listing subordinate nodes.


File: texinfo.info,  Node: Writing a Node,  Next: Node Names,  Up: Nodes

3.1 Writing a ‘@node’ Line
==========================

Write ‘@node’ at the beginning of a line followed by the name of the
node, like this:

     @node NODE-NAME

   After you have inserted a ‘@node’ line, you should immediately write
the @-command for the associated chapter or section (if any) and insert
its name.

   You may optionally follow the node name argument to ‘@node’ with up
to three optional arguments on the rest of the same line, separating the
arguments with commas.  These are the names of the 'Next', 'Previous',
and 'Up' pointers, in that order.  Hence, the template for a
fully-written-out node line with 'Next', 'Previous', and 'Up' pointers
looks like this:

     @node NODE-NAME, NEXT, PREVIOUS, UP

   The NODE-NAME argument must be present, but the others are optional.
If you wish to specify some but not others, just insert commas as
needed, as in: ‘@node mynode,,,uppernode’.  Any spaces before or after
each name on the ‘@node’ line are ignored.  However, if your Texinfo
document is hierarchically organized, as virtually all are, we recommend
leaving off all the pointers and letting ‘texi2any’ determine them.

   The ‘texi2any’ program automatically determines node pointers for a
hierarchically organized document.  For it to do this, each ‘@node’
command should be followed immediately by a sectioning command such as
‘@chapter’ or ‘@section’ (except that comment lines may intervene).
Finally, you must follow the 'Top' ‘@node’ line with a line beginning
with ‘@top’ to mark the top-level node in the file.  *Note* @top
Command::.

   Even when you explicitly specify all pointers, you cannot write the
nodes in the Texinfo source file in an arbitrary order.  You must write
the nodes in the order you wish them to appear in the output.  For Info
format one can imagine that the order may not matter, but it matters for
the other formats.

   In most cases, you will want to take advantage of the pointer
creation feature, and not redundantly specify node pointers that the
programs can determine.  However, Texinfo documents are not required to
be organized hierarchically or in fact to contain sectioning commands at
all (for example, if you never intend the document to be printed), so
node pointers may still be specified explicitly, in full generality.

   If you are using GNU Emacs, and want explicit pointers, you can use
the update node commands provided by Texinfo mode to insert the names of
the pointers.  (*Note* Updating Nodes and Menus::.)

   Alternatively, you can insert the 'Next', 'Previous', and 'Up'
pointers yourself.  If you do this in Emacs, you may find it helpful to
use the Texinfo mode keyboard command ‘C-c C-c n’.  This command inserts
‘@node’ and a comment line listing the names of the pointers in their
proper order.  The comment line helps you keep track of which arguments
are for which pointers.


File: texinfo.info,  Node: Node Names,  Next: Node Line Requirements,  Prev: Writing a Node,  Up: Nodes

3.2 Choosing Node Names
=======================

The name of a node identifies the node.  For all the details of node
names, *note* Node Line Requirements::).

   Here are some suggestions for node names:

   • Try to pick node names that are informative but short.

     In the Info file, the file name, node name, and pointer names are
     all inserted on one line, which may run into the right edge of the
     window.  (This does not cause a problem with Info, but is ugly.)

   • Try to pick node names that differ from each other near the
     beginnings of their names.  This way, it is easy to use automatic
     name completion in Info.

   • Conventionally, node names are capitalized in the same way as
     section and chapter titles.  In this manual, initial and
     significant words are capitalized; others are not.  In other
     manuals, just initial words and proper nouns are capitalized.
     Either way is fine; we recommend just being consistent.

   • In HTML output, any characters in the node name other than plain
     ASCII letters, numbers or spaces will be changed in the file name.
     (*Note* HTML Xref Node Name Expansion::.)  This can make the URLs
     for the pages in your manual less user-friendly; for example, in
     this manual the ‘@dots’ node is output as ‘__0040dots.html’.

   Because node names are used in cross-references, it is not desirable
to casually change them once published.  When you delete or rename a
node, it is usually a good idea to define an ‘@anchor’ with the old
name.  That way, references from other manuals, from mail archives, and
so on are not invalidated.  *Note* @anchor::.

   The pointers from a given node enable you to reach other nodes and
consist simply of the names of those nodes.

   Normally, a node's 'Up' pointer contains the name of the node whose
menu mentions that node.  The node's 'Next' pointer contains the name of
the node that follows the present node in that menu and its 'Previous'
pointer contains the name of the node that precedes it in that menu.
When a node's 'Previous' node is the same as its 'Up' node, both
pointers name the same node.

   Usually, the first node of a Texinfo file is the 'Top' node, and its
'Up' pointer points to the ‘dir’ file, which contains the main menu for
all of Info.


File: texinfo.info,  Node: Node Line Requirements,  Next: First Node,  Prev: Node Names,  Up: Nodes

3.3 ‘@node’ Line Requirements
=============================

Names used with ‘@node’ have several requirements:

   • All the node names in a single Texinfo file must be unique.

     This means, for example, that if you end every chapter with a
     summary, you must name each summary node differently.  You cannot
     just call them all "Summary".  You may, however, duplicate the
     titles of chapters, sections, and the like.  Thus you can end each
     chapter with a section called "Summary", so long as the node names
     for those sections are all different.

     Node names, anchor names (*note* @anchor::), and float labels (*note*
     @float::) must all be unique.

   • Node names can contain @-commands(1).  For example, using ‘@TeX{}’
     in a node name results in the TeX logo being output, as it would be
     in normal text.  Cross-references should use ‘@TeX{}’ just as the
     node name does.

     Some commands do not make sense in node names; for instance,
     environments (e.g., ‘@quotation’), commands that read a whole line
     as their argument (e.g., ‘@sp’), and plenty of others.  For the
     complete list of commands that are allowed, and their expansion for
     HTML identifiers and file names, *note* HTML Xref Command
     Expansion::.

   • A node name may not start with a left parenthesis preceding a right
     parenthesis, as in ‘(not)allowed’, since this syntax is used to
     specify an external manual.

   • Unfortunately, you cannot reliably use periods, commas, or colons
     within a node name; these can confuse some Info readers.
     ‘texi2any’ quotes problematic node names and labels by default, but
     some Info readers do not recognize this syntax.  Node name and
     label quoting causes ‘DEL’ characters (‘CTRL-?’, character number
     127, often rendered as ‘^?’) to appear around the name.  To remove
     node names and labels quoting, you can set the customization
     variable ‘INFO_SPECIAL_CHARS_QUOTE’ to ‘0’ (*note* Other
     Customization Variables::).

     ‘texi2any’ warns about such problematic usage in node names, menu
     items, and cross-references.  If you don't want to see the
     warnings, you can set the customization variable
     ‘INFO_SPECIAL_CHARS_WARNING’ to ‘0’ (*note* Other Customization
     Variables::).

     If you insist on using these characters in node names, in order not
     to confuse the Texinfo processors you must still escape those
     characters, by using either special insertions (*note* Inserting a
     Comma::) or ‘@asis’ (*note* @asis::).  For example:

          @node foo@asis{::}bar@comma{} baz

     As an example of avoiding the special characters, the following is
     a section title in this manual:

          @section @code{@@unnumbered}, @code{@@appendix}: Chapters with...

     But the corresponding node name lacks the commas and the subtitle:

          @node @code{@@unnumbered @@appendix}

   • Case is significant in node names.

   • Spaces before and after names on the ‘@node’ line are ignored.
     Multiple whitespace characters "inside" a name are collapsed to a
     single space.  For example:

          @node foo bar
          @node  foo bar,
          @node foo bar ,
          @node foo  bar,
          @node  foo  bar ,

     all define the same node, namely ‘foo bar’.  In menu entries, a
     single internal space should be used in node names or some versions
     of some Info readers will not find the node.

   ---------- Footnotes ----------

   (1) Prior to the Texinfo 5 release in 2013, this feature was
supported in an ad hoc way (the ‘--commands-in-node-names’ option to
‘makeinfo’).  Now it is part of the language.


File: texinfo.info,  Node: First Node,  Next: @top Command,  Prev: Node Line Requirements,  Up: Nodes

3.4 The First Node
==================

The first node of a Texinfo file is the “Top” node, except in an
included file (*note* Include Files::).  The Top node should contain a
short summary and a master menu.  *Note* The Top Node:: for more
information on the Top node contents and examples.  Straight text before
the Top node outside of any node should be avoided.  Such text, if
present, is not output for DocBook.

   Here is a description of the node pointers to be used in the Top
node:

   • The Top node (which must be named ‘top’ or ‘Top’) should have as
     its 'Up' node the name of a node in another file, where there is a
     menu that leads to this file.  Specify the file name in
     parentheses.

     Usually, all Info files are available through a single virtual Info
     tree, constructed from multiple directories.  In this case, use
     ‘(dir)’ as the parent of the Top node; this specifies the top-level
     node in the ‘dir’ file, which contains the main menu for the Info
     system as a whole.  (Each directory with Info files is intended to
     contain a file named ‘dir’.)

     That's fine for Info, but for HTML output, one might well want the
     Up link from the Top node to go to some specific place.  For
     example, for GNU the natural place would be
     <http://www.gnu.org/manual/> (a web page collecting links to most
     GNU manuals), better specified as just ‘/manual/’ if the manual
     will be installed on ‘www.gnu.org’.  This can be specified with the
     ‘TOP_NODE_UP_URL’ customization variable (*note* HTML Customization
     Variables::), as in

          $ texi2any --html -c TOP_NODE_UP_URL=/manual/ ...

   • The 'Prev' node of the Top node is usually omitted.

   • The 'Next' node of the Top node should be the first chapter in your
     document.

   *Note* Installing an Info File::, for more information about
installing an Info file in the ‘info’ directory.

   It is usually best to leave the pointers off entirely and let the
tools implicitly define them, with this simple result:

     @node Top


File: texinfo.info,  Node: @top Command,  Next: Texinfo Document Structure,  Prev: First Node,  Up: Nodes

3.5 The ‘@top’ Sectioning Command
=================================

The ‘@top’ command is a special sectioning command that you should only
use after a ‘@node Top’ line at the beginning of a Texinfo file.

   It produces the same sort of output as ‘@unnumbered’ (*note*
@unnumbered @appendix::).  In LaTeX ‘\part*’ is used.

   ‘@top’ is ignored when raising or lowering sections.  That is, it is
never lowered and nothing can be raised to it (*note* Raise/lower
sections::).

   It used to be conventional to wrap the ‘Top’ node in an ‘@ifnottex’
conditional so that it would not appear in printed output (*note*
Conditionals::).  Thus, a Top node often looked like this:

     @ifnottex
     @node Top
     @top YOUR-MANUAL-TITLE

     VERY-HIGH-LEVEL-SUMMARY
     @end ifnottex

   This is no longer necessary, as the ‘Top’ node is now never output
for printed output.  The ‘Top’ node is not output for DocBook either.


File: texinfo.info,  Node: Texinfo Document Structure,  Next: Node Menu Illustration,  Prev: @top Command,  Up: Nodes

3.6 Texinfo Document Structure
==============================

Nodes can contain “menus”, which contain the names of “child nodes”
within the parent node; for example, a node corresponding to a chapter
would have a menu of the sections in that chapter.  The menus allow the
user to move to the child nodes in the Info output.

   In addition, nodes contain “node pointers” that name other nodes.
The 'Next' and 'Previous' pointers link nodes at the same sectioning
level into a chain.  As you might imagine, the 'Next' pointer links to
the next node, and the 'Previous' pointer links to the previous node.
In general, 'Next' and 'Previous' refer to nodes at the _same
hierarchical level_ in the manual, not necessarily to the next node
within the Texinfo file.  In the Texinfo file, the subsequent node may
be at a lower level--a section-level node most often follows a
chapter-level node, for example.  Thus, for example, all the nodes that
are at the level of sections within a chapter are linked together, and
the order in this chain is the same as the order of the children in the
menu of the parent chapter.  Each child node records the parent node
name as its 'Up' pointer.

   Since the 'Top' node is the only node at that level, 'Next' refers to
the first following node, which is almost always a chapter or
chapter-level node.  This is an exception to the rule of 'Next' being at
the same hierarchical level.

   The Info and HTML output for each node includes links to the 'Next',
'Previous', and 'Up' nodes.  The HTML also uses the ‘accesskey’
attribute with the values ‘n’, ‘p’, and ‘u’ respectively.  This allows
people using web browsers to follow the navigation using (typically)
‘M-LETTER’, e.g., ‘M-n’ for the 'Next' node, from anywhere within the
node.  Node pointers and menus provide structure for Info files just as
chapters, sections, subsections, and the like provide structure for
printed books.  The two structures are theoretically distinct; in
practice, however, the tree structure of printed books is essentially
always used for the node and menu structure also, as this leads to a
document which is easy to follow.

   Typically, the sectioning structure and the node structure are
completely parallel, with one node for each chapter, section, etc., and
with the nodes following the same hierarchical arrangement as the
sectioning.  Thus, if a node is at the logical level of a chapter, its
child nodes are at the level of sections; similarly, the child nodes of
sections are at the level of subsections.

   It is technically possible to create Texinfo documents with only one
structure or the other, or for the two structures not to be parallel, or
for either the sectioning or node structure to be different from the
conventional structure.  To the best of our knowledge, however, all the
Texinfo manuals currently in general use do follow the conventional
parallel structure.


File: texinfo.info,  Node: Node Menu Illustration,  Next: Node Descriptions,  Prev: Texinfo Document Structure,  Up: Nodes

3.7 Node and Menu Illustration
==============================

Here is a diagram that illustrates a Texinfo file with three chapters,
each of which contains two sections.

   The "root" is at the top of the diagram and the "leaves" are at the
bottom.  This is how such a diagram is drawn conventionally; it
illustrates an upside-down tree.  For this reason, the root node is
called the 'Top' node, and 'Up' node pointers carry you closer to the
root.

                              Top
                               |
             -------------------------------------
            |                  |                  |
         Chapter 1          Chapter 2          Chapter 3
            |                  |                  |
         --------           --------           --------
        |        |         |        |         |        |
     Section  Section   Section  Section   Section  Section
       1.1      1.2       2.1      2.2       3.1      3.2

   Using explicit pointers (not recommended, but shown for purposes of
the example), the fully-written command to start Chapter 2 would be
this:

     @node     Chapter 2,  Chapter 3, Chapter 1, Top
     @comment  node-name,  next,      previous,  up

This ‘@node’ line says that the name of this node is "Chapter 2", the
name of the 'Next' node is "Chapter 3", the name of the 'Previous' node
is "Chapter 1", and the name of the 'Up' node is "Top".  You can (and
should) omit writing out these node names if your document is
hierarchically organized, but the pointer relationships still obtain.

   To go to Sections 2.1 and 2.2 using Info, you need a menu inside
Chapter 2.  (*Note* Menus::.)  You would write the menu just before the
beginning of Section 2.1, like this:

        @menu
        * Sect. 2.1::    Description of this section.
        * Sect. 2.2::    Description.
        @end menu

   The automatic pointers for the node for Sect. 2.1 correspond to:

     @node     Sect. 2.1, Sect. 2.2, ,         Chapter 2
     @comment  node-name, next,      previous, up

   Note that no 'Prev' pointer is generated, since there is no other
node at the same hierarchical level before Sect. 2.1.

   Using explicit pointers, the node for Sect. 2.1 could be written like
this:

     @node     Sect. 2.1, Sect. 2.2, Chapter 2, Chapter 2
     @comment  node-name, next,      previous,  up

   With automatic pointers, the 'Next' and 'Previous' pointers of a node
lead to other nodes at the same level--from chapter to chapter or from
section to section.  As shown, when using explicit pointers, the
pointers can also lead somewhere else, here, for example, the 'Previous'
pointer points up.  An 'Up' pointer usually leads to a node at the level
above (closer to the 'Top' node; and a 'Menu' leads to nodes at a level
below (closer to 'leaves').  (A cross-reference can point to a node at
any level; see *note* Cross References::.)

   Technically, explicit node pointers can carry you to any node,
regardless of the structure of the document; even to nodes in a
different Info file.  However, it would be very confusing for readers to
have the 'Next', 'Previous' and 'Up' pointers lead to nodes that do not
correspond, even loosely, to the next, previous and up node.

   A ‘@node’ command and a chapter structuring command are
conventionally used together, in that order, often followed by indexing
commands.  (As shown in the example above, you may follow the ‘@node’
line with a comment line, e.g., to show which pointer is which if
explicit pointers are used.)  The Texinfo processors use this construct
to determine the relationships between nodes and sectioning commands.

   Here is the beginning of the chapter in this manual called "Ending a
Texinfo File".  This shows a ‘@node’ line followed by a ‘@chapter’ line,
and then by indexing lines.

     @node Ending a File
     @chapter Ending a Texinfo File
     @cindex Ending a Texinfo file
     @cindex Texinfo file ending
     @cindex File ending


File: texinfo.info,  Node: Node Descriptions,  Next: Menus,  Prev: Node Menu Illustration,  Up: Nodes

3.8 Node Descriptions
=====================

You can provide a short description of the purpose of a node by using
the ‘@nodedescription’ command following the ‘@node’ line.  Such a
description might elaborate on or extend the information in the node
name itself.

   You can also use a ‘@nodedescriptionblock’ environment to provide a
node description.  This may be useful for longer descriptions.

   ‘texi2any’ uses the content you provide with these commands when
outputing menus for Info output format (and, optionally, for HTML).
‘texi2any’ uses the description after a menu entry for the node if it is
generating the menu automatically, or if no description for the menu
entry was provided in an explicit ‘@menu’ block.  (*Note* Menus::).

   Here is an example of using these commands:

     @node Tools
     @chapter Tools

     This chapter is on different tools you can use.

     @node Screwdrivers
     @nodedescription Flathead and Phillips.
     @section Screwdrivers

     This section is about screwdrivers.

     @node Drills
     @nodedescriptionblock
     Making holes in things with power screwdrivers, drill drivers, combi
     drills, impact drivers, hammer drills, breakers and demolition drills.
     @end nodedescriptionblock
     @section Drills

     This section is about drills.

   In Info output, ‘texi2any’ would output the ‘Tools’ node with a menu
as follows:

     * Menu:

     * Screwdrivers::          Flathead and Phillips.
     * Drills::                Making holes in things with power
                               screwdrivers, drill drivers, combi
                               drills, impact drivers, hammer drills,
                               breakers and demolition drills.


File: texinfo.info,  Node: Menus,  Prev: Node Descriptions,  Up: Nodes

3.9 Menus
=========

“Menus” contain pointers to subordinate nodes.  In Info output, you use
menus to go to such nodes.  ‘texi2any’ can output menus in HTML output,
but does not do so by default (*note* Other Customization Variables::,
under ‘FORMAT_MENU’).  Menus have no role in printed manuals or other
output formats.

   Menus are automatically generated by ‘texi2any’ when outputting Info
for nodes followed by a sectioning command, without an explicit ‘@menu’
block, and with automatic pointers.

   It is often more convenient to let ‘texi2any’ generate menus for you,
as you do not then have the burden of updating menu blocks in your
Texinfo source when you add, remove, or relocate nodes.  In the usual
case of a hierarchically organized manual with sectioning commands
associated with nodes, and with node pointers left out, you should only
write menus if you want exact control over the contents and formatting
of menus in Info.

* Menu:

* Writing a Menu::             What is a menu?
* Menu Example::               Two and three part menu entries.
* Menu Location::              Menus go at the ends of nodes.
* Menu Parts::                 A menu entry has three parts.
* Less Cluttered Menu Entry::  Two part menu entry.
* Other Info Files::           How to refer to a different Info file.


File: texinfo.info,  Node: Writing a Menu,  Next: Menu Example,  Up: Menus

3.9.1 Writing a Menu
--------------------

A menu consists of a ‘@menu’ command on a line by itself, followed by
menu entry lines or menu comment lines, and then followed by an ‘@end
menu’ command on a line by itself.

   A menu looks like this:

     @menu
     Larger Units of Text

     * Files::                       All about handling files.
     * Multiples: Buffers.           Multiple buffers; editing
                                      several files at once.
     @end menu

   In a menu, every line that begins with an ‘* ’ is a “menu entry”.
(Note the space after the asterisk.)

   A line that does not start with an ‘* ’ may also appear in a menu.
Such a line is not a menu entry but rather a “menu comment” line that
appears in the Info file.  In the example above, the line ‘Larger Units
of Text’ is such a menu comment line; the two lines starting with ‘* ’
are menu entries.

   Technically, menus can carry you to any node, regardless of the
structure of the document; even to nodes in a different Info file.
However, the ‘texi2any’ implicit pointer creation feature (*note* Writing
a Node::) and GNU Emacs Texinfo mode updating commands work only to
create menus of subordinate nodes in a hierarchically structured
document.  In a hierarchically structured document, it is much better to
use cross-references to refer to arbitrary nodes.

   In Info, a user selects a node with the ‘m’ (‘Info-menu’) command.
The menu entry name is what the user types after the ‘m’ command.  In
the HTML output, the ‘accesskey’ attribute is used with the values
‘1’...‘9’ for the first nine entries.  This allows people using web
browsers to follow the first menu entries using (typically) ‘M-DIGIT’,
e.g., ‘M-1’ for the first entry.


File: texinfo.info,  Node: Menu Example,  Next: Menu Location,  Prev: Writing a Menu,  Up: Menus

3.9.2 A Menu Example
--------------------

A menu looks like this in Texinfo:

     @menu
     * menu entry name: Node name.   A short description.
     * Node name::                   This form is preferred.
     @end menu

This produces:

     * Menu:

     * menu entry name: Node name.   A short description.
     * Node name::                   This form is preferred.

   Here is an example as you might see it in a Texinfo file:

     @menu
     Larger Units of Text

     * Files::                       All about handling files.
     * Multiples: Buffers.           Multiple buffers; editing
                                      several files at once.
     @end menu

This produces:

     * Menu:
     Larger Units of Text

     * Files::                       All about handling files.
     * Multiples: Buffers.           Multiple buffers; editing
                                      several files at once.

   In this example, the menu has two entries.  ‘Files’ is both a menu
entry name and the name of the node referred to by that name.
‘Multiples’ is the menu entry name; it refers to the node named
‘Buffers’.  The line ‘Larger Units of Text’ is a comment; it appears in
the menu, but is not an entry.

   Since no file name is specified with either ‘Files’ or ‘Buffers’,
they must be the names of nodes in the same Info file (*note* Referring
to Other Info Files: Other Info Files.).


File: texinfo.info,  Node: Menu Location,  Next: Menu Parts,  Prev: Menu Example,  Up: Menus

3.9.3 Menu Location
-------------------

There may be at most one menu in a node.  A menu is conventionally
located at the end of a node, without any regular text or additional
commands between the ‘@end menu’ and the beginning of the next node.

   This convention is useful, since a reader who uses the menu could
easily miss any such text.  Also, any such post-menu text will be
considered part of the menu in Info output (which has no marker for the
end of a menu).  Thus, a line beginning with ‘* ’ will likely be
incorrectly handled.

   It's usually best if a node with a menu does not contain much text.
If you find yourself with a lot of text before a menu, we generally
recommend moving all but a couple of paragraphs into a new subnode.
Otherwise, it is easy for readers to miss the menu.


File: texinfo.info,  Node: Menu Parts,  Next: Less Cluttered Menu Entry,  Prev: Menu Location,  Up: Menus

3.9.4 The Parts of a Menu
-------------------------

A menu entry has three parts, only the second of which is required:

  1. The menu entry name (optional).

  2. The name of the node (required).

  3. A description of the item (optional).

   The template for a generic menu entry looks like this (but see the
next section for one more possibility):

     * MENU-ENTRY-NAME: NODE-NAME.   DESCRIPTION

   Follow the menu entry name with a single colon, and follow the node
name with tab, comma, newline, or the two characters period and space
(‘. ’).

   The third part of a menu entry is a descriptive phrase or sentence.
Menu entry names and node names are often short; the description
explains to the reader what the node is about.  A useful description
complements the node name rather than repeats it.  The description,
which is optional, can spread over multiple lines; if it does, some
authors prefer to indent the second line while others prefer to align it
with the first (and all others).  It's up to you.  An empty line, or the
next menu entry, ends a description.

   Space characters in a menu are preserved as-is in the Info output;
this allows you to format the menu as you wish.  Unfortunately you must
type node names without any extra spaces or some versions of some Info
readers will not find the node (*note* Node Line Requirements::).

   ‘texi2any’ warns and protect names when the text of a menu item (and
node names and cross-references) contains a problematic construct that
could interfere with its parsing in Info.  *Note* Info Node Names
Constraints::.


File: texinfo.info,  Node: Less Cluttered Menu Entry,  Next: Other Info Files,  Prev: Menu Parts,  Up: Menus

3.9.5 Less Cluttered Menu Entry
-------------------------------

When the menu entry name and node name are the same, you can write the
name immediately after the asterisk and space at the beginning of the
line and follow the name with two colons.

   For example, write

     * Name::                        DESCRIPTION

instead of

     * Name: Name.                   DESCRIPTION

   We recommend using the node name for the menu entry name whenever
possible, since it reduces visual clutter in the menu.


File: texinfo.info,  Node: Other Info Files,  Prev: Less Cluttered Menu Entry,  Up: Menus

3.9.6 Referring to Other Info Files
-----------------------------------

You can create a menu entry that enables a reader in Info to go to a
node in another Info file by writing the file name in parentheses just
before the node name.  Some examples:

     @menu
     * FIRST-ENTRY-NAME:(FILENAME)NODENAME.     DESCRIPTION
     * (FILENAME)SECOND-NODE::                  DESCRIPTION
     @end menu

   For example, to refer directly to the ‘Outlining’ and ‘Rebinding’
nodes in the ‘Emacs Manual’, you could write a menu like this:

     @menu
     * Outlining: (emacs)Outline Mode. The major mode for
                                        editing outlines.
     * (emacs)Rebinding::              How to redefine the
                                        meaning of a key.
     @end menu

   If you do not list the node name, but only name the file, then Info
presumes that you are referring to the 'Top' node.  Examples:

     * Info: (info).         Documentation browsing system.
     * (emacs)::             The extensible, self-documenting
                              text editor.

   The GNU Emacs Texinfo mode menu updating commands only work with
nodes within the current buffer, so you cannot use them to create menus
that refer to other files.  You must write such menus by hand.  *Note*
Updating Nodes and Menus::.


File: texinfo.info,  Node: Chapter Structuring,  Next: Cross References,  Prev: Nodes,  Up: Top

# /4 Chapter Structuring
*********************

Texinfo's “chapter structuring” commands divide a document into a
hierarchy of chapters, sections, subsections, and subsubsections.  These
commands generate large headings in the text, like the one above.  They
also provide information for generating the table of contents (*note*
Generating a Table of Contents: Contents.).

   Normally you put a ‘@node’ command immediately before each chapter
structuring command.  *Note* Nodes::.

* Menu:

* Tree Structuring::           A manual is like an upside down tree ...
* Structuring Command Types::
* @chapter::
* @unnumbered @appendix::
* @majorheading @chapheading::
* @section::
* @unnumberedsec @appendixsec @heading::
* @subsection::
* @unnumberedsubsec @appendixsubsec @subheading::
* @subsubsection::
* @part::                      Collections of chapters.
* Raise/lower sections::       How to change commands' hierarchical level.


File: texinfo.info,  Node: Tree Structuring,  Next: Structuring Command Types,  Up: Chapter Structuring

4.1 Tree Structure of Sections
==============================

A Texinfo file is usually structured like a book with chapters,
sections, subsections, and the like.  This structure can be visualized
as a tree (or rather as an upside-down tree) with the root at the top
and the levels corresponding to chapters, sections, subsection, and
subsubsections.

   Here is a diagram that shows a Texinfo file with three chapters, each
with two sections.

                              Top
                               |
             -------------------------------------
            |                  |                  |
         Chapter 1          Chapter 2          Chapter 3
            |                  |                  |
         --------           --------           --------
        |        |         |        |         |        |
     Section  Section   Section  Section   Section  Section
       1.1      1.2       2.1      2.2       3.1      3.2


   In a Texinfo file that has this structure, the beginning of Chapter 2
would be written like this:

     @node    Chapter 2
     @chapter Chapter 2

For purposes of example, here is how it would be written with explicit
node pointers:

     @node    Chapter 2,  Chapter 3, Chapter 1, Top
     @chapter Chapter 2

   The chapter structuring commands are described in the sections that
follow; the ‘@node’ command is described in the previous chapter (*note*
Nodes::).


File: texinfo.info,  Node: Structuring Command Types,  Next: @chapter,  Prev: Tree Structuring,  Up: Chapter Structuring

4.2 Structuring Command Types
=============================

The chapter structuring commands fall into four groups, each of which
contains structuring commands at the levels of chapters, sections,
subsections, and subsubsections:

   • The ‘@chapter’-like commands and ‘@appendix’-like commands produce
     numbered or lettered entries both in the body of a document and in
     its table of contents.

   • The ‘@unnumbered’-like commands produce unnumbered entries both in
     the body of a document and in its table of contents.  The ‘@top’
     command, which has a special use, is a member of this group (*note*
     @top Command::).  An ‘@unnumbered’ section is a normal part of the
     document structure.

   • The ‘@heading’-like commands produce simple unnumbered headings
     that do not appear in a table of contents, are not associated with
     nodes, and cannot be cross-referenced.  These heading commands
     never start a new page.

   In printed output, the chapter structuring commands produce headings
in the document.  When a ‘@setchapternewpage’ command says to do so, the
‘@chapter’, ‘@unnumbered’, and ‘@appendix’ commands start new pages in
the printed manual; the ‘@heading’ commands do not.  *Note*
@setchapternewpage::.

   In Info and plain text output, the command causes the title to appear
on a line by itself, with a line of an ASCII character (‘*’, ‘=’, ...)
inserted underneath.  For example, the "Chapter Structuring" heading
could be:

     5 Chapter Structuring
     *********************

The underlining character is the same for all the commands at the same
level.  For instance, it is the same for the chapter-level commands
‘@chapter’, ‘@apppendix’, ‘@unnumbered’ and ‘@chapheading’.

   In HTML, the chapter-level commands produce an ‘<h2>’-level header by
default (controlled by the ‘CHAPTER_HEADER_LEVEL’ customization
variable, *note* Other Customization Variables::).  The heading element
level is adjusted for the other commands.

   In the DocBook output, the appropriate level of element is used.  The
produced element includes all following sections up to the next command
at the same or higher level.  For example, a ‘<chapter>’ element is
produced for ‘@chapter’, and contains any sections or subsections in the
chapter.

   Here is a summary:

                                                            No new page
Numbered       Unnumbered             Lettered/numbered     Unnumbered
In contents    In contents            In contents           Not in
                                                            contents
               ‘@top’                                       ‘@majorheading’
‘@chapter’     ‘@unnumbered’          ‘@appendix’           ‘@chapheading’
‘@section’     ‘@unnumberedsec’       ‘@appendixsec’        ‘@heading’
‘@subsection’  ‘@unnumberedsubsec’    ‘@appendixsubsec’     ‘@subheading’
‘@subsubsection’‘@unnumberedsubsubsec’‘@appendixsubsubsec’  ‘@subsubheading’


File: texinfo.info,  Node: @chapter,  Next: @unnumbered @appendix,  Prev: Structuring Command Types,  Up: Chapter Structuring

4.3 ‘@chapter’: Chapter Structuring
===================================

‘@chapter’ identifies a chapter in the document-the highest level of the
normal document structuring hierarchy.  Write the command at the
beginning of a line and follow it on the same line by the title of the
chapter.  The chapter is numbered automatically, starting from 1.

   For example, the present chapter in this manual is entitled "Chapter
Structuring"; the ‘@chapter’ line looks like this:

     @chapter Chapter Structuring


File: texinfo.info,  Node: @unnumbered @appendix,  Next: @majorheading @chapheading,  Prev: @chapter,  Up: Chapter Structuring

4.4 ‘@unnumbered’, ‘@appendix’: Chapters with Other Labeling
============================================================

Use the ‘@unnumbered’ command to start a chapter-level element that
appears without chapter numbers of any kind.  Use the ‘@appendix’
command to start an appendix that is labeled by letter ('A', 'B', ...)
instead of by number; appendices are also at the chapter level of
structuring.

   Write an ‘@appendix’ or ‘@unnumbered’ command at the beginning of a
line and follow it on the same line by the title, just as with
‘@chapter’.

   Texinfo also provides a command ‘@centerchap’, which is analogous to
‘@unnumbered’, but centers its argument in the printed and HTML outputs.
This kind of stylistic choice is not usually offered by Texinfo.  You
are recommended not to use this command, as it may be removed in future
releases of Texinfo.

   With ‘@unnumbered’, if the name of the associated node is one of
these English words (case-insensitive):

     Acknowledgements  Colophon  Dedication  Preface

then the DocBook output uses corresponding special tags (‘<preface>’,
etc.) instead of the default ‘<chapter>’.  The argument to ‘@unnumbered’
itself can be anything, and is output as the element title as usual.


File: texinfo.info,  Node: @majorheading @chapheading,  Next: @section,  Prev: @unnumbered @appendix,  Up: Chapter Structuring

4.5 ‘@majorheading’, ‘@chapheading’: Chapter-level Headings
===========================================================

The ‘@majorheading’ and ‘@chapheading’ commands produce chapter-like
headings in the body of a document.

   However, neither command produces an entry in the table of contents,
and neither command causes TeX to start a new page in a printed manual.

   In TeX, a ‘@majorheading’ command generates a larger vertical
whitespace before the heading than a ‘@chapheading’ command but is
otherwise the same.

   In other output formats, the ‘@majorheading’ and ‘@chapheading’
commands produce a similar output to ‘@chapter’.  The difference is the
lack of numbering and the lack of any association with nodes.  *Note*
@chapter::.


File: texinfo.info,  Node: @section,  Next: @unnumberedsec @appendixsec @heading,  Prev: @majorheading @chapheading,  Up: Chapter Structuring

4.6 ‘@section’: Sections Below Chapters
=======================================

An ‘@section’ command identifies a section within a chapter unit,
whether created with ‘@chapter’, ‘@unnumbered’, or ‘@appendix’,
following the numbering scheme of the chapter-level command.  Thus,
within a ‘@chapter’ chapter numbered '1', the sections are numbered
'1.1', '1.2', etc.; within an ‘@appendix’ "chapter" labeled 'A', the
sections are numbered 'A.1', 'A.2', etc.; within an ‘@unnumbered’
chapter, the section gets no number.

   To make a section, write the ‘@section’ command at the beginning of a
line and follow it on the same line by the section title.  For example:

     @section This is a section

   Section titles are listed in the table of contents.


File: texinfo.info,  Node: @unnumberedsec @appendixsec @heading,  Next: @subsection,  Prev: @section,  Up: Chapter Structuring

4.7 ‘@unnumberedsec’, ‘@appendixsec’, ‘@heading’
================================================

The ‘@unnumberedsec’, ‘@appendixsec’, and ‘@heading’ commands are,
respectively, the unnumbered, appendix-like, and heading-like
equivalents of the ‘@section’ command (see the previous section).

   ‘@unnumberedsec’ and ‘@appendixsec’ do not need to be used in
ordinary circumstances, because ‘@section’ may also be used within
‘@unnumbered’ and ‘@appendix’ chapters; again, see the previous section.

‘@unnumberedsec’
     The ‘@unnumberedsec’ command may be used within an unnumbered
     chapter or within a regular chapter or appendix to produce an
     unnumbered section.

‘@appendixsec’
‘@appendixsection’
     ‘@appendixsection’ is a longer spelling of the ‘@appendixsec’
     command; the two are synonymous.

     Conventionally, the ‘@appendixsec’ or ‘@appendixsection’ command is
     used only within appendices.

‘@heading’
     You may use the ‘@heading’ command (almost) anywhere for a
     section-style heading that will not appear in the table of
     contents.  The ‘@heading’-series commands can appear inside most
     environments, for example, though pathological and useless
     locations such as an argument to another command, etc., are not
     allowed.


File: texinfo.info,  Node: @subsection,  Next: @unnumberedsubsec @appendixsubsec @subheading,  Prev: @unnumberedsec @appendixsec @heading,  Up: Chapter Structuring

4.8 ‘@subsection’: Subsections Below Sections
=============================================

Subsections are to sections as sections are to chapters; *note*
@section::.  For example:

     @subsection This is a subsection

   Subsection titles are listed in the table of contents.


File: texinfo.info,  Node: @unnumberedsubsec @appendixsubsec @subheading,  Next: @subsubsection,  Prev: @subsection,  Up: Chapter Structuring

4.9 The ‘@subsection’-like Commands
===================================

The ‘@unnumberedsubsec’, ‘@appendixsubsec’, and ‘@subheading’ commands
are, respectively, the unnumbered, appendix-like, and heading-like
equivalents of the ‘@subsection’ command.  (*Note* @subsection::.)

   ‘@unnumberedsubsec’ and ‘@appendixsubsec’ do not need to be used in
ordinary circumstances, because ‘@subsection’ may also be used within
sections of ‘@unnumbered’ and ‘@appendix’ chapters (*note* @section::).

   An ‘@subheading’ command produces a heading like that of a subsection
except that it is not numbered and does not appear in the table of
contents.  Similarly, an ‘@unnumberedsubsec’ command produces an
unnumbered heading like that of a subsection and an ‘@appendixsubsec’
command produces a subsection-like heading labeled with a letter and
numbers; both of these commands produce headings that appear in the
table of contents.


File: texinfo.info,  Node: @subsubsection,  Next: @part,  Prev: @unnumberedsubsec @appendixsubsec @subheading,  Up: Chapter Structuring

4.10 ‘@subsubsection’ and Other Subsub Commands
===============================================

The fourth and lowest level sectioning commands in Texinfo are the
'subsub' commands.  They are:

‘@subsubsection’
     Subsubsections are to subsections as subsections are to sections.
     (*Note* @subsection::.)  Subsubsection titles appear in the table of
     contents.

‘@unnumberedsubsubsec’
     Unnumbered subsubsection titles appear in the table of contents,
     but lack numbers.  Otherwise, unnumbered subsubsections are the
     same as subsubsections.

‘@appendixsubsubsec’
     Conventionally, appendix commands are used only for appendices and
     are lettered and numbered appropriately.  They also appear in the
     table of contents.

‘@subsubheading’
     The ‘@subsubheading’ command may be used anywhere that you want a
     small heading that will not appear in the table of contents.

   As with subsections, ‘@unnumberedsubsubsec’ and ‘@appendixsubsubsec’
do not need to be used in ordinary circumstances, because
‘@subsubsection’ may also be used within subsections of ‘@unnumbered’
and ‘@appendix’ chapters (*note* @section::).


File: texinfo.info,  Node: @part,  Next: Raise/lower sections,  Prev: @subsubsection,  Up: Chapter Structuring

4.11 ‘@part’: Groups of Chapters
================================

The final sectioning command is ‘@part’, to mark a “part” of a manual,
that is, a group of chapters or (rarely) appendices.  This behaves quite
differently from the other sectioning commands, to fit with the way such
"parts" are conventionally used in books.

   No ‘@node’ command is associated with ‘@part’.  Just write the
command on a line by itself, including the part title, at the place in
the document you want to mark off as starting that part.  For example:

     @part Part I:@* The beginning

   As can be inferred from this example, no automatic numbering or
labeling of the ‘@part’ text is done.  The text is taken as-is.

   Because parts are not associated with nodes, no general text can
follow the ‘@part’ line.  To produce the intended output, it must be
followed by a chapter-level command (including its node).  Thus, to
continue the example:

     @part Part I:@* The beginning

     @node Introduction
     @chapter Introduction
     ...

   In the TeX output, the ‘@part’ text is included in both the normal
and short tables of contents (*note* Contents::), without a page number
(since that is the normal convention).  In addition, a "part page" is
output in the body of the document, with just the ‘@part’ text.  In the
example above, the ‘@*’ causes a line break on the part page (but is
replaced with a space in the tables of contents).  This part page is
always forced to be on an odd (right-hand) page, regardless of the
chapter pagination (*note* @setchapternewpage::).  In the LaTeX output,
the ‘@part’ is output as ‘\part’.

   In the HTML output, the ‘@part’ text is similarly included in the
tables of contents, and a heading is included in the main document text,
as part of the following chapter or appendix node.

   In the DocBook output, the ‘<part>’ element includes all the
following chapters, up to the next ‘<part>’.  A ‘<part>’ containing
chapters is also closed at an appendix.

   In the Info and plain text output, ‘@part’ has no effect.

   ‘@part’ is ignored when raising or lowering sections (see next
section).  That is, it is never lowered and nothing can be raised to it.


File: texinfo.info,  Node: Raise/lower sections,  Prev: @part,  Up: Chapter Structuring

4.12 Raise/lower Sections: ‘@raisesections’ and ‘@lowersections’
================================================================

The ‘@raisesections’ and ‘@lowersections’ commands implicitly raise and
lower the hierarchical level of following chapters, sections and the
other sectioning commands (excluding parts).

   That is, the ‘@raisesections’ command changes sections to chapters,
subsections to sections, and so on.  Conversely, the ‘@lowersections’
command changes chapters to sections, sections to subsections, and so
on.  Thus, a ‘@lowersections’ command cancels a ‘@raisesections’
command, and vice versa.

   As a practical matter, you generally only want to raise or lower
large chunks, usually in external files.  You can use ‘@lowersections’
to include text written as an outer or standalone Texinfo file in
another Texinfo file as an inner, included file (*note* Include Files::).
Typical usage looks like this:

     @lowersections
     @include somefile.texi
     @raisesections

(Without the ‘@raisesections’, all the subsequent sections in the main
file would also be lowered.)

   If the included file being lowered has a ‘@top’ node, you'll need to
conditionalize its inclusion with a flag (*note* @set @value::).

   Any menus in the final result have to take the raising and lowering
into account, so arbitrarily sprinkling ‘@raisesections’ and
‘@lowersections’ commands throughout the document will likely lead to
errors (unless the menus in your document are all generated
automatically).

   Repeated use of the commands continues to raise or lower the
hierarchical level a step at a time.  An attempt to raise above
'chapter' reproduces chapter commands; an attempt to lower below
'subsubsection' reproduces subsubsection commands.  Also, lowered
subsubsections and raised chapters will not work with ‘texi2any’'s
feature of implicitly determining node pointers, since the menu
structure cannot be represented correctly.

   Write each ‘@raisesections’ and ‘@lowersections’ command on a line of
its own.


File: texinfo.info,  Node: Cross References,  Next: Marking Text,  Prev: Chapter Structuring,  Up: Top

# /5 Cross-references
******************

“Cross-references” are used to refer the reader to other parts of the
same or different Texinfo files.

   Use cross-references to provide access to information that is too
detailed for the current context, or incidental to it.  An online help
system or a reference manual is not like a novel; few read such
documents in sequence from beginning to end.  Instead, people look up
what they need.  For this reason, such creations should contain many
cross-references to help readers find other information that they may
not have read.

   In a printed manual, a cross-reference results in a page reference,
unless it is to another manual altogether, in which case the
cross-reference names that manual.  In Info, a cross-reference results
in an entry that you can follow using the Info ‘f’ command.  (*Note*
Following cross-references: (info)Help-Xref.)  In HTML, a
cross-reference results in an hyperlink.  In DocBook, the ‘<link>’
element is used for cross-references unless it is to another manual, in
which case the cross-reference names that manual.

   The various cross-reference commands use nodes, anchors (*note*
@anchor::) or float labels (*note* @float::) to define cross-reference
locations.  When TeX generates a DVI file, it records each
cross-reference location page number and uses the page numbers in making
references.  Thus, even if you are writing a manual that will only be
printed, and not used online, you must nonetheless write ‘@node’ lines
(or ‘@anchor’ anchors) in order to name the places to which you make
cross-references.

* Menu:

* Cross Reference Commands::   A summary of the different commands.
* Cross Reference Parts::      A cross-reference has several parts.
* One Argument::               ‘@xref’ with one argument.
* Two Arguments::              ‘@xref’ with two arguments.
* Three Arguments::            ‘@xref’ with three arguments.
* Four and Five Arguments::    ‘@xref’ with four and five arguments.
* Referring to a Manual as a Whole::  Refer to an entire manual.
* @xref::                      Begin a reference with 'See' ...
* @ref::                       A reference for the last part of a sentence.
* @pxref::                     How to write a parenthetical cross-reference.
* @anchor::                    Defining arbitrary cross-reference targets
* @link::                      How to make a plain link.
* @inforef::                   How to refer to an Info-only file.
* @url::                       How to refer to a uniform resource locator.
* @cite::                      How to refer to books not in the Info system.
* PDF Colors::                 Colorizing URLs and other links in PDF output.


File: texinfo.info,  Node: Cross Reference Commands,  Next: Cross Reference Parts,  Up: Cross References

5.1 Different Cross-reference Commands
======================================

There are three different cross-reference commands:

‘@xref’
     Used to start a sentence with an Info cross-reference saying ‘*Note*
     NAME: NODE.’ or with 'See ...' in other output formats.

‘@ref’
     Used within or, more often, at the end of a sentence; produces an
     Info cross-reference saying ‘*note* NAME: NODE.’, and just the
     reference in other output formats, without the preceding 'See'.

‘@pxref’
     Used within parentheses, at the end of a sentence, or otherwise
     before punctuation, to make a reference.  Its output starts with a
     lowercase ‘*note’ in Info, and with a lowercase 'see' in the other
     output formats.  (‘p’ is for 'parenthesis'.)

   Additionally, there are commands to produce references to documents
outside the Texinfo system.  The ‘@cite’ command is used to make
references to books and manuals.  ‘@url’ produces a URL, for example a
reference to a page on the World Wide Web.


File: texinfo.info,  Node: Cross Reference Parts,  Next: One Argument,  Prev: Cross Reference Commands,  Up: Cross References

5.2 Parts of a Cross-reference
==============================

A cross-reference command requires only one argument, which is the name
of the node to which it refers.  A cross-reference command may contain
up to four additional arguments.  The template for a full five argument
cross-reference looks like this:

     @xref{NODE-NAME, ONLINE-LABEL, PRINTED-LABEL,
     MANUAL-NAME, PRINTED-MANUAL-TITLE}

   The five possible arguments for a cross-reference are:

  1. The node or anchor name.  This is the location to which the
     cross-reference takes you.  In a printed document, the location of
     the node provides the page reference only for references within the
     same document.  Use ‘@node’ to define the node (*note* Writing a
     Node::), ‘@anchor’ (*note* @anchor::), or ‘@float’ (*note* @float::)
     with a label.  This argument is required (except for reference to
     whole manuals).

     Write a node name in a cross-reference in exactly the same way as
     in the ‘@node’ line, including the same capitalization; otherwise,
     the processors may not find the reference.

  2. A label for online output.  It is usually omitted; then the topic
     description (third argument) is used if it was specified; if that
     was omitted as well, the node name is used.

  3. A label for printed output.  Often, this is the title or topic of
     the section.  This is used as the name of the reference in the
     printed manual.  If omitted, the node name is used.

  4. The name of the manual to which the reference refers, if it is
     outside the current manual, in a different Texinfo file.

  5. The title of the printed manual to which the reference refers, from
     a different Texinfo file.

   Whitespace before and after the commas separating these arguments is
ignored.  To include a comma in one of the arguments, use ‘@comma{}’
(*note* Inserting a Comma::).

   Cross-references with one, two, three, four, and five arguments are
described separately in following sections.

   When processing with TeX, a comma is automatically inserted after the
page number for cross-references to within the same manual, unless the
closing brace of the argument is followed by non-whitespace (such as a
comma or period).  This gives you the choice of whether to have a comma
there in other output formats.  For example,

     @xref{Another Section} for more info

with TeX produces 'See Another Section, page PPP, for more info', and in
the Info output produces ‘*Note* Another Section:: for more info’.

   If an unwanted comma is added, follow the argument with a command
such as ‘@:’.  For example, ‘@xref{Hurricanes}@: --- for the details’
produces

     See Hurricanes, page PPP -- for the details

instead of 'See Hurricanes, page PPP, -- for the details'.

   ‘texi2any’ warns and protect names when the text of a cross-reference
(and node names and menu items) contains a problematic construct that
could interfere with its parsing in Info.  *Note* Info Node Names
Constraints::.


File: texinfo.info,  Node: One Argument,  Next: Two Arguments,  Prev: Cross Reference Parts,  Up: Cross References

5.3 ‘@xref’ with One Argument
=============================

The simplest form of ‘@xref’ takes one argument, the name of another
node in the same Texinfo file.

For example,

     @xref{Tropical Storms}.

produces

     *Note Tropical Storms::.

in Info and

     See Section 3.1 [Tropical Storms], page 24.

in a printed manual.


File: texinfo.info,  Node: Two Arguments,  Next: Three Arguments,  Prev: One Argument,  Up: Cross References

5.4 ‘@xref’ with Two Arguments
==============================

With two arguments, the second is used as a label for the online output.

The template is like this:

     @xref{NODE-NAME, ONLINE-LABEL}.

For example,

     @xref{Electrical Effects, Lightning}.

produces:

     *Note* Lightning: Electrical Effects.

in Info and

     See Section 5.2 [Electrical Effects], page 57.

in a printed manual, where the node name is printed.

   The second argument to cross-references shares constraints with node
names.  The potentially problematic character in this context is the
colon.  *Note* Info Node Names Constraints::.


File: texinfo.info,  Node: Three Arguments,  Next: Four and Five Arguments,  Prev: Two Arguments,  Up: Cross References

5.5 ‘@xref’ with Three Arguments
================================

A third argument replaces the node name in the printed output.  The
third argument should be the name of the section in the printed output,
or else state the topic discussed by that section.

The template is like this:

     @xref{NODE-NAME, ONLINE-LABEL, PRINTED-LABEL}.

For example,

     @xref{Electrical Effects, Lightning, Thunder and Lightning},
     for details.

produces

     *Note* Lightning: Electrical Effects, for details.

in Info and

     See Section 5.2 [Thunder and Lightning], page 57, for details.

in a printed manual.

   If a third argument is given and the second one is empty, then the
third argument serves for both.  (Note how two commas, side by side,
mark the empty second argument.)

     @xref{Electrical Effects, , Thunder and Lightning},
     for details.

produces

     *Note Thunder and Lightning: Electrical Effects, for details.

in Info and

     See Section 5.2 [Thunder and Lightning], page 57, for details.

in a printed manual.

   The third argument to cross-references shares constraints with node
names.  The potentially problematic character in this context is the
colon.  *Note* Info Node Names Constraints::.

   As a practical matter, it is often best to write cross-references
with just the first argument if the node name and the section title are
the same (or nearly so), and with the first and third arguments only if
the node name and title are different.

   Texinfo offers a setting to use the section title instead of node
names by default in cross-references (an explicitly specified third
argument still takes precedence):

     @xrefautomaticsectiontitle on

   Typically this line would be given near the beginning of the document
and used for the whole manual.  But you can turn it off if you want
(‘@xrefautomaticsectiontitle off’), for example, if you're including
some other sub-document that doesn't have suitable section names.  This
setting also applies to node headers in HTML, if
‘@xrefautomaticsectiontitle’ is on, the sections names are used in node
headers instead of the node names when possible.


File: texinfo.info,  Node: Four and Five Arguments,  Next: Referring to a Manual as a Whole,  Prev: Three Arguments,  Up: Cross References

5.6 ‘@xref’ with Four and Five Arguments
========================================

In a cross-reference, a fourth argument specifies the name of another
manual, different from the file in which the reference appears, and a
fifth argument specifies its title as a printed manual.

The full template is:

     @xref{NODE-NAME, ONLINE-LABEL, PRINTED-LABEL,
     MANUAL-NAME, PRINTED-MANUAL-TITLE}.

For example,

     @xref{Electrical Effects, Lightning, Thunder and Lightning,
     weather, An Introduction to Meteorology}.

produces this output in Info:

     *Note Lightning: (weather)Electrical Effects.

As you can see, the name of the manual is enclosed in parentheses and
precedes the name of the node.  In HTML, the manual name and the node
name are used to construct the hyperlink URL (*note* HTML Xref::), while
the link text is based on the label.

In a printed manual, the reference looks like this:

     See section "Thunder and Lightning" in ‘An Introduction to
     Meteorology’.

The title of the printed manual is typeset like ‘@cite’; and the
reference lacks a page number since the page a reference refers when
that reference is to another manual cannot be known.

   Next case: often, you will leave out the second argument when you use
the long version of ‘@xref’.  In this case, the third argument, the
topic description, will be used as the cross-reference name in online
formats.  For example,

     @xref{Electrical Effects, , Thunder and Lightning,
     weather, An Introduction to Meteorology}.

produces

     *Note Thunder and Lightning: (weather)Electrical Effects.

in Info and

     See section "Thunder and Lightning" in ‘An Introduction to
     Meteorology’.

in a printed manual.

   Next case: If the node name and the section title are the same in the
other manual, you may also leave out the section title.  In this case,
the node name is used in both instances.  For example,

     @xref{Electrical Effects,,,
     weather, An Introduction to Meteorology}.

produces

     *Note (weather)Electrical Effects::.

in Info and

     See section "Electrical Effects" in ‘An Introduction to
     Meteorology’.

in a printed manual.

   In general, there is no reason to have a manual name argument without
a printed manual argument, unless no printed manual is generated.  You
may also want to refer to another manual file that is within a single
printed manual--when multiple Texinfo files are incorporated into the
same printed manual but can create separate output files in other output
formats.  In this case, you need to specify only the fourth argument,
and not the fifth.  If the printed manual title argument is missing, the
manual name will be used instead in printed output.

   A printed manual title argument without an online manual argument is
of little use unless only a printed manual is generated from the Texinfo
source.  The result in online formats depends on the format, and can be,
for example, an empty manual name or a reference to the printed manual
formatted in a similar way to the printed output.

   Finally, it's also allowed to leave out all the arguments _except_
the fourth and fifth, to refer to another manual as a whole.  See the
next section.


File: texinfo.info,  Node: Referring to a Manual as a Whole,  Next: @xref,  Prev: Four and Five Arguments,  Up: Cross References

5.7 Referring to a Manual as a Whole
====================================

Ordinarily, you must always name a node in a cross-reference.  However,
it's not unusual to want to refer to another manual as a whole, rather
than a particular section within it.  In this case, giving any section
name is an unnecessary distraction.

   So, with cross-references to other manuals (*note* Four and Five
Arguments::), if the first argument is either ‘Top’ (capitalized just
that way) or omitted entirely, and the third argument is omitted, the
printed output includes no node or section name.  (The Info output
includes ‘Top’ if it was given.)  For example,

     @xref{Top,,, make, The GNU Make Manual}.

produces

     *Note (make)Top::.

and

     See ‘The GNU Make Manual’.

Info readers will go to the Top node of the manual whether or not the
'Top' node is explicitly specified.

   It's also possible (and is historical practice) to refer to a whole
manual by specifying the 'Top' node and an appropriate entry for the
third argument to the ‘@xref’ command.  Using this idiom, to make a
cross-reference to ‘The GNU Make Manual’, you would write:

     @xref{Top,, Overview, make, The GNU Make Manual}.

which produces

     *Note Overview: (make)Top.

in Info and

     See section "Overview" in ‘The GNU Make Manual’.

in a printed manual.

   In this example, ‘Top’ is the name of the first node, and ‘Overview’
is the name of the first section of the manual.  There is no widely-used
convention for naming the first section in a printed manual, this is
just what the Make manual happens to use.  This arbitrariness of the
first name is a principal reason why omitting the third argument in
whole-manual cross-references is preferable.


File: texinfo.info,  Node: @xref,  Next: @ref,  Prev: Referring to a Manual as a Whole,  Up: Cross References

5.8 ‘@xref’
===========

The ‘@xref’ command generates a cross-reference for the beginning of a
sentence.  Examples of using ‘@xref’ are in previous sections.


File: texinfo.info,  Node: @ref,  Next: @pxref,  Prev: @xref,  Up: Cross References

5.9 ‘@ref’
==========

‘@ref’ is nearly the same as ‘@xref’ except that it does not generate a
'See' in the output, just the reference itself.  This makes it useful as
the last part of a sentence.

For example,

     For more information, @pxref{This}, and @ref{That}.

produces in Info:

     For more information, *note* This::, and *note* That::.

and in printed output:

     For more information, see Section 1.1 [This], page 1, and Section
     1.2 [That], page 2.

   The ‘@ref’ command can tempt writers to express themselves in a
manner that is suitable for a printed manual but looks awkward in the
Info format.  Bear in mind that your audience could be using both the
printed and other output formats such as Info.  For example:

     Sea surges are described in @ref{Hurricanes}.

looks ok in the printed output:

     Sea surges are described in Section 6.7 [Hurricanes], page 72.

but is awkward to read in Info, "note" being a verb:

     Sea surges are described in *note* Hurricanes::.


File: texinfo.info,  Node: @pxref,  Next: @anchor,  Prev: @ref,  Up: Cross References

5.10 ‘@pxref’
=============

The parenthetical reference command, ‘@pxref’, is nearly the same as
‘@xref’, but it is best used within parentheses.  The command differs
from ‘@xref’ in that the reference is typeset with a lowercase 'see'
rather than an uppercase 'See'.  In Info, ‘*note’ is output.

With one argument, a parenthetical cross-reference looks like this:

     ... storms cause flooding (@pxref{Hurricanes}) ...

which produces

     ... storms cause flooding (*note* Hurricanes::) ...

in Info and

     ... storms cause flooding (see Section 6.7 [Hurricanes], page 72)
     ...

in a printed manual.

   In past versions of Texinfo, it was not allowed to write punctuation
after a ‘@pxref’, so it could be used _only_ before a right parenthesis.
This is no longer the case.  The effect of ‘@pxref{NODE-NAME}’ is
similar to that of ‘see @ref{NODE-NAME}’.  However, in many
circumstances the latter is preferable, as this makes it clear in the
Info output that the word "see" should be present.


File: texinfo.info,  Node: @anchor,  Next: @link,  Prev: @pxref,  Up: Cross References

5.11 ‘@anchor’: Defining Arbitrary Cross-reference Targets
==========================================================

An “anchor” is a position in your document, labelled so that
cross-references can refer to it, just as they can to nodes.  You create
an anchor with the ‘@anchor’ command, and give the label as a normal
brace-delimited argument.  For example:

     This marks the @anchor{x-spot}spot.
     ...
     @xref{x-spot,,the spot}.

produces:

     This marks the spot.
     ...
     See [the spot], page 1.

   As you can see, the ‘@anchor’ command itself produces no output.
This example defines an anchor 'x-spot' just before the word 'spot'.
You can refer to it later with an ‘@xref’ or other cross reference
command, as shown (*note* Cross References::).

   It is best to put ‘@anchor’ commands just before the position you
wish to refer to; that way, the reader's eye is led on to the correct
text when they jump to the anchor.  You can put the ‘@anchor’ command on
a line by itself if that helps readability of the source.  Whitespace
(including newlines) is ignored after ‘@anchor’.

   Anchor names, node names and float labels may not conflict.  Anchors,
nodes and float labels are given similar treatment in some ways; for
example, the ‘goto-node’ command takes either an anchor name or a node
name as an argument.  (*Note* (info)Go to node::.).  Anchors names and
float labels could also appear in menus (*note* Menus::) and node
direction pointers (*note* Writing a Node::), although this is not
recommended.

   Anchor names share the same constraints as nodes on the characters
that can be included (*note* Info Node Names Constraints::).

   Because of this duality, when you delete or rename a node, it is
usually a good idea to define an ‘@anchor’ with the old name.  That way,
any links to the old node, whether from other Texinfo manuals or general
web pages, keep working.


File: texinfo.info,  Node: @link,  Next: @inforef,  Prev: @anchor,  Up: Cross References

5.12 ‘@link’: Plain, unadorned hyperlink
========================================

‘@link’ produces a plain hyperlink in output formats that support it,
including in HTML, DocBook, LaTeX and online PDF.  The template is:

     @link{NODE-NAME, LABEL, MANUAL-NAME}

   NODE-NAME is the name of the target node or anchor.  Either or both
of LABEL and MANUAL-NAME can be omitted.  LABEL, if given, is the text
to use for the link.  MANUAL-NAME is the name of the external manual
that the target appears within; if not given, the reference is to the
current manual.

   ‘@link’ has similar output to ‘@ref’, except that it does produce any
extra text around the link label in Info or printed output that would
mark it as a cross-reference.

   Be careful about using ‘@link’ to produce links that are necessary
for a user to move around a manual, as these links will do nothing in
these output formats.  ‘@link’ is best used to add convenience links
that are nonetheless not essential for a reader to understand the text
of the manual.  For example, you might use ‘@link’ in a code sample to
reference documentation of a symbol in a programming library.


File: texinfo.info,  Node: @inforef,  Next: @url,  Prev: @link,  Up: Cross References

5.13 ‘@inforef’: Cross-references to Info-only Material
=======================================================

‘@inforef’ is used for making cross-references to Info documents--even
from a printed manual.  This was originally used for Info files that
were not generated from any Texinfo source.  The command is now obsolete
and should not be used.  In addition to having little use, similar
output can be obtained with ‘@xref’, ‘@ref’ or ‘@pxref’ with the Info
file name as the fourth argument and no fifth argument.

   The command takes either two or three arguments, in the following
order:

  1. The node name.

  2. The cross-reference name (optional).

  3. The Info file name.

The template is:

     @inforef{NODE-NAME, CROSS-REFERENCE-NAME, INFO-FILE-NAME}


File: texinfo.info,  Node: @url,  Next: @cite,  Prev: @inforef,  Up: Cross References

5.14 ‘@url’, ‘@uref{URL[, TEXT][, REPLACEMENT]}’
================================================

‘@url’ produces a reference to a uniform resource locator (URL). It
takes one mandatory argument, the URL, and two optional arguments which
control the text that is displayed.  In HTML and PDF output, ‘@url’
produces a link you can follow.  (To merely indicate a URL without
creating a link people can follow, use ‘@indicateurl’, *note*
@indicateurl::.)

   ‘@uref’ is a synonym for ‘@url’.  (Originally, ‘@url’ had the meaning
of ‘@indicateurl’ and ‘@uref’ was required to produce a working link,
but in practice ‘@url’ was almost always misused.  So we've changed the
meaning.)

   The second argument, if specified, is the text to display (the
default is the URL itself); in output formats other than HTML, the URL
is output in addition to this text.

   The third argument, if specified, is the text to display, but in this
case the URL is not output in any format.  This is useful when the text
is already sufficiently referential, as in a man page.  Also, if the
third argument is given, the second argument is ignored.

* Menu:

* @url Examples::              Examples of using all the forms of ‘@url’.
* URL Line Breaking::          How lines are broken within ‘@url’ text.
* @url PDF Output Format::     A special option to hide links in PDF output.


File: texinfo.info,  Node: @url Examples,  Next: URL Line Breaking,  Up: @url

5.14.1 ‘@url’ Examples
----------------------

First, here is an example of the simplest form of ‘@url’, with just one
argument.  The given URL is both the target and the visible text of the
link:

     The official GNU ftp site is @url{http://ftp.gnu.org/gnu}.

produces:
     The official GNU ftp site is <http://ftp.gnu.org/gnu>.

Two-argument form of ‘@url’
...........................

Here is an example of the two-argument form:
     The official @url{http://ftp.gnu.org/gnu, GNU ftp site}
     holds programs and texts.

which produces:
     The official GNU ftp site (http://ftp.gnu.org/gnu)
     holds programs and texts.

The HTML output is this:
     The official <a href="http://ftp.gnu.org/gnu">GNU ftp site</a>
     holds programs and texts.

In other formats, the output is like this:
     The official GNU ftp site (http://ftp.gnu.org/gnu)
     holds programs and texts.

Three-argument form of ‘@url’
.............................

Finally, an example of the three-argument form:
     The @url{/man.cgi/1/ls,,ls} program ...

which, except for HTML, produces:
     The ls program ...

but with HTML:
     The <a href="/man.cgi/1/ls">ls</a> program ...

   By the way, some people prefer to display URLs in the unambiguous
format:

     <URL:http://HOST/PATH>

You can use this form in the input file if you wish.  We feel it's not
necessary to include the ‘<URL:’ and ‘>’ in the output, since to be
useful any software that tries to detect URLs in text already has to
detect them without the ‘<URL:’.


File: texinfo.info,  Node: URL Line Breaking,  Next: @url PDF Output Format,  Prev: @url Examples,  Up: @url

5.14.2 URL Line Breaking
------------------------

TeX allows line breaking within URLs at only a few characters (which are
special in URLs): ‘&’, ‘.’, ‘#’, ‘?’, and ‘/’ (but not between two ‘/’
characters).  A tiny amount of stretchable space is also inserted around
these characters to help with line breaking.

   For HTML output, modern browsers will also do line breaking within
displayed URLs.  If you need to allow breaks at other characters you can
insert ‘@/’ as needed (*note* Line Breaks::).

   By default, in TeX any such breaks at special characters will occur
after the character.  Some people prefer such breaks to happen before
the special character.  This can be controlled with the
‘@urefbreakstyle’ command (this command has effect only in TeX):

     @urefbreakstyle HOW

where the argument HOW is one of these words:

‘after’
     (the default) Potentially break after the special characters.
‘before’
     Potentially break before the special characters.
‘none’
     Do not consider breaking at the special characters at all; any
     potential breaks must be manually inserted.


File: texinfo.info,  Node: @url PDF Output Format,  Prev: URL Line Breaking,  Up: @url

5.14.3 ‘@url’ PDF Output Format
-------------------------------

If the ultimate purpose of a PDF is only to be viewed online, perhaps
similar to HTML in some inchoate way, you may not want the URLs to be
included in the visible text (just as URLs are not visible to readers of
web pages).  Texinfo provides a PDF-specific option for this, which must
be used inside ‘@tex’:

     @tex
     \global\urefurlonlylinktrue
     @end tex

   The result is that ‘@url{http://www.gnu.org, GNU}’ has the visible
output of just 'GNU', with a link target of <http://www.gnu.org>.
Ordinarily, the visible output would include both the label and the url:
'GNU (<http://www.gnu.org>)'.

   This option only has effect when the PDF output is produced with the
pdfTeX program, not with other ways of getting from Texinfo to PDF
(e.g., TeX to DVI to PDF).  Consequently, it is ok to specify this
option unconditionally within ‘@tex’, as shown above.  It is ignored
when DVI is being produced.


File: texinfo.info,  Node: @cite,  Next: PDF Colors,  Prev: @url,  Up: Cross References

5.15 ‘@cite’{REFERENCE}
=======================

Use the ‘@cite’ command for the name of a book that lacks a companion
Info file.  For example, we could refer to ‘A Book’.  The command
selects a slanted font in the printed manual, and generates quotation
marks in the Info file.

   If a book is written in Texinfo, it is better to use a
cross-reference command since a reader can easily follow such a
reference in Info.  *Note* @xref::.


File: texinfo.info,  Node: PDF Colors,  Prev: @cite,  Up: Cross References

5.16 PDF Colors
===============

By default, URLs and cross-reference links are printed in black in PDF
output.  Very occasionally, however, you may want to highlight such
"live" links with a different color, as is commonly done on web pages.
Texinfo provides a PDF-specific option for specifying these colors,
which must be used inside ‘@tex’:

     @tex
     \global\def\linkcolor{1 0 0}  % red
     \global\def\urlcolor{0 1 0}   % green
     @end tex

   ‘\urlcolor’ changes the color of ‘@url’ output (both the actual URL
and any textual label), while ‘\linkcolor’ changes the color for
cross-references to nodes, etc.  They are independent.

   The three given values must be numbers between 0 and 1, specifying
the amount of red, green, and blue respectively.

   These definitions only have an effect when the PDF output is produced
with the pdfTeX program, not with other ways of getting from Texinfo to
PDF (e.g., TeX to DVI to PDF).  Consequently, it is ok to specify this
option unconditionally within ‘@tex’, as shown above.  It is ignored
when DVI is being produced.

   We do not recommend colorizing just for fun; unless you have a
specific reason to use colors, best to skip it.


File: texinfo.info,  Node: Marking Text,  Next: Quotations and Examples,  Prev: Cross References,  Up: Top

# /6 Marking Text, Words and Phrases
*********************************

In Texinfo, you can mark words and phrases in a variety of ways.  The
Texinfo processors use this information to determine how to highlight
the text.  You can specify, for example, whether a word or phrase is a
defining occurrence, a metasyntactic variable, or a symbol used in a
program.  Also, you can emphasize text, in several different ways.

* Menu:

* Indicating::                 How to indicate definitions, files, etc.
* Emphasis::                   How to emphasize text.


File: texinfo.info,  Node: Indicating,  Next: Emphasis,  Up: Marking Text

6.1 Indicating Definitions, Commands, etc.
==========================================

Texinfo has commands for indicating just what kind of object a piece of
text refers to.  For example, email addresses are marked by ‘@email’;
that way, the result can be a live link to send email when the output
format supports it.  If the email address was simply marked as "print in
a typewriter font", that would not be possible.

* Menu:

* Useful Highlighting::        Highlighting provides useful information.
* @code::                      Indicating program code.
* @kbd::                       Showing keyboard input.
* @key::                       Specifying keys.
* @samp::                      Indicating a literal sequence of characters.
* @verb::                      Indicating a verbatim sequence of characters.
* @var::                       Indicating metasyntactic variables.
* @env::                       Indicating environment variables.
* @file::                      Indicating file names.
* @command::                   Indicating command names.
* @option::                    Indicating option names.
* @dfn::                       Specifying definitions.
* @abbr::                      Indicating abbreviations.
* @acronym::                   Indicating acronyms.
* @indicateurl::               Indicating an example URL.
* @email::                     Indicating an electronic mail address.


File: texinfo.info,  Node: Useful Highlighting,  Next: @code,  Up: Indicating

6.1.1 Highlighting Commands are Useful
--------------------------------------

The commands serve a variety of purposes:

‘@code{SAMPLE-CODE}’
     Indicate text that is a literal example of a piece of a program.
     *Note* @code::.

‘@kbd{KEYBOARD-CHARACTERS}’
     Indicate keyboard input.  *Note* @kbd::.

‘@key{KEY-NAME}’
     Indicate the conventional name for a key on a keyboard.  *Note*
     @key::.

‘@samp{TEXT}’
     Indicate text that is a literal example of a sequence of
     characters.  *Note* @samp::.

‘@verb{TEXT}’
     Write a verbatim sequence of characters.  *Note* @verb::.

‘@var{METASYNTACTIC-VARIABLE}’
     Indicate a metasyntactic variable.  *Note* @var::.

‘@env{ENVIRONMENT-VARIABLE}’
     Indicate an environment variable.  *Note* @env::.

‘@file{FILE-NAME}’
     Indicate the name of a file.  *Note* @file::.

‘@command{COMMAND-NAME}’
     Indicate the name of a command.  *Note* @command::.

‘@option{OPTION}’
     Indicate a command-line option.  *Note* @option::.

‘@dfn{TERM}’
     Indicate the introductory or defining use of a term.  *Note* @dfn::.

‘@cite{REFERENCE}’
     Indicate the name of a book.  *Note* @cite::.

‘@abbr{ABBREVIATION}’
     Indicate an abbreviation, such as 'Comput.'.

‘@acronym{ACRONYM}’
     Indicate an acronym.  *Note* @acronym::.

‘@indicateurl{UNIFORM-RESOURCE-LOCATOR}’
     Indicate an example (that is, nonfunctional) uniform resource
     locator.  *Note* @indicateurl::.  (Use ‘@url’ (*note* @url::) for
     live URLs.)

‘@email{EMAIL-ADDRESS[, DISPLAYED-TEXT]}’
     Indicate an electronic mail address.  *Note* @email::.


File: texinfo.info,  Node: @code,  Next: @kbd,  Prev: Useful Highlighting,  Up: Indicating

6.1.2 ‘@code’{SAMPLE-CODE}
--------------------------

Use the ‘@code’ command to indicate text that is a piece of a program
and which consists of entire syntactic tokens.  Enclose the text in
braces.

   Thus, you should use ‘@code’ for an expression in a program, for the
name of a variable or function used in a program, or for a keyword in a
programming language.

   Use ‘@code’ for command names in languages that resemble programming
languages, such as Texinfo.  For example, ‘@code’ and ‘@samp’ are
produced by writing ‘@code{@@code}’ and ‘@code{@@samp}’ in the Texinfo
source, respectively.

   It is incorrect to alter the case of a word inside a ‘@code’ command
when it appears at the beginning of a sentence.  Most computer languages
are case sensitive.  In C, for example, ‘Printf’ is different from the
identifier ‘printf’, and most likely is a misspelling of it.  Even in
languages which are not case sensitive, it is confusing to a human
reader to see identifiers spelled in different ways.  Pick one spelling
and always use that.  If you do not want to start a sentence with a
command name written all in lowercase, you should rearrange the
sentence.

   The ‘@code’ argument is typeset in a typewriter (monospace) font.
where the output format allows this.  For example,

     The function returns @code{nil}.

produces this:

     The function returns ‘nil’.

   Here are some cases for which it is preferable _not_ to use ‘@code’:

   • For shell command names, such as ‘ls’ (use ‘@command’).

   • For environment variables, such as ‘TEXINPUTS’ (use ‘@env’).

   • For shell options, such as ‘-c’, when such options stand alone (use
     ‘@option’).

   • An entire shell command often looks better if written using ‘@samp’
     rather than ‘@code’.  In this case, the rule is to choose the more
     pleasing format.

   • For a string of characters shorter than a syntactic token.  For
     example, if you are writing about ‘goto-ch’, which is just a part
     of the name for the ‘goto-char’ Emacs Lisp function, you should use
     ‘@samp’.

   • In general, when writing about the characters used in a token; for
     example, do not use ‘@code’ when you are explaining what letters or
     printable symbols can be used in the names of functions.  (Use
     ‘@samp’.)  Also, you should not use ‘@code’ to mark text that is
     considered input to programs unless the input is written in a
     language that is like a programming language.  For example, you
     should not use ‘@code’ for the keystroke commands of GNU Emacs (use
     ‘@kbd’ instead) although you may use ‘@code’ for the names of the
     Emacs Lisp functions that the keystroke commands invoke.

   By default, TeX will consider breaking lines at ‘-’ and ‘_’
characters within ‘@code’ and related commands.  This can be controlled
with ‘@allowcodebreaks’ (*note* @allowcodebreaks::).  In the HTML output
breaking lines is up to the browser's behavior.  For Info, it seems
better never to make such breaks.

   For Info and plaintext, quotation characters are usually output
around the output of the ‘@code’ command and related commands (e.g.,
‘@kbd’, ‘@command’) except in typewriter-like contexts such as the
‘@example’ environment (*note* @example::) and ‘@code’ itself, etc.  To
control which quoting characters are inserted by ‘texi2any’ in the
output of ‘@code’, etc., see the ‘OPEN_QUOTE_SYMBOL’ and
‘CLOSE_QUOTE_SYMBOL’ customization variables (*note* Other Customization
Variables::).


File: texinfo.info,  Node: @kbd,  Next: @key,  Prev: @code,  Up: Indicating

6.1.3 ‘@kbd’{KEYBOARD-CHARACTERS}
---------------------------------

Use the ‘@kbd’ command for characters of input to be typed by users.
For example, to refer to the characters ‘M-a’, write:

     @kbd{M-a}

and to refer to the characters ‘M-x shell’, write:

     @kbd{M-x shell}

   By default, the ‘@kbd’ command produces a different font (slanted
typewriter instead of normal typewriter, where the output format
allows), so users can distinguish the characters that they are supposed
to type from those that the computer outputs.

   Since the usage of ‘@kbd’ varies from manual to manual, you can
control the font switching with the ‘@kbdinputstyle’ command.  This
command has no effect on Info output.  Write this command at the
beginning of a line with a single word as an argument, one of the
following:

‘code’
     Always use the same font for ‘@kbd’ as ‘@code’.
‘example’
     Use the distinguishing font for ‘@kbd’ only in ‘@example’ and
     similar environments.
‘distinct’
     (the default) Always use the distinguishing font for ‘@kbd’.

   You can embed another @-command inside the braces of a ‘@kbd’
command.  Here, for example, is the way to describe a command that would
be described more verbosely as "press the ‘r’ key and then press the
<RETURN> key":

     @kbd{r @key{RET}}

This produces: ‘r <RET>’.  (The present manual uses the default for
‘@kbdinputstyle’.)

   You also use the ‘@kbd’ command if you are spelling out the letters
you type; for example:

     To give the @code{logout} command,
     type the characters @kbd{l o g o u t @key{RET}}.

This produces:

     To give the ‘logout’ command, type the characters ‘l o g o u t
     <RET>’.

   (Also, this example shows that you can add spaces for clarity.  If
you explicitly want to mention a space character as one of the
characters of input, write ‘@key{SPC}’ for it.)


File: texinfo.info,  Node: @key,  Next: @samp,  Prev: @kbd,  Up: Indicating

6.1.4 ‘@key’{KEY-NAME}
----------------------

Use the ‘@key’ command for the conventional name for a key on a
keyboard, as in:

     @key{RET}

   You can use the ‘@key’ command within the argument of an ‘@kbd’
command when the sequence of characters to be typed includes one or more
keys that are described by name.

   For example, to produce ‘C-x <ESC>’ and ‘M-<TAB>’ you would type:

     @kbd{C-x @key{ESC}}
     @kbd{M-@key{TAB}}

   Here is a list of the recommended names for keys:

     SPC
          Space
     RET
          Return
     LFD
          Linefeed (however, since most keyboards nowadays do not have a
          Linefeed key, it might be better to call this character ‘C-j’)
     TAB
          Tab
     BS
          Backspace
     ESC
          Escape
     DELETE
          Delete
     SHIFT
          Shift
     CTRL
          Control
     META
          Meta

   There are subtleties to handling words like 'meta' or 'ctrl' that are
names of modifier keys.  When mentioning a character in which the
modifier key is used, such as ‘Meta-a’, use the ‘@kbd’ command alone; do
not use the ‘@key’ command; but when you are referring to the modifier
key in isolation, use the ‘@key’ command.  For example, write
‘@kbd{Meta-a}’ to produce ‘Meta-a’ and ‘@key{META}’ to produce <META>.


File: texinfo.info,  Node: @samp,  Next: @verb,  Prev: @key,  Up: Indicating

6.1.5 ‘@samp’{TEXT}
-------------------

Use the ‘@samp’ command to indicate text that is a literal example or
'sample' of a sequence of characters in a file, string, pattern, etc.
Enclose the text in braces.  The argument appears within single
quotation marks; in addition, it is printed in a fixed-width font.

     To match @samp{foo} at the end of the line,
     use the regexp @samp{foo$}.

produces

     To match ‘foo’ at the end of the line, use the regexp ‘foo$’.

   Any time you are referring to single characters, you should use
‘@samp’ unless ‘@kbd’ or ‘@key’ is more appropriate.  Also, you may use
‘@samp’ for entire statements in C and for entire shell commands--in
this case, ‘@samp’ often looks better than ‘@code’.  Basically, ‘@samp’
is a catchall for whatever is not covered by ‘@code’, ‘@kbd’, ‘@key’,
‘@command’, etc.

   Only include punctuation marks within braces if they are part of the
string you are specifying.  Write punctuation marks outside the braces
if those punctuation marks are part of the English text that surrounds
the string.  In the following sentence, for example, the commas and
period are outside of the braces:

     In English, the vowels are @samp{a}, @samp{e},
     @samp{i}, @samp{o}, @samp{u}, and sometimes
     @samp{y}.

This produces:

     In English, the vowels are ‘a’, ‘e’, ‘i’, ‘o’, ‘u’, and sometimes
     ‘y’.


File: texinfo.info,  Node: @verb,  Next: @var,  Prev: @samp,  Up: Indicating

6.1.6 ‘@verb’{CHARTEXTCHAR}
---------------------------

Use the ‘@verb’ command to print a verbatim sequence of characters.

   Like LaTeX's ‘\verb’ command, the verbatim text can be quoted using
any unique delimiter character.  Enclose the verbatim text, including
the delimiters, in braces.  Text is printed in a fixed-width font:

     How many @verb{|@|}-escapes does one need to print this
     @verb{.@a @b.@c.} string or @verb{+@'e?`{}!`\+} this?

produces

     How many @-escapes does one need to print this
     @a @b.@c string or @'e?`{}!`\ this?

   This is in contrast to ‘@samp’ (see the previous section), ‘@code’,
and similar commands; in those cases, the argument is normal Texinfo
text, where the three characters ‘@{}’ are special, as usual.  With
‘@verb’, nothing is special except the delimiter character you choose.

   The delimiter character itself may appear inside the verbatim text,
as shown above.  As another example, ‘@verb{...}’ prints a single
(fixed-width) period.

   It is not reliable to use ‘@verb’ inside other Texinfo constructs.
In particular, it does not work to use ‘@verb’ in anything related to
cross-referencing, such as section titles or figure captions.


File: texinfo.info,  Node: @var,  Next: @env,  Prev: @verb,  Up: Indicating

6.1.7 ‘@var’{METASYNTACTIC-VARIABLE}
------------------------------------

Use the ‘@var’ command to indicate metasyntactic variables.  A
“metasyntactic variable” is something that stands for another piece of
text.  For example, you should use a metasyntactic variable in the
documentation of a function to describe the arguments that are passed to
that function.

   Do not use ‘@var’ for the names of normal variables in computer
programs.  These are specific names, so ‘@code’ is correct for them.
For example, the Emacs Lisp variable ‘texinfo-tex-command’ is not a
metasyntactic variable; it is properly formatted using ‘@code’.

   Do not use ‘@var’ for environment variables either; ‘@env’ is correct
for them (see the next section).

   The effect of ‘@var’ in the Info file is to change the case of the
argument to all uppercase.  In the printed manual, the argument is
output in slanted type.  (1)

   For example,

     To delete file @var{filename},
     type @samp{rm @var{filename}}.

produces

     To delete file FILENAME, type ‘rm FILENAME’.

(Note that ‘@var’ may appear inside ‘@code’, ‘@samp’, ‘@file’, etc.)

   Write a metasyntactic variable all in lowercase without spaces, and
use hyphens to make it more readable.  Thus, the Texinfo source for the
illustration of how to begin a Texinfo manual looks like this:

     \input texinfo
     @@settitle @var{name-of-manual}

This produces:

     \input texinfo
     @settitle NAME-OF-MANUAL

   In some documentation styles, metasyntactic variables are shown with
angle brackets, for example:

     ..., type rm <filename>

However, that is not the style that Texinfo uses.

   ---------- Footnotes ----------

   (1) In TeX output, ‘@var’ currently uses a slanted typewriter font in
code contexts such as ‘@code’ or ‘@example’.  We plan to change this in
the next release to use a variable-width, slanted roman font in all
contexts.  To avoid this change, set the ‘txicodevaristt’ flag using
‘@set’; specify ‘@clear txicodevaristt’ to make this change now (*note*
@set @value::).  Note that this flag does nothing in LaTeX output.


File: texinfo.info,  Node: @env,  Next: @file,  Prev: @var,  Up: Indicating

6.1.8 ‘@env’{ENVIRONMENT-VARIABLE}
----------------------------------

Use the ‘@env’ command to indicate environment variables, as used by
many operating systems, including GNU.  Do not use it for
_meta_syntactic variables; use ‘@var’ for those (see the previous
section).

   ‘@env’ is equivalent to ‘@code’ in its effects.  For example:

     The @env{PATH} environment variable ...
produces
     The ‘PATH’ environment variable ...


File: texinfo.info,  Node: @file,  Next: @command,  Prev: @env,  Up: Indicating

6.1.9 ‘@file’{FILE-NAME}
------------------------

Use the ‘@file’ command to indicate text that is the name of a file,
buffer, or directory, or is the name of a node in Info.  You can also
use the command for file name suffixes.  Do not use ‘@file’ for symbols
in a programming language; use ‘@code’.

   ‘@file’ is equivalent to ‘code’ in its effects.  For example,

     The @file{.el} files are in
     the @file{/usr/local/emacs/lisp} directory.

produces

     The ‘.el’ files are in the ‘/usr/local/emacs/lisp’ directory.


File: texinfo.info,  Node: @command,  Next: @option,  Prev: @file,  Up: Indicating

6.1.10 ‘@command’{COMMAND-NAME}
-------------------------------

Use the ‘@command’ command to indicate command names, such as ‘ls’ or
‘cc’.

   ‘@command’ is equivalent to ‘@code’ in its effects.  For example:

     The command @command{ls} lists directory contents.
produces
     The command ‘ls’ lists directory contents.

   You should write the name of a program in the ordinary text font,
rather than using ‘@command’, if you regard it as a new English word,
such as 'Emacs' or 'Bison'.

   When writing an entire shell command invocation, as in ‘ls -l’, you
should use either ‘@samp’ or ‘@code’ at your discretion.


File: texinfo.info,  Node: @option,  Next: @dfn,  Prev: @command,  Up: Indicating

6.1.11 ‘@option’{OPTION-NAME}
-----------------------------

Use the ‘@option’ command to indicate a command-line option; for
example, ‘-l’ or ‘--version’ or ‘--output=FILENAME’.

   ‘@option’ is equivalent to ‘@code’ in its effects.  For example:

     The option @option{-l} produces a long listing.
produces
     The option ‘-l’ produces a long listing.


File: texinfo.info,  Node: @dfn,  Next: @abbr,  Prev: @option,  Up: Indicating

6.1.12 ‘@dfn’{TERM}
-------------------

Use the ‘@dfn’ command to identify the introductory or defining use of a
technical term.  Use the command only in passages whose purpose is to
introduce a term which will be used again or which the reader ought to
know.  Mere passing mention of a term for the first time does not
deserve ‘@dfn’.  The command selects a slanted font in the printed
manual, and generates double quotation marks in the Info file.  For
example:

     Getting rid of a file is called @dfn{deleting} it.

produces

     Getting rid of a file is called “deleting” it.

   As a general rule, a sentence containing the defining occurrence of a
term should be a definition of the term.  The sentence does not need to
say explicitly that it is a definition, but it should contain the
information of a definition--it should make the meaning clear.


File: texinfo.info,  Node: @abbr,  Next: @acronym,  Prev: @dfn,  Up: Indicating

6.1.13 ‘@abbr’{ABBREVIATION[, MEANING]}
---------------------------------------

You can use the ‘@abbr’ command for general abbreviations.  The
abbreviation is given as the single argument in braces, as in
‘@abbr{Comput.}’.  As a matter of style, or for particular
abbreviations, you may prefer to omit periods, as in ‘@abbr{Mr}
Stallman’.

   ‘@abbr’ accepts an optional second argument, intended to be used for
the meaning of the abbreviation.

   If the abbreviation ends with a lowercase letter and a period, and is
not at the end of a sentence, and has no second argument, remember to
use the ‘@.’ command (*note* Ending a Sentence::) to get the correct
spacing.  However, you do not have to use ‘@.’ within the abbreviation
itself; Texinfo automatically assumes periods within the abbreviation do
not end a sentence.

   In output formats with an appropriate tag, such as HTML and DocBook,
this tag is used.  Otherwise, the first argument is printed as-is; if
the second argument is present, it is printed in parentheses after the
abbreviation.  For instance:

     @abbr{Comput. J., Computer Journal}

produces:

     Comput. J. (Computer Journal)

   For abbreviations consisting of all capital letters, you may prefer
to use the ‘@acronym’ command instead.  See the next section for more on
the usage of these two commands.


File: texinfo.info,  Node: @acronym,  Next: @indicateurl,  Prev: @abbr,  Up: Indicating

6.1.14 ‘@acronym’{ACRONYM[, MEANING]}
-------------------------------------

You can use the ‘@acronym’ command for abbreviations written in all
capital letters, such as 'NASA'.  The abbreviation is given as the
single argument in braces, as in ‘@acronym{NASA}’.  As a matter of
style, or for particular acronyms, you may prefer to use periods, as in
‘@acronym{N.A.S.A.}’.

   ‘@acronym’ accepts an optional second argument, intended to be used
for the meaning of the acronym.

   If the acronym is at the end of a sentence, and if there is no second
argument, remember to use the ‘@.’ or similar command (*note* Ending a
Sentence::) to get the correct spacing.

   In TeX, the acronym is printed in slightly smaller font.  In the Info
output, the argument is printed as-is.  In either format, and in LaTeX
output, if the second argument is present, it is printed in parentheses
after the acronym.  In HTML and DocBook the appropriate tag is used.

   For instance (since GNU is a recursive acronym, we use ‘@acronym’
recursively):

     @acronym{GNU, @acronym{GNU}'s Not Unix}

produces:

     GNU (GNU's Not Unix)

   In some circumstances, it is conventional to print family names in
all capitals.  Don't use ‘@acronym’ for this, since a name is not an
acronym.  Use ‘@sc’ instead (*note* Smallcaps::).

   ‘@abbr’ and ‘@acronym’ are closely related commands: they both signal
to the reader that a shortened form is being used, and possibly give a
meaning.  When choosing whether to use these two commands, please bear
the following in mind.

   − In common English usage, acronyms are a subset of abbreviations:
     they include pronounceable words like 'NATO', 'radar', and 'snafu';
     some sources also include syllable acronyms like 'Usenet', hybrids
     like 'SIGGRAPH', and unpronounceable initialisms like 'FBI'.

   − In Texinfo, an acronym (but not an abbreviation) should consist
     only of capital letters and periods, no lowercase.

   − In TeX, an acronym (but not an abbreviation) is printed in a
     slightly smaller font.

   − It usually turns out to be quite difficult and/or time-consuming to
     consistently use ‘@acronym’ for all sequences of uppercase letters.
     Furthermore, it looks strange for some acronyms to be in the normal
     font size and others to be smaller.  Thus, a simpler approach you
     may wish to consider is to avoid ‘@acronym’ and just typeset
     everything as normal text in all capitals: ‘GNU’, producing the
     output 'GNU'.

   − In general, it's not essential to use either of these commands for
     all abbreviations; use your judgment.  Text is perfectly readable
     without them.


File: texinfo.info,  Node: @indicateurl,  Next: @email,  Prev: @acronym,  Up: Indicating

6.1.15 ‘@indicateurl’{UNIFORM-RESOURCE-LOCATOR}
-----------------------------------------------

Use the ‘@indicateurl’ command to indicate a uniform resource locator on
the World Wide Web.  This is purely for markup purposes and does not
produce a link you can follow (use the ‘@url’ or ‘@uref’ command for
that, *note* @url::).  ‘@indicateurl’ is useful for URLs which do not
actually exist.  For example:

     For example, the URL might be @indicateurl{http://example.org/path}.

which produces:

     For example, the URL might be ‘http://example.org/path’.

   The output from ‘@indicateurl’ is usually like that of ‘@samp’ (*note*
@samp::).


File: texinfo.info,  Node: @email,  Prev: @indicateurl,  Up: Indicating

6.1.16 ‘@email’{EMAIL-ADDRESS[, DISPLAYED-TEXT]}
------------------------------------------------

Use the ‘@email’ command to indicate an electronic mail address.  It
takes one mandatory argument, the address, and one optional argument,
the text to display (the default is the address itself).

   In Info, the address is shown in angle brackets, preceded by the text
to display if any.  In printed output, the angle brackets are omitted.
In HTML and DocBook output, ‘@email’ produces a ‘mailto’ link.  In HTML,
a ‘mailto’ link usually brings up a mail composition window.  For
example:

     Send bug reports to @email{bug-texinfo@@gnu.org},
     suggestions to the @email{bug-texinfo@@gnu.org, same place}.

produces

     Send bug reports to <bug-texinfo@gnu.org>,
     suggestions to the same place <bug-texinfo@gnu.org>.


File: texinfo.info,  Node: Emphasis,  Prev: Indicating,  Up: Marking Text

6.2 Emphasizing Text
====================

Usually, Texinfo changes the font to mark words in the text according to
the category the words belong to; an example is the ‘@code’ command.
Most often, this is the best way to mark words.  However, sometimes you
will want to emphasize text without indicating a category.  Texinfo has
two commands to do this.  Also, Texinfo has several commands that
specify the font in which text will be output.  These commands have no
effect in Info and only one of them, the ‘@r’ command, has any regular
use.

* Menu:

* @emph @strong::              How to emphasize text in Texinfo.
* Smallcaps::                  How to use the small caps font.
* Fonts::                      Various font commands for printed output.


File: texinfo.info,  Node: @emph @strong,  Next: Smallcaps,  Up: Emphasis

6.2.1 ‘@emph’{TEXT} and ‘@strong’{TEXT}
---------------------------------------

The ‘@emph’ and ‘@strong’ commands are for emphasis; ‘@strong’ is
stronger.  In printed output, ‘@emph’ produces _italics_ and ‘@strong’
produces *bold*.  In the Info output, ‘@emph’ surrounds the text with
underscores (‘_’), and ‘@strong’ puts asterisks around the text.

   For example,

     @strong{Caution:} @samp{rm * .[^.]*}
     removes @emph{all} files in the directory.

produces the following:

     *Caution*: ‘rm * .[^.]*’ removes _all_ files in the directory.

   The ‘@strong’ command is seldom used except to mark what is, in
effect, a typographical element, such as the word 'Caution' in the
preceding example.

     Caution: Do not use ‘@strong’ with the word ‘Note’ followed by a
     space; Info will mistake the combination for a cross-reference.
     Use a phrase such as *Please notice* or *Caution* instead, or the
     optional argument to ‘@quotation’--‘Note’ is allowable there.


File: texinfo.info,  Node: Smallcaps,  Next: Fonts,  Prev: @emph @strong,  Up: Emphasis

6.2.2 ‘@sc’{TEXT}: The Small Caps Font
--------------------------------------

Use the ‘@sc’ command to set text in A SMALL CAPS FONT (where possible).
Write the text you want to be in small caps between braces in lowercase,
like this:

     Richard @sc{Stallman} a commencé le projet GNU.

This produces:

     Richard STALLMAN a commencé le projet GNU.

   As shown here, we recommend reserving ‘@sc’ for special cases where
you want typographic small caps; family names are one such, especially
in languages other than English, though there are no hard-and-fast rules
about such things.

   TeX typesets any uppercase letters between the braces of an ‘@sc’
command in full-size capitals; only lowercase letters are printed in the
small caps font.  In the Info output, the argument to ‘@sc’ is printed
in all uppercase.  In HTML, the argument is uppercased and the output
marked with the ‘<small>’ tag to reduce the font size, since HTML cannot
easily represent true small caps.  In LaTeX, a command setting small
caps fonts is output.

   Overall, we recommend using standard upper- and lowercase letters
wherever possible.


File: texinfo.info,  Node: Fonts,  Prev: Smallcaps,  Up: Emphasis

6.2.3 Fonts for Printing
------------------------

Texinfo provides one command to change the size of the main body font in
printed output for a document: ‘@fonttextsize’.  It has no effect in
other output.  It takes a single argument on the remainder of the line,
which must be either ‘10’ or ‘11’.  For example:

     @fonttextsize 10

   The effect is to reduce the body font to a 10pt size (the default is
11pt).  Fonts for other elements, such as sections and chapters, are
reduced accordingly.  This should only be used in conjunction with
‘@smallbook’ (*note* @smallbook::) or similar, since 10pt fonts on
standard paper (8.5x11 or A4) are too small.  One reason to use this
command is to save pages, and hence printing cost, for physical books.

   Texinfo does not at present have commands to switch the font family
to use, or more general size-changing commands.

   Texinfo also provides a number of font commands that specify font
changes in the printed manual and (where possible) in the HTML and
DocBook output.  They have no effect in Info.  All the commands apply to
a following argument surrounded by braces.

‘@b’
     selects bold face;

‘@i’
     selects an italic font;

‘@r’
     selects a roman font, which is the usual font in which text is
     printed.  It may or may not be seriffed.

‘@sansserif’
     selects a sans serif font;

‘@slanted’
     selects a slanted font;

‘@t’
     selects the fixed-width, typewriter-style font used by ‘@code’;

   The ‘@r’ command can be useful in example-like environments, to write
comments in the standard roman font instead of the fixed-width font.
This looks better in printed output.

   For example,

     @lisp
     (+ 2 2)    ; @r{Add two plus two.}
     @end lisp

produces

     (+ 2 2)    ; Add two plus two.

   The ‘@t’ command can occasionally be useful for producing output in a
typewriter font where that is supported, but no distinction with
quotation marks is needed in Info or plain text.  (Compare ‘@t{foo}’
producing foo with ‘@code{foo}’ producing ‘foo’.)  Here are some
possible reasons for using ‘@t’ instead of ‘@code’:

   − The argument is a single character
   − There are already quotes of some kind enclosing the argument
   − It's evident from context or the argument itself that the argument
     could be computer code (e.g. name of a Usenet newsgroup)

   In general, the other font commands are unlikely to be useful; they
exist primarily to make it possible to document the functionality of
specific font effects, such as in TeX and related packages.


File: texinfo.info,  Node: Quotations and Examples,  Next: Lists and Tables,  Prev: Marking Text,  Up: Top

# /7 Quotations and Examples
*************************

Quotations and examples are blocks of text consisting of one or more
whole paragraphs that are set off from the bulk of the text and treated
differently.  They are usually indented in the output.

   In Texinfo, you always begin a quotation or example by writing an
@-command at the beginning of a line by itself, and end it by writing an
‘@end’ command that is also at the beginning of a line by itself.  For
instance, you begin an example by writing ‘@example’ by itself at the
beginning of a line and end the example by writing ‘@end example’ on a
line by itself, at the beginning of that line, and with only one space
between the ‘@end’ and the ‘example’.

* Menu:

* Block Enclosing Commands::   Different constructs for different purposes.
* @quotation::                 Writing a quotation.
* @indentedblock::             Block of text indented on left.
* @example::                   Writing an example in a fixed-width font.
* @verbatim::                  Writing a verbatim example.
* @lisp::                      Illustrating Lisp code.
* @display::                   Writing an example in the current font.
* @format::                    Writing an example without narrowed margins.
* @exdent::                    Undo indentation on a line.
* @flushleft @flushright::     Pushing text flush left or flush right.
* @raggedright::               Avoiding justification on the right.
* @noindent::                  Preventing paragraph indentation.
* @indent::                    Forcing paragraph indentation.
* @cartouche::                 Drawing rounded rectangles around text.
* small::                      Examples in a smaller font.


File: texinfo.info,  Node: Block Enclosing Commands,  Next: @quotation,  Up: Quotations and Examples

7.1 Block Enclosing Commands
============================

Here is a summary of commands that enclose blocks of text, also known as
“environments”.  They're explained further in the following sections.

‘@quotation’
     Indicate text that is quoted.  The text is filled, indented (from
     both margins), and printed in a roman font by default.

‘@indentedblock’
     Like ‘@quotation’, but the text is indented only on the left.

‘@example’
     Illustrate code, commands, and the like.  The text is printed in a
     fixed-width font, and indented but not filled.

‘@lisp’
     Like ‘@example’, but specifically for illustrating Lisp code.  The
     text is printed in a fixed-width font, and indented but not filled.

‘@verbatim’
     Mark a piece of text that is to be printed verbatim; no character
     substitutions are made and all commands are ignored, until the next
     ‘@end verbatim’.  The text is printed in a fixed-width font, and
     not indented or filled.  Extra spaces and blank lines are
     significant, and tabs are expanded.

‘@display’
     Display illustrative text.  The text is indented but not filled,
     and no font is selected (so, by default, the font is roman).

‘@format’
     Like ‘@display’ (the text is not filled and no font is selected),
     but the text is not indented.

‘@smallquotation’
‘@smallindentedblock’
‘@smallexample’
‘@smalllisp’
‘@smalldisplay’
‘@smallformat’
     These ‘@small...’ commands are just like their non-small
     counterparts, except that they output text in a smaller font size,
     where possible.

‘@flushleft’
‘@flushright’
     Text is not filled, but is set flush with the left or right margin,
     respectively.

‘@raggedright’
     Text is filled, but only justified on the left, leaving the right
     margin ragged.

‘@cartouche’
     Highlight text, often an example or quotation, by drawing a box
     with rounded corners around it.

   The ‘@exdent’ command is used within the above constructs to undo the
indentation of a line.

   The ‘@noindent’ command may be used after one of the above constructs
(or at the beginning of any paragraph) to prevent the following text
from being indented as a new paragraph.


File: texinfo.info,  Node: @quotation,  Next: @indentedblock,  Prev: Block Enclosing Commands,  Up: Quotations and Examples

7.2 ‘@quotation’: Block Quotations
==================================

The text of a quotation is processed like normal text (regular font,
text is filled) except that:

   • the left margin is closer to the center of the page, so the whole
     of the quotation is indented; the right margin may also be closer
     to the center of the page

   • the first lines of paragraphs are indented no more than other
     lines; and

   • an ‘@author’ command may be given to specify the author of the
     quotation.

     This is an example of text written between a ‘@quotation’ command
     and an ‘@end quotation’ command.  A ‘@quotation’ command is most
     often used to indicate text that is excerpted from another (real or
     hypothetical) printed work.

   Write a ‘@quotation’ command as text on a line by itself.  This line
will disappear from the output.  Mark the end of the quotation with a
line beginning with and containing only ‘@end quotation’.  The ‘@end
quotation’ line will likewise disappear from the output.

   ‘@quotation’ takes one optional argument, given on the remainder of
the line.  This text, if present, is included at the beginning of the
quotation in bold or otherwise emphasized, and followed with a ‘:’.  For
example:

     @quotation Note
     This is
     a foo.
     @end quotation

produces

     Note: This is a foo.

   If the ‘@quotation’ argument is one of these English words
(case-insensitive):

     Caution  Important  Note  Tip  Warning

then the DocBook output uses corresponding special tags (‘<note>’, etc.)
instead of the default ‘<blockquote>’.

   If the author of the quotation is specified in the ‘@quotation’ block
with the ‘@author’ command, a line with the author name is displayed
after the quotation:

     @quotation
     People sometimes ask me if it is a sin in the Church of Emacs to use
     vi.  Using a free version of vi is not a sin; it is a penance.  So happy
     hacking.

     @author Richard Stallman
     @end quotation

produces

     People sometimes ask me if it is a sin in the Church of Emacs to
     use vi.  Using a free version of vi is not a sin; it is a penance.
     So happy hacking.

                         -- _Richard Stallman_


File: texinfo.info,  Node: @indentedblock,  Next: @example,  Prev: @quotation,  Up: Quotations and Examples

7.3 ‘@indentedblock’: Indented text blocks
==========================================

The ‘@indentedblock’ environment is similar to ‘@quotation’, except that
text is only indented on the left (and there is no optional argument for
an author).  Thus, the text font remains unchanged, and text is gathered
and filled as usual, but the left margin is increased.  For example:

     This is an example of text written between an ‘@indentedblock’
     command and an ‘@end indentedblock’ command.  The ‘@indentedblock’
     environment can contain any text or other commands desired.

   This is written in the Texinfo source as:

     @indentedblock
     This is an example ...
     @end indentedblock


File: texinfo.info,  Node: @example,  Next: @verbatim,  Prev: @indentedblock,  Up: Quotations and Examples

7.4 ‘@example’: Example Text
============================

The ‘@example’ environment is used to indicate computer input or output
that is not part of the running text.  If you want to embed code
fragments within sentences, use the ‘@code’ command or its relatives
instead (*note* @code::).

   Write an ‘@example’ command at the beginning of a line by itself.
Mark the end of the block with ‘@end example’.  For example,

     @example
     cp foo @var{dest1}; \
      cp foo @var{dest2}
     @end example

produces

     cp foo DEST1; \
      cp foo DEST2

   The output uses a fixed-width font and is indented.  Each line in the
input file is a line in the output; that is, the source text is not
filled.  Extra spaces and blank lines are significant.  Texinfo commands
_are_ expanded; if you want the output to be the input verbatim, use the
‘@verbatim’ environment instead (*note* @verbatim::).

   Examples are often, logically speaking, "in the middle" of a
paragraph, and the text that continues afterwards should not be
indented, as in the example above.  The ‘@noindent’ command prevents a
piece of text from being indented as if it were a new paragraph (*note*
@noindent::).

   If you wish to use the normal roman font for a code comment, you can
use the ‘@r’ command (*note* Fonts::).

   You may optionally give arguments to the ‘@example’ command,
separated by commas if there is more than one.  In the HTML output, any
such arguments are output as class names, prefixed by the string
‘user-’.  This may be useful for adding syntax highlighting to manuals
for code samples.

   We recommend that when you give multiple arguments to ‘@example’, you
use the first argument to specify the language of the code (e.g. ‘C’,
‘lisp’, ‘Cplusplus’).  You may find uses for other arguments, such as
providing a formatting hint or marking code samples for extraction and
further processing, but for now nothing definitive is recommended.
Perhaps this will change in future Texinfo releases.

     Caution: Do not use tabs in the lines of an example!  (Or anywhere
     else in Texinfo, except in verbatim environments.)  TeX treats tabs
     as single spaces, and that is not what they look like.


File: texinfo.info,  Node: @verbatim,  Next: @lisp,  Prev: @example,  Up: Quotations and Examples

7.5 ‘@verbatim’: Literal Text
=============================

Use the ‘@verbatim’ environment for printing of text that may contain
special characters or commands that should not be interpreted, such as
computer input or output (‘@example’ interprets its text as regular
Texinfo commands).  This is especially useful for including
automatically generated files in a Texinfo manual.

   In general, the output will be just the same as the input.  No
character substitutions are made, e.g., all spaces and blank lines are
significant, including tabs.  The text is typeset in a fixed-width font,
and not indented or filled.

   Write a ‘@verbatim’ command at the beginning of a line by itself.
This line will disappear from the output.  Mark the end of the verbatim
block with an ‘@end verbatim’ command, also written at the beginning of
a line by itself.  The ‘@end verbatim’ will also disappear from the
output.

   For example:

     @verbatim
     {
     <TAB>@command with strange characters: @'e
     expand<TAB>me
     }
     @end verbatim

(where <TAB> stands for a literal tab character).  This produces:

{
	@command with strange characters: @'e
expand	me
}

   Since the lines containing ‘@verbatim’ and ‘@end verbatim’ produce no
output, typically you should put a blank line before the ‘@verbatim’ and
another blank line after the ‘@end verbatim’.  Blank lines between the
beginning ‘@verbatim’ and the ending ‘@end verbatim’ will appear in the
output.

   You can get a "small" verbatim by enclosing the ‘@verbatim’ in an
‘@smallformat’ environment, as shown here:

     @smallformat
     @verbatim
     ... still verbatim, but in a smaller font ...
     @end verbatim
     @end smallformat

   Finally, a word of warning: it is not reliable to use ‘@verbatim’
inside other Texinfo constructs.

   See also *note* @verbatiminclude::.


File: texinfo.info,  Node: @lisp,  Next: @display,  Prev: @verbatim,  Up: Quotations and Examples

7.6 ‘@lisp’: Marking a Lisp Example
===================================

The ‘@lisp’ command was used for Lisp code:

     @lisp
     Example lisp code
     @end lisp

This is now synonymous with the following:

     @example lisp
     Example lisp code
     @end example

   Use ‘@lisp’ to preserve information regarding the nature of the
example.  This is useful, for example, if you write a function that
evaluates only and all the Lisp code in a Texinfo file.  Then you can
use the Texinfo file as a Lisp library.


File: texinfo.info,  Node: @display,  Next: @format,  Prev: @lisp,  Up: Quotations and Examples

7.7 ‘@display’: Examples Using the Text Font
============================================

The ‘@display’ command begins another kind of environment, where the
font is left unchanged, not switched to typewriter as with ‘@example’.
Each line of input still produces a line of output, and the output is
still indented.

     This is an example of text written between a ‘@display’ command
     and an ‘@end display’ command.  The ‘@display’ command
     indents the text, but does not fill it.


File: texinfo.info,  Node: @format,  Next: @exdent,  Prev: @display,  Up: Quotations and Examples

7.8 ‘@format’: Examples Using the Full Line Width
=================================================

The ‘@format’ command is similar to ‘@display’, except it leaves the
text unindented.  Like ‘@display’, it does not select the fixed-width
font.  Thus,

     @format
     This is an example of text written between a @code{@@format} command
     and an @code{@@end format} command.  As you can see
     from this example,
     the @code{@@format} command does not fill the text.
     @end format

produces

This is an example of text written between a ‘@format’ command
and an ‘@end format’ command.  As you can see
from this example,
the ‘@format’ command does not fill the text.


File: texinfo.info,  Node: @exdent,  Next: @flushleft @flushright,  Prev: @format,  Up: Quotations and Examples

7.9 ‘@exdent’: Undoing a Line's Indentation
===========================================

The ‘@exdent’ command removes any indentation a line might have.  The
command is written at the beginning of a line and applies only to the
text that follows the command that is on the same line.  Do not use
braces around the text.  The text on an ‘@exdent’ line is also printed
in the roman font where the output format allows this.

   ‘@exdent’ is usually used within examples.  Thus,

     @example
     This line follows an @@example command.
     @exdent This line is exdented.
     This line follows the exdented line.
     The @@end example comes on the next line.
     @end example

produces

     This line follows an @example command.
This line is exdented.
     This line follows the exdented line.
     The @end example comes on the next line.

   In practice, the ‘@exdent’ command is rarely used.  Usually, you
un-indent text by ending the example and returning the page to its
normal width.

   ‘@exdent’ does not have an effect in all output formats.


File: texinfo.info,  Node: @flushleft @flushright,  Next: @raggedright,  Prev: @exdent,  Up: Quotations and Examples

7.10 ‘@flushleft’ and ‘@flushright’
===================================

The ‘@flushleft’ and ‘@flushright’ commands line up the ends of lines on
the left and right margins of a page, but do not fill the text.  The
commands are written on lines of their own, without braces.  The
‘@flushleft’ and ‘@flushright’ commands are ended by ‘@end flushleft’
and ‘@end flushright’ commands on lines of their own.

   For example,

     @flushleft
     This text is
     written flushleft.
     @end flushleft

produces

     This text is
     written flushleft.

   ‘@flushright’ produces the type of indentation often used in the
return address of letters.  For example,

     @flushright
     Here is an example of text written
     flushright.  The @code{@flushright} command
     right justifies every line but leaves the
     left end ragged.
     @end flushright

produces

                                     Here is an example of text written
                                 flushright.  The ‘@flushright’ command
                              right justifies every line but leaves the
                                                       left end ragged.


File: texinfo.info,  Node: @raggedright,  Next: @noindent,  Prev: @flushleft @flushright,  Up: Quotations and Examples

7.11 ‘@raggedright’: Ragged Right Text
======================================

The ‘@raggedright’ fills text as usual, but the text is only justified
on the left; the right margin is ragged.  The command is written on a
line of its own, without braces.  The ‘@raggedright’ command is ended by
‘@end raggedright’ on a line of its own.  This command only has an
effect in output formats where text is justified on the left, but not in
output formats where text is always set ragged right, such as Info or
HTML.

   The ‘@raggedright’ command can be useful with paragraphs containing
lists of commands with long names, when it is known in advance that
justifying the text on both margins will make the paragraph look bad.

   An example (from elsewhere in this manual):

     @raggedright
     Commands for double and single angle quotation marks:
     @code{@@guillemetleft@{@}}, @code{@@guillemetright@{@}},
     @code{@@guillemotleft@{@}}, @code{@@guillemotright@{@}},
     @code{@@guilsinglleft@{@}}, @code{@@guilsinglright@{@}}.
     @end raggedright

produces

   Commands for double and single angle quotation marks:
‘@guillemetleft{}’, ‘@guillemetright{}’, ‘@guillemotleft{}’,
‘@guillemotright{}’, ‘@guilsinglleft{}’, ‘@guilsinglright{}’.


File: texinfo.info,  Node: @noindent,  Next: @indent,  Prev: @raggedright,  Up: Quotations and Examples

7.12 ‘@noindent’: Omitting Indentation
======================================

An example or other inclusion can break a paragraph into segments.
Ordinarily, the formatters indent text that follows an example as a new
paragraph.  You can prevent this on a case-by-case basis by writing
‘@noindent’ at the beginning of a line, preceding the continuation text.
You can also disable indentation for all paragraphs globally with
‘@paragraphindent’ (*note* @paragraphindent::).

   Here is an example showing how to eliminate the normal indentation of
the text after an ‘@example’, a common situation:

     @example
     This is an example
     @end example

     @noindent
     This line is not indented.  As you can see, the
     beginning of the line is fully flush left with the
     line that follows after it.

produces:

          This is an example

     This line is not indented.  As you can see, the
     beginning of the line is fully flush left with the
     line that follows after it.

   The standard usage of ‘@noindent’ is just as above: at the beginning
of what would otherwise be a paragraph, to eliminate the indentation
that normally happens there.  It can either be followed by text or be on
a line by itself.  There is no reason to use it in other contexts, such
as in the middle of a paragraph or inside an environment (*note*
Quotations and Examples::).

   You can control the number of blank lines in the Info file output by
adjusting the input as desired: a line containing just ‘@noindent’ does
not generate a blank line, and neither does an ‘@end’ line for an
environment.

   Do not put braces after a ‘@noindent’ command; they are not used,
since ‘@noindent’ is a command used outside of paragraphs (*note* Command
Syntax::).


File: texinfo.info,  Node: @indent,  Next: @cartouche,  Prev: @noindent,  Up: Quotations and Examples

7.13 ‘@indent’: Forcing Indentation
===================================

   To complement the ‘@noindent’ command (see the previous section),
Texinfo provides the ‘@indent’ command to force a paragraph to be
indented.  For instance, this paragraph (the first in this section) is
indented using an ‘@indent’ command.

   And indeed, the first paragraph of a section is the most likely place
to use ‘@indent’, to override the normal behavior of no indentation
there (*note* @paragraphindent::).  It can either be followed by text or
be on a line by itself.

   As a special case, when ‘@indent’ is used in an environment where
text is not filled, it produces a paragraph indentation space in the TeX
output.  (These environments are where a line of input produces a line
of output, such as ‘@example’ and ‘@display’; for a summary of all
environments, *note* Block Enclosing Commands::.)

   Do not put braces after an ‘@indent’ command; they are not used,
since ‘@indent’ is a command used outside of paragraphs (*note* Command
Syntax::).


File: texinfo.info,  Node: @cartouche,  Next: small,  Prev: @indent,  Up: Quotations and Examples

7.14 ‘@cartouche’: Rounded Rectangles
=====================================

Where the output format allows, the ‘@cartouche’ command draws a box
with rounded corners around its contents.  In HTML, a normal rectangle
is drawn.  You can use this command to isolate a portion of the manual
from the main flow.  You can also further highlight an example or
quotation with ‘@cartouche’.

   For instance, you could write a manual in which one type of example
is surrounded by a cartouche for emphasis.  For example,

     @cartouche
     @example
     % pwd
     /usr/local/share/emacs
     @end example
     @end cartouche

surrounds the two-line example with a box with rounded corners, in the
printed manual.

   The output from the example looks like this (if you're reading this
in Info, you'll see the ‘@cartouche’ had no effect):

     % pwd
     /usr/local/share/emacs

   ‘@cartouche’ takes one optional argument, given on the remainder of
the line.  This text, if present, is the cartouche title.  It is output
in bold or otherwise emphasized at the beginning of the cartouche, and
is centered in some output formats.

   The following example illustrates a cartouche with a title:

     @cartouche Important
     Text explaining something important out of the main
     flow of the text.
     @end cartouche

   The cartouche with a title looks like this:

                               Important
   Text explaining something important out of the main flow of the text.

   A cartouche is output on a single page in printed output, similarly
to ‘@group’ (*note* @group::).


File: texinfo.info,  Node: small,  Prev: @cartouche,  Up: Quotations and Examples

7.15 ‘@small...’ Block Commands
===============================

In addition to the regular ‘@example’ and similar commands, Texinfo has
"small" example-style commands.  These are ‘@smallquotation’,
‘@smallindentedblock’, ‘@smalldisplay’, ‘@smallexample’, ‘@smallformat’,
and ‘@smalllisp’.

   In most output formats, the ‘@small...’ commands are equivalent to
their non-small companion commands.

   In printed output, however, the ‘@small...’ commands typeset text in
a smaller font than the non-small example commands.  Thus, for instance,
code examples can contain longer lines and still fit on a page without
needing to be rewritten.

   Mark the end of a ‘@small...’ block with a corresponding ‘@end
small...’.  For example, pair ‘@smallexample’ with ‘@end smallexample’.

   Here is an example of the font used by the ‘@smallexample’ command
(in most output formats, the output will be the same as usual):

     ... to make sure that you have the freedom to
     distribute copies of free software (and charge for
     this service if you wish), that you receive source
     code or can get it if you want it, that you can
     change the software or use pieces of it in new free
     programs; and that you know you can do these things.

   The ‘@small...’ commands use the same font style as their normal
counterparts: ‘@smallexample’ and ‘@smalllisp’ use a fixed-width font,
and everything else uses the regular font.  They also have the same
behavior in other respects--whether filling is done and whether margins
are narrowed.

   As a general rule, it's better to just use the regular commands (such
as ‘@example’ instead of ‘@smallexample’), unless you have a good reason
for it.


File: texinfo.info,  Node: Lists and Tables,  Next: Special Displays,  Prev: Quotations and Examples,  Up: Top

# /8 Lists and Tables
******************

Texinfo has several ways of making lists and tables.  Lists can be
bulleted or numbered; two-column tables can highlight the items in the
first column; multi-column tables are also supported.

* Menu:

* Introducing Lists::          Texinfo formats lists for you.
* @itemize::                   How to construct a simple list.
* @enumerate::                 How to construct a numbered list.
* Two-column Tables::          How to construct a two-column table.
* Multi-column Tables::        How to construct generalized tables.


File: texinfo.info,  Node: Introducing Lists,  Next: @itemize,  Up: Lists and Tables

8.1 Introducing Lists
=====================

Texinfo automatically indents the text in lists or tables, and numbers
an enumerated list.  This last feature is useful if you modify the list,
since you do not need to renumber it yourself.

   Numbered lists and tables begin with the appropriate @-command at the
beginning of a line, and end with the corresponding ‘@end’ command on a
line by itself.  The table and itemized-list commands also require that
you write formatting information on the same line as the beginning
@-command.

   Begin an enumerated list, for example, with an ‘@enumerate’ command
and end the list with an ‘@end enumerate’ command.  Begin an itemized
list with an ‘@itemize’ command, followed on the same line by a
formatting command such as ‘@bullet’, and end the list with an ‘@end
itemize’ command.

   Precede each element of a list with an ‘@item’ or ‘@itemx’ command.


Here is an itemized list of the different kinds of table and lists:

   • Itemized lists with and without bullets.

   • Enumerated lists, using numbers or letters.

   • Two-column tables with highlighting.


Here is an enumerated list with the same items:

  1. Itemized lists with and without bullets.

  2. Enumerated lists, using numbers or letters.

  3. Two-column tables with highlighting.


And here is a two-column table with the same items and their @-commands:

‘@itemize’
     Itemized lists with and without bullets.

‘@enumerate’
     Enumerated lists, using numbers or letters.

‘@table’
‘@ftable’
‘@vtable’
     Two-column tables, optionally with indexing.


File: texinfo.info,  Node: @itemize,  Next: @enumerate,  Prev: Introducing Lists,  Up: Lists and Tables

8.2 ‘@itemize’: Making an Itemized List
=======================================

The ‘@itemize’ command produces a sequence of "items", each starting
with a bullet or other mark inside the left margin, and generally
indented.

   Begin an itemized list by writing ‘@itemize’ at the beginning of a
line.  Follow the command, on the same line, with a character or a
Texinfo command that generates a mark.  Usually, you will use ‘@bullet’
after ‘@itemize’, but you can use ‘@minus’, or any command or character
that results in a single character in the Info file.  (When you write
the mark command such as ‘@bullet’ after an ‘@itemize’ command, you may
omit the ‘{}’.)  If you don't specify a mark command, the default is
‘@bullet’.  If you don't want any mark at all, but still want logical
items, use ‘@w{}’ (in this case the braces are required).

   After the ‘@itemize’, write your items, each starting with ‘@item’.
Text can follow on the same line as the ‘@item’.  The text of an item
can continue for more than one paragraph.

   There should be at least one ‘@item’ inside the ‘@itemize’
environment.  If none are present, ‘texi2any’ gives a warning.  If you
just want indented text and not a list of items, use ‘@indentedblock’;
*note* @indentedblock::.

   Index entries and comments that are given before an ‘@item’ including
the first, are automatically moved (internally) to after the ‘@item’, so
the output is as expected.  Historically this has been a common
practice.

   Usually, you should put a blank line between items.  This puts a
blank line in the Info file.  (TeX inserts the proper vertical space in
any case.)  Except when the entries are very brief, these blank lines
make the list look better.

   Here is an example of the use of ‘@itemize’, followed by the output
it produces.  ‘@bullet’ produces an ‘*’ in Info and a round dot in other
output formats.

     @itemize @bullet
     @item
     Some text for foo.

     @item
     Some text
     for bar.
     @end itemize

This produces:

        • Some text for foo.

        • Some text for bar.

   Itemized lists may be embedded within other itemized lists.  Here is
a list marked with dashes embedded in a list marked with bullets:

     @itemize @bullet
     @item
     First item.

     @itemize @minus
     @item
     Inner item.

     @item
     Second inner item.
     @end itemize

     @item
     Second outer item.
     @end itemize

This produces:

        • First item.

             − Inner item.

             − Second inner item.

        • Second outer item.


File: texinfo.info,  Node: @enumerate,  Next: Two-column Tables,  Prev: @itemize,  Up: Lists and Tables

8.3 ‘@enumerate’: Making a Numbered or Lettered List
====================================================

‘@enumerate’ is like ‘@itemize’ (*note* @itemize::), except that the
labels on the items are successive integers or letters instead of
bullets.

   Write the ‘@enumerate’ command at the beginning of a line.  The
command does not require an argument, but accepts either a number or a
letter as an option.  Without an argument, ‘@enumerate’ starts the list
with the number ‘1’.  With a numeric argument, such as ‘3’, the command
starts the list with that number.  With an upper- or lowercase letter,
such as ‘a’ or ‘A’, the command starts the list with that letter.

   Write the text of the enumerated list in the same way as an itemized
list: write a line starting with ‘@item’ at the beginning of each item
in the enumeration.  It is ok to have text following the ‘@item’, and
the text for an item can continue for several paragraphs.

   You should put a blank line between entries in the list.  This
generally makes it easier to read the Info file.

   Here is an example of ‘@enumerate’ without an argument:

     @enumerate
     @item
     Underlying causes.

     @item
     Proximate causes.
     @end enumerate

This produces:

  1. Underlying causes.

  2. Proximate causes.

   Here is an example with an argument of ‘3’:

     @enumerate 3
     @item
     Predisposing causes.

     @item
     Precipitating causes.

     @item
     Perpetuating causes.
     @end enumerate

This produces:

  3. Predisposing causes.

  4. Precipitating causes.

  5. Perpetuating causes.

   Here is a summary:

  a. ‘@enumerate’

     Without an argument, produce a numbered list, with the first item
     numbered 1.

  b. ‘@enumerate UNSIGNED-INTEGER’

     With an (unsigned) numeric argument, start a numbered list with
     that number.  You can use this to continue a list that you
     interrupted with other text.

  c. ‘@enumerate UPPER-CASE-LETTER’

     With an uppercase letter as argument, start a list in which each
     item is marked by a letter, beginning with that uppercase letter.

  d. ‘@enumerate LOWER-CASE-LETTER’

     With a lowercase letter as argument, start a list in which each
     item is marked by a letter, beginning with that lowercase letter.

   You can also nest enumerated lists, as in an outline.


File: texinfo.info,  Node: Two-column Tables,  Next: Multi-column Tables,  Prev: @enumerate,  Up: Lists and Tables

8.4 Making a Two-column Table
=============================

‘@table’ is similar to ‘@itemize’ (*note* @itemize::), but allows you to
specify a name or heading line for each item.  The ‘@table’ command is
used to produce two-column tables, and is especially useful for
glossaries, explanatory exhibits, and command-line option summaries.

* Menu:

* @table::                     How to construct a two-column table.
* @ftable @vtable::            Automatic indexing for two-column tables.
* @itemx::                     How to put more entries in the first column.


File: texinfo.info,  Node: @table,  Next: @ftable @vtable,  Up: Two-column Tables

8.4.1 Using the ‘@table’ Command
--------------------------------

Use the ‘@table’ command to produce a two-column table.  This command is
typically used when you have a list of items and a brief text with each
one, such as a list of definitions.

   Write the ‘@table’ command at the beginning of a line, after a blank
line, and follow it on the same line with an argument that is an
'indicating' command, such as ‘@code’, ‘@samp’, ‘@var’, ‘@option’, or
‘@kbd’ (*note* Indicating::).  This command will be applied to the text
in the first column.  For example, ‘@table @code’ will cause the text in
the first column to be output as if it had been the argument to a
‘@code’ command.

   You may use the ‘@asis’ command as an argument to ‘@table’.  ‘@asis’
is a command that does nothing: if you use this command after ‘@table’,
the first column entries are output without added highlighting ("as
is").

   The ‘@table’ command works with other commands besides those
explicitly mentioned here.  However, you can only use predefined Texinfo
commands that take an argument in braces.  You cannot reliably use a new
command defined with ‘@macro’, although an ‘@alias’ (for a suitable
predefined command) is acceptable.  *Note* Defining New Texinfo
Commands::.

   Begin each table entry with an ‘@item’ command at the beginning of a
line.  Write the text for the first column on the same line as the
‘@item’ command.  Write the text for the second column on the line
following the ‘@item’ line and on subsequent lines.  You may write as
many lines of supporting text as you wish, even several paragraphs.  But
only the text on the same line as the ‘@item’ will be placed in the
first column (including any footnotes).  You do not need to type
anything for an empty second column.

   Normally, you should put a blank line between table entries.  This
puts a blank line in the Info file, which looks better unless the
entries are very brief.

   End the table with a line consisting of ‘@end table’.  Follow the end
of the table by a blank line for consistent formatting across output
formats.

   For example, the following table highlights the text in the first
column with the ‘@samp’ command:

     @table @samp
     @item foo
     This is the text for
     @samp{foo}.

     @item bar
     Text for @samp{bar}.
     @end table

This produces:

‘foo’
     This is the text for ‘foo’.
‘bar’
     Text for ‘bar’.

   If you want to list two or more named items with a single block of
text, use the ‘@itemx’ command.  (*Note* @itemx::.)

   The ‘@table’ command (*note* @table::) is not supported inside
‘@display’.  Since ‘@display’ is line-oriented, it doesn't make sense to
use them together.  If you want to indent a table, try ‘@quotation’
(*note* @quotation::) or ‘@indentedblock’ (*note* @indentedblock::).


File: texinfo.info,  Node: @ftable @vtable,  Next: @itemx,  Prev: @table,  Up: Two-column Tables

8.4.2 ‘@ftable’ and ‘@vtable’
-----------------------------

The ‘@ftable’ and ‘@vtable’ commands are the same as the ‘@table’
command except that ‘@ftable’ automatically enters each of the items in
the first column of the table into the index of functions and ‘@vtable’
automatically enters each of the items in the first column of the table
into the index of variables.  This simplifies the task of creating
indices.  Only the items on the same line as the ‘@item’ or ‘@itemx’
commands are indexed, and they are indexed in exactly the form that they
appear on that line.  *Note* Indices::, for more information about
indices.

   Begin a two-column table using ‘@ftable’ or ‘@vtable’ by writing the
@-command at the beginning of a line, followed on the same line by an
argument that is a Texinfo command such as ‘@code’, exactly as you would
for a ‘@table’ command; and end the table with an ‘@end ftable’ or ‘@end
vtable’ command on a line by itself.

   See the example for ‘@table’ in the previous section.


File: texinfo.info,  Node: @itemx,  Prev: @ftable @vtable,  Up: Two-column Tables

8.4.3 ‘@itemx’: Second and Subsequent Items
-------------------------------------------

Use the ‘@itemx’ command inside a table when you have two or more first
column entries for the same item, each of which should appear on a line
of its own.

   Use ‘@item’ for the first entry, and ‘@itemx’ for all subsequent
entries; ‘@itemx’ must always follow an ‘@item’ command, with no blank
line intervening.

   The ‘@itemx’ command works exactly like ‘@item’ except that it does
not generate extra vertical space above the first column text in some
output formats.  If you have multiple consecutive ‘@itemx’ commands, do
not insert any blank lines between them.

   For example,

     @table @code
     @item upcase
     @itemx downcase
     These two functions accept a character or a string as
     argument, and return the corresponding uppercase (lowercase)
     character or string.
     @end table

This produces:

‘upcase’
‘downcase’
     These two functions accept a character or a string as argument, and
     return the corresponding uppercase (lowercase) character or string.

(Note also that this example illustrates multi-line supporting text in a
two-column table.)


File: texinfo.info,  Node: Multi-column Tables,  Prev: Two-column Tables,  Up: Lists and Tables

8.5 ‘@multitable’: Multi-column Tables
======================================

‘@multitable’ allows you to construct tables with any number of columns,
with each column having any width you like.

   You define the column widths on the ‘@multitable’ line itself, and
write each row of the actual table following an ‘@item’ command, with
columns separated by a ‘@tab’ command.  Finally, ‘@end multitable’
completes the table.  Details in the sections below.

* Menu:

* Multitable Column Widths::   Defining multitable column widths.
* Multitable Rows::            Defining multitable rows, with examples.


File: texinfo.info,  Node: Multitable Column Widths,  Next: Multitable Rows,  Up: Multi-column Tables

8.5.1 Multitable Column Widths
------------------------------

You can define the column widths for a multitable in two ways: as
fractions of the line length; or with a prototype row.  Mixing the two
methods is not supported.  In either case, the widths are defined
entirely on the same line as the ‘@multitable’ command.

  1. To specify column widths as fractions of the line length, write
     ‘@columnfractions’ and the decimal numbers (presumably less than 1;
     a leading zero is allowed and ignored) after the ‘@multitable’
     command, as in:

          @multitable @columnfractions .33 .33 .33

     The fractions need not add up exactly to 1.0, as these do not.
     This allows you to produce tables that do not need the full line
     length.

     When using ‘@columnfractions’, the leftmost column may appear
     slightly wider than you might expect, relative to the other
     columns.  This is due to spacing between columns being included in
     the width of the other columns.

  2. To specify a prototype row, write the longest entry for each column
     enclosed in braces after the ‘@multitable’ command.  For example:

          @multitable {some text for column one} {for column two}

     The first column will then have the width of the typeset 'some text
     for column one', and the second column the width of 'for column
     two'.

     The prototype entries need not appear in the table itself.

     Although we used simple text in this example, the prototype entries
     can contain Texinfo commands; markup commands such as ‘@code’ are
     particularly likely to be useful.

     Prototype rows have no effect in HTML output.


File: texinfo.info,  Node: Multitable Rows,  Prev: Multitable Column Widths,  Up: Multi-column Tables

8.5.2 Multitable Rows
---------------------

After the ‘@multitable’ command defining the column widths (see the
previous section), you begin each row in the body of a multitable with
‘@item’, and separate the column entries with ‘@tab’.  Line breaks are
not special within the table body, and you may break input lines in your
source file as necessary.

   You can also use ‘@headitem’ instead of ‘@item’ to produce a “heading
row”.  The TeX output for such a row is in bold, and the HTML and
DocBook output uses the ‘<thead>’ tag.  In Info, the heading row is
followed by a separator line made of dashes (‘-’ characters).

   The command ‘@headitemfont’ can be used in templates when the entries
in a ‘@headitem’ row need to be used in a template.  It is a synonym for
‘@b’, but using ‘@headitemfont’ avoids any dependency on that particular
font style, in case we provide a way to change it in the future.

   Here is a complete example of a multi-column table (the text is from
‘The GNU Emacs Manual’, *note* Splitting Windows: (emacs)Split Window.):

     @multitable @columnfractions .15 .45 .4
     @headitem Key @tab Command @tab Description
     @item C-x 2
     @tab @code{split-window-vertically}
     @tab Split the selected window into two windows,
     with one above the other.
     @item C-x 3
     @tab @code{split-window-horizontally}
     @tab Split the selected window into two windows
     positioned side by side.
     @item C-Mouse-2
     @tab
     @tab In the mode line or scroll bar of a window,
     split that window.
     @end multitable

produces:

Key         Command                          Description
---------------------------------------------------------------------------
C-x 2       ‘split-window-vertically’        Split the selected window
                                             into two windows, with one
                                             above the other.
C-x 3       ‘split-window-horizontally’      Split the selected window
                                             into two windows positioned
                                             side by side.
C-Mouse-2                                    In the mode line or scroll
                                             bar of a window, split that
                                             window.


File: texinfo.info,  Node: Special Displays,  Next: Indices,  Prev: Lists and Tables,  Up: Top

# /9 Special Displays
******************

The commands in this chapter allow you to write text that is specially
displayed (output format permitting), outside of the normal document
flow.

   One set of such commands is for creating "floats", that is, figures,
tables, and the like, set off from the main text, possibly numbered,
captioned, and/or referred to from elsewhere in the document.  Images
are often included in these displays.

   Another group of commands is for creating footnotes in Texinfo.

* Menu:

* Floats::                     Figures, tables, and the like.
* Images::                     Including graphics and images.
* Footnotes::                  Writing footnotes.


File: texinfo.info,  Node: Floats,  Next: Images,  Up: Special Displays

9.1 Floats
==========

A “float” is a display which is set off from the main text.  It is
typically labeled as being a "Figure", "Table", "Example", or some
similar type.

   A float is so-named because, in principle, it can be moved to the
bottom or top of the current page, or to a following page, in the
printed output.  (Floating does not make sense in other output formats.)
In every output format except for LaTeX, however, this floating is
unfortunately not yet implemented.  Instead, the floating material is
simply output at the current location, more or less as if it were an
‘@group’ (*note* @group::).

* Menu:

* @float::                     Producing floating material.
* @caption @shortcaption::     Specifying descriptions for floats.
* @listoffloats::              A table of contents for floats.


File: texinfo.info,  Node: @float,  Next: @caption @shortcaption,  Up: Floats

9.1.1 ‘@float’ [TYPE][,LABEL]: Floating Material
------------------------------------------------

To produce floating material, enclose the material you want to be
displayed separate between ‘@float’ and ‘@end float’ commands, on lines
by themselves.

   Floating material often uses ‘@image’ to display an already-existing
graphic (*note* Images::), or ‘@multitable’ to display a table (*note*
Multi-column Tables::).  However, the contents of the float can be
anything.  Here's an example with simple text:

     @float Figure,fig:ex1
     This is an example float.
     @end float

And the output:

This is an example float.

Figure 9.1
   As shown in the example, ‘@float’ takes two arguments (separated by a
comma), TYPE and LABEL.  Both are optional.

TYPE
     Specifies the sort of float this is; typically a word such as
     "Figure", "Table", etc.  If this is not given, and LABEL is, any
     cross-referencing will simply use a bare number.

LABEL
     Specifies a cross-reference label for this float.  If given, this
     float is automatically given a number, and will appear in any
     ‘@listoffloats’ output (*note* @listoffloats::).  Cross references
     to LABEL are allowed.  For example, ‘see @ref{fig:ex1}’ will
     produce see *note* Figure 9.1: fig:ex1.

     On the other hand, if LABEL is not given, then the float will not
     be numbered and consequently will not appear in the ‘@listoffloats’
     output or be cross-referenceable.

Ordinarily, you specify both TYPE and LABEL, to get a labeled and
numbered float.

   In the LaTeX output, code loading the ‘float’ package is output in
the preamble if ‘@float’ are present.  A ‘@float’ with type ‘figure’ or
‘table’ (case insensitive) is already defined by the package.  Other
float types lead to the definition of a new float environment, with
names based on the ‘@float’ type with anything else than letters and ‘-’
removed.

   In Texinfo, all floats are numbered in the same way: with the chapter
number (or appendix letter), a period, and the float number, which
simply counts 1, 2, 3, ..., and is reset at each chapter.  Each float
type is counted independently.

   Floats within an ‘@unnumbered’, or outside of any chapter, are simply
numbered consecutively from 1.

   These numbering conventions are not, at present, changeable.


File: texinfo.info,  Node: @caption @shortcaption,  Next: @listoffloats,  Prev: @float,  Up: Floats

9.1.2 ‘@caption’ & ‘@shortcaption’
----------------------------------

You may write a ‘@caption’ anywhere within a ‘@float’ environment, to
define a caption for the float.  It is not allowed in any other context.
‘@caption’ takes a single argument, enclosed in braces.  Here's an
example:

     @float
     An example float, with caption.
     @caption{Caption for example float.}
     @end float

The output is:

An example float, with caption.

Caption for example float.

   ‘@caption’ can appear anywhere within the float; it is not processed
until the ‘@end float’.  The caption text is usually a sentence or two,
but may consist of several paragraphs if necessary.

   In the output, the caption always appears below the float; this is
not currently changeable.  It is preceded by the float type and/or
number, as specified to the ‘@float’ command (see the previous section).

   The ‘@shortcaption’ command likewise may be used only within
‘@float’, and takes a single argument in braces.  The short caption text
is used instead of the caption text in a list of floats (see the next
section).  Thus, you can write a long caption for the main document, and
a short title to appear in the list of floats.  For example:

     @float
     ... as above ...
     @shortcaption{Text for list of floats.}
     @end float

   The text for ‘@shortcaption’ may not contain comments (‘@c’),
verbatim text (‘@verb’), environments such as ‘@example’, footnotes
(‘@footnote’), multiple paragraphs, or other complex constructs.  The
same constraints apply to ‘@caption’ unless there is a ‘@shortcaption’.
In LaTeX a multi-paragraph ‘@caption’ will lead to an error when
formatted, unless there is a ‘@shortcaption’.


File: texinfo.info,  Node: @listoffloats,  Prev: @caption @shortcaption,  Up: Floats

9.1.3 ‘@listoffloats’: Tables of Contents for Floats
----------------------------------------------------

You can write a ‘@listoffloats’ command to generate a list of floats for
a given float type (*note* @float::), analogous to the document's overall
table of contents.  Typically, it is written in its own ‘@unnumbered’
node to provide a heading and structure, rather like ‘@printindex’
(*note* Printing Indices & Menus::).

   ‘@listoffloats’ takes one optional argument, the float type.  Here's
an example:

     @node List of Figures
     @unnumbered List of Figures
     @listoffloats Figure

Without any argument, ‘@listoffloats’ generates a list of floats for
which no float type was specified, i.e., no first argument to the
‘@float’ command (*note* @float::).

   Here's what the output from ‘@listoffloats’ looks like, given the
example figure earlier in this chapter:

     *      Figure 12.1:      fig:ex1.

   Usually, each line in the list of floats contains the float type (if
any), the float number, and the caption, if any--the ‘@shortcaption’
argument, if it was specified, else the ‘@caption’ argument.  The page
number may also be included, depending on output format.

   Unnumbered floats (those without cross-reference labels) are omitted
from the list of floats.

   The formatting of ‘@listoffloats’ depends on the output format.  In
Info, for example, a ‘@listoffloats’ is formatted as a menu.

   In LaTeX output, ‘\listoffigures’ is output for the ‘figure’ (case
insensitive) float type, ‘\listoftables’ is output for the ‘table’ (case
insensitive) float type.  For other float types, a specific ‘\listof’
command is output.


File: texinfo.info,  Node: Images,  Next: Footnotes,  Prev: Floats,  Up: Special Displays

9.2 Inserting Images
====================

You can insert an image given in an external file with the ‘@image’
command.  Although images can be used anywhere, including the middle of
a paragraph, we describe them in this chapter since they are most often
part of a displayed figure or example.

* Menu:

* Image Syntax::
* Image Scaling::


File: texinfo.info,  Node: Image Syntax,  Next: Image Scaling,  Up: Images

9.2.1 Image Syntax
------------------

Here is the synopsis of the ‘@image’ command:

     @image{FILENAME[, WIDTH[, HEIGHT[, ALTTEXT[, EXTENSION]]]]}

   The FILENAME argument is mandatory, and must not have an extension,
because the different processors support different formats:

   • TeX (DVI output) reads the file ‘FILENAME.eps’ (Encapsulated
     PostScript format).

   • TeX (PDF output) reads ‘FILENAME.pdf’, ‘FILENAME.png’,
     ‘FILENAME.jpg’, or ‘FILENAME.jpeg’ (in that order).  It also tries
     uppercase versions of the extensions.  The PDF format does not
     support EPS images, so such must be converted first.

   • In Info, ‘FILENAME.txt’ is included verbatim (more or less as if it
     were in ‘@verbatim’).  The Info output may also include a reference
     to ‘FILENAME.png’ or ‘FILENAME.jpg’.  (See below.)

   • In HTML, a reference to ‘FILENAME.png’, ‘FILENAME.jpg’,
     ‘FILENAME.jpeg’ or ‘FILENAME.gif’ (in that order) is output.  If
     none of those exist, it gives an error, and outputs a reference to
     ‘FILENAME.jpg’ anyway.

   • In DocBook, references to ‘FILENAME.eps’, ‘FILENAME.gif’,
     ‘FILENAME.jpeg’, ‘FILENAME.jpg’, ‘FILENAME.pdf’, ‘FILENAME.png’ and
     ‘FILENAME.svg’ are output, for every file found.  Also,
     ‘FILENAME.txt’ is included verbatim, if present.  (The subsequent
     DocBook processor is supposed to choose the appropriate one.)

   • For LaTeX, ‘FILENAME’ without any extension is used; the subsequent
     LaTeX processor is supposed to choose the appropriate image type.

   • For Info and HTML output, the optional fifth argument EXTENSION to
     ‘@image’ is used for the file extension, if it is specified and the
     file is found.  Any leading period should be included in EXTENSION.
     For example:

          @image{foo,,,,.xpm}

   If you want to install image files for use by Info readers too, we
recommend putting them in a subdirectory like ‘FOO-figures’ for a
package FOO.  Copying the files into ‘$(infodir)/FOO-figures/’ should be
done in your ‘Makefile’.

   The WIDTH and HEIGHT arguments are described in the next section.

   If an image is the first thing in a paragraph and followed by more
text, then you should precede the ‘@image’ command with ‘@indent’ or
‘@noindent’ to indicate the beginning of paragraph formatting.  This is
especially important for TeX output to get correct paragraph
indentation.

   Use ‘@center’ to center an image (*note* @titlefont @center @sp::).

   For HTML output, the “alt attribute” for inline images is set to the
optional ALTTEXT (fourth) argument to ‘@image’, if supplied.  If not
supplied, the full file name of the image being displayed is used.  The
ALTTEXT is processed as Texinfo text, so special characters such as ‘"’
and ‘<’ and ‘&’ are escaped in the HTML output; also, you can get an
empty ‘alt’ string with ‘@-’ (a command that produces no output; *note*
@- @hyphenation::).

   For Info output, the ALTTEXT string is also processed as Texinfo text
and output.  In this case, ‘\’ is escaped as ‘\\’ and ‘"’ as ‘\"’; no
other escapes are done.

   In Info output, a reference to the binary image file is written
(trying FILENAME suffixed with ‘EXTENSION’, ‘.EXTENSION’, ‘.png’, or
‘.jpg’, in that order) if one exists.  The ‘.txt’ file is also literally
included, if one exists.  This way, Info readers which can display
images (such as the Emacs Info browser, running under X) can do so,
whereas Info readers which can only use text (such as the standalone
Info reader) can display the textual version.


File: texinfo.info,  Node: Image Scaling,  Prev: Image Syntax,  Up: Images

9.2.2 Image Scaling
-------------------

The optional WIDTH and HEIGHT arguments to the ‘@image’ command (see the
previous section) specify the size to which to scale the image.  They
are only taken into account in printed output.

   In TeX, if neither is specified, the image is presented in its
natural size (given in the file); if only one is specified, the other is
scaled proportionately; and if both are specified, both are respected,
thus likely distorting the original image by changing its aspect ratio.

   The WIDTH and HEIGHT may be specified using any valid TeX dimension,
namely:

pt
     point (72.27pt = 1in)
pc
     pica (1pc = 12pt)
bp
     big point (72bp = 1in)
in
     inch
cm
     centimeter (2.54cm = 1in)
mm
     millimeter (10mm = 1cm)
dd
     didôt point (1157dd = 1238pt)
cc
     cicero (1cc = 12dd)
sp
     scaled point (65536sp = 1pt)

   For example, the following will scale a file ‘ridt.eps’ to one inch
vertically, with the width scaled proportionately:

     @image{ridt,,1in}

   For ‘@image’ to work with TeX, the file ‘epsf.tex’ must be installed
somewhere that TeX can find it.  (The standard location is
‘TEXMF/tex/generic/dvips/epsf.tex’, where TEXMF is a root of your TeX
directory tree.)  This file is included in the Texinfo distribution and
is also available from <ftp://tug.org/tex/epsf.tex>, among other places.

   ‘@image’ can be used within a line as well as for displayed figures.
Therefore, if you intend it to be displayed, be sure to leave a blank
line before the command, or the output will run into the preceding text.

   Image scaling is presently implemented only in printed output, not in
any other sort of output.


File: texinfo.info,  Node: Footnotes,  Prev: Images,  Up: Special Displays

9.3 Footnotes
=============

A “footnote” is for a reference that documents or elucidates the primary
text.(1)

   Footnotes are distracting; use them sparingly at most, and it is best
to avoid them completely.  Standard bibliographical references are
usually better placed in a bibliography at the end of a document instead
of in footnotes throughout.

* Menu:

* Footnote Commands::          How to write a footnote in Texinfo.
* Footnote Styles::            Controlling how footnotes appear.

   ---------- Footnotes ----------

   (1) A footnote should complement or expand upon the primary text, but
a reader should not need to read a footnote to understand the primary
text.  For a thorough discussion of footnotes, see ‘The Chicago Manual
of Style’, which is published by the University of Chicago Press.


File: texinfo.info,  Node: Footnote Commands,  Next: Footnote Styles,  Up: Footnotes

9.3.1 Footnote Commands
-----------------------

In Texinfo, footnotes are created with the ‘@footnote’ command.  This
command is followed immediately by a left brace, then by the text of the
footnote, and then by a terminating right brace.  Footnotes may be of
any length (they will be broken across pages if necessary), but are
usually short.  The template is:

     ordinary text@footnote{TEXT OF FOOTNOTE}

   As shown here, the ‘@footnote’ command should come right after the
text being footnoted, with no intervening space; otherwise, the footnote
marker might end up starting a line.

   For example, this clause is followed by a sample footnote(1); in the
Texinfo source, it looks like this:

     ...a sample footnote@footnote{Here is the sample
     footnote.}; in the Texinfo source...

   As you can see, this source includes two punctuation marks next to
each other; in this case, ‘.};’ is the sequence.  This is normal (the
first ends the footnote and the second belongs to the sentence being
footnoted), so don't worry that it looks odd.  (Another style, perfectly
acceptable, is to put the footnote after punctuation belonging to the
sentence, as in ‘;@footnote{...’.)

   In printed output formats, the reference mark for a footnote is a
small, superscripted number; the text of the footnote appears at the
bottom of the page, below a horizontal line.

   In Info, the reference mark for a footnote is a pair of parentheses
with the footnote number between them, like this: ‘(1)’.  The reference
mark is followed by a cross-reference link to the footnote text if
footnotes are put in separate nodes (*note* Footnote Styles::).

   In the HTML output, footnote references are generally marked with a
small, superscripted number which is rendered as a hypertext link to the
footnote text.

   Footnotes cannot be nested, and cannot appear in section headings of
any kind or other "unusual" places.

   A final tip: footnotes in the argument of an ‘@item’ command for an
‘@table’ must be entirely on the same line as the ‘@item’ (as usual).
*Note* Two-column Tables::.

   ---------- Footnotes ----------

   (1) Here is the sample footnote.


File: texinfo.info,  Node: Footnote Styles,  Prev: Footnote Commands,  Up: Footnotes

9.3.2 Footnote Styles
---------------------

Online formats have two footnote styles, which determine where the text
of the footnote is located, the ‘end’ and ‘separate’ footnote style.

‘end’
     For Info, in the ‘end’ node style, all the footnotes for a single
     node are placed at the end of that node.  The footnotes are
     separated from the rest of the node by a line of dashes with the
     word ‘Footnotes’ within it.  Each footnote begins with an ‘(N)’
     reference mark.

     Here is an example of the Info output for a single footnote in the
     end-of-node style:

          --------- Footnotes ---------

          (1)  Here is a sample footnote.

     In HTML, when the footnote style is ‘end’, or if the output is not
     split, footnotes are put at the end of each output file.

‘separate’
     For Info, in the ‘separate’ node style, all the footnotes for a
     single node are placed in an automatically constructed node of
     their own.  In this style, a "footnote reference" follows each
     ‘(N)’ reference mark in the body of the node.  The footnote
     reference is actually a cross-reference which you use to reach the
     footnote node.

     The name of the node with the footnotes is constructed by appending
     ‘-Footnotes’ to the name of the node that contains the footnotes.
     (Consequently, the footnotes' node for the ‘Footnotes’ node is
     ‘Footnotes-Footnotes’!)  The footnotes' node has an 'Up' node
     pointer that leads back to its parent node.

     Here is how the first footnote in this manual looks after being
     formatted for Info in the separate node style:

          File: texinfo.info  Node: Overview-Footnotes, Up: Overview

          (1) The first syllable of "Texinfo" is pronounced like
          "speck", not "hex". ...

     In HTML, when the footnote style is ‘separate’, and the output is
     split, footnotes are placed in a separate file.

   Unless your document has long and important footnotes (as in, say,
Gibbon's ‘Decline and Fall ...’), we recommend the ‘end’ style, as it is
simpler for readers to follow.

   Use the ‘@footnotestyle’ command to specify the footnote style.
Write this command at the beginning of a line followed by an argument,
either ‘end’ for the end node style or ‘separate’ for the separate node
style.

   For example,

     @footnotestyle end
or
     @footnotestyle separate

   Write a ‘@footnotestyle’ command in the Texinfo file preamble.


File: texinfo.info,  Node: Indices,  Next: Insertions,  Prev: Special Displays,  Up: Top

# /10 Indices
**********

Using Texinfo, you can generate indices without having to sort and
collate entries manually.  In an index, the entries are listed in
alphabetical order, together with information on how to find the
discussion of each entry.  In a printed manual, this information
consists of page numbers.  In other formats, links to the index entries
location or to the associated nodes are generated.

   Texinfo provides several predefined kinds of indices: an index for
functions, an index for variables, an index for concepts, and so on.
You can combine indices or use them for other than their canonical
purpose.  Lastly, you can define your own new indices.

* Menu:

* Predefined Indices::         Use different indices for different kinds of
                               entries.
* Indexing Commands::          How to make an index entry.
* Advanced Indexing::          Advanced indexing commands.
* Index Entries::              Choose different words for index entries.
* Printing Indices & Menus::   How to print an index in hardcopy and generate
                               index menus in Info.
* Combining Indices::          How to combine indices.
* New Indices::                How to define your own indices.


File: texinfo.info,  Node: Predefined Indices,  Next: Indexing Commands,  Up: Indices

10.1 Predefined Indices
=======================

Texinfo provides six predefined indices.  Here are their nominal
meanings, abbreviations, and the corresponding index entry commands:

‘cp’
     (‘@cindex’) Concept index, for general concepts.
‘fn’
     (‘@findex’) Function index, for function and function-like names
     (such as entry points of libraries).
‘ky’
     (‘@kindex’) Keystroke index, for keyboard commands.
‘pg’
     (‘@pindex’) Program index, for names of programs.
‘tp’
     (‘@tindex’) Data type index, for type names (such as structures
     defined in header files).
‘vr’
     (‘@vindex’) Variable index, for variable names (such as library
     global variables).

Not every manual needs all of these, and most manuals use only two or
three at most.  The present manual, for example, has two indices: a
concept index and an @-command index.  (The latter is actually the
function index but is called a command index in the chapter heading.)

   You are not required to use the predefined indices strictly for their
canonical purposes.  For example, suppose you wish to index some C
preprocessor macros.  You could put them in the function index along
with actual functions, just by writing ‘@findex’ commands for them;
then, when you print the "Function Index" as an unnumbered chapter, you
could give it the title 'Function and Macro Index' and all will be
consistent for the reader.

   On the other hand, it is best not to stray too far from the meaning
of the predefined indices.  Otherwise, in the event that your text is
combined with other text from other manuals, the index entries will not
match up.  Instead, define your own new index (*note* New Indices::).

   We recommend having a single index in the final document whenever
possible, however many source indices you use, since then readers have
only one place to look.  Two or more source indices can be combined into
one output index by using the ‘@synindex’ or ‘@syncodeindex’ commands
(*note* Combining Indices::).

   Index entry commands based on the the two letter index names are also
valid, for example ‘@cpindex’ can be used instead of ‘@cindex’.


File: texinfo.info,  Node: Indexing Commands,  Next: Advanced Indexing,  Prev: Predefined Indices,  Up: Indices

10.2 Defining the Entries of an Index
=====================================

The data to make an index come from many individual indexing commands
scattered throughout the Texinfo source file.  Each command says to add
one entry to a particular index; after formatting, the index will give
the current page number or node name as the reference.

   An index entry consists of an indexing command at the beginning of a
line followed, on the rest of the line, by the entry.

   For example, this section begins with the following five entries for
the concept index:

     @cindex Defining indexing entries
     @cindex Index entries, defining
     @cindex Entries for an index
     @cindex Specifying index entries
     @cindex Creating index entries

   Each predefined index has its own indexing command--‘@cindex’ for the
concept index, ‘@findex’ for the function index, and so on, as listed in
the previous section.

   Index entries should precede the visible material that is being
indexed.  For instance:

     @cindex hello
     Hello, there!

Among other reasons, that way following indexing links (in whatever
context) ends up before the material, where readers want to be, instead
of after.

   In Info, an index is usually formatted as a menu.  Try to avoid using
a colon in index entries, as this may confuse some Info readers.  *Note*
Menu Parts:: for more information about the structure of a menu entry.

   By default, entries for a concept index are printed in a roman font
and entries for the other indices are printed in a typewriter font.  You
may change the way part of an entry is printed with the usual Texinfo
commands, such as ‘@file’ for file names (*note* Marking Text::), and
‘@r’ for the normal roman font (*note* Fonts::).

   You may specify an explicit sort key for an index entry using
‘@sortas’ following either the index command or the text of the entry.
For example: ‘@findex @sortas{\} \ @r{(literal \ in @code{@@math})’
sorts the index entry this produces under backslash.

   You may choose to ignore certain characters in index entries for the
purposes of sorting.  The characters that you can currently choose to
ignore are ‘\’, ‘-’, ‘<’ and ‘@’, which are ignored by giving as an
argument to the ‘@set’ command, respectively, ‘txiindexbackslashignore’,
‘txiindexhyphenignore’, ‘txiindexlessthanignore’ and
‘txiindexatsignignore’.  For example, specifying ‘@set
txiindexbackslashignore’ causes the ‘\mathopsup’ entry in the index for
this manual to be sorted as if it were ‘mathopsup’, so that it appears
among the other entries beginning with 'M'. This avoids the need to
provide explicit sort keys for index entries containing these
characters.

   When using these options, it is possible to get an index entry with
an empty sort key.  To avoid this, specify a ‘@sortas’ directive in the
index entry.  For example:

     @set txiindexbackslashignore
     @findex @sortas{\} \


File: texinfo.info,  Node: Advanced Indexing,  Next: Index Entries,  Prev: Indexing Commands,  Up: Indices

10.3 Advanced Indexing Commands
===============================

Texinfo provides several further commands for indexing.

   First, you can create “multilevel” index entries, allowing you to
group many related subtopics under the same higher-level topic.  You do
this by separating the parts of such an entry with the ‘@subentry’
command.  Such commands might look like this:

     @cindex Superhumans @subentry villains
     @cindex Superhumans @subentry heroes

   You may have up to three levels in an entry:

     @cindex coffee makers @subentry electric @subentry pink
     @cindex coffee makers @subentry electric @subentry blue

   You can use the ‘@sortas’ command mentioned earlier with any or all
of the three parts of an entry to cause them to sort differently than
they would by default.

   Second, you may provide an index entry that points to another, using
the ‘@seeentry’ ("see entry") command.  For example:

     @cindex Indexes @seeentry{Indices}

   Such an entry should be unique in your document; the idea is to
redirect the reader to the other entry where they will find all the
information they are looking for.

   Finally, you may provide a "see also" entry using the ‘@seealso’
command.  These entries go along with regular entries, and are grouped
together with them in the final printed index.  For example:

     @cindex Coffee
     @cindex Coffee @subentry With milk and sugar
     @cindex Coffee @subentry With doughnuts
     @cindex Coffee @subentry Decaffeinated
     @cindex Coffee @seealso{Tea}

   When using all three of these advanced commands, _do not_ place a
comma between the different parts of the index text.  The ‘texindex’
program, which sorts the index entries and generates the indexing
formatting commands, takes care of placing commas in the correct places
for you.

   Do not interrupt an index or ‘@subentry’ entry by ‘@sortas’ or
advanced commands with braces; place the commands with braces at the
beginning or at the end of the entry.

   These features are the most useful with printed documents, and when
translating Texinfo to DocBook.


File: texinfo.info,  Node: Index Entries,  Next: Printing Indices & Menus,  Prev: Advanced Indexing,  Up: Indices

10.4 Making Index Entries
=========================

Concept index entries consist of text.  The best way to write an index
is to devise entries which are terse yet clear.  If you can do this, the
index usually looks better if the entries are written just as they would
appear in the middle of a sentence, that is, capitalizing only proper
names and acronyms that always call for uppercase letters.  This is the
case convention we use in most GNU manuals' indices.

   If you don't see how to make an entry terse yet clear, make it longer
and clear--not terse and confusing.  If many of the entries are several
words long, the index may look better if you use a different convention:
capitalize the first word of each entry.  Whichever case convention you
use, use it consistently.

   In any event, do not ever capitalize a case-sensitive name such as a
C or Lisp function name or a shell command; that would be a spelling
error.  Entries in indices other than the concept index are symbol names
in programming languages, or program names; these names are usually
case-sensitive, so likewise use upper- and lowercase as required.

   It is a good idea to make index entries unique wherever feasible.
That way, people using the printed output or online completion of index
entries don't see undifferentiated lists.  Consider this an opportunity
to make otherwise-identical index entries be more specific, so readers
can more easily find the exact place they are looking for.  The advanced
indexing features described in *note* Advanced Indexing:: can help with
this, as well.

   When you are making index entries, it is good practice to think of
the different ways people may look for something.  Different people _do
not_ think of the same words when they look something up.  A helpful
index will have items indexed under all the different words that people
may use.  For example, one reader may think it obvious that the
two-letter names for indices should be listed under "Indices, two-letter
names", since "Indices" are the general concept.  But another reader may
remember the specific concept of two-letter names and search for the
entry listed as "Two letter names for indices".  A good index will have
both entries and will help both readers.

   Like typesetting, the construction of an index is a skilled art, the
subtleties of which may not be appreciated until you need to do it
yourself.


File: texinfo.info,  Node: Printing Indices & Menus,  Next: Combining Indices,  Prev: Index Entries,  Up: Indices

10.5 Printing Indices and Menus
===============================

‘@printindex’ takes one argument, a two-letter index abbreviation.  You
must include the ‘@printindex’ command at the place in the document
where you want the index to appear.  This does not happen automatically
just because you use ‘@cindex’ or other index-entry generating commands
in the Texinfo file; those just cause the raw data for the index to be
accumulated.

   You should precede the ‘@printindex’ command with a suitable section
or chapter command (usually ‘@appendix’ or ‘@unnumbered’) to supply the
chapter heading and put the index into the table of contents.  Precede
the chapter heading with an ‘@node’ line as usual.

   For example:

     @node Variable Index
     @unnumbered Variable Index

     @printindex vr

     @node Concept Index
     @unnumbered Concept Index

     @printindex cp

   The text ‘Index’ needs to appear in the name of the node containing
the index for the index to be found by Info readers.

   If you have more than one index, we recommend placing the concept
index last.

   Other details of index output in output formats:

   • As part of the process of creating a printed manual with TeX, you
     run a program called ‘texindex’ (*note* Hardcopy with TeX::) to sort
     the raw data to produce a sorted index file.  The sorted index file
     is what is actually used to print the index.

     ‘@printindex’ reads the corresponding sorted index file and
     produces a traditional two-column index, with index terms and page
     numbers.

   • In Info output, ‘@printindex’ produces a special menu containing
     the line number of the entry, relative to the start of the node.
     Info readers can use this to go to the exact line of an entry, not
     just the containing node.  (Older Info readers will just go to the
     node.)  Here's an example:

          * First index entry:   Top.   (line  7)

   • In plain text output, ‘@printindex’ formatting is usually similar
     to a menu in Info, showing the line number of each entry relative
     to the start of the file.

   • In HTML output, ‘@printindex’ produces links to the index entries.

   • In DocBook and LaTeX output, it simply records the index to be
     printed.


File: texinfo.info,  Node: Combining Indices,  Next: New Indices,  Prev: Printing Indices & Menus,  Up: Indices

10.6 Combining Indices
======================

Sometimes you will want to combine two disparate indices such as
functions and concepts, perhaps because you have few enough entries that
a separate index would look silly.

   You could put functions into the concept index by writing ‘@cindex’
commands for them instead of ‘@findex’ commands, and produce a
consistent manual by printing the concept index with the title 'Function
and Concept Index' and not printing the 'Function Index' at all; but
this is not a robust procedure.  It works only if your document is never
included as part of another document that is designed to have a separate
function index; if your document were to be included with such a
document, the functions from your document and those from the other
would not end up together.  Also, to make your function names appear in
the right font in the concept index, you would need to enclose every one
of them between the braces of ‘@code’.

* Menu:

* @syncodeindex::              How to merge two indices, using ‘@code’ font for
                               the merged-from index.
* @synindex::                  How to merge two indices, using the roman font
                               for the merged-from index.


File: texinfo.info,  Node: @syncodeindex,  Next: @synindex,  Up: Combining Indices

10.6.1 ‘@syncodeindex’: Combining Indices Using ‘@code’
-------------------------------------------------------

When you want to combine functions and concepts into one index, you
should index the functions with ‘@findex’ and index the concepts with
‘@cindex’, and use the ‘@syncodeindex’ command to redirect the function
index entries into the concept index.

   The ‘@syncodeindex’ command takes two arguments; they are the name of
the index to redirect, and the name of the index to redirect it to.  The
template looks like this:

     @syncodeindex FROM TO

   For this purpose, the indices are given two-letter names:

‘cp’
     Concept index
‘fn’
     Function index
‘ky’
     Key index
‘pg’
     Program index
‘tp’
     Data type index
‘vr’
     Variable index

   Write a ‘@syncodeindex’ command before or shortly after the
end-of-header line at the beginning of a Texinfo file.  For example, to
merge a function index with a concept index, write the following:

     @syncodeindex fn cp

This causes all entries designated for the function index to merge in
with the concept index instead.

   To merge both a variable index and a function index into a concept
index, write the following:

     @syncodeindex vr cp
     @syncodeindex fn cp

   The ‘@syncodeindex’ command puts all the entries from the 'from'
index (the redirected index) into the ‘@code’ font, overriding whatever
default font is used by the index to which the entries are now directed.
This way, if you direct function names from a function index into a
concept index, all the function names are printed in the ‘@code’ font as
you would expect.


File: texinfo.info,  Node: @synindex,  Prev: @syncodeindex,  Up: Combining Indices

10.6.2 ‘@synindex’: Combining Indices
-------------------------------------

The ‘@synindex’ command is nearly the same as the ‘@syncodeindex’
command, except that it does not put the 'from' index entries into the
‘@code’ font; rather it puts them in the roman font.  Thus, you use
‘@synindex’ when you merge a concept index into a function index.

   *Note* Printing Indices & Menus::, for information about printing an
index at the end of a book or creating an index menu in an Info file.


File: texinfo.info,  Node: New Indices,  Prev: Combining Indices,  Up: Indices

10.7 Defining New Indices
=========================

In addition to the predefined indices (*note* Predefined Indices::), you
may use the ‘@defindex’ and ‘@defcodeindex’ commands to define new
indices.  These commands create new indexing @-commands with which you
mark index entries.  The ‘@defindex’ command is used like this:

     @defindex NAME

   New index names are usually two-letter words, such as ‘au’.  For
example:

     @defindex au

   This defines a new index, called the ‘au’ index.  At the same time,
it creates a new indexing command, ‘@auindex’, that you can use to make
index entries.  Use this new indexing command just as you would use a
predefined indexing command.

   For example, here is a section heading followed by a concept index
entry and two ‘au’ index entries.

     @section Cognitive Semantics
     @cindex kinesthetic image schemas
     @auindex Johnson, Mark
     @auindex Lakoff, George

(Evidently, ‘au’ serves here as an abbreviation for "author".)

   Texinfo constructs the new indexing command by concatenating the name
of the index with ‘index’; thus, defining an ‘xy’ index leads to the
automatic creation of an ‘@xyindex’ command.

   Use the ‘@printindex’ command to print the index, as you do with the
predefined indices.  For example:

     @node Author Index
     @unnumbered Author Index

     @printindex au

   The ‘@defcodeindex’ command is like the ‘@defindex’ command, except
that, in the printed output, it prints entries in an ‘@code’ font by
default instead of in a roman font.

   You should define new indices before the end-of-header line of a
Texinfo file, and (of course) before any ‘@synindex’ or ‘@syncodeindex’
commands (*note* Texinfo File Header::).

   As mentioned earlier (*note* Predefined Indices::), we recommend
having a single index in the final document whenever possible (no matter
how many source indices you use), since then readers have only one place
to look.

   When creating an index, TeX creates a file whose extension is the
name of the index (*note* Names of index files::).  Therefore you should
avoid using index names that collide with extensions used for other
purposes, such as ‘.aux’ or ‘.xml’.  ‘texi2any’ already reports an error
if a new index conflicts well-known extension name.


File: texinfo.info,  Node: Insertions,  Next: Breaks,  Prev: Indices,  Up: Top

# /11 Special Insertions
*********************

Texinfo provides several commands for inserting characters that have
special meaning in Texinfo, such as braces, and for other graphic
elements that do not correspond to simple characters you can type.

* Menu:

* Special Characters::         Inserting @ {} , \ # &
* Inserting Quote Characters:: Inserting left and right quotes, in code.
* Inserting Space::            Inserting the right amount of whitespace.
* Inserting Accents::          Inserting accents and special characters.
* Inserting Quotation Marks::  Inserting quotation marks.
* Inserting Subscripts and Superscripts::  Inserting sub/superscripts.
* Inserting Math::             Formatting mathematical expressions.
* Glyphs for Text::            Inserting dots, bullets, currencies, etc.
* Glyphs for Programming::     Indicating results of evaluation, expansion of
                               macros, errors, etc.
* Inserting Unicode::          Inserting a Unicode character by code point.


File: texinfo.info,  Node: Special Characters,  Next: Inserting Quote Characters,  Up: Insertions

11.1 Special Characters: Inserting @ {} , \ # &
===============================================

‘@’ and curly braces are the basic special characters in Texinfo.  To
insert these characters so they appear in text, you must put an ‘@’ in
front of these characters to prevent Texinfo from misinterpreting them.
Alphabetic commands are also provided.

   The other characters (comma, backslash, hash, ampersand) are special
only in restricted contexts, as explained in the respective sections.

* Menu:

* Inserting an Atsign::        ‘@@’, ‘@atchar{}’.
* Inserting Braces::           ‘@{ @}’, ‘@l rbracechar{}’.
* Inserting a Comma::          , and ‘@comma{}’.
* Inserting a Backslash::      \ and ‘@backslashchar{}’.
* Inserting a Hashsign::       # and ‘@hashchar{}’.
* Inserting an Ampersand::     & and ‘@ampchar{}’.


File: texinfo.info,  Node: Inserting an Atsign,  Next: Inserting Braces,  Up: Special Characters

11.1.1 Inserting '@' with ‘@@’ and ‘@atchar{}’
----------------------------------------------

‘@@’ produces a single ‘@’ character in the output.  Do not put braces
after an ‘@@’ command.

   ‘@atchar{}’ also produces a single ‘@’ character in the output.  It
does need following braces, as usual for alphabetic commands.  In inline
conditionals (*note* Inline Conditionals::), it can be necessary to avoid
using the literal ‘@’ character in the source (and may be clearer in
other contexts).


File: texinfo.info,  Node: Inserting Braces,  Next: Inserting a Comma,  Prev: Inserting an Atsign,  Up: Special Characters

11.1.2 Inserting '{ '}' with ‘@{ @}’ and ‘@l rbracechar{}’
----------------------------------------------------------

‘@{’ produces a single ‘{’ in the output, and ‘@}’ produces a single
‘}’.  Do not put braces after either an ‘@{’ or an ‘@}’ command.

   ‘@lbracechar{}’ and ‘@rbracechar{}’ also produce single ‘{’ and ‘}’
characters in the output.  They do need following braces, as usual for
alphabetic commands.  In inline conditionals (*note* Inline
Conditionals::), it can be necessary to avoid using literal brace
characters in the source (and may be clearer in other contexts).


File: texinfo.info,  Node: Inserting a Comma,  Next: Inserting a Backslash,  Prev: Inserting Braces,  Up: Special Characters

11.1.3 Inserting ',' with ‘@comma{}’
------------------------------------

Ordinarily, a comma ',' is a normal character that can be simply typed
in your input where you need it.

   However, Texinfo uses the comma as a special character only in one
context: to separate arguments to those Texinfo commands, such as
‘@node’ (*note* Node Line Requirements::), ‘@acronym’ (*note* @acronym::)
and ‘@xref’ (*note* Cross References::), as well as user-defined macros
(*note* Defining Macros::), which take more than one argument.

   Since a comma character would confuse Texinfo's parsing for these
commands, you must use the command ‘@comma{}’ instead if you want to
pass an actual comma.  Here are some examples:

     @acronym{ABC, A Bizarre @comma{}}
     @xref{Comma,, The @comma{} symbol}
     @mymac{One argument@comma{} containing a comma}

   Although ‘@comma{}’ can be used nearly anywhere, there is no need for
it anywhere except in this unusual case.

   (Incidentally, the name ‘@comma’ lacks the ‘char’ suffix used in its
companion commands only for historical reasons.  It didn't seem
important enough to define a synonym.)


File: texinfo.info,  Node: Inserting a Backslash,  Next: Inserting a Hashsign,  Prev: Inserting a Comma,  Up: Special Characters

11.1.4 Inserting '\' with ‘@backslashchar{}’
--------------------------------------------

Ordinarily, a backslash '\' is a normal character in Texinfo that can be
simply typed in your input where you need it.  The result is to typeset
the backslash from the typewriter font.

   However, Texinfo uses the backslash as a special character in one
restricted context: to delimit formal arguments in the bodies of
user-defined macros (*note* Defining Macros::).

   Due to the vagaries of macro argument parsing, it is more reliable to
pass an alphabetic command that produces a backslash instead of using a
literal \.  Hence ‘@backslashchar{}’.  Here is an example macro call:

     @mymac{One argument@backslashchar{} with a backslash}

   Texinfo documents may also use \ as a command character inside
‘@math’ (*note* Inserting Math::).  In this case, ‘@\’ or ‘\backslash’
produce a "math" backslash (from the math symbol font), while
‘@backslashchar{}’ produces a typewriter backslash as usual.

   Although ‘@backslashchar{}’ can be used nearly anywhere, there is no
need for it except in these unusual cases.


File: texinfo.info,  Node: Inserting a Hashsign,  Next: Inserting an Ampersand,  Prev: Inserting a Backslash,  Up: Special Characters

11.1.5 Inserting '#' with ‘@hashchar{}’
---------------------------------------

Ordinarily, a hash '#' is a normal character in Texinfo that can be
simply typed in your input where you need it.  The result is to typeset
the hash character from the current font.

   This character has many other names, varying by locale, such as
"number sign", "pound", and "octothorp".  It is also sometimes called
"sharp" or "sharp sign" since it vaguely resembles the musical symbol by
that name.  In situations where Texinfo is used, "hash" is the most
common in our experience.

   However, Texinfo uses the hash character as a special character in
one restricted context: to introduce the so-called ‘#line’ directive and
variants (*note* External Macro Processors::).

   So, in order to typeset an actual hash character in such a place (for
example, in a program that needs documentation about ‘#line’), it's
necessary to use ‘@hashchar{}’ or some other construct.  Here's an
example:

     @hashchar{} 10 "example.c"

   Although ‘@hashchar{}’ can be used nearly anywhere, there is no need
for it anywhere except this unusual case.


File: texinfo.info,  Node: Inserting an Ampersand,  Prev: Inserting a Hashsign,  Up: Special Characters

11.1.6 Inserting '&' with ‘@&’ and ‘@ampchar{}’
-----------------------------------------------

Ordinarily, an ampersand '&' is a normal character in Texinfo that can
be simply typed in your input where you need it.  The result is to
typeset the ampersand character.

   However, the ampersand character is treated specially in just one
restricted context.  In the argument to a definition command (*note*
Definition Commands::), an ampersand followed by a series of letters may
be typeset specially when processing with TeX (1) (*note* Def Cmd
Conventions::).  For example:

     @defun foo integer1 &optional integer2 &rest integers
     @code{foo} described here.
     @end defun

may have ‘&optional’ and ‘&rest’ formatted in bold, even without any
@-command involved.

   So, in order to typeset an ampersand in such a context, it's
necessary to use ‘@&’ or some other construct.  Here's an example of a
C++ function taking a reference as a parameter:

     @deftypefn Function int foo (const std::vector<int>@& @var{bar})
     Documentation of @code{foo}.
     @end deftypefn

This gives the output

 -- Function: int foo (const std::vector<int>& BAR)
     Documentation of ‘foo’.

   Although ‘@&’ and ‘@ampchar{}’ can be used nearly anywhere, there is
no need for them anywhere except this unusual case.

   ---------- Footnotes ----------

   (1) This syntax is used for Emacs Lisp keywords.  *Note* (elisp)A
Sample Function Description::.


File: texinfo.info,  Node: Inserting Quote Characters,  Next: Inserting Space,  Prev: Special Characters,  Up: Insertions

11.2 Inserting Quote Characters
===============================

As explained in the early section on general Texinfo input conventions
(*note* Conventions::), Texinfo source files use the ASCII character ‘`’
(96 decimal) to produce a left quote ('), and ASCII ‘'’ (39 decimal) to
produce a right quote (').  Doubling these input characters (‘``’ and
‘''’) produces double quotes (" and ").  These are the conventions used
by TeX.

   In examples of computer code, however, ‘`’ and ‘'’ produce typical
renderings for these ASCII characters: the backtick character
(standalone grave accent) and undirected single quote respectively.  In
the past, directed glyphs were used by default in TeX output.  Texinfo
provides these commands to choose between these alternate renderings:

‘@codequoteundirected ON-OFF’
     Set to ‘off’ to output the ‘'’ character in code environments as
     the right curly single quote.

‘@codequotebacktick ON-OFF’
     Set to ‘off’ to output the ‘`’ character in code environments as
     the left curly single quote.

   If you want these settings for only part of the document,
‘@codequote... on’ will restore the normal behavior, as in
‘@codequoteundirected on’.

   These settings affect ‘@code’, ‘@example’, ‘@kbd’, ‘@samp’, ‘@verb’,
and ‘@verbatim’.  *Note* Useful Highlighting::.

   Unfortunately, some document viewers will mangle the directed quote
characters when copying and pasting.  (The free PDF reader ‘xpdf’ works
fine, but other PDF readers, both free and nonfree, have problems.)

   This feature can also be controlled by using ‘@set’ and ‘@clear’ on
the corresponding variables ‘txicodequoteundirected’ and
‘txicodequotebacktick’.


File: texinfo.info,  Node: Inserting Space,  Next: Inserting Accents,  Prev: Inserting Quote Characters,  Up: Insertions

11.3 Inserting Space
====================

The following sections describe commands that control spacing of various
kinds within and after sentences.

* Menu:

* Multiple Spaces::            Inserting multiple spaces.
* Not Ending a Sentence::      Sometimes a . doesn't end a sentence.
* Ending a Sentence::          Sometimes it does.
* @frenchspacing::             Specifying end-of-sentence spacing.
* @dmn::                       Formatting a dimension.


File: texinfo.info,  Node: Multiple Spaces,  Next: Not Ending a Sentence,  Up: Inserting Space

11.3.1 Multiple Spaces
----------------------

Ordinarily, multiple whitespace characters (space, tab, and newline) are
collapsed into a single space.

   Occasionally, you may want to produce several consecutive spaces,
either for purposes of example (e.g., what your program does with
multiple spaces as input), or merely for purposes of appearance in
headings or lists.  Texinfo supports three commands: ‘@SPACE’, ‘@TAB’,
and ‘@NL’, all of which insert a single space into the output.  (Here,
‘@SPACE’ represents an ‘@’ character followed by a space, i.e., ‘@ ’,
‘TAB’ represents an actual tab character, and ‘@NL’ represents an ‘@’
character and end-of-line, i.e., when ‘@’ is the last character on a
line.)

   For example,
     Spacey@ @ @ @
     example.

produces

     Spacey    example.

   Do not follow any of these commands with braces.

   To produce a non-breakable space, see *note* @tie::.


File: texinfo.info,  Node: Not Ending a Sentence,  Next: Ending a Sentence,  Prev: Multiple Spaces,  Up: Inserting Space

11.3.2 Not Ending a Sentence
----------------------------

When a period, exclamation point or question mark is at the end of a
sentence, slightly more space is inserted after it in a typeset manual.

   Usually, Texinfo can determine automatically when a period ends a
sentence.  However, special commands are needed in some circumstances.
Use the ‘@:’ command after a period, question mark, exclamation mark or
colon that should not be followed by extra space.  This is necessary in
the following situations:

  1. After a period that ends a lowercase abbreviation which is not at
     the end of a sentence.

  2. When a parenthetical remark in the middle of a sentence (like this
     one!) ends with a period, exclamation point or question mark, ‘@:’
     should be used after the right parenthesis.  Similarly for right
     brackets and right quotes (both single and double).

   For example:

     ‘foo vs.@: bar (or?)@: baz’,

The first line below shows the output, and for comparison, the second
line shows the spacing when the ‘@:’ commands were not used.

     foo vs. bar (or?) baz
     foo vs.  bar (or?)  baz

   It may help you to remember what ‘@:’ does by imagining that it
stands for an invisible lower-case character that stops a word ending in
a period.

   A few Texinfo commands force normal interword spacing, so that you
don't have to insert ‘@:’ where you otherwise would.  These are the
code-like highlighting commands, ‘@var’, ‘@abbr’, and ‘@acronym’ (*note*
Useful Highlighting::).  For example, in ‘@code{foo. bar}’ the period is
not considered to be the end of a sentence, and no extra space is
inserted.

   ‘@:’ has no effect on the HTML or DocBook output.


File: texinfo.info,  Node: Ending a Sentence,  Next: @frenchspacing,  Prev: Not Ending a Sentence,  Up: Inserting Space

11.3.3 Ending a Sentence
------------------------

As mentioned above, Texinfo normally inserts additional space after the
end of a sentence.  It uses the same heuristic for this as TeX: a
sentence ends with a period, exclamation point, or question mark, either
preceded or followed by optional closing punctuation, and then
whitespace, and _not_ preceded by a capital letter.

   Use ‘@.’ instead of a period, ‘@!’ instead of an exclamation point,
and ‘@?’ instead of a question mark at the end of a sentence that does
end with a capital letter.  Do not put braces after any of these
commands.  For example:

     Give it to M.I.B. and to M.E.W@.  Also, give it to R.J.C@.
     Give it to M.I.B. and to M.E.W.  Also, give it to R.J.C.

The output follows.  In printed output and Info, you can see the desired
extra whitespace after the ‘W’ in the first line.

     Give it to M.I.B. and to M.E.W.  Also, give it to R.J.C.
     Give it to M.I.B. and to M.E.W. Also, give it to R.J.C.

   In other output formats, ‘@.’ is equivalent to a simple ‘.’; likewise
for ‘@!’ and ‘@?’.

   The "closing punctuation" mentioned above is defined as a right
parenthesis (‘)’, right bracket (‘]’), or right quote, either single or
double (‘'’ and ‘''’; the many possible additional Unicode right quotes
are not included).  These characters can be thought of as invisible with
respect to whether a given period ends a sentence.  (This is the same
rule as TeX.)  For instance, the periods in ‘foo.) Bar’ and ‘foo.'' Bar’
do end sentences.

   The meanings of ‘@:’ and ‘@.’, etc. in Texinfo are designed to work
well with the Emacs sentence motion commands (*note* (emacs)Sentences::).
It may help to imagine that the ‘@’ in ‘@.’, etc., is an invisible
lower-case letter 'a' which makes an upper-case letter before it
immaterial for the purposes of deciding whether the period ends the
sentence.

   A few Texinfo commands are not considered as being an abbreviation,
even though they may end with a capital letter when expanded, so that
you don't have to insert ‘@.’ and companions.  Notably, this is the case
for code-like highlighting commands, ‘@var’ arguments ending with a
capital letter, ‘@LaTeX’, and ‘@TeX’.  For example, that sentence ended
with ‘... @code{@@TeX}.’; ‘@.’ was not needed.  Similarly, in ‘...
@var{VARNAME}. Text’ the period after VARNAME ends the sentence; there
is no need to use ‘@.’.


File: texinfo.info,  Node: @frenchspacing,  Next: @dmn,  Prev: Ending a Sentence,  Up: Inserting Space

11.3.4 ‘@frenchspacing’ VAL: Control Sentence Spacing
-----------------------------------------------------

In American typography, it is traditional and correct to put extra space
at the end of a sentence.  This is the default in Texinfo (implemented
in Info and printed output, not in other output formats).  In French
typography (and others), this extra space is wrong; all spaces are
uniform.

   Therefore Texinfo provides the ‘@frenchspacing’ command to control
the spacing after punctuation.  It reads the rest of the line as its
argument, which must be the single word ‘on’ or ‘off’ (always these
words, regardless of the language of the document).  Here is an example:

     @frenchspacing on
     This is text. Two sentences. Three sentences. French spacing.

     @frenchspacing off
     This is text. Two sentences. Three sentences. Non-French spacing.

produces:

   This is text. Two sentences. Three sentences. French spacing.

   This is text.  Two sentences.  Three sentences.  Non-French spacing.

   ‘@frenchspacing’ also affects the output after ‘@.’, ‘@!’, and ‘@?’
(*note* Ending a Sentence::).

   ‘@frenchspacing’ has no effect on the HTML or DocBook output.


File: texinfo.info,  Node: @dmn,  Prev: @frenchspacing,  Up: Inserting Space

11.3.5 ‘@dmn’{DIMENSION}: Format a Dimension
--------------------------------------------

You can use the ‘@dmn’ command to format a dimension with just enough
space for proper typesetting inserted in printed output.  In other
output formats, the formatting commands insert no space at all.

   To use the ‘@dmn’ command, write the number and then follow it
immediately, with no intervening space, by ‘@dmn’, and then by the
dimension within braces.  For example,

     A4 paper is 8.27@dmn{in} wide.

produces

     A4 paper is 8.27in wide.

   Not everyone uses this style.  Some people prefer '8.27 in.' or
'8.27 inches'.  In these cases, however, you need to use ‘@tie’ (*note*
@tie::) or ‘@w’ (*note* @w::) so that no line break can occur between the
number and the dimension.  Also, if you write a period after an
abbreviation within a sentence (as with the 'in.' above), you should
write ‘@:’ after the period to avoid inserting extra whitespace in
printed output, as shown here.  *Note* Not Ending a Sentence::.


File: texinfo.info,  Node: Inserting Accents,  Next: Inserting Quotation Marks,  Prev: Inserting Space,  Up: Insertions

11.4 Inserting Accents
======================

Here is a table with the commands Texinfo provides for inserting
floating accents.  They all need an argument, the character to accent,
which can either be given in braces as usual (‘@'{e}’), or, as a special
case, the braces can be omitted, in which case the argument is the next
character (‘@'e’).  This is to make the source as convenient as possible
to type and read, since accented characters are very common in some
languages.

   If the command is alphabetic, such as ‘@dotaccent’, then there must
be a space between the command name and argument if braces are not used.
If the command is non-alphabetic, such as ‘@'’, then there must _not_ be
a space; the argument is the very next character.

   Exception: the argument to ‘@tieaccent’ must be enclosed in braces
(since it is two characters instead of one).

   In Info and plain text output, accent constructs are output as the
true accented characters if the document encoding supports the required
characters, unless the option ‘--disable-encoding’ is given to
‘texi2any’ (*note* @documentencoding::).  ASCII transliterations are used
if the encoded characters are not output.

Command           Output   What
------------------------------------------------------
@"o               ö        umlaut accent
@'o               ó        acute accent
@,{c}             ç        cedilla accent
@=o               ō        macron/overbar accent
@^o               ô        circumflex accent
@`o               ò        grave accent
@~o               õ        tilde accent
@dotaccent{o}     ȯ        overdot accent
@H{o}             ő        long Hungarian umlaut
@ogonek{a}        ą        ogonek
@ringaccent{o}    o̊        ring accent
@tieaccent{oo}    o͡o       tie-after accent
@u{o}             ŏ        breve accent
@ubaraccent{o}    o̲        underbar accent
@udotaccent{o}    ọ        underdot accent
@v{o}             ǒ        caron/hacek/check accent

   This table lists the Texinfo commands for inserting other characters
commonly used in languages other than English.

@exclamdown{}     ¡       upside-down !
@questiondown{}   ¿       upside-down ?
@aa{} @AA{}       å Å     a,A with circle
@ae{} @AE{}       æ Æ     ae,AE ligatures
@dh{} @DH{}       ð Ð     Icelandic eth
@dotless{i}       ı       dotless i
@dotless{j}       ȷ       dotless j
@l{} @L{}         ł Ł     suppressed-L,l
@o{} @O{}         ø Ø     O,o with slash
@oe{} @OE{}       œ Œ     oe,OE ligatures
@ordf{} @ordm{}   ª º     Spanish ordinals
@ss{}             ß       es-zet or sharp S
@th{} @TH{}       þ Þ     Icelandic thorn


File: texinfo.info,  Node: Inserting Quotation Marks,  Next: Inserting Subscripts and Superscripts,  Prev: Inserting Accents,  Up: Insertions

11.5 Inserting Quotation Marks
==============================

Use doubled single-quote characters to begin and end quotations:
``...''.  Two single quotes are converted to left- and right-hand
doubled quotation marks, "like this".

   You may occasionally need to produce two consecutive single quotes;
for example, in documenting a computer language such as Maxima where ''
is a valid command.  You can do this with the input '@w{}'; the empty
‘@w’ command stops the combination into the double-quote characters.

   The left quote character (`, ASCII code 96) used in Texinfo is a
grave accent in ANSI and ISO character set standards.  We use it as a
quote character because that is how TeX is set up, by default.

   Texinfo supports several other quotation marks used in languages
other than English.  Below is a table with the commands Texinfo provides
for inserting quotation marks.

Command               Glyph   Unicode name (point)
----------------------------------------------------------------------
@quotedblleft{} ``    “       Left double quotation mark (U+201C)
@quotedblright{} ''   ”       Right double quotation mark (U+201D)
@quoteleft{} `        ‘       Left single quotation mark (U+2018)
@quoteright{} '       ’       Right single quotation mark (U+2019)
@quotedblbase{}       „       Double low-9 quotation mark (U+201E)
@quotesinglbase{}     ‚       Single low-9 quotation mark (U+201A)
@guillemetleft{}      «       Left-pointing double angle quotation
                              mark (U+00AB)
@guillemetright{}     »       Right-pointing double angle quotation
                              mark (U+00BB)
@guilsinglleft{}      ‹       Single left-pointing angle quotation
                              mark (U+2039)
@guilsinglright{}     ›       Single right-pointing angle quotation
                              mark (U+203A)

   For the double angle quotation marks, Adobe and LaTeX glyph names are
also supported: ‘@guillemotleft’ and ‘@guillemotright’.  These names are
incorrect; a "guillemot" is a bird species (a type of auk).

   The standard TeX fonts support the usual quotation marks used in
English (the ones produced with single and doubled ASCII single quotes).
For the other quotation marks, TeX uses European Computer Modern (EC)
fonts (‘ecrm1000’ and other variants).  These fonts are freely
available, of course; you can download them from
<http://ctan.org/pkg/ec>, among other places.

   The free EC fonts are bitmap fonts created with Metafont.  Especially
for on-line viewing, Type 1 (vector) versions of the fonts are
preferable; these are available in the CM-Super font package
(<http://ctan.org/pkg/cm-super>).

   Both distributions include installation instructions.

   Traditions for quotation mark usage vary to a great extent between
languages (<https://en.wikipedia.org/wiki/Quotation_mark>).  Texinfo
does not provide commands or configurations for typesetting quotation
marks according to the numerous traditions.  Therefore, you have to
choose the commands appropriate for the language of your manual.
Sometimes aliases (*note* @alias::) can simplify the usage and make the
source code more readable.  For example, in German, ‘@quotedblbase’ is
used for the left double quote, and the right double quote is the glyph
produced by ‘@quotedblleft’, which is counterintuitive.  Thus, in this
case the following aliases would be convenient:

     @alias lgqq = quotedblbase
     @alias rgqq = quotedblleft


File: texinfo.info,  Node: Inserting Subscripts and Superscripts,  Next: Inserting Math,  Prev: Inserting Quotation Marks,  Up: Insertions

11.6 ‘@sub’ and ‘@sup’: Inserting Subscripts and Superscripts
=============================================================

You can insert subscripts and superscripts with the ‘@sub’ and ‘@sup’
commands.  For example:

     here@sub{below}@sup{above}

produces:

     here_{below}^{above}

   In Info and plain text, ‘@sub{TEXT}’ is currently output as ‘_{TEXT}’
and ‘@sup{TEXT}’ as ‘^{TEXT}’, including the literal braces (to mark the
beginning and end of the "script" text to the reader).

   When the output format (and display program) permit (printed output,
HTML), the superscript is set above the subscript when both commands are
given consecutively.

   For subscripts and superscripts in mathematical expressions, it is
better to use TeX's ‘_’ and ‘^’ characters.  See the next section.


File: texinfo.info,  Node: Inserting Math,  Next: Glyphs for Text,  Prev: Inserting Subscripts and Superscripts,  Up: Insertions

11.7 ‘@math’ and ‘@displaymath’: Formatting Mathematics
=======================================================

You can write a mathematical expression, equation or formula using the
‘@math’ command.  Write the TeX math notation between braces, like this:

     @math{\partial_\alpha \partial^\alpha A^\beta = \mu_0 J^\beta}

   ‘@math’ is formatted inline when used inside a paragraph, like
\partial_\alpha \partial^\alpha A^\beta = \mu_0 J^\beta in this example.
The ‘@math’ command has no special effect on the Info output, merely
outputting the contents verbatim.

   For printed output, ‘@math’ switches into TeX "math mode".  In that
context, ‘\’ must be used instead of ‘@’ for plain TeX math control
sequences for symbols, functions, and so on.

   By default, the HTML output is only emphasized.  ‘texi2any’ provides
three options for displaying properly formatted mathematics for HTML.
You can select these with the ‘HTML_MATH’ variable (*note* HTML
Customization Variables::).  With ‘HTML_MATH’ set to ‘l2h’, ‘texi2any’
attempts to use the ‘latex2html’ program to produce image files for
mathematical material.  With the ‘t4h’ setting, ‘texi2any’ attempts to
use the ‘tex4ht’ program.  With the ‘mathjax’ setting, ‘texi2any’
inserts references in the output files to MathJax scripts to format the
material.  The MathJax option requires JavaScript to be enabled in the
browser to work.  See also *note* MathJax Customization Variables::,
*note* latex2html Customization Variables:: and *note* tex4ht
Customization Variables::.

   For displayed equations, you can use the ‘@displaymath’ command.
Example:

     @displaymath
     f(x) = {1\over\sigma\sqrt{2\pi}}
     e^{-{1\over2}\left({x-\mu\over\sigma}\right)^2}
     @end displaymath

which produces:

f(x) = {1\over\sigma\sqrt{2\pi}}
e^{-{1\over2}\left({x-\mu\over\sigma}\right)^2}

   In general, the contents of ‘@math’ or ‘@displaymath’ should be plain
TeX only, with no interspersed Texinfo commands.  If you do use any
Texinfo commands, then you should mark these with ‘@’ as usual, rather
than ‘\’ (e.g.  ‘@var’ rather than ‘\var’), but we do not guarantee
which Texinfo commands will work.

   Although ‘@sub’ and ‘@sup’ may work inside math mode in some
contexts, it is better to use TeX's ‘_’ and ‘^’ characters to denote
subscripts and superscripts within mathematical expressions.

   LaTeX-specific code will only work when the output format is LaTeX,
and with the ‘HTML_MATH’ options (although ‘tex4ht’ needs
‘T4H_MATH_CONVERSION’ to be set to ‘latex’; *note* tex4ht Customization
Variables::).

   Due to the conflict with Texinfo's ‘@sup’ command, you can access the
plain TeX command ‘\sup’ as ‘\mathopsup’ instead, in the unlikely
occurrence that you want to do this (but only when processing with TeX,
not when outputting LaTeX nor with any of the ‘HTML_MATH’ options).


File: texinfo.info,  Node: Glyphs for Text,  Next: Glyphs for Programming,  Prev: Inserting Math,  Up: Insertions

11.8 Glyphs for Text
====================

Texinfo has support for a few additional glyphs that are commonly used
in printed text but not available in ASCII.  Of course, there are many
thousands more.  It is possible to use Unicode characters as-is as far
as ‘texi2any’ is concerned, but TeX is not so lucky.

* Menu:

* @TeX @LaTeX::                The TeX logos.
* @copyright::                 The copyright symbol (c in a circle).
* @registeredsymbol::          The registered symbol (R in a circle).
* @dots::                      How to insert ellipses: ... and ...
* @bullet::                    How to insert a bullet: •
* @euro::                      How to insert the euro currency symbol.
* @pounds::                    How to insert the pounds currency symbol.
* @textdegree::                How to insert the degrees symbol.
* @minus::                     How to insert a minus sign.
* @geq @leq::                  How to insert greater/less-than-or-equal signs.


File: texinfo.info,  Node: @TeX @LaTeX,  Next: @copyright,  Up: Glyphs for Text

11.8.1 ‘@TeX’{} (TeX) and ‘@LaTeX’{} (LaTeX)
--------------------------------------------

Use the ‘@TeX{}’ command to generate 'TeX'.  In a printed manual, this
is a special logo that is different from three ordinary letters.  In
other output formats, it just looks like ‘TeX’.

   Similarly, use the ‘@LaTeX{}’ command to generate 'LaTeX', which is
even more special in printed manuals (and different from the incorrect
‘La@TeX{}’.  In other output formats, the result is just ‘LaTeX’.

   The spelling of these commands is unusual for Texinfo, in that they
use both uppercase and lowercase letters.


File: texinfo.info,  Node: @copyright,  Next: @registeredsymbol,  Prev: @TeX @LaTeX,  Up: Glyphs for Text

11.8.2 ‘@copyright{}’ (©)
-------------------------

Use the ‘@copyright{}’ command to generate the copyright symbol, '©'.
Where possible, this is a ‘c’ inside a circle; otherwise this is ‘(C)’.

   Legally, it's not necessary to use the copyright symbol; the English
word 'Copyright' suffices, according to international treaty.


File: texinfo.info,  Node: @registeredsymbol,  Next: @dots,  Prev: @copyright,  Up: Glyphs for Text

11.8.3 ‘@registeredsymbol{}’ (®)
--------------------------------

Use the ‘@registeredsymbol{}’ command to generate the registered symbol,
'®'.  Where possible, this is an ‘R’ inside a circle; otherwise this is
‘(R)’.


File: texinfo.info,  Node: @dots,  Next: @bullet,  Prev: @registeredsymbol,  Up: Glyphs for Text

11.8.4 ‘@dots’ (...) and ‘@enddots’ (...)
-----------------------------------------

An “ellipsis” (a sequence of dots) would be spaced wrong when typeset as
a string of periods, so a special command is used in Texinfo: use the
‘@dots{}’ command to generate a normal ellipsis, which is three dots in
a row, appropriately spaced ... like so.  To emphasize: do not simply
write three periods in the input file; that could work in some output
formats, but would produce the wrong amount of space between the periods
in printed manuals.

   The ‘@enddots{}’ command generates an end-of-sentence ellipsis, which
also has three dots, but with different spacing afterwards, ...  Look
closely to see the difference.

   Here is an ellipsis: ... Here are three periods in a row: ...

   In printed (and usually HTML) output, the three periods in a row are
much closer together than the dots in the ellipsis.


File: texinfo.info,  Node: @bullet,  Next: @euro,  Prev: @dots,  Up: Glyphs for Text

11.8.5 ‘@bullet’ (•)
--------------------

Use the ‘@bullet{}’ command to generate a large round dot, or the
closest possible thing to one.  An asterisk can also be used.  Here is a
bullet: •

   When you use ‘@bullet’ in ‘@itemize’, you do not need to type the
braces, because ‘@itemize’ supplies them.  (*note* @itemize::).


File: texinfo.info,  Node: @euro,  Next: @pounds,  Prev: @bullet,  Up: Glyphs for Text

11.8.6 ‘@euro’ (€): Euro Currency Symbol
----------------------------------------

Use the ‘@euro{}’ command to generate '€'.  Where possible, this is the
symbol for the Euro currency.  Otherwise, the word ‘Euro’ is used.

   The Euro symbol does not exist in the standard TeX fonts (which were
designed before the Euro was legislated into existence).  Therefore, TeX
uses an additional font, named ‘feymr10’ (along with other variables).
It is freely available, of course; you can download it from
<http://ctan.org/pkg/eurosym>, among other places.  The distribution
includes installation instructions.


File: texinfo.info,  Node: @pounds,  Next: @textdegree,  Prev: @euro,  Up: Glyphs for Text

11.8.7 ‘@pounds’ (£): Pounds Sterling
-------------------------------------

Use the ‘@pounds{}’ command to generate '£'.  Where possible, this is
the symbol for the pounds sterling British currency.  Otherwise, it is
‘#’.


File: texinfo.info,  Node: @textdegree,  Next: @minus,  Prev: @pounds,  Up: Glyphs for Text

11.8.8 ‘@textdegree’ (°): Degrees Symbol
----------------------------------------

Use the ‘@textdegree{}’ command to generate '°'.  Where possible, this
is the normal symbol for degrees.  Otherwise, it is an ‘o’.


File: texinfo.info,  Node: @minus,  Next: @geq @leq,  Prev: @textdegree,  Up: Glyphs for Text

11.8.9 ‘@minus’ (−): Inserting a Minus Sign
-------------------------------------------

Use the ‘@minus{}’ command to generate a minus sign.  Where the
character encoding and font used in the output allow it, the symbol is
the customary length for a minus sign--a little longer than a hyphen,
shorter than an em-dash:

     ‘−’ is a minus sign generated with ‘@minus{}’,

     '-' is a hyphen generated with the character ‘-’,

     '--' is an em-dash for text.

   If you actually want to typeset some math that does a subtraction, it
is better to use ‘@math’, as in ‘@math{a-b}’ (*note* Inserting Math::).


File: texinfo.info,  Node: @geq @leq,  Prev: @minus,  Up: Glyphs for Text

11.8.10 ‘@geq’ (≥) and ‘@leq’ (≤): Inserting Relations
------------------------------------------------------

Use the ‘@geq{}’ and ‘@leq{}’ commands to generate greater-than-or-equal
and less-than-equal-signs, '≥' and '≤'.  When those symbols are not
available, the ASCII sequences ‘>=’ and ‘<=’ are output.


File: texinfo.info,  Node: Glyphs for Programming,  Next: Inserting Unicode,  Prev: Glyphs for Text,  Up: Insertions

11.9 Glyphs for Programming
===========================

In Texinfo, code is often illustrated in examples that are delimited by
‘@example’ and ‘@end example’.  In such examples, you can indicate the
results of evaluation or an expansion using ‘⇒’ or ‘↦’.  Likewise, there
are commands to insert glyphs to indicate printed output, error
messages, equivalence of expressions, the location of point in an
editor, and GUI operation sequences.

   The glyph-insertion commands do not need to be used within an
example, but most often they are.  All glyph-insertion commands are
followed by empty braces.

* Menu:

* Glyphs Summary::             List of the glyph commands.
* @result::                    How to show the result of expression.
* @expansion::                 How to indicate an expansion.
* @print::                     How to indicate generated output.
* @error::                     How to indicate an error message.
* @equiv::                     How to indicate equivalence.
* @point::                     How to indicate the location of point.
* Click Sequences::            Inserting GUI usage sequences.


File: texinfo.info,  Node: Glyphs Summary,  Next: @result,  Up: Glyphs for Programming

11.9.1 Glyphs Summary
---------------------

Here is a summary of the glyph commands:

⇒
     ‘@result{}’ indicates the result of an expression.

↦
     ‘@expansion{}’ indicates the results of a macro expansion.

⊣
     ‘@print{}’ indicates printed output.

error→
     ‘@error{}’ indicates the following text is an error message.

≡
     ‘@equiv{}’ indicates the exact equivalence of two forms.

⋆
     ‘@point{}’ shows the location of point.

A → B
     ‘@clicksequence{A @click{} B}’ indicates a GUI operation sequence:
     first A, then clicking B, or choosing B from a menu, or otherwise
     selecting it.


File: texinfo.info,  Node: @result,  Next: @expansion,  Prev: Glyphs Summary,  Up: Glyphs for Programming

11.9.2 ‘@result{}’ (⇒): Result of an Expression
-----------------------------------------------

Use the ‘@result{}’ command to indicate the result of evaluating an
expression.

   The ‘@result{}’ command is displayed as ‘⇒’, either a double stemmed
arrow or (when that is not available) the ASCII sequence ‘=>’.

   Thus, the following,

     (cdr '(1 2 3))
         ⇒ (2 3)

may be read as "‘(cdr '(1 2 3))’ evaluates to ‘(2 3)’".


File: texinfo.info,  Node: @expansion,  Next: @print,  Prev: @result,  Up: Glyphs for Programming

11.9.3 ‘@expansion{}’ (↦): Indicating an Expansion
--------------------------------------------------

When an expression is a macro call, it expands into a new expression.
You can indicate the result of the expansion with the ‘@expansion{}’
command.

   The ‘@expansion{}’ command is displayed as ‘↦’, either a long arrow
with a flat base or (when that is not available) the ASCII sequence
‘==>’.

   For example, the following

     @example lisp
     (third '(a b c))
         @expansion{} (car (cdr (cdr '(a b c))))
         @result{} c
     @end example

produces

     (third '(a b c))
         ↦ (car (cdr (cdr '(a b c))))
         ⇒ c

which may be read as:

     ‘(third '(a b c))’ expands to ‘(car (cdr (cdr '(a b c))))’; the
     result of evaluating the expression is ‘c’.

Often, as in this case, an example looks better if the ‘@expansion{}’
and ‘@result{}’ commands are indented.


File: texinfo.info,  Node: @print,  Next: @error,  Prev: @expansion,  Up: Glyphs for Programming

11.9.4 ‘@print{}’ (⊣): Indicating Generated Output
--------------------------------------------------

Sometimes an expression will generate output during its execution.  You
can indicate such displayed output with the ‘@print{}’ command.

   The ‘@print{}’ command is displayed as ‘⊣’, either a horizontal dash
butting against a vertical bar or (when that is not available) the ASCII
sequence ‘-|’.

   In the following example, the printed text is indicated with ‘⊣’, and
the value of the expression follows on the last line.

     (progn (print 'foo) (print 'bar))
         ⊣ foo
         ⊣ bar
         ⇒ bar

In a Texinfo source file, this example is written as follows:

     @example lisp
     (progn (print 'foo) (print 'bar))
         @print{} foo
         @print{} bar
         @result{} bar
     @end example


File: texinfo.info,  Node: @error,  Next: @equiv,  Prev: @print,  Up: Glyphs for Programming

11.9.5 ‘@error{}’ (error→): Indicating an Error Message
-------------------------------------------------------

A piece of code may cause an error when you evaluate it.  You can
designate the error message with the ‘@error{}’ command.

   The ‘@error{}’ command is displayed as ‘error→’, either the word
'error' in a box in the printed output, the word error followed by an
arrow in other formats or (when no arrow is available) ‘error-->’.

   Thus,

     @example lisp
     (+ 23 'x)
     @error{} Wrong type argument: integer-or-marker-p, x
     @end example

produces

     (+ 23 'x)
     error→ Wrong type argument: integer-or-marker-p, x

This indicates that the following error message is printed when you
evaluate the expression:

     Wrong type argument: integer-or-marker-p, x

   The word ‘error→’ itself is not part of the error message.


File: texinfo.info,  Node: @equiv,  Next: @point,  Prev: @error,  Up: Glyphs for Programming

11.9.6 ‘@equiv{}’ (≡): Indicating Equivalence
---------------------------------------------

Sometimes two expressions produce identical results.  You can indicate
the exact equivalence of two forms with the ‘@equiv{}’ command.  The
‘@equiv{}’ command is displayed as ‘≡’, either a standard mathematical
equivalence sign (three parallel horizontal lines) or (when that is not
available) as the ASCII sequence ‘==’.

   Thus,

     @example lisp
     (make-sparse-keymap) @equiv{} (list 'keymap)
     @end example

produces

     (make-sparse-keymap) ≡ (list 'keymap)

This indicates that evaluating ‘(make-sparse-keymap)’ produces identical
results to evaluating ‘(list 'keymap)’.


File: texinfo.info,  Node: @point,  Next: Click Sequences,  Prev: @equiv,  Up: Glyphs for Programming

11.9.7 ‘@point{}’ (⋆): Indicating Point in a Buffer
---------------------------------------------------

Sometimes you need to show an example of text in an Emacs buffer.  In
such examples, the convention is to include the entire contents of the
buffer in question between two lines of dashes containing the buffer
name.

   You can use the ‘@point{}’ command to show the location of point in
the text in the buffer.  (The symbol for point, of course, is not part
of the text in the buffer; it indicates the place _between_ two
characters where point is located.)

   The ‘@point{}’ command is displayed as ‘⋆’, either a pointed star or
(when that is not available) the ASCII sequence ‘-!-’.

   The following example shows the contents of buffer ‘foo’ before and
after evaluating a Lisp command to insert the word ‘changed’.

     ---------- Buffer: foo ----------
     This is the ⋆contents of foo.
     ---------- Buffer: foo ----------


     (insert "changed ")
         ⇒ nil
     ---------- Buffer: foo ----------
     This is the changed ⋆contents of foo.
     ---------- Buffer: foo ----------


   In a Texinfo source file, the example is written like this:

     @example
     ---------- Buffer: foo ----------
     This is the @point{}contents of foo.
     ---------- Buffer: foo ----------

     (insert "changed ")
         @result{} nil
     ---------- Buffer: foo ----------
     This is the changed @point{}contents of foo.
     ---------- Buffer: foo ----------
     @end example


File: texinfo.info,  Node: Click Sequences,  Prev: @point,  Up: Glyphs for Programming

11.9.8 Click Sequences
----------------------

When documenting graphical interfaces, it is necessary to describe
sequences such as 'Click on ‘File’, then choose ‘Open’, then ...'.
Texinfo offers commands ‘@clicksequence’ and ‘click’ to represent this,
typically used like this:

     ... @clicksequence{File @click{} Open} ...

which produces:

     ... File → Open ...

   The ‘@click’ command produces a right arrow by default; this glyph is
also available independently via the command ‘@arrow{}’.

   You can change the glyph produced by ‘@click’ with the command
‘@clickstyle’, which takes a command name as its single argument on the
rest of the line, much like ‘@itemize’ and friends (*note* @itemize::).
The command should produce a glyph, and the usual empty braces ‘{}’ are
omitted.  Here's an example:

     @clickstyle @result
     ... @clicksequence{File @click{} Open} ...

now produces:

     ... File ⇒ Open ...


File: texinfo.info,  Node: Inserting Unicode,  Prev: Glyphs for Programming,  Up: Insertions

11.10 Inserting Unicode: ‘@U’
=============================

The command ‘@U{HEX}’ inserts a representation of the Unicode character
U+HEX.  For example, ‘@U{0132}’ inserts the Dutch 'IJ' ligature ('Ĳ').

   The HEX value should be at least four hex digits; leading zeros are
_not_ added.  In general, HEX must specify a valid normal Unicode
character; e.g., U+10FFFF (the very last code point) is invalid by
definition, and thus cannot be inserted this way.

   ‘@U’ is useful for inserting occasional glyphs for which Texinfo has
no dedicated command, while allowing the Texinfo source to remain purely
7-bit ASCII for maximum portability.

   This command has many limitations--the same limitations as inserting
Unicode characters in UTF-8 or another binary form.  First and most
importantly, TeX knows nothing about most of Unicode.  Supporting
specific additional glyphs upon request is possible, but it's not viable
for ‘texinfo.tex’ to support whole additional scripts (Japanese, Urdu,
...).  The ‘@U’ command does nothing to change this.  If the specified
character is not supported in TeX, an error is given.  LaTeX output has
more possibilities regarding UTF-8, but could require extra code to load
fonts and declare how UTF-8 characters are output.  (*Note*
@documentencoding::.)

   In HTML and DocBook, the output from ‘@U’ is always an entity
reference of the form ‘&#xHEX;’, as in ‘&#x0132;’ for the example above.
This should work even when an HTML document uses some other encoding
(say, Latin 1) and the given character is not supported in that
encoding.

   In Info and plain text, if the output encoding is not UTF-8, the
output is the ASCII sequence ‘U+HEX’, as in the six ASCII characters
‘U+0132’ for the example above.


File: texinfo.info,  Node: Breaks,  Next: Definition Commands,  Prev: Insertions,  Up: Top

# /12 Forcing and Preventing Breaks
********************************

Line and page breaks can sometimes occur in the 'wrong' place in one or
another form of output.  It's up to you to ensure that text looks right
in all the output formats.

   For example, in a printed manual, page breaks may occur awkwardly in
the middle of an example; to prevent this, you can hold text together
using a grouping command that keeps the text from being split across two
pages.  Conversely, you may want to force a page break where none would
normally occur.

   You can use the break, break prevention, or pagination commands to
fix problematic line and page breaks.

* Menu:

* Break Commands::             Summary of break-related commands.
* Line Breaks::                Forcing line breaks.
* @- @hyphenation::            Helping TeX with hyphenation points.
* @allowcodebreaks::           Controlling line breaks within @code text.
* @w::                         Preventing unwanted line breaks in text.
* @tie::                       Inserting an unbreakable but varying space.
* @sp::                        Inserting blank lines.
* @page::                      Forcing the start of a new page.
* @group::                     Preventing unwanted page breaks.
* @need::                      Another way to prevent unwanted page breaks.


File: texinfo.info,  Node: Break Commands,  Next: Line Breaks,  Up: Breaks

12.1 Break Commands
===================

The break commands create or allow line and paragraph breaks:

‘@*’
     Force a line break.

‘@sp N’
     Skip N blank lines.

‘@-’
     Insert a discretionary hyphen.

‘@hyphenation{HY-PHEN-A-TED WORDS}’
     Define hyphen points in HY-PHEN-A-TED WORDS.

   These commands hold text together on a single line:

‘@w{TEXT}’
     Prevent TEXT from being split and hyphenated across two lines.

‘@tie{}’
     Insert a normal interword space at which a line break may not
     occur.

   The pagination commands apply only to printed output, since other
output formats do not have pages.

‘@page’
     Start a new page.

‘@group’
     Hold text together that must appear on one page.

‘@need MILS’
     Start a new page if not enough space on this one.


File: texinfo.info,  Node: Line Breaks,  Next: @- @hyphenation,  Prev: Break Commands,  Up: Breaks

12.2 ‘@*’ and ‘@/’: Generate and Allow Line Breaks
==================================================

The ‘@*’ command forces a line break in all output formats.  The ‘@/’
command allows a line break (printed manual only).

   Here is an example with ‘@*’:

     This sentence is broken @*into two lines.

produces

     This sentence is broken
     into two lines.

   The ‘@/’ command can be useful within long URLs or other identifiers
where TeX can't find a good place to break.  TeX will automatically
break URLs at the natural places (*note* URL Line Breaking::), so only
use ‘@/’ if you need it.  ‘@/’ has no effect on the other output
formats.


File: texinfo.info,  Node: @- @hyphenation,  Next: @allowcodebreaks,  Prev: Line Breaks,  Up: Breaks

12.3 ‘@-’ and ‘@hyphenation’: Hyphenation in Printed Output
===========================================================

Although TeX's hyphenation algorithm is generally pretty good, it does
miss useful hyphenation points from time to time.  (Or, far more rarely,
insert an incorrect hyphenation.)  So, for documents with an unusual
vocabulary or when fine-tuning for a printed edition, you may wish to
specify hyphenation points explicitly.  Texinfo supports two commands
for this:

‘@-’

     Insert a discretionary hyphen, i.e., a place where a word can be
     broken across lines with a hyphen.  This is especially useful when
     you notice that an overfull hbox is due to TeX missing a
     hyphenation (*note* Overfull hboxes::).  TeX will not insert any
     hyphenation points itself into a word containing ‘@-’.

‘@hyphenation{HY-PHEN-A-TED WORDS}’
     Give hyphenation points for certain words.  For example:
          @hyphenation{man-u-script man-u-scripts}

     As shown, you put a ‘-’ at each hyphenation point.  TeX only uses
     the specified hyphenation points when the words match exactly, so
     give all necessary variants, such as plurals.

   Non-printed output is not hyphenated, so none of these commands have
any effect in other output formats.


File: texinfo.info,  Node: @allowcodebreaks,  Next: @w,  Prev: @- @hyphenation,  Up: Breaks

12.4 ‘@allowcodebreaks’: Control Line Breaks in ‘@code’
=======================================================

Ordinarily, TeX considers breaking lines at ‘-’ and ‘_’ characters
within ‘@code’ and related commands (*note* @code::), more or less as if
they were "empty" hyphenation points.

   This is necessary since many manuals, especially for Lisp-family
languages, must document very long identifiers.  On the other hand, some
manuals don't have this problem, and you may not wish to allow a line
break at the underscore in, for example, ‘SIZE_MAX’, or even worse,
after any of the four underscores in ‘__typeof__’.

   So Texinfo provides this command:

     @allowcodebreaks false

to prevent from breaking at ‘-’ or ‘_’ within ‘@code’.  You can go back
to allowing such breaks with ‘@allowcodebreaks true’.  Write these
commands on lines by themselves.

   These commands can be given anywhere in the document.  For example,
you may have just one problematic paragraph where you need to turn off
the breaks, but want them in general, or vice versa.

   This command has no effect except in TeX output.


File: texinfo.info,  Node: @w,  Next: @tie,  Prev: @allowcodebreaks,  Up: Breaks

12.5 ‘@w’{TEXT}: Prevent Line Breaks
====================================

‘@w{TEXT}’ outputs TEXT, while prohibiting line breaks within TEXT.

   Thus, you can use ‘@w’ to produce a non-breakable space, fixed at the
width of a normal interword space:

     @w{ } @w{ } @w{ } indentation.

produces:

           indentation.

   The space from ‘@w{ }’, as well as being non-breakable, also will not
stretch or shrink.  Sometimes that is what you want, for instance if
you're doing manual indenting.  However, usually you want a normal
interword space that does stretch and shrink (in the printed output);
for that, see the ‘@tie’ command in the next section.

   In printed output, you can also use the ‘@w’ command to prevent a
long name or phrase being automatically hyphenated, for example if it
happens to fall near the end of a line.

   You can also use ‘@w’ to avoid unwanted keyword expansion in source
control systems.  For example, to literally write $Id$ in your document,
use ‘@w{$}Id$’.  This trick isn't effective for output files in some
output formats, though.


File: texinfo.info,  Node: @tie,  Next: @sp,  Prev: @w,  Up: Breaks

12.6 ‘@tie{}’: Inserting an Unbreakable Space
=============================================

The ‘@tie{}’ command produces a normal interword space at which a line
break may not occur.  Always write it with following (empty) braces, as
usual for commands used within a paragraph.  Here's an example:

     @TeX{} was written by Donald E.@tie{}Knuth.

produces:

     TeX was written by Donald E. Knuth.

   There are two important differences between ‘@tie{}’ and ‘@w{ }’:

   • The space produced by ‘@tie{}’ will stretch and shrink slightly
     along with the normal interword spaces in the paragraph; the space
     produced by ‘@w{ }’ will not vary.

   • ‘@tie{}’ allows hyphenation of the surrounding words, while ‘@w{ }’
     inhibits hyphenation of those words (for TeXnical reasons, namely
     that it produces an ‘\hbox’).


File: texinfo.info,  Node: @sp,  Next: @page,  Prev: @tie,  Up: Breaks

12.7 ‘@sp’ N: Insert Blank Lines
================================

A line beginning with and containing only ‘@sp N’ generates N blank
lines of space.  ‘@sp’ also forces a paragraph break.  For example,

     @sp 2

generates two blank lines.

   The ‘@sp’ command is most often used in the title page.


File: texinfo.info,  Node: @page,  Next: @group,  Prev: @sp,  Up: Breaks

12.8 ‘@page’: Start a New Page
==============================

A line containing only ‘@page’ starts a new page in a printed manual.
In other formats, without the concept of pages, it starts a new
paragraph.  A ‘@page’ command is often used in the ‘@titlepage’ section
of a Texinfo file to start the copyright page.


File: texinfo.info,  Node: @group,  Next: @need,  Prev: @page,  Up: Breaks

12.9 ‘@group’: Prevent Page Breaks
==================================

The ‘@group’ command is used to hold an example together on one page.
Use it inside an ‘@example’ or similar construct to begin an
unsplittable vertical group, which will appear entirely on one page in
the printed output.  Terminate the group by a line containing only ‘@end
group’.  This command has an effect in TeX output only.

   The ‘@group’ and ‘@end group’ commands need to be inside the
‘@example’ and ‘@end example’ commands, thus:

     @example
     @group
     ...
     @end group
     @end example

   Although ‘@group’ would make sense conceptually in a wide variety of
contexts, its current implementation works only within ‘@example’ and
variants, and within ‘@display’, ‘@format’, ‘@flushleft’ and
‘@flushright’.  *Note* Quotations and Examples::.  (What all these
commands have in common is that each line of input produces a line of
output.)


File: texinfo.info,  Node: @need,  Prev: @group,  Up: Breaks

12.10 ‘@need MILS’: Prevent Page Breaks
=======================================

A line containing only ‘@need N’ starts a new page in a printed manual
if fewer than N mils (thousandths of an inch) remain on the current
page.  Do not use braces around the argument N.  The ‘@need’ command has
no effect on other output formats since they are not paginated.

   This paragraph is preceded by a ‘@need’ command that starts a new
page in printed output if fewer than 800 mils (eight-tenths inch) remain
on the page.  It looks like this:

     @need 800
     This paragraph is preceded by ...

   The ‘@need’ command is useful for preventing orphans: single lines at
the bottoms of printed pages.


File: texinfo.info,  Node: Definition Commands,  Next: Internationalization,  Prev: Breaks,  Up: Top

# /13 Definition Commands
**********************

The ‘@deffn’ command and the other “definition commands” enable you to
describe functions, variables, macros, commands, user options, special
forms and other entities in a uniform format.

   In the output, the name of the entity is shown with any arguments,
along with the entity category --'Function', 'Variable', or whatever.
Underneath, the body of the definition is indented.  The name of the
entity is also entered into the appropriate index.

   All the definition commands follow a similar format.  This chapter
starts by describing ‘@deffn’ before detailing all the other definition
commands.

* Menu:

* Def Cmd Template::           Writing descriptions using definition commands.
* Def Cmd Continuation Lines:: Continuing the heading over source lines.
* Optional Arguments::         Handling optional and repeated arguments.
* No Space After Definition Name::  How to omit space after name.
* @deffnx::                    Group two or more 'first' lines.
* Def Cmds in Detail::         Reference for all the definition commands.
* Generic Definition Commands::  Without automatic index entries.
* Def Cmd Conventions::        Conventions for writing definitions.
* Sample Function Definition:: An example.


File: texinfo.info,  Node: Def Cmd Template,  Next: Def Cmd Continuation Lines,  Up: Definition Commands

13.1 The Template for a Definition
==================================

     @deffn CATEGORY NAME ARGUMENTS...
     BODY-OF-DEFINITION
     @end deffn

The ‘@deffn’ command is used for definitions of entities that resemble
functions--entities that may take arguments.  Write the ‘@deffn’ command
at the beginning of a line and follow it on the same line by the
category of the entity, the name of the entity itself, and its arguments
(if any).  Then write the body of the definition on succeeding lines.
Finally, end the definition with an ‘@end deffn’ command written on a
line of its own.

For example,

     @deffn Command forward-word count
     This command moves point forward @var{count} words
     (or backward if @var{count} is negative). ...
     @end deffn

produces

      -- Command: forward-word count
          This command moves point forward COUNT words (or backward if
          COUNT is negative).  ...

   Capitalize the category name like a title.  If the name of the
category contains spaces, as in the phrase 'Interactive Command',
enclose it in braces.  For example:

     @deffn {Interactive Command} isearch-forward
     ...
     @end deffn

Otherwise, the second word will be mistaken for the name of the entity.
As a general rule, when any of the arguments in the heading line
_except_ the last one are more than one word, you need to enclose them
in braces.  This may also be necessary if the text contains commands,
for example, ‘{declaraci@'on}’ if you are writing in Spanish.

   The category is output in a different location for different output
formats.  For example, in the Info file, the category appears at the
beginning of the first line of the definition.  With TeX output, the
category is printed next to the right margin.

   ‘@deffn’ enters names into the index of functions.

   Three predefined, specialized variations of ‘@deffn’ (‘@defun’,
‘@defmac’, and ‘@defspec’) specify the category for you: "Function",
"Macro", and "Special Form" respectively.  (In Lisp, a special form is
an entity much like a function.)  Similarly, the general ‘@defvr’
command is accompanied by several specialized variations for describing
particular kinds of variables.


File: texinfo.info,  Node: Def Cmd Continuation Lines,  Next: Optional Arguments,  Prev: Def Cmd Template,  Up: Definition Commands

13.2 Definition Command Continuation Lines
==========================================

The heading line of a definition command can get very long.  Therefore,
Texinfo has a special syntax allowing them to be continued over multiple
lines of the source file: a lone ‘@’ at the end of each line to be
continued.  Here's an example:

     @defun fn-name @
       arg1 arg2 arg3
     This is the basic continued defun.
     @end defun

produces:

 -- Function: fn-name arg1 arg2 arg3
     This is the basic continued defun.

As you can see, the continued lines are combined, as if they had been
typed on one source line.

   Although this example only shows a one-line continuation,
continuations may extend over any number of lines, in the same way; put
an ‘@’ at the end of each line to be continued.

   In general, any number of spaces or tabs before the ‘@’ continuation
character are collapsed into a single space.  There is one exception:
the Texinfo processors will not fully collapse whitespace around a
continuation inside braces.  For example:

     @deffn {Category @
       Name} ...

The output (not shown) has excess space between 'Category' and 'Name'.
To avoid this, elide the unwanted whitespace in your input, or put the
continuation ‘@’ outside braces.

   ‘@’ does not function as a continuation character in _any_ other
context.  Ordinarily, ‘@’ followed by a whitespace character (space,
tab, newline) produces a normal interword space (*note* Multiple
Spaces::).


File: texinfo.info,  Node: Optional Arguments,  Next: No Space After Definition Name,  Prev: Def Cmd Continuation Lines,  Up: Definition Commands

13.3 Optional and Repeated Arguments
====================================

Some entities take optional or repeated arguments.  One convention for
indicating these uses square brackets and ellipses: an argument enclosed
within square brackets is optional, and an argument followed by an
ellipsis is optional and may be repeated more than once.

   Thus, [OPTIONAL-ARG] means that OPTIONAL-ARG is optional and
REPEATED-ARGS‘...’ stands for zero or more arguments.  Parentheses are
used when several arguments are grouped into additional levels of list
structure in Lisp.

   Here is the definition line of an example of an imaginary
(complicated) special form:

      -- Special Form: foobar (var [from to [inc]]) body...

In this example, the arguments FROM and TO are optional, but must both
be present or both absent.  If they are present, INC may optionally be
specified as well.  These arguments are grouped with the argument VAR
into a list, to distinguish them from BODY, which includes all remaining
elements of the form.

   In a Texinfo source file, this ‘@defspec’ line is written like this:

     @defspec foobar (var [from to [inc]]) body@dots{}


File: texinfo.info,  Node: No Space After Definition Name,  Next: @deffnx,  Prev: Optional Arguments,  Up: Definition Commands

13.4 Omitting the Space After a Definition Name
===============================================

As a matter of style or as demanded by the syntax of a programming
language, you may wish to omit any space after a name in a definition,
occurring before an opening bracket.  To do this, set the
‘txidefnamenospace’ flag (*note* @set @value::).  For example, this input

     @set txidefnamenospace
     @deffn Builtin index (string, substring)
     @dots{}
     @end deffn

produces the following:

 -- Builtin: index(string, substring)
     ...


File: texinfo.info,  Node: @deffnx,  Next: Def Cmds in Detail,  Prev: No Space After Definition Name,  Up: Definition Commands

13.5 ‘@deffnx’, et al.: Two or More 'First' Lines
=================================================

To create two or more 'first' or header lines for a definition, follow
the first ‘@deffn’ line by a line beginning with ‘@deffnx’.

   For example,

     @deffn {Interactive Command} isearch-forward
     @deffnx {Interactive Command} isearch-backward
     These two search commands are similar except ...
     @end deffn

produces

 -- Interactive Command: isearch-forward
 -- Interactive Command: isearch-backward
     These two search commands are similar except ...

   Each definition command has an 'x' form: ‘@defunx’, ‘@defvrx’,
‘@deftypefunx’, etc.

   The 'x' forms work similarly to ‘@itemx’ (*note* @itemx::).


File: texinfo.info,  Node: Def Cmds in Detail,  Next: Generic Definition Commands,  Prev: @deffnx,  Up: Definition Commands

13.6 The Definition Commands
============================

This section describes all the definition commands of Texinfo.

* Menu:

* Functions Commands::         Commands for functions and similar entities.
* Typed Functions::            Commands for functions in typed languages.
* Variables Commands::         Commands for variables and similar entities.
* Typed Variables::            Commands for variables in typed languages.
* Data Types::                 The definition command for data types.
* Abstract Objects::           Commands for object-oriented programming.


File: texinfo.info,  Node: Functions Commands,  Next: Typed Functions,  Up: Def Cmds in Detail

13.6.1 Functions and Similar Entities
-------------------------------------

This section describes the commands for describing functions and similar
entities with simple arguments:

‘@deffn CATEGORY NAME ARGUMENTS...’
     The ‘@deffn’ command is the general definition command for
     functions, interactive commands, and similar entities that may take
     simple arguments.  You must choose a term to describe the category
     of entity being defined; for example, "Function" could be used if
     the entity is a function.  The ‘@deffn’ command is written at the
     beginning of a line and is followed on the same line by the
     category of entity being described, the name of this particular
     entity, and its arguments, if any.  Terminate the definition with
     ‘@end deffn’ on a line of its own.

     For example, here is a definition:

          @deffn Command forward-char nchars
          Move point forward @var{nchars} characters.
          @end deffn

     This shows a rather terse definition for a "command" named
     ‘forward-char’ with one argument, NCHARS.

     Where the output format allows, ‘@deffn’ uses a typewriter font for
     NAME, and a slanted font for the rest of the ARGUMENTS, as would be
     produced by ‘@var’.

     Within the text of the description, write an argument name
     explicitly with ‘@var’ to refer to the value of the argument.  In
     the example above, we used ‘@var{nchars}’ in this way.

     In the extremely unusual case when an argument name contains ‘--’,
     or another character sequence which is treated specially (*note*
     Conventions::), use ‘@code’ around the special characters.  This
     avoids the conversion to typographic en-dashes and em-dashes.

‘@defun NAME ARGUMENTS...’
     The ‘@defun’ command is the definition command for functions with
     simple arguments.  ‘@defun’ is equivalent to ‘@deffn Function ...’.
     Terminate the definition with ‘@end defun’ on a line of its own.

‘@defmac NAME ARGUMENTS...’
     The ‘@defmac’ command is the definition command for macros.
     ‘@defmac’ is equivalent to ‘@deffn Macro ...’ and works like
     ‘@defun’.

‘@defspec NAME ARGUMENTS...’
     The ‘@defspec’ command is the definition command for special forms.
     (In Lisp, a special form is an entity much like a function; *note*
     (elisp)Special Forms::.)  ‘@defspec’ is equivalent to ‘@deffn
     {Special Form} ...’ and works like ‘@defun’.

   All these commands create entries in the index of functions.


File: texinfo.info,  Node: Typed Functions,  Next: Variables Commands,  Prev: Functions Commands,  Up: Def Cmds in Detail

13.6.2 Functions in Typed Languages
-----------------------------------

The ‘@deftypefn’ command and its variants are generic commands for
describing functions.  They are particularly suitable for languages in
which you must declare types of variables and functions, such as C and
C++.

‘@deftypefn CATEGORY DATA-TYPE NAME ARGUMENTS...’
     The ‘@deftypefn’ command is the general definition command for
     functions and similar entities that may take arguments and that
     could be typed.  The ‘@deftypefn’ command is written at the
     beginning of a line and is followed on the same line by the
     category of entity being described, information on the returned
     value, the name of this particular entity, and its arguments, if
     any.

     For example,

          @deftypefn {Library Function} int foobar @
            (int @var{foo}, float @var{bar})
          ...
          @end deftypefn

     produces:

           -- Library Function: int foobar (int FOO, float BAR)
               ...

     This means that ‘foobar’ is a "library function" that returns an
     ‘int’, and its arguments are FOO (an ‘int’) and BAR (a ‘float’).
     ‘Library Function’ has to be enclosed in braces to make it a single
     argument.

     When using ‘@deftypefn’ command and variations, you should mark
     parameter names with ‘@var’ to distinguish these from data type
     names, keywords, and other parts of the literal syntax of the
     programming language.  Where the output format allows, all output
     on the definition line is in a typewriter font by default.  ‘@var’
     uses an appropriate font where it occurs.

     If you are describing a procedure in a language that has packages,
     such as Ada, you might consider using ‘@deftypefn’ in the following
     manner:

          @deftypefn stacks private push @
                 (@var{s}:in out stack; @
                 @var{n}:in integer)
          ...
          @end deftypefn

     (In these examples the ‘@deftypefn’ arguments are shown using
     continuations (*note* Def Cmd Continuation Lines::), but could be on
     a single line.)

     In this instance, the procedure is classified as belonging to the
     package ‘stacks’ rather than classified as a 'procedure' and its
     data type is described as ‘private’.  (The name of the procedure is
     ‘push’, and its arguments are S and N.)  Output:

      -- stacks: private push (S:in out stack; N:in integer)
          ...

     ‘@deftypefn’ and variants could be used when it is convenient to
     interpret the arguments list as literal computer code, marking
     argument names with ‘@var’.  It is not necessary for any type names
     to appear, and you can give an empty return type as ‘{}’.

     The information on return values may be used to name the return
     variables.  For example, in Perl, returned scalars may be given the
     $RESULT and $STATUS name in the following manner:

          @deftypefn {Sub} {(@var{$result}, @var{$status} =)} @
                               process (@var{$input})
          ... Set @var{$status} to 0 in case of failure ...
          @end deftypefn

     to get output like

      -- Sub: ($RESULT, $STATUS) = process ($INPUT)
          ... Set $STATUS to 0 in case of failure ...

     ‘@deftypefn’ creates an entry in the index of functions for NAME.

‘@deftypefun DATA-TYPE NAME ARGUMENTS...’
     The ‘@deftypefun’ command is the specialized definition command for
     functions.  The command is equivalent to ‘@deftypefn Function ...’.

     ‘@deftypefun’ creates an entry in the index of functions for NAME.

   Ordinarily, the return type is printed on the same line as the
function name and arguments, as shown above.  In source code, GNU style
for typed functions is to put the return type on a line by itself.  So
Texinfo provides an option to do that: ‘@deftypefnnewline on’.

   This affects the generic functions only--not untyped functions with
simple arguments such as ‘@deffn’, not typed variables, etc.
Specifically, it affects the commands in this section, and the analogous
commands for object-oriented languages, namely ‘@deftypeop’ and
‘@deftypemethod’ (*note* Object-Oriented Methods::).

   Specifying ‘@deftypefnnewline off’ reverts to the default.


File: texinfo.info,  Node: Variables Commands,  Next: Typed Variables,  Prev: Typed Functions,  Up: Def Cmds in Detail

13.6.3 Variables and Similar Entities
-------------------------------------

Here are the commands for defining variables and similar entities:

‘@defvr CATEGORY NAME’
     The ‘@defvr’ command is a general definition command for something
     like a variable--an entity that records a value.  You must choose a
     term to describe the category of entity being defined; for example,
     "Variable" could be used if the entity is a variable.  Write the
     ‘@defvr’ command at the beginning of a line and follow it on the
     same line by the category of the entity and the name of the entity.

     We recommend capitalizing the category name like a title.  If the
     name of the category contains spaces, as in the name "User Option",
     enclose it in braces.  Otherwise, the second word will be mistaken
     for the name of the entity.  For example,

          @defvr {User Option} fill-column
          This buffer-local variable specifies
          the maximum width of filled lines.
          ...
          @end defvr

     Terminate the definition with ‘@end defvr’ on a line of its own.

     ‘@defvr’ creates an entry in the index of variables for NAME.

‘@defvar NAME’
     The ‘@defvar’ command is the definition command for variables.
     ‘@defvar’ is equivalent to ‘@defvr Variable ...’.

     For example:

          @defvar kill-ring
          ...
          @end defvar

     ‘@defvar’ creates an entry in the index of variables for NAME.

‘@defopt NAME’
     The ‘@defopt’ command is the definition command for “user options”,
     i.e., variables intended for users to change according to taste;
     Emacs has many such (*note* (emacs)Variables::).  ‘@defopt’ is
     equivalent to ‘@defvr {User Option} ...’.


File: texinfo.info,  Node: Typed Variables,  Next: Data Types,  Prev: Variables Commands,  Up: Def Cmds in Detail

13.6.4 Variables in Typed Languages
-----------------------------------

Variables in typed languages are handled in a manner similar to
functions in typed languages.  *Note* Typed Functions::.  The general
definition command ‘@deftypevr’ corresponds to ‘@deftypefn’ and the
specialized definition command ‘@deftypevar’ corresponds to
‘@deftypefun’.

‘@deftypevr CATEGORY DATA-TYPE NAME’
     The ‘@deftypevr’ command is the general definition command for
     something like a variable in a typed language--an entity that
     records a value.  You must choose a term to describe the category
     of the entity being defined; for example, "Variable" could be used
     if the entity is a variable.

     The ‘@deftypevr’ command is written at the beginning of a line and
     is followed on the same line by the category of the entity being
     described, the data type, and the name of this particular entity.

     For example:

          @deftypevr {Global Flag} int enable
          ...
          @end deftypevr

     produces the following:

           -- Global Flag: int enable
               ...

‘@deftypevar DATA-TYPE NAME’
     The ‘@deftypevar’ command is the specialized definition command for
     variables in typed languages.  ‘@deftypevar’ is equivalent to
     ‘@deftypevr Variable ...’.

   These commands create entries in the index of variables.


File: texinfo.info,  Node: Data Types,  Next: Abstract Objects,  Prev: Typed Variables,  Up: Def Cmds in Detail

13.6.5 Data Types
-----------------

Here is the command for data types:

‘@deftp CATEGORY NAME ATTRIBUTES...’
     The ‘@deftp’ command is the generic definition command for data
     types.  The command is written at the beginning of a line and is
     followed on the same line by the category, by the name of the type
     (which is a word like ‘int’ or ‘float’), and then by names of
     attributes of objects of that type.  Thus, you could use this
     command for describing ‘int’ or ‘float’, in which case you could
     use ‘data type’ as the category.  (A data type is a category of
     certain objects for purposes of deciding which operations can be
     performed on them.)

     In Lisp, for example, “pair” names a particular data type, and an
     object of that type has two slots called the CAR and the CDR.  Here
     is how you would write the first line of a definition of ‘pair’.

          @deftp {Data type} pair car cdr
          ...
          @end deftp

     ‘@deftp’ creates an entry in the index of data types.


File: texinfo.info,  Node: Abstract Objects,  Prev: Data Types,  Up: Def Cmds in Detail

13.6.6 Object-Oriented Programming
----------------------------------

Here are the commands for formatting descriptions about abstract
objects, such as are used in object-oriented programming.  A class is a
defined type of abstract object.  An instance of a class is a particular
object that has the type of the class.  An instance variable is a
variable that belongs to the class but for which each instance has its
own value.

* Menu:

* Variables: Object-Oriented Variables.
* Methods:   Object-Oriented Methods.


File: texinfo.info,  Node: Object-Oriented Variables,  Next: Object-Oriented Methods,  Up: Abstract Objects

13.6.6.1 Object-Oriented Variables
..................................

These commands allow you to define different sorts of variables in
object-oriented programming languages.

‘@defcv CATEGORY CLASS NAME’
     The ‘@defcv’ command is the general definition command for
     variables associated with classes in object-oriented programming.
     The ‘@defcv’ command is followed by three arguments: the category
     of thing being defined, the class to which it belongs, and its
     name.  For instance:

          @defcv {Class Option} Window border-pattern
          ...
          @end defcv

     produces:
      -- Class Option of Window: border-pattern
          ...

     ‘@defcv’ creates an entry in the index of variables.

‘@deftypecv CATEGORY CLASS DATA-TYPE NAME’
     The ‘@deftypecv’ command is the definition command for typed class
     variables in object-oriented programming.  It is analogous to
     ‘@defcv’ with the addition of the DATA-TYPE parameter to specify
     the type of the instance variable.

          @deftypecv {Class Option} Window int border-pattern
          ...
          @end deftypecv

     produces:

      -- Class Option of Window: int border-pattern
          ...

     ‘@deftypecv’ creates an entry in the index of variables.

‘@defivar CLASS NAME’
     The ‘@defivar’ command is the definition command for instance
     variables in object-oriented programming.  ‘@defivar’ is equivalent
     to ‘@defcv {Instance Variable} ...’.  For instance:

          @defivar Window border-pattern
          ...
          @end defivar

     produces:

      -- Instance Variable of Window: border-pattern
          ...

     ‘@defivar’ creates an entry in the index of variables.

‘@deftypeivar CLASS DATA-TYPE NAME’
     The ‘@deftypeivar’ command is the definition command for typed
     instance variables in object-oriented programming.  It is analogous
     to ‘@defivar’ with the addition of the DATA-TYPE parameter to
     specify the type of the instance variable.

          @deftypeivar Window int border-pattern
          ...
          @end deftypeivar

     produces:

      -- Instance Variable of Window: int border-pattern
          ...

     ‘@deftypeivar’ creates an entry in the index of variables.


File: texinfo.info,  Node: Object-Oriented Methods,  Prev: Object-Oriented Variables,  Up: Abstract Objects

13.6.6.2 Object-Oriented Methods
................................

These commands allow you to define different sorts of function-like
entities resembling methods in object-oriented programming languages.
These entities take arguments, as functions do, but are associated with
particular classes of objects.

‘@defop CATEGORY CLASS NAME ARGUMENTS...’
     The ‘@defop’ command is the definition command for these
     method-like entities with simple arguments.

     For example, some systems have constructs called “wrappers” that
     are associated with classes as methods are, but that act more like
     macros than like functions.  You could use ‘@defop Wrapper’ to
     describe one of these.

     Sometimes it is useful to distinguish methods and “operations”.
     You can think of an operation as the specification for a method.
     Thus, a window system might specify that all window classes have a
     method named ‘expose’; we would say that this window system defines
     an ‘expose’ operation on windows in general.  Typically, the
     operation has a name and also specifies the pattern of arguments;
     all methods that implement the operation must accept the same
     arguments, since applications that use the operation do so without
     knowing which method will implement it.

     Often it makes more sense to document operations than methods.  For
     example, window application developers need to know about the
     ‘expose’ operation, but need not be concerned with whether a given
     class of windows has its own method to implement this operation.
     To describe this operation, you would write:

          @defop Operation windows expose

     The ‘@defop’ command is written at the beginning of a line and is
     followed on the same line by the overall name of the category of
     operation, the name of the class of the operation, the name of the
     operation, and its arguments, if any.

     ‘@defop’ creates an entry, such as '‘expose’ on ‘windows’', in the
     index of functions.

‘@deftypeop CATEGORY CLASS DATA-TYPE NAME ARGUMENTS...’
     The ‘@deftypeop’ command is the generic definition command for
     operations in object-oriented programming.  It is particularly
     suitable for typed object-oriented languages.  It is similar to
     ‘@defop’ with the addition of the DATA-TYPE parameter to specify
     information on the return value of the method, for example the
     return type.

‘@defmethod CLASS NAME ARGUMENTS...’
     The ‘@defmethod’ command is the definition command for methods in
     object-oriented programming.  A method is a kind of function that
     implements an operation for a particular class of objects and its
     subclasses.

     ‘@defmethod’ is equivalent to ‘@defop Method ...’.  The command is
     written at the beginning of a line and is followed by the name of
     the class of the method, the name of the method, and its arguments,
     if any.

     For example:
          @defmethod bar-class bar-method argument
          ...
          @end defmethod

     illustrates the definition for a method called ‘bar-method’ of the
     class ‘bar-class’.  The method takes an argument.

     ‘@defmethod’ creates an entry in the index of functions.

‘@deftypemethod CLASS DATA-TYPE NAME ARGUMENTS...’
     The ‘@deftypemethod’ command is the definition command for methods
     in object-oriented languages, in particular for typed languages
     such as C++ and Java.  It is similar to the ‘@defmethod’ command
     with the addition of the DATA-TYPE parameter to specify information
     on the return value of the method, for example the return type.

   The commands with information on return values are affected by the
‘@deftypefnnewline’ option (*note* Functions in Typed Languages: Typed
Functions.).


File: texinfo.info,  Node: Generic Definition Commands,  Next: Def Cmd Conventions,  Prev: Def Cmds in Detail,  Up: Definition Commands

13.7 Generic Definition Commands
================================

Texinfo provides commands for definitions that do not produce automatic
index entries.

   You create a generic definition environment with ‘@defblock’ paired
with ‘@end defblock’.  Within this environment, use a ‘@defline’ or
‘@deftypeline’ line for each symbol you document.  For example:

     @defblock
     @defline Macro mac (arg1, arg2)
     Description of mac.
     @deftypeline Builtin int foo (int @var{bar})
     Description of foo.
     @end defblock

This produces the output:

 -- Macro: mac (arg1, arg2)
     Description of mac.
 -- Builtin: int foo (int BAR)
     Description of foo.

   The syntax of ‘@defline’ is similar to that of ‘@deffn’.  The first
argument gives a category for the definition.  Follow this with the
symbol name, followed by any parameters.  You should surround any
arguments containing spaces with braces.

   You use ‘@deftypeline’ in a similar way to ‘@deftypefn’, following
the category with a data type, and marking any parameters with ‘@var’.
(*Note* Typed Functions::).)

   To share the same description for multiple symbols, you can put
several ‘@defline’ lines together.  For example:

     @defblock
     @defline Function set-var (value)
     @defline {Settable Variable} var
     Description of set-var and var.
     @end defblock

This produces the output:

 -- Function: set-var (value)
 -- Settable Variable: var
     Description of set-var and var.

   It may be useful to define line macros (*note* Line Macros::) in
combination with these commands.


File: texinfo.info,  Node: Def Cmd Conventions,  Next: Sample Function Definition,  Prev: Generic Definition Commands,  Up: Definition Commands

13.8 Conventions for Writing Definitions
========================================

A manual need not and should not contain more than one definition for a
given name.  An appendix containing a summary should use ‘@table’ rather
than the definition commands.

   When you write a definition using ‘@deffn’, ‘@defun’, or one of the
other definition commands, please take care to use arguments that
indicate the meaning, as with the COUNT argument to the ‘forward-word’
function.  Also, if the name of an argument contains the name of a type,
such as INTEGER, take care that the argument actually is of that type.

   _Fonts._  As Texinfo is a semantic language, you should nearly never
need to specify font styles with explicit font commands in definitions
(*note* Fonts::).  However, you may be need to work around problems for
particular output formats and/or constructs.  Here are some
possibilities:

   • Explicitly marking a Lisp keyword like ‘&KEYWORD’ with
     ‘@r{&keyword}’, producing &keyword.

     Note such keywords in definition arguments are (at present)
     rendered in roman in TeX, but this formatting is not done in any
     other output format.

   • ‘@r{@slanted{argument}}’, producing argument, similar to ‘@var’ but
     avoiding upper-casing its argument in Info output.

     In this and the previous point, ‘@r’ resets the font from that
     being used in the definition line context (slanted or typewriter)
     to a roman, upright style.

   • You could use ‘@t’ (or even ‘@r{@t{...’, using ‘@r’ to reset font
     styles) to mark literal syntax on a definition line where text
     would otherwise be output in the slanted roman style.  ‘@code’
     would be inappropriate here as it adds quotation marks in Info
     output.

   Some degree of trial and error may be needed to get the result you
want.  As ever, how nested font commands combine depends on the output
format, so should be avoided where possible.

   Hopefully, such usages are kept to a minimum.  One possibility is to
wrap these in ‘@macro’ (*note* Defining New Texinfo Commands::), allowing
these usages to be easily changed in the future.


File: texinfo.info,  Node: Sample Function Definition,  Prev: Def Cmd Conventions,  Up: Definition Commands

13.9 A Sample Function Definition
=================================

Here is a definition from *note* (elisp)Calling Functions::, using the
‘@defun’ command.  The name of the function, ‘apply’, follows
immediately after the ‘@defun’ command and it is followed, on the same
line, by the parameter list.

      -- Function: apply function &rest arguments
          ‘apply’ calls FUNCTION with ARGUMENTS, just like ‘funcall’ but
          with one difference: the last of ARGUMENTS is a list of
          arguments to give to FUNCTION, rather than a single argument.
          We also say that this list is “appended” to the other
          arguments.

          ‘apply’ returns the result of calling FUNCTION.  As with
          ‘funcall’, FUNCTION must either be a Lisp function or a
          primitive function; special forms and macros do not make sense
          in ‘apply’.

               (setq f 'list)
                   ⇒ list
               (apply f 'x 'y 'z)
               error→ Wrong type argument: listp, z
               (apply '+ 1 2 '(3 4))
                   ⇒ 10
               (apply '+ '(1 2 3 4))
                   ⇒ 10

               (apply 'append '((a b c) nil (x y z) nil))
                   ⇒ (a b c x y z)

          An interesting example of using ‘apply’ is found in the
          description of ‘mapcar’.

   In the Texinfo source file, this example should look like this:

     @defun apply function @r{&rest} arguments
     @code{apply} calls @var{function} with
     @var{arguments}, just like @code{funcall} but with one
     difference: the last of @var{arguments} is a list of
     arguments to give to @var{function}, rather than a single
     argument.  We also say that this list is @dfn{appended}
     to the other arguments.

     @code{apply} returns the result of calling
     @var{function}.  As with @code{funcall},
     @var{function} must either be a Lisp function or a
     primitive function; special forms and macros do not make
     sense in @code{apply}.

     @example
     (setq f 'list)
         @result{} list
     (apply f 'x 'y 'z)
     @error{} Wrong type argument: listp, z
     (apply '+ 1 2 '(3 4))
         @result{} 10
     (apply '+ '(1 2 3 4))
         @result{} 10

     (apply 'append '((a b c) nil (x y z) nil))
         @result{} (a b c x y z)
     @end example

     An interesting example of using @code{apply} is found
     in the description of @code{mapcar}.
     @end defun

In this manual, this function is listed in the Command and Variable
Index under ‘apply’.


File: texinfo.info,  Node: Internationalization,  Next: Conditionals,  Prev: Definition Commands,  Up: Top

# /14 Internationalization
***********************

Texinfo has some support for writing in languages other than English,
although this area still needs considerable work.  (If you are the one
helping to translate the fixed strings written to documents, *note*
Internationalization of Document Strings::.)

   For a list of the various accented and special characters Texinfo
supports, see *note* Inserting Accents::.

* Menu:

* @documentlanguage::          Declaring the current language.
* @documentencoding::          Declaring the input encoding.


File: texinfo.info,  Node: @documentlanguage,  Next: @documentencoding,  Up: Internationalization

14.1 ‘@documentlanguage LL[_CC]’: Set the Document Language
===========================================================

The ‘@documentlanguage’ command declares the current document locale.
Write it on a line by itself, near the beginning of the file.

     @documentlanguage LL[_CC]

   Include a two-letter ISO 639-2 language code (LL) following the
command name, optionally followed by an underscore and two-letter
ISO 3166 two-letter country code (CC).  If you have a multilingual
document, the intent is to be able to use this command multiple times,
to declare each language change.  If the command is not used at all, the
default is ‘en_US’ for US English.

   As with GNU Gettext (*note* (gettext)Top::), if the country code is
omitted, the main dialect is assumed where possible.  For example, ‘de’
is equivalent to ‘de_DE’ (German as spoken in Germany).

   For Info and other online output, this command changes the
translation of various “document strings” such as "see" in
cross-references (*note* Cross References::), "Function" in defuns (*note*
Definition Commands::), and so on.  Some strings, such as "Node:",
"Next:", "Menu:", etc., are keywords in Info output, so are not
translated there; they are translated in other output formats.  In
DocBook output ‘@documentlanguage’ sets the language for following
sections.

   For LaTeX, this command causes code to load the ‘babel’ package to be
output in the preamble, and ‘\selectlanguage’ to be output.

   For TeX, this command causes a file ‘txi-LOCALE.tex’ to be read (if
it exists).  If ‘@documentlanguage’ argument contains the optional ‘_CC’
suffix, this is tried first.  For example, with ‘@documentlanguage
de_DE’, TeX first looks for ‘txi-de_DE.tex’, then ‘txi-de.tex’.

   Such a ‘txi-*’ file is intended to redefine the various English words
used in TeX output, such as 'Chapter', 'See', and so on.  We are aware
that individual words like these cannot always be translated in
isolation, and that a very different strategy would be required for
ideographic (among other) scripts.  Help in improving Texinfo's language
support is welcome.

   ‘@documentlanguage’ also changes TeX's current hyphenation patterns,
if the TeX program being run has the necessary support included.  This
will generally not be the case for ‘tex’ itself, but will usually be the
case for up-to-date distributions of the extended TeX programs ‘etex’
(DVI output) and ‘pdftex’ (PDF output).  ‘texi2dvi’ will use the
extended TeXs if they are available (*note* Format with texi2dvi::).

   Since the lists of language codes and country codes are updated
relatively frequently, we don't attempt to list them here.  The valid
language codes are on the official home page for ISO 639,
<http://www.loc.gov/standards/iso639-2/>.  The country codes and the
official web site for ISO 3166 can be found via
<https://en.wikipedia.org/wiki/ISO_3166>.


File: texinfo.info,  Node: @documentencoding,  Prev: @documentlanguage,  Up: Internationalization

14.2 ‘@documentencoding ENC’: Set Input Encoding
================================================

In the default case, the input and output document encoding are assumed
to be UTF-8, the vast global character encoding, expressed in 8-bit
bytes.  UTF-8 is compatible with 7-bit ASCII. It is recommended to use
UTF-8 encoding for Texinfo manuals.

   The ‘@documentencoding’ command declares the input document encoding,
and also affects the encoding of the output.  Write it on a line by
itself, with a valid encoding specification following, near the
beginning of the file if your document encoding is not the default
encoding.

     @documentencoding ENC

   UTF-8 should always be the best choice for the encoding.  Texinfo
still supports additional encodings, mainly for compatibility with older
manuals(1):

‘US-ASCII’
     Character encoding based on the English alphabet.

‘ISO-8859-1’
‘ISO-8859-15’
‘ISO-8859-2’
     These specify the pre-UTF-8 standard encodings for Western European
     (the first two) and Eastern European languages (the third),
     respectively.  ISO 8859-15 replaces some little-used characters
     from 8859-1 (e.g., precomposed fractions) with more commonly needed
     ones, such as the Euro symbol (€).

     A full description of the encodings is beyond our scope here; one
     useful reference is <http://czyborra.com/charsets/iso8859.html>.

‘koi8-r’
     This was a commonly used encoding for the Russian language before
     UTF-8.

‘koi8-u’
     This was a commonly used encoding for the Ukrainian language before
     UTF-8.

   In Info output, a so-called 'Local Variables' section (*note*
(emacs)File Variables::) is output including the output encoding.  This
allows Info readers to set the encoding appropriately.  It looks like
this:

     Local Variables:
     coding: UTF-8
     End:

   By default, for Info and plain text output, ‘texi2any’ outputs accent
constructs and special characters (such as ‘@'e’) as the actual UTF-8
sequence or 8-bit character in the output encoding where possible.  If
this is not possible, or if the option ‘--disable-encoding’ is given, an
ASCII transliteration is used instead.

   In HTML output, a ‘<meta>’ tag is output, in the ‘<head>’ section of
the HTML, that specifies the output encoding.  Web servers and browsers
cooperate to use this information so the correct encoding is used to
display the page, if supported by the system.  That looks like this:

     <meta http-equiv="Content-Type" content="text/html;
          charset=utf-8">

   In HTML and LaTeX output, if ‘OUTPUT_CHARACTERS’ is set (*note* Other
Customization Variables::), accent constructs and special characters,
such as ‘@'e’ or ‘``’, are output as the actual UTF-8 sequence or 8-bit
character in the output encoding where possible.  Otherwise, HTML
entities are used for those characters in HTML, and LaTeX macros are
used in LaTeX.

   In DocBook output, if the encoding is different from UTF-8, an
‘encoding’ attribute is added to the XML declaration.  If
‘OUTPUT_CHARACTERS’ is set (*note* Other Customization Variables::),
accent constructs such as ‘@'e’ are output as the actual 8-bit or UTF-8
character in the output encoding where possible.  Otherwise XML entities
are used for those constructs.

   In TeX output, the characters which are supported in the standard
Computer Modern fonts are output accordingly.  For example, this means
using constructed accents rather than precomposed glyphs.  Using a
missing character generates a warning message, as does specifying an
unimplemented encoding.

   Although modern TeX systems support nearly every script in use in the
world, this wide-ranging support is not available in ‘texinfo.tex’, and
it's not feasible to duplicate or incorporate all that effort.

   In LaTeX output, code loading the ‘inputenc’ package is output based
on the encoding.  This, by itself, does not ensures that all the
characters from the input document can be subsequently output.  The
fonts used in the default case should cover the specific Texinfo glyphs,
but not all the possible encoded characters.  You may need to load
different fonts in the preamble and use ‘\DeclareUnicodeCharacter’ with
a UTF-8 encoding.  For example:
     @latex
     \DeclareUnicodeCharacter{017B}{\.Z}
     @end latex

   Cross-references between Info files in different character encodings
with non-ASCII characters in node names fail.  We strongly recommend
using UTF-8 only as the encoding for manuals with non-ASCII characters
in the destinations of cross-references.

   ---------- Footnotes ----------

   (1) ‘texi2any’ supports more encodings for Texinfo manuals,
potentially all the encodings supported by both Perl and iconv (*note*
(libc)Generic Charset Conversion::).  The support in output formats may
be lacking, however, especially for LaTeX output.


File: texinfo.info,  Node: Conditionals,  Next: Defining New Texinfo Commands,  Prev: Internationalization,  Up: Top

# /15 Conditionally Visible Text
*****************************

The “conditional commands” allow you to use different text for different
output formats, or for general conditions that you define.  For example,
you can use them to specify different text for the printed manual and
the Info output.

   The conditional commands comprise the following categories.

   • Commands specific to an output format (Info, TeX, HTML, ...).

   • Commands specific to any output format _excluding_ a given one
     (e.g., not Info, not TeX, ...).

   • 'Raw' formatter text for any output format, passed straight through
     with minimal (but not zero) interpretation of @-commands.

   • Format-independent variable substitutions, and testing if a
     variable is set or clear.

* Menu:

* Conditional Commands::       Text for a given format.
* Conditional Not Commands::   Text for any format other than a given one.
* Raw Formatter Commands::     Using raw formatter commands.
* Inline Conditionals::        Brace-delimited conditional text.
* @set @clear @value::         Variable tests and substitutions.
* Testing for Texinfo Commands::  Testing if a Texinfo command is available.
* Conditional Nesting::        Using conditionals inside conditionals.


File: texinfo.info,  Node: Conditional Commands,  Next: Conditional Not Commands,  Up: Conditionals

15.1 Conditional Commands
=========================

Texinfo has an ‘@ifFORMAT’ environment for each output format, to allow
conditional inclusion of text for a particular output format.

   ‘@ifinfo’ begins segments of text that should be ignored when not
producing Info output, in particular in printed output.  The segment of
text appears only in the Info file and, for historical compatibility,
the plain text output.

   The environments for the other formats are analogous:

‘@ifdocbook ... @end ifdocbook’
     Text to appear only in the DocBook output.

‘@ifhtml ... @end ifhtml’
     Text to appear only in the HTML output.

‘@iflatex ... @end iflatex’
     Text to appear only in the LaTeX output.

‘@ifplaintext ... @end ifplaintext’
     Text to appear only in the plain text output.

‘@iftex ... @end iftex’
     Text to appear only in the printed manual.

‘@ifxml ... @end ifxml’
     Text to appear only in the XML output.

   The ‘@if...’ and ‘@end if...’ commands must appear on lines by
themselves in your source file.  The newlines following the commands are
(more or less) treated as whitespace, so that the conditional text is
flowed normally into a surrounding paragraph.

   The ‘@if...’ constructs are intended to conditionalize normal Texinfo
source; *note* Raw Formatter Commands::, for using underlying format
commands directly.

   Here is an example showing all these conditionals:

     @iftex
     This text will appear only in the printed manual.
     @end iftex
     @ifinfo
     However, this text will appear only in Info and plain text.
     @end ifinfo
     @ifhtml
     And this text will only appear in HTML.
     @end ifhtml
     @iflatex
     Moreover, this text will only appear in @LaTeX{}.
     @end iflatex
     @ifplaintext
     Whereas this text will only appear in plain text.
     @end ifplaintext
     @ifxml
     Notwithstanding that this will only appear in XML.
     @end ifxml
     @ifdocbook
     Nevertheless, this will only appear in DocBook.
     @end ifdocbook

The preceding example produces the following line:

   However, this text will appear only in Info and plain text.

Notice that you only see one of the input lines, depending on which
version of the manual you are reading.

   In complex documents, you may want Texinfo to issue an error message
in some conditionals that should not ever be processed.  The
‘@errormsg{TEXT}’ command will do this; it takes one argument, the text
of the error message.

   We mention ‘@errormsg{}’ here even though it is not strictly related
to conditionals, since in practice it is most likely to be useful in
that context.  Technically, it can be used anywhere.  *Note* External
Macro Processors::, for a caveat regarding the line numbers which
‘@errormsg’ emits in TeX.


File: texinfo.info,  Node: Conditional Not Commands,  Next: Raw Formatter Commands,  Prev: Conditional Commands,  Up: Conditionals

15.2 Conditional Not Commands
=============================

You can specify text to be included in any output format _other_ than a
given one with the ‘@ifnot...’ environments:

     @ifnotdocbook ... @end ifnotdocbook
     @ifnothtml ... @end ifnothtml
     @ifnotinfo ... @end ifnotinfo
     @ifnotlatex ... @end ifnotlatex
     @ifnotplaintext ... @end ifnotplaintext
     @ifnottex ... @end ifnottex
     @ifnotxml ... @end ifnotxml

The ‘@ifnot...’ command and the ‘@end’ command must appear on lines by
themselves in your actual source file.

   If the output file is being made in the given format, the region is
_ignored_.  Otherwise, it is included.

   There is one exception (for historical compatibility): ‘@ifnotinfo’
text is omitted for both Info and plain text output, not just Info.  To
specify text which appears only in Info and not in plain text, use
‘@ifnotplaintext’, like this:

     @ifinfo
     @ifnotplaintext
     This will be in Info, but not plain text.
     @end ifnotplaintext
     @end ifinfo

   The regions delimited by these commands are ordinary Texinfo source
as with ‘@iftex’, not raw formatter source as with ‘@tex’ (*note* Raw
Formatter Commands::).


File: texinfo.info,  Node: Raw Formatter Commands,  Next: Inline Conditionals,  Prev: Conditional Not Commands,  Up: Conditionals

15.3 Raw Formatter Commands
===========================

The ‘@if...’ conditionals just described must be used only with normal
Texinfo source.  For instance, most features of plain TeX will not work
within ‘@iftex’.  The purpose of ‘@if...’ is to provide conditional
processing for Texinfo source, not provide access to underlying
formatting features.  For that, Texinfo provides so-called “raw
formatter commands”.  They should only be used when truly required (most
documents do not need them).

   The first raw formatter command is ‘@tex’.  You can enter plain TeX
completely, and use ‘\’ in the TeX commands, by delineating a region
with the ‘@tex’ and ‘@end tex’ commands.  All plain TeX commands and
category codes are restored within a ‘@tex’ region.  The sole exception
is that the ‘@’ character still introduces a command, so that ‘@end tex’
can be recognized.  Texinfo processors will not output material in such
a region unless TeX output is being produced.

   In complex cases, you may wish to define new TeX macros within
‘@tex’.  You must use ‘\gdef’ to do this, not ‘\def’, because ‘@tex’
regions are processed in a TeX group.  If you need to make several
definitions, you may wish to set ‘\globaldefs=1’ (its value will be
restored to zero as usual when the group ends at ‘@end tex’, so it won't
cause problems with the rest of the document).

   As an example, here is a displayed equation written in plain TeX:

     @tex
     $$ \chi^2 = \sum_{i=1}^N
              \left (y_i - (a + b x_i)
              \over \sigma_i\right)^2 $$
     @end tex

The output of this example will appear only in a printed manual.  If you
are reading this in a format not generated by TeX, you will not see the
equation that appears in the printed manual.

   Analogously, you can use ‘@html ... @end html’ for a region of raw
HTML, ‘@docbook ... @end docbook’ for a region of raw DocBook, ‘@latex
... @end latex’ for a region of raw LaTeX, and ‘@xml ... @end xml’ for a
region of raw XML.

   The behavior of newlines in raw regions is unspecified.

   In all cases, in raw processing, ‘@’ retains the same meaning as in
the remainder of the document.  Thus, the Texinfo processors must
recognize and even execute, to some extent, the contents of the raw
regions, regardless of the final output format.  Therefore, specifying
changes that globally affect the document inside a raw region leads to
unpredictable and generally undesirable behavior.  For example, using
the ‘@kbdinputstyle’ command inside a raw region is undefined.  The
remedy is simple: don't do that.


File: texinfo.info,  Node: Inline Conditionals,  Next: @set @clear @value,  Prev: Raw Formatter Commands,  Up: Conditionals

15.4 Inline Conditionals: ‘@inline’, ‘@inlineifelse’, ‘@inlineraw’
==================================================================

Texinfo provides a set of conditional commands with arguments given
within braces:

‘@inlinefmt{FORMAT, TEXT}’
     Process the Texinfo TEXT if FORMAT output is being generated.

‘@inlinefmtifelse{FORMAT, THEN-TEXT, ELSE-TEXT}’
     Process the Texinfo THEN-TEXT if FORMAT output is being generated;
     otherwise, process ELSE-TEXT.

‘@inlineraw{FORMAT, TEXT}’
     Similar, but for raw TEXT (*note* Raw Formatter Commands::).

   The supported FORMAT names are:

     docbook  html  info  latex  plaintext  tex  xml

   For example,

     @inlinefmt{html, @emph{HTML-only text}}

is nearly equivalent to

     @ifhtml
     @emph{HTML-only text}
     @end ifhtml

except that no whitespace is added, as happens in the latter
(environment) case.

   In these commands, whitespace is ignored after the comma separating
the arguments, as usual, but is _not_ ignored at the end of TEXT.

   To insert a literal at sign, left brace, or right brace in one of the
arguments, you must use the alphabetic commands ‘@atchar{}’ (*note*
Inserting an Atsign::), and ‘@lbracechar{}’ or ‘@rbracechar{}’ (*note*
Inserting Braces::), or the parsing will become confused.

   With ‘@inlinefmtifelse’, it is also necessary to use ‘@comma{}’ to
avoid mistaking a ‘,’ in the text for the delimiter.  With ‘@inlinefmt’
and ‘@inlineraw’, ‘@comma{}’ is not required (though it's fine to use
it), since these commands always have exactly two arguments.

   For TeX, the processed TEXT cannot contain newline-delimited
commands.  Text to be ignored (i.e., for non-TeX) can, though.

   Two other ‘@inline...’ conditionals complement the ‘@ifset’ and
‘@ifclear’ commands; see the next section.


File: texinfo.info,  Node: @set @clear @value,  Next: Testing for Texinfo Commands,  Prev: Inline Conditionals,  Up: Conditionals

15.5 Flags: ‘@set’, ‘@clear’, conditionals, and ‘@value’
========================================================

You can direct the Texinfo formatting commands to format or ignore parts
of a Texinfo file with the ‘@set’, ‘@clear’, ‘@ifset’, and ‘@ifclear’
commands.  Here is a summary:

‘@set FLAG [VALUE]’
     Set the variable FLAG, to the optional VALUE if specified.

‘@clear FLAG’
     Undefine the variable FLAG, whether or not it was previously
     defined.

‘@ifset FLAG’
     If FLAG is set, text through the next ‘@end ifset’ command is
     formatted.  If FLAG is clear, text through the following ‘@end
     ifset’ command is ignored.

‘@inlineifset{FLAG, TEXT}’
     Brace-delimited version of ‘@ifset’.

‘@ifclear FLAG’
     If FLAG is set, text through the next ‘@end ifclear’ command is
     ignored.  If FLAG is clear, text through the following ‘@end
     ifclear’ command is formatted.

‘@inlineifclear{FLAG, TEXT}’
     Brace-delimited version of ‘@ifclear’.

* Menu:

* @set @value::                Expand a flag variable to a string.
* @ifset @ifclear::            Format a region if a flag is set.
* @inlineifset @inlineifclear::  Brace-delimited flag conditionals.
* @value Example::             An easy way to update edition information.


File: texinfo.info,  Node: @set @value,  Next: @ifset @ifclear,  Up: @set @clear @value

15.5.1 ‘@set’ and ‘@value’
--------------------------

You use the ‘@set’ command to specify a value for a flag, which is later
expanded by the ‘@value’ command.

   A “flag” (aka “variable”) name is an identifier starting with an
alphanumeric, ‘-’, or ‘_’.  Subsequent characters, if any, may not be
whitespace, ‘@’, braces, angle brackets, or any of ‘~`^+|’; other
characters, such as ‘%’, may work.  However, it is best to use only
letters and numerals in a flag name, not ‘-’ or ‘_’ or others--they will
work in some contexts, but not all, due to limitations in TeX.

   The value is the remainder of the input line, and can contain
anything.

   Write the ‘@set’ command like this:

     @set foo This is a string.

This sets the value of the flag ‘foo’ to "This is a string.".

   The Texinfo processors then replace a ‘@value{FLAG}’ command with the
string to which FLAG is set.  Thus, when ‘foo’ is set as shown above,
the Texinfo processors convert this:

     @value{foo}
to this:
     This is a string.

   You can write a ‘@value’ command within a paragraph; but you must
write a ‘@set’ command on a line of its own.

   If you write the ‘@set’ command like this:

     @set foo

without specifying a string, the value of ‘foo’ is the empty string.

   If you clear a previously set flag with ‘@clear FLAG’, a subsequent
‘@value{flag}’ command will report an error.

   For example, if you set ‘foo’ as follows:

     @set howmuch very, very, very

then the processors transform

     It is a @value{howmuch} wet day.
into
     It is a very, very, very wet day.

   If you write

     @clear howmuch

then the processors transform

     It is a @value{howmuch} wet day.
into
     It is a {No value for "howmuch"} wet day.

   ‘@value’ cannot be reliably used as the argument to an accent command
(*note* Inserting Accents::).  For example, this fails:

     @set myletter a
     @'@value{myletter}


File: texinfo.info,  Node: @ifset @ifclear,  Next: @inlineifset @inlineifclear,  Prev: @set @value,  Up: @set @clear @value

15.5.2 ‘@ifset’ and ‘@ifclear’
------------------------------

When a FLAG is set, the Texinfo formatting commands format text between
subsequent pairs of ‘@ifset FLAG’ and ‘@end ifset’ commands.  When the
FLAG is cleared, the Texinfo formatting commands do _not_ format the
text.  ‘@ifclear’ operates analogously.

   Write the conditionally formatted text between ‘@ifset FLAG’ and
‘@end ifset’ commands, like this:

     @ifset FLAG
     CONDITIONAL-TEXT
     @end ifset

   For example, you can create one document that has two variants, such
as a manual for a 'large' and 'small' model:

     You can use this machine to dig up shrubs
     without hurting them.

     @set large

     @ifset large
     It can also dig up fully grown trees.
     @end ifset

     Remember to replant promptly ...

In the example, the formatting commands will format the text between
‘@ifset large’ and ‘@end ifset’ because the ‘large’ flag is set.

   When FLAG is cleared, the Texinfo formatting commands do _not_ format
the text between ‘@ifset FLAG’ and ‘@end ifset’; that text is ignored
and does not appear in the output.

   For example, if you clear the flag of the preceding example by
writing an ‘@clear large’ command after the ‘@set large’ command (but
before the conditional text), then the Texinfo formatting commands
ignore the text between the ‘@ifset large’ and ‘@end ifset’ commands.
In the formatted output, that text does not appear; you see only the
lines that say, "You can use this machine to dig up shrubs without
hurting them.  Remember to replant promptly ...".

   If a flag is cleared with a ‘@clear FLAG’ command, then the
formatting commands format text between subsequent pairs of ‘@ifclear’
and ‘@end ifclear’ commands.  But if the flag is set with ‘@set FLAG’,
then the formatting commands do _not_ format text between an ‘@ifclear’
and an ‘@end ifclear’ command; rather, they ignore that text.  An
‘@ifclear’ command looks like this:

     @ifclear FLAG


File: texinfo.info,  Node: @inlineifset @inlineifclear,  Next: @value Example,  Prev: @ifset @ifclear,  Up: @set @clear @value

15.5.3 ‘@inlineifset’ and ‘@inlineifclear’
------------------------------------------

‘@inlineifset’ and ‘@inlineifclear’ provide brace-delimited alternatives
to the ‘@ifset’ and ‘@ifclear’ forms, similar to the other ‘@inline...’
Commands (*note* Inline Conditionals::).  The same caveats about argument
parsing given there apply here too.

‘@inlineifset{VAR, TEXT}’
     Process the Texinfo TEXT if the flag VAR is defined.

‘@inlineifclear{VAR, TEXT}’
     Process the Texinfo TEXT if the flag VAR is not defined.

   Except for the syntax, their general behavior and purposes is the
same as with ‘@ifset’ and ‘@ifclear’, described in the previous section.


File: texinfo.info,  Node: @value Example,  Prev: @inlineifset @inlineifclear,  Up: @set @clear @value

15.5.4 ‘@value’ Example
-----------------------

You can use the ‘@value’ command to minimize the number of places you
need to change when you record an update to a manual.  *Note* GNU Sample
Texts::, for the full text of an example of using this to work with
Automake distributions.

   This example is adapted from *note* (make)Top::.

  1. Set the flags:

          @set EDITION 0.35 Beta
          @set VERSION 3.63 Beta
          @set UPDATED 14 August 1992
          @set UPDATE-MONTH August 1992

  2. Write text for the ‘@copying’ section (*note* @copying::):

          @copying
          This is Edition @value{EDITION},
          last updated @value{UPDATED},
          of @cite{The GNU Make Manual},
          for @code{make}, version @value{VERSION}.

          Copyright ...

          Permission is granted ...
          @end copying

  3. Write text for the title page, for people reading the printed
     manual:

          @titlepage
          @title GNU Make
          @subtitle A Program for Directing Recompilation
          @subtitle Edition @value{EDITION}, ...
          @subtitle @value{UPDATE-MONTH}
          @page
          @insertcopying
          ...
          @end titlepage

     (On a printed cover, a date listing the month and the year looks
     less fussy than a date listing the day as well as the month and
     year.)

  4. Write text for the Top node, for people reading the Info file:

          @ifnottex
          @node Top
          @top Make

          This is Edition @value{EDITION},
          last updated @value{UPDATED},
          of @cite{The GNU Make Manual},
          for @code{make}, version @value{VERSION}.
          @end ifnottex

     After you format the manual, the ‘@value’ constructs have been
     expanded, so the output contains text like this:

          This is Edition 0.35 Beta, last updated 14 August 1992,
          of `The GNU Make Manual', for `make', Version 3.63 Beta.

   When you update the manual, you change only the values of the flags;
you do not need to edit the three sections.


File: texinfo.info,  Node: Testing for Texinfo Commands,  Next: Conditional Nesting,  Prev: @set @clear @value,  Up: Conditionals

15.6 Testing for Texinfo Commands: ‘@ifcommanddefined’, ‘@ifcommandnotdefined’
==============================================================================

Occasionally, you may want to arrange for your manual to test if a given
Texinfo command is available and (presumably) do some sort of fallback
formatting if not.  There are conditionals ‘@ifcommanddefined’ and
‘@ifcommandnotdefined’ to do this.  For example:

     @ifcommanddefined node
     Good, @samp{@@node} is defined.
     @end ifcommanddefined

will output the expected 'Good, ‘@node’ is defined.'.

   This conditional will also consider any new commands defined by the
document via ‘@macro’, ‘@alias’, ‘@definfoenclose’, and
‘@def(code)index’ (*note* Defining New Texinfo Commands::) to be true.
Caveat: the TeX implementation reports internal TeX commands, in
addition to all the Texinfo commands, as being "defined"; the ‘texi2any’
implementation is reliable in this regard, however.

   You can check the ‘NEWS’ file in the Texinfo source distribution and
linked from the Texinfo home page
(<http://www.gnu.org/software/texinfo>) to see when a particular command
was added.

   These command-checking conditionals themselves were added in
Texinfo 5.0, released in 2013--decades after Texinfo's inception.  In
order to test if they themselves are available, the predefined flag
‘txicommandconditionals’ can be tested, like this:

     @ifset txicommandconditionals
     @ifcommandnotdefined foobarnode
     (Good, @samp{@@foobarnode} is not defined.)
     @end ifcommandnotdefined
     @end ifset

   Since flags (see the previous section) were added early in the
existence of Texinfo, there is no problem with assuming they are
available.

   We recommend avoiding these tests whenever possible--which is usually
the case.  For many software packages, it is reasonable for all
developers to have a given version of Texinfo (or newer) installed, and
thus no reason to worry about older versions.  (It is straightforward
for anyone to download and install the Texinfo source; it does not have
any problematic dependencies.)

   The issue of Texinfo versions does not generally arise for end users.
With properly distributed packages, users need not process the Texinfo
manual simply to build and install the package; they can use
preformatted Info (or other) output files.  This is desirable in
general, to avoid unnecessary dependencies between packages (*note*
(standards)Releases::).


File: texinfo.info,  Node: Conditional Nesting,  Prev: Testing for Texinfo Commands,  Up: Conditionals

15.7 Conditional Nesting
========================

Texinfo requires that for a failing conditional, the ignored text must
be properly nested with respect to that failing conditional.  Here's an
example:

     @ifset somevar
     @ifset anothervar
     Both somevar and anothervar are set.
     @end ifset
     @ifclear anothervar
     Somevar is set, anothervar is not.
     @end ifclear
     @end ifset

   If ‘somevar’ is not set, the whole block is skipped.

   To allow the processors to reliably determine which commands to
consider for nesting purposes, all conditional commands must be on lines
by themselves, with no text (even spaces) before or after.


File: texinfo.info,  Node: Defining New Texinfo Commands,  Next: Include Files,  Prev: Conditionals,  Up: Top

# /16 Defining New Texinfo Commands
********************************

Texinfo provides several ways to define new commands (in all cases, it's
not recommended to try redefining existing commands):

   • A Texinfo “macro” allows you to define a new Texinfo command as any
     sequence of text and/or existing commands (including other macros).
     The macro can have any number of “parameters”--text you supply each
     time you use the macro.

     Incidentally, these macros have nothing to do with the ‘@defmac’
     command, which is for documenting macros in the subject area of the
     manual (*note* Def Cmd Template::).

   • ‘@linemacro’ allows you to define a macro whose arguments extend to
     the end of the line and are separated by spaces.

   • ‘@alias’ defines a new name for an existing command.

   • ‘@definfoenclose’ allows you to define new commands with customized
     output for some non-printed output formats.  This command is
     deprecated.

   Most generally of all (not just for defining new commands), it is
possible to invoke any external macro processor and have Texinfo
recognize so-called ‘#line’ directives for error reporting.

   If you want to do simple text substitution, ‘@set’ and ‘@value’ is
the simplest approach (*note* @set @clear @value::).

* Menu:

* Defining Macros::            Defining and undefining new commands.
* Invoking Macros::            Using a macro, once you've defined it.
* Macro Details::              Limitations of Texinfo macros.
* @alias::                     Command aliases.
* Line Macros::                Macros using whole line for arguments.
* @definfoenclose::            Customized highlighting.
* External Macro Processors::  ‘#line’ directives.


File: texinfo.info,  Node: Defining Macros,  Next: Invoking Macros,  Up: Defining New Texinfo Commands

16.1 Defining Macros
====================

You use the Texinfo ‘@macro’ command to define a macro, like this:

     @macro MACRONAME{PARAM1, PARAM2, ...}
     TEXT ... \PARAM1\ ...
     @end macro

   The “parameters” PARAM1, PARAM2, ... correspond to arguments supplied
when the macro is subsequently used in the document (described in the
next section).

   In principle, MACRONAME should consist of alphanumerics, and (except
as the first character) ‘-’.  The ‘_’ character is excluded so that
macros can be called inside ‘@math’ without a following space (*note*
Inserting Math::).  However, for a macro to work consistently with TeX,
MACRONAME must consist entirely of letters: no digits, hyphens, or other
special characters.  So, we recommend using only letters.  Texinfo
commands should not be redefined as macros.

   If a macro needs no parameters, you can define it either with an
empty list (‘@macro foo {}’) or with no braces at all (‘@macro foo’).

   The definition or “body” of the macro can contain most Texinfo
commands, including macro invocations.  However, a macro definition that
defines another macro does not work in TeX due to limitations in the
design of ‘@macro’.

   In the macro body, instances of a parameter name surrounded by
backslashes, as in ‘\PARAM1\’ in the example above, are replaced by the
corresponding argument from the macro invocation.  You can use parameter
names any number of times in the body, including zero.

   To get a single ‘\’ in the macro expansion, use ‘\\’.  Any other use
of ‘\’ in the body yields a warning.

   The newline characters after the ‘@macro’ line and before the ‘@end
macro’ line are ignored, that is, not included in the macro body.  All
other whitespace is treated according to the usual Texinfo rules.

   To allow a macro to be used recursively, that is, in an argument to a
call to itself, you must define it with ‘@rmacro’, like this:

     @rmacro rmac {arg}
     a\arg\b
     @end rmacro
     ...
     @rmac{1@rmac{text}2}

   This produces the output 'a1atextb2b'.  With ‘@macro’ instead of
‘@rmacro’, an error message is given.

   You can undefine a macro FOO with ‘@unmacro FOO’.  It is not an error
to undefine a macro that is already undefined.  For example:

     @unmacro foo


File: texinfo.info,  Node: Invoking Macros,  Next: Macro Details,  Prev: Defining Macros,  Up: Defining New Texinfo Commands

16.2 Invoking Macros
====================

After a macro is defined (see the previous section), you can “invoke”
(use) it in your document like this:

     @MACRONAME {ARG1, ARG2, ...}

and the result will be more or less as if you typed the body of
MACRONAME at that spot.  For example:

     @macro foo {p, q}
     Together: \p\ & \q\.
     @end macro
     @foo{a, b}

produces:

     Together: a & b.

   Thus, the arguments and parameters are separated by commas and
delimited by braces; any whitespace after (but not before) a comma is
ignored.  The braces are required in the invocation even when the macro
takes no arguments, consistent with other Texinfo commands.  For
example:

     @macro argless {}
     No arguments here.
     @end macro
     @argless{}

produces:

     No arguments here.

   Passing macro arguments containing commas requires care, since commas
also separate the arguments.  To include a comma character in an
argument, the most reliable method is to use the ‘@comma{}’ command.
Another method is to surround the argument with ‘@asis{...}’.  For
‘texi2any’, you can also prepend a backslash character, as in ‘\,’, but
this does not work with TeX.

   It's not always necessary to worry about commas.  To facilitate use
of macros, two rules for “automatic quoting” are implemented:

  1. If a macro takes only one argument, all commas in its invocation
     are quoted by default.  For example:

          @macro TRYME{text}
          @strong{TRYME: \text\}
          @end macro

          @TRYME{A nice feature, though it can be dangerous.}

     will produce the following output

          *TRYME: A nice feature, though it can be dangerous.*

     And indeed, it can.  Namely, there is no control on the number of
     arguments passed to one-argument macros, so be careful when you
     invoke them.

  2. If a macro invocation includes another command (including a
     recursive invocation of itself), any commas in the nested command
     invocation(s) are quoted by default.  For example, in

          @say{@strong{Yes, I do}, person one}

     the comma after ‘Yes’ is implicitly quoted.  Here's another
     example, with a recursive macro:

          @rmacro cat{a,b}
          \a\\b\
          @end rmacro

          @cat{@cat{foo, bar}, baz}

     will produce the string ‘foobarbaz’.

  3. Otherwise, a comma should be explicitly quoted, as above, for it to
     be treated as a part of an argument.

   The backslash itself can be quoted in macro arguments with another
backslash.  For example:

     @MACNAME {\\bleh}

will pass the argument ‘\bleh’ to MACNAME.

   ‘texi2any’ also recognizes ‘\{’ and ‘\}’ sequences for curly braces,
but these are not recognized by the implementation in TeX.  There
should, however, rarely be a need for these, as they are only needed
when a macro argument contains unbalanced braces.

   If a macro is defined to take exactly one argument, it can be invoked
without any braces, taking all of the line after the macro name as the
argument.  For example:

     @macro bar {p}
     Twice: \p\ & \p\.
     @end macro
     @bar aah

produces:

     Twice: aah & aah.

In these arguments, there is no escaping of special characters, so each
‘\’ stands for itself.

   If a macro is defined to take more than one argument, but is called
with only one (in braces), the remaining arguments are set to the empty
string, and no error is given.  For example:

     @macro addtwo {p, q}
     Both: \p\\q\.
     @end macro
     @addtwo{a}

produces simply:

     Both: a.


File: texinfo.info,  Node: Macro Details,  Next: @alias,  Prev: Invoking Macros,  Up: Defining New Texinfo Commands

16.3 Macro Details and Caveats
==============================

By design, macro expansion should not happen in the following contexts:

   • ‘@macro’ and ‘@unmacro’ lines;

   • ‘@if...’ lines, including ‘@ifset’ and similar;

   • ‘@set’, ‘@clear’, ‘@value’;

   • ‘@clickstyle’ lines;

   • ‘@end’ lines when there is no macro expansion in the block command.

Unfortunately, TeX may do some expansion in these situations, possibly
yielding errors.

   Also, quite a few macro-related constructs cause problems with TeX;
some of the caveats are listed below.  Thus, if you get macro-related
errors when producing the printed version of a manual, you might try
expanding the macros with ‘texi2any’ by invoking ‘texi2dvi’ with the
‘-E’ option (*note* Format with texi2dvi::).  Or, more reliably, eschew
Texinfo macros altogether and use a language designed for macro
processing, such as M4 (*note* External Macro Processors::).

   • As mentioned earlier, macro names must consist entirely of letters.

   • It is not advisable to redefine any TeX primitive, plain, or
     Texinfo command name as a macro.  Unfortunately, this is a large
     and open-ended set of names, and the possible resulting errors are
     unpredictable.

   • Arguments to macros taking more than one argument cannot cross
     lines.

   • Macros containing a command which must be on a line by itself, such
     as a conditional, cannot be invoked in the middle of a line.
     Similarly, macros containing line-oriented commands or text, such
     as ‘@example’ environments, may behave unpredictably in TeX.

   • Texinfo commands in the expansion of a macro in the text of an
     index entry may end up being typeset as literal text (including an
     "@" sign), instead of being interpreted with their intended
     meaning.

   • White space is ignored at the beginnings of lines.

   • Macros can't be reliably used in the argument to accent commands
     (*note* Inserting Accents::).

   • The backslash escape for commas in macro arguments does not work;
     ‘@comma{}’ must be used.

   • Ending a macro body with ‘@c’ may cause text following the macro
     invocation to be ignored as a comment in ‘texi2any’.  This is not
     the case when processing with TeX.  This was often done to "comment
     out" an unwanted newline at the end of a macro body, but this is
     not necessary any more, as the final newline before ‘@end macro’ is
     not included in the macro body anyway.

   • In general, you can't arbitrarily substitute a macro (or ‘@value’)
     call for Texinfo command arguments, even when the text is the same.
     Texinfo is not M4 (or even plain TeX).  It might work with some
     commands, it fails with others.  Best not to do it at all.  For
     instance, this fails:

          @macro offmacro
          off
          @end macro
          @headings @offmacro

     This looks equivalent to ‘@headings off’, but for TeXnical reasons,
     it fails with a mysterious error message (namely, ‘Paragraph ended
     before @headings was complete’).

   • Expanding macros in a math context may lead to poor spacing in TeX
     output.  For example:

          @iftex
          @macro atan
          \\mathop{\\rm atan}
          @end macro
          @end iftex

          @math{@atan{}(x)}

     The braces following ‘@atan’ are treated by TeX as a subformula,
     leading to extra space before the opening parenthesis.  You can
     work around this by defining a raw TeX macro instead:

          @tex
          \gdef\atan#1{\mathop{\rm atan}}
          @end tex

     The ‘#1’ in this definition absorbs the braces, so that the spacing
     is as expected for the ‘\mathop’ object.

   • If you have problems using conditionals within a macro, an
     alternative is to use separate macro definitions inside conditional
     blocks.  For example, instead of

          @macro Mac
          @iftex
          text for TeX output
          @end iftex
          @ifnottex
          text for not TeX output
          @end ifnottex
          @end macro

     you can do the following instead:

          @iftex
          @macro Mac
          text for TeX output
          @end macro
          @end iftex

          @ifnottex
          @macro Mac
          text for not TeX output
          @end macro
          @end ifnottex

   • Macros cannot define macros in the natural way.  To do this, you
     must use conditionals and raw TeX.  For example:

          @ifnottex
          @macro ctor {name, arg}
          @macro \name\
          something involving \arg\ somehow
          @end macro
          @end macro
          @end ifnottex
          @tex
          \gdef\ctor#1{\ctorx#1,}
          \gdef\ctorx#1,#2,{\def#1{something involving #2 somehow}}
          @end tex

   The following limitations are by design:

   • If you want to pass an argument with the Texinfo command ‘@,’ (to
     produce a cedilla, see *note* Inserting Accents::), you have to use
     ‘@value’ or another workaround.  Otherwise, the comma may be taken
     as separating the arguments.  With ‘texi2any’, the comma can be
     escaped by a backslash.  With TeX another workaround need to be
     used, therefore we recommend using such a workaround.

     For example,

          @macro mactwo{argfirst, argsecond}
          \argfirst\+\argsecond\.
          @end macro
          @set fc Fran@,cois
          @mactwo{@value{fc},}

     produces:

          François+.

   • ‘@verbatim’ and macros do not mix; for instance, you can't start a
     verbatim block inside a macro and end it outside (*note*
     @verbatim::).  Starting any environment inside a macro and ending
     it outside may or may not work, for that matter.

   • Macros that completely define macros are ok, but it's not possible
     to have incompletely nested macro definitions.  That is, ‘@macro’
     and ‘@end macro’ (likewise for ‘@rmacro’) must be correctly paired.
     For example, you cannot start a macro definition within a macro,
     and then end that nested definition outside the macro.

   In the ‘makeinfo’ implementation before Texinfo 5.0, ends of lines
from expansion of a ‘@macro’ definition did not end an @-command
line-delimited argument (‘@chapter’, ‘@center’, etc.).  This is no
longer the case.  For example:

     @macro twolines{}
     aaa
     bbb
     @end macro
     @center @twolines{}

   In the current ‘texi2any’, this is equivalent to:

     @center aaa
     bbb

with just ‘aaa’ as the argument to ‘@center’.  In the earlier
implementation, it would have been parsed as this:

     @center aaa bbb


File: texinfo.info,  Node: @alias,  Next: Line Macros,  Prev: Macro Details,  Up: Defining New Texinfo Commands

16.4 ‘@alias NEW=EXISTING’
==========================

The ‘@alias’ command defines a new command to be just like an existing
one.  This is useful for defining additional markup names, thus
preserving additional semantic information in the input even though the
output result may be the same.

   Write the ‘@alias’ command on a line by itself, followed by the new
command name, an equals sign, and the existing command name.  Whitespace
around the equals sign is optional and ignored if present.  Thus:

     @alias NEW = EXISTING

   For example, if your document contains citations for both books and
some other media (movies, for example), you might like to define a macro
‘@moviecite{}’ that does the same thing as an ordinary ‘@cite{}’ but
conveys the extra semantic information as well.  You'd do this as
follows:

     @alias moviecite = cite

   Macros do not always have the same effect as aliases, due to vagaries
of argument parsing.  Also, aliases are much simpler to define than
macros.  So the command is not redundant.

   Unfortunately, it's not possible to alias Texinfo environments; for
example, ‘@alias lang=example’ is an error.

   Aliases must not be recursive, directly or indirectly.

   It is not advisable to redefine any TeX primitive, plain TeX, or
Texinfo command name as an alias.  Unfortunately this is a very large
set of names, and the possible resulting errors from TeX are
unpredictable.

   Alias identifiers should be the same as for macro names, that is
alphanumerics and (except as the first character) ‘-’.  However, with
TeX, letters only should be used.  So, we recommend using only letters.


File: texinfo.info,  Node: Line Macros,  Next: @definfoenclose,  Prev: @alias,  Up: Defining New Texinfo Commands

16.5 Line Macros
================

You can also define a macro using the ‘@linemacro’ command.  The syntax
for line macro definitions is similar to that for ‘@macro’.

   However, the syntax for using a macro defined this way is different.
The macro call uses the rest of the line, with arguments separated by
spaces.  The line macro facility is mainly intended to allow you to
define commands that operate similarly to the builtin commands for
providing definitions (*note* Definition Commands::).

   For example:

     @linemacro defbuiltin {name, args}
     @defline {Builtin} \name\ \args\
     @end linemacro

   The above macro may be used as

     @defblock
     @defbuiltin foo (bar)
     Explanation
     @end defblock

   This produces the following result:

 -- Builtin: foo (bar)
     Explanation

   Here the first argument is ‘foo’, and is substituted where ‘\name\’
appears in the macro body.  Likewise, ‘(bar)’ is substituted for
‘\args\’.

   You can include spaces in a macro argument by surrounding the
argument by braces.  Any pair of braces enclosing an argument is removed
before substitution.  Any empty arguments (including the last one) must
be given as ‘{}’.  Additionally, non-initial spaces may appear in the
final argument in the argument list without surrounding braces (as in
the example below).

   If an argument line for a line macro ends in a ‘@’ character, then
this character together with the following newline are included in a
macro argument, and the following line in the input file is also used to
get the arguments for the macro.  Note that any substitution of the
‘@<NEWLINE>’ sequence must be in a valid context, such as a definition
line (*note* Def Cmd Continuation Lines::).

   Another example:

     @linemacro deffunc {type, name, args}
     @findex \name\
     @deftypeline {Func} {\type\} \name\ \args\
     @end linemacro

     @defblock
     @deffunc {long int} F (int @var{one}, int @var{two}, @
     int @var{three}, int @var{four}, int @var{five})
     Explanation
     @end defblock

Note how braces are needed around ‘\type\’ in the macro body in case the
‘type’ argument contains a space.  This example produces the output
below and enters an index entry for ‘F’.

 -- Func: long int F (int ONE, int TWO, int THREE, int FOUR, int FIVE)
     Explanation

   Line macros produce a whole number of lines of output in their
expansion.  There may be better compatibility between the Texinfo
processors (‘texi2any’ and TeX with ‘texinfo.tex’) for macros defined
with ‘@linemacro’ than for those defined with ‘@macro’.


File: texinfo.info,  Node: @definfoenclose,  Next: External Macro Processors,  Prev: Line Macros,  Up: Defining New Texinfo Commands

16.6 ‘@definfoenclose’: Customized Highlighting
===============================================

An ‘@definfoenclose’ command may be used to define a highlighting
command for online output formats.  A command defined using
‘@definfoenclose’ marks text by enclosing it in strings that precede and
follow the text.

   In practice, there is little use for this command, and we do not
recommend you use it.  Support for ‘@definfoenclose’ may be removed in
future releases of Texinfo.

   Write a ‘@definfoenclose’ command at the beginning of a line followed
by three comma-separated arguments.  The first argument to
‘@definfoenclose’ is the @-command name (without the ‘@’); the second
argument is the start delimiter string; and the third argument is the
end delimiter string.  The latter two arguments enclose the highlighted
text in the output.

   A delimiter string may contain spaces.  Neither the start nor end
delimiter is required.  If you do not want a start delimiter but do want
an end delimiter, you must follow the command name with two commas in a
row; otherwise, the end delimiter string you intended will naturally be
(mis)interpreted as the start delimiter string.

   An enclosure command defined this way takes one argument in braces,
since it is intended for new markup commands (*note* Marking Text::).

   For example, you can write:

     @definfoenclose phoo,//,\\

near the beginning of a Texinfo file to define ‘@phoo’ as an Info and
HTML formatting command that inserts '//' before and '\\' after the
argument to ‘@phoo’.  You can then write ‘@phoo{bar}’ wherever you want
'//bar\\' highlighted in Info and HTML.

   For TeX formatting, you could write

     @iftex
     @alias phoo = i
     @end iftex

to define ‘@phoo’ as a command that causes TeX to typeset the argument
to ‘@phoo’ in italics.

   Each definition applies to its own formatter: one for TeX, the other
for online formats.  The TeX definitions need to be in ‘@iftex’.
‘@definfoenclose’ command need not be within ‘@ifinfo’ unless you want
to use different definitions for different online output formats.
‘@definfoenclose’ defined commands have no effect in DocBook and LaTeX
output, their argument is output as-is.  An ‘@alias’ could also be used
for these formats.

   ‘@definfoenclose’ definitions must not be recursive, directly or
indirectly.


File: texinfo.info,  Node: External Macro Processors,  Prev: @definfoenclose,  Up: Defining New Texinfo Commands

16.7 External Macro Processors: Line Directives
===============================================

Texinfo macros (and its other text substitution facilities) work fine in
straightforward cases.  If your document needs unusually complex
processing, however, their fragility and limitations can be a problem.
In this case, you may want to use a different macro processor
altogether, such as M4 (*note* (m4)Top::) or CPP (*note* (cpp)Top::).

   With one exception, Texinfo does not need to know whether its input
is "original" source or preprocessed from some other source file.
Therefore, you can arrange your build system to invoke whatever programs
you like to handle macro expansion or other preprocessing needs.
Texinfo does not offer built-in support for any particular preprocessor,
since no one program seemed likely to suffice for the requirements of
all documents.

   The one exception is line numbers in error messages.  In that case,
the line number should refer to the original source file, whatever it
may be.  There's a well-known mechanism for this: the so-called ‘#line’
directive.  Texinfo supports this.

* Menu:

* #line Directive::
* #line and TeX::
* #line Syntax Details::


File: texinfo.info,  Node: #line Directive,  Next: #line and TeX,  Up: External Macro Processors

16.7.1 ‘#line’ Directive
------------------------

An input line such as this:

     #line 100 "foo.ptexi"

indicates that the next line was line 100 of the file ‘foo.ptexi’, and
so that's what an error message should refer to.  Both M4 (*note*
(m4)Preprocessor features::) and CPP (*note* (cpp)Line Control::, and
*note* (cpp)Preprocessor Output::) can generate such lines.

   The ‘texi2any’ program recognizes these lines by default, except
within ‘@verbatim’ blocks (*note* @verbatim::).  Their recognition can be
turned off completely with ‘CPP_LINE_DIRECTIVES’ (*note* Other
Customization Variables::), though there is normally no reason to do so.

   For those few programs (M4, CPP, Texinfo) which need to document
‘#line’ directives and therefore have examples which would otherwise
match the pattern, the command ‘@hashchar{}’ can be used (*note*
Inserting a Hashsign::).  The example line above looks like this in the
source for this manual:

     @hashchar{}line 100 "foo.ptexi"

   The ‘@hashchar’ command was added to Texinfo in 2013.  If you don't
want to rely on it, you can also use ‘@set’ and ‘@value’ to insert the
literal ‘#’:

     @set hash #
     @value{hash}line 1 "example.c"

   Or, if suitable, a ‘@verbatim’ environment can be used instead of
‘@example’.  As mentioned above, ‘#line’-recognition is disabled inside
verbatim blocks.


File: texinfo.info,  Node: #line and TeX,  Next: #line Syntax Details,  Prev: #line Directive,  Up: External Macro Processors

16.7.2 ‘#line’ and TeX
----------------------

As mentioned, ‘texi2any’ recognizes the ‘#line’ directives described in
the previous section.  However, ‘texinfo.tex’ does not and cannot.
Therefore, such a line will be incorrectly typeset verbatim if TeX sees
it.  The solution is to use ‘texi2any’'s macro expansion options before
running TeX.  There are three approaches:

   • If you run ‘texi2dvi’ or its variants (*note* Format with
     texi2dvi::), you can pass ‘-E’ and ‘texi2dvi’ will run ‘texi2any’
     first to expand macros and eliminate ‘#line’.

   • If you run ‘texi2any’, you can specify ‘--no-ifinfo --iftex -E
     somefile.out’, and then give ‘somefile.out’ to ‘texi2dvi’ in a
     separate command.

   • Or you can run ‘texi2any --dvi --Xopt -E’.  (Or ‘--pdf’ instead of
     ‘--dvi’.)  ‘texi2any’ will then call ‘texi2dvi -E’.

   One last caveat regarding use with TeX: since the ‘#line’ directives
are not recognized, the line numbers emitted by the ‘@errormsg{}’
command (*note* Conditional Commands::), or by TeX itself, are the
(incorrect) line numbers from the derived file which TeX is reading,
rather than the preprocessor-specified line numbers.


File: texinfo.info,  Node: #line Syntax Details,  Prev: #line and TeX,  Up: External Macro Processors

16.7.3 ‘#line’ Syntax Details
-----------------------------

Syntax details for the ‘#line’ directive: the ‘#’ character can be
preceded or followed by whitespace, the word ‘line’ is optional, and the
file name can be followed by a whitespace-separated list of integers
(these are so-called "flags" output by CPP in some cases).  For those
who like to know the gory details, the actual (Perl) regular expression
which is matched is this:

     /^\s*#\s*(line)? (\d+)(( "([^"]+)")(\s+\d+)*)?\s*$/

   As far as we've been able to tell, the trailing integer flags only
occur in conjunction with a file name, so that is reflected in the
regular expression.

   As an example, the following is a syntactically valid ‘#line’
directive, meaning line 1 of ‘/usr/include/stdio.h’:

     # 1 "/usr/include/stdio.h" 2 3 4

   Unfortunately, the quoted file name (‘"..."’) has to be optional,
because M4 (especially) can often generate ‘#line’ directives within a
single file.  Since the ‘line’ is also optional, the result is that
lines might match which you wouldn't expect, e.g.,

     # 1

   The possible solutions are described above (*note* #line Directive::).


File: texinfo.info,  Node: Include Files,  Next: Hardcopy with TeX,  Prev: Defining New Texinfo Commands,  Up: Top

# /17 Include Files
****************

When a Texinfo processor sees an ‘@include’ command in a Texinfo file,
it processes the contents of the file named by the ‘@include’ and
incorporates them into the output files being created.  Include files
thus let you keep a single large document as a collection of
conveniently small parts.

* Menu:

* Using Include Files::        How to use the ‘@include’ command.
* Sample Include File::        A sample outer file with included files within
                               it; and a sample included file.
* @verbatiminclude::           Including a file verbatim.


File: texinfo.info,  Node: Using Include Files,  Next: Sample Include File,  Up: Include Files

17.1 How to Use Include Files
=============================

To include another file within a Texinfo file, write the ‘@include’
command at the beginning of a line and follow it on the same line by the
name of a file to be included.  For example:

     @include buffers.texi

   ‘@value{VAR}’ references are expanded on the ‘@include’ line.  Other
than that, the only @-commands allowed are ‘@@’, ‘@{’, ‘@}’ and
associated @-commands such as ‘@atchar{}’.

   An included file should simply be a segment of text that you expect
to be included as is into the overall or “outer” Texinfo file; it should
not contain the standard beginning and end parts of a Texinfo file.  In
particular, you should not start an included file with a line saying
‘\input texinfo’; if you do, that text is inserted into the output file
literally.  Likewise, you should not end an included file with a ‘@bye’
command; nothing after ‘@bye’ is formatted.

   In the long-ago past, you were required to write an ‘@setfilename’
line at the beginning of an included file, but no longer.  Now, it does
not matter whether you write such a line.  If an ‘@setfilename’ line
exists in an included file, it is ignored.

   GNU Emacs Texinfo mode provides ‘texinfo-multiple-files-update’ to
update node pointers and master menu with multiple include files.  *Note*
Update Multiple Files::.


File: texinfo.info,  Node: Sample Include File,  Next: @verbatiminclude,  Prev: Using Include Files,  Up: Include Files

17.2 Sample File with ‘@include’
================================

Here is an example of an outer Texinfo file with ‘@include’ files within
it:

     \input texinfo @c -*-texinfo-*-

     @settitle Include Example


     @node Top
     @top Include Example

     @include foo.texi
     @include bar.texi
     @include concept-index.texi
     @bye

   An included file, such as ‘foo.texi’, might look like this:

     @node First
     @chapter First Chapter

     Contents of first chapter ...

   The full contents of ‘concept-index.texi’ might be as simple as this:

     @node Concept Index
     @unnumbered Concept Index

     @printindex cp

   The outer Texinfo source file for ‘The GNU Emacs Lisp Reference
Manual’ is named ‘elisp.texi’.  This outer file has already contained a
master menu with 417 entries and a list of 41 ‘@include’ files.


File: texinfo.info,  Node: @verbatiminclude,  Prev: Sample Include File,  Up: Include Files

17.3 ‘@verbatiminclude’ FILE: Include a File Verbatim
=====================================================

You can include the exact contents of a file in the document with the
‘@verbatiminclude’ command:

     @verbatiminclude FILENAME

   The contents of FILENAME is printed in a verbatim environment (*note*
@verbatim::).  Generally, the file is printed exactly as it is, with all
special characters and white space retained.  No indentation is added;
if you want indentation, enclose the ‘@verbatiminclude’ within
‘@example’ (*note* @example::).

   ‘@value{VAR}’ references are expanded on the ‘@verbatiminclude’ line.
This makes it possible to include files in other directories within a
distribution, for instance:

     @verbatiminclude @value{top_srcdir}/NEWS

(You still have to get ‘top_srcdir’ defined in the first place.)

   Other than that, the only @-commands allowed are ‘@@’, ‘@{’, ‘@}’ and
associated @-commands such as ‘@atchar{}’.

   For a method on printing the file contents in a smaller font size,
see the end of the section on ‘@verbatim’.


File: texinfo.info,  Node: Hardcopy with TeX,  Next: Generic Translator texi2any,  Prev: Include Files,  Up: Top

# /18 Formatting and Printing with TeX
***********************************

Running the ‘texi2dvi’ or ‘texi2pdf’ command is the simplest way to
create printable output.  These commands are installed as part of the
Texinfo package.

   In more detail, typesetting and printing a Texinfo file is a
multi-step process in which you use the TeX program to create a file for
printing (called a DVI or PDF file), and then print the file.
Optionally, you may also create indices using the ‘texindex’ command
after first running TeX; and then you must run TeX again.  ‘texi2dvi’
takes care of all of this, running TeX and ‘texindex’ as needed (*note*
Format with texi2dvi::).

   When you use the shell commands, you can either work directly in the
operating system shell or work within a shell inside GNU Emacs (or some
other computing environment).  You can give formatting and printing
commands from a shell within GNU Emacs, just like any other shell
command.  To create a shell within Emacs, type ‘M-x shell’ (*note*
(emacs)Shell::).  If you are using GNU Emacs, you can also use commands
provided by Texinfo mode instead of shell commands.  *Note* Printing with
Emacs::.

   For specifing details of the printed output such as paper size, see
*note* Global Document Commands::.

* Menu:

* Use TeX::                    Use TeX to format for hardcopy.
* Format with texi2dvi or texi2pdf::  The simplest way to format.
* Format with tex/texindex::   Formatting with explicit shell commands.
* Print with lpr::             How to print.
* Preparing for TeX::          What to do before you use TeX.
* Overfull hboxes::            What are and what to do with overfull hboxes.


File: texinfo.info,  Node: Use TeX,  Next: Format with texi2dvi or texi2pdf,  Up: Hardcopy with TeX

18.1 Use TeX
============

The typesetting program called TeX is used to format a Texinfo document
for printable output.  TeX is a very powerful typesetting program and,
when used correctly, does an exceptionally good job.  It is not included
in the Texinfo package, being a vast suite of software in itself.

   TeX is a document formatter that is used by the FSF for its
documentation.  It is the easiest way to get printed output (e.g., PDF
and PostScript) for Texinfo manuals.  TeX is freely redistributable, and
you can get it over the Internet or on physical media.  See
<http://tug.org/texlive>.


File: texinfo.info,  Node: Format with texi2dvi or texi2pdf,  Next: Format with tex/texindex,  Prev: Use TeX,  Up: Hardcopy with TeX

18.2 Format with ‘texi2dvi’ or ‘texi2pdf’
=========================================

The ‘texi2dvi’ program takes care of all the steps for producing a TeX
DVI file from a Texinfo document.  Similarly, ‘texi2pdf’ produces a PDF
file(1).

   To run ‘texi2dvi’ or ‘texi2pdf’ on an input file ‘foo.texi’, do this
(where ‘prompt$ ’ is your shell prompt):

     prompt$ texi2dvi foo.texi
     prompt$ texi2pdf foo.texi

   As shown in this example, the file names given to ‘texi2dvi’ and
‘texi2pdf’ must include any extension, such as ‘.texi’.

   For a list of all the options, run ‘texi2dvi --help’.  Some of the
options are discussed below.

   With the ‘--pdf’ option, ‘texi2dvi’ produces PDF output instead of
DVI, by running ‘pdftex’ instead of ‘tex’.  Alternatively, the command
‘texi2pdf’ is an abbreviation for running ‘texi2dvi --pdf’.  The command
‘pdftexi2dvi’ is also provided as a convenience for AUC-TeX (*note*
(auctex)Top::), as it prefers to merely prepend ‘pdf’ to DVI producing
tools to have PDF producing tools.

   With the ‘--dvipdf’ option, ‘texi2dvi’ produces PDF output by running
TeX and then a DVI-to-PDF program: if the ‘DVIPDF’ environment variable
is set, that value is used, else the first program extant among
‘dvipdfmx’, ‘dvipdfm’, ‘dvipdf’, ‘dvi2pdf’, ‘dvitopdf’.  This method
generally supports CJK typesetting better than ‘pdftex’.

   With the ‘--ps’ option, ‘texi2dvi’ produces PostScript instead of
DVI, by running ‘tex’ and then ‘dvips’ (*note* (dvips)Top::).  (Or the
value of the ‘DVIPS’ environment variable, if set.)

   ‘texi2dvi’ can also be used to process LaTeX files.  Normally
‘texi2dvi’ is able to guess the input file language by its contents and
file name extension; however, if it guesses wrong you can explicitly
specify the input language using ‘--language=LANG’ command line option,
where LANG is either ‘latex’ or ‘texinfo’.

   One useful option to ‘texi2dvi’ is ‘--command=CMD’.  This inserts CMD
on a line by itself at the start of the file in a temporary copy of the
input file, before running TeX.  With this, you can specify different
printing formats, such as ‘@smallbook’ (*note* @smallbook::),
‘@afourpaper’ (*note* A4 Paper::), or ‘@pagesizes’ (*note* @pagesizes::),
without actually changing the document source.  (You can also do this on
a site-wide basis with ‘texinfo.cnf’; *note* Preparing for TeX::).

   The option ‘-E’ (equivalently, ‘-e’ and ‘--expand’) does Texinfo
macro expansion using ‘texi2any’ instead of the TeX implementation
(*note* Macro Details::).  Each implementation has its own limitations
and advantages.

   ‘texi2dvi’ takes the ‘--build=MODE’ option to specify where the TeX
compilation takes place, and, as a consequence, how auxiliary files are
treated.  The build mode can also be set using the environment variable
‘TEXI2DVI_BUILD_MODE’.  The valid values for MODE are:

‘local’
     Compile in the current directory, leaving all the auxiliary files
     around.  This is the traditional TeX use.

‘tidy’
     Compile in a local ‘*.t2d’ directory, where the auxiliary files are
     left.  Output files are copied back to the original file.

     Using the ‘tidy’ mode brings several advantages:
        - the current directory is not cluttered with plethora of
          temporary files.
        - clutter can be even further reduced using ‘--build-dir=dir’:
          all the ‘*.t2d’ directories are stored there.
        - clutter can be reduced to zero using, e.g.,
          ‘--build-dir=/tmp/\$USER.t2d’ or ‘--build-dir=\$HOME/.t2d’.
        - the output file is updated after every successful TeX run, for
          sake of concurrent visualization of the output.  In a ‘local’
          build the viewer stops during the whole TeX run.
        - if the compilation fails, the previous state of the output
          file is preserved.
        - PDF and DVI compilation are kept in separate subdirectories
          preventing any possibility of auxiliary file incompatibility.

     On the other hand, because ‘tidy’ compilation takes place in
     another directory, occasionally TeX won't be able to find some
     files (e.g., when using ‘\graphicspath’): in that case, use ‘-I’ to
     specify the additional directories to consider.

‘clean’
     Same as ‘tidy’, but remove the auxiliary directory afterwards.
     Every compilation therefore requires the full cycle.

   ‘texi2dvi’ will use ‘etex’ if it is available, because it runs faster
in some cases, and provides additional tracing information when
debugging ‘texinfo.tex’.  Nevertheless, this extended version of TeX is
not required, and the DVI output is identical.

   ‘texi2dvi’ attempts to detect auxiliary files output by TeX, either
by using the ‘-recorder’ option, or by scanning for ‘\openout’ in the
log file that a run of TeX produces.  You may control how ‘texi2dvi’
does this with the ‘TEXI2DVI_USE_RECORDER’ environment variable.  Valid
values are:

‘yes’
     use the ‘-recorder’ option, no checks.

‘no’
     scan for ‘\openout’ in the log file, no checks.

‘yesmaybe’
     check whether ‘-recorder’ option is supported, and if yes use it,
     otherwise check for tracing ‘\openout’ in the log file is
     supported, and if yes use it, else it is an error.

‘nomaybe’
     same as ‘yesmaybe’, except that the ‘\openout’ trace in log file is
     checked first.

   The default is ‘nomaybe’.  This environment variable is provided for
troubleshooting purposes, and may change or disappear in the future.

   ---------- Footnotes ----------

   (1) “PDF” stands for 'Portable Document Format'.  It was invented by
Adobe Systems for document interchange, based on their PostScript
language.


File: texinfo.info,  Node: Format with tex/texindex,  Next: Print with lpr,  Prev: Format with texi2dvi or texi2pdf,  Up: Hardcopy with TeX

18.3 Format with ‘tex’/‘texindex’
=================================

You can do the basic formatting of a Texinfo file with the shell command
‘tex’ followed by the name of the Texinfo file.  For example:

     tex foo.texi

TeX will produce a “DVI file” as well as several auxiliary files
containing information for indices, cross-references, etc.  The DVI file
(for “DeVice Independent” file) can be printed on virtually any device,
perhaps after a further conversion (see the previous section).

   The ‘tex’ formatting command itself does not sort the indices; it
writes an output file of unsorted index data.  To generate a printed
index after running the ‘tex’ command, you first need a sorted index to
work from.  The ‘texindex’ command sorts indices.  (‘texi2dvi’,
described in the previous section, runs ‘tex’ and ‘texindex’ as
necessary.)

   ‘tex’ outputs unsorted index files under names following a standard
convention: the name of your main input file with any ‘.texi’ or similar
extension replaced by the two letter index name.  For example, the raw
index output files for the input file ‘foo.texi’ would be, by default,
‘foo.cp’, ‘foo.vr’, ‘foo.fn’, ‘foo.tp’, ‘foo.pg’ and ‘foo.ky’.  Those
are exactly the arguments to give to ‘texindex’.

   Instead of specifying all the unsorted index file names explicitly,
it's typical to use ‘??’ as shell wildcards and give the command in this
form:

     texindex foo.??

This command will run ‘texindex’ on all the unsorted index files,
including any two letter indices that you have defined yourself using
‘@defindex’ or ‘@defcodeindex’.  You can safely run ‘texindex foo.??’
even if there are files with two letter extensions that are not index
files, such as ‘foo.el’.  The ‘texindex’ command reports but otherwise
ignores such files.

   For each file specified, ‘texindex’ generates a sorted index file
whose name is made by appending ‘s’ to the input file name; for example,
‘foo.cps’ is made from ‘foo.cp’.  The ‘@printindex’ command looks for a
file with that name (*note* Printing Indices & Menus::).  TeX does not
read the raw index output file, and ‘texindex’ does not alter it.

   After you have sorted the indices, you need to rerun ‘tex’ on the
Texinfo file.  This regenerates the output file, this time with
up-to-date index entries.

   Finally, you may need to run ‘tex’ one more time, to get the page
numbers in the cross-references correct.

   To summarize, this is a five-step process.  (Alternatively, it's a
one-step process: run ‘texi2dvi’; see the previous section.)

  1. Run ‘tex’ on your Texinfo file.  This generates a DVI file (with
     undefined cross-references and no indices), and the raw index files
     (with two letter extensions).

  2. Run ‘texindex’ on the raw index files.  This creates the
     corresponding sorted index files (with three letter extensions).

  3. Run ‘tex’ again on your Texinfo file.  This regenerates the DVI
     file, this time with indices and defined cross-references, but with
     page numbers for the cross-references from the previous run,
     generally incorrect.

  4. Sort the indices again, with ‘texindex’.

  5. Run ‘tex’ one last time.  This time the correct page numbers are
     written for the cross-references.

   To generate PDF, you can run the ‘pdftex’ program instead of plain
‘tex’.  That is, run ‘pdftex foo.texi’ instead of ‘tex foo.texi’ in the
examples above.

* Menu:

* Formatting Partial Documents::
* Details of texindex::


File: texinfo.info,  Node: Formatting Partial Documents,  Next: Details of texindex,  Up: Format with tex/texindex

18.3.1 Formatting Partial Documents
-----------------------------------

Sometimes you may wish to print a document while you know it is
incomplete, or to print just one chapter of a document.  In such a case,
the usual auxiliary files that TeX creates and warnings TeX gives about
undefined cross-references are just nuisances.  You can avoid them with
the ‘@novalidate’ command, which you must give _before_ any sectioning
or cross-reference commands.

   Thus, the beginning of your file would look approximately like this:

     \input texinfo
     @novalidate
     ...

‘@novalidate’ also turns off validation in ‘texi2any’, just like its
‘--no-validate’ option (*note* Invoking texi2any::).

   Furthermore, you need not run ‘texindex’ each time after you run
‘tex’.  The ‘tex’ formatting command simply uses whatever sorted index
files happen to exist from a previous use of ‘texindex’.  If those are
out of date, that is usually ok while you are creating or debugging a
document.


File: texinfo.info,  Node: Details of texindex,  Prev: Formatting Partial Documents,  Up: Format with tex/texindex

18.3.2 Details of ‘texindex’
----------------------------

In Texinfo version 6, released in 2015, the ‘texindex’ program was
completely reimplemented.  The principal functional difference is that
index entries beginning with a left brace or right brace (‘{’ resp. ‘}’)
can work properly.  For example, these simple index entries are
processed correctly, including the "index initial" shown in the index:

     @cindex @{
     @cindex @}
     ...
     @printindex cp

   Although not a matter of functionality, readers may be interested to
know that the new ‘texindex’ is a literate program
(<https://en.wikipedia.org/wiki/Literate_programming>) using Texinfo for
documentation and (portable) ‘awk’ for code.  A single source file,
‘texindex/ti.twjr’ in this case, produces the runnable program, a
printable document, and an online document.

   The system is called TexiWeb Jr. and was created by Arnold Robbins,
who also wrote the new ‘texindex’.  Not coincidentally, he is also the
long-time maintainer of ‘gawk’ (GNU Awk, *note* (gawk)Top::).  The file
‘texindex/Makefile.am’ shows example usage of the system.


File: texinfo.info,  Node: Print with lpr,  Next: Preparing for TeX,  Prev: Format with tex/texindex,  Up: Hardcopy with TeX

18.4 Print with ‘lpr’ from Shell
================================

The way to print a DVI file depends on your system installation.  Two
common ones are ‘dvips foo.dvi -o’ to make a PostScript file first and
then print that, and ‘lpr -d foo.dvi’ to print a DVI file directly.

   For example, the following commands will (probably) suffice to sort
the indices, format, and print this manual using the ‘texi2dvi’ shell
script (*note* Format with texi2dvi::).

     texi2dvi texinfo.texi
     dvips texinfo.dvi -o
     lpr texinfo.ps

   Depending on the ‘lpr’ setup on your machine, you might be able to
combine the last two steps into ‘lpr -d texinfo.dvi’.

   You can also generate a PDF file by running ‘texi2dvi’ instead of
‘texi2dvi’; a PDF is often directly printable.  Or you can generate a
PCL file by using ‘dvilj’ instead of ‘dvips’, if you have a printer that
prefers that format.

   ‘lpr’ is a standard program on Unix systems, but it is usually absent
on MS-DOS/MS-Windows.  If so, just create a PostScript or PDF or PCL
file, whatever is most convenient, and print that in the usual way for
your machine (e.g., by sending to the appropriate port, usually ‘PRN’).


File: texinfo.info,  Node: Preparing for TeX,  Next: Overfull hboxes,  Prev: Print with lpr,  Up: Hardcopy with TeX

18.5 Preparing for TeX
======================

TeX needs to find the ‘texinfo.tex’ file that the ‘\input texinfo’
command on the first line reads.  The ‘texinfo.tex’ file tells TeX how
to handle @-commands; it is included in all standard GNU distributions.
The latest version released for general use is available from the usual
GNU servers and mirrors:

     <http://ftp.gnu.org/gnu/texinfo/texinfo.tex>
     <http://ftpmirror.gnu.org/texinfo/texinfo.tex>

   The latest development version is available from the Texinfo source
repository:

     <http://git.savannah.gnu.org/cgit/texinfo.git/plain/doc/texinfo.tex>

   ‘texinfo.tex’ is essentially a standalone file, so, if you need or
want to try a newer version than came with your system, it nearly always
suffices to download it and put it anywhere that TeX will find it.  You
can replace any existing ‘texinfo.tex’ with a newer version (of course
saving the original in case of disaster).

   Also, you should install ‘epsf.tex’, if it is not already installed
from another distribution.  More details are at the end of the
description of the ‘@image’ command (*note* Images::).

   To use quotation marks other than those used in English, you'll need
to have the European Computer Modern fonts (e.g., ‘ecrm1000’) and (for
PDF output) CM-Super fonts (*note* Inserting Quotation Marks::).

   To use the ‘@euro’ command, you'll need the ‘feym*’ fonts (e.g.,
‘feymr10’).  *Note* @euro::.

   All of the above files should be installed by default in a reasonable
TeX installation.

   Optionally, you may create a file ‘texinfo.cnf’ for site
configuration.  When processing a Texinfo file, TeX looks for this file
in its search path, which includes the current directory and standard
installation directories.  You can use this file for local conventions.
For example, if ‘texinfo.cnf’ contains the line ‘@afourpaper’ (*note* A4
Paper::), then all Texinfo documents will be processed with that page
size in effect.  If you have nothing to put in ‘texinfo.cnf’, you do not
need to create it.

   You can set the ‘TEXINPUTS’ environment variable to allow TeX to find
‘texinfo.cnf’.  (This also works for ‘texinfo.tex’ and any other file
TeX might read).  For example, if you are using a Bourne
shell-compatible shell (‘sh’, ‘bash’, ‘ksh’, ...), your ‘.profile’ file
could contain the lines:

     TEXINPUTS=.:/home/me/mylib:
     export TEXINPUTS

These settings would cause TeX first to look for an ‘\input’ file in the
current directory, indicated by the ‘.’, then in a hypothetical user
‘me’'s ‘mylib’ directory, and finally in the system directories.  (A
leading, trailing, or doubled ‘:’ indicates searching the system
directories at that point.)


File: texinfo.info,  Node: Overfull hboxes,  Prev: Preparing for TeX,  Up: Hardcopy with TeX

18.6 Overfull "hboxes"
======================

TeX is sometimes unable to typeset a line within the normal margins.
This most often occurs when TeX comes upon what it interprets as a long
word that it cannot hyphenate, such as an electronic mail network
address or a very long identifier.  When this happens, TeX prints an
error message like this:

     Overfull @hbox (20.76302pt too wide)

(In TeX, lines are in "horizontal boxes", hence the term, "hbox".
‘@hbox’ is a TeX primitive not used in the Texinfo language.)

   TeX also provides the line number in the Texinfo source file and the
text of the offending line, which is marked at all the places that TeX
considered hyphenation.  *Note* Debugging with TeX::, for more
information about typesetting errors.

   If the Texinfo file has an overfull hbox, you can rewrite the
sentence so the overfull hbox does not occur, or you can decide to leave
it.  A small excursion into the right margin often does not matter and
may not even be noticeable.

   If you have many overfull boxes and/or an antipathy to rewriting, you
can coerce TeX into greatly increasing the allowable interword spacing,
thus (if you're lucky) avoiding many of the bad line breaks, like this:

     @tex
     \global\emergencystretch = .9\hsize
     @end tex

(You should adjust the fraction as needed.)  This huge value for
‘\emergencystretch’ cannot be the default, since then the typeset output
would generally be of noticeably lower quality; its default value is
‘.15\hsize’.  ‘\hsize’ is the TeX dimension containing the current line
width.

   For any overfull boxes you do have, TeX will print a large, ugly,
black rectangle beside the line that contains the overfull hbox unless
told otherwise.  This is so you will notice the location of the problem
if you are correcting a draft.

   To prevent such a monstrosity from marring your final printout, write
the following in the beginning of the Texinfo file on a line of its own,
before the ‘@titlepage’ command:

     @finalout


File: texinfo.info,  Node: Generic Translator texi2any,  Next: Creating and Installing Info Files,  Prev: Hardcopy with TeX,  Up: Top

# /19 ‘texi2any’: The Translator for Texinfo
*****************************************

‘texi2any’ is the generic translator for Texinfo that can produce
different output formats and is highly customizable.  It supports these
formats:

     Info (by default, or with ‘--info’),
     HTML (with ‘--html’),
     EPUB 3 (with ‘--epub3’),
     plain text (with ‘--plaintext’),
     LaTeX (with ‘--latex’),
     DocBook (with ‘--docbook’),
     Texinfo XML (with ‘--xml’).

   ‘makeinfo’ is an alias for ‘texi2any’.  By default, both ‘texi2any’
and ‘makeinfo’ generate Info output; indeed, there are no differences in
behavior based on the name.

   Beside these default formats, command line options to ‘texi2any’ can
change many aspects of the output.  Beyond that, initialization files
provide even more control over the final output--nearly anything not
specified in the Texinfo input file.  Initialization files are written
in Perl, like the main program, and anything which can be specified on
the command line can also be specified within a initialization file.

* Menu:

* Invoking texi2any::          Running the translator from a shell.
* texi2any Environment Variables::  Control over output format and XS use.
* texi2any Printed Output::    Calling ‘texi2dvi’.
* Customization Variables::    Configuring ‘texi2any’.
* Internationalization of Document Strings::  Translating program-inserted
                               text.
* Invoking pod2texi::          Translating Perl Pod to Texinfo.
* texi2html::                  An ancestor of ‘texi2any’.


File: texinfo.info,  Node: Invoking texi2any,  Next: texi2any Environment Variables,  Up: Generic Translator texi2any

19.1 Invoking ‘texi2any’ from a Shell
=====================================

To process a Texinfo file, invoke ‘texi2any’ followed by the name of the
Texinfo file.  Also select the format you want to output with the
appropriate command line option (default is Info).  Thus, to create the
Info file for Bison, type the following to the shell:

     texi2any --info bison.texi

   You can specify more than one input file name; each is processed in
turn.  If an input file name is ‘-’, standard input is read.

   The ‘texi2any’ program accepts many options.  Perhaps the most basic
are those that change the output format.  By default, ‘texi2any’ outputs
Info.

   Each command line option is either a long name preceded by ‘--’ or a
single letter preceded by ‘-’.  You can use abbreviations for the long
option names as long as they are unique.

   For example, you could use the following shell command to create an
Info file for ‘bison.texi’ in which lines are filled to only 68 columns:

     texi2any --fill-column=68 bison.texi

   You can write two or more options in sequence, like this:

     texi2any --no-split --fill-column=70 ...

(This would keep the Info file together as one possibly very long file
and would also set the fill column to 70.)

   The options are (approximately in alphabetical order):

‘--commands-in-node-names’
     This option now does nothing, but remains for compatibility.  (It
     used to ensure that @-commands in node names were expanded
     throughout the document, especially ‘@value’.  This is now done by
     default.)

‘--conf-dir=DIR’
     Prepend DIR to the directory search list for finding customization
     files that may be loaded with ‘--init-file’ (see below).  The DIR
     value can be a single directory, or a list of several directories
     separated by the usual path separator character (‘:’ on Unix-like
     systems, ‘;’ on Windows).

‘--css-include=FILE’
     When producing HTML, literally include the contents of FILE, which
     should contain Cascading Style Sheets specifications, in the
     `<style>` block of the HTML output.  If FILE is ‘-’, read standard
     input.  *Note* HTML CSS::.

‘--css-ref=URL’
     When producing HTML, add a ‘<link>’ tag to the output which
     references a cascading style sheet at URL.  This allows using
     standalone style sheets.

‘-D VAR’
‘-D 'VAR VALUE'’
     Cause the Texinfo variable VAR to be defined.  This is equivalent
     to ‘@set VAR’ in the Texinfo file (*note* @set @clear @value::).

     The argument to the option is always one word to the shell; if it
     contains internal whitespace, the first word is taken as the
     variable name and the remainder as the value.  For example, ‘-D
     'myvar someval'’ is equivalent to ‘@set myvar someval’.

‘--docbook’
     Generate DocBook output (rather than Info).

‘--document-language=LANG’
     Use LANG to translate Texinfo keywords which end up in the output
     document.  The default is the locale specified by the
     ‘@documentlanguage’ command if there is one, otherwise English
     (*note* @documentlanguage::).

‘--dvi’
     Generate a TeX DVI file using ‘texi2dvi’, rather than Info (*note*
     texi2any Printed Output::).

‘--dvipdf’
     Generate a PDF file using ‘texi2dvi --dvipdf’, rather than Info
     (*note* texi2any Printed Output::).

‘--enable-encoding’
‘--disable-encoding’
     By default, or with ‘--enable-encoding’, output accented and
     special characters in Info and plain text output based on the
     document encoding.  With ‘--disable-encoding’, 7-bit ASCII
     transliterations are output.  Also obeyed in other output formats
     for index keys sorting and for some plain text output.

‘--epub3’
     Generate EPUB 3 output.

‘--error-limit=LIMIT’
‘-e LIMIT’
     Report LIMIT errors before aborting (on the assumption that
     continuing would be useless); default 100.

‘--fill-column=WIDTH’
‘-f WIDTH’
     Specify the maximum number of columns in a line; this is the
     right-hand edge of a line.  Paragraphs that are filled will be
     filled to this width.  (Filling is the process of breaking up and
     connecting lines so that lines are the same length as or shorter
     than the number specified as the fill column.  Lines are broken
     between words.)  The default value is 72.

‘--footnote-style=STYLE’
‘-s STYLE’
     Set the footnote style to STYLE: either ‘end’ for the end node
     style (the default) or ‘separate’ for the separate node style.  The
     value set by this option overrides the value set in a Texinfo file
     by a ‘@footnotestyle’ command (*note* Footnote Styles::).

     In Info, when the footnote style is ‘separate’, ‘texi2any’ makes a
     new node containing the footnotes found in the current node.  When
     the footnote style is ‘end’, ‘texi2any’ places the footnote
     references at the end of the current node.

     In HTML, when the footnote style is ‘end’, or if the output is not
     split, footnotes are put at the end of the output.  If set to
     ‘separate’, and the output is split, they are placed in a separate
     file.

‘--force’
‘-F’
     Ordinarily, if the input file has errors, the output files are not
     created.  With this option, they are preserved.

‘--help’
‘-h’
     Print a message with available options and basic usage, then exit
     successfully.

‘--html’
     Generate HTML output (rather than Info).  By default, the HTML
     output is split into one output file per node, and the split output
     is written into a subdirectory based on the name of the input file.
     *Note* Generating HTML::.

‘-I DIR’
     Append DIR to the directory search list for finding files that are
     included using the ‘@include’ command.  By default, ‘texi2any’
     searches only the current directory.  If DIR is not given, the
     current directory is appended.  The DIR value can be a single
     directory or a list of several directories separated by the usual
     path separator character (‘:’ on Unix-like systems, ‘;’ on
     Windows).

‘--ifdocbook’
‘--ifhtml’
‘--ifinfo’
‘--iflatex’
‘--ifplaintext’
‘--iftex’
‘--ifxml’
     For the given format, process ‘@ifFORMAT’ and ‘@FORMAT’ commands,
     and do not process ‘@ifnotFORMAT’, regardless of the format being
     output.  For instance, if ‘--iftex’ is given, then ‘@iftex’ and
     ‘@tex’ blocks will be read, and ‘@ifnottex’ blocks will be ignored.

‘--no-ifdocbook’
‘--no-ifhtml’
‘--no-ifinfo’
‘--no-iflatex’
‘--no-ifplaintext’
‘--no-iftex’
‘--no-ifxml’
     For the given format, do not process ‘@ifFORMAT’ and ‘@FORMAT’
     commands, and do process ‘@ifnotFORMAT’, regardless of the format
     being output.  For instance, if ‘--no-ifhtml’ is given, then
     ‘@ifhtml’ and ‘@html’ blocks will not be read, and ‘@ifnothtml’
     blocks will be.

‘--info’
     Generate Info output.  By default, if the output file contains more
     than about 300,000 bytes, it is split into shorter subfiles of
     about that size.  The name of the output file and any subfiles is
     determined by the input file name, or by ‘@setfilename’, if present
     (*note* Setting the Output File Name::).  *Note* Tag and Split
     Files::.

‘--init-file=FILE’
     Load FILE as code to modify the behavior and output of the
     generated manual.  It is customary to use the ‘.pm’ or the ‘.init’
     extensions for these customization files, but that is not enforced;
     the FILE name can be anything.  The ‘--conf-dir’ option (see above)
     can be used to add to the list of directories in which these
     customization files are searched for.

‘--internal-links=FILE’
     In HTML mode, output a tab-separated file containing three columns:
     the internal link to an indexed item or item in the table of
     contents, the name of the index (or table of contents) in which it
     occurs, and the term which was indexed or entered.  The items are
     in the natural sorting order for the given element.  This dump can
     be useful for post-processors.

‘--latex’
     Generate LaTeX output.

‘--macro-expand=FILE’
‘-E FILE’
     Output the Texinfo source, with all Texinfo macros expanded, to
     FILE.  Normally, the result of macro expansion is used internally
     by ‘texi2any’ and then discarded.

‘--no-headers’
     Do not include menus or node separator lines in the output.

     When generating Info, this is the same as using ‘--plaintext’,
     resulting in a simple plain text file.  Furthermore, output is to
     standard output unless overridden with ‘-o’.  (This behavior is for
     backward compatibility.)

     When generating HTML, and output is split, also output navigation
     links only at the beginning of each file.  If output is not split,
     do not include navigation links at the top of each node at all.
     *Note* Generating HTML::.

‘--node-files’
‘--no-node-files’
     With ‘--node-files’, when generating HTML, create redirection files
     for anchors and any nodes not already output with the file name
     corresponding to the node name (*note* HTML Xref Node Name
     Expansion::).  This makes it possible for section- and
     chapter-level cross-manual references to succeed (*note* HTML Xref
     Configuration::).

     If the output is split, this is enabled by default.  If the output
     is not split, ‘--node-files’ enables the creation of the
     redirection files, in addition to the monolithic main output file.
     ‘--no-node-files’ suppresses the creation of redirection files in
     any case.  This option has no effect with any output format other
     than HTML.  *Note* Generating HTML::.

‘--no-validate’
‘--no-pointer-validate’
     Suppress the pointer-validation phase of ‘texi2any’--a dangerous
     thing to do.  This can also be done with the ‘@novalidate’ command
     (*note* Formatting Partial Documents::).

     If you do not suppress pointer validation, ‘texi2any’ will check
     the validity of cross-references and menu entries in the Texinfo
     file, as well as node pointers if they are given explicitly.

‘--no-warn’
     Suppress warning messages (but not error messages).

‘--number-footnotes’
‘--no-number-footnotes’
     With ‘--no-number-footnotes’, suppress automatic footnote
     numbering.  By default, footnotes are numbered sequentially within
     a node, i.e., the current footnote number is reset to 1 at the
     start of each node.

‘--number-sections’
‘--no-number-sections’
     With ‘--number-sections’ (the default), output chapter, section,
     and appendix numbers as in printed manuals.  This works only with
     hierarchically structured manuals.  You should specify
     ‘--no-number-sections’ if your manual is not normally structured.

‘--output=FILE’
‘-o FILE’
     Specify that the output should be directed to FILE.  This overrides
     any file name specified in a ‘@setfilename’ command found in the
     Texinfo source.  If neither ‘@setfilename’ nor this option are
     specified, the input file name is used to determine the output
     name.  *Note* Setting the Output File Name::.

     If FILE is ‘-’, output goes to standard output and ‘--no-split’ is
     implied.

     If FILE is a directory or ends with a ‘/’ the usual rules are used
     to determine the output file name (namely, use ‘@setfilename’ or
     the input file name) but the files are written to the FILE
     directory.  For example, ‘texi2any -o bar/ foo.texi’, with or
     without ‘--no-split’, will write ‘bar/foo.info’, and possibly other
     files, under ‘bar/’.

     When generating HTML and output is split, FILE is used as the name
     for the directory into which all files are written.  For example,
     ‘texi2any -o bar --html foo.texi’ will write ‘bar/index.html’,
     among other files.

     When generating EPUB a container directory for the files and
     directories needed for the EPUB format is created, as well as the
     EPUB output file.  If FILE corresponds to a directory, the
     container directory is placed within FILE.  The EPUB output file is
     never put in this directory.  If FILE corresponds to a file, it is
     used for the EPUB output file name.

‘--output-indent=VAL’
     This option now does nothing, but remains for compatibility.  (It
     used to alter indentation in XML/DocBook output.)

‘-P PATH’
     Prepend PATH to the directory search list for ‘@include’.  If PATH
     is not given, the current directory is prepended.  See ‘-I’ above.

‘--paragraph-indent=INDENT’
‘-p INDENT’
     Set the paragraph indentation style to INDENT.  The value set by
     this option overrides the value set in a Texinfo file by an
     ‘@paragraphindent’ command (*note* @paragraphindent::).  The value
     of INDENT is interpreted as follows:

     ‘asis’
          Preserve any existing indentation (or lack thereof) at the
          beginnings of paragraphs.

     ‘0’ or ‘none’
          Delete any existing indentation.

     NUM
          Indent each paragraph by NUM spaces.

     The default is to indent by two spaces, except for paragraphs
     following a section heading, which are not indented.

‘--pdf’
     Generate a PDF file using ‘texi2dvi --pdf’, rather than Info (*note*
     texi2any Printed Output::).

‘--plaintext’
     Output a plain text file (rather than Info): do not include menus
     or node separator lines in the output.  This results in a
     straightforward plain text file that you can (for example) send in
     email without complications, or include in a distribution (for
     example, an ‘INSTALL’ file).

     With this option the output goes to standard output by default,
     instead of to a file with a name based on the input file name or
     ‘@setfilename’; this can be overridden with ‘-o’.

‘--ps’
     Generate a PostScript file using ‘texi2dvi --ps’, rather than Info
     (*note* texi2any Printed Output::).

‘--set-customization-variable VAR=VALUE’
‘-c VAR=VALUE’
     Set the customization variable VAR to VALUE.  The ‘=’ is optional,
     but both VAR and VALUE must be quoted to the shell as necessary so
     the result is a single word.  Many aspects of ‘texi2any’ behavior
     and output may be controlled by customization variables, beyond
     what can be set in the document by @-commands and with other
     command line switches.  *Note* Customization Variables::.

‘--split=HOW’
‘--no-split’
     When generating Info, by default large output files are split into
     smaller subfiles, of approximately 300k bytes.  When generating
     HTML, by default each output file contains one node (*note*
     Generating HTML::).  ‘--no-split’ suppresses this splitting of the
     output.

     Alternatively, ‘--split=HOW’ may be used to specify at which level
     the HTML output should be split.  The possible values for HOW are:

     ‘chapter’
          The output is split at ‘@chapter’ and other sectioning
          @-commands at this level (‘@appendix’, etc.).

     ‘section’
          The output is split at ‘@section’ and similar.

     ‘node’
          The output is split at every node.  This is the default.

     Plain text output can be split similarly to HTML.  This may be
     useful for extracting sections from a Texinfo document and making
     them available as separate files.

‘--split-size=NUM’
     Keep Info files to at most NUM characters if possible; default is
     300,000.  (However, a single node will never be split across Info
     files.)

‘--transliterate-file-names’
     Enable transliteration of non-ASCII characters in node names for
     the purpose of file name creation.  *Note* HTML Xref 8-bit Character
     Expansion::.

‘-U VAR’
     Cause VAR to be undefined.  This is equivalent to ‘@clear VAR’ in
     the Texinfo file (*note* @set @clear @value::).

‘--verbose’
     Cause ‘texi2any’ to display messages saying what it is doing.
     Normally, ‘texi2any’ only outputs messages if there are errors or
     warnings.

‘--version’
‘-V’
     Print the version number, then exit successfully.

‘--Xopt STR’
     Pass STR (a single shell word) to ‘texi2dvi’; may be repeated
     (*note* texi2any Printed Output::).

‘--xml’
     Generate Texinfo XML output (rather than Info).


File: texinfo.info,  Node: texi2any Environment Variables,  Next: texi2any Printed Output,  Prev: Invoking texi2any,  Up: Generic Translator texi2any

19.2 Environment Variables Recognized by ‘texi2any’
===================================================

‘texi2any’ also reads the environment variable ‘TEXINFO_OUTPUT_FORMAT’
to determine the output format, if not overridden by a command line
option.  The value should be one of:

     docbook  dvi  dvipdf  epub3  html  info  latex  pdf  plaintext  ps  xml

   If not set or otherwise specified, Info output is the default.

   ‘TEXINFO_OUTPUT_FORMAT’ may take some other special values, which do
not correspond to any command-line settable output format (*note*
Customization Variables and Options::).

   The customization variable of the same name is also read; if set,
that overrides an environment variable setting, but not a command-line
option.  *Note* Customization Variables and Options::.

   You can control ‘texi2any’'s use of Perl extension modules by setting
the ‘TEXINFO_XS’ environment variable.  These modules are compiled
native code that the interpreted Perl code can use.  Ideally, these
extension modules should just work, and the only noticeable difference
they should make is that ‘texi2any’ finishes running sooner.  However,
you can use this environment variable for the purposes of
troubleshooting: for example, if you have problems with the output of
‘texi2any’ varying depending on whether the extension modules are in
use.

   The following values of ‘TEXINFO_XS’ are recognized by ‘texi2any’:

‘default’
     The default behavior.  Try to load extension modules, and silently
     fall back to the interpreted Perl implementations if this fails.

‘warn’
     Try to load extension modules, and if this fails, give a warning
     message before falling back to the interpreted Perl
     implementations.

‘debug’
     Try to load extension modules, printing many messages while doing
     so.

‘omit’
     Do not use extension modules.

   Set ‘TEXINFO_XS_PARSER’ to ‘0’ to disable the use of the native code
implementation of the parser module.  This is the part of ‘texi2any’
that converts Texinfo input into an internal tree format used for
further processing into output formats.  This may be useful for working
around bugs or incompatibilities between the native code implementation
and the implementation in pure Perl code.


File: texinfo.info,  Node: texi2any Printed Output,  Next: Customization Variables,  Prev: texi2any Environment Variables,  Up: Generic Translator texi2any

19.3 ‘texi2any’ Printed Output
==============================

To justify the name Texinfo-to-_any_, ‘texi2any’ has basic support for
creating printed output in the various formats: TeX DVI, PDF, and
PostScript.  This is done via the simple method of executing the
‘texi2dvi’ program when those output formats are requested, after
checking the validity of the input to give users the benefit of
‘texi2any’'s error checking.  If you don't want such error checking,
perhaps because your manual plays advanced TeX tricks together with
‘texinfo.tex’, just invoke ‘texi2dvi’ directly.

   The output format options for this are ‘--dvi’, ‘--dvipdf’, ‘--pdf’,
and ‘--ps’.  *Note* Format with texi2dvi::, for more details on these
options and general ‘texi2dvi’ operation.  In addition, the ‘--verbose’,
‘--silent’, and ‘--quiet’ options are passed on if specified; the ‘-I’
and ‘-o’ options are likewise passed on with their arguments, and
‘--debug’ without its argument.

   The only option remaining that is related to the ‘texi2dvi’
invocation is ‘--Xopt’.  Here, just the argument is passed on and
multiple ‘--Xopt’ options accumulate.  This provides a way to construct
an arbitrary command line for ‘texi2dvi’.  For example, running

     texi2any --Xopt -t --Xopt @a4paper --pdf foo.texi

is equivalent to running

     texi2dvi -t @a4paper --pdf foo.texi

except for the validity check.

   Although one might wish that other options to ‘texi2any’ would take
effect, they don't.  For example, running ‘texi2any --no-number-sections
--dvi foo.texi’ still results in a DVI file with numbered sections.
(Perhaps this could be improved in the future, if requests are
received.)

   The actual name of the command that is invoked is specified by the
‘TEXI2DVI’ customization variable (*note* Other Customization
Variables::).  As you might guess, the default is ‘texi2dvi’.

   ‘texi2any’ itself does not generate any normal output when it invokes
‘texi2dvi’, only diagnostic messages.


File: texinfo.info,  Node: Customization Variables,  Next: Internationalization of Document Strings,  Prev: texi2any Printed Output,  Up: Generic Translator texi2any

19.4 Customization Variables
============================

     Warning: These customization variable names and meanings may change
     in any Texinfo release.  We always try to avoid incompatible
     changes, but we cannot absolutely promise, since needs change over
     time.

   Many aspects of the behavior and output of ‘texi2any’ may be modified
by modifying so-called “customization variables”.  These fall into a few
general categories:

   • Those associated with @-commands; for example, ‘@documentlanguage’.

   • Those associated with command-line options; for example, the
     customization variable ‘SPLIT’ is associated with the ‘--split’
     command-line option, and ‘TEXINFO_OUTPUT_FORMAT’ allows specifying
     the output format.

   • Those associated with customizing the HTML output.

   • Other ad hoc variables.

   Customization variables may set on the command line using
‘--set-customization-variable 'VAR VALUE'’ (quoting the variable/value
pair to the shell) or ‘--set-customization-variable VAR=VALUE’ (using
‘=’).  A special VALUE is ‘undef’, which sets the variable to this
special "undefined" Perl value.

   The sections below give the details for each of these.

* Menu:

* Commands: Customization Variables for @-Commands.
* Options:  Customization Variables and Options.
* HTML:     HTML Customization Variables.
* MathJax:  MathJax Customization Variables.
* latex2html:  latex2html Customization Variables.
* tex4ht:      tex4ht Customization Variables.
* LaTeX:    LaTeX Customization Variables.
* Other:    Other Customization Variables.


File: texinfo.info,  Node: Customization Variables for @-Commands,  Next: Customization Variables and Options,  Up: Customization Variables

19.4.1 Customization Variables for @-Commands
---------------------------------------------

Each of the following @-commands has an associated customization
variable with the same name (minus the leading ‘@’):

     @afivepaper            @afourpaper        @afourlatex
     @afourwide             @allowcodebreaks   @bsixpaper
     @contents              @clickstyle        @codequotebacktick
     @codequoteundirected   @deftypefnnewline  @documentdescription
     @documentencoding      @documentlanguage  @evenfooting
     @evenfootingmarks      @evenheading       @evenheadingmarks
     @everyfooting          @everyfootingmarks @everyheading
     @everyheadingmarks     @exampleindent     @firstparagraphindent
     @fonttextsize          @footnotestyle     @frenchspacing
     @headings              @kbdinputstyle     @microtype
     @novalidate            @oddfooting        @oddfootingmarks
     @oddheading            @oddheadingmarks   @pagesizes
     @paragraphindent       @setfilename       @setchapternewpage
     @shortcontents         @smallbook         @summarycontents
     @urefbreakstyle        @xrefautomaticsectiontitle

   Setting such a customization variable to a value ‘foo’ is similar to
executing ‘@CMD foo’.  It is not exactly the same, though, since any
side effects of parsing the Texinfo source are not redone.  Also, some
variables do not take Texinfo code when generating particular formats,
but an argument that is already formatted.  This is the case, for
example, for HTML for ‘documentdescription’.

   Note that if ‘texi2any’ is invoked to process the file with TeX
(e.g., with the ‘--pdf’ option), then these customization variables may
not be passed on to TeX.


File: texinfo.info,  Node: Customization Variables and Options,  Next: HTML Customization Variables,  Prev: Customization Variables for @-Commands,  Up: Customization Variables

19.4.2 Customization Variables and Options
------------------------------------------

The following table gives the customization variables associated with
some command line options.  *Note* Invoking texi2any::, for the meaning
of the options.

Option                               Variable
--------------------------------------------------------------------------
‘--enable-encoding’                  ‘ENABLE_ENCODING’
‘--document-language’                ‘documentlanguage’
‘--error-limit’                      ‘ERROR_LIMIT’
‘--fill-column’                      ‘FILLCOLUMN’
‘--footnote-style’                   ‘footnotestyle’
‘--force’                            ‘FORCE’
‘--internal-links’                   ‘INTERNAL_LINKS’
‘--macro-expand’                     ‘MACRO_EXPAND’
‘--headers’                          ‘HEADERS’, ‘FORMAT_MENU’
‘--no-warn’                          ‘NO_WARN’
‘--no-validate’                      ‘novalidate’
‘--number-footnotes’                 ‘NUMBER_FOOTNOTES’
‘--number-sections’                  ‘NUMBER_SECTIONS’
‘--node-files’                       ‘NODE_FILES’
‘--output’                           ‘OUTFILE’, ‘SUBDIR’
‘--paragraph-indent’                 ‘paragraphindent’
‘--silent’                           ‘SILENT’
‘--split’                            ‘SPLIT’
‘--split-size’                       ‘SPLIT_SIZE’
‘--transliterate-file-names’         ‘TRANSLITERATE_FILE_NAMES’
‘--verbose’                          ‘VERBOSE’

   Setting such a customization variable to a value ‘foo’ is essentially
the same as specifying the ‘--OPT=foo’ if the option takes an argument,
or ‘--OPT’ if not.

   In addition, the customization variable ‘TEXINFO_OUTPUT_FORMAT’
allows specifying what ‘texi2any’ outputs, either one of the usual
output formats that can be specified with options, or various other
forms:

‘docbook’
‘dvi’
‘dvipdf’
‘epub3’
‘html’
‘info’
‘pdf’
‘plaintext’
‘ps’
‘xml’
     These correspond to the command-line options (and
     ‘TEXINFO_OUTPUT_FORMAT’ environment variable values) of the same
     name.  *Note* Invoking texi2any::.

‘debugtree’
     Instead of generating a regular output format, output a text
     representation of the tree obtained by parsing the input texinfo
     document.

‘parse’
     Do only Texinfo source parsing; there is no output.

‘plaintexinfo’
     Output the Texinfo source with all the macros, ‘@include’ and
     ‘@value{}’ expanded.  This is similar to setting ‘--macro-expand’,
     but instead of being output in addition to the normal conversion,
     output of Texinfo is the main output.

‘rawtext’
     Output raw text, with minimal formatting.  For example, footnotes
     are ignored and there is no paragraph filling.  This is used by the
     parser for file names and copyright text in HTML comments, for
     example.

‘structure’
     Do only Texinfo source parsing and determination of the document
     structure; there is no output.

‘texinfosxml’
     Output the document in TexinfoSXML representation, a syntax for
     writing XML data using Lisp S-expressions.

‘textcontent’
     Output the text content only, stripped of commands; this is useful
     for spell checking or word counting, for example.  The trivial
     ‘detexinfo’ script setting this is in the ‘util’ directory of the
     Texinfo source as an example.  It's one line:

          exec texi2any -c TEXINPUT_OUTPUT_FORMAT=textcontent "$@"


File: texinfo.info,  Node: HTML Customization Variables,  Next: MathJax Customization Variables,  Prev: Customization Variables and Options,  Up: Customization Variables

19.4.3 HTML Customization Variables
-----------------------------------

This table gives the customization variables which apply to HTML output
only.  A few other customization variables apply to both HTML and other
output formats; see *note* Other Customization Variables::.

‘AVOID_MENU_REDUNDANCY’
     If set, and the menu entry and menu description are the same, then
     do not print the menu description; default false.

‘AFTER_BODY_OPEN’
     If set, the corresponding text will appear at the beginning of each
     HTML file; default unset.

‘AFTER_SHORT_TOC_LINES’
‘AFTER_TOC_LINES’
     If set, the corresponding text is output after the short table of
     contents for ‘AFTER_SHORT_TOC_LINES’ and after the table of
     contents for ‘AFTER_TOC_LINES’; otherwise, a default string is
     used.  At the time of writing, a ‘</div>’ element is closed.

     In general, you should set ‘BEFORE_SHORT_TOC_LINES’ if
     ‘AFTER_SHORT_TOC_LINES’ is set, and you should set
     ‘BEFORE_TOC_LINES’ if ‘AFTER_TOC_LINES’ is set.

‘BASEFILENAME_LENGTH’
     The maximum length of a base file name; default 245.  Changing this
     would make cross-manual references to such long node names invalid
     (*note* HTML Xref Link Basics::).

‘BEFORE_SHORT_TOC_LINES’
‘BEFORE_TOC_LINES’
     If set, the corresponding text is output before the short table of
     contents for ‘BEFORE_SHORT_TOC_LINES’ and before the table of
     contents for ‘BEFORE_TOC_LINES’, otherwise a default string is
     used.  At the time of writing, a ‘<div ...>’ element is opened.

     In general you should set ‘AFTER_SHORT_TOC_LINES’ if
     ‘BEFORE_SHORT_TOC_LINES’ is set, and you should set
     ‘AFTER_TOC_LINES’ if ‘BEFORE_TOC_LINES’ is set.

‘BIG_RULE’
     Rule used after and before the top element and before special
     elements, but not for footers and headers; default ‘<hr>’.

‘BODYTEXT’
     The text appearing in ‘<body>’.  By default, sets the HTML ‘lang’
     attribute to the document language (*note* @documentlanguage::).

‘CASE_INSENSITIVE_FILENAMES’
     Construct output file names as if the filesystem were case
     insensitive (*note* HTML Splitting::); default false.

‘CHAPTER_HEADER_LEVEL’
     Header formatting level used for chapter level sectioning commands;
     default ‘2’.

‘CHECK_HTMLXREF’
     Check that manuals which are the target of external
     cross-references (*note* Four and Five Arguments::) are present in
     ‘htmlxref.cnf’ (*note* HTML Xref Configuration::); default false.

‘COMPLEX_FORMAT_IN_TABLE’
     If set, use tables for indentation of complex formats; default
     false.

‘CONTENTS_OUTPUT_LOCATION’
     If set to ‘after_top’, output the contents at the end of the ‘@top’
     section.  If set to ‘inline’, output the contents where the
     ‘@contents’ and similar @-commands are located.  If set to
     ‘separate_element’ output the contents in separate elements, either
     at the end of the document if not split, or in a separate file.  If
     set to ‘after_title’ the tables of contents are output after the
     title; default ‘after_top’.

‘CONVERT_TO_LATEX_IN_MATH’
     If set, try to convert any Texinfo @-commands inside ‘@math’ and
     ‘@displaymath’ to LaTeX, before converting the ‘@math’ or
     ‘@displaymath’ to HTML. Default ‘undef’.  If undefined, set if
     ‘HTML_MATH’ is set.

‘COPIABLE_LINKS’
     If set, output copiable links for the definition commands (*note*
     Definition Commands::) and table commands (*note* Two-column
     Tables::) where an index entry is defined.  A link appears as a '¶'
     sign that appears when you hover the mouse pointer over the heading
     text.

‘DATE_IN_HEADER’
     Put the document generation date in the header; off by default.

‘DEF_TABLE’
     If set, a ‘<table>’ construction for ‘@deffn’ and similar
     @-commands is used (looking more like the TeX output), instead of
     definition lists; default false.

‘DEFAULT_RULE’
     Rule used between element, except before and after the top element,
     and before special elements, and for footers and headers; default
     ‘<hr>’.

‘DO_ABOUT’
     If set to 0 never do an About special element; if set to 1 always
     do an About special element; default 0.

‘EXTERNAL_CROSSREF_SPLIT’
     For cross-references to other manuals, this determines if the other
     manual is considered to be split or monolithic.  By default, it is
     set based on the value of ‘SPLIT’.  *Note* HTML Xref::, and *note*
     HTML Xref Configuration::.

‘EXTERNAL_DIR’
     Base directory for external manuals; default none.  It is better to
     use the general external cross-reference mechanism (*note* HTML Xref
     Configuration::) than this variable.

‘EXTERNAL_CROSSREF_EXTENSION’
     File extension for cross-references to other manuals.  If unset,
     based on ‘EXTENSION’.

‘EXTRA_HEAD’
     Additional text appearing within ‘<head>’; default unset.

‘FOOTNOTE_END_HEADER_LEVEL’
     Header formatting level used for the footnotes header with the
     'end' footnotestyle; default ‘4’.  *Note* Footnote Styles::.

‘FOOTNOTE_SEPARATE_HEADER_LEVEL’
     Header formatting level used for the footnotes header with the
     'separate' footnotestyle; default ‘4’.  *Note* Footnote Styles::.

‘FRAMES’
     If set, a file describing the frame layout is generated, together
     with a file with the short table of contents; default false.

‘FRAMESET_DOCTYPE’
     Same as DOCTYPE, but for the file containing the frame description.

‘HEADER_IN_TABLE’
     Use tables for header formatting rather than a simple ‘<div>’
     element; default false.

‘HTML_MATH’
     Method to use to render ‘@math’.  This can be unset, set to
     ‘mathjax’ (*note* MathJax Customization Variables::), set to ‘l2h’,
     which uses ‘latex2html’ (*note* latex2html Customization
     Variables::), or set to ‘t4h’, which uses ‘tex4ht’ (*note* tex4ht
     Customization Variables::).  In the default case, setting
     ‘HTML_MATH’ also sets ‘CONVERT_TO_LATEX_IN_MATH’.

‘HTML_ROOT_ELEMENT_ATTRIBUTES’
     Use that string for the ‘<html>’ HTML document root element.
     Default undefined.

‘HTMLXREF_FILE’
     Set the file name used for cross-references to other manuals.  If
     not defined, ‘htmlxref.cnf’ is used (*note* HTML Xref
     Configuration::).  Not defined in the default case.  If ‘TEST’ is
     set, ‘HTMLXREF_MODE’ is set to the default and ‘HTMLXREF_FILE’ is
     not defined, information on cross-references to other manuals is
     not used.

     If ‘HTMLXREF_MODE’ is set to ‘file’ the file name is directly used
     as the source of information, otherwise the file name is searched
     for in directories, and all the files found are used (*note* HTML
     Xref Configuration::).

‘HTMLXREF_MODE’
     How cross-references to other manuals information is determined.
     If set to ‘none’, no information is used.  If set to ‘file’, the
     information is determined from a file path, ‘htmlxref.cnf’ in the
     default case, or the value of ‘HTMLXREF_FILE’.  If not defined (the
     default) or set to any other value, search in directories and use
     all the files (*note* HTML Xref Configuration::).

‘ICONS’
     Use icons for the navigation panel; default false.

‘IMAGE_LINK_PREFIX’
     If set, the associated value is prepended to the image file links;
     default unset.

‘INDEX_ENTRY_COLON’
     Symbol used between the index entry and the associated node or
     section; default ‘:’.

‘INFO_JS_DIR’
     (Experimental.)  Add a JavaScript browsing interface to the manual.
     The value of the variable is the directory to place the code for
     this interface, so you would run the program as e.g. ‘texi2any
     --html -c INFO_JS_DIR=js MANUAL.texi’ to place files in a ‘js’
     directory under the output.  This provides some of the
     functionality of the Info browsers in a web browser, such as
     keyboard navigation and index lookup.  This only works with
     non-split HTML output.

     The interface should provide an acceptable fallback in
     functionality if JavaScript or web browser features are not
     available.  However, please be cautious when using this option, in
     case you do make your documentation harder to access for some of
     your users.

‘IGNORE_REF_TO_TOP_NODE_UP’
     Ignore references to ‘TOP_NODE_UP’, the up node for the Top node.

‘INLINE_CSS_STYLE’
     Put CSS directly in HTML elements rather than at the beginning of
     the output; default false.

‘JS_WEBLABELS’
‘JS_WEBLABELS_FILE’
     Specify how to use a “JavaScript license web labels” page to give
     licensing information and source code for any JavaScript used in
     the HTML files for the manual.  (See
     <https://www.gnu.org/licenses/javascript-labels.html>).

     With the value ‘generate’ (the default), generate a labels page at
     ‘JS_WEBLABELS_FILE’, and link to it in the HTML output files.  Only
     do this if actually referencing JavaScript files (either with
     ‘HTML_MATH’ set to ‘mathjax’, or when using the experimental JS
     browsing interface when ‘INFO_JS_DIR’ is set).  With this setting,
     ‘JS_WEBLABELS_FILE’ must be a relative file name.

     With the value ‘reference’, link to the labels file given by
     ‘JS_WEBLABELS_FILE’ in the output, and do not generate a labels
     file.  This setting is useful if you separately maintain a single
     labels file for a larger website that includes your manual.

     With ‘omit’, neither generate nor link to a labels file.

‘MAX_HEADER_LEVEL’
     Maximum header formatting level used (higher header formatting
     level numbers correspond to lower sectioning levels); default ‘4’.

‘MENU_ENTRY_COLON’
     Symbol used between the menu entry and the description; default
     ‘:’.

‘MENU_SYMBOL’
     Symbol used in front of menu entries when node names are used for
     menu entries formatting; default is undefined and set to ‘&bull;’
     if ‘USE_NUMERIC_ENTITY’ is not set, and to ‘&#8217;’ if set.

‘MONOLITHIC’
     Output only one file including the table of contents.  Set by
     default, but only relevant when the output is not split.

‘NO_CSS’
     Do not use CSS; default false.  *Note* HTML CSS::.

‘NO_CUSTOM_HTML_ATTRIBUTE’
     Do not output HTML with custom attributes in elements; default
     false.

‘NO_NUMBER_FOOTNOTE_SYMBOL’
     Symbol used for footnotes if ‘NUMBER_FOOTNOTES’ is false.  Default
     is ‘*’.

‘NODE_NAME_IN_INDEX’
     If true, use node names in index entries, otherwise prefer section
     names.  If undefined, use ‘USE_NODES’ value in HTML. Default is
     undefined.

‘PRE_BODY_CLOSE’
     If set, the given text will appear at the footer of each HTML file;
     default unset.

‘PROGRAM_NAME_IN_ABOUT’
     Used when an About element is output.  If set, output the program
     name and miscellaneous related information in About special
     element; default false.

‘PROGRAM_NAME_IN_FOOTER’
     If set, output the program name and miscellaneous related
     information in the page footers; default false.

‘SECTION_NAME_IN_TITLE’
     If set, when output is split, use the argument of the chapter
     structuring command (e.g., ‘@chapter’ or ‘@section’) in the
     ‘<title>’ instead of the argument to ‘@node’.

‘SHORT_TOC_LINK_TO_TOC’
     If set, the cross-references in the Short table of contents links
     to the corresponding Table of Contents entries, if a Table of
     Contents is output; default true.

‘SHOW_BUILTIN_CSS_RULES’
     Output the built-in default CSS rules on the standard output and
     exit.

‘SHOW_TITLE’
     If set, output the title at the beginning of the document; default
     ‘undef’.  If set to ‘undef’, setting ‘NO_TOP_NODE_OUTPUT’ also sets
     ‘SHOW_TITLE’ for HTML.

‘SIMPLE_MENU’
     If set, use a simple preformatted style for the menu, instead of
     breaking down the different parts of the menu; default false.
     *Note* Menu Parts::.

‘TOC_LINKS’
     If set, links from headings to toc entries are created; default
     false.

‘TOP_FILE’
     This file name may be used for the top-level file.  The extension
     is set appropriately, if necessary.  This is used to override the
     default, and is, in general, only taken into account when output is
     split, and for HTML.

‘TOP_NODE_FILE_TARGET’
     File name used for the Top node in cross-references; default is
     ‘index.html’.

‘TOP_NODE_UP_URL’
     A URL used for Top node up references; the default is ‘undef’, in
     that case no Top node Up reference is generated.  For more about
     the Top node pointers, *note* First Node::.  For overriding the Up
     pointer name in case ‘TOP_NODE_UP_URL’ is set and for other
     formats, see ‘TOP_NODE_UP’ in *note* Other Customization
     Variables::.

‘USE_ACCESSKEY’
     Use ‘accesskey’ in cross-references; default true.

‘USE_ISO’
     Use entities for doubled single-quote characters (*note* Inserting
     Quotation Marks::), and ‘---’ and ‘--’ (*note* Conventions::);
     default true.

‘USE_LINKS’
     Generate ‘<link>’ elements in the HTML ‘<head>’ output; default
     true.

‘USE_NEXT_HEADING_FOR_LONE_NODE’
     If set, a node not associated to a sectioning command but followed
     by a heading command not usually associated to node such as
     ‘@heading’ before other formatted contents do not have its name
     output as a heading, under the assumption that the command found
     provides the heading.  Default true.

‘USE_NODE_DIRECTIONS’
     If true, use nodes to determine where next, up and prev link to in
     node headers.  If false, use sections.  If undefined, use
     ‘USE_NODES’ value.  Default is undefined.  Note that this setting
     does not determine the link string only where the links points to,
     see *note* xrefautomaticsectiontitle: Three Arguments. for the link
     string customization.  If nodes and sections are systematically
     associated, this customization has no practical effect.

‘USE_REL_REV’
     Use ‘rel’ in cross-references; default true.

‘USE_TITLEPAGE_FOR_TITLE’
     Use the full ‘@titlepage’ as the title, not a simple title string;
     default true.  Only relevant if ‘SHOW_TITLE’ is set.

‘USE_XML_SYNTAX’
     Use XML/XHTML compatible syntax.

‘VERTICAL_HEAD_NAVIGATION’
     If set, a vertical navigation panel is used; default false.

‘WORDS_IN_PAGE’
     When output is split by nodes, specifies the approximate minimum
     page length at which a navigation panel is placed at the bottom of
     a page.  To avoid ever having the navigation buttons at the bottom
     of a page, set this to a sufficiently large number.  The default is
     300.

‘XREF_USE_FLOAT_LABEL’
     If set, for the float name in cross-references, use the float label
     instead of the type followed by the float number (*note* @float::).
     The default is off.

‘XREF_USE_NODE_NAME_ARG’
     Only relevant for cross-reference commands with no cross reference
     name (second argument).  If set to 1, use the node name (first)
     argument in cross-reference @-commands for the text displayed as
     the hyperlink.  If set to 0, use the node name if ‘USE_NODES’ is
     set, otherwise the section name.  If set to ‘undef’, use the first
     argument in preformatted environments, otherwise use the node name
     or section name depending on ‘USE_NODES’.  The default is ‘undef’.


File: texinfo.info,  Node: MathJax Customization Variables,  Next: latex2html Customization Variables,  Prev: HTML Customization Variables,  Up: Customization Variables

19.4.4 MathJax Customization Variables
--------------------------------------

This table lists the customization variables which can be used when
MathJax is being used, which will be the case when ‘HTML_MATH’ is set to
‘mathjax’.

‘MATHJAX_SCRIPT’
     URL of the MathJax component file (e.g. ‘tex-svg.js’) you are
     using.  ‘texi2any’ provides a default value for this variable, but
     you are encouraged to host this file yourself on your website so
     that you are not dependent on others' hosting.

‘MATHJAX_SOURCE’
     A URL of the full source code in its preferred form for
     modification, or instructions for obtaining such source code, for
     the component file named by ‘MATHJAX_SCRIPT’.  'Preferred form for
     modification' means that this should not be in a 'minified' form.
     Used in the license labels page (*note* HTML Customization
     Variables::, under ‘JS_WEBLABELS’).

     Again, ‘texi2any’ provides a default value for this variable, but
     you are encouraged to host the source code for MathJax and its
     dependencies yourself.  This is in order to make the source code
     available reliably, and to reduce you and your users' dependence on
     others' distribution systems.


File: texinfo.info,  Node: latex2html Customization Variables,  Next: tex4ht Customization Variables,  Prev: MathJax Customization Variables,  Up: Customization Variables

19.4.5 ‘latex2html’ Customization Variables
-------------------------------------------

This table lists the customization variables which can be used when
‘latex2html’ is being used to convert ‘@math’, ‘@displaymath’, ‘@latex’
and ‘@tex’ sections for HTML.  These customization variables are
relevant only if ‘HTML_MATH’ is set to ‘l2h’.

   To actually convert ‘@tex’ sections, ‘--iftex’ should be used, and to
actually convert ‘@latex’ sections, ‘--iflatex’ should be used.

‘L2H_CLEAN’
     If set, the intermediate files generated in relation with
     ‘latex2html’ are removed; default true.

‘L2H_FILE’
     If set, the given file is used as ‘latex2html’'s init file; default
     unset.

‘L2H_HTML_VERSION’
     The HTML version used in the ‘latex2html’ call; default unset.

‘L2H_L2H’
     The program invoked as ‘latex2html’; default is ‘latex2html’.

‘L2H_SKIP’
     If set to a true value, the actual call to ‘latex2html’ is skipped;
     previously generated content is reused instead.  If set to 0, the
     cache is not used at all.  If set to ‘undef’, the cache is used for
     as many TeX fragments as possible and for any remaining the command
     is run.  The default is ‘undef’.

‘L2H_TMP’
     Set the directory used for temporary files.  None of the file name
     components in this directory name may start with ‘.’; otherwise,
     ‘latex2html’ will fail (because of ‘dvips’).  The default is the
     empty string, which means the current directory.


File: texinfo.info,  Node: tex4ht Customization Variables,  Next: LaTeX Customization Variables,  Prev: latex2html Customization Variables,  Up: Customization Variables

19.4.6 ‘tex4ht’ Customization Variables
---------------------------------------

This table lists the customization variables which can be used when
‘tex4ht’ is being used to convert ‘@math’, ‘@displaymath’, ‘@tex’ and
‘@latex’ sections for HTML.  These customization variables are relevant
only if ‘HTML_MATH’ is set to ‘t4h’.

   To actually convert ‘@tex’ sections, ‘--iftex’ should be used, and to
actually convert ‘@latex’ sections, ‘--iflatex’ should be used.

‘T4H_LATEX_CONVERSION’
     If set, the conversion type used for ‘@latex’ sections.
     Possibilities are ‘latex’, ‘tex’ and ‘texi’.  Set to ‘latex’ if not
     defined.

‘T4H_MATH_CONVERSION’
     If set, the conversion type used for ‘@math’ and ‘@displymath’.
     Possibilities are ‘latex’, ‘tex’ and ‘texi’.  Set to ‘tex’ if not
     defined.

‘T4H_TEX_CONVERSION’
     If set, the conversion type used for ‘@tex’ sections.
     Possibilities are ‘latex’, ‘tex’ and ‘texi’.  Set to ‘tex’ if not
     defined.


File: texinfo.info,  Node: LaTeX Customization Variables,  Next: Other Customization Variables,  Prev: tex4ht Customization Variables,  Up: Customization Variables

19.4.7 LaTeX Customization Variables
------------------------------------

     warning: LaTeX output customization is experimental.  Nothing is
     decided, everything can change, and we would welcome any feedback.

   This table gives the customization variables which apply to LaTeX
output only.

‘CLASS_BEGIN_USEPACKAGE’
     If set, the corresponding text will replace the LaTeX
     ‘\documentclass’, package imports that are always output and are
     output right after ‘\documentclass’, and package imports that
     depend on the document encoding setting the input and font encoding
     (‘inputenc’ and ‘fontenc’).

     The text replaced is along:
          \documentclass{book}
          \usepackage{amsfonts}
          \usepackage{amsmath}
          \usepackage[gen]{eurosym}
          \usepackage{textcomp}
          \usepackage{graphicx}
          \usepackage{etoolbox}
          \usepackage{titleps}
          \usepackage[utf8]{inputenc}
          \usepackage[T1]{fontenc}

‘END_USEPACKAGE’
     If set, the corresponding text will replace the package imports
     that depend on the Texinfo commands used, and the last packages
     imports that are always output and output after all the other
     packages imports.  The last package imports corresponds to
     ‘\usepackage[hidelinks]{hyperref}’.

     Here is an example of the corresponding text for a document with
     indices, ‘@need’, ‘@multitable’, definition commands, ‘@cartouche’,
     lists, and ‘@float’:
          \usepackage{imakeidx}
          \usepackage{needspace}
          \usepackage{array}
          \usepackage{embrac}
          \usepackage{expl3}
          \usepackage{tabularx}
          \usepackage[framemethod=tikz]{mdframed}
          \usepackage{enumitem}
          \usepackage{float}
          \usepackage[hidelinks]{hyperref}


File: texinfo.info,  Node: Other Customization Variables,  Prev: LaTeX Customization Variables,  Up: Customization Variables

19.4.8 Other Customization Variables
------------------------------------

This table gives the remaining customization variables, which apply to
multiple formats, or affect global behavior, or otherwise don't fit into
the categories of the previous sections.

‘ASCII_DASHES_AND_QUOTES’
     For Info output, when set, use plain ASCII characters to represent
     quotation marks, hyphens and dashes when these are given in the
     Texinfo source as ‘-’, ‘--’, ‘---’, ‘`’, ‘``’, ‘'’, and ‘''’,
     rather than UTF-8 directional quotation marks, en dashes, vel sim.
     On by default.

‘ASCII_GLYPH’
     For Info output, use ASCII output for glyph commands such as the
     copyright sign (‘@copyright{}’, becoming ‘(C)’), and the bullet
     symbol (‘@bullet{}’, becoming ‘*’), rather than other Unicode
     sequences.  Off by default.

‘ASCII_PUNCTUATION’
     Avoid any unncessary or gratuitious non-ASCII, UTF-8 sequences in
     the output.  Implies both ‘ASCII_DASHES_AND_QUOTES’ and
     ‘ASCII_GLYPH’ and additionally affects the output of commands such
     as ‘@samp’ which output quotation marks.

‘AUTO_MENU_DESCRIPTION_ALIGN_COLUMN’
     For Info output, column at which to start a menu entry description
     provided by ‘@nodedescription’ or ‘@nodedescriptionblock’.
     Undefined by default, in which case 45% of the fill column value is
     used (*note* Invoking texi2any::).

‘AUTO_MENU_MAX_WIDTH’
     Maximum number of columns in a menu entry line in Info when adding
     a description from ‘@nodedescription’ or ‘@nodedescriptionblock’.
     Undefined by default, in which case 10% more than the fill column
     value is used (*note* Invoking texi2any::).

‘CHECK_MISSING_MENU_ENTRY’
     When a ‘@menu’ block occurs in a node, check if there is a menu
     entry for all subordinate nodes in the document sectioning
     structure.  On by default.

‘CHECK_NORMAL_MENU_STRUCTURE’
     Warn if the node pointers (either explicitly or automatically set)
     are not consistent with the order of node menu entries.  This is a
     more thorough structure check than that provided by
     ‘CHECK_MISSING_MENU_ENTRY’.  Off by default.

‘CLOSE_QUOTE_SYMBOL’
     When a closing quote is needed, e.g.  for ‘@samp’ output, use this
     character; default ‘&#8217;’ in DocBook.  Undefined in the default
     case in HTML and set to ‘&rsquo;’ if ‘USE_NUMERIC_ENTITY’ is not
     set, to ‘&#8217;’ if set, and to a quote character if
     ‘OUTPUT_CHARACTERS’ is set and the output encoding includes that
     character.

     The default for Info is set the same as for ‘OPEN_QUOTE_SYMBOL’,
     except that the Unicode code is a closing quote (see below).

‘CLOSE_DOUBLE_QUOTE_SYMBOL’
     When a closing double quote is needed, for ‘@dfn’ in Info, use this
     character.  The default for Info is set the same as for
     ‘OPEN_DOUBLE_QUOTE_SYMBOL’, except that the Unicode code is a
     closing double quote (see below).

‘COMMAND_LINE_ENCODING’
     Encoding used to decode command-line arguments.  Default is based
     on the locale encoding.  This may affect file names inserted into
     output files or error messages printed by the program.

     Note that some file and directory names from the command line may
     not be decoded immediately, and may not be decoded at all.

‘CPP_LINE_DIRECTIVES’
     Recognize ‘#line’ directives in a "preprocessing" pass (*note*
     External Macro Processors::); on by default.

‘DEBUG’
     If set, debugging output is generated; default is off (zero).

‘DOC_ENCODING_FOR_INPUT_FILE_NAME’
     If set, use the input Texinfo document encoding information for the
     encoding of input file names, such as file names specified as
     ‘@include’ or ‘@verbatiminclude’ arguments.  If unset, use the
     locale encoding instead.  Default is set, except on MS-Windows
     where the locale encoding is used by default.

     Note that this is for file names only; the default encoding or
     ‘@documentencoding’ is always used for the encoding of file content
     (*note* @documentencoding::).

     The ‘INPUT_FILE_NAME_ENCODING’ variable overrides this variable.

‘DOC_ENCODING_FOR_OUTPUT_FILE_NAME’
     If set, use the input Texinfo document encoding information for the
     encoding of output file names, such as files specified with
     ‘--output’.  If unset, use the locale encoding instead.  Default is
     unset, so files names are encoded using the current locale.

     Note that this is for file names only; ‘OUTPUT_ENCODING_NAME’ is
     used for the encoding of file content.

     The ‘OUTPUT_FILE_NAME_ENCODING’ variable overrides this variable.

‘DOCTYPE’
     For DocBook, HTML, XML.  Specifies the ‘SystemLiteral’, the
     entity's system identifier.  This is a URI which may be used to
     retrieve the entity, and identifies the canonical DTD for the
     document.  The default value is different for each of HTML, DocBook
     and XML.

‘DUMP_TEXI’
     For debugging.  If set, no conversion is done, only parsing and
     macro expansion.  If the option ‘--macro-expand’ is set, the
     Texinfo source is also expanded to the corresponding file.  Default
     false.

‘DUMP_TREE’
     For debugging.  If set, the tree constructed upon parsing a Texinfo
     document is output to standard error; default false.

‘EPUB_CREATE_CONTAINER_FILE’
     If set to 0, do not generate the EPUB output file.  Default is set
     to 1.

‘EPUB_KEEP_CONTAINER_FOLDER’
     If set, keep the directory containing the directories and files
     needed for EPUB. The EPUB output file is a ZIP archive of this
     directory.  Default is not defined.  Set if not defined and ‘TEST’
     or ‘DEBUG’ is set.  *Note* EPUB Output File and Directory::.

‘EXTENSION’
     The extension added to the output file name.  The default is
     different for each output format.

‘FORMAT_MENU’
     If set to ‘menu’, output Texinfo menus.  This is the default for
     Info.  ‘sectiontoc’ is the default setting for HTML, where instead
     of the contents of ‘@menu’ blocks being output, a list of
     subordinate sections is output in each node.  If set to ‘nomenu’,
     do not output menus.

     This variable is set to ‘nomenu’ when generating DocBook, or when
     ‘--no-headers’ is specified.

‘HIGHLIGHT_SYNTAX’
     If set, ‘@example’ blocks with language information as first
     argument are highlighted in the HTML output.  It is also possible
     to specify a default for the language with
     ‘HIGHLIGHT_SYNTAX_DEFAULT_LANGUAGE’.  Syntax highlighting requires
     an external program to generate the highlighted HTML. The
     ‘HIGHLIGHT_SYNTAX’ value allows to select a specific program.  The
     possibilities are ‘highlight’, ‘pygments’, any other value standing
     for ‘source-highlight’ (*note* Syntax Highlighting::).

‘HIGHLIGHT_SYNTAX_DEFAULT_LANGUAGE’
     The default language used for syntax highlighting when there is no
     language information.

‘IGNORE_SPACE_AFTER_BRACED_COMMAND_NAME’
     If set, spaces are ignored after an @-command that takes braces.
     Default true, matching the TeX behavior.

‘INDEX_SPECIAL_CHARS_WARNING’
     If set, warn about ‘:’ in index entry, as not all Info readers may
     be able to process these.  For Info and plaintext only.  Default
     false, because parsing problems there don't prevent navigation;
     readers can still relatively easily find their way to the node in
     question.

‘INFO_SPECIAL_CHARS_QUOTE’
     If set, whenever there are problematic characters for Info output
     in places such as node names or menu items, surround the part of
     the construct where they appear with quoting characters, as
     described in *note* Info Format Specification::.  Default is set for
     Info and unset for plaintext.  *Note* Node Line Requirements::.

‘INFO_SPECIAL_CHARS_WARNING’
     If set, warn about problematic constructs for Info output (such as
     the string ‘::’) in node names, menu items, and cross-references.
     If not defined, set unless ‘INFO_SPECIAL_CHARS_QUOTE’ is set.
     Default is set for Info and not defined for plaintext.  Similar
     warnings in index entries are covered by
     ‘INDEX_SPECIAL_CHARS_WARNING’.

‘INPUT_FILE_NAME_ENCODING’
     Encoding used for input file names.  This variable overrides any
     encoding from the document or current locale.  Normally, you do not
     need to set this variable, but it can be used if file names are in
     a certain character encoding on a filesystem.  An alternative is to
     set ‘DOC_ENCODING_FOR_INPUT_FILE_NAME’ to ‘0’ to use the locale
     encoding.  See also ‘OUTPUT_FILE_NAME_ENCODING’.

‘LOCALE_ENCODING’
     Locale encoding obtained from the system.  You should not need to
     explicitly set this variable.

‘MAX_MACRO_CALL_NESTING’
     The maximal number of recursive calls of @-commands defined through
     ‘@rmacro’; default 100000.  The purpose of this variable is to
     avoid infinite recursions.

‘MESSAGE_ENCODING’
     Encoding used to encode messages output by ‘texi2any’.  Default is
     based on the locale encoding.

     It is also used for command-line argument passed to commands called
     from ‘texi2any’.  For example, ‘latex2html’ will be called from
     ‘texi2any’ if ‘HTML_MATH’ is set to ‘l2h’.

‘NO_TOP_NODE_OUTPUT’
     If set do not output the Top node content.  The Top node is still
     parsed, but the content is discarded.  Not set in the default case
     for HTML.  Set in the default case for EPUB.  If ‘SHOW_TITLE’ is
     ‘undef’, setting ‘NO_TOP_NODE_OUTPUT’ also sets ‘SHOW_TITLE’ for
     HTML.

     Setting ‘NO_TOP_NODE_OUTPUT’, which removes the Top node and adds a
     title page corresponds more to the formatting of a book.  Setting
     ‘NO_TOP_NODE_OUTPUT’ to false, with ‘SHOW_TITLE’ remaining ‘undef’,
     and false, corresponds more to a document setup for browsing, with
     a direct access to the information at the Top node.

     For DocBook, ‘NO_TOP_NODE_OUTPUT’ is set to true.  Setting
     ‘NO_TOP_NODE_OUTPUT’ to false causes the Top node content to be
     output.  It is not recommended to output the Top node in DocBook as
     the title and copying informations are always output.  This option
     is kept for DocBook for compatibility, as before 2022 the Top node
     was output in DocBook.  It could be removed in the future.

‘NO_USE_SETFILENAME’
     If set, do not use ‘@setfilename’ to set the document name;
     instead, base the output document name only on the input file name.
     The default is false.

‘NODE_NAME_IN_MENU’
     If set, use node names in menu entries, otherwise prefer section
     names; default true.

‘OPEN_QUOTE_SYMBOL’
     When an opening quote is needed, e.g., for ‘@samp’ output, use the
     specified character; default ‘&#8216;’ for DocBook.  Undefined in
     the default case in HTML and set to ‘&lsquo;’ if
     ‘USE_NUMERIC_ENTITY’ is not set, to ‘&#8217;’ if set, and to a
     quote character if ‘OUTPUT_CHARACTERS’ is set and the output
     encoding includes that character.

     For Info, the default depends on the enabled document encoding.  If
     ‘--disable-encoding’ is set or the document encoding is not UTF-8,
     ‘'’ is used.  This character usually appears as an undirected
     single quote on modern systems.  Otherwise, the Info output uses a
     Unicode left quote.

‘OPEN_DOUBLE_QUOTE_SYMBOL’
     When an opening double quote is needed, for ‘@dfn’ output in Info,
     use the specified character.  If ‘--disable-encoding’ is set or the
     document encoding is not UTF-8, ‘"’ is used.  Otherwise, the Info
     output uses a Unicode left double quote.

‘OUTPUT_CHARACTERS’
     If not set, the default, output accented and special characters in
     HTML, XML and DocBook using XML entities, and in LaTeX using
     macros.  If set, output accented characters in HTML, XML, DocBook
     and LaTeX output and special characters in HTML and LaTeX output
     based on the document encoding.  *Note* @documentencoding::, and
     *note* Inserting Accents::.

‘OUTPUT_ENCODING_NAME’
     Normalized encoding name used for output files.  Should be a usable
     charset name in HTML, typically one of the preferred IANA encoding
     names.  By default, if an input encoding is set (typically through
     ‘@documentencoding’), this information is used to set the output
     encoding name, otherwise the output encoding is based on the
     default encoding.  *Note* @documentencoding::.

‘OUTPUT_FILE_NAME_ENCODING’
     Encoding used for output file names.  This variable overrides any
     encoding from the document or current locale.

     Normally, you do not need to set this variable, but it can be used
     if file names should be created in a certain character encoding on
     a filesystem.  See also ‘INPUT_FILE_NAME_ENCODING’.

‘PACKAGE’
‘PACKAGE_VERSION’
‘PACKAGE_AND_VERSION’
‘PACKAGE_URL’
‘PACKAGE_NAME’
     The implementation's short package name, package version, package
     name and version concatenated, package URL, and full package name,
     respectively.  By default, these variables are all set through
     Autoconf, Automake, and ‘configure’.

‘PREFIX’
     The output file prefix, which is prepended to some output file
     names.  By default it is set by ‘@setfilename’ or from the input
     file (*note* Setting the Output File Name::).  How this value is
     used depends on the value of other customization variables or
     command line options, such as whether the output is split.  The
     default is unset.

‘PROGRAM’
     Name of the program used.  By default, it is set to the name of the
     program launched, with a trailing ‘.pl’ removed.

‘SORT_ELEMENT_COUNT’
     If set, the name of a file to which a list of elements (nodes or
     sections, depending on the output format) is dumped, sorted by the
     number of lines they contain after removal of @-commands; default
     unset.  This is used by the program ‘texi-elements-by-size’ in the
     ‘util/’ directory of the Texinfo source distribution (*note*
     texi-elements-by-size::).

‘SORT_ELEMENT_COUNT_WORDS’
     When dumping the elements-by-size file (see preceding item), use
     word counts instead of line counts; default false.

‘TEST’
     If set to true, some variables which are normally dynamically
     generated anew for each run (date, program name, version) are set
     to fixed and given values.  This is useful to compare the output to
     a reference file, as is done for the tests.  The default is false.

‘TEXI2DVI’
     Name of the command used to produce PostScript, PDF, and DVI;
     default ‘texi2dvi’.  *Note* texi2any Printed Output::.

‘TEXI2HTML’
     Generate HTML and try to be as compatible as possible with
     ‘texi2html’; default false.

‘TEXINFO_DTD_VERSION’
     For XML.  Version of the DTD used in the XML output preamble.  The
     default is set based on a variable in ‘configure.ac’.

‘TEXTCONTENT_COMMENT’
     For stripped text content output (i.e., when
     ‘TEXINFO_OUTPUT_FORMAT’ is set to ‘textcontent’).  If set, also
     output comments.  Default false.

‘TOP_NODE_UP’
     Up node for the Top node; default ‘(dir)’.  This node name is
     supposed to be already formatted for the output format.  In HTML
     can be used in attribute, so should not contain any element.  Used
     for HTML output only if ‘TOP_NODE_UP_URL’ is set to override the
     URL, see ‘TOP_NODE_UP_URL’ in *note* HTML Customization Variables::.

‘TREE_TRANSFORMATIONS’
     The associated value is a comma separated list of transformations
     that can be applied to the Texinfo tree prior to outputting the
     result.  If more than one is specified, the ordering is irrelevant;
     each is always applied at the necessary point during processing.

     By default, the tree transformations
     ‘move_index_entries_after_items’ and
     ‘relate_index_entries_to_table_entries’ are executed for HTML and
     DocBook output.  Here's an example of updating the master menu in a
     document:

          texi2any \
            -c TREE_TRANSFORMATIONS=regenerate_master_menu \
            -c TEXINFO_OUTPUT_FORMAT=plaintexinfo \
            mydoc.texi \
            -o /tmp/out

     (Caveat: Since ‘plaintexinfo’ output expands Texinfo macros and
     conditionals, it's necessary to remove any such differences before
     installing the updates in the original document.  This may be
     remedied in a future release.)

     The following transformations are currently supported (many are
     used in the ‘pod2texi’ utility distributed with Texinfo; *note*
     Invoking pod2texi::):

     ‘complete_tree_nodes_menus’
          Add menu entries or whole menus for nodes associated with
          sections of any level, based on the sectioning tree.

     ‘complete_tree_nodes_missing_menu’
          Add whole menus for nodes associated with sections without
          menu.  The menus are based on the sectioning tree.

     ‘fill_gaps_in_sectioning’
          Adds empty ‘@unnumbered...’ sections in a tree to fill gaps in
          sectioning.  For example, an ‘@unnumberedsec’ will be inserted
          if a ‘@chapter’ is followed by a ‘@subsection’.

     ‘insert_nodes_for_sectioning_commands’
          Insert nodes for sectioning commands lacking a corresponding
          node.

     ‘move_index_entries_after_items’
          In ‘@enumerate’ and ‘@itemize’, move index entries appearing
          just before an ‘@item’ to just after the ‘@item’.  Comment
          lines between index entries are moved too.  As mentioned, this
          is always done for HTML and DocBook output.

     ‘regenerate_master_menu’
          Update the Top node master menu, either replacing the (first)
          ‘@detailmenu’ in the Top node menu, or creating it at the end
          of the Top node menu.

     ‘relate_index_entries_to_table_entries’
          In ‘@table’, ‘@vtable’ and ‘@ftable’, reassociate the index
          entry information from an index @-command appearing right
          after an ‘@item’ line with the first element of the ‘@item’.
          Remove the index @-command from the tree.

     ‘simple_menu’
          Mostly the same as ‘SIMPLE_MENU’: use a simple preformatted
          style for the menu.  It differs from setting ‘SIMPLE_MENU’ in
          that ‘SIMPLE_MENU’ only has an effect in HTML output.

‘USE_NODES’
     Preferentially use nodes to decide where elements are separated.
     If set to false, preferentially use sectioning to decide where
     elements are separated.  The default is true.

‘USE_NUMERIC_ENTITY’
     For HTML, XML and DocBook.  If set, use numeric entities instead of
     named entities.  By default, set to true for DocBook output.

‘USE_UP_NODE_FOR_ELEMENT_UP’
     Fill in up sectioning direction with node direction when there is
     no sectioning up direction.  In practice this can only happen when
     there is no @top section.  Not set by default.

‘USE_SETFILENAME_EXTENSION’
     Default is on for Info, off for other output.  If set, use exactly
     what ‘@setfilename’ gives for the output file name, including the
     extension.  You should not need to explicitly set this variable.

‘USE_UNIDECODE’
     If set to false, do not use the ‘Text::Unidecode’ Perl module to
     transliterate more characters; default true.


File: texinfo.info,  Node: Internationalization of Document Strings,  Next: Invoking pod2texi,  Prev: Customization Variables,  Up: Generic Translator texi2any

19.5 Internationalization of Document Strings
=============================================

‘texi2any’ writes fixed strings into the output document at various
places: cross-references, page footers, the help page, alternate text
for images, and so on.  The string chosen depends on the value of the
‘documentlanguage’ at the time of the string being output (*note*
@documentlanguage::, for the Texinfo command interface).

   The Gettext framework is used for those strings (*note*
(gettext)Top::).  The ‘libintl-perl’ package is used as the ‘gettext’
implementation; more specifically, the pure Perl implementation is used,
so Texinfo can support consistent behavior across all platforms and
installations, which would not otherwise be possible.  ‘libintl-perl’ is
included in the Texinfo distribution and always installed, to ensure
that it is available if needed.  It is also possible to use the system
‘gettext’ (the choice can be made at build-time).

   The Gettext domain ‘texinfo_document’ is used for the strings.
Translated strings are written as Texinfo, and may include @-commands.
In translated strings, the varying parts of the string are not usually
denoted by ‘%s’ and the like, but by ‘{arg_name}’.  (This convention is
common for ‘gettext’ in Perl and is fully supported in GNU Gettext;
*note* Perl Format Strings: (gettext)perl-format.)  For example, in the
following, ‘{section}’ will be replaced by the section name:

     see {section}

   These Perl-style brace format strings are used for two reasons:
first, changing the order of ‘printf’ arguments is only available since
Perl 5.8.0; second, and more importantly, the order of arguments is
unpredictable, since @-command expansion may lead to different orders
depending on the output format.

   The expansion of a translation string is done like this:

  1. First, the string is translated.  The locale is
     DOCUMENTLANGUAGE‘.’DOCUMENTENCODING.

     If the DOCUMENTLANGUAGE has the form ‘ll_CC’, that is tried first,
     and then just ‘ll’.

     To cope with the possibility of having multiple encodings, a
     special use of the ‘us-ascii’ locale encoding is also possible.  If
     the ‘ll’ locale in the current encoding does not exist, and the
     encoding is not ‘us-ascii’, then ‘us-ascii’ is tried.

     The idea is that if there is a ‘us-ascii’ encoding, it means that
     all the characters in the charset may be expressed as @-commands.
     For example, there is a ‘fr.us-ascii’ locale that can accommodate
     any encoding, since all the Latin 1 characters have associated
     @-commands.  On the other hand, Japanese has only a translation
     ‘ja.utf-8’, since there are no @-commands for Japanese characters.

     The ‘us-ascii’ locales are not needed much now that UTF-8 is used
     for most documents.  Note that accented characters are required to
     be expressed as @-commands in the ‘us-ascii’ locales, which may be
     inconvenient for translators.

  2. Next, the string is expanded as Texinfo, and converted.  The
     arguments are substituted; for example, ‘{arg_name}’ is replaced by
     the corresponding actual argument.

   In the following example, ‘{date}’, ‘{program_homepage}’ and
‘{program}’ are the arguments of the string.  Since they are used in
‘@uref’, their order is not predictable.  ‘{date}’, ‘{program_homepage}’
and ‘{program}’ are substituted after the expansion:

     Generated on @emph{{date}} using
     @uref{{program_homepage}, @emph{{program}}}.

   This approach is admittedly a bit complicated.  Its usefulness is
that it supports having translations available in different encodings
for encodings which can be covered by @-commands, and also specifying
how the formatting for some commands is done, independently of the
output format--yet still be language-dependent.  For example, the
‘@pxref’ translation string can be like this:

     see {node_file_href} section `{section}' in @cite{{book}}

which allows for specifying a string independently of the output format,
while nevertheless with rich formatting it may be translated
appropriately in many languages.


File: texinfo.info,  Node: Invoking pod2texi,  Next: texi2html,  Prev: Internationalization of Document Strings,  Up: Generic Translator texi2any

19.6 Invoking ‘pod2texi’: Convert Pod to Texinfo
================================================

The ‘pod2texi’ program translates Perl Pod documentation file(s) to
Texinfo.  There are two basic modes of operation: generating a
standalone manual from each input Pod, or (if ‘--base-level=1’ or higher
is given) generating Texinfo subfiles suitable for use with ‘@include’.

   The ‘pod2texi’ program may be useful outside of the rest of Texinfo;
thus, the invocation of ‘pod2texi’ is documented in the Pod language
using the man page format to follow the convention used in Perl
standalone programs, with a version on the web
<http://www.gnu.org/software/texinfo/manual/pod2texi.html> and a version
included below.  The version included in the manual is also an example
of ‘pod2texi’ use, as it is converted from Pod using ‘pod2texi’.

* Menu:

* pod2texi manual page::       ‘pod2texi’ invocation in a manual page format.


File: texinfo.info,  Node: pod2texi manual page,  Up: Invoking pod2texi

19.6.1 pod2texi
---------------

pod2texi NAME
.............

pod2texi - convert Pod to Texinfo

pod2texi SYNOPSIS
.................

  pod2texi [OPTION]... POD...

pod2texi DESCRIPTION
....................

Translate Pod file(s) to Texinfo.  There are two basic modes of
operation.  First, by default, each Pod is translated to a standalone
Texinfo manual.

   Second, if ‘--base-level’ is set higher than 0, each Pod is
translated to a file suitable for ‘@include’, and one more file with a
main menu and all the ‘@include’ is generated.

pod2texi OPTIONS
................

*--appendix-sections*

     Use appendix sectioning commands (‘@appendix’, ...)  instead of the
     default numbered sectioning Texinfo @-commands (‘@chapter’,
     ‘@section’, ...).

*--base-level*=_NUM|NAME_

     Sets the level of the ‘head1’ commands.  It may be an integer or a
     Texinfo sectioning command (without the ‘@’): 1 corresponds to the
     ‘@chapter’/‘@unnumbered’ level, 2 to the ‘@section’ level, and so
     on.  The default is 0, meaning that ‘head1’ commands are still
     output as chapters, but the output is arranged as a standalone
     manual.

     If the level is not 0, the Pod file is rendered as a fragment of a
     Texinfo manual suitable for ‘@include’.  In this case, each Pod
     file has an additional sectioning command covering the entire file,
     one level above the ‘--base-level’ value.  Therefore, to make each
     Pod file a chapter in a large manual, you should use ‘section’ as
     the base level.

     For an example of making Texinfo out of the Perl documentation
     itself, see ‘contrib/perldoc-all’ in the Texinfo source
     distribution.

*--debug*=_NUM_

     Set debugging level to _NUM_.

*--headings-as-sections*

     Use headings commands (‘@heading’, ...)  instead of the default
     numbered sectioning Texinfo @-commands (‘@chapter’, ‘@section’,
     ...).  The sectioning command covering the entire file output for
     each Pod file if *--base-level* is not 0 is a numbered command.

*--help*

     Display help and exit.

*--menus*

     Output node menus.  If there is a main manual, its Top node menu is
     always output, since a master menu is generated.  Other nodes menus
     are not output in the default case.

*--output*=_NAME_

     Name for the first manual, or the main manual if there is a main
     manual.  Default is to write to standard output.

*--no-section-nodes*

     Use anchors for sections instead of nodes.

*--no-fill-section-gaps*

     Do not fill sectioning gaps with empty ‘@unnumbered’ files.
     Ordinarily, it's good to keep the sectioning hierarchy intact.

*--preamble*=_STR_

     Insert _STR_ as top boilerplate before menu and includes.  If _STR_
     is set to ‘-’, read the top boilerplate from the standard input.
     The default top boilerplate is a minimal beginning for a Texinfo
     document.

*--setfilename*=_STR_

     Use _STR_ in top boilerplate before menu and includes for
     ‘@setfilename’.  No ‘@setfilename’ is output in the default case.

*--subdir*=_NAME_

     If there is a main manual with include files (each corresponding to
     an input Pod file), then those include files are put in directory
     _NAME_.

*--unnumbered-sections*

     Use unnumbered sectioning commands (‘@unnumbered’, ...)  instead of
     the default numbered sectioning Texinfo @-commands (‘@chapter’,
     ‘@section’, ...).

*--top*=_TOP_

     Name of the ‘@top’ element for the main manual.  May contain
     Texinfo code.

*--version*

     Display version information and exit.

pod2texi SEE ALSO
.................

*note* (Pod-Simple-Texinfo)::.  *note* (perlpod)::.  The Texinfo manual.
Texinfo home page: <http://www.gnu.org/software/texinfo/>

pod2texi COPYRIGHT AND LICENSE
..............................

Copyright 2012-2023 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 3 of the License, or (at your
option) any later version.

   There is NO WARRANTY, to the extent permitted by law.

pod2texi AUTHOR
...............

Patrice Dumas <bug-texinfo@gnu.org>.


File: texinfo.info,  Node: texi2html,  Prev: Invoking pod2texi,  Up: Generic Translator texi2any

19.7 ‘texi2html’: Ancestor of ‘texi2any’
========================================

Conceptually, the ‘texi2html’ program is the parent of today's
‘texi2any’ program.  ‘texi2html’ was developed independently, originally
by Lionel Cons in 1998; at the time, ‘makeinfo’ could not generate HTML.
Many other people contributed to ‘texi2html’ over the years.

   The present ‘texi2any’ uses little of the actual code of ‘texi2html’,
and has quite a different basic approach to the implementation (namely,
parsing the Texinfo document into a tree), but still, there is a family
resemblance.

   By design, ‘texi2any’ supports nearly all the features of ‘texi2html’
in some way.  However, we did not attempt to maintain strict
compatibility, so no ‘texi2html’ executable is installed by the Texinfo
package.  An approximation can be run with an invocation like this:

     texi2any --set-customization-variable TEXI2HTML=1 ...

but, to emphasize, this is _not_ a drop-in replacement for the previous
‘texi2html’.  Here are the biggest differences:

   • Most blatantly, the command line options of ‘texi2html’ are now
     customization variables, for the most part.  A table of approximate
     equivalents is given below.

   • The program-level customization API is very different in
     ‘texi2any’.

   • Indices cannot be split.

   We do not intend to reimplement these differences.  Therefore, the
route forward for authors is alter manuals and build processes as
necessary to use the new features and methods of ‘texi2any’.  The
‘texi2html’ maintainers (one of whom is the principal author of
‘texi2any’) do not intend to make further releases.

   Here is the table showing ‘texi2html’ options and corresponding
‘texi2any’ customization variables.

‘--toc-links’          ‘TOC_LINKS’
‘--short-ext’          ‘EXTENSION’ set to ‘htm’
‘--prefix’             ‘PREFIX’
‘--def-table’          ‘DEF_TABLE’
‘--html-xref-prefix’   ‘EXTERNAL_DIR’
‘--l2h’                ‘HTML_MATH’ set to ‘l2h’
‘--l2h-l2h’            ‘L2H_L2H’
‘--l2h-skip’           ‘L2H_SKIP’
‘--l2h-tmp’            ‘L2H_TMP’
‘--l2h-file’           ‘L2H_FILE’
‘--l2h-clean’          ‘L2H_CLEAN’
‘--use-nodes’          ‘USE_NODES’
‘--monolithic’         ‘MONOLITHIC’
‘--top-file’           ‘TOP_FILE’
‘--frames’             ‘FRAMES’
‘--menu’               ‘FORMAT_MENU’
‘--debug’              ‘DEBUG’
‘--doctype’            ‘DOCTYPE’
‘--frameset-doctype’   ‘FRAMESET_DOCTYPE’
‘--test’               ‘TEST’

   Finally, any ‘texi2html’ users seeking more detailed information can
check the first part of the archived file ‘doc/texi2oldapi.texi’ in the
Texinfo source repository.


File: texinfo.info,  Node: Creating and Installing Info Files,  Next: Generating HTML,  Prev: Generic Translator texi2any,  Up: Top

# /20 Creating and Installing Info Files
*************************************

This chapter gives some information on the Info output and describes how
to install Info files.  For the creation of Info files with ‘texi2any’,
see *note* Generic Translator texi2any::, and with Emacs, *note* Info
Formatting::.  *Note* Info Files::, for general information about the
file format.  *Note* Info Format Specification::, for a detailed
technical specification of the Info format.

* Menu:

* Installing an Info File::
* Tag and Split Files::
* Info Format FAQ::


File: texinfo.info,  Node: Installing an Info File,  Next: Tag and Split Files,  Up: Creating and Installing Info Files

20.1 Installing an Info File
============================

Info files are usually kept in the ‘info’ directory.  You can read Info
files using the standalone Info program or the Info reader built into
Emacs.  (*Note* (info)Top::, for an introduction to Info.)

* Menu:

* Directory File::             The top-level menu for all Info files.
* New Info File::              Listing a new Info file.
* Other Info Directories::     How to specify Info files that are located in
                               other directories.
* Installing Dir Entries::     How to specify what menu entry to add to the
                               Info directory.
* Invoking install-info::      ‘install-info’ options.


File: texinfo.info,  Node: Directory File,  Next: New Info File,  Up: Installing an Info File

20.1.1 The Directory File ‘dir’
-------------------------------

For Info to work, the ‘info’ directory must contain a file that serves
as a top-level directory for the Info system.  By convention, this file
is called ‘dir’.  (You can find the location of this file within Emacs
by typing ‘C-h i’ to enter Info and then typing ‘C-x C-f’ to see the
location of the ‘info’ directory.)

   The ‘dir’ file is itself an Info file.  It contains the top-level
menu for all the Info files in the system.  The menu looks like this:

     * Menu:
     * Info:    (info).     Documentation browsing system.
     * Emacs:   (emacs).    The extensible, self-documenting
                           text editor.
     * Texinfo: (texinfo).  With one source file, make
                           either a printed manual using
                           @TeX{} or an Info file.
     ...

   Each of these menu entries points to the 'Top' node of the Info file
that is named in parentheses.  (The menu entry does not need to specify
the 'Top' node, since Info goes to the 'Top' node if no node name is
mentioned.  *Note* Nodes in Other Info Files: Other Info Files.)

   Thus, the ‘Info’ entry points to the 'Top' node of the ‘info’ file
and the ‘Emacs’ entry points to the 'Top' node of the ‘emacs’ file.

   In each of the Info files, the 'Up' pointer of the 'Top' node refers
back to the ‘dir’ file.  For example, the line for the 'Top' node of the
Emacs manual looks like this in Info:

     File: emacs  Node: Top, Up: (DIR), Next: Distrib

In this case, the ‘dir’ file name is written in uppercase letters--it
can be written in either upper- or lowercase.  This is not true in
general, it is a special case for ‘dir’.

   See the ‘util/dir-example’ file in the Texinfo distribution for a
large sample ‘dir’ file.


File: texinfo.info,  Node: New Info File,  Next: Other Info Directories,  Prev: Directory File,  Up: Installing an Info File

20.1.2 Listing a New Info File
------------------------------

To add a new Info file to your system, you must write a menu entry to
add to the menu in the ‘dir’ file in the ‘info’ directory.  For example,
if you were adding documentation for GDB, you would write the following
new entry:

     * GDB: (gdb).           The source-level C debugger.

The first part of the menu entry is the menu entry name, followed by a
colon.  The second part is the name of the Info file, in parentheses,
followed by a period.  The third part is the description.

   The name of an Info file often has a ‘.info’ extension.  Thus, the
Info file for GDB might be called either ‘gdb’ or ‘gdb.info’.  The Info
reader programs automatically try the file name both with and without
‘.info’(1); so it is better to avoid clutter and not to write ‘.info’
explicitly in the menu entry.  For example, the GDB menu entry should
use just ‘gdb’ for the file name, not ‘gdb.info’.

   ---------- Footnotes ----------

   (1) On MS-DOS/MS-Windows systems, Info will try the ‘.inf’ extension
as well.


File: texinfo.info,  Node: Other Info Directories,  Next: Installing Dir Entries,  Prev: New Info File,  Up: Installing an Info File

20.1.3 Info Files in Other Directories
--------------------------------------

If an Info file is not in the ‘info’ directory, there are three ways to
specify its location:

  1. Write the file name in the ‘dir’ file as the second part of the
     menu.

  2. Specify the Info directory name in the ‘INFOPATH’ environment
     variable in your ‘.profile’ or ‘.cshrc’ initialization file.  (Only
     you and others who set this environment variable will be able to
     find Info files whose location is specified this way.)

  3. If you are using Emacs, list the name of the file in a second ‘dir’
     file, in its directory; and then add the name of that directory to
     the ‘Info-directory-list’ variable in your personal or site
     initialization file.

     This variable tells Emacs where to look for ‘dir’ files (the files
     must be named ‘dir’).  Emacs merges the files named ‘dir’ from each
     of the listed directories.  (In Emacs version 18, you can set the
     ‘Info-directory’ variable to the name of only one directory.)

   For example, to reach a test file in the ‘/home/bob/info’ directory,
you could add an entry like this to the menu in the standard ‘dir’ file:

     * Test: (/home/bob/info/info-test).  Bob's own test file.

In this case, the absolute file name of the ‘info-test’ file is written
as the second part of the menu entry.

   If you don't want to edit the system ‘dir’ file, you can tell Info
where to look by setting the ‘INFOPATH’ environment variable in your
shell startup file.  This works with both the Emacs and standalone Info
readers.

   Emacs uses the ‘INFOPATH’ environment variable to initialize the
value of Emacs's own ‘Info-directory-list’ variable.  The standalone
Info reader merges any files named ‘dir’ in any directory listed in the
‘INFOPATH’ variable into a single menu presented to you in the node
called ‘(dir)Top’.

   However you set ‘INFOPATH’, if its last character is a colon (on
MS-DOS/MS-Windows systems, use a semicolon instead), this is replaced by
the default (compiled-in) path.  This gives you a way to augment the
default path with new directories without having to list all the
standard places.  For example (using ‘sh’ syntax):

     INFOPATH=/home/bob/info:
     export INFOPATH

will search ‘/home/bob/info’ first, then the standard directories.
Leading or doubled colons are not treated specially.

   When you create your own ‘dir’ file for use with
‘Info-directory-list’ or ‘INFOPATH’, it's easiest to start by copying an
existing ‘dir’ file and replace all the text after the ‘* Menu:’ with
your desired entries.  That way, the punctuation and special ‘CTRL-_’
characters that Info needs will be present.

   As one final alternative, which works only with Emacs Info, you can
change the ‘Info-directory-list’ variable.  For example:

     (add-hook 'Info-mode-hook '(lambda ()
     	     (add-to-list 'Info-directory-list
     			  (expand-file-name "~/info"))))


File: texinfo.info,  Node: Installing Dir Entries,  Next: Invoking install-info,  Prev: Other Info Directories,  Up: Installing an Info File

20.1.4 Installing Info Directory Files
--------------------------------------

When you install an Info file onto your system, you can use the program
‘install-info’ to update the Info directory file ‘dir’.  Normally the
makefile for the package runs ‘install-info’, just after copying the
Info file into its proper installed location.

   In order for the Info file to work with ‘install-info’, you include
the commands ‘@dircategory’ and ‘@direntry’...‘@end direntry’ in the
Texinfo source file.  Use ‘@direntry’ to specify the menu entries to add
to the Info directory file.  Use ‘@dircategory’ to specify a category
for the manual, which determines which part of the Info directory to put
it in.  *Note* Directory Category::.

   Here is how these commands are used in this manual:

     @dircategory Texinfo documentation system
     @direntry
     * Texinfo: (texinfo).           The GNU documentation format.
     * install-info: (texinfo)Invoking install-info. ...
     ...
     @end direntry

   Here's what this produces in the Info file:

     INFO-DIR-SECTION Texinfo documentation system
     START-INFO-DIR-ENTRY
     * Texinfo: (texinfo).           The GNU documentation format.
     * install-info: (texinfo)Invoking install-info. ...
     ...
     END-INFO-DIR-ENTRY

The ‘install-info’ program sees these lines in the Info file, and that
is how it knows what to do.

   Always use the ‘@direntry’ and ‘@dircategory’ commands near the
beginning of the Texinfo input, before the first ‘@node’ command.  If
you use them later on in the input, ‘install-info’ will not notice them.

   ‘install-info’ will automatically reformat the description of the
menu entries it is adding.  As a matter of convention, the description
of the main entry (above, ‘The GNU documentation format’) should start
at column 32, starting at zero (as in ‘what-cursor-position’ in Emacs).
This will make it align with most others.  Description for individual
utilities best start in column 48, where possible.  For more information
about formatting see the ‘--calign’, ‘--align’, and ‘--max-width’
options in *note* Invoking install-info::.

   If you use ‘@dircategory’ more than once in the Texinfo source, each
usage specifies the 'current' category; any subsequent ‘@direntry’
commands will add to that category.

   Each 'Invoking' node for every program installed should have a
corresponding ‘@direntry’.  This lets users easily find the
documentation for the different programs they can run, as with the
traditional ‘man’ system.


File: texinfo.info,  Node: Invoking install-info,  Prev: Installing Dir Entries,  Up: Installing an Info File

20.1.5 Invoking ‘install-info’
------------------------------

‘install-info’ inserts menu entries from an Info file into the top-level
‘dir’ file in the Info system (see the previous sections for an
explanation of how the ‘dir’ file works).  ‘install-info’ also removes
menu entries from the ‘dir’ file.  It's most often run as part of
software installation, or when constructing a ‘dir’ file for all manuals
on a system.  Synopsis:

     install-info [OPTION...] [INFO-FILE [DIR-FILE]]

   If INFO-FILE or DIR-FILE are not specified, the options (described
below) that define them must be.  There are no compile-time defaults,
and standard input is never used.  ‘install-info’ can read only one Info
file and write only one ‘dir’ file per invocation.

   If DIR-FILE (however specified) does not exist, ‘install-info’
creates it if possible (with no entries).

   If any input file is compressed with ‘gzip’ (*note* (gzip)Top::),
‘install-info’ automatically uncompresses it for reading.  And if
DIR-FILE is compressed, ‘install-info’ also automatically leaves it
compressed after writing any changes.  If DIR-FILE itself does not
exist, ‘install-info’ tries to open ‘DIR-FILE.gz’, ‘DIR-FILE.xz’,
‘DIR-FILE.bz2’, ‘DIR-FILE.lz’, and ‘DIR-FILE.lzma’, in that order.

   Options:

‘--add-once’
     Specifies that the entry or entries will only be put into a single
     section.

‘--align=COLUMN’
     Specifies the column that the second and subsequent lines of menu
     entry's description will be formatted to begin at.  The default for
     this option is ‘35’.  It is used in conjunction with the
     ‘--max-width’ option.  COLUMN starts counting at 1.

‘--append-new-sections’
     Instead of alphabetizing new sections, place them at the end of the
     DIR file.

‘--calign=COLUMN’
     Specifies the column that the first line of menu entry's
     description will be formatted to begin at.  The default for this
     option is ‘33’.  It is used in conjunction with the ‘--max-width’
     option.  When the name of the menu entry exceeds this column,
     entry's description will start on the following line.  COLUMN
     starts counting at 1.

‘--debug’
     Report what is being done.

‘--delete’
     Delete the entries in INFO-FILE from DIR-FILE.  The file name in
     the entry in DIR-FILE must be INFO-FILE (except for an optional
     ‘.info’ in either one).  Don't insert any new entries.  Any empty
     sections that result from the removal are also removed.

‘--description=TEXT’
     Specify the explanatory portion of the menu entry.  If you don't
     specify a description (either via ‘--entry’, ‘--item’ or this
     option), the description is taken from the Info file itself.

‘--dir-file=NAME’
     Specify file name of the Info directory file.  This is equivalent
     to using the DIR-FILE argument.

‘--dry-run’
     Same as ‘--test’.

‘--entry=TEXT’
     Insert TEXT as an Info directory entry; TEXT should have the form
     of an Info menu item line plus zero or more extra lines starting
     with whitespace.  If you specify more than one entry, they are all
     added.  If you don't specify any entries, they are determined from
     information in the Info file itself.

‘--help’
     Display a usage message with basic usage and all available options,
     then exit successfully.

‘--info-file=FILE’
     Specify Info file to install in the directory.  This is equivalent
     to using the INFO-FILE argument.

‘--info-dir=DIR’
     Specify the directory where the directory file ‘dir’ resides.
     Equivalent to ‘--dir-file=DIR/dir’.

‘--infodir=DIR’
     Same as ‘--info-dir’.

‘--item=TEXT’
     Same as ‘--entry=TEXT’.  An Info directory entry is actually a menu
     item.

‘--keep-old’
     Do not replace pre-existing menu entries.  When ‘--remove’ is
     specified, this option means that empty sections are not removed.

‘--max-width=COLUMN’
     Specifies the column that the menu entry's description will be
     word-wrapped at.  COLUMN starts counting at 1.

‘--maxwidth=COLUMN’
     Same as ‘--max-width’.

‘--menuentry=TEXT’
     Same as ‘--name’.

‘--name=TEXT’
     Specify the name portion of the menu entry.  If the TEXT does not
     start with an asterisk ‘*’, it is presumed to be the text after the
     ‘*’ and before the parentheses that specify the Info file.
     Otherwise TEXT is taken verbatim, and is taken as defining the text
     up to and including the first period (a space is appended if
     necessary).  If you don't specify the name (either via ‘--entry’,
     ‘--item’ or this option), it is taken from the Info file itself.
     If the Info does not contain the name, the basename of the Info
     file is used.

‘--no-indent’
     Suppress formatting of new entries into the ‘dir’ file.

‘--quiet’
‘--silent’
     Suppress warnings, etc., for silent operation.

‘--remove’
     Same as ‘--delete’.

‘--remove-exactly’
     Also like ‘--delete’, but only entries if the Info file name
     matches exactly; ‘.info’ and/or ‘.gz’ suffixes are _not_ ignored.

‘--section=SEC’
     Put this file's entries in section SEC of the directory.  If you
     specify more than one section, all the entries are added in each of
     the sections.  If you don't specify any sections, they are
     determined from information in the Info file itself.  If the Info
     file doesn't specify a section, the menu entries are put into the
     Miscellaneous section.

‘--section REGEX SEC’
     Same as ‘--regex=REGEX --section=SEC --add-once’.

     ‘install-info’ tries to detect when this alternate syntax is used,
     but does not always guess correctly.  Here is the heuristic that
     ‘install-info’ uses:
       1. If the second argument to ‘--section’ starts with a hyphen,
          the original syntax is presumed.

       2. If the second argument to ‘--section’ is a file that can be
          opened, the original syntax is presumed.

       3. Otherwise the alternate syntax is used.

     When the heuristic fails because your section title starts with a
     hyphen, or it happens to be a file that can be opened, the syntax
     should be changed to ‘--regex=REGEX --section=SEC --add-once’.

‘--regex=REGEX’
     Put this file's entries into any section that matches REGEX.  If
     more than one section matches, all of the entries are added in each
     of the sections.  Specify REGEX using basic regular expression
     syntax, more or less as used with ‘grep’, for example.

‘--test’
     Suppress updating of the directory file.

‘--version’
     Display version information and exit successfully.


File: texinfo.info,  Node: Tag and Split Files,  Next: Info Format FAQ,  Prev: Installing an Info File,  Up: Creating and Installing Info Files

20.2 Tag Files and Split Files
==============================

Info files always contain a “tag table”, to be able to jump to nodes
quickly.  Info files can be “nonsplit” (also called “unsplit”) or
“split”.

   If the Info file contains less than about 300,000 characters the file
should be nonsplit.  In that case, the tag table should appear at the
end of the Info file.  If the Texinfo file contains more than about
300,000 characters, Texinfo processors split the large Info file into
shorter “indirect” subfiles of about 300,000 characters each.  With
‘texi2any’, splitting may be prevented by ‘--no-split’, and the default
size of 300,000 characters may be modified with ‘--split-size’ (*note*
Invoking texi2any::).

   When a file is split, Info itself makes use of a shortened version of
the original file that contains just the tag table and references to the
files that were split off.  The split-off files are called “indirect”
files.

   The split-off files have names that are created by appending ‘-1’,
‘-2’, ‘-3’ and so on to the output file name, specified by the
‘@setfilename’ command or the input file name.  The shortened version of
the original file continues to have the name specified by ‘@setfilename’
or the input file name.

   At one stage in writing this document, for example, the Info file was
saved as the file ‘test-texinfo’ and that file looked like this:

     Info file: test-texinfo,    -*-Text-*-
     produced by texinfo-format-buffer
     from file: new-texinfo-manual.texinfo

     ^_
     Indirect:
     test-texinfo-1: 102
     test-texinfo-2: 50422
     test-texinfo-3: 101300
     ^_^L
     Tag table:
     (Indirect)
     Node: overview^?104
     Node: info file^?1271
     Node: printed manual^?4853
     Node: conventions^?6855
     ...

(But ‘test-texinfo’ had far more nodes than are shown here.)  Each of
the split-off, indirect files, ‘test-texinfo-1’, ‘test-texinfo-2’, and
‘test-texinfo-3’, is listed in this file after the line that says
‘Indirect:’.  The tag table is listed after the line that says ‘Tag
table:’.

   In the list of indirect files, the number following the file name
records the cumulative number of bytes in the preceding indirect files,
not counting the file list itself, the tag table, or any permissions
text in the first file.  In the tag table, the number following the node
name records the location of the beginning of the node, in bytes from
the beginning of the (unsplit) output.

   If you are using ‘texinfo-format-buffer’ to create Info files, you
may want to run the ‘Info-validate’ command.  (The ‘texi2any’ command
does such a good job on its own, you do not need ‘Info-validate’.)
However, you cannot run the ‘M-x Info-validate’ node-checking command on
indirect files.  For information on how to prevent files from being
split with ‘texinfo-format-buffer’ and how to validate the structure of
the nodes, see *note* Using Info-validate::.


File: texinfo.info,  Node: Info Format FAQ,  Prev: Tag and Split Files,  Up: Creating and Installing Info Files

20.3 Info Format FAQ
====================

Here are some questions that have been frequently asked on the project
mailing lists and elsewhere.

Why when I run ‘info FOO’ do I get the same output as ‘man FOO’?

     Check that the Info manuals are installed.  Not all GNU/Linux
     distributions install all the Info manuals by default.  This is
     regrettable, as often the Info manual provides more information
     than the provided man page.

Why not use HTML instead of Info?

     Manuals are rarely written in the Info format itself, but are
     generated from Texinfo source by the ‘texi2any’ program.
     ‘texi2any’ can generate HTML as well as Info from Texinfo source.
     You can also access and download HTML manuals from the GNU website
     (<https://www.gnu.org/manual/manual.html>).  Additionally, some
     GNU/Linux distributions provide packages for the installation of
     HTML manuals.

     Info still has some advantages over HTML for locally installed
     documentation.  The Info browsers support index lookup and support
     for links between locally installed manuals in multiple locations.
     It's important to have documentation installed locally on your
     machine rather than relying on the Internet; this makes accessing
     documentation more reliable, and ensures it matches installed
     versions of packages.  It's hoped that support for browsing locally
     installed Texinfo documentation in some form of HTML can be
     improved in the future.

Why provide the command-line ‘info’ program when the Emacs Info reader is better?

     The Emacs Info reader can display images, and fully supports using
     a mouse.  There are not many differences among the Info readers
     besides that.  Command-line ‘info’ can be configured to change the
     default key bindings, as well as change the color of
     cross-references and search results, and to enable mouse scrolling
     support.  You should not need to be experienced with the Emacs
     editor to use ‘info’.  (Some recommend another program called
     ‘pinfo’, but this lacks in important features like index lookup.)

     Some prefer to be able to scroll through the entire manual at once
     (as happens with man pages), rather than being limited to a single
     'node' of content at once.  Of course, there is no accounting for
     taste, but a single, unstructured block of text becomes more
     awkward as a manual becomes longer and more complicated.  (However,
     if you really want to, you can view an info manual all at once in
     the ‘less’ pager with ‘info FOO | less’.)

Why do I have 'see' appearing in front of all of my links?

     By default, Emacs Info mode either changes the marker ‘*note’ for
     cross-references to 'see', or hides it completely.  Command-line
     ‘info’ does the same if ‘hide-note-references’ is set.
     Unfortunately, there is no way to do this reliably, as both the
     ‘@pxref’ and ‘@ref’ commands in Texinfo output this marker in the
     Info output, and the 'see' text is only appropriate for ‘@pxref’.

Yes, but how do I get a plain link, with no extra markup?

     You can't.  Info is a plain text format that is displayed mostly
     as-is in the viewers, and without the ‘*note’ text there would be
     nothing to mark text as a link.

     For output formats such as HTML, you can use the ‘@link’ command to
     produce a plain link.  *Note* @link::.  This does not produce a
     working cross-reference in Info output or in a printed copy of the
     manual, though.

Why do lines containing links appear mysteriously short?

     This due to Emacs (or ‘info’ with ‘hide-note-references’ set to
     ‘On’) hiding ‘*note’ strings, as mentioned above.

Can the Info format be extended to support fonts, colors or reflowable text?

     Any extension would be incompatible with existing Info-viewing
     programs.  Extra markup added to Info files would be displayed to
     the user, making files ugly and unreadable.

     When Texinfo files are processed into Info files, information about
     which Texinfo commands were used to markup text is lost.  Moreover,
     it is not possible to reliably detect whether text can be reflowed
     (e.g. a paragraph of prose), or whether line breaks should be kept
     (e.g. a code sample, or poem).

     Info's core purpose is to display documentation on text terminals.
     If you want more, you are recommended to use the HTML output from
     ‘texi2any’ instead.


File: texinfo.info,  Node: Generating HTML,  Next: @-Command Details,  Prev: Creating and Installing Info Files,  Up: Top

# /21 Generating HTML
******************

‘texi2any’ generates Info output by default, but given the ‘--html’
option, it will generate HTML, for web browsers and other programs.
This chapter gives some details on such HTML output.

   ‘texi2any’ has many user-definable customization variables with which
you can influence the HTML output.  *Note* Customization Variables::.  In
particular, there is support for syntax highlighting in ‘@example’
(*note* Syntax Highlighting::).  You can also write so-called
“initialization files”, or “init files” for short, to modify almost
every aspect of HTML output formatting.  Initialization files contain
code and are loaded by ‘--init-file’ (*note* Invoking texi2any::).

   Some initialization files are maintained with Texinfo and installed
in the default case.  For example, ‘chm.pm’ produces the intermediate
compressed HTML Help format files that can be subsequently converted to
the CHM format.

   The documentation of ‘texi2any’ HTML output adaptation using
customization files is in a separate manual.  *Note* (texi2any_api)::.

* Menu:

* HTML Translation::           Details of the HTML output.
* HTML Splitting::             How HTML output is split.
* HTML CSS::                   Influencing HTML output with Cascading Style
                               Sheets.
* @documentdescription::       Document summary for the HTML output.
* Generating EPUB::            Details on the EPUB output.
* Syntax Highlighting::
* HTML Xref::


File: texinfo.info,  Node: HTML Translation,  Next: HTML Splitting,  Up: Generating HTML

21.1 HTML Translation
=====================

The HTML generated by ‘texi2any’ generates standard HTML output.  The
output is intentionally quite plain for maximum portability and
accessibility.

   You can customize the output via CSS (*note* HTML CSS::) or other
means (*note* Customization Variables::).  If you cannot accomplish a
reasonable customization, feel free to report that.

   *Navigation bar:* By default, a navigation bar is inserted at the
start of each node, analogous to Info output.  If the ‘--no-headers’
option is used, the navigation bar is only inserted at the beginning of
split files.  Header ‘<link>’ elements in split output support Info-like
navigation with browsers which implement this feature.

   *Raw HTML*: ‘texi2any’ will include segments of Texinfo source
between ‘@ifhtml’ and ‘@end ifhtml’ in the HTML output (but not any of
the other conditionals, by default).  Source between ‘@html’ and ‘@end
html’ is passed without change to the output (i.e., suppressing the
normal escaping of input ‘<’, ‘>’ and ‘&’ characters which have special
significance in HTML).  *Note* Conditional Commands::.

   *Standards*: It is intentionally not our goal, and not even always
possible, to pass through every conceivable validation test without any
diagnostics.  Different validation tests have different goals, often
about pedantic enforcement of some standard or another.  Our overriding
goal is to help users, not blindly comply with standards.

   Please report output from an error-free run of ‘texi2any’ which has
_practical_ browser or EPUB reader portability problems as a bug (*note*
Reporting Bugs::).

   In practice, the HTML produced by ‘texi2any’ is slowly adjusted over
time towards the latest HTML standard, while also trying to keep
compatibility with earlier produced HTML. We use transitional markup and
try to be slow enough to give time for the diverse HTML readers to
adjust (and for standards to reincorporate useful features that were
dropped...).


File: texinfo.info,  Node: HTML Splitting,  Next: HTML CSS,  Prev: HTML Translation,  Up: Generating HTML

21.2 HTML Splitting
===================

When splitting output at nodes (which is the default), ‘texi2any’ writes
HTML output into (basically) one output file per Texinfo source ‘@node’.

   Each output file name is the node name with spaces replaced by ‘-’'s
and special characters changed to ‘_’ followed by their code point in
hex (*note* HTML Xref::).  This is to make it portable and easy to use as
a file name.  In the unusual case of two different nodes having the same
name after this treatment, they are written consecutively to the same
file, with HTML anchors so each can be referred to independently.

   If ‘texi2any’ is run on a system which does not distinguish case in
file names, nodes which are the same except for case (e.g., ‘index’ and
‘Index’) will also be folded into the same output file with anchors.
You can also pretend to be on a case insensitive filesystem by setting
the customization variable ‘CASE_INSENSITIVE_FILENAMES’.

   It is also possible to split at chapters or sections with ‘--split’
(*note* Invoking texi2any::).  In that case, the file names are
constructed after the name of the node associated with the relevant
sectioning command.  Also, unless ‘--no-node-files’ is specified, a
redirection file is output for every node in order to more reliably
support cross-references to that manual (*note* HTML Xref::).

   When splitting, the HTML output files are written into a
subdirectory.  The subdirectory name is derived from the base name (that
is, any extension is removed), with ‘_html’ postpended.  For example,
HTML output for ‘gcc.texi’ would be written into a subdirectory named
‘gcc_html/’.  The subdirectory name is based on ‘@setfilename’ or on the
input file name (*note* Setting the Output File Name::).

In any case, the top-level output file within the directory is always
named ‘index.html’.

   Monolithic output (‘--no-split’) is named according to
‘@setfilename’, if present (with any ‘.info’ extension replaced with
‘.html’), ‘--output’ (the argument is used literally), or based on the
input file name as a last resort (*note* Setting the Output File Name::).


File: texinfo.info,  Node: HTML CSS,  Next: @documentdescription,  Prev: HTML Splitting,  Up: Generating HTML

21.3 HTML CSS
=============

Cascading Style Sheets (CSS) is an Internet standard for influencing the
display of HTML documents: see <http://www.w3.org/Style/CSS/>.

   By default, some CSS code is included to better implement the
appearance of some Texinfo environments.  For example:

     pre.display { font-family:inherit }

   The above tells the web browser to use the same font as the main
document inside ‘<pre>’ elements used for ‘@display’ environments.  By
default, the HTML ‘<pre>’ command uses a monospaced font.

   Please see the reference above for a full explanation of CSS.

   You can influence the CSS in the HTML output with two ‘texi2any’
options: ‘--css-include=FILE’ and ‘--css-ref=URL’.

   The option ‘--css-ref=URL’ adds to each output HTML file a ‘<link>’
tag referencing a CSS at the given URL.  This allows using external
style sheets.

   The option ‘--css-include=FILE’ includes the contents FILE in the
HTML output, as you might expect.  However, the details are somewhat
tricky, as described in the following, to provide maximum flexibility.

   The CSS file first line may be a ‘@charset’ directive.  If present,
this directive is used to determine the encoding of the CSS file.  The
line is not copied into the output.

   The CSS file may begin with so-called ‘@import’ directives, which
link to external CSS specifications for browsers to use when
interpreting the document.  Again, a full description is beyond our
scope here, but we'll describe how they work syntactically, so we can
explain how they are handled.

   There can be more than one ‘@import’, but they have to come first in
the file, with only whitespace and comments interspersed, no normal
definitions.  Comments in CSS files are delimited by ‘/* ... */’, as in
C.  An ‘@import’ directive must be in one of these two forms:

     @import url(http://example.org/foo.css);
     @import "http://example.net/bar.css";

   The crucial characters are the ‘@’ at the beginning and the semicolon
terminating the directive.  When reading the CSS file, any such
‘@’-directive is simply copied into the output, as follows:

   • If FILE contains only normal CSS declarations, it is included after
     the default CSS, thus overriding it.

   • If FILE begins with ‘@import’ specifications (see below), then the
     ‘import’'s are included first (they have to come first, according
     to the standard), and then the default CSS is included.  If you
     need to override the default CSS from an ‘@import’, you can do so
     with the ‘! important’ CSS construct, as in:
          pre.example { font-size: inherit ! important }

   • If FILE contains both ‘@import’ and inline CSS specifications, the
     ‘@import’'s are included first, then default CSS, and lastly the
     inline CSS from FILE.

   • Any @-directive other than ‘@import’ and ‘@charset’ is treated as a
     CSS declaration, meaning the default CSS is included and then the
     rest of the file is prepended.

   If the CSS file is malformed or erroneous, the output is unspecified.
The meaning of the CSS file is not interpreted in any way; the special
‘@’ and ‘;’ characters are looked for the text is blindly copied into
the output.  Comments in the CSS file may or may not be included in the
output.

   In addition to the possibilities offered by CSS, ‘texi2any’ has many
user-definable customization variables with which you can influence the
HTML output.  *Note* Customization Variables::.


File: texinfo.info,  Node: @documentdescription,  Next: Generating EPUB,  Prev: HTML CSS,  Up: Generating HTML

21.4 ‘@documentdescription’: Summary Text
=========================================

When producing HTML output for a document, a ‘<meta>’ element is written
in the ‘<head>’ to give some idea of the content of the document.  By
default, this “description” is the title of the document, taken from the
‘@settitle’ command (*note* @settitle::).  To change this, use the
‘@documentdescription’ environment, as in:

     @documentdescription
     descriptive text.
     @end documentdescription

This will produce the following output in the ‘<head>’ of the HTML:

     <meta name=description content="descriptive text.">


File: texinfo.info,  Node: Generating EPUB,  Next: Syntax Highlighting,  Prev: @documentdescription,  Up: Generating HTML

21.5 Generating EPUB
====================

EPUB is a format designed for reading electronic books on portable
devices.  ‘texi2any’ generated EPUB 3.2 in 2022.  An EPUB file is a ZIP
archive container, holding informative files as well as the manual
rendered in HTML.

   The generation of the EPUB file depends on the ‘Archive::Zip’ Perl
module being installed.  This dependency is checked at runtime.  In the
default case, trying to output EPUB without this dependency raises an
error.  However, if the EPUB output file is not generated, with the
customization variable ‘EPUB_CREATE_CONTAINER_FILE’ set to 0, it is not
an error if ‘Archive::Zip’ is not installed.

   The ‘texi2any’ tests related to EPUB generation do not require the
installation of ‘Archive::Zip’, as they set ‘EPUB_CREATE_CONTAINER_FILE’
to 0 and keep the directory containing the files and directories needed
for the EPUB file by setting the ‘EPUB_KEEP_CONTAINER_FOLDER’
customization variable to 1.

* Menu:

* EPUB Output File and Directory::  Use syntax highlighting in code excerpts.
* EPUB Cross-References::      Cross-references in HTML output.
* EPUB HTML::


File: texinfo.info,  Node: EPUB Output File and Directory,  Next: EPUB Cross-References,  Up: Generating EPUB

21.5.1 Container Directory and Output Files
-------------------------------------------

A directory containing the files and directories needed for the EPUB
format is created when outputting EPUB. The name of this container
directory is derived from the base name of the input file (that is, any
extension is removed), with ‘_epub_package’ postpended.  If an output
directory is specified, with ‘--output’, or with the ‘SUBDIR’
customization variable, the container directory is created in that
directory instead of the current directory.  At the beginning of a new
run, the container directory and all its contents are removed.  The
container directory is also removed after the final EPUB file has been
generated in the default case.

   The HTML files produced from the Texinfo manual are output in
subdirectories of the container directory.  Image files referred to from
the Texinfo manual, if found, are copied to subdirectories of the
container directory.

   The EPUB output file is a ZIP archive of the container directory.
The file name is derived from the base name, with the ‘.epub’ extension
postpended.  If an output file is specified, with ‘--output’, or with
the ‘OUTFILE’ customization function, this file name is used instead.
The output EPUB file is never placed in the directory specified by
‘--output’ or ‘SUBDIR’; only the container directory is placed there, as
explained just above.

   The EPUB output file is not generated if the customization variable
‘EPUB_CREATE_CONTAINER_FILE’ is set to 0.  The container directory is
left after the final EPUB file has been generated if
‘EPUB_KEEP_CONTAINER_FOLDER’ is set.

   *Note* Invoking texi2any::.


File: texinfo.info,  Node: EPUB Cross-References,  Next: EPUB HTML,  Prev: EPUB Output File and Directory,  Up: Generating EPUB

21.5.2 EPUB Cross-References
----------------------------

The EPUB format does not support references from an EPUB file to another
EPUB file.  Therefore any references to "external" Texinfo manuals
should resolve to an external URL. ‘texi2any’ produces these links with
HTML cross-reference configuration (*note* HTML Xref Configuration::).
Since the links in the resulting EPUB are incorrect if no information is
found for the cross-references, ‘texi2any’ issues a warning by default
for missing cross-references information.  If these warnings are
unwanted, set ‘CHECK_HTMLXREF’ to 0.


File: texinfo.info,  Node: EPUB HTML,  Prev: EPUB Cross-References,  Up: Generating EPUB

21.5.3 HTML Generated for EPUB
------------------------------

The HTML generated for EPUB is XHTML conformant, UTF-8 encoded, and
formatted without the usual HTML navigation headers and footers.  Most
of these features are enabled with customization variables, such as
‘USE_XML_SYNTAX’ or ‘OUTPUT_FILE_NAME_ENCODING’.  Some features of
printed output are used in EPUB. In particular, the Top node does not
appear in the EPUB output, while a title page is generated.  This is
obtained by setting ‘NO_TOP_NODE_OUTPUT’.

   The ‘OUTFILE’ and ‘SUBDIR’ customization variables values correspond
initially to the EPUB directory container and/or the EPUB output file
(*note* EPUB Output File and Directory::).  These customization variables
values are undefined or reset to the locations in the container
directory where the XHTML files are output for the HTML generation.  It
is mentioned here because resetting customization variables is unusual;
however, the variables reset are used internally for the conversion, and
should not interact with any customization set by the user.

   *Note* HTML Customization Variables::.


File: texinfo.info,  Node: Syntax Highlighting,  Next: HTML Xref,  Prev: Generating EPUB,  Up: Generating HTML

21.6 Code Examples Syntax Highlighting in HTML
==============================================

     warning: Source highlighting is experimental, feedback is welcomed.

   Support for source code syntax highlighting is available in
‘texi2any’ for the HTML output, with the help of external software.
This feature is turned on by setting ‘HIGHLIGHT_SYNTAX’.  Source code
highlighting is set up for ‘@example’ blocks.  The language specified
for syntax highlighting is the first argument on the ‘@example’ line
(*note* @example::), or ‘HIGHLIGHT_SYNTAX_DEFAULT_LANGUAGE’ if set and
there is no first argument.

   The ‘HIGHLIGHT_SYNTAX’ value determines the command used for
highlighting:
‘highlight’
     Use ‘highlight’ from
     <http://www.andre-simon.de/doku/highlight/en/highlight.php>;
‘pygments’
     Use ‘pygmentize’ from <https://pygments.org/>;
‘anything else’
     Use ‘source-highlight’ (*note* (source-highlight)::).

   *Note* Other Customization Variables::.


File: texinfo.info,  Node: HTML Xref,  Prev: Syntax Highlighting,  Up: Generating HTML

21.7 HTML Cross-references
==========================

Cross-references between Texinfo manuals in HTML format become standard
HTML ‘<a>’ links.  This section describes the algorithm used, so that
Texinfo can cooperate with other programs, such as ‘texi2html’, by
writing mutually compatible HTML files.

   This algorithm may or may not be used for links _within_ HTML output
for a Texinfo file.  Since no issues of compatibility arise in such
cases, we do not need to specify this.

   We try to support references to such "external" manuals in both
monolithic and split forms.  A “monolithic” (mono) manual is entirely
contained in one file, and a “split” manual has a file for each node.
(*Note* HTML Splitting::.)

   The algorithm was primarily devised by Patrice Dumas in 2003-04.

* Menu:

* Link Basics:       HTML Xref Link Basics.
* Node Expansion:    HTML Xref Node Name Expansion.
* Command Expansion: HTML Xref Command Expansion.
* 8-bit Expansion:   HTML Xref 8-bit Character Expansion.
* Mismatch:          HTML Xref Mismatch.
* Configuration:     HTML Xref Configuration.  ‘htmlxref.cnf’.


File: texinfo.info,  Node: HTML Xref Link Basics,  Next: HTML Xref Node Name Expansion,  Up: HTML Xref

21.7.1 HTML Cross-reference Link Basics
---------------------------------------

For our purposes, an HTML link consists of four components: a host name,
a directory part, a file part, and a target part.  We always assume the
‘http’ protocol.  For example:

     http://HOST/DIR/FILE.html#TARGET

   The information to construct a link comes from the node name and
manual name in the cross-reference command in the Texinfo source (*note*
Cross References::), and from “external information” (*note* HTML Xref
Configuration::).

   We now consider each part in turn.

   The HOST is hardwired to be the local host.  This could either be the
literal string ‘localhost’, or, according to the rules for HTML links,
the ‘http://localhost/’ could be omitted entirely.

   The DIR and FILE parts are more complicated, and depend on the
relative split/mono nature of both the manual being processed and the
manual that the cross-reference refers to.  The underlying idea is that
there is one directory for Texinfo manuals in HTML, and a given MANUAL
is either available as a monolithic file ‘MANUAL.html’, or a split
subdirectory ‘MANUAL_html/*.html’.  Here are the cases:

   • If the present manual is split, and the referent manual is also
     split, the directory is ‘../REFERENT_html/’ and the file is the
     expanded node name (described later).

   • If the present manual is split, and the referent manual is mono,
     the directory is ‘../’ and the file is ‘REFERENT.html’.

   • If the present manual is mono, and the referent manual is split,
     the directory is ‘REFERENT_html/’ and the file is the expanded node
     name.

   • If the present manual is mono, and the referent manual is also
     mono, the directory is ‘./’ (or just the empty string), and the
     file is ‘REFERENT.html’.

   Another rule, that only holds for file names, is that base file names
are truncated to 245 characters, to allow for an extension to be
appended and still comply with the 255-character limit which is common
to many filesystems.  Although technically this can be changed with the
‘BASEFILENAME_LENGTH’ customization variable (*note* Other Customization
Variables::), doing so would make cross-manual references to such nodes
invalid.

   Any directory part in the file name argument of the source cross
reference command is ignored.  Thus, ‘@xref{,,,../foo}’ and
‘@xref{,,,foo}’ both use ‘foo’ as the manual name.  This is because any
such attempted hardwiring of the directory is very unlikely to be useful
for all the output formats that use the manual name.

   Finally, the TARGET part is always the expanded node name.

   Whether the present manual is split or mono is determined by user
option; ‘texi2any’ defaults to split, with the ‘--no-split’ option
overriding this.

   Whether the referent manual is split or mono, however, is another bit
of the external information (*note* HTML Xref Configuration::).  By
default, ‘texi2any’ uses the same form of the referent manual as the
present manual.

   Thus, there can be a mismatch between the format of the referent
manual that the generating software assumes, and the format it's
actually present in.  *Note* HTML Xref Mismatch::.


File: texinfo.info,  Node: HTML Xref Node Name Expansion,  Next: HTML Xref Command Expansion,  Prev: HTML Xref Link Basics,  Up: HTML Xref

21.7.2 HTML Cross-reference Node Name Expansion
-----------------------------------------------

As mentioned in the previous section, the key part of the HTML cross
reference algorithm is the conversion of node names in the Texinfo
source into strings suitable for XHTML identifiers and file names.  The
restrictions are similar for each: plain ASCII letters, numbers, and the
‘-’ and ‘_’ characters are all that can be used.  (Although HTML anchors
can contain most characters, XHTML is more restrictive.)

   Cross-references in Texinfo can refer either to nodes, anchors (*note*
@anchor::) or float labels (*note* @float::).  However, anchors and float
labels are treated identically to nodes in this context, so we'll
continue to say "node" names for simplicity.

   A special exception: the Top node (*note* The Top Node::) is always
mapped to the file ‘index.html’, to match web server software.  However,
the HTML _target_ is ‘Top’.  Thus (in the split case):

     @xref{Top,,, emacs, The GNU Emacs Manual}.
     ⇒ <a href="../emacs_html/index.html#Top">

  1. The standard ASCII letters (a-z and A-Z) are not modified.  All
     other characters may be changed as specified below.

  2. The standard ASCII numbers (0-9) are not modified except when a
     number is the first character of the node name.  In that case, see
     below.

  3. Multiple consecutive space, tab and newline characters are
     transformed into just one space.

  4. Leading and trailing spaces are removed.

  5. After the above has been applied, each remaining space character is
     converted into a ‘-’ character.

  6. Other ASCII 7-bit characters are transformed into ‘_00XX’, where XX
     is the ASCII character code in (lowercase) hexadecimal.  This
     includes ‘_’, which is mapped to ‘_005f’.

  7. If the node name does not begin with a letter, the literal string
     ‘g_t’ is prefixed to the result.  (Due to the rules above, that
     string can never occur otherwise; it is an arbitrary choice,
     standing for "GNU Texinfo".)  This is necessary because XHTML
     requires that identifiers begin with a letter.

   For example:

     @node A  node --- with _'%
     ⇒ A-node-_002d_002d_002d-with-_005f_0027_0025

   Example translations of common characters:

   • ‘_’ ⇒ ‘_005f’
   • ‘-’ ⇒ ‘_002d’
   • ‘A node’ ⇒ ‘A-node’

   On case-folding computer systems, nodes differing only by case will
be mapped to the same file.  In particular, as mentioned above, Top
always maps to the file ‘index.html’.  Thus, on a case-folding system,
Top and a node named 'Index' will both be written to ‘index.html’.
Fortunately, the targets serve to distinguish these cases, since HTML
target names are always case-sensitive, independent of operating system.


File: texinfo.info,  Node: HTML Xref Command Expansion,  Next: HTML Xref 8-bit Character Expansion,  Prev: HTML Xref Node Name Expansion,  Up: HTML Xref

21.7.3 HTML Cross-reference Command Expansion
---------------------------------------------

Node names may contain @-commands (*note* Node Line Requirements::).
This section describes how they are handled.

   First, comments are removed.

   Next, any ‘@value’ commands (*note* @set @value::) and macro
invocations (*note* Invoking Macros::) are fully expanded.

   Then, for the following commands, the command name and braces are
removed, and the text of the argument is recursively transformed:

     @asis @b @cite @code @command @dfn @dmn @dotless
     @emph @env @file @i @indicateurl @kbd @key
     @samp @sansserif @sc @slanted @strong @sub @sup
     @t @U @var @verb @w

   In addition, the following commands are replaced by constant text, as
shown below.  If any of these commands have non-empty arguments, as in
‘@TeX{bad}’, it is an error, and the result is unspecified.  In this
table, '(space)' means a space character and '(nothing)' means the empty
string.  The notation 'U+HHHH' means Unicode code point HHHH (in hex, as
usual).

   There are further transformations of many of these expansions to
yield the final file or other target name, such as space characters to
‘-’, etc., according to the other rules.

‘@(newline)’           (space)
‘@(space)’             (space)
‘@(tab)’               (space)
‘@!’                   ‘!’
‘@*’                   (space)
‘@-’                   (nothing)
‘@.’                   ‘.’
‘@:’                   (nothing)
‘@?’                   ‘?’
‘@@’                   ‘@’
‘@{’                   ‘{’
‘@}’                   ‘}’
‘@LaTeX’               ‘LaTeX’
‘@TeX’                 ‘TeX’
‘@arrow’               U+2192
‘@bullet’              U+2022
‘@comma’               ‘,’
‘@copyright’           U+00A9
‘@dots’                U+2026
‘@enddots’             ‘...’
‘@equiv’               U+2261
‘@error’               ‘error-->’
‘@euro’                U+20AC
‘@exclamdown’          U+00A1
‘@expansion’           U+21A6
‘@geq’                 U+2265
‘@leq’                 U+2264
‘@minus’               U+2212
‘@ordf’                U+00AA
‘@ordm’                U+00BA
‘@point’               U+22C6
‘@pounds’              U+00A3
‘@print’               U+22A3
‘@questiondown’        U+00BF
‘@registeredsymbol’    U+00AE
‘@result’              U+21D2
‘@textdegree’          U+00B0
‘@tie’                 (space)

   Quotation mark @-commands (‘@quotedblright{}’ and the like), are
likewise replaced by their Unicode values.  Normal quotation
_characters_ (e.g., ASCII ' and ') are not altered.  *Note* Inserting
Quotation Marks::.

   Any ‘@acronym’, ‘@abbr’, ‘@email’, and ‘@image’ commands are replaced
by their first argument.  (For these commands, all subsequent arguments
are optional, and ignored here.)  *Note* @acronym::, and *note* @email::,
and *note* Images::.

   Accents are handled according to the next section.

   Any other command is an error, and the result is unspecified.


File: texinfo.info,  Node: HTML Xref 8-bit Character Expansion,  Next: HTML Xref Mismatch,  Prev: HTML Xref Command Expansion,  Up: HTML Xref

21.7.4 HTML Cross-reference 8-bit Character Expansion
-----------------------------------------------------

Usually, characters other than plain 7-bit ASCII are transformed into
the corresponding Unicode code point(s) in Normalization Form C, which
uses precomposed characters where available.  (This is the normalization
form recommended by the W3C and other bodies.)  This holds when that
code point is ‘0xffff’ or less, as it almost always is.

   These will then be further transformed by the rules above into the
string ‘_HHHH’, where HHHH is the code point in hex.

   For example, combining this rule and the previous section:

     @node @b{A} @TeX{} @u{B} @point{}@enddots{}
     ⇒ A-TeX-B_0306-_22C6_002e_002e_002e

   Notice: 1) ‘@enddots’ expands to three periods which in turn expands
to three ‘_002e’'s; 2) ‘@u{B}’ is a 'B' with a breve accent, which does
not exist as a pre-accented Unicode character, therefore expands to
‘B_0306’ (B with combining breve).

   When the Unicode code point is above ‘0xffff’, the transformation is
‘__XXXXXX’, that is, two leading underscores followed by six hex digits.
Since Unicode has declared that their highest code point is ‘0x10ffff’,
this is sufficient.  (We felt it was better to define this extra escape
than to always use six hex digits, since the first two would nearly
always be zeros.)

   This method works fine if the node name consists mostly of ASCII
characters and contains only few 8-bit ones.  But if the document is
written in a language whose script is not based on the Latin alphabet
(for example, Ukrainian), it will create file names consisting almost
entirely of ‘_XXXX’ notations, which is inconvenient and all but
unreadable.  To handle such cases, ‘texi2any’ offers the
‘--transliterate-file-names’ command line option.  This option enables
“transliteration” of node names into ASCII characters for the purposes
of file name creation and referencing.  The transliteration is based on
phonetic principles, which makes the generated file names more easily
understandable.

   For the definition of Unicode Normalization Form C, see Unicode
report UAX#15, <http://www.unicode.org/reports/tr15/>.  Many related
documents and implementations are available elsewhere on the web.


File: texinfo.info,  Node: HTML Xref Mismatch,  Next: HTML Xref Configuration,  Prev: HTML Xref 8-bit Character Expansion,  Up: HTML Xref

21.7.5 HTML Cross-reference Mismatch
------------------------------------

As mentioned earlier (*note* HTML Xref Link Basics::), the generating
software may need to guess whether a given manual being cross-referenced
is available in split or monolithic form--and, inevitably, it might
guess wrong.  However, when the _referent_ manual is generated, it is
possible to handle at least some mismatches.

   In the case where we assume the referent is split, but it is actually
available in mono, the only recourse would be to generate a
‘manual_html/’ subdirectory full of HTML files which redirect back to
the monolithic ‘manual.html’.  Since this is essentially the same as a
split manual in the first place, it's not very appealing.

   On the other hand, in the case where we assume the referent is mono,
but it is actually available in split, it is possible to use JavaScript
to redirect from the putatively monolithic ‘manual.html’ to the
different ‘manual_html/node.html’ files.  Here's an example:

     function redirect() {
       switch (location.hash) {
         case "#Node1":
           location.replace("manual_html/Node1.html#Node1"); break;
         case "#Node2" :
           location.replace("manual_html/Node2.html#Node2"); break;
         ...
         default:;
       }
     }

   Then, in the ‘<body>’ tag of ‘manual.html’:

     <body onLoad="redirect();">

   Once again, this is something the software which generated the
_referent_ manual has to do in advance, it's not something the software
generating the cross-reference in the present manual can control.


File: texinfo.info,  Node: HTML Xref Configuration,  Prev: HTML Xref Mismatch,  Up: HTML Xref

21.7.6 HTML Cross-reference Configuration: ‘htmlxref.cnf’
---------------------------------------------------------

‘texi2any’ reads a file named ‘htmlxref.cnf’ to gather information for
cross-references to other manuals in HTML output.  It is looked for in
the following directories:

‘./’
     (the current directory)

‘./.texinfo/’
     (under the current directory)

‘~/.texinfo/’
     (where ‘~’ is the current user's home directory)

‘SYSCONFDIR/texinfo/’
     (where SYSCONFDIR is the system configuration directory specified
     at compile-time, e.g., ‘/usr/local/etc’)

‘DATADIR/texinfo/’
     (likewise specified at compile time, e.g., ‘/usr/local/share’)

   All files found are used, with earlier entries overriding later ones.
The Texinfo distribution includes a default file which handles many GNU
manuals; it is installed in the last of the above directories, i.e.,
‘DATADIR/texinfo/htmlxref.cnf’.

   The ‘HTMLXREF_MODE’ customization variable can be set to modify how
the files are found.  For instance, if set to ‘none’, no external
information is used.  ‘HTMLXREF_FILE’ sets the file name to something
else than ‘htmlxref.cnf’.  *note* HTML Customization Variables::.

   The file is line-oriented.  Lines consisting only of whitespace are
ignored.  Comments are indicated with a ‘#’ at the beginning of a line,
optionally preceded by whitespace.  Since ‘#’ can occur in URLs (like
almost any character), it does not otherwise start a comment.

   Each non-blank non-comment line must be either a “variable
assignment” or “manual information”.

   A variable assignment line looks like this:

     VARNAME = VARVALUE

   Whitespace around the ‘=’ is optional and ignored.  The VARNAME
should consist of letters; case is significant.  The VARVALUE is an
arbitrary string, continuing to the end of the line.  Variables are then
referenced with ‘${VARNAME}’; variable references can occur in the
VARVALUE.

   A manual information line looks like this:

     MANUAL KEYWORD URLPREFIX

with MANUAL the short identifier for a manual, KEYWORD being one of:
‘mono’, ‘node’, ‘section’, ‘chapter’, and URLPREFIX described below.
Variable references can occur only in the URLPREFIX.  For example (used
in the canonical ‘htmlxref.cnf’):

     G = http://www.gnu.org
     GS = ${G}/software
     hello mono    ${GS}/hello/manual/hello.html
     hello chapter ${GS}/hello/manual/html_chapter/
     hello section ${GS}/hello/manual/html_section/
     hello node    ${GS}/hello/manual/html_node/

   If the keyword is ‘mono’, URLPREFIX gives the host, directory, and
file name for MANUAL as one monolithic file.

   If the keyword is ‘node’, ‘section’, or ‘chapter’, URLPREFIX gives
the host and directory for MANUAL split into nodes, sections, or
chapters, respectively.

   When available, ‘texi2any’ will use the "corresponding" value for
cross-references between manuals.  That is, when generating monolithic
output (‘--no-split’), the ‘mono’ URL will be used, when generating
output that is split by node, the ‘node’ URL will be used, etc.
However, if a manual is not available in that form, anything that is
available can be used.  Here is the search order for each style:

     node    ⇒ node,    section, chapter, mono
     section ⇒ section, chapter, node,    mono
     chapter ⇒ chapter, section, node,    mono
     mono    ⇒ mono,    chapter, section, node

   These section- and chapter-level cross-manual references can succeed
only when the target manual was created using ‘--node-files’; this is
the default for split output.

   If you have additions or corrections to the ‘htmlxref.cnf’
distributed with Texinfo, please email <bug-texinfo@gnu.org> as usual.
You can get the latest version from
<http://ftpmirror.gnu.org/texinfo/htmlxref.cnf>.


File: texinfo.info,  Node: @-Command Details,  Next: Tips,  Prev: Generating HTML,  Up: Top

# /Appendix A @-Command Details
****************************

Here are the details of @-commands: information about their syntax, a
list of commands, and information about where commands can appear.

* Menu:

* Command Syntax::
* Command List::
* Command Contexts::
* Obsolete @-Commands::


File: texinfo.info,  Node: Command Syntax,  Next: Command List,  Up: @-Command Details

A.1 @-Command Syntax
====================

Texinfo has the following types of @-command:

1. Brace commands
     These commands start with @ followed by a letter or a word,
     followed by an argument within braces.  For example, the command
     ‘@dfn’ indicates the introductory or defining use of a term; it is
     used as follows: ‘In Texinfo, @@-commands are @dfn{mark-up}
     commands.’

2. Line commands
     These commands occupy an entire line.  The line starts with @,
     followed by the name of the command (a word); for example,
     ‘@center’ or ‘@cindex’.  If no argument is needed, the word is
     followed by the end of the line.  If there is an argument, it is
     separated from the command name by a space.  Braces are not used.

3. Block commands
     These commands are written at the start of a line, with general
     text on following lines, terminated by a matching ‘@end’ command on
     a line of its own.  For example, ‘@example’, then the lines of a
     coding example, then ‘@end example’.  Some of these block commands
     take arguments as line commands do; for example, ‘@enumerate A’
     opening an environment terminated by ‘@end enumerate’.  Here ‘A’ is
     the argument.

4. Symbol insertion commands with no arguments
     These commands start with @ followed by a word followed by a left
     and right- brace.  These commands insert special symbols in the
     document; they do not take arguments.  Some examples: ‘@dots{}’ ⇒
     ‘...’, ‘@equiv{}’ ⇒ ‘≡’, ‘@TeX{}’ ⇒ 'TeX', and ‘@bullet{}’ ⇒ ‘•’.

5. Non-alphabetic commands
     The names of commands in all of the above categories consist of
     alphabetic characters, almost entirely in lower-case.  Unlike
     those, the non-alphabetic commands consist of an @ followed by a
     punctuation mark or other character that is not part of the Latin
     alphabet.  Non-alphabetic commands are almost always part of text
     within a paragraph.  The non-alphabetic commands include ‘@@’,
     ‘@{’, ‘@}’, ‘@.’, ‘@SPACE’, and most of the accent commands.

6. Miscellaneous commands
     There are a handful of commands that don't fit into any of the
     above categories; for example, the obsolete command ‘@refill’,
     which is always used at the end of a paragraph immediately
     following the final period or other punctuation character.
     ‘@refill’ takes no argument and does not require braces.  Likewise,
     ‘@tab’ used in a ‘@multitable’ block does not take arguments, and
     is not followed by braces.

   Thus, the alphabetic commands fall into classes that have different
argument syntaxes.  You cannot tell to which class a command belongs by
the appearance of its name, but you can tell by the command's meaning:
if the command stands for a glyph, it is in class 4 and does not require
an argument; if it makes sense to use the command among other text as
part of a paragraph, the command is in class 1 and must be followed by
an argument in braces.  The non-alphabetic commands, such as ‘@:’, are
exceptions to the rule; they do not need braces.

   The purpose of having different syntax for commands is to make
Texinfo files easier to read, and also to help the GNU Emacs paragraph
and filling commands work properly.


File: texinfo.info,  Node: Command List,  Next: Command Contexts,  Prev: Command Syntax,  Up: @-Command Details

A.2 @-Command List
==================

Here is an alphabetical list of the @-commands in Texinfo.  Square
brackets, [ ], indicate optional arguments; an ellipsis, ‘...’,
indicates repeated text.

‘@WHITESPACE’
     An ‘@’ followed by a space, tab, or newline produces a normal,
     stretchable, interword space.  *Note* Multiple Spaces::.

‘@!’
     Produce an exclamation point that ends a sentence (usually after an
     end-of-sentence capital letter).  *Note* Ending a Sentence::.

‘@"’
‘@'’
     Generate an umlaut or acute accent, respectively, over the next
     character, as in ö and ó.  *Note* Inserting Accents::.

‘@&’
‘@ampchar{}’
     Generate an ampersand.  *Note* Inserting an Ampersand::.

‘@*’
     Force a line break.  *Note* Line Breaks::.

‘@,{C}’
     Generate a cedilla accent under C, as in ç.  *Note* Inserting
     Accents::.

‘@-’
     Insert a discretionary hyphenation point.  *Note* @- @hyphenation::.

‘@.’
     Produce a period that ends a sentence (usually after an
     end-of-sentence capital letter).  *Note* Ending a Sentence::.

‘@/’
     Produces no output, but allows a line break.  *Note* Line Breaks::.

‘@:’
     Tell printed output processors to refrain from inserting extra
     whitespace after an immediately preceding period, question mark,
     exclamation mark, or colon.  *Note* Not Ending a Sentence::.

‘@=’
     Generate a macron (bar) accent over the next character, as in ō.
     *Note* Inserting Accents::.

‘@?’
     Produce a question mark that ends a sentence (usually after an
     end-of-sentence capital letter).  *Note* Ending a Sentence::.

‘@@’
‘@atchar{}’
     Insert an at sign, ‘@’.  *Note* Inserting an Atsign::.

‘@\’
‘@backslashchar{}’
     Insert a backslash, ‘\’; ‘@backslashchar{}’ works anywhere, while
     ‘@\’ works only inside ‘@math’.  *Note* Inserting a Backslash::, and
     *note* Inserting Math::.

‘@^’
‘@`’
     Generate a circumflex (hat) or grave accent, respectively, over the
     next character, as in ô and è.  *Note* Inserting Accents::.

‘@{’
‘@lbracechar{}’
     Insert a left brace, ‘{’.  *Note* Inserting Braces::.

‘@}’
‘@rbracechar{}’
     Insert a right brace, ‘}’.  *Note* Inserting Braces::.

‘@~’
     Generate a tilde accent over the next character, as in Ñ. *Note*
     Inserting Accents::.

‘@AA{}’
‘@aa{}’
     Generate the uppercase and lowercase Scandinavian A-ring letters,
     respectively: Å, å.  *Note* Inserting Accents::.

‘@abbr{ABBREVIATION}’
     Indicate a general abbreviation, such as 'Comput.'.  *Note* @abbr::.

‘@acronym{ACRONYM}’
     Indicate an acronym in all capital letters, such as 'NASA'. *Note*
     @acronym::.

‘@AE{}’
‘@ae{}’
     Generate the uppercase and lowercase AE ligatures, respectively: Æ,
     æ.  *Note* Inserting Accents::.

‘@afivepaper’
     Change page dimensions for the A5 paper size.  *Note* A4 Paper::.

‘@afourlatex’
‘@afourpaper’
‘@afourwide’
     Change page dimensions for the A4 paper size.  *Note* A4 Paper::.

‘@alias NEW=EXISTING’
     Make the command ‘@NEW’ a synonym for the existing command
     ‘@EXISTING’.  *Note* @alias::.

‘@allowcodebreaks TRUE-FALSE’
     Control breaking at ‘-’ and ‘_’ in printed output.  *Note*
     @allowcodebreaks::.

‘@anchor{NAME}’
     Define NAME as the current location for use as a cross-reference
     target.  *Note* @anchor::.

‘@appendix TITLE’
     Begin an appendix.  The title appears in the table of contents.
     *Note* @unnumbered @appendix::.

‘@appendixsec TITLE’
‘@appendixsection TITLE’
     Begin an appendix section within an appendix.  The section title
     appears in the table of contents.  ‘@appendixsection’ is a longer
     spelling of the ‘@appendixsec’ command.  *Note* @unnumberedsec
     @appendixsec @heading::.

‘@appendixsubsec TITLE’
     Begin an appendix subsection.  The title appears in the table of
     contents.  *Note* @unnumberedsubsec @appendixsubsec @subheading::.

‘@appendixsubsubsec TITLE’
     Begin an appendix subsubsection.  The title appears in the table of
     contents.  *Note* @subsubsection::.

‘@arrow{}’
     Generate a right arrow glyph: ‘→’.  Used by default for ‘@click’.
     *Note* Click Sequences::.

‘@asis’
     Keep the argument as is.  Used following ‘@table’, ‘@ftable’, and
     ‘@vtable’ to print the table's first column without highlighting
     ("as is").  *Note* @asis::.

‘@author AUTHOR’
     Set a manual author in the title page.  *Note* @title @subtitle
     @author::.  Set a quotation author in ‘@quotation’.  *Note*
     @quotation::.

‘@b{TEXT}’
     Set TEXT in a bold font, if possible.  *Note* Fonts::.

‘@bullet{}’
     Generate a large round dot, •, or the closest possible thing to
     one.  Often used with ‘@table’.  *Note* @bullet::.

‘@bsixpaper’
     Change page dimensions for the B6 paper size.  *Note* A4 Paper::.

‘@bye’
     Stop processing a file.  The processors do not see anything in the
     input file following ‘@bye’.  *Note* Ending a File::.

‘@c COMMENT’
     Begin a comment in Texinfo.  The rest of the line does not appear
     in any output.  A synonym for ‘@comment’.  ‘DEL’ also starts a
     comment.  *Note* Comments::.

‘@caption’
     Define the full caption for a ‘@float’.  *Note* @caption
     @shortcaption::.

‘@cartouche’
     Highlight an example or quotation by drawing a box with rounded
     corners around it, if possible.  Pair with ‘@end cartouche’.  *Note*
     @cartouche::.

‘@center LINE-OF-TEXT’
     Center the line of text following the command.  *Note* @titlefont
     @center @sp::.

‘@centerchap LINE-OF-TEXT’
     Like ‘@chapter’, but centers the chapter title.  *Note* @chapter::.

‘@chapheading TITLE’
     Print an unnumbered chapter-like heading, but omit from the table
     of contents.  *Note* @majorheading @chapheading::.

‘@chapter TITLE’
     Begin a numbered chapter.  The chapter title appears in the table
     of contents.  *Note* @chapter::.

‘@cindex ENTRY’
     Add ENTRY to the index of concepts.  *Note* Defining the Entries of
     an Index: Index Entries.

‘@cite{REFERENCE}’
     Highlight the name of a book or other reference that has no
     companion Info file.  *Note* @cite::.

‘@clear FLAG’
     Unset FLAG, preventing the Texinfo formatting commands from
     formatting text between subsequent pairs of ‘@ifset FLAG’ and ‘@end
     ifset’ commands, and preventing ‘@value{FLAG}’ from expanding to
     the value to which FLAG is set.  *Note* @set @clear @value::.

‘@click{}’
     Represent a single "click" in a GUI.  Used within ‘@clicksequence’.
     *Note* Click Sequences::.

‘@clicksequence{ACTION @click{} ACTION}’
     Represent a sequence of clicks in a GUI.  *Note* Click Sequences::.

‘@clickstyle @CMD’
     Execute @CMD for each ‘@click’; the default is ‘@arrow’.  The usual
     following empty braces on @CMD are omitted.  *Note* Click
     Sequences::.

‘@code{SAMPLE-CODE}’
     Indicate an expression, a syntactically complete token of a
     program, or a program name.  *Note* @code::.

‘@codequotebacktick ON-OFF’
‘@codequoteundirected ON-OFF’
     Control output of ‘`’ and ‘'’ in code examples.  *Note* Inserting
     Quote Characters::.

‘@comma{}’
     Insert a comma ',' character; only needed when a literal comma
     would be taken as an argument separator.  *Note* Inserting a
     Comma::.

‘@command{COMMAND-NAME}’
     Indicate a command name, such as ‘ls’.  *Note* @command::.

‘@comment COMMENT’
     Begin a comment in Texinfo.  The rest of the line does not appear
     in any output.  A synonym for ‘@c’.  *Note* Comments::.

‘@contents’
     Print a complete table of contents or specify that a table of
     content should be output, for formats that may output a table of
     contents.  *Note* Generating a Table of Contents: Contents.

‘@copying’
     Specify copyright holders and copying conditions for the document.
     Pair with ‘@end copying’.  *Note* @copying::.

‘@copyright{}’
     Generate the copyright symbol ©.  *Note* @copyright::.

‘@defblock’
     Start a block containing definitions.  Pair with ‘@end defblock’.
     *Note* Generic Definition Commands::.

‘@defcodeindex INDEX-NAME’
     Define a new index and its indexing command.  Print entries in an
     ‘@code’ font.  *Note* Defining New Indices: New Indices.

‘@defcv CATEGORY CLASS NAME’
‘@defcvx CATEGORY CLASS NAME’
     Format a description for a variable associated with a class in
     object-oriented programming.  Takes three arguments: the category
     of thing being defined, the class to which it belongs, and its
     name.  *Note* Definition Commands::.

‘@deffn CATEGORY NAME ARGUMENTS...’
‘@deffnx CATEGORY NAME ARGUMENTS...’
     Format a description for a function, interactive command, or
     similar entity that may take arguments.  ‘@deffn’ takes as
     arguments the category of entity being described, the name of this
     particular entity, and its arguments, if any.  *Note* Definition
     Commands::.

‘@defindex INDEX-NAME’
     Define a new index and its indexing command.  Print entries in a
     roman font.  *Note* Defining New Indices: New Indices.

‘@definfoenclose NEWCMD, BEFORE, AFTER’
     Create a new command ‘@NEWCMD’ for online formats that marks text
     by enclosing it in strings that precede and follow the text.  *Note*
     @definfoenclose::.

‘@defivar CLASS INSTANCE-VARIABLE-NAME’
‘@defivarx CLASS INSTANCE-VARIABLE-NAME’
     Format a description for an instance variable in object-oriented
     programming.  The command is equivalent to ‘@defcv {Instance
     Variable} ...’.  *Note* Definition Commands::.

‘@defline CATEGORY NAME ARGUMENTS...’
     Use within a ‘@defblock’ environment to give the heading prototype
     line for a symbol being defined.  This command does not create any
     index entries.  *Note* Generic Definition Commands::.

‘@defmac MACRONAME ARGUMENTS...’
‘@defmacx MACRONAME ARGUMENTS...’
     Format a description for a macro; equivalent to ‘@deffn Macro ...’.
     *Note* Definition Commands::.

‘@defmethod CLASS METHOD-NAME ARGUMENTS...’
‘@defmethodx CLASS METHOD-NAME ARGUMENTS...’
     Format a description for a method in object-oriented programming;
     equivalent to ‘@defop Method ...’.  *Note* Definition Commands::.

‘@defop CATEGORY CLASS NAME ARGUMENTS...’
‘@defopx CATEGORY CLASS NAME ARGUMENTS...’
     Format a description for an operation in object-oriented
     programming.  ‘@defop’ takes as arguments the name of the category
     of operation, the name of the operation's class, the name of the
     operation, and its arguments, if any.  *Note* Definition Commands::,
     and *note* Abstract Objects::.

‘@defopt OPTION-NAME’
‘@defoptx OPTION-NAME’
     Format a description for a user option; equivalent to ‘@defvr {User
     Option} ...’.  *Note* Definition Commands::.

‘@defspec SPECIAL-FORM-NAME ARGUMENTS...’
‘@defspecx SPECIAL-FORM-NAME ARGUMENTS...’
     Format a description for a special form; equivalent to ‘@deffn
     {Special Form} ...’.  *Note* Definition Commands::.

‘@deftp CATEGORY NAME-OF-TYPE ATTRIBUTES...’
‘@deftpx CATEGORY NAME-OF-TYPE ATTRIBUTES...’
     Format a description for a data type; its arguments are the
     category, the name of the type (e.g., ‘int’) , and then the names
     of attributes of objects of that type.  *Note* Definition
     Commands::, and *note* Data Types::.

‘@deftypecv CATEGORY CLASS DATA-TYPE NAME’
‘@deftypecvx CATEGORY CLASS DATA-TYPE NAME’
     Format a description for a typed class variable in object-oriented
     programming.  *Note* Definition Commands::, and *note* Abstract
     Objects::.

‘@deftypefn CATEGORY DATA-TYPE NAME ARGUMENTS...’
‘@deftypefnx CATEGORY DATA-TYPE NAME ARGUMENTS...’
     Format a description for a function or similar entity that may take
     arguments and that is typed.  ‘@deftypefn’ takes as arguments the
     category of entity being described, the type, the name of the
     entity, and its arguments, if any.  *Note* Definition Commands::.

‘@deftypefnnewline ON-OFF’
     Specifies whether return types for ‘@deftypefn’ and similar are
     printed on lines by themselves; default is off.  *Note* Functions in
     Typed Languages: Typed Functions.

‘@deftypefun DATA-TYPE FUNCTION-NAME ARGUMENTS...’
‘@deftypefunx DATA-TYPE FUNCTION-NAME ARGUMENTS...’
     Format a description for a function in a typed language.  The
     command is equivalent to ‘@deftypefn Function ...’.  *Note*
     Definition Commands::.

‘@deftypeivar CLASS DATA-TYPE VARIABLE-NAME’
‘@deftypeivarx CLASS DATA-TYPE VARIABLE-NAME’
     Format a description for a typed instance variable in
     object-oriented programming.  *Note* Definition Commands::, and
     *note* Abstract Objects::.

‘@deftypeline CATEGORY DATA-TYPE NAME ARGUMENTS...’
     Use within a ‘@defblock’ environment to give the heading prototype
     line for a symbol being defined, with data types.  This command
     does not create any index entries.  *Note* Generic Definition
     Commands::.

‘@deftypemethod CLASS DATA-TYPE METHOD-NAME ARGUMENTS...’
‘@deftypemethodx CLASS DATA-TYPE METHOD-NAME ARGUMENTS...’
     Format a description for a typed method in object-oriented
     programming.  *Note* Definition Commands::.

‘@deftypeop CATEGORY CLASS DATA-TYPE NAME ARGUMENTS...’
‘@deftypeopx CATEGORY CLASS DATA-TYPE NAME ARGUMENTS...’
     Format a description for a typed operation in object-oriented
     programming.  *Note* Definition Commands::, and *note* Abstract
     Objects::.

‘@deftypevar DATA-TYPE VARIABLE-NAME’
‘@deftypevarx DATA-TYPE VARIABLE-NAME’
     Format a description for a variable in a typed language.  The
     command is equivalent to ‘@deftypevr Variable ...’.  *Note*
     Definition Commands::.

‘@deftypevr CATEGORY DATA-TYPE NAME’
‘@deftypevrx CATEGORY DATA-TYPE NAME’
     Format a description for something like a variable in a typed
     language--an entity that records a value.  Takes as arguments the
     category of entity being described, the type, and the name of the
     entity.  *Note* Definition Commands::.

‘@defun FUNCTION-NAME ARGUMENTS...’
‘@defunx FUNCTION-NAME ARGUMENTS...’
     Format a description for a function; equivalent to ‘@deffn Function
     ...’.  *Note* Definition Commands::.

‘@defvar VARIABLE-NAME’
‘@defvarx VARIABLE-NAME’
     Format a description for a variable; equivalent to ‘@defvr Variable
     ...’.  *Note* Definition Commands::.

‘@defvr CATEGORY NAME’
‘@defvrx CATEGORY NAME’
     Format a description for any kind of variable.  ‘@defvr’ takes as
     arguments the category of the entity and the name of the entity.
     *Note* Definition Commands::.

‘@detailmenu’
     Mark the (optional) detailed node listing in a master menu.  *Note*
     Master Menu Parts::.

‘@dfn{TERM}’
     Indicate the introductory or defining use of a term.  *Note* @dfn::.

‘@DH{}’
‘@dh{}’
     Generate the uppercase and lowercase Icelandic letter eth,
     respectively: Ð, ð.  *Note* Inserting Accents::.

‘@dircategory DIRPART’
     Specify a category for the manual.  *Note* Directory Category::.

‘@direntry’
     Begin the Info directory menu entry for this file.  Pair with ‘@end
     direntry’.  *Note* Installing Dir Entries::.

‘@display’
     Begin a kind of example.  Like ‘@example’ (indent text, do not
     fill), but do not select a new font.  Pair with ‘@end display’.
     *Note* @display::.

‘@displaymath’
     Format a block of math in "display" format.  *Note* Inserting
     Math::.

‘@dmn{DIMENSION}’
     Format a unit of measure, as in 12pt.  *Note* @dmn::.

‘@docbook’
     Enter DocBook completely.  Pair with ‘@end docbook’.  *Note* Raw
     Formatter Commands::.

‘@documentdescription’
     Set the document description text, included in the HTML output.
     Pair with ‘@end documentdescription’.  *Note*
     @documentdescription::.

‘@documentencoding ENC’
     Declare the input encoding to be ENC.  *Note* @documentencoding::.

‘@documentlanguage CC’
     Declare the document language as the two-character ISO-639
     abbreviation CC.  *Note* @documentlanguage::.

‘@dotaccent{C}’
     Generate a dot accent over the character C, as in ȯ.  *Note*
     Inserting Accents::.

‘@dotless{I-OR-J}’
     Generate dotless i ('ı') and dotless j ('ȷ').  *Note* Inserting
     Accents::.

‘@dots{}’
     Generate an ellipsis, ‘...’.  *Note* @dots::.

‘@email{ADDRESS[, DISPLAYED-TEXT]}’
     Indicate an electronic mail address.  *Note* @email::.

‘@emph{TEXT}’
     Emphasize TEXT.  *Note* Emphasizing Text: Emphasis.

‘@end ENVIRONMENT’
     Ends ENVIRONMENT, as in ‘@end example’.  *Note* @-commands:
     Formatting Commands.

‘@enddots{}’
     Generate an end-of-sentence ellipsis, like this: ...  *Note*
     @dots::.

‘@enumerate [NUMBER-OR-LETTER]’
     Begin a numbered list, using ‘@item’ for each entry.  Optionally,
     start list with NUMBER-OR-LETTER.  Pair with ‘@end enumerate’.
     *Note* @enumerate::.

‘@env{ENVIRONMENT-VARIABLE}’
     Indicate an environment variable name, such as ‘PATH’.  *Note*
     @env::.

‘@equiv{}’
     Indicate to the reader the exact equivalence of two forms with a
     glyph: ‘≡’.  *Note* @equiv::.

‘@error{}’
     Indicate to the reader with a glyph that the following text is an
     error message: ‘error→’.  *Note* @error::.

‘@errormsg{MSG}’
     Report MSG as an error to standard error, and exit unsuccessfully.
     Texinfo commands within MSG are expanded to plain text.  *Note*
     Conditionals::, and *note* External Macro Processors::.

‘@euro{}’
     Generate the Euro currency sign.  *Note* @euro::.

‘@evenfooting [LEFT] @| [CENTER] @| [RIGHT]’
‘@evenheading [LEFT] @| [CENTER] @| [RIGHT]’
     Specify page footings resp. headings for even-numbered (left-hand)
     pages.  *Note* How to Make Your Own Headings: Custom Headings.

‘@everyfooting [LEFT] @| [CENTER] @| [RIGHT]’
‘@everyheading [LEFT] @| [CENTER] @| [RIGHT]’
     Specify page footings resp. headings for every page.  Not relevant
     to Info.  *Note* How to Make Your Own Headings: Custom Headings.

‘@example’
     Begin an example.  Indent text, do not fill, and select fixed-width
     font.  Pair with ‘@end example’.  ‘@example’ accepts optional
     arguments, separated by commas.  It is recommended to set the first
     argument to the language of the example code.  *Note* @example::.

‘@exampleindent INDENT’
     Indent example-like environments by INDENT number of spaces
     (perhaps 0).  *Note* @exampleindent::.

‘@exclamdown{}’
     Generate an upside-down exclamation point.  *Note* Inserting
     Accents::.

‘@exdent LINE-OF-TEXT’
     Remove any indentation a line might have.  *Note* @exdent::.

‘@expansion{}’
     Indicate the result of a macro expansion to the reader with a
     special glyph: ‘↦’.  *Note* @expansion::.

‘@file{FILENAME}’
     Highlight the name of a file, buffer, node, directory, etc.  *Note*
     @file::.

‘@finalout’
     Prevent TeX from printing large black warning rectangles beside
     over-wide lines.  *Note* Overfull hboxes::.

‘@findex ENTRY’
     Add ENTRY to the index of functions.  *Note* Defining the Entries of
     an Index: Index Entries.

‘@firstparagraphindent WORD’
     Control indentation of the first paragraph after section headers
     according to WORD, one of 'none' or 'insert'.  *Note*
     @firstparagraphindent::.

‘@float’
     Environment to define floating material.  Pair with ‘@end float’.
     *Note* Floats::.

‘@flushleft’
‘@flushright’
     Do not fill text; left (right) justify every line while leaving the
     right (left) end ragged.  Leave font as is.  Pair with ‘@end
     flushleft’ (‘@end flushright’).  *Note* @flushleft @flushright::.

‘@fonttextsize 10-11’
     Change the size of the main body font in the printed output.  *Note*
     Fonts::.

‘@footnote{TEXT-OF-FOOTNOTE}’
     Enter a footnote, for a reference that documents or elucidates the
     primary text.  Footnote text is printed at the bottom of the page
     in printed output.  In other formats, footnote text can be output
     in the same node, in a separate node, or simply be marked as being
     footnote text.  *Note* Footnotes::.

‘@footnotestyle STYLE’
     Specify a footnote style, either ‘end’ for the end node style or
     ‘separate’ for the separate style.  In the separate style,
     footnotes are put in a separate node or file.  *Note* Footnote
     Styles::.

‘@format’
     Begin a kind of example.  Like ‘@display’, but do not indent.  Pair
     with ‘@end format’.  *Note* @example::.

‘@frenchspacing ON-OFF’
     Control spacing after punctuation.  *Note* @frenchspacing::.

‘@ftable FORMATTING-COMMAND’
     Begin a two-column table, using ‘@item’ for each entry.
     Automatically enter each of the items in the first column into the
     index of functions.  Pair with ‘@end ftable’.  The same as
     ‘@table’, except for indexing.  *Note* @ftable @vtable::.

‘@geq{}’
     Generate a greater-than-or-equal sign, '≥'.  *Note* @geq @leq::.

‘@group’
     Disallow page breaks within following text.  Pair with ‘@end
     group’.  Ignored in Info.  *Note* @group::.

‘@guillemetleft{}’
‘@guillemetright{}’
‘@guillemotleft{}’
‘@guillemotright{}’
‘@guilsinglleft{}’
‘@guilsinglright{}’
     Double and single angle quotation marks: « » ‹ ›.  ‘@guillemotleft’
     and ‘@guillemotright’ are synonyms for ‘@guillemetleft’ and
     ‘@guillemetright’.  *Note* Inserting Quotation Marks::.

‘@H{C}’
     Generate the long Hungarian umlaut accent over C, as in ő.

‘@hashchar{}’
     Insert a hash '#' character; only needed when a literal hash would
     introduce ‘#line’ directive.  *Note* Inserting a Hashsign::, and
     *note* External Macro Processors::.

‘@heading TITLE’
     Print an unnumbered section-like heading, but omit from the table
     of contents.  *Note* @unnumberedsec @appendixsec @heading::.

‘@headings ON-OFF-SINGLE-DOUBLE’
     Turn page headings on or off, and/or specify single-sided or
     double-sided page headings for printing.  *Note* @headings::.

‘@headitem’
     Begin a heading row in a multitable.  *Note* Multitable Rows::.

‘@headitemfont{TEXT}’
     Set TEXT in the font used for multitable heading rows; mostly
     useful in multitable templates.  *Note* Multitable Rows::.

‘@html’
     Enter HTML completely.  Pair with ‘@end html’.  *Note* Raw Formatter
     Commands::.

‘@hyphenation{HY-PHEN-A-TED WORDS}’
     Explicitly define hyphenation points.  *Note* @- @hyphenation::.

‘@i{TEXT}’
     Set TEXT in an italic font, when possible.  *Note* Fonts::.

‘@ifclear TXIVAR’
     If the Texinfo variable TXIVAR is not set, format the following
     text.  Pair with ‘@end ifclear’.  *Note* @set @clear @value::.

‘@ifcommanddefined TXICMD’
‘@ifcommandnotdefined TXICMD’
     If the Texinfo code ‘@TXICMD’ is (not) defined, format the follow
     text.  Pair with the corresponding ‘@end ifcommand...’.  *Note*
     Testing for Texinfo Commands::.

‘@ifdocbook’
‘@ifhtml’
‘@ifinfo’
‘@iflatex’
‘@ifplaintext’
‘@ifxml’
     Begin text that will appear only in the given output format.
     ‘@ifinfo’ output appears in both Info and (for historical
     compatibility) plain text output.  Pair with ‘@end ifdocbook’ resp.
     ‘@end ifhtml’...  *Note* Conditionals::.

‘@ifnotdocbook’
‘@ifnothtml’
‘@ifnotlatex’
‘@ifnotplaintext’
‘@ifnottex’
‘@ifnotxml’
     Begin text to be ignored in one output format but not the others.
     ‘@ifnothtml’ text is omitted from HTML output, etc.  Pair with the
     corresponding ‘@end ifnotFORMAT’.  *Note* Conditionals::.

‘@ifnotinfo’
     Begin text to appear in output other than Info and (for historical
     compatibility) plain text.  Pair with ‘@end ifnotinfo’.  *Note*
     Conditionals::.

‘@ifset TXIVAR’
     If the Texinfo variable TXIVAR is set, format the following text.
     Pair with ‘@end ifset’.  *Note* @set @clear @value::.

‘@iftex’
     Begin text to appear only in the TeX output.  Pair with ‘@end
     iftex’.  *Note* Conditionals::.

‘@ignore’
     Begin text that will not appear in any output.  Pair with ‘@end
     ignore’.  *Note* Comments and Ignored Text: Comments.

‘@image{FILENAME, [WIDTH], [HEIGHT], [ALT], [EXT]}’
     Include graphics image in external FILENAME scaled to the given
     WIDTH and/or HEIGHT, using ALT text and looking for ‘FILENAME.EXT’
     in HTML.  *Note* Images::.

‘@include FILENAME’
     Read the contents of Texinfo source file FILENAME.  *Note* Include
     Files::.

‘@indent’
     Insert paragraph indentation.  *Note* @indent::.

‘@indentedblock’
     Indent a block of arbitrary text on the left.  Pair with ‘@end
     indentedblock’.  *Note* @indentedblock::.

‘@indicateurl{INDICATEURL}’
     Indicate text that is a uniform resource locator for the World Wide
     Web.  *Note* @indicateurl::.

‘@inforef{NODE-NAME, [ENTRY-NAME], INFO-FILE-NAME}’
     Make a cross-reference to an Info file for which there is no
     printed manual.  *Note* @inforef::.

‘@inlinefmt{FMT, TEXT}’
     Insert TEXT only if the output format is FMT.  *Note* Inline
     Conditionals::.

‘@inlinefmtifelse{FMT, TEXT, ELSE-TEXT}’
     Insert TEXT if the output format is FMT, else ELSE-TEXT.

‘@inlineifclear{VAR, TEXT}’
‘@inlineifset{VAR, TEXT}’
     Insert TEXT only if the Texinfo variable VAR is (not) set.

‘@inlineraw{FMT, RAW-TEXT}’
     Insert TEXT as in a raw conditional, only if the output format is
     FMT.

‘\input MACRO-DEFINITIONS-FILE’
     Use the specified macro definitions file.  This command is used
     only in the first line of a Texinfo file to cause TeX to make use
     of the ‘texinfo’ macro definitions file.  The ‘\’ in ‘\input’ is
     used instead of an ‘@’ because TeX does not recognize ‘@’ until
     after it has read the definitions file.  *Note* Texinfo File
     Header::.

‘@insertcopying’
     Insert the text previously defined with the ‘@copying’ environment.
     *Note* @insertcopying::.

‘@item’
     Indicate the beginning of a marked paragraph for ‘@itemize’ and
     ‘@enumerate’; indicate the beginning of the text of a first column
     entry for ‘@table’, ‘@ftable’, and ‘@vtable’.  *Note* Lists and
     Tables::.

‘@itemize MARK-GENERATING-CHARACTER-OR-COMMAND’
     Begin an unordered list: indented paragraphs with a mark, such as
     ‘@bullet’, inside the left margin at the beginning of each item.
     Pair with ‘@end itemize’.  *Note* @itemize::.

‘@itemx’
     Like ‘@item’ in ‘@table’, ‘@ftable’, and ‘@vtable’, but do not
     generate extra vertical space above the item text.  Thus, when
     several items have the same description, use ‘@item’ for the first
     and ‘@itemx’ for the others.  *Note* @itemx::.

‘@kbd{KEYBOARD-CHARACTERS}’
     Indicate characters of input to be typed by users.  *Note* @kbd::.

‘@kbdinputstyle STYLE’
     Specify when ‘@kbd’ should use a font distinct from ‘@code’
     according to STYLE: ‘code’, ‘distinct’, ‘example’.  *Note* @kbd::.

‘@key{KEY-NAME}’
     Indicate the name of a key on a keyboard.  *Note* @key::.

‘@kindex ENTRY’
     Add ENTRY to the index of keys.  *Note* Defining the Entries of an
     Index: Index Entries.

‘@L{}’
‘@l{}’
     Generate the uppercase and lowercase Polish suppressed-L letters,
     respectively: Ł, ł.

‘@LaTeX{}’
     Generate the LaTeX logo.  *Note* @TeX @LaTeX::.

‘@latex’
     Enter LaTeX completely.  Pair with ‘@end latex’.  *Note* Raw
     Formatter Commands::.

‘@leq{}’
     Generate a less-than-or-equal sign, '≤'.  *Note* @geq @leq::.

‘@linemacro MACRONAME {PARAMS}’
     Define a new macro which takes rest of the line as an argument, and
     expands to a whole number of complete lines.  *Note* Line Macros::.

‘@link{NODENAME, LABEL, MANUAL-NAME}’
     Create a plain link with no visible markup or page reference.
     *Note* @link::.

‘@lisp’
     Begin an example of Lisp code.  Indent text, do not fill, and
     select fixed-width font.  Pair with ‘@end lisp’.  *Note* @lisp::.

‘@listoffloats’
     Produce a table-of-contents-like listing of ‘@float’s.  *Note*
     @listoffloats::.

‘@lowersections’
     Change subsequent chapters to sections, sections to subsections,
     and so on.  *Note* ‘@raisesections’ and ‘@lowersections’:
     Raise/lower sections.

‘@macro MACRONAME {PARAMS}’
     Define a new Texinfo command ‘@MACRONAME{PARAMS}’.  Pair with ‘@end
     macro’.  *Note* Defining Macros::.

‘@majorheading TITLE’
     Print an unnumbered chapter-like heading, but omit from the table
     of contents.  This generates more vertical whitespace before the
     heading than the ‘@chapheading’ command.  *Note* @majorheading
     @chapheading::.

‘@math{MATHEMATICAL-EXPRESSION}’
     Format a mathematical expression.  *Note* Inserting Math::.

‘@menu’
     Mark the beginning of a menu of nodes.  No effect in a printed
     manual.  Pair with ‘@end menu’.  *Note* Menus::.

‘@microtype ON-OFF’
     Turn microtype on or off.  *Note* Microtypography::.

‘@minus{}’
     Generate a minus sign, '−'.  *Note* @minus::.

‘@multitable COLUMN-WIDTH-SPEC’
     Begin a multi-column table.  Begin each row with ‘@item’ or
     ‘@headitem’, and separate columns with ‘@tab’.  Pair with ‘@end
     multitable’.  *Note* Multitable Column Widths::.

‘@need N’
     Start a new page in a printed manual if fewer than N mils
     (thousandths of an inch) remain on the current page.  *Note*
     @need::.

‘@node NAME, [NEXT], [PREVIOUS], [UP]’
     Begin a new node.  Only the first argument is mandatory.  *Note*
     Writing a Node::.

‘@nodedescription NODE-DESCRIPTION’
     Provide a short elaboration of the purpose of a node.  *Note* Node
     Descriptions::.

‘@nodedescriptionblock’
     Used to start a longer node description.  Pair with ‘@end
     nodedescriptionblock’.  *Note* Node Descriptions::.

‘@noindent’
     Prevent text from being indented as if it were a new paragraph.
     *Note* @noindent::.

‘@novalidate’
     Suppress validation of node references and omit creation of
     auxiliary files with TeX.  Use before any sectioning or
     cross-reference commands.  *Note* Pointer Validation::.

‘@O{}’
‘@o{}’
     Generate the uppercase and lowercase O-with-slash letters,
     respectively: Ø, ø.

‘@oddfooting [LEFT] @| [CENTER] @| [RIGHT]’
‘@oddheading [LEFT] @| [CENTER] @| [RIGHT]’
     Specify page footings resp. headings for odd-numbered (right-hand)
     pages.  *Note* How to Make Your Own Headings: Custom Headings.

‘@OE{}’
‘@oe{}’
     Generate the uppercase and lowercase OE ligatures, respectively: Œ,
     œ.  *Note* Inserting Accents::.

‘@ogonek{C}’
     Generate an ogonek diacritic under the next character, as in ą.
     *Note* Inserting Accents::.

‘@option{OPTION-NAME}’
     Indicate a command-line option, such as ‘-l’ or ‘--help’.  *Note*
     @option::.

‘@ordf{}’
‘@ordm{}’
     Generate the feminine and masculine Spanish ordinals, respectively:
     ª, º.  *Note* Inserting Accents::.

‘@page’
     Start a new page in a printed manual.  *Note* @page::.

‘@pagesizes [WIDTH][, HEIGHT]’
     Change page dimensions.  *Note* pagesizes::.

‘@paragraphindent INDENT’
     Indent paragraphs by INDENT number of spaces (perhaps 0); preserve
     source file indentation if INDENT is ‘asis’.  *Note*
     @paragraphindent::.

‘@part TITLE’
     Begin a group of chapters or appendixes; included in the tables of
     contents.  *Note* @part::.

‘@pindex ENTRY’
     Add ENTRY to the index of programs.  *Note* Defining the Entries of
     an Index: Index Entries.

‘@point{}’
     Indicate the position of point in a buffer to the reader with a
     glyph: ‘⋆’.  *Note* @point::.

‘@pounds{}’
     Generate the pounds sterling currency sign, ‘£’.  *Note* @pounds::.

‘@print{}’
     Indicate printed output to the reader with a glyph: ‘⊣’.  *Note*
     @print::.

‘@printindex INDEX-NAME’
     Generate the index for INDEX-NAME.  *Note* Printing Indices &
     Menus::.

‘@pxref{NODE, [ENTRY], [NODE-TITLE], [INFO-FILE], [PRINTED-MANUAL]}’
     Make a reference to be used within parentheses.  Starts with a
     lowercase 'see' in a printed manual.  The first argument is
     mandatory, except for references to whole manuals.  To refer to
     another manual as a whole, the PRINTED-MANUAL and/or the INFO-FILE
     are the only required arguments.  *Note* @pxref::.

‘@questiondown{}’
     Generate an upside-down question mark.  *Note* Inserting Accents::.

‘@quotation’
     Narrow the margins to indicate text that is quoted from another
     work.  Takes optional argument specifying prefix text.  Pair with
     ‘@end quotation’.  *Note* @quotation::.

‘@quotedblleft{}’
‘@quotedblright{}’
‘@quoteleft{}’
‘@quoteright{}’
‘@quotedblbase{}’
‘@quotesinglbase{}’
     Produce various quotation marks: “ ” ‘ ’ „ ‚.  *Note* Inserting
     Quotation Marks::.

‘@r{TEXT}’
     Set TEXT in the regular roman font, if possible.  *Note* Fonts::.

‘@raggedright’
     Fill text; left justify every line while leaving the right end
     ragged.  Leave font as is.  Pair with ‘@end raggedright’.  *Note*
     @raggedright::.

‘@raisesections’
     Change subsequent sections to chapters, subsections to sections,
     and so on.  *Note* Raise/lower sections::.

‘@ref{NODE, [ENTRY], [NODE-TITLE], [INFO-FILE], [PRINTED-MANUAL]}’
     Make a plain reference that does not start with any special text.
     Follow command with a punctuation mark.  The first argument is
     mandatory, except for references to whole manuals.  To refer to
     another manual as a whole, the PRINTED-MANUAL and/or the INFO-FILE
     are the only required arguments.  *Note* @ref::.

‘@registeredsymbol{}’
     Generate the legal symbol ®.  *Note* @registeredsymbol::.

‘@result{}’
     Indicate the result of an expression to the reader with a special
     glyph: ‘⇒’.  *Note* @result::.

‘@ringaccent{C}’
     Generate a ring accent over the next character, as in o̊.  *Note*
     Inserting Accents::.

‘@samp{TEXT}’
     Indicate a literal example of a sequence of characters, in general.
     *Note* @samp::.

‘@sansserif{TEXT}’
     Set TEXT in a sans serif font if possible.  *Note* Fonts::.

‘@sc{TEXT}’
     Set TEXT in a small caps font if possible, and uppercase in Info.
     *Note* Smallcaps::.

‘@section TITLE’
     Begin a section within a chapter.  The section title appears in the
     table of contents.  Within ‘@chapter’ and ‘@appendix’, the section
     title is numbered; within ‘@unnumbered’, the section is unnumbered.
     *Note* @section::.

‘@seealso{INDEX-TEXT}’
     Use in an index entry to refer the reader to another relevant index
     entry.  *Note* Advanced Indexing::.

‘@seeentry{INDEX-TEXT}’
     Use in an index entry to redirect the reader to another index
     entry.  *Note* Advanced Indexing::.

‘@set TXIVAR [STRING]’
     Define the Texinfo variable TXIVAR, optionally to the value STRING.
     *Note* @set @clear @value::.

‘@setchapternewpage ON-OFF-ODD’
     Specify whether chapters start on new pages, and if so, whether on
     odd-numbered (right-hand) new pages.  *Note* @setchapternewpage::.

‘@setfilename INFO-FILE-NAME’
     Provide a name to be used for the output files.  This command is
     ignored for TeX formatting.  *Note* @setfilename::.

‘@settitle TITLE’
     Specify the title for page headers in a printed manual, and the
     default document title for HTML. *Note* @settitle::.

‘@shortcaption’
     Define the short caption for a ‘@float’.  *Note* @caption
     @shortcaption::.

‘@shortcontents’
     Print a short table of contents, with chapter-level entries only,
     or specify that a short table of contents should be output.  For
     formats that may output a short table of contents.  *Note*
     Generating a Table of Contents: Contents.

‘@shorttitlepage TITLE’
     Generate a minimal title page.  *Note* @titlepage::.

‘@slanted{TEXT}’
     Set TEXT in a slanted font if possible.  *Note* Fonts::.

‘@smallbook’
     In printed output, use a 7 by 9.25 inch format rather than the
     regular 8.5 by 11 inch format.  *Note* @smallbook::.

‘@smalldisplay’
     Begin a kind of example.  Like ‘@display’, but use a smaller font
     size where possible.  Pair with ‘@end smalldisplay’.  *Note*
     small::.

‘@smallexample’
     Begin an example.  Like ‘@example’, but use a smaller font size
     where possible.  Pair with ‘@end smallexample’.  *Note* small::.

‘@smallformat’
     Begin a kind of example.  Like ‘@format’, but use a smaller font
     size where possible.  Pair with ‘@end smallformat’.  *Note* small::.

‘@smallindentedblock’
     Like ‘@indentedblock’, but use a smaller font size where possible.
     Pair with ‘@end smallindentedblock’.  *Note* small::.

‘@smalllisp’
     Begin an example of Lisp code.  Same as ‘@smallexample’.  Pair with
     ‘@end smalllisp’.  *Note* small::.

‘@smallquotation’
     Like ‘@quotation’, but use a smaller font size where possible.
     Pair with ‘@end smallquotation’.  *Note* small::.

‘@sortas {KEY}’
     Used in the arguments to index commands to give a string by which
     the index entry should be sorted.  *Note* Indexing Commands::.

‘@sp N’
     Skip N blank lines.  *Note* @sp::.

‘@ss{}’
     Generate the German sharp-S es-zet letter, ß.  *Note* Inserting
     Accents::.

‘@strong {TEXT}’
     Emphasize TEXT more strongly than ‘@emph’.  *Note* Emphasizing Text:
     emph & strong.

‘@sub {TEXT}’
     Set TEXT as a subscript.  *Note* Inserting Subscripts and
     Superscripts::.

‘@subentry’
     Use in an index entry to separate parts of a multi-level entry.
     *Note* Advanced Indexing::.

‘@subheading TITLE’
     Print an unnumbered subsection-like heading, but omit from the
     table of contents of a printed manual.  *Note* @unnumberedsubsec
     @appendixsubsec @subheading::.

‘@subsection TITLE’
     Begin a subsection within a section.  The subsection title appears
     in the table of contents.  Same context-dependent numbering as
     ‘@section’.  *Note* @subsection::.

‘@subsubheading TITLE’
     Print an unnumbered subsubsection-like heading, but omit from the
     table of contents of a printed manual.  *Note* @subsubsection::.

‘@subsubsection TITLE’
     Begin a subsubsection within a subsection.  The subsubsection title
     appears in the table of contents.  Same context-dependent numbering
     as ‘@section’.  *Note* @subsubsection::.

‘@subtitle TITLE’
     Set a subtitle for the title page.  *Note* @title @subtitle
     @author::.

‘@summarycontents’
     Print or specify a short table of contents.  Synonym for
     ‘@shortcontents’.  *Note* Generating a Table of Contents: Contents.

‘@sup {TEXT}’
     Set TEXT as a superscript.  *Note* Inserting Subscripts and
     Superscripts::.

‘@syncodeindex FROM-INDEX TO-INDEX’
     Merge the index named in the first argument into the index named in
     the second argument, formatting the entries from the first index
     with ‘@code’.  *Note* Combining Indices::.

‘@synindex FROM-INDEX TO-INDEX’
     Merge the index named in the first argument into the index named in
     the second argument.  Do not change the font of FROM-INDEX entries.
     *Note* Combining Indices::.

‘@t{TEXT}’
     Set TEXT in a fixed-width, typewriter-like font, if possible.
     *Note* Fonts::.

‘@tab’
     Separate columns in a row of a multitable.  *Note* Multitable
     Rows::.

‘@table FORMATTING-COMMAND’
     Begin a two-column table (description list), using ‘@item’ for each
     entry.  Write each first column entry on the same line as ‘@item’.
     First column entries are printed in the font resulting from
     FORMATTING-COMMAND.  Pair with ‘@end table’.  *Note* Making a
     Two-column Table: Two-column Tables.  Also see *note* @ftable
     @vtable::, and *note* @itemx::.

‘@TeX{}’
     Generate the TeX logo.  *Note* @TeX @LaTeX::.

‘@tex’
     Enter TeX completely.  Pair with ‘@end tex’.  *Note* Raw Formatter
     Commands::.

‘@textdegree{}’
     Generate the degree symbol.  *Note* @textdegree::.

‘@thischapter’
‘@thischaptername’
‘@thischapternum’
‘@thissection’
‘@thissectionname’
‘@thissectionnum’
‘@thisfile’
‘@thispage’
‘@thistitle’
     Only allowed in a heading or footing.  Stands for, respectively,
     the number and name of the current chapter (in the format 'Chapter
     1: Title'), the current chapter name only, the current chapter
     number only, the number and name of the current section, the
     current section name only, the current section number only, the
     file name, the current page number, and the title of the document.
     *Note* How to Make Your Own Headings: Custom Headings.

‘@TH{}’
‘@th{}’
     Generate the uppercase and lowercase Icelandic letter thorn,
     respectively: Þ, þ.  *Note* Inserting Accents::.

‘@tie{}’
     Generate a normal interword space at which a line break is not
     allowed.  *Note* @tie::.

‘@tieaccent{CC}’
     Generate a tie-after accent over the next two characters CC, as in
     'o͡o'.  *Note* Inserting Accents::.

‘@tindex ENTRY’
     Add ENTRY to the index of data types.  *Note* Defining the Entries
     of an Index: Index Entries.

‘@title TITLE’
     Set the title for the title page.  *Note* @title @subtitle
     @author::.

‘@titlefont{TEXT}’
     Print TEXT in a larger than normal font, if possible.  *Note*
     @titlefont @center @sp::.

‘@titlepage’
     Begin the title page.  Write the command on a line of its own,
     paired with ‘@end titlepage’.  The title page is not output, in the
     default case, in online formats.  *Note* @titlepage::.

‘@today{}’
     Insert the current date, in '1 Jan 1900' style.  *Note* How to Make
     Your Own Headings: Custom Headings.

‘@top TITLE’
     Mark the topmost ‘@node’ in the file, which must be defined on the
     line immediately preceding the ‘@top’ command.  The title is
     formatted as a chapter-level heading.  In TeX the ‘@top’ command is
     merely a synonym for ‘@unnumbered’.

‘@U{HEX}’
     Output a representation of Unicode character U+HEX.  *Note*
     Inserting Unicode::.

‘@u{C}’
‘@ubaraccent{C}’
‘@udotaccent{C}’
     Generate a breve, underbar, or underdot accent, respectively, over
     or under the character C, as in ŏ, o̲, ọ.  *Note* Inserting
     Accents::.

‘@unmacro MACRONAME’
     Undefine the macro ‘@MACRONAME’ if it has been defined.  *Note*
     Defining Macros::.

‘@unnumbered TITLE’
     Begin a chapter that appears without chapter numbers of any kind.
     The title appears in the table of contents.  *Note* @unnumbered
     @appendix::.

‘@unnumberedsec TITLE’
     Begin a section that appears without section numbers of any kind.
     The title appears in the table of contents.  *Note* @unnumberedsec
     @appendixsec @heading::.

‘@unnumberedsubsec TITLE’
     Begin an unnumbered subsection.  The title appears in the table of
     contents.  *Note* @unnumberedsubsec @appendixsubsec @subheading::.

‘@unnumberedsubsubsec TITLE’
     Begin an unnumbered subsubsection.  The title appears in the table
     of contents.  *Note* @subsubsection::.

‘@uref{URL[, DISPLAYED-TEXT][, REPLACEMENT}’
‘@url{URL[, DISPLAYED-TEXT][, REPLACEMENT}’
     Define a cross-reference to an external uniform resource locator,
     e.g., for the World Wide Web.  *Note* @url::.

‘@urefbreakstyle STYLE’
     Specify how ‘@uref’/‘@url’ should break at special characters:
     ‘after’, ‘before’, ‘none’.  *Note* @url::.

‘@v{C}’
     Generate check accent over the character C, as in ǒ.  *Note*
     Inserting Accents::.

‘@value{TXIVAR}’
     Insert the value, if any, of the Texinfo variable TXIVAR,
     previously defined by ‘@set’.  *Note* @set @clear @value::.

‘@var{METASYNTACTIC-VARIABLE}’
     Highlight a metasyntactic variable, which is something that stands
     for another piece of text.  *Note* @var::.

‘@verb{DELIM LITERAL DELIM}’
     Output LITERAL, delimited by the single character DELIM, exactly as
     is (in the fixed-width font), including any whitespace or Texinfo
     special characters.  *Note* @verb::.

‘@verbatim’
     Output the text of the environment exactly as is (in the
     fixed-width font).  Pair with ‘@end verbatim’.  *Note* @verbatim::.

‘@verbatiminclude FILENAME’
     Output the contents of FILENAME exactly as is (in the fixed-width
     font).  *Note* @verbatiminclude::.

‘@vindex ENTRY’
     Add ENTRY to the index of variables.  *Note* Defining the Entries of
     an Index: Index Entries.

‘@vskip AMOUNT’
     In a printed manual, insert whitespace so as to push text on the
     remainder of the page towards the bottom of the page.  Used in
     formatting the copyright page with the argument ‘0pt plus 1filll’.
     (Note spelling of ‘filll’.)  *Note* Copyright::.

‘@vtable FORMATTING-COMMAND’
     Begin a two-column table, using ‘@item’ for each entry.
     Automatically enter each of the items in the first column into the
     index of variables.  Pair with ‘@end vtable’.  The same as
     ‘@table’, except for indexing.  *Note* @ftable @vtable::.

‘@w{TEXT}’
     Disallow line breaks within TEXT.  *Note* @w::.

‘@xml’
     Enter XML completely.  Pair with ‘@end xml’.  *Note* Raw Formatter
     Commands::.

‘@xref{NODE, [ENTRY], [NODE-TITLE], [INFO-FILE], [PRINTED-MANUAL]}’
     Make a reference that starts with 'See' in a printed manual.
     Follow command with a punctuation mark.  The first argument is
     mandatory, except for references to whole manuals.  To refer to
     another manual as a whole, the PRINTED-MANUAL and/or the INFO-FILE
     are the only required arguments.  *Note* @xref::.

‘@xrefautomaticsectiontitle ON-OFF’
     By default, use the section title instead of the node name in cross
     references, including in node headers in HTML. *Note* Three
     Arguments::.


File: texinfo.info,  Node: Command Contexts,  Next: Obsolete @-Commands,  Prev: Command List,  Up: @-Command Details

A.3 @-Command Contexts
======================

Here we describe approximately which @-commands can be used in which
contexts.  It is not exhaustive or meant to be a complete reference.
Discrepancies between the information here and the Texinfo processors
implementations are most likely to be resolved in favor of the
implementations.

   By “general text” below, we mean anything except sectioning and other
such outer-level document commands, such as ‘@section’, ‘@node’, and
‘@setfilename’.

   ‘@c’, ‘@comment’ and ‘@if ... @end if’ conditional commands may
appear anywhere (except the conditionals must still be on lines by
themselves).  ‘@caption’ and ‘@shortcaption’ may only appear in ‘@float’
but may contain general text.  ‘@footnote’ content likewise.

   @-commands with braces marking text (such as ‘@strong’, ‘@sc’,
‘@asis’) may contain raw formatter commands such as ‘@html’ but no other
block commands (other commands terminated by ‘@end’) and may not be
split across paragraphs, but may otherwise contain general text.

   In addition to the block command restriction, on ‘@center’, ‘@exdent’
and ‘@item’ in ‘@table’ lines, @-commands that makes only sense in a
paragraph are not accepted, such as ‘@indent’.

   In addition to the above, sectioning commands cannot contain
‘@anchor’, ‘@footnote’ or ‘@verb’.

   In addition to the above, remaining commands (‘@node’, ‘@anchor’,
‘@printindex’, ‘@ref’, ‘@math’, ‘@cindex’, ‘@url’, ‘@image’, and so on)
cannot contain cross-reference commands (‘@ref’, ‘@xref’, ‘@pxref’ and
‘@inforef’).

   For precise and complete information, we suggest looking into the
test suite in the sources, which exhaustively tries combinations.


File: texinfo.info,  Node: Obsolete @-Commands,  Prev: Command Contexts,  Up: @-Command Details

A.4 Obsolete @-Commands
=======================

Here are Texinfo @-commands which are obsolete or have been removed
completely.  This section is for historical purposes.

‘@refill’
     This command used to refill and indent the paragraph after all the
     other processing has been done.  It is no longer needed, since all
     formatters now automatically refill as needed, but you may still
     see it in the source to some manuals, as it does no harm.

‘@setcontentsaftertitlepage’
     In the past, the contents commands were sometimes placed at the end
     of the file, after any indices and just before the ‘@bye’, but we
     no longer recommend this.  This command could be used by a user
     printing a manual, to force the contents to be printed after the
     title page (after the ‘@end titlepage’ line) even if the
     ‘@contents’ command was at the end of the manual.

‘@setshortcontentsaftertitlepage’
     This placed the short table of contents after the ‘@end titlepage’
     command even if the ‘@shortcontents’ command was at the end.


File: texinfo.info,  Node: Tips,  Next: Sample Texinfo Files,  Prev: @-Command Details,  Up: Top

# /Appendix B Tips and Hints
*************************

Here are some tips for writing Texinfo documentation:

   • Write in the present tense, not in the past or the future.

   • Write actively!  For example, write "We recommend that ..." rather
     than "It is recommended that ...".

   • Use 70 or 72 as your fill column.  Longer lines are hard to read.

   • Include a copyright notice and copying permissions.

   • Design your manual so that it can be read sequentially, as far as
     possible.  People tire of flipping back and forth to find
     information that should be presented to them as they need it.

Index, Index, Index!
....................

Write many index entries, in different ways.  Readers like indices; they
are helpful and convenient.

   Although it is easiest to write index entries as you write the body
of the text, some people prefer to write entries afterwards.  In either
case, write an entry before the paragraph to which it applies.  This
way, an index entry points to the first page of a paragraph that is
split across pages.

   Here are more index-related hints we have found valuable:

   • Write each index entry differently, so each entry refers to a
     different place in the document.

   • Write index entries only where a topic is discussed significantly.
     For example, it is not useful to index "debugging information" in a
     chapter on reporting bugs.  Someone who wants to know about
     debugging information will certainly not find it in that chapter.

   • Consistently capitalize the first word of every concept index
     entry, or else consistently use lowercase.  Terse entries often
     call for lowercase; longer entries for capitalization.  Whichever
     case convention you use, please use one or the other consistently!
     Mixing the two styles looks bad.

   • Always capitalize or use uppercase for those words in an index for
     which this is proper, such as names of countries or acronyms.
     Always use the appropriate case for case-sensitive names, such as
     those in C or Lisp.

   • Write the indexing commands that refer to a whole section
     immediately after the section command, and write the indexing
     commands that refer to a paragraph before that paragraph.

     In the example that follows, a blank line comes after the index
     entry for "Leaping":

          @section The Dog and the Fox
          @cindex Jumping, in general
          @cindex Leaping

          @cindex Dog, lazy, jumped over
          @cindex Lazy dog jumped over
          @cindex Fox, jumps over dog
          @cindex Quick fox jumps over dog
          The quick brown fox jumps over the lazy dog.

     (Note that the example shows entries for the same concept that are
     written in different ways--‘Lazy dog’, and ‘Dog, lazy’--so readers
     can look up the concept in different ways.)

Blank Lines
...........

   • Insert a blank line between a sectioning command and the first
     following sentence or paragraph, or between the indexing commands
     associated with the sectioning command and the first following
     sentence or paragraph, as shown in the tip on indexing.  It makes
     the source easier to read.

   • Always insert a blank line before a ‘@table’ command and after an
     ‘@end table’ command; but never insert a blank line after an
     ‘@table’ command.

     For example,

          Types of fox:

          @table @samp
          @item Quick
          Jump over lazy dogs.

          @item Brown
          Also jump over lazy dogs.
          @end table

          @noindent
          On the other hand, ...

     Insert blank lines before and after ‘@itemize’ ... ‘@end itemize’
     and ‘@enumerate’ ... ‘@end enumerate’ in the same way.

Complete Phrases
................

Complete phrases are easier to read than ...

   • Write entries in an itemized list as complete sentences; or at
     least, as complete phrases.  Incomplete expressions ... awkward ...
     like this.

   • Write the prefatory sentence or phrase for a multi-item list or
     table as a complete expression.  Do not write "You can set:";
     instead, write "You can set these variables:".  The former
     expression sounds cut off.

Editions, Dates and Versions
............................

Include edition numbers, version numbers, and dates in the ‘@copying’
text (for people reading the Texinfo file, and for the legal copyright
in the output files).  Then use ‘@insertcopying’ in the ‘@titlepage’
section for people reading the printed output (*note* Short Sample::).

   It is easiest to handle such version information using ‘@set’ and
‘@value’.  *Note* @value Example::, and *note* GNU Sample Texts::.

Definition Commands
...................

Definition commands are ‘@deffn’, ‘@defun’, ‘@defmac’, and the like, and
enable you to write descriptions in a uniform format.

   • Write just one definition command for each entity you define with a
     definition command.  The automatic indexing feature creates an
     index entry that leads the reader to the definition.

   • Use ‘@table’ ... ‘@end table’ in an appendix that contains a
     summary of functions, not ‘@deffn’ or other definition commands.

Capitalization
..............

   • Capitalize "Texinfo"; it is a name.  Do not write the ‘x’ or ‘i’ in
     uppercase.

   • Capitalize "Info"; it is a name.

   • Write TeX using the ‘@TeX{}’ command.  Note the uppercase ‘T’ and
     ‘X’.  This command causes the formatters to typeset the name
     according to the wishes of Donald Knuth, who wrote TeX.  (Likewise
     ‘@LaTeX{}’ for LaTeX.)

Spaces
......

Do not use spaces to format a Texinfo file, except inside of ‘@example’
... ‘@end example’ and other literal environments and commands.

   For example, TeX fills the following:

        @kbd{C-x v}
        @kbd{M-x vc-next-action}
           Perform the next logical operation
           on the version-controlled file
           corresponding to the current buffer.

so it looks like this:

     'C-x v' 'M-x vc-next-action' Perform the next logical operation on
     the version-controlled file corresponding to the current buffer.

In this case, the text should be formatted with ‘@table’, ‘@item’, and
‘@itemx’, to create a table.

@code, @samp, @var, and ‘---’
.............................

   • Use ‘@code’ around Lisp symbols, including command names.  For
     example,

          The main function is @code{vc-next-action}, ...

   • Avoid putting letters such as ‘s’ immediately after an ‘@code’.
     Such letters look bad.

   • Use ‘@var’ around meta-variables.  Do not write angle brackets
     around them.

   • Use three hyphens in a row, ‘---’, to indicate a long dash.  The
     Info formatter reduces three hyphens to two; a long dash is typeset
     in other output formats.

Periods Outside of Quotes
.........................

Place periods and other punctuation marks _outside_ of quotations,
unless the punctuation is part of the quotation.  This practice goes
against some publishing conventions in the United States, but enables
the reader to distinguish between the contents of the quotation and the
whole passage.

   For example, you should write the following sentence with the period
outside the end quotation marks:

     Evidently, ‘au’ is an abbreviation for ``author''.

since ‘au’ does _not_ serve as an abbreviation for ‘author.’ (with a
period following the word).

Introducing New Terms
.....................

   • Introduce new terms so that a reader who does not know them can
     understand them from context; or write a definition for the term.

     For example, in the following, the terms "check in", "register" and
     "delta" are all appearing for the first time; the example sentence
     should be rewritten so they are understandable.

          The major function assists you in checking in a file to your
          version control system and registering successive sets of
          changes to it as deltas.

   • Use the ‘@dfn’ command around a word being introduced, to indicate
     that the reader should not expect to know the meaning already, and
     should expect to learn the meaning from this passage.

Program Invocation Nodes
........................

You can invoke programs such as Emacs, GCC, and ‘gawk’ from a shell.
The documentation for each program should contain a section that
describes this.  Unfortunately, if the node names and titles for these
sections are all different, they are difficult for users to find.

   So, there is a convention to name such sections with a phrase
beginning with the word 'Invoking', as in 'Invoking Emacs'; this way,
users can find the section easily.

ANSI C Syntax
.............

When you use ‘@example’ to describe a C function's calling conventions,
use the ANSI C syntax, like this:

     void dld_init (char *@var{path});

And in the subsequent discussion, refer to the argument values by
writing the same argument names, again highlighted with ‘@var’.

   Avoid the obsolete style that looks like this:

     #include <dld.h>

     dld_init (path)
       char *path;

   Also, it is best to avoid writing ‘#include’ above the declaration
just to indicate that the function is declared in a header file.  The
practice may give the misimpression that the ‘#include’ belongs near the
declaration of the function.  Either state explicitly which header file
holds the declaration or, better yet, name the header file used for a
group of functions at the beginning of the section that describes the
functions.

Node Length
...........

Keep nodes (sections) to a reasonable length, whatever reasonable might
be in the given context.  Don't hesitate to break up long nodes into
subnodes and have an extensive tree structure; that's what it's there
for.  Many times, readers will probably try to find a single specific
point in the manual, using search, indexing, or just plain guessing,
rather than reading the whole thing from beginning to end.

   You can use the ‘texi-elements-by-size’ utility to see a list of all
nodes (or sections) in the document, sorted by size (either lines or
words), to find candidates for splitting.  It's in the ‘util/’
subdirectory of the Texinfo sources.

Bad Examples
............

Here are several examples of bad writing to avoid:

   In this example, say, " ... you must ‘@dfn’{check in} the new
version."  That flows better.

     When you are done editing the file, you must perform a ‘@dfn’{check
     in}.

   In the following example, say, "... makes a unified interface such as
VC mode possible."

     SCCS, RCS and other version-control systems all perform similar
     functions in broadly similar ways (it is this resemblance which
     makes a unified control mode like this possible).

   And in this example, you should specify what 'it' refers to:

     If you are working with other people, it assists in coordinating
     everyone's changes so they do not step on each other.

And Finally ...
...............

   • Pronounce TeX as if the ‘X’ were a Greek 'chi', as the last sound
     in the name 'Bach'.  But pronounce Texinfo as in 'speck':
     "teckinfo".

   • Write notes for yourself at the very end of a Texinfo file after
     the ‘@bye’.  None of the processors process text after the ‘@bye’;
     it is as if the text were within ‘@ignore’ ... ‘@end ignore’.


File: texinfo.info,  Node: Sample Texinfo Files,  Next: Texinfo Mode,  Prev: Tips,  Up: Top

# /Appendix C Sample Texinfo Files
*******************************

This appendix includes texts to be used in GNU manuals.

* Menu:

* GNU Sample Texts::
* Verbatim Copying License::
* All-permissive Copying License::


File: texinfo.info,  Node: GNU Sample Texts,  Next: Verbatim Copying License,  Up: Sample Texinfo Files

C.1 GNU Sample Texts
====================

Following is a sample Texinfo document with the full texts that should
be used (adapted as necessary) in GNU manuals.

   As well as the legal texts, it also serves as a practical example of
how many elements in a GNU system can affect the manual.  If you're not
familiar with all these different elements, don't worry.  They're not
required and a perfectly good manual can be written without them.
They're included here nonetheless because many manuals do (or could)
benefit from them.

   *Note* Short Sample::, for a minimal example of a Texinfo file.

   Here are some notes on the example:

   • The ‘version.texi’ in the ‘@include’ command is maintained
     automatically by Automake (*note* (automake)Texinfo::).  It sets the
     ‘VERSION’, ‘UPDATED’ and ‘UPDATED-MONTH’ values used elsewhere.  If
     your distribution doesn't use Automake, but you do use Emacs, you
     may find the ‘time-stamp.el’ package helpful (*note* (emacs)Time
     Stamps::).

   • The ‘@syncodeindex’ command reflects the recommendation to use only
     one index where possible, to make it easier for readers to look up
     index entries.

   • The ‘@dircategory’ specify a category for the manual.  It is used
     for constructing the Info directory.  *Note* Directory Category::,
     which includes a variety of recommended category names.  *Note*
     Installing Dir Entries::.

   • The 'Invoking' node is a GNU standard to help users find the basic
     information about command-line usage of a given program.  *Note*
     (standards)Manual Structure Details::.

   • This sample shows how to includes the FDL in a manual using the
     ‘@include’ command.  The ‘fdl.texi’ file is available in the
     Texinfo and other GNU source distributions.  It is also available
     on the GNU website (at <https://www.gnu.org/licenses/fdl-1.3.html>)
     along with guidance for using it.

   • If the FSF is not the copyright holder, then use the appropriate
     name.

   • For documents that express your personal views, feelings or
     experiences, it is more appropriate to use a license permitting
     only verbatim copying, rather than the FDL.  *Note* Verbatim Copying
     License::.

   Here is the sample document:

\input texinfo   @c -*-texinfo-*-
@comment %**start of header
@include version.texi
@settitle GNU Sample @value{VERSION}
@syncodeindex pg cp
@comment %**end of header
@copying
This manual is for GNU Sample (version @value{VERSION}, @value{UPDATED}),
which is an example in the Texinfo documentation.

Copyright @copyright{} 2016 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@dircategory Texinfo documentation system
@direntry
* sample: (sample)Invoking sample.
@end direntry

@titlepage
@title GNU Sample
@subtitle for version @value{VERSION}, @value{UPDATED}
@author A.U. Thor (@email{bug-sample@@gnu.org})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top GNU Sample

This manual is for GNU Sample (version @value{VERSION}, @value{UPDATED}).

@menu
* Invoking sample::
* GNU Free Documentation License::
* Index::
@end menu

@node Invoking sample
@chapter Invoking sample

@pindex sample
@cindex invoking @command{sample}

This is a sample manual.  There is no sample program to
invoke, but if there were, you could see its basic usage
and command line options here.

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi

@node Index
@unnumbered Index

@printindex cp

@bye


File: texinfo.info,  Node: Verbatim Copying License,  Next: All-permissive Copying License,  Prev: GNU Sample Texts,  Up: Sample Texinfo Files

C.2 Verbatim Copying License
============================

For software manuals and other documentation, it is critical to use a
license permitting free redistribution and updating, so that when a free
program is changed, the documentation can be updated as well.

   On the other hand, for documents that express your personal views,
feelings or experiences, it is more appropriate to use a license
permitting only verbatim copying.

   Here is a sample text for such a license permitting verbatim copying
only.  This is just the license text itself.  For a complete sample
document, see the previous sections.

@copying
This document is a sample for allowing verbatim copying only.

Copyright @copyright{} 2016 Free Software Foundation, Inc.

@quotation
Permission is granted to make and distribute verbatim copies
of this entire document without royalty provided the
copyright notice and this permission notice are preserved.
@end quotation
@end copying


File: texinfo.info,  Node: All-permissive Copying License,  Prev: Verbatim Copying License,  Up: Sample Texinfo Files

C.3 All-permissive Copying License
==================================

For software manuals and other documentation, it is important to use a
license permitting free redistribution and updating, so that when a free
program is changed, the documentation can be updated as well.

   On the other hand, for small supporting files, short manuals (under
300 lines long) and rough documentation (README files, INSTALL files,
etc.), the full FDL would be overkill.  They can use a simple
all-permissive license.

   Here is a sample text for such an all-permissive license.  This is
just the license text itself.  For a complete sample document, see the
previous sections.

     Copyright @copyright{} 2016 Free Software Foundation, Inc.

     Copying and distribution of this file, with or without modification,
     are permitted in any medium without royalty provided the copyright
     notice and this notice are preserved.


File: texinfo.info,  Node: Texinfo Mode,  Next: Global Document Commands,  Prev: Sample Texinfo Files,  Up: Top

# /Appendix D Using Texinfo Mode
*****************************

You may edit a Texinfo file with any text editor you choose.  A Texinfo
file is no different from any other ASCII file.  However, GNU Emacs
comes with a special mode, called Texinfo mode, that provides Emacs
commands and tools to help ease your work.

* Menu:

* Texinfo Mode Overview::      How Texinfo mode can help you.
* Emacs Editing::              Texinfo mode adds to GNU Emacs' general purpose
                               editing features.
* Inserting::                  How to insert frequently used @-commands.
* Showing the Structure::      How to show the structure of a file.
* Updating Nodes and Menus::   How to update or create new nodes and menus.
* Info Formatting::            How to format for Info.
* Printing with Emacs::        How to format with TeX and print with Emacs.
* Texinfo Mode Summary::       Summary of all the Texinfo mode commands.
* Formatting Info files::      Processing directly Info files.
* Catching Mistakes::          How to find mistakes in formatting.
* Batch Formatting::           How to format for Info in Emacs batch mode.


File: texinfo.info,  Node: Texinfo Mode Overview,  Next: Emacs Editing,  Up: Texinfo Mode

D.1 Texinfo Mode Overview
=========================

Texinfo mode provides special features for working with Texinfo files.
You can:

   • Insert frequently used @-commands.

   • Automatically create ‘@node’ lines.

   • Show the structure of a Texinfo source file.

   • Automatically create or update the 'Next', 'Previous', and 'Up'
     pointers of a node.

   • Automatically create or update menus.

   • Automatically create a master menu.

   • Format a part or all of a file for Info.

   • Typeset and print part or all of a file.

   Perhaps the two most helpful features are those for inserting
frequently used @-commands and for creating node pointers and menus.


File: texinfo.info,  Node: Emacs Editing,  Next: Inserting,  Prev: Texinfo Mode Overview,  Up: Texinfo Mode

D.2 The Usual GNU Emacs Editing Commands
========================================

In most cases, the usual Text mode commands work the same in Texinfo
mode as they do in Text mode.  Texinfo mode adds new editing commands
and tools to GNU Emacs' general purpose editing features.  The major
difference concerns filling.  In Texinfo mode, the paragraph separation
variable and syntax table are redefined so that Texinfo commands that
should be on lines of their own are not inadvertently included in
paragraphs.  Thus, the ‘M-q’ (‘fill-paragraph’) command will refill a
paragraph but not mix an indexing command on a line adjacent to it into
the paragraph.

   In addition, Texinfo mode sets the ‘page-delimiter’ variable to the
value of ‘texinfo-chapter-level-regexp’; by default, this is a regular
expression matching the commands for chapters and their equivalents,
such as appendices.  With this value for the page delimiter, you can
jump from chapter title to chapter title with the ‘C-x ]’
(‘forward-page’) and ‘C-x [’ (‘backward-page’) commands and narrow to a
chapter with the ‘C-x n p’ (‘narrow-to-page’) command.  (*Note*
(emacs)Pages::, for details about the page commands.)

   GNU Emacs automatically enters Texinfo mode when you visit a file
with a ‘.texinfo’, ‘.texi’ or ‘.txi’ extension.  Also, Emacs switches to
Texinfo mode when you visit a file that has ‘-*-texinfo-*-’ in its first
line.  If ever you are in another mode and wish to switch to Texinfo
mode, type ‘M-x texinfo-mode’.

   Like all other Emacs features, you can customize or enhance Texinfo
mode as you wish.  In particular, the keybindings are very easy to
change.  The keybindings described here are the default or standard
ones.


File: texinfo.info,  Node: Inserting,  Next: Showing the Structure,  Prev: Emacs Editing,  Up: Texinfo Mode

D.3 Inserting Frequently Used Commands
======================================

Texinfo mode provides commands to insert various frequently used
@-commands into the buffer.  You can use these commands to save
keystrokes.

   The insert commands are invoked by typing ‘C-c’ twice and then the
first letter of the @-command:

‘C-c C-c c’
‘M-x texinfo-insert-@code’
     Insert ‘@code{}’ and put the cursor between the braces.

‘C-c C-c d’
‘M-x texinfo-insert-@dfn’
     Insert ‘@dfn{}’ and put the cursor between the braces.

‘C-c C-c e’
‘M-x texinfo-insert-@end’
     Insert ‘@end’ and attempt to insert the correct following word,
     such as ‘example’ or ‘table’.  (This command does not handle nested
     lists correctly, but inserts the word appropriate to the
     immediately preceding list.)

‘C-c C-c i’
‘M-x texinfo-insert-@item’
     Insert ‘@item’ and put the cursor at the beginning of the next
     line.

‘C-c C-c k’
‘M-x texinfo-insert-@kbd’
     Insert ‘@kbd{}’ and put the cursor between the braces.

‘C-c C-c n’
‘M-x texinfo-insert-@node’
     Insert ‘@node’ and a comment line listing the sequence for the
     'Next', 'Previous', and 'Up' nodes.  Leave point after the ‘@node’.

‘C-c C-c o’
‘M-x texinfo-insert-@noindent’
     Insert ‘@noindent’ and put the cursor at the beginning of the next
     line.

‘C-c C-c r’
‘M-x texinfo-insert-dwim-@ref’
     This function and binding were added in Emacs 27.1.  Inserts one of
     ‘@pxref{}’, ‘@xref{}’, or ‘@ref{}’ based on the text around point;
     calling it near an unclosed preceding open parenthesis results in
     ‘@pxref{}’, at the beginning of a sentence or at ‘(point-min)’
     yields ‘@xref{}’, any other location (including inside a word),
     will result in ‘@ref{}’.  A numeric argument says how many words
     the braces should surround.  Puts the cursor between the braces.

‘C-c C-c s’
‘M-x texinfo-insert-@samp’
     Insert ‘@samp{}’ and put the cursor between the braces.

‘C-c C-c t’
‘M-x texinfo-insert-@table’
     Insert ‘@table’ followed by a <SPC> and leave the cursor after the
     <SPC>.

‘C-c C-c v’
‘M-x texinfo-insert-@var’
     Insert ‘@var{}’ and put the cursor between the braces.

‘C-c C-c x’
‘M-x texinfo-insert-@example’
     Insert ‘@example’ and put the cursor at the beginning of the next
     line.

‘C-c C-c {’
‘M-x texinfo-insert-braces’
     Insert ‘{}’ and put the cursor between the braces.

‘C-c }’
‘C-c ]’
‘M-x up-list’
     Move from between a pair of braces forward past the closing brace.
     Typing ‘C-c ]’ is easier than typing ‘C-c }’, which is, however,
     more mnemonic; hence the two keybindings.  (Also, you can move out
     from between braces by typing ‘C-f’.)

   To put a command such as ‘@code{...}’ around an _existing_ word,
position the cursor in front of the word and type ‘C-u 1 C-c C-c c’.
This makes it easy to edit existing plain text.  The value of the prefix
argument tells Emacs how many words following point to include between
braces--‘1’ for one word, ‘2’ for two words, and so on.  Use a negative
argument to enclose the previous word or words.  If you do not specify a
prefix argument, Emacs inserts the @-command string and positions the
cursor between the braces.  This feature works only for those @-commands
that operate on a word or words within one line, such as ‘@kbd’ and
‘@var’.

   This set of insert commands was created after analyzing the frequency
with which different @-commands are used in the ‘GNU Emacs Manual’ and
the ‘GDB Manual’.  If you wish to add your own insert commands, you can
bind a keyboard macro to a key, use abbreviations, or extend the code in
‘texinfo.el’.

   ‘C-c C-c C-d’ (‘texinfo-start-menu-description’) is an insert command
that works differently from the other insert commands.  It inserts a
node's section or chapter title in the space for the description in a
menu entry line.  (A menu entry has three parts, the entry name, the
node name, and the description.  Only the node name is required, but a
description helps explain what the node is about.  *Note* The Parts of a
Menu: Menu Parts.)

   To use ‘texinfo-start-menu-description’, position point in a menu
entry line and type ‘C-c C-c C-d’.  The command looks for and copies the
title that goes with the node name, and inserts the title as a
description; it positions point at the beginning of the inserted text so
you can edit it.  The function does not insert the title if the menu
entry line already contains a description.

   This command is only an aid to writing descriptions; it does not do
the whole job.  You must edit the inserted text since a title tends to
use the same words as a node name but a useful description uses
different words.


File: texinfo.info,  Node: Showing the Structure,  Next: Updating Nodes and Menus,  Prev: Inserting,  Up: Texinfo Mode

D.4 Showing the Sectioning Structure of a File
==============================================

You can show the sectioning structure of a Texinfo file by using the
‘C-c C-s’ command (‘texinfo-show-structure’).  This command lists the
lines that begin with the @-commands for ‘@chapter’, ‘@section’, and the
like.  It constructs what amounts to a table of contents.  These lines
are displayed in another buffer called the ‘*Occur*’ buffer.  In that
buffer, you can position the cursor over one of the lines and use the
‘C-c C-c’ command (‘occur-mode-goto-occurrence’), to jump to the
corresponding spot in the Texinfo file.

‘C-c C-s’
‘M-x texinfo-show-structure’
     Show the ‘@chapter’, ‘@section’, and such lines of a Texinfo file.

‘C-c C-c’
‘M-x occur-mode-goto-occurrence’
     Go to the line in the Texinfo file corresponding to the line under
     the cursor in the ‘*Occur*’ buffer.

   If you call ‘texinfo-show-structure’ with a prefix argument by typing
‘C-u C-c C-s’, it will list not only those lines with the @-commands for
‘@chapter’, ‘@section’, and the like, but also the ‘@node’ lines.  You
can use ‘texinfo-show-structure’ with a prefix argument to check whether
the 'Next', 'Previous', and 'Up' pointers of an ‘@node’ line are
correct.

   Often, when you are working on a manual, you will be interested only
in the structure of the current chapter.  In this case, you can mark off
the region of the buffer that you are interested in by using the ‘C-x n
n’ (‘narrow-to-region’) command and ‘texinfo-show-structure’ will work
on only that region.  To see the whole buffer again, use ‘C-x n w’
(‘widen’).  (*Note* (emacs)Narrowing::, for more information about the
narrowing commands.)

   In addition to providing the ‘texinfo-show-structure’ command,
Texinfo mode sets the value of the page delimiter variable to match the
chapter-level @-commands.  This enables you to use the ‘C-x ]’
(‘forward-page’) and ‘C-x [’ (‘backward-page’) commands to move forward
and backward by chapter, and to use the ‘C-x n p’ (‘narrow-to-page’)
command to narrow to a chapter.  *Note* (emacs)Pages::, for more
information about the page commands.

* Menu:

* Using texinfo-show-structure::  How to use ‘texinfo-show-structure’.
* Using occur::                How to list all lines containing a pattern.


File: texinfo.info,  Node: Using texinfo-show-structure,  Next: Using occur,  Up: Showing the Structure

D.4.1 Using ‘texinfo-show-structure’
------------------------------------

It is not always easy to keep track of the nodes, chapters, sections,
and subsections of a Texinfo file.  This is especially true if you are
revising or adding to a Texinfo file that someone else has written.

   In GNU Emacs, in Texinfo mode, the ‘texinfo-show-structure’ command
lists all the lines that begin with the @-commands that specify the
structure: ‘@chapter’, ‘@section’, ‘@appendix’, and so on.  With an
argument (‘C-u’ as prefix argument, if interactive), the command also
shows the ‘@node’ lines.  The ‘texinfo-show-structure’ command is bound
to ‘C-c C-s’ in Texinfo mode, by default.

   The lines are displayed in a buffer called the ‘*Occur*’ buffer,
indented by hierarchical level.  For example, here is a part of what was
produced by running ‘texinfo-show-structure’ on this manual:

     Lines matching "^@\\(chapter \\|sect\\|subs\\|subh\\|
     unnum\\|major\\|chapheading \\|heading \\|appendix\\)"
     in buffer texinfo.texi.
     ...
     4177:@chapter Nodes
     4198:    @heading Two Paths
     4231:    @section Node and Menu Illustration
     4337:    @section The @code{@@node} Command
     4393:        @subheading Choosing Node and Pointer Names
     4417:        @subsection How to Write a @code{@@node} Line
     4469:        @subsection @code{@@node} Line Tips
     ...

   This says that lines 4337, 4393, and 4417 of ‘texinfo.texi’ begin
with the ‘@section’, ‘@subheading’, and ‘@subsection’ commands
respectively.  If you move your cursor into the ‘*Occur*’ window, you
can position the cursor over one of the lines and use the ‘C-c C-c’
command (‘occur-mode-goto-occurrence’), to jump to the corresponding
spot in the Texinfo file.  *Note* Using Occur: (emacs)Other Repeating
Search, for more information about ‘occur-mode-goto-occurrence’.

   The first line in the ‘*Occur*’ window describes the “regular
expression” specified by TEXINFO-HEADING-PATTERN.  This regular
expression is the pattern that ‘texinfo-show-structure’ looks for.
*Note* Using Regular Expressions: (emacs)Regexps, for more information.

   When you invoke the ‘texinfo-show-structure’ command, Emacs will
display the structure of the whole buffer.  If you want to see the
structure of just a part of the buffer, of one chapter, for example, use
the ‘C-x n n’ (‘narrow-to-region’) command to mark the region.  (*Note*
(emacs)Narrowing::.)  This is how the example used above was generated.
(To see the whole buffer again, use ‘C-x n w’ (‘widen’).)

   If you call ‘texinfo-show-structure’ with a prefix argument by typing
‘C-u C-c C-s’, it will list lines beginning with ‘@node’ as well as the
lines beginning with the @-sign commands for ‘@chapter’, ‘@section’, and
the like.

   You can remind yourself of the structure of a Texinfo file by looking
at the list in the ‘*Occur*’ window; and if you have mis-named a node or
left out a section, you can correct the mistake.


File: texinfo.info,  Node: Using occur,  Prev: Using texinfo-show-structure,  Up: Showing the Structure

D.4.2 Using ‘occur’
-------------------

Sometimes the ‘texinfo-show-structure’ command produces too much
information.  Perhaps you want to remind yourself of the overall
structure of a Texinfo file, and are overwhelmed by the detailed list
produced by ‘texinfo-show-structure’.  In this case, you can use the
‘occur’ command directly.  To do this, type:

     M-x occur

and then, when prompted, type a “regexp”, a regular expression for the
pattern you want to match.  (*Note* Regular Expressions: (emacs)Regexps.)
The ‘occur’ command works from the current location of the cursor in the
buffer to the end of the buffer.  If you want to run ‘occur’ on the
whole buffer, place the cursor at the beginning of the buffer.

   For example, to see all the lines that contain the word ‘@chapter’ in
them, just type ‘@chapter’.  This will produce a list of the chapters.
It will also list all the sentences with ‘@chapter’ in the middle of the
line.

   If you want to see only those lines that start with the word
‘@chapter’, type ‘^@chapter’ when prompted by ‘occur’.  If you want to
see all the lines that end with a word or phrase, end the last word with
a ‘$’; for example, ‘catching mistakes$’.  This can be helpful when you
want to see all the nodes that are part of the same chapter or section
and therefore have the same 'Up' pointer.

   *Note* Using Occur: (emacs)Other Repeating Search, for more
information.


File: texinfo.info,  Node: Updating Nodes and Menus,  Next: Info Formatting,  Prev: Showing the Structure,  Up: Texinfo Mode

D.5 Updating Nodes and Menus
============================

The ‘texi2any’ command will create an Info file for a hierarchically
organized Texinfo file that lacks 'Next', 'Previous' and 'Up' pointers
(*note* Writing a Node::).  Thus, in general, there is no need for
explicit 'Next', 'Previous', and 'Up' pointers.  In this setting, menus
will be added automatically for nodes without an explicit menu.  (*Note*
Generic Translator texi2any::, for more information about ‘texi2any’.)

   If you still want explicit pointers, Texinfo mode provides commands
for automatically creating or updating menus and node pointers.  The
commands are called "update" commands because their most frequent use is
for updating a Texinfo file after you have worked on it; but you can use
them to insert the 'Next', 'Previous', and 'Up' pointers into an ‘@node’
line that has none and to create menus in a file that has none.

* Menu:

* Updating Commands::          Five major updating commands.
* Updating Requirements::      How to structure a Texinfo file for using the
                               updating command.
* Update Multiple Files::      How to create and update nodes and menus when
                               using included files.
* Include Files Requirements:: How to structure outer file and include files
                               for the updating command.
* Other Updating Commands::    How to indent descriptions, insert missing nodes
                               lines, and update nodes in sequence.


File: texinfo.info,  Node: Updating Commands,  Next: Updating Requirements,  Up: Updating Nodes and Menus

D.5.1 The Updating Commands
---------------------------

You can use the updating commands to:

   • insert or update the 'Next', 'Previous', and 'Up' pointers of a
     node,

   • insert or update the menu for a section, and

   • create a master menu for a Texinfo source file.

   You can also use the commands to update all the nodes and menus in a
region or in a whole Texinfo file.

   The updating commands work only with conventional Texinfo files,
which are structured hierarchically like books.  In such files, a
structuring command line must follow closely after each ‘@node’ line,
except for the 'Top' ‘@node’ line.  (A “structuring command line” is a
line beginning with ‘@chapter’, ‘@section’, or other similar command.)

   You can write the structuring command line on the line that follows
immediately after an ‘@node’ line or else on the line that follows after
a single ‘@comment’ line or a single ‘@ifinfo’ line.  You cannot
interpose more than one line between the ‘@node’ line and the
structuring command line; and you may interpose only a ‘@comment’ line
or an ‘@ifinfo’ line.

   Commands which work on a whole buffer require that the 'Top' node be
followed by a node with a ‘@chapter’ or equivalent-level command.  The
menu updating commands will not create a main or master menu for a
Texinfo file that has only ‘@chapter’-level nodes!  The menu updating
commands only create menus _within_ nodes for lower level nodes.  To
create a menu of chapters, you must provide a 'Top' node.

   The menu updating commands remove menu entries that refer to other
Info files since they do not refer to nodes within the current buffer.
This is a deficiency.  Rather than use menu entries, you can use cross
references to refer to other Info files.  None of the updating commands
affect cross-references.

   Texinfo mode has five updating commands that are used most often: two
are for updating the node pointers or menu of a single node (or a
region); two are for updating every node pointer and menu in a file; and
one, the ‘texinfo-master-menu’ command, is for creating a master menu
for a complete file, and optionally, for updating every node and menu in
the whole Texinfo file.

   The ‘texinfo-master-menu’ command is the primary command:

‘C-c C-u m’
‘M-x texinfo-master-menu’
     Create or update a master menu that includes all the other menus
     (incorporating the descriptions from pre-existing menus, if any).

     With an argument (prefix argument, ‘C-u,’ if interactive), first
     create or update all the nodes and all the regular menus in the
     buffer before constructing the master menu.  (*Note* The Top Node
     and Master Menu: The Top Node, for more about a master menu.)

     For ‘texinfo-master-menu’ to work, the Texinfo file must have a
     'Top' node and at least one subsequent node.

     After extensively editing a Texinfo file, you can type the
     following:

          C-u M-x texinfo-master-menu
     or
          C-u C-c C-u m

     This updates all the nodes and menus completely and all at once.

   The other major updating commands do smaller jobs and are designed
for the person who updates nodes and menus as he or she writes a Texinfo
file.

   The commands are:

‘C-c C-u C-n’
‘M-x texinfo-update-node’
     Insert the 'Next', 'Previous', and 'Up' pointers for the node that
     point is within (i.e., for the ‘@node’ line preceding point).  If
     the ‘@node’ line has pre-existing 'Next', 'Previous', or 'Up'
     pointers in it, the old pointers are removed and new ones inserted.
     With an argument (prefix argument, ‘C-u’, if interactive), this
     command updates all ‘@node’ lines in the region (which is the text
     between point and mark).

‘C-c C-u C-m’
‘M-x texinfo-make-menu’
     Create or update the menu in the node that point is within.  With
     an argument (‘C-u’ as prefix argument, if interactive), the command
     makes or updates menus for the nodes which are either within or a
     part of the region.

     Whenever ‘texinfo-make-menu’ updates an existing menu, the
     descriptions from that menu are incorporated into the new menu.
     This is done by copying descriptions from the existing menu to the
     entries in the new menu that have the same node names.  If the node
     names are different, the descriptions are not copied to the new
     menu.

‘C-c C-u C-e’
‘M-x texinfo-every-node-update’
     Insert or update the 'Next', 'Previous', and 'Up' pointers for
     every node in the buffer.

‘C-c C-u C-a’
‘M-x texinfo-all-menus-update’
     Create or update all the menus in the buffer.  With an argument
     (‘C-u’ as prefix argument, if interactive), first insert or update
     all the node pointers before working on the menus.

     If a master menu exists, the ‘texinfo-all-menus-update’ command
     updates it; but the command does not create a new master menu if
     none already exists.  (Use the ‘texinfo-master-menu’ command for
     that.)

     When working on a document that does not merit a master menu, you
     can type the following:

          C-u C-c C-u C-a
     or
          C-u M-x texinfo-all-menus-update

     This updates all the nodes and menus.

   The ‘texinfo-column-for-description’ variable specifies the column to
which menu descriptions are indented.  By default, the value is 32
although it can be useful to reduce it to as low as 24.  You can set the
variable via customization (*note* (emacs)Customization::) or with the
‘M-x set-variable’ command (*note* Examining and Setting Variables:
(emacs)Examining.).

   Also, the ‘texinfo-indent-menu-description’ command may be used to
indent existing menu descriptions to a specified column.  Finally, if
you wish, you can use the ‘texinfo-insert-node-lines’ command to insert
missing ‘@node’ lines into a file.  In particular, you can ignore
‘@node’ lines altogether in your first draft and then use the
‘texinfo-insert-node-lines’ command to create ‘@node’ lines for you.
However, we do not recommend this practice.  It is better to name the
node itself at the same time that you write a segment so you can easily
make cross-references.  Useful cross-references are an especially
important feature of a good Texinfo manual.  (*Note* Other Updating
Commands::, for more information.)


File: texinfo.info,  Node: Updating Requirements,  Next: Update Multiple Files,  Prev: Updating Commands,  Up: Updating Nodes and Menus

D.5.2 Updating Requirements
---------------------------

To use the updating commands, you must organize the Texinfo file
hierarchically with chapters, sections, subsections, and the like.  When
you construct the hierarchy of the manual, do not 'jump down' more than
one level at a time: you can follow the 'Top' node with a chapter, but
not with a section; you can follow a chapter with a section, but not
with a subsection.  However, you may 'jump up' any number of levels at
one time--for example, from a subsection to a chapter.

   Each ‘@node’ line, with the exception of the line for the 'Top' node,
must be followed by a line with a structuring command such as
‘@chapter’, ‘@section’, or ‘@unnumberedsubsec’.

   Each ‘@node’ line/structuring-command line combination must look
either like this:

     @node     Comments,  Minimum, Conventions, Overview
     @comment  node-name, next,    previous,    up
     @section Comments

   or like this (without the ‘@comment’ line):

     @node Comments, Minimum, Conventions, Overview
     @section Comments

   or like this (without the explicit node pointers):

     @node Comments
     @section Comments

In this example, 'Comments' is the name of both the node and the
section.  The next node is called 'Minimum' and the previous node is
called 'Conventions'.  The 'Comments' section is within the 'Overview'
node, which is specified by the 'Up' pointer.

   If a file has a 'Top' node, it must be called ‘top’ or ‘Top’ and be
the first node in the file.

   The menu updating commands create a menu of sections within a
chapter, a menu of subsections within a section, and so on.  This means
that you must have a 'Top' node if you want a menu of chapters.


File: texinfo.info,  Node: Update Multiple Files,  Next: Include Files Requirements,  Prev: Updating Requirements,  Up: Updating Nodes and Menus

D.5.3 Update Outer File and Include Files
-----------------------------------------

GNU Emacs Texinfo mode provides the ‘texinfo-multiple-files-update’
command.  This command creates or updates 'Next', 'Previous', and 'Up'
pointers of included files as well as those in the outer or overall
Texinfo file, and it creates or updates a main menu in the outer file.
Depending on whether you call it with optional arguments, the command
updates only the pointers in the first ‘@node’ line of the included
files or all of them.

   With ‘C-u’ as a prefix argument, create and insert a master menu in
the outer file.  With a numeric prefix argument, such as ‘C-u 2’, first
update all the menus and all the 'Next', 'Previous', and 'Up' pointers
of all the included files before creating and inserting a master menu in
the outer file.

   In more details:

‘M-x texinfo-multiple-files-update’
     Called without any arguments:

        − Create or update the 'Next', 'Previous', and 'Up' pointers of
          the first ‘@node’ line in each file included in an outer or
          overall Texinfo file.

        − Create or update the 'Top' level node pointers of the outer or
          overall file.

        − Create or update a main menu in the outer file.

‘C-u M-x texinfo-multiple-files-update’
     Called with ‘C-u’ as a prefix argument:

        − Create or update pointers in the first ‘@node’ line in each
          included file.

        − Create or update the 'Top' level node pointers of the outer
          file.

        − Create and insert a master menu in the outer file.  The master
          menu is made from all the menus in all the included files.

‘C-u 8 M-x texinfo-multiple-files-update’
     Called with a numeric prefix argument, such as ‘C-u 8’:

        − Create or update _all_ the 'Next', 'Previous', and 'Up'
          pointers of all the included files.

        − Create or update _all_ the menus of all the included files.

        − Create or update the 'Top' level node pointers of the outer or
          overall file.

        − And then create a master menu in the outer file.  This is
          similar to invoking ‘texinfo-master-menu’ with an argument
          when you are working with just one file.

   Note the use of the prefix argument in interactive use: with a
regular prefix argument, just ‘C-u’, the ‘texinfo-multiple-files-update’
command inserts a master menu; with a numeric prefix argument, such as
‘C-u 8’, the command updates _every_ pointer and menu in _all_ the files
and then inserts a master menu.


File: texinfo.info,  Node: Include Files Requirements,  Next: Other Updating Commands,  Prev: Update Multiple Files,  Up: Updating Nodes and Menus

D.5.4 Include Files Requirements
--------------------------------

If you plan to use the ‘texinfo-multiple-files-update’ command, the
outer Texinfo file that lists included files within it should contain
nothing but the beginning and end parts of a Texinfo file, and a number
of ‘@include’ commands listing the included files.  It should not even
include indices, which should be listed in an included file of their
own.

   Moreover, each of the included files must contain exactly one highest
level node (conventionally, ‘@chapter’ or equivalent), and this node
must be the first node in the included file.  Furthermore, each of these
highest level nodes in each included file must be at the same
hierarchical level in the file structure.  Usually, each is a
‘@chapter’, an ‘@appendix’, or an ‘@unnumbered’ node.  Thus, normally,
each included file contains one, and only one, chapter or
equivalent-level node.

   The outer file should contain only _one_ node, the 'Top' node.  It
should _not_ contain any nodes besides the single 'Top' node.  The
‘texinfo-multiple-files-update’ command will not process them.


File: texinfo.info,  Node: Other Updating Commands,  Prev: Include Files Requirements,  Up: Updating Nodes and Menus

D.5.5 Other Updating Commands
-----------------------------

In addition to the major updating commands, Texinfo mode possesses
several less frequently used updating commands:

‘M-x texinfo-insert-node-lines’
     Insert ‘@node’ lines before the ‘@chapter’, ‘@section’, and other
     sectioning commands wherever they are missing throughout a region
     in a Texinfo file.

     With an argument (‘C-u’ as prefix argument, if interactive), the
     command ‘texinfo-insert-node-lines’ not only inserts ‘@node’ lines
     but also inserts the chapter or section titles as the names of the
     corresponding nodes.  In addition, it inserts the titles as node
     names in pre-existing ‘@node’ lines that lack names.  Since node
     names should be more concise than section or chapter titles, you
     must manually edit node names so inserted.

     For example, the following marks a whole buffer as a region and
     inserts ‘@node’ lines and titles throughout:

          C-x h C-u M-x texinfo-insert-node-lines

     This command inserts titles as node names in ‘@node’ lines; the
     ‘texinfo-start-menu-description’ command (*note* Inserting
     Frequently Used Commands: Inserting.) inserts titles as
     descriptions in menu entries, a different action.  However, in both
     cases, you need to edit the inserted text.

‘M-x texinfo-indent-menu-description’
     Indent every description in the menu following point to the
     specified column.  You can use this command to give yourself more
     space for descriptions.  With an argument (‘C-u’ as prefix
     argument, if interactive), the ‘texinfo-indent-menu-description’
     command indents every description in every menu in the region.
     However, this command does not indent the second and subsequent
     lines of a multi-line description.

‘M-x texinfo-sequential-node-update’
     Insert the names of the nodes immediately following and preceding
     the current node as the 'Next' or 'Previous' pointers regardless of
     those nodes' hierarchical level.  This means that the 'Next' node
     of a subsection may well be the next chapter.  Sequentially ordered
     nodes are useful for novels and other documents that you read
     through sequentially.  (However, in Info, the ‘g *’ command lets
     you look through the file sequentially, so sequentially ordered
     nodes are not strictly necessary.)  With an argument (prefix
     argument, if interactive), the ‘texinfo-sequential-node-update’
     command sequentially updates all the nodes in the region.


File: texinfo.info,  Node: Info Formatting,  Next: Printing with Emacs,  Prev: Updating Nodes and Menus,  Up: Texinfo Mode

D.6 Formatting for Info
=======================

Texinfo mode provides several commands for formatting part or all of a
Texinfo file for Info.

* Menu:

* texi2any in Emacs::          How to run ‘texi2any’ from Emacs.
* texinfo-format commands::    Two Info formatting commands written in Emacs
                               Lisp are an alternative to ‘texi2any’.


File: texinfo.info,  Node: texi2any in Emacs,  Next: texinfo-format commands,  Up: Info Formatting

D.6.1 Running ‘texi2any’/‘makeinfo’ Within Emacs
------------------------------------------------

The ‘texi2any’ program provides better error messages than either of the
Emacs formatting commands.  We recommend it.  The ‘texi2any’ program is
independent of Emacs.

   You can run ‘texi2any’ (or ‘makeinfo’) in GNU Emacs Texinfo mode by
using either the ‘makeinfo-region’ or the ‘makeinfo-buffer’ commands.
In Texinfo mode, the commands are bound to ‘C-c C-m C-r’ and ‘C-c C-m
C-b’ by default.

‘C-c C-m C-r’
‘M-x makeinfo-region’
     Format the current region for Info.

‘C-c C-m C-b’
‘M-x makeinfo-buffer’
     Format the current buffer for Info.

   When you invoke ‘makeinfo-region’ the output goes to a temporary
buffer.  When you invoke ‘makeinfo-buffer’ output goes to the file set
with ‘@setfilename’ (*note* @setfilename::).

   The Emacs ‘makeinfo-region’ and ‘makeinfo-buffer’ commands run the
‘texi2any’ program in a temporary shell buffer.  If ‘texi2any’ finds any
errors, Emacs displays the error messages in the temporary buffer.

   You can parse the error messages by typing ‘C-x `’ (‘next-error’).
This causes Emacs to go to and position the cursor on the line in the
Texinfo source that ‘texi2any’ thinks caused the error.  *Note* Running
‘make’ or Compilers Generally: (emacs)Compilation, for more information
about using the ‘next-error’ command.

   In addition, you can kill the shell in which the ‘texi2any’ command
is running or make the shell buffer display its most recent output.

‘C-c C-m C-k’
‘M-x makeinfo-kill-job’
     Kill the current running ‘texi2any’ (or ‘makeinfo’) job (from
     ‘makeinfo-region’ or ‘makeinfo-buffer’).

‘C-c C-m C-l’
‘M-x makeinfo-recenter-output-buffer’
     Redisplay the ‘texi2any’ shell buffer to display its most recent
     output.

(Note that the parallel commands for killing and recentering a TeX job
are ‘C-c C-t C-k’ and ‘C-c C-t C-l’.  *Note* Texinfo Mode Printing::.)

   You can specify options for ‘texi2any’ by setting the
‘makeinfo-options’ variable with either the ‘M-x customize’ or the ‘M-x
set-variable’ command, or by setting the variable in your ‘.emacs’
initialization file.

   For example, you could write the following in your ‘.emacs’ file:

     (setq makeinfo-options
          "--paragraph-indent=0 --no-split
           --fill-column=70 --verbose")

For more information, see
*note* Easy Customization Interface: (emacs)Easy Customization,
*note* Examining and Setting Variables: (emacs)Examining,
*note* (emacs)Init File::, and
*note* texi2any Options::.


File: texinfo.info,  Node: texinfo-format commands,  Prev: texi2any in Emacs,  Up: Info Formatting

D.6.2 The ‘texinfo-format...’ Commands
--------------------------------------

In GNU Emacs in Texinfo mode, you can format part or all of a Texinfo
file with the ‘texinfo-format-region’ command.  This formats the current
region and displays the formatted text in a temporary buffer called
‘*Info Region*’.

   Similarly, you can format a buffer with the ‘texinfo-format-buffer’
command.  This command creates a new buffer and generates the Info file
in it.  Typing ‘C-x C-s’ will save the Info file under the name
specified by the ‘@setfilename’ line which must be near the beginning of
the Texinfo file.

‘C-c C-e C-r’
‘texinfo-format-region’
     Format the current region for Info.

‘C-c C-e C-b’
‘texinfo-format-buffer’
     Format the current buffer for Info.

   The ‘texinfo-format-region’ and ‘texinfo-format-buffer’ commands
provide you with some error checking, and other functions can provide
you with further help in finding formatting errors.  These procedures
are described in an appendix; see *note* Catching Mistakes::.  However,
the ‘texi2any’ program provides better error checking (*note* texi2any in
Emacs::).

   A peculiarity of the ‘texinfo-format-buffer’ and
‘texinfo-format-region’ commands is that they do not indent (nor fill)
paragraphs that contain ‘@w’ or ‘@*’ commands.


File: texinfo.info,  Node: Printing with Emacs,  Next: Texinfo Mode Summary,  Prev: Info Formatting,  Up: Texinfo Mode

D.7 Formatting and Printing with Emacs
======================================

GNU Emacs can be used for formatting and printing with TeX, from an
Emacs Shell.  Texinfo mode also provides predefined key commands for
formatting and printing.

* Menu:

* Texinfo Mode Printing::      How to format and print part or all of a file.
* Compile-Command::            How to print using Emacs's compile command.


File: texinfo.info,  Node: Texinfo Mode Printing,  Next: Compile-Command,  Up: Printing with Emacs

D.7.1 Formatting and Printing in Texinfo Mode
---------------------------------------------

Texinfo mode provides several predefined key commands for TeX formatting
and printing.  These include commands for sorting indices, looking at
the printer queue, killing the formatting job, and recentering the
display of the buffer in which the operations occur.

   Often, when you are writing a document, you want to typeset and print
only part of a file to see what it will look like.  You can use the
‘texinfo-tex-region’ and related commands for this purpose.  Use the
‘texinfo-tex-buffer’ command to format all of a buffer.

   For ‘texinfo-tex-region’ or ‘texinfo-tex-buffer’ to work, the file
_must_ start with a ‘\input texinfo’ line and must include a ‘@settitle’
line.  The file must end with ‘@bye’ on a line by itself.  (When you use
‘texinfo-tex-region’, you must surround the ‘@settitle’ line with
start-of-header and end-of-header lines.)

‘C-c C-t C-b’
‘M-x texinfo-tex-buffer’
     Run ‘texi2dvi’ on the buffer.  In addition to running TeX on the
     buffer, this command automatically creates or updates indices as
     needed.

‘C-c C-t C-r’
‘M-x texinfo-tex-region’
     Run TeX on the current region.

     If @-commands related to printed output are between the
     start-of-header and end-of-header lines, then ‘texinfo-tex-region’
     will format the region accordingly.  For example, if you write the
     ‘@smallbook’ command between the start-of-header and end-of-header
     lines, ‘texinfo-tex-region’, will format the region in "small" book
     size.

‘C-c C-t C-i’
‘M-x texinfo-texindex’
     Run ‘texindex’ to sort the indices of a Texinfo file formatted with
     ‘texinfo-tex-region’.  The ‘texinfo-tex-region’ command does not
     run ‘texindex’ automatically; it only runs the ‘tex’ typesetting
     command.  You must run the ‘texinfo-tex-region’ command a second
     time after sorting the raw index files with the ‘texindex’ command.
     (Usually, you do not format an index when you format a region, only
     when you format a buffer.  Now that the ‘texi2dvi’ command exists,
     there is little or no need for this command.)

‘C-c C-t C-p’
‘M-x texinfo-tex-print’
     Print a DVI file that was made with ‘texinfo-tex-region’ or
     ‘texinfo-tex-buffer’.

‘C-c C-t C-q’
‘M-x tex-show-print-queue’
     Show the print queue.

‘C-c C-t C-d’
‘M-x texinfo-delete-from-print-queue’
     Delete a job from the print queue; you will be prompted for the job
     number shown by a preceding ‘C-c C-t C-q’ command
     (‘texinfo-show-tex-print-queue’).

‘C-c C-t C-k’
‘M-x tex-kill-job’
     Kill the currently running TeX job started by either
     ‘texinfo-tex-region’ or ‘texinfo-tex-buffer’, or any other process
     running in the Texinfo shell buffer.

‘C-c C-t C-x’
‘M-x texinfo-quit-job’
     Quit a TeX formatting job that has stopped because of an error by
     sending an <x> to it.  When you do this, TeX preserves a record of
     what it did in a ‘.log’ file.

‘C-c C-t C-l’
‘M-x tex-recenter-output-buffer’
     Redisplay the shell buffer in which the TeX printing and formatting
     commands are run to show its most recent output.

   Thus, the usual sequence of commands for formatting a buffer is as
follows (with comments to the right):

     C-c C-t C-b             Run ‘texi2dvi’ on the buffer.
     C-c C-t C-p             Print the DVI file.
     C-c C-t C-q             Display the printer queue.

   The Texinfo mode TeX formatting commands start a subshell in Emacs
called the ‘*tex-shell*’.  The ‘texinfo-tex-command’,
‘texinfo-texindex-command’, and ‘tex-dvi-print-command’ commands are all
run in this shell.

   You can watch the commands operate in the ‘*tex-shell*’ buffer, and
you can switch to and from and use the ‘*tex-shell*’ buffer as you would
any other shell buffer.

   The formatting and print commands depend on the values of several
variables.  The default values are:

         Variable                              Default value

     texinfo-texi2dvi-command                  "texi2dvi"
     texinfo-tex-command                       "tex"
     texinfo-texindex-command                  "texindex"
     texinfo-delete-from-print-queue-command   "lprm"
     texinfo-tex-trailer                       "@bye"
     tex-start-of-header                       "%**start"
     tex-end-of-header                         "%**end"
     tex-dvi-print-command                     "lpr -d"
     tex-show-queue-command                    "lpq"

   You can change the values of these variables with the ‘M-x
set-variable’ command (*note* Examining and Setting Variables:
(emacs)Examining.), or with your ‘.emacs’ initialization file (*note*
(emacs)Init File::).

   Beginning with version 20, GNU Emacs offers a user-friendly
interface, called “Customize”, for changing values of user-definable
variables.  *Note* Easy Customization Interface: (emacs)Easy
Customization, for more details about this.  The Texinfo variables can
be found in the ‘Development/Docs/Texinfo’ group, once you invoke the
‘M-x customize’ command.


File: texinfo.info,  Node: Compile-Command,  Prev: Texinfo Mode Printing,  Up: Printing with Emacs

D.7.2 Using the Local Variables List
------------------------------------

Yet another way to apply the TeX formatting command to a Texinfo file is
to put that command in a “local variables list” at the end of the
Texinfo file.  You can then specify the ‘tex’ or ‘texi2dvi’ commands as
a ‘compile-command’ and have Emacs run it by typing ‘M-x compile’.  This
creates a special shell called the ‘*compilation*’ buffer in which Emacs
runs the compile command.  For example, at the end of the ‘gdb.texi’
file, after the ‘@bye’, you could put the following:

     Local Variables:
     compile-command: "texi2dvi gdb.texi"
     End:

This technique is most often used by programmers who also compile
programs this way; see *note* (emacs)Compilation::.


File: texinfo.info,  Node: Texinfo Mode Summary,  Next: Formatting Info files,  Prev: Printing with Emacs,  Up: Texinfo Mode

D.8 Texinfo Mode Summary
========================

In Texinfo mode, each set of commands has default keybindings that begin
with the same keys.  All the commands that are custom-created for
Texinfo mode begin with ‘C-c’.  The keys are somewhat mnemonic.

Insert Commands
---------------

The insert commands are invoked by typing ‘C-c’ twice and then the first
letter of the @-command to be inserted.  (It might make more sense
mnemonically to use ‘C-c C-i’, for 'custom insert', but ‘C-c C-c’ is
quick to type.)

     C-c C-c c       Insert ‘@code’.
     C-c C-c d       Insert ‘@dfn’.
     C-c C-c e       Insert ‘@end’.
     C-c C-c i       Insert ‘@item’.
     C-c C-c n       Insert ‘@node’.
     C-c C-c s       Insert ‘@samp’.
     C-c C-c v       Insert ‘@var’.
     C-c {       Insert braces.
     C-c ]
     C-c }       Move out of enclosing braces.

     C-c C-c C-d     Insert a node's section title
                    in the space for the description
                    in a menu entry line.

Show Structure
--------------

The ‘texinfo-show-structure’ command is often used within a narrowed
region.

     C-c C-s         List all the headings.

The Master Update Command
-------------------------

The ‘texinfo-master-menu’ command creates a master menu; and can be used
to update every node and menu in a file as well.

     C-c C-u m
     M-x texinfo-master-menu
                    Create or update a master menu.

     C-u C-c C-u m   With ‘C-u’ as a prefix argument, first
                    create or update all nodes and regular
                    menus, and then create a master menu.

Update Pointers
---------------

The update pointer commands are invoked by typing ‘C-c C-u’ and then
either ‘C-n’ for ‘texinfo-update-node’ or ‘C-e’ for
‘texinfo-every-node-update’.

     C-c C-u C-n     Update a node.
     C-c C-u C-e     Update every node in the buffer.

Update Menus
------------

Invoke the update menu commands by typing ‘C-c C-u’ and then either
‘C-m’ for ‘texinfo-make-menu’ or ‘C-a’ for ‘texinfo-all-menus-update’.
To update both nodes and menus at the same time, precede ‘C-c C-u C-a’
with ‘C-u’.

     C-c C-u C-m     Make or update a menu.

     C-c C-u C-a     Make or update all
                    menus in a buffer.

     C-u C-c C-u C-a With ‘C-u’ as a prefix argument,
                    first create or update all nodes and
                    then create or update all menus.

Format for Info
---------------

The Info formatting commands that are written in Emacs Lisp are invoked
by typing ‘C-c C-e’ and then either ‘C-r’ for a region or ‘C-b’ for the
whole buffer.

   The Info formatting commands that are based on the
‘texi2any’/‘makeinfo’ program are invoked by typing ‘C-c C-m’ and then
either ‘C-r’ for a region or ‘C-b’ for the whole buffer.

Use the ‘texinfo-format...’ commands:

     C-c C-e C-r     Format the region.
     C-c C-e C-b     Format the buffer.

Use ‘texi2any’/‘makeinfo’:

     C-c C-m C-r     Format the region.
     C-c C-m C-b     Format the buffer.
     C-c C-m C-l     Recenter the ‘texi2any’ output buffer.
     C-c C-m C-k     Kill the ‘texi2any’ formatting job.

Typeset and Print
-----------------

The TeX typesetting and printing commands are invoked by typing ‘C-c
C-t’ and then another control command: ‘C-r’ for ‘texinfo-tex-region’,
‘C-b’ for ‘texinfo-tex-buffer’, and so on.

     C-c C-t C-r     Run TeX on the region.
     C-c C-t C-b     Run texi2dvi on the buffer.
     C-c C-t C-i     Run texindex.
     C-c C-t C-p     Print the DVI file.
     C-c C-t C-q     Show the print queue.
     C-c C-t C-d     Delete a job from the print queue.
     C-c C-t C-k     Kill the current TeX formatting job.
     C-c C-t C-x     Quit a currently stopped TeX formatting job.
     C-c C-t C-l     Recenter the output buffer.

Other Updating Commands
-----------------------

The remaining updating commands do not have standard keybindings because
they are rarely used.

     M-x texinfo-insert-node-lines
                    Insert missing ‘@node’ lines in region.
                    With ‘C-u’ as a prefix argument,
                    use section titles as node names.

     M-x texinfo-multiple-files-update
                    Update a multi-file document.
                    With ‘C-u 2’ as a prefix argument,
                    create or update all nodes and menus
                    in all included files first.

     M-x texinfo-indent-menu-description
                    Indent descriptions.

     M-x texinfo-sequential-node-update
                    Insert node pointers in strict sequence.


File: texinfo.info,  Node: Formatting Info files,  Next: Catching Mistakes,  Prev: Texinfo Mode Summary,  Up: Texinfo Mode

D.9 Direct Formatting of Info files
===================================

In general, there is no need to edit or process Info files.  Most of the
content of Info file is plain text, but the tag tables require computing
offsets for nodes and indirect files (*note* Tag and Split Files::),
which is impractical.  The Texinfo processors output well-formatted Info
from Texinfo input.  Also, lot of information from the Texinfo source is
lost in the Info file.  The Texinfo source is therefore more suitable to
analyse a manual, be it for error reporting, for statistics, or to set
up translations.

   Still, especially with manually written Info files, there are some
situations where it may be interesting to process Info files directly,
in particular to compute Info files node offsets and to compute split
Info files file offsets.  Two Emacs commands do that.  ‘Info-tagify’
adds a tag table for a nonsplit file lacking one.  This function is also
useful for Info file validation (*note* Running Info-validate::).  It is
also possible to split a nonsplit Info file with ‘Info-split’.

* Menu:

* Tagifying::                  How to tagify a file.
* Splitting::                  How to split a file manually.


File: texinfo.info,  Node: Tagifying,  Next: Splitting,  Up: Formatting Info files

D.9.1 Tagifying a File
----------------------

Texinfo processors create tag tables automatically.  The only exception
arise when ‘texinfo-format-buffer’ is called with a prefix, as ‘C-u M-x
texinfo-format-buffer’, to create an non split Info file without a tag
table (which can be useful in some cases for Info file validation, *note*
Unsplit and Tagify::).  Adding a tag table is therefore more generally
useful for manually written Info files.

   To create a tag table for an nonsplit file, visit the Info file you
wish to tagify and type:

     M-x Info-tagify

(Note the uppercase ‘I’ in ‘Info-tagify’.)  This creates an Info file
with a tag table.  A tag table is part of a well formed Info file (*note*
Tag and Split Files::).  A tag table is also needed to validate or split
the Info file.


File: texinfo.info,  Node: Splitting,  Prev: Tagifying,  Up: Formatting Info files

D.9.2 Splitting a File Manually
-------------------------------

You should split a large file or else let the ‘texinfo-format-buffer’ or
‘makeinfo-buffer’ command do it for you automatically.  (Generally you
will let one of the formatting commands do this job for you.  *Note* Info
Formatting::.)

   The split-off files are called the indirect subfiles.

   Tag tables are created automatically by the formatting command; you
only need to create a tag table yourself if you are doing the job
manually.  *Note* Tagifying::, for information about creating a tag
table.

   Visit the Info file you wish to tagify and split manually and type
the two commands:

     M-x Info-tagify
     M-x Info-split

(Note that the ‘I’ in ‘Info’ is uppercase.)

   When you use the ‘Info-split’ command, the buffer is modified into a
(small) Info file which lists the indirect subfiles.  This file should
be saved in place of the original visited file.  The indirect subfiles
are written in the same directory the original file is in, with names
generated by appending ‘-’ and a number to the original file name.

   The primary file still functions as an Info file, but it contains
just the tag table and a directory of subfiles.  *Note* Tag and Split
Files::.


File: texinfo.info,  Node: Catching Mistakes,  Next: Batch Formatting,  Prev: Formatting Info files,  Up: Texinfo Mode

D.10 Catching Mistakes
======================

Besides mistakes in the content of your documentation, there are two
kinds of mistake you can make with Texinfo: you can make mistakes with
@-commands, and you can make mistakes with the structure of the nodes
and chapters.

   For finding problems with @-commands, you can run TeX or a region
formatting command on the region that has a problem; indeed, you can run
these commands on each region as you write it.

   For finding problems with the structure of nodes and chapters, you
can use ‘C-c C-s’ (‘texinfo-show-structure’) and the related ‘occur’
command and you can use the ‘M-x Info-validate’ command.

* Menu:

* texi2any Preferred::         ‘texi2any’ finds errors.
* Debugging with Info::        How to catch errors with Info formatting.
* Debugging with TeX::         How to catch errors with TeX formatting.
* Running Info-validate::      How to find badly referenced nodes.


File: texinfo.info,  Node: texi2any Preferred,  Next: Debugging with Info,  Up: Catching Mistakes

D.10.1 ‘texi2any’ Preferred
---------------------------

The ‘texi2any’ program does an excellent job of catching errors and
reporting them--far better than ‘texinfo-format-region’ or
‘texinfo-format-buffer’.  In addition, the various functions for
automatically creating and updating node pointers and menus remove many
opportunities for human error.

   Use ‘texi2any’ (or its Texinfo mode manifestations, ‘makeinfo-region’
and ‘makeinfo-buffer’) to format your file and check for other errors.
This is the best way to work with Texinfo.  But if you cannot use
‘texi2any’, or your problem is very puzzling, then you may want to use
the tools described in this section.


File: texinfo.info,  Node: Debugging with Info,  Next: Debugging with TeX,  Prev: texi2any Preferred,  Up: Catching Mistakes

D.10.2 Catching Errors with Info Formatting
-------------------------------------------

After you have written part of a Texinfo file, you can use the
‘texinfo-format-region’ or the ‘makeinfo-region’ command to see whether
the region formats properly.

   Most likely, however, you are reading this section because for some
reason you cannot use the ‘makeinfo-region’ command; therefore, the rest
of this section presumes that you are using ‘texinfo-format-region’.

   If you have made a mistake with an @-command, ‘texinfo-format-region’
will stop processing at or after the error and display an error message.
To see where in the buffer the error occurred, switch to the ‘*Info
Region*’ buffer; the cursor will be in a position that is after the
location of the error.  Also, the text will not be formatted after the
place where the error occurred (or more precisely, where it was
detected).

   For example, if you accidentally end a menu with the command ‘@end
menus’ with an 's' on the end, instead of with ‘@end menu’, you will see
an error message that says:

     @end menus is not handled by texinfo

The cursor will stop at the point in the buffer where the error occurs,
or not long after it.  The buffer will look like this:

     ---------- Buffer: *Info Region* ----------
     * Menu:

     * Using texinfo-show-structure::  How to use
                                      `texinfo-show-structure'
                                      to catch mistakes.
     * Running Info-validate::         How to check for
                                      unreferenced nodes.
     @end menus
     ⋆
     ---------- Buffer: *Info Region* ----------

   The ‘texinfo-format-region’ command sometimes provides slightly odd
error messages.  For example, the following cross-reference fails to
format:

     (@xref{Catching Mistakes, for more info.)

In this case, ‘texinfo-format-region’ detects the missing closing brace
but displays a message that says ‘Unbalanced parentheses’ rather than
‘Unbalanced braces’.  This is because the formatting command looks for
mismatches between braces as if they were parentheses.

   Sometimes ‘texinfo-format-region’ fails to detect mistakes.  For
example, in the following, the closing brace is swapped with the closing
parenthesis:

     (@xref{Catching Mistakes), for more info.}

Formatting produces:
     (*Note* for more info.: Catching Mistakes)

   The only way for you to detect this error is to realize that the
reference should have looked like this:

     (*Note* Catching Mistakes::, for more info.)

   Incidentally, if you are reading this node in Info and type ‘f <RET>’
(‘Info-follow-reference’), you will generate an error message that says:

     No such node: "Catching Mistakes) The only way ...

This is because Info perceives the example of the error as the first
cross-reference in this node and if you type a <RET> immediately after
typing the Info ‘f’ command, Info will attempt to go to the referenced
node.  If you type ‘f catch <TAB> <RET>’, Info will complete the node
name of the correctly written example and take you to the 'Catching
Mistakes' node.  (If you try this, you can return from the 'Catching
Mistakes' node by typing ‘l’ (‘Info-last’).)


File: texinfo.info,  Node: Debugging with TeX,  Next: Running Info-validate,  Prev: Debugging with Info,  Up: Catching Mistakes

D.10.3 Debugging with TeX
-------------------------

You can also catch mistakes when you format a file with TeX.

   Usually, you will want to do this after you have run
‘texinfo-format-buffer’ (or, better, ‘makeinfo-buffer’) on the same
file, because ‘texinfo-format-buffer’ sometimes displays error messages
that make more sense than TeX.  (*Note* Debugging with Info::, for more
information.)

   For example, TeX was run on a Texinfo file, part of which is shown
here:

     ---------- Buffer: texinfo.texi ----------
     name of the Texinfo file as an extension.  The
     @samp{??} are `wildcards' that cause the shell to
     substitute all the raw index files.  (@xref{sorting
     indices, for more information about sorting
     indices.)
     ---------- Buffer: texinfo.texi ----------

(The cross-reference lacks a closing brace.)  TeX produced the following
output, after which it stopped:

     ---------- Buffer: *tex-shell* ----------
     Runaway argument?
     {sorting indices, for more information about sorting
     indices.) @ETC.
     ! Paragraph ended before @xref was complete.
     <to be read again>
                       @par
     l.27

     ?
     ---------- Buffer: *tex-shell* ----------

   In this case, TeX produced an accurate and understandable error
message:

     Paragraph ended before @xref was complete.

‘@par’ is an internal TeX command of no relevance to Texinfo.  ‘l.27’
means that TeX detected the problem on line 27 of the Texinfo file.  The
‘?’ is the prompt TeX uses in this circumstance.

   Unfortunately, TeX is not always so helpful, and sometimes you must
truly be a Sherlock Holmes to discover what went wrong.

   In any case, if you run into a problem like this, you can do one of
three things.

  1. You can tell TeX to continue running and ignore just this error by
     typing <RET> at the ‘?’ prompt.

  2. You can tell TeX to continue running and to ignore all errors as
     best it can by typing ‘r <RET>’ at the ‘?’ prompt.

     This is often the best thing to do.  However, beware: the one error
     may produce a cascade of additional error messages as its
     consequences are felt through the rest of the file.  To stop TeX
     when it is producing such an avalanche of error messages, type
     ‘C-c’ (or ‘C-c C-c’, if you are running a shell inside Emacs).

  3. You can tell TeX to stop this run by typing ‘x <RET>’ at the ‘?’
     prompt.

   If you are running TeX inside Emacs, you need to switch to the shell
buffer and line at which TeX offers the ‘?’ prompt.

   Sometimes TeX will format a file without producing error messages
even though there is a problem.  This usually occurs if a command is not
ended but TeX is able to continue processing anyhow.  For example, if
you fail to end an itemized list with the ‘@end itemize’ command, TeX
will write a DVI file that you can print out.  The only error message
that TeX will give you is the somewhat mysterious comment:

     (@end occurred inside a group at level 1)

However, if you print the DVI file, you will find that the text of the
file that follows the itemized list is entirely indented as if it were
part of the last item in the itemized list.  The error message is the
way TeX says that it expected to find an ‘@end’ command somewhere in the
file; but that it could not determine where it was needed.

   Another source of notoriously hard-to-find errors is a missing ‘@end
group’ command.  If you ever are stumped by incomprehensible errors,
look for a missing ‘@end group’ command first.

   If the Texinfo file lacks header lines, TeX may stop in the beginning
of its run and display output that looks like the following.  The ‘*’
indicates that TeX is waiting for input.

     This is TeX, Version 3.14159 (Web2c 7.0)
     (test.texinfo [1])
     *

In this case, simply type ‘\end <RET>’ after the asterisk.  Then write
the header lines in the Texinfo file and run the TeX command again.
(Note the use of the backslash, ‘\’.  TeX uses ‘\’ instead of ‘@’; and
in this circumstance, you are working directly with TeX, not with
Texinfo.)


File: texinfo.info,  Node: Running Info-validate,  Prev: Debugging with TeX,  Up: Catching Mistakes

D.10.4 Finding Badly Referenced Nodes
-------------------------------------

You can use the ‘Info-validate’ command to check whether any of the
'Next', 'Previous', 'Up' or other node pointers fail to point to a node.
This command checks that every node pointer points to an existing node.
The ‘Info-validate’ command works only on Info files, not on Texinfo
files.

   The ‘texi2any’ program validates pointers automatically, so you do
not need to use the ‘Info-validate’ command if you are using ‘texi2any’.
With the customization variable ‘CHECK_NORMAL_MENU_STRUCTURE’ set,
‘texi2any’ will also warn if the nodes pointers (either explicitly or
automatically set) are not consistent with the order of node menu
entries.  ‘texi2any’ does not check that every 'Next' pointer is matched
by a 'Previous' (in the node where the 'Next' points) which points back,
since it may be correct for a non standard document structure.

   You only may need to use ‘Info-validate’ if you are unable to run
‘texi2any’ and instead must create an Info file using
‘texinfo-format-region’ or ‘texinfo-format-buffer’, or if you write an
Info file from scratch.

* Menu:

* Using Info-validate::        How to run ‘Info-validate’.
* Unsplit and Tagify::         How to create an unsplit file and add a tag
                               table for validation.


File: texinfo.info,  Node: Using Info-validate,  Next: Unsplit and Tagify,  Up: Running Info-validate

D.10.4.1 Using ‘Info-validate’
..............................

To use ‘Info-validate’, visit the Info file you wish to check and type:

     M-x Info-validate

Note that the ‘Info-validate’ command requires an uppercase 'I'.  You
may also need to create a tag table before running ‘Info-validate’.
*Note* Tagifying::.

   If your file is valid, you will receive a message that says "File
appears valid".  However, if you have a pointer that does not point to a
node, error messages will be displayed in a buffer called ‘*problems in
info file*’.

   For example, ‘Info-validate’ was run on a test file that contained
only the first node of this manual.  One of the messages said:

     In node "Overview", invalid Next: Texinfo Mode

This meant that the node called ‘Overview’ had a 'Next' pointer that did
not point to anything (which was true in this case, since the test file
had only one node in it).

   Now suppose we add a node named ‘Texinfo Mode’ to our test case but
we do not specify a 'Previous' for this node.  Then we will get the
following error message:

     In node "Texinfo Mode", should have Previous: Overview

This is because, with a standard document structure, every 'Next'
pointer should be matched by a 'Previous' (in the node where the 'Next'
points) which points back.

   ‘Info-validate’ also checks that all menu entries and
cross-references point to actual nodes.

   ‘Info-validate’ requires a tag table and does not work with files
that have been split.  (The ‘texinfo-format-buffer’ command
automatically splits large files.)  In order to use ‘Info-validate’ on a
large file, you must run ‘texinfo-format-buffer’ with an argument so
that it does not split the Info file; and you must create a tag table
for the unsplit file.


File: texinfo.info,  Node: Unsplit and Tagify,  Prev: Using Info-validate,  Up: Running Info-validate

D.10.4.2 Creating an Unsplit File and Adding a Tag Table
........................................................

You can run ‘Info-validate’ only on a single Info file that has a tag
table.  The command will not work on the indirect subfiles that are
generated when a master file is split.  If you have a large file (longer
than 300,000 bytes or so), you need to run the ‘texinfo-format-buffer’
or ‘makeinfo-buffer’ command in such a way that it does not create
indirect subfiles.  You will also need to create a tag table for the
Info file.  After you have done this, you can run ‘Info-validate’ and
look for badly referenced nodes.

   The first step is to create an unsplit Info file.  To prevent
‘texinfo-format-buffer’ from splitting a Texinfo file into smaller Info
files, give a prefix to the ‘M-x texinfo-format-buffer’ command:

     C-u M-x texinfo-format-buffer

or else

     C-u C-c C-e C-b

When you do this, ‘texinfo-format-buffer’ will not split the file and
will not create a tag table for it.

   After creating an unsplit Info file, you must create a tag table for
it (*note* Tagifying::).  Visit the unsplit Info file created by
‘texinfo-format-buffer’ and type:

     M-x Info-tagify

   The third step is to validate the Info file:

     M-x Info-validate

(Note the uppercase ‘I’ in ‘Info-validate’.)  In brief, the steps are:

     C-u M-x texinfo-format-buffer
     M-x Info-tagify
     M-x Info-validate

   After you have validated the node structure, you can rerun
‘texinfo-format-buffer’ in the normal way so it will construct a tag
table and split the file automatically, or you can make the tag table
and split the file manually (*note* Splitting::).


File: texinfo.info,  Node: Batch Formatting,  Prev: Catching Mistakes,  Up: Texinfo Mode

D.11 Batch Formatting
=====================

You can format Texinfo files for Info using ‘batch-texinfo-format’ and
Emacs batch mode.  You can run Emacs in batch mode from any shell,
including a shell inside of Emacs.  (*Note* (emacs)Initial Options::.)

   Here is a shell command to format all the files that end in
‘.texinfo’ in the current directory:

     emacs -batch -funcall batch-texinfo-format *.texinfo

Emacs processes all the files listed on the command line, even if an
error occurs while attempting to format some of them.

   Run ‘batch-texinfo-format’ only with Emacs in batch mode as shown; it
is not interactive.  It kills the batch mode Emacs on completion.

   ‘batch-texinfo-format’ is convenient if you lack ‘texi2any’ and want
to format several Texinfo files at once.  When you use Batch mode, you
create a new Emacs process.  This frees your current Emacs, so you can
continue working in it.  (When you run ‘texinfo-format-region’ or
‘texinfo-format-buffer’, you cannot use that Emacs for anything else
until the command finishes.)


File: texinfo.info,  Node: Global Document Commands,  Next: Info Format Specification,  Prev: Texinfo Mode,  Up: Top

# /Appendix E Global Document Commands
***********************************

Here are additional commands which affect the document as a whole.  Most
of these commands are for customizing the appearance of the printed
output.  They are generally all given before the Top node, if they are
given at all.

* Menu:

* @setchapternewpage::         Start chapters on right-hand pages.
* Headings::                   Page headings.
* @paragraphindent::           Specify paragraph indentation.
* @firstparagraphindent::      Suppressing first paragraph indentation.
* @exampleindent::             Specify environment indentation.
* @smallbook::                 How to print small format books and manuals.
* A4 Paper::                   How to print on A4, A5 or B6 paper.
* @pagesizes::                 How to print with customized page sizes.
* Microtypography::            Improving the appearance of paragraphs.
* Magnification::              How to print scaled up output.


File: texinfo.info,  Node: @setchapternewpage,  Next: Headings,  Up: Global Document Commands

E.1 ‘@setchapternewpage’: Blank Pages Before Chapters
=====================================================

In an officially bound book, text is usually printed on both sides of
the paper, chapters start on right-hand pages, and right-hand pages have
odd numbers.  But in short reports, text often is printed only on one
side of the paper.  Also in short reports, chapters sometimes do not
start on new pages, but are printed on the same page as the end of the
preceding chapter, after a small amount of vertical whitespace.

   You can use the ‘@setchapternewpage’ command with various arguments
to specify how chapters should be started in printed output and whether
headers should be formatted for printing on one or both sides of the
paper (single-sided or double-sided printing).

   Write the ‘@setchapternewpage’ command at the beginning of a line
followed by its argument.  For example, you would write the following to
cause each chapter to start on a fresh odd-numbered page:

     @setchapternewpage odd

   You can specify one of three alternatives with the
‘@setchapternewpage’ command:

‘@setchapternewpage off’
     Typeset a new chapter on the same page as the last chapter, after
     skipping some vertical whitespace.  Also, format page headers for
     single-sided printing.

‘@setchapternewpage on’
     Start new chapters on new pages and format page headers for
     single-sided printing.  This is the form most often used for short
     reports or personal printing.  This is the default.

‘@setchapternewpage odd’
     Start new chapters on new, odd-numbered pages (right-handed pages)
     and typeset for double-sided printing.  This is the form most often
     used for books and manuals.

   Texinfo does not have a ‘@setchapternewpage even’ command, because
there is no printing tradition of starting chapters or books on an
even-numbered page.

   If you don't like the default headers that ‘@setchapternewpage’ sets,
you can explicit control them with the ‘@headings’ command.  *Note*
@headings::.

   At the beginning of a manual or book, pages are not numbered--for
example, the title and copyright pages of a book are not numbered.  By
convention, table of contents and frontmatter pages are numbered with
roman numerals and not in sequence with the rest of the document.

   The ‘@setchapternewpage’ has no effect in output formats that do not
have pages, such as Info and HTML.

   We recommend not including any ‘@setchapternewpage’ command in your
document source at all, since such desired pagination is not intrinsic
to the document.  For a particular hard copy run, if you don't want the
default output (no blank pages, same headers on all pages) use the
‘--texinfo’ option to ‘texi2dvi’ to specify the output you want.


File: texinfo.info,  Node: Headings,  Next: @paragraphindent,  Prev: @setchapternewpage,  Up: Global Document Commands

E.2 Page Headings
=================

Most printed manuals contain headings along the top of every page except
the title and copyright pages.  Some manuals also contain footings.
Headings and footings have no meaning in Info or the other output
formats.

   Texinfo provides two standard heading formats, one for manuals
printed on one side of each sheet of paper, and the other for manuals
printed on both sides of the paper.  By default, nothing is specified
for the footing of a Texinfo file, so the footing remains blank.

   Texinfo also has several heading and footing commands that you can
use to generate your own heading and footing formats.

   In Texinfo, headings and footings are single lines at the tops and
bottoms of pages; you cannot create multiline headings or footings.
Each header or footer line is divided into three parts: a left part, a
middle part, and a right part.  Any part, or a whole line, may be left
blank.  Text for the left part of a header or footer line is set
flushleft; text for the middle part is centered; and, text for the right
part is set flushright.

* Menu:

* @headings::                  An option for turning headings on and off and
                               double or single sided printing.
* Heading Format::             Standard page heading formats.
* Custom Headings::            How to create your own headings and footings.


File: texinfo.info,  Node: @headings,  Next: Heading Format,  Up: Headings

E.2.1 The ‘@headings’ Command
-----------------------------

The ‘@headings’ command is rarely used.  It specifies what kinds of page
headings and footings to print on each page.  Usually, this is
controlled by the ‘@setchapternewpage’ command.  You need the
‘@headings’ command only if the ‘@setchapternewpage’ command does not do
what you want.

   You can use ‘@headings’ as follows:

‘@headings off’
     Turn off printing of page headings.

‘@headings single’
     Turn on page headings appropriate for single-sided printing.

‘@headings double’
     Turn on page headings appropriate for double-sided printing.

‘@headings singleafter’
‘@headings doubleafter’
     Turn on ‘single’ or ‘double’ headings, respectively, after the
     current page is output.

‘@headings on’
     Turn on page headings: ‘single’ if ‘@setchapternewpage on’,
     ‘double’ otherwise.

   For example, suppose you write ‘@setchapternewpage off’ before the
‘@titlepage’ command to start a new chapter on the same page as the end
of the last chapter.  This command also causes page headers to be
typeset for single-sided printing.  To cause page headers to be typeset
for double-sided printing, write ‘@headings double’.

   You can stop any page headings at all from being generated by writing
‘@headings off’ on a line of its own, like this:

     @headings off


File: texinfo.info,  Node: Heading Format,  Next: Custom Headings,  Prev: @headings,  Up: Headings

E.2.2 Standard Heading Formats
------------------------------

Texinfo provides two standard heading formats, one for manuals printed
on one side of each sheet of paper, and the other for manuals printed on
both sides of the paper.

   The standard format for single-sided printing consists of a header
line in which the left-hand part contains the name of the chapter, the
central part is blank, and the right-hand part contains the page number.
A single-sided page looks like this:

       _______________________
      |                       |
      | chapter   page number |
      |                       |
      | Start of text ...     |
      | ...                   |
      |                       |

   In the standard double-sided format, the left part of the left-hand
(even-numbered) page contains the page number, the central part is
blank, and the right part contains the title (specified by the
‘@settitle’ command).  The left part of the right-hand (odd-numbered)
page contains the name of the chapter, the central part is blank, and
the right part contains the page number.  An even-numbered page and an
odd-numbered page, side by side as in an open book, look like this:

       _______________________     _______________________
      |                       |   |                       |
      | page number     title |   | chapter   page number |
      |                       |   |                       |
      | Start of text ...     |   | More  text ...        |
      | ...                   |   | ...                   |
      |                       |   |                       |

The chapter name is preceded by the word "Chapter", the chapter number
and a colon.  This makes it easier to keep track of where you are in the
manual.

   Note that on pages where a new chapter starts, some text may be
omitted from the heading line.

   By default, nothing is specified for the footing of a Texinfo file,
so the footing remains blank.


File: texinfo.info,  Node: Custom Headings,  Prev: Heading Format,  Up: Headings

E.2.3 How to Make Your Own Headings
-----------------------------------

You can use the standard headings provided with Texinfo or specify your
own.  By default, Texinfo has no footers, so if you specify them, the
available page size for the main text will be slightly reduced.

   Texinfo provides six commands for specifying headings and footings:
   • ‘@everyheading’ and ‘@everyfooting’ generate page headers and
     footers that are the same for both even- and odd-numbered pages.
   • ‘@evenheading’ and ‘@evenfooting’ commands generate headers and
     footers for even-numbered (left-hand) pages.
   • ‘@oddheading’ and ‘@oddfooting’ generate headers and footers for
     odd-numbered (right-hand) pages.

   You must cancel the predefined heading commands with the ‘@headings
off’ command before defining your own specifications.

   Here is how to place the chapter name at the left, the page number in
the center, and the date at the right of every header for both even- and
odd-numbered pages:

     @headings off
     @everyheading @thischapter @| @thispage @| @today{}

You need to divide the left part from the central part and the central
part from the right part by inserting ‘@|’ between parts.  Otherwise,
the specification command will not be able to tell where the text for
one part ends and the next part begins.

   Each part can contain text or @-commands.  The text is printed as if
the part were within an ordinary paragraph in the body of the page.  The
@-commands replace themselves with the page number, date, chapter name,
or whatever.

   Here are the six heading and footing commands:

‘@everyheading LEFT @| CENTER @| RIGHT’
‘@everyfooting LEFT @| CENTER @| RIGHT’
     The 'every' commands specify the format for both even- and
     odd-numbered pages.  These commands are for documents that are
     printed on one side of each sheet of paper, or for documents in
     which you want symmetrical headers or footers.

‘@evenheading LEFT @| CENTER @| RIGHT’
‘@oddheading LEFT @| CENTER @| RIGHT’
‘@evenfooting LEFT @| CENTER @| RIGHT’
‘@oddfooting LEFT @| CENTER @| RIGHT’
     The 'even' and 'odd' commands specify the format for even-numbered
     pages and odd-numbered pages.  These commands are for books and
     manuals that are printed on both sides of each sheet of paper.

   Use the ‘@this...’ series of @-commands to provide the names of
chapters and sections and the page number.  You can use the ‘@this...’
commands in the left, center, or right portions of headers and footers.

   Here are the ‘@this...’ commands:

‘@thispage’
     Expands to the current page number.

‘@thissectionname’
     Expands to the name of the current section.

‘@thissectionnum’
     Expands to the number of the current section.

‘@thissection’
     Expands to the number and name of the current section, in the
     format 'Section 1: Title'.

‘@thischaptername’
     Expands to the name of the current chapter.

‘@thischapternum’
     Expands to the number of the current chapter, or letter of the
     current appendix.

‘@thischapter’
     Expands to the number and name of the current chapter, in the
     format 'Chapter 1: Title'.

‘@thistitle’
     Expands to the name of the document, as specified by the
     ‘@settitle’ command.

‘@thisfile’
     For ‘@include’ files only: expands to the name of the current
     ‘@include’ file.  If the current Texinfo source file is not an
     ‘@include’ file, this command has no effect.  This command does
     _not_ provide the name of the current Texinfo source file unless it
     is an ‘@include’ file.  (*Note* Include Files::, for more
     information about ‘@include’ files.)

You can also use the ‘@today{}’ command, which expands to the current
date, in '1 Jan 1900' format.

   Other @-commands and text are printed in a header or footer just as
if they were in the body of a page.  It is useful to incorporate text,
particularly when you are writing drafts:

     @headings off
     @everyheading @emph{Draft!} @| @thispage @| @thischapter
     @everyfooting @| @| Version: 0.27: @today{}

   Beware of overlong titles: they may overlap another part of the
header or footer and blot it out.

   If you have very short chapters and/or sections, several of them can
appear on a single page.  You can specify which chapters and sections
you want ‘@thischapter’, ‘@thissection’ and other such macros to refer
to on such pages as follows:

‘@everyheadingmarks REF’
‘@everyfootingmarks REF’
     The REF argument can be either ‘top’ (the ‘@this...’ commands will
     refer to the chapter/section at the top of a page) or ‘bottom’ (the
     commands will reflect the situation at the bottom of a page).
     These ‘@every...’ commands specify what to do on both even- and
     odd-numbered pages.

‘@evenheadingmarks REF’
‘@oddheadingmarks REF’
‘@evenfootingmarks REF’
‘@oddfootingmarks REF’
     These ‘@even...’ and ‘@odd...’ commands specify what to do on only
     even- or odd-numbered pages, respectively.  The REF argument is the
     same as with the ‘@every...’ commands.

   Write these commands immediately after the ‘@...contents’ commands,
or after the ‘@end titlepage’ command if you don't have a table of
contents or if it is printed at the end of your manual.  These commands
have no effect in LaTeX.

   By default, for TeX, the ‘@this...’ commands reflect the situation at
the bottom of a page both in headings and in footings.


File: texinfo.info,  Node: @paragraphindent,  Next: @firstparagraphindent,  Prev: Headings,  Up: Global Document Commands

E.3 ‘@paragraphindent’: Controlling Paragraph Indentation
=========================================================

The Texinfo processors may insert whitespace at the beginning of the
first line of each paragraph, thereby indenting that paragraph.  You can
use the ‘@paragraphindent’ command to specify this indentation.  Write a
‘@paragraphindent’ command at the beginning of a line followed by either
‘asis’ or a number:

     @paragraphindent INDENT

   The indentation is according to the value of INDENT:

‘asis’
     Do not change the existing indentation (not implemented in printed
     output).

‘none’
0
     Omit all indentation.

N
     Indent by N space characters in Info output, by N ems in printed
     output.

   The default value of INDENT is 3.  ‘@paragraphindent’ is ignored for
HTML output.

   It is best to write the ‘@paragraphindent’ command before the
end-of-header line at the beginning of a Texinfo file, so the region
formatting commands indent paragraphs as specified.  *Note* Start of
Header::.


File: texinfo.info,  Node: @firstparagraphindent,  Next: @exampleindent,  Prev: @paragraphindent,  Up: Global Document Commands

E.4 ‘@firstparagraphindent’: Indenting After Headings
=====================================================

As you can see in the present manual, the first paragraph in any section
is not indented by default.  Typographically, indentation is a paragraph
separator, which means that it is unnecessary when a new section begins.
This indentation is controlled with the ‘@firstparagraphindent’ command:

     @firstparagraphindent WORD

   The first paragraph after a heading is indented according to the
value of WORD:

‘none’
     Prevents the first paragraph from being indented (default).  This
     option is ignored by ‘makeinfo’ if ‘@paragraphindent asis’ is in
     effect.

‘insert’
     Include normal paragraph indentation.  This respects the paragraph
     indentation set by a ‘@paragraphindent’ command (*note*
     @paragraphindent::).

   ‘@firstparagraphindent’ is ignored for HTML and DocBook output.

   It is best to write the ‘@firstparagraphindent’ command before the
end-of-header line at the beginning of a Texinfo file, so the region
formatting commands indent paragraphs as specified.  *Note* Start of
Header::.


File: texinfo.info,  Node: @exampleindent,  Next: @smallbook,  Prev: @firstparagraphindent,  Up: Global Document Commands

E.5 ‘@exampleindent’: Environment Indenting
===========================================

The Texinfo processors indent each line of ‘@example’ and similar
environments.  You can use the ‘@exampleindent’ command to specify this
indentation.  Write an ‘@exampleindent’ command at the beginning of a
line followed by either ‘asis’ or a number:

     @exampleindent INDENT

   The indentation is according to the value of INDENT:

‘asis’
     Do not change the existing indentation (not implemented in printed
     output).

0
     Omit all indentation.

N
     Indent environments by N space characters in Info output, by N ems
     in printed output.

   The default value of INDENT is 5 spaces in Info, and 0.4in in printed
output, which is somewhat less.  (The reduction is to help fit more
characters onto physical lines in printed manuals.)

   It is best to write the ‘@exampleindent’ command before the
end-of-header line at the beginning of a Texinfo file, so the region
formatting commands indent paragraphs as specified.  *Note* Start of
Header::.


File: texinfo.info,  Node: @smallbook,  Next: A4 Paper,  Prev: @exampleindent,  Up: Global Document Commands

E.6 ‘@smallbook’: Printing "Small" Books
========================================

By default, TeX typesets pages for printing in an 8.5 by 11 inch format,
which is the "letter" size commonly used in the United States.  However,
you can direct TeX or LaTeX to typeset a document in a 7 by 9.25 inch
format that is suitable for bound books by inserting the following
command on a line by itself at the beginning of the Texinfo file, before
the title page:

     @smallbook

(Since many books are about 7 by 9.25 inches, this command might better
have been called the ‘@regularbooksize’ command, but it came to be
called the ‘@smallbook’ command by comparison to the 8.5 by 11 inch
format.)

   *Note* Format with texi2dvi or texi2pdf::, and *note* Preparing for
TeX::, for other ways to format with ‘@smallbook’ with TeX that do not
require changing the source file.


File: texinfo.info,  Node: A4 Paper,  Next: @pagesizes,  Prev: @smallbook,  Up: Global Document Commands

E.7 Printing on A4 Paper
========================

You can format a document for printing on ISO 216 A4 paper size with the
‘@afourpaper’ command.  Write the command on a line by itself near the
beginning of the Texinfo file, before the title page.

   You may or may not prefer the formatting that results from the
command ‘@afourlatex’.  There's also ‘@afourwide’ for A4 paper in wide
format, ‘@afivepaper’ for A5 paper, and ‘@bsixpaper’ for B6 paper.

   *Note* Format with texi2dvi or texi2pdf:: and *note* Preparing for
TeX::, for other ways to format for different paper sizes that do not
require changing the source file.


File: texinfo.info,  Node: @pagesizes,  Next: Microtypography,  Prev: A4 Paper,  Up: Global Document Commands

E.8 ‘@pagesizes’ [WIDTH][, HEIGHT]: Custom Page Sizes
=====================================================

You can explicitly specify the height and (optionally) width of the main
text area on the page with the ‘@pagesizes’ command.  Write this on a
line by itself near the beginning of the Texinfo file, before the title
page.  The height comes first, then the width if desired, separated by a
comma.  Examples:

     @pagesizes 200mm,150mm
and
     @pagesizes 11.5in

   This would be reasonable for printing on B5-size paper.  To
emphasize, this command specifies the size of the _text area_, not the
size of the paper (which is 250mm by 177mm for B5, 14in by 8.5in for
legal).

   To make more elaborate changes, such as changing any of the page
margins, you must define a new command in ‘texinfo.tex’ or
‘texinfo.cnf’.

   *Note* Format with texi2dvi or texi2pdf::, and *note* Preparing for
TeX::, for other ways to specify ‘@pagesizes’ that do not require
changing the source file.


File: texinfo.info,  Node: Microtypography,  Next: Magnification,  Prev: @pagesizes,  Up: Global Document Commands

E.9 Microtypography
===================

Some versions of TeX, namely pdfTeX and LuaTeX, have “microtypography”
features.  These involve stretching font glyphs slightly, and allowing
text to produce very slightly into the margins.  Use of these gives TeX
more flexibility in breaking a paragraph into lines, and can improve
paragraph appearance by reducing hyphenation and producing a more
consistent typographic color.

   ‘texinfo.tex’ uses these features ('microtype' for short) when
available.  You can turn microtype off by specifying ‘@microtype off’ in
your input file; likewise, ‘@microtype on’ turns microtype back on.

   The fonts used in LaTeX output may not be scalable.  If fonts are not
scalable, using microtypography could trigger an error when converting
the LaTeX output.  Therefore microtypography is not turned on in the
default case in LaTeX output.  It is possible to turn it on with
‘@microtype on’.  A way to get scalable fonts for the font used in the
default LaTeX output is to install the CM-Super font package
(<http://ctan.org/pkg/cm-super>).

   The ‘@microtype’ command does nothing for other output formats.


File: texinfo.info,  Node: Magnification,  Prev: Microtypography,  Up: Global Document Commands

E.10 Magnification
==================

You can attempt to direct TeX to typeset pages larger or smaller than
usual with the ‘\mag’ TeX command.  Everything that is typeset is scaled
proportionally larger or smaller.  (‘\mag’ stands for "magnification".)
This is _not_ a Texinfo @-command, but is a raw TeX command that is
prefixed with a backslash.  You have to write this command between
‘@tex’ and ‘@end tex’ (*note* Raw Formatter Commands::).

   Follow the ‘\mag’ command with an ‘=’ and then a number that is 1000
times the magnification you desire.  For example, to print pages at 1.2
normal size, write the following near the beginning of the Texinfo file,
before the title page:

     @tex
     \global\mag=1200
     @end tex

   With some printing technologies, you can print normal-sized copies
that look better than usual by giving a larger-than-normal master to
your print shop.  They do the reduction, thus effectively increasing the
resolution.

   Depending on your system, DVI files prepared with a
nonstandard-‘\mag’ may not print or may print only with certain
magnifications.  Be prepared to experiment.


File: texinfo.info,  Node: Info Format Specification,  Next: GNU Free Documentation License,  Prev: Global Document Commands,  Up: Top

# /Appendix F Info Format Specification
************************************

Here we describe the technical details of the Info format.

   In this formal description, the characters ‘<>*()|=#’ are used for
the language of the description itself.  Other characters are literal.
The formal constructs used are typical: ‘<...>’ indicates a metavariable
name, ‘=’ means definition, ‘*’ repetition, ‘?’ optional, ‘()’ grouping,
‘|’ alternation, and ‘#’ comment.

   In general, programs that read Info files should try to be
case-insensitive to keywords that occur in the file (for example, ‘Tag
Table’ and ‘Tag table’ should be equivalent) in order to support
Info-generating programs that use different capitalization.

   We specify literal parentheses (those that are part of the Info
format) with <lparen> and <rparen>, meaning the single characters ‘(’
and ‘)’ respectively.  Finally, the two-character sequence ‘^X’ means
the single character ‘CTRL-X’, for any X.

   This format definition was written some 25 years after the Info
format was first devised.  So in the event of conflicts between this
definition and actual practice, practice wins.  It also assumes some
general knowledge of Texinfo; it is meant to be a guide for implementors
rather than a rigid technical standard.  We may refer back to other
parts of this manual for examples and definitions, rather than
redundantly spelling out every detail.

* Menu:

* Whole:           Info Format Whole Manual.  Split vs. nonsplit manuals.
* Preamble:        Info Format Preamble.
* Indirect:        Info Format Indirect Table.
* Tag table:       Info Format Tag Table.
* Local variables: Info Format Local Variables.
* Regular nodes:   Info Format Regular Nodes.
* Menu:            Info Format Menu.
* Image:           Info Format Image.
* Printindex:      Info Format Printindex.
* Cross-Reference: Info Format Cross Reference.


File: texinfo.info,  Node: Info Format Whole Manual,  Next: Info Format Preamble,  Up: Info Format Specification

F.1 Info Format: A Whole Manual
===============================

To begin, an Info manual is either “nonsplit” (contained wholly within a
single file) or “split” (across several files).

   The syntax for a nonsplit manual is:

         <nonsplit info file> =
     <preamble>
     <node>*
     <tag table>?
     <local variables>?

   When split, there is a “main file”, which contains only pointers to
the nodes given in other “subfiles”.  The main file looks like this:

         <split info main file> =
     <preamble>
     <indirect table>
     <tag table>
     <local variables>?

   The subfiles in a split manual have the following syntax:

         <split info subfile> =
     <preamble>
     <node>*

   Note that the tag table is not optional for split files, as it is
used with the indirect table to deduce which subfile a particular node
is in.

   Several of the sections in an Info file (such as nodes or tag tables)
begin with a sequence:

         <separator> = (^L)?^_(^L)?^J

That is, a ‘CTRL-_’ character followed by a newline, with optional
formfeed characters.


File: texinfo.info,  Node: Info Format Preamble,  Next: Info Format Indirect Table,  Prev: Info Format Whole Manual,  Up: Info Format Specification

F.2 Info Format: Preamble
=========================

The <preamble> is text at the beginning of all output files.  It is not
intended to be visible by default in an Info viewer, but may be
displayed upon user request.

         <preamble> =
     <identification>       # "This is FILENAME, produced by ..."
     <copying text>         # Expansion of @copying text.
     <dir entries>          # Derived from @dircategory and @direntry.

These pieces are:

<identification line>
     An arbitrary string beginning the output file, followed by a blank
     line.

<copying text>
     The expansion of a ‘@copying’ environment, if the manual has one
     (*note* @copying::).

<dir entries>
     The result of any ‘@dircategory’ and ‘@direntry’ commands present
     in the manual (*note* Installing Dir Entries::).


File: texinfo.info,  Node: Info Format Indirect Table,  Next: Info Format Tag Table,  Prev: Info Format Preamble,  Up: Info Format Specification

F.3 Info Format: Indirect Table
===============================

         <indirect table> =
     <separator>
     Indirect:
     (<filename>: <bytepos>)*

   The indirect table is written to the main file in the case of split
output only.  It specifies, as a decimal integer, the starting byte
position (zero-based) that the first node of each subfile would have if
the subfiles were concatenated together in order, not including the
top-level file.  The first node of actual content is pointed to by the
first entry.

   As an example, suppose split output is generated for the GDB manual.
The top-level file ‘gdb.info’ will contain something like this:

     <separator>
     Indirect:
     gdb.info-1: 1878
     gdb.info-2: 295733
     ...

   This tells Info viewers that the first node of the manual occurs at
byte 1878 of the file ‘gdb.info-1’ (which would be after that file's
preamble.)  The first node in the ‘gdb.info-2’ subfile would start at
byte 295733 if ‘gdb.info-2’ were appended to ‘gdb.info-1’, including any
preamble sections in both files.

   Unfortunately, Info-creating programs such as ‘makeinfo’ have not
always implemented these rules perfectly, due to various bugs and
oversights.  Therefore, robust Info viewers should fall back to
searching "nearby" the given position for a node, instead of giving up
immediately if the position is not exactly at a node beginning.


File: texinfo.info,  Node: Info Format Tag Table,  Next: Info Format Local Variables,  Prev: Info Format Indirect Table,  Up: Info Format Specification

F.4 Info Format: Tag Table
==========================

         <tag table> =
     <separator>
     Tag Table:
     (<lparen>Indirect<rparen>)?
     (Node|Ref): <nodeid>^?<bytepos>
     <separator>
     End Tag Table

   The ‘(Indirect)’ line appears in the case of split output only.

   The tag table specifies the starting byte position of each node and
anchor in the file.  In the case of split output, it is only written in
the main output file.

   Each line defines an identifier as either an anchor or a node, as
specified.  For example, ‘Node: Top^?1647’ says that the node named
‘Top’ starts at byte 1647 while ‘Ref: Overview-Footnote-1^?30045’ says
that the anchor named ‘Overview-Footnote-1’ starts at byte 30045.  It is
an error to define the same identifier both ways.

   In the case of nonsplit output, the byte positions simply refer to
the location in the output file.  In the case of split output, the byte
positions refer to an imaginary file created by concatenating all the
split files (but not the top-level file).  See the previous section.

   Here is an example:

     ^_
     Tag Table:
     Node: Top^?89
     Node: Ch1^?292
     ^_
     End Tag Table

This specifies a manual with two nodes, 'Top' and 'Ch1', at byte
positions 89 and 292 respectively.  Because the ‘(Indirect)’ line is not
present, the manual is not split.

   Preamble sections or other non-node sections of files do not have a
tag table entry.


File: texinfo.info,  Node: Info Format Local Variables,  Next: Info Format Regular Nodes,  Prev: Info Format Tag Table,  Up: Info Format Specification

F.5 Info Format: Local Variables
================================

The local variables section is optional and is currently used to give
the encoding information.  It may be augmented in the future.

         <local variables> =
     <separator>
     Local Variables:
     coding: <encoding>
     End:

   *Note* @documentencoding::.


File: texinfo.info,  Node: Info Format Regular Nodes,  Next: Info Format Menu,  Prev: Info Format Local Variables,  Up: Info Format Specification

F.6 Info Format: Regular Nodes
==============================

Regular nodes look like this:

         <node> =
     <separator>
     File: <fn>, Node: <id1>, (Next: <id2>, )? (Prev: <id3>, )? Up: <id4>

     <general text, until the next ^_ or end-of-file>

At least one space or tab must be present after each colon and comma,
but any number of spaces are ignored.  The <id> node identifiers have
following format:

        <id> = (<lparen><infofile><rparen>)?<node-spec>?
        <node-spec> = <nodename> | <del><nodename><del>
        <del> = ^?

   This <node> defines <id1> in file <fn>, which is typically either
‘manualname’ or ‘manualname.info’.  No parenthesized <infofile>
component may appear within <id1>.

   Each of the identifiers after ‘Next’, ‘Prev’ and ‘Up’ refer to nodes
or anchors within a file.  These pointers normally refer within the same
file, but ‘(dir)’ is often used to point to the top-level dir file.  If
an <infofile> component is used then the node name may be omitted, in
which case the node identifier refers to the ‘Top’ node within the
referenced file.

   The ‘Next’ and ‘Prev’ pointers are optional.  The ‘Up’ pointer is
technically also optional, although most likely this indicates a mistake
in the node structuring.  Conventionally, the nodes are arranged to form
a tree, but this is not a requirement of the format.

   Node names containing periods, commas, colons or parentheses can
confuse Info readers.  If it is necessary to refer to a node whose name
contains any of these, the <nodename> should be surrounded by a pair of
‘DEL’ characters (‘CTRL-?’, character number 127).  ‘makeinfo’ adds
these characters when needed in the default case.  Note that not all
Info readers recognize this syntax.  *Note* Info Node Names
Constraints::.

   The <general text> of the node can include the special constructs
described next.


File: texinfo.info,  Node: Info Format Menu,  Next: Info Format Image,  Prev: Info Format Regular Nodes,  Up: Info Format Specification

F.7 Info Format: Menu
=====================

Conventionally menus appear at the end of nodes, but the Info format
places no restrictions on their location.

         <menu> =
     * Menu:
     (<menu entry> | <menu comment>)*

   The parts of a <menu entry> are also described in *note* Menu Parts::.
They have the same syntax as cross-references, with a leading ‘*’
instead of ‘* (N|n)ote’ (*note* Info Format Cross Reference::).  Indices
extend the menu format to specify the destination line; *note* Info
Format Printindex::.

   A <menu comment> is any line not beginning with ‘*’ that appears
either at the beginning of the menu or is separated from a menu entry by
one or more blank lines.  These comments are intended to be displayed as
part of the menu, as-is (*note* Writing a Menu::).


File: texinfo.info,  Node: Info Format Image,  Next: Info Format Printindex,  Prev: Info Format Menu,  Up: Info Format Specification

F.8 Info Format: Image
======================

The ‘@image’ command results in the following special directive within
the Info file (*note* Images::):

         <image> =
     ^@^H[image src="<image file>"
                 (text="<txt file contents>")?
                 (alt="<alt text>")?
     ^@^H]

   The line breaks and indentation in this description are editorial;
the whitespace between the different parts of the directive in Info
files is arbitrary.

   In the strings <image file>, <txt file contents> and <alt text>, ‘"’
is quoted as ‘\"’ and ‘\’ is quoted as ‘\\’.  The txt and alt
specifications are optional.

   The alt value serves the same purpose as in HTML: A prose description
of the image.  In text-only displays or speech systems, for example, the
alt value may be used instead of displaying the (typically graphical)
<image file>.

   The <txt file contents>, if present, should be taken as an ASCII
representation of the image, for possible use on a text-only display.

   The format does not prescribe the choice between displaying the
<image file>, the <alt text> or the <txt file contents>.


File: texinfo.info,  Node: Info Format Printindex,  Next: Info Format Cross Reference,  Prev: Info Format Image,  Up: Info Format Specification

F.9 Info Format: Printindex
===========================

An index in Info format is a kind of menu, with an additional directive
at the beginning to mark it as an index menu.

         <printindex> =
     ^@^H[index^@^H]
     * Menu:

     <index entry>*

   The <index entry> items are similar to normal menu entries, but the
free-format description is replaced by the line number of where the
entries occurs in the text:

         <index entry> =
     * <entry text>: <node-spec>. <line-spec>

         <line-spec> =
     <lparen>line <lineno><rparen>

   The initial part, ‘<entry text>: <entry node>.’, should be on a
single line.  The <entry text> is the index term.

   Even though <entry text> is followed by a colon, it may itself
contain colons, so Info readers should try to include as much of the
line as possible in the <entry text>.  (However, <entry text> may not
contain the ‘DEL’ characters that may occur in <node-spec>.)

   <lineno> is an unsigned integer, given relative to the start of the
<entry node>.  An optional line break may occur before ‘<line-spec>’.

   Here is an example:

     ^@^H[index^@^H]
     * Menu:

     * thunder:           Weather Phenomena.             (line 5)

   This means that an index entry for 'thunder' appears at line 5 of the
node 'Weather Phenomena'.


File: texinfo.info,  Node: Info Format Cross Reference,  Prev: Info Format Printindex,  Up: Info Format Specification

F.10 Info Format: Cross-reference
=================================

A general cross-reference in Info format has one of the following two
forms:

         <cross-reference> =
       * (N|n)ote <id>::
     | * (N|n)ote <label>:<id>(.|,)

         <id> = (<lparen><infofile><rparen>)?<node-spec>?
         <label> = <label text> | <del><label text><del>

   No space should occur between the ‘*’ character and the following ‘N’
or ‘n’.  ‘*Note’ should be used at the start of a sentence, otherwise
‘*note’ should be used.  (Some Info readers, such as the one in Emacs,
can display ‘*Note’ and ‘*note’ as ‘See’ and ‘see’ respectively.)  In
both cases, <label text> is descriptive text.

   In both forms the <id> refers to a node or anchor, in the same way as
a reference in the node information line does (*note* Info Format Regular
Nodes::).  The optional parenthesized ‘<infofile>’ is the name of the
manual being referenced, and <node-spec> gives the node or anchor within
that manual.

   The second form has a descriptive label.  A cross-reference in this
form should usually be terminated with a comma or period, to make it
feasible to find the end of the <id>.

   If <label> contains a colon character (:), it should be surrounded
with a pair of <del> characters.  Likewise, quoting characters may be
used for the node name if it contains problematic characters; then a
terminating comma or period is not needed.  As stated earlier, this
quoting mechanism is not supported in all Info-reading programs.

   The format does not prescribe how to find other manuals to resolve
such references.

   Here are some examples:

     *note* GNU Free Documentation License::
     *note* Tag table: Info Format Tag Table, for details.
     *Note* Overview: (make)Top.
     *Note* ^?:^?: (bash)Bourne Shell Builtins.
     *Note* alloca.h: (gnulib)^?alloca.h^?.

   The first shows a reference to a node in the current manual using the
short form.

   The second also refers to a node in the current manual, namely 'Info
Format Tag Table'; the 'Tag table' before the ‘:’ is only a label on
this particular reference, and the ‘for details.’ is text belonging to
the sentence, not part of the reference.

   The third example refers to the node 'Top' in another manual, namely
‘make’, with 'Overview' being the label for this cross-reference.

   The fourth example shows a colon character being quoted in a label,
and the fifth example shows a period being quoted in a node name.

   *Note* Cross References::.


File: texinfo.info,  Node: GNU Free Documentation License,  Next: Command and Variable Index,  Prev: Info Format Specification,  Up: Top

# /Appendix G GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document “free” in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <https://www.gnu.org/licenses/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: texinfo.info,  Node: Command and Variable Index,  Next: General Index,  Prev: GNU Free Documentation License,  Up: Top

# /Command and Variable Index
**************************

This is an alphabetical list of all the @-commands, assorted Emacs Lisp
functions, and several variables.  To make the list easier to use, the
commands are listed without their preceding ‘@’.

 [index ]
* Menu:

* - (discretionary hyphen):              @- @hyphenation.     (line   6)
* -:                                     @- @hyphenation.     (line   6)
* ,:                                     Inserting Accents.   (line  28)
* , (cedilla accent):                    Inserting Accents.   (line  28)
* ::                                     Not Ending a Sentence.
                                                              (line   9)
* : (suppress end-of-sentence space):    Not Ending a Sentence.
                                                              (line   9)
* !:                                     Ending a Sentence.   (line   6)
* ! (end of sentence):                   Ending a Sentence.   (line   6)
* ?:                                     Ending a Sentence.   (line   6)
* ? (end of sentence):                   Ending a Sentence.   (line   6)
* .:                                     Ending a Sentence.   (line   6)
* . (end of sentence):                   Ending a Sentence.   (line   6)
* ':                                     Inserting Accents.   (line  28)
* ' (acute accent):                      Inserting Accents.   (line  28)
* ":                                     Inserting Accents.   (line  28)
* " (umlaut accent):                     Inserting Accents.   (line  28)
* {:                                     Inserting Braces.    (line   6)
* { (literal {):                         Inserting Braces.    (line   6)
* }:                                     Inserting Braces.    (line   6)
* } (literal }):                         Inserting Braces.    (line   6)
* @ (literal @):                         Inserting an Atsign. (line   6)
* @:                                     Inserting an Atsign. (line   6)
* * :                                     Line Breaks.         (line   6)
* * (force line break):                  Line Breaks.         (line   6)
* /:                                     Line Breaks.         (line   6)
* / (allow line break):                  Line Breaks.         (line   6)
* \ (literal \ in math):                 Inserting a Backslash.
                                                              (line  20)
* \:                                     Inserting a Backslash.
                                                              (line  20)
* &:                                     Inserting an Ampersand.
                                                              (line   6)
* & (literal &):                         Inserting an Ampersand.
                                                              (line   6)
* `:                                     Inserting Accents.   (line  28)
* ` (grave accent):                      Inserting Accents.   (line  28)
* ^:                                     Inserting Accents.   (line  28)
* ^ (circumflex accent):                 Inserting Accents.   (line  28)
* =:                                     Inserting Accents.   (line  28)
* = (macron accent):                     Inserting Accents.   (line  28)
* ~:                                     Inserting Accents.   (line  28)
* ~ (tilde accent):                      Inserting Accents.   (line  28)
* aa:                                    Inserting Accents.   (line  50)
* AA:                                    Inserting Accents.   (line  50)
* abbr:                                  @abbr.               (line   6)
* acronym:                               @acronym.            (line   6)
* ae:                                    Inserting Accents.   (line  50)
* AE:                                    Inserting Accents.   (line  50)
* afivepaper:                            A4 Paper.            (line  10)
* afourlatex:                            A4 Paper.            (line  10)
* afourpaper:                            A4 Paper.            (line   6)
* afourwide:                             A4 Paper.            (line  10)
* alias:                                 @alias.              (line   6)
* allowcodebreaks:                       @allowcodebreaks.    (line   6)
* ampchar:                               Inserting an Ampersand.
                                                              (line   6)
* anchor:                                @anchor.             (line   6)
* appendix:                              @unnumbered @appendix.
                                                              (line   6)
* appendixsec:                           @unnumberedsec @appendixsec @heading.
                                                              (line   6)
* appendixsection:                       @unnumberedsec @appendixsec @heading.
                                                              (line  19)
* appendixsubsec:                        @unnumberedsubsec @appendixsubsec @subheading.
                                                              (line   6)
* appendixsubsubsec:                     @subsubsection.      (line   6)
* apply:                                 Sample Function Definition.
                                                              (line  11)
* arrow:                                 Click Sequences.     (line  17)
* asis:                                  @table.              (line  18)
* atchar:                                Inserting an Atsign. (line   6)
* author:                                @title @subtitle @author.
                                                              (line   6)
* b:                                     Fonts.               (line  28)
* b (bold font):                         Fonts.               (line  28)
* \backslash:                            Inserting a Backslash.
                                                              (line  20)
* backslashchar:                         Inserting a Backslash.
                                                              (line   6)
* bsixpaper:                             A4 Paper.            (line  10)
* bullet:                                @bullet.             (line   6)
* bye:                                   Ending a File.       (line  17)
* c:                                     Comments.            (line   6)
* caption:                               @caption @shortcaption.
                                                              (line   6)
* cartouche:                             @cartouche.          (line   6)
* center:                                @titlefont @center @sp.
                                                              (line   6)
* centerchap:                            @unnumbered @appendix.
                                                              (line  16)
* chapheading:                           @majorheading @chapheading.
                                                              (line   6)
* chapter:                               @chapter.            (line   6)
* cindex:                                Predefined Indices.  (line  10)
* cite:                                  @cite.               (line   6)
* clear:                                 @set @value.         (line   6)
* click:                                 Click Sequences.     (line  17)
* clicksequence:                         Click Sequences.     (line   6)
* clickstyle:                            Click Sequences.     (line  20)
* code:                                  @code.               (line   6)
* codequotebacktick:                     Inserting Quote Characters.
                                                              (line  23)
* codequoteundirected:                   Inserting Quote Characters.
                                                              (line  19)
* columnfractions:                       Multitable Column Widths.
                                                              (line  11)
* comma:                                 Inserting a Comma.   (line   6)
* command:                               @command.            (line   6)
* comment:                               Comments.            (line   6)
* complete_tree_nodes_menus:             Other Customization Variables.
                                                              (line 378)
* complete_tree_nodes_missing_menu:      Other Customization Variables.
                                                              (line 382)
* contents:                              Contents.            (line   6)
* copying:                               @copying.            (line   6)
* copyright:                             @copyright.          (line   6)
* cpindex:                               Predefined Indices.  (line  10)
* defblock:                              Generic Definition Commands.
                                                              (line   9)
* defcodeindex:                          New Indices.         (line   6)
* defcv:                                 Object-Oriented Variables.
                                                              (line   9)
* defcvx:                                @deffnx.             (line  22)
* deffn:                                 Functions Commands.  (line   9)
* deffnx:                                @deffnx.             (line   6)
* defindex:                              New Indices.         (line   6)
* definfoenclose:                        @definfoenclose.     (line   6)
* defivar:                               Object-Oriented Variables.
                                                              (line  43)
* defivarx:                              @deffnx.             (line  22)
* defline:                               Generic Definition Commands.
                                                              (line   9)
* defmac:                                Functions Commands.  (line  47)
* defmacx:                               @deffnx.             (line  22)
* defmethod:                             Object-Oriented Methods.
                                                              (line  54)
* defmethodx:                            @deffnx.             (line  22)
* defop:                                 Object-Oriented Methods.
                                                              (line  11)
* defopt:                                Variables Commands.  (line  43)
* defoptx:                               @deffnx.             (line  22)
* defopx:                                @deffnx.             (line  22)
* defspec:                               Functions Commands.  (line  52)
* defspecx:                              @deffnx.             (line  22)
* deftp:                                 Data Types.          (line   8)
* deftpx:                                @deffnx.             (line  22)
* deftypecv:                             Object-Oriented Variables.
                                                              (line  26)
* deftypecvx:                            @deffnx.             (line  22)
* deftypefn:                             Typed Functions.     (line  11)
* deftypefnnewline:                      Typed Functions.     (line  93)
* deftypefnx:                            @deffnx.             (line  22)
* deftypefun:                            Typed Functions.     (line  87)
* deftypefunx:                           @deffnx.             (line  22)
* deftypeivar:                           Object-Oriented Variables.
                                                              (line  59)
* deftypeivarx:                          @deffnx.             (line  22)
* deftypeline:                           Generic Definition Commands.
                                                              (line   9)
* deftypemethod:                         Object-Oriented Methods.
                                                              (line  75)
* deftypemethodx:                        @deffnx.             (line  22)
* deftypeop:                             Object-Oriented Methods.
                                                              (line  46)
* deftypeopx:                            @deffnx.             (line  22)
* deftypevar:                            Typed Variables.     (line  34)
* deftypevarx:                           @deffnx.             (line  22)
* deftypevr:                             Typed Variables.     (line  12)
* deftypevrx:                            @deffnx.             (line  22)
* defun:                                 Functions Commands.  (line  42)
* defunx:                                @deffnx.             (line  22)
* defvar:                                Variables Commands.  (line  31)
* defvarx:                               @deffnx.             (line  22)
* defvr:                                 Variables Commands.  (line   8)
* defvrx:                                @deffnx.             (line  22)
* DEL (comment character):               Comments.            (line  20)
* detailmenu:                            Master Menu Parts.   (line  15)
* dfn:                                   @dfn.                (line   6)
* dh:                                    Inserting Accents.   (line  50)
* DH:                                    Inserting Accents.   (line  50)
* dircategory:                           Directory Category.  (line   6)
* direntry:                              Installing Dir Entries.
                                                              (line  11)
* display:                               @display.            (line   6)
* displaymath:                           Inserting Math.      (line  33)
* dmn:                                   @dmn.                (line   6)
* docbook:                               Raw Formatter Commands.
                                                              (line  41)
* documentdescription:                   @documentdescription.
                                                              (line   6)
* documentencoding:                      @documentencoding.   (line   6)
* documentlanguage:                      @documentlanguage.   (line   6)
* dotaccent:                             Inserting Accents.   (line  28)
* dotless:                               Inserting Accents.   (line  50)
* dots:                                  @dots.               (line   6)
* email:                                 @email.              (line   6)
* \emergencystretch:                     Overfull hboxes.     (line  31)
* emph:                                  @emph @strong.       (line   6)
* end:                                   Command Syntax.      (line  22)
* enddots:                               @dots.               (line   6)
* enumerate:                             @enumerate.          (line   6)
* env:                                   @env.                (line   6)
* equiv:                                 @equiv.              (line   6)
* error:                                 @error.              (line   6)
* errormsg:                              Conditional Commands.
                                                              (line  74)
* errormsg, and line numbers in TeX:     #line and TeX.       (line  23)
* euro:                                  @euro.               (line   6)
* evenfooting:                           Custom Headings.     (line  47)
* evenfootingmarks:                      Custom Headings.     (line 124)
* evenheading:                           Custom Headings.     (line  47)
* evenheadingmarks:                      Custom Headings.     (line 124)
* everyfooting:                          Custom Headings.     (line  40)
* everyfootingmarks:                     Custom Headings.     (line 116)
* everyheading:                          Custom Headings.     (line  40)
* everyheadingmarks:                     Custom Headings.     (line 116)
* example:                               @example.            (line   6)
* exampleindent:                         @exampleindent.      (line   6)
* exclamdown:                            Inserting Accents.   (line  50)
* exdent:                                @exdent.             (line   6)
* expansion:                             @expansion.          (line   6)
* file:                                  @file.               (line   6)
* fill_gaps_in_sectioning:               Other Customization Variables.
                                                              (line 386)
* finalout:                              Overfull hboxes.     (line  46)
* findex:                                Predefined Indices.  (line  12)
* firstparagraphindent:                  @firstparagraphindent.
                                                              (line   6)
* float:                                 @float.              (line   6)
* flushleft:                             @flushleft @flushright.
                                                              (line   6)
* flushright:                            @flushleft @flushright.
                                                              (line   6)
* fnindex:                               Predefined Indices.  (line  12)
* fn-name:                               Def Cmd Continuation Lines.
                                                              (line  18)
* fonttextsize:                          Fonts.               (line   6)
* foo:                                   Inserting an Ampersand.
                                                              (line  33)
* foobar:                                Optional Arguments.  (line  19)
* foobar <1>:                            Typed Functions.     (line  29)
* footnote:                              Footnotes.           (line   6)
* footnotestyle:                         Footnote Styles.     (line  55)
* format:                                @format.             (line   6)
* forward-word:                          Def Cmd Template.    (line  27)
* frenchspacing:                         @frenchspacing.      (line   6)
* ftable:                                @ftable @vtable.     (line   6)
* \gdef within @tex:                     Raw Formatter Commands.
                                                              (line  22)
* geq:                                   @geq @leq.           (line   6)
* \globaldefs within @tex:               Raw Formatter Commands.
                                                              (line  22)
* group:                                 @group.              (line   6)
* guillemetleft:                         Inserting Quotation Marks.
                                                              (line  23)
* guillemetright:                        Inserting Quotation Marks.
                                                              (line  23)
* guillemotleft:                         Inserting Quotation Marks.
                                                              (line  23)
* guillemotright:                        Inserting Quotation Marks.
                                                              (line  23)
* guilsinglleft:                         Inserting Quotation Marks.
                                                              (line  23)
* guilsinglright:                        Inserting Quotation Marks.
                                                              (line  23)
* H:                                     Inserting Accents.   (line  28)
* H (Hungarian umlaut accent):           Inserting Accents.   (line  28)
* hashchar:                              Inserting a Hashsign.
                                                              (line   6)
* hbox:                                  Overfull hboxes.     (line  14)
* heading:                               @unnumberedsec @appendixsec @heading.
                                                              (line   6)
* headings:                              @headings.           (line   6)
* headitem:                              Multitable Rows.     (line  12)
* headitemfont:                          Multitable Rows.     (line  17)
* html:                                  Raw Formatter Commands.
                                                              (line  41)
* hyphenation:                           @- @hyphenation.     (line   6)
* i:                                     Fonts.               (line  31)
* i (italic font):                       Fonts.               (line  31)
* ifclear:                               @ifset @ifclear.     (line  47)
* ifcommanddefined:                      Testing for Texinfo Commands.
                                                              (line   6)
* ifcommandnotdefined:                   Testing for Texinfo Commands.
                                                              (line   6)
* ifdocbook:                             Conditional Commands.
                                                              (line  14)
* ifhtml:                                Conditional Commands.
                                                              (line  14)
* ifinfo:                                Conditional Commands.
                                                              (line   9)
* iflatex:                               Conditional Commands.
                                                              (line  14)
* ifnotdocbook:                          Conditional Not Commands.
                                                              (line   6)
* ifnothtml:                             Conditional Not Commands.
                                                              (line   6)
* ifnotinfo:                             Conditional Not Commands.
                                                              (line   6)
* ifnotlatex:                            Conditional Not Commands.
                                                              (line   6)
* ifnotplaintext:                        Conditional Not Commands.
                                                              (line   6)
* ifnottex:                              Conditional Not Commands.
                                                              (line   6)
* ifnotxml:                              Conditional Not Commands.
                                                              (line   6)
* ifplaintext:                           Conditional Commands.
                                                              (line  14)
* ifset:                                 @ifset @ifclear.     (line   6)
* iftex:                                 Conditional Commands.
                                                              (line  14)
* ifxml:                                 Conditional Commands.
                                                              (line  14)
* ignore:                                Comments.            (line  27)
* image:                                 Images.              (line   6)
* include:                               Using Include Files. (line   6)
* indent:                                @indent.             (line   6)
* indentedblock:                         @indentedblock.      (line   6)
* index:                                 No Space After Definition Name.
                                                              (line  18)
* indicateurl:                           @indicateurl.        (line   6)
* inforef:                               @inforef.            (line   6)
* Info-validate:                         Running Info-validate.
                                                              (line   6)
* inlinefmt:                             Inline Conditionals. (line   6)
* inlinefmtifelse:                       Inline Conditionals. (line   6)
* inlineifclear:                         @inlineifset @inlineifclear.
                                                              (line   6)
* inlineifset:                           @inlineifset @inlineifclear.
                                                              (line   6)
* inlineraw:                             Inline Conditionals. (line   6)
* \input (raw TeX startup):              Minimum.             (line  29)
* insert_nodes_for_sectioning_commands:  Other Customization Variables.
                                                              (line 391)
* insertcopying:                         @insertcopying.      (line   6)
* isearch-backward:                      @deffnx.             (line  19)
* isearch-forward:                       @deffnx.             (line  18)
* item in @itemize:                      @itemize.            (line  20)
* item in @multitable:                   Multitable Rows.     (line   6)
* item in @table:                        @table.              (line  30)
* itemize:                               @itemize.            (line   6)
* itemx:                                 @itemx.              (line   6)
* kbd:                                   @kbd.                (line   6)
* kbdinputstyle:                         @kbd.                (line  20)
* key:                                   @key.                (line   6)
* kindex:                                Predefined Indices.  (line  15)
* kyindex:                               Predefined Indices.  (line  15)
* l:                                     Inserting Accents.   (line  50)
* L:                                     Inserting Accents.   (line  50)
* LaTeX:                                 @TeX @LaTeX.         (line   6)
* latex:                                 Raw Formatter Commands.
                                                              (line  41)
* lbracechar:                            Inserting Braces.    (line   6)
* leq:                                   @geq @leq.           (line   6)
* linemacro:                             Line Macros.         (line   6)
* link:                                  @link.               (line   6)
* \linkcolor:                            PDF Colors.          (line  12)
* lisp:                                  @lisp.               (line   6)
* listoffloats:                          @listoffloats.       (line   6)
* lowersections:                         Raise/lower sections.
                                                              (line   6)
* macro:                                 Defining Macros.     (line   6)
* \mag (raw TeX magnification):          Magnification.       (line   6)
* majorheading:                          @majorheading @chapheading.
                                                              (line   6)
* makeinfo-buffer:                       texi2any in Emacs.   (line  21)
* makeinfo-kill-job:                     texi2any in Emacs.   (line  40)
* makeinfo-recenter-output-buffer:       texi2any in Emacs.   (line  45)
* makeinfo-region:                       texi2any in Emacs.   (line  17)
* math:                                  Inserting Math.      (line   6)
* \mathopsup:                            Inserting Math.      (line  61)
* menu:                                  Menus.               (line   6)
* microtype:                             Microtypography.     (line  13)
* minus:                                 @minus.              (line   6)
* move_index_entries_after_items:        Other Customization Variables.
                                                              (line 395)
* multitable:                            Multi-column Tables. (line   6)
* need:                                  @need.               (line   6)
* <newline>:                             Multiple Spaces.     (line   6)
* next-error:                            texi2any in Emacs.   (line  31)
* node:                                  Writing a Node.      (line   6)
* nodedescription:                       Node Descriptions.   (line   6)
* nodedescriptionblock:                  Node Descriptions.   (line  11)
* noindent:                              @noindent.           (line   6)
* novalidate:                            Formatting Partial Documents.
                                                              (line   6)
* o:                                     Inserting Accents.   (line  50)
* O:                                     Inserting Accents.   (line  50)
* occur:                                 Using occur.         (line   6)
* occur-mode-goto-occurrence:            Showing the Structure.
                                                              (line  19)
* oddfooting:                            Custom Headings.     (line  47)
* oddfootingmarks:                       Custom Headings.     (line 124)
* oddheading:                            Custom Headings.     (line  47)
* oddheadingmarks:                       Custom Headings.     (line 124)
* oe:                                    Inserting Accents.   (line  50)
* OE:                                    Inserting Accents.   (line  50)
* ogonek:                                Inserting Accents.   (line  28)
* option:                                @option.             (line   6)
* ordf:                                  Inserting Accents.   (line  50)
* ordm:                                  Inserting Accents.   (line  50)
* page:                                  @page.               (line   6)
* page, within @titlepage:               @titlepage.          (line  15)
* pagesizes:                             @pagesizes.          (line   6)
* paragraphindent:                       @paragraphindent.    (line   6)
* part:                                  @part.               (line   6)
* pgindex:                               Predefined Indices.  (line  17)
* phoo:                                  @definfoenclose.     (line  31)
* pindex:                                Predefined Indices.  (line  17)
* point:                                 @point.              (line   6)
* pounds:                                @pounds.             (line   6)
* print:                                 @print.              (line   6)
* printindex:                            Printing Indices & Menus.
                                                              (line   6)
* process:                               Typed Functions.     (line  82)
* push:                                  Typed Functions.     (line  63)
* pxref:                                 @pxref.              (line   6)
* questiondown:                          Inserting Accents.   (line  50)
* quotation:                             @quotation.          (line   6)
* quotedblbase:                          Inserting Quotation Marks.
                                                              (line  23)
* quotedblleft:                          Inserting Quotation Marks.
                                                              (line  23)
* quotedblright:                         Inserting Quotation Marks.
                                                              (line  23)
* quoteleft:                             Inserting Quotation Marks.
                                                              (line  23)
* quoteright:                            Inserting Quotation Marks.
                                                              (line  23)
* quotesinglbase:                        Inserting Quotation Marks.
                                                              (line  23)
* r:                                     Fonts.               (line  34)
* r (roman font):                        Fonts.               (line  34)
* raggedright:                           @raggedright.        (line   6)
* raisesections:                         Raise/lower sections.
                                                              (line   6)
* rbracechar:                            Inserting Braces.    (line   6)
* ref:                                   @ref.                (line   6)
* @refill:                               Obsolete @-Commands. (line   9)
* regenerate_master_menu:                Other Customization Variables.
                                                              (line 401)
* registeredsymbol:                      @registeredsymbol.   (line   6)
* relate_index_entries_to_table_entries: Other Customization Variables.
                                                              (line 406)
* result:                                @result.             (line   6)
* ringaccent:                            Inserting Accents.   (line  28)
* rmacro:                                Defining Macros.     (line  44)
* samp:                                  @samp.               (line   6)
* sansserif:                             Fonts.               (line  38)
* sc:                                    Smallcaps.           (line   6)
* section:                               @section.            (line   6)
* seealso:                               Advanced Indexing.   (line  34)
* seeentry:                              Advanced Indexing.   (line  25)
* set:                                   @set @value.         (line   6)
* setchapternewpage:                     @setchapternewpage.  (line   6)
* @setcontentsaftertitlepage:            Obsolete @-Commands. (line  15)
* setfilename:                           @setfilename.        (line   6)
* @setshortcontentsaftertitlepage:       Obsolete @-Commands. (line  23)
* settitle:                              @settitle.           (line   6)
* shortcaption:                          @caption @shortcaption.
                                                              (line   6)
* shortcontents:                         Contents.            (line   6)
* shorttitlepage:                        @titlepage.          (line  42)
* simple_menu:                           Other Customization Variables.
                                                              (line 412)
* slanted:                               Fonts.               (line  41)
* smallbook:                             @smallbook.          (line   6)
* smalldisplay:                          small.               (line   6)
* smallexample:                          small.               (line   6)
* smallformat:                           small.               (line   6)
* smallindentedblock:                    small.               (line   6)
* smalllisp:                             small.               (line   6)
* smallquotation:                        small.               (line   6)
* sortas:                                Indexing Commands.   (line  47)
* sp:                                    @sp.                 (line   6)
* sp (titlepage line spacing):           @titlefont @center @sp.
                                                              (line   6)
* <space>:                               Multiple Spaces.     (line   6)
* ss:                                    Inserting Accents.   (line  50)
* strong:                                @emph @strong.       (line   6)
* sub:                                   Inserting Subscripts and Superscripts.
                                                              (line   6)
* subentry:                              Advanced Indexing.   (line   8)
* subheading:                            @unnumberedsubsec @appendixsubsec @subheading.
                                                              (line   6)
* subsection:                            @subsection.         (line   6)
* subsubheading:                         @subsubsection.      (line   6)
* subsubsection:                         @subsubsection.      (line   6)
* subtitle:                              @title @subtitle @author.
                                                              (line   6)
* summarycontents:                       Contents.            (line   6)
* sup:                                   Inserting Subscripts and Superscripts.
                                                              (line   6)
* syncodeindex:                          @syncodeindex.       (line   6)
* synindex:                              @synindex.           (line   6)
* t:                                     Fonts.               (line  44)
* t (typewriter font):                   Fonts.               (line  44)
* tab:                                   Multitable Rows.     (line   6)
* <tab>:                                 Multiple Spaces.     (line   6)
* table:                                 Two-column Tables.   (line   6)
* TeX:                                   @TeX @LaTeX.         (line   6)
* tex:                                   Raw Formatter Commands.
                                                              (line  14)
* texinfo-all-menus-update:              Updating Commands.   (line 110)
* texinfo-every-node-update:             Updating Commands.   (line 105)
* texinfo-format-buffer:                 texinfo-format commands.
                                                              (line  21)
* texinfo-format-region:                 texinfo-format commands.
                                                              (line  17)
* texinfo-indent-menu-description:       Other Updating Commands.
                                                              (line  33)
* texinfo-insert-braces:                 Inserting.           (line  75)
* texinfo-insert-@code:                  Inserting.           (line  13)
* texinfo-insert-@dfn:                   Inserting.           (line  17)
* texinfo-insert-dwim-@ref:              Inserting.           (line  47)
* texinfo-insert-@end:                   Inserting.           (line  21)
* texinfo-insert-@example:               Inserting.           (line  70)
* texinfo-insert-@item:                  Inserting.           (line  28)
* texinfo-insert-@kbd:                   Inserting.           (line  33)
* texinfo-insert-@node:                  Inserting.           (line  37)
* texinfo-insert-node-lines:             Other Updating Commands.
                                                              (line   9)
* texinfo-insert-@noindent:              Inserting.           (line  42)
* texinfo-insert-@samp:                  Inserting.           (line  57)
* texinfo-insert-@table:                 Inserting.           (line  61)
* texinfo-insert-@var:                   Inserting.           (line  66)
* texinfo-make-menu:                     Updating Commands.   (line  91)
* texinfo-master-menu:                   Updating Commands.   (line  53)
* texinfo-multiple-files-update:         Update Multiple Files.
                                                              (line   6)
* texinfo-sequential-node-update:        Other Updating Commands.
                                                              (line  42)
* texinfo-show-structure:                Showing the Structure.
                                                              (line  15)
* texinfo-start-menu-description:        Inserting.           (line 104)
* texinfo-tex-buffer:                    Texinfo Mode Printing.
                                                              (line  22)
* texinfo-update-node:                   Updating Commands.   (line  81)
* textdegree:                            @textdegree.         (line   6)
* th:                                    Inserting Accents.   (line  50)
* TH:                                    Inserting Accents.   (line  50)
* thischapter:                           Custom Headings.     (line  81)
* thischaptername:                       Custom Headings.     (line  74)
* thischapternum:                        Custom Headings.     (line  77)
* thisfile:                              Custom Headings.     (line  89)
* thispage:                              Custom Headings.     (line  61)
* thissection:                           Custom Headings.     (line  70)
* thissectionname:                       Custom Headings.     (line  64)
* thissectionnum:                        Custom Headings.     (line  67)
* thistitle:                             Custom Headings.     (line  85)
* tie:                                   @tie.                (line   6)
* tieaccent:                             Inserting Accents.   (line  28)
* tindex:                                Predefined Indices.  (line  19)
* title:                                 @title @subtitle @author.
                                                              (line   6)
* titlefont:                             @titlefont @center @sp.
                                                              (line   6)
* titlepage:                             @titlepage.          (line   6)
* today:                                 Custom Headings.     (line  98)
* top:                                   @top Command.        (line   6)
* tpindex:                               Predefined Indices.  (line  19)
* u:                                     Inserting Accents.   (line  28)
* U:                                     Inserting Unicode.   (line   6)
* u (breve accent):                      Inserting Accents.   (line  28)
* ubaraccent:                            Inserting Accents.   (line  28)
* udotaccent:                            Inserting Accents.   (line  28)
* unmacro:                               Defining Macros.     (line  56)
* unnumbered:                            @unnumbered @appendix.
                                                              (line   6)
* unnumberedsec:                         @unnumberedsec @appendixsec @heading.
                                                              (line   6)
* unnumberedsubsec:                      @unnumberedsubsec @appendixsubsec @subheading.
                                                              (line   6)
* unnumberedsubsubsec:                   @subsubsection.      (line   6)
* up-list:                               Inserting.           (line  79)
* uref:                                  @url.                (line  13)
* urefbreakstyle:                        URL Line Breaking.   (line  15)
* \urefurlonlylinktrue:                  @url PDF Output Format.
                                                              (line  12)
* url:                                   @url.                (line   6)
* \urlcolor:                             PDF Colors.          (line  12)
* v:                                     Inserting Accents.   (line  28)
* v (caron):                             Inserting Accents.   (line  28)
* value:                                 @set @value.         (line   6)
* var:                                   @var.                (line   6)
* verb:                                  @verb.               (line   6)
* verbatim:                              @verbatim.           (line   6)
* verbatiminclude:                       @verbatiminclude.    (line   6)
* vindex:                                Predefined Indices.  (line  22)
* vrindex:                               Predefined Indices.  (line  22)
* vskip TeX vertical skip:               Copyright.           (line  12)
* vtable:                                @ftable @vtable.     (line   6)
* w:                                     @w.                  (line   6)
* xml:                                   Raw Formatter Commands.
                                                              (line  41)
* xref:                                  @xref.               (line   6)
* xrefautomaticsectiontitle:             Three Arguments.     (line  55)


File: texinfo.info,  Node: General Index,  Prev: Command and Variable Index,  Up: Top

# /General Index
*************

 [index ]
* Menu:

* _, breakpoint within @code:            @allowcodebreaks.    (line   6)
* - (in image alt string):               Image Syntax.        (line  61)
* -, breakpoint within @code:            @allowcodebreaks.    (line   6)
* ¡:                                     Inserting Accents.   (line  50)
* ¿:                                     Inserting Accents.   (line  50)
* ':                                     Inserting Quotation Marks.
                                                              (line  23)
* '':                                    Inserting Quotation Marks.
                                                              (line  23)
* ‚ (single low-9 quotation mark):       Inserting Quotation Marks.
                                                              (line  23)
* ›:                                     Inserting Quotation Marks.
                                                              (line  23)
* " (undirected double quote character): Inserting Quotation Marks.
                                                              (line  23)
* „ (double low-9 quotation mark):       Inserting Quotation Marks.
                                                              (line  23)
* »:                                     Inserting Quotation Marks.
                                                              (line  23)
* (dir) as Up node of Top node:          First Node.          (line  16)
* @ as continuation in definition commands: Def Cmd Continuation Lines.
                                                              (line   6)
* &#xHEX;, output from @U:               Inserting Unicode.   (line  29)
* #line directive:                       #line Directive.     (line   6)
* #line directive, not processing with TeX: #line and TeX.    (line   6)
* #line directive, syntax details:       #line Syntax Details.
                                                              (line   6)
* `:                                     Inserting Quotation Marks.
                                                              (line  23)
* ``:                                    Inserting Quotation Marks.
                                                              (line  23)
* ‹:                                     Inserting Quotation Marks.
                                                              (line  23)
* «:                                     Inserting Quotation Marks.
                                                              (line  23)
* $Id expansion, preventing:             @w.                  (line  27)
* 8-bit characters, in HTML cross-references: HTML Xref 8-bit Character Expansion.
                                                              (line   6)
* ª:                                     Inserting Accents.   (line  50)
* å:                                     Inserting Accents.   (line  50)
* Å:                                     Inserting Accents.   (line  50)
* A4 paper, printing on:                 A4 Paper.            (line   6)
* A5 paper, printing on:                 A4 Paper.            (line  10)
* Abbreviations for keys:                @key.                (line  20)
* Abbreviations, tagging:                @abbr.               (line   6)
* Abstract of document:                  @documentdescription.
                                                              (line   6)
* Abstract syntax tree representation of documents: History.  (line  55)
* Accents, inserting:                    Inserting Accents.   (line   6)
* accesskey, customization variable for: HTML Customization Variables.
                                                              (line 326)
* accesskey, in HTML output of menus:    Writing a Menu.      (line  38)
* accesskey, in HTML output of nodes:    Texinfo Document Structure.
                                                              (line  30)
* <acknowledgements> DocBook tag:        @unnumbered @appendix.
                                                              (line  27)
* Acronyms, tagging:                     @acronym.            (line   6)
* Acute accent:                          Inserting Accents.   (line  28)
* Adding a new Info file:                New Info File.       (line   6)
* Additional output formats:             Adding Output Formats.
                                                              (line   6)
* --add-once, for install-info:          Invoking install-info.
                                                              (line  33)
* Advanced indexing:                     Advanced Indexing.   (line   6)
* Advice on writing entries:             Index Entries.       (line   6)
* æ:                                     Inserting Accents.   (line  50)
* Æ:                                     Inserting Accents.   (line  50)
* AFTER_BODY_OPEN:                       HTML Customization Variables.
                                                              (line  14)
* AFTER_SHORT_TOC_LINES:                 HTML Customization Variables.
                                                              (line  18)
* AFTER_TOC_LINES:                       HTML Customization Variables.
                                                              (line  19)
* after, value for @urefbreakstyle:      URL Line Breaking.   (line  24)
* Aliases, command:                      @alias.              (line   6)
* --align=COLUMN, for install-info:      Invoking install-info.
                                                              (line  37)
* Allow line break:                      Line Breaks.         (line   6)
* All-permissive copying license:        All-permissive Copying License.
                                                              (line   6)
* Alphabetical @-command list:           Command List.        (line   6)
* Alt attribute for images:              Image Syntax.        (line  61)
* Ampersand, inserting:                  Inserting an Ampersand.
                                                              (line   6)
* Anchors:                               @anchor.             (line   6)
* Angle quotation marks:                 Inserting Quotation Marks.
                                                              (line  23)
* Another Info directory:                Other Info Directories.
                                                              (line   6)
* --append-new-sections, for install-info: Invoking install-info.
                                                              (line  43)
* Archive::Zip, for EPUB file output:    Generating EPUB.     (line  11)
* Arguments, repeated and optional:      Optional Arguments.  (line   6)
* ASCII text output with --plaintext:    Invoking texi2any.   (line 333)
* ASCII_DASHES_AND_QUOTES:               Other Customization Variables.
                                                              (line  10)
* ASCII_GLYPH:                           Other Customization Variables.
                                                              (line  17)
* ASCII_PUNCTUATION:                     Other Customization Variables.
                                                              (line  23)
* ASCII, source document portability using: Inserting Unicode.
                                                              (line  14)
* Aspect ratio of images:                Image Scaling.       (line   6)
* @-commands:                            Conventions.         (line  16)
* @-commands, customization variables for: Customization Variables for @-Commands.
                                                              (line   6)
* @-commands, in node names:             Node Line Requirements.
                                                              (line  20)
* @-commands, list of:                   Command List.        (line   6)
* @-commands, syntax:                    Command Syntax.      (line   6)
* At sign, inserting:                    Inserting an Atsign. (line   6)
* Auk, bird species:                     Inserting Quotation Marks.
                                                              (line  40)
* AUTO_MENU_DESCRIPTION_ALIGN_COLUMN:    Other Customization Variables.
                                                              (line  29)
* AUTO_MENU_MAX_WIDTH:                   Other Customization Variables.
                                                              (line  35)
* automake, and version info:            GNU Sample Texts.    (line  20)
* Automatic pointer creation with texi2any: Writing a Node.   (line  31)
* Automatic quoting of commas for some macros: Invoking Macros.
                                                              (line  45)
* Automatically insert nodes, menus:     Updating Nodes and Menus.
                                                              (line   6)
* Auxiliary files, omitting:             Formatting Partial Documents.
                                                              (line   6)
* AVOID_MENU_REDUNDANCY:                 HTML Customization Variables.
                                                              (line  10)
* B5 paper, printing on:                 @pagesizes.          (line  16)
* Back-end output formats:               Output Formats.      (line   6)
* Backslash in macros:                   Defining Macros.     (line  37)
* Backslash, and macros:                 Invoking Macros.     (line  23)
* Backslash, in macro arguments:         Invoking Macros.     (line  85)
* Backslash, inserting:                  Inserting a Backslash.
                                                              (line   6)
* Backtick:                              Inserting Quote Characters.
                                                              (line  23)
* Badly referenced nodes:                Running Info-validate.
                                                              (line   6)
* BASEFILENAME_LENGTH:                   HTML Customization Variables.
                                                              (line  29)
* Bastard title page:                    @titlepage.          (line  42)
* Batch formatting for Info:             Batch Formatting.    (line   6)
* Beebe, Nelson:                         Output Formats.      (line  60)
* BEFORE_SHORT_TOC_LINES:                HTML Customization Variables.
                                                              (line  34)
* BEFORE_TOC_LINES:                      HTML Customization Variables.
                                                              (line  35)
* before, value for @urefbreakstyle:     URL Line Breaking.   (line  24)
* Beginning line of a Texinfo file:      First Line.          (line   6)
* Berry, Karl:                           History.             (line   6)
* Big points:                            Image Scaling.       (line  23)
* BIG_RULE:                              HTML Customization Variables.
                                                              (line  45)
* Black rectangle in hardcopy:           Overfull hboxes.     (line  41)
* Blank lines:                           @sp.                 (line   6)
* <blockquote> DocBook tag:              @quotation.          (line  48)
* Body of a macro:                       Defining Macros.     (line  27)
* <body> text, customizing:              HTML Customization Variables.
                                                              (line  49)
* BODYTEXT:                              HTML Customization Variables.
                                                              (line  49)
* Bold font:                             Fonts.               (line  28)
* Bolio:                                 History.             (line  28)
* Book characteristics, printed:         Printed Books.       (line   6)
* Book, printing small:                  @smallbook.          (line   6)
* border-pattern:                        Object-Oriented Variables.
                                                              (line  21)
* border-pattern of Window:              Object-Oriented Variables.
                                                              (line  38)
* border-pattern of Window <1>:          Object-Oriented Variables.
                                                              (line  54)
* border-pattern of Window <2>:          Object-Oriented Variables.
                                                              (line  71)
* BoTeX:                                 History.             (line  28)
* Box with rounded corners:              @cartouche.          (line   6)
* Box, ugly black in hardcopy:           Overfull hboxes.     (line  41)
* Brace-delimited conditional text:      Inline Conditionals. (line   6)
* Brace-delimited flag conditionals:     @inlineifset @inlineifclear.
                                                              (line   6)
* Braces and argument syntax:            Command Syntax.      (line  55)
* Braces, in index entries:              Details of texindex. (line   6)
* Braces, in macro arguments:            Invoking Macros.     (line  85)
* Braces, inserting:                     Inserting Braces.    (line   6)
* Braces, when to use:                   Conventions.         (line  21)
* Breakpoints within URLs:               URL Line Breaking.   (line   6)
* Breaks in a line:                      Line Breaks.         (line   6)
* Breaks, within @code:                  @allowcodebreaks.    (line   6)
* Breve accent:                          Inserting Accents.   (line  28)
* Buffer formatting and printing:        Texinfo Mode Printing.
                                                              (line  11)
* Bugs, reporting:                       Reporting Bugs.      (line   6)
* Bzipped dir files, reading:            Invoking install-info.
                                                              (line  23)
* -c VAR=VALUE:                          Invoking texi2any.   (line 349)
* --calign=COLUMN, for install-info:     Invoking install-info.
                                                              (line  47)
* Capitalization of index entries:       Index Entries.       (line   6)
* Captions, for floats:                  @caption @shortcaption.
                                                              (line   6)
* Caron:                                 Inserting Accents.   (line  28)
* Cascading Style Sheets, and HTML output: HTML CSS.          (line   6)
* Case in node name:                     Node Line Requirements.
                                                              (line  68)
* CASE_INSENSITIVE_FILENAMES:            HTML Customization Variables.
                                                              (line  53)
* Case, not altering in @code:           @code.               (line  19)
* Catching errors with Info formatting:  Debugging with Info. (line   6)
* Catching errors with TeX formatting:   Debugging with TeX.  (line   6)
* Catching mistakes:                     Catching Mistakes.   (line   6)
* Catcode for comments in TeX:           Comments.            (line  20)
* Categories, choosing:                  Directory Category.  (line   6)
* Category codes, of plain TeX:          Raw Formatter Commands.
                                                              (line  14)
* <caution> DocBook tag:                 @quotation.          (line  48)
* Caveats for macro usage:               Macro Details.       (line   6)
* Cedilla accent:                        Inserting Accents.   (line  28)
* Centimeters:                           Image Scaling.       (line  27)
* Chapter structuring:                   Chapter Structuring. (line   6)
* CHAPTER_HEADER_LEVEL:                  HTML Customization Variables.
                                                              (line  57)
* <chapter> DocBook tag:                 @unnumbered @appendix.
                                                              (line  27)
* Chapters, formatting one at a time:    Formatting Partial Documents.
                                                              (line   6)
* Character set, declaring:              @documentencoding.   (line   6)
* Characteristics, printed books or manuals: Printed Books.   (line   6)
* Characters, basic input:               Conventions.         (line   6)
* Characters, invalid in node name:      Node Line Requirements.
                                                              (line  36)
* @charset specification, in CSS files:  HTML CSS.            (line  31)
* Chassell, Robert J.:                   History.             (line   6)
* Check accent:                          Inserting Accents.   (line  28)
* CHECK_HTMLXREF:                        HTML Customization Variables.
                                                              (line  61)
* CHECK_MISSING_MENU_ENTRY:              Other Customization Variables.
                                                              (line  41)
* CHECK_NORMAL_MENU_STRUCTURE:           Other Customization Variables.
                                                              (line  46)
* Checking for badly referenced nodes:   Running Info-validate.
                                                              (line   6)
* Checking for Texinfo commands:         Testing for Texinfo Commands.
                                                              (line   6)
* Checklist for bug reports:             Reporting Bugs.      (line  11)
* Ciceros:                               Image Scaling.       (line  33)
* Circumflex accent:                     Inserting Accents.   (line  28)
* CLASS_BEGIN_USEPACKAGE:                LaTeX Customization Variables.
                                                              (line  12)
* Click sequences:                       Click Sequences.     (line   6)
* CLOSE_DOUBLE_QUOTE_SYMBOL:             Other Customization Variables.
                                                              (line  63)
* CLOSE_QUOTE_SYMBOL:                    Other Customization Variables.
                                                              (line  52)
* Closing punctuation, and sentence ending: Ending a Sentence.
                                                              (line  29)
* CM-Super fonts:                        Inserting Quotation Marks.
                                                              (line  51)
* CM-Super fonts, for LaTeX:             Microtypography.     (line  17)
* CM-Super fonts, installing:            Preparing for TeX.   (line  30)
* Code point of Unicode character, inserting by: Inserting Unicode.
                                                              (line   6)
* code, value for @kbdinputstyle:        @kbd.                (line  26)
* Collapsing whitespace around continuations: Def Cmd Continuation Lines.
                                                              (line  28)
* Colon in node name:                    Node Line Requirements.
                                                              (line  36)
* Colon, last in INFOPATH:               Other Info Directories.
                                                              (line  46)
* <colophon> DocBook tag:                @unnumbered @appendix.
                                                              (line  27)
* Colored links, in PDF output:          PDF Colors.          (line   6)
* Column widths, defining for multitables: Multitable Column Widths.
                                                              (line   6)
* Combining indices:                     Combining Indices.   (line   6)
* Comma after cross-reference:           Cross Reference Parts.
                                                              (line  49)
* Comma in node name:                    Node Line Requirements.
                                                              (line  36)
* Comma, in macro arguments:             Invoking Macros.     (line  38)
* Comma, inserting:                      Inserting a Comma.   (line   6)
* Command aliases:                       @alias.              (line   6)
* Command definitions:                   Functions Commands.  (line   6)
* Command names, indicating:             @command.            (line   6)
* Command syntax:                        Command Syntax.      (line   6)
* COMMAND_LINE_ENCODING:                 Other Customization Variables.
                                                              (line  69)
* --command, for texi2dvi:               Format with texi2dvi or texi2pdf.
                                                              (line  45)
* Command-line options of texi2html:     texi2html.           (line  41)
* Commands in node names:                Node Line Requirements.
                                                              (line  20)
* Commands to insert special characters: Special Characters.  (line   6)
* Commands using raw TeX:                Raw Formatter Commands.
                                                              (line   6)
* Commands, inserting them:              Inserting.           (line   6)
* Commands, testing for Texinfo:         Testing for Texinfo Commands.
                                                              (line   6)
* --commands-in-node-names:              Invoking texi2any.   (line  39)
* Comments:                              Comments.            (line   6)
* Comments, in CSS files:                HTML CSS.            (line  41)
* compatibility, with texi2html:         Other Customization Variables.
                                                              (line 331)
* Compile command for formatting:        Compile-Command.     (line   6)
* COMPLEX_FORMAT_IN_TABLE:               HTML Customization Variables.
                                                              (line  66)
* Compressed dir files, reading:         Invoking install-info.
                                                              (line  23)
* Computer Modern fonts:                 @documentencoding.   (line  83)
* Conditional commands, inline:          Inline Conditionals. (line   6)
* Conditionally visible text:            Conditionals.        (line   6)
* Conditionals, nested:                  Conditional Nesting. (line   6)
* Conditions for copying Texinfo:        Copying Conditions.  (line   6)
* --conf-dir=DIR:                        Invoking texi2any.   (line  45)
* Configuration, for HTML cross-manual references: HTML Xref Configuration.
                                                              (line   6)
* Cons, Lionel:                          History.             (line  47)
* Cons, Lionel <1>:                      texi2html.           (line   6)
* Container directory for EPUB:          EPUB Output File and Directory.
                                                              (line   6)
* CONTENTS_OUTPUT_LOCATION:              HTML Customization Variables.
                                                              (line  70)
* Contents, after title page:            Obsolete @-Commands. (line  15)
* Contents, table of:                    Contents.            (line   6)
* Contents-like outline of file structure: Showing the Structure.
                                                              (line   6)
* Contexts, of @-commands:               Command Contexts.    (line   6)
* Continuation lines in definition commands: Def Cmd Continuation Lines.
                                                              (line   6)
* Control keys, specifying:              @key.                (line  20)
* Controlling line breaks:               Line Breaks.         (line   6)
* Conventions for writing definitions:   Def Cmd Conventions. (line   6)
* Conventions, syntactic:                Conventions.         (line   6)
* CONVERT_TO_LATEX_IN_MATH:              HTML Customization Variables.
                                                              (line  79)
* COPIABLE_LINKS:                        HTML Customization Variables.
                                                              (line  85)
* Copying conditions:                    Copying Conditions.  (line   6)
* Copying permissions:                   Document Permissions.
                                                              (line   6)
* Copying text, including:               @insertcopying.      (line   6)
* Copyright holder for FSF works:        @copying.            (line  53)
* Copyright page:                        Copyright.           (line   6)
* Copyright symbol:                      @copyright.          (line   6)
* Copyright word, always in English:     @copying.            (line  44)
* Correcting mistakes:                   Catching Mistakes.   (line   6)
* Country codes:                         @documentlanguage.   (line  53)
* cp (concept) index:                    Predefined Indices.  (line  10)
* CPP_LINE_DIRECTIVES:                   Other Customization Variables.
                                                              (line  77)
* Create nodes, menus automatically:     Updating Nodes and Menus.
                                                              (line   6)
* Creating an unsplit file:              Unsplit and Tagify.  (line   6)
* Creating index entries:                Indexing Commands.   (line   6)
* Creating pointers with texi2any:       Writing a Node.      (line  31)
* Critical editions:                     Footnote Commands.   (line  44)
* Cross-reference configuration, for HTML: HTML Xref Configuration.
                                                              (line   6)
* Cross-reference parts:                 Cross Reference Parts.
                                                              (line   6)
* Cross-reference targets, arbitrary:    @anchor.             (line   6)
* Cross-references:                      Cross References.    (line   6)
* Cross-references using @inforef:       @inforef.            (line   6)
* Cross-references using @link:          @link.               (line   6)
* Cross-references using @pxref:         @pxref.              (line   6)
* Cross-references using @ref:           @ref.                (line   6)
* Cross-references using @xref:          @xref.               (line   6)
* Cross-references, in HTML output:      HTML Xref.           (line   6)
* Cross-references, in Info format:      Info Format Cross Reference.
                                                              (line   6)
* .cshrc initialization file:            Preparing for TeX.   (line   6)
* CSS, and HTML output:                  HTML CSS.            (line   6)
* --css-include:                         Invoking texi2any.   (line  52)
* --css-ref:                             Invoking texi2any.   (line  58)
* CTRL-l:                                Conventions.         (line  52)
* Custom page sizes:                     @pagesizes.          (line   6)
* Customization variables for @-commands: Customization Variables for @-Commands.
                                                              (line   6)
* Customization variables for options:   Customization Variables and Options.
                                                              (line   6)
* Customize Emacs package (Development/Docs/Texinfo): Texinfo Mode Printing.
                                                              (line 118)
* Customizing of TeX for Texinfo:        Preparing for TeX.   (line  40)
* ð:                                     Inserting Accents.   (line  50)
* Ð:                                     Inserting Accents.   (line  50)
* -D VAR:                                Invoking texi2any.   (line  64)
* Dash, breakpoint within @code:         @allowcodebreaks.    (line   6)
* Dashes in source:                      Conventions.         (line  35)
* DATE_IN_HEADER:                        HTML Customization Variables.
                                                              (line  92)
* DEBUG:                                 Other Customization Variables.
                                                              (line  81)
* --debug, for install-info:             Invoking install-info.
                                                              (line  55)
* debugging document, with tree representation: Customization Variables and Options.
                                                              (line  57)
* Debugging the Texinfo structure:       Catching Mistakes.   (line   6)
* Debugging with Info formatting:        Debugging with Info. (line   6)
* Debugging with TeX formatting:         Debugging with TeX.  (line   6)
* <dedication> DocBook tag:              @unnumbered @appendix.
                                                              (line  27)
* DEF_TABLE:                             HTML Customization Variables.
                                                              (line  95)
* Default font:                          Fonts.               (line  34)
* DEFAULT_RULE:                          HTML Customization Variables.
                                                              (line 100)
* Defining indexing entries:             Indexing Commands.   (line   6)
* Defining macros:                       Defining Macros.     (line   6)
* Defining new indices:                  New Indices.         (line   6)
* Defining new Texinfo commands:         Defining New Texinfo Commands.
                                                              (line   6)
* Definition command headings, continuing: Def Cmd Continuation Lines.
                                                              (line   6)
* Definition commands:                   Definition Commands. (line   6)
* Definition conventions:                Def Cmd Conventions. (line   6)
* Definition lists, typesetting:         @table.              (line   6)
* Definition of Info format:             Info Format Specification.
                                                              (line   6)
* Definition template:                   Def Cmd Template.    (line   6)
* Definitions grouped together:          @deffnx.             (line   6)
* Degree symbol:                         @textdegree.         (line   6)
* --delete, for install-info:            Invoking install-info.
                                                              (line  58)
* Delimiter character, for verbatim:     @verb.               (line   6)
* Depth of text area:                    @pagesizes.          (line   6)
* Description for menu, start:           Inserting.           (line 104)
* Description of document:               @documentdescription.
                                                              (line   6)
* --description=TEXT, for install-info:  Invoking install-info.
                                                              (line  64)
* Detailed menu:                         Master Menu Parts.   (line  15)
* Details of macro usage:                Macro Details.       (line   6)
* detexinfo:                             Customization Variables and Options.
                                                              (line  85)
* Didôt points:                          Image Scaling.       (line  31)
* Different cross-reference commands:    Cross Reference Commands.
                                                              (line   6)
* Dimension formatting:                  @dmn.                (line   6)
* Dimensions and image sizes:            Image Scaling.       (line  15)
* Dir categories, choosing:              Directory Category.  (line   6)
* dir directory for Info installation:   Installing an Info File.
                                                              (line   6)
* dir file listing:                      New Info File.       (line   6)
* dir file, creating your own:           Other Info Directories.
                                                              (line  58)
* dir files and Info directories:        Other Info Directories.
                                                              (line   6)
* Dir files, compressed:                 Invoking install-info.
                                                              (line  23)
* dir, created by install-info:          Invoking install-info.
                                                              (line  20)
* Direct formatting of Info files:       Formatting Info files.
                                                              (line   6)
* --dir-file=NAME, for install-info:     Invoking install-info.
                                                              (line  69)
* --disable-encoding:                    Invoking texi2any.   (line  91)
* Display formatting:                    @display.            (line   6)
* Displayed equation, in plain TeX:      Raw Formatter Commands.
                                                              (line  29)
* Displayed equations:                   Inserting Math.      (line  33)
* distinct, value for @kbdinputstyle:    @kbd.                (line  26)
* Distorting images:                     Image Scaling.       (line   6)
* DO_ABOUT:                              HTML Customization Variables.
                                                              (line 105)
* DOC_ENCODING_FOR_INPUT_FILE_NAME:      Other Customization Variables.
                                                              (line  84)
* DOC_ENCODING_FOR_OUTPUT_FILE_NAME:     Other Customization Variables.
                                                              (line  97)
* --docbook:                             Invoking texi2any.   (line  73)
* DocBook and prefatory sections:        @unnumbered @appendix.
                                                              (line  22)
* DocBook output, overview:              Output Formats.      (line  87)
* DocBook, including raw:                Raw Formatter Commands.
                                                              (line  41)
* DOCTYPE:                               Other Customization Variables.
                                                              (line 108)
* Document description:                  @documentdescription.
                                                              (line   6)
* Document input encoding:               @documentencoding.   (line   6)
* Document language, declaring:          @documentlanguage.   (line   6)
* Document permissions:                  Document Permissions.
                                                              (line   6)
* Document strings, internationalization of: Internationalization of Document Strings.
                                                              (line   6)
* Document strings, translation of:      @documentlanguage.   (line  22)
* Document structure, of Texinfo:        Texinfo Document Structure.
                                                              (line   6)
* Document title, specifying:            @settitle.           (line   6)
* --document-language:                   Invoking texi2any.   (line  76)
* documentlanguage customization variable: Internationalization of Document Strings.
                                                              (line   6)
* Dot accent:                            Inserting Accents.   (line  28)
* Dotless i, j:                          Inserting Accents.   (line  50)
* Dots, inserting:                       @dots.               (line   6)
* Double angle quotation marks:          Inserting Quotation Marks.
                                                              (line  23)
* Double guillemets:                     Inserting Quotation Marks.
                                                              (line  23)
* Double left-pointing angle quotation mark: Inserting Quotation Marks.
                                                              (line  23)
* Double low-9 quotation mark:           Inserting Quotation Marks.
                                                              (line  23)
* Double quotation marks:                Inserting Quotation Marks.
                                                              (line  23)
* Double right-pointing angle quotation mark: Inserting Quotation Marks.
                                                              (line  23)
* Double structure, of Texinfo documents: Texinfo Document Structure.
                                                              (line   6)
* Double-colon menu entries:             Less Cluttered Menu Entry.
                                                              (line   6)
* --dry-run, for install-info:           Invoking install-info.
                                                              (line  73)
* DTD, for Texinfo XML:                  Output Formats.      (line  94)
* Dumas, Patrice:                        History.             (line  47)
* Dumas, Patrice <1>:                    HTML Xref.           (line  20)
* DUMP_TEXI:                             Other Customization Variables.
                                                              (line 115)
* DUMP_TREE:                             Other Customization Variables.
                                                              (line 121)
* --dvi:                                 Invoking texi2any.   (line  82)
* DVI file:                              Format with tex/texindex.
                                                              (line   6)
* DVI output, overview:                  Output Formats.      (line  41)
* DVI, output in:                        Format with texi2dvi or texi2pdf.
                                                              (line   6)
* --dvipdf:                              Invoking texi2any.   (line  86)
* --dvipdf, for texi2dvi:                Format with texi2dvi or texi2pdf.
                                                              (line  29)
* dvipdfmx:                              Format with texi2dvi or texi2pdf.
                                                              (line  29)
* dvips:                                 Format with texi2dvi or texi2pdf.
                                                              (line  35)
* dvips (program):                       Output Formats.      (line  41)
* -E FILE:                               Invoking texi2any.   (line 210)
* -e LIMIT:                              Invoking texi2any.   (line 102)
* EC fonts:                              Inserting Quotation Marks.
                                                              (line  44)
* EC fonts, installing:                  Preparing for TeX.   (line  30)
* Ellipsis, inserting:                   @dots.               (line   6)
* Em dash, compared to minus sign:       @minus.              (line   6)
* Em dash, producing:                    Conventions.         (line  35)
* Emacs:                                 Texinfo Mode.        (line   6)
* Emacs shell, format, print from:       Hardcopy with TeX.   (line  18)
* Emphasizing text:                      Emphasis.            (line   6)
* Emphasizing text, font for:            @emph @strong.       (line   6)
* En dash, producing:                    Conventions.         (line  35)
* enable:                                Typed Variables.     (line  31)
* ENABLE_ENCODING:                       Invoking texi2any.   (line  91)
* --enable-encoding:                     Invoking texi2any.   (line  91)
* Encoding, input file names:            Other Customization Variables.
                                                              (line 189)
* Encoding, output file names:           Other Customization Variables.
                                                              (line 279)
* Encoding, declaring:                   @documentencoding.   (line   6)
* end node footnote style:               Footnote Styles.     (line   9)
* End of header line:                    Start and End of Header.
                                                              (line  20)
* END_USEPACKAGE:                        LaTeX Customization Variables.
                                                              (line  31)
* Ending a Sentence:                     Ending a Sentence.   (line   6)
* Ending a Texinfo file:                 Ending a File.       (line   6)
* Entity reference in HTML et al.:       Inserting Unicode.   (line  29)
* Entries for an index:                  Indexing Commands.   (line   6)
* Entries, making index:                 Index Entries.       (line   6)
* --entry=TEXT, for install-info:        Invoking install-info.
                                                              (line  76)
* Enumeration:                           @enumerate.          (line   6)
* Environment indentation:               @exampleindent.      (line   6)
* Environment variable INFOPATH:         Other Info Directories.
                                                              (line  35)
* Environment variable TEXINFO_OUTPUT_FORMAT: texi2any Environment Variables.
                                                              (line   6)
* Environment variable TEXINPUTS:        Preparing for TeX.   (line  49)
* eps image format:                      Image Syntax.        (line  13)
* epsf.tex:                              Image Scaling.       (line  42)
* epsf.tex, installing:                  Preparing for TeX.   (line  26)
* EPUB 3 output, overview:               Output Formats.      (line  33)
* EPUB Container directory:              EPUB Output File and Directory.
                                                              (line   6)
* EPUB output file:                      EPUB Output File and Directory.
                                                              (line  22)
* EPUB_CREATE_CONTAINER_FILE:            Other Customization Variables.
                                                              (line 125)
* EPUB_CREATE_CONTAINER_FILE, avoiding Archive::Zip dependency: Generating EPUB.
                                                              (line  11)
* EPUB_KEEP_CONTAINER_FOLDER:            Other Customization Variables.
                                                              (line 129)
* EPUB, generating:                      Generating EPUB.     (line   6)
* --epub3:                               Invoking texi2any.   (line  98)
* Equation, displayed, in plain TeX:     Raw Formatter Commands.
                                                              (line  29)
* Equations, displayed:                  Inserting Math.      (line  33)
* Equivalence, indicating:               @equiv.              (line   6)
* Error message, indicating:             @error.              (line   6)
* Error messages, line numbers in:       External Macro Processors.
                                                              (line  20)
* ERROR_LIMIT:                           Invoking texi2any.   (line 102)
* --error-limit=LIMIT:                   Invoking texi2any.   (line 102)
* Errors, parsing:                       texi2any in Emacs.   (line  31)
* Escaping to HTML:                      HTML Translation.    (line  20)
* Es-zet:                                Inserting Accents.   (line  50)
* etex:                                  Format with texi2dvi or texi2pdf.
                                                              (line  95)
* Eth:                                   Inserting Accents.   (line  50)
* Euro font:                             @euro.               (line   9)
* Euro font, installing:                 Preparing for TeX.   (line  34)
* Euro symbol, and encodings:            @documentencoding.   (line  26)
* Euro symbol, producing:                @euro.               (line   6)
* European A4 paper:                     A4 Paper.            (line   6)
* European Computer Modern fonts:        Inserting Quotation Marks.
                                                              (line  44)
* European Computer Modern fonts, installing: Preparing for TeX.
                                                              (line  30)
* Evaluation glyph:                      @result.             (line   6)
* Example indentation:                   @exampleindent.      (line   6)
* Example menu:                          Menu Example.        (line   6)
* example, value for @kbdinputstyle:     @kbd.                (line  26)
* Examples in smaller fonts:             small.               (line   6)
* Examples, formatting them:             @example.            (line   6)
* Examples, glyphs for:                  Glyphs for Programming.
                                                              (line   6)
* Expanding macros:                      Invoking Macros.     (line   6)
* Expansion of 8-bit characters in HTML cross-references: HTML Xref 8-bit Character Expansion.
                                                              (line   6)
* Expansion of macros, contexts for:     Macro Details.       (line   6)
* Expansion, indicating:                 @expansion.          (line   6)
* expansion, of node names in HTML cross-references: HTML Xref Node Name Expansion.
                                                              (line   6)
* Expressions in a program, indicating:  @code.               (line  10)
* EXTENSION:                             Other Customization Variables.
                                                              (line 135)
* External macro processors:             External Macro Processors.
                                                              (line   6)
* EXTERNAL_CROSSREF_EXTENSION:           HTML Customization Variables.
                                                              (line 120)
* EXTERNAL_CROSSREF_SPLIT:               HTML Customization Variables.
                                                              (line 109)
* EXTERNAL_DIR:                          HTML Customization Variables.
                                                              (line 115)
* EXTRA_HEAD:                            HTML Customization Variables.
                                                              (line 124)
* -F:                                    Invoking texi2any.   (line 133)
* -f WIDTH:                              Invoking texi2any.   (line 107)
* Family names, in all capitals:         @acronym.            (line  33)
* Features of Texinfo, adapting to:      Testing for Texinfo Commands.
                                                              (line   6)
* Feminine ordinal:                      Inserting Accents.   (line  50)
* feymr10:                               @euro.               (line   9)
* feymr10, installing:                   Preparing for TeX.   (line  34)
* File ending:                           Ending a File.       (line   6)
* File name collision:                   @setfilename.        (line  46)
* file recorder for TeX:                 Format with texi2dvi or texi2pdf.
                                                              (line 100)
* File sectioning structure, showing:    Showing the Structure.
                                                              (line   6)
* FILLCOLUMN:                            Invoking texi2any.   (line 107)
* --fill-column=WIDTH:                   Invoking texi2any.   (line 107)
* filll TeX dimension:                   Copyright.           (line  12)
* Final output:                          Overfull hboxes.     (line   6)
* Finding badly referenced nodes:        Running Info-validate.
                                                              (line   6)
* Fine-tuning, and hyphenation:          @- @hyphenation.     (line   6)
* First line of a Texinfo file:          First Line.          (line   6)
* First node:                            First Node.          (line   6)
* First paragraph, suppressing indentation of: @firstparagraphindent.
                                                              (line   6)
* Fixed-width font:                      Fonts.               (line  44)
* Flag conditionals, brace-delimited:    @inlineifset @inlineifclear.
                                                              (line   6)
* Float environment:                     @float.              (line   6)
* Floating accents, inserting:           Inserting Accents.   (line   6)
* Floating, not yet implemented:         Floats.              (line  10)
* Floats:                                Floats.              (line   6)
* Floats, list of:                       @listoffloats.       (line   6)
* Floats, making unnumbered:             @float.              (line  39)
* Floats, numbering of:                  @float.              (line  53)
* Flooding:                              @pxref.              (line  13)
* fn (function) index:                   Predefined Indices.  (line  12)
* Font for multitable heading rows:      Multitable Rows.     (line  17)
* Font size, reducing:                   Fonts.               (line   6)
* Fonts for indices:                     @syncodeindex.       (line  47)
* Fonts for printing:                    Fonts.               (line   6)
* Footings:                              Headings.            (line   6)
* Footnote style, end:                   Footnote Styles.     (line   9)
* Footnote style, separate:              Footnote Styles.     (line  26)
* FOOTNOTE_END_HEADER_LEVEL:             HTML Customization Variables.
                                                              (line 127)
* FOOTNOTE_SEPARATE_HEADER_LEVEL:        HTML Customization Variables.
                                                              (line 131)
* Footnotes:                             Footnotes.           (line   6)
* footnotestyle:                         Invoking texi2any.   (line 116)
* --footnote-style=STYLE:                Invoking texi2any.   (line 116)
* --force:                               Invoking texi2any.   (line 133)
* FORCE:                                 Invoking texi2any.   (line 133)
* Force line break:                      Line Breaks.         (line   6)
* Forcing indentation:                   @indent.             (line   6)
* Forcing line and page breaks:          Breaks.              (line   6)
* Form feed character:                   Conventions.         (line  52)
* Format a dimension:                    @dmn.                (line   6)
* Format and print hardcopy:             Hardcopy with TeX.   (line   6)
* Format and print in Texinfo mode:      Texinfo Mode Printing.
                                                              (line   6)
* Format with the compile command:       Compile-Command.     (line   6)
* FORMAT_MENU:                           Other Customization Variables.
                                                              (line 139)
* Format, print from Emacs shell:        Hardcopy with TeX.   (line  18)
* Formats for images:                    Image Syntax.        (line  10)
* Formatting commands:                   Conventions.         (line  16)
* Formatting examples:                   @example.            (line   6)
* Formatting for Info:                   Info Formatting.     (line   6)
* Formatting headings and footings:      Headings.            (line   6)
* Formatting partial documents:          Formatting Partial Documents.
                                                              (line   6)
* Formatting requirements:               Minimum.             (line  19)
* Formatting with tex and texindex:      Format with tex/texindex.
                                                              (line   6)
* Formulas, mathematical:                Inserting Math.      (line   6)
* Four- and five argument forms of cross-references: Four and Five Arguments.
                                                              (line   6)
* Fox, Brian:                            History.             (line   6)
* FRAMES:                                HTML Customization Variables.
                                                              (line 135)
* FRAMESET_DOCTYPE:                      HTML Customization Variables.
                                                              (line 139)
* Free Documentation License, including entire: GNU Sample Texts.
                                                              (line  40)
* Free software:                         Copying Conditions.  (line   6)
* French quotation marks:                Inserting Quotation Marks.
                                                              (line  23)
* French spacing:                        @frenchspacing.      (line   6)
* Frequently used commands, inserting:   Inserting.           (line   6)
* Frontmatter, text in:                  The Body of the Document.
                                                              (line   6)
* Full texts, GNU:                       GNU Sample Texts.    (line   6)
* Function definitions:                  Functions Commands.  (line   6)
* Functions, in typed languages:         Typed Functions.     (line   6)
* Future of Texinfo implementations:     History.             (line 110)
* General syntactic conventions:         Conventions.         (line   6)
* Generating EPUB:                       Generating EPUB.     (line   6)
* Generating HTML:                       Generating HTML.     (line   6)
* Generating menus with indices:         Printing Indices & Menus.
                                                              (line   6)
* Generating page headings:              Heading Generation.  (line   6)
* Generating plain text files with --no-headers: Invoking texi2any.
                                                              (line 215)
* Generating plain text files with --plaintext: Invoking texi2any.
                                                              (line 333)
* German quotation marks:                Inserting Quotation Marks.
                                                              (line  23)
* German S:                              Inserting Accents.   (line  50)
* Global Document Commands:              Global Document Commands.
                                                              (line   6)
* Globbing:                              Format with tex/texindex.
                                                              (line  30)
* Glyphs for programming:                Glyphs for Programming.
                                                              (line   6)
* Glyphs for text:                       Glyphs for Text.     (line   6)
* GNU Emacs:                             Texinfo Mode.        (line   6)
* GNU Emacs shell, format, print from:   Hardcopy with TeX.   (line  18)
* GNU Free Documentation License, including entire: GNU Sample Texts.
                                                              (line  40)
* GNU sample texts:                      GNU Sample Texts.    (line   6)
* Going to other Info files' nodes:      Other Info Files.    (line   6)
* Grave accent:                          Inserting Accents.   (line  28)
* Grave accent, standalone:              Inserting Quote Characters.
                                                              (line  23)
* Grave accent, vs. left quote:          Inserting Quotation Marks.
                                                              (line  15)
* Group (hold text together vertically): @group.              (line   6)
* Grouping two definitions together:     @deffnx.             (line   6)
* GUI click sequence:                    Click Sequences.     (line   6)
* Guillemets:                            Inserting Quotation Marks.
                                                              (line  23)
* Guillemots:                            Inserting Quotation Marks.
                                                              (line  23)
* -h:                                    Invoking texi2any.   (line 138)
* Hacek accent:                          Inserting Accents.   (line  28)
* Hardcopy, printing it:                 Hardcopy with TeX.   (line   6)
* Hash sign, inserting:                  Inserting a Hashsign.
                                                              (line   6)
* hbox, overfull:                        Overfull hboxes.     (line   6)
* <head> HTML tag, and <link>:           HTML Customization Variables.
                                                              (line 334)
* Header for Texinfo files:              Texinfo File Header. (line   6)
* Header of a Texinfo file:              First Line.          (line   6)
* HEADER_IN_TABLE:                       HTML Customization Variables.
                                                              (line 142)
* HEADERS:                               Invoking texi2any.   (line 215)
* Heading row, in table:                 Multitable Rows.     (line  12)
* Headings:                              Headings.            (line   6)
* Headings, indentation after:           @firstparagraphindent.
                                                              (line   6)
* Height of images:                      Image Scaling.       (line   6)
* Height of text area:                   @pagesizes.          (line   6)
* --help, for texi2any:                  Invoking texi2any.   (line 138)
* --help, for texindex:                  Invoking install-info.
                                                              (line  83)
* help2man:                              Adding Output Formats.
                                                              (line  42)
* Hierarchical documents, and menus:     Writing a Menu.      (line  29)
* HIGHLIGHT_SYNTAX:                      Other Customization Variables.
                                                              (line 149)
* HIGHLIGHT_SYNTAX_DEFAULT_LANGUAGE:     Other Customization Variables.
                                                              (line 159)
* Highlighting text:                     Indicating.          (line   6)
* Highlighting, customized:              @definfoenclose.     (line   6)
* Hints:                                 Tips.                (line   8)
* History of Texinfo:                    History.             (line  14)
* Holder of copyright for FSF works:     @copying.            (line  53)
* Holding text together vertically:      @group.              (line   6)
* href, producing HTML:                  @url.                (line   6)
* --html:                                Invoking texi2any.   (line 142)
* HTML cross-references:                 HTML Xref.           (line   6)
* HTML cross-references, 8-bit character expansion: HTML Xref 8-bit Character Expansion.
                                                              (line   6)
* HTML cross-references, command expansion: HTML Xref Command Expansion.
                                                              (line   6)
* HTML cross-references, configuration:  HTML Xref Configuration.
                                                              (line   6)
* HTML cross-references, link basics:    HTML Xref Link Basics.
                                                              (line   6)
* HTML cross-references, mismatch:       HTML Xref Mismatch.  (line   6)
* HTML cross-references, node name expansion: HTML Xref Node Name Expansion.
                                                              (line   6)
* HTML output, and encodings:            @documentencoding.   (line  61)
* HTML output, browser compatibility of: HTML Translation.    (line  27)
* HTML output, overview:                 Output Formats.      (line  22)
* HTML output, split:                    HTML Splitting.      (line   6)
* HTML translation:                      HTML Translation.    (line   6)
* HTML_MATH:                             HTML Customization Variables.
                                                              (line 146)
* HTML_ROOT_ELEMENT_ATTRIBUTES:          HTML Customization Variables.
                                                              (line 154)
* HTML, and CSS:                         HTML CSS.            (line   6)
* HTML, including raw:                   Raw Formatter Commands.
                                                              (line  41)
* HTMLXREF_FILE:                         HTML Customization Variables.
                                                              (line 158)
* HTMLXREF_MODE:                         HTML Customization Variables.
                                                              (line 171)
* htmlxref.cnf:                          HTML Xref Configuration.
                                                              (line   6)
* http-equiv, and charset specification: @documentencoding.   (line  61)
* Hungarian umlaut accent:               Inserting Accents.   (line  28)
* Hurricanes:                            @ref.                (line  12)
* Hyphen, breakpoint within @code:       @allowcodebreaks.    (line   6)
* Hyphen, compared to minus:             @minus.              (line   6)
* Hyphenation patterns, language-dependent: @documentlanguage.
                                                              (line  46)
* Hyphenation, helping TeX do:           @- @hyphenation.     (line   6)
* Hyphenation, preventing:               @w.                  (line  23)
* Hyphens in source, two or three in a row: Conventions.      (line  35)
* ı (dotless i):                         Inserting Accents.   (line  50)
* -I DIR:                                Invoking texi2any.   (line 148)
* I18n, of document strings:             Internationalization of Document Strings.
                                                              (line   6)
* Icelandic:                             Inserting Accents.   (line  50)
* ICONS:                                 HTML Customization Variables.
                                                              (line 179)
* If text conditionally visible:         Conditionals.        (line   6)
* --ifdocbook:                           Invoking texi2any.   (line 157)
* --ifhtml:                              Invoking texi2any.   (line 158)
* --ifinfo:                              Invoking texi2any.   (line 159)
* --iflatex:                             Invoking texi2any.   (line 160)
* --ifplaintext:                         Invoking texi2any.   (line 161)
* --iftex:                               Invoking texi2any.   (line 162)
* --ifxml:                               Invoking texi2any.   (line 163)
* IGNORE_REF_TO_TOP_NODE_UP:             HTML Customization Variables.
                                                              (line 206)
* IGNORE_SPACE_AFTER_BRACED_COMMAND_NAME: Other Customization Variables.
                                                              (line 163)
* Ignored before @setfilename:           @setfilename.        (line  21)
* Ignored text:                          Comments.            (line  27)
* Image formats:                         Image Syntax.        (line  10)
* IMAGE_LINK_PREFIX:                     HTML Customization Variables.
                                                              (line 182)
* Images:                                Images.              (line   6)
* Images, alternate text for:            Image Syntax.        (line  61)
* Images, in Info format:                Info Format Image.   (line   6)
* Images, scaling:                       Image Scaling.       (line   6)
* Implementation, texi2any as reference: History.             (line 100)
* Implicit pointer creation with texi2any: Writing a Node.    (line  31)
* @import specifications, in CSS files:  HTML CSS.            (line  35)
* <important> DocBook tag:               @quotation.          (line  48)
* Inches:                                Image Scaling.       (line  25)
* Include file sample:                   Sample Include File. (line   6)
* @include file sample:                  Sample Include File. (line   6)
* Include files:                         Include Files.       (line   6)
* Include files requirements:            Include Files Requirements.
                                                              (line   6)
* Include files, and section levels:     Raise/lower sections.
                                                              (line  16)
* Including a file verbatim:             @verbatiminclude.    (line   6)
* Including permissions text:            @insertcopying.      (line   6)
* Indentation undoing:                   @exdent.             (line   6)
* Indentation, forcing:                  @indent.             (line   6)
* Indentation, omitting:                 @noindent.           (line   6)
* Indented text block:                   @indentedblock.      (line   6)
* Indenting environments:                @exampleindent.      (line   6)
* Indenting paragraphs, control of:      @paragraphindent.    (line   6)
* Indenting, suppressing of first paragraph: @firstparagraphindent.
                                                              (line   6)
* Index entries:                         Indexing Commands.   (line   6)
* Index entries, advice on writing:      Index Entries.       (line   6)
* Index entries, making:                 Index Entries.       (line   6)
* Index file names:                      Format with tex/texindex.
                                                              (line  23)
* Index font types:                      Indexing Commands.   (line  41)
* index sorting:                         Indexing Commands.   (line  47)
* INDEX_ENTRY_COLON:                     HTML Customization Variables.
                                                              (line 186)
* INDEX_SPECIAL_CHARS_WARNING:           Other Customization Variables.
                                                              (line 167)
* Indexing table entries automatically:  @ftable @vtable.     (line   6)
* Indexing, advanced:                    Advanced Indexing.   (line   6)
* Indicating commands, definitions, etc.: Indicating.         (line   6)
* Indicating evaluation:                 @result.             (line   6)
* Indices:                               Indices.             (line   6)
* Indices, combining them:               Combining Indices.   (line   6)
* Indices, defining new:                 New Indices.         (line   6)
* Indices, in Info format:               Info Format Printindex.
                                                              (line   6)
* Indices, printing and menus:           Printing Indices & Menus.
                                                              (line   6)
* Indices, sorting:                      Hardcopy with TeX.   (line   6)
* Indices, two letter names:             @syncodeindex.       (line  17)
* Indirect subfiles:                     Tag and Split Files. (line  10)
* Indirect table, in Info format:        Info Format Indirect Table.
                                                              (line   6)
* --info:                                Invoking texi2any.   (line 182)
* Info batch formatting:                 Batch Formatting.    (line   6)
* Info file name, choosing:              @setfilename.        (line  46)
* Info files:                            Info Files.          (line   6)
* Info files, installation:              Installing an Info File.
                                                              (line   6)
* Info files, listing a new:             New Info File.       (line   6)
* Info files, making a tag table:        Tagifying.           (line   6)
* Info files, splitting manually:        Splitting.           (line   6)
* Info format specification:             Info Format Specification.
                                                              (line   6)
* Info format, and menus:                Menu Location.       (line  10)
* Info formatting:                       Info Formatting.     (line   6)
* Info installed in another directory:   Other Info Directories.
                                                              (line   6)
* Info nodes, in Info format:            Info Format Regular Nodes.
                                                              (line   6)
* Info output, and encoding:             @documentencoding.   (line  46)
* Info output, overview:                 Output Formats.      (line   9)
* Info validating a large file:          Using Info-validate. (line   6)
* INFO_JS_DIR:                           HTML Customization Variables.
                                                              (line 190)
* INFO_SPECIAL_CHARS_QUOTE:              Other Customization Variables.
                                                              (line 174)
* INFO_SPECIAL_CHARS_WARNING:            Other Customization Variables.
                                                              (line 181)
* Info; other files' nodes:              Other Info Files.    (line   6)
* --info-dir=DIR, for install-info:      Invoking install-info.
                                                              (line  91)
* --infodir=DIR, for install-info:       Invoking install-info.
                                                              (line  95)
* --info-file=FILE, for install-info:    Invoking install-info.
                                                              (line  87)
* INFOPATH:                              Other Info Directories.
                                                              (line  35)
* --init-file=FILE:                      Invoking texi2any.   (line 190)
* Initialization file for TeX input:     Preparing for TeX.   (line   6)
* Inline conditionals:                   Inline Conditionals. (line   6)
* INLINE_CSS_STYLE:                      HTML Customization Variables.
                                                              (line 209)
* Input encoding, declaring:             @documentencoding.   (line   6)
* \input source line ignored:            @setfilename.        (line  21)
* INPUT_FILE_NAME_ENCODING:              Other Customization Variables.
                                                              (line 189)
* Insert nodes, menus automatically:     Updating Nodes and Menus.
                                                              (line   6)
* Inserting @ (literal @):               Inserting an Atsign. (line   6)
* Inserting &:                           Inserting an Ampersand.
                                                              (line   6)
* Inserting #:                           Inserting a Hashsign.
                                                              (line   6)
* Inserting accents:                     Inserting Accents.   (line   6)
* Inserting dots:                        @dots.               (line   6)
* Inserting ellipsis:                    @dots.               (line   6)
* Inserting frequently used commands:    Inserting.           (line   6)
* Inserting indentation:                 @indent.             (line   6)
* Inserting quotation marks:             Inserting Quotation Marks.
                                                              (line   6)
* Inserting quote characters:            Inserting Quote Characters.
                                                              (line   6)
* Inserting space:                       Inserting Space.     (line   6)
* Inserting special characters and symbols: Insertions.       (line   6)
* INSTALL file, generating:              Invoking texi2any.   (line 333)
* install-info:                          Invoking install-info.
                                                              (line   6)
* Installing an Info file:               Installing an Info File.
                                                              (line   6)
* Installing Info in another directory:  Other Info Directories.
                                                              (line   6)
* Internal links, of HTML:               Invoking texi2any.   (line 198)
* INTERNAL_LINKS:                        Invoking texi2any.   (line 198)
* --internal-links=FILE:                 Invoking texi2any.   (line 198)
* Internationalization:                  Internationalization.
                                                              (line   6)
* Internationalization of document strings: Internationalization of Document Strings.
                                                              (line   6)
* Introduction to Texinfo:               Overview.            (line   6)
* Invalid characters in node names:      Node Line Requirements.
                                                              (line  36)
* Invoking macros:                       Invoking Macros.     (line   6)
* Invoking nodes, including in dir file: Installing Dir Entries.
                                                              (line  56)
* Invoking pod2texi:                     Invoking pod2texi.   (line   6)
* ISO 3166 country codes:                @documentlanguage.   (line  53)
* ISO 639-2 language codes:              @documentlanguage.   (line  53)
* Italic font:                           Fonts.               (line  31)
* --item=TEXT, for install-info:         Invoking install-info.
                                                              (line  98)
* Itemization:                           @itemize.            (line   6)
* jpeg image format:                     Image Syntax.        (line  16)
* JS_WEBLABELS:                          HTML Customization Variables.
                                                              (line 213)
* JS_WEBLABELS_FILE:                     HTML Customization Variables.
                                                              (line 214)
* ȷ (dotless j):                         Inserting Accents.   (line  50)
* --keep-old, for install-info:          Invoking install-info.
                                                              (line 102)
* Keyboard input:                        @kbd.                (line   6)
* Keys, recommended names:               @key.                (line  20)
* Keyword expansion, preventing:         @w.                  (line  27)
* Keywords, indicating:                  @code.               (line  10)
* Knuth, Donald:                         Printed Books.       (line   6)
* ky (keystroke) index:                  Predefined Indices.  (line  15)
* ł:                                     Inserting Accents.   (line  50)
* Ł:                                     Inserting Accents.   (line  50)
* L2H_CLEAN:                             latex2html Customization Variables.
                                                              (line  14)
* L2H_FILE:                              latex2html Customization Variables.
                                                              (line  18)
* L2H_HTML_VERSION:                      latex2html Customization Variables.
                                                              (line  22)
* L2H_L2H:                               latex2html Customization Variables.
                                                              (line  25)
* L2H_SKIP:                              latex2html Customization Variables.
                                                              (line  28)
* L2H_TMP:                               latex2html Customization Variables.
                                                              (line  35)
* lang, HTML attribute:                  HTML Customization Variables.
                                                              (line  49)
* Language codes:                        @documentlanguage.   (line  53)
* Language, declaring:                   @documentlanguage.   (line   6)
* --language, for texi2dvi:              Format with texi2dvi or texi2pdf.
                                                              (line  39)
* Larger or smaller pages:               Magnification.       (line   6)
* --latex:                               Invoking texi2any.   (line 206)
* LaTeX logo:                            @TeX @LaTeX.         (line   6)
* LaTeX output, overview:                Output Formats.      (line  73)
* LaTeX, including raw:                  Raw Formatter Commands.
                                                              (line  41)
* LaTeX, processing with texi2dvi:       Format with texi2dvi or texi2pdf.
                                                              (line  39)
* Left quotation marks:                  Inserting Quotation Marks.
                                                              (line  23)
* Left-pointing angle quotation marks:   Inserting Quotation Marks.
                                                              (line  23)
* Legal paper, printing on:              @pagesizes.          (line  16)
* Length of file names:                  @setfilename.        (line  46)
* Less cluttered menu entry:             Less Cluttered Menu Entry.
                                                              (line   6)
* libintl-perl Gettext implementation:   Internationalization of Document Strings.
                                                              (line  12)
* Libre software:                        Copying Conditions.  (line   6)
* License for all-permissive copying:    All-permissive Copying License.
                                                              (line   6)
* License for verbatim copying:          Verbatim Copying License.
                                                              (line   6)
* Limited scope of Texinfo:              Overview.            (line  27)
* Line breaks, awkward:                  Breaks.              (line   6)
* Line breaks, controlling:              Line Breaks.         (line   6)
* Line breaks, URLs:                     URL Line Breaking.   (line   6)
* Line breaks, preventing:               @w.                  (line   6)
* Line length, column widths as fraction of: Multitable Column Widths.
                                                              (line  11)
* Line macros:                           Line Macros.         (line   6)
* Line numbers, in error messages:       External Macro Processors.
                                                              (line  20)
* Line spacing:                          @sp.                 (line   6)
* <link> HTML tag, in <head>:            HTML Customization Variables.
                                                              (line 334)
* Links, coloring in PDF output:         PDF Colors.          (line   6)
* Lisp example:                          @lisp.               (line   6)
* Lisp examples in smaller fonts:        small.               (line   6)
* List of @-commands:                    Command List.        (line   6)
* List of floats:                        @listoffloats.       (line   6)
* Listing a new Info file:               New Info File.       (line   6)
* Lists and tables, making:              Lists and Tables.    (line   6)
* Literate programming, with Texinfo and awk: Details of texindex.
                                                              (line  17)
* Local variable section, in Info format: Info Format Local Variables.
                                                              (line   6)
* Local variables:                       Compile-Command.     (line   6)
* Local Variables section, for encoding: @documentencoding.   (line  46)
* LOCALE_ENCODING:                       Other Customization Variables.
                                                              (line 197)
* Locale, declaring:                     @documentlanguage.   (line   6)
* Location of menus:                     Menu Location.       (line   6)
* Logos, TeX:                            @TeX @LaTeX.         (line   6)
* Longest nodes, finding:                Other Customization Variables.
                                                              (line 309)
* Looking for badly referenced nodes:    Running Info-validate.
                                                              (line   6)
* Lowering and raising sections:         Raise/lower sections.
                                                              (line   6)
* lpr (DVI print command):               Print with lpr.      (line   6)
* lpr-d, replacements on MS-DOS/MS-Windows: Print with lpr.   (line  26)
* Lzip-compressed dir files, reading:    Invoking install-info.
                                                              (line  23)
* LZMA-compressed dir files, reading:    Invoking install-info.
                                                              (line  23)
* Macro definitions, programming-language: Functions Commands.
                                                              (line   6)
* Macro definitions, Texinfo:            Defining Macros.     (line   6)
* Macro details:                         Macro Details.       (line   6)
* Macro expansion, contexts for:         Macro Details.       (line   6)
* Macro expansion, indicating:           @expansion.          (line   6)
* Macro invocation:                      Invoking Macros.     (line   6)
* Macro names, valid characters in:      Defining Macros.     (line  16)
* Macro processors, external:            External Macro Processors.
                                                              (line   6)
* MACRO_EXPAND:                          Invoking texi2any.   (line 210)
* --macro-expand=FILE:                   Invoking texi2any.   (line 210)
* Macron accent:                         Inserting Accents.   (line  28)
* Macros:                                Defining New Texinfo Commands.
                                                              (line   6)
* Macros taking whole line as an argument: Line Macros.       (line   6)
* Macros, undefining:                    Defining Macros.     (line  56)
* Magnified printing:                    Magnification.       (line   6)
* Mailto link:                           @email.              (line  10)
* makeinfo:                              Invoking texi2any.   (line   6)
* makeinfo inside Emacs:                 texi2any in Emacs.   (line   6)
* makeinfo options:                      Invoking texi2any.   (line  16)
* Making a printed manual:               Hardcopy with TeX.   (line   6)
* Making a tag table manually:           Tagifying.           (line   6)
* Making cross-references:               Cross References.    (line   6)
* Making line and page breaks:           Breaks.              (line   6)
* Making lists and tables:               Lists and Tables.    (line   6)
* Man page output, not supported:        Adding Output Formats.
                                                              (line  32)
* Man page, reference to:                @url.                (line  22)
* Manual characteristics, printed:       Printed Books.       (line   6)
* Manual, referring to as a whole:       Referring to a Manual as a Whole.
                                                              (line   6)
* Margins on page, not controllable:     @pagesizes.          (line  21)
* Marking text within a paragraph:       Marking Text.        (line   6)
* Marking words and phrases:             Marking Text.        (line   6)
* Masculine ordinal:                     Inserting Accents.   (line  50)
* Master menu:                           Master Menu Parts.   (line   6)
* Math output for HTML:                  Inserting Math.      (line  20)
* Mathematical expressions, inserting:   Inserting Math.      (line   6)
* MATHJAX_SCRIPT:                        MathJax Customization Variables.
                                                              (line  10)
* MATHJAX_SOURCE:                        MathJax Customization Variables.
                                                              (line  16)
* MAX_HEADER_LEVEL:                      HTML Customization Variables.
                                                              (line 234)
* MAX_MACRO_CALL_NESTING:                Other Customization Variables.
                                                              (line 201)
* --max-width=COLUMN, for install-info:  Invoking install-info.
                                                              (line 106)
* --maxwidth=COLUMN, for install-info:   Invoking install-info.
                                                              (line 110)
* Menu description, start:               Inserting.           (line 104)
* Menu entries with two colons:          Less Cluttered Menu Entry.
                                                              (line   6)
* Menu example:                          Menu Example.        (line   6)
* Menu location:                         Menu Location.       (line   6)
* Menu parts:                            Menu Parts.          (line   6)
* @menu parts:                           Menu Parts.          (line   6)
* Menu writing:                          Writing a Menu.      (line   6)
* MENU_ENTRY_COLON:                      HTML Customization Variables.
                                                              (line 238)
* MENU_SYMBOL:                           HTML Customization Variables.
                                                              (line 242)
* Menu, master:                          Master Menu Parts.   (line   6)
* --menuentry=TEXT, for install-info:    Invoking install-info.
                                                              (line 113)
* Menus:                                 Menus.               (line   6)
* Menus generated with indices:          Printing Indices & Menus.
                                                              (line   6)
* Menus, in Info format:                 Info Format Menu.    (line   6)
* Menus, omitting with --no-headers:     Invoking texi2any.   (line 215)
* Menus, omitting with --plaintext:      Invoking texi2any.   (line 333)
* MESSAGE_ENCODING:                      Other Customization Variables.
                                                              (line 206)
* META key:                              @key.                (line  44)
* Meta keys, specifying:                 @key.                (line  20)
* <meta> HTML tag, and charset specification: @documentencoding.
                                                              (line  61)
* <meta> HTML tag, and document description: @documentdescription.
                                                              (line   6)
* Meta-syntactic chars for arguments:    Optional Arguments.  (line   6)
* Methods, object-oriented:              Object-Oriented Methods.
                                                              (line   6)
* Millimeters:                           Image Scaling.       (line  29)
* Mils, argument to @need:               @need.               (line   6)
* Minimal requirements for formatting:   Minimum.             (line  19)
* Minimal Texinfo file (requirements):   Minimum.             (line   6)
* Minus sign:                            @minus.              (line   6)
* Mismatched HTML cross-reference source and target: HTML Xref Mismatch.
                                                              (line   6)
* Mistakes, catching:                    Catching Mistakes.   (line   6)
* Mode, using Texinfo:                   Texinfo Mode.        (line   6)
* MONOLITHIC:                            HTML Customization Variables.
                                                              (line 247)
* monolithic manuals, for HTML cross-references: HTML Xref Configuration.
                                                              (line  70)
* Monospace font:                        Fonts.               (line  44)
* Multiple dashes in source:             Conventions.         (line  35)
* Multiple spaces:                       Multiple Spaces.     (line   6)
* Multitable column widths:              Multitable Column Widths.
                                                              (line   6)
* Multitable rows:                       Multitable Rows.     (line   6)
* --name=TEXT, for install-info:         Invoking install-info.
                                                              (line 116)
* Names for indices:                     @syncodeindex.       (line  17)
* Names of index files:                  Format with tex/texindex.
                                                              (line  23)
* Names of macros, valid characters of:  Defining Macros.     (line  16)
* Names recommended for keys:            @key.                (line  20)
* NASA, as acronym:                      @acronym.            (line   6)
* Navigation bar, in HTML output:        HTML Translation.    (line  14)
* Navigation footer:                     HTML Customization Variables.
                                                              (line 367)
* Navigation links, omitting:            Invoking texi2any.   (line 222)
* Navigation panel, bottom of page:      HTML Customization Variables.
                                                              (line 367)
* Need space at page bottom:             @need.               (line   6)
* Nested footnotes:                      Footnote Commands.   (line  44)
* Nesting conditionals:                  Conditional Nesting. (line   6)
* New index defining:                    New Indices.         (line   6)
* New Info file, listing it in dir file: New Info File.       (line   6)
* New Texinfo commands, defining:        Defining New Texinfo Commands.
                                                              (line   6)
* Newlines, avoiding in conditionals:    Inline Conditionals. (line   6)
* NEWS file for Texinfo:                 Testing for Texinfo Commands.
                                                              (line  24)
* Next node of Top node:                 First Node.          (line  41)
* NLS:                                   History.             (line  17)
* NO_CSS:                                HTML Customization Variables.
                                                              (line 251)
* NO_CUSTOM_HTML_ATTRIBUTE:              HTML Customization Variables.
                                                              (line 254)
* NO_NUMBER_FOOTNOTE_SYMBOL:             HTML Customization Variables.
                                                              (line 258)
* NO_TOP_NODE_OUTPUT:                    Other Customization Variables.
                                                              (line 214)
* NO_USE_SETFILENAME:                    Other Customization Variables.
                                                              (line 234)
* NO_WARN:                               Invoking texi2any.   (line 254)
* Node line requirements:                Node Line Requirements.
                                                              (line   6)
* @node line writing:                    Writing a Node.      (line   6)
* Node line writing:                     Writing a Node.      (line   6)
* node name expansion, in HTML cross-references: HTML Xref Node Name Expansion.
                                                              (line   6)
* Node names must be unique:             Node Line Requirements.
                                                              (line   8)
* Node names, choosing:                  Node Names.          (line   6)
* Node names, invalid characters in:     Node Line Requirements.
                                                              (line  36)
* Node separators, omitting with --no-headers: Invoking texi2any.
                                                              (line 215)
* Node separators, omitting with --plaintext: Invoking texi2any.
                                                              (line 333)
* NODE_FILES:                            Invoking texi2any.   (line 229)
* NODE_NAME_IN_INDEX:                    HTML Customization Variables.
                                                              (line 262)
* NODE_NAME_IN_MENU:                     Other Customization Variables.
                                                              (line 239)
* Node, defined:                         Nodes.               (line   6)
* Node, Top:                             The Top Node.        (line   6)
* --node-files:                          Invoking texi2any.   (line 229)
* --node-files, and HTML cross-references: HTML Xref Configuration.
                                                              (line  89)
* Nodes in other Info files:             Other Info Files.    (line   6)
* Nodes, catching mistakes:              Catching Mistakes.   (line   6)
* Nodes, checking for badly referenced:  Running Info-validate.
                                                              (line   6)
* Nodes, deleting or renaming:           @anchor.             (line  43)
* --no-headers:                          Invoking texi2any.   (line 215)
* --no-ifdocbook:                        Invoking texi2any.   (line 169)
* --no-ifhtml:                           Invoking texi2any.   (line 170)
* --no-ifinfo:                           Invoking texi2any.   (line 171)
* --no-iflatex:                          Invoking texi2any.   (line 172)
* --no-ifplaintext:                      Invoking texi2any.   (line 173)
* --no-iftex:                            Invoking texi2any.   (line 174)
* --no-ifxml:                            Invoking texi2any.   (line 175)
* --no-indent, for install-info:         Invoking install-info.
                                                              (line 127)
* Non-breakable space, fixed:            @w.                  (line   8)
* Non-breakable space, variable:         @tie.                (line   6)
* none, value for @urefbreakstyle:       URL Line Breaking.   (line  24)
* --no-node-files:                       Invoking texi2any.   (line 229)
* nonsplit Info file:                    Tag and Split Files. (line   6)
* Nonsplit manuals, Info format of:      Info Format Whole Manual.
                                                              (line   6)
* --no-number-footnotes:                 Invoking texi2any.   (line 258)
* --no-number-sections:                  Invoking texi2any.   (line 265)
* --no-pointer-validate:                 Invoking texi2any.   (line 245)
* Normalization Form C, Unicode:         HTML Xref 8-bit Character Expansion.
                                                              (line  44)
* --no-split:                            Invoking texi2any.   (line 358)
* Not ending a sentence:                 Not Ending a Sentence.
                                                              (line   6)
* <note> DocBook tag:                    @quotation.          (line  48)
* novalidate:                            Customization Variables and Options.
                                                              (line  22)
* --no-validate:                         Invoking texi2any.   (line 245)
* --no-warn:                             Invoking texi2any.   (line 254)
* Number sign, inserting:                Inserting a Hashsign.
                                                              (line  10)
* NUMBER_FOOTNOTES:                      Invoking texi2any.   (line 258)
* NUMBER_SECTIONS:                       Invoking texi2any.   (line 265)
* Numbering of floats:                   @float.              (line  53)
* --number-sections:                     Invoking texi2any.   (line 265)
* º:                                     Inserting Accents.   (line  50)
* ø:                                     Inserting Accents.   (line  50)
* Ø:                                     Inserting Accents.   (line  50)
* -o FILE:                               Invoking texi2any.   (line 272)
* O'Dea, Brendan:                        Adding Output Formats.
                                                              (line  42)
* Object-oriented programming:           Abstract Objects.    (line   6)
* Oblique font:                          Fonts.               (line  41)
* Obtaining TeX:                         Use TeX.             (line  11)
* Occurrences, listing with @occur:      Using occur.         (line   6)
* Octotherp, inserting:                  Inserting a Hashsign.
                                                              (line  10)
* œ:                                     Inserting Accents.   (line  50)
* Œ:                                     Inserting Accents.   (line  50)
* Ogonek diacritic:                      Inserting Accents.   (line  28)
* Omitting indentation:                  @noindent.           (line   6)
* One-argument form of cross-references: One Argument.        (line   6)
* OPEN_DOUBLE_QUOTE_SYMBOL:              Other Customization Variables.
                                                              (line 257)
* OPEN_QUOTE_SYMBOL:                     Other Customization Variables.
                                                              (line 243)
* \openout line in log file:             Format with texi2dvi or texi2pdf.
                                                              (line 100)
* Optional and repeated arguments:       Optional Arguments.  (line   6)
* Options for makeinfo:                  Invoking texi2any.   (line  16)
* Options for texi2any:                  Invoking texi2any.   (line  16)
* Options of texi2html:                  texi2html.           (line  41)
* Options, customization variables for:  Customization Variables and Options.
                                                              (line   6)
* Ordinals, Romance:                     Inserting Accents.   (line  50)
* Ordinary TeX commands, using:          Raw Formatter Commands.
                                                              (line   6)
* Orphans, preventing:                   @need.               (line  18)
* Other Info files' nodes:               Other Info Files.    (line   6)
* OUTFILE:                               Invoking texi2any.   (line 272)
* Outline of file structure, showing:    Showing the Structure.
                                                              (line   6)
* Output document strings, internationalization of: Internationalization of Document Strings.
                                                              (line   6)
* output file name:                      @setfilename.        (line   6)
* Output file splitting:                 Invoking texi2any.   (line 358)
* Output formats:                        Output Formats.      (line   6)
* Output formats, supporting more:       Adding Output Formats.
                                                              (line   9)
* OUTPUT_CHARACTERS:                     Other Customization Variables.
                                                              (line 263)
* OUTPUT_ENCODING_NAME:                  Other Customization Variables.
                                                              (line 271)
* OUTPUT_FILE_NAME_ENCODING:             Other Customization Variables.
                                                              (line 279)
* Output, in PDF:                        Format with texi2dvi or texi2pdf.
                                                              (line   6)
* Output, printed through texi2any:      texi2any Printed Output.
                                                              (line   6)
* --output=FILE:                         Invoking texi2any.   (line 272)
* --outputindent:                        Invoking texi2any.   (line 301)
* Outputting EPUB:                       Generating EPUB.     (line   6)
* Outputting HTML:                       Generating HTML.     (line   6)
* Overfull hboxes:                       Overfull hboxes.     (line   6)
* Overview of Texinfo:                   Overview.            (line   6)
* Owner of copyright for FSF works:      @copying.            (line  53)
* -p INDENT:                             Invoking texi2any.   (line 310)
* -P PATH:                               Invoking texi2any.   (line 305)
* PACKAGE:                               Other Customization Variables.
                                                              (line 287)
* PACKAGE_AND_VERSION:                   Other Customization Variables.
                                                              (line 289)
* PACKAGE_NAME:                          Other Customization Variables.
                                                              (line 291)
* PACKAGE_URL:                           Other Customization Variables.
                                                              (line 290)
* PACKAGE_VERSION:                       Other Customization Variables.
                                                              (line 288)
* Page breaks, awkward:                  Breaks.              (line   6)
* Page breaks, forcing:                  @page.               (line   6)
* Page delimiter in Texinfo mode:        Showing the Structure.
                                                              (line  39)
* Page headings:                         Headings.            (line   6)
* Page numbering:                        Headings.            (line   6)
* Page sizes for books:                  @smallbook.          (line   6)
* Page sizes, customized:                @pagesizes.          (line   6)
* page-delimiter:                        Showing the Structure.
                                                              (line  39)
* Pages, starting odd:                   @setchapternewpage.  (line   6)
* Paper size, A4:                        A4 Paper.            (line   6)
* Paragraph indentation control:         @paragraphindent.    (line   6)
* Paragraph, marking text within:        Marking Text.        (line   6)
* paragraphindent:                       Customization Variables and Options.
                                                              (line  27)
* --paragraph-indent=INDENT:             Invoking texi2any.   (line 310)
* Parameters to macros:                  Defining Macros.     (line  32)
* Parentheses in node name:              Node Line Requirements.
                                                              (line  32)
* Parsing errors:                        texi2any in Emacs.   (line  31)
* Part of file formatting and printing:  Texinfo Mode Printing.
                                                              (line  11)
* Part pages:                            @part.               (line   6)
* Partial documents, formatting:         Formatting Partial Documents.
                                                              (line   6)
* Parts of a cross-reference:            Cross Reference Parts.
                                                              (line   6)
* Parts of a master menu:                Master Menu Parts.   (line   6)
* Parts of a menu:                       Menu Parts.          (line   6)
* Patches, contributing:                 Reporting Bugs.      (line  31)
* PCL file, for printing:                Print with lpr.      (line  21)
* --pdf:                                 Invoking texi2any.   (line 329)
* pdf image inclusions:                  Image Syntax.        (line  16)
* PDF output:                            Format with texi2dvi or texi2pdf.
                                                              (line   6)
* PDF output of URLs:                    @url PDF Output Format.
                                                              (line   6)
* PDF output, overview:                  Output Formats.      (line  60)
* --pdf, for texi2dvi:                   Format with texi2dvi or texi2pdf.
                                                              (line  22)
* pdftex:                                Format with tex/texindex.
                                                              (line  76)
* pdftex, and images:                    Image Syntax.        (line  16)
* pdftexi2dvi:                           Format with texi2dvi or texi2pdf.
                                                              (line  22)
* Period in node name:                   Node Line Requirements.
                                                              (line  36)
* Periods, inserting:                    Not Ending a Sentence.
                                                              (line   6)
* Perl extension modules (XS):           texi2any Environment Variables.
                                                              (line  22)
* Perl format strings for translation:   Internationalization of Document Strings.
                                                              (line  21)
* Perl Pod, converting to Texinfo:       Invoking pod2texi.   (line   6)
* Permissions text, including:           @insertcopying.      (line   6)
* Permissions, printed:                  Copyright.           (line   6)
* pg (program) index:                    Predefined Indices.  (line  17)
* Picas:                                 Image Scaling.       (line  21)
* Pictures, inserting:                   Images.              (line   6)
* Plain hyperlink:                       @link.               (line   6)
* Plain link:                            @link.               (line   6)
* Plain TeX:                             Raw Formatter Commands.
                                                              (line   6)
* Plain text output with --plaintext:    Invoking texi2any.   (line 333)
* Plain text output, overview:           Output Formats.      (line  18)
* --plaintext:                           Invoking texi2any.   (line 333)
* png image format:                      Image Syntax.        (line  16)
* Pod, converting to Texinfo:            Invoking pod2texi.   (line   6)
* pod2texi:                              Invoking pod2texi.   (line   6)
* Point, indicating in a buffer:         @point.              (line   6)
* Pointer creation with texi2any:        Writing a Node.      (line  31)
* Pointer validation:                    Invoking texi2any.   (line 245)
* Pointer validation, suppressing:       Formatting Partial Documents.
                                                              (line   6)
* Points (dimension):                    Image Scaling.       (line  19)
* PostScript output, overview:           Output Formats.      (line  52)
* Pounds symbol:                         @pounds.             (line   6)
* PRE_BODY_CLOSE:                        HTML Customization Variables.
                                                              (line 267)
* Preamble:                              Preamble.            (line   6)
* Preamble, in Info format:              Info Format Preamble.
                                                              (line   6)
* Predefined names for indices:          @syncodeindex.       (line  17)
* Preface, etc., and DocBook:            @unnumbered @appendix.
                                                              (line  22)
* <preface> DocBook tag:                 @unnumbered @appendix.
                                                              (line  27)
* PREFIX:                                Other Customization Variables.
                                                              (line 297)
* Preparing for TeX:                     Preparing for TeX.   (line   6)
* Prev node of Top node:                 First Node.          (line  39)
* Preventing first paragraph indentation: @firstparagraphindent.
                                                              (line   6)
* Preventing line and page breaks:       Breaks.              (line   6)
* Print and format in Texinfo mode:      Texinfo Mode Printing.
                                                              (line   6)
* Print, format from Emacs shell:        Hardcopy with TeX.   (line  18)
* Printed book and manual characteristics: Printed Books.     (line   6)
* Printed output, indicating:            @print.              (line   6)
* Printed output, through texi2any:      texi2any Printed Output.
                                                              (line   6)
* Printed permissions:                   Copyright.           (line   6)
* Printing a region or buffer:           Texinfo Mode Printing.
                                                              (line  11)
* Printing an index:                     Printing Indices & Menus.
                                                              (line   6)
* Printing cost, reducing:               Fonts.               (line  13)
* Printing DVI files, on MS-DOS/MS-Windows: Print with lpr.   (line  26)
* Printing hardcopy:                     Hardcopy with TeX.   (line   6)
* Problems, catching:                    Catching Mistakes.   (line   6)
* .profile initialization file:          Preparing for TeX.   (line   6)
* PROGRAM:                               Other Customization Variables.
                                                              (line 305)
* Program names, indicating:             @command.            (line   6)
* PROGRAM_NAME_IN_ABOUT:                 HTML Customization Variables.
                                                              (line 271)
* PROGRAM_NAME_IN_FOOTER:                HTML Customization Variables.
                                                              (line 276)
* Programming, glyphs for:               Glyphs for Programming.
                                                              (line   6)
* Pronunciation of Texinfo:              Overview.            (line  36)
* Prototype row, column widths defined by: Multitable Column Widths.
                                                              (line  27)
* --ps:                                  Invoking texi2any.   (line 344)
* --ps, for texi2dvi:                    Format with texi2dvi or texi2pdf.
                                                              (line  35)
* --quiet, for install-info:             Invoking install-info.
                                                              (line 131)
* Quotation characters (''), in source:  Inserting Quotation Marks.
                                                              (line   6)
* Quotation marks, French:               Inserting Quotation Marks.
                                                              (line  23)
* Quotation marks, German:               Inserting Quotation Marks.
                                                              (line  23)
* Quotation marks, inserting:            Inserting Quotation Marks.
                                                              (line   6)
* Quotations:                            @quotation.          (line   6)
* Quotations in smaller fonts:           small.               (line   6)
* Quote characters, inserting:           Inserting Quote Characters.
                                                              (line   6)
* Quoting, automatic for some macros:    Invoking Macros.     (line  45)
* Ragged left, without filling:          @flushleft @flushright.
                                                              (line   6)
* Ragged right, with filling:            @raggedright.        (line   6)
* Ragged right, without filling:         @flushleft @flushright.
                                                              (line   6)
* Raising and lowering sections:         Raise/lower sections.
                                                              (line   6)
* Raw formatter commands:                Raw Formatter Commands.
                                                              (line   6)
* Raw HTML:                              HTML Translation.    (line  20)
* raw text output:                       Customization Variables and Options.
                                                              (line  71)
* Recommended names for keys:            @key.                (line  20)
* Rectangle, black in hardcopy:          Overfull hboxes.     (line  41)
* Recursive macro invocations:           Defining Macros.     (line  44)
* Reducing font size:                    Fonts.               (line   6)
* Reference implementation:              History.             (line 100)
* Reference to @-commands:               Command List.        (line   6)
* References:                            Cross References.    (line   6)
* References using @inforef:             @inforef.            (line   6)
* References using @pxref:               @pxref.              (line   6)
* References using @ref:                 @ref.                (line   6)
* References using @xref:                @xref.               (line   6)
* Referring to an entire manual:         Referring to a Manual as a Whole.
                                                              (line   6)
* Referring to other Info files:         Other Info Files.    (line   6)
* --regex=REGEX, for install-info:       Invoking install-info.
                                                              (line 167)
* Region formatting and printing:        Texinfo Mode Printing.
                                                              (line  11)
* Region printing in Texinfo mode:       Texinfo Mode Printing.
                                                              (line   6)
* Registered symbol:                     @registeredsymbol.   (line   6)
* Regular expression, for #line:         #line Syntax Details.
                                                              (line   6)
* Reid, Brian:                           History.             (line  22)
* --remove, for install-info:            Invoking install-info.
                                                              (line 134)
* --remove-exactly, for install-info:    Invoking install-info.
                                                              (line 137)
* Repeated and optional arguments:       Optional Arguments.  (line   6)
* Reporting bugs:                        Reporting Bugs.      (line   6)
* Required in Texinfo file:              Minimum.             (line   6)
* Requirements for formatting:           Minimum.             (line  19)
* Requirements for include files:        Include Files Requirements.
                                                              (line   6)
* Requirements for updating commands:    Updating Requirements.
                                                              (line   6)
* Reserved words, indicating:            @code.               (line  10)
* Restrictions on node names:            Node Line Requirements.
                                                              (line   6)
* Result of an expression:               @result.             (line   6)
* Return type, own line for:             Typed Functions.     (line  93)
* RGB color specification.:              PDF Colors.          (line  21)
* ridt.eps:                              Image Scaling.       (line  37)
* Right quotation marks:                 Inserting Quotation Marks.
                                                              (line  23)
* Right-pointing angle quotation marks:  Inserting Quotation Marks.
                                                              (line  23)
* Ring accent:                           Inserting Accents.   (line  28)
* Robbins, Arnold:                       Details of texindex. (line  17)
* Roman font:                            Fonts.               (line  34)
* Romance ordinals:                      Inserting Accents.   (line  50)
* Rounded rectangles, around text:       @cartouche.          (line   6)
* Rows, of a multitable:                 Multitable Rows.     (line   6)
* Running an Info formatter:             Info Formatting.     (line   6)
* Running macros:                        Invoking Macros.     (line   6)
* Running makeinfo in Emacs:             texi2any in Emacs.   (line   6)
* Running texi2any in Emacs:             texi2any in Emacs.   (line   6)
* -s STYLE:                              Invoking texi2any.   (line 116)
* Sample function definition:            Sample Function Definition.
                                                              (line   6)
* Sample @include file:                  Sample Include File. (line   6)
* Sample Texinfo file, no comments:      Short Sample Texinfo File.
                                                              (line   6)
* Sample Texinfo files:                  Sample Texinfo Files.
                                                              (line   6)
* Sample texts, GNU:                     GNU Sample Texts.    (line   6)
* Sans serif font:                       Fonts.               (line  38)
* Scaled points:                         Image Scaling.       (line  35)
* Scaling images:                        Image Scaling.       (line   6)
* Scribe:                                History.             (line  22)
* Sea surges:                            @ref.                (line  28)
* --section REGEX SEC, for install-info: Invoking install-info.
                                                              (line 149)
* SECTION_NAME_IN_TITLE:                 HTML Customization Variables.
                                                              (line 280)
* --section=SEC, for install-info:       Invoking install-info.
                                                              (line 141)
* Sectioning:                            Chapter Structuring. (line   6)
* Sectioning structure of a file, showing: Showing the Structure.
                                                              (line   6)
* Sections, raising and lowering:        Raise/lower sections.
                                                              (line   6)
* Semantic markup:                       Overview.            (line  18)
* Sentence ending punctuation:           Ending a Sentence.   (line   6)
* Sentence non-ending punctuation:       Not Ending a Sentence.
                                                              (line   6)
* Sentences, spacing after:              @frenchspacing.      (line   6)
* separate footnote style:               Footnote Styles.     (line  26)
* Sequence of clicks:                    Click Sequences.     (line   6)
* --set-customization-variable VAR=VALUE: Invoking texi2any.  (line 349)
* S-expressions, output format:          Customization Variables and Options.
                                                              (line  81)
* SGML-tools output format:              Adding Output Formats.
                                                              (line   9)
* Sharp S:                               Inserting Accents.   (line  50)
* Sharp sign (not), inserting:           Inserting a Hashsign.
                                                              (line  10)
* Shell formatting with tex and texindex: Format with tex/texindex.
                                                              (line   6)
* Shell printing, on MS-DOS/MS-Windows:  Print with lpr.      (line  26)
* Shell, format, print from:             Hardcopy with TeX.   (line  18)
* Shell, running makeinfo in:            texi2any in Emacs.   (line   6)
* Shell, running texi2any in:            texi2any in Emacs.   (line   6)
* Short captions, for lists of floats:   @caption @shortcaption.
                                                              (line   6)
* Short table of contents:               Contents.            (line   6)
* SHORT_TOC_LINK_TO_TOC:                 HTML Customization Variables.
                                                              (line 285)
* SHOW_BUILTIN_CSS_RULES:                HTML Customization Variables.
                                                              (line 290)
* SHOW_TITLE:                            HTML Customization Variables.
                                                              (line 294)
* Showing the sectioning structure of a file: Showing the Structure.
                                                              (line   6)
* Showing the structure of a file:       Using texinfo-show-structure.
                                                              (line   6)
* Shrubbery:                             @ifset @ifclear.     (line  21)
* --silent, for install-info:            Invoking install-info.
                                                              (line 131)
* SIMPLE_MENU:                           HTML Customization Variables.
                                                              (line 299)
* Single angle quotation marks:          Inserting Quotation Marks.
                                                              (line  23)
* Single guillemets:                     Inserting Quotation Marks.
                                                              (line  23)
* Single left-pointing angle quotation mark: Inserting Quotation Marks.
                                                              (line  23)
* Single low-9 quotation mark:           Inserting Quotation Marks.
                                                              (line  23)
* Single quotation marks:                Inserting Quotation Marks.
                                                              (line  23)
* Single right-pointing angle quotation mark: Inserting Quotation Marks.
                                                              (line  23)
* Site-wide Texinfo configuration file:  Preparing for TeX.   (line  40)
* Size of printed book:                  @smallbook.          (line   6)
* Slanted font:                          Fonts.               (line  41)
* Slanted typewriter font, for @kbd:     @kbd.                (line  15)
* Small book size:                       @smallbook.          (line   6)
* Small caps font:                       Smallcaps.           (line   6)
* Small examples:                        small.               (line   6)
* Small verbatim:                        @verbatim.           (line  45)
* <small> tag:                           Smallcaps.           (line  21)
* Smaller fonts:                         Fonts.               (line   6)
* Smith, Gavin:                          History.             (line   6)
* sort keys for index entries:           Indexing Commands.   (line  47)
* SORT_ELEMENT_COUNT:                    Other Customization Variables.
                                                              (line 309)
* SORT_ELEMENT_COUNT_WORDS:              Other Customization Variables.
                                                              (line 317)
* Sorting indices:                       Hardcopy with TeX.   (line   6)
* Sorting nodes by size:                 Other Customization Variables.
                                                              (line 309)
* Source file format:                    Overview.            (line  18)
* Source files, characters used:         Conventions.         (line   9)
* source-highlight:                      Syntax Highlighting. (line   6)
* Space, after sentences:                @frenchspacing.      (line   6)
* Space, inserting horizontal:           Multiple Spaces.     (line   6)
* Space, inserting vertical:             @sp.                 (line   6)
* Spaces in macros:                      Defining Macros.     (line  40)
* Spaces in node name:                   Node Line Requirements.
                                                              (line  70)
* Spaces, in menus:                      Writing a Menu.      (line  20)
* Spacing, at ends of sentences:         Ending a Sentence.   (line   6)
* Spacing, in the middle of sentences:   Not Ending a Sentence.
                                                              (line   6)
* Spacing, inserting:                    Inserting Space.     (line   6)
* Special characters, inserting:         Special Characters.  (line   6)
* Special displays:                      Special Displays.    (line   6)
* Special insertions:                    Insertions.          (line   6)
* Specification of Info format:          Info Format Specification.
                                                              (line   6)
* Specifying index entries:              Indexing Commands.   (line   6)
* spell checking:                        Customization Variables and Options.
                                                              (line  85)
* Spelling of Texinfo:                   Overview.            (line  36)
* SPLIT:                                 Invoking texi2any.   (line 364)
* Split HTML output:                     HTML Splitting.      (line   6)
* split Info file:                       Tag and Split Files. (line   6)
* split manuals, for HTML cross-references: HTML Xref Configuration.
                                                              (line  73)
* Split manuals, Info format of:         Info Format Whole Manual.
                                                              (line   6)
* SPLIT_SIZE:                            Invoking texi2any.   (line 382)
* --split=HOW:                           Invoking texi2any.   (line 358)
* --split-size=NUM:                      Invoking texi2any.   (line 382)
* Splitting an Info file manually:       Splitting.           (line   6)
* Splitting of output files:             Invoking texi2any.   (line 358)
* ß:                                     Inserting Accents.   (line  50)
* Stallman, Richard M.:                  History.             (line   6)
* Start of header line:                  Start and End of Header.
                                                              (line   6)
* Starting chapters:                     @setchapternewpage.  (line   6)
* stripping Texinfo commands:            Customization Variables and Options.
                                                              (line  85)
* Structure of a file, showing:          Showing the Structure.
                                                              (line   6)
* Structure, catching mistakes in:       Catching Mistakes.   (line   6)
* Structure, of Texinfo documents:       Texinfo Document Structure.
                                                              (line   6)
* Structuring of chapters:               Chapter Structuring. (line   6)
* SUBDIR:                                Invoking texi2any.   (line 272)
* Subscripts and superscripts, text:     Inserting Subscripts and Superscripts.
                                                              (line   6)
* Subsection-like commands:              @unnumberedsubsec @appendixsubsec @subheading.
                                                              (line   6)
* Subsub sectioning commands:            @subsubsection.      (line   6)
* Suggestions for Texinfo, making:       Reporting Bugs.      (line   6)
* Summary of document:                   @documentdescription.
                                                              (line   6)
* Suppressing first paragraph indentation: @firstparagraphindent.
                                                              (line   6)
* Suppressing indentation:               @noindent.           (line   6)
* SVG images, used in DocBook:           Image Syntax.        (line  30)
* SXML output:                           Customization Variables and Options.
                                                              (line  81)
* Syntactic conventions:                 Conventions.         (line   6)
* Syntactic tokens, indicating:          @code.               (line   6)
* Syntax details, #line:                 #line Syntax Details.
                                                              (line   6)
* Syntax tree representation of documents: History.           (line  55)
* Syntax, of @-commands:                 Command Syntax.      (line   6)
* Syntax, optional & repeated arguments: Optional Arguments.  (line   6)
* SystemLiteral:                         Other Customization Variables.
                                                              (line 108)
* T4H_LATEX_CONVERSION:                  tex4ht Customization Variables.
                                                              (line  14)
* T4H_MATH_CONVERSION:                   tex4ht Customization Variables.
                                                              (line  19)
* T4H_TEX_CONVERSION:                    tex4ht Customization Variables.
                                                              (line  24)
* Table of contents:                     Contents.            (line   6)
* Table of contents, after title page:   Obsolete @-Commands. (line  15)
* Table of contents, for floats:         @listoffloats.       (line   6)
* Tables and lists, making:              Lists and Tables.    (line   6)
* Tables with indexing:                  @ftable @vtable.     (line   6)
* Tables, making multi-column:           Multi-column Tables. (line   6)
* Tables, making two-column:             Two-column Tables.   (line   6)
* Tag table:                             Tag and Split Files. (line   6)
* Tag table, in Info format:             Info Format Tag Table.
                                                              (line   6)
* Tag table, making manually:            Tagifying.           (line   6)
* Targets for cross-references, arbitrary: @anchor.           (line   6)
* Template for a definition:             Def Cmd Template.    (line   6)
* TEST:                                  Other Customization Variables.
                                                              (line 321)
* --test, for install-info:              Invoking install-info.
                                                              (line 173)
* Testing for Texinfo commands:          Testing for Texinfo Commands.
                                                              (line   6)
* Tests, of Texinfo language:            History.             (line 100)
* TeX and #line directives:              #line and TeX.       (line   6)
* TeX commands, using ordinary:          Raw Formatter Commands.
                                                              (line   6)
* TeX index sorting:                     Hardcopy with TeX.   (line   6)
* TeX input initialization:              Preparing for TeX.   (line   6)
* TeX logo:                              @TeX @LaTeX.         (line   6)
* TeX, how to obtain:                    Use TeX.             (line  11)
* texi2any:                              Invoking texi2any.   (line   6)
* texi2any inside Emacs:                 texi2any in Emacs.   (line   6)
* texi2any options:                      Invoking texi2any.   (line  16)
* texi2any, as reference implementation: History.             (line 100)
* TEXI2DVI:                              Other Customization Variables.
                                                              (line 327)
* texi2dvi (shell script):               Format with texi2dvi or texi2pdf.
                                                              (line   6)
* texi2html:                             texi2html.           (line   6)
* TEXI2HTML:                             Other Customization Variables.
                                                              (line 331)
* texi2oldapi.texi, for texi2html:       texi2html.           (line  65)
* texi2pdf (shell script):               Format with texi2dvi or texi2pdf.
                                                              (line   6)
* texi-elements-by-size:                 Other Customization Variables.
                                                              (line 309)
* texindex:                              Format with tex/texindex.
                                                              (line  16)
* Texinfo commands, defining new:        Defining New Texinfo Commands.
                                                              (line   6)
* Texinfo commands, testing for:         Testing for Texinfo Commands.
                                                              (line   6)
* Texinfo document structure:            Texinfo Document Structure.
                                                              (line   6)
* Texinfo file ending:                   Ending a File.       (line   6)
* Texinfo file header:                   Texinfo File Header. (line   6)
* Texinfo file minimum:                  Minimum.             (line   6)
* Texinfo file sectioning structure, showing: Showing the Structure.
                                                              (line   6)
* Texinfo history:                       History.             (line  14)
* Texinfo language tests:                History.             (line 100)
* Texinfo mode:                          Texinfo Mode.        (line   6)
* Texinfo overview:                      Overview.            (line   6)
* Texinfo parsers, discouraging more:    Adding Output Formats.
                                                              (line  24)
* Texinfo Preamble:                      Preamble.            (line   6)
* Texinfo printed book characteristics:  Printed Books.       (line   6)
* Texinfo XML output, overview:          Output Formats.      (line  94)
* texinfo_document Gettext domain:       Internationalization of Document Strings.
                                                              (line  21)
* TEXINFO_DTD_VERSION:                   Other Customization Variables.
                                                              (line 335)
* TEXINFO_OUTPUT_FORMAT:                 Customization Variables and Options.
                                                              (line  38)
* TEXINFO_XS:                            texi2any Environment Variables.
                                                              (line  22)
* TEXINFO_XS_PARSER:                     texi2any Environment Variables.
                                                              (line  50)
* Texinfo, and literate programming:     Details of texindex. (line  17)
* Texinfo, introduction to:              Overview.            (line   6)
* texinfo.cnf installation:              Preparing for TeX.   (line  40)
* texinfo.dtd:                           Output Formats.      (line  94)
* texinfo.tex, installing:               Preparing for TeX.   (line  20)
* TEXINPUTS:                             Preparing for TeX.   (line  49)
* texiwebjr:                             Details of texindex. (line  17)
* Text width and height:                 @pagesizes.          (line   6)
* Text, conditionally visible:           Conditionals.        (line   6)
* Text, marking up:                      Marking Text.        (line   6)
* Text::Unidecode:                       Other Customization Variables.
                                                              (line 436)
* TEXTCONTENT_COMMENT:                   Other Customization Variables.
                                                              (line 339)
* Textual glyphs:                        Glyphs for Text.     (line   6)
* <thead> HTML/DocBook tag:              Multitable Rows.     (line  12)
* Thin space between number, dimension:  @dmn.                (line   6)
* Thorn:                                 Inserting Accents.   (line  50)
* Three-argument form of cross-references: Three Arguments.   (line   6)
* ti.twjr:                               Details of texindex. (line  17)
* Tie-after accent:                      Inserting Accents.   (line  28)
* Tied space:                            @tie.                (line   6)
* Tilde accent:                          Inserting Accents.   (line  28)
* time-stamp.el:                         GNU Sample Texts.    (line  20)
* <tip> DocBook tag:                     @quotation.          (line  48)
* Tips:                                  Tips.                (line   8)
* Title page:                            @titlepage.          (line   6)
* Title page, bastard:                   @titlepage.          (line  42)
* <title> HTML tag:                      @settitle.           (line  20)
* TOC_LINKS:                             HTML Customization Variables.
                                                              (line 304)
* Top node:                              The Top Node.        (line   6)
* Top node example:                      The Top Node.        (line  22)
* Top node is first:                     First Node.          (line   6)
* TOP_FILE:                              HTML Customization Variables.
                                                              (line 308)
* TOP_NODE_FILE_TARGET:                  HTML Customization Variables.
                                                              (line 314)
* TOP_NODE_UP:                           Other Customization Variables.
                                                              (line 344)
* TOP_NODE_UP_URL:                       HTML Customization Variables.
                                                              (line 318)
* tp (data type) index:                  Predefined Indices.  (line  19)
* Translating strings in output documents: Internationalization of Document Strings.
                                                              (line   6)
* TRANSLITERATE_FILE_NAMES:              Invoking texi2any.   (line 387)
* --transliterate-file-names:            Invoking texi2any.   (line 387)
* Transliteration of 8-bit characters in HTML cross-references: HTML Xref 8-bit Character Expansion.
                                                              (line   6)
* Tree representation of documents:      History.             (line  55)
* tree representation, for debugging:    Customization Variables and Options.
                                                              (line  57)
* Tree structuring:                      Tree Structuring.    (line   6)
* TREE_TRANSFORMATIONS:                  Other Customization Variables.
                                                              (line 351)
* Two 'First' Lines for @deffn:          @deffnx.             (line   6)
* Two letter names for indices:          @syncodeindex.       (line  17)
* Two named items for @table:            @itemx.              (line   6)
* Two part menu entry:                   Less Cluttered Menu Entry.
                                                              (line   6)
* Two-argument form of cross-references: Two Arguments.       (line   6)
* txi-CC.tex:                            @documentlanguage.   (line  34)
* txicodequotebacktick:                  Inserting Quote Characters.
                                                              (line  38)
* txicodequoteundirected:                Inserting Quote Characters.
                                                              (line  38)
* txicommandconditionals:                Testing for Texinfo Commands.
                                                              (line  29)
* txidefnamenospace:                     No Space After Definition Name.
                                                              (line   6)
* txiindexatsignignore:                  Indexing Commands.   (line  52)
* txiindexbackslashignore:               Indexing Commands.   (line  52)
* txiindexhyphenignore:                  Indexing Commands.   (line  52)
* txiindexlessthanignore:                Indexing Commands.   (line  52)
* txixml2texi:                           Output Formats.      (line  94)
* Typed functions:                       Typed Functions.     (line   6)
* Typed variables:                       Typed Variables.     (line   6)
* Typewriter font:                       Fonts.               (line  44)
* Ugly black rectangles in hardcopy:     Overfull hboxes.     (line  41)
* Umlaut accent:                         Inserting Accents.   (line  28)
* Unbreakable space, fixed:              @w.                  (line   8)
* Unbreakable space, variable:           @tie.                (line   6)
* Uncluttered menu entry:                Less Cluttered Menu Entry.
                                                              (line   6)
* Undefining macros:                     Defining Macros.     (line  56)
* Underbar accent:                       Inserting Accents.   (line  28)
* Underdot accent:                       Inserting Accents.   (line  28)
* Underscore, breakpoint within @code:   @allowcodebreaks.    (line   6)
* undirected single quote:               Inserting Quote Characters.
                                                              (line  19)
* Unicode and TeX:                       Inserting Unicode.   (line  18)
* Unicode character, inserting:          Inserting Unicode.   (line   6)
* Unicode quotation characters:          Inserting Quotation Marks.
                                                              (line  15)
* Unique index entries:                  Index Entries.       (line  25)
* Unique node names requirement:         Node Line Requirements.
                                                              (line   8)
* Unnumbered float, creating:            @float.              (line  39)
* Unprocessed text:                      Comments.            (line  27)
* Unsplit file creation:                 Unsplit and Tagify.  (line   6)
* Up node of Top node:                   First Node.          (line  16)
* UPDATED Automake variable:             GNU Sample Texts.    (line  20)
* UPDATED-MONTH Automake variable:       GNU Sample Texts.    (line  20)
* Updating nodes and menus:              Updating Nodes and Menus.
                                                              (line   6)
* Updating requirements:                 Updating Requirements.
                                                              (line   6)
* URI syntax for Info:                   Info Files.          (line  35)
* URL, examples of displaying:           @url Examples.       (line   6)
* URL, indicating:                       @indicateurl.        (line   6)
* URL, referring to:                     @url.                (line   6)
* @url, examples of using:               @url Examples.       (line   6)
* <URL...> convention, not used:         @url Examples.       (line  51)
* URLs, coloring in PDF output:          PDF Colors.          (line   6)
* URLs, PDF output of:                   @url PDF Output Format.
                                                              (line   6)
* Usage tips:                            Tips.                (line   8)
* us-ascii encoding, and translations:   Internationalization of Document Strings.
                                                              (line  42)
* USE_ACCESSKEY:                         HTML Customization Variables.
                                                              (line 326)
* USE_ISO:                               HTML Customization Variables.
                                                              (line 329)
* USE_LINKS:                             HTML Customization Variables.
                                                              (line 334)
* USE_NEXT_HEADING_FOR_LONE_NODE:        HTML Customization Variables.
                                                              (line 338)
* USE_NODE_DIRECTIONS:                   HTML Customization Variables.
                                                              (line 345)
* USE_NODES:                             Other Customization Variables.
                                                              (line 417)
* USE_NUMERIC_ENTITY:                    Other Customization Variables.
                                                              (line 422)
* USE_REL_REV:                           HTML Customization Variables.
                                                              (line 354)
* USE_SETFILENAME_EXTENSION:             Other Customization Variables.
                                                              (line 431)
* USE_TITLEPAGE_FOR_TITLE:               HTML Customization Variables.
                                                              (line 357)
* USE_UNIDECODE:                         Other Customization Variables.
                                                              (line 436)
* USE_UP_NODE_FOR_ELEMENT_UP:            Other Customization Variables.
                                                              (line 426)
* USE_XML_SYNTAX:                        HTML Customization Variables.
                                                              (line 361)
* User input:                            @kbd.                (line  15)
* User options, marking:                 Variables Commands.  (line  43)
* User-defined Texinfo commands:         Defining New Texinfo Commands.
                                                              (line   6)
* Using Info-validate:                   Using Info-validate. (line   6)
* Using Texinfo in general:              Overview.            (line   6)
* -V:                                    Invoking texi2any.   (line 402)
* Validating a large file:               Using Info-validate. (line   6)
* Value of an expression, indicating:    @result.             (line   6)
* Variables, in typed languages:         Typed Variables.     (line   6)
* Variables, object-oriented:            Object-Oriented Variables.
                                                              (line   6)
* Verbatim copying license:              Verbatim Copying License.
                                                              (line   6)
* Verbatim environment:                  @verbatim.           (line   6)
* Verbatim in-line text:                 @verb.               (line   6)
* Verbatim, include file:                @verbatiminclude.    (line   6)
* Verbatim, small:                       @verbatim.           (line  45)
* VERBOSE:                               Invoking texi2any.   (line 396)
* --verbose:                             Invoking texi2any.   (line 396)
* VERSION Automake variable:             GNU Sample Texts.    (line  20)
* Version control keywords, preventing expansion of: @w.      (line  27)
* Version number, for install-info:      Invoking install-info.
                                                              (line 176)
* --version, for install-info:           Invoking install-info.
                                                              (line 176)
* --version, for texi2any:               Invoking texi2any.   (line 402)
* Versions of Texinfo, adapting to:      Testing for Texinfo Commands.
                                                              (line   6)
* VERTICAL_HEAD_NAVIGATION:              HTML Customization Variables.
                                                              (line 364)
* Vertically holding text together:      @group.              (line   6)
* Visibility of conditional text:        Conditionals.        (line   6)
* vr (variable) index:                   Predefined Indices.  (line  22)
* @w, for blank items:                   @itemize.            (line  10)
* <warning> DocBook tag:                 @quotation.          (line  48)
* White space in node name:              Node Line Requirements.
                                                              (line  70)
* Whitespace in macros:                  Defining Macros.     (line  40)
* Whitespace, collapsed around continuations: Def Cmd Continuation Lines.
                                                              (line  28)
* Whitespace, controlling in conditionals: Inline Conditionals.
                                                              (line   6)
* Whitespace, inserting:                 Multiple Spaces.     (line   6)
* Whole manual, in Info format:          Info Format Whole Manual.
                                                              (line   6)
* Width of images:                       Image Scaling.       (line   6)
* Width of text area:                    @pagesizes.          (line   6)
* Widths, defining multitable column:    Multitable Column Widths.
                                                              (line   6)
* Wildcards:                             Format with tex/texindex.
                                                              (line  30)
* word counting:                         Customization Variables and Options.
                                                              (line  85)
* Words and phrases, marking them:       Marking Text.        (line   6)
* WORDS_IN_PAGE:                         HTML Customization Variables.
                                                              (line 367)
* Writing a menu:                        Writing a Menu.      (line   6)
* Writing a @node line:                  Writing a Node.      (line   6)
* Writing index entries:                 Index Entries.       (line   6)
* xdvi:                                  Output Formats.      (line  41)
* --xml:                                 Invoking texi2any.   (line 409)
* XML DocBook output, overview:          Output Formats.      (line  87)
* XML Texinfo output, overview:          Output Formats.      (line  94)
* XML, including raw:                    Raw Formatter Commands.
                                                              (line  41)
* --Xopt STR:                            Invoking texi2any.   (line 405)
* XPM image format:                      Image Syntax.        (line  44)
* XREF_USE_FLOAT_LABEL:                  HTML Customization Variables.
                                                              (line 374)
* XREF_USE_NODE_NAME_ARG:                HTML Customization Variables.
                                                              (line 379)
* XZ-compressed dir files, reading:      Invoking install-info.
                                                              (line  23)
* Years, in copyright line:              @copying.            (line  48)
* þ:                                     Inserting Accents.   (line  50)
* Þ:                                     Inserting Accents.   (line  50)



Tag Table:
Node: Top1465
Node: Copying Conditions27853
Node: Overview29766
Ref: Using Texinfo29918
Node: Reporting Bugs32593
Node: Output Formats34079
Node: Info Files39546
Node: Printed Books41571
Node: Adding Output Formats42812
Node: History45326
Ref: Reference Implementation50528
Node: Writing a Texinfo File51394
Ref: Beginning and Ending a File51488
Node: Conventions52428
Ref: Formatting Commands52585
Node: Comments55700
Node: Minimum57532
Ref: Minimum-Footnote-159352
Node: Short Sample Texinfo File59547
Ref: Short Sample59676
Ref: Sample Beginning59676
Node: Texinfo File Header60956
Node: First Line62868
Node: @setfilename63976
Ref: setfilename64181
Ref: Setting the Output File Name64181
Node: @settitle67051
Ref: settitle67244
Node: Preamble68511
Node: Start and End of Header70692
Ref: Start of Header70870
Ref: End of Header71469
Node: Directory Category71983
Node: Document Permissions72925
Ref: Software Copying Permissions73067
Node: @copying74360
Ref: copying74546
Node: @insertcopying77157
Ref: insertcopying77349
Node: Titlepage & Copyright Page78603
Node: @titlepage80181
Ref: titlepage80331
Ref: @titlepage-Footnote-182736
Node: @title @subtitle @author83023
Ref: title subtitle author83260
Node: @titlefont @center @sp85460
Ref: titlefont center sp85692
Node: Copyright86996
Node: Heading Generation88929
Ref: end titlepage89080
Node: Contents90133
Node: The Top Node92324
Ref: Top Node Example92519
Node: Master Menu Parts93575
Node: The Body of the Document95315
Node: Ending a File97009
Ref: File End97428
Node: Nodes97573
Ref: node97695
Ref: @node97695
Node: Writing a Node99631
Node: Node Names102638
Ref: Node Line Tips102904
Node: Node Line Requirements105068
Ref: Info Node Names Constraints106669
Ref: Node Line Requirements-Footnote-1108766
Node: First Node108954
Node: @top Command111170
Ref: top command111352
Ref: makeinfo top111352
Ref: makeinfo top command111352
Node: Texinfo Document Structure112240
Ref: Two Paths112424
Node: Node Menu Illustration115307
Node: Node Descriptions119423
Node: Menus121287
Node: Writing a Menu122693
Node: Menu Example124580
Node: Menu Location126108
Node: Menu Parts127013
Node: Less Cluttered Menu Entry128712
Node: Other Info Files129333
Node: Chapter Structuring130769
Ref: Structuring130913
Node: Tree Structuring131806
Node: Structuring Command Types133344
Node: @chapter136586
Ref: chapter136792
Node: @unnumbered @appendix137235
Ref: unnumbered & appendix137496
Node: @majorheading @chapheading138657
Ref: majorheading & chapheading138916
Node: @section139569
Ref: section139799
Node: @unnumberedsec @appendixsec @heading140505
Ref: unnumberedsec appendixsec heading140746
Node: @subsection142010
Ref: subsection142274
Node: @unnumberedsubsec @appendixsubsec @subheading142462
Ref: unnumberedsubsec appendixsubsec subheading142684
Node: @subsubsection143582
Ref: subsubsection143822
Node: @part144919
Node: Raise/lower sections147297
Node: Cross References149485
Node: Cross Reference Commands152317
Node: Cross Reference Parts153475
Ref: Reference Syntax153667
Node: One Argument156650
Node: Two Arguments157108
Node: Three Arguments157846
Node: Four and Five Arguments160121
Node: Referring to a Manual as a Whole163498
Ref: Top Node Naming163705
Node: @xref165397
Ref: xref165539
Node: @ref165682
Ref: ref165796
Node: @pxref166786
Ref: pxref166908
Node: @anchor167914
Ref: anchor168127
Node: @link169946
Node: @inforef171217
Ref: inforef171423
Node: @url172095
Ref: uref172291
Ref: url172291
Node: @url Examples173594
Node: URL Line Breaking175223
Node: @url PDF Output Format176481
Node: @cite177564
Ref: cite177708
Node: PDF Colors178105
Node: Marking Text179399
Node: Indicating180062
Node: Useful Highlighting181550
Node: @code183283
Ref: code183436
Node: @kbd187054
Ref: kbd187206
Node: @key189086
Ref: key189216
Node: @samp190523
Ref: samp190648
Node: @verb192061
Ref: verb192202
Node: @var193384
Ref: var193542
Ref: @var-Footnote-1195203
Node: @env195648
Ref: env195802
Node: @file196188
Ref: file196326
Node: @command196833
Ref: command196988
Node: @option197586
Ref: option197736
Node: @dfn198061
Ref: dfn198188
Node: @abbr199020
Ref: abbr199188
Node: @acronym200469
Ref: acronym200641
Node: @indicateurl203281
Ref: indicateurl203474
Node: @email204052
Ref: email204230
Node: Emphasis204975
Node: @emph @strong205814
Ref: emph & strong205980
Node: Smallcaps206943
Node: Fonts208188
Node: Quotations and Examples210886
Node: Block Enclosing Commands212720
Node: @quotation215126
Ref: quotation215328
Node: @indentedblock217540
Node: @example218376
Ref: example218549
Node: @verbatim220739
Ref: verbatim220905
Node: @lisp222744
Ref: lisp222922
Node: @display223376
Ref: display223570
Node: @format223992
Ref: format224198
Node: @exdent224803
Ref: exdent225011
Node: @flushleft @flushright226000
Ref: flushleft & flushright226201
Node: @raggedright227320
Ref: raggedright227525
Node: @noindent228731
Ref: noindent228921
Node: @indent230627
Ref: indent230809
Node: @cartouche231808
Ref: cartouche231990
Node: small233514
Node: Lists and Tables235374
Node: Introducing Lists236056
Node: @itemize237776
Ref: itemize237968
Node: @enumerate240541
Ref: enumerate240759
Node: Two-column Tables243056
Node: @table243751
Ref: table243907
Ref: @asis244560
Node: @ftable @vtable246775
Ref: ftable vtable246944
Node: @itemx247951
Ref: itemx248129
Node: Multi-column Tables249257
Node: Multitable Column Widths249986
Node: Multitable Rows251783
Node: Special Displays254265
Node: Floats255051
Node: @float255948
Ref: float256132
Ref: fig:ex1256650
Node: @caption @shortcaption258418
Ref: caption shortcaption258600
Node: @listoffloats260306
Ref: listoffloats260505
Node: Images262116
Node: Image Syntax262553
Node: Image Scaling266392
Node: Footnotes268171
Ref: Footnotes-Footnote-1268785
Node: Footnote Commands269070
Ref: Footnote Commands-Footnote-1271308
Node: Footnote Styles271345
Node: Indices273973
Node: Predefined Indices275302
Node: Indexing Commands277599
Node: Advanced Indexing280707
Node: Index Entries282946
Node: Printing Indices & Menus285465
Node: Combining Indices287898
Node: @syncodeindex289270
Ref: syncodeindex289477
Node: @synindex291044
Ref: synindex291211
Node: New Indices291641
Node: Insertions294079
Node: Special Characters295168
Ref: Braces Atsign295366
Ref: Atsign Braces Comma295366
Node: Inserting an Atsign296130
Node: Inserting Braces296756
Node: Inserting a Comma297517
Node: Inserting a Backslash298809
Node: Inserting a Hashsign300080
Node: Inserting an Ampersand301362
Ref: Inserting an Ampersand-Footnote-1302849
Node: Inserting Quote Characters302949
Node: Inserting Space304853
Node: Multiple Spaces305437
Node: Not Ending a Sentence306482
Node: Ending a Sentence308340
Node: @frenchspacing310963
Ref: frenchspacing311182
Node: @dmn312289
Ref: dmn312464
Node: Inserting Accents313416
Node: Inserting Quotation Marks316215
Node: Inserting Subscripts and Superscripts319870
Node: Inserting Math320850
Ref: math321103
Node: Glyphs for Text323983
Ref: Glyphs324143
Ref: TeX and copyright324143
Node: @TeX @LaTeX325082
Ref: tex325264
Node: @copyright325796
Ref: copyright symbol325963
Node: @registeredsymbol326254
Ref: registered symbol326429
Node: @dots326595
Ref: dots326788
Ref: Dots Bullets326788
Node: @bullet327615
Ref: bullet327752
Node: @euro328053
Ref: euro328232
Node: @pounds328768
Ref: pounds328944
Node: @textdegree329100
Ref: textdegree329283
Node: @minus329424
Ref: minus329616
Node: @geq @leq330162
Ref: geq leq330362
Node: Glyphs for Programming330581
Node: Glyphs Summary331843
Node: @result332589
Ref: result332801
Node: @expansion333166
Ref: expansion333376
Node: @print334211
Ref: Print Glyph334420
Node: @error335168
Ref: Error Glyph335383
Node: @equiv336149
Ref: Equivalence336344
Node: @point336961
Ref: Point Glyph337177
Node: Click Sequences338603
Node: Inserting Unicode339666
Node: Breaks341550
Node: Break Commands342971
Node: Line Breaks343877
Node: @- @hyphenation344664
Ref: - and hyphenation344897
Node: @allowcodebreaks346070
Ref: allowcodebreaks346286
Node: @w347320
Ref: w347483
Node: @tie348514
Ref: tie348682
Node: @sp349461
Ref: sp349606
Node: @page349855
Ref: page349998
Node: @group350264
Ref: group350417
Node: @need351331
Ref: need351480
Node: Definition Commands352109
Node: Def Cmd Template353491
Node: Def Cmd Continuation Lines355835
Node: Optional Arguments357477
Node: No Space After Definition Name358792
Node: @deffnx359470
Ref: deffnx359705
Node: Def Cmds in Detail360350
Node: Functions Commands361053
Node: Typed Functions363765
Node: Variables Commands368276
Node: Typed Variables370197
Node: Data Types371728
Node: Abstract Objects372927
Node: Object-Oriented Variables373536
Node: Object-Oriented Methods375972
Node: Generic Definition Commands380001
Node: Def Cmd Conventions381754
Node: Sample Function Definition384102
Node: Internationalization386815
Node: @documentlanguage387473
Ref: documentlanguage387699
Node: @documentencoding390548
Ref: documentencoding390752
Ref: @documentencoding-Footnote-1395322
Node: Conditionals395582
Node: Conditional Commands396961
Node: Conditional Not Commands399895
Node: Raw Formatter Commands401247
Node: Inline Conditionals404044
Node: @set @clear @value406045
Ref: set clear value406305
Node: @set @value407521
Ref: set value407675
Node: @ifset @ifclear409622
Ref: ifset ifclear409820
Node: @inlineifset @inlineifclear411817
Node: @value Example412652
Ref: value Example412811
Node: Testing for Texinfo Commands414835
Node: Conditional Nesting417473
Node: Defining New Texinfo Commands418245
Node: Defining Macros420132
Node: Invoking Macros422578
Node: Macro Details426302
Node: @alias433212
Ref: alias433386
Node: Line Macros434992
Node: @definfoenclose437746
Ref: definfoenclose437983
Node: External Macro Processors440296
Node: #line Directive441609
Node: #line and TeX443120
Node: #line Syntax Details444514
Node: Include Files445812
Node: Using Include Files446547
Node: Sample Include File448055
Node: @verbatiminclude449056
Ref: verbatiminclude449264
Node: Hardcopy with TeX450266
Ref: Hardcopy450455
Ref: Printing450455
Ref: Within Emacs451066
Ref: Emacs Shell Printing451066
Node: Use TeX452070
Ref: Obtaining TeX452483
Node: Format with texi2dvi or texi2pdf452777
Ref: PDF Output453006
Ref: Format with texi2dvi453006
Ref: Format with texi2dvi or texi2pdf-Footnote-1458768
Node: Format with tex/texindex458921
Ref: Names of index files459957
Node: Formatting Partial Documents462728
Node: Details of texindex463866
Node: Print with lpr465139
Node: Preparing for TeX466492
Node: Overfull hboxes469419
Node: Generic Translator texi2any471549
Node: Invoking texi2any473309
Ref: Invoking makeinfo473511
Ref: makeinfo Options473951
Ref: texi2any Options473951
Ref: Pointer Validation483527
Ref: Splitting Output488424
Node: texi2any Environment Variables490330
Node: texi2any Printed Output492811
Node: Customization Variables495058
Node: Customization Variables for @-Commands496860
Node: Customization Variables and Options498733
Node: HTML Customization Variables502616
Node: MathJax Customization Variables518859
Node: latex2html Customization Variables520293
Node: tex4ht Customization Variables522063
Node: LaTeX Customization Variables523341
Node: Other Customization Variables525382
Ref: NO_TOP_NODE_OUTPUT535209
Node: Internationalization of Document Strings545633
Node: Invoking pod2texi550043
Node: pod2texi manual page551154
Ref: pod2texi551262
Ref: pod2texi NAME551291
Ref: pod2texi SYNOPSIS551363
Ref: pod2texi DESCRIPTION551437
Ref: pod2texi OPTIONS551817
Ref: pod2texi *--appendix-sections*551839
Ref: pod2texi *--base-level*=_NUM|NAME_552040
Ref: pod2texi *--debug*=_NUM_552990
Ref: pod2texi *--headings-as-sections*553052
Ref: pod2texi *--help*553353
Ref: pod2texi *--menus*553393
Ref: pod2texi *--output*=_NAME_553600
Ref: pod2texi *--no-section-nodes*553747
Ref: pod2texi *--no-fill-section-gaps*553822
Ref: pod2texi *--preamble*=_STR_553980
Ref: pod2texi *--setfilename*=_STR_554236
Ref: pod2texi *--subdir*=_NAME_554398
Ref: pod2texi *--unnumbered-sections*554581
Ref: pod2texi *--top*=_TOP_554774
Ref: pod2texi *--version*554877
Ref: pod2texi SEE ALSO554959
Ref: pod2texi COPYRIGHT AND LICENSE555152
Ref: pod2texi AUTHOR555539
Node: texi2html555577
Node: Creating and Installing Info Files558578
Ref: Creating an Info File558790
Node: Installing an Info File559267
Node: Directory File560099
Node: New Info File562060
Ref: New Info File-Footnote-1563212
Node: Other Info Directories563298
Node: Installing Dir Entries566513
Node: Invoking install-info569279
Node: Tag and Split Files576308
Node: Info Format FAQ579490
Node: Generating HTML584196
Node: HTML Translation585837
Node: HTML Splitting587973
Node: HTML CSS590282
Node: @documentdescription593974
Ref: documentdescription594177
Node: Generating EPUB594734
Node: EPUB Output File and Directory596030
Node: EPUB Cross-References597854
Node: EPUB HTML598585
Node: Syntax Highlighting599815
Node: HTML Xref600948
Node: HTML Xref Link Basics602164
Node: HTML Xref Node Name Expansion605544
Node: HTML Xref Command Expansion608521
Node: HTML Xref 8-bit Character Expansion611844
Node: HTML Xref Mismatch614297
Node: HTML Xref Configuration616046
Node: @-Command Details620065
Node: Command Syntax620448
Node: Command List623908
Node: Command Contexts671674
Node: Obsolete @-Commands673627
Node: Tips674821
Ref: texi-elements-by-size684702
Node: Sample Texinfo Files686555
Node: GNU Sample Texts686867
Node: Verbatim Copying License690950
Node: All-permissive Copying License692054
Node: Texinfo Mode693097
Node: Texinfo Mode Overview694351
Node: Emacs Editing695142
Node: Inserting697027
Node: Showing the Structure702117
Node: Using texinfo-show-structure704680
Node: Using occur707880
Node: Updating Nodes and Menus709462
Node: Updating Commands711116
Node: Updating Requirements717699
Node: Update Multiple Files719584
Ref: texinfo-multiple-files-update719817
Node: Include Files Requirements722368
Node: Other Updating Commands723662
Node: Info Formatting726401
Node: texi2any in Emacs726901
Ref: makeinfo in Emacs727110
Ref: makeinfo Advantages727110
Node: texinfo-format commands729721
Node: Printing with Emacs731192
Node: Texinfo Mode Printing731719
Node: Compile-Command737143
Node: Texinfo Mode Summary738025
Node: Formatting Info files742941
Node: Tagifying744283
Node: Splitting745183
Node: Catching Mistakes746537
Node: texi2any Preferred747616
Ref: makeinfo Preferred747778
Node: Debugging with Info748421
Node: Debugging with TeX751853
Node: Running Info-validate756164
Ref: Running Info-Validate756344
Node: Using Info-validate757658
Node: Unsplit and Tagify759574
Ref: Unsplit759794
Node: Batch Formatting761406
Node: Global Document Commands762583
Node: @setchapternewpage763672
Ref: setchapternewpage763882
Node: Headings766590
Ref: Headings Introduced766749
Node: @headings768096
Ref: headings on off768239
Node: Heading Format769605
Node: Custom Headings771675
Node: @paragraphindent777402
Ref: paragraphindent777648
Node: @firstparagraphindent778588
Ref: firstparagraphindent778832
Node: @exampleindent779890
Ref: exampleindent780108
Node: @smallbook781098
Ref: smallbook781297
Node: A4 Paper782091
Node: @pagesizes782847
Ref: pagesizes783073
Node: Microtypography783969
Node: Magnification785253
Ref: Cropmarks and Magnification785391
Node: Info Format Specification786503
Node: Info Format Whole Manual788586
Node: Info Format Preamble789806
Node: Info Format Indirect Table790781
Node: Info Format Tag Table792350
Node: Info Format Local Variables793972
Node: Info Format Regular Nodes794460
Node: Info Format Menu796532
Node: Info Format Image797475
Node: Info Format Printindex798750
Node: Info Format Cross Reference800217
Node: GNU Free Documentation License802888
Node: Command and Variable Index828074
Node: General Index871676

End Tag Table


Local Variables:
coding: utf-8
End:
